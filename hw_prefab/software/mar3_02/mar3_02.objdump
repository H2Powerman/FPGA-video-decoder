
mar3_02.elf:     file format elf32-littlenios2
mar3_02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001e1e4 memsz 0x0001e1e4 flags r-x
    LOAD off    0x00020000 vaddr 0x00000000 paddr 0x2009e204 align 2**12
         filesz 0x00002a08 memsz 0x00003374 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001dfc4  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000be8  00000000  2009e204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e20  00000be8  2009edec  00020be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000096c  00002a08  200a0c0c  00022a08  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  00003374  00003374  00022a08  2**0
                  CONTENTS
  7 .sram         00000000  200a0c0c  200a0c0c  00022a08  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00022a08  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013d0  00000000  00000000  00022a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00033571  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ca26  00000000  00000000  00057371  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010dc6  00000000  00000000  00063d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003e60  00000000  00000000  00074b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005cb0  00000000  00000000  000789c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d414  00000000  00000000  0007e670  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0009ba84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  0009bae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a29d7  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000a29da  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a29dd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a29de  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a29df  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a29e3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a29e7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a29eb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a29f4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a29fd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a2a06  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  000a2a11  2**0
                  CONTENTS, READONLY
 30 .jdi          00005847  00000000  00000000  000a2a50  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0012d0f8  00000000  00000000  000a8297  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000be8 l    d  .rwdata	00000000 .rwdata
00002a08 l    d  .bss	00000000 .bss
00003374 l    d  .lpddr2	00000000 .lpddr2
200a0c0c l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mar3_02_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
000029b4 l     O .rwdata	00000004 count22
20082280 l     F .text	00000034 write_dma_isr
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00002a84 l     O .bss	00000140 fInfo.3428
00000000 l    df *ABS*	00000000 FatInternal.c
00002dc4 l     O .bss	00000200 szBlock.3473
00002bc4 l     O .bss	00000200 temp.3435
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 mmc.c
000002dc l     O .rodata	00000010 fbase
000002ec l     O .rodata	00000040 multipliers
20084c74 l     F .text	00000038 mmc_set_ios
20084cac l     F .text	00000040 mmc_set_bus_width
20084cec l     F .text	00000078 mmc_set_clock
20084d64 l     F .text	00000050 mmc_send_cmd
20084db4 l     F .text	00000070 mmc_go_idle
20084e24 l     F .text	000000b4 mmc_send_if_cond
20084ed8 l     F .text	00000164 sd_send_op_cond
2008503c l     F .text	0000016c mmc_send_op_cond
200851a8 l     F .text	00000118 mmc_send_status
200852c0 l     F .text	00000080 mmc_send_ext_csd
20085340 l     F .text	000000a8 mmc_switch
200853e8 l     F .text	000001e0 sd_switch
200855c8 l     F .text	00000388 sd_change_freq
00002a08 l     O .bss	00000008 scr.3318
00002fc4 l     O .bss	00000040 switch_status.3319
20085950 l     F .text	00000124 mmc_change_freq
20085a74 l     F .text	0000092c mmc_startup
200863a0 l     F .text	00000054 mmc_set_blocklen
200863f4 l     F .text	00000118 mmc_read_blocks
00000000 l    df *ABS*	00000000 ocsdc.c
200869a4 l     F .text	00000044 ocsdc_read
200869e8 l     F .text	00000050 ocsdc_write
20086a38 l     F .text	00000068 ocsdc_set_buswidth
20086aa0 l     F .text	00000130 ocsdc_set_clock
20086bd0 l     F .text	00000104 ocsdc_finish
20086cd4 l     F .text	0000006c ocsdc_data_finish
20086d40 l     F .text	00000110 ocsdc_setup_data_xfer
20086e50 l     F .text	000001cc ocsdc_send_cmd
2008701c l     F .text	000000a8 ocsdc_init
200870c4 l     F .text	0000006c ocsdc_set_ios
00000000 l    df *ABS*	00000000 sd_lib.c
00000000 l    df *ABS*	00000000 hw_vid_ctl.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
20088900 l     F .text	000000c0 peripheral_init
20088814 l     F .text	000000ec pio_functionality
200889c0 l     F .text	000000dc pio_isr
20088a9c l     F .text	00000038 timer_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
20088ad4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00000de8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007b2 l     O .rodata	00000010 zeroes.4240
000007c2 l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
000007d2 l     O .rodata	00000010 zeroes.4255
20090478 l     F .text	000000bc __sbprintf
000007e2 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
2009094c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20092508 l     F .text	00000008 __fp_lock
20092510 l     F .text	00000008 __fp_unlock
20092524 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00001634 l     O .rwdata	00000020 lc_ctype_charset
00001614 l     O .rwdata	00000020 lc_message_charset
00001654 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00000810 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000934 l     O .rodata	00000010 zeroes.4184
00000944 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
2009636c l     F .text	000000fc __sprint_r.part.0
00000964 l     O .rodata	00000010 blanks.4199
00000954 l     O .rodata	00000010 zeroes.4200
20097774 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 alt_close.c
200995e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
200997b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
20099818 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
20099ac8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
20099bbc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
20099ca0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
20099e7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000029f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
2009a31c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
2009a464 l     F .text	00000038 alt_dev_reg
00001834 l     O .rwdata	00001060 jtag_uart
00002894 l     O .rwdata	00000060 read_dma_0
000028f4 l     O .rwdata	00000060 video_dma
00002954 l     O .rwdata	00000060 write_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
2009a7ec l     F .text	00000204 altera_avalon_jtag_uart_irq
2009a9f0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
2009b150 l     F .text	00000050 alt_get_errno
2009b1a0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2009b234 l     F .text	0000012c alt_msgdma_write_extended_descriptor
2009b360 l     F .text	00000184 alt_msgdma_irq
2009b4e4 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
2009b570 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
2009b6c4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
2009b994 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
2009bfdc l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
2009c080 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2009d278 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2009d7b4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
2009d8ec l     F .text	00000050 alt_get_errno
2009d93c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
00002a80 g     O .bss	00000004 alt_instruction_exception_handler
2009cef0 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
2008c1e4 g     F .text	00000018 putchar
20094608 g     F .text	00000074 _mprec_log10
200881a4 g     F .text	00000100 I2C_Read
000029b8 g     O .rwdata	00000004 read_dma_name
200946f4 g     F .text	0000008c __any_on
20097e34 g     F .text	00000054 _isatty_r
0000081c g     O .rodata	00000028 __mprec_tinytens
20099dc4 g     F .text	00000078 alt_main
2008c1fc g     F .text	000000a8 _puts_r
200824bc g     F .text	0000006c Fat_FileBrowseBegin
00003274 g     O .bss	00000100 alt_irq
20097e88 g     F .text	0000005c _lseek_r
200822b4 g     F .text	0000012c ycbcr_to_rgb
2009edec g       *ABS*	00000000 __flash_rwdata_start
20098c78 g     F .text	00000084 .hidden __eqdf2
2009bdbc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
00003374 g       *ABS*	00000000 __alt_heap_start
2008c1a0 g     F .text	0000003c printf
20097f40 g     F .text	0000009c _wcrtomb_r
00000be8 g     O .rwdata	00000080 Yquant
20080000 g       *ABS*	00000000 __alt_mem_sram
20094fa0 g     F .text	0000005c __sseek
20092858 g     F .text	00000010 __sinit
20097830 g     F .text	00000138 __swbuf_r
20093304 g     F .text	0000007c _setlocale_r
200926c0 g     F .text	00000068 __sfmoreglue
20099e5c g     F .text	00000020 __malloc_unlock
20082528 g     F .text	0000042c Fat_FileBrowseNext
20088c00 g     F .text	00000450 .hidden __divsf3
00002a14 g     O .bss	00000004 exit_flag
00002a7c g     O .bss	00000004 altera_avalon_timer_ts_freq
20083fdc g     F .text	000000a8 fatIsValidDir
20093684 g     F .text	0000015c memmove
20092840 g     F .text	00000018 _cleanup
200937e0 g     F .text	000000a8 _Balloc
2009bd0c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
20098cfc g     F .text	000000e0 .hidden __gtdf2
2009ddcc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
000029bc g     O .rwdata	00000004 write_dma_name
200883a0 g     F .text	00000130 i2c_write
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
20097ddc g     F .text	00000058 _fstat_r
00002a50 g     O .bss	00000004 errno
20094f1c g     F .text	00000008 __seofread
20095334 g     F .text	00001038 ___svfiprintf_internal_r
20083a00 g     F .text	00000180 fatNextCluster
00002a68 g     O .bss	00000004 alt_argv
0000a9b4 g       *ABS*	00000000 _gp
2009a2ec g     F .text	00000030 usleep
2009a274 g     F .text	00000078 alt_uncached_malloc
2009c82c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
000016b4 g     O .rwdata	00000180 alt_fd_list
2008c1dc g     F .text	00000008 _putchar_r
2009d424 g     F .text	00000090 alt_find_dev
2008bf18 g     F .text	00000138 memcpy
20092518 g     F .text	0000000c _cleanup_r
2008b044 g     F .text	000000d0 .hidden __floatsidf
2009d874 g     F .text	00000078 alt_io_redirect
20098ddc g     F .text	000000e0 .hidden __ltdf2
2009e204 g       *ABS*	00000000 __DTOR_END__
2009cc4c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2009cf2c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2009ce9c g     F .text	00000054 alt_msgdma_register_callback
20082cac g     F .text	000000b0 Fat_FileExist
2008c2a4 g     F .text	00000014 puts
2009e040 g     F .text	0000009c alt_exception_cause_generated_bad_addr
20094e54 g     F .text	00000074 __fpclassifyd
20094564 g     F .text	000000a4 __ratio
00002a18 g     O .bss	00000004 skip_fw_flag
20097750 g     F .text	00000024 __vfiprintf_internal
2009abec g     F .text	0000020c altera_avalon_jtag_uart_read
2008b6cc g     F .text	00000014 malloc
2009c50c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
2008c174 g     F .text	0000002c _printf_r
20080e08 g     F .text	0000030c lossless_decode
20088bf0 g     F .text	00000008 .hidden __udivsi3
20099b18 g     F .text	000000a4 isatty
0000086c g     O .rodata	000000c8 __mprec_tens
20093380 g     F .text	0000000c __locale_charset
20090624 g     F .text	00000040 vsnprintf
2009dfb4 g     F .text	0000008c alt_icache_flush
00002a4c g     O .bss	00000004 __malloc_top_pad
000029d0 g     O .rwdata	00000004 __mb_cur_max
200933b0 g     F .text	0000000c _localeconv_r
20093bec g     F .text	0000003c __i2b
20092cbc g     F .text	000004c0 __sfvwrite_r
2008c2b8 g     F .text	00000054 _sbrk_r
20097ee4 g     F .text	0000005c _read_r
20099700 g     F .text	00000074 alt_dcache_flush
000029e8 g     O .rwdata	00000004 alt_max_fd
20087af0 g     F .text	000005dc hw_init_hdmi
00002a1c g     O .bss	00000004 skip_rv_flag
200845a4 g     F .text	00000358 fatMount
20097af8 g     F .text	000000f0 _fclose_r
200924d8 g     F .text	00000030 fflush
00002a48 g     O .bss	00000004 __malloc_max_sbrked_mem
20099918 g     F .text	000001b0 alt_irq_register
2008b1b8 g     F .text	00000110 .hidden __extendsfdf2
20089584 g     F .text	0000089c .hidden __adddf3
20084084 g     F .text	00000048 fatIsUnusedDir
2009430c g     F .text	0000011c __b2d
2009c26c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
200986e8 g     F .text	00000590 .hidden __umoddi3
200873f8 g     F .text	000002a4 hw_video_display_init
20099cf0 g     F .text	000000d4 lseek
20080390 g     F .text	000000f0 print_dct
000029c0 g     O .rwdata	00000004 _global_impure_ptr
200948ec g     F .text	00000568 _realloc_r
00003374 g       *ABS*	00000000 __bss_end
2009d6c4 g     F .text	000000f0 alt_iic_isr_register
2009a170 g     F .text	00000104 alt_tick
2009cd30 g     F .text	0000016c alt_msgdma_init
20098128 g     F .text	000005c0 .hidden __udivdi3
20097bfc g     F .text	00000184 _fputwc_r
00000844 g     O .rodata	00000028 __mprec_bigtens
200939d0 g     F .text	00000104 __s2b
2008b114 g     F .text	000000a4 .hidden __floatunsidf
20084938 g     F .text	00000044 SD_ReadBlocks
200940b4 g     F .text	00000060 __mcmp
00002a20 g     O .bss	00000008 null_execution
2009cfa4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
200848fc g     F .text	0000003c SD_ReadBlock512
20092878 g     F .text	00000018 __fp_lock_all
2009d678 g     F .text	0000004c alt_ic_irq_enabled
200880cc g     F .text	000000d8 I2C_Write
20082d5c g     F .text	00000220 Fat_FileOpen
2009a0d8 g     F .text	00000098 alt_alarm_stop
200813d4 g     F .text	00000114 input_AC
00002a60 g     O .bss	00000004 alt_irq_active
20083cf8 g     F .text	000001e8 fatDelClusterList
200814e8 g     F .text	0000087c mjpeg423_decode
200800fc g     F .exceptions	000000d0 alt_irq_handler
0000168c g     O .rwdata	00000028 alt_dev_null
2009bea4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
20082114 g     F .text	0000016c idct_test
200882a4 g     F .text	00000088 i2c_start
20081d64 g     F .text	00000298 idct_hw
2009cbc0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
2008c50c g     F .text	00000068 strrchr
20099774 g     F .text	00000044 alt_dcache_flush_all
20093ad4 g     F .text	00000068 __hi0bits
2008afbc g     F .text	00000088 .hidden __fixdfsi
20086960 g     F .text	00000044 flush_dcache_range
00002a08 g       *ABS*	00000000 __ram_rwdata_end
000029e0 g     O .rwdata	00000008 alt_dev_list
200823e0 g     F .text	00000034 Fat_Mount
2009a36c g     F .text	000000f8 write
20094780 g     F .text	000000a0 _putc_r
2009b128 g     F .text	00000028 alt_timestamp_freq
00000be8 g       *ABS*	00000000 __ram_rodata_end
20099868 g     F .text	000000b0 fstat
20098ddc g     F .text	000000e0 .hidden __ledf2
20084a98 g     F .text	0000006c myprintf
20093e24 g     F .text	00000140 __pow5mult
20096480 g     F .text	000012d0 ___vfiprintf_internal_r
00002a5c g     O .bss	00000004 __nlocale_changed
20088bf8 g     F .text	00000008 .hidden __umodsi3
2009c2c4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
00003374 g       *ABS*	00000000 end
2008650c g     F .text	00000118 mmc_init
2009a728 g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009e204 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
2008b460 g     F .text	00000064 .hidden __clzsi2
2009adf8 g     F .text	00000218 altera_avalon_jtag_uart_write
2008363c g     F .text	00000034 Fat_FileClose
20092868 g     F .text	00000004 __sfp_lock_acquire
20082954 g     F .text	0000006c Fat_FileCount
2009359c g     F .text	000000e8 memchr
2008e504 g     F .text	00001f50 ___vfprintf_internal_r
2008c30c g     F .text	00000058 _sprintf_r
200929cc g     F .text	000002f0 _free_r
2009db60 g     F .text	00000228 alt_printf
2009338c g     F .text	00000010 __locale_mb_cur_max
200907b8 g     F .text	00000194 __call_exitprocs
00002a58 g     O .bss	00000004 __mlocale_changed
000029c8 g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
00002a70 g     O .bss	00000004 _alt_tick_rate
200802b8 g     F .text	000000d8 print_block
20080480 g     F .text	000000ac print_bitstream
20093f64 g     F .text	00000150 __lshift
00002a74 g     O .bss	00000004 _alt_nticks
2009bd64 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
20099ecc g     F .text	000000fc read
2009a4d0 g     F .text	000000f4 alt_sys_init
20095168 g     F .text	000001cc __ssprint_r
2008769c g     F .text	00000054 hw_video_display_register_written_buffer
2009e0f0 g     F .text	00000114 __register_exitproc
20082f7c g     F .text	00000044 Fat_FileSize
20093c28 g     F .text	000001fc __multiply
2009aa98 g     F .text	00000068 altera_avalon_jtag_uart_close
00002a28 g     O .bss	00000008 time1
00000be8 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
20084c1c g     F .text	00000058 udelay
00003004 g     O .bss	00000028 __malloc_current_mallinfo
20094428 g     F .text	0000013c __d2b
2009a5c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2009df00 g     F .text	000000b4 alt_get_fd
2009d120 g     F .text	00000158 alt_busy_sleep
20087130 g     F .text	00000184 ocsdc_mmc_init
200979e0 g     F .text	00000054 _close_r
2009c214 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
20082fc0 g     F .text	0000057c Fat_FileRead
2008be9c g     F .text	0000007c memcmp
2009a684 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00003374 g       *ABS*	00000000 __alt_stack_base
2009a6d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008052c g     F .text	000008dc idct
20084494 g     F .text	00000110 fatFindUnusedDirectory
2009c31c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
20090664 g     F .text	00000154 __swsetup_r
20089e20 g     F .text	000008cc .hidden __divdf3
20092728 g     F .text	00000118 __sfp
2009467c g     F .text	00000078 __copybits
0000120c g     O .rwdata	00000408 __malloc_av_
20092874 g     F .text	00000004 __sinit_lock_release
200878a8 g     F .text	0000006c hw_video_display_clear_screen
20090534 g     F .text	000000f0 _vsnprintf_r
2008832c g     F .text	00000074 i2c_stop
20098ebc g     F .text	00000724 .hidden __muldf3
20094ec8 g     F .text	00000054 __sread
20083670 g     F .text	00000214 Fat_SpeedTest
2009ddec g     F .text	00000114 alt_find_file
2009d2c8 g     F .text	000000a4 alt_dev_llist_insert
20099e3c g     F .text	00000020 __malloc_lock
2009a028 g     F .text	000000b0 sbrk
2008c574 g     F .text	00001f90 ___svfprintf_internal_r
2009247c g     F .text	0000005c _fflush_r
20097a34 g     F .text	000000c4 _calloc_r
20082c04 g     F .text	00000074 Fat_CheckExtension
200843e8 g     F .text	000000ac fatFindDirectory
200812d8 g     F .text	000000fc input_DC
00002a08 g       *ABS*	00000000 __bss_start
2008c050 g     F .text	00000124 memset
2009ccd8 g     F .text	00000058 alt_msgdma_open
20088624 g     F .text	000001f0 main
200842ec g     F .text	00000090 fatReadSecter
00002a6c g     O .bss	00000004 alt_envp
00002a44 g     O .bss	00000004 __malloc_max_total_mem
2009c5fc g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
20084b04 g     F .text	00000088 myprintf_hexarray
2009a624 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
200884d0 g     F .text	00000154 i2c_read
20097968 g     F .text	0000001c __swbuf
20094ffc g     F .text	00000008 __sclose
200840cc g     F .text	00000198 fatDump
20000000 g       *ABS*	00000000 __alt_heap_limit
20097be8 g     F .text	00000014 fclose
2008b2c8 g     F .text	00000198 .hidden __truncdfsf2
2009b010 g     F .text	00000088 alt_timestamp_start
20090b4c g     F .text	00001728 _dtoa_r
2009c900 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
2008b6f4 g     F .text	000007a8 _malloc_r
2009809c g     F .text	00000030 __ascii_wctomb
000029ec g     O .rwdata	00000004 alt_errno
2009c454 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
2009317c g     F .text	000000c4 _fwalk
20083ee0 g     F .text	0000005c fatDumpDate
20094820 g     F .text	000000cc putc
2008353c g     F .text	00000100 Fat_FileSeek
20088b40 g     F .text	00000054 .hidden __divsi3
200928a8 g     F .text	00000124 _malloc_trim_r
2009e204 g       *ABS*	00000000 __CTOR_END__
20089050 g     F .text	00000424 .hidden __mulsf3
2008c3d0 g     F .text	000000a4 strcmp
2009e204 g       *ABS*	00000000 __flash_rodata_start
2009e204 g       *ABS*	00000000 __DTOR_LIST__
20084264 g     F .text	00000088 fatArray2Value
200867a8 g     F .text	000001b8 print_mmcinfo
20098c78 g     F .text	00000084 .hidden __nedf2
20083934 g     F .text	000000cc fat32ClusterType
00002a30 g     O .bss	00000004 push_button_flag
2009a49c g     F .text	00000034 alt_irq_init
20099fc8 g     F .text	00000060 alt_release_fd
2009cf68 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
00002a34 g     O .bss	00000004 timer_flag
2008b4fc g     F .text	0000001c memalign
2008c364 g     F .text	0000006c sprintf
00000668 g     O .rodata	00000100 .hidden __clz_tab
20084a68 g     F .text	00000030 debug_output
00002a54 g     O .bss	00000004 _PathLocale
2009e0dc g     F .text	00000014 atexit
20081ffc g     F .text	00000118 idct_hw_frame
20097984 g     F .text	0000005c _write_r
20082a54 g     F .text	000001b0 fatComposeShortFilename
200933bc g     F .text	0000001c setlocale
2009c3bc g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
000029c4 g     O .rwdata	00000004 _impure_ptr
00002a64 g     O .bss	00000004 alt_argc
20092274 g     F .text	00000208 __sflush_r
00002a78 g     O .bss	00000004 altera_avalon_timer_ts_base
2009d3c8 g     F .text	0000005c _do_dtors
200933a8 g     F .text	00000008 __locale_cjk_lang
20082450 g     F .text	0000006c Fat_Type
20084b8c g     F .text	00000090 myprintf_dwordarray
20086624 g     F .text	00000184 mmc_bread
00000ce8 g     O .rwdata	00000100 zigzag_table
20080020 g       .exceptions	00000000 alt_irq_entry
2008028c g     F .text	0000002c error_and_exit
200942ac g     F .text	00000060 __ulp
20092890 g     F .text	00000018 __fp_unlock_all
20083884 g     F .text	000000b0 fat16ClusterType
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
000029d8 g     O .rwdata	00000008 alt_fs_list
20087aac g     F .text	00000044 hw_video_display_get_buffer
20087914 g     F .text	00000030 hw_video_display_get_descriptor_span
2008437c g     F .text	0000006c fatReadMultiSecter
20080020 g       *ABS*	00000000 __ram_exceptions_start
200933d8 g     F .text	0000000c localeconv
2009b098 g     F .text	00000090 alt_timestamp
200829c0 g     F .text	00000094 fatSameLongFilename
2009d4e4 g     F .text	00000050 alt_ic_isr_register
00002a08 g       *ABS*	00000000 _edata
20083f3c g     F .text	0000005c fatDumpTime
20081114 g     F .text	000001c4 update_buffer
00003374 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
2009ab00 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
200876f0 g     F .text	0000005c hw_video_display_buffer_is_available
2009d5d4 g     F .text	000000a4 alt_ic_irq_disable
20094f24 g     F .text	0000007c __swrite
000029cc g     O .rwdata	00000004 __malloc_trim_threshold
2009339c g     F .text	0000000c __locale_msgcharset
2008b4c4 g     F .text	00000038 exit
2008497c g     F .text	000000ec fatMountSdcard
20093240 g     F .text	000000c4 _fwalk_reent
2009c794 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20089474 g     F .text	00000110 .hidden __floatunsisf
20094114 g     F .text	00000198 __mdiff
20088b94 g     F .text	0000005c .hidden __modsi3
2008b518 g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
2009286c g     F .text	00000004 __sfp_lock_release
2009bf34 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
200873a0 g     F .text	00000058 SDLIB_ReadBlocks
200872b4 g     F .text	00000098 SDLIB_Init
2009be14 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
200997e4 g     F .text	00000034 _exit
2009cfe0 g     F .text	00000140 alt_alarm_start
200933e4 g     F .text	000001b8 __smakebuf_r
00002a00 g     O .rwdata	00000008 alt_msgdma_list
2008c474 g     F .text	00000098 strlen
2008774c g     F .text	0000015c hw_video_display_switch_frames
00002a38 g     O .bss	00000008 time2
20087944 g     F .text	00000168 hw_video_display_allocate_buffers
2009da08 g     F .text	00000158 open
20098cfc g     F .text	000000e0 .hidden __gedf2
2009dd88 g     F .text	00000044 alt_putchar
000029d4 g     O .rwdata	00000004 __wctomb
20082c78 g     F .text	00000034 Fat_GetFileName
20096468 g     F .text	00000018 __sprint_r
2009d4b4 g     F .text	00000030 alt_icache_flush_all
20095004 g     F .text	00000164 strchr
000029f0 g     O .rwdata	00000004 alt_priority_mask
00000c68 g     O .rwdata	00000080 Cquant
2009d534 g     F .text	000000a0 alt_ic_irq_enable
20090454 g     F .text	00000024 __vfprintf_internal
20083b80 g     F .text	00000178 fatFindUnusedCluster
200980cc g     F .text	0000005c _wctomb_r
2008a6ec g     F .text	000008d0 .hidden __subdf3
00002a10 g     O .bss	00000004 sd_drv
20093b3c g     F .text	000000b0 __lo0bits
000029f8 g     O .rwdata	00000008 alt_alarm_list
2009d36c g     F .text	0000005c _do_ctors
00002a40 g     O .bss	00000004 play_flag
20097fdc g     F .text	000000c0 wcrtomb
20099630 g     F .text	000000d0 close
20082414 g     F .text	0000003c Fat_Unmount
20099c20 g     F .text	00000080 alt_load
0000302c g     O .bss	00000248 vInfo
20097d80 g     F .text	0000005c fputwc
2008b6e0 g     F .text	00000014 free
20092870 g     F .text	00000004 __sinit_lock_acquire
200938b0 g     F .text	00000120 __multadd
20083f98 g     F .text	00000044 fatIsLastDir
20093888 g     F .text	00000028 _Bfree
2008734c g     F .text	00000054 SDLIB_ReadBlock512



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffe1218>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	108c9d04 	addi	r2,r2,12916
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	108c9d04 	addi	r2,r2,12916
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffe1340>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffe1334>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a03317 	ldw	r2,-32564(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a03317 	ldw	r2,-32564(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffe1458>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6aa6d14 	ori	gp,gp,43444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	108a8214 	ori	r2,r2,10760

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18ccdd14 	ori	r3,r3,13172

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffe1488>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	0099c200 	call	20099c20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	0099dc40 	call	20099dc4 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffe149c>

2008028c <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
2008028c:	defffd04 	addi	sp,sp,-12
20080290:	dfc00215 	stw	ra,8(sp)
20080294:	df000115 	stw	fp,4(sp)
20080298:	df000104 	addi	fp,sp,4
2008029c:	e13fff15 	stw	r4,-4(fp)
    printf("Error: %s\n", str);
200802a0:	01000034 	movhi	r4,0
200802a4:	21000004 	addi	r4,r4,0
200802a8:	e17fff17 	ldw	r5,-4(fp)
200802ac:	008c1a00 	call	2008c1a0 <printf>
    exit(-1);
200802b0:	013fffc4 	movi	r4,-1
200802b4:	008b4c40 	call	2008b4c4 <exit>

200802b8 <print_block>:
}

void print_block(pcolor_block_t b)
{
200802b8:	defffb04 	addi	sp,sp,-20
200802bc:	dfc00415 	stw	ra,16(sp)
200802c0:	df000315 	stw	fp,12(sp)
200802c4:	df000304 	addi	fp,sp,12
200802c8:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200802cc:	e03ffd15 	stw	zero,-12(fp)
200802d0:	00002706 	br	20080370 <print_block+0xb8>
        for(int column = 0; column < 8; column++){
200802d4:	e03ffe15 	stw	zero,-8(fp)
200802d8:	00001f06 	br	20080358 <print_block+0xa0>
            if(column != 7) printf("%d,", b[row][column]);
200802dc:	e0bffe17 	ldw	r2,-8(fp)
200802e0:	108001e0 	cmpeqi	r2,r2,7
200802e4:	10000d1e 	bne	r2,zero,2008031c <print_block+0x64>
200802e8:	e0bffd17 	ldw	r2,-12(fp)
200802ec:	100490fa 	slli	r2,r2,3
200802f0:	e0ffff17 	ldw	r3,-4(fp)
200802f4:	1887883a 	add	r3,r3,r2
200802f8:	e0bffe17 	ldw	r2,-8(fp)
200802fc:	1885883a 	add	r2,r3,r2
20080300:	10800003 	ldbu	r2,0(r2)
20080304:	10803fcc 	andi	r2,r2,255
20080308:	01000034 	movhi	r4,0
2008030c:	21000304 	addi	r4,r4,12
20080310:	100b883a 	mov	r5,r2
20080314:	008c1a00 	call	2008c1a0 <printf>
20080318:	00000c06 	br	2008034c <print_block+0x94>
            else printf("%u\n", b[row][column]);
2008031c:	e0bffd17 	ldw	r2,-12(fp)
20080320:	100490fa 	slli	r2,r2,3
20080324:	e0ffff17 	ldw	r3,-4(fp)
20080328:	1887883a 	add	r3,r3,r2
2008032c:	e0bffe17 	ldw	r2,-8(fp)
20080330:	1885883a 	add	r2,r3,r2
20080334:	10800003 	ldbu	r2,0(r2)
20080338:	10803fcc 	andi	r2,r2,255
2008033c:	01000034 	movhi	r4,0
20080340:	21000404 	addi	r4,r4,16
20080344:	100b883a 	mov	r5,r2
20080348:	008c1a00 	call	2008c1a0 <printf>
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008034c:	e0bffe17 	ldw	r2,-8(fp)
20080350:	10800044 	addi	r2,r2,1
20080354:	e0bffe15 	stw	r2,-8(fp)
20080358:	e0bffe17 	ldw	r2,-8(fp)
2008035c:	10800210 	cmplti	r2,r2,8
20080360:	103fde1e 	bne	r2,zero,200802dc <__flash_rwdata_start+0xfffe14f0>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
20080364:	e0bffd17 	ldw	r2,-12(fp)
20080368:	10800044 	addi	r2,r2,1
2008036c:	e0bffd15 	stw	r2,-12(fp)
20080370:	e0bffd17 	ldw	r2,-12(fp)
20080374:	10800210 	cmplti	r2,r2,8
20080378:	103fd61e 	bne	r2,zero,200802d4 <__flash_rwdata_start+0xfffe14e8>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
2008037c:	e037883a 	mov	sp,fp
20080380:	dfc00117 	ldw	ra,4(sp)
20080384:	df000017 	ldw	fp,0(sp)
20080388:	dec00204 	addi	sp,sp,8
2008038c:	f800283a 	ret

20080390 <print_dct>:

void print_dct(pdct_block_t b)
{
20080390:	defffb04 	addi	sp,sp,-20
20080394:	dfc00415 	stw	ra,16(sp)
20080398:	df000315 	stw	fp,12(sp)
2008039c:	df000304 	addi	fp,sp,12
200803a0:	e13fff15 	stw	r4,-4(fp)
    for (int row = 0; row < 8; row++)
200803a4:	e03ffd15 	stw	zero,-12(fp)
200803a8:	00002d06 	br	20080460 <print_dct+0xd0>
        for(int column = 0; column < 8; column++){
200803ac:	e03ffe15 	stw	zero,-8(fp)
200803b0:	00002506 	br	20080448 <print_dct+0xb8>
            if(column != 7) printf("%d,", b[row][column]);
200803b4:	e0bffe17 	ldw	r2,-8(fp)
200803b8:	108001e0 	cmpeqi	r2,r2,7
200803bc:	1000101e 	bne	r2,zero,20080400 <print_dct+0x70>
200803c0:	e0bffd17 	ldw	r2,-12(fp)
200803c4:	1004913a 	slli	r2,r2,4
200803c8:	e0ffff17 	ldw	r3,-4(fp)
200803cc:	1887883a 	add	r3,r3,r2
200803d0:	e0bffe17 	ldw	r2,-8(fp)
200803d4:	1085883a 	add	r2,r2,r2
200803d8:	1885883a 	add	r2,r3,r2
200803dc:	1080000b 	ldhu	r2,0(r2)
200803e0:	10bfffcc 	andi	r2,r2,65535
200803e4:	10a0001c 	xori	r2,r2,32768
200803e8:	10a00004 	addi	r2,r2,-32768
200803ec:	01000034 	movhi	r4,0
200803f0:	21000304 	addi	r4,r4,12
200803f4:	100b883a 	mov	r5,r2
200803f8:	008c1a00 	call	2008c1a0 <printf>
200803fc:	00000f06 	br	2008043c <print_dct+0xac>
            else printf("%d\n", b[row][column]);
20080400:	e0bffd17 	ldw	r2,-12(fp)
20080404:	1004913a 	slli	r2,r2,4
20080408:	e0ffff17 	ldw	r3,-4(fp)
2008040c:	1887883a 	add	r3,r3,r2
20080410:	e0bffe17 	ldw	r2,-8(fp)
20080414:	1085883a 	add	r2,r2,r2
20080418:	1885883a 	add	r2,r3,r2
2008041c:	1080000b 	ldhu	r2,0(r2)
20080420:	10bfffcc 	andi	r2,r2,65535
20080424:	10a0001c 	xori	r2,r2,32768
20080428:	10a00004 	addi	r2,r2,-32768
2008042c:	01000034 	movhi	r4,0
20080430:	21000504 	addi	r4,r4,20
20080434:	100b883a 	mov	r5,r2
20080438:	008c1a00 	call	2008c1a0 <printf>
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
2008043c:	e0bffe17 	ldw	r2,-8(fp)
20080440:	10800044 	addi	r2,r2,1
20080444:	e0bffe15 	stw	r2,-8(fp)
20080448:	e0bffe17 	ldw	r2,-8(fp)
2008044c:	10800210 	cmplti	r2,r2,8
20080450:	103fd81e 	bne	r2,zero,200803b4 <__flash_rwdata_start+0xfffe15c8>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
20080454:	e0bffd17 	ldw	r2,-12(fp)
20080458:	10800044 	addi	r2,r2,1
2008045c:	e0bffd15 	stw	r2,-12(fp)
20080460:	e0bffd17 	ldw	r2,-12(fp)
20080464:	10800210 	cmplti	r2,r2,8
20080468:	103fd01e 	bne	r2,zero,200803ac <__flash_rwdata_start+0xfffe15c0>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
2008046c:	e037883a 	mov	sp,fp
20080470:	dfc00117 	ldw	ra,4(sp)
20080474:	df000017 	ldw	fp,0(sp)
20080478:	dec00204 	addi	sp,sp,8
2008047c:	f800283a 	ret

20080480 <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
20080480:	defffa04 	addi	sp,sp,-24
20080484:	dfc00515 	stw	ra,20(sp)
20080488:	df000415 	stw	fp,16(sp)
2008048c:	df000404 	addi	fp,sp,16
20080490:	e13ffe15 	stw	r4,-8(fp)
20080494:	e17fff15 	stw	r5,-4(fp)
    for (int index = 0; index < num_bytes; index++)
20080498:	e03ffc15 	stw	zero,-16(fp)
2008049c:	00001906 	br	20080504 <print_bitstream+0x84>
        for(int x = 0; x < 8 ; x++)
200804a0:	e03ffd15 	stw	zero,-12(fp)
200804a4:	00001106 	br	200804ec <print_bitstream+0x6c>
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200804a8:	e0bffc17 	ldw	r2,-16(fp)
200804ac:	e0ffff17 	ldw	r3,-4(fp)
200804b0:	1885883a 	add	r2,r3,r2
200804b4:	10800003 	ldbu	r2,0(r2)
200804b8:	10c03fcc 	andi	r3,r2,255
200804bc:	e0bffd17 	ldw	r2,-12(fp)
200804c0:	1884983a 	sll	r2,r3,r2
200804c4:	10803fcc 	andi	r2,r2,255
200804c8:	1004d1fa 	srli	r2,r2,7
200804cc:	10803fcc 	andi	r2,r2,255
200804d0:	01000034 	movhi	r4,0
200804d4:	21000604 	addi	r4,r4,24
200804d8:	100b883a 	mov	r5,r2
200804dc:	008c1a00 	call	2008c1a0 <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200804e0:	e0bffd17 	ldw	r2,-12(fp)
200804e4:	10800044 	addi	r2,r2,1
200804e8:	e0bffd15 	stw	r2,-12(fp)
200804ec:	e0bffd17 	ldw	r2,-12(fp)
200804f0:	10800210 	cmplti	r2,r2,8
200804f4:	103fec1e 	bne	r2,zero,200804a8 <__flash_rwdata_start+0xfffe16bc>
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
200804f8:	e0bffc17 	ldw	r2,-16(fp)
200804fc:	10800044 	addi	r2,r2,1
20080500:	e0bffc15 	stw	r2,-16(fp)
20080504:	e0fffc17 	ldw	r3,-16(fp)
20080508:	e0bffe17 	ldw	r2,-8(fp)
2008050c:	18bfe416 	blt	r3,r2,200804a0 <__flash_rwdata_start+0xfffe16b4>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
20080510:	01000284 	movi	r4,10
20080514:	008c1e40 	call	2008c1e4 <putchar>
}
20080518:	e037883a 	mov	sp,fp
2008051c:	dfc00117 	ldw	ra,4(sp)
20080520:	df000017 	ldw	fp,0(sp)
20080524:	dec00204 	addi	sp,sp,8
20080528:	f800283a 	ret

2008052c <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
2008052c:	deffab04 	addi	sp,sp,-340
20080530:	df005415 	stw	fp,336(sp)
20080534:	df005404 	addi	fp,sp,336
20080538:	e13ffe15 	stw	r4,-8(fp)
2008053c:	e17fff15 	stw	r5,-4(fp)
    
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
20080540:	e0bffe17 	ldw	r2,-8(fp)
20080544:	e0bfac15 	stw	r2,-336(fp)
    wsptr = workspace;
20080548:	e0bfbe04 	addi	r2,fp,-264
2008054c:	e0bfad15 	stw	r2,-332(fp)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
20080550:	00800204 	movi	r2,8
20080554:	e0bfae15 	stw	r2,-328(fp)
20080558:	0000f506 	br	20080930 <idct+0x404>
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
2008055c:	e0bfac17 	ldw	r2,-336(fp)
20080560:	10800804 	addi	r2,r2,32
20080564:	1080000b 	ldhu	r2,0(r2)
20080568:	10bfffcc 	andi	r2,r2,65535
2008056c:	10a0001c 	xori	r2,r2,32768
20080570:	10a00004 	addi	r2,r2,-32768
20080574:	e0bfaf15 	stw	r2,-324(fp)
        z3 = inptr[DCTSIZE*6];
20080578:	e0bfac17 	ldw	r2,-336(fp)
2008057c:	10801804 	addi	r2,r2,96
20080580:	1080000b 	ldhu	r2,0(r2)
20080584:	10bfffcc 	andi	r2,r2,65535
20080588:	10a0001c 	xori	r2,r2,32768
2008058c:	10a00004 	addi	r2,r2,-32768
20080590:	e0bfb015 	stw	r2,-320(fp)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080594:	e0ffaf17 	ldw	r3,-324(fp)
20080598:	e0bfb017 	ldw	r2,-320(fp)
2008059c:	1885883a 	add	r2,r3,r2
200805a0:	10845464 	muli	r2,r2,4433
200805a4:	e0bfb115 	stw	r2,-316(fp)
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
200805a8:	e0bfb017 	ldw	r2,-320(fp)
200805ac:	10f137e4 	muli	r3,r2,-15137
200805b0:	e0bfb117 	ldw	r2,-316(fp)
200805b4:	1885883a 	add	r2,r3,r2
200805b8:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
200805bc:	e0bfaf17 	ldw	r2,-324(fp)
200805c0:	10c61fa4 	muli	r3,r2,6270
200805c4:	e0bfb117 	ldw	r2,-316(fp)
200805c8:	1885883a 	add	r2,r3,r2
200805cc:	e0bfb315 	stw	r2,-308(fp)
        
        z2 = inptr[DCTSIZE*0];
200805d0:	e0bfac17 	ldw	r2,-336(fp)
200805d4:	1080000b 	ldhu	r2,0(r2)
200805d8:	10bfffcc 	andi	r2,r2,65535
200805dc:	10a0001c 	xori	r2,r2,32768
200805e0:	10a00004 	addi	r2,r2,-32768
200805e4:	e0bfaf15 	stw	r2,-324(fp)
        z3 = inptr[DCTSIZE*4];
200805e8:	e0bfac17 	ldw	r2,-336(fp)
200805ec:	10801004 	addi	r2,r2,64
200805f0:	1080000b 	ldhu	r2,0(r2)
200805f4:	10bfffcc 	andi	r2,r2,65535
200805f8:	10a0001c 	xori	r2,r2,32768
200805fc:	10a00004 	addi	r2,r2,-32768
20080600:	e0bfb015 	stw	r2,-320(fp)
        
        tmp0 = (z2 + z3) << CONST_BITS;
20080604:	e0ffaf17 	ldw	r3,-324(fp)
20080608:	e0bfb017 	ldw	r2,-320(fp)
2008060c:	1885883a 	add	r2,r3,r2
20080610:	1004937a 	slli	r2,r2,13
20080614:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = (z2 - z3) << CONST_BITS;
20080618:	e0ffaf17 	ldw	r3,-324(fp)
2008061c:	e0bfb017 	ldw	r2,-320(fp)
20080620:	1885c83a 	sub	r2,r3,r2
20080624:	1004937a 	slli	r2,r2,13
20080628:	e0bfb515 	stw	r2,-300(fp)
        
        tmp10 = tmp0 + tmp3;
2008062c:	e0ffb417 	ldw	r3,-304(fp)
20080630:	e0bfb317 	ldw	r2,-308(fp)
20080634:	1885883a 	add	r2,r3,r2
20080638:	e0bfb615 	stw	r2,-296(fp)
        tmp13 = tmp0 - tmp3;
2008063c:	e0ffb417 	ldw	r3,-304(fp)
20080640:	e0bfb317 	ldw	r2,-308(fp)
20080644:	1885c83a 	sub	r2,r3,r2
20080648:	e0bfb715 	stw	r2,-292(fp)
        tmp11 = tmp1 + tmp2;
2008064c:	e0ffb517 	ldw	r3,-300(fp)
20080650:	e0bfb217 	ldw	r2,-312(fp)
20080654:	1885883a 	add	r2,r3,r2
20080658:	e0bfb815 	stw	r2,-288(fp)
        tmp12 = tmp1 - tmp2;
2008065c:	e0ffb517 	ldw	r3,-300(fp)
20080660:	e0bfb217 	ldw	r2,-312(fp)
20080664:	1885c83a 	sub	r2,r3,r2
20080668:	e0bfb915 	stw	r2,-284(fp)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
2008066c:	e0bfac17 	ldw	r2,-336(fp)
20080670:	10801c04 	addi	r2,r2,112
20080674:	1080000b 	ldhu	r2,0(r2)
20080678:	10bfffcc 	andi	r2,r2,65535
2008067c:	10a0001c 	xori	r2,r2,32768
20080680:	10a00004 	addi	r2,r2,-32768
20080684:	e0bfb415 	stw	r2,-304(fp)
        tmp1 =inptr[DCTSIZE*5];
20080688:	e0bfac17 	ldw	r2,-336(fp)
2008068c:	10801404 	addi	r2,r2,80
20080690:	1080000b 	ldhu	r2,0(r2)
20080694:	10bfffcc 	andi	r2,r2,65535
20080698:	10a0001c 	xori	r2,r2,32768
2008069c:	10a00004 	addi	r2,r2,-32768
200806a0:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = inptr[DCTSIZE*3];
200806a4:	e0bfac17 	ldw	r2,-336(fp)
200806a8:	10800c04 	addi	r2,r2,48
200806ac:	1080000b 	ldhu	r2,0(r2)
200806b0:	10bfffcc 	andi	r2,r2,65535
200806b4:	10a0001c 	xori	r2,r2,32768
200806b8:	10a00004 	addi	r2,r2,-32768
200806bc:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = inptr[DCTSIZE*1];
200806c0:	e0bfac17 	ldw	r2,-336(fp)
200806c4:	10800404 	addi	r2,r2,16
200806c8:	1080000b 	ldhu	r2,0(r2)
200806cc:	10bfffcc 	andi	r2,r2,65535
200806d0:	10a0001c 	xori	r2,r2,32768
200806d4:	10a00004 	addi	r2,r2,-32768
200806d8:	e0bfb315 	stw	r2,-308(fp)
        
        z1 = tmp0 + tmp3;
200806dc:	e0ffb417 	ldw	r3,-304(fp)
200806e0:	e0bfb317 	ldw	r2,-308(fp)
200806e4:	1885883a 	add	r2,r3,r2
200806e8:	e0bfb115 	stw	r2,-316(fp)
        z2 = tmp1 + tmp2;
200806ec:	e0ffb517 	ldw	r3,-300(fp)
200806f0:	e0bfb217 	ldw	r2,-312(fp)
200806f4:	1885883a 	add	r2,r3,r2
200806f8:	e0bfaf15 	stw	r2,-324(fp)
        z3 = tmp0 + tmp2;
200806fc:	e0ffb417 	ldw	r3,-304(fp)
20080700:	e0bfb217 	ldw	r2,-312(fp)
20080704:	1885883a 	add	r2,r3,r2
20080708:	e0bfb015 	stw	r2,-320(fp)
        z4 = tmp1 + tmp3;
2008070c:	e0ffb517 	ldw	r3,-300(fp)
20080710:	e0bfb317 	ldw	r2,-308(fp)
20080714:	1885883a 	add	r2,r3,r2
20080718:	e0bfba15 	stw	r2,-280(fp)
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
2008071c:	e0ffb017 	ldw	r3,-320(fp)
20080720:	e0bfba17 	ldw	r2,-280(fp)
20080724:	1885883a 	add	r2,r3,r2
20080728:	10896864 	muli	r2,r2,9633
2008072c:	e0bfbb15 	stw	r2,-276(fp)
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080730:	e0bfb417 	ldw	r2,-304(fp)
20080734:	108263a4 	muli	r2,r2,2446
20080738:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
2008073c:	e0bfb517 	ldw	r2,-300(fp)
20080740:	10906ce4 	muli	r2,r2,16819
20080744:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080748:	e0bfb217 	ldw	r2,-312(fp)
2008074c:	10989524 	muli	r2,r2,25172
20080750:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080754:	e0bfb317 	ldw	r2,-308(fp)
20080758:	108c02e4 	muli	r2,r2,12299
2008075c:	e0bfb315 	stw	r2,-308(fp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
20080760:	e0bfb117 	ldw	r2,-316(fp)
20080764:	10b8cce4 	muli	r2,r2,-7373
20080768:	e0bfb115 	stw	r2,-316(fp)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
2008076c:	e0bfaf17 	ldw	r2,-324(fp)
20080770:	10ab7f64 	muli	r2,r2,-20995
20080774:	e0bfaf15 	stw	r2,-324(fp)
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
20080778:	e0bfb017 	ldw	r2,-320(fp)
2008077c:	10b04ee4 	muli	r2,r2,-16069
20080780:	e0bfb015 	stw	r2,-320(fp)
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
20080784:	e0bfba17 	ldw	r2,-280(fp)
20080788:	10bce124 	muli	r2,r2,-3196
2008078c:	e0bfba15 	stw	r2,-280(fp)
        
        z3 += z5;
20080790:	e0ffb017 	ldw	r3,-320(fp)
20080794:	e0bfbb17 	ldw	r2,-276(fp)
20080798:	1885883a 	add	r2,r3,r2
2008079c:	e0bfb015 	stw	r2,-320(fp)
        z4 += z5;
200807a0:	e0ffba17 	ldw	r3,-280(fp)
200807a4:	e0bfbb17 	ldw	r2,-276(fp)
200807a8:	1885883a 	add	r2,r3,r2
200807ac:	e0bfba15 	stw	r2,-280(fp)
        
        tmp0 += z1 + z3;
200807b0:	e0ffb117 	ldw	r3,-316(fp)
200807b4:	e0bfb017 	ldw	r2,-320(fp)
200807b8:	1885883a 	add	r2,r3,r2
200807bc:	e0ffb417 	ldw	r3,-304(fp)
200807c0:	1885883a 	add	r2,r3,r2
200807c4:	e0bfb415 	stw	r2,-304(fp)
        tmp1 += z2 + z4;
200807c8:	e0ffaf17 	ldw	r3,-324(fp)
200807cc:	e0bfba17 	ldw	r2,-280(fp)
200807d0:	1885883a 	add	r2,r3,r2
200807d4:	e0ffb517 	ldw	r3,-300(fp)
200807d8:	1885883a 	add	r2,r3,r2
200807dc:	e0bfb515 	stw	r2,-300(fp)
        tmp2 += z2 + z3;
200807e0:	e0ffaf17 	ldw	r3,-324(fp)
200807e4:	e0bfb017 	ldw	r2,-320(fp)
200807e8:	1885883a 	add	r2,r3,r2
200807ec:	e0ffb217 	ldw	r3,-312(fp)
200807f0:	1885883a 	add	r2,r3,r2
200807f4:	e0bfb215 	stw	r2,-312(fp)
        tmp3 += z1 + z4;
200807f8:	e0ffb117 	ldw	r3,-316(fp)
200807fc:	e0bfba17 	ldw	r2,-280(fp)
20080800:	1885883a 	add	r2,r3,r2
20080804:	e0ffb317 	ldw	r3,-308(fp)
20080808:	1885883a 	add	r2,r3,r2
2008080c:	e0bfb315 	stw	r2,-308(fp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080810:	e0ffb617 	ldw	r3,-296(fp)
20080814:	e0bfb317 	ldw	r2,-308(fp)
20080818:	1885883a 	add	r2,r3,r2
2008081c:	10810004 	addi	r2,r2,1024
20080820:	1007d2fa 	srai	r3,r2,11
20080824:	e0bfad17 	ldw	r2,-332(fp)
20080828:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008082c:	e0bfad17 	ldw	r2,-332(fp)
20080830:	10803804 	addi	r2,r2,224
20080834:	e13fb617 	ldw	r4,-296(fp)
20080838:	e0ffb317 	ldw	r3,-308(fp)
2008083c:	20c7c83a 	sub	r3,r4,r3
20080840:	18c10004 	addi	r3,r3,1024
20080844:	1807d2fa 	srai	r3,r3,11
20080848:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
2008084c:	e0bfad17 	ldw	r2,-332(fp)
20080850:	10800804 	addi	r2,r2,32
20080854:	e13fb817 	ldw	r4,-288(fp)
20080858:	e0ffb217 	ldw	r3,-312(fp)
2008085c:	20c7883a 	add	r3,r4,r3
20080860:	18c10004 	addi	r3,r3,1024
20080864:	1807d2fa 	srai	r3,r3,11
20080868:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008086c:	e0bfad17 	ldw	r2,-332(fp)
20080870:	10803004 	addi	r2,r2,192
20080874:	e13fb817 	ldw	r4,-288(fp)
20080878:	e0ffb217 	ldw	r3,-312(fp)
2008087c:	20c7c83a 	sub	r3,r4,r3
20080880:	18c10004 	addi	r3,r3,1024
20080884:	1807d2fa 	srai	r3,r3,11
20080888:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
2008088c:	e0bfad17 	ldw	r2,-332(fp)
20080890:	10801004 	addi	r2,r2,64
20080894:	e13fb917 	ldw	r4,-284(fp)
20080898:	e0ffb517 	ldw	r3,-300(fp)
2008089c:	20c7883a 	add	r3,r4,r3
200808a0:	18c10004 	addi	r3,r3,1024
200808a4:	1807d2fa 	srai	r3,r3,11
200808a8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200808ac:	e0bfad17 	ldw	r2,-332(fp)
200808b0:	10802804 	addi	r2,r2,160
200808b4:	e13fb917 	ldw	r4,-284(fp)
200808b8:	e0ffb517 	ldw	r3,-300(fp)
200808bc:	20c7c83a 	sub	r3,r4,r3
200808c0:	18c10004 	addi	r3,r3,1024
200808c4:	1807d2fa 	srai	r3,r3,11
200808c8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200808cc:	e0bfad17 	ldw	r2,-332(fp)
200808d0:	10801804 	addi	r2,r2,96
200808d4:	e13fb717 	ldw	r4,-292(fp)
200808d8:	e0ffb417 	ldw	r3,-304(fp)
200808dc:	20c7883a 	add	r3,r4,r3
200808e0:	18c10004 	addi	r3,r3,1024
200808e4:	1807d2fa 	srai	r3,r3,11
200808e8:	10c00015 	stw	r3,0(r2)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
200808ec:	e0bfad17 	ldw	r2,-332(fp)
200808f0:	10802004 	addi	r2,r2,128
200808f4:	e13fb717 	ldw	r4,-292(fp)
200808f8:	e0ffb417 	ldw	r3,-304(fp)
200808fc:	20c7c83a 	sub	r3,r4,r3
20080900:	18c10004 	addi	r3,r3,1024
20080904:	1807d2fa 	srai	r3,r3,11
20080908:	10c00015 	stw	r3,0(r2)
        
        inptr++;			/* advance pointers to next column */
2008090c:	e0bfac17 	ldw	r2,-336(fp)
20080910:	10800084 	addi	r2,r2,2
20080914:	e0bfac15 	stw	r2,-336(fp)
        wsptr++;
20080918:	e0bfad17 	ldw	r2,-332(fp)
2008091c:	10800104 	addi	r2,r2,4
20080920:	e0bfad15 	stw	r2,-332(fp)
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
20080924:	e0bfae17 	ldw	r2,-328(fp)
20080928:	10bfffc4 	addi	r2,r2,-1
2008092c:	e0bfae15 	stw	r2,-328(fp)
20080930:	e0bfae17 	ldw	r2,-328(fp)
20080934:	00bf0916 	blt	zero,r2,2008055c <__flash_rwdata_start+0xfffe1770>
    
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
20080938:	e0bfbe04 	addi	r2,fp,-264
2008093c:	e0bfad15 	stw	r2,-332(fp)
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
20080940:	e03fae15 	stw	zero,-328(fp)
20080944:	00012906 	br	20080dec <idct+0x8c0>
        outptr = block[ctr];
20080948:	e0bfae17 	ldw	r2,-328(fp)
2008094c:	100490fa 	slli	r2,r2,3
20080950:	e0ffff17 	ldw	r3,-4(fp)
20080954:	1885883a 	add	r2,r3,r2
20080958:	e0bfbc15 	stw	r2,-272(fp)
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
2008095c:	e0bfad17 	ldw	r2,-332(fp)
20080960:	10800217 	ldw	r2,8(r2)
20080964:	e0bfaf15 	stw	r2,-324(fp)
        z3 = (int32_t) wsptr[6];
20080968:	e0bfad17 	ldw	r2,-332(fp)
2008096c:	10800617 	ldw	r2,24(r2)
20080970:	e0bfb015 	stw	r2,-320(fp)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080974:	e0ffaf17 	ldw	r3,-324(fp)
20080978:	e0bfb017 	ldw	r2,-320(fp)
2008097c:	1885883a 	add	r2,r3,r2
20080980:	10845464 	muli	r2,r2,4433
20080984:	e0bfb115 	stw	r2,-316(fp)
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
20080988:	e0bfb017 	ldw	r2,-320(fp)
2008098c:	10f137e4 	muli	r3,r2,-15137
20080990:	e0bfb117 	ldw	r2,-316(fp)
20080994:	1885883a 	add	r2,r3,r2
20080998:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
2008099c:	e0bfaf17 	ldw	r2,-324(fp)
200809a0:	10c61fa4 	muli	r3,r2,6270
200809a4:	e0bfb117 	ldw	r2,-316(fp)
200809a8:	1885883a 	add	r2,r3,r2
200809ac:	e0bfb315 	stw	r2,-308(fp)
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200809b0:	e0bfad17 	ldw	r2,-332(fp)
200809b4:	10c00017 	ldw	r3,0(r2)
200809b8:	e0bfad17 	ldw	r2,-332(fp)
200809bc:	10800404 	addi	r2,r2,16
200809c0:	10800017 	ldw	r2,0(r2)
200809c4:	1885883a 	add	r2,r3,r2
200809c8:	1004937a 	slli	r2,r2,13
200809cc:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
200809d0:	e0bfad17 	ldw	r2,-332(fp)
200809d4:	10c00017 	ldw	r3,0(r2)
200809d8:	e0bfad17 	ldw	r2,-332(fp)
200809dc:	10800404 	addi	r2,r2,16
200809e0:	10800017 	ldw	r2,0(r2)
200809e4:	1885c83a 	sub	r2,r3,r2
200809e8:	1004937a 	slli	r2,r2,13
200809ec:	e0bfb515 	stw	r2,-300(fp)
        
        tmp10 = tmp0 + tmp3;
200809f0:	e0ffb417 	ldw	r3,-304(fp)
200809f4:	e0bfb317 	ldw	r2,-308(fp)
200809f8:	1885883a 	add	r2,r3,r2
200809fc:	e0bfb615 	stw	r2,-296(fp)
        tmp13 = tmp0 - tmp3;
20080a00:	e0ffb417 	ldw	r3,-304(fp)
20080a04:	e0bfb317 	ldw	r2,-308(fp)
20080a08:	1885c83a 	sub	r2,r3,r2
20080a0c:	e0bfb715 	stw	r2,-292(fp)
        tmp11 = tmp1 + tmp2;
20080a10:	e0ffb517 	ldw	r3,-300(fp)
20080a14:	e0bfb217 	ldw	r2,-312(fp)
20080a18:	1885883a 	add	r2,r3,r2
20080a1c:	e0bfb815 	stw	r2,-288(fp)
        tmp12 = tmp1 - tmp2;
20080a20:	e0ffb517 	ldw	r3,-300(fp)
20080a24:	e0bfb217 	ldw	r2,-312(fp)
20080a28:	1885c83a 	sub	r2,r3,r2
20080a2c:	e0bfb915 	stw	r2,-284(fp)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
20080a30:	e0bfad17 	ldw	r2,-332(fp)
20080a34:	10800717 	ldw	r2,28(r2)
20080a38:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = (int32_t) wsptr[5];
20080a3c:	e0bfad17 	ldw	r2,-332(fp)
20080a40:	10800517 	ldw	r2,20(r2)
20080a44:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = (int32_t) wsptr[3];
20080a48:	e0bfad17 	ldw	r2,-332(fp)
20080a4c:	10800317 	ldw	r2,12(r2)
20080a50:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = (int32_t) wsptr[1];
20080a54:	e0bfad17 	ldw	r2,-332(fp)
20080a58:	10800117 	ldw	r2,4(r2)
20080a5c:	e0bfb315 	stw	r2,-308(fp)
        
        z1 = tmp0 + tmp3;
20080a60:	e0ffb417 	ldw	r3,-304(fp)
20080a64:	e0bfb317 	ldw	r2,-308(fp)
20080a68:	1885883a 	add	r2,r3,r2
20080a6c:	e0bfb115 	stw	r2,-316(fp)
        z2 = tmp1 + tmp2;
20080a70:	e0ffb517 	ldw	r3,-300(fp)
20080a74:	e0bfb217 	ldw	r2,-312(fp)
20080a78:	1885883a 	add	r2,r3,r2
20080a7c:	e0bfaf15 	stw	r2,-324(fp)
        z3 = tmp0 + tmp2;
20080a80:	e0ffb417 	ldw	r3,-304(fp)
20080a84:	e0bfb217 	ldw	r2,-312(fp)
20080a88:	1885883a 	add	r2,r3,r2
20080a8c:	e0bfb015 	stw	r2,-320(fp)
        z4 = tmp1 + tmp3;
20080a90:	e0ffb517 	ldw	r3,-300(fp)
20080a94:	e0bfb317 	ldw	r2,-308(fp)
20080a98:	1885883a 	add	r2,r3,r2
20080a9c:	e0bfba15 	stw	r2,-280(fp)
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
20080aa0:	e0ffb017 	ldw	r3,-320(fp)
20080aa4:	e0bfba17 	ldw	r2,-280(fp)
20080aa8:	1885883a 	add	r2,r3,r2
20080aac:	10896864 	muli	r2,r2,9633
20080ab0:	e0bfbb15 	stw	r2,-276(fp)
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080ab4:	e0bfb417 	ldw	r2,-304(fp)
20080ab8:	108263a4 	muli	r2,r2,2446
20080abc:	e0bfb415 	stw	r2,-304(fp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080ac0:	e0bfb517 	ldw	r2,-300(fp)
20080ac4:	10906ce4 	muli	r2,r2,16819
20080ac8:	e0bfb515 	stw	r2,-300(fp)
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080acc:	e0bfb217 	ldw	r2,-312(fp)
20080ad0:	10989524 	muli	r2,r2,25172
20080ad4:	e0bfb215 	stw	r2,-312(fp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080ad8:	e0bfb317 	ldw	r2,-308(fp)
20080adc:	108c02e4 	muli	r2,r2,12299
20080ae0:	e0bfb315 	stw	r2,-308(fp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
20080ae4:	e0bfb117 	ldw	r2,-316(fp)
20080ae8:	10b8cce4 	muli	r2,r2,-7373
20080aec:	e0bfb115 	stw	r2,-316(fp)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
20080af0:	e0bfaf17 	ldw	r2,-324(fp)
20080af4:	10ab7f64 	muli	r2,r2,-20995
20080af8:	e0bfaf15 	stw	r2,-324(fp)
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
20080afc:	e0bfb017 	ldw	r2,-320(fp)
20080b00:	10b04ee4 	muli	r2,r2,-16069
20080b04:	e0bfb015 	stw	r2,-320(fp)
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
20080b08:	e0bfba17 	ldw	r2,-280(fp)
20080b0c:	10bce124 	muli	r2,r2,-3196
20080b10:	e0bfba15 	stw	r2,-280(fp)
        
        z3 += z5;
20080b14:	e0ffb017 	ldw	r3,-320(fp)
20080b18:	e0bfbb17 	ldw	r2,-276(fp)
20080b1c:	1885883a 	add	r2,r3,r2
20080b20:	e0bfb015 	stw	r2,-320(fp)
        z4 += z5;
20080b24:	e0ffba17 	ldw	r3,-280(fp)
20080b28:	e0bfbb17 	ldw	r2,-276(fp)
20080b2c:	1885883a 	add	r2,r3,r2
20080b30:	e0bfba15 	stw	r2,-280(fp)
        
        tmp0 += z1 + z3;
20080b34:	e0ffb117 	ldw	r3,-316(fp)
20080b38:	e0bfb017 	ldw	r2,-320(fp)
20080b3c:	1885883a 	add	r2,r3,r2
20080b40:	e0ffb417 	ldw	r3,-304(fp)
20080b44:	1885883a 	add	r2,r3,r2
20080b48:	e0bfb415 	stw	r2,-304(fp)
        tmp1 += z2 + z4;
20080b4c:	e0ffaf17 	ldw	r3,-324(fp)
20080b50:	e0bfba17 	ldw	r2,-280(fp)
20080b54:	1885883a 	add	r2,r3,r2
20080b58:	e0ffb517 	ldw	r3,-300(fp)
20080b5c:	1885883a 	add	r2,r3,r2
20080b60:	e0bfb515 	stw	r2,-300(fp)
        tmp2 += z2 + z3;
20080b64:	e0ffaf17 	ldw	r3,-324(fp)
20080b68:	e0bfb017 	ldw	r2,-320(fp)
20080b6c:	1885883a 	add	r2,r3,r2
20080b70:	e0ffb217 	ldw	r3,-312(fp)
20080b74:	1885883a 	add	r2,r3,r2
20080b78:	e0bfb215 	stw	r2,-312(fp)
        tmp3 += z1 + z4;
20080b7c:	e0ffb117 	ldw	r3,-316(fp)
20080b80:	e0bfba17 	ldw	r2,-280(fp)
20080b84:	1885883a 	add	r2,r3,r2
20080b88:	e0ffb317 	ldw	r3,-308(fp)
20080b8c:	1885883a 	add	r2,r3,r2
20080b90:	e0bfb315 	stw	r2,-308(fp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080b94:	e0ffb617 	ldw	r3,-296(fp)
20080b98:	e0bfb317 	ldw	r2,-308(fp)
20080b9c:	1887883a 	add	r3,r3,r2
20080ba0:	008000b4 	movhi	r2,2
20080ba4:	1885883a 	add	r2,r3,r2
20080ba8:	1005d4ba 	srai	r2,r2,18
20080bac:	e0bfbd15 	stw	r2,-268(fp)
20080bb0:	e0bfbd17 	ldw	r2,-268(fp)
20080bb4:	10000616 	blt	r2,zero,20080bd0 <idct+0x6a4>
20080bb8:	e0bfbd17 	ldw	r2,-268(fp)
20080bbc:	10c04010 	cmplti	r3,r2,256
20080bc0:	1800011e 	bne	r3,zero,20080bc8 <idct+0x69c>
20080bc4:	00803fc4 	movi	r2,255
20080bc8:	1007883a 	mov	r3,r2
20080bcc:	00000106 	br	20080bd4 <idct+0x6a8>
20080bd0:	0007883a 	mov	r3,zero
20080bd4:	e0bfbc17 	ldw	r2,-272(fp)
20080bd8:	10c00005 	stb	r3,0(r2)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080bdc:	e0ffb617 	ldw	r3,-296(fp)
20080be0:	e0bfb317 	ldw	r2,-308(fp)
20080be4:	1887c83a 	sub	r3,r3,r2
20080be8:	008000b4 	movhi	r2,2
20080bec:	1885883a 	add	r2,r3,r2
20080bf0:	1005d4ba 	srai	r2,r2,18
20080bf4:	e0bfbd15 	stw	r2,-268(fp)
20080bf8:	e0bfbc17 	ldw	r2,-272(fp)
20080bfc:	10c001c4 	addi	r3,r2,7
20080c00:	e0bfbd17 	ldw	r2,-268(fp)
20080c04:	10000516 	blt	r2,zero,20080c1c <idct+0x6f0>
20080c08:	e0bfbd17 	ldw	r2,-268(fp)
20080c0c:	11004010 	cmplti	r4,r2,256
20080c10:	2000011e 	bne	r4,zero,20080c18 <idct+0x6ec>
20080c14:	00803fc4 	movi	r2,255
20080c18:	00000106 	br	20080c20 <idct+0x6f4>
20080c1c:	0005883a 	mov	r2,zero
20080c20:	18800005 	stb	r2,0(r3)
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080c24:	e0ffb817 	ldw	r3,-288(fp)
20080c28:	e0bfb217 	ldw	r2,-312(fp)
20080c2c:	1887883a 	add	r3,r3,r2
20080c30:	008000b4 	movhi	r2,2
20080c34:	1885883a 	add	r2,r3,r2
20080c38:	1005d4ba 	srai	r2,r2,18
20080c3c:	e0bfbd15 	stw	r2,-268(fp)
20080c40:	e0bfbc17 	ldw	r2,-272(fp)
20080c44:	10c00044 	addi	r3,r2,1
20080c48:	e0bfbd17 	ldw	r2,-268(fp)
20080c4c:	10000516 	blt	r2,zero,20080c64 <idct+0x738>
20080c50:	e0bfbd17 	ldw	r2,-268(fp)
20080c54:	11004010 	cmplti	r4,r2,256
20080c58:	2000011e 	bne	r4,zero,20080c60 <idct+0x734>
20080c5c:	00803fc4 	movi	r2,255
20080c60:	00000106 	br	20080c68 <idct+0x73c>
20080c64:	0005883a 	mov	r2,zero
20080c68:	18800005 	stb	r2,0(r3)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080c6c:	e0ffb817 	ldw	r3,-288(fp)
20080c70:	e0bfb217 	ldw	r2,-312(fp)
20080c74:	1887c83a 	sub	r3,r3,r2
20080c78:	008000b4 	movhi	r2,2
20080c7c:	1885883a 	add	r2,r3,r2
20080c80:	1005d4ba 	srai	r2,r2,18
20080c84:	e0bfbd15 	stw	r2,-268(fp)
20080c88:	e0bfbc17 	ldw	r2,-272(fp)
20080c8c:	10c00184 	addi	r3,r2,6
20080c90:	e0bfbd17 	ldw	r2,-268(fp)
20080c94:	10000516 	blt	r2,zero,20080cac <idct+0x780>
20080c98:	e0bfbd17 	ldw	r2,-268(fp)
20080c9c:	11004010 	cmplti	r4,r2,256
20080ca0:	2000011e 	bne	r4,zero,20080ca8 <idct+0x77c>
20080ca4:	00803fc4 	movi	r2,255
20080ca8:	00000106 	br	20080cb0 <idct+0x784>
20080cac:	0005883a 	mov	r2,zero
20080cb0:	18800005 	stb	r2,0(r3)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080cb4:	e0ffb917 	ldw	r3,-284(fp)
20080cb8:	e0bfb517 	ldw	r2,-300(fp)
20080cbc:	1887883a 	add	r3,r3,r2
20080cc0:	008000b4 	movhi	r2,2
20080cc4:	1885883a 	add	r2,r3,r2
20080cc8:	1005d4ba 	srai	r2,r2,18
20080ccc:	e0bfbd15 	stw	r2,-268(fp)
20080cd0:	e0bfbc17 	ldw	r2,-272(fp)
20080cd4:	10c00084 	addi	r3,r2,2
20080cd8:	e0bfbd17 	ldw	r2,-268(fp)
20080cdc:	10000516 	blt	r2,zero,20080cf4 <idct+0x7c8>
20080ce0:	e0bfbd17 	ldw	r2,-268(fp)
20080ce4:	11004010 	cmplti	r4,r2,256
20080ce8:	2000011e 	bne	r4,zero,20080cf0 <idct+0x7c4>
20080cec:	00803fc4 	movi	r2,255
20080cf0:	00000106 	br	20080cf8 <idct+0x7cc>
20080cf4:	0005883a 	mov	r2,zero
20080cf8:	18800005 	stb	r2,0(r3)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
20080cfc:	e0ffb917 	ldw	r3,-284(fp)
20080d00:	e0bfb517 	ldw	r2,-300(fp)
20080d04:	1887c83a 	sub	r3,r3,r2
20080d08:	008000b4 	movhi	r2,2
20080d0c:	1885883a 	add	r2,r3,r2
20080d10:	1005d4ba 	srai	r2,r2,18
20080d14:	e0bfbd15 	stw	r2,-268(fp)
20080d18:	e0bfbc17 	ldw	r2,-272(fp)
20080d1c:	10c00144 	addi	r3,r2,5
20080d20:	e0bfbd17 	ldw	r2,-268(fp)
20080d24:	10000516 	blt	r2,zero,20080d3c <idct+0x810>
20080d28:	e0bfbd17 	ldw	r2,-268(fp)
20080d2c:	11004010 	cmplti	r4,r2,256
20080d30:	2000011e 	bne	r4,zero,20080d38 <idct+0x80c>
20080d34:	00803fc4 	movi	r2,255
20080d38:	00000106 	br	20080d40 <idct+0x814>
20080d3c:	0005883a 	mov	r2,zero
20080d40:	18800005 	stb	r2,0(r3)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080d44:	e0ffb717 	ldw	r3,-292(fp)
20080d48:	e0bfb417 	ldw	r2,-304(fp)
20080d4c:	1887883a 	add	r3,r3,r2
20080d50:	008000b4 	movhi	r2,2
20080d54:	1885883a 	add	r2,r3,r2
20080d58:	1005d4ba 	srai	r2,r2,18
20080d5c:	e0bfbd15 	stw	r2,-268(fp)
20080d60:	e0bfbc17 	ldw	r2,-272(fp)
20080d64:	10c000c4 	addi	r3,r2,3
20080d68:	e0bfbd17 	ldw	r2,-268(fp)
20080d6c:	10000516 	blt	r2,zero,20080d84 <idct+0x858>
20080d70:	e0bfbd17 	ldw	r2,-268(fp)
20080d74:	11004010 	cmplti	r4,r2,256
20080d78:	2000011e 	bne	r4,zero,20080d80 <idct+0x854>
20080d7c:	00803fc4 	movi	r2,255
20080d80:	00000106 	br	20080d88 <idct+0x85c>
20080d84:	0005883a 	mov	r2,zero
20080d88:	18800005 	stb	r2,0(r3)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
20080d8c:	e0ffb717 	ldw	r3,-292(fp)
20080d90:	e0bfb417 	ldw	r2,-304(fp)
20080d94:	1887c83a 	sub	r3,r3,r2
20080d98:	008000b4 	movhi	r2,2
20080d9c:	1885883a 	add	r2,r3,r2
20080da0:	1005d4ba 	srai	r2,r2,18
20080da4:	e0bfbd15 	stw	r2,-268(fp)
20080da8:	e0bfbc17 	ldw	r2,-272(fp)
20080dac:	10c00104 	addi	r3,r2,4
20080db0:	e0bfbd17 	ldw	r2,-268(fp)
20080db4:	10000516 	blt	r2,zero,20080dcc <idct+0x8a0>
20080db8:	e0bfbd17 	ldw	r2,-268(fp)
20080dbc:	11004010 	cmplti	r4,r2,256
20080dc0:	2000011e 	bne	r4,zero,20080dc8 <idct+0x89c>
20080dc4:	00803fc4 	movi	r2,255
20080dc8:	00000106 	br	20080dd0 <idct+0x8a4>
20080dcc:	0005883a 	mov	r2,zero
20080dd0:	18800005 	stb	r2,0(r3)
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
20080dd4:	e0bfad17 	ldw	r2,-332(fp)
20080dd8:	10800804 	addi	r2,r2,32
20080ddc:	e0bfad15 	stw	r2,-332(fp)
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
20080de0:	e0bfae17 	ldw	r2,-328(fp)
20080de4:	10800044 	addi	r2,r2,1
20080de8:	e0bfae15 	stw	r2,-328(fp)
20080dec:	e0bfae17 	ldw	r2,-328(fp)
20080df0:	10800210 	cmplti	r2,r2,8
20080df4:	103ed41e 	bne	r2,zero,20080948 <__flash_rwdata_start+0xfffe1b5c>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
20080df8:	e037883a 	mov	sp,fp
20080dfc:	df000017 	ldw	fp,0(sp)
20080e00:	dec00104 	addi	sp,sp,4
20080e04:	f800283a 	ret

20080e08 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080e08:	defff304 	addi	sp,sp,-52
20080e0c:	dfc00c15 	stw	ra,48(sp)
20080e10:	df000b15 	stw	fp,44(sp)
20080e14:	df000b04 	addi	fp,sp,44
20080e18:	e13ffc15 	stw	r4,-16(fp)
20080e1c:	e17ffd15 	stw	r5,-12(fp)
20080e20:	e1bffe15 	stw	r6,-8(fp)
20080e24:	e1ffff15 	stw	r7,-4(fp)
    //bitbuffer
    uint32_t bitbuffer = 0;
20080e28:	e03ff915 	stw	zero,-28(fp)
    //bit position in the bitstream pointed to by bitstream.
    //I.e., if bitcount = 3, then 3 bits from the byte
    //pointed to by bitstream have already been shifted in bitbuffer
    int bitcount = 0;
20080e2c:	e03ffa15 	stw	zero,-24(fp)

    //shift in the first 32 bits
    update_buffer(&bitbuffer, &bitstream, &bitcount, 32);
20080e30:	e13ff904 	addi	r4,fp,-28
20080e34:	e0fffd04 	addi	r3,fp,-12
20080e38:	e0bffa04 	addi	r2,fp,-24
20080e3c:	180b883a 	mov	r5,r3
20080e40:	100d883a 	mov	r6,r2
20080e44:	01c00804 	movi	r7,32
20080e48:	00811140 	call	20081114 <update_buffer>

    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
20080e4c:	e03ff50d 	sth	zero,-44(fp)

    if(P == 0)
20080e50:	e0800217 	ldw	r2,8(fp)
20080e54:	1000061e 	bne	r2,zero,20080e70 <lossless_decode+0x68>
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));
20080e58:	e0bffc17 	ldw	r2,-16(fp)
20080e5c:	100491fa 	slli	r2,r2,7
20080e60:	e13ffe17 	ldw	r4,-8(fp)
20080e64:	000b883a 	mov	r5,zero
20080e68:	100d883a 	mov	r6,r2
20080e6c:	008c0500 	call	2008c050 <memset>

    for(int count = 0; count < num_blocks; count ++){
20080e70:	e03ff615 	stw	zero,-40(fp)
20080e74:	00009f06 	br	200810f4 <lossless_decode+0x2ec>
        //pe is used to write the DCT coefficients in zig-zag order
        DCTELEM* pe = (DCTELEM*)(DCACq[count]);
20080e78:	e0bff617 	ldw	r2,-40(fp)
20080e7c:	100491fa 	slli	r2,r2,7
20080e80:	e0fffe17 	ldw	r3,-8(fp)
20080e84:	1885883a 	add	r2,r3,r2
20080e88:	e0bff815 	stw	r2,-32(fp)

        //decode DC coefficients
        ib = input_DC(bitbuffer);
20080e8c:	e0bff917 	ldw	r2,-28(fp)
20080e90:	1009883a 	mov	r4,r2
20080e94:	00812d80 	call	200812d8 <input_DC>
20080e98:	e0bffb15 	stw	r2,-20(fp)
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
20080e9c:	e0bffb03 	ldbu	r2,-20(fp)
20080ea0:	10803fcc 	andi	r2,r2,255
20080ea4:	e13ff904 	addi	r4,fp,-28
20080ea8:	e17ffd04 	addi	r5,fp,-12
20080eac:	e0fffa04 	addi	r3,fp,-24
20080eb0:	180d883a 	mov	r6,r3
20080eb4:	100f883a 	mov	r7,r2
20080eb8:	00811140 	call	20081114 <update_buffer>
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
20080ebc:	e0800217 	ldw	r2,8(fp)
20080ec0:	10000d26 	beq	r2,zero,20080ef8 <lossless_decode+0xf0>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
20080ec4:	e0bff817 	ldw	r2,-32(fp)
20080ec8:	1080000b 	ldhu	r2,0(r2)
20080ecc:	1007883a 	mov	r3,r2
20080ed0:	e0bffb8b 	ldhu	r2,-18(fp)
20080ed4:	1009883a 	mov	r4,r2
20080ed8:	e0bfff17 	ldw	r2,-4(fp)
20080edc:	1080000b 	ldhu	r2,0(r2)
20080ee0:	2085383a 	mul	r2,r4,r2
20080ee4:	1885883a 	add	r2,r3,r2
20080ee8:	1007883a 	mov	r3,r2
20080eec:	e0bff817 	ldw	r2,-32(fp)
20080ef0:	10c0000d 	sth	r3,0(r2)
20080ef4:	00000d06 	br	20080f2c <lossless_decode+0x124>
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
20080ef8:	e0bffb8b 	ldhu	r2,-18(fp)
20080efc:	1007883a 	mov	r3,r2
20080f00:	e0bff50b 	ldhu	r2,-44(fp)
20080f04:	1885883a 	add	r2,r3,r2
20080f08:	e0bff50d 	sth	r2,-44(fp)
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080f0c:	e0bfff17 	ldw	r2,-4(fp)
20080f10:	1080000b 	ldhu	r2,0(r2)
20080f14:	1007883a 	mov	r3,r2
20080f18:	e0bff50b 	ldhu	r2,-44(fp)
20080f1c:	1885383a 	mul	r2,r3,r2
20080f20:	1007883a 	mov	r3,r2
20080f24:	e0bff817 	ldw	r2,-32(fp)
20080f28:	10c0000d 	sth	r3,0(r2)
        }
#else   //null dequantization, no differential
        pe[0] = ib.e;
#endif

        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
20080f2c:	00800044 	movi	r2,1
20080f30:	e0bff705 	stb	r2,-36(fp)
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
20080f34:	e0bff917 	ldw	r2,-28(fp)
20080f38:	1009883a 	mov	r4,r2
20080f3c:	00813d40 	call	200813d4 <input_AC>
20080f40:	e0bffb15 	stw	r2,-20(fp)
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
20080f44:	e0bffb03 	ldbu	r2,-20(fp)
20080f48:	10803fcc 	andi	r2,r2,255
20080f4c:	e13ff904 	addi	r4,fp,-28
20080f50:	e17ffd04 	addi	r5,fp,-12
20080f54:	e0fffa04 	addi	r3,fp,-24
20080f58:	180d883a 	mov	r6,r3
20080f5c:	100f883a 	mov	r7,r2
20080f60:	00811140 	call	20081114 <update_buffer>
            if(ib.e == 0){
20080f64:	e0bffb8b 	ldhu	r2,-18(fp)
20080f68:	10bfffcc 	andi	r2,r2,65535
20080f6c:	10a0001c 	xori	r2,r2,32768
20080f70:	10a00004 	addi	r2,r2,-32768
20080f74:	1000091e 	bne	r2,zero,20080f9c <lossless_decode+0x194>
                if(ib.runlength == 15){
20080f78:	e0bffb43 	ldbu	r2,-19(fp)
20080f7c:	10803fcc 	andi	r2,r2,255
20080f80:	108003d8 	cmpnei	r2,r2,15
20080f84:	1000041e 	bne	r2,zero,20080f98 <lossless_decode+0x190>
                    //EZL
                    index += 16;
20080f88:	e0bff703 	ldbu	r2,-36(fp)
20080f8c:	10800404 	addi	r2,r2,16
20080f90:	e0bff705 	stb	r2,-36(fp)
20080f94:	00005306 	br	200810e4 <lossless_decode+0x2dc>
                }
                else {
                    //END
                    break; //break from while and go to next block
20080f98:	00005306 	br	200810e8 <lossless_decode+0x2e0>
                }
            }
            else{ //ib.e != 0

                index += ib.runlength;
20080f9c:	e0fffb43 	ldbu	r3,-19(fp)
20080fa0:	e0bff703 	ldbu	r2,-36(fp)
20080fa4:	1885883a 	add	r2,r3,r2
20080fa8:	e0bff705 	stb	r2,-36(fp)
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
20080fac:	e0800217 	ldw	r2,8(fp)
20080fb0:	10002a26 	beq	r2,zero,2008105c <lossless_decode+0x254>
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080fb4:	e0fff703 	ldbu	r3,-36(fp)
20080fb8:	00800034 	movhi	r2,0
20080fbc:	10833a04 	addi	r2,r2,3304
20080fc0:	18c7883a 	add	r3,r3,r3
20080fc4:	18c7883a 	add	r3,r3,r3
20080fc8:	10c5883a 	add	r2,r2,r3
20080fcc:	10800017 	ldw	r2,0(r2)
20080fd0:	1085883a 	add	r2,r2,r2
20080fd4:	1007883a 	mov	r3,r2
20080fd8:	e0bff817 	ldw	r2,-32(fp)
20080fdc:	10c9883a 	add	r4,r2,r3
20080fe0:	e0fff703 	ldbu	r3,-36(fp)
20080fe4:	00800034 	movhi	r2,0
20080fe8:	10833a04 	addi	r2,r2,3304
20080fec:	18c7883a 	add	r3,r3,r3
20080ff0:	18c7883a 	add	r3,r3,r3
20080ff4:	10c5883a 	add	r2,r2,r3
20080ff8:	10800017 	ldw	r2,0(r2)
20080ffc:	1085883a 	add	r2,r2,r2
20081000:	1007883a 	mov	r3,r2
20081004:	e0bff817 	ldw	r2,-32(fp)
20081008:	10c5883a 	add	r2,r2,r3
2008100c:	1080000b 	ldhu	r2,0(r2)
20081010:	100b883a 	mov	r5,r2
20081014:	e0bffb8b 	ldhu	r2,-18(fp)
20081018:	100d883a 	mov	r6,r2
2008101c:	e0fff703 	ldbu	r3,-36(fp)
20081020:	00800034 	movhi	r2,0
20081024:	10833a04 	addi	r2,r2,3304
20081028:	18c7883a 	add	r3,r3,r3
2008102c:	18c7883a 	add	r3,r3,r3
20081030:	10c5883a 	add	r2,r2,r3
20081034:	10800017 	ldw	r2,0(r2)
20081038:	1085883a 	add	r2,r2,r2
2008103c:	1007883a 	mov	r3,r2
20081040:	e0bfff17 	ldw	r2,-4(fp)
20081044:	10c5883a 	add	r2,r2,r3
20081048:	1080000b 	ldhu	r2,0(r2)
2008104c:	3085383a 	mul	r2,r6,r2
20081050:	2885883a 	add	r2,r5,r2
20081054:	2080000d 	sth	r2,0(r4)
20081058:	00001b06 	br	200810c8 <lossless_decode+0x2c0>
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
2008105c:	e0fff703 	ldbu	r3,-36(fp)
20081060:	00800034 	movhi	r2,0
20081064:	10833a04 	addi	r2,r2,3304
20081068:	18c7883a 	add	r3,r3,r3
2008106c:	18c7883a 	add	r3,r3,r3
20081070:	10c5883a 	add	r2,r2,r3
20081074:	10800017 	ldw	r2,0(r2)
20081078:	1085883a 	add	r2,r2,r2
2008107c:	1007883a 	mov	r3,r2
20081080:	e0bff817 	ldw	r2,-32(fp)
20081084:	10c9883a 	add	r4,r2,r3
20081088:	e0bffb8b 	ldhu	r2,-18(fp)
2008108c:	100b883a 	mov	r5,r2
20081090:	e0fff703 	ldbu	r3,-36(fp)
20081094:	00800034 	movhi	r2,0
20081098:	10833a04 	addi	r2,r2,3304
2008109c:	18c7883a 	add	r3,r3,r3
200810a0:	18c7883a 	add	r3,r3,r3
200810a4:	10c5883a 	add	r2,r2,r3
200810a8:	10800017 	ldw	r2,0(r2)
200810ac:	1085883a 	add	r2,r2,r2
200810b0:	1007883a 	mov	r3,r2
200810b4:	e0bfff17 	ldw	r2,-4(fp)
200810b8:	10c5883a 	add	r2,r2,r3
200810bc:	1080000b 	ldhu	r2,0(r2)
200810c0:	2885383a 	mul	r2,r5,r2
200810c4:	2080000d 	sth	r2,0(r4)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
200810c8:	e0bff703 	ldbu	r2,-36(fp)
200810cc:	10800ff0 	cmpltui	r2,r2,63
200810d0:	1000011e 	bne	r2,zero,200810d8 <lossless_decode+0x2d0>
200810d4:	00000406 	br	200810e8 <lossless_decode+0x2e0>
                index++;
200810d8:	e0bff703 	ldbu	r2,-36(fp)
200810dc:	10800044 	addi	r2,r2,1
200810e0:	e0bff705 	stb	r2,-36(fp)
            }
        }
200810e4:	003f9306 	br	20080f34 <__flash_rwdata_start+0xfffe2148>
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
200810e8:	e0bff617 	ldw	r2,-40(fp)
200810ec:	10800044 	addi	r2,r2,1
200810f0:	e0bff615 	stw	r2,-40(fp)
200810f4:	e0fff617 	ldw	r3,-40(fp)
200810f8:	e0bffc17 	ldw	r2,-16(fp)
200810fc:	18bf5e16 	blt	r3,r2,20080e78 <__flash_rwdata_start+0xfffe208c>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
20081100:	e037883a 	mov	sp,fp
20081104:	dfc00117 	ldw	ra,4(sp)
20081108:	df000017 	ldw	fp,0(sp)
2008110c:	dec00204 	addi	sp,sp,8
20081110:	f800283a 	ret

20081114 <update_buffer>:


//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
20081114:	defffb04 	addi	sp,sp,-20
20081118:	df000415 	stw	fp,16(sp)
2008111c:	df000404 	addi	fp,sp,16
20081120:	e13ffc15 	stw	r4,-16(fp)
20081124:	e17ffd15 	stw	r5,-12(fp)
20081128:	e1bffe15 	stw	r6,-8(fp)
2008112c:	3805883a 	mov	r2,r7
20081130:	e0bfff05 	stb	r2,-4(fp)
    //remove decoded bits
    (*pbitbuffer) <<= size;
20081134:	e0bffc17 	ldw	r2,-16(fp)
20081138:	10c00017 	ldw	r3,0(r2)
2008113c:	e0bfff03 	ldbu	r2,-4(fp)
20081140:	1886983a 	sll	r3,r3,r2
20081144:	e0bffc17 	ldw	r2,-16(fp)
20081148:	10c00015 	stw	r3,0(r2)
    //total number of bits to be shifted in
    *pbitcount += size;
2008114c:	e0bffe17 	ldw	r2,-8(fp)
20081150:	10c00017 	ldw	r3,0(r2)
20081154:	e0bfff03 	ldbu	r2,-4(fp)
20081158:	1887883a 	add	r3,r3,r2
2008115c:	e0bffe17 	ldw	r2,-8(fp)
20081160:	10c00015 	stw	r3,0(r2)
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20081164:	e0bffe17 	ldw	r2,-8(fp)
20081168:	10800017 	ldw	r2,0(r2)
2008116c:	10800210 	cmplti	r2,r2,8
20081170:	1000501e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20081174:	e0bffc17 	ldw	r2,-16(fp)
20081178:	10800017 	ldw	r2,0(r2)
2008117c:	e0fffd17 	ldw	r3,-12(fp)
20081180:	18c00017 	ldw	r3,0(r3)
20081184:	18c00003 	ldbu	r3,0(r3)
20081188:	19003fcc 	andi	r4,r3,255
2008118c:	e0fffe17 	ldw	r3,-8(fp)
20081190:	18c00017 	ldw	r3,0(r3)
20081194:	18fffe04 	addi	r3,r3,-8
20081198:	20c6983a 	sll	r3,r4,r3
2008119c:	10c6b03a 	or	r3,r2,r3
200811a0:	e0bffc17 	ldw	r2,-16(fp)
200811a4:	10c00015 	stw	r3,0(r2)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
200811a8:	e0bffd17 	ldw	r2,-12(fp)
200811ac:	10800017 	ldw	r2,0(r2)
200811b0:	10c00044 	addi	r3,r2,1
200811b4:	e0bffd17 	ldw	r2,-12(fp)
200811b8:	10c00015 	stw	r3,0(r2)
        if (*pbitcount >= 16) { //at least 2 bytes
200811bc:	e0bffe17 	ldw	r2,-8(fp)
200811c0:	10800017 	ldw	r2,0(r2)
200811c4:	10800410 	cmplti	r2,r2,16
200811c8:	10003a1e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
200811cc:	e0bffc17 	ldw	r2,-16(fp)
200811d0:	10800017 	ldw	r2,0(r2)
200811d4:	e0fffd17 	ldw	r3,-12(fp)
200811d8:	18c00017 	ldw	r3,0(r3)
200811dc:	18c00003 	ldbu	r3,0(r3)
200811e0:	19003fcc 	andi	r4,r3,255
200811e4:	e0fffe17 	ldw	r3,-8(fp)
200811e8:	18c00017 	ldw	r3,0(r3)
200811ec:	18fffc04 	addi	r3,r3,-16
200811f0:	20c6983a 	sll	r3,r4,r3
200811f4:	10c6b03a 	or	r3,r2,r3
200811f8:	e0bffc17 	ldw	r2,-16(fp)
200811fc:	10c00015 	stw	r3,0(r2)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20081200:	e0bffd17 	ldw	r2,-12(fp)
20081204:	10800017 	ldw	r2,0(r2)
20081208:	10c00044 	addi	r3,r2,1
2008120c:	e0bffd17 	ldw	r2,-12(fp)
20081210:	10c00015 	stw	r3,0(r2)
            if (*pbitcount >= 24) { //at least 3 bytes
20081214:	e0bffe17 	ldw	r2,-8(fp)
20081218:	10800017 	ldw	r2,0(r2)
2008121c:	10800610 	cmplti	r2,r2,24
20081220:	1000241e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20081224:	e0bffc17 	ldw	r2,-16(fp)
20081228:	10800017 	ldw	r2,0(r2)
2008122c:	e0fffd17 	ldw	r3,-12(fp)
20081230:	18c00017 	ldw	r3,0(r3)
20081234:	18c00003 	ldbu	r3,0(r3)
20081238:	19003fcc 	andi	r4,r3,255
2008123c:	e0fffe17 	ldw	r3,-8(fp)
20081240:	18c00017 	ldw	r3,0(r3)
20081244:	18fffa04 	addi	r3,r3,-24
20081248:	20c6983a 	sll	r3,r4,r3
2008124c:	10c6b03a 	or	r3,r2,r3
20081250:	e0bffc17 	ldw	r2,-16(fp)
20081254:	10c00015 	stw	r3,0(r2)
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20081258:	e0bffd17 	ldw	r2,-12(fp)
2008125c:	10800017 	ldw	r2,0(r2)
20081260:	10c00044 	addi	r3,r2,1
20081264:	e0bffd17 	ldw	r2,-12(fp)
20081268:	10c00015 	stw	r3,0(r2)
                if (*pbitcount == 32) { //all 4 bytes shifted in
2008126c:	e0bffe17 	ldw	r2,-8(fp)
20081270:	10800017 	ldw	r2,0(r2)
20081274:	10800818 	cmpnei	r2,r2,32
20081278:	10000e1e 	bne	r2,zero,200812b4 <update_buffer+0x1a0>
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
2008127c:	e0bffc17 	ldw	r2,-16(fp)
20081280:	10c00017 	ldw	r3,0(r2)
20081284:	e0bffd17 	ldw	r2,-12(fp)
20081288:	10800017 	ldw	r2,0(r2)
2008128c:	10800003 	ldbu	r2,0(r2)
20081290:	10803fcc 	andi	r2,r2,255
20081294:	1886b03a 	or	r3,r3,r2
20081298:	e0bffc17 	ldw	r2,-16(fp)
2008129c:	10c00015 	stw	r3,0(r2)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
200812a0:	e0bffd17 	ldw	r2,-12(fp)
200812a4:	10800017 	ldw	r2,0(r2)
200812a8:	10c00044 	addi	r3,r2,1
200812ac:	e0bffd17 	ldw	r2,-12(fp)
200812b0:	10c00015 	stw	r3,0(r2)
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
200812b4:	e0bffe17 	ldw	r2,-8(fp)
200812b8:	10800017 	ldw	r2,0(r2)
200812bc:	10c001cc 	andi	r3,r2,7
200812c0:	e0bffe17 	ldw	r2,-8(fp)
200812c4:	10c00015 	stw	r3,0(r2)
}
200812c8:	e037883a 	mov	sp,fp
200812cc:	df000017 	ldw	fp,0(sp)
200812d0:	dec00104 	addi	sp,sp,4
200812d4:	f800283a 	ret

200812d8 <input_DC>:
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
200812d8:	defffb04 	addi	sp,sp,-20
200812dc:	df000415 	stw	fp,16(sp)
200812e0:	df000404 	addi	fp,sp,16
200812e4:	e13fff15 	stw	r4,-4(fp)
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
200812e8:	e0bfff17 	ldw	r2,-4(fp)
200812ec:	1004d73a 	srli	r2,r2,28
200812f0:	e0bffc05 	stb	r2,-16(fp)
    if(size == 0){
200812f4:	e0bffc03 	ldbu	r2,-16(fp)
200812f8:	1000041e 	bne	r2,zero,2008130c <input_DC+0x34>
        ib.e = 0;
200812fc:	e03ffe0d 	sth	zero,-8(fp)
        ib.bits = 4;
20081300:	00800104 	movi	r2,4
20081304:	e0bffd85 	stb	r2,-10(fp)
20081308:	00002106 	br	20081390 <input_DC+0xb8>
    }
    else{
        bitbuffer <<= 4;
2008130c:	e0bfff17 	ldw	r2,-4(fp)
20081310:	1004913a 	slli	r2,r2,4
20081314:	e0bfff15 	stw	r2,-4(fp)
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20081318:	e0bffc03 	ldbu	r2,-16(fp)
2008131c:	00c00804 	movi	r3,32
20081320:	1885c83a 	sub	r2,r3,r2
20081324:	e0ffff17 	ldw	r3,-4(fp)
20081328:	1886d83a 	srl	r3,r3,r2
2008132c:	e0bffc03 	ldbu	r2,-16(fp)
20081330:	10bfffc4 	addi	r2,r2,-1
20081334:	1884d83a 	srl	r2,r3,r2
20081338:	10000c1e 	bne	r2,zero,2008136c <input_DC+0x94>
2008133c:	e0bffc03 	ldbu	r2,-16(fp)
20081340:	00c00804 	movi	r3,32
20081344:	1885c83a 	sub	r2,r3,r2
20081348:	e0ffff17 	ldw	r3,-4(fp)
2008134c:	1884d83a 	srl	r2,r3,r2
20081350:	1009883a 	mov	r4,r2
20081354:	e0bffc03 	ldbu	r2,-16(fp)
20081358:	00ffffc4 	movi	r3,-1
2008135c:	1884983a 	sll	r2,r3,r2
20081360:	2085883a 	add	r2,r4,r2
20081364:	10800044 	addi	r2,r2,1
20081368:	00000506 	br	20081380 <input_DC+0xa8>
2008136c:	e0bffc03 	ldbu	r2,-16(fp)
20081370:	00c00804 	movi	r3,32
20081374:	1885c83a 	sub	r2,r3,r2
20081378:	e0ffff17 	ldw	r3,-4(fp)
2008137c:	1884d83a 	srl	r2,r3,r2
20081380:	e0bffe0d 	sth	r2,-8(fp)
        ib.bits = size + 4;
20081384:	e0bffc03 	ldbu	r2,-16(fp)
20081388:	10800104 	addi	r2,r2,4
2008138c:	e0bffd85 	stb	r2,-10(fp)
    }
    return ib;
20081390:	e0bffd8b 	ldhu	r2,-10(fp)
20081394:	e0bffc8d 	sth	r2,-14(fp)
20081398:	e0bffe0b 	ldhu	r2,-8(fp)
2008139c:	e0bffd0d 	sth	r2,-12(fp)
200813a0:	0005883a 	mov	r2,zero
200813a4:	e0fffc8b 	ldhu	r3,-14(fp)
200813a8:	18ffffcc 	andi	r3,r3,65535
200813ac:	10bfffec 	andhi	r2,r2,65535
200813b0:	10c4b03a 	or	r2,r2,r3
200813b4:	e0fffd0b 	ldhu	r3,-12(fp)
200813b8:	1806943a 	slli	r3,r3,16
200813bc:	10bfffcc 	andi	r2,r2,65535
200813c0:	10c4b03a 	or	r2,r2,r3
}
200813c4:	e037883a 	mov	sp,fp
200813c8:	df000017 	ldw	fp,0(sp)
200813cc:	dec00104 	addi	sp,sp,4
200813d0:	f800283a 	ret

200813d4 <input_AC>:

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
200813d4:	defffb04 	addi	sp,sp,-20
200813d8:	df000415 	stw	fp,16(sp)
200813dc:	df000404 	addi	fp,sp,16
200813e0:	e13fff15 	stw	r4,-4(fp)
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
200813e4:	e0bfff17 	ldw	r2,-4(fp)
200813e8:	1004d73a 	srli	r2,r2,28
200813ec:	e0bffdc5 	stb	r2,-9(fp)
    bitbuffer <<= 4;
200813f0:	e0bfff17 	ldw	r2,-4(fp)
200813f4:	1004913a 	slli	r2,r2,4
200813f8:	e0bfff15 	stw	r2,-4(fp)
    size  = INPUT_BITS(bitbuffer, 4);
200813fc:	e0bfff17 	ldw	r2,-4(fp)
20081400:	1004d73a 	srli	r2,r2,28
20081404:	e0bffc05 	stb	r2,-16(fp)
    if(size == 0) {
20081408:	e0bffc03 	ldbu	r2,-16(fp)
2008140c:	1000041e 	bne	r2,zero,20081420 <input_AC+0x4c>
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20081410:	e03ffe0d 	sth	zero,-8(fp)
        ib.bits = 8;
20081414:	00800204 	movi	r2,8
20081418:	e0bffd85 	stb	r2,-10(fp)
2008141c:	00002106 	br	200814a4 <input_AC+0xd0>
    }
    else{
        bitbuffer <<= 4;
20081420:	e0bfff17 	ldw	r2,-4(fp)
20081424:	1004913a 	slli	r2,r2,4
20081428:	e0bfff15 	stw	r2,-4(fp)
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
2008142c:	e0bffc03 	ldbu	r2,-16(fp)
20081430:	00c00804 	movi	r3,32
20081434:	1885c83a 	sub	r2,r3,r2
20081438:	e0ffff17 	ldw	r3,-4(fp)
2008143c:	1886d83a 	srl	r3,r3,r2
20081440:	e0bffc03 	ldbu	r2,-16(fp)
20081444:	10bfffc4 	addi	r2,r2,-1
20081448:	1884d83a 	srl	r2,r3,r2
2008144c:	10000c1e 	bne	r2,zero,20081480 <input_AC+0xac>
20081450:	e0bffc03 	ldbu	r2,-16(fp)
20081454:	00c00804 	movi	r3,32
20081458:	1885c83a 	sub	r2,r3,r2
2008145c:	e0ffff17 	ldw	r3,-4(fp)
20081460:	1884d83a 	srl	r2,r3,r2
20081464:	1009883a 	mov	r4,r2
20081468:	e0bffc03 	ldbu	r2,-16(fp)
2008146c:	00ffffc4 	movi	r3,-1
20081470:	1884983a 	sll	r2,r3,r2
20081474:	2085883a 	add	r2,r4,r2
20081478:	10800044 	addi	r2,r2,1
2008147c:	00000506 	br	20081494 <input_AC+0xc0>
20081480:	e0bffc03 	ldbu	r2,-16(fp)
20081484:	00c00804 	movi	r3,32
20081488:	1885c83a 	sub	r2,r3,r2
2008148c:	e0ffff17 	ldw	r3,-4(fp)
20081490:	1884d83a 	srl	r2,r3,r2
20081494:	e0bffe0d 	sth	r2,-8(fp)
        ib.bits = size + 8;
20081498:	e0bffc03 	ldbu	r2,-16(fp)
2008149c:	10800204 	addi	r2,r2,8
200814a0:	e0bffd85 	stb	r2,-10(fp)
    }
    return ib;
200814a4:	e0bffd8b 	ldhu	r2,-10(fp)
200814a8:	e0bffc8d 	sth	r2,-14(fp)
200814ac:	e0bffe0b 	ldhu	r2,-8(fp)
200814b0:	e0bffd0d 	sth	r2,-12(fp)
200814b4:	0005883a 	mov	r2,zero
200814b8:	e0fffc8b 	ldhu	r3,-14(fp)
200814bc:	18ffffcc 	andi	r3,r3,65535
200814c0:	10bfffec 	andhi	r2,r2,65535
200814c4:	10c4b03a 	or	r2,r2,r3
200814c8:	e0fffd0b 	ldhu	r3,-12(fp)
200814cc:	1806943a 	slli	r3,r3,16
200814d0:	10bfffcc 	andi	r2,r2,65535
200814d4:	10c4b03a 	or	r2,r2,r3
}
200814d8:	e037883a 	mov	sp,fp
200814dc:	df000017 	ldw	fp,0(sp)
200814e0:	dec00104 	addi	sp,sp,4
200814e4:	f800283a 	ret

200814e8 <mjpeg423_decode>:

//Interrupt related function prototypes
static void write_dma_isr(void* context);

void mjpeg423_decode(FAT_FILE_HANDLE file_handle, alt_u32* buffer_out,
		hw_video_display* display, int* play_flag, int* skip_fw_flag, int* skip_rv_flag, int* exit_flag, volatile int* timer_flag) {
200814e8:	deffc004 	addi	sp,sp,-256
200814ec:	dfc03f15 	stw	ra,252(sp)
200814f0:	df003e15 	stw	fp,248(sp)
200814f4:	df003e04 	addi	fp,sp,248
200814f8:	e13ffc15 	stw	r4,-16(fp)
200814fc:	e17ffd15 	stw	r5,-12(fp)
20081500:	e1bffe15 	stw	r6,-8(fp)
20081504:	e1ffff15 	stw	r7,-4(fp)
	uint32_t Ysize, Cbsize, frame_size, frame_type;
	uint32_t file_header[5], frame_header[4];

	//IDCT hardware setup
	//open dma streams
	alt_msgdma_dev *read_device_ptr = alt_msgdma_open(read_dma_name);
20081508:	d0a00117 	ldw	r2,-32764(gp)
2008150c:	1009883a 	mov	r4,r2
20081510:	009ccd80 	call	2009ccd8 <alt_msgdma_open>
20081514:	e0bfcb15 	stw	r2,-212(fp)
	alt_msgdma_dev *write_device_ptr = alt_msgdma_open(write_dma_name);
20081518:	d0a00217 	ldw	r2,-32760(gp)
2008151c:	1009883a 	mov	r4,r2
20081520:	009ccd80 	call	2009ccd8 <alt_msgdma_open>
20081524:	e0bfcc15 	stw	r2,-208(fp)
	//register callback
	alt_msgdma_register_callback(read_device_ptr, write_dma_isr,
20081528:	e13fcb17 	ldw	r4,-212(fp)
2008152c:	01480234 	movhi	r5,8200
20081530:	2948a004 	addi	r5,r5,8832
20081534:	01800404 	movi	r6,16
20081538:	000f883a 	mov	r7,zero
2008153c:	009ce9c0 	call	2009ce9c <alt_msgdma_register_callback>
			ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, NULL);
	alt_msgdma_register_callback(write_device_ptr, write_dma_isr,
20081540:	e13fcc17 	ldw	r4,-208(fp)
20081544:	01480234 	movhi	r5,8200
20081548:	2948a004 	addi	r5,r5,8832
2008154c:	01800404 	movi	r6,16
20081550:	000f883a 	mov	r7,zero
20081554:	009ce9c0 	call	2009ce9c <alt_msgdma_register_callback>
			ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, NULL);

	//idct_test(read_device_ptr, write_device_ptr);

	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
20081558:	e0bff304 	addi	r2,fp,-52
2008155c:	e13ffc17 	ldw	r4,-16(fp)
20081560:	100b883a 	mov	r5,r2
20081564:	01800504 	movi	r6,20
20081568:	0082fc00 	call	20082fc0 <Fat_FileRead>
2008156c:	10800060 	cmpeqi	r2,r2,1
20081570:	1000031e 	bne	r2,zero,20081580 <mjpeg423_decode+0x98>
		printf("cannot read input file");
20081574:	01000034 	movhi	r4,0
20081578:	21001204 	addi	r4,r4,72
2008157c:	008c1a00 	call	2008c1a0 <printf>
	num_frames = file_header[0];
20081580:	e0bff317 	ldw	r2,-52(fp)
20081584:	e0bfcd15 	stw	r2,-204(fp)
	w_size = file_header[1];
20081588:	e0bff417 	ldw	r2,-48(fp)
2008158c:	e0bfce15 	stw	r2,-200(fp)
	h_size = file_header[2];
20081590:	e0bff517 	ldw	r2,-44(fp)
20081594:	e0bfcf15 	stw	r2,-196(fp)
	num_iframes = file_header[3];
20081598:	e0bff617 	ldw	r2,-40(fp)
2008159c:	e0bfd015 	stw	r2,-192(fp)
	payload_size = file_header[4];
200815a0:	e0bff717 	ldw	r2,-36(fp)
200815a4:	e0bfd115 	stw	r2,-188(fp)
	printf("Width %u\n", w_size);
	printf("Height %u\n", h_size);
	printf("Num i frames %u\n", num_iframes);
#endif

	int hCb_size = h_size / 8;           //number of chrominance blocks
200815a8:	e0bfcf17 	ldw	r2,-196(fp)
200815ac:	1004d0fa 	srli	r2,r2,3
200815b0:	e0bfd215 	stw	r2,-184(fp)
	int wCb_size = w_size / 8;
200815b4:	e0bfce17 	ldw	r2,-200(fp)
200815b8:	1004d0fa 	srli	r2,r2,3
200815bc:	e0bfd315 	stw	r2,-180(fp)
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
200815c0:	e0bfcf17 	ldw	r2,-196(fp)
200815c4:	1004d0fa 	srli	r2,r2,3
200815c8:	e0bfd415 	stw	r2,-176(fp)
	int wYb_size = w_size / 8;
200815cc:	e0bfce17 	ldw	r2,-200(fp)
200815d0:	1004d0fa 	srli	r2,r2,3
200815d4:	e0bfd515 	stw	r2,-172(fp)

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
200815d8:	e0bfd017 	ldw	r2,-192(fp)
200815dc:	100490fa 	slli	r2,r2,3
200815e0:	1009883a 	mov	r4,r2
200815e4:	008b6cc0 	call	2008b6cc <malloc>
200815e8:	e0bfd615 	stw	r2,-168(fp)

	//main data structures. See lab manual for explanation
	rgb_pixel_t* rgbblock;
	if ((rgbblock = malloc(w_size * h_size * sizeof(rgb_pixel_t))) == NULL)
200815ec:	e0ffce17 	ldw	r3,-200(fp)
200815f0:	e0bfcf17 	ldw	r2,-196(fp)
200815f4:	1885383a 	mul	r2,r3,r2
200815f8:	1085883a 	add	r2,r2,r2
200815fc:	1085883a 	add	r2,r2,r2
20081600:	1009883a 	mov	r4,r2
20081604:	008b6cc0 	call	2008b6cc <malloc>
20081608:	e0bfd715 	stw	r2,-164(fp)
2008160c:	e0bfd717 	ldw	r2,-164(fp)
20081610:	1000031e 	bne	r2,zero,20081620 <mjpeg423_decode+0x138>
		printf("cannot allocate rgbblock");
20081614:	01000034 	movhi	r4,0
20081618:	21001804 	addi	r4,r4,96
2008161c:	008c1a00 	call	2008c1a0 <printf>
	color_block_t* Yblock;
	if ((Yblock = malloc(hYb_size * wYb_size * 64)) == NULL)
20081620:	e0ffd417 	ldw	r3,-176(fp)
20081624:	e0bfd517 	ldw	r2,-172(fp)
20081628:	1885383a 	mul	r2,r3,r2
2008162c:	100491ba 	slli	r2,r2,6
20081630:	1009883a 	mov	r4,r2
20081634:	008b6cc0 	call	2008b6cc <malloc>
20081638:	e0bfd815 	stw	r2,-160(fp)
2008163c:	e0bfd817 	ldw	r2,-160(fp)
20081640:	1000031e 	bne	r2,zero,20081650 <mjpeg423_decode+0x168>
		printf("cannot allocate Yblock");
20081644:	01000034 	movhi	r4,0
20081648:	21001f04 	addi	r4,r4,124
2008164c:	008c1a00 	call	2008c1a0 <printf>
	color_block_t* Cbblock;
	if ((Cbblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20081650:	e0ffd217 	ldw	r3,-184(fp)
20081654:	e0bfd317 	ldw	r2,-180(fp)
20081658:	1885383a 	mul	r2,r3,r2
2008165c:	100491ba 	slli	r2,r2,6
20081660:	1009883a 	mov	r4,r2
20081664:	008b6cc0 	call	2008b6cc <malloc>
20081668:	e0bfd915 	stw	r2,-156(fp)
2008166c:	e0bfd917 	ldw	r2,-156(fp)
20081670:	1000031e 	bne	r2,zero,20081680 <mjpeg423_decode+0x198>
		printf("cannot allocate Cbblock");
20081674:	01000034 	movhi	r4,0
20081678:	21002504 	addi	r4,r4,148
2008167c:	008c1a00 	call	2008c1a0 <printf>
	color_block_t* Crblock;
	if ((Crblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20081680:	e0ffd217 	ldw	r3,-184(fp)
20081684:	e0bfd317 	ldw	r2,-180(fp)
20081688:	1885383a 	mul	r2,r3,r2
2008168c:	100491ba 	slli	r2,r2,6
20081690:	1009883a 	mov	r4,r2
20081694:	008b6cc0 	call	2008b6cc <malloc>
20081698:	e0bfda15 	stw	r2,-152(fp)
2008169c:	e0bfda17 	ldw	r2,-152(fp)
200816a0:	1000031e 	bne	r2,zero,200816b0 <mjpeg423_decode+0x1c8>
		printf("cannot allocate Crblock");
200816a4:	01000034 	movhi	r4,0
200816a8:	21002b04 	addi	r4,r4,172
200816ac:	008c1a00 	call	2008c1a0 <printf>
	;
	dct_block_t* YDCAC;
	if ((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM))) == NULL)
200816b0:	e0ffd417 	ldw	r3,-176(fp)
200816b4:	e0bfd517 	ldw	r2,-172(fp)
200816b8:	1885383a 	mul	r2,r3,r2
200816bc:	100491fa 	slli	r2,r2,7
200816c0:	1009883a 	mov	r4,r2
200816c4:	008b6cc0 	call	2008b6cc <malloc>
200816c8:	e0bfdb15 	stw	r2,-148(fp)
200816cc:	e0bfdb17 	ldw	r2,-148(fp)
200816d0:	1000031e 	bne	r2,zero,200816e0 <mjpeg423_decode+0x1f8>
		printf("cannot allocate YDCAC");
200816d4:	01000034 	movhi	r4,0
200816d8:	21003104 	addi	r4,r4,196
200816dc:	008c1a00 	call	2008c1a0 <printf>
	dct_block_t* CbDCAC;
	if ((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
200816e0:	e0ffd217 	ldw	r3,-184(fp)
200816e4:	e0bfd317 	ldw	r2,-180(fp)
200816e8:	1885383a 	mul	r2,r3,r2
200816ec:	100491fa 	slli	r2,r2,7
200816f0:	1009883a 	mov	r4,r2
200816f4:	008b6cc0 	call	2008b6cc <malloc>
200816f8:	e0bfdc15 	stw	r2,-144(fp)
200816fc:	e0bfdc17 	ldw	r2,-144(fp)
20081700:	1000031e 	bne	r2,zero,20081710 <mjpeg423_decode+0x228>
		printf("cannot allocate CbDCAC");
20081704:	01000034 	movhi	r4,0
20081708:	21003704 	addi	r4,r4,220
2008170c:	008c1a00 	call	2008c1a0 <printf>
	dct_block_t* CrDCAC;
	if ((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
20081710:	e0ffd217 	ldw	r3,-184(fp)
20081714:	e0bfd317 	ldw	r2,-180(fp)
20081718:	1885383a 	mul	r2,r3,r2
2008171c:	100491fa 	slli	r2,r2,7
20081720:	1009883a 	mov	r4,r2
20081724:	008b6cc0 	call	2008b6cc <malloc>
20081728:	e0bfdd15 	stw	r2,-140(fp)
2008172c:	e0bfdd17 	ldw	r2,-140(fp)
20081730:	1000031e 	bne	r2,zero,20081740 <mjpeg423_decode+0x258>
		printf("cannot allocate CrDCAC");
20081734:	01000034 	movhi	r4,0
20081738:	21003d04 	addi	r4,r4,244
2008173c:	008c1a00 	call	2008c1a0 <printf>
	//Ybitstream is assigned a size sufficient to hold all bistreams
	//the bitstream is then read from the file into Ybitstream
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(
			hYb_size * wYb_size * 64 * sizeof(DCTELEM)
20081740:	e0ffd417 	ldw	r3,-176(fp)
20081744:	e0bfd517 	ldw	r2,-172(fp)
20081748:	1885383a 	mul	r2,r3,r2
2008174c:	100491fa 	slli	r2,r2,7
20081750:	1009883a 	mov	r4,r2
					+ 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
20081754:	e0bfd217 	ldw	r2,-184(fp)
20081758:	1006923a 	slli	r3,r2,8
2008175c:	e0bfd317 	ldw	r2,-180(fp)
20081760:	1885383a 	mul	r2,r3,r2
		printf("cannot allocate CrDCAC");
	//Ybitstream is assigned a size sufficient to hold all bistreams
	//the bitstream is then read from the file into Ybitstream
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(
20081764:	2085883a 	add	r2,r4,r2
20081768:	1009883a 	mov	r4,r2
2008176c:	008b6cc0 	call	2008b6cc <malloc>
20081770:	e0bfde15 	stw	r2,-136(fp)
20081774:	e0bfde17 	ldw	r2,-136(fp)
20081778:	1000031e 	bne	r2,zero,20081788 <mjpeg423_decode+0x2a0>
			hYb_size * wYb_size * 64 * sizeof(DCTELEM)
					+ 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		printf("cannot allocate bitstream");
2008177c:	01000034 	movhi	r4,0
20081780:	21004304 	addi	r4,r4,268
20081784:	008c1a00 	call	2008c1a0 <printf>

	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
			5 * sizeof(uint32_t) + payload_size) == 0)
20081788:	e0bfd117 	ldw	r2,-188(fp)
2008178c:	10800504 	addi	r2,r2,20
	uint8_t* Crbitstream;

	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
20081790:	e13ffc17 	ldw	r4,-16(fp)
20081794:	000b883a 	mov	r5,zero
20081798:	100d883a 	mov	r6,r2
2008179c:	008353c0 	call	2008353c <Fat_FileSeek>
200817a0:	1000031e 	bne	r2,zero,200817b0 <mjpeg423_decode+0x2c8>
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
200817a4:	01000034 	movhi	r4,0
200817a8:	21004a04 	addi	r4,r4,296
200817ac:	008c1a00 	call	2008c1a0 <printf>
	for (int count = 0; count < num_iframes; count++) {
200817b0:	e03fc515 	stw	zero,-236(fp)
200817b4:	00001c06 	br	20081828 <mjpeg423_decode+0x340>
		if (Fat_FileRead(file_handle, &(trailer[count].frame_index),
200817b8:	e0bfc517 	ldw	r2,-236(fp)
200817bc:	100490fa 	slli	r2,r2,3
200817c0:	e0ffd617 	ldw	r3,-168(fp)
200817c4:	1885883a 	add	r2,r3,r2
200817c8:	e13ffc17 	ldw	r4,-16(fp)
200817cc:	100b883a 	mov	r5,r2
200817d0:	01800104 	movi	r6,4
200817d4:	0082fc00 	call	20082fc0 <Fat_FileRead>
200817d8:	1000031e 	bne	r2,zero,200817e8 <mjpeg423_decode+0x300>
				sizeof(uint32_t)) == 0)
			printf("cannot read iframe");
200817dc:	01000034 	movhi	r4,0
200817e0:	21005004 	addi	r4,r4,320
200817e4:	008c1a00 	call	2008c1a0 <printf>
		//if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		//if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		if (Fat_FileRead(file_handle, &(trailer[count].frame_position),
200817e8:	e0bfc517 	ldw	r2,-236(fp)
200817ec:	100490fa 	slli	r2,r2,3
200817f0:	e0ffd617 	ldw	r3,-168(fp)
200817f4:	1885883a 	add	r2,r3,r2
200817f8:	10800104 	addi	r2,r2,4
200817fc:	e13ffc17 	ldw	r4,-16(fp)
20081800:	100b883a 	mov	r5,r2
20081804:	01800104 	movi	r6,4
20081808:	0082fc00 	call	20082fc0 <Fat_FileRead>
2008180c:	1000031e 	bne	r2,zero,2008181c <mjpeg423_decode+0x334>
				sizeof(uint32_t)) == 0)
			printf("cannot read iframe");
20081810:	01000034 	movhi	r4,0
20081814:	21005004 	addi	r4,r4,320
20081818:	008c1a00 	call	2008c1a0 <printf>
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
	for (int count = 0; count < num_iframes; count++) {
2008181c:	e0bfc517 	ldw	r2,-236(fp)
20081820:	10800044 	addi	r2,r2,1
20081824:	e0bfc515 	stw	r2,-236(fp)
20081828:	e0ffc517 	ldw	r3,-236(fp)
2008182c:	e0bfd017 	ldw	r2,-192(fp)
20081830:	18bfe136 	bltu	r3,r2,200817b8 <__flash_rwdata_start+0xfffe29cc>
		printf("I frame index %u, ", trailer[count].frame_index);
		printf("position %u\n", trailer[count].frame_position);
#endif
	}
	//set it back to beginning of payload
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, 5 * sizeof(uint32_t)) == 0)
20081834:	e13ffc17 	ldw	r4,-16(fp)
20081838:	000b883a 	mov	r5,zero
2008183c:	01800504 	movi	r6,20
20081840:	008353c0 	call	2008353c <Fat_FileSeek>
20081844:	1000031e 	bne	r2,zero,20081854 <mjpeg423_decode+0x36c>
		printf("cannot seek into file");
20081848:	01000034 	movhi	r4,0
2008184c:	21004a04 	addi	r4,r4,296
20081850:	008c1a00 	call	2008c1a0 <printf>
	uint idct_start_t, idct_end_t, idct_y_end_t, idct_block_start_t, idct_block_end_t;
	uint ycbcr_start_t, ycbcr_block_start_t, ycbcr_block_end_t;
	uint display_start_t, display_end_t;

	//encode and write frames
	for (int frame_index = 0; frame_index < num_frames; frame_index++) {
20081854:	e03fc615 	stw	zero,-232(fp)
20081858:	00012606 	br	20081cf4 <mjpeg423_decode+0x80c>
			//*exit_flag = 0;
			//printf("\n returning due to exit flag\n");
			//return;
		}

		if(*play_flag == 0 && frame_index != 0){
2008185c:	e0bfff17 	ldw	r2,-4(fp)
20081860:	10800017 	ldw	r2,0(r2)
20081864:	1000061e 	bne	r2,zero,20081880 <mjpeg423_decode+0x398>
20081868:	e0bfc617 	ldw	r2,-232(fp)
2008186c:	10000426 	beq	r2,zero,20081880 <mjpeg423_decode+0x398>
			frame_index--;
20081870:	e0bfc617 	ldw	r2,-232(fp)
20081874:	10bfffc4 	addi	r2,r2,-1
20081878:	e0bfc615 	stw	r2,-232(fp)
			continue;
2008187c:	00011a06 	br	20081ce8 <mjpeg423_decode+0x800>
		}

		if(*skip_fw_flag != 0){
20081880:	e0800217 	ldw	r2,8(fp)
20081884:	10800017 	ldw	r2,0(r2)
20081888:	10003226 	beq	r2,zero,20081954 <mjpeg423_decode+0x46c>
			*skip_fw_flag = 0;
2008188c:	e0800217 	ldw	r2,8(fp)
20081890:	10000015 	stw	zero,0(r2)
			if(frame_index + 120 >= num_frames){
20081894:	e0bfc617 	ldw	r2,-232(fp)
20081898:	10801e04 	addi	r2,r2,120
2008189c:	1007883a 	mov	r3,r2
200818a0:	e0bfcd17 	ldw	r2,-204(fp)
200818a4:	18800436 	bltu	r3,r2,200818b8 <mjpeg423_decode+0x3d0>
				printf("\n skipped to end of file \n");
200818a8:	01000034 	movhi	r4,0
200818ac:	21005504 	addi	r4,r4,340
200818b0:	008c2a40 	call	2008c2a4 <puts>
				return;
200818b4:	00012606 	br	20081d50 <mjpeg423_decode+0x868>
			} else{
				frame_index = frame_index + 110;
200818b8:	e0bfc617 	ldw	r2,-232(fp)
200818bc:	10801b84 	addi	r2,r2,110
200818c0:	e0bfc615 	stw	r2,-232(fp)
			}
			for (int count = 0; count < num_iframes; count++) {
200818c4:	e03fc715 	stw	zero,-228(fp)
200818c8:	00001f06 	br	20081948 <mjpeg423_decode+0x460>
				if( trailer[count].frame_index >= frame_index){
200818cc:	e0bfc717 	ldw	r2,-228(fp)
200818d0:	100490fa 	slli	r2,r2,3
200818d4:	e0ffd617 	ldw	r3,-168(fp)
200818d8:	1885883a 	add	r2,r3,r2
200818dc:	10c00017 	ldw	r3,0(r2)
200818e0:	e0bfc617 	ldw	r2,-232(fp)
200818e4:	18801536 	bltu	r3,r2,2008193c <mjpeg423_decode+0x454>
					frame_index = trailer[count].frame_index;
200818e8:	e0bfc717 	ldw	r2,-228(fp)
200818ec:	100490fa 	slli	r2,r2,3
200818f0:	e0ffd617 	ldw	r3,-168(fp)
200818f4:	1885883a 	add	r2,r3,r2
200818f8:	10800017 	ldw	r2,0(r2)
200818fc:	e0bfc615 	stw	r2,-232(fp)
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
20081900:	e0bfc717 	ldw	r2,-228(fp)
20081904:	100490fa 	slli	r2,r2,3
20081908:	e0ffd617 	ldw	r3,-168(fp)
2008190c:	1885883a 	add	r2,r3,r2
20081910:	10800117 	ldw	r2,4(r2)
20081914:	e13ffc17 	ldw	r4,-16(fp)
20081918:	000b883a 	mov	r5,zero
2008191c:	100d883a 	mov	r6,r2
20081920:	008353c0 	call	2008353c <Fat_FileSeek>
20081924:	1000041e 	bne	r2,zero,20081938 <mjpeg423_decode+0x450>
						printf("cannot seek to i frame");
20081928:	01000034 	movhi	r4,0
2008192c:	21005c04 	addi	r4,r4,368
20081930:	008c1a00 	call	2008c1a0 <printf>
					}
					break;
20081934:	00000706 	br	20081954 <mjpeg423_decode+0x46c>
20081938:	00000606 	br	20081954 <mjpeg423_decode+0x46c>
				printf("\n skipped to end of file \n");
				return;
			} else{
				frame_index = frame_index + 110;
			}
			for (int count = 0; count < num_iframes; count++) {
2008193c:	e0bfc717 	ldw	r2,-228(fp)
20081940:	10800044 	addi	r2,r2,1
20081944:	e0bfc715 	stw	r2,-228(fp)
20081948:	e0ffc717 	ldw	r3,-228(fp)
2008194c:	e0bfd017 	ldw	r2,-192(fp)
20081950:	18bfde36 	bltu	r3,r2,200818cc <__flash_rwdata_start+0xfffe2ae0>
					}
					break;
				}
			}
		}
		if(*skip_rv_flag != 0){
20081954:	e0800317 	ldw	r2,12(fp)
20081958:	10800017 	ldw	r2,0(r2)
2008195c:	10002d26 	beq	r2,zero,20081a14 <mjpeg423_decode+0x52c>
			*skip_rv_flag = 0;
20081960:	e0800317 	ldw	r2,12(fp)
20081964:	10000015 	stw	zero,0(r2)
			if(frame_index - 120 > 0){
20081968:	e0bfc617 	ldw	r2,-232(fp)
2008196c:	10bfe204 	addi	r2,r2,-120
20081970:	0080040e 	bge	zero,r2,20081984 <mjpeg423_decode+0x49c>
				frame_index = frame_index - 120;
20081974:	e0bfc617 	ldw	r2,-232(fp)
20081978:	10bfe204 	addi	r2,r2,-120
2008197c:	e0bfc615 	stw	r2,-232(fp)
20081980:	00000106 	br	20081988 <mjpeg423_decode+0x4a0>
			} else{
				frame_index = 0;
20081984:	e03fc615 	stw	zero,-232(fp)
			}
			for (int count = 0; count < num_iframes; count++) {
20081988:	e03fc815 	stw	zero,-224(fp)
2008198c:	00001e06 	br	20081a08 <mjpeg423_decode+0x520>
				if( trailer[count].frame_index >= frame_index){
20081990:	e0bfc817 	ldw	r2,-224(fp)
20081994:	100490fa 	slli	r2,r2,3
20081998:	e0ffd617 	ldw	r3,-168(fp)
2008199c:	1885883a 	add	r2,r3,r2
200819a0:	10c00017 	ldw	r3,0(r2)
200819a4:	e0bfc617 	ldw	r2,-232(fp)
200819a8:	18801436 	bltu	r3,r2,200819fc <mjpeg423_decode+0x514>
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
200819ac:	e0bfc817 	ldw	r2,-224(fp)
200819b0:	100490fa 	slli	r2,r2,3
200819b4:	e0ffd617 	ldw	r3,-168(fp)
200819b8:	1885883a 	add	r2,r3,r2
200819bc:	10800117 	ldw	r2,4(r2)
200819c0:	e13ffc17 	ldw	r4,-16(fp)
200819c4:	000b883a 	mov	r5,zero
200819c8:	100d883a 	mov	r6,r2
200819cc:	008353c0 	call	2008353c <Fat_FileSeek>
200819d0:	1000031e 	bne	r2,zero,200819e0 <mjpeg423_decode+0x4f8>
						printf("cannot seek to i frame");
200819d4:	01000034 	movhi	r4,0
200819d8:	21005c04 	addi	r4,r4,368
200819dc:	008c1a00 	call	2008c1a0 <printf>
					}
					frame_index = trailer[count].frame_index;
200819e0:	e0bfc817 	ldw	r2,-224(fp)
200819e4:	100490fa 	slli	r2,r2,3
200819e8:	e0ffd617 	ldw	r3,-168(fp)
200819ec:	1885883a 	add	r2,r3,r2
200819f0:	10800017 	ldw	r2,0(r2)
200819f4:	e0bfc615 	stw	r2,-232(fp)
					break;
200819f8:	00000606 	br	20081a14 <mjpeg423_decode+0x52c>
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
200819fc:	e0bfc817 	ldw	r2,-224(fp)
20081a00:	10800044 	addi	r2,r2,1
20081a04:	e0bfc815 	stw	r2,-224(fp)
20081a08:	e0ffc817 	ldw	r3,-224(fp)
20081a0c:	e0bfd017 	ldw	r2,-192(fp)
20081a10:	18bfdf36 	bltu	r3,r2,20081990 <__flash_rwdata_start+0xfffe2ba4>
		printf("\nFrame #%u\n",frame_index);
		#endif

		//read frame payload
		//if(fread(frame_header, 4*sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		alt_timestamp_start();
20081a14:	009b0100 	call	2009b010 <alt_timestamp_start>
		file_start_t = alt_timestamp();
20081a18:	009b0980 	call	2009b098 <alt_timestamp>
20081a1c:	e0bfdf15 	stw	r2,-132(fp)
		if (Fat_FileRead(file_handle, frame_header, 4 * sizeof(uint32_t)) != 1)
20081a20:	e0bff804 	addi	r2,fp,-32
20081a24:	e13ffc17 	ldw	r4,-16(fp)
20081a28:	100b883a 	mov	r5,r2
20081a2c:	01800404 	movi	r6,16
20081a30:	0082fc00 	call	20082fc0 <Fat_FileRead>
20081a34:	10800060 	cmpeqi	r2,r2,1
20081a38:	1000031e 	bne	r2,zero,20081a48 <mjpeg423_decode+0x560>
			printf("cannot read input file");
20081a3c:	01000034 	movhi	r4,0
20081a40:	21001204 	addi	r4,r4,72
20081a44:	008c1a00 	call	2008c1a0 <printf>
		frame_size = frame_header[0];
20081a48:	e0bff817 	ldw	r2,-32(fp)
20081a4c:	e0bfe015 	stw	r2,-128(fp)
		frame_type = frame_header[1];
20081a50:	e0bff917 	ldw	r2,-28(fp)
20081a54:	e0bfe115 	stw	r2,-124(fp)
		Ysize = frame_header[2];
20081a58:	e0bffa17 	ldw	r2,-24(fp)
20081a5c:	e0bfe215 	stw	r2,-120(fp)
		Cbsize = frame_header[3];
20081a60:	e0bffb17 	ldw	r2,-20(fp)
20081a64:	e0bfe315 	stw	r2,-116(fp)
		printf("Frame_type %u\n",frame_type);
#endif

		//if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t)))
		if (Fat_FileRead(file_handle, Ybitstream,
				frame_size - 4 * sizeof(uint32_t)) != 1)
20081a68:	e0bfe017 	ldw	r2,-128(fp)
20081a6c:	10bffc04 	addi	r2,r2,-16
		printf("Frame_size %u\n",frame_size);
		printf("Frame_type %u\n",frame_type);
#endif

		//if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t)))
		if (Fat_FileRead(file_handle, Ybitstream,
20081a70:	e13ffc17 	ldw	r4,-16(fp)
20081a74:	e17fde17 	ldw	r5,-136(fp)
20081a78:	100d883a 	mov	r6,r2
20081a7c:	0082fc00 	call	20082fc0 <Fat_FileRead>
20081a80:	10800060 	cmpeqi	r2,r2,1
20081a84:	1000031e 	bne	r2,zero,20081a94 <mjpeg423_decode+0x5ac>
				frame_size - 4 * sizeof(uint32_t)) != 1)
			printf("cannot read input file");
20081a88:	01000034 	movhi	r4,0
20081a8c:	21001204 	addi	r4,r4,72
20081a90:	008c1a00 	call	2008c1a0 <printf>
		file_end_t = alt_timestamp();
20081a94:	009b0980 	call	2009b098 <alt_timestamp>
20081a98:	e0bfe415 	stw	r2,-112(fp)
		//error_and_exit("cannot read input file");
		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
20081a9c:	e0ffde17 	ldw	r3,-136(fp)
20081aa0:	e0bfe217 	ldw	r2,-120(fp)
20081aa4:	1885883a 	add	r2,r3,r2
20081aa8:	e0bfe515 	stw	r2,-108(fp)
		Crbitstream = Cbbitstream + Cbsize;
20081aac:	e0ffe517 	ldw	r3,-108(fp)
20081ab0:	e0bfe317 	ldw	r2,-116(fp)
20081ab4:	1885883a 	add	r2,r3,r2
20081ab8:	e0bfe615 	stw	r2,-104(fp)

		loss_dec_y_t = alt_timestamp();
20081abc:	009b0980 	call	2009b098 <alt_timestamp>
20081ac0:	e0bfe715 	stw	r2,-100(fp)
		//lossless decoding
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC, Yquant,
20081ac4:	e0ffd417 	ldw	r3,-176(fp)
20081ac8:	e0bfd517 	ldw	r2,-172(fp)
20081acc:	1887383a 	mul	r3,r3,r2
20081ad0:	e0bfe117 	ldw	r2,-124(fp)
20081ad4:	d8800015 	stw	r2,0(sp)
20081ad8:	1809883a 	mov	r4,r3
20081adc:	e17fde17 	ldw	r5,-136(fp)
20081ae0:	e1bfdb17 	ldw	r6,-148(fp)
20081ae4:	01c00034 	movhi	r7,0
20081ae8:	39c2fa04 	addi	r7,r7,3048
20081aec:	0080e080 	call	20080e08 <lossless_decode>
				frame_type);
		loss_dec_cb_t = alt_timestamp();
20081af0:	009b0980 	call	2009b098 <alt_timestamp>
20081af4:	e0bfe815 	stw	r2,-96(fp)
		lossless_decode(hCb_size * wCb_size, Cbbitstream, CbDCAC, Cquant,
20081af8:	e0ffd217 	ldw	r3,-184(fp)
20081afc:	e0bfd317 	ldw	r2,-180(fp)
20081b00:	1887383a 	mul	r3,r3,r2
20081b04:	e0bfe117 	ldw	r2,-124(fp)
20081b08:	d8800015 	stw	r2,0(sp)
20081b0c:	1809883a 	mov	r4,r3
20081b10:	e17fe517 	ldw	r5,-108(fp)
20081b14:	e1bfdc17 	ldw	r6,-144(fp)
20081b18:	01c00034 	movhi	r7,0
20081b1c:	39c31a04 	addi	r7,r7,3176
20081b20:	0080e080 	call	20080e08 <lossless_decode>
				frame_type);
		loss_dec_cr_t = alt_timestamp();
20081b24:	009b0980 	call	2009b098 <alt_timestamp>
20081b28:	e0bfe915 	stw	r2,-92(fp)
		lossless_decode(hCb_size * wCb_size, Crbitstream, CrDCAC, Cquant,
20081b2c:	e0ffd217 	ldw	r3,-184(fp)
20081b30:	e0bfd317 	ldw	r2,-180(fp)
20081b34:	1887383a 	mul	r3,r3,r2
20081b38:	e0bfe117 	ldw	r2,-124(fp)
20081b3c:	d8800015 	stw	r2,0(sp)
20081b40:	1809883a 	mov	r4,r3
20081b44:	e17fe617 	ldw	r5,-104(fp)
20081b48:	e1bfdd17 	ldw	r6,-140(fp)
20081b4c:	01c00034 	movhi	r7,0
20081b50:	39c31a04 	addi	r7,r7,3176
20081b54:	0080e080 	call	20080e08 <lossless_decode>
				frame_type);

		idct_start_t = alt_timestamp();
20081b58:	009b0980 	call	2009b098 <alt_timestamp>
20081b5c:	e0bfea15 	stw	r2,-88(fp)

		for (int b = 0; b < hCb_size * wCb_size; b++)
			//idct(CrDCAC[b], Crblock[b]);
			idct_hw(CrDCAC[b], Crblock[b], read_device_ptr, write_device_ptr);
*/
		idct_hw_frame(YDCAC, Yblock, hYb_size * wYb_size, read_device_ptr, write_device_ptr);
20081b60:	e0ffd417 	ldw	r3,-176(fp)
20081b64:	e0bfd517 	ldw	r2,-172(fp)
20081b68:	1887383a 	mul	r3,r3,r2
20081b6c:	e0bfcc17 	ldw	r2,-208(fp)
20081b70:	d8800015 	stw	r2,0(sp)
20081b74:	e13fdb17 	ldw	r4,-148(fp)
20081b78:	e17fd817 	ldw	r5,-160(fp)
20081b7c:	180d883a 	mov	r6,r3
20081b80:	e1ffcb17 	ldw	r7,-212(fp)
20081b84:	0081ffc0 	call	20081ffc <idct_hw_frame>
		idct_hw_frame(CbDCAC, Cbblock, hCb_size * wCb_size, read_device_ptr, write_device_ptr);
20081b88:	e0ffd217 	ldw	r3,-184(fp)
20081b8c:	e0bfd317 	ldw	r2,-180(fp)
20081b90:	1887383a 	mul	r3,r3,r2
20081b94:	e0bfcc17 	ldw	r2,-208(fp)
20081b98:	d8800015 	stw	r2,0(sp)
20081b9c:	e13fdc17 	ldw	r4,-144(fp)
20081ba0:	e17fd917 	ldw	r5,-156(fp)
20081ba4:	180d883a 	mov	r6,r3
20081ba8:	e1ffcb17 	ldw	r7,-212(fp)
20081bac:	0081ffc0 	call	20081ffc <idct_hw_frame>
		idct_hw_frame(CrDCAC, Crblock, hCb_size * wCb_size, read_device_ptr, write_device_ptr);
20081bb0:	e0ffd217 	ldw	r3,-184(fp)
20081bb4:	e0bfd317 	ldw	r2,-180(fp)
20081bb8:	1887383a 	mul	r3,r3,r2
20081bbc:	e0bfcc17 	ldw	r2,-208(fp)
20081bc0:	d8800015 	stw	r2,0(sp)
20081bc4:	e13fdd17 	ldw	r4,-140(fp)
20081bc8:	e17fda17 	ldw	r5,-152(fp)
20081bcc:	180d883a 	mov	r6,r3
20081bd0:	e1ffcb17 	ldw	r7,-212(fp)
20081bd4:	0081ffc0 	call	20081ffc <idct_hw_frame>

		idct_end_t = alt_timestamp();
20081bd8:	009b0980 	call	2009b098 <alt_timestamp>
20081bdc:	e0bfeb15 	stw	r2,-84(fp)

		alt_u32* current_buffer; //size = 4*width*height;
		while (hw_video_display_buffer_is_available(display) != 0) {
20081be0:	0001883a 	nop
20081be4:	e13ffe17 	ldw	r4,-8(fp)
20081be8:	00876f00 	call	200876f0 <hw_video_display_buffer_is_available>
20081bec:	103ffd1e 	bne	r2,zero,20081be4 <__flash_rwdata_start+0xfffe2df8>
		//Add code to update buffer here.

		//Register updated buffer
		//hw_video_display_register_written_buffer(display);
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);
20081bf0:	e13ffe17 	ldw	r4,-8(fp)
20081bf4:	0087aac0 	call	20087aac <hw_video_display_get_buffer>
20081bf8:	e0bfec15 	stw	r2,-80(fp)

		ycbcr_start_t = alt_timestamp();
20081bfc:	009b0980 	call	2009b098 <alt_timestamp>
20081c00:	e0bfed15 	stw	r2,-76(fp)
		for (int h = 0; h < hCb_size; h++)
20081c04:	e03fc915 	stw	zero,-220(fp)
20081c08:	00002c06 	br	20081cbc <mjpeg423_decode+0x7d4>
			for (int w = 0; w < wCb_size; w++) {
20081c0c:	e03fca15 	stw	zero,-216(fp)
20081c10:	00002406 	br	20081ca4 <mjpeg423_decode+0x7bc>
				int b = h * wCb_size + w;
20081c14:	e0ffc917 	ldw	r3,-220(fp)
20081c18:	e0bfd317 	ldw	r2,-180(fp)
20081c1c:	1887383a 	mul	r3,r3,r2
20081c20:	e0bfca17 	ldw	r2,-216(fp)
20081c24:	1885883a 	add	r2,r3,r2
20081c28:	e0bfee15 	stw	r2,-72(fp)
				ycbcr_block_start_t = alt_timestamp();
20081c2c:	009b0980 	call	2009b098 <alt_timestamp>
20081c30:	e0bfef15 	stw	r2,-68(fp)
				ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b],
20081c34:	e0bfc917 	ldw	r2,-220(fp)
20081c38:	100c90fa 	slli	r6,r2,3
20081c3c:	e0bfca17 	ldw	r2,-216(fp)
20081c40:	100a90fa 	slli	r5,r2,3
20081c44:	e0bfee17 	ldw	r2,-72(fp)
20081c48:	100491ba 	slli	r2,r2,6
20081c4c:	e0ffd817 	ldw	r3,-160(fp)
20081c50:	188f883a 	add	r7,r3,r2
20081c54:	e0bfee17 	ldw	r2,-72(fp)
20081c58:	100491ba 	slli	r2,r2,6
20081c5c:	e0ffd917 	ldw	r3,-156(fp)
20081c60:	1887883a 	add	r3,r3,r2
20081c64:	e0bfee17 	ldw	r2,-72(fp)
						Crblock[b], current_buffer);
20081c68:	100491ba 	slli	r2,r2,6
		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
			for (int w = 0; w < wCb_size; w++) {
				int b = h * wCb_size + w;
				ycbcr_block_start_t = alt_timestamp();
				ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b],
20081c6c:	e13fda17 	ldw	r4,-152(fp)
20081c70:	2085883a 	add	r2,r4,r2
20081c74:	d8c00015 	stw	r3,0(sp)
20081c78:	d8800115 	stw	r2,4(sp)
20081c7c:	e0bfec17 	ldw	r2,-80(fp)
20081c80:	d8800215 	stw	r2,8(sp)
20081c84:	3009883a 	mov	r4,r6
20081c88:	e1bfce17 	ldw	r6,-200(fp)
20081c8c:	00822b40 	call	200822b4 <ycbcr_to_rgb>
						Crblock[b], current_buffer);
				ycbcr_block_end_t = alt_timestamp();
20081c90:	009b0980 	call	2009b098 <alt_timestamp>
20081c94:	e0bff015 	stw	r2,-64(fp)
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);

		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
			for (int w = 0; w < wCb_size; w++) {
20081c98:	e0bfca17 	ldw	r2,-216(fp)
20081c9c:	10800044 	addi	r2,r2,1
20081ca0:	e0bfca15 	stw	r2,-216(fp)
20081ca4:	e0ffca17 	ldw	r3,-216(fp)
20081ca8:	e0bfd317 	ldw	r2,-180(fp)
20081cac:	18bfd916 	blt	r3,r2,20081c14 <__flash_rwdata_start+0xfffe2e28>
		//hw_video_display_register_written_buffer(display);
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);

		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
20081cb0:	e0bfc917 	ldw	r2,-220(fp)
20081cb4:	10800044 	addi	r2,r2,1
20081cb8:	e0bfc915 	stw	r2,-220(fp)
20081cbc:	e0ffc917 	ldw	r3,-220(fp)
20081cc0:	e0bfd217 	ldw	r2,-184(fp)
20081cc4:	18bfd116 	blt	r3,r2,20081c0c <__flash_rwdata_start+0xfffe2e20>

//		for(int i = 0; i < 640*480; i++)
//			printf("%X - ", current_buffer[i]);
		//printf("Current buffer: %X\n", current_buffer);
		//memcpy(current_buffer, rgbblock, 480*640*4);
		display_start_t = alt_timestamp();
20081cc8:	009b0980 	call	2009b098 <alt_timestamp>
20081ccc:	e0bff115 	stw	r2,-60(fp)
		hw_video_display_register_written_buffer(display);
20081cd0:	e13ffe17 	ldw	r4,-8(fp)
20081cd4:	008769c0 	call	2008769c <hw_video_display_register_written_buffer>
		//switch frames
		hw_video_display_switch_frames(display);
20081cd8:	e13ffe17 	ldw	r4,-8(fp)
20081cdc:	008774c0 	call	2008774c <hw_video_display_switch_frames>
		display_end_t = alt_timestamp();
20081ce0:	009b0980 	call	2009b098 <alt_timestamp>
20081ce4:	e0bff215 	stw	r2,-56(fp)
	uint idct_start_t, idct_end_t, idct_y_end_t, idct_block_start_t, idct_block_end_t;
	uint ycbcr_start_t, ycbcr_block_start_t, ycbcr_block_end_t;
	uint display_start_t, display_end_t;

	//encode and write frames
	for (int frame_index = 0; frame_index < num_frames; frame_index++) {
20081ce8:	e0bfc617 	ldw	r2,-232(fp)
20081cec:	10800044 	addi	r2,r2,1
20081cf0:	e0bfc615 	stw	r2,-232(fp)
20081cf4:	e0ffc617 	ldw	r3,-232(fp)
20081cf8:	e0bfcd17 	ldw	r2,-204(fp)
20081cfc:	18bed736 	bltu	r3,r2,2008185c <__flash_rwdata_start+0xfffe2a70>
	printf("\nDecoder done.\n");
#endif

	//close down
	//fclose(file_in);
	Fat_FileClose(file_handle);
20081d00:	e13ffc17 	ldw	r4,-16(fp)
20081d04:	008363c0 	call	2008363c <Fat_FileClose>
	free(rgbblock);
20081d08:	e13fd717 	ldw	r4,-164(fp)
20081d0c:	008b6e00 	call	2008b6e0 <free>
	free(Yblock);
20081d10:	e13fd817 	ldw	r4,-160(fp)
20081d14:	008b6e00 	call	2008b6e0 <free>
	free(Cbblock);
20081d18:	e13fd917 	ldw	r4,-156(fp)
20081d1c:	008b6e00 	call	2008b6e0 <free>
	free(Crblock);
20081d20:	e13fda17 	ldw	r4,-152(fp)
20081d24:	008b6e00 	call	2008b6e0 <free>
	free(YDCAC);
20081d28:	e13fdb17 	ldw	r4,-148(fp)
20081d2c:	008b6e00 	call	2008b6e0 <free>
	free(CbDCAC);
20081d30:	e13fdc17 	ldw	r4,-144(fp)
20081d34:	008b6e00 	call	2008b6e0 <free>
	free(CrDCAC);
20081d38:	e13fdd17 	ldw	r4,-140(fp)
20081d3c:	008b6e00 	call	2008b6e0 <free>
	free(Ybitstream);
20081d40:	e13fde17 	ldw	r4,-136(fp)
20081d44:	008b6e00 	call	2008b6e0 <free>
	free(trailer);
20081d48:	e13fd617 	ldw	r4,-168(fp)
20081d4c:	008b6e00 	call	2008b6e0 <free>

#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}
20081d50:	e037883a 	mov	sp,fp
20081d54:	dfc00117 	ldw	ra,4(sp)
20081d58:	df000017 	ldw	fp,0(sp)
20081d5c:	dec00204 	addi	sp,sp,8
20081d60:	f800283a 	ret

20081d64 <idct_hw>:

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081d64:	deffd004 	addi	sp,sp,-192
20081d68:	dfc02f15 	stw	ra,188(sp)
20081d6c:	df002e15 	stw	fp,184(sp)
20081d70:	dc002d15 	stw	r16,180(sp)
20081d74:	df002e04 	addi	fp,sp,184
20081d78:	e13ffb15 	stw	r4,-20(fp)
20081d7c:	e17ffc15 	stw	r5,-16(fp)
20081d80:	e1bffd15 	stw	r6,-12(fp)
20081d84:	e1fffe15 	stw	r7,-8(fp)
20081d88:	defff404 	addi	sp,sp,-48
20081d8c:	d8800504 	addi	r2,sp,20
20081d90:	108003c4 	addi	r2,r2,15
20081d94:	1004d13a 	srli	r2,r2,4
20081d98:	1020913a 	slli	r16,r2,4
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081d9c:	e0ffdb04 	addi	r3,fp,-148
20081da0:	00802004 	movi	r2,128
20081da4:	1809883a 	mov	r4,r3
20081da8:	000b883a 	mov	r5,zero
20081dac:	100d883a 	mov	r6,r2
20081db0:	008c0500 	call	2008c050 <memset>
20081db4:	00813604 	movi	r2,1240
20081db8:	e0bfdb0d 	sth	r2,-148(fp)
20081dbc:	00bffd84 	movi	r2,-10
20081dc0:	e0bfdc0d 	sth	r2,-144(fp)
20081dc4:	00bffa04 	movi	r2,-24
20081dc8:	e0bfdf0d 	sth	r2,-132(fp)
20081dcc:	00bffd04 	movi	r2,-12
20081dd0:	e0bfdf8d 	sth	r2,-130(fp)
20081dd4:	00bffc84 	movi	r2,-14
20081dd8:	e0bfe30d 	sth	r2,-116(fp)
20081ddc:	00bffcc4 	movi	r2,-13
20081de0:	e0bfe38d 	sth	r2,-114(fp)
						   {0,0,0,0,0,0,0,0},
						   {0,0,0,0,0,0,0,0},
					       {0,0,0,0,0,0,0,0}};   /*  initializers for row indexed by 2 */


	alt_u32 *in_data_ptr = test;
20081de4:	e0bfdb04 	addi	r2,fp,-148
20081de8:	e0bfd815 	stw	r2,-160(fp)
	alt_u32 block_length = 64;
20081dec:	00801004 	movi	r2,64
20081df0:	e0bfd915 	stw	r2,-156(fp)
	alt_u32 *out_data_ptr = block[0];
20081df4:	e0bffc17 	ldw	r2,-16(fp)
20081df8:	e0bfda15 	stw	r2,-152(fp)
		for( i = 0; i < 8; i++){
			test[i][i] = 100;
		}
		count22++;*/

	alt_dcache_flush_all();
20081dfc:	00997740 	call	20099774 <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20081e00:	e0bfd917 	ldw	r2,-156(fp)
20081e04:	1085883a 	add	r2,r2,r2
20081e08:	100f883a 	mov	r7,r2
20081e0c:	80c00404 	addi	r3,r16,16
20081e10:	00900004 	movi	r2,16384
20081e14:	d8800015 	stw	r2,0(sp)
20081e18:	e13ffd17 	ldw	r4,-12(fp)
20081e1c:	180b883a 	mov	r5,r3
20081e20:	e1bfd817 	ldw	r6,-160(fp)
20081e24:	009bd640 	call	2009bd64 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081e28:	10000326 	beq	r2,zero,20081e38 <idct_hw+0xd4>
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20081e2c:	01000034 	movhi	r4,0
20081e30:	21006204 	addi	r4,r4,392
20081e34:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
20081e38:	00900004 	movi	r2,16384
20081e3c:	d8800015 	stw	r2,0(sp)
20081e40:	e13ffe17 	ldw	r4,-8(fp)
20081e44:	800b883a 	mov	r5,r16
20081e48:	e1bfda17 	ldw	r6,-152(fp)
20081e4c:	e1ffd917 	ldw	r7,-156(fp)
20081e50:	009bd0c0 	call	2009bd0c <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081e54:	10000326 	beq	r2,zero,20081e64 <idct_hw+0x100>
					write_pointer, &st_to_mm_dma_struct, out_data_ptr,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
20081e58:	01000034 	movhi	r4,0
20081e5c:	21006c04 	addi	r4,r4,432
20081e60:	008c2a40 	call	2008c2a4 <puts>
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
20081e64:	80800404 	addi	r2,r16,16
20081e68:	e13ffd17 	ldw	r4,-12(fp)
20081e6c:	100b883a 	mov	r5,r2
20081e70:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
20081e74:	10000326 	beq	r2,zero,20081e84 <idct_hw+0x120>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
20081e78:	01000034 	movhi	r4,0
20081e7c:	21007604 	addi	r4,r4,472
20081e80:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
20081e84:	e13ffe17 	ldw	r4,-8(fp)
20081e88:	800b883a 	mov	r5,r16
20081e8c:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
20081e90:	10000326 	beq	r2,zero,20081ea0 <idct_hw+0x13c>
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
20081e94:	01000034 	movhi	r4,0
20081e98:	21007f04 	addi	r4,r4,508
20081e9c:	008c2a40 	call	2008c2a4 <puts>
	}

	alt_dcache_flush_all();
20081ea0:	00997740 	call	20099774 <alt_dcache_flush_all>

	printf("DMA TEST: %d\n", count22);
20081ea4:	d0a00017 	ldw	r2,-32768(gp)
20081ea8:	01000034 	movhi	r4,0
20081eac:	21008804 	addi	r4,r4,544
20081eb0:	100b883a 	mov	r5,r2
20081eb4:	008c1a00 	call	2008c1a0 <printf>
	if (count22==300){
20081eb8:	d0a00017 	ldw	r2,-32768(gp)
20081ebc:	10804b18 	cmpnei	r2,r2,300
20081ec0:	1000021e 	bne	r2,zero,20081ecc <idct_hw+0x168>
		count22 = 100;
20081ec4:	00801904 	movi	r2,100
20081ec8:	d0a00015 	stw	r2,-32768(gp)
	}

	for( i = 0; i < 8; i++){
20081ecc:	e03fd715 	stw	zero,-164(fp)
20081ed0:	00003e06 	br	20081fcc <idct_hw+0x268>

		printf("%d %d %d %d %d %d %d %d \n",block[i][0],block[i][1],block[i][2],block[i][3],block[i][4],block[i][5],block[i][6],block[i][7]);
20081ed4:	e0bfd717 	ldw	r2,-164(fp)
20081ed8:	100490fa 	slli	r2,r2,3
20081edc:	e0fffc17 	ldw	r3,-16(fp)
20081ee0:	1885883a 	add	r2,r3,r2
20081ee4:	10800003 	ldbu	r2,0(r2)
20081ee8:	12803fcc 	andi	r10,r2,255
20081eec:	e0bfd717 	ldw	r2,-164(fp)
20081ef0:	100490fa 	slli	r2,r2,3
20081ef4:	e0fffc17 	ldw	r3,-16(fp)
20081ef8:	1885883a 	add	r2,r3,r2
20081efc:	10800043 	ldbu	r2,1(r2)
20081f00:	12403fcc 	andi	r9,r2,255
20081f04:	e0bfd717 	ldw	r2,-164(fp)
20081f08:	100490fa 	slli	r2,r2,3
20081f0c:	e0fffc17 	ldw	r3,-16(fp)
20081f10:	1885883a 	add	r2,r3,r2
20081f14:	10800083 	ldbu	r2,2(r2)
20081f18:	12003fcc 	andi	r8,r2,255
20081f1c:	e0bfd717 	ldw	r2,-164(fp)
20081f20:	100490fa 	slli	r2,r2,3
20081f24:	e0fffc17 	ldw	r3,-16(fp)
20081f28:	1885883a 	add	r2,r3,r2
20081f2c:	108000c3 	ldbu	r2,3(r2)
20081f30:	11803fcc 	andi	r6,r2,255
20081f34:	e0bfd717 	ldw	r2,-164(fp)
20081f38:	100490fa 	slli	r2,r2,3
20081f3c:	e0fffc17 	ldw	r3,-16(fp)
20081f40:	1885883a 	add	r2,r3,r2
20081f44:	10800103 	ldbu	r2,4(r2)
20081f48:	11403fcc 	andi	r5,r2,255
20081f4c:	e0bfd717 	ldw	r2,-164(fp)
20081f50:	100490fa 	slli	r2,r2,3
20081f54:	e0fffc17 	ldw	r3,-16(fp)
20081f58:	1885883a 	add	r2,r3,r2
20081f5c:	10800143 	ldbu	r2,5(r2)
20081f60:	11003fcc 	andi	r4,r2,255
20081f64:	e0bfd717 	ldw	r2,-164(fp)
20081f68:	100490fa 	slli	r2,r2,3
20081f6c:	e0fffc17 	ldw	r3,-16(fp)
20081f70:	1885883a 	add	r2,r3,r2
20081f74:	10800183 	ldbu	r2,6(r2)
20081f78:	10c03fcc 	andi	r3,r2,255
20081f7c:	e0bfd717 	ldw	r2,-164(fp)
20081f80:	100490fa 	slli	r2,r2,3
20081f84:	e1fffc17 	ldw	r7,-16(fp)
20081f88:	3885883a 	add	r2,r7,r2
20081f8c:	108001c3 	ldbu	r2,7(r2)
20081f90:	10803fcc 	andi	r2,r2,255
20081f94:	d9800015 	stw	r6,0(sp)
20081f98:	d9400115 	stw	r5,4(sp)
20081f9c:	d9000215 	stw	r4,8(sp)
20081fa0:	d8c00315 	stw	r3,12(sp)
20081fa4:	d8800415 	stw	r2,16(sp)
20081fa8:	01000034 	movhi	r4,0
20081fac:	21008c04 	addi	r4,r4,560
20081fb0:	500b883a 	mov	r5,r10
20081fb4:	480d883a 	mov	r6,r9
20081fb8:	400f883a 	mov	r7,r8
20081fbc:	008c1a00 	call	2008c1a0 <printf>
	printf("DMA TEST: %d\n", count22);
	if (count22==300){
		count22 = 100;
	}

	for( i = 0; i < 8; i++){
20081fc0:	e0bfd717 	ldw	r2,-164(fp)
20081fc4:	10800044 	addi	r2,r2,1
20081fc8:	e0bfd715 	stw	r2,-164(fp)
20081fcc:	e0bfd717 	ldw	r2,-164(fp)
20081fd0:	10800210 	cmplti	r2,r2,8
20081fd4:	103fbf1e 	bne	r2,zero,20081ed4 <__flash_rwdata_start+0xfffe30e8>

		printf("%d %d %d %d %d %d %d %d \n",block[i][0],block[i][1],block[i][2],block[i][3],block[i][4],block[i][5],block[i][6],block[i][7]);
	}

	printf("\n");
20081fd8:	01000284 	movi	r4,10
20081fdc:	008c1e40 	call	2008c1e4 <putchar>

	return 0;
20081fe0:	0005883a 	mov	r2,zero
}
20081fe4:	e6ffff04 	addi	sp,fp,-4
20081fe8:	dfc00217 	ldw	ra,8(sp)
20081fec:	df000117 	ldw	fp,4(sp)
20081ff0:	dc000017 	ldw	r16,0(sp)
20081ff4:	dec00304 	addi	sp,sp,12
20081ff8:	f800283a 	ret

20081ffc <idct_hw_frame>:

int idct_hw_frame(pdct_block_t* DCAC, pcolor_block_t* block, int block_count, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081ffc:	defff504 	addi	sp,sp,-44
20082000:	dfc00a15 	stw	ra,40(sp)
20082004:	df000915 	stw	fp,36(sp)
20082008:	dc000815 	stw	r16,32(sp)
2008200c:	df000904 	addi	fp,sp,36
20082010:	e13ffb15 	stw	r4,-20(fp)
20082014:	e17ffc15 	stw	r5,-16(fp)
20082018:	e1bffd15 	stw	r6,-12(fp)
2008201c:	e1fffe15 	stw	r7,-8(fp)
20082020:	defff404 	addi	sp,sp,-48
20082024:	d8800104 	addi	r2,sp,4
20082028:	108003c4 	addi	r2,r2,15
2008202c:	1004d13a 	srli	r2,r2,4
20082030:	1020913a 	slli	r16,r2,4
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/


	alt_u32 *in_data_ptr = DCAC;
20082034:	e0bffb17 	ldw	r2,-20(fp)
20082038:	e0bff815 	stw	r2,-32(fp)
	alt_u32 block_length = 64*block_count;
2008203c:	e0bffd17 	ldw	r2,-12(fp)
20082040:	100491ba 	slli	r2,r2,6
20082044:	e0bff915 	stw	r2,-28(fp)
	alt_u32 *out_data_ptr = block;
20082048:	e0bffc17 	ldw	r2,-16(fp)
2008204c:	e0bffa15 	stw	r2,-24(fp)


	alt_dcache_flush_all();
20082050:	00997740 	call	20099774 <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20082054:	e0bff917 	ldw	r2,-28(fp)
20082058:	1085883a 	add	r2,r2,r2
2008205c:	100f883a 	mov	r7,r2
20082060:	80c00404 	addi	r3,r16,16
20082064:	00900004 	movi	r2,16384
20082068:	d8800015 	stw	r2,0(sp)
2008206c:	e13ffe17 	ldw	r4,-8(fp)
20082070:	180b883a 	mov	r5,r3
20082074:	e1bff817 	ldw	r6,-32(fp)
20082078:	009bd640 	call	2009bd64 <alt_msgdma_construct_standard_mm_to_st_descriptor>
2008207c:	10000326 	beq	r2,zero,2008208c <idct_hw_frame+0x90>
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20082080:	01000034 	movhi	r4,0
20082084:	21006204 	addi	r4,r4,392
20082088:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
2008208c:	00900004 	movi	r2,16384
20082090:	d8800015 	stw	r2,0(sp)
20082094:	e1000217 	ldw	r4,8(fp)
20082098:	800b883a 	mov	r5,r16
2008209c:	e1bffa17 	ldw	r6,-24(fp)
200820a0:	e1fff917 	ldw	r7,-28(fp)
200820a4:	009bd0c0 	call	2009bd0c <alt_msgdma_construct_standard_st_to_mm_descriptor>
200820a8:	10000326 	beq	r2,zero,200820b8 <idct_hw_frame+0xbc>
					write_pointer, &st_to_mm_dma_struct, out_data_ptr,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
200820ac:	01000034 	movhi	r4,0
200820b0:	21006c04 	addi	r4,r4,432
200820b4:	008c2a40 	call	2008c2a4 <puts>
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
200820b8:	80800404 	addi	r2,r16,16
200820bc:	e13ffe17 	ldw	r4,-8(fp)
200820c0:	100b883a 	mov	r5,r2
200820c4:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
200820c8:	10000326 	beq	r2,zero,200820d8 <idct_hw_frame+0xdc>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
200820cc:	01000034 	movhi	r4,0
200820d0:	21007604 	addi	r4,r4,472
200820d4:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
200820d8:	e1000217 	ldw	r4,8(fp)
200820dc:	800b883a 	mov	r5,r16
200820e0:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
200820e4:	10000326 	beq	r2,zero,200820f4 <idct_hw_frame+0xf8>
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
200820e8:	01000034 	movhi	r4,0
200820ec:	21007f04 	addi	r4,r4,508
200820f0:	008c2a40 	call	2008c2a4 <puts>
	}

	alt_dcache_flush_all();
200820f4:	00997740 	call	20099774 <alt_dcache_flush_all>
	//for( i = 0; i < 8; i++){
		//printf("%d ",(int)destination[i]);
	//}
	//printf("\n");

	return 0;
200820f8:	0005883a 	mov	r2,zero
}
200820fc:	e6ffff04 	addi	sp,fp,-4
20082100:	dfc00217 	ldw	ra,8(sp)
20082104:	df000117 	ldw	fp,4(sp)
20082108:	dc000017 	ldw	r16,0(sp)
2008210c:	dec00304 	addi	sp,sp,12
20082110:	f800283a 	ret

20082114 <idct_test>:

int idct_test(alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20082114:	deffb704 	addi	sp,sp,-292
20082118:	dfc04815 	stw	ra,288(sp)
2008211c:	df004715 	stw	fp,284(sp)
20082120:	dc004615 	stw	r16,280(sp)
20082124:	df004704 	addi	fp,sp,284
20082128:	e13ffd15 	stw	r4,-12(fp)
2008212c:	e17ffe15 	stw	r5,-8(fp)
20082130:	defff404 	addi	sp,sp,-48
20082134:	d8800104 	addi	r2,sp,4
20082138:	108003c4 	addi	r2,r2,15
2008213c:	1004d13a 	srli	r2,r2,4
20082140:	1020913a 	slli	r16,r2,4
	alt_u32 block_length = 32*sizeof(alt_u32);
20082144:	00802004 	movi	r2,128
20082148:	e0bfbb15 	stw	r2,-276(fp)
	alt_u32 data[32];
	data[0] = 15;
2008214c:	008003c4 	movi	r2,15
20082150:	e0bfbd15 	stw	r2,-268(fp)
	alt_u32 *data_block = data;
20082154:	e0bfbd04 	addi	r2,fp,-268
20082158:	e0bfbc15 	stw	r2,-272(fp)
	alt_u32 destination[32];
	destination[0] = 0;
2008215c:	e03fdd15 	stw	zero,-140(fp)

	alt_dcache_flush_all();
20082160:	00997740 	call	20099774 <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20082164:	80c00404 	addi	r3,r16,16
20082168:	00900004 	movi	r2,16384
2008216c:	d8800015 	stw	r2,0(sp)
20082170:	e13ffd17 	ldw	r4,-12(fp)
20082174:	180b883a 	mov	r5,r3
20082178:	e1bfbc17 	ldw	r6,-272(fp)
2008217c:	e1ffbb17 	ldw	r7,-276(fp)
20082180:	009bd640 	call	2009bd64 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20082184:	10000326 	beq	r2,zero,20082194 <idct_test+0x80>
					read_pointer, &mm_to_st_dma_struct, data_block,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20082188:	01000034 	movhi	r4,0
2008218c:	21006204 	addi	r4,r4,392
20082190:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
20082194:	e0ffdd04 	addi	r3,fp,-140
20082198:	00900004 	movi	r2,16384
2008219c:	d8800015 	stw	r2,0(sp)
200821a0:	e13ffe17 	ldw	r4,-8(fp)
200821a4:	800b883a 	mov	r5,r16
200821a8:	180d883a 	mov	r6,r3
200821ac:	e1ffbb17 	ldw	r7,-276(fp)
200821b0:	009bd0c0 	call	2009bd0c <alt_msgdma_construct_standard_st_to_mm_descriptor>
200821b4:	10000326 	beq	r2,zero,200821c4 <idct_test+0xb0>
					write_pointer, &st_to_mm_dma_struct, destination,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
200821b8:	01000034 	movhi	r4,0
200821bc:	21006c04 	addi	r4,r4,432
200821c0:	008c2a40 	call	2008c2a4 <puts>
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
200821c4:	80800404 	addi	r2,r16,16
200821c8:	e13ffd17 	ldw	r4,-12(fp)
200821cc:	100b883a 	mov	r5,r2
200821d0:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
200821d4:	10000326 	beq	r2,zero,200821e4 <idct_test+0xd0>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
200821d8:	01000034 	movhi	r4,0
200821dc:	21007604 	addi	r4,r4,472
200821e0:	008c2a40 	call	2008c2a4 <puts>
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
200821e4:	e13ffe17 	ldw	r4,-8(fp)
200821e8:	800b883a 	mov	r5,r16
200821ec:	009cf680 	call	2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>
200821f0:	10000326 	beq	r2,zero,20082200 <idct_test+0xec>
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
200821f4:	01000034 	movhi	r4,0
200821f8:	21007f04 	addi	r4,r4,508
200821fc:	008c2a40 	call	2008c2a4 <puts>
	}

	alt_dcache_flush_all();
20082200:	00997740 	call	20099774 <alt_dcache_flush_all>

	int i;
	printf("DMA TEST: ");
20082204:	01000034 	movhi	r4,0
20082208:	21009304 	addi	r4,r4,588
2008220c:	008c1a00 	call	2008c1a0 <printf>
	for( i = 0; i < 8; i++){
20082210:	e03fba15 	stw	zero,-280(fp)
20082214:	00000e06 	br	20082250 <idct_test+0x13c>
		printf("%d ",(int)destination[i]);
20082218:	e0bfba17 	ldw	r2,-280(fp)
2008221c:	1085883a 	add	r2,r2,r2
20082220:	1085883a 	add	r2,r2,r2
20082224:	e0ffba04 	addi	r3,fp,-280
20082228:	1885883a 	add	r2,r3,r2
2008222c:	10802304 	addi	r2,r2,140
20082230:	10800017 	ldw	r2,0(r2)
20082234:	01000034 	movhi	r4,0
20082238:	21009604 	addi	r4,r4,600
2008223c:	100b883a 	mov	r5,r2
20082240:	008c1a00 	call	2008c1a0 <printf>

	alt_dcache_flush_all();

	int i;
	printf("DMA TEST: ");
	for( i = 0; i < 8; i++){
20082244:	e0bfba17 	ldw	r2,-280(fp)
20082248:	10800044 	addi	r2,r2,1
2008224c:	e0bfba15 	stw	r2,-280(fp)
20082250:	e0bfba17 	ldw	r2,-280(fp)
20082254:	10800210 	cmplti	r2,r2,8
20082258:	103fef1e 	bne	r2,zero,20082218 <__flash_rwdata_start+0xfffe342c>
		printf("%d ",(int)destination[i]);
	}
	printf("\n");
2008225c:	01000284 	movi	r4,10
20082260:	008c1e40 	call	2008c1e4 <putchar>

	return 0;
20082264:	0005883a 	mov	r2,zero
}
20082268:	e6ffff04 	addi	sp,fp,-4
2008226c:	dfc00217 	ldw	ra,8(sp)
20082270:	df000117 	ldw	fp,4(sp)
20082274:	dc000017 	ldw	r16,0(sp)
20082278:	dec00304 	addi	sp,sp,12
2008227c:	f800283a 	ret

20082280 <write_dma_isr>:

static void write_dma_isr(void* context) {
20082280:	defffd04 	addi	sp,sp,-12
20082284:	dfc00215 	stw	ra,8(sp)
20082288:	df000115 	stw	fp,4(sp)
2008228c:	df000104 	addi	fp,sp,4
20082290:	e13fff15 	stw	r4,-4(fp)
	printf("reached IDCT DMA isr \n");
20082294:	01000034 	movhi	r4,0
20082298:	21009704 	addi	r4,r4,604
2008229c:	008c2a40 	call	2008c2a4 <puts>
}
200822a0:	e037883a 	mov	sp,fp
200822a4:	dfc00117 	ldw	ra,4(sp)
200822a8:	df000017 	ldw	fp,0(sp)
200822ac:	dec00204 	addi	sp,sp,8
200822b0:	f800283a 	ret

200822b4 <ycbcr_to_rgb>:

#else

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, alt_u32* rgbblock)
{
200822b4:	defff704 	addi	sp,sp,-36
200822b8:	df000815 	stw	fp,32(sp)
200822bc:	df000804 	addi	fp,sp,32
200822c0:	e13ffc15 	stw	r4,-16(fp)
200822c4:	e17ffd15 	stw	r5,-12(fp)
200822c8:	e1bffe15 	stw	r6,-8(fp)
200822cc:	e1ffff15 	stw	r7,-4(fp)
    int index;
    for (int y = 0; y < 8; y++){
200822d0:	e03ff915 	stw	zero,-28(fp)
200822d4:	00003b06 	br	200823c4 <ycbcr_to_rgb+0x110>
        index = (h+y) * w_size + w;
200822d8:	e0fffc17 	ldw	r3,-16(fp)
200822dc:	e0bff917 	ldw	r2,-28(fp)
200822e0:	1885883a 	add	r2,r3,r2
200822e4:	1007883a 	mov	r3,r2
200822e8:	e0bffe17 	ldw	r2,-8(fp)
200822ec:	1887383a 	mul	r3,r3,r2
200822f0:	e0bffd17 	ldw	r2,-12(fp)
200822f4:	1885883a 	add	r2,r3,r2
200822f8:	e0bff815 	stw	r2,-32(fp)
        for(int x = 0; x < 8; x++){
200822fc:	e03ffa15 	stw	zero,-24(fp)
20082300:	00002a06 	br	200823ac <ycbcr_to_rgb+0xf8>
            rgb_pixel_t pixel;
            pixel.alpha = 0;
20082304:	e03ffbc5 	stb	zero,-17(fp)
            rgbblock[index] = Cr[y][x] << 16 | Y[y][x] << 8 | Cb[y][x]; //= pixel;
20082308:	e0bff817 	ldw	r2,-32(fp)
2008230c:	1085883a 	add	r2,r2,r2
20082310:	1085883a 	add	r2,r2,r2
20082314:	1007883a 	mov	r3,r2
20082318:	e0800317 	ldw	r2,12(fp)
2008231c:	10c5883a 	add	r2,r2,r3
20082320:	e0fff917 	ldw	r3,-28(fp)
20082324:	180690fa 	slli	r3,r3,3
20082328:	e1000217 	ldw	r4,8(fp)
2008232c:	20c9883a 	add	r4,r4,r3
20082330:	e0fffa17 	ldw	r3,-24(fp)
20082334:	20c7883a 	add	r3,r4,r3
20082338:	18c00003 	ldbu	r3,0(r3)
2008233c:	18c03fcc 	andi	r3,r3,255
20082340:	1808943a 	slli	r4,r3,16
20082344:	e0fff917 	ldw	r3,-28(fp)
20082348:	180690fa 	slli	r3,r3,3
2008234c:	e17fff17 	ldw	r5,-4(fp)
20082350:	28cb883a 	add	r5,r5,r3
20082354:	e0fffa17 	ldw	r3,-24(fp)
20082358:	28c7883a 	add	r3,r5,r3
2008235c:	18c00003 	ldbu	r3,0(r3)
20082360:	18c03fcc 	andi	r3,r3,255
20082364:	1806923a 	slli	r3,r3,8
20082368:	20c8b03a 	or	r4,r4,r3
2008236c:	e0fff917 	ldw	r3,-28(fp)
20082370:	180690fa 	slli	r3,r3,3
20082374:	e1400117 	ldw	r5,4(fp)
20082378:	28cb883a 	add	r5,r5,r3
2008237c:	e0fffa17 	ldw	r3,-24(fp)
20082380:	28c7883a 	add	r3,r5,r3
20082384:	18c00003 	ldbu	r3,0(r3)
20082388:	18c03fcc 	andi	r3,r3,255
2008238c:	20c6b03a 	or	r3,r4,r3
20082390:	10c00015 	stw	r3,0(r2)
            index++;
20082394:	e0bff817 	ldw	r2,-32(fp)
20082398:	10800044 	addi	r2,r2,1
2008239c:	e0bff815 	stw	r2,-32(fp)
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, alt_u32* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
200823a0:	e0bffa17 	ldw	r2,-24(fp)
200823a4:	10800044 	addi	r2,r2,1
200823a8:	e0bffa15 	stw	r2,-24(fp)
200823ac:	e0bffa17 	ldw	r2,-24(fp)
200823b0:	10800210 	cmplti	r2,r2,8
200823b4:	103fd31e 	bne	r2,zero,20082304 <__flash_rwdata_start+0xfffe3518>

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, alt_u32* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
200823b8:	e0bff917 	ldw	r2,-28(fp)
200823bc:	10800044 	addi	r2,r2,1
200823c0:	e0bff915 	stw	r2,-28(fp)
200823c4:	e0bff917 	ldw	r2,-28(fp)
200823c8:	10800210 	cmplti	r2,r2,8
200823cc:	103fc21e 	bne	r2,zero,200822d8 <__flash_rwdata_start+0xfffe34ec>
            pixel.alpha = 0;
            rgbblock[index] = Cr[y][x] << 16 | Y[y][x] << 8 | Cb[y][x]; //= pixel;
            index++;
        }
    }
}
200823d0:	e037883a 	mov	sp,fp
200823d4:	df000017 	ldw	fp,0(sp)
200823d8:	dec00104 	addi	sp,sp,4
200823dc:	f800283a 	ret

200823e0 <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(){
200823e0:	defffd04 	addi	sp,sp,-12
200823e4:	dfc00215 	stw	ra,8(sp)
200823e8:	df000115 	stw	fp,4(sp)
200823ec:	df000104 	addi	fp,sp,4
    
    FAT_HANDLE hFat = 0;
200823f0:	e03fff15 	stw	zero,-4(fp)
    hFat = fatMountSdcard();
200823f4:	008497c0 	call	2008497c <fatMountSdcard>
200823f8:	e0bfff15 	stw	r2,-4(fp)
    return hFat;      
200823fc:	e0bfff17 	ldw	r2,-4(fp)
}
20082400:	e037883a 	mov	sp,fp
20082404:	dfc00117 	ldw	ra,4(sp)
20082408:	df000017 	ldw	fp,0(sp)
2008240c:	dec00204 	addi	sp,sp,8
20082410:	f800283a 	ret

20082414 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
20082414:	defffd04 	addi	sp,sp,-12
20082418:	df000215 	stw	fp,8(sp)
2008241c:	df000204 	addi	fp,sp,8
20082420:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
20082424:	e0bfff17 	ldw	r2,-4(fp)
20082428:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
2008242c:	e0bffe17 	ldw	r2,-8(fp)
20082430:	1000011e 	bne	r2,zero,20082438 <Fat_Unmount+0x24>
        return;
20082434:	00000206 	br	20082440 <Fat_Unmount+0x2c>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
20082438:	e0bffe17 	ldw	r2,-8(fp)
2008243c:	10000515 	stw	zero,20(r2)
    
    //free(pVol);
}   
20082440:	e037883a 	mov	sp,fp
20082444:	df000017 	ldw	fp,0(sp)
20082448:	dec00104 	addi	sp,sp,4
2008244c:	f800283a 	ret

20082450 <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
20082450:	defffc04 	addi	sp,sp,-16
20082454:	df000315 	stw	fp,12(sp)
20082458:	df000304 	addi	fp,sp,12
2008245c:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
20082460:	e0bfff17 	ldw	r2,-4(fp)
20082464:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
20082468:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
2008246c:	e0bffe17 	ldw	r2,-8(fp)
20082470:	10000d26 	beq	r2,zero,200824a8 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
20082474:	e0bffe17 	ldw	r2,-8(fp)
20082478:	10800417 	ldw	r2,16(r2)
2008247c:	10800198 	cmpnei	r2,r2,6
20082480:	1000031e 	bne	r2,zero,20082490 <Fat_Type+0x40>
            Type = FAT_FAT16;
20082484:	00800044 	movi	r2,1
20082488:	e0bffd15 	stw	r2,-12(fp)
2008248c:	00000606 	br	200824a8 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
20082490:	e0bffe17 	ldw	r2,-8(fp)
20082494:	10800417 	ldw	r2,16(r2)
20082498:	108002d8 	cmpnei	r2,r2,11
2008249c:	1000021e 	bne	r2,zero,200824a8 <Fat_Type+0x58>
            Type = FAT_FAT32;
200824a0:	00800084 	movi	r2,2
200824a4:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
200824a8:	e0bffd17 	ldw	r2,-12(fp)
}
200824ac:	e037883a 	mov	sp,fp
200824b0:	df000017 	ldw	fp,0(sp)
200824b4:	dec00104 	addi	sp,sp,4
200824b8:	f800283a 	ret

200824bc <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
200824bc:	defffc04 	addi	sp,sp,-16
200824c0:	df000315 	stw	fp,12(sp)
200824c4:	df000304 	addi	fp,sp,12
200824c8:	e13ffe15 	stw	r4,-8(fp)
200824cc:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
200824d0:	e0bffe17 	ldw	r2,-8(fp)
200824d4:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
200824d8:	e0bffd17 	ldw	r2,-12(fp)
200824dc:	1000021e 	bne	r2,zero,200824e8 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
200824e0:	0005883a 	mov	r2,zero
200824e4:	00000c06 	br	20082518 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
200824e8:	e0bffd17 	ldw	r2,-12(fp)
200824ec:	10800517 	ldw	r2,20(r2)
200824f0:	1000021e 	bne	r2,zero,200824fc <Fat_FileBrowseBegin+0x40>
        return FALSE;
200824f4:	0005883a 	mov	r2,zero
200824f8:	00000706 	br	20082518 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
200824fc:	e0bfff17 	ldw	r2,-4(fp)
20082500:	00ffffc4 	movi	r3,-1
20082504:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
20082508:	e0bfff17 	ldw	r2,-4(fp)
2008250c:	e0fffe17 	ldw	r3,-8(fp)
20082510:	10c00115 	stw	r3,4(r2)
    return TRUE;
20082514:	00800044 	movi	r2,1
}
20082518:	e037883a 	mov	sp,fp
2008251c:	df000017 	ldw	fp,0(sp)
20082520:	dec00104 	addi	sp,sp,4
20082524:	f800283a 	ret

20082528 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20082528:	defff404 	addi	sp,sp,-48
2008252c:	dfc00b15 	stw	ra,44(sp)
20082530:	df000a15 	stw	fp,40(sp)
20082534:	df000a04 	addi	fp,sp,40
20082538:	e13ffe15 	stw	r4,-8(fp)
2008253c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
20082540:	e03ff615 	stw	zero,-40(fp)
20082544:	e03ff715 	stw	zero,-36(fp)
20082548:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
2008254c:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
20082550:	e0bffe17 	ldw	r2,-8(fp)
20082554:	10800117 	ldw	r2,4(r2)
20082558:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
2008255c:	e0bffa17 	ldw	r2,-24(fp)
20082560:	1000021e 	bne	r2,zero,2008256c <Fat_FileBrowseNext+0x44>
        return FALSE;    
20082564:	0005883a 	mov	r2,zero
20082568:	0000f506 	br	20082940 <Fat_FileBrowseNext+0x418>
    
    if (!pVol->bMount)
2008256c:	e0bffa17 	ldw	r2,-24(fp)
20082570:	10800517 	ldw	r2,20(r2)
20082574:	1000021e 	bne	r2,zero,20082580 <Fat_FileBrowseNext+0x58>
        return FALSE;
20082578:	0005883a 	mov	r2,zero
2008257c:	0000f006 	br	20082940 <Fat_FileBrowseNext+0x418>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
20082580:	e0bffe17 	ldw	r2,-8(fp)
20082584:	10800017 	ldw	r2,0(r2)
20082588:	10c00044 	addi	r3,r2,1
2008258c:	e0bffe17 	ldw	r2,-8(fp)
20082590:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20082594:	e0bffe17 	ldw	r2,-8(fp)
20082598:	10800017 	ldw	r2,0(r2)
2008259c:	e13ffa17 	ldw	r4,-24(fp)
200825a0:	100b883a 	mov	r5,r2
200825a4:	00843e80 	call	200843e8 <fatFindDirectory>
200825a8:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
200825ac:	e0bffb17 	ldw	r2,-20(fp)
200825b0:	1000021e 	bne	r2,zero,200825bc <Fat_FileBrowseNext+0x94>
            bError = TRUE;
200825b4:	00800044 	movi	r2,1
200825b8:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
200825bc:	e0bff717 	ldw	r2,-36(fp)
200825c0:	1000d71e 	bne	r2,zero,20082920 <Fat_FileBrowseNext+0x3f8>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
200825c4:	e13ffb17 	ldw	r4,-20(fp)
200825c8:	0083fdc0 	call	20083fdc <fatIsValidDir>
200825cc:	1000d426 	beq	r2,zero,20082920 <Fat_FileBrowseNext+0x3f8>
200825d0:	e13ffb17 	ldw	r4,-20(fp)
200825d4:	00840840 	call	20084084 <fatIsUnusedDir>
200825d8:	1000d11e 	bne	r2,zero,20082920 <Fat_FileBrowseNext+0x3f8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
200825dc:	e0bffb17 	ldw	r2,-20(fp)
200825e0:	108002c3 	ldbu	r2,11(r2)
200825e4:	10803fcc 	andi	r2,r2,255
200825e8:	108003cc 	andi	r2,r2,15
200825ec:	108003d8 	cmpnei	r2,r2,15
200825f0:	1000521e 	bne	r2,zero,2008273c <Fat_FileBrowseNext+0x214>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
200825f4:	e0bffb17 	ldw	r2,-20(fp)
200825f8:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
200825fc:	e0bffc17 	ldw	r2,-16(fp)
20082600:	108002c3 	ldbu	r2,11(r2)
20082604:	10803fcc 	andi	r2,r2,255
20082608:	108003cc 	andi	r2,r2,15
2008260c:	108003e0 	cmpeqi	r2,r2,15
20082610:	1000031e 	bne	r2,zero,20082620 <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
20082614:	00800044 	movi	r2,1
20082618:	e0bff715 	stw	r2,-36(fp)
2008261c:	00001e06 	br	20082698 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
20082620:	e0bff917 	ldw	r2,-28(fp)
20082624:	1000141e 	bne	r2,zero,20082678 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
20082628:	e0bff817 	ldw	r2,-32(fp)
2008262c:	1000041e 	bne	r2,zero,20082640 <Fat_FileBrowseNext+0x118>
20082630:	e0bff917 	ldw	r2,-28(fp)
20082634:	10c0100c 	andi	r3,r2,64
20082638:	e0bff917 	ldw	r2,-28(fp)
2008263c:	18800326 	beq	r3,r2,2008264c <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
20082640:	00800044 	movi	r2,1
20082644:	e0bff715 	stw	r2,-36(fp)
20082648:	00000506 	br	20082660 <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
2008264c:	e0bffc17 	ldw	r2,-16(fp)
20082650:	10800003 	ldbu	r2,0(r2)
20082654:	10803fcc 	andi	r2,r2,255
20082658:	10800fcc 	andi	r2,r2,63
2008265c:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20082660:	e0bfff17 	ldw	r2,-4(fp)
20082664:	1009883a 	mov	r4,r2
20082668:	000b883a 	mov	r5,zero
2008266c:	01804004 	movi	r6,256
20082670:	008c0500 	call	2008c050 <memset>
20082674:	00000806 	br	20082698 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
20082678:	e0bffc17 	ldw	r2,-16(fp)
2008267c:	10800003 	ldbu	r2,0(r2)
20082680:	10803fcc 	andi	r2,r2,255
20082684:	10c00fcc 	andi	r3,r2,63
20082688:	e0bff917 	ldw	r2,-28(fp)
2008268c:	18800226 	beq	r3,r2,20082698 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
20082690:	00800044 	movi	r2,1
20082694:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
20082698:	e0bff717 	ldw	r2,-36(fp)
2008269c:	1000261e 	bne	r2,zero,20082738 <Fat_FileBrowseNext+0x210>
                        int BaseOffset;
                        bLongFilename = TRUE;
200826a0:	00800044 	movi	r2,1
200826a4:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
200826a8:	e0bff917 	ldw	r2,-28(fp)
200826ac:	10bfffc4 	addi	r2,r2,-1
200826b0:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
200826b4:	e0bff917 	ldw	r2,-28(fp)
200826b8:	108006a4 	muli	r2,r2,26
200826bc:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
200826c0:	e0bffd17 	ldw	r2,-12(fp)
200826c4:	e0ffff17 	ldw	r3,-4(fp)
200826c8:	1887883a 	add	r3,r3,r2
200826cc:	e0bffc17 	ldw	r2,-16(fp)
200826d0:	10800044 	addi	r2,r2,1
200826d4:	1809883a 	mov	r4,r3
200826d8:	100b883a 	mov	r5,r2
200826dc:	01800284 	movi	r6,10
200826e0:	008bf180 	call	2008bf18 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
200826e4:	e0bffd17 	ldw	r2,-12(fp)
200826e8:	10800284 	addi	r2,r2,10
200826ec:	e0ffff17 	ldw	r3,-4(fp)
200826f0:	1887883a 	add	r3,r3,r2
200826f4:	e0bffc17 	ldw	r2,-16(fp)
200826f8:	10800384 	addi	r2,r2,14
200826fc:	1809883a 	mov	r4,r3
20082700:	100b883a 	mov	r5,r2
20082704:	01800304 	movi	r6,12
20082708:	008bf180 	call	2008bf18 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
2008270c:	e0bffd17 	ldw	r2,-12(fp)
20082710:	10800584 	addi	r2,r2,22
20082714:	e0ffff17 	ldw	r3,-4(fp)
20082718:	1887883a 	add	r3,r3,r2
2008271c:	e0bffc17 	ldw	r2,-16(fp)
20082720:	10800704 	addi	r2,r2,28
20082724:	1809883a 	mov	r4,r3
20082728:	100b883a 	mov	r5,r2
2008272c:	01800104 	movi	r6,4
20082730:	008bf180 	call	2008bf18 <memcpy>
20082734:	00007a06 	br	20082920 <Fat_FileBrowseNext+0x3f8>
20082738:	00007906 	br	20082920 <Fat_FileBrowseNext+0x3f8>
                    }                        
                }else{
                    if (bLongFilename){
2008273c:	e0bff817 	ldw	r2,-32(fp)
20082740:	10000e26 	beq	r2,zero,2008277c <Fat_FileBrowseNext+0x254>
                        pFileContext->Attribute = ATTR_LONG_NAME;
20082744:	e0bfff17 	ldw	r2,-4(fp)
20082748:	00c003c4 	movi	r3,15
2008274c:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
20082750:	e0bffb17 	ldw	r2,-20(fp)
20082754:	108002c3 	ldbu	r2,11(r2)
20082758:	10803fcc 	andi	r2,r2,255
2008275c:	10800c0c 	andi	r2,r2,48
20082760:	1000031e 	bne	r2,zero,20082770 <Fat_FileBrowseNext+0x248>
                            bError = TRUE;
20082764:	00800044 	movi	r2,1
20082768:	e0bff715 	stw	r2,-36(fp)
2008276c:	00000906 	br	20082794 <Fat_FileBrowseNext+0x26c>
                        else    
                            bFind = TRUE;
20082770:	00800044 	movi	r2,1
20082774:	e0bff615 	stw	r2,-40(fp)
20082778:	00000606 	br	20082794 <Fat_FileBrowseNext+0x26c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
2008277c:	e0bfff17 	ldw	r2,-4(fp)
20082780:	e13ffb17 	ldw	r4,-20(fp)
20082784:	100b883a 	mov	r5,r2
20082788:	0082a540 	call	20082a54 <fatComposeShortFilename>
                        bFind = TRUE;
2008278c:	00800044 	movi	r2,1
20082790:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
20082794:	e0bff617 	ldw	r2,-40(fp)
20082798:	10006126 	beq	r2,zero,20082920 <Fat_FileBrowseNext+0x3f8>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
2008279c:	e0bfff17 	ldw	r2,-4(fp)
200827a0:	e0fff817 	ldw	r3,-32(fp)
200827a4:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
200827a8:	e0bffb17 	ldw	r2,-20(fp)
200827ac:	108002c3 	ldbu	r2,11(r2)
200827b0:	10803fcc 	andi	r2,r2,255
200827b4:	1080080c 	andi	r2,r2,32
200827b8:	1004c03a 	cmpne	r2,r2,zero
200827bc:	10c03fcc 	andi	r3,r2,255
200827c0:	e0bfff17 	ldw	r2,-4(fp)
200827c4:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
200827c8:	e0bffb17 	ldw	r2,-20(fp)
200827cc:	108002c3 	ldbu	r2,11(r2)
200827d0:	10803fcc 	andi	r2,r2,255
200827d4:	1080040c 	andi	r2,r2,16
200827d8:	1004c03a 	cmpne	r2,r2,zero
200827dc:	10c03fcc 	andi	r3,r2,255
200827e0:	e0bfff17 	ldw	r2,-4(fp)
200827e4:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
200827e8:	e0bffb17 	ldw	r2,-20(fp)
200827ec:	108002c3 	ldbu	r2,11(r2)
200827f0:	10803fcc 	andi	r2,r2,255
200827f4:	1080020c 	andi	r2,r2,8
200827f8:	1004c03a 	cmpne	r2,r2,zero
200827fc:	10c03fcc 	andi	r3,r2,255
20082800:	e0bfff17 	ldw	r2,-4(fp)
20082804:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20082808:	e0bffe17 	ldw	r2,-8(fp)
2008280c:	10c00017 	ldw	r3,0(r2)
20082810:	e0bfff17 	ldw	r2,-4(fp)
20082814:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
20082818:	e0bffb17 	ldw	r2,-20(fp)
2008281c:	10c002c3 	ldbu	r3,11(r2)
20082820:	e0bfff17 	ldw	r2,-4(fp)
20082824:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
20082828:	e0bffb17 	ldw	r2,-20(fp)
2008282c:	10c00383 	ldbu	r3,14(r2)
20082830:	108003c3 	ldbu	r2,15(r2)
20082834:	1004923a 	slli	r2,r2,8
20082838:	10c4b03a 	or	r2,r2,r3
2008283c:	1007883a 	mov	r3,r2
20082840:	e0bfff17 	ldw	r2,-4(fp)
20082844:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
20082848:	e0bffb17 	ldw	r2,-20(fp)
2008284c:	10c00483 	ldbu	r3,18(r2)
20082850:	108004c3 	ldbu	r2,19(r2)
20082854:	1004923a 	slli	r2,r2,8
20082858:	10c4b03a 	or	r2,r2,r3
2008285c:	1007883a 	mov	r3,r2
20082860:	e0bfff17 	ldw	r2,-4(fp)
20082864:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
20082868:	e0bffb17 	ldw	r2,-20(fp)
2008286c:	10c00503 	ldbu	r3,20(r2)
20082870:	10800543 	ldbu	r2,21(r2)
20082874:	1004923a 	slli	r2,r2,8
20082878:	10c4b03a 	or	r2,r2,r3
2008287c:	1007883a 	mov	r3,r2
20082880:	e0bfff17 	ldw	r2,-4(fp)
20082884:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
20082888:	e0bffb17 	ldw	r2,-20(fp)
2008288c:	10c00583 	ldbu	r3,22(r2)
20082890:	108005c3 	ldbu	r2,23(r2)
20082894:	1004923a 	slli	r2,r2,8
20082898:	10c4b03a 	or	r2,r2,r3
2008289c:	1007883a 	mov	r3,r2
200828a0:	e0bfff17 	ldw	r2,-4(fp)
200828a4:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
200828a8:	e0bffb17 	ldw	r2,-20(fp)
200828ac:	10c00603 	ldbu	r3,24(r2)
200828b0:	10800643 	ldbu	r2,25(r2)
200828b4:	1004923a 	slli	r2,r2,8
200828b8:	10c4b03a 	or	r2,r2,r3
200828bc:	1007883a 	mov	r3,r2
200828c0:	e0bfff17 	ldw	r2,-4(fp)
200828c4:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
200828c8:	e0bffb17 	ldw	r2,-20(fp)
200828cc:	10c00683 	ldbu	r3,26(r2)
200828d0:	108006c3 	ldbu	r2,27(r2)
200828d4:	1004923a 	slli	r2,r2,8
200828d8:	10c4b03a 	or	r2,r2,r3
200828dc:	1007883a 	mov	r3,r2
200828e0:	e0bfff17 	ldw	r2,-4(fp)
200828e4:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
200828e8:	e0bffb17 	ldw	r2,-20(fp)
200828ec:	10c00703 	ldbu	r3,28(r2)
200828f0:	11000743 	ldbu	r4,29(r2)
200828f4:	2008923a 	slli	r4,r4,8
200828f8:	20c6b03a 	or	r3,r4,r3
200828fc:	11000783 	ldbu	r4,30(r2)
20082900:	2008943a 	slli	r4,r4,16
20082904:	20c6b03a 	or	r3,r4,r3
20082908:	108007c3 	ldbu	r2,31(r2)
2008290c:	1004963a 	slli	r2,r2,24
20082910:	10c4b03a 	or	r2,r2,r3
20082914:	1007883a 	mov	r3,r2
20082918:	e0bfff17 	ldw	r2,-4(fp)
2008291c:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20082920:	e0bff617 	ldw	r2,-40(fp)
20082924:	1000051e 	bne	r2,zero,2008293c <Fat_FileBrowseNext+0x414>
20082928:	e13ffb17 	ldw	r4,-20(fp)
2008292c:	0083f980 	call	20083f98 <fatIsLastDir>
20082930:	1000021e 	bne	r2,zero,2008293c <Fat_FileBrowseNext+0x414>
20082934:	e0bff717 	ldw	r2,-36(fp)
20082938:	103f1126 	beq	r2,zero,20082580 <__flash_rwdata_start+0xfffe3794>
    
    return bFind;
2008293c:	e0bff617 	ldw	r2,-40(fp)
    
}
20082940:	e037883a 	mov	sp,fp
20082944:	dfc00117 	ldw	ra,4(sp)
20082948:	df000017 	ldw	fp,0(sp)
2008294c:	dec00204 	addi	sp,sp,8
20082950:	f800283a 	ret

20082954 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
20082954:	deffb004 	addi	sp,sp,-320
20082958:	dfc04f15 	stw	ra,316(sp)
2008295c:	df004e15 	stw	fp,312(sp)
20082960:	df004e04 	addi	fp,sp,312
20082964:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
20082968:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
2008296c:	e0bfb304 	addi	r2,fp,-308
20082970:	e13fff17 	ldw	r4,-4(fp)
20082974:	100b883a 	mov	r5,r2
20082978:	00824bc0 	call	200824bc <Fat_FileBrowseBegin>
2008297c:	10000a26 	beq	r2,zero,200829a8 <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
20082980:	00000306 	br	20082990 <Fat_FileCount+0x3c>
            nCount++;
20082984:	e0bfb217 	ldw	r2,-312(fp)
20082988:	10800044 	addi	r2,r2,1
2008298c:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
20082990:	e0ffb304 	addi	r3,fp,-308
20082994:	e0bfb504 	addi	r2,fp,-300
20082998:	1809883a 	mov	r4,r3
2008299c:	100b883a 	mov	r5,r2
200829a0:	00825280 	call	20082528 <Fat_FileBrowseNext>
200829a4:	103ff71e 	bne	r2,zero,20082984 <__flash_rwdata_start+0xfffe3b98>
            nCount++;
    }
    
    return nCount;
200829a8:	e0bfb217 	ldw	r2,-312(fp)
}
200829ac:	e037883a 	mov	sp,fp
200829b0:	dfc00117 	ldw	ra,4(sp)
200829b4:	df000017 	ldw	fp,0(sp)
200829b8:	dec00204 	addi	sp,sp,8
200829bc:	f800283a 	ret

200829c0 <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
200829c0:	defffc04 	addi	sp,sp,-16
200829c4:	df000315 	stw	fp,12(sp)
200829c8:	df000304 	addi	fp,sp,12
200829cc:	e13ffe15 	stw	r4,-8(fp)
200829d0:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
200829d4:	00800044 	movi	r2,1
200829d8:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200829dc:	00000e06 	br	20082a18 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
200829e0:	e0bffe17 	ldw	r2,-8(fp)
200829e4:	10c0000b 	ldhu	r3,0(r2)
200829e8:	e0bfff17 	ldw	r2,-4(fp)
200829ec:	1080000b 	ldhu	r2,0(r2)
200829f0:	18ffffcc 	andi	r3,r3,65535
200829f4:	10bfffcc 	andi	r2,r2,65535
200829f8:	18800126 	beq	r3,r2,20082a00 <fatSameLongFilename+0x40>
            bSame = FALSE;
200829fc:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
20082a00:	e0bffe17 	ldw	r2,-8(fp)
20082a04:	10800084 	addi	r2,r2,2
20082a08:	e0bffe15 	stw	r2,-8(fp)
        p2++;
20082a0c:	e0bfff17 	ldw	r2,-4(fp)
20082a10:	10800084 	addi	r2,r2,2
20082a14:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082a18:	e0bffd17 	ldw	r2,-12(fp)
20082a1c:	10000826 	beq	r2,zero,20082a40 <fatSameLongFilename+0x80>
20082a20:	e0bffe17 	ldw	r2,-8(fp)
20082a24:	1080000b 	ldhu	r2,0(r2)
20082a28:	10bfffcc 	andi	r2,r2,65535
20082a2c:	103fec1e 	bne	r2,zero,200829e0 <__flash_rwdata_start+0xfffe3bf4>
20082a30:	e0bfff17 	ldw	r2,-4(fp)
20082a34:	1080000b 	ldhu	r2,0(r2)
20082a38:	10bfffcc 	andi	r2,r2,65535
20082a3c:	103fe81e 	bne	r2,zero,200829e0 <__flash_rwdata_start+0xfffe3bf4>
        p1++;
        p2++;
        
    }
    
    return bSame;
20082a40:	e0bffd17 	ldw	r2,-12(fp)
}
20082a44:	e037883a 	mov	sp,fp
20082a48:	df000017 	ldw	fp,0(sp)
20082a4c:	dec00104 	addi	sp,sp,4
20082a50:	f800283a 	ret

20082a54 <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
20082a54:	defffb04 	addi	sp,sp,-20
20082a58:	df000415 	stw	fp,16(sp)
20082a5c:	df000404 	addi	fp,sp,16
20082a60:	e13ffe15 	stw	r4,-8(fp)
20082a64:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
20082a68:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
20082a6c:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082a70:	00000d06 	br	20082aa8 <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
20082a74:	e0bffd17 	ldw	r2,-12(fp)
20082a78:	10c00044 	addi	r3,r2,1
20082a7c:	e0fffd15 	stw	r3,-12(fp)
20082a80:	1007883a 	mov	r3,r2
20082a84:	e0bfff17 	ldw	r2,-4(fp)
20082a88:	10c7883a 	add	r3,r2,r3
20082a8c:	e0bffc17 	ldw	r2,-16(fp)
20082a90:	11000044 	addi	r4,r2,1
20082a94:	e13ffc15 	stw	r4,-16(fp)
20082a98:	e13ffe17 	ldw	r4,-8(fp)
20082a9c:	2085883a 	add	r2,r4,r2
20082aa0:	10800003 	ldbu	r2,0(r2)
20082aa4:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082aa8:	e0bffc17 	ldw	r2,-16(fp)
20082aac:	10800208 	cmpgei	r2,r2,8
20082ab0:	1000111e 	bne	r2,zero,20082af8 <fatComposeShortFilename+0xa4>
20082ab4:	e0fffe17 	ldw	r3,-8(fp)
20082ab8:	e0bffc17 	ldw	r2,-16(fp)
20082abc:	1885883a 	add	r2,r3,r2
20082ac0:	10800003 	ldbu	r2,0(r2)
20082ac4:	10803fcc 	andi	r2,r2,255
20082ac8:	1080201c 	xori	r2,r2,128
20082acc:	10bfe004 	addi	r2,r2,-128
20082ad0:	10000926 	beq	r2,zero,20082af8 <fatComposeShortFilename+0xa4>
20082ad4:	e0fffe17 	ldw	r3,-8(fp)
20082ad8:	e0bffc17 	ldw	r2,-16(fp)
20082adc:	1885883a 	add	r2,r3,r2
20082ae0:	10800003 	ldbu	r2,0(r2)
20082ae4:	10803fcc 	andi	r2,r2,255
20082ae8:	1080201c 	xori	r2,r2,128
20082aec:	10bfe004 	addi	r2,r2,-128
20082af0:	10800818 	cmpnei	r2,r2,32
20082af4:	103fdf1e 	bne	r2,zero,20082a74 <__flash_rwdata_start+0xfffe3c88>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
20082af8:	e0bffe17 	ldw	r2,-8(fp)
20082afc:	108002c3 	ldbu	r2,11(r2)
20082b00:	10803fcc 	andi	r2,r2,255
20082b04:	10800c0c 	andi	r2,r2,48
20082b08:	10003326 	beq	r2,zero,20082bd8 <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
20082b0c:	e0bffe17 	ldw	r2,-8(fp)
20082b10:	108002c3 	ldbu	r2,11(r2)
20082b14:	10803fcc 	andi	r2,r2,255
20082b18:	10800c0c 	andi	r2,r2,48
20082b1c:	10000826 	beq	r2,zero,20082b40 <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
20082b20:	e0bffd17 	ldw	r2,-12(fp)
20082b24:	10c00044 	addi	r3,r2,1
20082b28:	e0fffd15 	stw	r3,-12(fp)
20082b2c:	1007883a 	mov	r3,r2
20082b30:	e0bfff17 	ldw	r2,-4(fp)
20082b34:	10c5883a 	add	r2,r2,r3
20082b38:	00c00b84 	movi	r3,46
20082b3c:	10c00005 	stb	r3,0(r2)
        i=0;
20082b40:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082b44:	00000e06 	br	20082b80 <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
20082b48:	e0bffd17 	ldw	r2,-12(fp)
20082b4c:	10c00044 	addi	r3,r2,1
20082b50:	e0fffd15 	stw	r3,-12(fp)
20082b54:	1007883a 	mov	r3,r2
20082b58:	e0bfff17 	ldw	r2,-4(fp)
20082b5c:	10c7883a 	add	r3,r2,r3
20082b60:	e0bffc17 	ldw	r2,-16(fp)
20082b64:	11000044 	addi	r4,r2,1
20082b68:	e13ffc15 	stw	r4,-16(fp)
20082b6c:	e13ffe17 	ldw	r4,-8(fp)
20082b70:	2085883a 	add	r2,r4,r2
20082b74:	10800204 	addi	r2,r2,8
20082b78:	10800003 	ldbu	r2,0(r2)
20082b7c:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082b80:	e0bffc17 	ldw	r2,-16(fp)
20082b84:	108000c8 	cmpgei	r2,r2,3
20082b88:	1000131e 	bne	r2,zero,20082bd8 <fatComposeShortFilename+0x184>
20082b8c:	e0fffe17 	ldw	r3,-8(fp)
20082b90:	e0bffc17 	ldw	r2,-16(fp)
20082b94:	1885883a 	add	r2,r3,r2
20082b98:	10800204 	addi	r2,r2,8
20082b9c:	10800003 	ldbu	r2,0(r2)
20082ba0:	10803fcc 	andi	r2,r2,255
20082ba4:	1080201c 	xori	r2,r2,128
20082ba8:	10bfe004 	addi	r2,r2,-128
20082bac:	10000a26 	beq	r2,zero,20082bd8 <fatComposeShortFilename+0x184>
20082bb0:	e0fffe17 	ldw	r3,-8(fp)
20082bb4:	e0bffc17 	ldw	r2,-16(fp)
20082bb8:	1885883a 	add	r2,r3,r2
20082bbc:	10800204 	addi	r2,r2,8
20082bc0:	10800003 	ldbu	r2,0(r2)
20082bc4:	10803fcc 	andi	r2,r2,255
20082bc8:	1080201c 	xori	r2,r2,128
20082bcc:	10bfe004 	addi	r2,r2,-128
20082bd0:	10800818 	cmpnei	r2,r2,32
20082bd4:	103fdc1e 	bne	r2,zero,20082b48 <__flash_rwdata_start+0xfffe3d5c>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
20082bd8:	e0bffd17 	ldw	r2,-12(fp)
20082bdc:	10c00044 	addi	r3,r2,1
20082be0:	e0fffd15 	stw	r3,-12(fp)
20082be4:	1007883a 	mov	r3,r2
20082be8:	e0bfff17 	ldw	r2,-4(fp)
20082bec:	10c5883a 	add	r2,r2,r3
20082bf0:	10000005 	stb	zero,0(r2)
}
20082bf4:	e037883a 	mov	sp,fp
20082bf8:	df000017 	ldw	fp,0(sp)
20082bfc:	dec00104 	addi	sp,sp,4
20082c00:	f800283a 	ret

20082c04 <Fat_CheckExtension>:


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
20082c04:	defffb04 	addi	sp,sp,-20
20082c08:	dfc00415 	stw	ra,16(sp)
20082c0c:	df000315 	stw	fp,12(sp)
20082c10:	df000304 	addi	fp,sp,12
20082c14:	e13ffe15 	stw	r4,-8(fp)
20082c18:	e17fff15 	stw	r5,-4(fp)
	if(pFileContext == NULL)
20082c1c:	e0bffe17 	ldw	r2,-8(fp)
20082c20:	1000021e 	bne	r2,zero,20082c2c <Fat_CheckExtension+0x28>
		return 0;
20082c24:	0005883a 	mov	r2,zero
20082c28:	00000e06 	br	20082c64 <Fat_CheckExtension+0x60>

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
20082c2c:	e0bffe17 	ldw	r2,-8(fp)
20082c30:	1009883a 	mov	r4,r2
20082c34:	01400b84 	movi	r5,46
20082c38:	008c50c0 	call	2008c50c <strrchr>
20082c3c:	e0bffd15 	stw	r2,-12(fp)
20082c40:	e0bffd17 	ldw	r2,-12(fp)
20082c44:	10000626 	beq	r2,zero,20082c60 <Fat_CheckExtension+0x5c>
		if (strcmp(point, ext) == 0) {
20082c48:	e13ffd17 	ldw	r4,-12(fp)
20082c4c:	e17fff17 	ldw	r5,-4(fp)
20082c50:	008c3d00 	call	2008c3d0 <strcmp>
20082c54:	1000021e 	bne	r2,zero,20082c60 <Fat_CheckExtension+0x5c>
			return 1;
20082c58:	00800044 	movi	r2,1
20082c5c:	00000106 	br	20082c64 <Fat_CheckExtension+0x60>
		}
	}

	return 0;
20082c60:	0005883a 	mov	r2,zero
}
20082c64:	e037883a 	mov	sp,fp
20082c68:	dfc00117 	ldw	ra,4(sp)
20082c6c:	df000017 	ldw	fp,0(sp)
20082c70:	dec00204 	addi	sp,sp,8
20082c74:	f800283a 	ret

20082c78 <Fat_GetFileName>:


char* Fat_GetFileName(FILE_CONTEXT *pFileContext){
20082c78:	defffe04 	addi	sp,sp,-8
20082c7c:	df000115 	stw	fp,4(sp)
20082c80:	df000104 	addi	fp,sp,4
20082c84:	e13fff15 	stw	r4,-4(fp)
	if(pFileContext == NULL)
20082c88:	e0bfff17 	ldw	r2,-4(fp)
20082c8c:	1000021e 	bne	r2,zero,20082c98 <Fat_GetFileName+0x20>
		return 0;
20082c90:	0005883a 	mov	r2,zero
20082c94:	00000106 	br	20082c9c <Fat_GetFileName+0x24>
	else
		return pFileContext->szName;
20082c98:	e0bfff17 	ldw	r2,-4(fp)
}
20082c9c:	e037883a 	mov	sp,fp
20082ca0:	df000017 	ldw	fp,0(sp)
20082ca4:	dec00104 	addi	sp,sp,4
20082ca8:	f800283a 	ret

20082cac <Fat_FileExist>:

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
20082cac:	deffaf04 	addi	sp,sp,-324
20082cb0:	dfc05015 	stw	ra,320(sp)
20082cb4:	df004f15 	stw	fp,316(sp)
20082cb8:	df004f04 	addi	fp,sp,316
20082cbc:	e13ffe15 	stw	r4,-8(fp)
20082cc0:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20082cc4:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20082cc8:	e0bfb204 	addi	r2,fp,-312
20082ccc:	e13ffe17 	ldw	r4,-8(fp)
20082cd0:	100b883a 	mov	r5,r2
20082cd4:	00824bc0 	call	200824bc <Fat_FileBrowseBegin>
20082cd8:	10001a26 	beq	r2,zero,20082d44 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082cdc:	00000f06 	br	20082d1c <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
20082ce0:	e0bff417 	ldw	r2,-48(fp)
20082ce4:	10000626 	beq	r2,zero,20082d00 <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
20082ce8:	e0bfb404 	addi	r2,fp,-304
20082cec:	1009883a 	mov	r4,r2
20082cf0:	e17fff17 	ldw	r5,-4(fp)
20082cf4:	00829c00 	call	200829c0 <fatSameLongFilename>
20082cf8:	e0bfb115 	stw	r2,-316(fp)
20082cfc:	00000706 	br	20082d1c <Fat_FileExist+0x70>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082d00:	e0bfb404 	addi	r2,fp,-304
20082d04:	1009883a 	mov	r4,r2
20082d08:	e17fff17 	ldw	r5,-4(fp)
20082d0c:	008c3d00 	call	2008c3d0 <strcmp>
20082d10:	1000021e 	bne	r2,zero,20082d1c <Fat_FileExist+0x70>
                    bFind = TRUE;
20082d14:	00800044 	movi	r2,1
20082d18:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082d1c:	e0bfb117 	ldw	r2,-316(fp)
20082d20:	1000061e 	bne	r2,zero,20082d3c <Fat_FileExist+0x90>
20082d24:	e0ffb204 	addi	r3,fp,-312
20082d28:	e0bfb404 	addi	r2,fp,-304
20082d2c:	1809883a 	mov	r4,r3
20082d30:	100b883a 	mov	r5,r2
20082d34:	00825280 	call	20082528 <Fat_FileBrowseNext>
20082d38:	103fe91e 	bne	r2,zero,20082ce0 <__flash_rwdata_start+0xfffe3ef4>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
20082d3c:	e13ffe17 	ldw	r4,-8(fp)
20082d40:	008363c0 	call	2008363c <Fat_FileClose>
    }
    return bFind;            
20082d44:	e0bfb117 	ldw	r2,-316(fp)
}    
20082d48:	e037883a 	mov	sp,fp
20082d4c:	dfc00117 	ldw	ra,4(sp)
20082d50:	df000017 	ldw	fp,0(sp)
20082d54:	dec00204 	addi	sp,sp,8
20082d58:	f800283a 	ret

20082d5c <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
20082d5c:	deff6b04 	addi	sp,sp,-596
20082d60:	dfc09415 	stw	ra,592(sp)
20082d64:	df009315 	stw	fp,588(sp)
20082d68:	df009304 	addi	fp,sp,588
20082d6c:	e13ffe15 	stw	r4,-8(fp)
20082d70:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20082d74:	e03f6d15 	stw	zero,-588(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
20082d78:	e03f6e15 	stw	zero,-584(fp)
    int nPos = 0;
20082d7c:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20082d80:	e0bf7204 	addi	r2,fp,-568
20082d84:	e13ffe17 	ldw	r4,-8(fp)
20082d88:	100b883a 	mov	r5,r2
20082d8c:	00824bc0 	call	200824bc <Fat_FileBrowseBegin>
20082d90:	10007426 	beq	r2,zero,20082f64 <Fat_FileOpen+0x208>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082d94:	00004c06 	br	20082ec8 <Fat_FileOpen+0x16c>
            if (FileContext.bLongFilename){
20082d98:	e0bfb417 	ldw	r2,-304(fp)
20082d9c:	10004326 	beq	r2,zero,20082eac <Fat_FileOpen+0x150>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
20082da0:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
20082da4:	e0bf7404 	addi	r2,fp,-560
20082da8:	e0bf7015 	stw	r2,-576(fp)
                pData8 = FileContext.szName;
20082dac:	e0bf7404 	addi	r2,fp,-560
20082db0:	e0bf7115 	stw	r2,-572(fp)
                while(*pData16){
20082db4:	00002d06 	br	20082e6c <Fat_FileOpen+0x110>
                    if (*pData8 && *pData8 != ' ')
20082db8:	e0bf7117 	ldw	r2,-572(fp)
20082dbc:	10800003 	ldbu	r2,0(r2)
20082dc0:	10803fcc 	andi	r2,r2,255
20082dc4:	10000e26 	beq	r2,zero,20082e00 <Fat_FileOpen+0xa4>
20082dc8:	e0bf7117 	ldw	r2,-572(fp)
20082dcc:	10800003 	ldbu	r2,0(r2)
20082dd0:	10803fcc 	andi	r2,r2,255
20082dd4:	10800820 	cmpeqi	r2,r2,32
20082dd8:	1000091e 	bne	r2,zero,20082e00 <Fat_FileOpen+0xa4>
                        szWaveFilename[nPos++] = *pData8;
20082ddc:	e0bf6f17 	ldw	r2,-580(fp)
20082de0:	10c00044 	addi	r3,r2,1
20082de4:	e0ff6f15 	stw	r3,-580(fp)
20082de8:	e0ff7117 	ldw	r3,-572(fp)
20082dec:	18c00003 	ldbu	r3,0(r3)
20082df0:	1809883a 	mov	r4,r3
20082df4:	e0ffbe04 	addi	r3,fp,-264
20082df8:	1885883a 	add	r2,r3,r2
20082dfc:	11000005 	stb	r4,0(r2)
                    pData8++;
20082e00:	e0bf7117 	ldw	r2,-572(fp)
20082e04:	10800044 	addi	r2,r2,1
20082e08:	e0bf7115 	stw	r2,-572(fp)
                    if (*pData8 && *pData8 != ' ')
20082e0c:	e0bf7117 	ldw	r2,-572(fp)
20082e10:	10800003 	ldbu	r2,0(r2)
20082e14:	10803fcc 	andi	r2,r2,255
20082e18:	10000e26 	beq	r2,zero,20082e54 <Fat_FileOpen+0xf8>
20082e1c:	e0bf7117 	ldw	r2,-572(fp)
20082e20:	10800003 	ldbu	r2,0(r2)
20082e24:	10803fcc 	andi	r2,r2,255
20082e28:	10800820 	cmpeqi	r2,r2,32
20082e2c:	1000091e 	bne	r2,zero,20082e54 <Fat_FileOpen+0xf8>
                        szWaveFilename[nPos++] = *pData8;
20082e30:	e0bf6f17 	ldw	r2,-580(fp)
20082e34:	10c00044 	addi	r3,r2,1
20082e38:	e0ff6f15 	stw	r3,-580(fp)
20082e3c:	e0ff7117 	ldw	r3,-572(fp)
20082e40:	18c00003 	ldbu	r3,0(r3)
20082e44:	1809883a 	mov	r4,r3
20082e48:	e0ffbe04 	addi	r3,fp,-264
20082e4c:	1885883a 	add	r2,r3,r2
20082e50:	11000005 	stb	r4,0(r2)
                    pData8++;                    
20082e54:	e0bf7117 	ldw	r2,-572(fp)
20082e58:	10800044 	addi	r2,r2,1
20082e5c:	e0bf7115 	stw	r2,-572(fp)
                    //    
                    pData16++;
20082e60:	e0bf7017 	ldw	r2,-576(fp)
20082e64:	10800084 	addi	r2,r2,2
20082e68:	e0bf7015 	stw	r2,-576(fp)
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
20082e6c:	e0bf7017 	ldw	r2,-576(fp)
20082e70:	1080000b 	ldhu	r2,0(r2)
20082e74:	10bfffcc 	andi	r2,r2,65535
20082e78:	103fcf1e 	bne	r2,zero,20082db8 <__flash_rwdata_start+0xfffe3fcc>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20082e7c:	e0ffbe04 	addi	r3,fp,-264
20082e80:	e0bf6f17 	ldw	r2,-580(fp)
20082e84:	1885883a 	add	r2,r3,r2
20082e88:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20082e8c:	e0bfbe04 	addi	r2,fp,-264
20082e90:	e13fff17 	ldw	r4,-4(fp)
20082e94:	100b883a 	mov	r5,r2
20082e98:	008c3d00 	call	2008c3d0 <strcmp>
20082e9c:	1000021e 	bne	r2,zero,20082ea8 <Fat_FileOpen+0x14c>
                    bFind = TRUE;
20082ea0:	00800044 	movi	r2,1
20082ea4:	e0bf6d15 	stw	r2,-588(fp)
20082ea8:	00000706 	br	20082ec8 <Fat_FileOpen+0x16c>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082eac:	e0bf7404 	addi	r2,fp,-560
20082eb0:	1009883a 	mov	r4,r2
20082eb4:	e17fff17 	ldw	r5,-4(fp)
20082eb8:	008c3d00 	call	2008c3d0 <strcmp>
20082ebc:	1000021e 	bne	r2,zero,20082ec8 <Fat_FileOpen+0x16c>
                    bFind = TRUE;
20082ec0:	00800044 	movi	r2,1
20082ec4:	e0bf6d15 	stw	r2,-588(fp)
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082ec8:	e0bf6d17 	ldw	r2,-588(fp)
20082ecc:	1000061e 	bne	r2,zero,20082ee8 <Fat_FileOpen+0x18c>
20082ed0:	e0ff7204 	addi	r3,fp,-568
20082ed4:	e0bf7404 	addi	r2,fp,-560
20082ed8:	1809883a 	mov	r4,r3
20082edc:	100b883a 	mov	r5,r2
20082ee0:	00825280 	call	20082528 <Fat_FileBrowseNext>
20082ee4:	103fac1e 	bne	r2,zero,20082d98 <__flash_rwdata_start+0xfffe3fac>
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
20082ee8:	e0bf6d17 	ldw	r2,-588(fp)
20082eec:	10001d26 	beq	r2,zero,20082f64 <Fat_FileOpen+0x208>
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
20082ef0:	00800034 	movhi	r2,0
20082ef4:	108aa104 	addi	r2,r2,10884
20082ef8:	e0bf6e15 	stw	r2,-584(fp)
            if (pFile){
20082efc:	e0bf6e17 	ldw	r2,-584(fp)
20082f00:	10001826 	beq	r2,zero,20082f64 <Fat_FileOpen+0x208>
                pFile->OpenAttribute = FILE_OPEN_READ; 
20082f04:	e0bf6e17 	ldw	r2,-584(fp)
20082f08:	00c00044 	movi	r3,1
20082f0c:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
20082f10:	e0bf6e17 	ldw	r2,-584(fp)
20082f14:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
20082f18:	e0bf6e17 	ldw	r2,-584(fp)
20082f1c:	11000504 	addi	r4,r2,20
20082f20:	e0ff7404 	addi	r3,fp,-560
20082f24:	00804a04 	movi	r2,296
20082f28:	180b883a 	mov	r5,r3
20082f2c:	100d883a 	mov	r6,r2
20082f30:	008bf180 	call	2008bf18 <memcpy>
                pFile->IsOpened = TRUE;
20082f34:	e0bf6e17 	ldw	r2,-584(fp)
20082f38:	00c00044 	movi	r3,1
20082f3c:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
20082f40:	e0bfbc8b 	ldhu	r2,-270(fp)
20082f44:	10ffffcc 	andi	r3,r2,65535
20082f48:	e0bf6e17 	ldw	r2,-584(fp)
20082f4c:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
20082f50:	e0bf6e17 	ldw	r2,-584(fp)
20082f54:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
20082f58:	e0bf6e17 	ldw	r2,-584(fp)
20082f5c:	e0fffe17 	ldw	r3,-8(fp)
20082f60:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
20082f64:	e0bf6e17 	ldw	r2,-584(fp)
}
20082f68:	e037883a 	mov	sp,fp
20082f6c:	dfc00117 	ldw	ra,4(sp)
20082f70:	df000017 	ldw	fp,0(sp)
20082f74:	dec00204 	addi	sp,sp,8
20082f78:	f800283a 	ret

20082f7c <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
20082f7c:	defffd04 	addi	sp,sp,-12
20082f80:	df000215 	stw	fp,8(sp)
20082f84:	df000204 	addi	fp,sp,8
20082f88:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20082f8c:	e0bfff17 	ldw	r2,-4(fp)
20082f90:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
20082f94:	e0bffe17 	ldw	r2,-8(fp)
20082f98:	10800017 	ldw	r2,0(r2)
20082f9c:	10000326 	beq	r2,zero,20082fac <Fat_FileSize+0x30>
        return f->Directory.FileSize;
20082fa0:	e0bffe17 	ldw	r2,-8(fp)
20082fa4:	10804e17 	ldw	r2,312(r2)
20082fa8:	00000106 	br	20082fb0 <Fat_FileSize+0x34>
    return 0;        
20082fac:	0005883a 	mov	r2,zero
}
20082fb0:	e037883a 	mov	sp,fp
20082fb4:	df000017 	ldw	fp,0(sp)
20082fb8:	dec00104 	addi	sp,sp,4
20082fbc:	f800283a 	ret

20082fc0 <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
20082fc0:	deffec04 	addi	sp,sp,-80
20082fc4:	dfc01315 	stw	ra,76(sp)
20082fc8:	df001215 	stw	fp,72(sp)
20082fcc:	df001204 	addi	fp,sp,72
20082fd0:	e13ffd15 	stw	r4,-12(fp)
20082fd4:	e17ffe15 	stw	r5,-8(fp)
20082fd8:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20082fdc:	e0bffd17 	ldw	r2,-12(fp)
20082fe0:	e0bff715 	stw	r2,-36(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
20082fe4:	e03ff115 	stw	zero,-60(fp)
    int s;
    bool bSuccess= TRUE;
20082fe8:	00800044 	movi	r2,1
20082fec:	e0bff315 	stw	r2,-52(fp)
    
    if (!f || !f->Fat)
20082ff0:	e0bff717 	ldw	r2,-36(fp)
20082ff4:	10000326 	beq	r2,zero,20083004 <Fat_FileRead+0x44>
20082ff8:	e0bff717 	ldw	r2,-36(fp)
20082ffc:	10804f17 	ldw	r2,316(r2)
20083000:	1000021e 	bne	r2,zero,2008300c <Fat_FileRead+0x4c>
        return FALSE;
20083004:	0005883a 	mov	r2,zero
20083008:	00014706 	br	20083528 <Fat_FileRead+0x568>
    pVol = (VOLUME_INFO *)f->Fat;        
2008300c:	e0bff717 	ldw	r2,-36(fp)
20083010:	10804f17 	ldw	r2,316(r2)
20083014:	e0bff815 	stw	r2,-32(fp)
    
    if (!f->IsOpened){
20083018:	e0bff717 	ldw	r2,-36(fp)
2008301c:	10800017 	ldw	r2,0(r2)
20083020:	1000021e 	bne	r2,zero,2008302c <Fat_FileRead+0x6c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
20083024:	e0bff317 	ldw	r2,-52(fp)
20083028:	00013f06 	br	20083528 <Fat_FileRead+0x568>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
2008302c:	e0bff817 	ldw	r2,-32(fp)
20083030:	10800d17 	ldw	r2,52(r2)
20083034:	e0bff915 	stw	r2,-28(fp)
    Pos = f->SeekPos;
20083038:	e0bff717 	ldw	r2,-36(fp)
2008303c:	10800217 	ldw	r2,8(r2)
20083040:	e0bfee15 	stw	r2,-72(fp)
    if (BytesPerCluster == 65536){
20083044:	e0fff917 	ldw	r3,-28(fp)
20083048:	00800074 	movhi	r2,1
2008304c:	18800a1e 	bne	r3,r2,20083078 <Fat_FileRead+0xb8>
    	nClusterSeq = Pos >> 16;
20083050:	e0bfee17 	ldw	r2,-72(fp)
20083054:	1004d43a 	srli	r2,r2,16
20083058:	e0bff215 	stw	r2,-56(fp)
    	Pos -= (f->ClusterSeq << 16);
2008305c:	e0bff717 	ldw	r2,-36(fp)
20083060:	10800417 	ldw	r2,16(r2)
20083064:	1004943a 	slli	r2,r2,16
20083068:	e0ffee17 	ldw	r3,-72(fp)
2008306c:	1885c83a 	sub	r2,r3,r2
20083070:	e0bfee15 	stw	r2,-72(fp)
20083074:	00003206 	br	20083140 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 32768){
20083078:	e0fff917 	ldw	r3,-28(fp)
2008307c:	00a00014 	movui	r2,32768
20083080:	18800a1e 	bne	r3,r2,200830ac <Fat_FileRead+0xec>
        nClusterSeq = Pos >> 15;
20083084:	e0bfee17 	ldw	r2,-72(fp)
20083088:	1004d3fa 	srli	r2,r2,15
2008308c:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 15);
20083090:	e0bff717 	ldw	r2,-36(fp)
20083094:	10800417 	ldw	r2,16(r2)
20083098:	100493fa 	slli	r2,r2,15
2008309c:	e0ffee17 	ldw	r3,-72(fp)
200830a0:	1885c83a 	sub	r2,r3,r2
200830a4:	e0bfee15 	stw	r2,-72(fp)
200830a8:	00002506 	br	20083140 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 16384){
200830ac:	e0bff917 	ldw	r2,-28(fp)
200830b0:	10900018 	cmpnei	r2,r2,16384
200830b4:	10000a1e 	bne	r2,zero,200830e0 <Fat_FileRead+0x120>
        nClusterSeq = Pos >> 14;
200830b8:	e0bfee17 	ldw	r2,-72(fp)
200830bc:	1004d3ba 	srli	r2,r2,14
200830c0:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 14);
200830c4:	e0bff717 	ldw	r2,-36(fp)
200830c8:	10800417 	ldw	r2,16(r2)
200830cc:	100493ba 	slli	r2,r2,14
200830d0:	e0ffee17 	ldw	r3,-72(fp)
200830d4:	1885c83a 	sub	r2,r3,r2
200830d8:	e0bfee15 	stw	r2,-72(fp)
200830dc:	00001806 	br	20083140 <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 2048){
200830e0:	e0bff917 	ldw	r2,-28(fp)
200830e4:	10820018 	cmpnei	r2,r2,2048
200830e8:	10000a1e 	bne	r2,zero,20083114 <Fat_FileRead+0x154>
        nClusterSeq = Pos >> 11;
200830ec:	e0bfee17 	ldw	r2,-72(fp)
200830f0:	1004d2fa 	srli	r2,r2,11
200830f4:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 11);
200830f8:	e0bff717 	ldw	r2,-36(fp)
200830fc:	10800417 	ldw	r2,16(r2)
20083100:	100492fa 	slli	r2,r2,11
20083104:	e0ffee17 	ldw	r3,-72(fp)
20083108:	1885c83a 	sub	r2,r3,r2
2008310c:	e0bfee15 	stw	r2,-72(fp)
20083110:	00000b06 	br	20083140 <Fat_FileRead+0x180>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
20083114:	e13fee17 	ldw	r4,-72(fp)
20083118:	e17ff917 	ldw	r5,-28(fp)
2008311c:	0088bf00 	call	20088bf0 <__udivsi3>
20083120:	e0bff215 	stw	r2,-56(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
20083124:	e0bff717 	ldw	r2,-36(fp)
20083128:	10c00417 	ldw	r3,16(r2)
2008312c:	e0bff917 	ldw	r2,-28(fp)
20083130:	1885383a 	mul	r2,r3,r2
20083134:	e0ffee17 	ldw	r3,-72(fp)
20083138:	1885c83a 	sub	r2,r3,r2
2008313c:	e0bfee15 	stw	r2,-72(fp)
    }    
        
       
    Cluster = f->Cluster;
20083140:	e0bff717 	ldw	r2,-36(fp)
20083144:	10800317 	ldw	r2,12(r2)
20083148:	e0bff015 	stw	r2,-64(fp)
    if (nClusterSeq != f->ClusterSeq){
2008314c:	e0bff717 	ldw	r2,-36(fp)
20083150:	10c00417 	ldw	r3,16(r2)
20083154:	e0bff217 	ldw	r2,-56(fp)
20083158:	18801f26 	beq	r3,r2,200831d8 <Fat_FileRead+0x218>
        Cluster = f->Cluster;  //11/20/2007, richard
2008315c:	e0bff717 	ldw	r2,-36(fp)
20083160:	10800317 	ldw	r2,12(r2)
20083164:	e0bff015 	stw	r2,-64(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
20083168:	00001606 	br	200831c4 <Fat_FileRead+0x204>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
2008316c:	e13ff817 	ldw	r4,-32(fp)
20083170:	e17ff017 	ldw	r5,-64(fp)
20083174:	0083a000 	call	20083a00 <fatNextCluster>
20083178:	e0bffa15 	stw	r2,-24(fp)
            if (NextCluster == 0){
2008317c:	e0bffa17 	ldw	r2,-24(fp)
20083180:	1000021e 	bne	r2,zero,2008318c <Fat_FileRead+0x1cc>
                bSuccess = FALSE;
20083184:	e03ff315 	stw	zero,-52(fp)
20083188:	00000206 	br	20083194 <Fat_FileRead+0x1d4>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
2008318c:	e0bffa17 	ldw	r2,-24(fp)
20083190:	e0bff015 	stw	r2,-64(fp)
            }        
            Pos -= BytesPerCluster;
20083194:	e0ffee17 	ldw	r3,-72(fp)
20083198:	e0bff917 	ldw	r2,-28(fp)
2008319c:	1885c83a 	sub	r2,r3,r2
200831a0:	e0bfee15 	stw	r2,-72(fp)
            f->Cluster = Cluster;
200831a4:	e0bff717 	ldw	r2,-36(fp)
200831a8:	e0fff017 	ldw	r3,-64(fp)
200831ac:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
200831b0:	e0bff717 	ldw	r2,-36(fp)
200831b4:	10800417 	ldw	r2,16(r2)
200831b8:	10c00044 	addi	r3,r2,1
200831bc:	e0bff717 	ldw	r2,-36(fp)
200831c0:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
200831c4:	e0ffee17 	ldw	r3,-72(fp)
200831c8:	e0bff917 	ldw	r2,-28(fp)
200831cc:	18800236 	bltu	r3,r2,200831d8 <Fat_FileRead+0x218>
200831d0:	e0bff317 	ldw	r2,-52(fp)
200831d4:	103fe51e 	bne	r2,zero,2008316c <__flash_rwdata_start+0xfffe4380>
    alt_u32 SectorOffset, ByteOffset, SectorsToRead;
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
200831d8:	e0bfee17 	ldw	r2,-72(fp)
200831dc:	1004d27a 	srli	r2,r2,9
200831e0:	e0bff415 	stw	r2,-48(fp)
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
200831e4:	e0bff817 	ldw	r2,-32(fp)
200831e8:	10c00717 	ldw	r3,28(r2)
200831ec:	e0bff417 	ldw	r2,-48(fp)
200831f0:	1885383a 	mul	r2,r3,r2
200831f4:	e0ffee17 	ldw	r3,-72(fp)
200831f8:	1885c83a 	sub	r2,r3,r2
200831fc:	e0bffb15 	stw	r2,-20(fp)

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20083200:	e0bff017 	ldw	r2,-64(fp)
20083204:	10ffff84 	addi	r3,r2,-2
20083208:	e0bff817 	ldw	r2,-32(fp)
2008320c:	10800817 	ldw	r2,32(r2)
20083210:	1887383a 	mul	r3,r3,r2
20083214:	e0bff817 	ldw	r2,-32(fp)
20083218:	10801017 	ldw	r2,64(r2)
2008321c:	1885883a 	add	r2,r3,r2
20083220:	e0bfef15 	stw	r2,-68(fp)
    PhysicalSecter += SectorOffset;
20083224:	e0ffef17 	ldw	r3,-68(fp)
20083228:	e0bff417 	ldw	r2,-48(fp)
2008322c:	1885883a 	add	r2,r3,r2
20083230:	e0bfef15 	stw	r2,-68(fp)
    nReadCount = 0;
20083234:	e03ff115 	stw	zero,-60(fp)

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
20083238:	e0bffb17 	ldw	r2,-20(fp)
2008323c:	1000031e 	bne	r2,zero,2008324c <Fat_FileRead+0x28c>
20083240:	e0bfff17 	ldw	r2,-4(fp)
20083244:	10808008 	cmpgei	r2,r2,512
20083248:	1000441e 	bne	r2,zero,2008335c <Fat_FileRead+0x39c>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
2008324c:	e13ff817 	ldw	r4,-32(fp)
20083250:	e17fef17 	ldw	r5,-68(fp)
20083254:	00842ec0 	call	200842ec <fatReadSecter>
20083258:	1000021e 	bne	r2,zero,20083264 <Fat_FileRead+0x2a4>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector %d\r\n", PhysicalSecter));
			return FALSE;
2008325c:	0005883a 	mov	r2,zero
20083260:	0000b106 	br	20083528 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize > (512 - ByteOffset)? 512 - ByteOffset : nBufferSize;
20083264:	e13fff17 	ldw	r4,-4(fp)
20083268:	00c08004 	movi	r3,512
2008326c:	e0bffb17 	ldw	r2,-20(fp)
20083270:	1887c83a 	sub	r3,r3,r2
20083274:	2005883a 	mov	r2,r4
20083278:	1880012e 	bgeu	r3,r2,20083280 <Fat_FileRead+0x2c0>
2008327c:	1805883a 	mov	r2,r3
20083280:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
20083284:	e0bffb17 	ldw	r2,-20(fp)
20083288:	10801104 	addi	r2,r2,68
2008328c:	e0fff817 	ldw	r3,-32(fp)
20083290:	1887883a 	add	r3,r3,r2
20083294:	e0bffc17 	ldw	r2,-16(fp)
20083298:	e13ffe17 	ldw	r4,-8(fp)
2008329c:	180b883a 	mov	r5,r3
200832a0:	100d883a 	mov	r6,r2
200832a4:	008bf180 	call	2008bf18 <memcpy>
    	nReadCount = nCopyCount;
200832a8:	e0bffc17 	ldw	r2,-16(fp)
200832ac:	e0bff115 	stw	r2,-60(fp)

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
200832b0:	e0bfff17 	ldw	r2,-4(fp)
200832b4:	e0fff117 	ldw	r3,-60(fp)
200832b8:	1880222e 	bgeu	r3,r2,20083344 <Fat_FileRead+0x384>
200832bc:	e0bff817 	ldw	r2,-32(fp)
200832c0:	10800817 	ldw	r2,32(r2)
200832c4:	10ffffc4 	addi	r3,r2,-1
200832c8:	e0bff417 	ldw	r2,-48(fp)
200832cc:	18801d1e 	bne	r3,r2,20083344 <Fat_FileRead+0x384>
			// case: last sector of the cluster
			NextCluster = fatNextCluster(pVol, Cluster);
200832d0:	e13ff817 	ldw	r4,-32(fp)
200832d4:	e17ff017 	ldw	r5,-64(fp)
200832d8:	0083a000 	call	20083a00 <fatNextCluster>
200832dc:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
200832e0:	e0bffa17 	ldw	r2,-24(fp)
200832e4:	1000021e 	bne	r2,zero,200832f0 <Fat_FileRead+0x330>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
200832e8:	0005883a 	mov	r2,zero
200832ec:	00008e06 	br	20083528 <Fat_FileRead+0x568>
			}

			Cluster = NextCluster;
200832f0:	e0bffa17 	ldw	r2,-24(fp)
200832f4:	e0bff015 	stw	r2,-64(fp)
			f->ClusterSeq++;
200832f8:	e0bff717 	ldw	r2,-36(fp)
200832fc:	10800417 	ldw	r2,16(r2)
20083300:	10c00044 	addi	r3,r2,1
20083304:	e0bff717 	ldw	r2,-36(fp)
20083308:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
2008330c:	e0bff717 	ldw	r2,-36(fp)
20083310:	e0fff017 	ldw	r3,-64(fp)
20083314:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20083318:	e0bff017 	ldw	r2,-64(fp)
2008331c:	10ffff84 	addi	r3,r2,-2
20083320:	e0bff817 	ldw	r2,-32(fp)
20083324:	10800817 	ldw	r2,32(r2)
20083328:	1887383a 	mul	r3,r3,r2
2008332c:	e0bff817 	ldw	r2,-32(fp)
20083330:	10801017 	ldw	r2,64(r2)
20083334:	1885883a 	add	r2,r3,r2
20083338:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
2008333c:	e03ff415 	stw	zero,-48(fp)
20083340:	00000606 	br	2008335c <Fat_FileRead+0x39c>
    	} else {
    		SectorOffset++;
20083344:	e0bff417 	ldw	r2,-48(fp)
20083348:	10800044 	addi	r2,r2,1
2008334c:	e0bff415 	stw	r2,-48(fp)
    		PhysicalSecter++;
20083350:	e0bfef17 	ldw	r2,-68(fp)
20083354:	10800044 	addi	r2,r2,1
20083358:	e0bfef15 	stw	r2,-68(fp)
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
2008335c:	e0ffff17 	ldw	r3,-4(fp)
20083360:	e0bff117 	ldw	r2,-60(fp)
20083364:	1885c83a 	sub	r2,r3,r2
20083368:	1004d27a 	srli	r2,r2,9
2008336c:	e0bff515 	stw	r2,-44(fp)

    while(SectorsToRead > 0){
20083370:	00004c06 	br	200834a4 <Fat_FileRead+0x4e4>
    	if(SectorsToRead < (pVol->BPB_SecPerCluster - SectorOffset)){
20083374:	e0bff817 	ldw	r2,-32(fp)
20083378:	10c00817 	ldw	r3,32(r2)
2008337c:	e0bff417 	ldw	r2,-48(fp)
20083380:	1885c83a 	sub	r2,r3,r2
20083384:	e0fff517 	ldw	r3,-44(fp)
20083388:	1880032e 	bgeu	r3,r2,20083398 <Fat_FileRead+0x3d8>
    		nCopySectors = SectorsToRead;
2008338c:	e0bff517 	ldw	r2,-44(fp)
20083390:	e0bff615 	stw	r2,-40(fp)
20083394:	00000506 	br	200833ac <Fat_FileRead+0x3ec>
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
20083398:	e0bff817 	ldw	r2,-32(fp)
2008339c:	10c00817 	ldw	r3,32(r2)
200833a0:	e0bff417 	ldw	r2,-48(fp)
200833a4:	1885c83a 	sub	r2,r3,r2
200833a8:	e0bff615 	stw	r2,-40(fp)
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
200833ac:	e1bff617 	ldw	r6,-40(fp)
200833b0:	e0fffe17 	ldw	r3,-8(fp)
200833b4:	e0bff117 	ldw	r2,-60(fp)
200833b8:	1885883a 	add	r2,r3,r2
200833bc:	e13ff817 	ldw	r4,-32(fp)
200833c0:	e17fef17 	ldw	r5,-68(fp)
200833c4:	100f883a 	mov	r7,r2
200833c8:	008437c0 	call	2008437c <fatReadMultiSecter>
200833cc:	1000021e 	bne	r2,zero,200833d8 <Fat_FileRead+0x418>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
200833d0:	0005883a 	mov	r2,zero
200833d4:	00005406 	br	20083528 <Fat_FileRead+0x568>
        }
        SectorsToRead -= nCopySectors;
200833d8:	e0bff617 	ldw	r2,-40(fp)
200833dc:	e0fff517 	ldw	r3,-44(fp)
200833e0:	1885c83a 	sub	r2,r3,r2
200833e4:	e0bff515 	stw	r2,-44(fp)
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
200833e8:	e0bff617 	ldw	r2,-40(fp)
200833ec:	1004927a 	slli	r2,r2,9
200833f0:	1007883a 	mov	r3,r2
200833f4:	e0bff117 	ldw	r2,-60(fp)
200833f8:	10c5883a 	add	r2,r2,r3
200833fc:	e0bff115 	stw	r2,-60(fp)
        PhysicalSecter += nCopySectors;
20083400:	e0bff617 	ldw	r2,-40(fp)
20083404:	e0ffef17 	ldw	r3,-68(fp)
20083408:	1885883a 	add	r2,r3,r2
2008340c:	e0bfef15 	stw	r2,-68(fp)

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20083410:	e0fff617 	ldw	r3,-40(fp)
20083414:	e0bff817 	ldw	r2,-32(fp)
20083418:	11000817 	ldw	r4,32(r2)
2008341c:	e0bff417 	ldw	r2,-48(fp)
20083420:	2085c83a 	sub	r2,r4,r2
20083424:	18801f1e 	bne	r3,r2,200834a4 <Fat_FileRead+0x4e4>
20083428:	e0bfff17 	ldw	r2,-4(fp)
2008342c:	e0fff117 	ldw	r3,-60(fp)
20083430:	18801c2e 	bgeu	r3,r2,200834a4 <Fat_FileRead+0x4e4>
			NextCluster = fatNextCluster(pVol, Cluster);
20083434:	e13ff817 	ldw	r4,-32(fp)
20083438:	e17ff017 	ldw	r5,-64(fp)
2008343c:	0083a000 	call	20083a00 <fatNextCluster>
20083440:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
20083444:	e0bffa17 	ldw	r2,-24(fp)
20083448:	1000021e 	bne	r2,zero,20083454 <Fat_FileRead+0x494>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
2008344c:	0005883a 	mov	r2,zero
20083450:	00003506 	br	20083528 <Fat_FileRead+0x568>
			}else{
				Cluster = NextCluster;
20083454:	e0bffa17 	ldw	r2,-24(fp)
20083458:	e0bff015 	stw	r2,-64(fp)
			}
			f->ClusterSeq++;
2008345c:	e0bff717 	ldw	r2,-36(fp)
20083460:	10800417 	ldw	r2,16(r2)
20083464:	10c00044 	addi	r3,r2,1
20083468:	e0bff717 	ldw	r2,-36(fp)
2008346c:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
20083470:	e0bff717 	ldw	r2,-36(fp)
20083474:	e0fff017 	ldw	r3,-64(fp)
20083478:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
2008347c:	e0bff017 	ldw	r2,-64(fp)
20083480:	10ffff84 	addi	r3,r2,-2
20083484:	e0bff817 	ldw	r2,-32(fp)
20083488:	10800817 	ldw	r2,32(r2)
2008348c:	1887383a 	mul	r3,r3,r2
20083490:	e0bff817 	ldw	r2,-32(fp)
20083494:	10801017 	ldw	r2,64(r2)
20083498:	1885883a 	add	r2,r3,r2
2008349c:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
200834a0:	e03ff415 	stw	zero,-48(fp)
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
200834a4:	e0bff517 	ldw	r2,-44(fp)
200834a8:	103fb21e 	bne	r2,zero,20083374 <__flash_rwdata_start+0xfffe4588>
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
200834ac:	e0bfff17 	ldw	r2,-4(fp)
200834b0:	e0fff117 	ldw	r3,-60(fp)
200834b4:	1880132e 	bgeu	r3,r2,20083504 <Fat_FileRead+0x544>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
200834b8:	e13ff817 	ldw	r4,-32(fp)
200834bc:	e17fef17 	ldw	r5,-68(fp)
200834c0:	00842ec0 	call	200842ec <fatReadSecter>
200834c4:	1000021e 	bne	r2,zero,200834d0 <Fat_FileRead+0x510>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector\r\n"));
			return FALSE;
200834c8:	0005883a 	mov	r2,zero
200834cc:	00001606 	br	20083528 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize - nReadCount;
200834d0:	e0ffff17 	ldw	r3,-4(fp)
200834d4:	e0bff117 	ldw	r2,-60(fp)
200834d8:	1885c83a 	sub	r2,r3,r2
200834dc:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer+nReadCount, pVol->Secter_Data, nCopyCount);
200834e0:	e0fffe17 	ldw	r3,-8(fp)
200834e4:	e0bff117 	ldw	r2,-60(fp)
200834e8:	1889883a 	add	r4,r3,r2
200834ec:	e0bff817 	ldw	r2,-32(fp)
200834f0:	10c01104 	addi	r3,r2,68
200834f4:	e0bffc17 	ldw	r2,-16(fp)
200834f8:	180b883a 	mov	r5,r3
200834fc:	100d883a 	mov	r6,r2
20083500:	008bf180 	call	2008bf18 <memcpy>
            f->Cluster = Cluster;
        }                    
    }
#endif
    
    if (bSuccess){
20083504:	e0bff317 	ldw	r2,-52(fp)
20083508:	10000626 	beq	r2,zero,20083524 <Fat_FileRead+0x564>
        f->SeekPos += nBufferSize;
2008350c:	e0bff717 	ldw	r2,-36(fp)
20083510:	10c00217 	ldw	r3,8(r2)
20083514:	e0bfff17 	ldw	r2,-4(fp)
20083518:	1887883a 	add	r3,r3,r2
2008351c:	e0bff717 	ldw	r2,-36(fp)
20083520:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
20083524:	e0bff317 	ldw	r2,-52(fp)
}
20083528:	e037883a 	mov	sp,fp
2008352c:	dfc00117 	ldw	ra,4(sp)
20083530:	df000017 	ldw	fp,0(sp)
20083534:	dec00204 	addi	sp,sp,8
20083538:	f800283a 	ret

2008353c <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
2008353c:	defff904 	addi	sp,sp,-28
20083540:	df000615 	stw	fp,24(sp)
20083544:	df000604 	addi	fp,sp,24
20083548:	e13ffd15 	stw	r4,-12(fp)
2008354c:	e17ffe15 	stw	r5,-8(fp)
20083550:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20083554:	e0bffd17 	ldw	r2,-12(fp)
20083558:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
2008355c:	00800044 	movi	r2,1
20083560:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
20083564:	e0bffb17 	ldw	r2,-20(fp)
20083568:	10000326 	beq	r2,zero,20083578 <Fat_FileSeek+0x3c>
2008356c:	e0bffb17 	ldw	r2,-20(fp)
20083570:	10804f17 	ldw	r2,316(r2)
20083574:	1000021e 	bne	r2,zero,20083580 <Fat_FileSeek+0x44>
        return FALSE;
20083578:	0005883a 	mov	r2,zero
2008357c:	00002b06 	br	2008362c <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
20083580:	e0bffb17 	ldw	r2,-20(fp)
20083584:	10804f17 	ldw	r2,316(r2)
20083588:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
2008358c:	e0bffb17 	ldw	r2,-20(fp)
20083590:	10800017 	ldw	r2,0(r2)
20083594:	1000021e 	bne	r2,zero,200835a0 <Fat_FileSeek+0x64>
        return FALSE;
20083598:	0005883a 	mov	r2,zero
2008359c:	00002306 	br	2008362c <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
200835a0:	e0bffe17 	ldw	r2,-8(fp)
200835a4:	10c00060 	cmpeqi	r3,r2,1
200835a8:	1800081e 	bne	r3,zero,200835cc <Fat_FileSeek+0x90>
200835ac:	0080032e 	bgeu	zero,r2,200835bc <Fat_FileSeek+0x80>
200835b0:	108000a0 	cmpeqi	r2,r2,2
200835b4:	10000c1e 	bne	r2,zero,200835e8 <Fat_FileSeek+0xac>
200835b8:	00001206 	br	20083604 <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
200835bc:	e0ffff17 	ldw	r3,-4(fp)
200835c0:	e0bffb17 	ldw	r2,-20(fp)
200835c4:	10c00215 	stw	r3,8(r2)
            break;
200835c8:	00001006 	br	2008360c <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
200835cc:	e0bffb17 	ldw	r2,-20(fp)
200835d0:	10c00217 	ldw	r3,8(r2)
200835d4:	e0bfff17 	ldw	r2,-4(fp)
200835d8:	1887883a 	add	r3,r3,r2
200835dc:	e0bffb17 	ldw	r2,-20(fp)
200835e0:	10c00215 	stw	r3,8(r2)
            break;
200835e4:	00000906 	br	2008360c <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
200835e8:	e0bffb17 	ldw	r2,-20(fp)
200835ec:	10c04e17 	ldw	r3,312(r2)
200835f0:	e0bfff17 	ldw	r2,-4(fp)
200835f4:	1887883a 	add	r3,r3,r2
200835f8:	e0bffb17 	ldw	r2,-20(fp)
200835fc:	10c00215 	stw	r3,8(r2)
            break;
20083600:	00000206 	br	2008360c <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
20083604:	e03ffa15 	stw	zero,-24(fp)
            break;    
20083608:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
2008360c:	e0bffb17 	ldw	r2,-20(fp)
20083610:	10804d8b 	ldhu	r2,310(r2)
20083614:	10ffffcc 	andi	r3,r2,65535
20083618:	e0bffb17 	ldw	r2,-20(fp)
2008361c:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
20083620:	e0bffb17 	ldw	r2,-20(fp)
20083624:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
20083628:	e0bffa17 	ldw	r2,-24(fp)
    
}
2008362c:	e037883a 	mov	sp,fp
20083630:	df000017 	ldw	fp,0(sp)
20083634:	dec00104 	addi	sp,sp,4
20083638:	f800283a 	ret

2008363c <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
2008363c:	defffd04 	addi	sp,sp,-12
20083640:	df000215 	stw	fp,8(sp)
20083644:	df000204 	addi	fp,sp,8
20083648:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
2008364c:	e0bfff17 	ldw	r2,-4(fp)
20083650:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
20083654:	e0bffe17 	ldw	r2,-8(fp)
20083658:	1000011e 	bne	r2,zero,20083660 <Fat_FileClose+0x24>
        return;
2008365c:	0001883a 	nop
        
    //free(f);
}
20083660:	e037883a 	mov	sp,fp
20083664:	df000017 	ldw	fp,0(sp)
20083668:	dec00104 	addi	sp,sp,4
2008366c:	f800283a 	ret

20083670 <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20083670:	deff7304 	addi	sp,sp,-564
20083674:	dfc08c15 	stw	ra,560(sp)
20083678:	df008b15 	stw	fp,556(sp)
2008367c:	dc008a15 	stw	r16,552(sp)
20083680:	df008b04 	addi	fp,sp,556
20083684:	e13ffd15 	stw	r4,-12(fp)
20083688:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
2008368c:	00800044 	movi	r2,1
20083690:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
20083694:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
20083698:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
2008369c:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
200836a0:	e0bffd17 	ldw	r2,-12(fp)
200836a4:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
200836a8:	e0bf7917 	ldw	r2,-540(fp)
200836ac:	1000021e 	bne	r2,zero,200836b8 <Fat_SpeedTest+0x48>
        return 0;
200836b0:	0005883a 	mov	r2,zero
200836b4:	00006b06 	br	20083864 <Fat_SpeedTest+0x1f4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
200836b8:	00800034 	movhi	r2,0
200836bc:	108a9d04 	addi	r2,r2,10868
200836c0:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
200836c4:	e0bf7a15 	stw	r2,-536(fp)
200836c8:	00800034 	movhi	r2,0
200836cc:	108a9d04 	addi	r2,r2,10868
200836d0:	14000017 	ldw	r16,0(r2)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
200836d4:	e0bffe17 	ldw	r2,-8(fp)
200836d8:	10c0fa24 	muli	r3,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
200836dc:	00800034 	movhi	r2,0
200836e0:	108a9c04 	addi	r2,r2,10864
200836e4:	10800017 	ldw	r2,0(r2)
200836e8:	1809883a 	mov	r4,r3
200836ec:	100b883a 	mov	r5,r2
200836f0:	0088bf00 	call	20088bf0 <__udivsi3>
200836f4:	8085883a 	add	r2,r16,r2
200836f8:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
200836fc:	00000f06 	br	2008373c <Fat_SpeedTest+0xcc>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
20083700:	e0bf7917 	ldw	r2,-540(fp)
20083704:	10800117 	ldw	r2,4(r2)
20083708:	e0ff7917 	ldw	r3,-540(fp)
2008370c:	19000017 	ldw	r4,0(r3)
20083710:	e17f7717 	ldw	r5,-548(fp)
20083714:	e0ff7d04 	addi	r3,fp,-524
20083718:	180d883a 	mov	r6,r3
2008371c:	103ee83a 	callr	r2
20083720:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
20083724:	e0bf7717 	ldw	r2,-548(fp)
20083728:	10800044 	addi	r2,r2,1
2008372c:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
20083730:	e0bf7617 	ldw	r2,-552(fp)
20083734:	10808004 	addi	r2,r2,512
20083738:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2008373c:	00800034 	movhi	r2,0
20083740:	108a9d04 	addi	r2,r2,10868
20083744:	10c00017 	ldw	r3,0(r2)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
20083748:	e0bf7b17 	ldw	r2,-532(fp)
2008374c:	1880022e 	bgeu	r3,r2,20083758 <Fat_SpeedTest+0xe8>
20083750:	e0bf7517 	ldw	r2,-556(fp)
20083754:	103fea1e 	bne	r2,zero,20083700 <__flash_rwdata_start+0xfffe4914>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
20083758:	e0bf7517 	ldw	r2,-556(fp)
2008375c:	10003726 	beq	r2,zero,2008383c <Fat_SpeedTest+0x1cc>
20083760:	00800034 	movhi	r2,0
20083764:	108a9d04 	addi	r2,r2,10868
20083768:	10c00017 	ldw	r3,0(r2)
        time_elapsed = alt_nticks() - time_start;
2008376c:	e0bf7a17 	ldw	r2,-536(fp)
20083770:	1885c83a 	sub	r2,r3,r2
20083774:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
20083778:	e13f7617 	ldw	r4,-552(fp)
2008377c:	00894740 	call	20089474 <__floatunsisf>
20083780:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20083784:	00800034 	movhi	r2,0
20083788:	108a9c04 	addi	r2,r2,10864
2008378c:	10800017 	ldw	r2,0(r2)
20083790:	1009883a 	mov	r4,r2
20083794:	00894740 	call	20089474 <__floatunsisf>
20083798:	1007883a 	mov	r3,r2
2008379c:	8009883a 	mov	r4,r16
200837a0:	180b883a 	mov	r5,r3
200837a4:	00890500 	call	20089050 <__mulsf3>
200837a8:	1007883a 	mov	r3,r2
200837ac:	1821883a 	mov	r16,r3
200837b0:	e13f7c17 	ldw	r4,-528(fp)
200837b4:	00894740 	call	20089474 <__floatunsisf>
200837b8:	1007883a 	mov	r3,r2
200837bc:	8009883a 	mov	r4,r16
200837c0:	180b883a 	mov	r5,r3
200837c4:	0088c000 	call	20088c00 <__divsf3>
200837c8:	1007883a 	mov	r3,r2
200837cc:	1805883a 	mov	r2,r3
200837d0:	1009883a 	mov	r4,r2
200837d4:	008b1b80 	call	2008b1b8 <__extendsfdf2>
200837d8:	100b883a 	mov	r5,r2
200837dc:	180d883a 	mov	r6,r3
200837e0:	2809883a 	mov	r4,r5
200837e4:	300b883a 	mov	r5,r6
200837e8:	000d883a 	mov	r6,zero
200837ec:	01d02434 	movhi	r7,16528
200837f0:	0089e200 	call	20089e20 <__divdf3>
200837f4:	1009883a 	mov	r4,r2
200837f8:	180b883a 	mov	r5,r3
200837fc:	2005883a 	mov	r2,r4
20083800:	2807883a 	mov	r3,r5
20083804:	1009883a 	mov	r4,r2
20083808:	180b883a 	mov	r5,r3
2008380c:	000d883a 	mov	r6,zero
20083810:	01d02434 	movhi	r7,16528
20083814:	0089e200 	call	20089e20 <__divdf3>
20083818:	1009883a 	mov	r4,r2
2008381c:	180b883a 	mov	r5,r3
20083820:	2005883a 	mov	r2,r4
20083824:	2807883a 	mov	r3,r5
20083828:	1009883a 	mov	r4,r2
2008382c:	180b883a 	mov	r5,r3
20083830:	008b2c80 	call	2008b2c8 <__truncdfsf2>
20083834:	1007883a 	mov	r3,r2
20083838:	e0ff7815 	stw	r3,-544(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
2008383c:	e13f7817 	ldw	r4,-544(fp)
20083840:	008b1b80 	call	2008b1b8 <__extendsfdf2>
20083844:	100d883a 	mov	r6,r2
20083848:	180f883a 	mov	r7,r3
2008384c:	01000034 	movhi	r4,0
20083850:	21009d04 	addi	r4,r4,628
20083854:	300b883a 	mov	r5,r6
20083858:	380d883a 	mov	r6,r7
2008385c:	008c1a00 	call	2008c1a0 <printf>
    return fMegaBytePerSec;
20083860:	e0bf7817 	ldw	r2,-544(fp)
20083864:	1007883a 	mov	r3,r2
    
   
}
20083868:	1805883a 	mov	r2,r3
2008386c:	e6ffff04 	addi	sp,fp,-4
20083870:	dfc00217 	ldw	ra,8(sp)
20083874:	df000117 	ldw	fp,4(sp)
20083878:	dc000017 	ldw	r16,0(sp)
2008387c:	dec00304 	addi	sp,sp,12
20083880:	f800283a 	ret

20083884 <fat16ClusterType>:

//extern VOLUME_INFO gVolumeInfo;

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
20083884:	defffd04 	addi	sp,sp,-12
20083888:	df000215 	stw	fp,8(sp)
2008388c:	df000204 	addi	fp,sp,8
20083890:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20083894:	e0bfff17 	ldw	r2,-4(fp)
20083898:	10bfffcc 	andi	r2,r2,65535
2008389c:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
200838a0:	e0bfff17 	ldw	r2,-4(fp)
200838a4:	10000626 	beq	r2,zero,200838c0 <fat16ClusterType+0x3c>
200838a8:	e0bfff17 	ldw	r2,-4(fp)
200838ac:	10bffc28 	cmpgeui	r2,r2,65520
200838b0:	1000031e 	bne	r2,zero,200838c0 <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
200838b4:	00800104 	movi	r2,4
200838b8:	e0bffe15 	stw	r2,-8(fp)
200838bc:	00001806 	br	20083920 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
200838c0:	e0bfff17 	ldw	r2,-4(fp)
200838c4:	10bffe30 	cmpltui	r2,r2,65528
200838c8:	1000031e 	bne	r2,zero,200838d8 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
200838cc:	008000c4 	movi	r2,3
200838d0:	e0bffe15 	stw	r2,-8(fp)
200838d4:	00001206 	br	20083920 <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
200838d8:	e0bfff17 	ldw	r2,-4(fp)
200838dc:	1000021e 	bne	r2,zero,200838e8 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
200838e0:	e03ffe15 	stw	zero,-8(fp)
200838e4:	00000e06 	br	20083920 <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
200838e8:	e0bfff17 	ldw	r2,-4(fp)
200838ec:	10bffc30 	cmpltui	r2,r2,65520
200838f0:	1000061e 	bne	r2,zero,2008390c <fat16ClusterType+0x88>
200838f4:	e0bfff17 	ldw	r2,-4(fp)
200838f8:	10bffde8 	cmpgeui	r2,r2,65527
200838fc:	1000031e 	bne	r2,zero,2008390c <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
20083900:	00800044 	movi	r2,1
20083904:	e0bffe15 	stw	r2,-8(fp)
20083908:	00000506 	br	20083920 <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
2008390c:	e0ffff17 	ldw	r3,-4(fp)
20083910:	00bffdd4 	movui	r2,65527
20083914:	1880021e 	bne	r3,r2,20083920 <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
20083918:	00800084 	movi	r2,2
2008391c:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
20083920:	e0bffe17 	ldw	r2,-8(fp)
         
}
20083924:	e037883a 	mov	sp,fp
20083928:	df000017 	ldw	fp,0(sp)
2008392c:	dec00104 	addi	sp,sp,4
20083930:	f800283a 	ret

20083934 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
20083934:	defffd04 	addi	sp,sp,-12
20083938:	df000215 	stw	fp,8(sp)
2008393c:	df000204 	addi	fp,sp,8
20083940:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083944:	e0ffff17 	ldw	r3,-4(fp)
20083948:	00840034 	movhi	r2,4096
2008394c:	10bfffc4 	addi	r2,r2,-1
20083950:	1884703a 	and	r2,r3,r2
20083954:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20083958:	e0bfff17 	ldw	r2,-4(fp)
2008395c:	10000726 	beq	r2,zero,2008397c <fat32ClusterType+0x48>
20083960:	e0ffff17 	ldw	r3,-4(fp)
20083964:	00840034 	movhi	r2,4096
20083968:	10bffbc4 	addi	r2,r2,-17
2008396c:	10c00336 	bltu	r2,r3,2008397c <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
20083970:	00800104 	movi	r2,4
20083974:	e0bffe15 	stw	r2,-8(fp)
20083978:	00001c06 	br	200839ec <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
2008397c:	e0ffff17 	ldw	r3,-4(fp)
20083980:	00840034 	movhi	r2,4096
20083984:	10bffdc4 	addi	r2,r2,-9
20083988:	10c0032e 	bgeu	r2,r3,20083998 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
2008398c:	008000c4 	movi	r2,3
20083990:	e0bffe15 	stw	r2,-8(fp)
20083994:	00001506 	br	200839ec <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
20083998:	e0bfff17 	ldw	r2,-4(fp)
2008399c:	1000021e 	bne	r2,zero,200839a8 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
200839a0:	e03ffe15 	stw	zero,-8(fp)
200839a4:	00001106 	br	200839ec <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
200839a8:	e0ffff17 	ldw	r3,-4(fp)
200839ac:	00840034 	movhi	r2,4096
200839b0:	10bffbc4 	addi	r2,r2,-17
200839b4:	10c0072e 	bgeu	r2,r3,200839d4 <fat32ClusterType+0xa0>
200839b8:	e0ffff17 	ldw	r3,-4(fp)
200839bc:	00840034 	movhi	r2,4096
200839c0:	10bffd84 	addi	r2,r2,-10
200839c4:	10c00336 	bltu	r2,r3,200839d4 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
200839c8:	00800044 	movi	r2,1
200839cc:	e0bffe15 	stw	r2,-8(fp)
200839d0:	00000606 	br	200839ec <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
200839d4:	e0ffff17 	ldw	r3,-4(fp)
200839d8:	00840034 	movhi	r2,4096
200839dc:	10bffdc4 	addi	r2,r2,-9
200839e0:	1880021e 	bne	r3,r2,200839ec <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
200839e4:	00800084 	movi	r2,2
200839e8:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
200839ec:	e0bffe17 	ldw	r2,-8(fp)
         
}
200839f0:	e037883a 	mov	sp,fp
200839f4:	df000017 	ldw	fp,0(sp)
200839f8:	dec00104 	addi	sp,sp,4
200839fc:	f800283a 	ret

20083a00 <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20083a00:	defff604 	addi	sp,sp,-40
20083a04:	dfc00915 	stw	ra,36(sp)
20083a08:	df000815 	stw	fp,32(sp)
20083a0c:	dc000715 	stw	r16,28(sp)
20083a10:	df000804 	addi	fp,sp,32
20083a14:	e13ffd15 	stw	r4,-12(fp)
20083a18:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083a1c:	e0bffd17 	ldw	r2,-12(fp)
20083a20:	10800417 	ldw	r2,16(r2)
20083a24:	108002d8 	cmpnei	r2,r2,11
20083a28:	1000021e 	bne	r2,zero,20083a34 <fatNextCluster+0x34>
20083a2c:	00800104 	movi	r2,4
20083a30:	00000106 	br	20083a38 <fatNextCluster+0x38>
20083a34:	00800084 	movi	r2,2
20083a38:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20083a3c:	e0bffd17 	ldw	r2,-12(fp)
20083a40:	10c00717 	ldw	r3,28(r2)
20083a44:	e0bffa17 	ldw	r2,-24(fp)
20083a48:	1809883a 	mov	r4,r3
20083a4c:	100b883a 	mov	r5,r2
20083a50:	0088bf00 	call	20088bf0 <__udivsi3>
20083a54:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083a58:	e0bffd17 	ldw	r2,-12(fp)
20083a5c:	14000e17 	ldw	r16,56(r2)
20083a60:	e0fffa17 	ldw	r3,-24(fp)
20083a64:	e0bffe17 	ldw	r2,-8(fp)
20083a68:	1887383a 	mul	r3,r3,r2
20083a6c:	e0bffd17 	ldw	r2,-12(fp)
20083a70:	10800717 	ldw	r2,28(r2)
20083a74:	1809883a 	mov	r4,r3
20083a78:	100b883a 	mov	r5,r2
20083a7c:	0088bf00 	call	20088bf0 <__udivsi3>
20083a80:	8085883a 	add	r2,r16,r2
20083a84:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
20083a88:	e13ffd17 	ldw	r4,-12(fp)
20083a8c:	e17ffc17 	ldw	r5,-16(fp)
20083a90:	00842ec0 	call	200842ec <fatReadSecter>
20083a94:	10002d26 	beq	r2,zero,20083b4c <fatNextCluster+0x14c>
        if (pVol->Partition_Type == PARTITION_FAT32){
20083a98:	e0bffd17 	ldw	r2,-12(fp)
20083a9c:	10800417 	ldw	r2,16(r2)
20083aa0:	108002d8 	cmpnei	r2,r2,11
20083aa4:	1000111e 	bne	r2,zero,20083aec <fatNextCluster+0xec>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083aa8:	e0bffb17 	ldw	r2,-20(fp)
20083aac:	e0fffe17 	ldw	r3,-8(fp)
20083ab0:	1809883a 	mov	r4,r3
20083ab4:	100b883a 	mov	r5,r2
20083ab8:	0088bf80 	call	20088bf8 <__umodsi3>
20083abc:	1007883a 	mov	r3,r2
20083ac0:	e0bffa17 	ldw	r2,-24(fp)
20083ac4:	1885383a 	mul	r2,r3,r2
20083ac8:	10801104 	addi	r2,r2,68
20083acc:	e0fffd17 	ldw	r3,-12(fp)
20083ad0:	1885883a 	add	r2,r3,r2
20083ad4:	10800017 	ldw	r2,0(r2)
20083ad8:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
20083adc:	e13ff917 	ldw	r4,-28(fp)
20083ae0:	00839340 	call	20083934 <fat32ClusterType>
20083ae4:	e0bff815 	stw	r2,-32(fp)
20083ae8:	00001106 	br	20083b30 <fatNextCluster+0x130>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083aec:	e0bffb17 	ldw	r2,-20(fp)
20083af0:	e0fffe17 	ldw	r3,-8(fp)
20083af4:	1809883a 	mov	r4,r3
20083af8:	100b883a 	mov	r5,r2
20083afc:	0088bf80 	call	20088bf8 <__umodsi3>
20083b00:	1007883a 	mov	r3,r2
20083b04:	e0bffa17 	ldw	r2,-24(fp)
20083b08:	1885383a 	mul	r2,r3,r2
20083b0c:	10801104 	addi	r2,r2,68
20083b10:	e0fffd17 	ldw	r3,-12(fp)
20083b14:	1885883a 	add	r2,r3,r2
20083b18:	1080000b 	ldhu	r2,0(r2)
20083b1c:	10bfffcc 	andi	r2,r2,65535
20083b20:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
20083b24:	e13ff917 	ldw	r4,-28(fp)
20083b28:	00838840 	call	20083884 <fat16ClusterType>
20083b2c:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
20083b30:	e0bff817 	ldw	r2,-32(fp)
20083b34:	10800120 	cmpeqi	r2,r2,4
20083b38:	1000041e 	bne	r2,zero,20083b4c <fatNextCluster+0x14c>
20083b3c:	e0bff817 	ldw	r2,-32(fp)
20083b40:	108000e0 	cmpeqi	r2,r2,3
20083b44:	1000011e 	bne	r2,zero,20083b4c <fatNextCluster+0x14c>
            NextCluster = 0;  // invalid cluster
20083b48:	e03ff915 	stw	zero,-28(fp)
    }
    if(NextCluster > 60607)
20083b4c:	e0bff917 	ldw	r2,-28(fp)
20083b50:	10bb3030 	cmpltui	r2,r2,60608
20083b54:	1000031e 	bne	r2,zero,20083b64 <fatNextCluster+0x164>
    	printf("Error getting next cluster");
20083b58:	01000034 	movhi	r4,0
20083b5c:	2100a404 	addi	r4,r4,656
20083b60:	008c1a00 	call	2008c1a0 <printf>
    return NextCluster;
20083b64:	e0bff917 	ldw	r2,-28(fp)
}
20083b68:	e6ffff04 	addi	sp,fp,-4
20083b6c:	dfc00217 	ldw	ra,8(sp)
20083b70:	df000117 	ldw	fp,4(sp)
20083b74:	dc000017 	ldw	r16,0(sp)
20083b78:	dec00304 	addi	sp,sp,12
20083b7c:	f800283a 	ret

20083b80 <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20083b80:	defff304 	addi	sp,sp,-52
20083b84:	dfc00c15 	stw	ra,48(sp)
20083b88:	df000b15 	stw	fp,44(sp)
20083b8c:	dc000a15 	stw	r16,40(sp)
20083b90:	df000b04 	addi	fp,sp,44
20083b94:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
20083b98:	00bfffc4 	movi	r2,-1
20083b9c:	e0bff615 	stw	r2,-40(fp)
20083ba0:	00800084 	movi	r2,2
20083ba4:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083ba8:	e0bffe17 	ldw	r2,-8(fp)
20083bac:	10800417 	ldw	r2,16(r2)
20083bb0:	108002d8 	cmpnei	r2,r2,11
20083bb4:	1000021e 	bne	r2,zero,20083bc0 <fatFindUnusedCluster+0x40>
20083bb8:	00800104 	movi	r2,4
20083bbc:	00000106 	br	20083bc4 <fatFindUnusedCluster+0x44>
20083bc0:	00800084 	movi	r2,2
20083bc4:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083bc8:	e0bffe17 	ldw	r2,-8(fp)
20083bcc:	10c00717 	ldw	r3,28(r2)
20083bd0:	e0bff917 	ldw	r2,-28(fp)
20083bd4:	1809883a 	mov	r4,r3
20083bd8:	100b883a 	mov	r5,r2
20083bdc:	0088bf00 	call	20088bf0 <__udivsi3>
20083be0:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
20083be4:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
20083be8:	00003a06 	br	20083cd4 <fatFindUnusedCluster+0x154>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083bec:	e0bffe17 	ldw	r2,-8(fp)
20083bf0:	14000e17 	ldw	r16,56(r2)
20083bf4:	e0fff917 	ldw	r3,-28(fp)
20083bf8:	e0bff717 	ldw	r2,-36(fp)
20083bfc:	1887383a 	mul	r3,r3,r2
20083c00:	e0bffe17 	ldw	r2,-8(fp)
20083c04:	10800717 	ldw	r2,28(r2)
20083c08:	1809883a 	mov	r4,r3
20083c0c:	100b883a 	mov	r5,r2
20083c10:	0088bf00 	call	20088bf0 <__udivsi3>
20083c14:	8085883a 	add	r2,r16,r2
20083c18:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
20083c1c:	e13ffe17 	ldw	r4,-8(fp)
20083c20:	e17ffb17 	ldw	r5,-20(fp)
20083c24:	00842ec0 	call	200842ec <fatReadSecter>
20083c28:	10002526 	beq	r2,zero,20083cc0 <fatFindUnusedCluster+0x140>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
20083c2c:	e0bffa17 	ldw	r2,-24(fp)
20083c30:	e0fff717 	ldw	r3,-36(fp)
20083c34:	1809883a 	mov	r4,r3
20083c38:	100b883a 	mov	r5,r2
20083c3c:	0088bf80 	call	20088bf8 <__umodsi3>
20083c40:	1007883a 	mov	r3,r2
20083c44:	e0bff917 	ldw	r2,-28(fp)
20083c48:	1885383a 	mul	r2,r3,r2
20083c4c:	10801104 	addi	r2,r2,68
20083c50:	e0fffe17 	ldw	r3,-8(fp)
20083c54:	1885883a 	add	r2,r3,r2
20083c58:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20083c5c:	e0bffe17 	ldw	r2,-8(fp)
20083c60:	10800417 	ldw	r2,16(r2)
20083c64:	108002d8 	cmpnei	r2,r2,11
20083c68:	1000071e 	bne	r2,zero,20083c88 <fatFindUnusedCluster+0x108>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
20083c6c:	e0bffc17 	ldw	r2,-16(fp)
20083c70:	10800017 	ldw	r2,0(r2)
20083c74:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20083c78:	e13ffd17 	ldw	r4,-12(fp)
20083c7c:	00839340 	call	20083934 <fat32ClusterType>
20083c80:	e0bff515 	stw	r2,-44(fp)
20083c84:	00000706 	br	20083ca4 <fatFindUnusedCluster+0x124>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
20083c88:	e0bffc17 	ldw	r2,-16(fp)
20083c8c:	1080000b 	ldhu	r2,0(r2)
20083c90:	10bfffcc 	andi	r2,r2,65535
20083c94:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20083c98:	e13ffd17 	ldw	r4,-12(fp)
20083c9c:	00838840 	call	20083884 <fat16ClusterType>
20083ca0:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
20083ca4:	e0bff517 	ldw	r2,-44(fp)
20083ca8:	1000071e 	bne	r2,zero,20083cc8 <fatFindUnusedCluster+0x148>
                UnusedCluster = ThisCluster;  // invalid cluster
20083cac:	e0bff717 	ldw	r2,-36(fp)
20083cb0:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
20083cb4:	00800044 	movi	r2,1
20083cb8:	e0bff815 	stw	r2,-32(fp)
20083cbc:	00000206 	br	20083cc8 <fatFindUnusedCluster+0x148>
            }    
        }else{
            bDone = TRUE;
20083cc0:	00800044 	movi	r2,1
20083cc4:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
20083cc8:	e0bff717 	ldw	r2,-36(fp)
20083ccc:	10800044 	addi	r2,r2,1
20083cd0:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
20083cd4:	e0bff817 	ldw	r2,-32(fp)
20083cd8:	103fc426 	beq	r2,zero,20083bec <__flash_rwdata_start+0xfffe4e00>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
20083cdc:	e0bff617 	ldw	r2,-40(fp)

}
20083ce0:	e6ffff04 	addi	sp,fp,-4
20083ce4:	dfc00217 	ldw	ra,8(sp)
20083ce8:	df000117 	ldw	fp,4(sp)
20083cec:	dc000017 	ldw	r16,0(sp)
20083cf0:	dec00304 	addi	sp,sp,12
20083cf4:	f800283a 	ret

20083cf8 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20083cf8:	defff204 	addi	sp,sp,-56
20083cfc:	dfc00d15 	stw	ra,52(sp)
20083d00:	df000c15 	stw	fp,48(sp)
20083d04:	dc000b15 	stw	r16,44(sp)
20083d08:	df000c04 	addi	fp,sp,48
20083d0c:	e13ffd15 	stw	r4,-12(fp)
20083d10:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
20083d14:	00800044 	movi	r2,1
20083d18:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
20083d1c:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083d20:	e0bffd17 	ldw	r2,-12(fp)
20083d24:	10800417 	ldw	r2,16(r2)
20083d28:	108002d8 	cmpnei	r2,r2,11
20083d2c:	1000021e 	bne	r2,zero,20083d38 <fatDelClusterList+0x40>
20083d30:	00800104 	movi	r2,4
20083d34:	00000106 	br	20083d3c <fatDelClusterList+0x44>
20083d38:	00800084 	movi	r2,2
20083d3c:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083d40:	e0bffd17 	ldw	r2,-12(fp)
20083d44:	10c00717 	ldw	r3,28(r2)
20083d48:	e0bff717 	ldw	r2,-36(fp)
20083d4c:	1809883a 	mov	r4,r3
20083d50:	100b883a 	mov	r5,r2
20083d54:	0088bf00 	call	20088bf0 <__udivsi3>
20083d58:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
20083d5c:	e0bffe17 	ldw	r2,-8(fp)
20083d60:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
20083d64:	00005306 	br	20083eb4 <fatDelClusterList+0x1bc>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083d68:	e0bffd17 	ldw	r2,-12(fp)
20083d6c:	14000e17 	ldw	r16,56(r2)
20083d70:	e0fff717 	ldw	r3,-36(fp)
20083d74:	e0bff917 	ldw	r2,-28(fp)
20083d78:	1887383a 	mul	r3,r3,r2
20083d7c:	e0bffd17 	ldw	r2,-12(fp)
20083d80:	10800717 	ldw	r2,28(r2)
20083d84:	1809883a 	mov	r4,r3
20083d88:	100b883a 	mov	r5,r2
20083d8c:	0088bf00 	call	20088bf0 <__udivsi3>
20083d90:	8085883a 	add	r2,r16,r2
20083d94:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
20083d98:	e13ffd17 	ldw	r4,-12(fp)
20083d9c:	e17ffa17 	ldw	r5,-24(fp)
20083da0:	00842ec0 	call	200842ec <fatReadSecter>
20083da4:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
20083da8:	e0bff517 	ldw	r2,-44(fp)
20083dac:	10004126 	beq	r2,zero,20083eb4 <fatDelClusterList+0x1bc>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20083db0:	e0bff817 	ldw	r2,-32(fp)
20083db4:	e0fff917 	ldw	r3,-28(fp)
20083db8:	1809883a 	mov	r4,r3
20083dbc:	100b883a 	mov	r5,r2
20083dc0:	0088bf80 	call	20088bf8 <__umodsi3>
20083dc4:	1007883a 	mov	r3,r2
20083dc8:	e0bff717 	ldw	r2,-36(fp)
20083dcc:	1885383a 	mul	r2,r3,r2
20083dd0:	10801104 	addi	r2,r2,68
20083dd4:	e0fffd17 	ldw	r3,-12(fp)
20083dd8:	1885883a 	add	r2,r3,r2
20083ddc:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20083de0:	e0bffd17 	ldw	r2,-12(fp)
20083de4:	10800417 	ldw	r2,16(r2)
20083de8:	108002d8 	cmpnei	r2,r2,11
20083dec:	1000071e 	bne	r2,zero,20083e0c <fatDelClusterList+0x114>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
20083df0:	e0bffb17 	ldw	r2,-20(fp)
20083df4:	10800017 	ldw	r2,0(r2)
20083df8:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20083dfc:	e13ffc17 	ldw	r4,-16(fp)
20083e00:	00839340 	call	20083934 <fat32ClusterType>
20083e04:	e0bff415 	stw	r2,-48(fp)
20083e08:	00000706 	br	20083e28 <fatDelClusterList+0x130>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20083e0c:	e0bffb17 	ldw	r2,-20(fp)
20083e10:	1080000b 	ldhu	r2,0(r2)
20083e14:	10bfffcc 	andi	r2,r2,65535
20083e18:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20083e1c:	e13ffc17 	ldw	r4,-16(fp)
20083e20:	00838840 	call	20083884 <fat16ClusterType>
20083e24:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20083e28:	e0bff417 	ldw	r2,-48(fp)
20083e2c:	10800120 	cmpeqi	r2,r2,4
20083e30:	1000071e 	bne	r2,zero,20083e50 <fatDelClusterList+0x158>
20083e34:	e0bff417 	ldw	r2,-48(fp)
20083e38:	108000e0 	cmpeqi	r2,r2,3
20083e3c:	1000041e 	bne	r2,zero,20083e50 <fatDelClusterList+0x158>
                bDone = TRUE;
20083e40:	00800044 	movi	r2,1
20083e44:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
20083e48:	e03ff515 	stw	zero,-44(fp)
20083e4c:	00001906 	br	20083eb4 <fatDelClusterList+0x1bc>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083e50:	e0bff417 	ldw	r2,-48(fp)
20083e54:	108000d8 	cmpnei	r2,r2,3
20083e58:	1000021e 	bne	r2,zero,20083e64 <fatDelClusterList+0x16c>
                    bDone = TRUE; // the last cluster
20083e5c:	00800044 	movi	r2,1
20083e60:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
20083e64:	e0bffd17 	ldw	r2,-12(fp)
20083e68:	10800417 	ldw	r2,16(r2)
20083e6c:	108002d8 	cmpnei	r2,r2,11
20083e70:	1000031e 	bne	r2,zero,20083e80 <fatDelClusterList+0x188>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
20083e74:	e0bffb17 	ldw	r2,-20(fp)
20083e78:	10000015 	stw	zero,0(r2)
20083e7c:	00000206 	br	20083e88 <fatDelClusterList+0x190>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
20083e80:	e0bffb17 	ldw	r2,-20(fp)
20083e84:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
20083e88:	e0bffd17 	ldw	r2,-12(fp)
20083e8c:	10800217 	ldw	r2,8(r2)
20083e90:	e0fffd17 	ldw	r3,-12(fp)
20083e94:	19000017 	ldw	r4,0(r3)
20083e98:	e0fffd17 	ldw	r3,-12(fp)
20083e9c:	19409117 	ldw	r5,580(r3)
20083ea0:	e0fffd17 	ldw	r3,-12(fp)
20083ea4:	18c01104 	addi	r3,r3,68
20083ea8:	180d883a 	mov	r6,r3
20083eac:	103ee83a 	callr	r2
20083eb0:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
20083eb4:	e0bff517 	ldw	r2,-44(fp)
20083eb8:	10000226 	beq	r2,zero,20083ec4 <fatDelClusterList+0x1cc>
20083ebc:	e0bff617 	ldw	r2,-40(fp)
20083ec0:	103fa926 	beq	r2,zero,20083d68 <__flash_rwdata_start+0xfffe4f7c>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
20083ec4:	e0bff517 	ldw	r2,-44(fp)

}
20083ec8:	e6ffff04 	addi	sp,fp,-4
20083ecc:	dfc00217 	ldw	ra,8(sp)
20083ed0:	df000117 	ldw	fp,4(sp)
20083ed4:	dc000017 	ldw	r16,0(sp)
20083ed8:	dec00304 	addi	sp,sp,12
20083edc:	f800283a 	ret

20083ee0 <fatDumpDate>:


void fatDumpDate(unsigned short Date){
20083ee0:	defffb04 	addi	sp,sp,-20
20083ee4:	df000415 	stw	fp,16(sp)
20083ee8:	df000404 	addi	fp,sp,16
20083eec:	2005883a 	mov	r2,r4
20083ef0:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
20083ef4:	e0bfff0b 	ldhu	r2,-4(fp)
20083ef8:	1004d27a 	srli	r2,r2,9
20083efc:	10bfffcc 	andi	r2,r2,65535
20083f00:	108007cc 	andi	r2,r2,31
20083f04:	1081ef04 	addi	r2,r2,1980
20083f08:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
20083f0c:	e0bfff0b 	ldhu	r2,-4(fp)
20083f10:	1004d17a 	srli	r2,r2,5
20083f14:	10bfffcc 	andi	r2,r2,65535
20083f18:	108003cc 	andi	r2,r2,15
20083f1c:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
20083f20:	e0bfff0b 	ldhu	r2,-4(fp)
20083f24:	108007cc 	andi	r2,r2,31
20083f28:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
20083f2c:	e037883a 	mov	sp,fp
20083f30:	df000017 	ldw	fp,0(sp)
20083f34:	dec00104 	addi	sp,sp,4
20083f38:	f800283a 	ret

20083f3c <fatDumpTime>:

void fatDumpTime(unsigned short Date){
20083f3c:	defffb04 	addi	sp,sp,-20
20083f40:	df000415 	stw	fp,16(sp)
20083f44:	df000404 	addi	fp,sp,16
20083f48:	2005883a 	mov	r2,r4
20083f4c:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
20083f50:	e0bfff0b 	ldhu	r2,-4(fp)
20083f54:	1004d27a 	srli	r2,r2,9
20083f58:	10bfffcc 	andi	r2,r2,65535
20083f5c:	108007cc 	andi	r2,r2,31
20083f60:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
20083f64:	e0bfff0b 	ldhu	r2,-4(fp)
20083f68:	1004d17a 	srli	r2,r2,5
20083f6c:	10bfffcc 	andi	r2,r2,65535
20083f70:	10800fcc 	andi	r2,r2,63
20083f74:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
20083f78:	e0bfff0b 	ldhu	r2,-4(fp)
20083f7c:	108007cc 	andi	r2,r2,31
20083f80:	1085883a 	add	r2,r2,r2
20083f84:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
20083f88:	e037883a 	mov	sp,fp
20083f8c:	df000017 	ldw	fp,0(sp)
20083f90:	dec00104 	addi	sp,sp,4
20083f94:	f800283a 	ret

20083f98 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
20083f98:	defffe04 	addi	sp,sp,-8
20083f9c:	df000115 	stw	fp,4(sp)
20083fa0:	df000104 	addi	fp,sp,4
20083fa4:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
20083fa8:	e0bfff17 	ldw	r2,-4(fp)
20083fac:	10800003 	ldbu	r2,0(r2)
20083fb0:	10803fcc 	andi	r2,r2,255
20083fb4:	1080201c 	xori	r2,r2,128
20083fb8:	10bfe004 	addi	r2,r2,-128
20083fbc:	1000021e 	bne	r2,zero,20083fc8 <fatIsLastDir+0x30>
        return TRUE;
20083fc0:	00800044 	movi	r2,1
20083fc4:	00000106 	br	20083fcc <fatIsLastDir+0x34>
    return FALSE;        
20083fc8:	0005883a 	mov	r2,zero
}
20083fcc:	e037883a 	mov	sp,fp
20083fd0:	df000017 	ldw	fp,0(sp)
20083fd4:	dec00104 	addi	sp,sp,4
20083fd8:	f800283a 	ret

20083fdc <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
20083fdc:	defff704 	addi	sp,sp,-36
20083fe0:	dfc00815 	stw	ra,32(sp)
20083fe4:	df000715 	stw	fp,28(sp)
20083fe8:	df000704 	addi	fp,sp,28
20083fec:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20083ff0:	00800034 	movhi	r2,0
20083ff4:	1080aac4 	addi	r2,r2,683
20083ff8:	e0fffa04 	addi	r3,fp,-24
20083ffc:	100b883a 	mov	r5,r2
20084000:	00800444 	movi	r2,17
20084004:	1809883a 	mov	r4,r3
20084008:	100d883a 	mov	r6,r2
2008400c:	008bf180 	call	2008bf18 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20084010:	e03ff915 	stw	zero,-28(fp)
20084014:	00001206 	br	20084060 <fatIsValidDir+0x84>
        if (pDir->Name[0] == szTest[i]){
20084018:	e0bfff17 	ldw	r2,-4(fp)
2008401c:	11000003 	ldbu	r4,0(r2)
20084020:	e0fffa04 	addi	r3,fp,-24
20084024:	e0bff917 	ldw	r2,-28(fp)
20084028:	1885883a 	add	r2,r3,r2
2008402c:	10800003 	ldbu	r2,0(r2)
20084030:	20c03fcc 	andi	r3,r4,255
20084034:	18c0201c 	xori	r3,r3,128
20084038:	18ffe004 	addi	r3,r3,-128
2008403c:	10803fcc 	andi	r2,r2,255
20084040:	1080201c 	xori	r2,r2,128
20084044:	10bfe004 	addi	r2,r2,-128
20084048:	1880021e 	bne	r3,r2,20084054 <fatIsValidDir+0x78>
            return FALSE;
2008404c:	0005883a 	mov	r2,zero
20084050:	00000706 	br	20084070 <fatIsValidDir+0x94>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20084054:	e0bff917 	ldw	r2,-28(fp)
20084058:	10800044 	addi	r2,r2,1
2008405c:	e0bff915 	stw	r2,-28(fp)
20084060:	e0bff917 	ldw	r2,-28(fp)
20084064:	10800470 	cmpltui	r2,r2,17
20084068:	103feb1e 	bne	r2,zero,20084018 <__flash_rwdata_start+0xfffe522c>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
2008406c:	00800044 	movi	r2,1
    
}
20084070:	e037883a 	mov	sp,fp
20084074:	dfc00117 	ldw	ra,4(sp)
20084078:	df000017 	ldw	fp,0(sp)
2008407c:	dec00204 	addi	sp,sp,8
20084080:	f800283a 	ret

20084084 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
20084084:	defffe04 	addi	sp,sp,-8
20084088:	df000115 	stw	fp,4(sp)
2008408c:	df000104 	addi	fp,sp,4
20084090:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
20084094:	e0bfff17 	ldw	r2,-4(fp)
20084098:	10800003 	ldbu	r2,0(r2)
2008409c:	10803fcc 	andi	r2,r2,255
200840a0:	1080201c 	xori	r2,r2,128
200840a4:	10bfe004 	addi	r2,r2,-128
200840a8:	10bff958 	cmpnei	r2,r2,-27
200840ac:	1000021e 	bne	r2,zero,200840b8 <fatIsUnusedDir+0x34>
        return TRUE;
200840b0:	00800044 	movi	r2,1
200840b4:	00000106 	br	200840bc <fatIsUnusedDir+0x38>
    return FALSE; 
200840b8:	0005883a 	mov	r2,zero
}
200840bc:	e037883a 	mov	sp,fp
200840c0:	df000017 	ldw	fp,0(sp)
200840c4:	dec00104 	addi	sp,sp,4
200840c8:	f800283a 	ret

200840cc <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
200840cc:	defff804 	addi	sp,sp,-32
200840d0:	dfc00715 	stw	ra,28(sp)
200840d4:	df000615 	stw	fp,24(sp)
200840d8:	df000604 	addi	fp,sp,24
200840dc:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200840e0:	00800034 	movhi	r2,0
200840e4:	1080af04 	addi	r2,r2,700
200840e8:	e0fffb04 	addi	r3,fp,-20
200840ec:	100b883a 	mov	r5,r2
200840f0:	008003c4 	movi	r2,15
200840f4:	1809883a 	mov	r4,r3
200840f8:	100d883a 	mov	r6,r2
200840fc:	008bf180 	call	2008bf18 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
20084100:	e0bfff17 	ldw	r2,-4(fp)
20084104:	10800003 	ldbu	r2,0(r2)
20084108:	10803fcc 	andi	r2,r2,255
2008410c:	1080201c 	xori	r2,r2,128
20084110:	10bfe004 	addi	r2,r2,-128
20084114:	10bff958 	cmpnei	r2,r2,-27
20084118:	1000011e 	bne	r2,zero,20084120 <fatDump+0x54>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
2008411c:	00004c06 	br	20084250 <fatDump+0x184>
    }
    if (pDir->Name[0] == 0x00){
20084120:	e0bfff17 	ldw	r2,-4(fp)
20084124:	10800003 	ldbu	r2,0(r2)
20084128:	10803fcc 	andi	r2,r2,255
2008412c:	1080201c 	xori	r2,r2,128
20084130:	10bfe004 	addi	r2,r2,-128
20084134:	1000011e 	bne	r2,zero,2008413c <fatDump+0x70>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
20084138:	00004506 	br	20084250 <fatDump+0x184>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
2008413c:	e0bfff17 	ldw	r2,-4(fp)
20084140:	10800003 	ldbu	r2,0(r2)
20084144:	10803fcc 	andi	r2,r2,255
20084148:	1080201c 	xori	r2,r2,128
2008414c:	10bfe004 	addi	r2,r2,-128
20084150:	10800848 	cmpgei	r2,r2,33
20084154:	1000081e 	bne	r2,zero,20084178 <fatDump+0xac>
20084158:	e0bfff17 	ldw	r2,-4(fp)
2008415c:	10800003 	ldbu	r2,0(r2)
20084160:	10803fcc 	andi	r2,r2,255
20084164:	1080201c 	xori	r2,r2,128
20084168:	10bfe004 	addi	r2,r2,-128
2008416c:	10800160 	cmpeqi	r2,r2,5
20084170:	1000011e 	bne	r2,zero,20084178 <fatDump+0xac>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
20084174:	00003606 	br	20084250 <fatDump+0x184>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
20084178:	e03ffa15 	stw	zero,-24(fp)
2008417c:	00001106 	br	200841c4 <fatDump+0xf8>
        if (pDir->Name[0] == szInvalidName[i]){
20084180:	e0bfff17 	ldw	r2,-4(fp)
20084184:	11000003 	ldbu	r4,0(r2)
20084188:	e0fffb04 	addi	r3,fp,-20
2008418c:	e0bffa17 	ldw	r2,-24(fp)
20084190:	1885883a 	add	r2,r3,r2
20084194:	10800003 	ldbu	r2,0(r2)
20084198:	20c03fcc 	andi	r3,r4,255
2008419c:	18c0201c 	xori	r3,r3,128
200841a0:	18ffe004 	addi	r3,r3,-128
200841a4:	10803fcc 	andi	r2,r2,255
200841a8:	1080201c 	xori	r2,r2,128
200841ac:	10bfe004 	addi	r2,r2,-128
200841b0:	1880011e 	bne	r3,r2,200841b8 <fatDump+0xec>
            FAT_DEBUG(("Invalid file name.\n"));
            return;
200841b4:	00002606 	br	20084250 <fatDump+0x184>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
200841b8:	e0bffa17 	ldw	r2,-24(fp)
200841bc:	10800044 	addi	r2,r2,1
200841c0:	e0bffa15 	stw	r2,-24(fp)
200841c4:	e0bffa17 	ldw	r2,-24(fp)
200841c8:	108003f0 	cmpltui	r2,r2,15
200841cc:	103fec1e 	bne	r2,zero,20084180 <__flash_rwdata_start+0xfffe5394>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
200841d0:	e0bfff17 	ldw	r2,-4(fp)
200841d4:	10c00383 	ldbu	r3,14(r2)
200841d8:	108003c3 	ldbu	r2,15(r2)
200841dc:	1004923a 	slli	r2,r2,8
200841e0:	10c4b03a 	or	r2,r2,r3
200841e4:	10bfffcc 	andi	r2,r2,65535
200841e8:	1009883a 	mov	r4,r2
200841ec:	0083f3c0 	call	20083f3c <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
200841f0:	e0bfff17 	ldw	r2,-4(fp)
200841f4:	10c00483 	ldbu	r3,18(r2)
200841f8:	108004c3 	ldbu	r2,19(r2)
200841fc:	1004923a 	slli	r2,r2,8
20084200:	10c4b03a 	or	r2,r2,r3
20084204:	10bfffcc 	andi	r2,r2,65535
20084208:	1009883a 	mov	r4,r2
2008420c:	0083ee00 	call	20083ee0 <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
20084210:	e0bfff17 	ldw	r2,-4(fp)
20084214:	10c00583 	ldbu	r3,22(r2)
20084218:	108005c3 	ldbu	r2,23(r2)
2008421c:	1004923a 	slli	r2,r2,8
20084220:	10c4b03a 	or	r2,r2,r3
20084224:	10bfffcc 	andi	r2,r2,65535
20084228:	1009883a 	mov	r4,r2
2008422c:	0083f3c0 	call	20083f3c <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
20084230:	e0bfff17 	ldw	r2,-4(fp)
20084234:	10c00603 	ldbu	r3,24(r2)
20084238:	10800643 	ldbu	r2,25(r2)
2008423c:	1004923a 	slli	r2,r2,8
20084240:	10c4b03a 	or	r2,r2,r3
20084244:	10bfffcc 	andi	r2,r2,65535
20084248:	1009883a 	mov	r4,r2
2008424c:	0083ee00 	call	20083ee0 <fatDumpDate>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
20084250:	e037883a 	mov	sp,fp
20084254:	dfc00117 	ldw	ra,4(sp)
20084258:	df000017 	ldw	fp,0(sp)
2008425c:	dec00204 	addi	sp,sp,8
20084260:	f800283a 	ret

20084264 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
20084264:	defffa04 	addi	sp,sp,-24
20084268:	df000515 	stw	fp,20(sp)
2008426c:	df000504 	addi	fp,sp,20
20084270:	e13ffe15 	stw	r4,-8(fp)
20084274:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
20084278:	e0bfff17 	ldw	r2,-4(fp)
2008427c:	10bfffc4 	addi	r2,r2,-1
20084280:	e0fffe17 	ldw	r3,-8(fp)
20084284:	1885883a 	add	r2,r3,r2
20084288:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
2008428c:	e03ffd15 	stw	zero,-12(fp)
20084290:	00000e06 	br	200842cc <fatArray2Value+0x68>
        nValue <<= 8;
20084294:	e0bffc17 	ldw	r2,-16(fp)
20084298:	1004923a 	slli	r2,r2,8
2008429c:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
200842a0:	e0bffb17 	ldw	r2,-20(fp)
200842a4:	10ffffc4 	addi	r3,r2,-1
200842a8:	e0fffb15 	stw	r3,-20(fp)
200842ac:	10800003 	ldbu	r2,0(r2)
200842b0:	10803fcc 	andi	r2,r2,255
200842b4:	e0fffc17 	ldw	r3,-16(fp)
200842b8:	1884b03a 	or	r2,r3,r2
200842bc:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
200842c0:	e0bffd17 	ldw	r2,-12(fp)
200842c4:	10800044 	addi	r2,r2,1
200842c8:	e0bffd15 	stw	r2,-12(fp)
200842cc:	e0fffd17 	ldw	r3,-12(fp)
200842d0:	e0bfff17 	ldw	r2,-4(fp)
200842d4:	18bfef36 	bltu	r3,r2,20084294 <__flash_rwdata_start+0xfffe54a8>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
200842d8:	e0bffc17 	ldw	r2,-16(fp)
}
200842dc:	e037883a 	mov	sp,fp
200842e0:	df000017 	ldw	fp,0(sp)
200842e4:	dec00104 	addi	sp,sp,4
200842e8:	f800283a 	ret

200842ec <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
200842ec:	defffb04 	addi	sp,sp,-20
200842f0:	dfc00415 	stw	ra,16(sp)
200842f4:	df000315 	stw	fp,12(sp)
200842f8:	df000304 	addi	fp,sp,12
200842fc:	e13ffe15 	stw	r4,-8(fp)
20084300:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
20084304:	00800044 	movi	r2,1
20084308:	e0bffd15 	stw	r2,-12(fp)
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
2008430c:	e0bffe17 	ldw	r2,-8(fp)
20084310:	10c09117 	ldw	r3,580(r2)
20084314:	e0bfff17 	ldw	r2,-4(fp)
20084318:	18801226 	beq	r3,r2,20084364 <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
2008431c:	e0bffe17 	ldw	r2,-8(fp)
20084320:	10800117 	ldw	r2,4(r2)
20084324:	e0fffe17 	ldw	r3,-8(fp)
20084328:	19000017 	ldw	r4,0(r3)
2008432c:	e0fffe17 	ldw	r3,-8(fp)
20084330:	18c01104 	addi	r3,r3,68
20084334:	e17fff17 	ldw	r5,-4(fp)
20084338:	180d883a 	mov	r6,r3
2008433c:	103ee83a 	callr	r2
20084340:	1000051e 	bne	r2,zero,20084358 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
20084344:	e0bffe17 	ldw	r2,-8(fp)
20084348:	00ffffc4 	movi	r3,-1
2008434c:	10c09115 	stw	r3,580(r2)
            bSuccess = FALSE;
20084350:	e03ffd15 	stw	zero,-12(fp)
20084354:	00000306 	br	20084364 <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
20084358:	e0bffe17 	ldw	r2,-8(fp)
2008435c:	e0ffff17 	ldw	r3,-4(fp)
20084360:	10c09115 	stw	r3,580(r2)
//            pVol->ReadBlock512(pVol->DiskHandle, nSecter, temp);
//            if(memcmp(temp, pVol->Secter_Data, 512))
//            	printf("Data check failed!\n");
        }
    }
    return bSuccess;          
20084364:	e0bffd17 	ldw	r2,-12(fp)
}     
20084368:	e037883a 	mov	sp,fp
2008436c:	dfc00117 	ldw	ra,4(sp)
20084370:	df000017 	ldw	fp,0(sp)
20084374:	dec00204 	addi	sp,sp,8
20084378:	f800283a 	ret

2008437c <fatReadMultiSecter>:
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
2008437c:	defff904 	addi	sp,sp,-28
20084380:	dfc00615 	stw	ra,24(sp)
20084384:	df000515 	stw	fp,20(sp)
20084388:	df000504 	addi	fp,sp,20
2008438c:	e13ffc15 	stw	r4,-16(fp)
20084390:	e17ffd15 	stw	r5,-12(fp)
20084394:	e1bffe15 	stw	r6,-8(fp)
20084398:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess = TRUE;
2008439c:	00800044 	movi	r2,1
200843a0:	e0bffb15 	stw	r2,-20(fp)

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
200843a4:	e0bffc17 	ldw	r2,-16(fp)
200843a8:	10800317 	ldw	r2,12(r2)
200843ac:	e0fffc17 	ldw	r3,-16(fp)
200843b0:	18c00017 	ldw	r3,0(r3)
200843b4:	1809883a 	mov	r4,r3
200843b8:	e17ffd17 	ldw	r5,-12(fp)
200843bc:	e1bffe17 	ldw	r6,-8(fp)
200843c0:	e1ffff17 	ldw	r7,-4(fp)
200843c4:	103ee83a 	callr	r2
200843c8:	1000011e 	bne	r2,zero,200843d0 <fatReadMultiSecter+0x54>
		bSuccess = FALSE;
200843cc:	e03ffb15 	stw	zero,-20(fp)
	}
    return bSuccess;
200843d0:	e0bffb17 	ldw	r2,-20(fp)
}
200843d4:	e037883a 	mov	sp,fp
200843d8:	dfc00117 	ldw	ra,4(sp)
200843dc:	df000017 	ldw	fp,0(sp)
200843e0:	dec00204 	addi	sp,sp,8
200843e4:	f800283a 	ret

200843e8 <fatFindDirectory>:
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
200843e8:	defff804 	addi	sp,sp,-32
200843ec:	dfc00715 	stw	ra,28(sp)
200843f0:	df000615 	stw	fp,24(sp)
200843f4:	df000604 	addi	fp,sp,24
200843f8:	e13ffe15 	stw	r4,-8(fp)
200843fc:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
20084400:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20084404:	e0bfff17 	ldw	r2,-4(fp)
20084408:	1006917a 	slli	r3,r2,5
2008440c:	e0bffe17 	ldw	r2,-8(fp)
20084410:	10800717 	ldw	r2,28(r2)
20084414:	1809883a 	mov	r4,r3
20084418:	100b883a 	mov	r5,r2
2008441c:	0088bf00 	call	20088bf0 <__udivsi3>
20084420:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
20084424:	e0bffe17 	ldw	r2,-8(fp)
20084428:	10c00f17 	ldw	r3,60(r2)
2008442c:	e0bffb17 	ldw	r2,-20(fp)
20084430:	1885883a 	add	r2,r3,r2
20084434:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
20084438:	e13ffe17 	ldw	r4,-8(fp)
2008443c:	e17ffc17 	ldw	r5,-16(fp)
20084440:	00842ec0 	call	200842ec <fatReadSecter>
20084444:	10000d26 	beq	r2,zero,2008447c <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
20084448:	e0bfff17 	ldw	r2,-4(fp)
2008444c:	1006917a 	slli	r3,r2,5
20084450:	e0bffe17 	ldw	r2,-8(fp)
20084454:	10800717 	ldw	r2,28(r2)
20084458:	1809883a 	mov	r4,r3
2008445c:	100b883a 	mov	r5,r2
20084460:	0088bf80 	call	20088bf8 <__umodsi3>
20084464:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
20084468:	e0bffd17 	ldw	r2,-12(fp)
2008446c:	10801104 	addi	r2,r2,68
20084470:	e0fffe17 	ldw	r3,-8(fp)
20084474:	1885883a 	add	r2,r3,r2
20084478:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
2008447c:	e0bffa17 	ldw	r2,-24(fp)
}
20084480:	e037883a 	mov	sp,fp
20084484:	dfc00117 	ldw	ra,4(sp)
20084488:	df000017 	ldw	fp,0(sp)
2008448c:	dec00204 	addi	sp,sp,8
20084490:	f800283a 	ret

20084494 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
20084494:	defff604 	addi	sp,sp,-40
20084498:	dfc00915 	stw	ra,36(sp)
2008449c:	df000815 	stw	fp,32(sp)
200844a0:	df000804 	addi	fp,sp,32
200844a4:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
200844a8:	00bfffc4 	movi	r2,-1
200844ac:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
200844b0:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
200844b4:	00800084 	movi	r2,2
200844b8:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
200844bc:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
200844c0:	00003006 	br	20084584 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
200844c4:	e0bff917 	ldw	r2,-28(fp)
200844c8:	1006917a 	slli	r3,r2,5
200844cc:	e0bfff17 	ldw	r2,-4(fp)
200844d0:	10800717 	ldw	r2,28(r2)
200844d4:	1809883a 	mov	r4,r3
200844d8:	100b883a 	mov	r5,r2
200844dc:	0088bf00 	call	20088bf0 <__udivsi3>
200844e0:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
200844e4:	e0bfff17 	ldw	r2,-4(fp)
200844e8:	10c00f17 	ldw	r3,60(r2)
200844ec:	e0bffc17 	ldw	r2,-16(fp)
200844f0:	1885883a 	add	r2,r3,r2
200844f4:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
200844f8:	e13fff17 	ldw	r4,-4(fp)
200844fc:	e17ffd17 	ldw	r5,-12(fp)
20084500:	00842ec0 	call	200842ec <fatReadSecter>
20084504:	10001e26 	beq	r2,zero,20084580 <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
20084508:	e0bff917 	ldw	r2,-28(fp)
2008450c:	1006917a 	slli	r3,r2,5
20084510:	e0bfff17 	ldw	r2,-4(fp)
20084514:	10800717 	ldw	r2,28(r2)
20084518:	1809883a 	mov	r4,r3
2008451c:	100b883a 	mov	r5,r2
20084520:	0088bf80 	call	20088bf8 <__umodsi3>
20084524:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
20084528:	e0bffe17 	ldw	r2,-8(fp)
2008452c:	10801104 	addi	r2,r2,68
20084530:	e0ffff17 	ldw	r3,-4(fp)
20084534:	1885883a 	add	r2,r3,r2
20084538:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
2008453c:	e13ffb17 	ldw	r4,-20(fp)
20084540:	0083f980 	call	20083f98 <fatIsLastDir>
20084544:	1000031e 	bne	r2,zero,20084554 <fatFindUnusedDirectory+0xc0>
20084548:	e13ffb17 	ldw	r4,-20(fp)
2008454c:	00840840 	call	20084084 <fatIsUnusedDir>
20084550:	10000726 	beq	r2,zero,20084570 <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
20084554:	00800044 	movi	r2,1
20084558:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
2008455c:	e13ffb17 	ldw	r4,-20(fp)
20084560:	00840840 	call	20084084 <fatIsUnusedDir>
20084564:	10000226 	beq	r2,zero,20084570 <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
20084568:	e0bff917 	ldw	r2,-28(fp)
2008456c:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
20084570:	e0bff917 	ldw	r2,-28(fp)
20084574:	10800044 	addi	r2,r2,1
20084578:	e0bff915 	stw	r2,-28(fp)
2008457c:	00000106 	br	20084584 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
20084580:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
20084584:	e0bffa17 	ldw	r2,-24(fp)
20084588:	103fce26 	beq	r2,zero,200844c4 <__flash_rwdata_start+0xfffe56d8>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
2008458c:	e0bff817 	ldw	r2,-32(fp)
}
20084590:	e037883a 	mov	sp,fp
20084594:	dfc00117 	ldw	ra,4(sp)
20084598:	df000017 	ldw	fp,0(sp)
2008459c:	dec00204 	addi	sp,sp,8
200845a0:	f800283a 	ret

200845a4 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
200845a4:	defff604 	addi	sp,sp,-40
200845a8:	dfc00915 	stw	ra,36(sp)
200845ac:	df000815 	stw	fp,32(sp)
200845b0:	dc000715 	stw	r16,28(sp)
200845b4:	df000804 	addi	fp,sp,32
200845b8:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
200845bc:	00800044 	movi	r2,1
200845c0:	e0bff815 	stw	r2,-32(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
200845c4:	e0bffe17 	ldw	r2,-8(fp)
200845c8:	10800117 	ldw	r2,4(r2)
200845cc:	e0fffe17 	ldw	r3,-8(fp)
200845d0:	18c00017 	ldw	r3,0(r3)
200845d4:	1809883a 	mov	r4,r3
200845d8:	000b883a 	mov	r5,zero
200845dc:	01800034 	movhi	r6,0
200845e0:	318b7104 	addi	r6,r6,11716
200845e4:	103ee83a 	callr	r2
200845e8:	1000021e 	bne	r2,zero,200845f4 <fatMount+0x50>
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
200845ec:	0005883a 	mov	r2,zero
200845f0:	0000bc06 	br	200848e4 <fatMount+0x340>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
200845f4:	00806f84 	movi	r2,446
200845f8:	e0bff915 	stw	r2,-28(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
200845fc:	00800034 	movhi	r2,0
20084600:	108b7104 	addi	r2,r2,11716
20084604:	10807083 	ldbu	r2,450(r2)
20084608:	10803fcc 	andi	r2,r2,255
2008460c:	e0bffa15 	stw	r2,-24(fp)
    if (PartitionType == PARTITION_FAT16){
20084610:	e0bffa17 	ldw	r2,-24(fp)
20084614:	108001a0 	cmpeqi	r2,r2,6
20084618:	1000051e 	bne	r2,zero,20084630 <fatMount+0x8c>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
2008461c:	e0bffa17 	ldw	r2,-24(fp)
20084620:	108002e0 	cmpeqi	r2,r2,11
20084624:	1000021e 	bne	r2,zero,20084630 <fatMount+0x8c>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
20084628:	0005883a 	mov	r2,zero
2008462c:	0000ad06 	br	200848e4 <fatMount+0x340>
    }       
    pVol->Partition_Type = PartitionType; 
20084630:	e0fffa17 	ldw	r3,-24(fp)
20084634:	e0bffe17 	ldw	r2,-8(fp)
20084638:	10c00415 	stw	r3,16(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
2008463c:	e0bff917 	ldw	r2,-28(fp)
20084640:	10c00204 	addi	r3,r2,8
20084644:	00800034 	movhi	r2,0
20084648:	108b7104 	addi	r2,r2,11716
2008464c:	1885883a 	add	r2,r3,r2
20084650:	1009883a 	mov	r4,r2
20084654:	01400104 	movi	r5,4
20084658:	00842640 	call	20084264 <fatArray2Value>
2008465c:	e0bffb15 	stw	r2,-20(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20084660:	e0bffe17 	ldw	r2,-8(fp)
20084664:	10800117 	ldw	r2,4(r2)
20084668:	e0fffe17 	ldw	r3,-8(fp)
2008466c:	19000017 	ldw	r4,0(r3)
20084670:	e0fffb17 	ldw	r3,-20(fp)
20084674:	180b883a 	mov	r5,r3
20084678:	01800034 	movhi	r6,0
2008467c:	318b7104 	addi	r6,r6,11716
20084680:	103ee83a 	callr	r2
20084684:	1000021e 	bne	r2,zero,20084690 <fatMount+0xec>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
20084688:	0005883a 	mov	r2,zero
2008468c:	00009506 	br	200848e4 <fatMount+0x340>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
20084690:	e0fffb17 	ldw	r3,-20(fp)
20084694:	e0bffe17 	ldw	r2,-8(fp)
20084698:	10c00615 	stw	r3,24(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
2008469c:	00800034 	movhi	r2,0
200846a0:	108b7104 	addi	r2,r2,11716
200846a4:	10800303 	ldbu	r2,12(r2)
200846a8:	10803fcc 	andi	r2,r2,255
200846ac:	1006923a 	slli	r3,r2,8
200846b0:	00800034 	movhi	r2,0
200846b4:	108b7104 	addi	r2,r2,11716
200846b8:	108002c3 	ldbu	r2,11(r2)
200846bc:	10803fcc 	andi	r2,r2,255
200846c0:	1885883a 	add	r2,r3,r2
200846c4:	1007883a 	mov	r3,r2
200846c8:	e0bffe17 	ldw	r2,-8(fp)
200846cc:	10c00715 	stw	r3,28(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
200846d0:	00800034 	movhi	r2,0
200846d4:	108b7104 	addi	r2,r2,11716
200846d8:	10800343 	ldbu	r2,13(r2)
200846dc:	10c03fcc 	andi	r3,r2,255
200846e0:	e0bffe17 	ldw	r2,-8(fp)
200846e4:	10c00815 	stw	r3,32(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
200846e8:	00800034 	movhi	r2,0
200846ec:	108b7104 	addi	r2,r2,11716
200846f0:	108003c3 	ldbu	r2,15(r2)
200846f4:	10803fcc 	andi	r2,r2,255
200846f8:	1006923a 	slli	r3,r2,8
200846fc:	00800034 	movhi	r2,0
20084700:	108b7104 	addi	r2,r2,11716
20084704:	10800383 	ldbu	r2,14(r2)
20084708:	10803fcc 	andi	r2,r2,255
2008470c:	1885883a 	add	r2,r3,r2
20084710:	1007883a 	mov	r3,r2
20084714:	e0bffe17 	ldw	r2,-8(fp)
20084718:	10c00915 	stw	r3,36(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
2008471c:	00800034 	movhi	r2,0
20084720:	108b7104 	addi	r2,r2,11716
20084724:	10800403 	ldbu	r2,16(r2)
20084728:	10c03fcc 	andi	r3,r2,255
2008472c:	e0bffe17 	ldw	r2,-8(fp)
20084730:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20084734:	00800034 	movhi	r2,0
20084738:	108b7104 	addi	r2,r2,11716
2008473c:	10800483 	ldbu	r2,18(r2)
20084740:	10803fcc 	andi	r2,r2,255
20084744:	1006923a 	slli	r3,r2,8
20084748:	00800034 	movhi	r2,0
2008474c:	108b7104 	addi	r2,r2,11716
20084750:	10800443 	ldbu	r2,17(r2)
20084754:	10803fcc 	andi	r2,r2,255
20084758:	1885883a 	add	r2,r3,r2
2008475c:	1007883a 	mov	r3,r2
20084760:	e0bffe17 	ldw	r2,-8(fp)
20084764:	10c00b15 	stw	r3,44(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20084768:	00800034 	movhi	r2,0
2008476c:	108b7104 	addi	r2,r2,11716
20084770:	108005c3 	ldbu	r2,23(r2)
20084774:	10803fcc 	andi	r2,r2,255
20084778:	1006923a 	slli	r3,r2,8
2008477c:	00800034 	movhi	r2,0
20084780:	108b7104 	addi	r2,r2,11716
20084784:	10800583 	ldbu	r2,22(r2)
20084788:	10803fcc 	andi	r2,r2,255
2008478c:	1885883a 	add	r2,r3,r2
20084790:	1007883a 	mov	r3,r2
20084794:	e0bffe17 	ldw	r2,-8(fp)
20084798:	10c00c15 	stw	r3,48(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
2008479c:	e0bffe17 	ldw	r2,-8(fp)
200847a0:	00ffffc4 	movi	r3,-1
200847a4:	10c09115 	stw	r3,580(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
200847a8:	e0bffe17 	ldw	r2,-8(fp)
200847ac:	10801104 	addi	r2,r2,68
200847b0:	1009883a 	mov	r4,r2
200847b4:	000b883a 	mov	r5,zero
200847b8:	01808004 	movi	r6,512
200847bc:	008c0500 	call	2008c050 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
200847c0:	e0bffe17 	ldw	r2,-8(fp)
200847c4:	10800417 	ldw	r2,16(r2)
200847c8:	108002d8 	cmpnei	r2,r2,11
200847cc:	1000071e 	bne	r2,zero,200847ec <fatMount+0x248>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
200847d0:	01000034 	movhi	r4,0
200847d4:	210b7a04 	addi	r4,r4,11752
200847d8:	01400104 	movi	r5,4
200847dc:	00842640 	call	20084264 <fatArray2Value>
200847e0:	1007883a 	mov	r3,r2
200847e4:	e0bffe17 	ldw	r2,-8(fp)
200847e8:	10c00c15 	stw	r3,48(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
200847ec:	e0bffe17 	ldw	r2,-8(fp)
200847f0:	10800717 	ldw	r2,28(r2)
200847f4:	10808020 	cmpeqi	r2,r2,512
200847f8:	1000021e 	bne	r2,zero,20084804 <fatMount+0x260>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
200847fc:	0005883a 	mov	r2,zero
20084800:	00003806 	br	200848e4 <fatMount+0x340>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
20084804:	e0bffe17 	ldw	r2,-8(fp)
20084808:	10c00617 	ldw	r3,24(r2)
2008480c:	e0bffe17 	ldw	r2,-8(fp)
20084810:	10800917 	ldw	r2,36(r2)
20084814:	1887883a 	add	r3,r3,r2
20084818:	e0bffe17 	ldw	r2,-8(fp)
2008481c:	10c00e15 	stw	r3,56(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20084820:	e0bffe17 	ldw	r2,-8(fp)
20084824:	10c00e17 	ldw	r3,56(r2)
20084828:	e0bffe17 	ldw	r2,-8(fp)
2008482c:	11000a17 	ldw	r4,40(r2)
20084830:	e0bffe17 	ldw	r2,-8(fp)
20084834:	10800c17 	ldw	r2,48(r2)
20084838:	2085383a 	mul	r2,r4,r2
2008483c:	1887883a 	add	r3,r3,r2
20084840:	e0bffe17 	ldw	r2,-8(fp)
20084844:	10c00f15 	stw	r3,60(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20084848:	e0bffe17 	ldw	r2,-8(fp)
2008484c:	14000f17 	ldw	r16,60(r2)
20084850:	e0bffe17 	ldw	r2,-8(fp)
20084854:	10800b17 	ldw	r2,44(r2)
20084858:	1006917a 	slli	r3,r2,5
2008485c:	e0bffe17 	ldw	r2,-8(fp)
20084860:	10800717 	ldw	r2,28(r2)
20084864:	1885883a 	add	r2,r3,r2
20084868:	10ffffc4 	addi	r3,r2,-1
2008486c:	e0bffe17 	ldw	r2,-8(fp)
20084870:	10800717 	ldw	r2,28(r2)
20084874:	1809883a 	mov	r4,r3
20084878:	100b883a 	mov	r5,r2
2008487c:	0088bf00 	call	20088bf0 <__udivsi3>
20084880:	8087883a 	add	r3,r16,r2
20084884:	e0bffe17 	ldw	r2,-8(fp)
20084888:	10c01015 	stw	r3,64(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
2008488c:	e0bffe17 	ldw	r2,-8(fp)
20084890:	10c00717 	ldw	r3,28(r2)
20084894:	e0bffe17 	ldw	r2,-8(fp)
20084898:	10800817 	ldw	r2,32(r2)
2008489c:	1887383a 	mul	r3,r3,r2
200848a0:	e0bffe17 	ldw	r2,-8(fp)
200848a4:	10c00d15 	stw	r3,52(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
200848a8:	e0bffe17 	ldw	r2,-8(fp)
200848ac:	10c00a17 	ldw	r3,40(r2)
200848b0:	e0bffe17 	ldw	r2,-8(fp)
200848b4:	10800c17 	ldw	r2,48(r2)
200848b8:	1885383a 	mul	r2,r3,r2
200848bc:	e0bffc15 	stw	r2,-16(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
200848c0:	e0bffe17 	ldw	r2,-8(fp)
200848c4:	10c00717 	ldw	r3,28(r2)
200848c8:	e0bffc17 	ldw	r2,-16(fp)
200848cc:	1885383a 	mul	r2,r3,r2
200848d0:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
200848d4:	e0bffe17 	ldw	r2,-8(fp)
200848d8:	e0fff817 	ldw	r3,-32(fp)
200848dc:	10c00515 	stw	r3,20(r2)
    return bSuccess;   
200848e0:	e0bff817 	ldw	r2,-32(fp)
    

}
200848e4:	e6ffff04 	addi	sp,fp,-4
200848e8:	dfc00217 	ldw	ra,8(sp)
200848ec:	df000117 	ldw	fp,4(sp)
200848f0:	dc000017 	ldw	r16,0(sp)
200848f4:	dec00304 	addi	sp,sp,12
200848f8:	f800283a 	ret

200848fc <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
200848fc:	defffb04 	addi	sp,sp,-20
20084900:	dfc00415 	stw	ra,16(sp)
20084904:	df000315 	stw	fp,12(sp)
20084908:	df000304 	addi	fp,sp,12
2008490c:	e13ffd15 	stw	r4,-12(fp)
20084910:	e17ffe15 	stw	r5,-8(fp)
20084914:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20084918:	e13ffe17 	ldw	r4,-8(fp)
2008491c:	e17fff17 	ldw	r5,-4(fp)
20084920:	008734c0 	call	2008734c <SDLIB_ReadBlock512>
}
20084924:	e037883a 	mov	sp,fp
20084928:	dfc00117 	ldw	ra,4(sp)
2008492c:	df000017 	ldw	fp,0(sp)
20084930:	dec00204 	addi	sp,sp,8
20084934:	f800283a 	ret

20084938 <SD_ReadBlocks>:

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
20084938:	defffa04 	addi	sp,sp,-24
2008493c:	dfc00515 	stw	ra,20(sp)
20084940:	df000415 	stw	fp,16(sp)
20084944:	df000404 	addi	fp,sp,16
20084948:	e13ffc15 	stw	r4,-16(fp)
2008494c:	e17ffd15 	stw	r5,-12(fp)
20084950:	e1bffe15 	stw	r6,-8(fp)
20084954:	e1ffff15 	stw	r7,-4(fp)
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
20084958:	e13ffd17 	ldw	r4,-12(fp)
2008495c:	e17ffe17 	ldw	r5,-8(fp)
20084960:	e1bfff17 	ldw	r6,-4(fp)
20084964:	00873a00 	call	200873a0 <SDLIB_ReadBlocks>
}
20084968:	e037883a 	mov	sp,fp
2008496c:	dfc00117 	ldw	ra,4(sp)
20084970:	df000017 	ldw	fp,0(sp)
20084974:	dec00204 	addi	sp,sp,8
20084978:	f800283a 	ret

2008497c <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
2008497c:	defff804 	addi	sp,sp,-32
20084980:	dfc00715 	stw	ra,28(sp)
20084984:	df000615 	stw	fp,24(sp)
20084988:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
2008498c:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
20084990:	00800284 	movi	r2,10
20084994:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
20084998:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
2008499c:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
200849a0:	00800044 	movi	r2,1
200849a4:	e0bffe15 	stw	r2,-8(fp)
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
200849a8:	00000706 	br	200849c8 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
200849ac:	00872b40 	call	200872b4 <SDLIB_Init>
200849b0:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
200849b4:	e0bffb17 	ldw	r2,-20(fp)
200849b8:	1000031e 	bne	r2,zero,200849c8 <fatMountSdcard+0x4c>
            usleep(100*1000);
200849bc:	010000b4 	movhi	r4,2
200849c0:	2121a804 	addi	r4,r4,-31072
200849c4:	009a2ec0 	call	2009a2ec <usleep>
    bool bFind = FALSE;
    int nTry=0;
    bool bSuccess = TRUE;
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
200849c8:	e0bffb17 	ldw	r2,-20(fp)
200849cc:	1000051e 	bne	r2,zero,200849e4 <fatMountSdcard+0x68>
200849d0:	e0bffc17 	ldw	r2,-16(fp)
200849d4:	10c00044 	addi	r3,r2,1
200849d8:	e0fffc15 	stw	r3,-16(fp)
200849dc:	e0fffd17 	ldw	r3,-12(fp)
200849e0:	10fff216 	blt	r2,r3,200849ac <__flash_rwdata_start+0xfffe5bc0>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
200849e4:	e0bffb17 	ldw	r2,-20(fp)
200849e8:	1000021e 	bne	r2,zero,200849f4 <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
200849ec:	e0bffa17 	ldw	r2,-24(fp)
200849f0:	00001806 	br	20084a54 <fatMountSdcard+0xd8>
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
200849f4:	00800034 	movhi	r2,0
200849f8:	108c0b04 	addi	r2,r2,12332
200849fc:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
20084a00:	e0bffa17 	ldw	r2,-24(fp)
20084a04:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
20084a08:	e0ffff17 	ldw	r3,-4(fp)
20084a0c:	00880234 	movhi	r2,8200
20084a10:	10923f04 	addi	r2,r2,18684
20084a14:	18800115 	stw	r2,4(r3)
    pVol->ReadBlocks = SD_ReadBlocks;
20084a18:	e0ffff17 	ldw	r3,-4(fp)
20084a1c:	00880234 	movhi	r2,8200
20084a20:	10924e04 	addi	r2,r2,18744
20084a24:	18800315 	stw	r2,12(r3)
    bSuccess = fatMount(pVol);
20084a28:	e13fff17 	ldw	r4,-4(fp)
20084a2c:	00845a40 	call	200845a4 <fatMount>
20084a30:	e0bffe15 	stw	r2,-8(fp)
  
    if (bSuccess){
20084a34:	e0bffe17 	ldw	r2,-8(fp)
20084a38:	10000426 	beq	r2,zero,20084a4c <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
20084a3c:	e0bfff17 	ldw	r2,-4(fp)
20084a40:	00c00044 	movi	r3,1
20084a44:	10c00515 	stw	r3,20(r2)
20084a48:	00000106 	br	20084a50 <fatMountSdcard+0xd4>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        //free((void *)hFat);
        hFat = 0;
20084a4c:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
20084a50:	e0bffa17 	ldw	r2,-24(fp)
}
20084a54:	e037883a 	mov	sp,fp
20084a58:	dfc00117 	ldw	ra,4(sp)
20084a5c:	df000017 	ldw	fp,0(sp)
20084a60:	dec00204 	addi	sp,sp,8
20084a64:	f800283a 	ret

20084a68 <debug_output>:
#include <stdarg.h> 
#include "hw_sd.h"
#include "debug.h"


void debug_output(char *pMessage){
20084a68:	defffd04 	addi	sp,sp,-12
20084a6c:	dfc00215 	stw	ra,8(sp)
20084a70:	df000115 	stw	fp,4(sp)
20084a74:	df000104 	addi	fp,sp,4
20084a78:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
20084a7c:	e13fff17 	ldw	r4,-4(fp)
20084a80:	008c1a00 	call	2008c1a0 <printf>
}
20084a84:	e037883a 	mov	sp,fp
20084a88:	dfc00117 	ldw	ra,4(sp)
20084a8c:	df000017 	ldw	fp,0(sp)
20084a90:	dec00204 	addi	sp,sp,8
20084a94:	f800283a 	ret

20084a98 <myprintf>:

int myprintf(char *format, ...){
20084a98:	deff7804 	addi	sp,sp,-544
20084a9c:	dfc08415 	stw	ra,528(sp)
20084aa0:	df008315 	stw	fp,524(sp)
20084aa4:	df008304 	addi	fp,sp,524
20084aa8:	e1400215 	stw	r5,8(fp)
20084aac:	e1800315 	stw	r6,12(fp)
20084ab0:	e1c00415 	stw	r7,16(fp)
20084ab4:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
20084ab8:	e0800204 	addi	r2,fp,8
20084abc:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
20084ac0:	e0bffe17 	ldw	r2,-8(fp)
20084ac4:	e0ff7e04 	addi	r3,fp,-520
20084ac8:	1809883a 	mov	r4,r3
20084acc:	01408004 	movi	r5,512
20084ad0:	e1bfff17 	ldw	r6,-4(fp)
20084ad4:	100f883a 	mov	r7,r2
20084ad8:	00906240 	call	20090624 <vsnprintf>
20084adc:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
20084ae0:	e0bf7e04 	addi	r2,fp,-520
20084ae4:	1009883a 	mov	r4,r2
20084ae8:	0084a680 	call	20084a68 <debug_output>

    return rc;    
20084aec:	e0bf7d17 	ldw	r2,-524(fp)
}
20084af0:	e037883a 	mov	sp,fp
20084af4:	dfc00117 	ldw	ra,4(sp)
20084af8:	df000017 	ldw	fp,0(sp)
20084afc:	dec00504 	addi	sp,sp,20
20084b00:	f800283a 	ret

20084b04 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
20084b04:	defff704 	addi	sp,sp,-36
20084b08:	dfc00815 	stw	ra,32(sp)
20084b0c:	df000715 	stw	fp,28(sp)
20084b10:	df000704 	addi	fp,sp,28
20084b14:	e13ffe15 	stw	r4,-8(fp)
20084b18:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20084b1c:	e03ff915 	stw	zero,-28(fp)
20084b20:	00001106 	br	20084b68 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
20084b24:	e0bff917 	ldw	r2,-28(fp)
20084b28:	e0fffe17 	ldw	r3,-8(fp)
20084b2c:	1885883a 	add	r2,r3,r2
20084b30:	10800003 	ldbu	r2,0(r2)
20084b34:	10803fcc 	andi	r2,r2,255
20084b38:	e0fffa04 	addi	r3,fp,-24
20084b3c:	1809883a 	mov	r4,r3
20084b40:	01400034 	movhi	r5,0
20084b44:	2940b304 	addi	r5,r5,716
20084b48:	100d883a 	mov	r6,r2
20084b4c:	008c3640 	call	2008c364 <sprintf>
        DEBUG((szText));
20084b50:	e0bffa04 	addi	r2,fp,-24
20084b54:	1009883a 	mov	r4,r2
20084b58:	0084a980 	call	20084a98 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20084b5c:	e0bff917 	ldw	r2,-28(fp)
20084b60:	10800044 	addi	r2,r2,1
20084b64:	e0bff915 	stw	r2,-28(fp)
20084b68:	e0fff917 	ldw	r3,-28(fp)
20084b6c:	e0bfff17 	ldw	r2,-4(fp)
20084b70:	18bfec16 	blt	r3,r2,20084b24 <__flash_rwdata_start+0xfffe5d38>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
20084b74:	e0bfff17 	ldw	r2,-4(fp)
}
20084b78:	e037883a 	mov	sp,fp
20084b7c:	dfc00117 	ldw	ra,4(sp)
20084b80:	df000017 	ldw	fp,0(sp)
20084b84:	dec00204 	addi	sp,sp,8
20084b88:	f800283a 	ret

20084b8c <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
20084b8c:	defff704 	addi	sp,sp,-36
20084b90:	dfc00815 	stw	ra,32(sp)
20084b94:	df000715 	stw	fp,28(sp)
20084b98:	df000704 	addi	fp,sp,28
20084b9c:	e13ffe15 	stw	r4,-8(fp)
20084ba0:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20084ba4:	e03ff915 	stw	zero,-28(fp)
20084ba8:	00001306 	br	20084bf8 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
20084bac:	e0bff917 	ldw	r2,-28(fp)
20084bb0:	1085883a 	add	r2,r2,r2
20084bb4:	1085883a 	add	r2,r2,r2
20084bb8:	1007883a 	mov	r3,r2
20084bbc:	e0bffe17 	ldw	r2,-8(fp)
20084bc0:	10c5883a 	add	r2,r2,r3
20084bc4:	10800017 	ldw	r2,0(r2)
20084bc8:	e0fffa04 	addi	r3,fp,-24
20084bcc:	1809883a 	mov	r4,r3
20084bd0:	01400034 	movhi	r5,0
20084bd4:	2940b504 	addi	r5,r5,724
20084bd8:	100d883a 	mov	r6,r2
20084bdc:	008c3640 	call	2008c364 <sprintf>
        DEBUG((szText));
20084be0:	e0bffa04 	addi	r2,fp,-24
20084be4:	1009883a 	mov	r4,r2
20084be8:	0084a980 	call	20084a98 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20084bec:	e0bff917 	ldw	r2,-28(fp)
20084bf0:	10800044 	addi	r2,r2,1
20084bf4:	e0bff915 	stw	r2,-28(fp)
20084bf8:	e0fff917 	ldw	r3,-28(fp)
20084bfc:	e0bfff17 	ldw	r2,-4(fp)
20084c00:	18bfea16 	blt	r3,r2,20084bac <__flash_rwdata_start+0xfffe5dc0>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
20084c04:	e0bfff17 	ldw	r2,-4(fp)
}
20084c08:	e037883a 	mov	sp,fp
20084c0c:	dfc00117 	ldw	ra,4(sp)
20084c10:	df000017 	ldw	fp,0(sp)
20084c14:	dec00204 	addi	sp,sp,8
20084c18:	f800283a 	ret

20084c1c <udelay>:
#define MMC_PRINT(x)	DEBUG(x)
#else
#define MMC_PRINT(x)
#endif

void udelay(int t) {
20084c1c:	defffd04 	addi	sp,sp,-12
20084c20:	df000215 	stw	fp,8(sp)
20084c24:	df000204 	addi	fp,sp,8
20084c28:	e13fff15 	stw	r4,-4(fp)
#define US_DELAY 100
	volatile int us = US_DELAY;
20084c2c:	00801904 	movi	r2,100
20084c30:	e0bffe15 	stw	r2,-8(fp)
	while (t--) {
20084c34:	00000706 	br	20084c54 <udelay+0x38>
		us = US_DELAY;
20084c38:	00801904 	movi	r2,100
20084c3c:	e0bffe15 	stw	r2,-8(fp)
		while (us--)
20084c40:	0001883a 	nop
20084c44:	e0bffe17 	ldw	r2,-8(fp)
20084c48:	10ffffc4 	addi	r3,r2,-1
20084c4c:	e0fffe15 	stw	r3,-8(fp)
20084c50:	103ffc1e 	bne	r2,zero,20084c44 <__flash_rwdata_start+0xfffe5e58>
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084c54:	e0bfff17 	ldw	r2,-4(fp)
20084c58:	10ffffc4 	addi	r3,r2,-1
20084c5c:	e0ffff15 	stw	r3,-4(fp)
20084c60:	103ff51e 	bne	r2,zero,20084c38 <__flash_rwdata_start+0xfffe5e4c>
		us = US_DELAY;
		while (us--)
			;
	}
}
20084c64:	e037883a 	mov	sp,fp
20084c68:	df000017 	ldw	fp,0(sp)
20084c6c:	dec00104 	addi	sp,sp,4
20084c70:	f800283a 	ret

20084c74 <mmc_set_ios>:
 * to platforms without floating point.
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
20084c74:	defffd04 	addi	sp,sp,-12
20084c78:	dfc00215 	stw	ra,8(sp)
20084c7c:	df000115 	stw	fp,4(sp)
20084c80:	df000104 	addi	fp,sp,4
20084c84:	e13fff15 	stw	r4,-4(fp)
	mmc->set_ios(mmc);
20084c88:	e0bfff17 	ldw	r2,-4(fp)
20084c8c:	10802517 	ldw	r2,148(r2)
20084c90:	e13fff17 	ldw	r4,-4(fp)
20084c94:	103ee83a 	callr	r2
}
20084c98:	e037883a 	mov	sp,fp
20084c9c:	dfc00117 	ldw	ra,4(sp)
20084ca0:	df000017 	ldw	fp,0(sp)
20084ca4:	dec00204 	addi	sp,sp,8
20084ca8:	f800283a 	ret

20084cac <mmc_set_bus_width>:

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
20084cac:	defffc04 	addi	sp,sp,-16
20084cb0:	dfc00315 	stw	ra,12(sp)
20084cb4:	df000215 	stw	fp,8(sp)
20084cb8:	df000204 	addi	fp,sp,8
20084cbc:	e13ffe15 	stw	r4,-8(fp)
20084cc0:	e17fff15 	stw	r5,-4(fp)
	mmc->bus_width = width;
20084cc4:	e0bffe17 	ldw	r2,-8(fp)
20084cc8:	e0ffff17 	ldw	r3,-4(fp)
20084ccc:	10c00f15 	stw	r3,60(r2)

	mmc_set_ios(mmc);
20084cd0:	e13ffe17 	ldw	r4,-8(fp)
20084cd4:	0084c740 	call	20084c74 <mmc_set_ios>
}
20084cd8:	e037883a 	mov	sp,fp
20084cdc:	dfc00117 	ldw	ra,4(sp)
20084ce0:	df000017 	ldw	fp,0(sp)
20084ce4:	dec00204 	addi	sp,sp,8
20084ce8:	f800283a 	ret

20084cec <mmc_set_clock>:

static void mmc_set_clock(struct mmc *mmc, uint clock) {
20084cec:	defffc04 	addi	sp,sp,-16
20084cf0:	dfc00315 	stw	ra,12(sp)
20084cf4:	df000215 	stw	fp,8(sp)
20084cf8:	df000204 	addi	fp,sp,8
20084cfc:	e13ffe15 	stw	r4,-8(fp)
20084d00:	e17fff15 	stw	r5,-4(fp)
	if (clock > mmc->f_max)
20084d04:	e0bffe17 	ldw	r2,-8(fp)
20084d08:	10c00d17 	ldw	r3,52(r2)
20084d0c:	e0bfff17 	ldw	r2,-4(fp)
20084d10:	1880032e 	bgeu	r3,r2,20084d20 <mmc_set_clock+0x34>
		clock = mmc->f_max;
20084d14:	e0bffe17 	ldw	r2,-8(fp)
20084d18:	10800d17 	ldw	r2,52(r2)
20084d1c:	e0bfff15 	stw	r2,-4(fp)

	if (clock < mmc->f_min)
20084d20:	e0bffe17 	ldw	r2,-8(fp)
20084d24:	10800c17 	ldw	r2,48(r2)
20084d28:	e0ffff17 	ldw	r3,-4(fp)
20084d2c:	1880032e 	bgeu	r3,r2,20084d3c <mmc_set_clock+0x50>
		clock = mmc->f_min;
20084d30:	e0bffe17 	ldw	r2,-8(fp)
20084d34:	10800c17 	ldw	r2,48(r2)
20084d38:	e0bfff15 	stw	r2,-4(fp)

	mmc->clock = clock;
20084d3c:	e0bffe17 	ldw	r2,-8(fp)
20084d40:	e0ffff17 	ldw	r3,-4(fp)
20084d44:	10c01015 	stw	r3,64(r2)

	mmc_set_ios(mmc);
20084d48:	e13ffe17 	ldw	r4,-8(fp)
20084d4c:	0084c740 	call	20084c74 <mmc_set_ios>
}
20084d50:	e037883a 	mov	sp,fp
20084d54:	dfc00117 	ldw	ra,4(sp)
20084d58:	df000017 	ldw	fp,0(sp)
20084d5c:	dec00204 	addi	sp,sp,8
20084d60:	f800283a 	ret

20084d64 <mmc_send_cmd>:

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
20084d64:	defffa04 	addi	sp,sp,-24
20084d68:	dfc00515 	stw	ra,20(sp)
20084d6c:	df000415 	stw	fp,16(sp)
20084d70:	df000404 	addi	fp,sp,16
20084d74:	e13ffd15 	stw	r4,-12(fp)
20084d78:	e17ffe15 	stw	r5,-8(fp)
20084d7c:	e1bfff15 	stw	r6,-4(fp)
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d80:	e0bffd17 	ldw	r2,-12(fp)
20084d84:	10802417 	ldw	r2,144(r2)
20084d88:	e13ffd17 	ldw	r4,-12(fp)
20084d8c:	e17ffe17 	ldw	r5,-8(fp)
20084d90:	e1bfff17 	ldw	r6,-4(fp)
20084d94:	103ee83a 	callr	r2
20084d98:	e0bffc15 	stw	r2,-16(fp)

	return ret;
20084d9c:	e0bffc17 	ldw	r2,-16(fp)
}
20084da0:	e037883a 	mov	sp,fp
20084da4:	dfc00117 	ldw	ra,4(sp)
20084da8:	df000017 	ldw	fp,0(sp)
20084dac:	dec00204 	addi	sp,sp,8
20084db0:	f800283a 	ret

20084db4 <mmc_go_idle>:

static int mmc_go_idle(struct mmc* mmc) {
20084db4:	defff504 	addi	sp,sp,-44
20084db8:	dfc00a15 	stw	ra,40(sp)
20084dbc:	df000915 	stw	fp,36(sp)
20084dc0:	df000904 	addi	fp,sp,36
20084dc4:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);
20084dc8:	0100fa04 	movi	r4,1000
20084dcc:	0084c1c0 	call	20084c1c <udelay>

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
20084dd0:	e03ff80d 	sth	zero,-32(fp)
	cmd.cmdarg = 0;
20084dd4:	e03ffa15 	stw	zero,-24(fp)
	cmd.resp_type = MMC_RSP_NONE;
20084dd8:	e03ff915 	stw	zero,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20084ddc:	e0bff804 	addi	r2,fp,-32
20084de0:	e13fff17 	ldw	r4,-4(fp)
20084de4:	100b883a 	mov	r5,r2
20084de8:	000d883a 	mov	r6,zero
20084dec:	0084d640 	call	20084d64 <mmc_send_cmd>
20084df0:	e0bff715 	stw	r2,-36(fp)

	if (err)
20084df4:	e0bff717 	ldw	r2,-36(fp)
20084df8:	10000226 	beq	r2,zero,20084e04 <mmc_go_idle+0x50>
		return err;
20084dfc:	e0bff717 	ldw	r2,-36(fp)
20084e00:	00000306 	br	20084e10 <mmc_go_idle+0x5c>

	udelay(2000);
20084e04:	0101f404 	movi	r4,2000
20084e08:	0084c1c0 	call	20084c1c <udelay>

	return 0;
20084e0c:	0005883a 	mov	r2,zero
}
20084e10:	e037883a 	mov	sp,fp
20084e14:	dfc00117 	ldw	ra,4(sp)
20084e18:	df000017 	ldw	fp,0(sp)
20084e1c:	dec00204 	addi	sp,sp,8
20084e20:	f800283a 	ret

20084e24 <mmc_send_if_cond>:

static int mmc_send_if_cond(struct mmc *mmc) {
20084e24:	defff504 	addi	sp,sp,-44
20084e28:	dfc00a15 	stw	ra,40(sp)
20084e2c:	df000915 	stw	fp,36(sp)
20084e30:	df000904 	addi	fp,sp,36
20084e34:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084e38:	00800204 	movi	r2,8
20084e3c:	e0bff80d 	sth	r2,-32(fp)
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084e40:	e0bfff17 	ldw	r2,-4(fp)
20084e44:	10c00917 	ldw	r3,36(r2)
20084e48:	00804034 	movhi	r2,256
20084e4c:	10a00004 	addi	r2,r2,-32768
20084e50:	1884703a 	and	r2,r3,r2
20084e54:	10000226 	beq	r2,zero,20084e60 <mmc_send_if_cond+0x3c>
20084e58:	00806a84 	movi	r2,426
20084e5c:	00000106 	br	20084e64 <mmc_send_if_cond+0x40>
20084e60:	00802a84 	movi	r2,170
20084e64:	e0bffa15 	stw	r2,-24(fp)
	cmd.resp_type = MMC_RSP_R7;
20084e68:	00800544 	movi	r2,21
20084e6c:	e0bff915 	stw	r2,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20084e70:	e0bff804 	addi	r2,fp,-32
20084e74:	e13fff17 	ldw	r4,-4(fp)
20084e78:	100b883a 	mov	r5,r2
20084e7c:	000d883a 	mov	r6,zero
20084e80:	0084d640 	call	20084d64 <mmc_send_cmd>
20084e84:	e0bff715 	stw	r2,-36(fp)

	if (err)
20084e88:	e0bff717 	ldw	r2,-36(fp)
20084e8c:	10000226 	beq	r2,zero,20084e98 <mmc_send_if_cond+0x74>
		return err;
20084e90:	e0bff717 	ldw	r2,-36(fp)
20084e94:	00000b06 	br	20084ec4 <mmc_send_if_cond+0xa0>

	if ((cmd.response[0] & 0xff) != 0xaa)
20084e98:	e0bffb17 	ldw	r2,-20(fp)
20084e9c:	10803fcc 	andi	r2,r2,255
20084ea0:	10802aa0 	cmpeqi	r2,r2,170
20084ea4:	1000021e 	bne	r2,zero,20084eb0 <mmc_send_if_cond+0x8c>
		return UNUSABLE_ERR;
20084ea8:	00bffbc4 	movi	r2,-17
20084eac:	00000506 	br	20084ec4 <mmc_send_if_cond+0xa0>
	else
		mmc->version = SD_VERSION_2;
20084eb0:	e0ffff17 	ldw	r3,-4(fp)
20084eb4:	008000b4 	movhi	r2,2
20084eb8:	10800804 	addi	r2,r2,32
20084ebc:	18800a15 	stw	r2,40(r3)

	return 0;
20084ec0:	0005883a 	mov	r2,zero
}
20084ec4:	e037883a 	mov	sp,fp
20084ec8:	dfc00117 	ldw	ra,4(sp)
20084ecc:	df000017 	ldw	fp,0(sp)
20084ed0:	dec00204 	addi	sp,sp,8
20084ed4:	f800283a 	ret

20084ed8 <sd_send_op_cond>:

static int sd_send_op_cond(struct mmc *mmc) {
20084ed8:	defff404 	addi	sp,sp,-48
20084edc:	dfc00b15 	stw	ra,44(sp)
20084ee0:	df000a15 	stw	fp,40(sp)
20084ee4:	df000a04 	addi	fp,sp,40
20084ee8:	e13fff15 	stw	r4,-4(fp)
	int timeout = 1000;
20084eec:	0080fa04 	movi	r2,1000
20084ef0:	e0bff615 	stw	r2,-40(fp)
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
20084ef4:	00800dc4 	movi	r2,55
20084ef8:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R1;
20084efc:	00800544 	movi	r2,21
20084f00:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = 0;
20084f04:	e03ffa15 	stw	zero,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20084f08:	e0bff804 	addi	r2,fp,-32
20084f0c:	e13fff17 	ldw	r4,-4(fp)
20084f10:	100b883a 	mov	r5,r2
20084f14:	000d883a 	mov	r6,zero
20084f18:	0084d640 	call	20084d64 <mmc_send_cmd>
20084f1c:	e0bff715 	stw	r2,-36(fp)

		if (err)
20084f20:	e0bff717 	ldw	r2,-36(fp)
20084f24:	10000226 	beq	r2,zero,20084f30 <sd_send_op_cond+0x58>
			return err;
20084f28:	e0bff717 	ldw	r2,-36(fp)
20084f2c:	00003e06 	br	20085028 <sd_send_op_cond+0x150>

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
20084f30:	00800a44 	movi	r2,41
20084f34:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
20084f38:	00800044 	movi	r2,1
20084f3c:	e0bff915 	stw	r2,-28(fp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084f40:	e0bfff17 	ldw	r2,-4(fp)
20084f44:	10c00917 	ldw	r3,36(r2)
20084f48:	00804034 	movhi	r2,256
20084f4c:	10a00004 	addi	r2,r2,-32768
20084f50:	1884703a 	and	r2,r3,r2
20084f54:	e0bffa15 	stw	r2,-24(fp)

		if (mmc->version == SD_VERSION_2)
20084f58:	e0bfff17 	ldw	r2,-4(fp)
20084f5c:	10c00a17 	ldw	r3,40(r2)
20084f60:	008000b4 	movhi	r2,2
20084f64:	10800804 	addi	r2,r2,32
20084f68:	1880031e 	bne	r3,r2,20084f78 <sd_send_op_cond+0xa0>
			cmd.cmdarg |= OCR_HCS;
20084f6c:	e0bffa17 	ldw	r2,-24(fp)
20084f70:	10900034 	orhi	r2,r2,16384
20084f74:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20084f78:	e0bff804 	addi	r2,fp,-32
20084f7c:	e13fff17 	ldw	r4,-4(fp)
20084f80:	100b883a 	mov	r5,r2
20084f84:	000d883a 	mov	r6,zero
20084f88:	0084d640 	call	20084d64 <mmc_send_cmd>
20084f8c:	e0bff715 	stw	r2,-36(fp)

		if (err)
20084f90:	e0bff717 	ldw	r2,-36(fp)
20084f94:	10000226 	beq	r2,zero,20084fa0 <sd_send_op_cond+0xc8>
			return err;
20084f98:	e0bff717 	ldw	r2,-36(fp)
20084f9c:	00002206 	br	20085028 <sd_send_op_cond+0x150>

		udelay(1000);
20084fa0:	0100fa04 	movi	r4,1000
20084fa4:	0084c1c0 	call	20084c1c <udelay>
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
20084fa8:	e0bffb17 	ldw	r2,-20(fp)
20084fac:	10000416 	blt	r2,zero,20084fc0 <sd_send_op_cond+0xe8>
20084fb0:	e0bff617 	ldw	r2,-40(fp)
20084fb4:	10ffffc4 	addi	r3,r2,-1
20084fb8:	e0fff615 	stw	r3,-40(fp)
20084fbc:	103fcd1e 	bne	r2,zero,20084ef4 <__flash_rwdata_start+0xfffe6108>

	if (timeout <= 0)
20084fc0:	e0bff617 	ldw	r2,-40(fp)
20084fc4:	00800216 	blt	zero,r2,20084fd0 <sd_send_op_cond+0xf8>
		return UNUSABLE_ERR;
20084fc8:	00bffbc4 	movi	r2,-17
20084fcc:	00001606 	br	20085028 <sd_send_op_cond+0x150>

	if (mmc->version != SD_VERSION_2)
20084fd0:	e0bfff17 	ldw	r2,-4(fp)
20084fd4:	10c00a17 	ldw	r3,40(r2)
20084fd8:	008000b4 	movhi	r2,2
20084fdc:	10800804 	addi	r2,r2,32
20084fe0:	18800426 	beq	r3,r2,20084ff4 <sd_send_op_cond+0x11c>
		mmc->version = SD_VERSION_1_0;
20084fe4:	e0ffff17 	ldw	r3,-4(fp)
20084fe8:	008000b4 	movhi	r2,2
20084fec:	10800404 	addi	r2,r2,16
20084ff0:	18800a15 	stw	r2,40(r3)

	mmc->ocr = cmd.response[0];
20084ff4:	e0fffb17 	ldw	r3,-20(fp)
20084ff8:	e0bfff17 	ldw	r2,-4(fp)
20084ffc:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20085000:	e0bfff17 	ldw	r2,-4(fp)
20085004:	10801317 	ldw	r2,76(r2)
20085008:	1090002c 	andhi	r2,r2,16384
2008500c:	1004c03a 	cmpne	r2,r2,zero
20085010:	10c03fcc 	andi	r3,r2,255
20085014:	e0bfff17 	ldw	r2,-4(fp)
20085018:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
2008501c:	e0bfff17 	ldw	r2,-4(fp)
20085020:	10001e0d 	sth	zero,120(r2)

	return 0;
20085024:	0005883a 	mov	r2,zero
}
20085028:	e037883a 	mov	sp,fp
2008502c:	dfc00117 	ldw	ra,4(sp)
20085030:	df000017 	ldw	fp,0(sp)
20085034:	dec00204 	addi	sp,sp,8
20085038:	f800283a 	ret

2008503c <mmc_send_op_cond>:

static int mmc_send_op_cond(struct mmc *mmc) {
2008503c:	defff404 	addi	sp,sp,-48
20085040:	dfc00b15 	stw	ra,44(sp)
20085044:	df000a15 	stw	fp,40(sp)
20085048:	df000a04 	addi	fp,sp,40
2008504c:	e13fff15 	stw	r4,-4(fp)
	int timeout = 10000;
20085050:	0089c404 	movi	r2,10000
20085054:	e0bff615 	stw	r2,-40(fp)
	struct mmc_cmd cmd;
	int err;

	/* Some cards seem to need this */
	mmc_go_idle(mmc);
20085058:	e13fff17 	ldw	r4,-4(fp)
2008505c:	0084db40 	call	20084db4 <mmc_go_idle>

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20085060:	00800044 	movi	r2,1
20085064:	e0bff80d 	sth	r2,-32(fp)
	cmd.resp_type = MMC_RSP_R3;
20085068:	00800044 	movi	r2,1
2008506c:	e0bff915 	stw	r2,-28(fp)
	cmd.cmdarg = 0;
20085070:	e03ffa15 	stw	zero,-24(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085074:	e0bff804 	addi	r2,fp,-32
20085078:	e13fff17 	ldw	r4,-4(fp)
2008507c:	100b883a 	mov	r5,r2
20085080:	000d883a 	mov	r6,zero
20085084:	0084d640 	call	20084d64 <mmc_send_cmd>
20085088:	e0bff715 	stw	r2,-36(fp)

	if (err)
2008508c:	e0bff717 	ldw	r2,-36(fp)
20085090:	10000226 	beq	r2,zero,2008509c <mmc_send_op_cond+0x60>
		return err;
20085094:	e0bff717 	ldw	r2,-36(fp)
20085098:	00003e06 	br	20085194 <mmc_send_op_cond+0x158>

	udelay(1000);
2008509c:	0100fa04 	movi	r4,1000
200850a0:	0084c1c0 	call	20084c1c <udelay>

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
200850a4:	00800044 	movi	r2,1
200850a8:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
200850ac:	00800044 	movi	r2,1
200850b0:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
200850b4:	e0bfff17 	ldw	r2,-4(fp)
200850b8:	10c00917 	ldw	r3,36(r2)
200850bc:	e0bffb17 	ldw	r2,-20(fp)
200850c0:	1886703a 	and	r3,r3,r2
200850c4:	00802034 	movhi	r2,128
200850c8:	10bfe004 	addi	r2,r2,-128
200850cc:	1886703a 	and	r3,r3,r2
				| (cmd.response[0] & OCR_ACCESS_MODE);
200850d0:	e0bffb17 	ldw	r2,-20(fp)
200850d4:	1098002c 	andhi	r2,r2,24576
200850d8:	1884b03a 	or	r2,r3,r2
	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
200850dc:	e0bffa15 	stw	r2,-24(fp)
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
200850e0:	e0bfff17 	ldw	r2,-4(fp)
200850e4:	10801217 	ldw	r2,72(r2)
200850e8:	1082000c 	andi	r2,r2,2048
200850ec:	10000326 	beq	r2,zero,200850fc <mmc_send_op_cond+0xc0>
			cmd.cmdarg |= OCR_HCS;
200850f0:	e0bffa17 	ldw	r2,-24(fp)
200850f4:	10900034 	orhi	r2,r2,16384
200850f8:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
200850fc:	e0bff804 	addi	r2,fp,-32
20085100:	e13fff17 	ldw	r4,-4(fp)
20085104:	100b883a 	mov	r5,r2
20085108:	000d883a 	mov	r6,zero
2008510c:	0084d640 	call	20084d64 <mmc_send_cmd>
20085110:	e0bff715 	stw	r2,-36(fp)

		if (err)
20085114:	e0bff717 	ldw	r2,-36(fp)
20085118:	10000226 	beq	r2,zero,20085124 <mmc_send_op_cond+0xe8>
			return err;
2008511c:	e0bff717 	ldw	r2,-36(fp)
20085120:	00001c06 	br	20085194 <mmc_send_op_cond+0x158>

		udelay(1000);
20085124:	0100fa04 	movi	r4,1000
20085128:	0084c1c0 	call	20084c1c <udelay>
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
2008512c:	e0bffb17 	ldw	r2,-20(fp)
20085130:	10000416 	blt	r2,zero,20085144 <mmc_send_op_cond+0x108>
20085134:	e0bff617 	ldw	r2,-40(fp)
20085138:	10ffffc4 	addi	r3,r2,-1
2008513c:	e0fff615 	stw	r3,-40(fp)
20085140:	103fd81e 	bne	r2,zero,200850a4 <__flash_rwdata_start+0xfffe62b8>

	if (timeout <= 0)
20085144:	e0bff617 	ldw	r2,-40(fp)
20085148:	00800216 	blt	zero,r2,20085154 <mmc_send_op_cond+0x118>
		return UNUSABLE_ERR;
2008514c:	00bffbc4 	movi	r2,-17
20085150:	00001006 	br	20085194 <mmc_send_op_cond+0x158>

	mmc->version = MMC_VERSION_UNKNOWN;
20085154:	e0bfff17 	ldw	r2,-4(fp)
20085158:	00c00074 	movhi	r3,1
2008515c:	10c00a15 	stw	r3,40(r2)
	mmc->ocr = cmd.response[0];
20085160:	e0fffb17 	ldw	r3,-20(fp)
20085164:	e0bfff17 	ldw	r2,-4(fp)
20085168:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
2008516c:	e0bfff17 	ldw	r2,-4(fp)
20085170:	10801317 	ldw	r2,76(r2)
20085174:	1090002c 	andhi	r2,r2,16384
20085178:	1004c03a 	cmpne	r2,r2,zero
2008517c:	10c03fcc 	andi	r3,r2,255
20085180:	e0bfff17 	ldw	r2,-4(fp)
20085184:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
20085188:	e0bfff17 	ldw	r2,-4(fp)
2008518c:	10001e0d 	sth	zero,120(r2)

	return 0;
20085190:	0005883a 	mov	r2,zero
}
20085194:	e037883a 	mov	sp,fp
20085198:	dfc00117 	ldw	ra,4(sp)
2008519c:	df000017 	ldw	fp,0(sp)
200851a0:	dec00204 	addi	sp,sp,8
200851a4:	f800283a 	ret

200851a8 <mmc_send_status>:

static int mmc_send_status(struct mmc *mmc, int timeout) {
200851a8:	defff304 	addi	sp,sp,-52
200851ac:	dfc00c15 	stw	ra,48(sp)
200851b0:	df000b15 	stw	fp,44(sp)
200851b4:	df000b04 	addi	fp,sp,44
200851b8:	e13ffe15 	stw	r4,-8(fp)
200851bc:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	int err, retries = 5;
200851c0:	00800144 	movi	r2,5
200851c4:	e0bff515 	stw	r2,-44(fp)

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
200851c8:	00800344 	movi	r2,13
200851cc:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
200851d0:	00800544 	movi	r2,21
200851d4:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = mmc->rca << 16;
200851d8:	e0bffe17 	ldw	r2,-8(fp)
200851dc:	10801e0b 	ldhu	r2,120(r2)
200851e0:	10bfffcc 	andi	r2,r2,65535
200851e4:	1004943a 	slli	r2,r2,16
200851e8:	e0bff915 	stw	r2,-28(fp)

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
200851ec:	e0bff704 	addi	r2,fp,-36
200851f0:	e13ffe17 	ldw	r4,-8(fp)
200851f4:	100b883a 	mov	r5,r2
200851f8:	000d883a 	mov	r6,zero
200851fc:	0084d640 	call	20084d64 <mmc_send_cmd>
20085200:	e0bff615 	stw	r2,-40(fp)
		if (!err) {
20085204:	e0bff617 	ldw	r2,-40(fp)
20085208:	1000131e 	bne	r2,zero,20085258 <mmc_send_status+0xb0>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
2008520c:	e0bffa17 	ldw	r2,-24(fp)
20085210:	1080400c 	andi	r2,r2,256
20085214:	10000426 	beq	r2,zero,20085228 <mmc_send_status+0x80>
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
20085218:	e0bffa17 	ldw	r2,-24(fp)
2008521c:	1087800c 	andi	r2,r2,7680
20085220:	10838018 	cmpnei	r2,r2,3584
20085224:	1000191e 	bne	r2,zero,2008528c <mmc_send_status+0xe4>
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20085228:	e0fffa17 	ldw	r3,-24(fp)
2008522c:	00bf7e74 	movhi	r2,65017
20085230:	10902004 	addi	r2,r2,16512
20085234:	1884703a 	and	r2,r3,r2
20085238:	10000e26 	beq	r2,zero,20085274 <mmc_send_status+0xcc>
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
2008523c:	e0bffa17 	ldw	r2,-24(fp)
20085240:	01000034 	movhi	r4,0
20085244:	2100cb04 	addi	r4,r4,812
20085248:	100b883a 	mov	r5,r2
2008524c:	008c1a00 	call	2008c1a0 <printf>
				return COMM_ERR;
20085250:	00bffb84 	movi	r2,-18
20085254:	00001506 	br	200852ac <mmc_send_status+0x104>
			}
		} else if (--retries < 0)
20085258:	e0bff517 	ldw	r2,-44(fp)
2008525c:	10bfffc4 	addi	r2,r2,-1
20085260:	e0bff515 	stw	r2,-44(fp)
20085264:	e0bff517 	ldw	r2,-44(fp)
20085268:	1000020e 	bge	r2,zero,20085274 <mmc_send_status+0xcc>
			return err;
2008526c:	e0bff617 	ldw	r2,-40(fp)
20085270:	00000e06 	br	200852ac <mmc_send_status+0x104>

		udelay(1000);
20085274:	0100fa04 	movi	r4,1000
20085278:	0084c1c0 	call	20084c1c <udelay>

	} while (timeout--);
2008527c:	e0bfff17 	ldw	r2,-4(fp)
20085280:	10ffffc4 	addi	r3,r2,-1
20085284:	e0ffff15 	stw	r3,-4(fp)
20085288:	103fd81e 	bne	r2,zero,200851ec <__flash_rwdata_start+0xfffe6400>

	if (timeout <= 0) {
2008528c:	e0bfff17 	ldw	r2,-4(fp)
20085290:	00800516 	blt	zero,r2,200852a8 <mmc_send_status+0x100>
		printf("Timeout waiting card ready\n\r");
20085294:	01000034 	movhi	r4,0
20085298:	2100d104 	addi	r4,r4,836
2008529c:	008c1a00 	call	2008c1a0 <printf>
		return TIMEOUT;
200852a0:	00bffb44 	movi	r2,-19
200852a4:	00000106 	br	200852ac <mmc_send_status+0x104>
	}

	return 0;
200852a8:	0005883a 	mov	r2,zero
}
200852ac:	e037883a 	mov	sp,fp
200852b0:	dfc00117 	ldw	ra,4(sp)
200852b4:	df000017 	ldw	fp,0(sp)
200852b8:	dec00204 	addi	sp,sp,8
200852bc:	f800283a 	ret

200852c0 <mmc_send_ext_csd>:

static int mmc_send_ext_csd(struct mmc *mmc, char *ext_csd) {
200852c0:	defff004 	addi	sp,sp,-64
200852c4:	dfc00f15 	stw	ra,60(sp)
200852c8:	df000e15 	stw	fp,56(sp)
200852cc:	df000e04 	addi	fp,sp,56
200852d0:	e13ffe15 	stw	r4,-8(fp)
200852d4:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
200852d8:	00800204 	movi	r2,8
200852dc:	e0bff30d 	sth	r2,-52(fp)
	cmd.resp_type = MMC_RSP_R1;
200852e0:	00800544 	movi	r2,21
200852e4:	e0bff415 	stw	r2,-48(fp)
	cmd.cmdarg = 0;
200852e8:	e03ff515 	stw	zero,-44(fp)

	data.dest = (char *) ext_csd;
200852ec:	e0bfff17 	ldw	r2,-4(fp)
200852f0:	e0bffa15 	stw	r2,-24(fp)
	data.blocks = 1;
200852f4:	00800044 	movi	r2,1
200852f8:	e0bffc15 	stw	r2,-16(fp)
	data.blocksize = 512;
200852fc:	00808004 	movi	r2,512
20085300:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
20085304:	00800044 	movi	r2,1
20085308:	e0bffb15 	stw	r2,-20(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
2008530c:	e0fff304 	addi	r3,fp,-52
20085310:	e0bffa04 	addi	r2,fp,-24
20085314:	e13ffe17 	ldw	r4,-8(fp)
20085318:	180b883a 	mov	r5,r3
2008531c:	100d883a 	mov	r6,r2
20085320:	0084d640 	call	20084d64 <mmc_send_cmd>
20085324:	e0bff215 	stw	r2,-56(fp)

	return err;
20085328:	e0bff217 	ldw	r2,-56(fp)
}
2008532c:	e037883a 	mov	sp,fp
20085330:	dfc00117 	ldw	ra,4(sp)
20085334:	df000017 	ldw	fp,0(sp)
20085338:	dec00204 	addi	sp,sp,8
2008533c:	f800283a 	ret

20085340 <mmc_switch>:

static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
20085340:	defff104 	addi	sp,sp,-60
20085344:	dfc00e15 	stw	ra,56(sp)
20085348:	df000d15 	stw	fp,52(sp)
2008534c:	df000d04 	addi	fp,sp,52
20085350:	e13ffc15 	stw	r4,-16(fp)
20085354:	2809883a 	mov	r4,r5
20085358:	3007883a 	mov	r3,r6
2008535c:	3805883a 	mov	r2,r7
20085360:	e13ffd05 	stb	r4,-12(fp)
20085364:	e0fffe05 	stb	r3,-8(fp)
20085368:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	int timeout = 1000;
2008536c:	0080fa04 	movi	r2,1000
20085370:	e0bff415 	stw	r2,-48(fp)
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
20085374:	00800184 	movi	r2,6
20085378:	e0bff50d 	sth	r2,-44(fp)
	cmd.resp_type = MMC_RSP_R1b;
2008537c:	00800744 	movi	r2,29
20085380:	e0bff615 	stw	r2,-40(fp)
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20085384:	e0bffe07 	ldb	r2,-8(fp)
20085388:	1004943a 	slli	r2,r2,16
2008538c:	10c0c034 	orhi	r3,r2,768
			| (value << 8);
20085390:	e0bfff07 	ldb	r2,-4(fp)
20085394:	1004923a 	slli	r2,r2,8
20085398:	1884b03a 	or	r2,r3,r2
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
2008539c:	e0bff715 	stw	r2,-36(fp)
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
200853a0:	e0bff504 	addi	r2,fp,-44
200853a4:	e13ffc17 	ldw	r4,-16(fp)
200853a8:	100b883a 	mov	r5,r2
200853ac:	000d883a 	mov	r6,zero
200853b0:	0084d640 	call	20084d64 <mmc_send_cmd>
200853b4:	e0bff315 	stw	r2,-52(fp)

	/* Waiting for the ready status */
	if (!ret)
200853b8:	e0bff317 	ldw	r2,-52(fp)
200853bc:	1000041e 	bne	r2,zero,200853d0 <mmc_switch+0x90>
		ret = mmc_send_status(mmc, timeout);
200853c0:	e13ffc17 	ldw	r4,-16(fp)
200853c4:	e17ff417 	ldw	r5,-48(fp)
200853c8:	00851a80 	call	200851a8 <mmc_send_status>
200853cc:	e0bff315 	stw	r2,-52(fp)

	return ret;
200853d0:	e0bff317 	ldw	r2,-52(fp)

}
200853d4:	e037883a 	mov	sp,fp
200853d8:	dfc00117 	ldw	ra,4(sp)
200853dc:	df000017 	ldw	fp,0(sp)
200853e0:	dec00204 	addi	sp,sp,8
200853e4:	f800283a 	ret

200853e8 <sd_switch>:

static int sd_switch(struct mmc *mmc, int mode, int group, char value,
		char *resp) {
200853e8:	deffe804 	addi	sp,sp,-96
200853ec:	dfc01715 	stw	ra,92(sp)
200853f0:	df001615 	stw	fp,88(sp)
200853f4:	df001604 	addi	fp,sp,88
200853f8:	e13ffc15 	stw	r4,-16(fp)
200853fc:	e17ffd15 	stw	r5,-12(fp)
20085400:	e1bffe15 	stw	r6,-8(fp)
20085404:	3805883a 	mov	r2,r7
20085408:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
2008540c:	00800184 	movi	r2,6
20085410:	e0bff10d 	sth	r2,-60(fp)
	cmd.resp_type = MMC_RSP_R1;
20085414:	00800544 	movi	r2,21
20085418:	e0bff215 	stw	r2,-56(fp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
2008541c:	e0bffd17 	ldw	r2,-12(fp)
20085420:	100697fa 	slli	r3,r2,31
20085424:	00804034 	movhi	r2,256
20085428:	10bfffc4 	addi	r2,r2,-1
2008542c:	1884b03a 	or	r2,r3,r2
20085430:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg &= ~(0xf << (group * 4));
20085434:	e0fff317 	ldw	r3,-52(fp)
20085438:	e0bffe17 	ldw	r2,-8(fp)
2008543c:	1085883a 	add	r2,r2,r2
20085440:	1085883a 	add	r2,r2,r2
20085444:	1009883a 	mov	r4,r2
20085448:	008003c4 	movi	r2,15
2008544c:	1104983a 	sll	r2,r2,r4
20085450:	0084303a 	nor	r2,zero,r2
20085454:	1884703a 	and	r2,r3,r2
20085458:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg |= value << (group * 4);
2008545c:	e0fff317 	ldw	r3,-52(fp)
20085460:	e13fff07 	ldb	r4,-4(fp)
20085464:	e0bffe17 	ldw	r2,-8(fp)
20085468:	1085883a 	add	r2,r2,r2
2008546c:	1085883a 	add	r2,r2,r2
20085470:	2084983a 	sll	r2,r4,r2
20085474:	1884b03a 	or	r2,r3,r2
20085478:	e0bff315 	stw	r2,-52(fp)

	data.dest = (char *) resp;
2008547c:	e0800217 	ldw	r2,8(fp)
20085480:	e0bff815 	stw	r2,-32(fp)
	data.blocksize = 64;
20085484:	00801004 	movi	r2,64
20085488:	e0bffb15 	stw	r2,-20(fp)
	data.blocks = 1;
2008548c:	00800044 	movi	r2,1
20085490:	e0bffa15 	stw	r2,-24(fp)
	data.flags = MMC_DATA_READ;
20085494:	00800044 	movi	r2,1
20085498:	e0bff915 	stw	r2,-28(fp)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);
2008549c:	e0fff104 	addi	r3,fp,-60
200854a0:	e0bff804 	addi	r2,fp,-32
200854a4:	e13ffc17 	ldw	r4,-16(fp)
200854a8:	180b883a 	mov	r5,r3
200854ac:	100d883a 	mov	r6,r2
200854b0:	0084d640 	call	20084d64 <mmc_send_cmd>
200854b4:	e0bfeb15 	stw	r2,-84(fp)

	int i;
	uint* s = resp;
200854b8:	e0800217 	ldw	r2,8(fp)
200854bc:	e0bfec15 	stw	r2,-80(fp)
	for(i = 0; (i < 16); i++){
200854c0:	e03fea15 	stw	zero,-88(fp)
200854c4:	00003706 	br	200855a4 <sd_switch+0x1bc>
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
200854c8:	e0bfea17 	ldw	r2,-88(fp)
200854cc:	1085883a 	add	r2,r2,r2
200854d0:	1085883a 	add	r2,r2,r2
200854d4:	1007883a 	mov	r3,r2
200854d8:	e0bfec17 	ldw	r2,-80(fp)
200854dc:	10c5883a 	add	r2,r2,r3
200854e0:	10800017 	ldw	r2,0(r2)
200854e4:	1004963a 	slli	r2,r2,24
200854e8:	e0bfed15 	stw	r2,-76(fp)
		b1 = (s[i] & 0x0000ff00) << 8;
200854ec:	e0bfea17 	ldw	r2,-88(fp)
200854f0:	1085883a 	add	r2,r2,r2
200854f4:	1085883a 	add	r2,r2,r2
200854f8:	1007883a 	mov	r3,r2
200854fc:	e0bfec17 	ldw	r2,-80(fp)
20085500:	10c5883a 	add	r2,r2,r3
20085504:	10800017 	ldw	r2,0(r2)
20085508:	10bfc00c 	andi	r2,r2,65280
2008550c:	1004923a 	slli	r2,r2,8
20085510:	e0bfee15 	stw	r2,-72(fp)
		b2 = (s[i] & 0x00ff0000) >> 8;
20085514:	e0bfea17 	ldw	r2,-88(fp)
20085518:	1085883a 	add	r2,r2,r2
2008551c:	1085883a 	add	r2,r2,r2
20085520:	1007883a 	mov	r3,r2
20085524:	e0bfec17 	ldw	r2,-80(fp)
20085528:	10c5883a 	add	r2,r2,r3
2008552c:	10800017 	ldw	r2,0(r2)
20085530:	10803fec 	andhi	r2,r2,255
20085534:	1004d23a 	srli	r2,r2,8
20085538:	e0bfef15 	stw	r2,-68(fp)
		b3 = (s[i] & 0xff000000) >> 24;
2008553c:	e0bfea17 	ldw	r2,-88(fp)
20085540:	1085883a 	add	r2,r2,r2
20085544:	1085883a 	add	r2,r2,r2
20085548:	1007883a 	mov	r3,r2
2008554c:	e0bfec17 	ldw	r2,-80(fp)
20085550:	10c5883a 	add	r2,r2,r3
20085554:	10800017 	ldw	r2,0(r2)
20085558:	1004d63a 	srli	r2,r2,24
2008555c:	e0bff015 	stw	r2,-64(fp)
		s[i] = b0 | b1 | b2 | b3;
20085560:	e0bfea17 	ldw	r2,-88(fp)
20085564:	1085883a 	add	r2,r2,r2
20085568:	1085883a 	add	r2,r2,r2
2008556c:	1007883a 	mov	r3,r2
20085570:	e0bfec17 	ldw	r2,-80(fp)
20085574:	10c5883a 	add	r2,r2,r3
20085578:	e13fed17 	ldw	r4,-76(fp)
2008557c:	e0ffee17 	ldw	r3,-72(fp)
20085580:	20c8b03a 	or	r4,r4,r3
20085584:	e0ffef17 	ldw	r3,-68(fp)
20085588:	20c8b03a 	or	r4,r4,r3
2008558c:	e0fff017 	ldw	r3,-64(fp)
20085590:	20c6b03a 	or	r3,r4,r3
20085594:	10c00015 	stw	r3,0(r2)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
20085598:	e0bfea17 	ldw	r2,-88(fp)
2008559c:	10800044 	addi	r2,r2,1
200855a0:	e0bfea15 	stw	r2,-88(fp)
200855a4:	e0bfea17 	ldw	r2,-88(fp)
200855a8:	10800410 	cmplti	r2,r2,16
200855ac:	103fc61e 	bne	r2,zero,200854c8 <__flash_rwdata_start+0xfffe66dc>
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
	}
	return ret;
200855b0:	e0bfeb17 	ldw	r2,-84(fp)
}
200855b4:	e037883a 	mov	sp,fp
200855b8:	dfc00117 	ldw	ra,4(sp)
200855bc:	df000017 	ldw	fp,0(sp)
200855c0:	dec00204 	addi	sp,sp,8
200855c4:	f800283a 	ret

200855c8 <sd_change_freq>:

static int sd_change_freq(struct mmc *mmc) {
200855c8:	deffeb04 	addi	sp,sp,-84
200855cc:	dfc01415 	stw	ra,80(sp)
200855d0:	df001315 	stw	fp,76(sp)
200855d4:	df001304 	addi	fp,sp,76
200855d8:	e13fff15 	stw	r4,-4(fp)
	static uint switch_status[16];
	struct mmc_data data;
	int timeout;

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;
200855dc:	e0bfff17 	ldw	r2,-4(fp)
200855e0:	10001115 	stw	zero,68(r2)

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
200855e4:	00800dc4 	movi	r2,55
200855e8:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
200855ec:	00800544 	movi	r2,21
200855f0:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = mmc->rca << 16;
200855f4:	e0bfff17 	ldw	r2,-4(fp)
200855f8:	10801e0b 	ldhu	r2,120(r2)
200855fc:	10bfffcc 	andi	r2,r2,65535
20085600:	1004943a 	slli	r2,r2,16
20085604:	e0bff615 	stw	r2,-40(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085608:	e0bff404 	addi	r2,fp,-48
2008560c:	e13fff17 	ldw	r4,-4(fp)
20085610:	100b883a 	mov	r5,r2
20085614:	000d883a 	mov	r6,zero
20085618:	0084d640 	call	20084d64 <mmc_send_cmd>
2008561c:	e0bfef15 	stw	r2,-68(fp)

	if (err)
20085620:	e0bfef17 	ldw	r2,-68(fp)
20085624:	10000226 	beq	r2,zero,20085630 <sd_change_freq+0x68>
		return err;
20085628:	e0bfef17 	ldw	r2,-68(fp)
2008562c:	0000c306 	br	2008593c <sd_change_freq+0x374>

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
20085630:	00800cc4 	movi	r2,51
20085634:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
20085638:	00800544 	movi	r2,21
2008563c:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = 0;
20085640:	e03ff615 	stw	zero,-40(fp)

	timeout = 3;
20085644:	008000c4 	movi	r2,3
20085648:	e0bfee15 	stw	r2,-72(fp)

	retry_scr: data.dest = (char *) scr;
2008564c:	d0a01504 	addi	r2,gp,-32684
20085650:	e0bffb15 	stw	r2,-20(fp)
	data.blocksize = 8;
20085654:	00800204 	movi	r2,8
20085658:	e0bffe15 	stw	r2,-8(fp)
	data.blocks = 1;
2008565c:	00800044 	movi	r2,1
20085660:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
20085664:	00800044 	movi	r2,1
20085668:	e0bffc15 	stw	r2,-16(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
2008566c:	e0fff404 	addi	r3,fp,-48
20085670:	e0bffb04 	addi	r2,fp,-20
20085674:	e13fff17 	ldw	r4,-4(fp)
20085678:	180b883a 	mov	r5,r3
2008567c:	100d883a 	mov	r6,r2
20085680:	0084d640 	call	20084d64 <mmc_send_cmd>
20085684:	e0bfef15 	stw	r2,-68(fp)

	if (err) {
20085688:	e0bfef17 	ldw	r2,-68(fp)
2008568c:	10000726 	beq	r2,zero,200856ac <sd_change_freq+0xe4>
		if (timeout--)
20085690:	e0bfee17 	ldw	r2,-72(fp)
20085694:	10ffffc4 	addi	r3,r2,-1
20085698:	e0ffee15 	stw	r3,-72(fp)
2008569c:	10000126 	beq	r2,zero,200856a4 <sd_change_freq+0xdc>
			goto retry_scr;
200856a0:	003fea06 	br	2008564c <__flash_rwdata_start+0xfffe6860>

		return err;
200856a4:	e0bfef17 	ldw	r2,-68(fp)
200856a8:	0000a406 	br	2008593c <sd_change_freq+0x374>
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
200856ac:	d0a01517 	ldw	r2,-32684(gp)
200856b0:	1004963a 	slli	r2,r2,24
200856b4:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[0] & 0x0000ff00) << 8;
200856b8:	d0a01517 	ldw	r2,-32684(gp)
200856bc:	10bfc00c 	andi	r2,r2,65280
200856c0:	1004923a 	slli	r2,r2,8
200856c4:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[0] & 0x00ff0000) >> 8;
200856c8:	d0a01517 	ldw	r2,-32684(gp)
200856cc:	10803fec 	andhi	r2,r2,255
200856d0:	1004d23a 	srli	r2,r2,8
200856d4:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[0] & 0xff000000) >> 24;
200856d8:	d0a01517 	ldw	r2,-32684(gp)
200856dc:	1004d63a 	srli	r2,r2,24
200856e0:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[0] = b0 | b1 | b2 | b3;
200856e4:	e0fff017 	ldw	r3,-64(fp)
200856e8:	e0bff117 	ldw	r2,-60(fp)
200856ec:	1886b03a 	or	r3,r3,r2
200856f0:	e0bff217 	ldw	r2,-56(fp)
200856f4:	1886b03a 	or	r3,r3,r2
200856f8:	e0bff317 	ldw	r2,-52(fp)
200856fc:	1886b03a 	or	r3,r3,r2
20085700:	e0bfff17 	ldw	r2,-4(fp)
20085704:	10c01415 	stw	r3,80(r2)

	b0 = (scr[1] & 0x000000ff) << 24;
20085708:	d0a01604 	addi	r2,gp,-32680
2008570c:	10800017 	ldw	r2,0(r2)
20085710:	1004963a 	slli	r2,r2,24
20085714:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[1] & 0x0000ff00) << 8;
20085718:	d0a01604 	addi	r2,gp,-32680
2008571c:	10800017 	ldw	r2,0(r2)
20085720:	10bfc00c 	andi	r2,r2,65280
20085724:	1004923a 	slli	r2,r2,8
20085728:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[1] & 0x00ff0000) >> 8;
2008572c:	d0a01604 	addi	r2,gp,-32680
20085730:	10800017 	ldw	r2,0(r2)
20085734:	10803fec 	andhi	r2,r2,255
20085738:	1004d23a 	srli	r2,r2,8
2008573c:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[1] & 0xff000000) >> 24;
20085740:	d0a01604 	addi	r2,gp,-32680
20085744:	10800017 	ldw	r2,0(r2)
20085748:	1004d63a 	srli	r2,r2,24
2008574c:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[1] = b0 | b1 | b2 | b3;
20085750:	e0fff017 	ldw	r3,-64(fp)
20085754:	e0bff117 	ldw	r2,-60(fp)
20085758:	1886b03a 	or	r3,r3,r2
2008575c:	e0bff217 	ldw	r2,-56(fp)
20085760:	1886b03a 	or	r3,r3,r2
20085764:	e0bff317 	ldw	r2,-52(fp)
20085768:	1886b03a 	or	r3,r3,r2
2008576c:	e0bfff17 	ldw	r2,-4(fp)
20085770:	10c01515 	stw	r3,84(r2)

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
20085774:	e0bfff17 	ldw	r2,-4(fp)
20085778:	10801417 	ldw	r2,80(r2)
2008577c:	1004d63a 	srli	r2,r2,24
20085780:	108003cc 	andi	r2,r2,15
20085784:	10c00060 	cmpeqi	r3,r2,1
20085788:	1800091e 	bne	r3,zero,200857b0 <sd_change_freq+0x1e8>
2008578c:	0080032e 	bgeu	zero,r2,2008579c <sd_change_freq+0x1d4>
20085790:	108000a0 	cmpeqi	r2,r2,2
20085794:	10000b1e 	bne	r2,zero,200857c4 <sd_change_freq+0x1fc>
20085798:	00000f06 	br	200857d8 <sd_change_freq+0x210>
	case 0:
		mmc->version = SD_VERSION_1_0;
2008579c:	e0ffff17 	ldw	r3,-4(fp)
200857a0:	008000b4 	movhi	r2,2
200857a4:	10800404 	addi	r2,r2,16
200857a8:	18800a15 	stw	r2,40(r3)
		break;
200857ac:	00000f06 	br	200857ec <sd_change_freq+0x224>
	case 1:
		mmc->version = SD_VERSION_1_10;
200857b0:	e0ffff17 	ldw	r3,-4(fp)
200857b4:	008000b4 	movhi	r2,2
200857b8:	10800684 	addi	r2,r2,26
200857bc:	18800a15 	stw	r2,40(r3)
		break;
200857c0:	00000a06 	br	200857ec <sd_change_freq+0x224>
	case 2:
		mmc->version = SD_VERSION_2;
200857c4:	e0ffff17 	ldw	r3,-4(fp)
200857c8:	008000b4 	movhi	r2,2
200857cc:	10800804 	addi	r2,r2,32
200857d0:	18800a15 	stw	r2,40(r3)
		break;
200857d4:	00000506 	br	200857ec <sd_change_freq+0x224>
	default:
		mmc->version = SD_VERSION_1_0;
200857d8:	e0ffff17 	ldw	r3,-4(fp)
200857dc:	008000b4 	movhi	r2,2
200857e0:	10800404 	addi	r2,r2,16
200857e4:	18800a15 	stw	r2,40(r3)
		break;
200857e8:	0001883a 	nop
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
200857ec:	e0bfff17 	ldw	r2,-4(fp)
200857f0:	10801417 	ldw	r2,80(r2)
200857f4:	1080012c 	andhi	r2,r2,4
200857f8:	10000526 	beq	r2,zero,20085810 <sd_change_freq+0x248>
		mmc->card_caps |= MMC_MODE_4BIT;
200857fc:	e0bfff17 	ldw	r2,-4(fp)
20085800:	10801117 	ldw	r2,68(r2)
20085804:	10c04014 	ori	r3,r2,256
20085808:	e0bfff17 	ldw	r2,-4(fp)
2008580c:	10c01115 	stw	r3,68(r2)

	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
20085810:	e0bfff17 	ldw	r2,-4(fp)
20085814:	10c00a17 	ldw	r3,40(r2)
20085818:	008000b4 	movhi	r2,2
2008581c:	10800404 	addi	r2,r2,16
20085820:	1880021e 	bne	r3,r2,2008582c <sd_change_freq+0x264>
		return 0;
20085824:	0005883a 	mov	r2,zero
20085828:	00004406 	br	2008593c <sd_change_freq+0x374>

	timeout = 4;
2008582c:	00800104 	movi	r2,4
20085830:	e0bfee15 	stw	r2,-72(fp)
	while (timeout--) {
20085834:	00001306 	br	20085884 <sd_change_freq+0x2bc>
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1, (char *) switch_status);
20085838:	00800034 	movhi	r2,0
2008583c:	108bf104 	addi	r2,r2,12228
20085840:	d8800015 	stw	r2,0(sp)
20085844:	e13fff17 	ldw	r4,-4(fp)
20085848:	000b883a 	mov	r5,zero
2008584c:	000d883a 	mov	r6,zero
20085850:	01c00044 	movi	r7,1
20085854:	00853e80 	call	200853e8 <sd_switch>
20085858:	e0bfef15 	stw	r2,-68(fp)

		if (err)
2008585c:	e0bfef17 	ldw	r2,-68(fp)
20085860:	10000226 	beq	r2,zero,2008586c <sd_change_freq+0x2a4>
			return err;
20085864:	e0bfef17 	ldw	r2,-68(fp)
20085868:	00003406 	br	2008593c <sd_change_freq+0x374>

		MMC_PRINT(("switch status 7 %08x\n\r", switch_status[7]));
		MMC_PRINT(("switch status 3 %08x\n\r", switch_status[3]));
		MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
		/* The high-speed function is busy.  Try again */
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
2008586c:	00800034 	movhi	r2,0
20085870:	108bf104 	addi	r2,r2,12228
20085874:	10800717 	ldw	r2,28(r2)
20085878:	108000ac 	andhi	r2,r2,2
2008587c:	1000011e 	bne	r2,zero,20085884 <sd_change_freq+0x2bc>
			break;
20085880:	00000406 	br	20085894 <sd_change_freq+0x2cc>
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
20085884:	e0bfee17 	ldw	r2,-72(fp)
20085888:	10ffffc4 	addi	r3,r2,-1
2008588c:	e0ffee15 	stw	r3,-72(fp)
20085890:	103fe91e 	bne	r2,zero,20085838 <__flash_rwdata_start+0xfffe6a4c>
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(switch_status[3] & SD_HIGHSPEED_SUPPORTED)){
20085894:	00800034 	movhi	r2,0
20085898:	108bf104 	addi	r2,r2,12228
2008589c:	10800317 	ldw	r2,12(r2)
200858a0:	108000ac 	andhi	r2,r2,2
200858a4:	1000021e 	bne	r2,zero,200858b0 <sd_change_freq+0x2e8>
		MMC_PRINT(("SD high speed not supported!\n"));
		return 0;
200858a8:	0005883a 	mov	r2,zero
200858ac:	00002306 	br	2008593c <sd_change_freq+0x374>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
200858b0:	e0bfff17 	ldw	r2,-4(fp)
200858b4:	10801217 	ldw	r2,72(r2)
200858b8:	1080040c 	andi	r2,r2,16
200858bc:	10000426 	beq	r2,zero,200858d0 <sd_change_freq+0x308>
200858c0:	e0bfff17 	ldw	r2,-4(fp)
200858c4:	10801217 	ldw	r2,72(r2)
200858c8:	1080004c 	andi	r2,r2,1
200858cc:	1000021e 	bne	r2,zero,200858d8 <sd_change_freq+0x310>
		return 0;
200858d0:	0005883a 	mov	r2,zero
200858d4:	00001906 	br	2008593c <sd_change_freq+0x374>

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (char *) switch_status);
200858d8:	00800034 	movhi	r2,0
200858dc:	108bf104 	addi	r2,r2,12228
200858e0:	d8800015 	stw	r2,0(sp)
200858e4:	e13fff17 	ldw	r4,-4(fp)
200858e8:	01400044 	movi	r5,1
200858ec:	000d883a 	mov	r6,zero
200858f0:	01c00044 	movi	r7,1
200858f4:	00853e80 	call	200853e8 <sd_switch>
200858f8:	e0bfef15 	stw	r2,-68(fp)
	MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
	if (err)
200858fc:	e0bfef17 	ldw	r2,-68(fp)
20085900:	10000226 	beq	r2,zero,2008590c <sd_change_freq+0x344>
		return err;
20085904:	e0bfef17 	ldw	r2,-68(fp)
20085908:	00000c06 	br	2008593c <sd_change_freq+0x374>

	if ((switch_status[4] & 0x0f000000) == 0x01000000){
2008590c:	00800034 	movhi	r2,0
20085910:	108bf104 	addi	r2,r2,12228
20085914:	10800417 	ldw	r2,16(r2)
20085918:	10c3c02c 	andhi	r3,r2,3840
2008591c:	00804034 	movhi	r2,256
20085920:	1880051e 	bne	r3,r2,20085938 <sd_change_freq+0x370>
		MMC_PRINT(("High speed supported!\n"));
		mmc->card_caps |= MMC_MODE_HS;
20085924:	e0bfff17 	ldw	r2,-4(fp)
20085928:	10801117 	ldw	r2,68(r2)
2008592c:	10c00054 	ori	r3,r2,1
20085930:	e0bfff17 	ldw	r2,-4(fp)
20085934:	10c01115 	stw	r3,68(r2)
	}

	return 0;
20085938:	0005883a 	mov	r2,zero
}
2008593c:	e037883a 	mov	sp,fp
20085940:	dfc00117 	ldw	ra,4(sp)
20085944:	df000017 	ldw	fp,0(sp)
20085948:	dec00204 	addi	sp,sp,8
2008594c:	f800283a 	ret

20085950 <mmc_change_freq>:

static int mmc_change_freq(struct mmc *mmc) {
20085950:	deff7b04 	addi	sp,sp,-532
20085954:	dfc08415 	stw	ra,528(sp)
20085958:	df008315 	stw	fp,524(sp)
2008595c:	df008304 	addi	fp,sp,524
20085960:	e13fff15 	stw	r4,-4(fp)
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
20085964:	e0bfff17 	ldw	r2,-4(fp)
20085968:	10001115 	stw	zero,68(r2)

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
2008596c:	e0bfff17 	ldw	r2,-4(fp)
20085970:	10c00a17 	ldw	r3,40(r2)
20085974:	00800074 	movhi	r2,1
20085978:	10800fc4 	addi	r2,r2,63
2008597c:	10c00236 	bltu	r2,r3,20085988 <mmc_change_freq+0x38>
		return 0;
20085980:	0005883a 	mov	r2,zero
20085984:	00003606 	br	20085a60 <mmc_change_freq+0x110>

	err = mmc_send_ext_csd(mmc, ext_csd);
20085988:	e0bf7e44 	addi	r2,fp,-519
2008598c:	e13fff17 	ldw	r4,-4(fp)
20085990:	100b883a 	mov	r5,r2
20085994:	00852c00 	call	200852c0 <mmc_send_ext_csd>
20085998:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
2008599c:	e0bf7d17 	ldw	r2,-524(fp)
200859a0:	10000226 	beq	r2,zero,200859ac <mmc_change_freq+0x5c>
		return err;
200859a4:	e0bf7d17 	ldw	r2,-524(fp)
200859a8:	00002d06 	br	20085a60 <mmc_change_freq+0x110>

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
200859ac:	e0bfaf43 	ldbu	r2,-323(fp)
200859b0:	108003cc 	andi	r2,r2,15
200859b4:	e0bf7e05 	stb	r2,-520(fp)

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);
200859b8:	e13fff17 	ldw	r4,-4(fp)
200859bc:	01400044 	movi	r5,1
200859c0:	01bfee44 	movi	r6,-71
200859c4:	01c00044 	movi	r7,1
200859c8:	00853400 	call	20085340 <mmc_switch>
200859cc:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
200859d0:	e0bf7d17 	ldw	r2,-524(fp)
200859d4:	10000226 	beq	r2,zero,200859e0 <mmc_change_freq+0x90>
		return err;
200859d8:	e0bf7d17 	ldw	r2,-524(fp)
200859dc:	00002006 	br	20085a60 <mmc_change_freq+0x110>

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);
200859e0:	e0bf7e44 	addi	r2,fp,-519
200859e4:	e13fff17 	ldw	r4,-4(fp)
200859e8:	100b883a 	mov	r5,r2
200859ec:	00852c00 	call	200852c0 <mmc_send_ext_csd>
200859f0:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
200859f4:	e0bf7d17 	ldw	r2,-524(fp)
200859f8:	10000226 	beq	r2,zero,20085a04 <mmc_change_freq+0xb4>
		return err;
200859fc:	e0bf7d17 	ldw	r2,-524(fp)
20085a00:	00001706 	br	20085a60 <mmc_change_freq+0x110>

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
20085a04:	e0bfac83 	ldbu	r2,-334(fp)
20085a08:	10803fcc 	andi	r2,r2,255
20085a0c:	1080201c 	xori	r2,r2,128
20085a10:	10bfe004 	addi	r2,r2,-128
20085a14:	1000021e 	bne	r2,zero,20085a20 <mmc_change_freq+0xd0>
		return 0;
20085a18:	0005883a 	mov	r2,zero
20085a1c:	00001006 	br	20085a60 <mmc_change_freq+0x110>

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20085a20:	e0bf7e03 	ldbu	r2,-520(fp)
20085a24:	10803fcc 	andi	r2,r2,255
20085a28:	1080008c 	andi	r2,r2,2
20085a2c:	10000626 	beq	r2,zero,20085a48 <mmc_change_freq+0xf8>
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
20085a30:	e0bfff17 	ldw	r2,-4(fp)
20085a34:	10801117 	ldw	r2,68(r2)
20085a38:	10c00454 	ori	r3,r2,17
20085a3c:	e0bfff17 	ldw	r2,-4(fp)
20085a40:	10c01115 	stw	r3,68(r2)
20085a44:	00000506 	br	20085a5c <mmc_change_freq+0x10c>
	else
		mmc->card_caps |= MMC_MODE_HS;
20085a48:	e0bfff17 	ldw	r2,-4(fp)
20085a4c:	10801117 	ldw	r2,68(r2)
20085a50:	10c00054 	ori	r3,r2,1
20085a54:	e0bfff17 	ldw	r2,-4(fp)
20085a58:	10c01115 	stw	r3,68(r2)

	return 0;
20085a5c:	0005883a 	mov	r2,zero
}
20085a60:	e037883a 	mov	sp,fp
20085a64:	dfc00117 	ldw	ra,4(sp)
20085a68:	df000017 	ldw	fp,0(sp)
20085a6c:	dec00204 	addi	sp,sp,8
20085a70:	f800283a 	ret

20085a74 <mmc_startup>:

static int mmc_startup(struct mmc *mmc) {
20085a74:	defeeb04 	addi	sp,sp,-1108
20085a78:	dfc11415 	stw	ra,1104(sp)
20085a7c:	df011315 	stw	fp,1100(sp)
20085a80:	df011304 	addi	fp,sp,1100
20085a84:	e13fff15 	stw	r4,-4(fp)
	uint mult, freq;
	uint cmult, csize, capacity;
	struct mmc_cmd cmd;
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;
20085a88:	0080fa04 	movi	r2,1000
20085a8c:	e0bef115 	stw	r2,-1084(fp)

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
20085a90:	00800084 	movi	r2,2
20085a94:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
20085a98:	008001c4 	movi	r2,7
20085a9c:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = 0;
20085aa0:	e03efa15 	stw	zero,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085aa4:	e0bef804 	addi	r2,fp,-1056
20085aa8:	e13fff17 	ldw	r4,-4(fp)
20085aac:	100b883a 	mov	r5,r2
20085ab0:	000d883a 	mov	r6,zero
20085ab4:	0084d640 	call	20084d64 <mmc_send_cmd>
20085ab8:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085abc:	e0beed17 	ldw	r2,-1100(fp)
20085ac0:	10000226 	beq	r2,zero,20085acc <mmc_startup+0x58>
		return err;
20085ac4:	e0beed17 	ldw	r2,-1100(fp)
20085ac8:	00023006 	br	2008638c <mmc_startup+0x918>

	memcpy(mmc->cid, cmd.response, 16);
20085acc:	e0bfff17 	ldw	r2,-4(fp)
20085ad0:	10c01a04 	addi	r3,r2,104
20085ad4:	e0bef804 	addi	r2,fp,-1056
20085ad8:	10800304 	addi	r2,r2,12
20085adc:	1809883a 	mov	r4,r3
20085ae0:	100b883a 	mov	r5,r2
20085ae4:	01800404 	movi	r6,16
20085ae8:	008bf180 	call	2008bf18 <memcpy>
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20085aec:	008000c4 	movi	r2,3
20085af0:	e0bef80d 	sth	r2,-1056(fp)
	cmd.cmdarg = mmc->rca << 16;
20085af4:	e0bfff17 	ldw	r2,-4(fp)
20085af8:	10801e0b 	ldhu	r2,120(r2)
20085afc:	10bfffcc 	andi	r2,r2,65535
20085b00:	1004943a 	slli	r2,r2,16
20085b04:	e0befa15 	stw	r2,-1048(fp)
	cmd.resp_type = MMC_RSP_R6;
20085b08:	00800544 	movi	r2,21
20085b0c:	e0bef915 	stw	r2,-1052(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085b10:	e0bef804 	addi	r2,fp,-1056
20085b14:	e13fff17 	ldw	r4,-4(fp)
20085b18:	100b883a 	mov	r5,r2
20085b1c:	000d883a 	mov	r6,zero
20085b20:	0084d640 	call	20084d64 <mmc_send_cmd>
20085b24:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085b28:	e0beed17 	ldw	r2,-1100(fp)
20085b2c:	10000226 	beq	r2,zero,20085b38 <mmc_startup+0xc4>
		return err;
20085b30:	e0beed17 	ldw	r2,-1100(fp)
20085b34:	00021506 	br	2008638c <mmc_startup+0x918>

	if (IS_SD(mmc))
20085b38:	e0bfff17 	ldw	r2,-4(fp)
20085b3c:	10800a17 	ldw	r2,40(r2)
20085b40:	108000ac 	andhi	r2,r2,2
20085b44:	10000526 	beq	r2,zero,20085b5c <mmc_startup+0xe8>
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;
20085b48:	e0befb17 	ldw	r2,-1044(fp)
20085b4c:	1004d43a 	srli	r2,r2,16
20085b50:	1007883a 	mov	r3,r2
20085b54:	e0bfff17 	ldw	r2,-4(fp)
20085b58:	10c01e0d 	sth	r3,120(r2)

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20085b5c:	00800244 	movi	r2,9
20085b60:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
20085b64:	008001c4 	movi	r2,7
20085b68:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20085b6c:	e0bfff17 	ldw	r2,-4(fp)
20085b70:	10801e0b 	ldhu	r2,120(r2)
20085b74:	10bfffcc 	andi	r2,r2,65535
20085b78:	1004943a 	slli	r2,r2,16
20085b7c:	e0befa15 	stw	r2,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20085b80:	e0bef804 	addi	r2,fp,-1056
20085b84:	e13fff17 	ldw	r4,-4(fp)
20085b88:	100b883a 	mov	r5,r2
20085b8c:	000d883a 	mov	r6,zero
20085b90:	0084d640 	call	20084d64 <mmc_send_cmd>
20085b94:	e0beed15 	stw	r2,-1100(fp)

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
20085b98:	e13fff17 	ldw	r4,-4(fp)
20085b9c:	e17ef117 	ldw	r5,-1084(fp)
20085ba0:	00851a80 	call	200851a8 <mmc_send_status>

	if (err)
20085ba4:	e0beed17 	ldw	r2,-1100(fp)
20085ba8:	10000226 	beq	r2,zero,20085bb4 <mmc_startup+0x140>
		return err;
20085bac:	e0beed17 	ldw	r2,-1100(fp)
20085bb0:	0001f606 	br	2008638c <mmc_startup+0x918>

	mmc->csd[0] = cmd.response[0];
20085bb4:	e0fefb17 	ldw	r3,-1044(fp)
20085bb8:	e0bfff17 	ldw	r2,-4(fp)
20085bbc:	10c01615 	stw	r3,88(r2)
	mmc->csd[1] = cmd.response[1];
20085bc0:	e0fefc17 	ldw	r3,-1040(fp)
20085bc4:	e0bfff17 	ldw	r2,-4(fp)
20085bc8:	10c01715 	stw	r3,92(r2)
	mmc->csd[2] = cmd.response[2];
20085bcc:	e0fefd17 	ldw	r3,-1036(fp)
20085bd0:	e0bfff17 	ldw	r2,-4(fp)
20085bd4:	10c01815 	stw	r3,96(r2)
	mmc->csd[3] = cmd.response[3];
20085bd8:	e0fefe17 	ldw	r3,-1032(fp)
20085bdc:	e0bfff17 	ldw	r2,-4(fp)
20085be0:	10c01915 	stw	r3,100(r2)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20085be4:	e0bfff17 	ldw	r2,-4(fp)
20085be8:	10c00a17 	ldw	r3,40(r2)
20085bec:	00800074 	movhi	r2,1
20085bf0:	1880311e 	bne	r3,r2,20085cb8 <mmc_startup+0x244>
		int version = (cmd.response[0] >> 26) & 0xf;
20085bf4:	e0befb17 	ldw	r2,-1044(fp)
20085bf8:	1004d6ba 	srli	r2,r2,26
20085bfc:	108003cc 	andi	r2,r2,15
20085c00:	e0bef215 	stw	r2,-1080(fp)

		switch (version) {
20085c04:	e0bef217 	ldw	r2,-1080(fp)
20085c08:	10800168 	cmpgeui	r2,r2,5
20085c0c:	1000251e 	bne	r2,zero,20085ca4 <mmc_startup+0x230>
20085c10:	e0bef217 	ldw	r2,-1080(fp)
20085c14:	100690ba 	slli	r3,r2,2
20085c18:	00880234 	movhi	r2,8200
20085c1c:	10970b04 	addi	r2,r2,23596
20085c20:	1885883a 	add	r2,r3,r2
20085c24:	10800017 	ldw	r2,0(r2)
20085c28:	1000683a 	jmp	r2
20085c2c:	20085c40 	call	220085c4 <__flash_rwdata_start+0x1f697d8>
20085c30:	20085c54 	ori	zero,r4,8561
20085c34:	20085c68 	cmpgeui	zero,r4,8561
20085c38:	20085c7c 	xorhi	zero,r4,8561
20085c3c:	20085c90 	cmplti	zero,r4,8562
		case 0:
			mmc->version = MMC_VERSION_1_2;
20085c40:	e0ffff17 	ldw	r3,-4(fp)
20085c44:	00800074 	movhi	r2,1
20085c48:	10800484 	addi	r2,r2,18
20085c4c:	18800a15 	stw	r2,40(r3)
			break;
20085c50:	00001906 	br	20085cb8 <mmc_startup+0x244>
		case 1:
			mmc->version = MMC_VERSION_1_4;
20085c54:	e0ffff17 	ldw	r3,-4(fp)
20085c58:	00800074 	movhi	r2,1
20085c5c:	10800504 	addi	r2,r2,20
20085c60:	18800a15 	stw	r2,40(r3)
			break;
20085c64:	00001406 	br	20085cb8 <mmc_startup+0x244>
		case 2:
			mmc->version = MMC_VERSION_2_2;
20085c68:	e0ffff17 	ldw	r3,-4(fp)
20085c6c:	00800074 	movhi	r2,1
20085c70:	10800884 	addi	r2,r2,34
20085c74:	18800a15 	stw	r2,40(r3)
			break;
20085c78:	00000f06 	br	20085cb8 <mmc_startup+0x244>
		case 3:
			mmc->version = MMC_VERSION_3;
20085c7c:	e0ffff17 	ldw	r3,-4(fp)
20085c80:	00800074 	movhi	r2,1
20085c84:	10800c04 	addi	r2,r2,48
20085c88:	18800a15 	stw	r2,40(r3)
			break;
20085c8c:	00000a06 	br	20085cb8 <mmc_startup+0x244>
		case 4:
			mmc->version = MMC_VERSION_4;
20085c90:	e0ffff17 	ldw	r3,-4(fp)
20085c94:	00800074 	movhi	r2,1
20085c98:	10801004 	addi	r2,r2,64
20085c9c:	18800a15 	stw	r2,40(r3)
			break;
20085ca0:	00000506 	br	20085cb8 <mmc_startup+0x244>
		default:
			mmc->version = MMC_VERSION_1_2;
20085ca4:	e0ffff17 	ldw	r3,-4(fp)
20085ca8:	00800074 	movhi	r2,1
20085cac:	10800484 	addi	r2,r2,18
20085cb0:	18800a15 	stw	r2,40(r3)
			break;
20085cb4:	0001883a 	nop
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20085cb8:	e0befb17 	ldw	r2,-1044(fp)
20085cbc:	10c001cc 	andi	r3,r2,7
20085cc0:	00800034 	movhi	r2,0
20085cc4:	1080b704 	addi	r2,r2,732
20085cc8:	18c7883a 	add	r3,r3,r3
20085ccc:	18c7883a 	add	r3,r3,r3
20085cd0:	10c5883a 	add	r2,r2,r3
20085cd4:	10800017 	ldw	r2,0(r2)
20085cd8:	e0bef315 	stw	r2,-1076(fp)
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20085cdc:	e0befb17 	ldw	r2,-1044(fp)
20085ce0:	1004d0fa 	srli	r2,r2,3
20085ce4:	10c003cc 	andi	r3,r2,15
20085ce8:	00800034 	movhi	r2,0
20085cec:	1080bb04 	addi	r2,r2,748
20085cf0:	18c7883a 	add	r3,r3,r3
20085cf4:	18c7883a 	add	r3,r3,r3
20085cf8:	10c5883a 	add	r2,r2,r3
20085cfc:	10800017 	ldw	r2,0(r2)
20085d00:	e0bef415 	stw	r2,-1072(fp)

	mmc->tran_speed = freq * mult;
20085d04:	e0fef317 	ldw	r3,-1076(fp)
20085d08:	e0bef417 	ldw	r2,-1072(fp)
20085d0c:	1887383a 	mul	r3,r3,r2
20085d10:	e0bfff17 	ldw	r2,-4(fp)
20085d14:	10c01f15 	stw	r3,124(r2)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20085d18:	e0befc17 	ldw	r2,-1040(fp)
20085d1c:	1004d43a 	srli	r2,r2,16
20085d20:	108003cc 	andi	r2,r2,15
20085d24:	00c00044 	movi	r3,1
20085d28:	1884983a 	sll	r2,r3,r2
20085d2c:	1007883a 	mov	r3,r2
20085d30:	e0bfff17 	ldw	r2,-4(fp)
20085d34:	10c02015 	stw	r3,128(r2)

	if (IS_SD(mmc))
20085d38:	e0bfff17 	ldw	r2,-4(fp)
20085d3c:	10800a17 	ldw	r2,40(r2)
20085d40:	108000ac 	andhi	r2,r2,2
20085d44:	10000526 	beq	r2,zero,20085d5c <mmc_startup+0x2e8>
		mmc->write_bl_len = mmc->read_bl_len;
20085d48:	e0bfff17 	ldw	r2,-4(fp)
20085d4c:	10c02017 	ldw	r3,128(r2)
20085d50:	e0bfff17 	ldw	r2,-4(fp)
20085d54:	10c02115 	stw	r3,132(r2)
20085d58:	00000806 	br	20085d7c <mmc_startup+0x308>
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
20085d5c:	e0befe17 	ldw	r2,-1032(fp)
20085d60:	1004d5ba 	srli	r2,r2,22
20085d64:	108003cc 	andi	r2,r2,15
20085d68:	00c00044 	movi	r3,1
20085d6c:	1884983a 	sll	r2,r3,r2
20085d70:	1007883a 	mov	r3,r2
20085d74:	e0bfff17 	ldw	r2,-4(fp)
20085d78:	10c02115 	stw	r3,132(r2)

	if (mmc->high_capacity) {
20085d7c:	e0bfff17 	ldw	r2,-4(fp)
20085d80:	10800e17 	ldw	r2,56(r2)
20085d84:	10000c26 	beq	r2,zero,20085db8 <mmc_startup+0x344>
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
20085d88:	e0bfff17 	ldw	r2,-4(fp)
20085d8c:	10801717 	ldw	r2,92(r2)
20085d90:	10800fcc 	andi	r2,r2,63
20085d94:	1006943a 	slli	r3,r2,16
20085d98:	e0bfff17 	ldw	r2,-4(fp)
20085d9c:	10801817 	ldw	r2,96(r2)
20085da0:	1004d43a 	srli	r2,r2,16
20085da4:	1884b03a 	or	r2,r3,r2
20085da8:	e0bef015 	stw	r2,-1088(fp)
		cmult = 8;
20085dac:	00800204 	movi	r2,8
20085db0:	e0beef15 	stw	r2,-1092(fp)
20085db4:	00001206 	br	20085e00 <mmc_startup+0x38c>
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20085db8:	e0bfff17 	ldw	r2,-4(fp)
20085dbc:	10801717 	ldw	r2,92(r2)
20085dc0:	1080ffcc 	andi	r2,r2,1023
20085dc4:	1085883a 	add	r2,r2,r2
20085dc8:	1085883a 	add	r2,r2,r2
20085dcc:	1007883a 	mov	r3,r2
20085dd0:	e0bfff17 	ldw	r2,-4(fp)
20085dd4:	10801817 	ldw	r2,96(r2)
20085dd8:	1004d7ba 	srli	r2,r2,30
20085ddc:	1884b03a 	or	r2,r3,r2
20085de0:	e0bef015 	stw	r2,-1088(fp)
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20085de4:	e0bfff17 	ldw	r2,-4(fp)
20085de8:	10c01817 	ldw	r3,96(r2)
20085dec:	00800134 	movhi	r2,4
20085df0:	10a00004 	addi	r2,r2,-32768
20085df4:	1884703a 	and	r2,r3,r2
20085df8:	1004d3fa 	srli	r2,r2,15
20085dfc:	e0beef15 	stw	r2,-1092(fp)
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
20085e00:	e0bef017 	ldw	r2,-1088(fp)
20085e04:	10800044 	addi	r2,r2,1
20085e08:	e0feef17 	ldw	r3,-1092(fp)
20085e0c:	18c00084 	addi	r3,r3,2
20085e10:	10c6983a 	sll	r3,r2,r3
20085e14:	e0bfff17 	ldw	r2,-4(fp)
20085e18:	10c02315 	stw	r3,140(r2)
	mmc->capacity *= mmc->read_bl_len;
20085e1c:	e0bfff17 	ldw	r2,-4(fp)
20085e20:	10c02317 	ldw	r3,140(r2)
20085e24:	e0bfff17 	ldw	r2,-4(fp)
20085e28:	10802017 	ldw	r2,128(r2)
20085e2c:	1887383a 	mul	r3,r3,r2
20085e30:	e0bfff17 	ldw	r2,-4(fp)
20085e34:	10c02315 	stw	r3,140(r2)

	if (mmc->read_bl_len > 512)
20085e38:	e0bfff17 	ldw	r2,-4(fp)
20085e3c:	10802017 	ldw	r2,128(r2)
20085e40:	10808070 	cmpltui	r2,r2,513
20085e44:	1000031e 	bne	r2,zero,20085e54 <mmc_startup+0x3e0>
		mmc->read_bl_len = 512;
20085e48:	e0bfff17 	ldw	r2,-4(fp)
20085e4c:	00c08004 	movi	r3,512
20085e50:	10c02015 	stw	r3,128(r2)

	if (mmc->write_bl_len > 512)
20085e54:	e0bfff17 	ldw	r2,-4(fp)
20085e58:	10802117 	ldw	r2,132(r2)
20085e5c:	10808070 	cmpltui	r2,r2,513
20085e60:	1000031e 	bne	r2,zero,20085e70 <mmc_startup+0x3fc>
		mmc->write_bl_len = 512;
20085e64:	e0bfff17 	ldw	r2,-4(fp)
20085e68:	00c08004 	movi	r3,512
20085e6c:	10c02115 	stw	r3,132(r2)

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20085e70:	008001c4 	movi	r2,7
20085e74:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R1;
20085e78:	00800544 	movi	r2,21
20085e7c:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20085e80:	e0bfff17 	ldw	r2,-4(fp)
20085e84:	10801e0b 	ldhu	r2,120(r2)
20085e88:	10bfffcc 	andi	r2,r2,65535
20085e8c:	1004943a 	slli	r2,r2,16
20085e90:	e0befa15 	stw	r2,-1048(fp)
	err = mmc_send_cmd(mmc, &cmd, NULL);
20085e94:	e0bef804 	addi	r2,fp,-1056
20085e98:	e13fff17 	ldw	r4,-4(fp)
20085e9c:	100b883a 	mov	r5,r2
20085ea0:	000d883a 	mov	r6,zero
20085ea4:	0084d640 	call	20084d64 <mmc_send_cmd>
20085ea8:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20085eac:	e0beed17 	ldw	r2,-1100(fp)
20085eb0:	10000226 	beq	r2,zero,20085ebc <mmc_startup+0x448>
		return err;
20085eb4:	e0beed17 	ldw	r2,-1100(fp)
20085eb8:	00013406 	br	2008638c <mmc_startup+0x918>

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20085ebc:	e0bfff17 	ldw	r2,-4(fp)
20085ec0:	00c00044 	movi	r3,1
20085ec4:	10c02215 	stw	r3,136(r2)
	mmc->part_config = MMCPART_NOAVAILABLE;
20085ec8:	e0bfff17 	ldw	r2,-4(fp)
20085ecc:	00ffffc4 	movi	r3,-1
20085ed0:	10c01e85 	stb	r3,122(r2)
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20085ed4:	e0bfff17 	ldw	r2,-4(fp)
20085ed8:	10800a17 	ldw	r2,40(r2)
20085edc:	108000ac 	andhi	r2,r2,2
20085ee0:	1000621e 	bne	r2,zero,2008606c <mmc_startup+0x5f8>
20085ee4:	e0bfff17 	ldw	r2,-4(fp)
20085ee8:	10c00a17 	ldw	r3,40(r2)
20085eec:	00800074 	movhi	r2,1
20085ef0:	10800fc4 	addi	r2,r2,63
20085ef4:	10c05d2e 	bgeu	r2,r3,2008606c <mmc_startup+0x5f8>
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
20085ef8:	e0beff04 	addi	r2,fp,-1028
20085efc:	e13fff17 	ldw	r4,-4(fp)
20085f00:	100b883a 	mov	r5,r2
20085f04:	00852c00 	call	200852c0 <mmc_send_ext_csd>
20085f08:	e0beed15 	stw	r2,-1100(fp)
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
20085f0c:	e0beed17 	ldw	r2,-1100(fp)
20085f10:	1005003a 	cmpeq	r2,r2,zero
20085f14:	1007883a 	mov	r3,r2
20085f18:	e0bf2f03 	ldbu	r2,-836(fp)
20085f1c:	10803fcc 	andi	r2,r2,255
20085f20:	1080201c 	xori	r2,r2,128
20085f24:	10bfe004 	addi	r2,r2,-128
20085f28:	10800088 	cmpgei	r2,r2,2
20085f2c:	1884703a 	and	r2,r3,r2
20085f30:	10803fcc 	andi	r2,r2,255
20085f34:	10002126 	beq	r2,zero,20085fbc <mmc_startup+0x548>
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20085f38:	e0bf3403 	ldbu	r2,-816(fp)
20085f3c:	10c03fcc 	andi	r3,r2,255
20085f40:	18c0201c 	xori	r3,r3,128
20085f44:	18ffe004 	addi	r3,r3,-128
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20085f48:	e0bf3443 	ldbu	r2,-815(fp)
20085f4c:	10803fcc 	andi	r2,r2,255
20085f50:	1080201c 	xori	r2,r2,128
20085f54:	10bfe004 	addi	r2,r2,-128
20085f58:	1004923a 	slli	r2,r2,8
20085f5c:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20085f60:	e0bf3483 	ldbu	r2,-814(fp)
20085f64:	10803fcc 	andi	r2,r2,255
20085f68:	1080201c 	xori	r2,r2,128
20085f6c:	10bfe004 	addi	r2,r2,-128
20085f70:	1004943a 	slli	r2,r2,16
20085f74:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
20085f78:	e0bf34c3 	ldbu	r2,-813(fp)
20085f7c:	10803fcc 	andi	r2,r2,255
20085f80:	1080201c 	xori	r2,r2,128
20085f84:	10bfe004 	addi	r2,r2,-128
20085f88:	1004963a 	slli	r2,r2,24
20085f8c:	1884b03a 	or	r2,r3,r2
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20085f90:	e0bef515 	stw	r2,-1068(fp)
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
20085f94:	e0bef517 	ldw	r2,-1068(fp)
20085f98:	1004927a 	slli	r2,r2,9
20085f9c:	e0bef515 	stw	r2,-1068(fp)
			if ((capacity >> 20) > 2 * 1024)
20085fa0:	e0bef517 	ldw	r2,-1068(fp)
20085fa4:	1004d53a 	srli	r2,r2,20
20085fa8:	10820070 	cmpltui	r2,r2,2049
20085fac:	1000031e 	bne	r2,zero,20085fbc <mmc_startup+0x548>
				mmc->capacity = capacity;
20085fb0:	e0bfff17 	ldw	r2,-4(fp)
20085fb4:	e0fef517 	ldw	r3,-1068(fp)
20085fb8:	10c02315 	stw	r3,140(r2)
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
20085fbc:	e0bf2ac3 	ldbu	r2,-853(fp)
20085fc0:	10803fcc 	andi	r2,r2,255
20085fc4:	1080201c 	xori	r2,r2,128
20085fc8:	10bfe004 	addi	r2,r2,-128
20085fcc:	10000926 	beq	r2,zero,20085ff4 <mmc_startup+0x580>
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20085fd0:	e0bf3703 	ldbu	r2,-804(fp)
					* 1024;
20085fd4:	10803fcc 	andi	r2,r2,255
20085fd8:	1080201c 	xori	r2,r2,128
20085fdc:	10bfe004 	addi	r2,r2,-128
20085fe0:	100494fa 	slli	r2,r2,19
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20085fe4:	1007883a 	mov	r3,r2
20085fe8:	e0bfff17 	ldw	r2,-4(fp)
20085fec:	10c02215 	stw	r3,136(r2)
20085ff0:	00001206 	br	2008603c <mmc_startup+0x5c8>
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20085ff4:	e0bfff17 	ldw	r2,-4(fp)
20085ff8:	10801817 	ldw	r2,96(r2)
20085ffc:	109f000c 	andi	r2,r2,31744
20086000:	1004d2ba 	srli	r2,r2,10
20086004:	e0bef615 	stw	r2,-1064(fp)
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
20086008:	e0bfff17 	ldw	r2,-4(fp)
2008600c:	10801817 	ldw	r2,96(r2)
20086010:	1080f80c 	andi	r2,r2,992
20086014:	1004d17a 	srli	r2,r2,5
20086018:	e0bef715 	stw	r2,-1060(fp)
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
2008601c:	e0bef617 	ldw	r2,-1064(fp)
20086020:	10c00044 	addi	r3,r2,1
20086024:	e0bef717 	ldw	r2,-1060(fp)
20086028:	10800044 	addi	r2,r2,1
2008602c:	1885383a 	mul	r2,r3,r2
20086030:	1007883a 	mov	r3,r2
20086034:	e0bfff17 	ldw	r2,-4(fp)
20086038:	10c02215 	stw	r3,136(r2)
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT)
2008603c:	e0bf2703 	ldbu	r2,-868(fp)
20086040:	10803fcc 	andi	r2,r2,255
20086044:	1080004c 	andi	r2,r2,1
20086048:	1000051e 	bne	r2,zero,20086060 <mmc_startup+0x5ec>
				|| ext_csd[EXT_CSD_BOOT_MULT])
2008604c:	e0bf3783 	ldbu	r2,-802(fp)
20086050:	10803fcc 	andi	r2,r2,255
20086054:	1080201c 	xori	r2,r2,128
20086058:	10bfe004 	addi	r2,r2,-128
2008605c:	10000326 	beq	r2,zero,2008606c <mmc_startup+0x5f8>
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
20086060:	e0ff2bc3 	ldbu	r3,-849(fp)
20086064:	e0bfff17 	ldw	r2,-4(fp)
20086068:	10c01e85 	stb	r3,122(r2)
	}

	if (IS_SD(mmc))
2008606c:	e0bfff17 	ldw	r2,-4(fp)
20086070:	10800a17 	ldw	r2,40(r2)
20086074:	108000ac 	andhi	r2,r2,2
20086078:	10000426 	beq	r2,zero,2008608c <mmc_startup+0x618>
		err = sd_change_freq(mmc);
2008607c:	e13fff17 	ldw	r4,-4(fp)
20086080:	00855c80 	call	200855c8 <sd_change_freq>
20086084:	e0beed15 	stw	r2,-1100(fp)
20086088:	00000306 	br	20086098 <mmc_startup+0x624>
	else
		err = mmc_change_freq(mmc);
2008608c:	e13fff17 	ldw	r4,-4(fp)
20086090:	00859500 	call	20085950 <mmc_change_freq>
20086094:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20086098:	e0beed17 	ldw	r2,-1100(fp)
2008609c:	10000226 	beq	r2,zero,200860a8 <mmc_startup+0x634>
		return err;
200860a0:	e0beed17 	ldw	r2,-1100(fp)
200860a4:	0000b906 	br	2008638c <mmc_startup+0x918>

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
200860a8:	e0bfff17 	ldw	r2,-4(fp)
200860ac:	10c01117 	ldw	r3,68(r2)
200860b0:	e0bfff17 	ldw	r2,-4(fp)
200860b4:	10801217 	ldw	r2,72(r2)
200860b8:	1886703a 	and	r3,r3,r2
200860bc:	e0bfff17 	ldw	r2,-4(fp)
200860c0:	10c01115 	stw	r3,68(r2)

	if (IS_SD(mmc)) {
200860c4:	e0bfff17 	ldw	r2,-4(fp)
200860c8:	10800a17 	ldw	r2,40(r2)
200860cc:	108000ac 	andhi	r2,r2,2
200860d0:	10003826 	beq	r2,zero,200861b4 <mmc_startup+0x740>
		if (mmc->card_caps & MMC_MODE_4BIT) {
200860d4:	e0bfff17 	ldw	r2,-4(fp)
200860d8:	10801117 	ldw	r2,68(r2)
200860dc:	1080400c 	andi	r2,r2,256
200860e0:	10002626 	beq	r2,zero,2008617c <mmc_startup+0x708>
			cmd.cmdidx = MMC_CMD_APP_CMD;
200860e4:	00800dc4 	movi	r2,55
200860e8:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
200860ec:	00800544 	movi	r2,21
200860f0:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = mmc->rca << 16;
200860f4:	e0bfff17 	ldw	r2,-4(fp)
200860f8:	10801e0b 	ldhu	r2,120(r2)
200860fc:	10bfffcc 	andi	r2,r2,65535
20086100:	1004943a 	slli	r2,r2,16
20086104:	e0befa15 	stw	r2,-1048(fp)

			err = mmc_send_cmd(mmc, &cmd, NULL);
20086108:	e0bef804 	addi	r2,fp,-1056
2008610c:	e13fff17 	ldw	r4,-4(fp)
20086110:	100b883a 	mov	r5,r2
20086114:	000d883a 	mov	r6,zero
20086118:	0084d640 	call	20084d64 <mmc_send_cmd>
2008611c:	e0beed15 	stw	r2,-1100(fp)
			if (err)
20086120:	e0beed17 	ldw	r2,-1100(fp)
20086124:	10000226 	beq	r2,zero,20086130 <mmc_startup+0x6bc>
				return err;
20086128:	e0beed17 	ldw	r2,-1100(fp)
2008612c:	00009706 	br	2008638c <mmc_startup+0x918>

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
20086130:	00800184 	movi	r2,6
20086134:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
20086138:	00800544 	movi	r2,21
2008613c:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = 2;
20086140:	00800084 	movi	r2,2
20086144:	e0befa15 	stw	r2,-1048(fp)
			err = mmc_send_cmd(mmc, &cmd, NULL);
20086148:	e0bef804 	addi	r2,fp,-1056
2008614c:	e13fff17 	ldw	r4,-4(fp)
20086150:	100b883a 	mov	r5,r2
20086154:	000d883a 	mov	r6,zero
20086158:	0084d640 	call	20084d64 <mmc_send_cmd>
2008615c:	e0beed15 	stw	r2,-1100(fp)
			if (err)
20086160:	e0beed17 	ldw	r2,-1100(fp)
20086164:	10000226 	beq	r2,zero,20086170 <mmc_startup+0x6fc>
				return err;
20086168:	e0beed17 	ldw	r2,-1100(fp)
2008616c:	00008706 	br	2008638c <mmc_startup+0x918>

			mmc_set_bus_width(mmc, 4);
20086170:	e13fff17 	ldw	r4,-4(fp)
20086174:	01400104 	movi	r5,4
20086178:	0084cac0 	call	20084cac <mmc_set_bus_width>
		}

		if (mmc->card_caps & MMC_MODE_HS)
2008617c:	e0bfff17 	ldw	r2,-4(fp)
20086180:	10801117 	ldw	r2,68(r2)
20086184:	1080004c 	andi	r2,r2,1
20086188:	10000526 	beq	r2,zero,200861a0 <mmc_startup+0x72c>
			mmc->tran_speed = 50000000;
2008618c:	e0ffff17 	ldw	r3,-4(fp)
20086190:	0080bef4 	movhi	r2,763
20086194:	10bc2004 	addi	r2,r2,-3968
20086198:	18801f15 	stw	r2,124(r3)
2008619c:	00007506 	br	20086374 <mmc_startup+0x900>
		else
			mmc->tran_speed = 25000000;
200861a0:	e0ffff17 	ldw	r3,-4(fp)
200861a4:	00805f74 	movhi	r2,381
200861a8:	109e1004 	addi	r2,r2,30784
200861ac:	18801f15 	stw	r2,124(r3)
200861b0:	00007006 	br	20086374 <mmc_startup+0x900>
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
200861b4:	e0bfff17 	ldw	r2,-4(fp)
200861b8:	10801217 	ldw	r2,72(r2)
200861bc:	1080c00c 	andi	r2,r2,768
200861c0:	1004d23a 	srli	r2,r2,8
200861c4:	e0beee15 	stw	r2,-1096(fp)
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
200861c8:	00005706 	br	20086328 <mmc_startup+0x8b4>
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
200861cc:	e0beee17 	ldw	r2,-1096(fp)
200861d0:	10803fcc 	andi	r2,r2,255
200861d4:	1080201c 	xori	r2,r2,128
200861d8:	10bfe004 	addi	r2,r2,-128
200861dc:	e13fff17 	ldw	r4,-4(fp)
200861e0:	01400044 	movi	r5,1
200861e4:	01bfedc4 	movi	r6,-73
200861e8:	100f883a 	mov	r7,r2
200861ec:	00853400 	call	20085340 <mmc_switch>
200861f0:	e0beed15 	stw	r2,-1100(fp)
			EXT_CSD_BUS_WIDTH, width);

			if (err)
200861f4:	e0beed17 	ldw	r2,-1100(fp)
200861f8:	10000126 	beq	r2,zero,20086200 <mmc_startup+0x78c>
				continue;
200861fc:	00004706 	br	2008631c <mmc_startup+0x8a8>

			if (!width) {
20086200:	e0beee17 	ldw	r2,-1096(fp)
20086204:	1000041e 	bne	r2,zero,20086218 <mmc_startup+0x7a4>
				mmc_set_bus_width(mmc, 1);
20086208:	e13fff17 	ldw	r4,-4(fp)
2008620c:	01400044 	movi	r5,1
20086210:	0084cac0 	call	20084cac <mmc_set_bus_width>
				break;
20086214:	00004606 	br	20086330 <mmc_startup+0x8bc>
			} else
				mmc_set_bus_width(mmc, 4 * width);
20086218:	e0beee17 	ldw	r2,-1096(fp)
2008621c:	1085883a 	add	r2,r2,r2
20086220:	1085883a 	add	r2,r2,r2
20086224:	e13fff17 	ldw	r4,-4(fp)
20086228:	100b883a 	mov	r5,r2
2008622c:	0084cac0 	call	20084cac <mmc_set_bus_width>

			err = mmc_send_ext_csd(mmc, test_csd);
20086230:	e0bf7f04 	addi	r2,fp,-516
20086234:	e13fff17 	ldw	r4,-4(fp)
20086238:	100b883a 	mov	r5,r2
2008623c:	00852c00 	call	200852c0 <mmc_send_ext_csd>
20086240:	e0beed15 	stw	r2,-1100(fp)
			if (!err
20086244:	e0beed17 	ldw	r2,-1100(fp)
20086248:	1000341e 	bne	r2,zero,2008631c <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
2008624c:	e0ff2703 	ldbu	r3,-868(fp)
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
20086250:	e0bfa703 	ldbu	r2,-356(fp)
			} else
				mmc_set_bus_width(mmc, 4 * width);

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
20086254:	18c03fcc 	andi	r3,r3,255
20086258:	18c0201c 	xori	r3,r3,128
2008625c:	18ffe004 	addi	r3,r3,-128
20086260:	10803fcc 	andi	r2,r2,255
20086264:	1080201c 	xori	r2,r2,128
20086268:	10bfe004 	addi	r2,r2,-128
2008626c:	18802b1e 	bne	r3,r2,2008631c <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
20086270:	e0ff2ac3 	ldbu	r3,-853(fp)
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
20086274:	e0bfaac3 	ldbu	r2,-341(fp)

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
20086278:	18c03fcc 	andi	r3,r3,255
2008627c:	18c0201c 	xori	r3,r3,128
20086280:	18ffe004 	addi	r3,r3,-128
20086284:	10803fcc 	andi	r2,r2,255
20086288:	1080201c 	xori	r2,r2,128
2008628c:	10bfe004 	addi	r2,r2,-128
20086290:	1880221e 	bne	r3,r2,2008631c <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
20086294:	e0ff2f03 	ldbu	r3,-836(fp)
20086298:	e0bfaf03 	ldbu	r2,-324(fp)
2008629c:	18c03fcc 	andi	r3,r3,255
200862a0:	18c0201c 	xori	r3,r3,128
200862a4:	18ffe004 	addi	r3,r3,-128
200862a8:	10803fcc 	andi	r2,r2,255
200862ac:	1080201c 	xori	r2,r2,128
200862b0:	10bfe004 	addi	r2,r2,-128
200862b4:	1880191e 	bne	r3,r2,2008631c <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
200862b8:	e0ff3703 	ldbu	r3,-804(fp)
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
200862bc:	e0bfb703 	ldbu	r2,-292(fp)
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
200862c0:	18c03fcc 	andi	r3,r3,255
200862c4:	18c0201c 	xori	r3,r3,128
200862c8:	18ffe004 	addi	r3,r3,-128
200862cc:	10803fcc 	andi	r2,r2,255
200862d0:	1080201c 	xori	r2,r2,128
200862d4:	10bfe004 	addi	r2,r2,-128
200862d8:	1880101e 	bne	r3,r2,2008631c <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
					&& memcmp(&ext_csd[EXT_CSD_SEC_CNT],
200862dc:	e0beff04 	addi	r2,fp,-1028
200862e0:	10c03504 	addi	r3,r2,212
200862e4:	e0bf7f04 	addi	r2,fp,-516
200862e8:	10803504 	addi	r2,r2,212
200862ec:	1809883a 	mov	r4,r3
200862f0:	100b883a 	mov	r5,r2
200862f4:	01800104 	movi	r6,4
200862f8:	008be9c0 	call	2008be9c <memcmp>
200862fc:	1000071e 	bne	r2,zero,2008631c <mmc_startup+0x8a8>
							&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
20086300:	e0bfff17 	ldw	r2,-4(fp)
20086304:	10c01117 	ldw	r3,68(r2)
20086308:	e0beee17 	ldw	r2,-1096(fp)
2008630c:	1886b03a 	or	r3,r3,r2
20086310:	e0bfff17 	ldw	r2,-4(fp)
20086314:	10c01115 	stw	r3,68(r2)
				break;
20086318:	00000506 	br	20086330 <mmc_startup+0x8bc>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
2008631c:	e0beee17 	ldw	r2,-1096(fp)
20086320:	10bfffc4 	addi	r2,r2,-1
20086324:	e0beee15 	stw	r2,-1096(fp)
20086328:	e0beee17 	ldw	r2,-1096(fp)
2008632c:	103fa70e 	bge	r2,zero,200861cc <__flash_rwdata_start+0xfffe73e0>
				mmc->card_caps |= width;
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
20086330:	e0bfff17 	ldw	r2,-4(fp)
20086334:	10801117 	ldw	r2,68(r2)
20086338:	1080004c 	andi	r2,r2,1
2008633c:	10000d26 	beq	r2,zero,20086374 <mmc_startup+0x900>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
20086340:	e0bfff17 	ldw	r2,-4(fp)
20086344:	10801117 	ldw	r2,68(r2)
20086348:	1080040c 	andi	r2,r2,16
2008634c:	10000526 	beq	r2,zero,20086364 <mmc_startup+0x8f0>
				mmc->tran_speed = 52000000;
20086350:	e0ffff17 	ldw	r3,-4(fp)
20086354:	0080c674 	movhi	r2,793
20086358:	109d4004 	addi	r2,r2,29952
2008635c:	18801f15 	stw	r2,124(r3)
20086360:	00000406 	br	20086374 <mmc_startup+0x900>
			else
				mmc->tran_speed = 26000000;
20086364:	e0ffff17 	ldw	r3,-4(fp)
20086368:	00806374 	movhi	r2,397
2008636c:	10aea004 	addi	r2,r2,-17792
20086370:	18801f15 	stw	r2,124(r3)
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);
20086374:	e0bfff17 	ldw	r2,-4(fp)
20086378:	10801f17 	ldw	r2,124(r2)
2008637c:	e13fff17 	ldw	r4,-4(fp)
20086380:	100b883a 	mov	r5,r2
20086384:	0084cec0 	call	20084cec <mmc_set_clock>

	return 0;
20086388:	0005883a 	mov	r2,zero
}
2008638c:	e037883a 	mov	sp,fp
20086390:	dfc00117 	ldw	ra,4(sp)
20086394:	df000017 	ldw	fp,0(sp)
20086398:	dec00204 	addi	sp,sp,8
2008639c:	f800283a 	ret

200863a0 <mmc_set_blocklen>:

static int mmc_set_blocklen(struct mmc *mmc, int len) {
200863a0:	defff504 	addi	sp,sp,-44
200863a4:	dfc00a15 	stw	ra,40(sp)
200863a8:	df000915 	stw	fp,36(sp)
200863ac:	df000904 	addi	fp,sp,36
200863b0:	e13ffe15 	stw	r4,-8(fp)
200863b4:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
200863b8:	00800404 	movi	r2,16
200863bc:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
200863c0:	00800544 	movi	r2,21
200863c4:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = len;
200863c8:	e0bfff17 	ldw	r2,-4(fp)
200863cc:	e0bff915 	stw	r2,-28(fp)

	return mmc_send_cmd(mmc, &cmd, NULL);
200863d0:	e13ffe17 	ldw	r4,-8(fp)
200863d4:	e17ff704 	addi	r5,fp,-36
200863d8:	000d883a 	mov	r6,zero
200863dc:	0084d640 	call	20084d64 <mmc_send_cmd>
}
200863e0:	e037883a 	mov	sp,fp
200863e4:	dfc00117 	ldw	ra,4(sp)
200863e8:	df000017 	ldw	fp,0(sp)
200863ec:	dec00204 	addi	sp,sp,8
200863f0:	f800283a 	ret

200863f4 <mmc_read_blocks>:

static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
200863f4:	deffef04 	addi	sp,sp,-68
200863f8:	dfc01015 	stw	ra,64(sp)
200863fc:	df000f15 	stw	fp,60(sp)
20086400:	df000f04 	addi	fp,sp,60
20086404:	e13ffc15 	stw	r4,-16(fp)
20086408:	e17ffd15 	stw	r5,-12(fp)
2008640c:	e1bffe15 	stw	r6,-8(fp)
20086410:	e1ffff15 	stw	r7,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
20086414:	e0bfff17 	ldw	r2,-4(fp)
20086418:	108000b0 	cmpltui	r2,r2,2
2008641c:	1000031e 	bne	r2,zero,2008642c <mmc_read_blocks+0x38>
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
20086420:	00800484 	movi	r2,18
20086424:	e0bff10d 	sth	r2,-60(fp)
20086428:	00000206 	br	20086434 <mmc_read_blocks+0x40>
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
2008642c:	00800444 	movi	r2,17
20086430:	e0bff10d 	sth	r2,-60(fp)

	if (mmc->high_capacity)
20086434:	e0bffc17 	ldw	r2,-16(fp)
20086438:	10800e17 	ldw	r2,56(r2)
2008643c:	10000326 	beq	r2,zero,2008644c <mmc_read_blocks+0x58>
		cmd.cmdarg = start;
20086440:	e0bffe17 	ldw	r2,-8(fp)
20086444:	e0bff315 	stw	r2,-52(fp)
20086448:	00000506 	br	20086460 <mmc_read_blocks+0x6c>
	else
		cmd.cmdarg = start * mmc->read_bl_len;
2008644c:	e0bffc17 	ldw	r2,-16(fp)
20086450:	10c02017 	ldw	r3,128(r2)
20086454:	e0bffe17 	ldw	r2,-8(fp)
20086458:	1885383a 	mul	r2,r3,r2
2008645c:	e0bff315 	stw	r2,-52(fp)

	cmd.resp_type = MMC_RSP_R1;
20086460:	00800544 	movi	r2,21
20086464:	e0bff215 	stw	r2,-56(fp)

	data.dest = dst;
20086468:	e0bffd17 	ldw	r2,-12(fp)
2008646c:	e0bff815 	stw	r2,-32(fp)
	data.blocks = blkcnt;
20086470:	e0bfff17 	ldw	r2,-4(fp)
20086474:	e0bffa15 	stw	r2,-24(fp)
	data.blocksize = mmc->read_bl_len;
20086478:	e0bffc17 	ldw	r2,-16(fp)
2008647c:	10802017 	ldw	r2,128(r2)
20086480:	e0bffb15 	stw	r2,-20(fp)
	data.flags = MMC_DATA_READ;
20086484:	00800044 	movi	r2,1
20086488:	e0bff915 	stw	r2,-28(fp)

	if (mmc_send_cmd(mmc, &cmd, &data))
2008648c:	e0bff804 	addi	r2,fp,-32
20086490:	e13ffc17 	ldw	r4,-16(fp)
20086494:	e17ff104 	addi	r5,fp,-60
20086498:	100d883a 	mov	r6,r2
2008649c:	0084d640 	call	20084d64 <mmc_send_cmd>
200864a0:	10000226 	beq	r2,zero,200864ac <mmc_read_blocks+0xb8>
		return 0;
200864a4:	0005883a 	mov	r2,zero
200864a8:	00001306 	br	200864f8 <mmc_read_blocks+0x104>

	if (blkcnt > 1) {
200864ac:	e0bfff17 	ldw	r2,-4(fp)
200864b0:	108000b0 	cmpltui	r2,r2,2
200864b4:	10000f1e 	bne	r2,zero,200864f4 <mmc_read_blocks+0x100>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
200864b8:	00800304 	movi	r2,12
200864bc:	e0bff10d 	sth	r2,-60(fp)
		cmd.cmdarg = 0;
200864c0:	e03ff315 	stw	zero,-52(fp)
		cmd.resp_type = MMC_RSP_R1b;
200864c4:	00800744 	movi	r2,29
200864c8:	e0bff215 	stw	r2,-56(fp)
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
200864cc:	e13ffc17 	ldw	r4,-16(fp)
200864d0:	e17ff104 	addi	r5,fp,-60
200864d4:	000d883a 	mov	r6,zero
200864d8:	0084d640 	call	20084d64 <mmc_send_cmd>
200864dc:	10000526 	beq	r2,zero,200864f4 <mmc_read_blocks+0x100>
			printf("mmc fail to send stop cmd\n");
200864e0:	01000034 	movhi	r4,0
200864e4:	2100d904 	addi	r4,r4,868
200864e8:	008c2a40 	call	2008c2a4 <puts>
			return 0;
200864ec:	0005883a 	mov	r2,zero
200864f0:	00000106 	br	200864f8 <mmc_read_blocks+0x104>
		}
	}

	return blkcnt;
200864f4:	e0bfff17 	ldw	r2,-4(fp)
}
200864f8:	e037883a 	mov	sp,fp
200864fc:	dfc00117 	ldw	ra,4(sp)
20086500:	df000017 	ldw	fp,0(sp)
20086504:	dec00204 	addi	sp,sp,8
20086508:	f800283a 	ret

2008650c <mmc_init>:

int mmc_init(struct mmc *mmc) {
2008650c:	defffc04 	addi	sp,sp,-16
20086510:	dfc00315 	stw	ra,12(sp)
20086514:	df000215 	stw	fp,8(sp)
20086518:	df000204 	addi	fp,sp,8
2008651c:	e13fff15 	stw	r4,-4(fp)
	int err;

	if (mmc->has_init)
20086520:	e0bfff17 	ldw	r2,-4(fp)
20086524:	10800b17 	ldw	r2,44(r2)
20086528:	10000226 	beq	r2,zero,20086534 <mmc_init+0x28>
		return 0;
2008652c:	0005883a 	mov	r2,zero
20086530:	00003706 	br	20086610 <mmc_init+0x104>

	err = mmc->init(mmc);
20086534:	e0bfff17 	ldw	r2,-4(fp)
20086538:	10802617 	ldw	r2,152(r2)
2008653c:	e13fff17 	ldw	r4,-4(fp)
20086540:	103ee83a 	callr	r2
20086544:	e0bffe15 	stw	r2,-8(fp)

	if (err)
20086548:	e0bffe17 	ldw	r2,-8(fp)
2008654c:	10000226 	beq	r2,zero,20086558 <mmc_init+0x4c>
		return err;
20086550:	e0bffe17 	ldw	r2,-8(fp)
20086554:	00002e06 	br	20086610 <mmc_init+0x104>

	mmc_set_bus_width(mmc, 1);
20086558:	e13fff17 	ldw	r4,-4(fp)
2008655c:	01400044 	movi	r5,1
20086560:	0084cac0 	call	20084cac <mmc_set_bus_width>
	mmc_set_clock(mmc, 1);
20086564:	e13fff17 	ldw	r4,-4(fp)
20086568:	01400044 	movi	r5,1
2008656c:	0084cec0 	call	20084cec <mmc_set_clock>

	/* Reset the Card */
	err = mmc_go_idle(mmc);
20086570:	e13fff17 	ldw	r4,-4(fp)
20086574:	0084db40 	call	20084db4 <mmc_go_idle>
20086578:	e0bffe15 	stw	r2,-8(fp)

	if (err)
2008657c:	e0bffe17 	ldw	r2,-8(fp)
20086580:	10000226 	beq	r2,zero,2008658c <mmc_init+0x80>
		return err;
20086584:	e0bffe17 	ldw	r2,-8(fp)
20086588:	00002106 	br	20086610 <mmc_init+0x104>

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
2008658c:	e0bfff17 	ldw	r2,-4(fp)
20086590:	10001ec5 	stb	zero,123(r2)

	/* Test for SD version 2 */
	err = mmc_send_if_cond(mmc);
20086594:	e13fff17 	ldw	r4,-4(fp)
20086598:	0084e240 	call	20084e24 <mmc_send_if_cond>
2008659c:	e0bffe15 	stw	r2,-8(fp)

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);
200865a0:	e13fff17 	ldw	r4,-4(fp)
200865a4:	0084ed80 	call	20084ed8 <sd_send_op_cond>
200865a8:	e0bffe15 	stw	r2,-8(fp)

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
200865ac:	e0bffe17 	ldw	r2,-8(fp)
200865b0:	10bffb58 	cmpnei	r2,r2,-19
200865b4:	10000a1e 	bne	r2,zero,200865e0 <mmc_init+0xd4>
		err = mmc_send_op_cond(mmc);
200865b8:	e13fff17 	ldw	r4,-4(fp)
200865bc:	008503c0 	call	2008503c <mmc_send_op_cond>
200865c0:	e0bffe15 	stw	r2,-8(fp)

		if (err) {
200865c4:	e0bffe17 	ldw	r2,-8(fp)
200865c8:	10000526 	beq	r2,zero,200865e0 <mmc_init+0xd4>
			printf("Card did not respond to voltage select!\n\r");
200865cc:	01000034 	movhi	r4,0
200865d0:	2100e004 	addi	r4,r4,896
200865d4:	008c1a00 	call	2008c1a0 <printf>
			return UNUSABLE_ERR;
200865d8:	00bffbc4 	movi	r2,-17
200865dc:	00000c06 	br	20086610 <mmc_init+0x104>
		}
	}

	err = mmc_startup(mmc);
200865e0:	e13fff17 	ldw	r4,-4(fp)
200865e4:	0085a740 	call	20085a74 <mmc_startup>
200865e8:	e0bffe15 	stw	r2,-8(fp)
	if (err)
200865ec:	e0bffe17 	ldw	r2,-8(fp)
200865f0:	10000326 	beq	r2,zero,20086600 <mmc_init+0xf4>
		mmc->has_init = 0;
200865f4:	e0bfff17 	ldw	r2,-4(fp)
200865f8:	10000b15 	stw	zero,44(r2)
200865fc:	00000306 	br	2008660c <mmc_init+0x100>
	else
		mmc->has_init = 1;
20086600:	e0bfff17 	ldw	r2,-4(fp)
20086604:	00c00044 	movi	r3,1
20086608:	10c00b15 	stw	r3,44(r2)
	return err;
2008660c:	e0bffe17 	ldw	r2,-8(fp)
}
20086610:	e037883a 	mov	sp,fp
20086614:	dfc00117 	ldw	ra,4(sp)
20086618:	df000017 	ldw	fp,0(sp)
2008661c:	dec00204 	addi	sp,sp,8
20086620:	f800283a 	ret

20086624 <mmc_bread>:

size_t mmc_bread(struct mmc *mmc, size_t start, size_t blkcnt, void *dst) {
20086624:	defff604 	addi	sp,sp,-40
20086628:	dfc00915 	stw	ra,36(sp)
2008662c:	df000815 	stw	fp,32(sp)
20086630:	dc000715 	stw	r16,28(sp)
20086634:	df000804 	addi	fp,sp,32
20086638:	e13ffb15 	stw	r4,-20(fp)
2008663c:	e17ffc15 	stw	r5,-16(fp)
20086640:	e1bffd15 	stw	r6,-12(fp)
20086644:	e1fffe15 	stw	r7,-8(fp)
	size_t cur, blocks_todo = blkcnt;
20086648:	e0bffd17 	ldw	r2,-12(fp)
2008664c:	e0bff915 	stw	r2,-28(fp)

	if (blkcnt == 0)
20086650:	e0bffd17 	ldw	r2,-12(fp)
20086654:	1000021e 	bne	r2,zero,20086660 <mmc_bread+0x3c>
		return 0;
20086658:	0005883a 	mov	r2,zero
2008665c:	00004c06 	br	20086790 <mmc_bread+0x16c>

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
20086660:	e0fffc17 	ldw	r3,-16(fp)
20086664:	e0bffd17 	ldw	r2,-12(fp)
20086668:	18a1883a 	add	r16,r3,r2
2008666c:	e0bffb17 	ldw	r2,-20(fp)
20086670:	10c02317 	ldw	r3,140(r2)
20086674:	e0bffb17 	ldw	r2,-20(fp)
20086678:	10802017 	ldw	r2,128(r2)
2008667c:	1809883a 	mov	r4,r3
20086680:	100b883a 	mov	r5,r2
20086684:	0088bf00 	call	20088bf0 <__udivsi3>
20086688:	1400172e 	bgeu	r2,r16,200866e8 <mmc_bread+0xc4>
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
2008668c:	e0fffc17 	ldw	r3,-16(fp)
20086690:	e0bffd17 	ldw	r2,-12(fp)
20086694:	18a1883a 	add	r16,r3,r2
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
20086698:	e0bffb17 	ldw	r2,-20(fp)
2008669c:	10c02317 	ldw	r3,140(r2)
200866a0:	e0bffb17 	ldw	r2,-20(fp)
200866a4:	10802017 	ldw	r2,128(r2)

	if (blkcnt == 0)
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
200866a8:	1809883a 	mov	r4,r3
200866ac:	100b883a 	mov	r5,r2
200866b0:	0088bf00 	call	20088bf0 <__udivsi3>
200866b4:	100d883a 	mov	r6,r2
200866b8:	e0bffb17 	ldw	r2,-20(fp)
200866bc:	10c02317 	ldw	r3,140(r2)
200866c0:	e0bffb17 	ldw	r2,-20(fp)
200866c4:	10802017 	ldw	r2,128(r2)
200866c8:	d8800015 	stw	r2,0(sp)
200866cc:	01000034 	movhi	r4,0
200866d0:	2100eb04 	addi	r4,r4,940
200866d4:	800b883a 	mov	r5,r16
200866d8:	180f883a 	mov	r7,r3
200866dc:	008c1a00 	call	2008c1a0 <printf>
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
200866e0:	0005883a 	mov	r2,zero
200866e4:	00002a06 	br	20086790 <mmc_bread+0x16c>
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
200866e8:	e0bffb17 	ldw	r2,-20(fp)
200866ec:	10802017 	ldw	r2,128(r2)
200866f0:	e13ffb17 	ldw	r4,-20(fp)
200866f4:	100b883a 	mov	r5,r2
200866f8:	00863a00 	call	200863a0 <mmc_set_blocklen>
200866fc:	10000226 	beq	r2,zero,20086708 <mmc_bread+0xe4>
		return 0;
20086700:	0005883a 	mov	r2,zero
20086704:	00002206 	br	20086790 <mmc_bread+0x16c>

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;
20086708:	e0bffb17 	ldw	r2,-20(fp)
2008670c:	10802817 	ldw	r2,160(r2)
20086710:	e0fff917 	ldw	r3,-28(fp)
20086714:	1880012e 	bgeu	r3,r2,2008671c <mmc_bread+0xf8>
20086718:	1805883a 	mov	r2,r3
2008671c:	e0bffa15 	stw	r2,-24(fp)

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
20086720:	e13ffb17 	ldw	r4,-20(fp)
20086724:	e17ffe17 	ldw	r5,-8(fp)
20086728:	e1bffc17 	ldw	r6,-16(fp)
2008672c:	e1fffa17 	ldw	r7,-24(fp)
20086730:	00863f40 	call	200863f4 <mmc_read_blocks>
20086734:	1007883a 	mov	r3,r2
20086738:	e0bffa17 	ldw	r2,-24(fp)
2008673c:	18800226 	beq	r3,r2,20086748 <mmc_bread+0x124>
			return 0;
20086740:	0005883a 	mov	r2,zero
20086744:	00001206 	br	20086790 <mmc_bread+0x16c>

		blocks_todo -= cur;
20086748:	e0fff917 	ldw	r3,-28(fp)
2008674c:	e0bffa17 	ldw	r2,-24(fp)
20086750:	1885c83a 	sub	r2,r3,r2
20086754:	e0bff915 	stw	r2,-28(fp)
		start += cur;
20086758:	e0fffc17 	ldw	r3,-16(fp)
2008675c:	e0bffa17 	ldw	r2,-24(fp)
20086760:	1885883a 	add	r2,r3,r2
20086764:	e0bffc15 	stw	r2,-16(fp)
		dst += cur * mmc->read_bl_len;
20086768:	e0bffb17 	ldw	r2,-20(fp)
2008676c:	10c02017 	ldw	r3,128(r2)
20086770:	e0bffa17 	ldw	r2,-24(fp)
20086774:	1885383a 	mul	r2,r3,r2
20086778:	e0fffe17 	ldw	r3,-8(fp)
2008677c:	1885883a 	add	r2,r3,r2
20086780:	e0bffe15 	stw	r2,-8(fp)
	} while (blocks_todo > 0);
20086784:	e0bff917 	ldw	r2,-28(fp)
20086788:	103fdf1e 	bne	r2,zero,20086708 <__flash_rwdata_start+0xfffe791c>

	return blkcnt;
2008678c:	e0bffd17 	ldw	r2,-12(fp)
}
20086790:	e6ffff04 	addi	sp,fp,-4
20086794:	dfc00217 	ldw	ra,8(sp)
20086798:	df000117 	ldw	fp,4(sp)
2008679c:	dc000017 	ldw	r16,0(sp)
200867a0:	dec00304 	addi	sp,sp,12
200867a4:	f800283a 	ret

200867a8 <print_mmcinfo>:

void print_mmcinfo(struct mmc *mmc) {
200867a8:	defffb04 	addi	sp,sp,-20
200867ac:	dfc00415 	stw	ra,16(sp)
200867b0:	df000315 	stw	fp,12(sp)
200867b4:	df000304 	addi	fp,sp,12
200867b8:	e13fff15 	stw	r4,-4(fp)
	printf("Device: %s\n\r", mmc->name);
200867bc:	e0bfff17 	ldw	r2,-4(fp)
200867c0:	01000034 	movhi	r4,0
200867c4:	2100f904 	addi	r4,r4,996
200867c8:	100b883a 	mov	r5,r2
200867cc:	008c1a00 	call	2008c1a0 <printf>
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
200867d0:	e0bfff17 	ldw	r2,-4(fp)
200867d4:	10801a17 	ldw	r2,104(r2)
200867d8:	1004d63a 	srli	r2,r2,24
200867dc:	01000034 	movhi	r4,0
200867e0:	2100fd04 	addi	r4,r4,1012
200867e4:	100b883a 	mov	r5,r2
200867e8:	008c1a00 	call	2008c1a0 <printf>
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
200867ec:	e0bfff17 	ldw	r2,-4(fp)
200867f0:	10801a17 	ldw	r2,104(r2)
200867f4:	1004d23a 	srli	r2,r2,8
200867f8:	10bfffcc 	andi	r2,r2,65535
200867fc:	01000034 	movhi	r4,0
20086800:	21010304 	addi	r4,r4,1036
20086804:	100b883a 	mov	r5,r2
20086808:	008c1a00 	call	2008c1a0 <printf>
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
2008680c:	e0bfff17 	ldw	r2,-4(fp)
20086810:	10801a17 	ldw	r2,104(r2)
20086814:	11403fcc 	andi	r5,r2,255
20086818:	e0bfff17 	ldw	r2,-4(fp)
2008681c:	10801b17 	ldw	r2,108(r2)
20086820:	100cd63a 	srli	r6,r2,24
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
20086824:	e0bfff17 	ldw	r2,-4(fp)
20086828:	10801b17 	ldw	r2,108(r2)
2008682c:	1004d43a 	srli	r2,r2,16

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20086830:	11c03fcc 	andi	r7,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
20086834:	e0bfff17 	ldw	r2,-4(fp)
20086838:	10801b17 	ldw	r2,108(r2)
2008683c:	1004d23a 	srli	r2,r2,8

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20086840:	10c03fcc 	andi	r3,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);
20086844:	e0bfff17 	ldw	r2,-4(fp)
20086848:	10801b17 	ldw	r2,108(r2)

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
2008684c:	10803fcc 	andi	r2,r2,255
20086850:	d8c00015 	stw	r3,0(sp)
20086854:	d8800115 	stw	r2,4(sp)
20086858:	01000034 	movhi	r4,0
2008685c:	21010604 	addi	r4,r4,1048
20086860:	008c1a00 	call	2008c1a0 <printf>
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
20086864:	e0bfff17 	ldw	r2,-4(fp)
20086868:	10801f17 	ldw	r2,124(r2)
2008686c:	01000034 	movhi	r4,0
20086870:	21010b04 	addi	r4,r4,1068
20086874:	100b883a 	mov	r5,r2
20086878:	008c1a00 	call	2008c1a0 <printf>
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);
2008687c:	e0bfff17 	ldw	r2,-4(fp)
20086880:	10802017 	ldw	r2,128(r2)
20086884:	01000034 	movhi	r4,0
20086888:	21011004 	addi	r4,r4,1088
2008688c:	100b883a 	mov	r5,r2
20086890:	008c1a00 	call	2008c1a0 <printf>

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20086894:	e0bfff17 	ldw	r2,-4(fp)
20086898:	10800a17 	ldw	r2,40(r2)
2008689c:	108000ac 	andhi	r2,r2,2
200868a0:	10000326 	beq	r2,zero,200868b0 <print_mmcinfo+0x108>
200868a4:	00800034 	movhi	r2,0
200868a8:	10811504 	addi	r2,r2,1108
200868ac:	00000206 	br	200868b8 <print_mmcinfo+0x110>
200868b0:	00800034 	movhi	r2,0
200868b4:	10811604 	addi	r2,r2,1112
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
200868b8:	e0ffff17 	ldw	r3,-4(fp)
200868bc:	18c00a17 	ldw	r3,40(r3)
200868c0:	1806d13a 	srli	r3,r3,4
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
200868c4:	198003cc 	andi	r6,r3,15
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
200868c8:	e0ffff17 	ldw	r3,-4(fp)
200868cc:	18c00a17 	ldw	r3,40(r3)
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
200868d0:	18c003cc 	andi	r3,r3,15
200868d4:	01000034 	movhi	r4,0
200868d8:	21011704 	addi	r4,r4,1116
200868dc:	100b883a 	mov	r5,r2
200868e0:	180f883a 	mov	r7,r3
200868e4:	008c1a00 	call	2008c1a0 <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
200868e8:	e0bfff17 	ldw	r2,-4(fp)
200868ec:	10800e17 	ldw	r2,56(r2)
200868f0:	10000326 	beq	r2,zero,20086900 <print_mmcinfo+0x158>
200868f4:	00800034 	movhi	r2,0
200868f8:	10811c04 	addi	r2,r2,1136
200868fc:	00000206 	br	20086908 <print_mmcinfo+0x160>
20086900:	00800034 	movhi	r2,0
20086904:	10811d04 	addi	r2,r2,1140
20086908:	01000034 	movhi	r4,0
2008690c:	21011e04 	addi	r4,r4,1144
20086910:	100b883a 	mov	r5,r2
20086914:	008c1a00 	call	2008c1a0 <printf>
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);
20086918:	e0bfff17 	ldw	r2,-4(fp)
2008691c:	10802317 	ldw	r2,140(r2)
20086920:	1004d53a 	srli	r2,r2,20
20086924:	01000034 	movhi	r4,0
20086928:	21012304 	addi	r4,r4,1164
2008692c:	100b883a 	mov	r5,r2
20086930:	008c1a00 	call	2008c1a0 <printf>

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
20086934:	e0bfff17 	ldw	r2,-4(fp)
20086938:	10800f17 	ldw	r2,60(r2)
2008693c:	01000034 	movhi	r4,0
20086940:	21012804 	addi	r4,r4,1184
20086944:	100b883a 	mov	r5,r2
20086948:	008c1a00 	call	2008c1a0 <printf>
}
2008694c:	e037883a 	mov	sp,fp
20086950:	dfc00117 	ldw	ra,4(sp)
20086954:	df000017 	ldw	fp,0(sp)
20086958:	dec00204 	addi	sp,sp,8
2008695c:	f800283a 	ret

20086960 <flush_dcache_range>:
	int clk_freq;
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
20086960:	defffc04 	addi	sp,sp,-16
20086964:	dfc00315 	stw	ra,12(sp)
20086968:	df000215 	stw	fp,8(sp)
2008696c:	df000204 	addi	fp,sp,8
20086970:	e13ffe15 	stw	r4,-8(fp)
20086974:	e17fff15 	stw	r5,-4(fp)
	alt_dcache_flush(start, end-start);
20086978:	e0ffff17 	ldw	r3,-4(fp)
2008697c:	e0bffe17 	ldw	r2,-8(fp)
20086980:	1885c83a 	sub	r2,r3,r2
20086984:	e13ffe17 	ldw	r4,-8(fp)
20086988:	100b883a 	mov	r5,r2
2008698c:	00997000 	call	20099700 <alt_dcache_flush>
}
20086990:	e037883a 	mov	sp,fp
20086994:	dfc00117 	ldw	ra,4(sp)
20086998:	df000017 	ldw	fp,0(sp)
2008699c:	dec00204 	addi	sp,sp,8
200869a0:	f800283a 	ret

200869a4 <ocsdc_read>:

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
200869a4:	defffd04 	addi	sp,sp,-12
200869a8:	df000215 	stw	fp,8(sp)
200869ac:	df000204 	addi	fp,sp,8
200869b0:	e13ffe15 	stw	r4,-8(fp)
200869b4:	e17fff15 	stw	r5,-4(fp)
	return IORD(dev->iobase, offset);
200869b8:	e0bfff17 	ldw	r2,-4(fp)
200869bc:	1085883a 	add	r2,r2,r2
200869c0:	1085883a 	add	r2,r2,r2
200869c4:	1007883a 	mov	r3,r2
200869c8:	e0bffe17 	ldw	r2,-8(fp)
200869cc:	10800017 	ldw	r2,0(r2)
200869d0:	1885883a 	add	r2,r3,r2
200869d4:	10800037 	ldwio	r2,0(r2)
}
200869d8:	e037883a 	mov	sp,fp
200869dc:	df000017 	ldw	fp,0(sp)
200869e0:	dec00104 	addi	sp,sp,4
200869e4:	f800283a 	ret

200869e8 <ocsdc_write>:

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
200869e8:	defffc04 	addi	sp,sp,-16
200869ec:	df000315 	stw	fp,12(sp)
200869f0:	df000304 	addi	fp,sp,12
200869f4:	e13ffd15 	stw	r4,-12(fp)
200869f8:	e17ffe15 	stw	r5,-8(fp)
200869fc:	e1bfff15 	stw	r6,-4(fp)
	IOWR(dev->iobase, offset, data);
20086a00:	e0bffe17 	ldw	r2,-8(fp)
20086a04:	1085883a 	add	r2,r2,r2
20086a08:	1085883a 	add	r2,r2,r2
20086a0c:	1007883a 	mov	r3,r2
20086a10:	e0bffd17 	ldw	r2,-12(fp)
20086a14:	10800017 	ldw	r2,0(r2)
20086a18:	1885883a 	add	r2,r3,r2
20086a1c:	1007883a 	mov	r3,r2
20086a20:	e0bfff17 	ldw	r2,-4(fp)
20086a24:	18800035 	stwio	r2,0(r3)
}
20086a28:	e037883a 	mov	sp,fp
20086a2c:	df000017 	ldw	fp,0(sp)
20086a30:	dec00104 	addi	sp,sp,4
20086a34:	f800283a 	ret

20086a38 <ocsdc_set_buswidth>:

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
20086a38:	defffc04 	addi	sp,sp,-16
20086a3c:	dfc00315 	stw	ra,12(sp)
20086a40:	df000215 	stw	fp,8(sp)
20086a44:	df000204 	addi	fp,sp,8
20086a48:	e13ffe15 	stw	r4,-8(fp)
20086a4c:	e17fff15 	stw	r5,-4(fp)
	if (width == 4)
20086a50:	e0bfff17 	ldw	r2,-4(fp)
20086a54:	10800118 	cmpnei	r2,r2,4
20086a58:	1000051e 	bne	r2,zero,20086a70 <ocsdc_set_buswidth+0x38>
		ocsdc_write(dev, OCSDC_CONTROL, 1);
20086a5c:	e13ffe17 	ldw	r4,-8(fp)
20086a60:	01400704 	movi	r5,28
20086a64:	01800044 	movi	r6,1
20086a68:	00869e80 	call	200869e8 <ocsdc_write>
20086a6c:	00000706 	br	20086a8c <ocsdc_set_buswidth+0x54>
	else if (width == 1)
20086a70:	e0bfff17 	ldw	r2,-4(fp)
20086a74:	10800058 	cmpnei	r2,r2,1
20086a78:	1000041e 	bne	r2,zero,20086a8c <ocsdc_set_buswidth+0x54>
		ocsdc_write(dev, OCSDC_CONTROL, 0);
20086a7c:	e13ffe17 	ldw	r4,-8(fp)
20086a80:	01400704 	movi	r5,28
20086a84:	000d883a 	mov	r6,zero
20086a88:	00869e80 	call	200869e8 <ocsdc_write>
}
20086a8c:	e037883a 	mov	sp,fp
20086a90:	dfc00117 	ldw	ra,4(sp)
20086a94:	df000017 	ldw	fp,0(sp)
20086a98:	dec00204 	addi	sp,sp,8
20086a9c:	f800283a 	ret

20086aa0 <ocsdc_set_clock>:

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
20086aa0:	defff904 	addi	sp,sp,-28
20086aa4:	dfc00615 	stw	ra,24(sp)
20086aa8:	df000515 	stw	fp,20(sp)
20086aac:	dc400415 	stw	r17,16(sp)
20086ab0:	dc000315 	stw	r16,12(sp)
20086ab4:	df000504 	addi	fp,sp,20
20086ab8:	e13ffc15 	stw	r4,-16(fp)
20086abc:	e17ffd15 	stw	r5,-12(fp)
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20086ac0:	e0bffc17 	ldw	r2,-16(fp)
20086ac4:	10800117 	ldw	r2,4(r2)
20086ac8:	1007883a 	mov	r3,r2
20086acc:	e0bffd17 	ldw	r2,-12(fp)
20086ad0:	18802926 	beq	r3,r2,20086b78 <ocsdc_set_clock+0xd8>
20086ad4:	e0bffc17 	ldw	r2,-16(fp)
20086ad8:	10800117 	ldw	r2,4(r2)
20086adc:	1009883a 	mov	r4,r2
20086ae0:	008b0440 	call	2008b044 <__floatsidf>
20086ae4:	1021883a 	mov	r16,r2
20086ae8:	1823883a 	mov	r17,r3
20086aec:	e13ffd17 	ldw	r4,-12(fp)
20086af0:	008b1140 	call	2008b114 <__floatunsidf>
20086af4:	100f883a 	mov	r7,r2
20086af8:	1811883a 	mov	r8,r3
20086afc:	3809883a 	mov	r4,r7
20086b00:	400b883a 	mov	r5,r8
20086b04:	380d883a 	mov	r6,r7
20086b08:	400f883a 	mov	r7,r8
20086b0c:	00895840 	call	20089584 <__adddf3>
20086b10:	1009883a 	mov	r4,r2
20086b14:	180b883a 	mov	r5,r3
20086b18:	2005883a 	mov	r2,r4
20086b1c:	2807883a 	mov	r3,r5
20086b20:	8009883a 	mov	r4,r16
20086b24:	880b883a 	mov	r5,r17
20086b28:	100d883a 	mov	r6,r2
20086b2c:	180f883a 	mov	r7,r3
20086b30:	0089e200 	call	20089e20 <__divdf3>
20086b34:	1009883a 	mov	r4,r2
20086b38:	180b883a 	mov	r5,r3
20086b3c:	2005883a 	mov	r2,r4
20086b40:	2807883a 	mov	r3,r5
20086b44:	1009883a 	mov	r4,r2
20086b48:	180b883a 	mov	r5,r3
20086b4c:	000d883a 	mov	r6,zero
20086b50:	01cffc34 	movhi	r7,16368
20086b54:	008a6ec0 	call	2008a6ec <__subdf3>
20086b58:	1009883a 	mov	r4,r2
20086b5c:	180b883a 	mov	r5,r3
20086b60:	2005883a 	mov	r2,r4
20086b64:	2807883a 	mov	r3,r5
20086b68:	1009883a 	mov	r4,r2
20086b6c:	180b883a 	mov	r5,r3
20086b70:	008afbc0 	call	2008afbc <__fixdfsi>
20086b74:	00000106 	br	20086b7c <ocsdc_set_clock+0xdc>
20086b78:	00802004 	movi	r2,128
20086b7c:	e0bffb15 	stw	r2,-20(fp)

	OCSDC_PRINT(("ocsdc_set_clock %d, div %d\n\r", clock, clk_div));
	//software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 1);
20086b80:	e13ffc17 	ldw	r4,-16(fp)
20086b84:	01400a04 	movi	r5,40
20086b88:	01800044 	movi	r6,1
20086b8c:	00869e80 	call	200869e8 <ocsdc_write>
	//set clock devider
	ocsdc_write(dev, OCSDC_CLOCK_DIVIDER, clk_div);
20086b90:	e0bffb17 	ldw	r2,-20(fp)
20086b94:	e13ffc17 	ldw	r4,-16(fp)
20086b98:	01400904 	movi	r5,36
20086b9c:	100d883a 	mov	r6,r2
20086ba0:	00869e80 	call	200869e8 <ocsdc_write>
	//clear software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 0);
20086ba4:	e13ffc17 	ldw	r4,-16(fp)
20086ba8:	01400a04 	movi	r5,40
20086bac:	000d883a 	mov	r6,zero
20086bb0:	00869e80 	call	200869e8 <ocsdc_write>
}
20086bb4:	e6fffe04 	addi	sp,fp,-8
20086bb8:	dfc00317 	ldw	ra,12(sp)
20086bbc:	df000217 	ldw	fp,8(sp)
20086bc0:	dc400117 	ldw	r17,4(sp)
20086bc4:	dc000017 	ldw	r16,0(sp)
20086bc8:	dec00404 	addi	sp,sp,16
20086bcc:	f800283a 	ret

20086bd0 <ocsdc_finish>:

static int ocsdc_finish(struct ocsdc * dev, struct mmc_cmd *cmd) {
20086bd0:	defffa04 	addi	sp,sp,-24
20086bd4:	dfc00515 	stw	ra,20(sp)
20086bd8:	df000415 	stw	fp,16(sp)
20086bdc:	df000404 	addi	fp,sp,16
20086be0:	e13ffe15 	stw	r4,-8(fp)
20086be4:	e17fff15 	stw	r5,-4(fp)

	int retval = 0;
20086be8:	e03ffc15 	stw	zero,-16(fp)
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
20086bec:	e13ffe17 	ldw	r4,-8(fp)
20086bf0:	01400d04 	movi	r5,52
20086bf4:	00869a40 	call	200869a4 <ocsdc_read>
20086bf8:	e0bffd15 	stw	r2,-12(fp)
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20086bfc:	e0bffd17 	ldw	r2,-12(fp)
20086c00:	1080008c 	andi	r2,r2,2
20086c04:	10000726 	beq	r2,zero,20086c24 <ocsdc_finish+0x54>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20086c08:	e13ffe17 	ldw	r4,-8(fp)
20086c0c:	01400d04 	movi	r5,52
20086c10:	000d883a 	mov	r6,zero
20086c14:	00869e80 	call	200869e8 <ocsdc_write>
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
20086c18:	00bfffc4 	movi	r2,-1
20086c1c:	e0bffc15 	stw	r2,-16(fp)
			break;
20086c20:	00002606 	br	20086cbc <ocsdc_finish+0xec>
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20086c24:	e0bffd17 	ldw	r2,-12(fp)
20086c28:	1080004c 	andi	r2,r2,1
20086c2c:	10002226 	beq	r2,zero,20086cb8 <ocsdc_finish+0xe8>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20086c30:	e13ffe17 	ldw	r4,-8(fp)
20086c34:	01400d04 	movi	r5,52
20086c38:	000d883a 	mov	r6,zero
20086c3c:	00869e80 	call	200869e8 <ocsdc_write>
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
20086c40:	e13ffe17 	ldw	r4,-8(fp)
20086c44:	01400204 	movi	r5,8
20086c48:	00869a40 	call	200869a4 <ocsdc_read>
20086c4c:	1007883a 	mov	r3,r2
20086c50:	e0bfff17 	ldw	r2,-4(fp)
20086c54:	10c00315 	stw	r3,12(r2)
			if (cmd->resp_type & MMC_RSP_136) {
20086c58:	e0bfff17 	ldw	r2,-4(fp)
20086c5c:	10800117 	ldw	r2,4(r2)
20086c60:	1080008c 	andi	r2,r2,2
20086c64:	10001226 	beq	r2,zero,20086cb0 <ocsdc_finish+0xe0>
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
20086c68:	e13ffe17 	ldw	r4,-8(fp)
20086c6c:	01400304 	movi	r5,12
20086c70:	00869a40 	call	200869a4 <ocsdc_read>
20086c74:	1007883a 	mov	r3,r2
20086c78:	e0bfff17 	ldw	r2,-4(fp)
20086c7c:	10c00415 	stw	r3,16(r2)
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
20086c80:	e13ffe17 	ldw	r4,-8(fp)
20086c84:	01400404 	movi	r5,16
20086c88:	00869a40 	call	200869a4 <ocsdc_read>
20086c8c:	1007883a 	mov	r3,r2
20086c90:	e0bfff17 	ldw	r2,-4(fp)
20086c94:	10c00515 	stw	r3,20(r2)
				cmd->response[3] = ocsdc_read(dev, OCSDC_RESPONSE_4);
20086c98:	e13ffe17 	ldw	r4,-8(fp)
20086c9c:	01400504 	movi	r5,20
20086ca0:	00869a40 	call	200869a4 <ocsdc_read>
20086ca4:	1007883a 	mov	r3,r2
20086ca8:	e0bfff17 	ldw	r2,-4(fp)
20086cac:	10c00615 	stw	r3,24(r2)
			}
			OCSDC_PRINT(("ocsdc_finish:  %d ok\n\r", cmd->cmdidx));
			retval = 0;
20086cb0:	e03ffc15 	stw	zero,-16(fp)

			break;
20086cb4:	00000106 	br	20086cbc <ocsdc_finish+0xec>
		}
		//else if (!(r2 & OCSDC_CMD_INT_STATUS_CIE)) {
		//	printf("ocsdc_finish: cmd %d no exec %x\n", cmd->cmdidx, r2);
		//}
	}
20086cb8:	003fcc06 	br	20086bec <__flash_rwdata_start+0xfffe7e00>
	return retval;
20086cbc:	e0bffc17 	ldw	r2,-16(fp)
}
20086cc0:	e037883a 	mov	sp,fp
20086cc4:	dfc00117 	ldw	ra,4(sp)
20086cc8:	df000017 	ldw	fp,0(sp)
20086ccc:	dec00204 	addi	sp,sp,8
20086cd0:	f800283a 	ret

20086cd4 <ocsdc_data_finish>:

static int ocsdc_data_finish(struct ocsdc * dev) {
20086cd4:	defffc04 	addi	sp,sp,-16
20086cd8:	dfc00315 	stw	ra,12(sp)
20086cdc:	df000215 	stw	fp,8(sp)
20086ce0:	df000204 	addi	fp,sp,8
20086ce4:	e13fff15 	stw	r4,-4(fp)
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
20086ce8:	0001883a 	nop
20086cec:	e13fff17 	ldw	r4,-4(fp)
20086cf0:	01400f04 	movi	r5,60
20086cf4:	00869a40 	call	200869a4 <ocsdc_read>
20086cf8:	e0bffe15 	stw	r2,-8(fp)
20086cfc:	e0bffe17 	ldw	r2,-8(fp)
20086d00:	103ffa26 	beq	r2,zero,20086cec <__flash_rwdata_start+0xfffe7f00>
    ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
20086d04:	e13fff17 	ldw	r4,-4(fp)
20086d08:	01400f04 	movi	r5,60
20086d0c:	000d883a 	mov	r6,zero
20086d10:	00869e80 	call	200869e8 <ocsdc_write>

    if (status & SDCMSC_DAT_INT_STATUS_TRS) {
20086d14:	e0bffe17 	ldw	r2,-8(fp)
20086d18:	1080004c 	andi	r2,r2,1
20086d1c:	10000226 	beq	r2,zero,20086d28 <ocsdc_data_finish+0x54>
    	OCSDC_PRINT(("ocsdc_data_finish: ok\n\r"));
    	return 0;
20086d20:	0005883a 	mov	r2,zero
20086d24:	00000106 	br	20086d2c <ocsdc_data_finish+0x58>
    }
    else {
    	OCSDC_PRINT(("ocsdc_data_finish: status %x\n\r", status));
    	return -1;
20086d28:	00bfffc4 	movi	r2,-1
    }
}
20086d2c:	e037883a 	mov	sp,fp
20086d30:	dfc00117 	ldw	ra,4(sp)
20086d34:	df000017 	ldw	fp,0(sp)
20086d38:	dec00204 	addi	sp,sp,8
20086d3c:	f800283a 	ret

20086d40 <ocsdc_setup_data_xfer>:

static void ocsdc_setup_data_xfer(struct ocsdc * dev, struct mmc_cmd *cmd, struct mmc_data *data) {
20086d40:	defffb04 	addi	sp,sp,-20
20086d44:	dfc00415 	stw	ra,16(sp)
20086d48:	df000315 	stw	fp,12(sp)
20086d4c:	df000304 	addi	fp,sp,12
20086d50:	e13ffd15 	stw	r4,-12(fp)
20086d54:	e17ffe15 	stw	r5,-8(fp)
20086d58:	e1bfff15 	stw	r6,-4(fp)

	//invalidate cache
	if (data->flags & MMC_DATA_READ) {
20086d5c:	e0bfff17 	ldw	r2,-4(fp)
20086d60:	10800117 	ldw	r2,4(r2)
20086d64:	1080004c 	andi	r2,r2,1
20086d68:	10001426 	beq	r2,zero,20086dbc <ocsdc_setup_data_xfer+0x7c>
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
20086d6c:	e0bfff17 	ldw	r2,-4(fp)
20086d70:	11400017 	ldw	r5,0(r2)
20086d74:	e0bfff17 	ldw	r2,-4(fp)
20086d78:	10c00017 	ldw	r3,0(r2)
20086d7c:	e0bfff17 	ldw	r2,-4(fp)
20086d80:	11000317 	ldw	r4,12(r2)
20086d84:	e0bfff17 	ldw	r2,-4(fp)
20086d88:	10800217 	ldw	r2,8(r2)
20086d8c:	2085383a 	mul	r2,r4,r2
20086d90:	1885883a 	add	r2,r3,r2
20086d94:	2809883a 	mov	r4,r5
20086d98:	100b883a 	mov	r5,r2
20086d9c:	00869600 	call	20086960 <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->dest);
20086da0:	e0bfff17 	ldw	r2,-4(fp)
20086da4:	10800017 	ldw	r2,0(r2)
20086da8:	e13ffd17 	ldw	r4,-12(fp)
20086dac:	01401804 	movi	r5,96
20086db0:	100d883a 	mov	r6,r2
20086db4:	00869e80 	call	200869e8 <ocsdc_write>
20086db8:	00001306 	br	20086e08 <ocsdc_setup_data_xfer+0xc8>
	}
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
20086dbc:	e0bfff17 	ldw	r2,-4(fp)
20086dc0:	11400017 	ldw	r5,0(r2)
20086dc4:	e0bfff17 	ldw	r2,-4(fp)
20086dc8:	10c00017 	ldw	r3,0(r2)
20086dcc:	e0bfff17 	ldw	r2,-4(fp)
20086dd0:	11000317 	ldw	r4,12(r2)
20086dd4:	e0bfff17 	ldw	r2,-4(fp)
20086dd8:	10800217 	ldw	r2,8(r2)
20086ddc:	2085383a 	mul	r2,r4,r2
20086de0:	1885883a 	add	r2,r3,r2
20086de4:	2809883a 	mov	r4,r5
20086de8:	100b883a 	mov	r5,r2
20086dec:	00869600 	call	20086960 <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
20086df0:	e0bfff17 	ldw	r2,-4(fp)
20086df4:	10800017 	ldw	r2,0(r2)
20086df8:	e13ffd17 	ldw	r4,-12(fp)
20086dfc:	01401804 	movi	r5,96
20086e00:	100d883a 	mov	r6,r2
20086e04:	00869e80 	call	200869e8 <ocsdc_write>
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
20086e08:	e0bfff17 	ldw	r2,-4(fp)
20086e0c:	10800317 	ldw	r2,12(r2)
20086e10:	e13ffd17 	ldw	r4,-12(fp)
20086e14:	01401104 	movi	r5,68
20086e18:	100d883a 	mov	r6,r2
20086e1c:	00869e80 	call	200869e8 <ocsdc_write>
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
20086e20:	e0bfff17 	ldw	r2,-4(fp)
20086e24:	10800217 	ldw	r2,8(r2)
20086e28:	10bfffc4 	addi	r2,r2,-1
20086e2c:	e13ffd17 	ldw	r4,-12(fp)
20086e30:	01401204 	movi	r5,72
20086e34:	100d883a 	mov	r6,r2
20086e38:	00869e80 	call	200869e8 <ocsdc_write>

	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}
20086e3c:	e037883a 	mov	sp,fp
20086e40:	dfc00117 	ldw	ra,4(sp)
20086e44:	df000017 	ldw	fp,0(sp)
20086e48:	dec00204 	addi	sp,sp,8
20086e4c:	f800283a 	ret

20086e50 <ocsdc_send_cmd>:

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20086e50:	defff804 	addi	sp,sp,-32
20086e54:	dfc00715 	stw	ra,28(sp)
20086e58:	df000615 	stw	fp,24(sp)
20086e5c:	df000604 	addi	fp,sp,24
20086e60:	e13ffd15 	stw	r4,-12(fp)
20086e64:	e17ffe15 	stw	r5,-8(fp)
20086e68:	e1bfff15 	stw	r6,-4(fp)
	struct ocsdc * dev = mmc->priv;
20086e6c:	e0bffd17 	ldw	r2,-12(fp)
20086e70:	10800817 	ldw	r2,32(r2)
20086e74:	e0bffb15 	stw	r2,-20(fp)

	int command = (cmd->cmdidx << 8);
20086e78:	e0bffe17 	ldw	r2,-8(fp)
20086e7c:	1080000b 	ldhu	r2,0(r2)
20086e80:	10bfffcc 	andi	r2,r2,65535
20086e84:	1004923a 	slli	r2,r2,8
20086e88:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20086e8c:	e0bffe17 	ldw	r2,-8(fp)
20086e90:	10800117 	ldw	r2,4(r2)
20086e94:	1080004c 	andi	r2,r2,1
20086e98:	10000b26 	beq	r2,zero,20086ec8 <ocsdc_send_cmd+0x78>
		if (cmd->resp_type & MMC_RSP_136)
20086e9c:	e0bffe17 	ldw	r2,-8(fp)
20086ea0:	10800117 	ldw	r2,4(r2)
20086ea4:	1080008c 	andi	r2,r2,2
20086ea8:	10000426 	beq	r2,zero,20086ebc <ocsdc_send_cmd+0x6c>
			command |= 2;
20086eac:	e0bffa17 	ldw	r2,-24(fp)
20086eb0:	10800094 	ori	r2,r2,2
20086eb4:	e0bffa15 	stw	r2,-24(fp)
20086eb8:	00000306 	br	20086ec8 <ocsdc_send_cmd+0x78>
		else {
			command |= 1;
20086ebc:	e0bffa17 	ldw	r2,-24(fp)
20086ec0:	10800054 	ori	r2,r2,1
20086ec4:	e0bffa15 	stw	r2,-24(fp)
		}
	}
	if (cmd->resp_type & MMC_RSP_BUSY)
20086ec8:	e0bffe17 	ldw	r2,-8(fp)
20086ecc:	10800117 	ldw	r2,4(r2)
20086ed0:	1080020c 	andi	r2,r2,8
20086ed4:	10000326 	beq	r2,zero,20086ee4 <ocsdc_send_cmd+0x94>
		command |= (1 << 2);
20086ed8:	e0bffa17 	ldw	r2,-24(fp)
20086edc:	10800114 	ori	r2,r2,4
20086ee0:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_CRC)
20086ee4:	e0bffe17 	ldw	r2,-8(fp)
20086ee8:	10800117 	ldw	r2,4(r2)
20086eec:	1080010c 	andi	r2,r2,4
20086ef0:	10000326 	beq	r2,zero,20086f00 <ocsdc_send_cmd+0xb0>
		command |= (1 << 3);
20086ef4:	e0bffa17 	ldw	r2,-24(fp)
20086ef8:	10800214 	ori	r2,r2,8
20086efc:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_OPCODE)
20086f00:	e0bffe17 	ldw	r2,-8(fp)
20086f04:	10800117 	ldw	r2,4(r2)
20086f08:	1080040c 	andi	r2,r2,16
20086f0c:	10000326 	beq	r2,zero,20086f1c <ocsdc_send_cmd+0xcc>
		command |= (1 << 4);
20086f10:	e0bffa17 	ldw	r2,-24(fp)
20086f14:	10800414 	ori	r2,r2,16
20086f18:	e0bffa15 	stw	r2,-24(fp)

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20086f1c:	e0bfff17 	ldw	r2,-4(fp)
20086f20:	10001d26 	beq	r2,zero,20086f98 <ocsdc_send_cmd+0x148>
20086f24:	e0bfff17 	ldw	r2,-4(fp)
20086f28:	10800117 	ldw	r2,4(r2)
20086f2c:	1080004c 	andi	r2,r2,1
20086f30:	1000041e 	bne	r2,zero,20086f44 <ocsdc_send_cmd+0xf4>
20086f34:	e0bfff17 	ldw	r2,-4(fp)
20086f38:	10800117 	ldw	r2,4(r2)
20086f3c:	1080008c 	andi	r2,r2,2
20086f40:	10001526 	beq	r2,zero,20086f98 <ocsdc_send_cmd+0x148>
20086f44:	e0bfff17 	ldw	r2,-4(fp)
20086f48:	10800217 	ldw	r2,8(r2)
20086f4c:	10001226 	beq	r2,zero,20086f98 <ocsdc_send_cmd+0x148>
		if (data->flags & MMC_DATA_READ)
20086f50:	e0bfff17 	ldw	r2,-4(fp)
20086f54:	10800117 	ldw	r2,4(r2)
20086f58:	1080004c 	andi	r2,r2,1
20086f5c:	10000326 	beq	r2,zero,20086f6c <ocsdc_send_cmd+0x11c>
			command |= (1 << 5);
20086f60:	e0bffa17 	ldw	r2,-24(fp)
20086f64:	10800814 	ori	r2,r2,32
20086f68:	e0bffa15 	stw	r2,-24(fp)
		if (data->flags & MMC_DATA_WRITE)
20086f6c:	e0bfff17 	ldw	r2,-4(fp)
20086f70:	10800117 	ldw	r2,4(r2)
20086f74:	1080008c 	andi	r2,r2,2
20086f78:	10000326 	beq	r2,zero,20086f88 <ocsdc_send_cmd+0x138>
			command |= (1 << 6);
20086f7c:	e0bffa17 	ldw	r2,-24(fp)
20086f80:	10801014 	ori	r2,r2,64
20086f84:	e0bffa15 	stw	r2,-24(fp)
		ocsdc_setup_data_xfer(dev, cmd, data);
20086f88:	e13ffb17 	ldw	r4,-20(fp)
20086f8c:	e17ffe17 	ldw	r5,-8(fp)
20086f90:	e1bfff17 	ldw	r6,-4(fp)
20086f94:	0086d400 	call	20086d40 <ocsdc_setup_data_xfer>
	}

	OCSDC_PRINT(("ocsdc_send_cmd %04x\n\r", command));

	ocsdc_write(dev, OCSDC_COMMAND, command);
20086f98:	e0bffa17 	ldw	r2,-24(fp)
20086f9c:	e13ffb17 	ldw	r4,-20(fp)
20086fa0:	01400104 	movi	r5,4
20086fa4:	100d883a 	mov	r6,r2
20086fa8:	00869e80 	call	200869e8 <ocsdc_write>
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);
20086fac:	e0bffe17 	ldw	r2,-8(fp)
20086fb0:	10800217 	ldw	r2,8(r2)
20086fb4:	e13ffb17 	ldw	r4,-20(fp)
20086fb8:	000b883a 	mov	r5,zero
20086fbc:	100d883a 	mov	r6,r2
20086fc0:	00869e80 	call	200869e8 <ocsdc_write>

	if (ocsdc_finish(dev, cmd) < 0) return -1;
20086fc4:	e13ffb17 	ldw	r4,-20(fp)
20086fc8:	e17ffe17 	ldw	r5,-8(fp)
20086fcc:	0086bd00 	call	20086bd0 <ocsdc_finish>
20086fd0:	1000020e 	bge	r2,zero,20086fdc <ocsdc_send_cmd+0x18c>
20086fd4:	00bfffc4 	movi	r2,-1
20086fd8:	00000b06 	br	20087008 <ocsdc_send_cmd+0x1b8>
	if (data && data->blocks) {
20086fdc:	e0bfff17 	ldw	r2,-4(fp)
20086fe0:	10000826 	beq	r2,zero,20087004 <ocsdc_send_cmd+0x1b4>
20086fe4:	e0bfff17 	ldw	r2,-4(fp)
20086fe8:	10800217 	ldw	r2,8(r2)
20086fec:	10000526 	beq	r2,zero,20087004 <ocsdc_send_cmd+0x1b4>
		bool ret = ocsdc_data_finish(dev);
20086ff0:	e13ffb17 	ldw	r4,-20(fp)
20086ff4:	0086cd40 	call	20086cd4 <ocsdc_data_finish>
20086ff8:	e0bffc15 	stw	r2,-16(fp)

		return ret;
20086ffc:	e0bffc17 	ldw	r2,-16(fp)
20087000:	00000106 	br	20087008 <ocsdc_send_cmd+0x1b8>
	}
	else return 0;
20087004:	0005883a 	mov	r2,zero
}
20087008:	e037883a 	mov	sp,fp
2008700c:	dfc00117 	ldw	ra,4(sp)
20087010:	df000017 	ldw	fp,0(sp)
20087014:	dec00204 	addi	sp,sp,8
20087018:	f800283a 	ret

2008701c <ocsdc_init>:

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
2008701c:	defffc04 	addi	sp,sp,-16
20087020:	dfc00315 	stw	ra,12(sp)
20087024:	df000215 	stw	fp,8(sp)
20087028:	df000204 	addi	fp,sp,8
2008702c:	e13fff15 	stw	r4,-4(fp)
	struct ocsdc * dev = mmc->priv;
20087030:	e0bfff17 	ldw	r2,-4(fp)
20087034:	10800817 	ldw	r2,32(r2)
20087038:	e0bffe15 	stw	r2,-8(fp)

	//set timeout
	ocsdc_write(dev, OCSDC_TIMEOUT, 0x7FFF);
2008703c:	e13ffe17 	ldw	r4,-8(fp)
20087040:	01400804 	movi	r5,32
20087044:	019fffc4 	movi	r6,32767
20087048:	00869e80 	call	200869e8 <ocsdc_write>
	//disable all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_ENABLE, 0);
2008704c:	e13ffe17 	ldw	r4,-8(fp)
20087050:	01400e04 	movi	r5,56
20087054:	000d883a 	mov	r6,zero
20087058:	00869e80 	call	200869e8 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_ENABLE, 0);
2008705c:	e13ffe17 	ldw	r4,-8(fp)
20087060:	01401004 	movi	r5,64
20087064:	000d883a 	mov	r6,zero
20087068:	00869e80 	call	200869e8 <ocsdc_write>
	//clear all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
2008706c:	e13ffe17 	ldw	r4,-8(fp)
20087070:	01400d04 	movi	r5,52
20087074:	000d883a 	mov	r6,zero
20087078:	00869e80 	call	200869e8 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
2008707c:	e13ffe17 	ldw	r4,-8(fp)
20087080:	01400f04 	movi	r5,60
20087084:	000d883a 	mov	r6,zero
20087088:	00869e80 	call	200869e8 <ocsdc_write>
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);
2008708c:	e0bffe17 	ldw	r2,-8(fp)
20087090:	10800117 	ldw	r2,4(r2)
20087094:	1006d7fa 	srli	r3,r2,31
20087098:	1885883a 	add	r2,r3,r2
2008709c:	1005d07a 	srai	r2,r2,1
200870a0:	e13ffe17 	ldw	r4,-8(fp)
200870a4:	100b883a 	mov	r5,r2
200870a8:	0086aa00 	call	20086aa0 <ocsdc_set_clock>

	return 0;
200870ac:	0005883a 	mov	r2,zero
}
200870b0:	e037883a 	mov	sp,fp
200870b4:	dfc00117 	ldw	ra,4(sp)
200870b8:	df000017 	ldw	fp,0(sp)
200870bc:	dec00204 	addi	sp,sp,8
200870c0:	f800283a 	ret

200870c4 <ocsdc_set_ios>:

static void ocsdc_set_ios(struct mmc *mmc)
{
200870c4:	defffd04 	addi	sp,sp,-12
200870c8:	dfc00215 	stw	ra,8(sp)
200870cc:	df000115 	stw	fp,4(sp)
200870d0:	df000104 	addi	fp,sp,4
200870d4:	e13fff15 	stw	r4,-4(fp)
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
200870d8:	e0bfff17 	ldw	r2,-4(fp)
200870dc:	10c00817 	ldw	r3,32(r2)
200870e0:	e0bfff17 	ldw	r2,-4(fp)
200870e4:	10800f17 	ldw	r2,60(r2)
200870e8:	1809883a 	mov	r4,r3
200870ec:	100b883a 	mov	r5,r2
200870f0:	0086a380 	call	20086a38 <ocsdc_set_buswidth>

	/* Set clock speed */
	if (mmc->clock)
200870f4:	e0bfff17 	ldw	r2,-4(fp)
200870f8:	10801017 	ldw	r2,64(r2)
200870fc:	10000726 	beq	r2,zero,2008711c <ocsdc_set_ios+0x58>
		ocsdc_set_clock(mmc->priv, mmc->clock);
20087100:	e0bfff17 	ldw	r2,-4(fp)
20087104:	10c00817 	ldw	r3,32(r2)
20087108:	e0bfff17 	ldw	r2,-4(fp)
2008710c:	10801017 	ldw	r2,64(r2)
20087110:	1809883a 	mov	r4,r3
20087114:	100b883a 	mov	r5,r2
20087118:	0086aa00 	call	20086aa0 <ocsdc_set_clock>
}
2008711c:	e037883a 	mov	sp,fp
20087120:	dfc00117 	ldw	ra,4(sp)
20087124:	df000017 	ldw	fp,0(sp)
20087128:	dec00204 	addi	sp,sp,8
2008712c:	f800283a 	ret

20087130 <ocsdc_mmc_init>:

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20087130:	defffa04 	addi	sp,sp,-24
20087134:	dfc00515 	stw	ra,20(sp)
20087138:	df000415 	stw	fp,16(sp)
2008713c:	df000404 	addi	fp,sp,16
20087140:	e13ffe15 	stw	r4,-8(fp)
20087144:	e17fff15 	stw	r5,-4(fp)
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
20087148:	01002904 	movi	r4,164
2008714c:	008b6cc0 	call	2008b6cc <malloc>
20087150:	e0bffc15 	stw	r2,-16(fp)
	if (!mmc) goto MMC_ALLOC;
20087154:	e0bffc17 	ldw	r2,-16(fp)
20087158:	1000011e 	bne	r2,zero,20087160 <ocsdc_mmc_init+0x30>
2008715c:	00004f06 	br	2008729c <ocsdc_mmc_init+0x16c>
	priv = malloc(sizeof(struct ocsdc));
20087160:	01000204 	movi	r4,8
20087164:	008b6cc0 	call	2008b6cc <malloc>
20087168:	e0bffd15 	stw	r2,-12(fp)
	if (!priv) goto OCSDC_ALLOC;
2008716c:	e0bffd17 	ldw	r2,-12(fp)
20087170:	1000041e 	bne	r2,zero,20087184 <ocsdc_mmc_init+0x54>
20087174:	0001883a 	nop
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
20087178:	e13ffc17 	ldw	r4,-16(fp)
2008717c:	008b6e00 	call	2008b6e0 <free>
20087180:	00004606 	br	2008729c <ocsdc_mmc_init+0x16c>
	mmc = malloc(sizeof(struct mmc));
	if (!mmc) goto MMC_ALLOC;
	priv = malloc(sizeof(struct ocsdc));
	if (!priv) goto OCSDC_ALLOC;

	memset(mmc, 0, sizeof(struct mmc));
20087184:	e13ffc17 	ldw	r4,-16(fp)
20087188:	000b883a 	mov	r5,zero
2008718c:	01802904 	movi	r6,164
20087190:	008c0500 	call	2008c050 <memset>
	memset(priv, 0, sizeof(struct ocsdc));
20087194:	e13ffd17 	ldw	r4,-12(fp)
20087198:	000b883a 	mov	r5,zero
2008719c:	01800204 	movi	r6,8
200871a0:	008c0500 	call	2008c050 <memset>

	priv->iobase = base_addr;
200871a4:	e0bffd17 	ldw	r2,-12(fp)
200871a8:	e0fffe17 	ldw	r3,-8(fp)
200871ac:	10c00015 	stw	r3,0(r2)
	priv->clk_freq = clk_freq;
200871b0:	e0bffd17 	ldw	r2,-12(fp)
200871b4:	e0ffff17 	ldw	r3,-4(fp)
200871b8:	10c00115 	stw	r3,4(r2)

	sprintf(mmc->name, "ocsdc");
200871bc:	e0bffc17 	ldw	r2,-16(fp)
200871c0:	00c01bc4 	movi	r3,111
200871c4:	10c00005 	stb	r3,0(r2)
200871c8:	00c018c4 	movi	r3,99
200871cc:	10c00045 	stb	r3,1(r2)
200871d0:	00c01cc4 	movi	r3,115
200871d4:	10c00085 	stb	r3,2(r2)
200871d8:	00c01904 	movi	r3,100
200871dc:	10c000c5 	stb	r3,3(r2)
200871e0:	00c018c4 	movi	r3,99
200871e4:	10c00105 	stb	r3,4(r2)
200871e8:	10000145 	stb	zero,5(r2)
	mmc->priv = priv;
200871ec:	e0bffc17 	ldw	r2,-16(fp)
200871f0:	e0fffd17 	ldw	r3,-12(fp)
200871f4:	10c00815 	stw	r3,32(r2)
	mmc->send_cmd = ocsdc_send_cmd;
200871f8:	e0fffc17 	ldw	r3,-16(fp)
200871fc:	00880234 	movhi	r2,8200
20087200:	109b9404 	addi	r2,r2,28240
20087204:	18802415 	stw	r2,144(r3)
	mmc->set_ios = ocsdc_set_ios;
20087208:	e0fffc17 	ldw	r3,-16(fp)
2008720c:	00880234 	movhi	r2,8200
20087210:	109c3104 	addi	r2,r2,28868
20087214:	18802515 	stw	r2,148(r3)
	mmc->init = ocsdc_init;
20087218:	e0fffc17 	ldw	r3,-16(fp)
2008721c:	00880234 	movhi	r2,8200
20087220:	109c0704 	addi	r2,r2,28700
20087224:	18802615 	stw	r2,152(r3)
	mmc->getcd = NULL;
20087228:	e0bffc17 	ldw	r2,-16(fp)
2008722c:	10002715 	stw	zero,156(r2)

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
20087230:	e0bffd17 	ldw	r2,-12(fp)
20087234:	10800117 	ldw	r2,4(r2)
20087238:	1009883a 	mov	r4,r2
2008723c:	01400184 	movi	r5,6
20087240:	0088b400 	call	20088b40 <__divsi3>
20087244:	1007883a 	mov	r3,r2
20087248:	e0bffc17 	ldw	r2,-16(fp)
2008724c:	10c00c15 	stw	r3,48(r2)
	mmc->f_max = priv->clk_freq;
20087250:	e0bffd17 	ldw	r2,-12(fp)
20087254:	10800117 	ldw	r2,4(r2)
20087258:	1007883a 	mov	r3,r2
2008725c:	e0bffc17 	ldw	r2,-16(fp)
20087260:	10c00d15 	stw	r3,52(r2)
	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
20087264:	e0bffc17 	ldw	r2,-16(fp)
20087268:	00c00c34 	movhi	r3,48
2008726c:	10c00915 	stw	r3,36(r2)
	mmc->host_caps = MMC_MODE_4BIT;
20087270:	e0bffc17 	ldw	r2,-16(fp)
20087274:	00c04004 	movi	r3,256
20087278:	10c01215 	stw	r3,72(r2)
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
2008727c:	e0bffc17 	ldw	r2,-16(fp)
20087280:	00c04444 	movi	r3,273
20087284:	10c01215 	stw	r3,72(r2)

	mmc->b_max = 256;
20087288:	e0bffc17 	ldw	r2,-16(fp)
2008728c:	00c04004 	movi	r3,256
20087290:	10c02815 	stw	r3,160(r2)

	return mmc;
20087294:	e0bffc17 	ldw	r2,-16(fp)
20087298:	00000106 	br	200872a0 <ocsdc_mmc_init+0x170>

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
2008729c:	0005883a 	mov	r2,zero
}
200872a0:	e037883a 	mov	sp,fp
200872a4:	dfc00117 	ldw	ra,4(sp)
200872a8:	df000017 	ldw	fp,0(sp)
200872ac:	dec00204 	addi	sp,sp,8
200872b0:	f800283a 	ret

200872b4 <SDLIB_Init>:

#define DEBUG_SDCARD_HEX //DEBUG_HEX_PRINTF

struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
200872b4:	defffc04 	addi	sp,sp,-16
200872b8:	dfc00315 	stw	ra,12(sp)
200872bc:	df000215 	stw	fp,8(sp)
200872c0:	df000204 	addi	fp,sp,8
200872c4:	e13fff15 	stw	r4,-4(fp)
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
200872c8:	d0a01717 	ldw	r2,-32676(gp)
200872cc:	1000091e 	bne	r2,zero,200872f4 <SDLIB_Init+0x40>
		sd_drv = ocsdc_mmc_init(base_addr, 50000000);
200872d0:	e13fff17 	ldw	r4,-4(fp)
200872d4:	0140bef4 	movhi	r5,763
200872d8:	297c2004 	addi	r5,r5,-3968
200872dc:	00871300 	call	20087130 <ocsdc_mmc_init>
200872e0:	d0a01715 	stw	r2,-32676(gp)
		if(!sd_drv){
200872e4:	d0a01717 	ldw	r2,-32676(gp)
200872e8:	1000021e 	bne	r2,zero,200872f4 <SDLIB_Init+0x40>
			SDCARD_DEBUG(("ocsdc_mmc_init failed\n\r"));
			return FALSE;
200872ec:	0005883a 	mov	r2,zero
200872f0:	00001106 	br	20087338 <SDLIB_Init+0x84>
		}
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
200872f4:	d0a01717 	ldw	r2,-32676(gp)
200872f8:	10800b17 	ldw	r2,44(r2)
200872fc:	10000226 	beq	r2,zero,20087308 <SDLIB_Init+0x54>
		return TRUE;
20087300:	00800044 	movi	r2,1
20087304:	00000c06 	br	20087338 <SDLIB_Init+0x84>
	int err = mmc_init(sd_drv);
20087308:	d0a01717 	ldw	r2,-32676(gp)
2008730c:	1009883a 	mov	r4,r2
20087310:	008650c0 	call	2008650c <mmc_init>
20087314:	e0bffe15 	stw	r2,-8(fp)
	if (err != 0 || sd_drv->has_init == 0) {
20087318:	e0bffe17 	ldw	r2,-8(fp)
2008731c:	1000031e 	bne	r2,zero,2008732c <SDLIB_Init+0x78>
20087320:	d0a01717 	ldw	r2,-32676(gp)
20087324:	10800b17 	ldw	r2,44(r2)
20087328:	1000021e 	bne	r2,zero,20087334 <SDLIB_Init+0x80>
		SDCARD_DEBUG(("SDLIB_Init failure\r\n"));
		return FALSE;
2008732c:	0005883a 	mov	r2,zero
20087330:	00000106 	br	20087338 <SDLIB_Init+0x84>

#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
20087334:	00800044 	movi	r2,1
}
20087338:	e037883a 	mov	sp,fp
2008733c:	dfc00117 	ldw	ra,4(sp)
20087340:	df000017 	ldw	fp,0(sp)
20087344:	dec00204 	addi	sp,sp,8
20087348:	f800283a 	ret

2008734c <SDLIB_ReadBlock512>:

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
2008734c:	defffc04 	addi	sp,sp,-16
20087350:	dfc00315 	stw	ra,12(sp)
20087354:	df000215 	stw	fp,8(sp)
20087358:	df000204 	addi	fp,sp,8
2008735c:	e13ffe15 	stw	r4,-8(fp)
20087360:	e17fff15 	stw	r5,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
20087364:	d0a01717 	ldw	r2,-32676(gp)
20087368:	1009883a 	mov	r4,r2
2008736c:	e17ffe17 	ldw	r5,-8(fp)
20087370:	01800044 	movi	r6,1
20087374:	e1ffff17 	ldw	r7,-4(fp)
20087378:	00866240 	call	20086624 <mmc_bread>
2008737c:	1000021e 	bne	r2,zero,20087388 <SDLIB_ReadBlock512+0x3c>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
20087380:	0005883a 	mov	r2,zero
20087384:	00000106 	br	2008738c <SDLIB_ReadBlock512+0x40>
	}

	return TRUE;
20087388:	00800044 	movi	r2,1
}
2008738c:	e037883a 	mov	sp,fp
20087390:	dfc00117 	ldw	ra,4(sp)
20087394:	df000017 	ldw	fp,0(sp)
20087398:	dec00204 	addi	sp,sp,8
2008739c:	f800283a 	ret

200873a0 <SDLIB_ReadBlocks>:

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
200873a0:	defffb04 	addi	sp,sp,-20
200873a4:	dfc00415 	stw	ra,16(sp)
200873a8:	df000315 	stw	fp,12(sp)
200873ac:	df000304 	addi	fp,sp,12
200873b0:	e13ffd15 	stw	r4,-12(fp)
200873b4:	e17ffe15 	stw	r5,-8(fp)
200873b8:	e1bfff15 	stw	r6,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
200873bc:	d0a01717 	ldw	r2,-32676(gp)
200873c0:	1009883a 	mov	r4,r2
200873c4:	e17ffd17 	ldw	r5,-12(fp)
200873c8:	e1bffe17 	ldw	r6,-8(fp)
200873cc:	e1ffff17 	ldw	r7,-4(fp)
200873d0:	00866240 	call	20086624 <mmc_bread>
200873d4:	1000021e 	bne	r2,zero,200873e0 <SDLIB_ReadBlocks+0x40>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
200873d8:	0005883a 	mov	r2,zero
200873dc:	00000106 	br	200873e4 <SDLIB_ReadBlocks+0x44>
	}

	return TRUE;
200873e0:	00800044 	movi	r2,1
}
200873e4:	e037883a 	mov	sp,fp
200873e8:	dfc00117 	ldw	ra,4(sp)
200873ec:	df000017 	ldw	fp,0(sp)
200873f0:	dec00204 	addi	sp,sp,8
200873f4:	f800283a 	ret

200873f8 <hw_video_display_init>:
 *           the mSGDMA.
 *
 *  Returns: Ptr to  display controller structure, or NULL on failure.
 ******************************************************************/
hw_video_display* hw_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {
200873f8:	defff304 	addi	sp,sp,-52
200873fc:	dfc00c15 	stw	ra,48(sp)
20087400:	df000b15 	stw	fp,44(sp)
20087404:	df000b04 	addi	fp,sp,44
20087408:	e13ffc15 	stw	r4,-16(fp)
2008740c:	e17ffd15 	stw	r5,-12(fp)
20087410:	e1bffe15 	stw	r6,-8(fp)
20087414:	e1ffff15 	stw	r7,-4(fp)

	if (hw_init_hdmi()) {
20087418:	0087af00 	call	20087af0 <hw_init_hdmi>
2008741c:	10000526 	beq	r2,zero,20087434 <hw_video_display_init+0x3c>
		printf("Failed to initiate the HDMI chip!\n");
20087420:	01000034 	movhi	r4,0
20087424:	21012d04 	addi	r4,r4,1204
20087428:	008c2a40 	call	2008c2a4 <puts>
		return 0;
2008742c:	0005883a 	mov	r2,zero
20087430:	00009506 	br	20087688 <hw_video_display_init+0x290>
	unsigned int bytes_per_pixel, bytes_per_frame, descriptors_per_frame, i;

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
20087434:	00800104 	movi	r2,4
20087438:	e0bff715 	stw	r2,-36(fp)
	bytes_per_frame = ((width * height) * bytes_per_pixel);
2008743c:	e0fffd17 	ldw	r3,-12(fp)
20087440:	e0bffe17 	ldw	r2,-8(fp)
20087444:	1885383a 	mul	r2,r3,r2
20087448:	1007883a 	mov	r3,r2
2008744c:	e0bff717 	ldw	r2,-36(fp)
20087450:	1885383a 	mul	r2,r3,r2
20087454:	e0bff815 	stw	r2,-32(fp)

	descriptors_per_frame = 1;
20087458:	00800044 	movi	r2,1
2008745c:	e0bff915 	stw	r2,-28(fp)

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
20087460:	e0bfff17 	ldw	r2,-4(fp)
20087464:	10800690 	cmplti	r2,r2,26
20087468:	1000061e 	bne	r2,zero,20087484 <hw_video_display_init+0x8c>
		printf("The required number of buffers exceeds the max!\n");
2008746c:	01000034 	movhi	r4,0
20087470:	21013604 	addi	r4,r4,1240
20087474:	008c2a40 	call	2008c2a4 <puts>
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
20087478:	00800644 	movi	r2,25
2008747c:	e0bfff15 	stw	r2,-4(fp)
20087480:	00000806 	br	200874a4 <hw_video_display_init+0xac>
	} else if (num_buffers < 2){
20087484:	e0bfff17 	ldw	r2,-4(fp)
20087488:	10800088 	cmpgei	r2,r2,2
2008748c:	1000051e 	bne	r2,zero,200874a4 <hw_video_display_init+0xac>
		printf("The number of buffers must be > 2!\n");
20087490:	01000034 	movhi	r4,0
20087494:	21014204 	addi	r4,r4,1288
20087498:	008c2a40 	call	2008c2a4 <puts>
		num_buffers = 2;
2008749c:	00800084 	movi	r2,2
200874a0:	e0bfff15 	stw	r2,-4(fp)
	}

	// malloc display struct
	display = (hw_video_display*) malloc(sizeof(hw_video_display));
200874a4:	01002204 	movi	r4,136
200874a8:	008b6cc0 	call	2008b6cc <malloc>
200874ac:	e0bffa15 	stw	r2,-24(fp)
	if (!display) {
200874b0:	e0bffa17 	ldw	r2,-24(fp)
200874b4:	1000021e 	bne	r2,zero,200874c0 <hw_video_display_init+0xc8>
		return NULL;
200874b8:	0005883a 	mov	r2,zero
200874bc:	00007206 	br	20087688 <hw_video_display_init+0x290>
	}

	// Init display struct
	display->width = width;
200874c0:	e0bffa17 	ldw	r2,-24(fp)
200874c4:	e0fffd17 	ldw	r3,-12(fp)
200874c8:	10c01c15 	stw	r3,112(r2)
	display->height = height;
200874cc:	e0bffa17 	ldw	r2,-24(fp)
200874d0:	e0fffe17 	ldw	r3,-8(fp)
200874d4:	10c01d15 	stw	r3,116(r2)
	display->num_frame_buffers = num_buffers;
200874d8:	e0bffa17 	ldw	r2,-24(fp)
200874dc:	e0ffff17 	ldw	r3,-4(fp)
200874e0:	10c02015 	stw	r3,128(r2)
	display->bytes_per_frame = bytes_per_frame;
200874e4:	e0fff817 	ldw	r3,-32(fp)
200874e8:	e0bffa17 	ldw	r2,-24(fp)
200874ec:	10c01f15 	stw	r3,124(r2)
	display->bytes_per_pixel = bytes_per_pixel;
200874f0:	e0fff717 	ldw	r3,-36(fp)
200874f4:	e0bffa17 	ldw	r2,-24(fp)
200874f8:	10c01e15 	stw	r3,120(r2)
	display->buffer_being_displayed = 0;
200874fc:	e0bffa17 	ldw	r2,-24(fp)
20087500:	10001a15 	stw	zero,104(r2)
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
20087504:	e0bfff17 	ldw	r2,-4(fp)
20087508:	10800088 	cmpgei	r2,r2,2
2008750c:	10c03fcc 	andi	r3,r2,255
20087510:	e0bffa17 	ldw	r2,-24(fp)
20087514:	10c01b15 	stw	r3,108(r2)
	// See iPrev_Wr_Buf in hw_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;
20087518:	e0fff917 	ldw	r3,-28(fp)
2008751c:	e0bffa17 	ldw	r2,-24(fp)
20087520:	10c02115 	stw	r3,132(r2)

	// malloc Frame and descriptor Bufs & SetUp Frame Buf Ptrs & Descriptor Ptrs
	if (hw_video_display_allocate_buffers(display, bytes_per_frame,
20087524:	e0bff817 	ldw	r2,-32(fp)
20087528:	e13ffa17 	ldw	r4,-24(fp)
2008752c:	100b883a 	mov	r5,r2
20087530:	e1bfff17 	ldw	r6,-4(fp)
20087534:	00879440 	call	20087944 <hw_video_display_allocate_buffers>
20087538:	10000226 	beq	r2,zero,20087544 <hw_video_display_init+0x14c>
			num_buffers)) {
		return NULL;
2008753c:	0005883a 	mov	r2,zero
20087540:	00005106 	br	20087688 <hw_video_display_init+0x290>
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
20087544:	e13ffc17 	ldw	r4,-16(fp)
20087548:	009ccd80 	call	2009ccd8 <alt_msgdma_open>
2008754c:	e0bffb15 	stw	r2,-20(fp)
	display->mSGDMA = pVid_DMA_CSR_Dev;
20087550:	e0bffa17 	ldw	r2,-24(fp)
20087554:	e0fffb17 	ldw	r3,-20(fp)
20087558:	10c00015 	stw	r3,0(r2)
	if (pVid_DMA_CSR_Dev == NULL) {
2008755c:	e0bffb17 	ldw	r2,-20(fp)
20087560:	1000051e 	bne	r2,zero,20087578 <hw_video_display_init+0x180>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
20087564:	01000034 	movhi	r4,0
20087568:	21014b04 	addi	r4,r4,1324
2008756c:	008c2a40 	call	2008c2a4 <puts>
		return NULL;
20087570:	0005883a 	mov	r2,zero
20087574:	00004406 	br	20087688 <hw_video_display_init+0x290>
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20087578:	e03ff615 	stw	zero,-40(fp)
2008757c:	00001a06 	br	200875e8 <hw_video_display_init+0x1f0>
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
				display->buffer_ptrs[i]->desc_base,
20087580:	e0fffa17 	ldw	r3,-24(fp)
20087584:	e0bff617 	ldw	r2,-40(fp)
20087588:	10800044 	addi	r2,r2,1
2008758c:	1085883a 	add	r2,r2,r2
20087590:	1085883a 	add	r2,r2,r2
20087594:	1885883a 	add	r2,r3,r2
20087598:	10800017 	ldw	r2,0(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
2008759c:	11400017 	ldw	r5,0(r2)
				display->buffer_ptrs[i]->desc_base,
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
200875a0:	e0fffa17 	ldw	r3,-24(fp)
200875a4:	e0bff617 	ldw	r2,-40(fp)
200875a8:	10800044 	addi	r2,r2,1
200875ac:	1085883a 	add	r2,r2,r2
200875b0:	1085883a 	add	r2,r2,r2
200875b4:	1885883a 	add	r2,r3,r2
200875b8:	10800017 	ldw	r2,0(r2)
200875bc:	10c00117 	ldw	r3,4(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
200875c0:	00a00034 	movhi	r2,32768
200875c4:	1081c004 	addi	r2,r2,1792
200875c8:	d8800015 	stw	r2,0(sp)
200875cc:	e13ffb17 	ldw	r4,-20(fp)
200875d0:	180d883a 	mov	r6,r3
200875d4:	e1fff817 	ldw	r7,-32(fp)
200875d8:	009bd640 	call	2009bd64 <alt_msgdma_construct_standard_mm_to_st_descriptor>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
200875dc:	e0bff617 	ldw	r2,-40(fp)
200875e0:	10800044 	addi	r2,r2,1
200875e4:	e0bff615 	stw	r2,-40(fp)
200875e8:	e0bfff17 	ldw	r2,-4(fp)
200875ec:	e0fff617 	ldw	r3,-40(fp)
200875f0:	18bfe336 	bltu	r3,r2,20087580 <__flash_rwdata_start+0xfffe8794>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
200875f4:	e03ff615 	stw	zero,-40(fp)
200875f8:	00001106 	br	20087640 <hw_video_display_init+0x248>
		memset((void*) (display->buffer_ptrs[i]->buffer),
200875fc:	e0fffa17 	ldw	r3,-24(fp)
20087600:	e0bff617 	ldw	r2,-40(fp)
20087604:	10800044 	addi	r2,r2,1
20087608:	1085883a 	add	r2,r2,r2
2008760c:	1085883a 	add	r2,r2,r2
20087610:	1885883a 	add	r2,r3,r2
20087614:	10800017 	ldw	r2,0(r2)
20087618:	10c00117 	ldw	r3,4(r2)
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
2008761c:	e0bffa17 	ldw	r2,-24(fp)
20087620:	10801f17 	ldw	r2,124(r2)
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
		memset((void*) (display->buffer_ptrs[i]->buffer),
20087624:	1809883a 	mov	r4,r3
20087628:	000b883a 	mov	r5,zero
2008762c:	100d883a 	mov	r6,r2
20087630:	008c0500 	call	2008c050 <memset>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
20087634:	e0bff617 	ldw	r2,-40(fp)
20087638:	10800044 	addi	r2,r2,1
2008763c:	e0bff615 	stw	r2,-40(fp)
20087640:	e0bfff17 	ldw	r2,-4(fp)
20087644:	e0fff617 	ldw	r3,-40(fp)
20087648:	18bfec36 	bltu	r3,r2,200875fc <__flash_rwdata_start+0xfffe8810>
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
2008764c:	0001883a 	nop
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
20087650:	e0bffa17 	ldw	r2,-24(fp)
20087654:	10801a17 	ldw	r2,104(r2)
20087658:	e0fffa17 	ldw	r3,-24(fp)
2008765c:	10800044 	addi	r2,r2,1
20087660:	1085883a 	add	r2,r2,r2
20087664:	1085883a 	add	r2,r2,r2
20087668:	1885883a 	add	r2,r3,r2
2008766c:	10800017 	ldw	r2,0(r2)
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
20087670:	10800017 	ldw	r2,0(r2)
20087674:	e13ffb17 	ldw	r4,-20(fp)
20087678:	100b883a 	mov	r5,r2
2008767c:	009cef00 	call	2009cef0 <alt_msgdma_standard_descriptor_async_transfer>
20087680:	103ff31e 	bne	r2,zero,20087650 <__flash_rwdata_start+0xfffe8864>
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
			!= 0) {
	}  // Keep Trying until there is room to Transfer another Frame

	return (display);
20087684:	e0bffa17 	ldw	r2,-24(fp)
}
20087688:	e037883a 	mov	sp,fp
2008768c:	dfc00117 	ldw	ra,4(sp)
20087690:	df000017 	ldw	fp,0(sp)
20087694:	dec00204 	addi	sp,sp,8
20087698:	f800283a 	ret

2008769c <hw_video_display_register_written_buffer>:
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
2008769c:	defffd04 	addi	sp,sp,-12
200876a0:	dfc00215 	stw	ra,8(sp)
200876a4:	df000115 	stw	fp,4(sp)
200876a8:	df000104 	addi	fp,sp,4
200876ac:	e13fff15 	stw	r4,-4(fp)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
200876b0:	e0bfff17 	ldw	r2,-4(fp)
200876b4:	10801b17 	ldw	r2,108(r2)
200876b8:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers;
200876bc:	e0bfff17 	ldw	r2,-4(fp)
200876c0:	10802017 	ldw	r2,128(r2)
200876c4:	1809883a 	mov	r4,r3
200876c8:	100b883a 	mov	r5,r2
200876cc:	0088b940 	call	20088b94 <__modsi3>
200876d0:	1007883a 	mov	r3,r2
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
200876d4:	e0bfff17 	ldw	r2,-4(fp)
200876d8:	10c01b15 	stw	r3,108(r2)
			% display->num_frame_buffers;
}
200876dc:	e037883a 	mov	sp,fp
200876e0:	dfc00117 	ldw	ra,4(sp)
200876e4:	df000017 	ldw	fp,0(sp)
200876e8:	dec00204 	addi	sp,sp,8
200876ec:	f800283a 	ret

200876f0 <hw_video_display_buffer_is_available>:
 *
 *           -1 - Free Buf not yet available
 *
 ******************************************************************/

int hw_video_display_buffer_is_available(hw_video_display* display) {
200876f0:	defffd04 	addi	sp,sp,-12
200876f4:	df000215 	stw	fp,8(sp)
200876f8:	df000204 	addi	fp,sp,8
200876fc:	e13fff15 	stw	r4,-4(fp)
	int ret_code = 0;
20087700:	e03ffe15 	stw	zero,-8(fp)

	if (display->num_frame_buffers > 1) {
20087704:	e0bfff17 	ldw	r2,-4(fp)
20087708:	10802017 	ldw	r2,128(r2)
2008770c:	10800090 	cmplti	r2,r2,2
20087710:	1000081e 	bne	r2,zero,20087734 <hw_video_display_buffer_is_available+0x44>
		if (display->buffer_being_displayed == display->buffer_being_written) // If Frame Buf free to write to
20087714:	e0bfff17 	ldw	r2,-4(fp)
20087718:	10c01a17 	ldw	r3,104(r2)
2008771c:	e0bfff17 	ldw	r2,-4(fp)
20087720:	10801b17 	ldw	r2,108(r2)
20087724:	1880041e 	bne	r3,r2,20087738 <hw_video_display_buffer_is_available+0x48>
				{
			ret_code = -1; // Free Buf not yet available
20087728:	00bfffc4 	movi	r2,-1
2008772c:	e0bffe15 	stw	r2,-8(fp)
20087730:	00000106 	br	20087738 <hw_video_display_buffer_is_available+0x48>
		}
	} // END if(display->num_frame_buffers > 1)
	else  // Else Only one display Buf so HAVE TO Overwrite LIVE Buf
	{
		ret_code = 0;
20087734:	e03ffe15 	stw	zero,-8(fp)
	}

	return (ret_code);
20087738:	e0bffe17 	ldw	r2,-8(fp)
}
2008773c:	e037883a 	mov	sp,fp
20087740:	df000017 	ldw	fp,0(sp)
20087744:	dec00104 	addi	sp,sp,4
20087748:	f800283a 	ret

2008774c <hw_video_display_switch_frames>:

void hw_video_display_switch_frames(hw_video_display* display) {
2008774c:	defffb04 	addi	sp,sp,-20
20087750:	dfc00415 	stw	ra,16(sp)
20087754:	df000315 	stw	fp,12(sp)
20087758:	df000304 	addi	fp,sp,12
2008775c:	e13fff15 	stw	r4,-4(fp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
20087760:	e0bfff17 	ldw	r2,-4(fp)
20087764:	10800017 	ldw	r2,0(r2)
20087768:	10800317 	ldw	r2,12(r2)
2008776c:	10800204 	addi	r2,r2,8
20087770:	10800037 	ldwio	r2,0(r2)
20087774:	10bfffcc 	andi	r2,r2,65535
20087778:	e0bffd15 	stw	r2,-12(fp)
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
2008777c:	e0bfff17 	ldw	r2,-4(fp)
20087780:	10801a17 	ldw	r2,104(r2)
20087784:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers);
20087788:	e0bfff17 	ldw	r2,-4(fp)
2008778c:	10802017 	ldw	r2,128(r2)

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20087790:	1809883a 	mov	r4,r3
20087794:	100b883a 	mov	r5,r2
20087798:	0088b940 	call	20088b94 <__modsi3>
2008779c:	e0bffe15 	stw	r2,-8(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200877a0:	e0bfff17 	ldw	r2,-4(fp)
200877a4:	10802017 	ldw	r2,128(r2)
200877a8:	10800058 	cmpnei	r2,r2,1
200877ac:	1000191e 	bne	r2,zero,20087814 <hw_video_display_switch_frames+0xc8>
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
200877b0:	00000706 	br	200877d0 <hw_video_display_switch_frames+0x84>
			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200877b4:	e0bfff17 	ldw	r2,-4(fp)
200877b8:	10800017 	ldw	r2,0(r2)
200877bc:	10800317 	ldw	r2,12(r2)
200877c0:	10800204 	addi	r2,r2,8
200877c4:	10800037 	ldwio	r2,0(r2)
200877c8:	10bfffcc 	andi	r2,r2,65535
200877cc:	e0bffd15 	stw	r2,-12(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
200877d0:	e0bffd17 	ldw	r2,-12(fp)
200877d4:	103ff71e 	bne	r2,zero,200877b4 <__flash_rwdata_start+0xfffe89c8>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200877d8:	0001883a 	nop
200877dc:	e0bfff17 	ldw	r2,-4(fp)
200877e0:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
200877e4:	e0ffff17 	ldw	r3,-4(fp)
200877e8:	e0bffe17 	ldw	r2,-8(fp)
200877ec:	10800044 	addi	r2,r2,1
200877f0:	1085883a 	add	r2,r2,r2
200877f4:	1085883a 	add	r2,r2,r2
200877f8:	1885883a 	add	r2,r3,r2
200877fc:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20087800:	10800017 	ldw	r2,0(r2)
20087804:	100b883a 	mov	r5,r2
20087808:	009cef00 	call	2009cef0 <alt_msgdma_standard_descriptor_async_transfer>
2008780c:	103ff31e 	bne	r2,zero,200877dc <__flash_rwdata_start+0xfffe89f0>
20087810:	00002006 	br	20087894 <hw_video_display_switch_frames+0x148>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame
	}

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {
20087814:	e0bfff17 	ldw	r2,-4(fp)
20087818:	10c01b17 	ldw	r3,108(r2)
2008781c:	e0bffe17 	ldw	r2,-8(fp)
20087820:	18801c26 	beq	r3,r2,20087894 <hw_video_display_switch_frames+0x148>

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
20087824:	00000706 	br	20087844 <hw_video_display_switch_frames+0xf8>

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
20087828:	e0bfff17 	ldw	r2,-4(fp)
2008782c:	10800017 	ldw	r2,0(r2)
20087830:	10800317 	ldw	r2,12(r2)
20087834:	10800204 	addi	r2,r2,8
20087838:	10800037 	ldwio	r2,0(r2)
2008783c:	10bfffcc 	andi	r2,r2,65535
20087840:	e0bffd15 	stw	r2,-12(fp)

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
20087844:	e0bffd17 	ldw	r2,-12(fp)
20087848:	108000a8 	cmpgeui	r2,r2,2
2008784c:	103ff61e 	bne	r2,zero,20087828 <__flash_rwdata_start+0xfffe8a3c>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20087850:	0001883a 	nop
20087854:	e0bfff17 	ldw	r2,-4(fp)
20087858:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
2008785c:	e0ffff17 	ldw	r3,-4(fp)
20087860:	e0bffe17 	ldw	r2,-8(fp)
20087864:	10800044 	addi	r2,r2,1
20087868:	1085883a 	add	r2,r2,r2
2008786c:	1085883a 	add	r2,r2,r2
20087870:	1885883a 	add	r2,r3,r2
20087874:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20087878:	10800017 	ldw	r2,0(r2)
2008787c:	100b883a 	mov	r5,r2
20087880:	009cef00 	call	2009cef0 <alt_msgdma_standard_descriptor_async_transfer>
20087884:	103ff31e 	bne	r2,zero,20087854 <__flash_rwdata_start+0xfffe8a68>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame

		display->buffer_being_displayed = iNext_Rd_Buf;
20087888:	e0bfff17 	ldw	r2,-4(fp)
2008788c:	e0fffe17 	ldw	r3,-8(fp)
20087890:	10c01a15 	stw	r3,104(r2)
	}

	//printf("Displayed %d - Written %d\n", display->buffer_being_displayed, display->buffer_being_written);
}
20087894:	e037883a 	mov	sp,fp
20087898:	dfc00117 	ldw	ra,4(sp)
2008789c:	df000017 	ldw	fp,0(sp)
200878a0:	dec00204 	addi	sp,sp,8
200878a4:	f800283a 	ret

200878a8 <hw_video_display_clear_screen>:
 *  Purpose: Uses the fast memset routine to clear entire Frame Buf
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
200878a8:	defffc04 	addi	sp,sp,-16
200878ac:	dfc00315 	stw	ra,12(sp)
200878b0:	df000215 	stw	fp,8(sp)
200878b4:	df000204 	addi	fp,sp,8
200878b8:	e13ffe15 	stw	r4,-8(fp)
200878bc:	2805883a 	mov	r2,r5
200878c0:	e0bfff05 	stb	r2,-4(fp)
	memset(
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
200878c4:	e0bffe17 	ldw	r2,-8(fp)
200878c8:	10801b17 	ldw	r2,108(r2)
200878cc:	e0fffe17 	ldw	r3,-8(fp)
200878d0:	10800044 	addi	r2,r2,1
200878d4:	1085883a 	add	r2,r2,r2
200878d8:	1085883a 	add	r2,r2,r2
200878dc:	1885883a 	add	r2,r3,r2
200878e0:	10800017 	ldw	r2,0(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
200878e4:	11000117 	ldw	r4,4(r2)
200878e8:	e0ffff07 	ldb	r3,-4(fp)
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
200878ec:	e0bffe17 	ldw	r2,-8(fp)
200878f0:	10801f17 	ldw	r2,124(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
200878f4:	180b883a 	mov	r5,r3
200878f8:	100d883a 	mov	r6,r2
200878fc:	008c0500 	call	2008c050 <memset>
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
}
20087900:	e037883a 	mov	sp,fp
20087904:	dfc00117 	ldw	ra,4(sp)
20087908:	df000017 	ldw	fp,0(sp)
2008790c:	dec00204 	addi	sp,sp,8
20087910:	f800283a 	ret

20087914 <hw_video_display_get_descriptor_span>:
 * display->descriptors_per_frame
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 hw_video_display_get_descriptor_span(hw_video_display *display) {
20087914:	defffe04 	addi	sp,sp,-8
20087918:	df000115 	stw	fp,4(sp)
2008791c:	df000104 	addi	fp,sp,4
20087920:	e13fff15 	stw	r4,-4(fp)
	return ((display->descriptors_per_frame + 2)
20087924:	e0bfff17 	ldw	r2,-4(fp)
20087928:	10802117 	ldw	r2,132(r2)
2008792c:	10800084 	addi	r2,r2,2
20087930:	1004913a 	slli	r2,r2,4
			* sizeof(alt_msgdma_standard_descriptor));
}
20087934:	e037883a 	mov	sp,fp
20087938:	df000017 	ldw	fp,0(sp)
2008793c:	dec00104 	addi	sp,sp,4
20087940:	f800283a 	ret

20087944 <hw_video_display_allocate_buffers>:
 *  This Allocates memory for Frame Bufs & descriptors
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int hw_video_display_allocate_buffers(hw_video_display* display,
		int bytes_per_frame, int num_buffers) {
20087944:	defff804 	addi	sp,sp,-32
20087948:	dfc00715 	stw	ra,28(sp)
2008794c:	df000615 	stw	fp,24(sp)
20087950:	dc000515 	stw	r16,20(sp)
20087954:	df000604 	addi	fp,sp,24
20087958:	e13ffc15 	stw	r4,-16(fp)
2008795c:	e17ffd15 	stw	r5,-12(fp)
20087960:	e1bffe15 	stw	r6,-8(fp)
	int i, ret_code = 0;
20087964:	e03ffb15 	stw	zero,-20(fp)

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20087968:	e03ffa15 	stw	zero,-24(fp)
2008796c:	00004506 	br	20087a84 <hw_video_display_allocate_buffers+0x140>
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
20087970:	01000204 	movi	r4,8
20087974:	008b6cc0 	call	2008b6cc <malloc>
20087978:	1009883a 	mov	r4,r2
2008797c:	e0fffc17 	ldw	r3,-16(fp)
20087980:	e0bffa17 	ldw	r2,-24(fp)
20087984:	10800044 	addi	r2,r2,1
20087988:	1085883a 	add	r2,r2,r2
2008798c:	1085883a 	add	r2,r2,r2
20087990:	1885883a 	add	r2,r3,r2
20087994:	11000015 	stw	r4,0(r2)
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
20087998:	e0fffc17 	ldw	r3,-16(fp)
2008799c:	e0bffa17 	ldw	r2,-24(fp)
200879a0:	10800044 	addi	r2,r2,1
200879a4:	1085883a 	add	r2,r2,r2
200879a8:	1085883a 	add	r2,r2,r2
200879ac:	1885883a 	add	r2,r3,r2
200879b0:	10800017 	ldw	r2,0(r2)
200879b4:	1000021e 	bne	r2,zero,200879c0 <hw_video_display_allocate_buffers+0x7c>
			ret_code = -1;
200879b8:	00bfffc4 	movi	r2,-1
200879bc:	e0bffb15 	stw	r2,-20(fp)
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
200879c0:	e0fffc17 	ldw	r3,-16(fp)
200879c4:	e0bffa17 	ldw	r2,-24(fp)
200879c8:	10800044 	addi	r2,r2,1
200879cc:	1085883a 	add	r2,r2,r2
200879d0:	1085883a 	add	r2,r2,r2
200879d4:	1885883a 	add	r2,r3,r2
200879d8:	14000017 	ldw	r16,0(r2)
200879dc:	e0bffd17 	ldw	r2,-12(fp)
200879e0:	1009883a 	mov	r4,r2
200879e4:	009a2740 	call	2009a274 <alt_uncached_malloc>
200879e8:	80800115 	stw	r2,4(r16)
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
200879ec:	e0fffc17 	ldw	r3,-16(fp)
200879f0:	e0bffa17 	ldw	r2,-24(fp)
200879f4:	10800044 	addi	r2,r2,1
200879f8:	1085883a 	add	r2,r2,r2
200879fc:	1085883a 	add	r2,r2,r2
20087a00:	1885883a 	add	r2,r3,r2
20087a04:	10800017 	ldw	r2,0(r2)
20087a08:	10800117 	ldw	r2,4(r2)
20087a0c:	1000021e 	bne	r2,zero,20087a18 <hw_video_display_allocate_buffers+0xd4>
			ret_code = -1;
20087a10:	00bfffc4 	movi	r2,-1
20087a14:	e0bffb15 	stw	r2,-20(fp)

		display->buffer_ptrs[i]->desc_base =
20087a18:	e0fffc17 	ldw	r3,-16(fp)
20087a1c:	e0bffa17 	ldw	r2,-24(fp)
20087a20:	10800044 	addi	r2,r2,1
20087a24:	1085883a 	add	r2,r2,r2
20087a28:	1085883a 	add	r2,r2,r2
20087a2c:	1885883a 	add	r2,r3,r2
20087a30:	14000017 	ldw	r16,0(r2)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap
20087a34:	e13ffc17 	ldw	r4,-16(fp)
20087a38:	00879140 	call	20087914 <hw_video_display_get_descriptor_span>
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20087a3c:	01000804 	movi	r4,32
20087a40:	100b883a 	mov	r5,r2
20087a44:	008b4fc0 	call	2008b4fc <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
20087a48:	80800015 	stw	r2,0(r16)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
20087a4c:	e0fffc17 	ldw	r3,-16(fp)
20087a50:	e0bffa17 	ldw	r2,-24(fp)
20087a54:	10800044 	addi	r2,r2,1
20087a58:	1085883a 	add	r2,r2,r2
20087a5c:	1085883a 	add	r2,r2,r2
20087a60:	1885883a 	add	r2,r3,r2
20087a64:	10800017 	ldw	r2,0(r2)
20087a68:	10800017 	ldw	r2,0(r2)
20087a6c:	1000021e 	bne	r2,zero,20087a78 <hw_video_display_allocate_buffers+0x134>
			ret_code = -1;
20087a70:	00bfffc4 	movi	r2,-1
20087a74:	e0bffb15 	stw	r2,-20(fp)
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20087a78:	e0bffa17 	ldw	r2,-24(fp)
20087a7c:	10800044 	addi	r2,r2,1
20087a80:	e0bffa15 	stw	r2,-24(fp)
20087a84:	e0fffa17 	ldw	r3,-24(fp)
20087a88:	e0bffe17 	ldw	r2,-8(fp)
20087a8c:	18bfb816 	blt	r3,r2,20087970 <__flash_rwdata_start+0xfffe8b84>
		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
		}
	}

	return ret_code;
20087a90:	e0bffb17 	ldw	r2,-20(fp)
}
20087a94:	e6ffff04 	addi	sp,fp,-4
20087a98:	dfc00217 	ldw	ra,8(sp)
20087a9c:	df000117 	ldw	fp,4(sp)
20087aa0:	dc000017 	ldw	r16,0(sp)
20087aa4:	dec00304 	addi	sp,sp,12
20087aa8:	f800283a 	ret

20087aac <hw_video_display_get_buffer>:

// ************************************************************

// Return a pointer to the buffer being written
alt_u32* hw_video_display_get_buffer(hw_video_display* display) {
20087aac:	defffe04 	addi	sp,sp,-8
20087ab0:	df000115 	stw	fp,4(sp)
20087ab4:	df000104 	addi	fp,sp,4
20087ab8:	e13fff15 	stw	r4,-4(fp)

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
20087abc:	e0bfff17 	ldw	r2,-4(fp)
20087ac0:	10801b17 	ldw	r2,108(r2)
20087ac4:	e0ffff17 	ldw	r3,-4(fp)
20087ac8:	10800044 	addi	r2,r2,1
20087acc:	1085883a 	add	r2,r2,r2
20087ad0:	1085883a 	add	r2,r2,r2
20087ad4:	1885883a 	add	r2,r3,r2
20087ad8:	10800017 	ldw	r2,0(r2)
20087adc:	10800117 	ldw	r2,4(r2)
}
20087ae0:	e037883a 	mov	sp,fp
20087ae4:	df000017 	ldw	fp,0(sp)
20087ae8:	dec00104 	addi	sp,sp,4
20087aec:	f800283a 	ret

20087af0 <hw_init_hdmi>:

// ************************************************************
int hw_init_hdmi() {
20087af0:	defff304 	addi	sp,sp,-52
20087af4:	dfc00c15 	stw	ra,48(sp)
20087af8:	df000b15 	stw	fp,44(sp)
20087afc:	df000b04 	addi	fp,sp,44
	bool r = 0;
20087b00:	e03ff615 	stw	zero,-40(fp)
	int slave_addr = 0x39 << 1;
20087b04:	00801c84 	movi	r2,114
20087b08:	e0bff715 	stw	r2,-36(fp)
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20087b0c:	e0bff717 	ldw	r2,-36(fp)
20087b10:	10c03fcc 	andi	r3,r2,255
20087b14:	18c0201c 	xori	r3,r3,128
20087b18:	18ffe004 	addi	r3,r3,-128
20087b1c:	e0bffc04 	addi	r2,fp,-16
20087b20:	d8800015 	stw	r2,0(sp)
20087b24:	01080434 	movhi	r4,8208
20087b28:	21054404 	addi	r4,r4,5392
20087b2c:	01480434 	movhi	r5,8208
20087b30:	29454004 	addi	r5,r5,5376
20087b34:	180d883a 	mov	r6,r3
20087b38:	000f883a 	mov	r7,zero
20087b3c:	00881a40 	call	200881a4 <I2C_Read>
20087b40:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087b44:	e0bff617 	ldw	r2,-40(fp)
20087b48:	1000021e 	bne	r2,zero,20087b54 <hw_init_hdmi+0x64>
		return -1;
20087b4c:	00bfffc4 	movi	r2,-1
20087b50:	00015906 	br	200880b8 <hw_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
20087b54:	e0bff717 	ldw	r2,-36(fp)
20087b58:	10c03fcc 	andi	r3,r2,255
20087b5c:	18c0201c 	xori	r3,r3,128
20087b60:	18ffe004 	addi	r3,r3,-128
20087b64:	e0bff804 	addi	r2,fp,-32
20087b68:	d8800015 	stw	r2,0(sp)
20087b6c:	01080434 	movhi	r4,8208
20087b70:	21054404 	addi	r4,r4,5392
20087b74:	01480434 	movhi	r5,8208
20087b78:	29454004 	addi	r5,r5,5376
20087b7c:	180d883a 	mov	r6,r3
20087b80:	01c03d84 	movi	r7,246
20087b84:	00881a40 	call	200881a4 <I2C_Read>
20087b88:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087b8c:	e0bff617 	ldw	r2,-40(fp)
20087b90:	1000021e 	bne	r2,zero,20087b9c <hw_init_hdmi+0xac>
		return -2;
20087b94:	00bfff84 	movi	r2,-2
20087b98:	00014706 	br	200880b8 <hw_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
20087b9c:	e0bff717 	ldw	r2,-36(fp)
20087ba0:	10c03fcc 	andi	r3,r2,255
20087ba4:	18c0201c 	xori	r3,r3,128
20087ba8:	18ffe004 	addi	r3,r3,-128
20087bac:	e0bff804 	addi	r2,fp,-32
20087bb0:	10800104 	addi	r2,r2,4
20087bb4:	d8800015 	stw	r2,0(sp)
20087bb8:	01080434 	movhi	r4,8208
20087bbc:	21054404 	addi	r4,r4,5392
20087bc0:	01480434 	movhi	r5,8208
20087bc4:	29454004 	addi	r5,r5,5376
20087bc8:	180d883a 	mov	r6,r3
20087bcc:	01c03d44 	movi	r7,245
20087bd0:	00881a40 	call	200881a4 <I2C_Read>
20087bd4:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20087bd8:	e0bff617 	ldw	r2,-40(fp)
20087bdc:	1000021e 	bne	r2,zero,20087be8 <hw_init_hdmi+0xf8>
		return -3;
20087be0:	00bfff44 	movi	r2,-3
20087be4:	00013406 	br	200880b8 <hw_init_hdmi+0x5c8>

	// Initiate Color Conversion Matrix
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x18, 0xAA);
20087be8:	e0bff717 	ldw	r2,-36(fp)
20087bec:	10c03fcc 	andi	r3,r2,255
20087bf0:	18c0201c 	xori	r3,r3,128
20087bf4:	18ffe004 	addi	r3,r3,-128
20087bf8:	00802a84 	movi	r2,170
20087bfc:	d8800015 	stw	r2,0(sp)
20087c00:	01080434 	movhi	r4,8208
20087c04:	21054404 	addi	r4,r4,5392
20087c08:	01480434 	movhi	r5,8208
20087c0c:	29454004 	addi	r5,r5,5376
20087c10:	180d883a 	mov	r6,r3
20087c14:	01c00604 	movi	r7,24
20087c18:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x19, 0xF8);
20087c1c:	e0bff717 	ldw	r2,-36(fp)
20087c20:	10c03fcc 	andi	r3,r2,255
20087c24:	18c0201c 	xori	r3,r3,128
20087c28:	18ffe004 	addi	r3,r3,-128
20087c2c:	00803e04 	movi	r2,248
20087c30:	d8800015 	stw	r2,0(sp)
20087c34:	01080434 	movhi	r4,8208
20087c38:	21054404 	addi	r4,r4,5392
20087c3c:	01480434 	movhi	r5,8208
20087c40:	29454004 	addi	r5,r5,5376
20087c44:	180d883a 	mov	r6,r3
20087c48:	01c00644 	movi	r7,25
20087c4c:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1A, 0x08);
20087c50:	e0bff717 	ldw	r2,-36(fp)
20087c54:	10c03fcc 	andi	r3,r2,255
20087c58:	18c0201c 	xori	r3,r3,128
20087c5c:	18ffe004 	addi	r3,r3,-128
20087c60:	00800204 	movi	r2,8
20087c64:	d8800015 	stw	r2,0(sp)
20087c68:	01080434 	movhi	r4,8208
20087c6c:	21054404 	addi	r4,r4,5392
20087c70:	01480434 	movhi	r5,8208
20087c74:	29454004 	addi	r5,r5,5376
20087c78:	180d883a 	mov	r6,r3
20087c7c:	01c00684 	movi	r7,26
20087c80:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1B, 0x00);
20087c84:	e0bff717 	ldw	r2,-36(fp)
20087c88:	10803fcc 	andi	r2,r2,255
20087c8c:	1080201c 	xori	r2,r2,128
20087c90:	10bfe004 	addi	r2,r2,-128
20087c94:	d8000015 	stw	zero,0(sp)
20087c98:	01080434 	movhi	r4,8208
20087c9c:	21054404 	addi	r4,r4,5392
20087ca0:	01480434 	movhi	r5,8208
20087ca4:	29454004 	addi	r5,r5,5376
20087ca8:	100d883a 	mov	r6,r2
20087cac:	01c006c4 	movi	r7,27
20087cb0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1C, 0x00);
20087cb4:	e0bff717 	ldw	r2,-36(fp)
20087cb8:	10803fcc 	andi	r2,r2,255
20087cbc:	1080201c 	xori	r2,r2,128
20087cc0:	10bfe004 	addi	r2,r2,-128
20087cc4:	d8000015 	stw	zero,0(sp)
20087cc8:	01080434 	movhi	r4,8208
20087ccc:	21054404 	addi	r4,r4,5392
20087cd0:	01480434 	movhi	r5,8208
20087cd4:	29454004 	addi	r5,r5,5376
20087cd8:	100d883a 	mov	r6,r2
20087cdc:	01c00704 	movi	r7,28
20087ce0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1D, 0x00);
20087ce4:	e0bff717 	ldw	r2,-36(fp)
20087ce8:	10803fcc 	andi	r2,r2,255
20087cec:	1080201c 	xori	r2,r2,128
20087cf0:	10bfe004 	addi	r2,r2,-128
20087cf4:	d8000015 	stw	zero,0(sp)
20087cf8:	01080434 	movhi	r4,8208
20087cfc:	21054404 	addi	r4,r4,5392
20087d00:	01480434 	movhi	r5,8208
20087d04:	29454004 	addi	r5,r5,5376
20087d08:	100d883a 	mov	r6,r2
20087d0c:	01c00744 	movi	r7,29
20087d10:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1E, 0x1a);
20087d14:	e0bff717 	ldw	r2,-36(fp)
20087d18:	10c03fcc 	andi	r3,r2,255
20087d1c:	18c0201c 	xori	r3,r3,128
20087d20:	18ffe004 	addi	r3,r3,-128
20087d24:	00800684 	movi	r2,26
20087d28:	d8800015 	stw	r2,0(sp)
20087d2c:	01080434 	movhi	r4,8208
20087d30:	21054404 	addi	r4,r4,5392
20087d34:	01480434 	movhi	r5,8208
20087d38:	29454004 	addi	r5,r5,5376
20087d3c:	180d883a 	mov	r6,r3
20087d40:	01c00784 	movi	r7,30
20087d44:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1F, 0x84);
20087d48:	e0bff717 	ldw	r2,-36(fp)
20087d4c:	10c03fcc 	andi	r3,r2,255
20087d50:	18c0201c 	xori	r3,r3,128
20087d54:	18ffe004 	addi	r3,r3,-128
20087d58:	00802104 	movi	r2,132
20087d5c:	d8800015 	stw	r2,0(sp)
20087d60:	01080434 	movhi	r4,8208
20087d64:	21054404 	addi	r4,r4,5392
20087d68:	01480434 	movhi	r5,8208
20087d6c:	29454004 	addi	r5,r5,5376
20087d70:	180d883a 	mov	r6,r3
20087d74:	01c007c4 	movi	r7,31
20087d78:	00880cc0 	call	200880cc <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x20, 0x1A);
20087d7c:	e0bff717 	ldw	r2,-36(fp)
20087d80:	10c03fcc 	andi	r3,r2,255
20087d84:	18c0201c 	xori	r3,r3,128
20087d88:	18ffe004 	addi	r3,r3,-128
20087d8c:	00800684 	movi	r2,26
20087d90:	d8800015 	stw	r2,0(sp)
20087d94:	01080434 	movhi	r4,8208
20087d98:	21054404 	addi	r4,r4,5392
20087d9c:	01480434 	movhi	r5,8208
20087da0:	29454004 	addi	r5,r5,5376
20087da4:	180d883a 	mov	r6,r3
20087da8:	01c00804 	movi	r7,32
20087dac:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x21, 0x6A);
20087db0:	e0bff717 	ldw	r2,-36(fp)
20087db4:	10c03fcc 	andi	r3,r2,255
20087db8:	18c0201c 	xori	r3,r3,128
20087dbc:	18ffe004 	addi	r3,r3,-128
20087dc0:	00801a84 	movi	r2,106
20087dc4:	d8800015 	stw	r2,0(sp)
20087dc8:	01080434 	movhi	r4,8208
20087dcc:	21054404 	addi	r4,r4,5392
20087dd0:	01480434 	movhi	r5,8208
20087dd4:	29454004 	addi	r5,r5,5376
20087dd8:	180d883a 	mov	r6,r3
20087ddc:	01c00844 	movi	r7,33
20087de0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x22, 0x08);
20087de4:	e0bff717 	ldw	r2,-36(fp)
20087de8:	10c03fcc 	andi	r3,r2,255
20087dec:	18c0201c 	xori	r3,r3,128
20087df0:	18ffe004 	addi	r3,r3,-128
20087df4:	00800204 	movi	r2,8
20087df8:	d8800015 	stw	r2,0(sp)
20087dfc:	01080434 	movhi	r4,8208
20087e00:	21054404 	addi	r4,r4,5392
20087e04:	01480434 	movhi	r5,8208
20087e08:	29454004 	addi	r5,r5,5376
20087e0c:	180d883a 	mov	r6,r3
20087e10:	01c00884 	movi	r7,34
20087e14:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x23, 0x00);
20087e18:	e0bff717 	ldw	r2,-36(fp)
20087e1c:	10803fcc 	andi	r2,r2,255
20087e20:	1080201c 	xori	r2,r2,128
20087e24:	10bfe004 	addi	r2,r2,-128
20087e28:	d8000015 	stw	zero,0(sp)
20087e2c:	01080434 	movhi	r4,8208
20087e30:	21054404 	addi	r4,r4,5392
20087e34:	01480434 	movhi	r5,8208
20087e38:	29454004 	addi	r5,r5,5376
20087e3c:	100d883a 	mov	r6,r2
20087e40:	01c008c4 	movi	r7,35
20087e44:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x24, 0x1D);
20087e48:	e0bff717 	ldw	r2,-36(fp)
20087e4c:	10c03fcc 	andi	r3,r2,255
20087e50:	18c0201c 	xori	r3,r3,128
20087e54:	18ffe004 	addi	r3,r3,-128
20087e58:	00800744 	movi	r2,29
20087e5c:	d8800015 	stw	r2,0(sp)
20087e60:	01080434 	movhi	r4,8208
20087e64:	21054404 	addi	r4,r4,5392
20087e68:	01480434 	movhi	r5,8208
20087e6c:	29454004 	addi	r5,r5,5376
20087e70:	180d883a 	mov	r6,r3
20087e74:	01c00904 	movi	r7,36
20087e78:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x25, 0x50);
20087e7c:	e0bff717 	ldw	r2,-36(fp)
20087e80:	10c03fcc 	andi	r3,r2,255
20087e84:	18c0201c 	xori	r3,r3,128
20087e88:	18ffe004 	addi	r3,r3,-128
20087e8c:	00801404 	movi	r2,80
20087e90:	d8800015 	stw	r2,0(sp)
20087e94:	01080434 	movhi	r4,8208
20087e98:	21054404 	addi	r4,r4,5392
20087e9c:	01480434 	movhi	r5,8208
20087ea0:	29454004 	addi	r5,r5,5376
20087ea4:	180d883a 	mov	r6,r3
20087ea8:	01c00944 	movi	r7,37
20087eac:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x26, 0x04);
20087eb0:	e0bff717 	ldw	r2,-36(fp)
20087eb4:	10c03fcc 	andi	r3,r2,255
20087eb8:	18c0201c 	xori	r3,r3,128
20087ebc:	18ffe004 	addi	r3,r3,-128
20087ec0:	00800104 	movi	r2,4
20087ec4:	d8800015 	stw	r2,0(sp)
20087ec8:	01080434 	movhi	r4,8208
20087ecc:	21054404 	addi	r4,r4,5392
20087ed0:	01480434 	movhi	r5,8208
20087ed4:	29454004 	addi	r5,r5,5376
20087ed8:	180d883a 	mov	r6,r3
20087edc:	01c00984 	movi	r7,38
20087ee0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x27, 0x23);
20087ee4:	e0bff717 	ldw	r2,-36(fp)
20087ee8:	10c03fcc 	andi	r3,r2,255
20087eec:	18c0201c 	xori	r3,r3,128
20087ef0:	18ffe004 	addi	r3,r3,-128
20087ef4:	008008c4 	movi	r2,35
20087ef8:	d8800015 	stw	r2,0(sp)
20087efc:	01080434 	movhi	r4,8208
20087f00:	21054404 	addi	r4,r4,5392
20087f04:	01480434 	movhi	r5,8208
20087f08:	29454004 	addi	r5,r5,5376
20087f0c:	180d883a 	mov	r6,r3
20087f10:	01c009c4 	movi	r7,39
20087f14:	00880cc0 	call	200880cc <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x28, 0x1F);
20087f18:	e0bff717 	ldw	r2,-36(fp)
20087f1c:	10c03fcc 	andi	r3,r2,255
20087f20:	18c0201c 	xori	r3,r3,128
20087f24:	18ffe004 	addi	r3,r3,-128
20087f28:	008007c4 	movi	r2,31
20087f2c:	d8800015 	stw	r2,0(sp)
20087f30:	01080434 	movhi	r4,8208
20087f34:	21054404 	addi	r4,r4,5392
20087f38:	01480434 	movhi	r5,8208
20087f3c:	29454004 	addi	r5,r5,5376
20087f40:	180d883a 	mov	r6,r3
20087f44:	01c00a04 	movi	r7,40
20087f48:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x29, 0xFC);
20087f4c:	e0bff717 	ldw	r2,-36(fp)
20087f50:	10c03fcc 	andi	r3,r2,255
20087f54:	18c0201c 	xori	r3,r3,128
20087f58:	18ffe004 	addi	r3,r3,-128
20087f5c:	00803f04 	movi	r2,252
20087f60:	d8800015 	stw	r2,0(sp)
20087f64:	01080434 	movhi	r4,8208
20087f68:	21054404 	addi	r4,r4,5392
20087f6c:	01480434 	movhi	r5,8208
20087f70:	29454004 	addi	r5,r5,5376
20087f74:	180d883a 	mov	r6,r3
20087f78:	01c00a44 	movi	r7,41
20087f7c:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2A, 0x08);
20087f80:	e0bff717 	ldw	r2,-36(fp)
20087f84:	10c03fcc 	andi	r3,r2,255
20087f88:	18c0201c 	xori	r3,r3,128
20087f8c:	18ffe004 	addi	r3,r3,-128
20087f90:	00800204 	movi	r2,8
20087f94:	d8800015 	stw	r2,0(sp)
20087f98:	01080434 	movhi	r4,8208
20087f9c:	21054404 	addi	r4,r4,5392
20087fa0:	01480434 	movhi	r5,8208
20087fa4:	29454004 	addi	r5,r5,5376
20087fa8:	180d883a 	mov	r6,r3
20087fac:	01c00a84 	movi	r7,42
20087fb0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2B, 0x00);
20087fb4:	e0bff717 	ldw	r2,-36(fp)
20087fb8:	10803fcc 	andi	r2,r2,255
20087fbc:	1080201c 	xori	r2,r2,128
20087fc0:	10bfe004 	addi	r2,r2,-128
20087fc4:	d8000015 	stw	zero,0(sp)
20087fc8:	01080434 	movhi	r4,8208
20087fcc:	21054404 	addi	r4,r4,5392
20087fd0:	01480434 	movhi	r5,8208
20087fd4:	29454004 	addi	r5,r5,5376
20087fd8:	100d883a 	mov	r6,r2
20087fdc:	01c00ac4 	movi	r7,43
20087fe0:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2C, 0x0D);
20087fe4:	e0bff717 	ldw	r2,-36(fp)
20087fe8:	10c03fcc 	andi	r3,r2,255
20087fec:	18c0201c 	xori	r3,r3,128
20087ff0:	18ffe004 	addi	r3,r3,-128
20087ff4:	00800344 	movi	r2,13
20087ff8:	d8800015 	stw	r2,0(sp)
20087ffc:	01080434 	movhi	r4,8208
20088000:	21054404 	addi	r4,r4,5392
20088004:	01480434 	movhi	r5,8208
20088008:	29454004 	addi	r5,r5,5376
2008800c:	180d883a 	mov	r6,r3
20088010:	01c00b04 	movi	r7,44
20088014:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2D, 0xDE);
20088018:	e0bff717 	ldw	r2,-36(fp)
2008801c:	10c03fcc 	andi	r3,r2,255
20088020:	18c0201c 	xori	r3,r3,128
20088024:	18ffe004 	addi	r3,r3,-128
20088028:	00803784 	movi	r2,222
2008802c:	d8800015 	stw	r2,0(sp)
20088030:	01080434 	movhi	r4,8208
20088034:	21054404 	addi	r4,r4,5392
20088038:	01480434 	movhi	r5,8208
2008803c:	29454004 	addi	r5,r5,5376
20088040:	180d883a 	mov	r6,r3
20088044:	01c00b44 	movi	r7,45
20088048:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2E, 0x19);
2008804c:	e0bff717 	ldw	r2,-36(fp)
20088050:	10c03fcc 	andi	r3,r2,255
20088054:	18c0201c 	xori	r3,r3,128
20088058:	18ffe004 	addi	r3,r3,-128
2008805c:	00800644 	movi	r2,25
20088060:	d8800015 	stw	r2,0(sp)
20088064:	01080434 	movhi	r4,8208
20088068:	21054404 	addi	r4,r4,5392
2008806c:	01480434 	movhi	r5,8208
20088070:	29454004 	addi	r5,r5,5376
20088074:	180d883a 	mov	r6,r3
20088078:	01c00b84 	movi	r7,46
2008807c:	00880cc0 	call	200880cc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2F, 0x13);
20088080:	e0bff717 	ldw	r2,-36(fp)
20088084:	10c03fcc 	andi	r3,r2,255
20088088:	18c0201c 	xori	r3,r3,128
2008808c:	18ffe004 	addi	r3,r3,-128
20088090:	008004c4 	movi	r2,19
20088094:	d8800015 	stw	r2,0(sp)
20088098:	01080434 	movhi	r4,8208
2008809c:	21054404 	addi	r4,r4,5392
200880a0:	01480434 	movhi	r5,8208
200880a4:	29454004 	addi	r5,r5,5376
200880a8:	180d883a 	mov	r6,r3
200880ac:	01c00bc4 	movi	r7,47
200880b0:	00880cc0 	call	200880cc <I2C_Write>

	return 0;
200880b4:	0005883a 	mov	r2,zero
}
200880b8:	e037883a 	mov	sp,fp
200880bc:	dfc00117 	ldw	ra,4(sp)
200880c0:	df000017 	ldw	fp,0(sp)
200880c4:	dec00204 	addi	sp,sp,8
200880c8:	f800283a 	ret

200880cc <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
200880cc:	defff804 	addi	sp,sp,-32
200880d0:	dfc00715 	stw	ra,28(sp)
200880d4:	df000615 	stw	fp,24(sp)
200880d8:	df000604 	addi	fp,sp,24
200880dc:	e13ffb15 	stw	r4,-20(fp)
200880e0:	e17ffc15 	stw	r5,-16(fp)
200880e4:	3009883a 	mov	r4,r6
200880e8:	3807883a 	mov	r3,r7
200880ec:	e0800217 	ldw	r2,8(fp)
200880f0:	e13ffd05 	stb	r4,-12(fp)
200880f4:	e0fffe05 	stb	r3,-8(fp)
200880f8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
200880fc:	00800044 	movi	r2,1
20088100:	e0bffa15 	stw	r2,-24(fp)

    i2c_start(clk_base, data_base);
20088104:	e13ffb17 	ldw	r4,-20(fp)
20088108:	e17ffc17 	ldw	r5,-16(fp)
2008810c:	00882a40 	call	200882a4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20088110:	e0bffd03 	ldbu	r2,-12(fp)
20088114:	10803fcc 	andi	r2,r2,255
20088118:	e13ffb17 	ldw	r4,-20(fp)
2008811c:	e17ffc17 	ldw	r5,-16(fp)
20088120:	100d883a 	mov	r6,r2
20088124:	00883a00 	call	200883a0 <i2c_write>
20088128:	1000011e 	bne	r2,zero,20088130 <I2C_Write+0x64>
        bSuccess = FALSE;
2008812c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20088130:	e0bffa17 	ldw	r2,-24(fp)
20088134:	10000726 	beq	r2,zero,20088154 <I2C_Write+0x88>
20088138:	e0bffe03 	ldbu	r2,-8(fp)
2008813c:	e13ffb17 	ldw	r4,-20(fp)
20088140:	e17ffc17 	ldw	r5,-16(fp)
20088144:	100d883a 	mov	r6,r2
20088148:	00883a00 	call	200883a0 <i2c_write>
2008814c:	1000011e 	bne	r2,zero,20088154 <I2C_Write+0x88>
        bSuccess = FALSE;
20088150:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
20088154:	e0bffa17 	ldw	r2,-24(fp)
20088158:	10000726 	beq	r2,zero,20088178 <I2C_Write+0xac>
2008815c:	e0bfff03 	ldbu	r2,-4(fp)
20088160:	e13ffb17 	ldw	r4,-20(fp)
20088164:	e17ffc17 	ldw	r5,-16(fp)
20088168:	100d883a 	mov	r6,r2
2008816c:	00883a00 	call	200883a0 <i2c_write>
20088170:	1000011e 	bne	r2,zero,20088178 <I2C_Write+0xac>
        bSuccess = FALSE;
20088174:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
20088178:	e13ffb17 	ldw	r4,-20(fp)
2008817c:	e17ffc17 	ldw	r5,-16(fp)
20088180:	008832c0 	call	2008832c <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
20088184:	0106d604 	movi	r4,7000
20088188:	009a2ec0 	call	2009a2ec <usleep>

    return bSuccess;
2008818c:	e0bffa17 	ldw	r2,-24(fp)


}
20088190:	e037883a 	mov	sp,fp
20088194:	dfc00117 	ldw	ra,4(sp)
20088198:	df000017 	ldw	fp,0(sp)
2008819c:	dec00204 	addi	sp,sp,8
200881a0:	f800283a 	ret

200881a4 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
200881a4:	defff904 	addi	sp,sp,-28
200881a8:	dfc00615 	stw	ra,24(sp)
200881ac:	df000515 	stw	fp,20(sp)
200881b0:	df000504 	addi	fp,sp,20
200881b4:	e13ffc15 	stw	r4,-16(fp)
200881b8:	e17ffd15 	stw	r5,-12(fp)
200881bc:	3007883a 	mov	r3,r6
200881c0:	3805883a 	mov	r2,r7
200881c4:	e0fffe05 	stb	r3,-8(fp)
200881c8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
200881cc:	00800044 	movi	r2,1
200881d0:	e0bffb15 	stw	r2,-20(fp)

    i2c_start(clk_base, data_base);
200881d4:	e13ffc17 	ldw	r4,-16(fp)
200881d8:	e17ffd17 	ldw	r5,-12(fp)
200881dc:	00882a40 	call	200882a4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
200881e0:	e0bffe03 	ldbu	r2,-8(fp)
200881e4:	10803fcc 	andi	r2,r2,255
200881e8:	e13ffc17 	ldw	r4,-16(fp)
200881ec:	e17ffd17 	ldw	r5,-12(fp)
200881f0:	100d883a 	mov	r6,r2
200881f4:	00883a00 	call	200883a0 <i2c_write>
200881f8:	1000011e 	bne	r2,zero,20088200 <I2C_Read+0x5c>
        bSuccess = FALSE;
200881fc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20088200:	e0bffb17 	ldw	r2,-20(fp)
20088204:	10000726 	beq	r2,zero,20088224 <I2C_Read+0x80>
20088208:	e0bfff03 	ldbu	r2,-4(fp)
2008820c:	e13ffc17 	ldw	r4,-16(fp)
20088210:	e17ffd17 	ldw	r5,-12(fp)
20088214:	100d883a 	mov	r6,r2
20088218:	00883a00 	call	200883a0 <i2c_write>
2008821c:	1000011e 	bne	r2,zero,20088224 <I2C_Read+0x80>
        bSuccess = FALSE;
20088220:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
20088224:	e13ffc17 	ldw	r4,-16(fp)
20088228:	e17ffd17 	ldw	r5,-12(fp)
2008822c:	00882a40 	call	200882a4 <i2c_start>
    DeviceAddr |= 1; // Read
20088230:	e0bffe03 	ldbu	r2,-8(fp)
20088234:	10800054 	ori	r2,r2,1
20088238:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
2008823c:	e0bffb17 	ldw	r2,-20(fp)
20088240:	10000826 	beq	r2,zero,20088264 <I2C_Read+0xc0>
20088244:	e0bffe03 	ldbu	r2,-8(fp)
20088248:	10803fcc 	andi	r2,r2,255
2008824c:	e13ffc17 	ldw	r4,-16(fp)
20088250:	e17ffd17 	ldw	r5,-12(fp)
20088254:	100d883a 	mov	r6,r2
20088258:	00883a00 	call	200883a0 <i2c_write>
2008825c:	1000011e 	bne	r2,zero,20088264 <I2C_Read+0xc0>
        bSuccess = FALSE;
20088260:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
20088264:	e0bffb17 	ldw	r2,-20(fp)
20088268:	10000526 	beq	r2,zero,20088280 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
2008826c:	e13ffc17 	ldw	r4,-16(fp)
20088270:	e17ffd17 	ldw	r5,-12(fp)
20088274:	e1800217 	ldw	r6,8(fp)
20088278:	000f883a 	mov	r7,zero
2008827c:	00884d00 	call	200884d0 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
20088280:	e13ffc17 	ldw	r4,-16(fp)
20088284:	e17ffd17 	ldw	r5,-12(fp)
20088288:	008832c0 	call	2008832c <i2c_stop>

    return bSuccess;
2008828c:	e0bffb17 	ldw	r2,-20(fp)
}
20088290:	e037883a 	mov	sp,fp
20088294:	dfc00117 	ldw	ra,4(sp)
20088298:	df000017 	ldw	fp,0(sp)
2008829c:	dec00204 	addi	sp,sp,8
200882a0:	f800283a 	ret

200882a4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
200882a4:	defffc04 	addi	sp,sp,-16
200882a8:	dfc00315 	stw	ra,12(sp)
200882ac:	df000215 	stw	fp,8(sp)
200882b0:	df000204 	addi	fp,sp,8
200882b4:	e13ffe15 	stw	r4,-8(fp)
200882b8:	e17fff15 	stw	r5,-4(fp)

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
200882bc:	e0bfff17 	ldw	r2,-4(fp)
200882c0:	10800104 	addi	r2,r2,4
200882c4:	1007883a 	mov	r3,r2
200882c8:	00800044 	movi	r2,1
200882cc:	18800035 	stwio	r2,0(r3)

    // start condition
    SDA_HIGH(data_base); // data high
200882d0:	e0bfff17 	ldw	r2,-4(fp)
200882d4:	00c00044 	movi	r3,1
200882d8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
200882dc:	e0bffe17 	ldw	r2,-8(fp)
200882e0:	00c00044 	movi	r3,1
200882e4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
200882e8:	01000044 	movi	r4,1
200882ec:	009a2ec0 	call	2009a2ec <usleep>

    SDA_LOW(data_base); // data low
200882f0:	e0bfff17 	ldw	r2,-4(fp)
200882f4:	0007883a 	mov	r3,zero
200882f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
200882fc:	01000044 	movi	r4,1
20088300:	009a2ec0 	call	2009a2ec <usleep>
    SCL_LOW(clk_base); // clock low
20088304:	e0bffe17 	ldw	r2,-8(fp)
20088308:	0007883a 	mov	r3,zero
2008830c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
20088310:	01000044 	movi	r4,1
20088314:	009a2ec0 	call	2009a2ec <usleep>
}
20088318:	e037883a 	mov	sp,fp
2008831c:	dfc00117 	ldw	ra,4(sp)
20088320:	df000017 	ldw	fp,0(sp)
20088324:	dec00204 	addi	sp,sp,8
20088328:	f800283a 	ret

2008832c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
2008832c:	defffc04 	addi	sp,sp,-16
20088330:	dfc00315 	stw	ra,12(sp)
20088334:	df000215 	stw	fp,8(sp)
20088338:	df000204 	addi	fp,sp,8
2008833c:	e13ffe15 	stw	r4,-8(fp)
20088340:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
20088344:	e0bfff17 	ldw	r2,-4(fp)
20088348:	10800104 	addi	r2,r2,4
2008834c:	1007883a 	mov	r3,r2
20088350:	00800044 	movi	r2,1
20088354:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
20088358:	e0bfff17 	ldw	r2,-4(fp)
2008835c:	0007883a 	mov	r3,zero
20088360:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
20088364:	e0bffe17 	ldw	r2,-8(fp)
20088368:	00c00044 	movi	r3,1
2008836c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
20088370:	01000044 	movi	r4,1
20088374:	009a2ec0 	call	2009a2ec <usleep>
    SDA_HIGH(data_base); // data high
20088378:	e0bfff17 	ldw	r2,-4(fp)
2008837c:	00c00044 	movi	r3,1
20088380:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
20088384:	01000044 	movi	r4,1
20088388:	009a2ec0 	call	2009a2ec <usleep>



}
2008838c:	e037883a 	mov	sp,fp
20088390:	dfc00117 	ldw	ra,4(sp)
20088394:	df000017 	ldw	fp,0(sp)
20088398:	dec00204 	addi	sp,sp,8
2008839c:	f800283a 	ret

200883a0 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
200883a0:	defff804 	addi	sp,sp,-32
200883a4:	dfc00715 	stw	ra,28(sp)
200883a8:	df000615 	stw	fp,24(sp)
200883ac:	df000604 	addi	fp,sp,24
200883b0:	e13ffd15 	stw	r4,-12(fp)
200883b4:	e17ffe15 	stw	r5,-8(fp)
200883b8:	3005883a 	mov	r2,r6
200883bc:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
200883c0:	00bfe004 	movi	r2,-128
200883c4:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
200883c8:	e0bffe17 	ldw	r2,-8(fp)
200883cc:	10800104 	addi	r2,r2,4
200883d0:	1007883a 	mov	r3,r2
200883d4:	00800044 	movi	r2,1
200883d8:	18800035 	stwio	r2,0(r3)

    for(i=0;i<8;i++){
200883dc:	e03ffb15 	stw	zero,-20(fp)
200883e0:	00001f06 	br	20088460 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
200883e4:	e0bffd17 	ldw	r2,-12(fp)
200883e8:	0007883a 	mov	r3,zero
200883ec:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
200883f0:	e0ffff03 	ldbu	r3,-4(fp)
200883f4:	e0bffa03 	ldbu	r2,-24(fp)
200883f8:	1884703a 	and	r2,r3,r2
200883fc:	10803fcc 	andi	r2,r2,255
20088400:	10000426 	beq	r2,zero,20088414 <i2c_write+0x74>
            SDA_HIGH(data_base);
20088404:	e0bffe17 	ldw	r2,-8(fp)
20088408:	00c00044 	movi	r3,1
2008840c:	10c00035 	stwio	r3,0(r2)
20088410:	00000306 	br	20088420 <i2c_write+0x80>
        }else{
            SDA_LOW(data_base);
20088414:	e0bffe17 	ldw	r2,-8(fp)
20088418:	0007883a 	mov	r3,zero
2008841c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
20088420:	e0bffa03 	ldbu	r2,-24(fp)
20088424:	1004d07a 	srli	r2,r2,1
20088428:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
2008842c:	e0bffd17 	ldw	r2,-12(fp)
20088430:	00c00044 	movi	r3,1
20088434:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20088438:	01000044 	movi	r4,1
2008843c:	009a2ec0 	call	2009a2ec <usleep>
        SCL_LOW(clk_base);
20088440:	e0bffd17 	ldw	r2,-12(fp)
20088444:	0007883a 	mov	r3,zero
20088448:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
2008844c:	01000044 	movi	r4,1
20088450:	009a2ec0 	call	2009a2ec <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20088454:	e0bffb17 	ldw	r2,-20(fp)
20088458:	10800044 	addi	r2,r2,1
2008845c:	e0bffb15 	stw	r2,-20(fp)
20088460:	e0bffb17 	ldw	r2,-20(fp)
20088464:	10800210 	cmplti	r2,r2,8
20088468:	103fde1e 	bne	r2,zero,200883e4 <__flash_rwdata_start+0xfffe95f8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
2008846c:	e0bffe17 	ldw	r2,-8(fp)
20088470:	10800104 	addi	r2,r2,4
20088474:	0007883a 	mov	r3,zero
20088478:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
2008847c:	e0bffd17 	ldw	r2,-12(fp)
20088480:	00c00044 	movi	r3,1
20088484:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
20088488:	01000044 	movi	r4,1
2008848c:	009a2ec0 	call	2009a2ec <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20088490:	e0bffe17 	ldw	r2,-8(fp)
20088494:	10800037 	ldwio	r2,0(r2)
20088498:	1005003a 	cmpeq	r2,r2,zero
2008849c:	10803fcc 	andi	r2,r2,255
200884a0:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200884a4:	e0bffd17 	ldw	r2,-12(fp)
200884a8:	0007883a 	mov	r3,zero
200884ac:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
200884b0:	01000044 	movi	r4,1
200884b4:	009a2ec0 	call	2009a2ec <usleep>
    return bAck;
200884b8:	e0bffc17 	ldw	r2,-16(fp)
}
200884bc:	e037883a 	mov	sp,fp
200884c0:	dfc00117 	ldw	ra,4(sp)
200884c4:	df000017 	ldw	fp,0(sp)
200884c8:	dec00204 	addi	sp,sp,8
200884cc:	f800283a 	ret

200884d0 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
200884d0:	defff804 	addi	sp,sp,-32
200884d4:	dfc00715 	stw	ra,28(sp)
200884d8:	df000615 	stw	fp,24(sp)
200884dc:	df000604 	addi	fp,sp,24
200884e0:	e13ffc15 	stw	r4,-16(fp)
200884e4:	e17ffd15 	stw	r5,-12(fp)
200884e8:	e1bffe15 	stw	r6,-8(fp)
200884ec:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
200884f0:	e03ffa05 	stb	zero,-24(fp)
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
200884f4:	e0bffd17 	ldw	r2,-12(fp)
200884f8:	10800104 	addi	r2,r2,4
200884fc:	0007883a 	mov	r3,zero
20088500:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
20088504:	e0bffc17 	ldw	r2,-16(fp)
20088508:	0007883a 	mov	r3,zero
2008850c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
20088510:	01000044 	movi	r4,1
20088514:	009a2ec0 	call	2009a2ec <usleep>

    for(i=0;i<8;i++){
20088518:	e03ffb15 	stw	zero,-20(fp)
2008851c:	00001606 	br	20088578 <i2c_read+0xa8>
        Data <<= 1;
20088520:	e0bffa03 	ldbu	r2,-24(fp)
20088524:	1085883a 	add	r2,r2,r2
20088528:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
2008852c:	e0bffc17 	ldw	r2,-16(fp)
20088530:	00c00044 	movi	r3,1
20088534:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20088538:	01000044 	movi	r4,1
2008853c:	009a2ec0 	call	2009a2ec <usleep>
        if (SDA_READ(data_base))  // read data
20088540:	e0bffd17 	ldw	r2,-12(fp)
20088544:	10800037 	ldwio	r2,0(r2)
20088548:	10000326 	beq	r2,zero,20088558 <i2c_read+0x88>
            Data |= 0x01;
2008854c:	e0bffa03 	ldbu	r2,-24(fp)
20088550:	10800054 	ori	r2,r2,1
20088554:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log
20088558:	e0bffc17 	ldw	r2,-16(fp)
2008855c:	0007883a 	mov	r3,zero
20088560:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20088564:	01000044 	movi	r4,1
20088568:	009a2ec0 	call	2009a2ec <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
2008856c:	e0bffb17 	ldw	r2,-20(fp)
20088570:	10800044 	addi	r2,r2,1
20088574:	e0bffb15 	stw	r2,-20(fp)
20088578:	e0bffb17 	ldw	r2,-20(fp)
2008857c:	10800210 	cmplti	r2,r2,8
20088580:	103fe71e 	bne	r2,zero,20088520 <__flash_rwdata_start+0xfffe9734>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
20088584:	e0bffc17 	ldw	r2,-16(fp)
20088588:	0007883a 	mov	r3,zero
2008858c:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
20088590:	e0bffd17 	ldw	r2,-12(fp)
20088594:	10800104 	addi	r2,r2,4
20088598:	1007883a 	mov	r3,r2
2008859c:	00800044 	movi	r2,1
200885a0:	18800035 	stwio	r2,0(r3)
    if (bAck)
200885a4:	e0bfff17 	ldw	r2,-4(fp)
200885a8:	10000426 	beq	r2,zero,200885bc <i2c_read+0xec>
        SDA_LOW(data_base);
200885ac:	e0bffd17 	ldw	r2,-12(fp)
200885b0:	0007883a 	mov	r3,zero
200885b4:	10c00035 	stwio	r3,0(r2)
200885b8:	00000306 	br	200885c8 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
200885bc:	e0bffd17 	ldw	r2,-12(fp)
200885c0:	00c00044 	movi	r3,1
200885c4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
200885c8:	e0bffc17 	ldw	r2,-16(fp)
200885cc:	00c00044 	movi	r3,1
200885d0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
200885d4:	01000044 	movi	r4,1
200885d8:	009a2ec0 	call	2009a2ec <usleep>
    SCL_LOW(clk_base); // clock low
200885dc:	e0bffc17 	ldw	r2,-16(fp)
200885e0:	0007883a 	mov	r3,zero
200885e4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
200885e8:	01000044 	movi	r4,1
200885ec:	009a2ec0 	call	2009a2ec <usleep>
    SDA_LOW(data_base);  // data low
200885f0:	e0bffd17 	ldw	r2,-12(fp)
200885f4:	0007883a 	mov	r3,zero
200885f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
200885fc:	01000044 	movi	r4,1
20088600:	009a2ec0 	call	2009a2ec <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
20088604:	e0bffe17 	ldw	r2,-8(fp)
20088608:	e0fffa03 	ldbu	r3,-24(fp)
2008860c:	10c00005 	stb	r3,0(r2)
}
20088610:	e037883a 	mov	sp,fp
20088614:	dfc00117 	ldw	ra,4(sp)
20088618:	df000017 	ldw	fp,0(sp)
2008861c:	dec00204 	addi	sp,sp,8
20088620:	f800283a 	ret

20088624 <main>:
 volatile int skip_rv_flag;
 volatile int exit_flag;
double time1;
double time2;
double null_execution;
int main() {
20088624:	deffa404 	addi	sp,sp,-368
20088628:	dfc05b15 	stw	ra,364(sp)
2008862c:	df005a15 	stw	fp,360(sp)
20088630:	df005a04 	addi	fp,sp,360
	printf("Hello from Nios II bud.\n");
20088634:	01000034 	movhi	r4,0
20088638:	21015704 	addi	r4,r4,1372
2008863c:	008c2a40 	call	2008c2a4 <puts>
	int sdf = alt_timestamp_start();
20088640:	009b0100 	call	2009b010 <alt_timestamp_start>
20088644:	e0bfaa15 	stw	r2,-344(fp)
	null_execution = alt_timestamp();
20088648:	009b0980 	call	2009b098 <alt_timestamp>
2008864c:	1009883a 	mov	r4,r2
20088650:	008b1140 	call	2008b114 <__floatunsidf>
20088654:	1009883a 	mov	r4,r2
20088658:	180b883a 	mov	r5,r3
2008865c:	d1201b15 	stw	r4,-32660(gp)
20088660:	d0a01c04 	addi	r2,gp,-32656
20088664:	11400015 	stw	r5,0(r2)

	printf("null_execution : %f \n", null_execution);
20088668:	d0a01b17 	ldw	r2,-32660(gp)
2008866c:	d1201c04 	addi	r4,gp,-32656
20088670:	20c00017 	ldw	r3,0(r4)
20088674:	01000034 	movhi	r4,0
20088678:	21015d04 	addi	r4,r4,1396
2008867c:	100b883a 	mov	r5,r2
20088680:	180d883a 	mov	r6,r3
20088684:	008c1a00 	call	2008c1a0 <printf>
	if (SDLIB_Init(SD_CONT_0_BASE) == 0) {
20088688:	01080434 	movhi	r4,8208
2008868c:	21040004 	addi	r4,r4,4096
20088690:	00872b40 	call	200872b4 <SDLIB_Init>
20088694:	1000031e 	bne	r2,zero,200886a4 <main+0x80>
		printf("Failed SDLIB!\n");
20088698:	01000034 	movhi	r4,0
2008869c:	21016304 	addi	r4,r4,1420
200886a0:	008c2a40 	call	2008c2a4 <puts>
	}
	//time1= alt_timestamp();
	//printf("time1: %f\n", time1);
	peripheral_init();
200886a4:	00889000 	call	20088900 <peripheral_init>

	FAT_HANDLE hFAT;
	hFAT = Fat_Mount();
200886a8:	00823e00 	call	200823e0 <Fat_Mount>
200886ac:	e0bfb015 	stw	r2,-320(fp)

	FAT_BROWSE_HANDLE pFatBrowseHandle;
	if (Fat_FileBrowseBegin(hFAT, &pFatBrowseHandle) == 0) {
200886b0:	e0ffb017 	ldw	r3,-320(fp)
200886b4:	e0bfb104 	addi	r2,fp,-316
200886b8:	1809883a 	mov	r4,r3
200886bc:	100b883a 	mov	r5,r2
200886c0:	00824bc0 	call	200824bc <Fat_FileBrowseBegin>
200886c4:	1000031e 	bne	r2,zero,200886d4 <main+0xb0>
		printf("Failed FileBrowseBegin!\n");
200886c8:	01000034 	movhi	r4,0
200886cc:	21016704 	addi	r4,r4,1436
200886d0:	008c2a40 	call	2008c2a4 <puts>
	}

	FILE_CONTEXT pFileContext;
	if (Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext) == 0) {
200886d4:	e0ffb104 	addi	r3,fp,-316
200886d8:	e0bfb304 	addi	r2,fp,-308
200886dc:	1809883a 	mov	r4,r3
200886e0:	100b883a 	mov	r5,r2
200886e4:	00825280 	call	20082528 <Fat_FileBrowseNext>
200886e8:	1000031e 	bne	r2,zero,200886f8 <main+0xd4>
		printf("Failed FileBrowseNext!\n");
200886ec:	01000034 	movhi	r4,0
200886f0:	21016d04 	addi	r4,r4,1460
200886f4:	008c2a40 	call	2008c2a4 <puts>
	}

	char* fileName;
	while (1) {
		fileName = Fat_GetFileName(&pFileContext);
200886f8:	e0bfb304 	addi	r2,fp,-308
200886fc:	1009883a 	mov	r4,r2
20088700:	0082c780 	call	20082c78 <Fat_GetFileName>
20088704:	e0bfab15 	stw	r2,-340(fp)
		char target[] = "V1_72.MPG";
20088708:	008dd7f4 	movhi	r2,14175
2008870c:	108c5584 	addi	r2,r2,12630
20088710:	e0bffd15 	stw	r2,-12(fp)
20088714:	00941374 	movhi	r2,20557
20088718:	108b8c84 	addi	r2,r2,11826
2008871c:	e0bffe15 	stw	r2,-8(fp)
20088720:	008011c4 	movi	r2,71
20088724:	e0bfff0d 	sth	r2,-4(fp)
		if (strcmp(fileName, target) == 0) {
20088728:	e0bffd04 	addi	r2,fp,-12
2008872c:	e13fab17 	ldw	r4,-340(fp)
20088730:	100b883a 	mov	r5,r2
20088734:	008c3d00 	call	2008c3d0 <strcmp>
20088738:	10000f1e 	bne	r2,zero,20088778 <main+0x154>
			printf("found %s\n", target);
2008873c:	e0bffd04 	addi	r2,fp,-12
20088740:	01000034 	movhi	r4,0
20088744:	21017304 	addi	r4,r4,1484
20088748:	100b883a 	mov	r5,r2
2008874c:	008c1a00 	call	2008c1a0 <printf>
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
	}
	int num_buffers = 2;
20088750:	00800084 	movi	r2,2
20088754:	e0bfac15 	stw	r2,-336(fp)
	hw_video_display* display = hw_video_display_init(
20088758:	01000034 	movhi	r4,0
2008875c:	21017604 	addi	r4,r4,1496
20088760:	0140a004 	movi	r5,640
20088764:	01807804 	movi	r6,480
20088768:	e1ffac17 	ldw	r7,-336(fp)
2008876c:	00873f80 	call	200873f8 <hw_video_display_init>
20088770:	e0bfad15 	stw	r2,-332(fp)
20088774:	00000606 	br	20088790 <main+0x16c>
		char target[] = "V1_72.MPG";
		if (strcmp(fileName, target) == 0) {
			printf("found %s\n", target);
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
20088778:	e0ffb104 	addi	r3,fp,-316
2008877c:	e0bfb304 	addi	r2,fp,-308
20088780:	1809883a 	mov	r4,r3
20088784:	100b883a 	mov	r5,r2
20088788:	00825280 	call	20082528 <Fat_FileBrowseNext>
	}
2008878c:	003fda06 	br	200886f8 <__flash_rwdata_start+0xfffe990c>

	//time2= alt_timestamp();
	//printf("time2 %f\n", time2);
	while (1) {

		pio_functionality(&hFAT, &pFatBrowseHandle, &pFileContext);
20088790:	e13fb004 	addi	r4,fp,-320
20088794:	e0ffb104 	addi	r3,fp,-316
20088798:	e0bfb304 	addi	r2,fp,-308
2008879c:	180b883a 	mov	r5,r3
200887a0:	100d883a 	mov	r6,r2
200887a4:	00888140 	call	20088814 <pio_functionality>

		fileName = Fat_GetFileName(&pFileContext);
200887a8:	e0bfb304 	addi	r2,fp,-308
200887ac:	1009883a 	mov	r4,r2
200887b0:	0082c780 	call	20082c78 <Fat_GetFileName>
200887b4:	e0bfab15 	stw	r2,-340(fp)
		FAT_FILE_HANDLE hFileHandle = Fat_FileOpen(hFAT, fileName);
200887b8:	e0bfb017 	ldw	r2,-320(fp)
200887bc:	1009883a 	mov	r4,r2
200887c0:	e17fab17 	ldw	r5,-340(fp)
200887c4:	0082d5c0 	call	20082d5c <Fat_FileOpen>
200887c8:	e0bfae15 	stw	r2,-328(fp)
				alt_u32* testbuf;
		if (play_flag == 1){
200887cc:	d0a02317 	ldw	r2,-32628(gp)
200887d0:	10800058 	cmpnei	r2,r2,1
200887d4:	10000e1e 	bne	r2,zero,20088810 <main+0x1ec>
			mjpeg423_decode(hFileHandle, testbuf, display, &play_flag, &skip_fw_flag, &skip_rv_flag, &exit_flag, &timer_flag);
200887d8:	d0a01904 	addi	r2,gp,-32668
200887dc:	d8800015 	stw	r2,0(sp)
200887e0:	d0a01a04 	addi	r2,gp,-32664
200887e4:	d8800115 	stw	r2,4(sp)
200887e8:	d0a01804 	addi	r2,gp,-32672
200887ec:	d8800215 	stw	r2,8(sp)
200887f0:	d0a02004 	addi	r2,gp,-32640
200887f4:	d8800315 	stw	r2,12(sp)
200887f8:	e13fae17 	ldw	r4,-328(fp)
200887fc:	e17faf17 	ldw	r5,-324(fp)
20088800:	e1bfad17 	ldw	r6,-332(fp)
20088804:	d1e02304 	addi	r7,gp,-32628
20088808:	00814e80 	call	200814e8 <mjpeg423_decode>
			play_flag = 0;
2008880c:	d0202315 	stw	zero,-32628(gp)
			}

	}
20088810:	003fdf06 	br	20088790 <__flash_rwdata_start+0xfffe99a4>

20088814 <pio_functionality>:
}


//---------------------Helper Functions---------------------------------
static void pio_functionality(FAT_HANDLE *hFAT,
		FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext) {
20088814:	defff804 	addi	sp,sp,-32
20088818:	dfc00715 	stw	ra,28(sp)
2008881c:	df000615 	stw	fp,24(sp)
20088820:	df000604 	addi	fp,sp,24
20088824:	e13ffd15 	stw	r4,-12(fp)
20088828:	e17ffe15 	stw	r5,-8(fp)
2008882c:	e1bfff15 	stw	r6,-4(fp)

	if (push_button_flag == 2) {
20088830:	d0a01f17 	ldw	r2,-32644(gp)
20088834:	10800098 	cmpnei	r2,r2,2
20088838:	10002b1e 	bne	r2,zero,200888e8 <pio_functionality+0xd4>
		printf("entered browsing\n");
2008883c:	01000034 	movhi	r4,0
20088840:	21017b04 	addi	r4,r4,1516
20088844:	008c2a40 	call	2008c2a4 <puts>
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
20088848:	e13ffe17 	ldw	r4,-8(fp)
2008884c:	e17fff17 	ldw	r5,-4(fp)
20088850:	00825280 	call	20082528 <Fat_FileBrowseNext>
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
20088854:	e13fff17 	ldw	r4,-4(fp)
20088858:	0082c780 	call	20082c78 <Fat_GetFileName>
2008885c:	e0bffa15 	stw	r2,-24(fp)
		char extension[] = ".MPG";
20088860:	0091d434 	movhi	r2,18256
20088864:	10934b84 	addi	r2,r2,19758
20088868:	e0bffb15 	stw	r2,-20(fp)
2008886c:	e03ffc05 	stb	zero,-16(fp)
		while (!Fat_CheckExtension(pFileContext, extension)) {
20088870:	00000c06 	br	200888a4 <pio_functionality+0x90>
			if(!Fat_FileBrowseNext(pFatBrowseHandle, pFileContext)){
20088874:	e13ffe17 	ldw	r4,-8(fp)
20088878:	e17fff17 	ldw	r5,-4(fp)
2008887c:	00825280 	call	20082528 <Fat_FileBrowseNext>
20088880:	1000051e 	bne	r2,zero,20088898 <pio_functionality+0x84>
				Fat_FileBrowseBegin(*hFAT, pFatBrowseHandle);
20088884:	e0bffd17 	ldw	r2,-12(fp)
20088888:	10800017 	ldw	r2,0(r2)
2008888c:	1009883a 	mov	r4,r2
20088890:	e17ffe17 	ldw	r5,-8(fp)
20088894:	00824bc0 	call	200824bc <Fat_FileBrowseBegin>
			}

			fileName = Fat_GetFileName(pFileContext);
20088898:	e13fff17 	ldw	r4,-4(fp)
2008889c:	0082c780 	call	20082c78 <Fat_GetFileName>
200888a0:	e0bffa15 	stw	r2,-24(fp)
		printf("entered browsing\n");
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
		char extension[] = ".MPG";
		while (!Fat_CheckExtension(pFileContext, extension)) {
200888a4:	e0bffb04 	addi	r2,fp,-20
200888a8:	e13fff17 	ldw	r4,-4(fp)
200888ac:	100b883a 	mov	r5,r2
200888b0:	0082c040 	call	20082c04 <Fat_CheckExtension>
200888b4:	103fef26 	beq	r2,zero,20088874 <__flash_rwdata_start+0xfffe9a88>
				Fat_FileBrowseBegin(*hFAT, pFatBrowseHandle);
			}

			fileName = Fat_GetFileName(pFileContext);
		}
		printf("Fat_CheckExtension: %d\n",
200888b8:	e0bffb04 	addi	r2,fp,-20
200888bc:	e13fff17 	ldw	r4,-4(fp)
200888c0:	100b883a 	mov	r5,r2
200888c4:	0082c040 	call	20082c04 <Fat_CheckExtension>
200888c8:	01000034 	movhi	r4,0
200888cc:	21018004 	addi	r4,r4,1536
200888d0:	100b883a 	mov	r5,r2
200888d4:	008c1a00 	call	2008c1a0 <printf>
				Fat_CheckExtension(pFileContext, extension));
		printf("%s \n\n\n", fileName);
200888d8:	01000034 	movhi	r4,0
200888dc:	21018604 	addi	r4,r4,1560
200888e0:	e17ffa17 	ldw	r5,-24(fp)
200888e4:	008c1a00 	call	2008c1a0 <printf>
//	}
//	if (push_button_flag == 8) {
//		skip_rv_flag = 1;
//	}

	push_button_flag = 0;
200888e8:	d0201f15 	stw	zero,-32644(gp)
}
200888ec:	e037883a 	mov	sp,fp
200888f0:	dfc00117 	ldw	ra,4(sp)
200888f4:	df000017 	ldw	fp,0(sp)
200888f8:	dec00204 	addi	sp,sp,8
200888fc:	f800283a 	ret

20088900 <peripheral_init>:

//----------------------Init Functions---------------------------------
static void peripheral_init(void) {
20088900:	defffe04 	addi	sp,sp,-8
20088904:	dfc00115 	stw	ra,4(sp)
20088908:	df000015 	stw	fp,0(sp)
2008890c:	d839883a 	mov	fp,sp
	//Pushbuttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
20088910:	00c003c4 	movi	r3,15
20088914:	00880434 	movhi	r2,8208
20088918:	10854a04 	addi	r2,r2,5416
2008891c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
20088920:	0007883a 	mov	r3,zero
20088924:	00880434 	movhi	r2,8208
20088928:	10854b04 	addi	r2,r2,5420
2008892c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register( KEY_IRQ, (void*) 0, pio_isr);
20088930:	01000084 	movi	r4,2
20088934:	000b883a 	mov	r5,zero
20088938:	01880274 	movhi	r6,8201
2008893c:	31a27004 	addi	r6,r6,-30272
20088940:	00999180 	call	20099918 <alt_irq_register>


	//Timer
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, TIMER_1_FREQ);
20088944:	00c1dcf4 	movhi	r3,1907
20088948:	18d65004 	addi	r3,r3,22848
2008894c:	00880434 	movhi	r2,8208
20088950:	10850204 	addi	r2,r2,5128
20088954:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, TIMER_1_FREQ>>16);
20088958:	00c1dcc4 	movi	r3,1907
2008895c:	00880434 	movhi	r2,8208
20088960:	10850304 	addi	r2,r2,5132
20088964:	10c00035 	stwio	r3,0(r2)


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 2);
20088968:	00c00084 	movi	r3,2
2008896c:	00880434 	movhi	r2,8208
20088970:	10850004 	addi	r2,r2,5120
20088974:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 7);
20088978:	00c001c4 	movi	r3,7
2008897c:	00880434 	movhi	r2,8208
20088980:	10850104 	addi	r2,r2,5124
20088984:	10c00035 	stwio	r3,0(r2)

	alt_irq_register( TIMER_1_IRQ, (void*) 0, timer_isr);
20088988:	01000104 	movi	r4,4
2008898c:	000b883a 	mov	r5,zero
20088990:	01880274 	movhi	r6,8201
20088994:	31a2a704 	addi	r6,r6,-30052
20088998:	00999180 	call	20099918 <alt_irq_register>

	timer_flag = 0;
2008899c:	d0202015 	stw	zero,-32640(gp)
	push_button_flag = 0;
200889a0:	d0201f15 	stw	zero,-32644(gp)
	play_flag = 0;
200889a4:	d0202315 	stw	zero,-32628(gp)
	exit_flag = 0;
200889a8:	d0201815 	stw	zero,-32672(gp)

}
200889ac:	e037883a 	mov	sp,fp
200889b0:	dfc00117 	ldw	ra,4(sp)
200889b4:	df000017 	ldw	fp,0(sp)
200889b8:	dec00204 	addi	sp,sp,8
200889bc:	f800283a 	ret

200889c0 <pio_isr>:

////---------------------------ISRs--------------------------------
static void pio_isr(void* isr_context) {
200889c0:	defffd04 	addi	sp,sp,-12
200889c4:	dfc00215 	stw	ra,8(sp)
200889c8:	df000115 	stw	fp,4(sp)
200889cc:	df000104 	addi	fp,sp,4
200889d0:	e13fff15 	stw	r4,-4(fp)

	push_button_flag = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
200889d4:	00880434 	movhi	r2,8208
200889d8:	10854b04 	addi	r2,r2,5420
200889dc:	10800037 	ldwio	r2,0(r2)
200889e0:	d0a01f15 	stw	r2,-32644(gp)
	if (push_button_flag == 2) {
200889e4:	d0a01f17 	ldw	r2,-32644(gp)
200889e8:	10800098 	cmpnei	r2,r2,2
200889ec:	1000021e 	bne	r2,zero,200889f8 <pio_isr+0x38>
			exit_flag = 1;
200889f0:	00800044 	movi	r2,1
200889f4:	d0a01815 	stw	r2,-32672(gp)
	}
	if (push_button_flag == 1) {
200889f8:	d0a01f17 	ldw	r2,-32644(gp)
200889fc:	10800058 	cmpnei	r2,r2,1
20088a00:	10000e1e 	bne	r2,zero,20088a3c <pio_isr+0x7c>
		printf("play initial %d\n", play_flag);
20088a04:	d0a02317 	ldw	r2,-32628(gp)
20088a08:	01000034 	movhi	r4,0
20088a0c:	21018804 	addi	r4,r4,1568
20088a10:	100b883a 	mov	r5,r2
20088a14:	008c1a00 	call	2008c1a0 <printf>
		play_flag = !play_flag;
20088a18:	d0a02317 	ldw	r2,-32628(gp)
20088a1c:	1005003a 	cmpeq	r2,r2,zero
20088a20:	10803fcc 	andi	r2,r2,255
20088a24:	d0a02315 	stw	r2,-32628(gp)
		printf("play %d\n\n", play_flag);
20088a28:	d0a02317 	ldw	r2,-32628(gp)
20088a2c:	01000034 	movhi	r4,0
20088a30:	21018d04 	addi	r4,r4,1588
20088a34:	100b883a 	mov	r5,r2
20088a38:	008c1a00 	call	2008c1a0 <printf>
	}
	if (push_button_flag == 4) {
20088a3c:	d0a01f17 	ldw	r2,-32644(gp)
20088a40:	10800118 	cmpnei	r2,r2,4
20088a44:	1000021e 	bne	r2,zero,20088a50 <pio_isr+0x90>
		skip_fw_flag = 1;
20088a48:	00800044 	movi	r2,1
20088a4c:	d0a01915 	stw	r2,-32668(gp)
	}
	if (push_button_flag == 8) {
20088a50:	d0a01f17 	ldw	r2,-32644(gp)
20088a54:	10800218 	cmpnei	r2,r2,8
20088a58:	1000021e 	bne	r2,zero,20088a64 <pio_isr+0xa4>
		skip_rv_flag = 1;
20088a5c:	00800044 	movi	r2,1
20088a60:	d0a01a15 	stw	r2,-32664(gp)
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
20088a64:	0007883a 	mov	r3,zero
20088a68:	00880434 	movhi	r2,8208
20088a6c:	10854b04 	addi	r2,r2,5420
20088a70:	10c00035 	stwio	r3,0(r2)
	printf("\n \n \n \n Button %d Pressed. \n \n \n \n \n", push_button_flag);
20088a74:	d0a01f17 	ldw	r2,-32644(gp)
20088a78:	01000034 	movhi	r4,0
20088a7c:	21019004 	addi	r4,r4,1600
20088a80:	100b883a 	mov	r5,r2
20088a84:	008c1a00 	call	2008c1a0 <printf>
}
20088a88:	e037883a 	mov	sp,fp
20088a8c:	dfc00117 	ldw	ra,4(sp)
20088a90:	df000017 	ldw	fp,0(sp)
20088a94:	dec00204 	addi	sp,sp,8
20088a98:	f800283a 	ret

20088a9c <timer_isr>:

static void timer_isr(void* isr_context) {
20088a9c:	defffe04 	addi	sp,sp,-8
20088aa0:	df000115 	stw	fp,4(sp)
20088aa4:	df000104 	addi	fp,sp,4
20088aa8:	e13fff15 	stw	r4,-4(fp)
	//printf("\n \n \n \nElapsed Time: %d seconds \n \n \n \n \n", count);
	timer_flag = 1;
20088aac:	00800044 	movi	r2,1
20088ab0:	d0a02015 	stw	r2,-32640(gp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 2);
20088ab4:	00c00084 	movi	r3,2
20088ab8:	00880434 	movhi	r2,8208
20088abc:	10850004 	addi	r2,r2,5120
20088ac0:	10c00035 	stwio	r3,0(r2)

}
20088ac4:	e037883a 	mov	sp,fp
20088ac8:	df000017 	ldw	fp,0(sp)
20088acc:	dec00104 	addi	sp,sp,4
20088ad0:	f800283a 	ret

20088ad4 <udivmodsi4>:
20088ad4:	2900182e 	bgeu	r5,r4,20088b38 <udivmodsi4+0x64>
20088ad8:	28001716 	blt	r5,zero,20088b38 <udivmodsi4+0x64>
20088adc:	00800804 	movi	r2,32
20088ae0:	00c00044 	movi	r3,1
20088ae4:	00000206 	br	20088af0 <udivmodsi4+0x1c>
20088ae8:	10001126 	beq	r2,zero,20088b30 <udivmodsi4+0x5c>
20088aec:	28000516 	blt	r5,zero,20088b04 <udivmodsi4+0x30>
20088af0:	294b883a 	add	r5,r5,r5
20088af4:	10bfffc4 	addi	r2,r2,-1
20088af8:	18c7883a 	add	r3,r3,r3
20088afc:	293ffa36 	bltu	r5,r4,20088ae8 <__flash_rwdata_start+0xfffe9cfc>
20088b00:	18000b26 	beq	r3,zero,20088b30 <udivmodsi4+0x5c>
20088b04:	0005883a 	mov	r2,zero
20088b08:	21400236 	bltu	r4,r5,20088b14 <udivmodsi4+0x40>
20088b0c:	2149c83a 	sub	r4,r4,r5
20088b10:	10c4b03a 	or	r2,r2,r3
20088b14:	1806d07a 	srli	r3,r3,1
20088b18:	280ad07a 	srli	r5,r5,1
20088b1c:	183ffa1e 	bne	r3,zero,20088b08 <__flash_rwdata_start+0xfffe9d1c>
20088b20:	3000011e 	bne	r6,zero,20088b28 <udivmodsi4+0x54>
20088b24:	f800283a 	ret
20088b28:	2005883a 	mov	r2,r4
20088b2c:	f800283a 	ret
20088b30:	0005883a 	mov	r2,zero
20088b34:	003ffa06 	br	20088b20 <__flash_rwdata_start+0xfffe9d34>
20088b38:	00c00044 	movi	r3,1
20088b3c:	003ff106 	br	20088b04 <__flash_rwdata_start+0xfffe9d18>

20088b40 <__divsi3>:
20088b40:	defffe04 	addi	sp,sp,-8
20088b44:	dfc00115 	stw	ra,4(sp)
20088b48:	dc000015 	stw	r16,0(sp)
20088b4c:	20000b16 	blt	r4,zero,20088b7c <__divsi3+0x3c>
20088b50:	0021883a 	mov	r16,zero
20088b54:	28000c16 	blt	r5,zero,20088b88 <__divsi3+0x48>
20088b58:	000d883a 	mov	r6,zero
20088b5c:	0088ad40 	call	20088ad4 <udivmodsi4>
20088b60:	0407c83a 	sub	r3,zero,r16
20088b64:	1884f03a 	xor	r2,r3,r2
20088b68:	1405883a 	add	r2,r2,r16
20088b6c:	dfc00117 	ldw	ra,4(sp)
20088b70:	dc000017 	ldw	r16,0(sp)
20088b74:	dec00204 	addi	sp,sp,8
20088b78:	f800283a 	ret
20088b7c:	0109c83a 	sub	r4,zero,r4
20088b80:	04000044 	movi	r16,1
20088b84:	283ff40e 	bge	r5,zero,20088b58 <__flash_rwdata_start+0xfffe9d6c>
20088b88:	014bc83a 	sub	r5,zero,r5
20088b8c:	8400005c 	xori	r16,r16,1
20088b90:	003ff106 	br	20088b58 <__flash_rwdata_start+0xfffe9d6c>

20088b94 <__modsi3>:
20088b94:	defffd04 	addi	sp,sp,-12
20088b98:	dfc00215 	stw	ra,8(sp)
20088b9c:	dc400115 	stw	r17,4(sp)
20088ba0:	dc000015 	stw	r16,0(sp)
20088ba4:	20000c16 	blt	r4,zero,20088bd8 <__modsi3+0x44>
20088ba8:	0023883a 	mov	r17,zero
20088bac:	0021883a 	mov	r16,zero
20088bb0:	28000d16 	blt	r5,zero,20088be8 <__modsi3+0x54>
20088bb4:	01800044 	movi	r6,1
20088bb8:	0088ad40 	call	20088ad4 <udivmodsi4>
20088bbc:	1404f03a 	xor	r2,r2,r16
20088bc0:	8885883a 	add	r2,r17,r2
20088bc4:	dfc00217 	ldw	ra,8(sp)
20088bc8:	dc400117 	ldw	r17,4(sp)
20088bcc:	dc000017 	ldw	r16,0(sp)
20088bd0:	dec00304 	addi	sp,sp,12
20088bd4:	f800283a 	ret
20088bd8:	0109c83a 	sub	r4,zero,r4
20088bdc:	04400044 	movi	r17,1
20088be0:	043fffc4 	movi	r16,-1
20088be4:	283ff30e 	bge	r5,zero,20088bb4 <__flash_rwdata_start+0xfffe9dc8>
20088be8:	014bc83a 	sub	r5,zero,r5
20088bec:	003ff106 	br	20088bb4 <__flash_rwdata_start+0xfffe9dc8>

20088bf0 <__udivsi3>:
20088bf0:	000d883a 	mov	r6,zero
20088bf4:	0088ad41 	jmpi	20088ad4 <udivmodsi4>

20088bf8 <__umodsi3>:
20088bf8:	01800044 	movi	r6,1
20088bfc:	0088ad41 	jmpi	20088ad4 <udivmodsi4>

20088c00 <__divsf3>:
20088c00:	defff504 	addi	sp,sp,-44
20088c04:	dd000515 	stw	r20,20(sp)
20088c08:	2028d5fa 	srli	r20,r4,23
20088c0c:	dd400615 	stw	r21,24(sp)
20088c10:	202ad7fa 	srli	r21,r4,31
20088c14:	00c02034 	movhi	r3,128
20088c18:	dcc00415 	stw	r19,16(sp)
20088c1c:	dc800315 	stw	r18,12(sp)
20088c20:	18ffffc4 	addi	r3,r3,-1
20088c24:	dfc00a15 	stw	ra,40(sp)
20088c28:	df000915 	stw	fp,36(sp)
20088c2c:	ddc00815 	stw	r23,32(sp)
20088c30:	dd800715 	stw	r22,28(sp)
20088c34:	dc400215 	stw	r17,8(sp)
20088c38:	dc000115 	stw	r16,4(sp)
20088c3c:	a5003fcc 	andi	r20,r20,255
20088c40:	1924703a 	and	r18,r3,r4
20088c44:	acc03fcc 	andi	r19,r21,255
20088c48:	a0004d26 	beq	r20,zero,20088d80 <__divsf3+0x180>
20088c4c:	00803fc4 	movi	r2,255
20088c50:	a0802e26 	beq	r20,r2,20088d0c <__divsf3+0x10c>
20088c54:	91002034 	orhi	r4,r18,128
20088c58:	202490fa 	slli	r18,r4,3
20088c5c:	a53fe044 	addi	r20,r20,-127
20088c60:	0021883a 	mov	r16,zero
20088c64:	002f883a 	mov	r23,zero
20088c68:	2804d5fa 	srli	r2,r5,23
20088c6c:	282cd7fa 	srli	r22,r5,31
20088c70:	00c02034 	movhi	r3,128
20088c74:	18ffffc4 	addi	r3,r3,-1
20088c78:	10803fcc 	andi	r2,r2,255
20088c7c:	1962703a 	and	r17,r3,r5
20088c80:	b7003fcc 	andi	fp,r22,255
20088c84:	10004526 	beq	r2,zero,20088d9c <__divsf3+0x19c>
20088c88:	00c03fc4 	movi	r3,255
20088c8c:	10c04026 	beq	r2,r3,20088d90 <__divsf3+0x190>
20088c90:	88c02034 	orhi	r3,r17,128
20088c94:	182290fa 	slli	r17,r3,3
20088c98:	10bfe044 	addi	r2,r2,-127
20088c9c:	0009883a 	mov	r4,zero
20088ca0:	2420b03a 	or	r16,r4,r16
20088ca4:	802090ba 	slli	r16,r16,2
20088ca8:	01c80274 	movhi	r7,8201
20088cac:	39e33304 	addi	r7,r7,-29492
20088cb0:	81e1883a 	add	r16,r16,r7
20088cb4:	80c00017 	ldw	r3,0(r16)
20088cb8:	ad8af03a 	xor	r5,r21,r22
20088cbc:	280d883a 	mov	r6,r5
20088cc0:	a085c83a 	sub	r2,r20,r2
20088cc4:	29403fcc 	andi	r5,r5,255
20088cc8:	1800683a 	jmp	r3
20088ccc:	20088ed8 	cmpnei	zero,r4,8763
20088cd0:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088cd4:	20088ea4 	muli	zero,r4,8762
20088cd8:	20088e6c 	andhi	zero,r4,8761
20088cdc:	20088ea4 	muli	zero,r4,8762
20088ce0:	20088d1c 	xori	zero,r4,8756
20088ce4:	20088ea4 	muli	zero,r4,8762
20088ce8:	20088e6c 	andhi	zero,r4,8761
20088cec:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088cf0:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088cf4:	20088d1c 	xori	zero,r4,8756
20088cf8:	20088e6c 	andhi	zero,r4,8761
20088cfc:	20088f70 	cmpltui	zero,r4,8765
20088d00:	20088f70 	cmpltui	zero,r4,8765
20088d04:	20088f70 	cmpltui	zero,r4,8765
20088d08:	20088eb0 	cmpltui	zero,r4,8762
20088d0c:	9000531e 	bne	r18,zero,20088e5c <__divsf3+0x25c>
20088d10:	04000204 	movi	r16,8
20088d14:	05c00084 	movi	r23,2
20088d18:	003fd306 	br	20088c68 <__flash_rwdata_start+0xfffe9e7c>
20088d1c:	00c02034 	movhi	r3,128
20088d20:	000d883a 	mov	r6,zero
20088d24:	18ffffc4 	addi	r3,r3,-1
20088d28:	013fffc4 	movi	r4,-1
20088d2c:	21003fcc 	andi	r4,r4,255
20088d30:	200895fa 	slli	r4,r4,23
20088d34:	30803fcc 	andi	r2,r6,255
20088d38:	01802034 	movhi	r6,128
20088d3c:	31bfffc4 	addi	r6,r6,-1
20088d40:	100497fa 	slli	r2,r2,31
20088d44:	1986703a 	and	r3,r3,r6
20088d48:	1906b03a 	or	r3,r3,r4
20088d4c:	1884b03a 	or	r2,r3,r2
20088d50:	dfc00a17 	ldw	ra,40(sp)
20088d54:	df000917 	ldw	fp,36(sp)
20088d58:	ddc00817 	ldw	r23,32(sp)
20088d5c:	dd800717 	ldw	r22,28(sp)
20088d60:	dd400617 	ldw	r21,24(sp)
20088d64:	dd000517 	ldw	r20,20(sp)
20088d68:	dcc00417 	ldw	r19,16(sp)
20088d6c:	dc800317 	ldw	r18,12(sp)
20088d70:	dc400217 	ldw	r17,8(sp)
20088d74:	dc000117 	ldw	r16,4(sp)
20088d78:	dec00b04 	addi	sp,sp,44
20088d7c:	f800283a 	ret
20088d80:	90002b1e 	bne	r18,zero,20088e30 <__divsf3+0x230>
20088d84:	04000104 	movi	r16,4
20088d88:	05c00044 	movi	r23,1
20088d8c:	003fb606 	br	20088c68 <__flash_rwdata_start+0xfffe9e7c>
20088d90:	8800251e 	bne	r17,zero,20088e28 <__divsf3+0x228>
20088d94:	01000084 	movi	r4,2
20088d98:	00000206 	br	20088da4 <__divsf3+0x1a4>
20088d9c:	88001a1e 	bne	r17,zero,20088e08 <__divsf3+0x208>
20088da0:	01000044 	movi	r4,1
20088da4:	2420b03a 	or	r16,r4,r16
20088da8:	802090ba 	slli	r16,r16,2
20088dac:	00c80274 	movhi	r3,8201
20088db0:	18e37204 	addi	r3,r3,-29240
20088db4:	80e1883a 	add	r16,r16,r3
20088db8:	80c00017 	ldw	r3,0(r16)
20088dbc:	ad8af03a 	xor	r5,r21,r22
20088dc0:	a085c83a 	sub	r2,r20,r2
20088dc4:	1800683a 	jmp	r3
20088dc8:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088dcc:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088dd0:	20088fd0 	cmplti	zero,r4,8767
20088dd4:	20088e68 	cmpgeui	zero,r4,8761
20088dd8:	20088fd0 	cmplti	zero,r4,8767
20088ddc:	20088d1c 	xori	zero,r4,8756
20088de0:	20088fd0 	cmplti	zero,r4,8767
20088de4:	20088e68 	cmpgeui	zero,r4,8761
20088de8:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088dec:	20088e80 	call	220088e8 <__flash_rwdata_start+0x1f69afc>
20088df0:	20088d1c 	xori	zero,r4,8756
20088df4:	20088e68 	cmpgeui	zero,r4,8761
20088df8:	20088f70 	cmpltui	zero,r4,8765
20088dfc:	20088f70 	cmpltui	zero,r4,8765
20088e00:	20088f70 	cmpltui	zero,r4,8765
20088e04:	20088f9c 	xori	zero,r4,8766
20088e08:	8809883a 	mov	r4,r17
20088e0c:	008b4600 	call	2008b460 <__clzsi2>
20088e10:	10fffec4 	addi	r3,r2,-5
20088e14:	88e2983a 	sll	r17,r17,r3
20088e18:	00ffe284 	movi	r3,-118
20088e1c:	1885c83a 	sub	r2,r3,r2
20088e20:	0009883a 	mov	r4,zero
20088e24:	003f9e06 	br	20088ca0 <__flash_rwdata_start+0xfffe9eb4>
20088e28:	010000c4 	movi	r4,3
20088e2c:	003f9c06 	br	20088ca0 <__flash_rwdata_start+0xfffe9eb4>
20088e30:	9009883a 	mov	r4,r18
20088e34:	d9400015 	stw	r5,0(sp)
20088e38:	008b4600 	call	2008b460 <__clzsi2>
20088e3c:	10fffec4 	addi	r3,r2,-5
20088e40:	053fe284 	movi	r20,-118
20088e44:	90e4983a 	sll	r18,r18,r3
20088e48:	a0a9c83a 	sub	r20,r20,r2
20088e4c:	0021883a 	mov	r16,zero
20088e50:	002f883a 	mov	r23,zero
20088e54:	d9400017 	ldw	r5,0(sp)
20088e58:	003f8306 	br	20088c68 <__flash_rwdata_start+0xfffe9e7c>
20088e5c:	04000304 	movi	r16,12
20088e60:	05c000c4 	movi	r23,3
20088e64:	003f8006 	br	20088c68 <__flash_rwdata_start+0xfffe9e7c>
20088e68:	0023883a 	mov	r17,zero
20088e6c:	e027883a 	mov	r19,fp
20088e70:	202f883a 	mov	r23,r4
20088e74:	00c00084 	movi	r3,2
20088e78:	980b883a 	mov	r5,r19
20088e7c:	b8c0501e 	bne	r23,r3,20088fc0 <__divsf3+0x3c0>
20088e80:	2980004c 	andi	r6,r5,1
20088e84:	013fffc4 	movi	r4,-1
20088e88:	0007883a 	mov	r3,zero
20088e8c:	003fa706 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20088e90:	013fe084 	movi	r4,-126
20088e94:	2089c83a 	sub	r4,r4,r2
20088e98:	00c006c4 	movi	r3,27
20088e9c:	1900500e 	bge	r3,r4,20088fe0 <__divsf3+0x3e0>
20088ea0:	9980004c 	andi	r6,r19,1
20088ea4:	0009883a 	mov	r4,zero
20088ea8:	0007883a 	mov	r3,zero
20088eac:	003f9f06 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20088eb0:	9080102c 	andhi	r2,r18,64
20088eb4:	10000226 	beq	r2,zero,20088ec0 <__divsf3+0x2c0>
20088eb8:	8880102c 	andhi	r2,r17,64
20088ebc:	10003a26 	beq	r2,zero,20088fa8 <__divsf3+0x3a8>
20088ec0:	00802034 	movhi	r2,128
20088ec4:	90c01034 	orhi	r3,r18,64
20088ec8:	10bfffc4 	addi	r2,r2,-1
20088ecc:	a80d883a 	mov	r6,r21
20088ed0:	1886703a 	and	r3,r3,r2
20088ed4:	003f9406 	br	20088d28 <__flash_rwdata_start+0xfffe9f3c>
20088ed8:	9006917a 	slli	r3,r18,5
20088edc:	8822917a 	slli	r17,r17,5
20088ee0:	1c402936 	bltu	r3,r17,20088f88 <__divsf3+0x388>
20088ee4:	1c47c83a 	sub	r3,r3,r17
20088ee8:	2827883a 	mov	r19,r5
20088eec:	01800684 	movi	r6,26
20088ef0:	01000044 	movi	r4,1
20088ef4:	180f883a 	mov	r7,r3
20088ef8:	2109883a 	add	r4,r4,r4
20088efc:	18c7883a 	add	r3,r3,r3
20088f00:	38000116 	blt	r7,zero,20088f08 <__divsf3+0x308>
20088f04:	1c400236 	bltu	r3,r17,20088f10 <__divsf3+0x310>
20088f08:	1c47c83a 	sub	r3,r3,r17
20088f0c:	21000054 	ori	r4,r4,1
20088f10:	31bfffc4 	addi	r6,r6,-1
20088f14:	303ff71e 	bne	r6,zero,20088ef4 <__flash_rwdata_start+0xfffea108>
20088f18:	1806c03a 	cmpne	r3,r3,zero
20088f1c:	1922b03a 	or	r17,r3,r4
20088f20:	11001fc4 	addi	r4,r2,127
20088f24:	013fda0e 	bge	zero,r4,20088e90 <__flash_rwdata_start+0xfffea0a4>
20088f28:	88c001cc 	andi	r3,r17,7
20088f2c:	18000426 	beq	r3,zero,20088f40 <__divsf3+0x340>
20088f30:	894003cc 	andi	r5,r17,15
20088f34:	00c00104 	movi	r3,4
20088f38:	28c00126 	beq	r5,r3,20088f40 <__divsf3+0x340>
20088f3c:	88e3883a 	add	r17,r17,r3
20088f40:	88c2002c 	andhi	r3,r17,2048
20088f44:	18000426 	beq	r3,zero,20088f58 <__divsf3+0x358>
20088f48:	11002004 	addi	r4,r2,128
20088f4c:	00be0034 	movhi	r2,63488
20088f50:	10bfffc4 	addi	r2,r2,-1
20088f54:	88a2703a 	and	r17,r17,r2
20088f58:	00803f84 	movi	r2,254
20088f5c:	1100060e 	bge	r2,r4,20088f78 <__divsf3+0x378>
20088f60:	9980004c 	andi	r6,r19,1
20088f64:	013fffc4 	movi	r4,-1
20088f68:	0007883a 	mov	r3,zero
20088f6c:	003f6f06 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20088f70:	9023883a 	mov	r17,r18
20088f74:	003fbf06 	br	20088e74 <__flash_rwdata_start+0xfffea088>
20088f78:	880691ba 	slli	r3,r17,6
20088f7c:	9980004c 	andi	r6,r19,1
20088f80:	1806d27a 	srli	r3,r3,9
20088f84:	003f6906 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20088f88:	10bfffc4 	addi	r2,r2,-1
20088f8c:	2827883a 	mov	r19,r5
20088f90:	018006c4 	movi	r6,27
20088f94:	0009883a 	mov	r4,zero
20088f98:	003fd606 	br	20088ef4 <__flash_rwdata_start+0xfffea108>
20088f9c:	9080102c 	andhi	r2,r18,64
20088fa0:	0023883a 	mov	r17,zero
20088fa4:	103fc626 	beq	r2,zero,20088ec0 <__flash_rwdata_start+0xfffea0d4>
20088fa8:	00802034 	movhi	r2,128
20088fac:	88c01034 	orhi	r3,r17,64
20088fb0:	10bfffc4 	addi	r2,r2,-1
20088fb4:	b00d883a 	mov	r6,r22
20088fb8:	1886703a 	and	r3,r3,r2
20088fbc:	003f5a06 	br	20088d28 <__flash_rwdata_start+0xfffe9f3c>
20088fc0:	00c000c4 	movi	r3,3
20088fc4:	b8c01c26 	beq	r23,r3,20089038 <__divsf3+0x438>
20088fc8:	00c00044 	movi	r3,1
20088fcc:	b8ffd41e 	bne	r23,r3,20088f20 <__flash_rwdata_start+0xfffea134>
20088fd0:	2980004c 	andi	r6,r5,1
20088fd4:	0009883a 	mov	r4,zero
20088fd8:	0007883a 	mov	r3,zero
20088fdc:	003f5306 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20088fe0:	10802784 	addi	r2,r2,158
20088fe4:	8884983a 	sll	r2,r17,r2
20088fe8:	8908d83a 	srl	r4,r17,r4
20088fec:	1022c03a 	cmpne	r17,r2,zero
20088ff0:	8908b03a 	or	r4,r17,r4
20088ff4:	208001cc 	andi	r2,r4,7
20088ff8:	10000426 	beq	r2,zero,2008900c <__divsf3+0x40c>
20088ffc:	20c003cc 	andi	r3,r4,15
20089000:	00800104 	movi	r2,4
20089004:	18800126 	beq	r3,r2,2008900c <__divsf3+0x40c>
20089008:	2089883a 	add	r4,r4,r2
2008900c:	2081002c 	andhi	r2,r4,1024
20089010:	10000426 	beq	r2,zero,20089024 <__divsf3+0x424>
20089014:	9980004c 	andi	r6,r19,1
20089018:	01000044 	movi	r4,1
2008901c:	0007883a 	mov	r3,zero
20089020:	003f4206 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20089024:	200691ba 	slli	r3,r4,6
20089028:	9980004c 	andi	r6,r19,1
2008902c:	0009883a 	mov	r4,zero
20089030:	1806d27a 	srli	r3,r3,9
20089034:	003f3d06 	br	20088d2c <__flash_rwdata_start+0xfffe9f40>
20089038:	00802034 	movhi	r2,128
2008903c:	88c01034 	orhi	r3,r17,64
20089040:	10bfffc4 	addi	r2,r2,-1
20089044:	9980004c 	andi	r6,r19,1
20089048:	1886703a 	and	r3,r3,r2
2008904c:	003f3606 	br	20088d28 <__flash_rwdata_start+0xfffe9f3c>

20089050 <__mulsf3>:
20089050:	defff504 	addi	sp,sp,-44
20089054:	dc400215 	stw	r17,8(sp)
20089058:	2022d5fa 	srli	r17,r4,23
2008905c:	dd400615 	stw	r21,24(sp)
20089060:	202ad7fa 	srli	r21,r4,31
20089064:	dc000115 	stw	r16,4(sp)
20089068:	04002034 	movhi	r16,128
2008906c:	df000915 	stw	fp,36(sp)
20089070:	dd000515 	stw	r20,20(sp)
20089074:	843fffc4 	addi	r16,r16,-1
20089078:	dfc00a15 	stw	ra,40(sp)
2008907c:	ddc00815 	stw	r23,32(sp)
20089080:	dd800715 	stw	r22,28(sp)
20089084:	dcc00415 	stw	r19,16(sp)
20089088:	dc800315 	stw	r18,12(sp)
2008908c:	8c403fcc 	andi	r17,r17,255
20089090:	8120703a 	and	r16,r16,r4
20089094:	a829883a 	mov	r20,r21
20089098:	af003fcc 	andi	fp,r21,255
2008909c:	88005026 	beq	r17,zero,200891e0 <__mulsf3+0x190>
200890a0:	00803fc4 	movi	r2,255
200890a4:	88802f26 	beq	r17,r2,20089164 <__mulsf3+0x114>
200890a8:	84002034 	orhi	r16,r16,128
200890ac:	802090fa 	slli	r16,r16,3
200890b0:	8c7fe044 	addi	r17,r17,-127
200890b4:	0025883a 	mov	r18,zero
200890b8:	002f883a 	mov	r23,zero
200890bc:	2804d5fa 	srli	r2,r5,23
200890c0:	282cd7fa 	srli	r22,r5,31
200890c4:	01002034 	movhi	r4,128
200890c8:	213fffc4 	addi	r4,r4,-1
200890cc:	10803fcc 	andi	r2,r2,255
200890d0:	2166703a 	and	r19,r4,r5
200890d4:	b1803fcc 	andi	r6,r22,255
200890d8:	10004926 	beq	r2,zero,20089200 <__mulsf3+0x1b0>
200890dc:	00c03fc4 	movi	r3,255
200890e0:	10c04326 	beq	r2,r3,200891f0 <__mulsf3+0x1a0>
200890e4:	99402034 	orhi	r5,r19,128
200890e8:	282690fa 	slli	r19,r5,3
200890ec:	10bfe044 	addi	r2,r2,-127
200890f0:	000b883a 	mov	r5,zero
200890f4:	8885883a 	add	r2,r17,r2
200890f8:	2c86b03a 	or	r3,r5,r18
200890fc:	010003c4 	movi	r4,15
20089100:	adaaf03a 	xor	r21,r21,r22
20089104:	12000044 	addi	r8,r2,1
20089108:	20c06536 	bltu	r4,r3,200892a0 <__mulsf3+0x250>
2008910c:	180690ba 	slli	r3,r3,2
20089110:	01080274 	movhi	r4,8201
20089114:	21244904 	addi	r4,r4,-28380
20089118:	1907883a 	add	r3,r3,r4
2008911c:	18c00017 	ldw	r3,0(r3)
20089120:	1800683a 	jmp	r3
20089124:	200892a0 	cmpeqi	zero,r4,8778
20089128:	2008936c 	andhi	zero,r4,8781
2008912c:	2008936c 	andhi	zero,r4,8781
20089130:	2008937c 	xorhi	zero,r4,8781
20089134:	20089174 	orhi	zero,r4,8773
20089138:	20089174 	orhi	zero,r4,8773
2008913c:	2008928c 	andi	zero,r4,8778
20089140:	2008937c 	xorhi	zero,r4,8781
20089144:	20089174 	orhi	zero,r4,8773
20089148:	2008928c 	andi	zero,r4,8778
2008914c:	20089174 	orhi	zero,r4,8773
20089150:	2008937c 	xorhi	zero,r4,8781
20089154:	20089178 	rdprs	zero,r4,8773
20089158:	20089178 	rdprs	zero,r4,8773
2008915c:	20089178 	rdprs	zero,r4,8773
20089160:	2008938c 	andi	zero,r4,8782
20089164:	8000311e 	bne	r16,zero,2008922c <__mulsf3+0x1dc>
20089168:	04800204 	movi	r18,8
2008916c:	05c00084 	movi	r23,2
20089170:	003fd206 	br	200890bc <__flash_rwdata_start+0xfffea2d0>
20089174:	a839883a 	mov	fp,r21
20089178:	00800084 	movi	r2,2
2008917c:	b880231e 	bne	r23,r2,2008920c <__mulsf3+0x1bc>
20089180:	e500004c 	andi	r20,fp,1
20089184:	00ffffc4 	movi	r3,-1
20089188:	0009883a 	mov	r4,zero
2008918c:	18c03fcc 	andi	r3,r3,255
20089190:	180695fa 	slli	r3,r3,23
20089194:	a0803fcc 	andi	r2,r20,255
20089198:	04002034 	movhi	r16,128
2008919c:	100497fa 	slli	r2,r2,31
200891a0:	843fffc4 	addi	r16,r16,-1
200891a4:	2420703a 	and	r16,r4,r16
200891a8:	80e0b03a 	or	r16,r16,r3
200891ac:	8084b03a 	or	r2,r16,r2
200891b0:	dfc00a17 	ldw	ra,40(sp)
200891b4:	df000917 	ldw	fp,36(sp)
200891b8:	ddc00817 	ldw	r23,32(sp)
200891bc:	dd800717 	ldw	r22,28(sp)
200891c0:	dd400617 	ldw	r21,24(sp)
200891c4:	dd000517 	ldw	r20,20(sp)
200891c8:	dcc00417 	ldw	r19,16(sp)
200891cc:	dc800317 	ldw	r18,12(sp)
200891d0:	dc400217 	ldw	r17,8(sp)
200891d4:	dc000117 	ldw	r16,4(sp)
200891d8:	dec00b04 	addi	sp,sp,44
200891dc:	f800283a 	ret
200891e0:	8000151e 	bne	r16,zero,20089238 <__mulsf3+0x1e8>
200891e4:	04800104 	movi	r18,4
200891e8:	05c00044 	movi	r23,1
200891ec:	003fb306 	br	200890bc <__flash_rwdata_start+0xfffea2d0>
200891f0:	980b003a 	cmpeq	r5,r19,zero
200891f4:	00c000c4 	movi	r3,3
200891f8:	194bc83a 	sub	r5,r3,r5
200891fc:	003fbd06 	br	200890f4 <__flash_rwdata_start+0xfffea308>
20089200:	9800181e 	bne	r19,zero,20089264 <__mulsf3+0x214>
20089204:	01400044 	movi	r5,1
20089208:	003fba06 	br	200890f4 <__flash_rwdata_start+0xfffea308>
2008920c:	008000c4 	movi	r2,3
20089210:	b8809226 	beq	r23,r2,2008945c <__mulsf3+0x40c>
20089214:	00800044 	movi	r2,1
20089218:	b880771e 	bne	r23,r2,200893f8 <__mulsf3+0x3a8>
2008921c:	e0a8703a 	and	r20,fp,r2
20089220:	0007883a 	mov	r3,zero
20089224:	0009883a 	mov	r4,zero
20089228:	003fd806 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
2008922c:	04800304 	movi	r18,12
20089230:	05c000c4 	movi	r23,3
20089234:	003fa106 	br	200890bc <__flash_rwdata_start+0xfffea2d0>
20089238:	8009883a 	mov	r4,r16
2008923c:	d9400015 	stw	r5,0(sp)
20089240:	008b4600 	call	2008b460 <__clzsi2>
20089244:	10fffec4 	addi	r3,r2,-5
20089248:	047fe284 	movi	r17,-118
2008924c:	80e0983a 	sll	r16,r16,r3
20089250:	88a3c83a 	sub	r17,r17,r2
20089254:	0025883a 	mov	r18,zero
20089258:	002f883a 	mov	r23,zero
2008925c:	d9400017 	ldw	r5,0(sp)
20089260:	003f9606 	br	200890bc <__flash_rwdata_start+0xfffea2d0>
20089264:	9809883a 	mov	r4,r19
20089268:	d9800015 	stw	r6,0(sp)
2008926c:	008b4600 	call	2008b460 <__clzsi2>
20089270:	10fffec4 	addi	r3,r2,-5
20089274:	98e6983a 	sll	r19,r19,r3
20089278:	00ffe284 	movi	r3,-118
2008927c:	1885c83a 	sub	r2,r3,r2
20089280:	000b883a 	mov	r5,zero
20089284:	d9800017 	ldw	r6,0(sp)
20089288:	003f9a06 	br	200890f4 <__flash_rwdata_start+0xfffea308>
2008928c:	01002034 	movhi	r4,128
20089290:	0029883a 	mov	r20,zero
20089294:	213fffc4 	addi	r4,r4,-1
20089298:	00ffffc4 	movi	r3,-1
2008929c:	003fbb06 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
200892a0:	8006d43a 	srli	r3,r16,16
200892a4:	9812d43a 	srli	r9,r19,16
200892a8:	843fffcc 	andi	r16,r16,65535
200892ac:	997fffcc 	andi	r5,r19,65535
200892b0:	2c0f383a 	mul	r7,r5,r16
200892b4:	28cb383a 	mul	r5,r5,r3
200892b8:	4c21383a 	mul	r16,r9,r16
200892bc:	380cd43a 	srli	r6,r7,16
200892c0:	48d3383a 	mul	r9,r9,r3
200892c4:	2c21883a 	add	r16,r5,r16
200892c8:	8187883a 	add	r3,r16,r6
200892cc:	1940022e 	bgeu	r3,r5,200892d8 <__mulsf3+0x288>
200892d0:	01000074 	movhi	r4,1
200892d4:	4913883a 	add	r9,r9,r4
200892d8:	1808943a 	slli	r4,r3,16
200892dc:	39ffffcc 	andi	r7,r7,65535
200892e0:	1806d43a 	srli	r3,r3,16
200892e4:	21c9883a 	add	r4,r4,r7
200892e8:	202091ba 	slli	r16,r4,6
200892ec:	48c7883a 	add	r3,r9,r3
200892f0:	2008d6ba 	srli	r4,r4,26
200892f4:	180691ba 	slli	r3,r3,6
200892f8:	8020c03a 	cmpne	r16,r16,zero
200892fc:	8120b03a 	or	r16,r16,r4
20089300:	80e0b03a 	or	r16,r16,r3
20089304:	80c2002c 	andhi	r3,r16,2048
20089308:	18000426 	beq	r3,zero,2008931c <__mulsf3+0x2cc>
2008930c:	8006d07a 	srli	r3,r16,1
20089310:	8400004c 	andi	r16,r16,1
20089314:	4005883a 	mov	r2,r8
20089318:	80e0b03a 	or	r16,r16,r3
2008931c:	10c01fc4 	addi	r3,r2,127
20089320:	00c02d0e 	bge	zero,r3,200893d8 <__mulsf3+0x388>
20089324:	810001cc 	andi	r4,r16,7
20089328:	20000426 	beq	r4,zero,2008933c <__mulsf3+0x2ec>
2008932c:	814003cc 	andi	r5,r16,15
20089330:	01000104 	movi	r4,4
20089334:	29000126 	beq	r5,r4,2008933c <__mulsf3+0x2ec>
20089338:	8121883a 	add	r16,r16,r4
2008933c:	8102002c 	andhi	r4,r16,2048
20089340:	20000426 	beq	r4,zero,20089354 <__mulsf3+0x304>
20089344:	10c02004 	addi	r3,r2,128
20089348:	00be0034 	movhi	r2,63488
2008934c:	10bfffc4 	addi	r2,r2,-1
20089350:	80a0703a 	and	r16,r16,r2
20089354:	00803f84 	movi	r2,254
20089358:	10c01b0e 	bge	r2,r3,200893c8 <__mulsf3+0x378>
2008935c:	ad00004c 	andi	r20,r21,1
20089360:	00ffffc4 	movi	r3,-1
20089364:	0009883a 	mov	r4,zero
20089368:	003f8806 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
2008936c:	9821883a 	mov	r16,r19
20089370:	a839883a 	mov	fp,r21
20089374:	282f883a 	mov	r23,r5
20089378:	003f7f06 	br	20089178 <__flash_rwdata_start+0xfffea38c>
2008937c:	9821883a 	mov	r16,r19
20089380:	3039883a 	mov	fp,r6
20089384:	282f883a 	mov	r23,r5
20089388:	003f7b06 	br	20089178 <__flash_rwdata_start+0xfffea38c>
2008938c:	8080102c 	andhi	r2,r16,64
20089390:	10000826 	beq	r2,zero,200893b4 <__mulsf3+0x364>
20089394:	9880102c 	andhi	r2,r19,64
20089398:	1000061e 	bne	r2,zero,200893b4 <__mulsf3+0x364>
2008939c:	00802034 	movhi	r2,128
200893a0:	99001034 	orhi	r4,r19,64
200893a4:	10bfffc4 	addi	r2,r2,-1
200893a8:	b029883a 	mov	r20,r22
200893ac:	2088703a 	and	r4,r4,r2
200893b0:	003fb906 	br	20089298 <__flash_rwdata_start+0xfffea4ac>
200893b4:	00802034 	movhi	r2,128
200893b8:	81001034 	orhi	r4,r16,64
200893bc:	10bfffc4 	addi	r2,r2,-1
200893c0:	2088703a 	and	r4,r4,r2
200893c4:	003fb406 	br	20089298 <__flash_rwdata_start+0xfffea4ac>
200893c8:	802091ba 	slli	r16,r16,6
200893cc:	ad00004c 	andi	r20,r21,1
200893d0:	8008d27a 	srli	r4,r16,9
200893d4:	003f6d06 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
200893d8:	00ffe084 	movi	r3,-126
200893dc:	1887c83a 	sub	r3,r3,r2
200893e0:	010006c4 	movi	r4,27
200893e4:	20c0070e 	bge	r4,r3,20089404 <__mulsf3+0x3b4>
200893e8:	ad00004c 	andi	r20,r21,1
200893ec:	0007883a 	mov	r3,zero
200893f0:	0009883a 	mov	r4,zero
200893f4:	003f6506 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
200893f8:	4005883a 	mov	r2,r8
200893fc:	e02b883a 	mov	r21,fp
20089400:	003fc606 	br	2008931c <__flash_rwdata_start+0xfffea530>
20089404:	10802784 	addi	r2,r2,158
20089408:	8084983a 	sll	r2,r16,r2
2008940c:	80e0d83a 	srl	r16,r16,r3
20089410:	1004c03a 	cmpne	r2,r2,zero
20089414:	1404b03a 	or	r2,r2,r16
20089418:	10c001cc 	andi	r3,r2,7
2008941c:	18000426 	beq	r3,zero,20089430 <__mulsf3+0x3e0>
20089420:	110003cc 	andi	r4,r2,15
20089424:	00c00104 	movi	r3,4
20089428:	20c00126 	beq	r4,r3,20089430 <__mulsf3+0x3e0>
2008942c:	10c5883a 	add	r2,r2,r3
20089430:	10c1002c 	andhi	r3,r2,1024
20089434:	18000426 	beq	r3,zero,20089448 <__mulsf3+0x3f8>
20089438:	ad00004c 	andi	r20,r21,1
2008943c:	00c00044 	movi	r3,1
20089440:	0009883a 	mov	r4,zero
20089444:	003f5106 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
20089448:	100491ba 	slli	r2,r2,6
2008944c:	ad00004c 	andi	r20,r21,1
20089450:	0007883a 	mov	r3,zero
20089454:	1008d27a 	srli	r4,r2,9
20089458:	003f4c06 	br	2008918c <__flash_rwdata_start+0xfffea3a0>
2008945c:	00802034 	movhi	r2,128
20089460:	81001034 	orhi	r4,r16,64
20089464:	10bfffc4 	addi	r2,r2,-1
20089468:	e500004c 	andi	r20,fp,1
2008946c:	2088703a 	and	r4,r4,r2
20089470:	003f8906 	br	20089298 <__flash_rwdata_start+0xfffea4ac>

20089474 <__floatunsisf>:
20089474:	defffe04 	addi	sp,sp,-8
20089478:	dc000015 	stw	r16,0(sp)
2008947c:	dfc00115 	stw	ra,4(sp)
20089480:	2021883a 	mov	r16,r4
20089484:	20002626 	beq	r4,zero,20089520 <__floatunsisf+0xac>
20089488:	008b4600 	call	2008b460 <__clzsi2>
2008948c:	00c02784 	movi	r3,158
20089490:	1887c83a 	sub	r3,r3,r2
20089494:	01002584 	movi	r4,150
20089498:	20c00816 	blt	r4,r3,200894bc <__floatunsisf+0x48>
2008949c:	01000204 	movi	r4,8
200894a0:	2080340e 	bge	r4,r2,20089574 <__floatunsisf+0x100>
200894a4:	10bffe04 	addi	r2,r2,-8
200894a8:	8088983a 	sll	r4,r16,r2
200894ac:	00802034 	movhi	r2,128
200894b0:	10bfffc4 	addi	r2,r2,-1
200894b4:	2088703a 	and	r4,r4,r2
200894b8:	00001b06 	br	20089528 <__floatunsisf+0xb4>
200894bc:	01002644 	movi	r4,153
200894c0:	20c02316 	blt	r4,r3,20089550 <__floatunsisf+0xdc>
200894c4:	01000144 	movi	r4,5
200894c8:	2080020e 	bge	r4,r2,200894d4 <__floatunsisf+0x60>
200894cc:	113ffec4 	addi	r4,r2,-5
200894d0:	8120983a 	sll	r16,r16,r4
200894d4:	017f0034 	movhi	r5,64512
200894d8:	297fffc4 	addi	r5,r5,-1
200894dc:	810001cc 	andi	r4,r16,7
200894e0:	814a703a 	and	r5,r16,r5
200894e4:	20000426 	beq	r4,zero,200894f8 <__floatunsisf+0x84>
200894e8:	840003cc 	andi	r16,r16,15
200894ec:	01000104 	movi	r4,4
200894f0:	81000126 	beq	r16,r4,200894f8 <__floatunsisf+0x84>
200894f4:	290b883a 	add	r5,r5,r4
200894f8:	2901002c 	andhi	r4,r5,1024
200894fc:	20000526 	beq	r4,zero,20089514 <__floatunsisf+0xa0>
20089500:	00c027c4 	movi	r3,159
20089504:	1887c83a 	sub	r3,r3,r2
20089508:	00bf0034 	movhi	r2,64512
2008950c:	10bfffc4 	addi	r2,r2,-1
20089510:	288a703a 	and	r5,r5,r2
20089514:	280891ba 	slli	r4,r5,6
20089518:	2008d27a 	srli	r4,r4,9
2008951c:	00000206 	br	20089528 <__floatunsisf+0xb4>
20089520:	0007883a 	mov	r3,zero
20089524:	0009883a 	mov	r4,zero
20089528:	18c03fcc 	andi	r3,r3,255
2008952c:	180695fa 	slli	r3,r3,23
20089530:	00802034 	movhi	r2,128
20089534:	10bfffc4 	addi	r2,r2,-1
20089538:	2084703a 	and	r2,r4,r2
2008953c:	10c4b03a 	or	r2,r2,r3
20089540:	dfc00117 	ldw	ra,4(sp)
20089544:	dc000017 	ldw	r16,0(sp)
20089548:	dec00204 	addi	sp,sp,8
2008954c:	f800283a 	ret
20089550:	01400144 	movi	r5,5
20089554:	110006c4 	addi	r4,r2,27
20089558:	8108983a 	sll	r4,r16,r4
2008955c:	288dc83a 	sub	r6,r5,r2
20089560:	81a0d83a 	srl	r16,r16,r6
20089564:	2008c03a 	cmpne	r4,r4,zero
20089568:	2420b03a 	or	r16,r4,r16
2008956c:	28bfd90e 	bge	r5,r2,200894d4 <__flash_rwdata_start+0xfffea6e8>
20089570:	003fd606 	br	200894cc <__flash_rwdata_start+0xfffea6e0>
20089574:	01402034 	movhi	r5,128
20089578:	297fffc4 	addi	r5,r5,-1
2008957c:	8148703a 	and	r4,r16,r5
20089580:	003fe906 	br	20089528 <__flash_rwdata_start+0xfffea73c>

20089584 <__adddf3>:
20089584:	02000434 	movhi	r8,16
20089588:	423fffc4 	addi	r8,r8,-1
2008958c:	defffb04 	addi	sp,sp,-20
20089590:	2a12703a 	and	r9,r5,r8
20089594:	2806d7fa 	srli	r3,r5,31
20089598:	3a10703a 	and	r8,r7,r8
2008959c:	3804d53a 	srli	r2,r7,20
200895a0:	3014d77a 	srli	r10,r6,29
200895a4:	dc000015 	stw	r16,0(sp)
200895a8:	481290fa 	slli	r9,r9,3
200895ac:	2820d53a 	srli	r16,r5,20
200895b0:	401090fa 	slli	r8,r8,3
200895b4:	200ad77a 	srli	r5,r4,29
200895b8:	380ed7fa 	srli	r7,r7,31
200895bc:	dc800215 	stw	r18,8(sp)
200895c0:	dc400115 	stw	r17,4(sp)
200895c4:	dfc00415 	stw	ra,16(sp)
200895c8:	dcc00315 	stw	r19,12(sp)
200895cc:	1c803fcc 	andi	r18,r3,255
200895d0:	8401ffcc 	andi	r16,r16,2047
200895d4:	494ab03a 	or	r5,r9,r5
200895d8:	202290fa 	slli	r17,r4,3
200895dc:	1081ffcc 	andi	r2,r2,2047
200895e0:	4290b03a 	or	r8,r8,r10
200895e4:	300c90fa 	slli	r6,r6,3
200895e8:	91c07026 	beq	r18,r7,200897ac <__adddf3+0x228>
200895ec:	8087c83a 	sub	r3,r16,r2
200895f0:	00c0b30e 	bge	zero,r3,200898c0 <__adddf3+0x33c>
200895f4:	10002a1e 	bne	r2,zero,200896a0 <__adddf3+0x11c>
200895f8:	4184b03a 	or	r2,r8,r6
200895fc:	1000991e 	bne	r2,zero,20089864 <__adddf3+0x2e0>
20089600:	888001cc 	andi	r2,r17,7
20089604:	10005b26 	beq	r2,zero,20089774 <__adddf3+0x1f0>
20089608:	88c003cc 	andi	r3,r17,15
2008960c:	00800104 	movi	r2,4
20089610:	18805826 	beq	r3,r2,20089774 <__adddf3+0x1f0>
20089614:	89800104 	addi	r6,r17,4
20089618:	3463803a 	cmpltu	r17,r6,r17
2008961c:	2c4b883a 	add	r5,r5,r17
20089620:	2880202c 	andhi	r2,r5,128
20089624:	9007883a 	mov	r3,r18
20089628:	3023883a 	mov	r17,r6
2008962c:	10005426 	beq	r2,zero,20089780 <__adddf3+0x1fc>
20089630:	84000044 	addi	r16,r16,1
20089634:	0081ffc4 	movi	r2,2047
20089638:	8080c126 	beq	r16,r2,20089940 <__adddf3+0x3bc>
2008963c:	013fe034 	movhi	r4,65408
20089640:	213fffc4 	addi	r4,r4,-1
20089644:	290a703a 	and	r5,r5,r4
20089648:	2804977a 	slli	r2,r5,29
2008964c:	280a927a 	slli	r5,r5,9
20089650:	8822d0fa 	srli	r17,r17,3
20089654:	8401ffcc 	andi	r16,r16,2047
20089658:	2808d33a 	srli	r4,r5,12
2008965c:	1444b03a 	or	r2,r2,r17
20089660:	8401ffcc 	andi	r16,r16,2047
20089664:	800a953a 	slli	r5,r16,20
20089668:	18c03fcc 	andi	r3,r3,255
2008966c:	04000434 	movhi	r16,16
20089670:	180697fa 	slli	r3,r3,31
20089674:	843fffc4 	addi	r16,r16,-1
20089678:	2420703a 	and	r16,r4,r16
2008967c:	8160b03a 	or	r16,r16,r5
20089680:	80c6b03a 	or	r3,r16,r3
20089684:	dfc00417 	ldw	ra,16(sp)
20089688:	dcc00317 	ldw	r19,12(sp)
2008968c:	dc800217 	ldw	r18,8(sp)
20089690:	dc400117 	ldw	r17,4(sp)
20089694:	dc000017 	ldw	r16,0(sp)
20089698:	dec00504 	addi	sp,sp,20
2008969c:	f800283a 	ret
200896a0:	0081ffc4 	movi	r2,2047
200896a4:	80bfd626 	beq	r16,r2,20089600 <__flash_rwdata_start+0xfffea814>
200896a8:	42002034 	orhi	r8,r8,128
200896ac:	00800e04 	movi	r2,56
200896b0:	10c0a616 	blt	r2,r3,2008994c <__adddf3+0x3c8>
200896b4:	008007c4 	movi	r2,31
200896b8:	10c0c916 	blt	r2,r3,200899e0 <__adddf3+0x45c>
200896bc:	00800804 	movi	r2,32
200896c0:	10c5c83a 	sub	r2,r2,r3
200896c4:	408e983a 	sll	r7,r8,r2
200896c8:	30c8d83a 	srl	r4,r6,r3
200896cc:	3084983a 	sll	r2,r6,r2
200896d0:	40c6d83a 	srl	r3,r8,r3
200896d4:	390cb03a 	or	r6,r7,r4
200896d8:	1004c03a 	cmpne	r2,r2,zero
200896dc:	308cb03a 	or	r6,r6,r2
200896e0:	898dc83a 	sub	r6,r17,r6
200896e4:	89a3803a 	cmpltu	r17,r17,r6
200896e8:	28cbc83a 	sub	r5,r5,r3
200896ec:	2c4bc83a 	sub	r5,r5,r17
200896f0:	3023883a 	mov	r17,r6
200896f4:	2880202c 	andhi	r2,r5,128
200896f8:	10006d26 	beq	r2,zero,200898b0 <__adddf3+0x32c>
200896fc:	04c02034 	movhi	r19,128
20089700:	9cffffc4 	addi	r19,r19,-1
20089704:	2ce6703a 	and	r19,r5,r19
20089708:	98007e26 	beq	r19,zero,20089904 <__adddf3+0x380>
2008970c:	9809883a 	mov	r4,r19
20089710:	008b4600 	call	2008b460 <__clzsi2>
20089714:	10fffe04 	addi	r3,r2,-8
20089718:	010007c4 	movi	r4,31
2008971c:	20c07f16 	blt	r4,r3,2008991c <__adddf3+0x398>
20089720:	01400a04 	movi	r5,40
20089724:	2885c83a 	sub	r2,r5,r2
20089728:	888ad83a 	srl	r5,r17,r2
2008972c:	98e6983a 	sll	r19,r19,r3
20089730:	88e2983a 	sll	r17,r17,r3
20089734:	2ce6b03a 	or	r19,r5,r19
20089738:	1c007c16 	blt	r3,r16,2008992c <__adddf3+0x3a8>
2008973c:	1c21c83a 	sub	r16,r3,r16
20089740:	81400044 	addi	r5,r16,1
20089744:	00c007c4 	movi	r3,31
20089748:	19409816 	blt	r3,r5,200899ac <__adddf3+0x428>
2008974c:	1c21c83a 	sub	r16,r3,r16
20089750:	8c08983a 	sll	r4,r17,r16
20089754:	8946d83a 	srl	r3,r17,r5
20089758:	9c20983a 	sll	r16,r19,r16
2008975c:	2008c03a 	cmpne	r4,r4,zero
20089760:	994ad83a 	srl	r5,r19,r5
20089764:	1c06b03a 	or	r3,r3,r16
20089768:	1922b03a 	or	r17,r3,r4
2008976c:	0021883a 	mov	r16,zero
20089770:	003fa306 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089774:	2880202c 	andhi	r2,r5,128
20089778:	9007883a 	mov	r3,r18
2008977c:	103fac1e 	bne	r2,zero,20089630 <__flash_rwdata_start+0xfffea844>
20089780:	2804977a 	slli	r2,r5,29
20089784:	8822d0fa 	srli	r17,r17,3
20089788:	0101ffc4 	movi	r4,2047
2008978c:	280ad0fa 	srli	r5,r5,3
20089790:	1444b03a 	or	r2,r2,r17
20089794:	81002c26 	beq	r16,r4,20089848 <__adddf3+0x2c4>
20089798:	8120703a 	and	r16,r16,r4
2008979c:	01000434 	movhi	r4,16
200897a0:	213fffc4 	addi	r4,r4,-1
200897a4:	2908703a 	and	r4,r5,r4
200897a8:	003fad06 	br	20089660 <__flash_rwdata_start+0xfffea874>
200897ac:	8089c83a 	sub	r4,r16,r2
200897b0:	01006a0e 	bge	zero,r4,2008995c <__adddf3+0x3d8>
200897b4:	10003326 	beq	r2,zero,20089884 <__adddf3+0x300>
200897b8:	0081ffc4 	movi	r2,2047
200897bc:	80bf9026 	beq	r16,r2,20089600 <__flash_rwdata_start+0xfffea814>
200897c0:	42002034 	orhi	r8,r8,128
200897c4:	00800e04 	movi	r2,56
200897c8:	1100b116 	blt	r2,r4,20089a90 <__adddf3+0x50c>
200897cc:	008007c4 	movi	r2,31
200897d0:	1100e216 	blt	r2,r4,20089b5c <__adddf3+0x5d8>
200897d4:	00800804 	movi	r2,32
200897d8:	1105c83a 	sub	r2,r2,r4
200897dc:	4092983a 	sll	r9,r8,r2
200897e0:	310ed83a 	srl	r7,r6,r4
200897e4:	3084983a 	sll	r2,r6,r2
200897e8:	4110d83a 	srl	r8,r8,r4
200897ec:	49ccb03a 	or	r6,r9,r7
200897f0:	1004c03a 	cmpne	r2,r2,zero
200897f4:	308cb03a 	or	r6,r6,r2
200897f8:	344d883a 	add	r6,r6,r17
200897fc:	3463803a 	cmpltu	r17,r6,r17
20089800:	414b883a 	add	r5,r8,r5
20089804:	2c4b883a 	add	r5,r5,r17
20089808:	3023883a 	mov	r17,r6
2008980c:	2880202c 	andhi	r2,r5,128
20089810:	10002726 	beq	r2,zero,200898b0 <__adddf3+0x32c>
20089814:	84000044 	addi	r16,r16,1
20089818:	0081ffc4 	movi	r2,2047
2008981c:	8080ae26 	beq	r16,r2,20089ad8 <__adddf3+0x554>
20089820:	00bfe034 	movhi	r2,65408
20089824:	10bfffc4 	addi	r2,r2,-1
20089828:	288a703a 	and	r5,r5,r2
2008982c:	880cd07a 	srli	r6,r17,1
20089830:	280897fa 	slli	r4,r5,31
20089834:	88c0004c 	andi	r3,r17,1
20089838:	30e2b03a 	or	r17,r6,r3
2008983c:	280ad07a 	srli	r5,r5,1
20089840:	8922b03a 	or	r17,r17,r4
20089844:	003f6e06 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089848:	1148b03a 	or	r4,r2,r5
2008984c:	20003c26 	beq	r4,zero,20089940 <__adddf3+0x3bc>
20089850:	29000234 	orhi	r4,r5,8
20089854:	01400434 	movhi	r5,16
20089858:	297fffc4 	addi	r5,r5,-1
2008985c:	2148703a 	and	r4,r4,r5
20089860:	003f7f06 	br	20089660 <__flash_rwdata_start+0xfffea874>
20089864:	18ffffc4 	addi	r3,r3,-1
20089868:	18004d1e 	bne	r3,zero,200899a0 <__adddf3+0x41c>
2008986c:	898dc83a 	sub	r6,r17,r6
20089870:	89a3803a 	cmpltu	r17,r17,r6
20089874:	2a0bc83a 	sub	r5,r5,r8
20089878:	2c4bc83a 	sub	r5,r5,r17
2008987c:	3023883a 	mov	r17,r6
20089880:	003f9c06 	br	200896f4 <__flash_rwdata_start+0xfffea908>
20089884:	4184b03a 	or	r2,r8,r6
20089888:	103f5d26 	beq	r2,zero,20089600 <__flash_rwdata_start+0xfffea814>
2008988c:	213fffc4 	addi	r4,r4,-1
20089890:	203fd926 	beq	r4,zero,200897f8 <__flash_rwdata_start+0xfffeaa0c>
20089894:	0081ffc4 	movi	r2,2047
20089898:	80bfca1e 	bne	r16,r2,200897c4 <__flash_rwdata_start+0xfffea9d8>
2008989c:	003f5806 	br	20089600 <__flash_rwdata_start+0xfffea814>
200898a0:	10c8b03a 	or	r4,r2,r3
200898a4:	20008b26 	beq	r4,zero,20089ad4 <__adddf3+0x550>
200898a8:	100b883a 	mov	r5,r2
200898ac:	1823883a 	mov	r17,r3
200898b0:	888001cc 	andi	r2,r17,7
200898b4:	103f541e 	bne	r2,zero,20089608 <__flash_rwdata_start+0xfffea81c>
200898b8:	9007883a 	mov	r3,r18
200898bc:	003fb006 	br	20089780 <__flash_rwdata_start+0xfffea994>
200898c0:	1800531e 	bne	r3,zero,20089a10 <__adddf3+0x48c>
200898c4:	80800044 	addi	r2,r16,1
200898c8:	1081ffcc 	andi	r2,r2,2047
200898cc:	00c00044 	movi	r3,1
200898d0:	1880990e 	bge	r3,r2,20089b38 <__adddf3+0x5b4>
200898d4:	8985c83a 	sub	r2,r17,r6
200898d8:	8887803a 	cmpltu	r3,r17,r2
200898dc:	2a27c83a 	sub	r19,r5,r8
200898e0:	98e7c83a 	sub	r19,r19,r3
200898e4:	98c0202c 	andhi	r3,r19,128
200898e8:	18006226 	beq	r3,zero,20089a74 <__adddf3+0x4f0>
200898ec:	3463c83a 	sub	r17,r6,r17
200898f0:	4151c83a 	sub	r8,r8,r5
200898f4:	344d803a 	cmpltu	r6,r6,r17
200898f8:	41a7c83a 	sub	r19,r8,r6
200898fc:	3825883a 	mov	r18,r7
20089900:	983f821e 	bne	r19,zero,2008970c <__flash_rwdata_start+0xfffea920>
20089904:	8809883a 	mov	r4,r17
20089908:	008b4600 	call	2008b460 <__clzsi2>
2008990c:	10800804 	addi	r2,r2,32
20089910:	10fffe04 	addi	r3,r2,-8
20089914:	010007c4 	movi	r4,31
20089918:	20ff810e 	bge	r4,r3,20089720 <__flash_rwdata_start+0xfffea934>
2008991c:	14fff604 	addi	r19,r2,-40
20089920:	8ce6983a 	sll	r19,r17,r19
20089924:	0023883a 	mov	r17,zero
20089928:	1c3f840e 	bge	r3,r16,2008973c <__flash_rwdata_start+0xfffea950>
2008992c:	017fe034 	movhi	r5,65408
20089930:	297fffc4 	addi	r5,r5,-1
20089934:	80e1c83a 	sub	r16,r16,r3
20089938:	994a703a 	and	r5,r19,r5
2008993c:	003f3006 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089940:	0009883a 	mov	r4,zero
20089944:	0005883a 	mov	r2,zero
20089948:	003f4506 	br	20089660 <__flash_rwdata_start+0xfffea874>
2008994c:	418cb03a 	or	r6,r8,r6
20089950:	300cc03a 	cmpne	r6,r6,zero
20089954:	0007883a 	mov	r3,zero
20089958:	003f6106 	br	200896e0 <__flash_rwdata_start+0xfffea8f4>
2008995c:	2000921e 	bne	r4,zero,20089ba8 <__adddf3+0x624>
20089960:	80800044 	addi	r2,r16,1
20089964:	11c1ffcc 	andi	r7,r2,2047
20089968:	01000044 	movi	r4,1
2008996c:	21c0610e 	bge	r4,r7,20089af4 <__adddf3+0x570>
20089970:	0101ffc4 	movi	r4,2047
20089974:	1100a326 	beq	r2,r4,20089c04 <__adddf3+0x680>
20089978:	344d883a 	add	r6,r6,r17
2008997c:	3463803a 	cmpltu	r17,r6,r17
20089980:	414b883a 	add	r5,r8,r5
20089984:	2c4b883a 	add	r5,r5,r17
20089988:	282297fa 	slli	r17,r5,31
2008998c:	300cd07a 	srli	r6,r6,1
20089990:	280ad07a 	srli	r5,r5,1
20089994:	1021883a 	mov	r16,r2
20089998:	89a2b03a 	or	r17,r17,r6
2008999c:	003f1806 	br	20089600 <__flash_rwdata_start+0xfffea814>
200899a0:	0081ffc4 	movi	r2,2047
200899a4:	80bf411e 	bne	r16,r2,200896ac <__flash_rwdata_start+0xfffea8c0>
200899a8:	003f1506 	br	20089600 <__flash_rwdata_start+0xfffea814>
200899ac:	80bff844 	addi	r2,r16,-31
200899b0:	00c00804 	movi	r3,32
200899b4:	9884d83a 	srl	r2,r19,r2
200899b8:	28c04a26 	beq	r5,r3,20089ae4 <__adddf3+0x560>
200899bc:	00c00fc4 	movi	r3,63
200899c0:	1c21c83a 	sub	r16,r3,r16
200899c4:	9c26983a 	sll	r19,r19,r16
200899c8:	9c62b03a 	or	r17,r19,r17
200899cc:	8822c03a 	cmpne	r17,r17,zero
200899d0:	88a2b03a 	or	r17,r17,r2
200899d4:	000b883a 	mov	r5,zero
200899d8:	0021883a 	mov	r16,zero
200899dc:	003fb406 	br	200898b0 <__flash_rwdata_start+0xfffeaac4>
200899e0:	18bff804 	addi	r2,r3,-32
200899e4:	01000804 	movi	r4,32
200899e8:	4084d83a 	srl	r2,r8,r2
200899ec:	19003f26 	beq	r3,r4,20089aec <__adddf3+0x568>
200899f0:	01001004 	movi	r4,64
200899f4:	20c7c83a 	sub	r3,r4,r3
200899f8:	40d0983a 	sll	r8,r8,r3
200899fc:	418cb03a 	or	r6,r8,r6
20089a00:	300cc03a 	cmpne	r6,r6,zero
20089a04:	308cb03a 	or	r6,r6,r2
20089a08:	0007883a 	mov	r3,zero
20089a0c:	003f3406 	br	200896e0 <__flash_rwdata_start+0xfffea8f4>
20089a10:	80002326 	beq	r16,zero,20089aa0 <__adddf3+0x51c>
20089a14:	0101ffc4 	movi	r4,2047
20089a18:	11005e26 	beq	r2,r4,20089b94 <__adddf3+0x610>
20089a1c:	00c7c83a 	sub	r3,zero,r3
20089a20:	29402034 	orhi	r5,r5,128
20089a24:	01000e04 	movi	r4,56
20089a28:	20c07216 	blt	r4,r3,20089bf4 <__adddf3+0x670>
20089a2c:	010007c4 	movi	r4,31
20089a30:	20c0ce16 	blt	r4,r3,20089d6c <__adddf3+0x7e8>
20089a34:	01000804 	movi	r4,32
20089a38:	20c9c83a 	sub	r4,r4,r3
20089a3c:	2914983a 	sll	r10,r5,r4
20089a40:	88d2d83a 	srl	r9,r17,r3
20089a44:	8908983a 	sll	r4,r17,r4
20089a48:	28c6d83a 	srl	r3,r5,r3
20089a4c:	5262b03a 	or	r17,r10,r9
20089a50:	2008c03a 	cmpne	r4,r4,zero
20089a54:	8922b03a 	or	r17,r17,r4
20089a58:	3463c83a 	sub	r17,r6,r17
20089a5c:	40c7c83a 	sub	r3,r8,r3
20089a60:	344d803a 	cmpltu	r6,r6,r17
20089a64:	198bc83a 	sub	r5,r3,r6
20089a68:	1021883a 	mov	r16,r2
20089a6c:	3825883a 	mov	r18,r7
20089a70:	003f2006 	br	200896f4 <__flash_rwdata_start+0xfffea908>
20089a74:	9886b03a 	or	r3,r19,r2
20089a78:	1800141e 	bne	r3,zero,20089acc <__adddf3+0x548>
20089a7c:	0007883a 	mov	r3,zero
20089a80:	000b883a 	mov	r5,zero
20089a84:	0023883a 	mov	r17,zero
20089a88:	0021883a 	mov	r16,zero
20089a8c:	003f3c06 	br	20089780 <__flash_rwdata_start+0xfffea994>
20089a90:	418cb03a 	or	r6,r8,r6
20089a94:	300cc03a 	cmpne	r6,r6,zero
20089a98:	0011883a 	mov	r8,zero
20089a9c:	003f5606 	br	200897f8 <__flash_rwdata_start+0xfffeaa0c>
20089aa0:	2c48b03a 	or	r4,r5,r17
20089aa4:	20003b26 	beq	r4,zero,20089b94 <__adddf3+0x610>
20089aa8:	00c6303a 	nor	r3,zero,r3
20089aac:	1800371e 	bne	r3,zero,20089b8c <__adddf3+0x608>
20089ab0:	3463c83a 	sub	r17,r6,r17
20089ab4:	414bc83a 	sub	r5,r8,r5
20089ab8:	344d803a 	cmpltu	r6,r6,r17
20089abc:	298bc83a 	sub	r5,r5,r6
20089ac0:	1021883a 	mov	r16,r2
20089ac4:	3825883a 	mov	r18,r7
20089ac8:	003f0a06 	br	200896f4 <__flash_rwdata_start+0xfffea908>
20089acc:	1023883a 	mov	r17,r2
20089ad0:	003f0d06 	br	20089708 <__flash_rwdata_start+0xfffea91c>
20089ad4:	0007883a 	mov	r3,zero
20089ad8:	000b883a 	mov	r5,zero
20089adc:	0023883a 	mov	r17,zero
20089ae0:	003f2706 	br	20089780 <__flash_rwdata_start+0xfffea994>
20089ae4:	0027883a 	mov	r19,zero
20089ae8:	003fb706 	br	200899c8 <__flash_rwdata_start+0xfffeabdc>
20089aec:	0011883a 	mov	r8,zero
20089af0:	003fc206 	br	200899fc <__flash_rwdata_start+0xfffeac10>
20089af4:	2c44b03a 	or	r2,r5,r17
20089af8:	8000871e 	bne	r16,zero,20089d18 <__adddf3+0x794>
20089afc:	1000b126 	beq	r2,zero,20089dc4 <__adddf3+0x840>
20089b00:	4184b03a 	or	r2,r8,r6
20089b04:	103ebe26 	beq	r2,zero,20089600 <__flash_rwdata_start+0xfffea814>
20089b08:	3445883a 	add	r2,r6,r17
20089b0c:	1463803a 	cmpltu	r17,r2,r17
20089b10:	414b883a 	add	r5,r8,r5
20089b14:	2c4b883a 	add	r5,r5,r17
20089b18:	28c0202c 	andhi	r3,r5,128
20089b1c:	1023883a 	mov	r17,r2
20089b20:	183f6326 	beq	r3,zero,200898b0 <__flash_rwdata_start+0xfffeaac4>
20089b24:	00bfe034 	movhi	r2,65408
20089b28:	10bfffc4 	addi	r2,r2,-1
20089b2c:	2021883a 	mov	r16,r4
20089b30:	288a703a 	and	r5,r5,r2
20089b34:	003eb206 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089b38:	2c44b03a 	or	r2,r5,r17
20089b3c:	8000251e 	bne	r16,zero,20089bd4 <__adddf3+0x650>
20089b40:	10004b1e 	bne	r2,zero,20089c70 <__adddf3+0x6ec>
20089b44:	4184b03a 	or	r2,r8,r6
20089b48:	103fe226 	beq	r2,zero,20089ad4 <__flash_rwdata_start+0xfffeace8>
20089b4c:	400b883a 	mov	r5,r8
20089b50:	3023883a 	mov	r17,r6
20089b54:	3825883a 	mov	r18,r7
20089b58:	003ea906 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089b5c:	20bff804 	addi	r2,r4,-32
20089b60:	01c00804 	movi	r7,32
20089b64:	4084d83a 	srl	r2,r8,r2
20089b68:	21c07e26 	beq	r4,r7,20089d64 <__adddf3+0x7e0>
20089b6c:	01c01004 	movi	r7,64
20089b70:	3909c83a 	sub	r4,r7,r4
20089b74:	4110983a 	sll	r8,r8,r4
20089b78:	418cb03a 	or	r6,r8,r6
20089b7c:	300cc03a 	cmpne	r6,r6,zero
20089b80:	308cb03a 	or	r6,r6,r2
20089b84:	0011883a 	mov	r8,zero
20089b88:	003f1b06 	br	200897f8 <__flash_rwdata_start+0xfffeaa0c>
20089b8c:	0101ffc4 	movi	r4,2047
20089b90:	113fa41e 	bne	r2,r4,20089a24 <__flash_rwdata_start+0xfffeac38>
20089b94:	400b883a 	mov	r5,r8
20089b98:	3023883a 	mov	r17,r6
20089b9c:	1021883a 	mov	r16,r2
20089ba0:	3825883a 	mov	r18,r7
20089ba4:	003e9606 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089ba8:	80001a1e 	bne	r16,zero,20089c14 <__adddf3+0x690>
20089bac:	2c4eb03a 	or	r7,r5,r17
20089bb0:	38005526 	beq	r7,zero,20089d08 <__adddf3+0x784>
20089bb4:	0108303a 	nor	r4,zero,r4
20089bb8:	2000511e 	bne	r4,zero,20089d00 <__adddf3+0x77c>
20089bbc:	89a3883a 	add	r17,r17,r6
20089bc0:	414b883a 	add	r5,r8,r5
20089bc4:	898d803a 	cmpltu	r6,r17,r6
20089bc8:	298b883a 	add	r5,r5,r6
20089bcc:	1021883a 	mov	r16,r2
20089bd0:	003f0e06 	br	2008980c <__flash_rwdata_start+0xfffeaa20>
20089bd4:	1000341e 	bne	r2,zero,20089ca8 <__adddf3+0x724>
20089bd8:	4184b03a 	or	r2,r8,r6
20089bdc:	10006f26 	beq	r2,zero,20089d9c <__adddf3+0x818>
20089be0:	400b883a 	mov	r5,r8
20089be4:	3023883a 	mov	r17,r6
20089be8:	3825883a 	mov	r18,r7
20089bec:	0401ffc4 	movi	r16,2047
20089bf0:	003e8306 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089bf4:	2c62b03a 	or	r17,r5,r17
20089bf8:	8822c03a 	cmpne	r17,r17,zero
20089bfc:	0007883a 	mov	r3,zero
20089c00:	003f9506 	br	20089a58 <__flash_rwdata_start+0xfffeac6c>
20089c04:	1021883a 	mov	r16,r2
20089c08:	000b883a 	mov	r5,zero
20089c0c:	0023883a 	mov	r17,zero
20089c10:	003edb06 	br	20089780 <__flash_rwdata_start+0xfffea994>
20089c14:	01c1ffc4 	movi	r7,2047
20089c18:	11c03b26 	beq	r2,r7,20089d08 <__adddf3+0x784>
20089c1c:	0109c83a 	sub	r4,zero,r4
20089c20:	29402034 	orhi	r5,r5,128
20089c24:	01c00e04 	movi	r7,56
20089c28:	39006216 	blt	r7,r4,20089db4 <__adddf3+0x830>
20089c2c:	01c007c4 	movi	r7,31
20089c30:	39006b16 	blt	r7,r4,20089de0 <__adddf3+0x85c>
20089c34:	01c00804 	movi	r7,32
20089c38:	390fc83a 	sub	r7,r7,r4
20089c3c:	29d4983a 	sll	r10,r5,r7
20089c40:	8912d83a 	srl	r9,r17,r4
20089c44:	89ce983a 	sll	r7,r17,r7
20089c48:	2908d83a 	srl	r4,r5,r4
20089c4c:	5262b03a 	or	r17,r10,r9
20089c50:	380ac03a 	cmpne	r5,r7,zero
20089c54:	8962b03a 	or	r17,r17,r5
20089c58:	89a3883a 	add	r17,r17,r6
20089c5c:	2211883a 	add	r8,r4,r8
20089c60:	898d803a 	cmpltu	r6,r17,r6
20089c64:	418b883a 	add	r5,r8,r6
20089c68:	1021883a 	mov	r16,r2
20089c6c:	003ee706 	br	2008980c <__flash_rwdata_start+0xfffeaa20>
20089c70:	4184b03a 	or	r2,r8,r6
20089c74:	103e6226 	beq	r2,zero,20089600 <__flash_rwdata_start+0xfffea814>
20089c78:	8987c83a 	sub	r3,r17,r6
20089c7c:	88c9803a 	cmpltu	r4,r17,r3
20089c80:	2a05c83a 	sub	r2,r5,r8
20089c84:	1105c83a 	sub	r2,r2,r4
20089c88:	1100202c 	andhi	r4,r2,128
20089c8c:	203f0426 	beq	r4,zero,200898a0 <__flash_rwdata_start+0xfffeaab4>
20089c90:	3463c83a 	sub	r17,r6,r17
20089c94:	414bc83a 	sub	r5,r8,r5
20089c98:	344d803a 	cmpltu	r6,r6,r17
20089c9c:	298bc83a 	sub	r5,r5,r6
20089ca0:	3825883a 	mov	r18,r7
20089ca4:	003e5606 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089ca8:	4184b03a 	or	r2,r8,r6
20089cac:	10002b26 	beq	r2,zero,20089d5c <__adddf3+0x7d8>
20089cb0:	2804d0fa 	srli	r2,r5,3
20089cb4:	8822d0fa 	srli	r17,r17,3
20089cb8:	280a977a 	slli	r5,r5,29
20089cbc:	10c0022c 	andhi	r3,r2,8
20089cc0:	2c62b03a 	or	r17,r5,r17
20089cc4:	18000826 	beq	r3,zero,20089ce8 <__adddf3+0x764>
20089cc8:	4008d0fa 	srli	r4,r8,3
20089ccc:	20c0022c 	andhi	r3,r4,8
20089cd0:	1800051e 	bne	r3,zero,20089ce8 <__adddf3+0x764>
20089cd4:	300cd0fa 	srli	r6,r6,3
20089cd8:	4010977a 	slli	r8,r8,29
20089cdc:	2005883a 	mov	r2,r4
20089ce0:	3825883a 	mov	r18,r7
20089ce4:	41a2b03a 	or	r17,r8,r6
20089ce8:	880ad77a 	srli	r5,r17,29
20089cec:	100490fa 	slli	r2,r2,3
20089cf0:	882290fa 	slli	r17,r17,3
20089cf4:	0401ffc4 	movi	r16,2047
20089cf8:	288ab03a 	or	r5,r5,r2
20089cfc:	003e4006 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089d00:	01c1ffc4 	movi	r7,2047
20089d04:	11ffc71e 	bne	r2,r7,20089c24 <__flash_rwdata_start+0xfffeae38>
20089d08:	400b883a 	mov	r5,r8
20089d0c:	3023883a 	mov	r17,r6
20089d10:	1021883a 	mov	r16,r2
20089d14:	003e3a06 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089d18:	10002d26 	beq	r2,zero,20089dd0 <__adddf3+0x84c>
20089d1c:	4184b03a 	or	r2,r8,r6
20089d20:	10000e26 	beq	r2,zero,20089d5c <__adddf3+0x7d8>
20089d24:	2804d0fa 	srli	r2,r5,3
20089d28:	8822d0fa 	srli	r17,r17,3
20089d2c:	280a977a 	slli	r5,r5,29
20089d30:	10c0022c 	andhi	r3,r2,8
20089d34:	2c62b03a 	or	r17,r5,r17
20089d38:	183feb26 	beq	r3,zero,20089ce8 <__flash_rwdata_start+0xfffeaefc>
20089d3c:	4008d0fa 	srli	r4,r8,3
20089d40:	20c0022c 	andhi	r3,r4,8
20089d44:	183fe81e 	bne	r3,zero,20089ce8 <__flash_rwdata_start+0xfffeaefc>
20089d48:	300cd0fa 	srli	r6,r6,3
20089d4c:	4010977a 	slli	r8,r8,29
20089d50:	2005883a 	mov	r2,r4
20089d54:	41a2b03a 	or	r17,r8,r6
20089d58:	003fe306 	br	20089ce8 <__flash_rwdata_start+0xfffeaefc>
20089d5c:	0401ffc4 	movi	r16,2047
20089d60:	003e2706 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089d64:	0011883a 	mov	r8,zero
20089d68:	003f8306 	br	20089b78 <__flash_rwdata_start+0xfffead8c>
20089d6c:	193ff804 	addi	r4,r3,-32
20089d70:	02400804 	movi	r9,32
20089d74:	2908d83a 	srl	r4,r5,r4
20089d78:	1a402526 	beq	r3,r9,20089e10 <__adddf3+0x88c>
20089d7c:	02401004 	movi	r9,64
20089d80:	48c7c83a 	sub	r3,r9,r3
20089d84:	28ca983a 	sll	r5,r5,r3
20089d88:	2c62b03a 	or	r17,r5,r17
20089d8c:	8822c03a 	cmpne	r17,r17,zero
20089d90:	8922b03a 	or	r17,r17,r4
20089d94:	0007883a 	mov	r3,zero
20089d98:	003f2f06 	br	20089a58 <__flash_rwdata_start+0xfffeac6c>
20089d9c:	01402034 	movhi	r5,128
20089da0:	0007883a 	mov	r3,zero
20089da4:	297fffc4 	addi	r5,r5,-1
20089da8:	047ffe04 	movi	r17,-8
20089dac:	0401ffc4 	movi	r16,2047
20089db0:	003e7306 	br	20089780 <__flash_rwdata_start+0xfffea994>
20089db4:	2c62b03a 	or	r17,r5,r17
20089db8:	8822c03a 	cmpne	r17,r17,zero
20089dbc:	0009883a 	mov	r4,zero
20089dc0:	003fa506 	br	20089c58 <__flash_rwdata_start+0xfffeae6c>
20089dc4:	400b883a 	mov	r5,r8
20089dc8:	3023883a 	mov	r17,r6
20089dcc:	003e0c06 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089dd0:	400b883a 	mov	r5,r8
20089dd4:	3023883a 	mov	r17,r6
20089dd8:	0401ffc4 	movi	r16,2047
20089ddc:	003e0806 	br	20089600 <__flash_rwdata_start+0xfffea814>
20089de0:	21fff804 	addi	r7,r4,-32
20089de4:	02400804 	movi	r9,32
20089de8:	29ced83a 	srl	r7,r5,r7
20089dec:	22400a26 	beq	r4,r9,20089e18 <__adddf3+0x894>
20089df0:	02401004 	movi	r9,64
20089df4:	4909c83a 	sub	r4,r9,r4
20089df8:	290a983a 	sll	r5,r5,r4
20089dfc:	2c62b03a 	or	r17,r5,r17
20089e00:	8822c03a 	cmpne	r17,r17,zero
20089e04:	89e2b03a 	or	r17,r17,r7
20089e08:	0009883a 	mov	r4,zero
20089e0c:	003f9206 	br	20089c58 <__flash_rwdata_start+0xfffeae6c>
20089e10:	000b883a 	mov	r5,zero
20089e14:	003fdc06 	br	20089d88 <__flash_rwdata_start+0xfffeaf9c>
20089e18:	000b883a 	mov	r5,zero
20089e1c:	003ff706 	br	20089dfc <__flash_rwdata_start+0xfffeb010>

20089e20 <__divdf3>:
20089e20:	defff204 	addi	sp,sp,-56
20089e24:	dd000815 	stw	r20,32(sp)
20089e28:	2828d53a 	srli	r20,r5,20
20089e2c:	dd800a15 	stw	r22,40(sp)
20089e30:	282cd7fa 	srli	r22,r5,31
20089e34:	dc000415 	stw	r16,16(sp)
20089e38:	04000434 	movhi	r16,16
20089e3c:	df000c15 	stw	fp,48(sp)
20089e40:	dcc00715 	stw	r19,28(sp)
20089e44:	dc800615 	stw	r18,24(sp)
20089e48:	dc400515 	stw	r17,20(sp)
20089e4c:	843fffc4 	addi	r16,r16,-1
20089e50:	dfc00d15 	stw	ra,52(sp)
20089e54:	ddc00b15 	stw	r23,44(sp)
20089e58:	dd400915 	stw	r21,36(sp)
20089e5c:	a501ffcc 	andi	r20,r20,2047
20089e60:	2025883a 	mov	r18,r4
20089e64:	2027883a 	mov	r19,r4
20089e68:	2c22703a 	and	r17,r5,r16
20089e6c:	b7003fcc 	andi	fp,r22,255
20089e70:	a0005e26 	beq	r20,zero,20089fec <__divdf3+0x1cc>
20089e74:	0081ffc4 	movi	r2,2047
20089e78:	a0803526 	beq	r20,r2,20089f50 <__divdf3+0x130>
20089e7c:	8c000434 	orhi	r16,r17,16
20089e80:	2004d77a 	srli	r2,r4,29
20089e84:	802090fa 	slli	r16,r16,3
20089e88:	202690fa 	slli	r19,r4,3
20089e8c:	a53f0044 	addi	r20,r20,-1023
20089e90:	80a2b03a 	or	r17,r16,r2
20089e94:	0025883a 	mov	r18,zero
20089e98:	0011883a 	mov	r8,zero
20089e9c:	380ad53a 	srli	r5,r7,20
20089ea0:	382ed7fa 	srli	r23,r7,31
20089ea4:	04000434 	movhi	r16,16
20089ea8:	843fffc4 	addi	r16,r16,-1
20089eac:	2941ffcc 	andi	r5,r5,2047
20089eb0:	302b883a 	mov	r21,r6
20089eb4:	3c20703a 	and	r16,r7,r16
20089eb8:	ba403fcc 	andi	r9,r23,255
20089ebc:	28006726 	beq	r5,zero,2008a05c <__divdf3+0x23c>
20089ec0:	0081ffc4 	movi	r2,2047
20089ec4:	28805f26 	beq	r5,r2,2008a044 <__divdf3+0x224>
20089ec8:	84000434 	orhi	r16,r16,16
20089ecc:	3004d77a 	srli	r2,r6,29
20089ed0:	802090fa 	slli	r16,r16,3
20089ed4:	302a90fa 	slli	r21,r6,3
20089ed8:	297f0044 	addi	r5,r5,-1023
20089edc:	80a0b03a 	or	r16,r16,r2
20089ee0:	000f883a 	mov	r7,zero
20089ee4:	3c86b03a 	or	r3,r7,r18
20089ee8:	180690ba 	slli	r3,r3,2
20089eec:	00880274 	movhi	r2,8201
20089ef0:	10a7c404 	addi	r2,r2,-24816
20089ef4:	1887883a 	add	r3,r3,r2
20089ef8:	18c00017 	ldw	r3,0(r3)
20089efc:	b5c8f03a 	xor	r4,r22,r23
20089f00:	200d883a 	mov	r6,r4
20089f04:	24803fcc 	andi	r18,r4,255
20089f08:	a169c83a 	sub	r20,r20,r5
20089f0c:	1800683a 	jmp	r3
20089f10:	2008a158 	cmpnei	zero,r4,8837
20089f14:	20089f88 	cmpgei	zero,r4,8830
20089f18:	2008a11c 	xori	zero,r4,8836
20089f1c:	20089f6c 	andhi	zero,r4,8829
20089f20:	2008a11c 	xori	zero,r4,8836
20089f24:	2008a0f0 	cmpltui	zero,r4,8835
20089f28:	2008a11c 	xori	zero,r4,8836
20089f2c:	20089f6c 	andhi	zero,r4,8829
20089f30:	20089f88 	cmpgei	zero,r4,8830
20089f34:	20089f88 	cmpgei	zero,r4,8830
20089f38:	2008a0f0 	cmpltui	zero,r4,8835
20089f3c:	20089f6c 	andhi	zero,r4,8829
20089f40:	20089f7c 	xorhi	zero,r4,8829
20089f44:	20089f7c 	xorhi	zero,r4,8829
20089f48:	20089f7c 	xorhi	zero,r4,8829
20089f4c:	2008a12c 	andhi	zero,r4,8836
20089f50:	8904b03a 	or	r2,r17,r4
20089f54:	1000631e 	bne	r2,zero,2008a0e4 <__divdf3+0x2c4>
20089f58:	04800204 	movi	r18,8
20089f5c:	0023883a 	mov	r17,zero
20089f60:	0027883a 	mov	r19,zero
20089f64:	02000084 	movi	r8,2
20089f68:	003fcc06 	br	20089e9c <__flash_rwdata_start+0xfffeb0b0>
20089f6c:	8023883a 	mov	r17,r16
20089f70:	a827883a 	mov	r19,r21
20089f74:	4839883a 	mov	fp,r9
20089f78:	3811883a 	mov	r8,r7
20089f7c:	00800084 	movi	r2,2
20089f80:	40812a1e 	bne	r8,r2,2008a42c <__divdf3+0x60c>
20089f84:	e025883a 	mov	r18,fp
20089f88:	9180004c 	andi	r6,r18,1
20089f8c:	0101ffc4 	movi	r4,2047
20089f90:	000b883a 	mov	r5,zero
20089f94:	0027883a 	mov	r19,zero
20089f98:	2008953a 	slli	r4,r4,20
20089f9c:	30c03fcc 	andi	r3,r6,255
20089fa0:	04000434 	movhi	r16,16
20089fa4:	180697fa 	slli	r3,r3,31
20089fa8:	843fffc4 	addi	r16,r16,-1
20089fac:	2c20703a 	and	r16,r5,r16
20089fb0:	8120b03a 	or	r16,r16,r4
20089fb4:	80c6b03a 	or	r3,r16,r3
20089fb8:	9805883a 	mov	r2,r19
20089fbc:	dfc00d17 	ldw	ra,52(sp)
20089fc0:	df000c17 	ldw	fp,48(sp)
20089fc4:	ddc00b17 	ldw	r23,44(sp)
20089fc8:	dd800a17 	ldw	r22,40(sp)
20089fcc:	dd400917 	ldw	r21,36(sp)
20089fd0:	dd000817 	ldw	r20,32(sp)
20089fd4:	dcc00717 	ldw	r19,28(sp)
20089fd8:	dc800617 	ldw	r18,24(sp)
20089fdc:	dc400517 	ldw	r17,20(sp)
20089fe0:	dc000417 	ldw	r16,16(sp)
20089fe4:	dec00e04 	addi	sp,sp,56
20089fe8:	f800283a 	ret
20089fec:	8904b03a 	or	r2,r17,r4
20089ff0:	10003726 	beq	r2,zero,2008a0d0 <__divdf3+0x2b0>
20089ff4:	88011c26 	beq	r17,zero,2008a468 <__divdf3+0x648>
20089ff8:	8809883a 	mov	r4,r17
20089ffc:	d9800315 	stw	r6,12(sp)
2008a000:	d9c00115 	stw	r7,4(sp)
2008a004:	008b4600 	call	2008b460 <__clzsi2>
2008a008:	d9800317 	ldw	r6,12(sp)
2008a00c:	d9c00117 	ldw	r7,4(sp)
2008a010:	1007883a 	mov	r3,r2
2008a014:	01000a04 	movi	r4,40
2008a018:	1cfffe04 	addi	r19,r3,-8
2008a01c:	20c9c83a 	sub	r4,r4,r3
2008a020:	8cca983a 	sll	r5,r17,r19
2008a024:	9108d83a 	srl	r4,r18,r4
2008a028:	94e6983a 	sll	r19,r18,r19
2008a02c:	2162b03a 	or	r17,r4,r5
2008a030:	053f0344 	movi	r20,-1011
2008a034:	a0e9c83a 	sub	r20,r20,r3
2008a038:	0025883a 	mov	r18,zero
2008a03c:	0011883a 	mov	r8,zero
2008a040:	003f9606 	br	20089e9c <__flash_rwdata_start+0xfffeb0b0>
2008a044:	8184b03a 	or	r2,r16,r6
2008a048:	10001f1e 	bne	r2,zero,2008a0c8 <__divdf3+0x2a8>
2008a04c:	0021883a 	mov	r16,zero
2008a050:	002b883a 	mov	r21,zero
2008a054:	01c00084 	movi	r7,2
2008a058:	003fa206 	br	20089ee4 <__flash_rwdata_start+0xfffeb0f8>
2008a05c:	8184b03a 	or	r2,r16,r6
2008a060:	10001526 	beq	r2,zero,2008a0b8 <__divdf3+0x298>
2008a064:	80010c26 	beq	r16,zero,2008a498 <__divdf3+0x678>
2008a068:	8009883a 	mov	r4,r16
2008a06c:	d9800315 	stw	r6,12(sp)
2008a070:	da000215 	stw	r8,8(sp)
2008a074:	da400015 	stw	r9,0(sp)
2008a078:	008b4600 	call	2008b460 <__clzsi2>
2008a07c:	d9800317 	ldw	r6,12(sp)
2008a080:	da000217 	ldw	r8,8(sp)
2008a084:	da400017 	ldw	r9,0(sp)
2008a088:	1007883a 	mov	r3,r2
2008a08c:	01000a04 	movi	r4,40
2008a090:	1d7ffe04 	addi	r21,r3,-8
2008a094:	20c9c83a 	sub	r4,r4,r3
2008a098:	8560983a 	sll	r16,r16,r21
2008a09c:	3108d83a 	srl	r4,r6,r4
2008a0a0:	356a983a 	sll	r21,r6,r21
2008a0a4:	2420b03a 	or	r16,r4,r16
2008a0a8:	017f0344 	movi	r5,-1011
2008a0ac:	28cbc83a 	sub	r5,r5,r3
2008a0b0:	000f883a 	mov	r7,zero
2008a0b4:	003f8b06 	br	20089ee4 <__flash_rwdata_start+0xfffeb0f8>
2008a0b8:	0021883a 	mov	r16,zero
2008a0bc:	002b883a 	mov	r21,zero
2008a0c0:	01c00044 	movi	r7,1
2008a0c4:	003f8706 	br	20089ee4 <__flash_rwdata_start+0xfffeb0f8>
2008a0c8:	01c000c4 	movi	r7,3
2008a0cc:	003f8506 	br	20089ee4 <__flash_rwdata_start+0xfffeb0f8>
2008a0d0:	04800104 	movi	r18,4
2008a0d4:	0023883a 	mov	r17,zero
2008a0d8:	0027883a 	mov	r19,zero
2008a0dc:	02000044 	movi	r8,1
2008a0e0:	003f6e06 	br	20089e9c <__flash_rwdata_start+0xfffeb0b0>
2008a0e4:	04800304 	movi	r18,12
2008a0e8:	020000c4 	movi	r8,3
2008a0ec:	003f6b06 	br	20089e9c <__flash_rwdata_start+0xfffeb0b0>
2008a0f0:	01400434 	movhi	r5,16
2008a0f4:	000d883a 	mov	r6,zero
2008a0f8:	297fffc4 	addi	r5,r5,-1
2008a0fc:	04ffffc4 	movi	r19,-1
2008a100:	0101ffc4 	movi	r4,2047
2008a104:	003fa406 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a108:	043f0084 	movi	r16,-1022
2008a10c:	8521c83a 	sub	r16,r16,r20
2008a110:	00800e04 	movi	r2,56
2008a114:	1401200e 	bge	r2,r16,2008a598 <__divdf3+0x778>
2008a118:	9180004c 	andi	r6,r18,1
2008a11c:	0009883a 	mov	r4,zero
2008a120:	000b883a 	mov	r5,zero
2008a124:	0027883a 	mov	r19,zero
2008a128:	003f9b06 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a12c:	8880022c 	andhi	r2,r17,8
2008a130:	1000c726 	beq	r2,zero,2008a450 <__divdf3+0x630>
2008a134:	8080022c 	andhi	r2,r16,8
2008a138:	1000c51e 	bne	r2,zero,2008a450 <__divdf3+0x630>
2008a13c:	00800434 	movhi	r2,16
2008a140:	81400234 	orhi	r5,r16,8
2008a144:	10bfffc4 	addi	r2,r2,-1
2008a148:	b80d883a 	mov	r6,r23
2008a14c:	288a703a 	and	r5,r5,r2
2008a150:	a827883a 	mov	r19,r21
2008a154:	003fea06 	br	2008a100 <__flash_rwdata_start+0xfffeb314>
2008a158:	8440ea36 	bltu	r16,r17,2008a504 <__divdf3+0x6e4>
2008a15c:	8c00e826 	beq	r17,r16,2008a500 <__divdf3+0x6e0>
2008a160:	a53fffc4 	addi	r20,r20,-1
2008a164:	882d883a 	mov	r22,r17
2008a168:	000d883a 	mov	r6,zero
2008a16c:	a804d63a 	srli	r2,r21,24
2008a170:	8020923a 	slli	r16,r16,8
2008a174:	b009883a 	mov	r4,r22
2008a178:	d9800315 	stw	r6,12(sp)
2008a17c:	1420b03a 	or	r16,r2,r16
2008a180:	802ed43a 	srli	r23,r16,16
2008a184:	873fffcc 	andi	fp,r16,65535
2008a188:	a82a923a 	slli	r21,r21,8
2008a18c:	b80b883a 	mov	r5,r23
2008a190:	0088bf00 	call	20088bf0 <__udivsi3>
2008a194:	b009883a 	mov	r4,r22
2008a198:	b80b883a 	mov	r5,r23
2008a19c:	1023883a 	mov	r17,r2
2008a1a0:	0088bf80 	call	20088bf8 <__umodsi3>
2008a1a4:	1004943a 	slli	r2,r2,16
2008a1a8:	9808d43a 	srli	r4,r19,16
2008a1ac:	8f2d383a 	mul	r22,r17,fp
2008a1b0:	d9800317 	ldw	r6,12(sp)
2008a1b4:	1106b03a 	or	r3,r2,r4
2008a1b8:	1d80062e 	bgeu	r3,r22,2008a1d4 <__divdf3+0x3b4>
2008a1bc:	1c07883a 	add	r3,r3,r16
2008a1c0:	88bfffc4 	addi	r2,r17,-1
2008a1c4:	1c00dc36 	bltu	r3,r16,2008a538 <__divdf3+0x718>
2008a1c8:	1d80db2e 	bgeu	r3,r22,2008a538 <__divdf3+0x718>
2008a1cc:	8c7fff84 	addi	r17,r17,-2
2008a1d0:	1c07883a 	add	r3,r3,r16
2008a1d4:	1dadc83a 	sub	r22,r3,r22
2008a1d8:	b009883a 	mov	r4,r22
2008a1dc:	b80b883a 	mov	r5,r23
2008a1e0:	d9800315 	stw	r6,12(sp)
2008a1e4:	0088bf00 	call	20088bf0 <__udivsi3>
2008a1e8:	b009883a 	mov	r4,r22
2008a1ec:	b80b883a 	mov	r5,r23
2008a1f0:	d8800015 	stw	r2,0(sp)
2008a1f4:	0088bf80 	call	20088bf8 <__umodsi3>
2008a1f8:	da400017 	ldw	r9,0(sp)
2008a1fc:	1004943a 	slli	r2,r2,16
2008a200:	9cffffcc 	andi	r19,r19,65535
2008a204:	4f07383a 	mul	r3,r9,fp
2008a208:	14c8b03a 	or	r4,r2,r19
2008a20c:	d9800317 	ldw	r6,12(sp)
2008a210:	20c0062e 	bgeu	r4,r3,2008a22c <__divdf3+0x40c>
2008a214:	2409883a 	add	r4,r4,r16
2008a218:	48bfffc4 	addi	r2,r9,-1
2008a21c:	2400c436 	bltu	r4,r16,2008a530 <__divdf3+0x710>
2008a220:	20c0c32e 	bgeu	r4,r3,2008a530 <__divdf3+0x710>
2008a224:	4a7fff84 	addi	r9,r9,-2
2008a228:	2409883a 	add	r4,r4,r16
2008a22c:	8822943a 	slli	r17,r17,16
2008a230:	a80ed43a 	srli	r7,r21,16
2008a234:	aa3fffcc 	andi	r8,r21,65535
2008a238:	4c62b03a 	or	r17,r9,r17
2008a23c:	8816d43a 	srli	r11,r17,16
2008a240:	897fffcc 	andi	r5,r17,65535
2008a244:	2a15383a 	mul	r10,r5,r8
2008a248:	5a19383a 	mul	r12,r11,r8
2008a24c:	29cb383a 	mul	r5,r5,r7
2008a250:	5012d43a 	srli	r9,r10,16
2008a254:	20c5c83a 	sub	r2,r4,r3
2008a258:	614b883a 	add	r5,r12,r5
2008a25c:	2a4b883a 	add	r5,r5,r9
2008a260:	59c7383a 	mul	r3,r11,r7
2008a264:	2b00022e 	bgeu	r5,r12,2008a270 <__divdf3+0x450>
2008a268:	01000074 	movhi	r4,1
2008a26c:	1907883a 	add	r3,r3,r4
2008a270:	2808d43a 	srli	r4,r5,16
2008a274:	280a943a 	slli	r5,r5,16
2008a278:	54ffffcc 	andi	r19,r10,65535
2008a27c:	1907883a 	add	r3,r3,r4
2008a280:	2ccb883a 	add	r5,r5,r19
2008a284:	10c09336 	bltu	r2,r3,2008a4d4 <__divdf3+0x6b4>
2008a288:	10c0ad26 	beq	r2,r3,2008a540 <__divdf3+0x720>
2008a28c:	10c7c83a 	sub	r3,r2,r3
2008a290:	3167c83a 	sub	r19,r6,r5
2008a294:	34ed803a 	cmpltu	r22,r6,r19
2008a298:	1dadc83a 	sub	r22,r3,r22
2008a29c:	b400b226 	beq	r22,r16,2008a568 <__divdf3+0x748>
2008a2a0:	b009883a 	mov	r4,r22
2008a2a4:	b80b883a 	mov	r5,r23
2008a2a8:	d9c00115 	stw	r7,4(sp)
2008a2ac:	da000215 	stw	r8,8(sp)
2008a2b0:	0088bf00 	call	20088bf0 <__udivsi3>
2008a2b4:	b009883a 	mov	r4,r22
2008a2b8:	b80b883a 	mov	r5,r23
2008a2bc:	d8800315 	stw	r2,12(sp)
2008a2c0:	0088bf80 	call	20088bf8 <__umodsi3>
2008a2c4:	d9800317 	ldw	r6,12(sp)
2008a2c8:	1004943a 	slli	r2,r2,16
2008a2cc:	9808d43a 	srli	r4,r19,16
2008a2d0:	372d383a 	mul	r22,r6,fp
2008a2d4:	d9c00117 	ldw	r7,4(sp)
2008a2d8:	1106b03a 	or	r3,r2,r4
2008a2dc:	da000217 	ldw	r8,8(sp)
2008a2e0:	1d80062e 	bgeu	r3,r22,2008a2fc <__divdf3+0x4dc>
2008a2e4:	1c07883a 	add	r3,r3,r16
2008a2e8:	30bfffc4 	addi	r2,r6,-1
2008a2ec:	1c00a036 	bltu	r3,r16,2008a570 <__divdf3+0x750>
2008a2f0:	1d809f2e 	bgeu	r3,r22,2008a570 <__divdf3+0x750>
2008a2f4:	31bfff84 	addi	r6,r6,-2
2008a2f8:	1c07883a 	add	r3,r3,r16
2008a2fc:	1dadc83a 	sub	r22,r3,r22
2008a300:	b009883a 	mov	r4,r22
2008a304:	b80b883a 	mov	r5,r23
2008a308:	d9800315 	stw	r6,12(sp)
2008a30c:	d9c00115 	stw	r7,4(sp)
2008a310:	da000215 	stw	r8,8(sp)
2008a314:	0088bf00 	call	20088bf0 <__udivsi3>
2008a318:	b009883a 	mov	r4,r22
2008a31c:	b80b883a 	mov	r5,r23
2008a320:	d8800015 	stw	r2,0(sp)
2008a324:	0088bf80 	call	20088bf8 <__umodsi3>
2008a328:	da400017 	ldw	r9,0(sp)
2008a32c:	1004943a 	slli	r2,r2,16
2008a330:	993fffcc 	andi	r4,r19,65535
2008a334:	4f39383a 	mul	fp,r9,fp
2008a338:	1106b03a 	or	r3,r2,r4
2008a33c:	d9800317 	ldw	r6,12(sp)
2008a340:	d9c00117 	ldw	r7,4(sp)
2008a344:	da000217 	ldw	r8,8(sp)
2008a348:	1f00062e 	bgeu	r3,fp,2008a364 <__divdf3+0x544>
2008a34c:	1c07883a 	add	r3,r3,r16
2008a350:	48bfffc4 	addi	r2,r9,-1
2008a354:	1c008836 	bltu	r3,r16,2008a578 <__divdf3+0x758>
2008a358:	1f00872e 	bgeu	r3,fp,2008a578 <__divdf3+0x758>
2008a35c:	4a7fff84 	addi	r9,r9,-2
2008a360:	1c07883a 	add	r3,r3,r16
2008a364:	3008943a 	slli	r4,r6,16
2008a368:	1f07c83a 	sub	r3,r3,fp
2008a36c:	4926b03a 	or	r19,r9,r4
2008a370:	993fffcc 	andi	r4,r19,65535
2008a374:	980cd43a 	srli	r6,r19,16
2008a378:	220b383a 	mul	r5,r4,r8
2008a37c:	21c5383a 	mul	r2,r4,r7
2008a380:	3211383a 	mul	r8,r6,r8
2008a384:	2808d43a 	srli	r4,r5,16
2008a388:	31cf383a 	mul	r7,r6,r7
2008a38c:	4085883a 	add	r2,r8,r2
2008a390:	1105883a 	add	r2,r2,r4
2008a394:	1200022e 	bgeu	r2,r8,2008a3a0 <__divdf3+0x580>
2008a398:	01000074 	movhi	r4,1
2008a39c:	390f883a 	add	r7,r7,r4
2008a3a0:	1008d43a 	srli	r4,r2,16
2008a3a4:	1004943a 	slli	r2,r2,16
2008a3a8:	297fffcc 	andi	r5,r5,65535
2008a3ac:	390f883a 	add	r7,r7,r4
2008a3b0:	1145883a 	add	r2,r2,r5
2008a3b4:	19c06536 	bltu	r3,r7,2008a54c <__divdf3+0x72c>
2008a3b8:	19c09f26 	beq	r3,r7,2008a638 <__divdf3+0x818>
2008a3bc:	9cc00054 	ori	r19,r19,1
2008a3c0:	a100ffc4 	addi	r4,r20,1023
2008a3c4:	013f500e 	bge	zero,r4,2008a108 <__flash_rwdata_start+0xfffeb31c>
2008a3c8:	988001cc 	andi	r2,r19,7
2008a3cc:	10000726 	beq	r2,zero,2008a3ec <__divdf3+0x5cc>
2008a3d0:	98c003cc 	andi	r3,r19,15
2008a3d4:	00800104 	movi	r2,4
2008a3d8:	18800426 	beq	r3,r2,2008a3ec <__divdf3+0x5cc>
2008a3dc:	9885883a 	add	r2,r19,r2
2008a3e0:	14e1803a 	cmpltu	r16,r2,r19
2008a3e4:	8c23883a 	add	r17,r17,r16
2008a3e8:	1027883a 	mov	r19,r2
2008a3ec:	8880402c 	andhi	r2,r17,256
2008a3f0:	10000426 	beq	r2,zero,2008a404 <__divdf3+0x5e4>
2008a3f4:	00bfc034 	movhi	r2,65280
2008a3f8:	10bfffc4 	addi	r2,r2,-1
2008a3fc:	a1010004 	addi	r4,r20,1024
2008a400:	88a2703a 	and	r17,r17,r2
2008a404:	0081ff84 	movi	r2,2046
2008a408:	113edf16 	blt	r2,r4,20089f88 <__flash_rwdata_start+0xfffeb19c>
2008a40c:	9826d0fa 	srli	r19,r19,3
2008a410:	8804977a 	slli	r2,r17,29
2008a414:	8820927a 	slli	r16,r17,9
2008a418:	2101ffcc 	andi	r4,r4,2047
2008a41c:	14e6b03a 	or	r19,r2,r19
2008a420:	800ad33a 	srli	r5,r16,12
2008a424:	9180004c 	andi	r6,r18,1
2008a428:	003edb06 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a42c:	008000c4 	movi	r2,3
2008a430:	4080a826 	beq	r8,r2,2008a6d4 <__divdf3+0x8b4>
2008a434:	00800044 	movi	r2,1
2008a438:	4080551e 	bne	r8,r2,2008a590 <__divdf3+0x770>
2008a43c:	e00d883a 	mov	r6,fp
2008a440:	0009883a 	mov	r4,zero
2008a444:	000b883a 	mov	r5,zero
2008a448:	0027883a 	mov	r19,zero
2008a44c:	003ed206 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a450:	00800434 	movhi	r2,16
2008a454:	89400234 	orhi	r5,r17,8
2008a458:	10bfffc4 	addi	r2,r2,-1
2008a45c:	b00d883a 	mov	r6,r22
2008a460:	288a703a 	and	r5,r5,r2
2008a464:	003f2606 	br	2008a100 <__flash_rwdata_start+0xfffeb314>
2008a468:	d9800315 	stw	r6,12(sp)
2008a46c:	d9c00115 	stw	r7,4(sp)
2008a470:	008b4600 	call	2008b460 <__clzsi2>
2008a474:	10c00804 	addi	r3,r2,32
2008a478:	010009c4 	movi	r4,39
2008a47c:	d9800317 	ldw	r6,12(sp)
2008a480:	d9c00117 	ldw	r7,4(sp)
2008a484:	20fee30e 	bge	r4,r3,2008a014 <__flash_rwdata_start+0xfffeb228>
2008a488:	117ffe04 	addi	r5,r2,-8
2008a48c:	9162983a 	sll	r17,r18,r5
2008a490:	0027883a 	mov	r19,zero
2008a494:	003ee606 	br	2008a030 <__flash_rwdata_start+0xfffeb244>
2008a498:	3009883a 	mov	r4,r6
2008a49c:	d9800315 	stw	r6,12(sp)
2008a4a0:	da000215 	stw	r8,8(sp)
2008a4a4:	da400015 	stw	r9,0(sp)
2008a4a8:	008b4600 	call	2008b460 <__clzsi2>
2008a4ac:	10c00804 	addi	r3,r2,32
2008a4b0:	010009c4 	movi	r4,39
2008a4b4:	d9800317 	ldw	r6,12(sp)
2008a4b8:	da000217 	ldw	r8,8(sp)
2008a4bc:	da400017 	ldw	r9,0(sp)
2008a4c0:	20fef20e 	bge	r4,r3,2008a08c <__flash_rwdata_start+0xfffeb2a0>
2008a4c4:	10bffe04 	addi	r2,r2,-8
2008a4c8:	a8a0983a 	sll	r16,r21,r2
2008a4cc:	002b883a 	mov	r21,zero
2008a4d0:	003ef506 	br	2008a0a8 <__flash_rwdata_start+0xfffeb2bc>
2008a4d4:	354d883a 	add	r6,r6,r21
2008a4d8:	3549803a 	cmpltu	r4,r6,r21
2008a4dc:	2409883a 	add	r4,r4,r16
2008a4e0:	2089883a 	add	r4,r4,r2
2008a4e4:	88bfffc4 	addi	r2,r17,-1
2008a4e8:	81000c2e 	bgeu	r16,r4,2008a51c <__divdf3+0x6fc>
2008a4ec:	20c04436 	bltu	r4,r3,2008a600 <__divdf3+0x7e0>
2008a4f0:	19006f26 	beq	r3,r4,2008a6b0 <__divdf3+0x890>
2008a4f4:	20c7c83a 	sub	r3,r4,r3
2008a4f8:	1023883a 	mov	r17,r2
2008a4fc:	003f6406 	br	2008a290 <__flash_rwdata_start+0xfffeb4a4>
2008a500:	9d7f1736 	bltu	r19,r21,2008a160 <__flash_rwdata_start+0xfffeb374>
2008a504:	9806d07a 	srli	r3,r19,1
2008a508:	880497fa 	slli	r2,r17,31
2008a50c:	980c97fa 	slli	r6,r19,31
2008a510:	882cd07a 	srli	r22,r17,1
2008a514:	18a6b03a 	or	r19,r3,r2
2008a518:	003f1406 	br	2008a16c <__flash_rwdata_start+0xfffeb380>
2008a51c:	243ff51e 	bne	r4,r16,2008a4f4 <__flash_rwdata_start+0xfffeb708>
2008a520:	357ff22e 	bgeu	r6,r21,2008a4ec <__flash_rwdata_start+0xfffeb700>
2008a524:	80c7c83a 	sub	r3,r16,r3
2008a528:	1023883a 	mov	r17,r2
2008a52c:	003f5806 	br	2008a290 <__flash_rwdata_start+0xfffeb4a4>
2008a530:	1013883a 	mov	r9,r2
2008a534:	003f3d06 	br	2008a22c <__flash_rwdata_start+0xfffeb440>
2008a538:	1023883a 	mov	r17,r2
2008a53c:	003f2506 	br	2008a1d4 <__flash_rwdata_start+0xfffeb3e8>
2008a540:	317fe436 	bltu	r6,r5,2008a4d4 <__flash_rwdata_start+0xfffeb6e8>
2008a544:	0007883a 	mov	r3,zero
2008a548:	003f5106 	br	2008a290 <__flash_rwdata_start+0xfffeb4a4>
2008a54c:	1c07883a 	add	r3,r3,r16
2008a550:	993fffc4 	addi	r4,r19,-1
2008a554:	1c000a2e 	bgeu	r3,r16,2008a580 <__divdf3+0x760>
2008a558:	2027883a 	mov	r19,r4
2008a55c:	19ff971e 	bne	r3,r7,2008a3bc <__flash_rwdata_start+0xfffeb5d0>
2008a560:	a8bf961e 	bne	r21,r2,2008a3bc <__flash_rwdata_start+0xfffeb5d0>
2008a564:	003f9606 	br	2008a3c0 <__flash_rwdata_start+0xfffeb5d4>
2008a568:	04ffffc4 	movi	r19,-1
2008a56c:	003f9406 	br	2008a3c0 <__flash_rwdata_start+0xfffeb5d4>
2008a570:	100d883a 	mov	r6,r2
2008a574:	003f6106 	br	2008a2fc <__flash_rwdata_start+0xfffeb510>
2008a578:	1013883a 	mov	r9,r2
2008a57c:	003f7906 	br	2008a364 <__flash_rwdata_start+0xfffeb578>
2008a580:	19c02636 	bltu	r3,r7,2008a61c <__divdf3+0x7fc>
2008a584:	38c04d26 	beq	r7,r3,2008a6bc <__divdf3+0x89c>
2008a588:	2027883a 	mov	r19,r4
2008a58c:	003f8b06 	br	2008a3bc <__flash_rwdata_start+0xfffeb5d0>
2008a590:	e025883a 	mov	r18,fp
2008a594:	003f8a06 	br	2008a3c0 <__flash_rwdata_start+0xfffeb5d4>
2008a598:	008007c4 	movi	r2,31
2008a59c:	14002a16 	blt	r2,r16,2008a648 <__divdf3+0x828>
2008a5a0:	a5010784 	addi	r20,r20,1054
2008a5a4:	8d04983a 	sll	r2,r17,r20
2008a5a8:	9c06d83a 	srl	r3,r19,r16
2008a5ac:	9d28983a 	sll	r20,r19,r20
2008a5b0:	8c20d83a 	srl	r16,r17,r16
2008a5b4:	1886b03a 	or	r3,r3,r2
2008a5b8:	a004c03a 	cmpne	r2,r20,zero
2008a5bc:	1884b03a 	or	r2,r3,r2
2008a5c0:	10c001cc 	andi	r3,r2,7
2008a5c4:	18000726 	beq	r3,zero,2008a5e4 <__divdf3+0x7c4>
2008a5c8:	110003cc 	andi	r4,r2,15
2008a5cc:	00c00104 	movi	r3,4
2008a5d0:	20c00426 	beq	r4,r3,2008a5e4 <__divdf3+0x7c4>
2008a5d4:	10c00104 	addi	r3,r2,4
2008a5d8:	1885803a 	cmpltu	r2,r3,r2
2008a5dc:	80a1883a 	add	r16,r16,r2
2008a5e0:	1805883a 	mov	r2,r3
2008a5e4:	80c0202c 	andhi	r3,r16,128
2008a5e8:	18002d26 	beq	r3,zero,2008a6a0 <__divdf3+0x880>
2008a5ec:	9180004c 	andi	r6,r18,1
2008a5f0:	01000044 	movi	r4,1
2008a5f4:	000b883a 	mov	r5,zero
2008a5f8:	0027883a 	mov	r19,zero
2008a5fc:	003e6606 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a600:	354d883a 	add	r6,r6,r21
2008a604:	356d803a 	cmpltu	r22,r6,r21
2008a608:	b42d883a 	add	r22,r22,r16
2008a60c:	b12d883a 	add	r22,r22,r4
2008a610:	8c7fff84 	addi	r17,r17,-2
2008a614:	b0c7c83a 	sub	r3,r22,r3
2008a618:	003f1d06 	br	2008a290 <__flash_rwdata_start+0xfffeb4a4>
2008a61c:	ad4b883a 	add	r5,r21,r21
2008a620:	2d6b803a 	cmpltu	r21,r5,r21
2008a624:	ac2b883a 	add	r21,r21,r16
2008a628:	1d47883a 	add	r3,r3,r21
2008a62c:	993fff84 	addi	r4,r19,-2
2008a630:	282b883a 	mov	r21,r5
2008a634:	003fc806 	br	2008a558 <__flash_rwdata_start+0xfffeb76c>
2008a638:	103fc41e 	bne	r2,zero,2008a54c <__flash_rwdata_start+0xfffeb760>
2008a63c:	002b883a 	mov	r21,zero
2008a640:	a8bf5e1e 	bne	r21,r2,2008a3bc <__flash_rwdata_start+0xfffeb5d0>
2008a644:	003f5e06 	br	2008a3c0 <__flash_rwdata_start+0xfffeb5d4>
2008a648:	00bef884 	movi	r2,-1054
2008a64c:	1505c83a 	sub	r2,r2,r20
2008a650:	00c00804 	movi	r3,32
2008a654:	8884d83a 	srl	r2,r17,r2
2008a658:	80c01c26 	beq	r16,r3,2008a6cc <__divdf3+0x8ac>
2008a65c:	a0c10f84 	addi	r3,r20,1086
2008a660:	88c6983a 	sll	r3,r17,r3
2008a664:	1cc6b03a 	or	r3,r3,r19
2008a668:	1806c03a 	cmpne	r3,r3,zero
2008a66c:	1884b03a 	or	r2,r3,r2
2008a670:	140001cc 	andi	r16,r2,7
2008a674:	8000061e 	bne	r16,zero,2008a690 <__divdf3+0x870>
2008a678:	000b883a 	mov	r5,zero
2008a67c:	1004d0fa 	srli	r2,r2,3
2008a680:	9180004c 	andi	r6,r18,1
2008a684:	0009883a 	mov	r4,zero
2008a688:	1426b03a 	or	r19,r2,r16
2008a68c:	003e4206 	br	20089f98 <__flash_rwdata_start+0xfffeb1ac>
2008a690:	110003cc 	andi	r4,r2,15
2008a694:	00c00104 	movi	r3,4
2008a698:	0021883a 	mov	r16,zero
2008a69c:	20ffcd1e 	bne	r4,r3,2008a5d4 <__flash_rwdata_start+0xfffeb7e8>
2008a6a0:	800a927a 	slli	r5,r16,9
2008a6a4:	8020977a 	slli	r16,r16,29
2008a6a8:	280ad33a 	srli	r5,r5,12
2008a6ac:	003ff306 	br	2008a67c <__flash_rwdata_start+0xfffeb890>
2008a6b0:	317fd336 	bltu	r6,r5,2008a600 <__flash_rwdata_start+0xfffeb814>
2008a6b4:	1023883a 	mov	r17,r2
2008a6b8:	003fa206 	br	2008a544 <__flash_rwdata_start+0xfffeb758>
2008a6bc:	a8bfd736 	bltu	r21,r2,2008a61c <__flash_rwdata_start+0xfffeb830>
2008a6c0:	2027883a 	mov	r19,r4
2008a6c4:	a8bf3d1e 	bne	r21,r2,2008a3bc <__flash_rwdata_start+0xfffeb5d0>
2008a6c8:	003f3d06 	br	2008a3c0 <__flash_rwdata_start+0xfffeb5d4>
2008a6cc:	0007883a 	mov	r3,zero
2008a6d0:	003fe406 	br	2008a664 <__flash_rwdata_start+0xfffeb878>
2008a6d4:	00800434 	movhi	r2,16
2008a6d8:	89400234 	orhi	r5,r17,8
2008a6dc:	10bfffc4 	addi	r2,r2,-1
2008a6e0:	e00d883a 	mov	r6,fp
2008a6e4:	288a703a 	and	r5,r5,r2
2008a6e8:	003e8506 	br	2008a100 <__flash_rwdata_start+0xfffeb314>

2008a6ec <__subdf3>:
2008a6ec:	00c00434 	movhi	r3,16
2008a6f0:	18ffffc4 	addi	r3,r3,-1
2008a6f4:	defffb04 	addi	sp,sp,-20
2008a6f8:	28d2703a 	and	r9,r5,r3
2008a6fc:	3814d53a 	srli	r10,r7,20
2008a700:	38c6703a 	and	r3,r7,r3
2008a704:	3004d77a 	srli	r2,r6,29
2008a708:	dc800215 	stw	r18,8(sp)
2008a70c:	dc000015 	stw	r16,0(sp)
2008a710:	2824d7fa 	srli	r18,r5,31
2008a714:	2820d53a 	srli	r16,r5,20
2008a718:	481290fa 	slli	r9,r9,3
2008a71c:	200ad77a 	srli	r5,r4,29
2008a720:	180690fa 	slli	r3,r3,3
2008a724:	dc400115 	stw	r17,4(sp)
2008a728:	dfc00415 	stw	ra,16(sp)
2008a72c:	202290fa 	slli	r17,r4,3
2008a730:	dcc00315 	stw	r19,12(sp)
2008a734:	5281ffcc 	andi	r10,r10,2047
2008a738:	0101ffc4 	movi	r4,2047
2008a73c:	9011883a 	mov	r8,r18
2008a740:	8401ffcc 	andi	r16,r16,2047
2008a744:	94803fcc 	andi	r18,r18,255
2008a748:	494ab03a 	or	r5,r9,r5
2008a74c:	380ed7fa 	srli	r7,r7,31
2008a750:	1886b03a 	or	r3,r3,r2
2008a754:	300c90fa 	slli	r6,r6,3
2008a758:	51009026 	beq	r10,r4,2008a99c <__subdf3+0x2b0>
2008a75c:	39c0005c 	xori	r7,r7,1
2008a760:	8285c83a 	sub	r2,r16,r10
2008a764:	91c06f26 	beq	r18,r7,2008a924 <__subdf3+0x238>
2008a768:	0080b10e 	bge	zero,r2,2008aa30 <__subdf3+0x344>
2008a76c:	50002a1e 	bne	r10,zero,2008a818 <__subdf3+0x12c>
2008a770:	1988b03a 	or	r4,r3,r6
2008a774:	2000941e 	bne	r4,zero,2008a9c8 <__subdf3+0x2dc>
2008a778:	888001cc 	andi	r2,r17,7
2008a77c:	10005b26 	beq	r2,zero,2008a8ec <__subdf3+0x200>
2008a780:	88c003cc 	andi	r3,r17,15
2008a784:	00800104 	movi	r2,4
2008a788:	18805826 	beq	r3,r2,2008a8ec <__subdf3+0x200>
2008a78c:	88c00104 	addi	r3,r17,4
2008a790:	1c63803a 	cmpltu	r17,r3,r17
2008a794:	2c4b883a 	add	r5,r5,r17
2008a798:	2880202c 	andhi	r2,r5,128
2008a79c:	9200004c 	andi	r8,r18,1
2008a7a0:	1823883a 	mov	r17,r3
2008a7a4:	10005426 	beq	r2,zero,2008a8f8 <__subdf3+0x20c>
2008a7a8:	84000044 	addi	r16,r16,1
2008a7ac:	0081ffc4 	movi	r2,2047
2008a7b0:	8080bf26 	beq	r16,r2,2008aab0 <__subdf3+0x3c4>
2008a7b4:	013fe034 	movhi	r4,65408
2008a7b8:	213fffc4 	addi	r4,r4,-1
2008a7bc:	290a703a 	and	r5,r5,r4
2008a7c0:	2804977a 	slli	r2,r5,29
2008a7c4:	280a927a 	slli	r5,r5,9
2008a7c8:	8822d0fa 	srli	r17,r17,3
2008a7cc:	8401ffcc 	andi	r16,r16,2047
2008a7d0:	2808d33a 	srli	r4,r5,12
2008a7d4:	1444b03a 	or	r2,r2,r17
2008a7d8:	8401ffcc 	andi	r16,r16,2047
2008a7dc:	800a953a 	slli	r5,r16,20
2008a7e0:	40c03fcc 	andi	r3,r8,255
2008a7e4:	04000434 	movhi	r16,16
2008a7e8:	180697fa 	slli	r3,r3,31
2008a7ec:	843fffc4 	addi	r16,r16,-1
2008a7f0:	2420703a 	and	r16,r4,r16
2008a7f4:	8160b03a 	or	r16,r16,r5
2008a7f8:	80c6b03a 	or	r3,r16,r3
2008a7fc:	dfc00417 	ldw	ra,16(sp)
2008a800:	dcc00317 	ldw	r19,12(sp)
2008a804:	dc800217 	ldw	r18,8(sp)
2008a808:	dc400117 	ldw	r17,4(sp)
2008a80c:	dc000017 	ldw	r16,0(sp)
2008a810:	dec00504 	addi	sp,sp,20
2008a814:	f800283a 	ret
2008a818:	0101ffc4 	movi	r4,2047
2008a81c:	813fd626 	beq	r16,r4,2008a778 <__flash_rwdata_start+0xfffeb98c>
2008a820:	18c02034 	orhi	r3,r3,128
2008a824:	01000e04 	movi	r4,56
2008a828:	2080a416 	blt	r4,r2,2008aabc <__subdf3+0x3d0>
2008a82c:	010007c4 	movi	r4,31
2008a830:	2080c716 	blt	r4,r2,2008ab50 <__subdf3+0x464>
2008a834:	01000804 	movi	r4,32
2008a838:	2089c83a 	sub	r4,r4,r2
2008a83c:	1910983a 	sll	r8,r3,r4
2008a840:	308ed83a 	srl	r7,r6,r2
2008a844:	3108983a 	sll	r4,r6,r4
2008a848:	1884d83a 	srl	r2,r3,r2
2008a84c:	41ccb03a 	or	r6,r8,r7
2008a850:	2008c03a 	cmpne	r4,r4,zero
2008a854:	310cb03a 	or	r6,r6,r4
2008a858:	898dc83a 	sub	r6,r17,r6
2008a85c:	89a3803a 	cmpltu	r17,r17,r6
2008a860:	288bc83a 	sub	r5,r5,r2
2008a864:	2c4bc83a 	sub	r5,r5,r17
2008a868:	3023883a 	mov	r17,r6
2008a86c:	2880202c 	andhi	r2,r5,128
2008a870:	10006b26 	beq	r2,zero,2008aa20 <__subdf3+0x334>
2008a874:	04c02034 	movhi	r19,128
2008a878:	9cffffc4 	addi	r19,r19,-1
2008a87c:	2ce6703a 	and	r19,r5,r19
2008a880:	98007c26 	beq	r19,zero,2008aa74 <__subdf3+0x388>
2008a884:	9809883a 	mov	r4,r19
2008a888:	008b4600 	call	2008b460 <__clzsi2>
2008a88c:	10fffe04 	addi	r3,r2,-8
2008a890:	010007c4 	movi	r4,31
2008a894:	20c07d16 	blt	r4,r3,2008aa8c <__subdf3+0x3a0>
2008a898:	01400a04 	movi	r5,40
2008a89c:	2885c83a 	sub	r2,r5,r2
2008a8a0:	888ad83a 	srl	r5,r17,r2
2008a8a4:	98e6983a 	sll	r19,r19,r3
2008a8a8:	88e2983a 	sll	r17,r17,r3
2008a8ac:	2ce6b03a 	or	r19,r5,r19
2008a8b0:	1c007a16 	blt	r3,r16,2008aa9c <__subdf3+0x3b0>
2008a8b4:	1c21c83a 	sub	r16,r3,r16
2008a8b8:	81400044 	addi	r5,r16,1
2008a8bc:	00c007c4 	movi	r3,31
2008a8c0:	19409616 	blt	r3,r5,2008ab1c <__subdf3+0x430>
2008a8c4:	1c21c83a 	sub	r16,r3,r16
2008a8c8:	8c08983a 	sll	r4,r17,r16
2008a8cc:	8946d83a 	srl	r3,r17,r5
2008a8d0:	9c20983a 	sll	r16,r19,r16
2008a8d4:	2008c03a 	cmpne	r4,r4,zero
2008a8d8:	994ad83a 	srl	r5,r19,r5
2008a8dc:	1c06b03a 	or	r3,r3,r16
2008a8e0:	1922b03a 	or	r17,r3,r4
2008a8e4:	0021883a 	mov	r16,zero
2008a8e8:	003fa306 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008a8ec:	2880202c 	andhi	r2,r5,128
2008a8f0:	9200004c 	andi	r8,r18,1
2008a8f4:	103fac1e 	bne	r2,zero,2008a7a8 <__flash_rwdata_start+0xfffeb9bc>
2008a8f8:	2804977a 	slli	r2,r5,29
2008a8fc:	8822d0fa 	srli	r17,r17,3
2008a900:	00c1ffc4 	movi	r3,2047
2008a904:	280ad0fa 	srli	r5,r5,3
2008a908:	1444b03a 	or	r2,r2,r17
2008a90c:	80c02726 	beq	r16,r3,2008a9ac <__subdf3+0x2c0>
2008a910:	01000434 	movhi	r4,16
2008a914:	213fffc4 	addi	r4,r4,-1
2008a918:	80e0703a 	and	r16,r16,r3
2008a91c:	2908703a 	and	r4,r5,r4
2008a920:	003fad06 	br	2008a7d8 <__flash_rwdata_start+0xfffeb9ec>
2008a924:	0080690e 	bge	zero,r2,2008aacc <__subdf3+0x3e0>
2008a928:	50002f26 	beq	r10,zero,2008a9e8 <__subdf3+0x2fc>
2008a92c:	0101ffc4 	movi	r4,2047
2008a930:	813f9126 	beq	r16,r4,2008a778 <__flash_rwdata_start+0xfffeb98c>
2008a934:	18c02034 	orhi	r3,r3,128
2008a938:	01000e04 	movi	r4,56
2008a93c:	2080b00e 	bge	r4,r2,2008ac00 <__subdf3+0x514>
2008a940:	198cb03a 	or	r6,r3,r6
2008a944:	300ec03a 	cmpne	r7,r6,zero
2008a948:	0005883a 	mov	r2,zero
2008a94c:	3c4f883a 	add	r7,r7,r17
2008a950:	3c63803a 	cmpltu	r17,r7,r17
2008a954:	114b883a 	add	r5,r2,r5
2008a958:	2c4b883a 	add	r5,r5,r17
2008a95c:	3823883a 	mov	r17,r7
2008a960:	2880202c 	andhi	r2,r5,128
2008a964:	10002e26 	beq	r2,zero,2008aa20 <__subdf3+0x334>
2008a968:	84000044 	addi	r16,r16,1
2008a96c:	0081ffc4 	movi	r2,2047
2008a970:	8080de26 	beq	r16,r2,2008acec <__subdf3+0x600>
2008a974:	00bfe034 	movhi	r2,65408
2008a978:	10bfffc4 	addi	r2,r2,-1
2008a97c:	288a703a 	and	r5,r5,r2
2008a980:	880cd07a 	srli	r6,r17,1
2008a984:	280897fa 	slli	r4,r5,31
2008a988:	88c0004c 	andi	r3,r17,1
2008a98c:	30e2b03a 	or	r17,r6,r3
2008a990:	280ad07a 	srli	r5,r5,1
2008a994:	8922b03a 	or	r17,r17,r4
2008a998:	003f7706 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008a99c:	1984b03a 	or	r2,r3,r6
2008a9a0:	103f6e26 	beq	r2,zero,2008a75c <__flash_rwdata_start+0xfffeb970>
2008a9a4:	39c03fcc 	andi	r7,r7,255
2008a9a8:	003f6d06 	br	2008a760 <__flash_rwdata_start+0xfffeb974>
2008a9ac:	1146b03a 	or	r3,r2,r5
2008a9b0:	18003f26 	beq	r3,zero,2008aab0 <__subdf3+0x3c4>
2008a9b4:	00c00434 	movhi	r3,16
2008a9b8:	29000234 	orhi	r4,r5,8
2008a9bc:	18ffffc4 	addi	r3,r3,-1
2008a9c0:	20c8703a 	and	r4,r4,r3
2008a9c4:	003f8406 	br	2008a7d8 <__flash_rwdata_start+0xfffeb9ec>
2008a9c8:	10bfffc4 	addi	r2,r2,-1
2008a9cc:	1000501e 	bne	r2,zero,2008ab10 <__subdf3+0x424>
2008a9d0:	898fc83a 	sub	r7,r17,r6
2008a9d4:	89e3803a 	cmpltu	r17,r17,r7
2008a9d8:	28cbc83a 	sub	r5,r5,r3
2008a9dc:	2c4bc83a 	sub	r5,r5,r17
2008a9e0:	3823883a 	mov	r17,r7
2008a9e4:	003fa106 	br	2008a86c <__flash_rwdata_start+0xfffeba80>
2008a9e8:	1988b03a 	or	r4,r3,r6
2008a9ec:	203f6226 	beq	r4,zero,2008a778 <__flash_rwdata_start+0xfffeb98c>
2008a9f0:	10bfffc4 	addi	r2,r2,-1
2008a9f4:	10009b1e 	bne	r2,zero,2008ac64 <__subdf3+0x578>
2008a9f8:	344d883a 	add	r6,r6,r17
2008a9fc:	3463803a 	cmpltu	r17,r6,r17
2008aa00:	194b883a 	add	r5,r3,r5
2008aa04:	2c4b883a 	add	r5,r5,r17
2008aa08:	3023883a 	mov	r17,r6
2008aa0c:	003fd406 	br	2008a960 <__flash_rwdata_start+0xfffebb74>
2008aa10:	1106b03a 	or	r3,r2,r4
2008aa14:	1800b426 	beq	r3,zero,2008ace8 <__subdf3+0x5fc>
2008aa18:	100b883a 	mov	r5,r2
2008aa1c:	2023883a 	mov	r17,r4
2008aa20:	888001cc 	andi	r2,r17,7
2008aa24:	103f561e 	bne	r2,zero,2008a780 <__flash_rwdata_start+0xfffeb994>
2008aa28:	9200004c 	andi	r8,r18,1
2008aa2c:	003fb206 	br	2008a8f8 <__flash_rwdata_start+0xfffebb0c>
2008aa30:	1000531e 	bne	r2,zero,2008ab80 <__subdf3+0x494>
2008aa34:	80800044 	addi	r2,r16,1
2008aa38:	1081ffcc 	andi	r2,r2,2047
2008aa3c:	01000044 	movi	r4,1
2008aa40:	2080a00e 	bge	r4,r2,2008acc4 <__subdf3+0x5d8>
2008aa44:	8985c83a 	sub	r2,r17,r6
2008aa48:	8889803a 	cmpltu	r4,r17,r2
2008aa4c:	28e7c83a 	sub	r19,r5,r3
2008aa50:	9927c83a 	sub	r19,r19,r4
2008aa54:	9900202c 	andhi	r4,r19,128
2008aa58:	20006226 	beq	r4,zero,2008abe4 <__subdf3+0x4f8>
2008aa5c:	3463c83a 	sub	r17,r6,r17
2008aa60:	194bc83a 	sub	r5,r3,r5
2008aa64:	344d803a 	cmpltu	r6,r6,r17
2008aa68:	29a7c83a 	sub	r19,r5,r6
2008aa6c:	3825883a 	mov	r18,r7
2008aa70:	983f841e 	bne	r19,zero,2008a884 <__flash_rwdata_start+0xfffeba98>
2008aa74:	8809883a 	mov	r4,r17
2008aa78:	008b4600 	call	2008b460 <__clzsi2>
2008aa7c:	10800804 	addi	r2,r2,32
2008aa80:	10fffe04 	addi	r3,r2,-8
2008aa84:	010007c4 	movi	r4,31
2008aa88:	20ff830e 	bge	r4,r3,2008a898 <__flash_rwdata_start+0xfffebaac>
2008aa8c:	14fff604 	addi	r19,r2,-40
2008aa90:	8ce6983a 	sll	r19,r17,r19
2008aa94:	0023883a 	mov	r17,zero
2008aa98:	1c3f860e 	bge	r3,r16,2008a8b4 <__flash_rwdata_start+0xfffebac8>
2008aa9c:	017fe034 	movhi	r5,65408
2008aaa0:	297fffc4 	addi	r5,r5,-1
2008aaa4:	80e1c83a 	sub	r16,r16,r3
2008aaa8:	994a703a 	and	r5,r19,r5
2008aaac:	003f3206 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008aab0:	0009883a 	mov	r4,zero
2008aab4:	0005883a 	mov	r2,zero
2008aab8:	003f4706 	br	2008a7d8 <__flash_rwdata_start+0xfffeb9ec>
2008aabc:	198cb03a 	or	r6,r3,r6
2008aac0:	300cc03a 	cmpne	r6,r6,zero
2008aac4:	0005883a 	mov	r2,zero
2008aac8:	003f6306 	br	2008a858 <__flash_rwdata_start+0xfffeba6c>
2008aacc:	10009d1e 	bne	r2,zero,2008ad44 <__subdf3+0x658>
2008aad0:	81c00044 	addi	r7,r16,1
2008aad4:	3881ffcc 	andi	r2,r7,2047
2008aad8:	02400044 	movi	r9,1
2008aadc:	4880680e 	bge	r9,r2,2008ac80 <__subdf3+0x594>
2008aae0:	0081ffc4 	movi	r2,2047
2008aae4:	3880ae26 	beq	r7,r2,2008ada0 <__subdf3+0x6b4>
2008aae8:	344d883a 	add	r6,r6,r17
2008aaec:	3463803a 	cmpltu	r17,r6,r17
2008aaf0:	194b883a 	add	r5,r3,r5
2008aaf4:	2c4b883a 	add	r5,r5,r17
2008aaf8:	282297fa 	slli	r17,r5,31
2008aafc:	300cd07a 	srli	r6,r6,1
2008ab00:	280ad07a 	srli	r5,r5,1
2008ab04:	3821883a 	mov	r16,r7
2008ab08:	89a2b03a 	or	r17,r17,r6
2008ab0c:	003f1a06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ab10:	0101ffc4 	movi	r4,2047
2008ab14:	813f431e 	bne	r16,r4,2008a824 <__flash_rwdata_start+0xfffeba38>
2008ab18:	003f1706 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ab1c:	80bff844 	addi	r2,r16,-31
2008ab20:	00c00804 	movi	r3,32
2008ab24:	9884d83a 	srl	r2,r19,r2
2008ab28:	28c05126 	beq	r5,r3,2008ac70 <__subdf3+0x584>
2008ab2c:	00c00fc4 	movi	r3,63
2008ab30:	1c21c83a 	sub	r16,r3,r16
2008ab34:	9c26983a 	sll	r19,r19,r16
2008ab38:	9c62b03a 	or	r17,r19,r17
2008ab3c:	8822c03a 	cmpne	r17,r17,zero
2008ab40:	88a2b03a 	or	r17,r17,r2
2008ab44:	000b883a 	mov	r5,zero
2008ab48:	0021883a 	mov	r16,zero
2008ab4c:	003fb406 	br	2008aa20 <__flash_rwdata_start+0xfffebc34>
2008ab50:	113ff804 	addi	r4,r2,-32
2008ab54:	01c00804 	movi	r7,32
2008ab58:	1908d83a 	srl	r4,r3,r4
2008ab5c:	11c04626 	beq	r2,r7,2008ac78 <__subdf3+0x58c>
2008ab60:	01c01004 	movi	r7,64
2008ab64:	3885c83a 	sub	r2,r7,r2
2008ab68:	1884983a 	sll	r2,r3,r2
2008ab6c:	118cb03a 	or	r6,r2,r6
2008ab70:	300cc03a 	cmpne	r6,r6,zero
2008ab74:	310cb03a 	or	r6,r6,r4
2008ab78:	0005883a 	mov	r2,zero
2008ab7c:	003f3606 	br	2008a858 <__flash_rwdata_start+0xfffeba6c>
2008ab80:	80002b26 	beq	r16,zero,2008ac30 <__subdf3+0x544>
2008ab84:	0101ffc4 	movi	r4,2047
2008ab88:	51006926 	beq	r10,r4,2008ad30 <__subdf3+0x644>
2008ab8c:	0085c83a 	sub	r2,zero,r2
2008ab90:	29402034 	orhi	r5,r5,128
2008ab94:	01000e04 	movi	r4,56
2008ab98:	20807d16 	blt	r4,r2,2008ad90 <__subdf3+0x6a4>
2008ab9c:	010007c4 	movi	r4,31
2008aba0:	2080d916 	blt	r4,r2,2008af08 <__subdf3+0x81c>
2008aba4:	01000804 	movi	r4,32
2008aba8:	2089c83a 	sub	r4,r4,r2
2008abac:	2912983a 	sll	r9,r5,r4
2008abb0:	8890d83a 	srl	r8,r17,r2
2008abb4:	8908983a 	sll	r4,r17,r4
2008abb8:	2884d83a 	srl	r2,r5,r2
2008abbc:	4a22b03a 	or	r17,r9,r8
2008abc0:	2008c03a 	cmpne	r4,r4,zero
2008abc4:	8922b03a 	or	r17,r17,r4
2008abc8:	3463c83a 	sub	r17,r6,r17
2008abcc:	1885c83a 	sub	r2,r3,r2
2008abd0:	344d803a 	cmpltu	r6,r6,r17
2008abd4:	118bc83a 	sub	r5,r2,r6
2008abd8:	5021883a 	mov	r16,r10
2008abdc:	3825883a 	mov	r18,r7
2008abe0:	003f2206 	br	2008a86c <__flash_rwdata_start+0xfffeba80>
2008abe4:	9886b03a 	or	r3,r19,r2
2008abe8:	18001c1e 	bne	r3,zero,2008ac5c <__subdf3+0x570>
2008abec:	0011883a 	mov	r8,zero
2008abf0:	000b883a 	mov	r5,zero
2008abf4:	0023883a 	mov	r17,zero
2008abf8:	0021883a 	mov	r16,zero
2008abfc:	003f3e06 	br	2008a8f8 <__flash_rwdata_start+0xfffebb0c>
2008ac00:	010007c4 	movi	r4,31
2008ac04:	20803c16 	blt	r4,r2,2008acf8 <__subdf3+0x60c>
2008ac08:	01000804 	movi	r4,32
2008ac0c:	2089c83a 	sub	r4,r4,r2
2008ac10:	1912983a 	sll	r9,r3,r4
2008ac14:	308ed83a 	srl	r7,r6,r2
2008ac18:	3108983a 	sll	r4,r6,r4
2008ac1c:	1884d83a 	srl	r2,r3,r2
2008ac20:	49ceb03a 	or	r7,r9,r7
2008ac24:	2008c03a 	cmpne	r4,r4,zero
2008ac28:	390eb03a 	or	r7,r7,r4
2008ac2c:	003f4706 	br	2008a94c <__flash_rwdata_start+0xfffebb60>
2008ac30:	2c48b03a 	or	r4,r5,r17
2008ac34:	20003e26 	beq	r4,zero,2008ad30 <__subdf3+0x644>
2008ac38:	0084303a 	nor	r2,zero,r2
2008ac3c:	10003a1e 	bne	r2,zero,2008ad28 <__subdf3+0x63c>
2008ac40:	3463c83a 	sub	r17,r6,r17
2008ac44:	194bc83a 	sub	r5,r3,r5
2008ac48:	344d803a 	cmpltu	r6,r6,r17
2008ac4c:	298bc83a 	sub	r5,r5,r6
2008ac50:	5021883a 	mov	r16,r10
2008ac54:	3825883a 	mov	r18,r7
2008ac58:	003f0406 	br	2008a86c <__flash_rwdata_start+0xfffeba80>
2008ac5c:	1023883a 	mov	r17,r2
2008ac60:	003f0706 	br	2008a880 <__flash_rwdata_start+0xfffeba94>
2008ac64:	0101ffc4 	movi	r4,2047
2008ac68:	813f331e 	bne	r16,r4,2008a938 <__flash_rwdata_start+0xfffebb4c>
2008ac6c:	003ec206 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ac70:	0027883a 	mov	r19,zero
2008ac74:	003fb006 	br	2008ab38 <__flash_rwdata_start+0xfffebd4c>
2008ac78:	0005883a 	mov	r2,zero
2008ac7c:	003fbb06 	br	2008ab6c <__flash_rwdata_start+0xfffebd80>
2008ac80:	2c44b03a 	or	r2,r5,r17
2008ac84:	80008b1e 	bne	r16,zero,2008aeb4 <__subdf3+0x7c8>
2008ac88:	1000b526 	beq	r2,zero,2008af60 <__subdf3+0x874>
2008ac8c:	1984b03a 	or	r2,r3,r6
2008ac90:	103eb926 	beq	r2,zero,2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ac94:	3449883a 	add	r4,r6,r17
2008ac98:	2463803a 	cmpltu	r17,r4,r17
2008ac9c:	194b883a 	add	r5,r3,r5
2008aca0:	2c4b883a 	add	r5,r5,r17
2008aca4:	2880202c 	andhi	r2,r5,128
2008aca8:	2023883a 	mov	r17,r4
2008acac:	103f5c26 	beq	r2,zero,2008aa20 <__flash_rwdata_start+0xfffebc34>
2008acb0:	00bfe034 	movhi	r2,65408
2008acb4:	10bfffc4 	addi	r2,r2,-1
2008acb8:	4821883a 	mov	r16,r9
2008acbc:	288a703a 	and	r5,r5,r2
2008acc0:	003ead06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008acc4:	2c44b03a 	or	r2,r5,r17
2008acc8:	8000291e 	bne	r16,zero,2008ad70 <__subdf3+0x684>
2008accc:	10004f1e 	bne	r2,zero,2008ae0c <__subdf3+0x720>
2008acd0:	1984b03a 	or	r2,r3,r6
2008acd4:	10000426 	beq	r2,zero,2008ace8 <__subdf3+0x5fc>
2008acd8:	180b883a 	mov	r5,r3
2008acdc:	3023883a 	mov	r17,r6
2008ace0:	3825883a 	mov	r18,r7
2008ace4:	003ea406 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ace8:	0011883a 	mov	r8,zero
2008acec:	000b883a 	mov	r5,zero
2008acf0:	0023883a 	mov	r17,zero
2008acf4:	003f0006 	br	2008a8f8 <__flash_rwdata_start+0xfffebb0c>
2008acf8:	11fff804 	addi	r7,r2,-32
2008acfc:	19c8d83a 	srl	r4,r3,r7
2008ad00:	01c00804 	movi	r7,32
2008ad04:	11c07e26 	beq	r2,r7,2008af00 <__subdf3+0x814>
2008ad08:	01c01004 	movi	r7,64
2008ad0c:	3885c83a 	sub	r2,r7,r2
2008ad10:	1884983a 	sll	r2,r3,r2
2008ad14:	118cb03a 	or	r6,r2,r6
2008ad18:	300ec03a 	cmpne	r7,r6,zero
2008ad1c:	390eb03a 	or	r7,r7,r4
2008ad20:	0005883a 	mov	r2,zero
2008ad24:	003f0906 	br	2008a94c <__flash_rwdata_start+0xfffebb60>
2008ad28:	0101ffc4 	movi	r4,2047
2008ad2c:	513f991e 	bne	r10,r4,2008ab94 <__flash_rwdata_start+0xfffebda8>
2008ad30:	180b883a 	mov	r5,r3
2008ad34:	3023883a 	mov	r17,r6
2008ad38:	5021883a 	mov	r16,r10
2008ad3c:	3825883a 	mov	r18,r7
2008ad40:	003e8d06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ad44:	80001a1e 	bne	r16,zero,2008adb0 <__subdf3+0x6c4>
2008ad48:	2c48b03a 	or	r4,r5,r17
2008ad4c:	20005526 	beq	r4,zero,2008aea4 <__subdf3+0x7b8>
2008ad50:	0084303a 	nor	r2,zero,r2
2008ad54:	1000511e 	bne	r2,zero,2008ae9c <__subdf3+0x7b0>
2008ad58:	89a3883a 	add	r17,r17,r6
2008ad5c:	194b883a 	add	r5,r3,r5
2008ad60:	898d803a 	cmpltu	r6,r17,r6
2008ad64:	298b883a 	add	r5,r5,r6
2008ad68:	5021883a 	mov	r16,r10
2008ad6c:	003efc06 	br	2008a960 <__flash_rwdata_start+0xfffebb74>
2008ad70:	1000341e 	bne	r2,zero,2008ae44 <__subdf3+0x758>
2008ad74:	1984b03a 	or	r2,r3,r6
2008ad78:	10006f26 	beq	r2,zero,2008af38 <__subdf3+0x84c>
2008ad7c:	180b883a 	mov	r5,r3
2008ad80:	3023883a 	mov	r17,r6
2008ad84:	3825883a 	mov	r18,r7
2008ad88:	0401ffc4 	movi	r16,2047
2008ad8c:	003e7a06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ad90:	2c62b03a 	or	r17,r5,r17
2008ad94:	8822c03a 	cmpne	r17,r17,zero
2008ad98:	0005883a 	mov	r2,zero
2008ad9c:	003f8a06 	br	2008abc8 <__flash_rwdata_start+0xfffebddc>
2008ada0:	3821883a 	mov	r16,r7
2008ada4:	000b883a 	mov	r5,zero
2008ada8:	0023883a 	mov	r17,zero
2008adac:	003ed206 	br	2008a8f8 <__flash_rwdata_start+0xfffebb0c>
2008adb0:	0101ffc4 	movi	r4,2047
2008adb4:	51003b26 	beq	r10,r4,2008aea4 <__subdf3+0x7b8>
2008adb8:	0085c83a 	sub	r2,zero,r2
2008adbc:	29402034 	orhi	r5,r5,128
2008adc0:	01000e04 	movi	r4,56
2008adc4:	20806216 	blt	r4,r2,2008af50 <__subdf3+0x864>
2008adc8:	010007c4 	movi	r4,31
2008adcc:	20806b16 	blt	r4,r2,2008af7c <__subdf3+0x890>
2008add0:	01000804 	movi	r4,32
2008add4:	2089c83a 	sub	r4,r4,r2
2008add8:	2912983a 	sll	r9,r5,r4
2008addc:	888ed83a 	srl	r7,r17,r2
2008ade0:	8908983a 	sll	r4,r17,r4
2008ade4:	2884d83a 	srl	r2,r5,r2
2008ade8:	49e2b03a 	or	r17,r9,r7
2008adec:	2008c03a 	cmpne	r4,r4,zero
2008adf0:	8922b03a 	or	r17,r17,r4
2008adf4:	89a3883a 	add	r17,r17,r6
2008adf8:	10c5883a 	add	r2,r2,r3
2008adfc:	898d803a 	cmpltu	r6,r17,r6
2008ae00:	118b883a 	add	r5,r2,r6
2008ae04:	5021883a 	mov	r16,r10
2008ae08:	003ed506 	br	2008a960 <__flash_rwdata_start+0xfffebb74>
2008ae0c:	1984b03a 	or	r2,r3,r6
2008ae10:	103e5926 	beq	r2,zero,2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ae14:	8989c83a 	sub	r4,r17,r6
2008ae18:	8911803a 	cmpltu	r8,r17,r4
2008ae1c:	28c5c83a 	sub	r2,r5,r3
2008ae20:	1205c83a 	sub	r2,r2,r8
2008ae24:	1200202c 	andhi	r8,r2,128
2008ae28:	403ef926 	beq	r8,zero,2008aa10 <__flash_rwdata_start+0xfffebc24>
2008ae2c:	3463c83a 	sub	r17,r6,r17
2008ae30:	194bc83a 	sub	r5,r3,r5
2008ae34:	344d803a 	cmpltu	r6,r6,r17
2008ae38:	298bc83a 	sub	r5,r5,r6
2008ae3c:	3825883a 	mov	r18,r7
2008ae40:	003e4d06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ae44:	1984b03a 	or	r2,r3,r6
2008ae48:	10002b26 	beq	r2,zero,2008aef8 <__subdf3+0x80c>
2008ae4c:	2808d0fa 	srli	r4,r5,3
2008ae50:	8822d0fa 	srli	r17,r17,3
2008ae54:	280a977a 	slli	r5,r5,29
2008ae58:	2080022c 	andhi	r2,r4,8
2008ae5c:	2c62b03a 	or	r17,r5,r17
2008ae60:	10000826 	beq	r2,zero,2008ae84 <__subdf3+0x798>
2008ae64:	1810d0fa 	srli	r8,r3,3
2008ae68:	4080022c 	andhi	r2,r8,8
2008ae6c:	1000051e 	bne	r2,zero,2008ae84 <__subdf3+0x798>
2008ae70:	300cd0fa 	srli	r6,r6,3
2008ae74:	1804977a 	slli	r2,r3,29
2008ae78:	4009883a 	mov	r4,r8
2008ae7c:	3825883a 	mov	r18,r7
2008ae80:	11a2b03a 	or	r17,r2,r6
2008ae84:	880ad77a 	srli	r5,r17,29
2008ae88:	200890fa 	slli	r4,r4,3
2008ae8c:	882290fa 	slli	r17,r17,3
2008ae90:	0401ffc4 	movi	r16,2047
2008ae94:	290ab03a 	or	r5,r5,r4
2008ae98:	003e3706 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008ae9c:	0101ffc4 	movi	r4,2047
2008aea0:	513fc71e 	bne	r10,r4,2008adc0 <__flash_rwdata_start+0xfffebfd4>
2008aea4:	180b883a 	mov	r5,r3
2008aea8:	3023883a 	mov	r17,r6
2008aeac:	5021883a 	mov	r16,r10
2008aeb0:	003e3106 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008aeb4:	10002d26 	beq	r2,zero,2008af6c <__subdf3+0x880>
2008aeb8:	1984b03a 	or	r2,r3,r6
2008aebc:	10000e26 	beq	r2,zero,2008aef8 <__subdf3+0x80c>
2008aec0:	2808d0fa 	srli	r4,r5,3
2008aec4:	8822d0fa 	srli	r17,r17,3
2008aec8:	280a977a 	slli	r5,r5,29
2008aecc:	2080022c 	andhi	r2,r4,8
2008aed0:	2c62b03a 	or	r17,r5,r17
2008aed4:	103feb26 	beq	r2,zero,2008ae84 <__flash_rwdata_start+0xfffec098>
2008aed8:	180ed0fa 	srli	r7,r3,3
2008aedc:	3880022c 	andhi	r2,r7,8
2008aee0:	103fe81e 	bne	r2,zero,2008ae84 <__flash_rwdata_start+0xfffec098>
2008aee4:	300cd0fa 	srli	r6,r6,3
2008aee8:	1804977a 	slli	r2,r3,29
2008aeec:	3809883a 	mov	r4,r7
2008aef0:	11a2b03a 	or	r17,r2,r6
2008aef4:	003fe306 	br	2008ae84 <__flash_rwdata_start+0xfffec098>
2008aef8:	0401ffc4 	movi	r16,2047
2008aefc:	003e1e06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008af00:	0005883a 	mov	r2,zero
2008af04:	003f8306 	br	2008ad14 <__flash_rwdata_start+0xfffebf28>
2008af08:	113ff804 	addi	r4,r2,-32
2008af0c:	02000804 	movi	r8,32
2008af10:	2908d83a 	srl	r4,r5,r4
2008af14:	12002526 	beq	r2,r8,2008afac <__subdf3+0x8c0>
2008af18:	02001004 	movi	r8,64
2008af1c:	4085c83a 	sub	r2,r8,r2
2008af20:	288a983a 	sll	r5,r5,r2
2008af24:	2c62b03a 	or	r17,r5,r17
2008af28:	8822c03a 	cmpne	r17,r17,zero
2008af2c:	8922b03a 	or	r17,r17,r4
2008af30:	0005883a 	mov	r2,zero
2008af34:	003f2406 	br	2008abc8 <__flash_rwdata_start+0xfffebddc>
2008af38:	01402034 	movhi	r5,128
2008af3c:	0011883a 	mov	r8,zero
2008af40:	297fffc4 	addi	r5,r5,-1
2008af44:	047ffe04 	movi	r17,-8
2008af48:	0401ffc4 	movi	r16,2047
2008af4c:	003e6a06 	br	2008a8f8 <__flash_rwdata_start+0xfffebb0c>
2008af50:	2c62b03a 	or	r17,r5,r17
2008af54:	8822c03a 	cmpne	r17,r17,zero
2008af58:	0005883a 	mov	r2,zero
2008af5c:	003fa506 	br	2008adf4 <__flash_rwdata_start+0xfffec008>
2008af60:	180b883a 	mov	r5,r3
2008af64:	3023883a 	mov	r17,r6
2008af68:	003e0306 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008af6c:	180b883a 	mov	r5,r3
2008af70:	3023883a 	mov	r17,r6
2008af74:	0401ffc4 	movi	r16,2047
2008af78:	003dff06 	br	2008a778 <__flash_rwdata_start+0xfffeb98c>
2008af7c:	113ff804 	addi	r4,r2,-32
2008af80:	01c00804 	movi	r7,32
2008af84:	2908d83a 	srl	r4,r5,r4
2008af88:	11c00a26 	beq	r2,r7,2008afb4 <__subdf3+0x8c8>
2008af8c:	01c01004 	movi	r7,64
2008af90:	3885c83a 	sub	r2,r7,r2
2008af94:	288a983a 	sll	r5,r5,r2
2008af98:	2c62b03a 	or	r17,r5,r17
2008af9c:	8822c03a 	cmpne	r17,r17,zero
2008afa0:	8922b03a 	or	r17,r17,r4
2008afa4:	0005883a 	mov	r2,zero
2008afa8:	003f9206 	br	2008adf4 <__flash_rwdata_start+0xfffec008>
2008afac:	000b883a 	mov	r5,zero
2008afb0:	003fdc06 	br	2008af24 <__flash_rwdata_start+0xfffec138>
2008afb4:	000b883a 	mov	r5,zero
2008afb8:	003ff706 	br	2008af98 <__flash_rwdata_start+0xfffec1ac>

2008afbc <__fixdfsi>:
2008afbc:	2806d53a 	srli	r3,r5,20
2008afc0:	00800434 	movhi	r2,16
2008afc4:	10bfffc4 	addi	r2,r2,-1
2008afc8:	18c1ffcc 	andi	r3,r3,2047
2008afcc:	0180ff84 	movi	r6,1022
2008afd0:	2884703a 	and	r2,r5,r2
2008afd4:	280ad7fa 	srli	r5,r5,31
2008afd8:	30c0130e 	bge	r6,r3,2008b028 <__fixdfsi+0x6c>
2008afdc:	01810744 	movi	r6,1053
2008afe0:	30c00d16 	blt	r6,r3,2008b018 <__fixdfsi+0x5c>
2008afe4:	01810cc4 	movi	r6,1075
2008afe8:	30cdc83a 	sub	r6,r6,r3
2008afec:	01c007c4 	movi	r7,31
2008aff0:	10800434 	orhi	r2,r2,16
2008aff4:	39800e0e 	bge	r7,r6,2008b030 <__fixdfsi+0x74>
2008aff8:	010104c4 	movi	r4,1043
2008affc:	20c7c83a 	sub	r3,r4,r3
2008b000:	10c6d83a 	srl	r3,r2,r3
2008b004:	29403fcc 	andi	r5,r5,255
2008b008:	0145c83a 	sub	r2,zero,r5
2008b00c:	1884f03a 	xor	r2,r3,r2
2008b010:	1145883a 	add	r2,r2,r5
2008b014:	f800283a 	ret
2008b018:	00a00034 	movhi	r2,32768
2008b01c:	10bfffc4 	addi	r2,r2,-1
2008b020:	2885883a 	add	r2,r5,r2
2008b024:	f800283a 	ret
2008b028:	0005883a 	mov	r2,zero
2008b02c:	f800283a 	ret
2008b030:	18fefb44 	addi	r3,r3,-1043
2008b034:	2188d83a 	srl	r4,r4,r6
2008b038:	10c6983a 	sll	r3,r2,r3
2008b03c:	20c6b03a 	or	r3,r4,r3
2008b040:	003ff006 	br	2008b004 <__flash_rwdata_start+0xfffec218>

2008b044 <__floatsidf>:
2008b044:	defffd04 	addi	sp,sp,-12
2008b048:	dc400115 	stw	r17,4(sp)
2008b04c:	dfc00215 	stw	ra,8(sp)
2008b050:	dc000015 	stw	r16,0(sp)
2008b054:	2023883a 	mov	r17,r4
2008b058:	20001426 	beq	r4,zero,2008b0ac <__floatsidf+0x68>
2008b05c:	2020d7fa 	srli	r16,r4,31
2008b060:	80000126 	beq	r16,zero,2008b068 <__floatsidf+0x24>
2008b064:	0123c83a 	sub	r17,zero,r4
2008b068:	8809883a 	mov	r4,r17
2008b06c:	008b4600 	call	2008b460 <__clzsi2>
2008b070:	01410784 	movi	r5,1054
2008b074:	00c00284 	movi	r3,10
2008b078:	288bc83a 	sub	r5,r5,r2
2008b07c:	18801c16 	blt	r3,r2,2008b0f0 <__floatsidf+0xac>
2008b080:	00c002c4 	movi	r3,11
2008b084:	1887c83a 	sub	r3,r3,r2
2008b088:	88c8d83a 	srl	r4,r17,r3
2008b08c:	00c00434 	movhi	r3,16
2008b090:	18ffffc4 	addi	r3,r3,-1
2008b094:	10800544 	addi	r2,r2,21
2008b098:	20c8703a 	and	r4,r4,r3
2008b09c:	8884983a 	sll	r2,r17,r2
2008b0a0:	28c1ffcc 	andi	r3,r5,2047
2008b0a4:	800d883a 	mov	r6,r16
2008b0a8:	00000406 	br	2008b0bc <__floatsidf+0x78>
2008b0ac:	000d883a 	mov	r6,zero
2008b0b0:	0007883a 	mov	r3,zero
2008b0b4:	0009883a 	mov	r4,zero
2008b0b8:	0005883a 	mov	r2,zero
2008b0bc:	180a953a 	slli	r5,r3,20
2008b0c0:	31803fcc 	andi	r6,r6,255
2008b0c4:	00c00434 	movhi	r3,16
2008b0c8:	300c97fa 	slli	r6,r6,31
2008b0cc:	18ffffc4 	addi	r3,r3,-1
2008b0d0:	20c6703a 	and	r3,r4,r3
2008b0d4:	1946b03a 	or	r3,r3,r5
2008b0d8:	1986b03a 	or	r3,r3,r6
2008b0dc:	dfc00217 	ldw	ra,8(sp)
2008b0e0:	dc400117 	ldw	r17,4(sp)
2008b0e4:	dc000017 	ldw	r16,0(sp)
2008b0e8:	dec00304 	addi	sp,sp,12
2008b0ec:	f800283a 	ret
2008b0f0:	10fffd44 	addi	r3,r2,-11
2008b0f4:	88c8983a 	sll	r4,r17,r3
2008b0f8:	00800434 	movhi	r2,16
2008b0fc:	10bfffc4 	addi	r2,r2,-1
2008b100:	2088703a 	and	r4,r4,r2
2008b104:	28c1ffcc 	andi	r3,r5,2047
2008b108:	800d883a 	mov	r6,r16
2008b10c:	0005883a 	mov	r2,zero
2008b110:	003fea06 	br	2008b0bc <__flash_rwdata_start+0xfffec2d0>

2008b114 <__floatunsidf>:
2008b114:	defffe04 	addi	sp,sp,-8
2008b118:	dc000015 	stw	r16,0(sp)
2008b11c:	dfc00115 	stw	ra,4(sp)
2008b120:	2021883a 	mov	r16,r4
2008b124:	20001026 	beq	r4,zero,2008b168 <__floatunsidf+0x54>
2008b128:	008b4600 	call	2008b460 <__clzsi2>
2008b12c:	01410784 	movi	r5,1054
2008b130:	100d883a 	mov	r6,r2
2008b134:	288bc83a 	sub	r5,r5,r2
2008b138:	00800284 	movi	r2,10
2008b13c:	11801616 	blt	r2,r6,2008b198 <__floatunsidf+0x84>
2008b140:	008002c4 	movi	r2,11
2008b144:	1185c83a 	sub	r2,r2,r6
2008b148:	8084d83a 	srl	r2,r16,r2
2008b14c:	00c00434 	movhi	r3,16
2008b150:	31c00544 	addi	r7,r6,21
2008b154:	18ffffc4 	addi	r3,r3,-1
2008b158:	81e0983a 	sll	r16,r16,r7
2008b15c:	10cc703a 	and	r6,r2,r3
2008b160:	2941ffcc 	andi	r5,r5,2047
2008b164:	00000206 	br	2008b170 <__floatunsidf+0x5c>
2008b168:	000b883a 	mov	r5,zero
2008b16c:	000d883a 	mov	r6,zero
2008b170:	280a953a 	slli	r5,r5,20
2008b174:	00c00434 	movhi	r3,16
2008b178:	18ffffc4 	addi	r3,r3,-1
2008b17c:	30c6703a 	and	r3,r6,r3
2008b180:	8005883a 	mov	r2,r16
2008b184:	1946b03a 	or	r3,r3,r5
2008b188:	dfc00117 	ldw	ra,4(sp)
2008b18c:	dc000017 	ldw	r16,0(sp)
2008b190:	dec00204 	addi	sp,sp,8
2008b194:	f800283a 	ret
2008b198:	31bffd44 	addi	r6,r6,-11
2008b19c:	818c983a 	sll	r6,r16,r6
2008b1a0:	00800434 	movhi	r2,16
2008b1a4:	10bfffc4 	addi	r2,r2,-1
2008b1a8:	2941ffcc 	andi	r5,r5,2047
2008b1ac:	0021883a 	mov	r16,zero
2008b1b0:	308c703a 	and	r6,r6,r2
2008b1b4:	003fee06 	br	2008b170 <__flash_rwdata_start+0xfffec384>

2008b1b8 <__extendsfdf2>:
2008b1b8:	200ad5fa 	srli	r5,r4,23
2008b1bc:	defffd04 	addi	sp,sp,-12
2008b1c0:	dc400115 	stw	r17,4(sp)
2008b1c4:	29403fcc 	andi	r5,r5,255
2008b1c8:	29800044 	addi	r6,r5,1
2008b1cc:	04402034 	movhi	r17,128
2008b1d0:	dc000015 	stw	r16,0(sp)
2008b1d4:	8c7fffc4 	addi	r17,r17,-1
2008b1d8:	dfc00215 	stw	ra,8(sp)
2008b1dc:	31803fcc 	andi	r6,r6,255
2008b1e0:	00800044 	movi	r2,1
2008b1e4:	8922703a 	and	r17,r17,r4
2008b1e8:	2020d7fa 	srli	r16,r4,31
2008b1ec:	1180110e 	bge	r2,r6,2008b234 <__extendsfdf2+0x7c>
2008b1f0:	880ed0fa 	srli	r7,r17,3
2008b1f4:	8822977a 	slli	r17,r17,29
2008b1f8:	2940e004 	addi	r5,r5,896
2008b1fc:	2941ffcc 	andi	r5,r5,2047
2008b200:	280c953a 	slli	r6,r5,20
2008b204:	01400434 	movhi	r5,16
2008b208:	800697fa 	slli	r3,r16,31
2008b20c:	297fffc4 	addi	r5,r5,-1
2008b210:	394a703a 	and	r5,r7,r5
2008b214:	298ab03a 	or	r5,r5,r6
2008b218:	8805883a 	mov	r2,r17
2008b21c:	28c6b03a 	or	r3,r5,r3
2008b220:	dfc00217 	ldw	ra,8(sp)
2008b224:	dc400117 	ldw	r17,4(sp)
2008b228:	dc000017 	ldw	r16,0(sp)
2008b22c:	dec00304 	addi	sp,sp,12
2008b230:	f800283a 	ret
2008b234:	2800111e 	bne	r5,zero,2008b27c <__extendsfdf2+0xc4>
2008b238:	88001c26 	beq	r17,zero,2008b2ac <__extendsfdf2+0xf4>
2008b23c:	8809883a 	mov	r4,r17
2008b240:	008b4600 	call	2008b460 <__clzsi2>
2008b244:	00c00284 	movi	r3,10
2008b248:	18801b16 	blt	r3,r2,2008b2b8 <__extendsfdf2+0x100>
2008b24c:	01c002c4 	movi	r7,11
2008b250:	388fc83a 	sub	r7,r7,r2
2008b254:	10c00544 	addi	r3,r2,21
2008b258:	89ced83a 	srl	r7,r17,r7
2008b25c:	88e2983a 	sll	r17,r17,r3
2008b260:	0180e244 	movi	r6,905
2008b264:	308bc83a 	sub	r5,r6,r2
2008b268:	01800434 	movhi	r6,16
2008b26c:	31bfffc4 	addi	r6,r6,-1
2008b270:	398e703a 	and	r7,r7,r6
2008b274:	2941ffcc 	andi	r5,r5,2047
2008b278:	003fe006 	br	2008b1fc <__flash_rwdata_start+0xfffec410>
2008b27c:	88000826 	beq	r17,zero,2008b2a0 <__extendsfdf2+0xe8>
2008b280:	880ed0fa 	srli	r7,r17,3
2008b284:	00800434 	movhi	r2,16
2008b288:	10bfffc4 	addi	r2,r2,-1
2008b28c:	39c00234 	orhi	r7,r7,8
2008b290:	8822977a 	slli	r17,r17,29
2008b294:	388e703a 	and	r7,r7,r2
2008b298:	0141ffc4 	movi	r5,2047
2008b29c:	003fd706 	br	2008b1fc <__flash_rwdata_start+0xfffec410>
2008b2a0:	0141ffc4 	movi	r5,2047
2008b2a4:	000f883a 	mov	r7,zero
2008b2a8:	003fd406 	br	2008b1fc <__flash_rwdata_start+0xfffec410>
2008b2ac:	000b883a 	mov	r5,zero
2008b2b0:	000f883a 	mov	r7,zero
2008b2b4:	003fd106 	br	2008b1fc <__flash_rwdata_start+0xfffec410>
2008b2b8:	11fffd44 	addi	r7,r2,-11
2008b2bc:	89ce983a 	sll	r7,r17,r7
2008b2c0:	0023883a 	mov	r17,zero
2008b2c4:	003fe606 	br	2008b260 <__flash_rwdata_start+0xfffec474>

2008b2c8 <__truncdfsf2>:
2008b2c8:	2810d53a 	srli	r8,r5,20
2008b2cc:	01c00434 	movhi	r7,16
2008b2d0:	39ffffc4 	addi	r7,r7,-1
2008b2d4:	29ce703a 	and	r7,r5,r7
2008b2d8:	380e90fa 	slli	r7,r7,3
2008b2dc:	4201ffcc 	andi	r8,r8,2047
2008b2e0:	200cd77a 	srli	r6,r4,29
2008b2e4:	42400044 	addi	r9,r8,1
2008b2e8:	4a41ffcc 	andi	r9,r9,2047
2008b2ec:	00800044 	movi	r2,1
2008b2f0:	398cb03a 	or	r6,r7,r6
2008b2f4:	280ad7fa 	srli	r5,r5,31
2008b2f8:	200e90fa 	slli	r7,r4,3
2008b2fc:	1240230e 	bge	r2,r9,2008b38c <__truncdfsf2+0xc4>
2008b300:	40ff2004 	addi	r3,r8,-896
2008b304:	00803f84 	movi	r2,254
2008b308:	10c01516 	blt	r2,r3,2008b360 <__truncdfsf2+0x98>
2008b30c:	00c02d0e 	bge	zero,r3,2008b3c4 <__truncdfsf2+0xfc>
2008b310:	200891ba 	slli	r4,r4,6
2008b314:	300c90fa 	slli	r6,r6,3
2008b318:	380ed77a 	srli	r7,r7,29
2008b31c:	2008c03a 	cmpne	r4,r4,zero
2008b320:	310cb03a 	or	r6,r6,r4
2008b324:	31ccb03a 	or	r6,r6,r7
2008b328:	308001cc 	andi	r2,r6,7
2008b32c:	10000426 	beq	r2,zero,2008b340 <__truncdfsf2+0x78>
2008b330:	310003cc 	andi	r4,r6,15
2008b334:	00800104 	movi	r2,4
2008b338:	20800126 	beq	r4,r2,2008b340 <__truncdfsf2+0x78>
2008b33c:	31800104 	addi	r6,r6,4
2008b340:	3081002c 	andhi	r2,r6,1024
2008b344:	10002326 	beq	r2,zero,2008b3d4 <__truncdfsf2+0x10c>
2008b348:	18c00044 	addi	r3,r3,1
2008b34c:	00803fc4 	movi	r2,255
2008b350:	18800326 	beq	r3,r2,2008b360 <__truncdfsf2+0x98>
2008b354:	300c91ba 	slli	r6,r6,6
2008b358:	300cd27a 	srli	r6,r6,9
2008b35c:	00000206 	br	2008b368 <__truncdfsf2+0xa0>
2008b360:	00ffffc4 	movi	r3,-1
2008b364:	000d883a 	mov	r6,zero
2008b368:	18c03fcc 	andi	r3,r3,255
2008b36c:	180895fa 	slli	r4,r3,23
2008b370:	00c02034 	movhi	r3,128
2008b374:	280a97fa 	slli	r5,r5,31
2008b378:	18ffffc4 	addi	r3,r3,-1
2008b37c:	30c6703a 	and	r3,r6,r3
2008b380:	1906b03a 	or	r3,r3,r4
2008b384:	1944b03a 	or	r2,r3,r5
2008b388:	f800283a 	ret
2008b38c:	4000071e 	bne	r8,zero,2008b3ac <__truncdfsf2+0xe4>
2008b390:	31ccb03a 	or	r6,r6,r7
2008b394:	30000d1e 	bne	r6,zero,2008b3cc <__truncdfsf2+0x104>
2008b398:	0007883a 	mov	r3,zero
2008b39c:	00802034 	movhi	r2,128
2008b3a0:	10bfffc4 	addi	r2,r2,-1
2008b3a4:	308c703a 	and	r6,r6,r2
2008b3a8:	003fef06 	br	2008b368 <__flash_rwdata_start+0xfffec57c>
2008b3ac:	31c8b03a 	or	r4,r6,r7
2008b3b0:	203feb26 	beq	r4,zero,2008b360 <__flash_rwdata_start+0xfffec574>
2008b3b4:	300c90fa 	slli	r6,r6,3
2008b3b8:	00c03fc4 	movi	r3,255
2008b3bc:	31808034 	orhi	r6,r6,512
2008b3c0:	003fd906 	br	2008b328 <__flash_rwdata_start+0xfffec53c>
2008b3c4:	00bffa44 	movi	r2,-23
2008b3c8:	1880090e 	bge	r3,r2,2008b3f0 <__truncdfsf2+0x128>
2008b3cc:	01800144 	movi	r6,5
2008b3d0:	0007883a 	mov	r3,zero
2008b3d4:	00803fc4 	movi	r2,255
2008b3d8:	300cd0fa 	srli	r6,r6,3
2008b3dc:	18bfef1e 	bne	r3,r2,2008b39c <__flash_rwdata_start+0xfffec5b0>
2008b3e0:	303fdf26 	beq	r6,zero,2008b360 <__flash_rwdata_start+0xfffec574>
2008b3e4:	31801034 	orhi	r6,r6,64
2008b3e8:	00ffffc4 	movi	r3,-1
2008b3ec:	003feb06 	br	2008b39c <__flash_rwdata_start+0xfffec5b0>
2008b3f0:	0080e784 	movi	r2,926
2008b3f4:	1205c83a 	sub	r2,r2,r8
2008b3f8:	00c007c4 	movi	r3,31
2008b3fc:	31802034 	orhi	r6,r6,128
2008b400:	18800916 	blt	r3,r2,2008b428 <__truncdfsf2+0x160>
2008b404:	423f2084 	addi	r8,r8,-894
2008b408:	3a06983a 	sll	r3,r7,r8
2008b40c:	3210983a 	sll	r8,r6,r8
2008b410:	388ed83a 	srl	r7,r7,r2
2008b414:	180cc03a 	cmpne	r6,r3,zero
2008b418:	418cb03a 	or	r6,r8,r6
2008b41c:	31ccb03a 	or	r6,r6,r7
2008b420:	0007883a 	mov	r3,zero
2008b424:	003fc006 	br	2008b328 <__flash_rwdata_start+0xfffec53c>
2008b428:	00c0df84 	movi	r3,894
2008b42c:	1a07c83a 	sub	r3,r3,r8
2008b430:	01000804 	movi	r4,32
2008b434:	30c6d83a 	srl	r3,r6,r3
2008b438:	11000726 	beq	r2,r4,2008b458 <__truncdfsf2+0x190>
2008b43c:	423f2884 	addi	r8,r8,-862
2008b440:	3210983a 	sll	r8,r6,r8
2008b444:	41ceb03a 	or	r7,r8,r7
2008b448:	380ec03a 	cmpne	r7,r7,zero
2008b44c:	38ccb03a 	or	r6,r7,r3
2008b450:	0007883a 	mov	r3,zero
2008b454:	003fb406 	br	2008b328 <__flash_rwdata_start+0xfffec53c>
2008b458:	0011883a 	mov	r8,zero
2008b45c:	003ff906 	br	2008b444 <__flash_rwdata_start+0xfffec658>

2008b460 <__clzsi2>:
2008b460:	00bfffd4 	movui	r2,65535
2008b464:	11000b36 	bltu	r2,r4,2008b494 <__clzsi2+0x34>
2008b468:	00803fc4 	movi	r2,255
2008b46c:	1100122e 	bgeu	r2,r4,2008b4b8 <__clzsi2+0x58>
2008b470:	00c00204 	movi	r3,8
2008b474:	01400604 	movi	r5,24
2008b478:	20c8d83a 	srl	r4,r4,r3
2008b47c:	00800034 	movhi	r2,0
2008b480:	10819a04 	addi	r2,r2,1640
2008b484:	1109883a 	add	r4,r2,r4
2008b488:	20800003 	ldbu	r2,0(r4)
2008b48c:	2885c83a 	sub	r2,r5,r2
2008b490:	f800283a 	ret
2008b494:	00804034 	movhi	r2,256
2008b498:	10bfffc4 	addi	r2,r2,-1
2008b49c:	11000336 	bltu	r2,r4,2008b4ac <__clzsi2+0x4c>
2008b4a0:	00c00404 	movi	r3,16
2008b4a4:	180b883a 	mov	r5,r3
2008b4a8:	003ff306 	br	2008b478 <__flash_rwdata_start+0xfffec68c>
2008b4ac:	00c00604 	movi	r3,24
2008b4b0:	01400204 	movi	r5,8
2008b4b4:	003ff006 	br	2008b478 <__flash_rwdata_start+0xfffec68c>
2008b4b8:	0007883a 	mov	r3,zero
2008b4bc:	01400804 	movi	r5,32
2008b4c0:	003fed06 	br	2008b478 <__flash_rwdata_start+0xfffec68c>

2008b4c4 <exit>:
2008b4c4:	defffe04 	addi	sp,sp,-8
2008b4c8:	000b883a 	mov	r5,zero
2008b4cc:	dc000015 	stw	r16,0(sp)
2008b4d0:	dfc00115 	stw	ra,4(sp)
2008b4d4:	2021883a 	mov	r16,r4
2008b4d8:	00907b80 	call	200907b8 <__call_exitprocs>
2008b4dc:	00800034 	movhi	r2,0
2008b4e0:	108a7004 	addi	r2,r2,10688
2008b4e4:	11000017 	ldw	r4,0(r2)
2008b4e8:	20800f17 	ldw	r2,60(r4)
2008b4ec:	10000126 	beq	r2,zero,2008b4f4 <exit+0x30>
2008b4f0:	103ee83a 	callr	r2
2008b4f4:	8009883a 	mov	r4,r16
2008b4f8:	00997e40 	call	200997e4 <_exit>

2008b4fc <memalign>:
2008b4fc:	00c00034 	movhi	r3,0
2008b500:	18ca7104 	addi	r3,r3,10692
2008b504:	2005883a 	mov	r2,r4
2008b508:	19000017 	ldw	r4,0(r3)
2008b50c:	280d883a 	mov	r6,r5
2008b510:	100b883a 	mov	r5,r2
2008b514:	008b5181 	jmpi	2008b518 <_memalign_r>

2008b518 <_memalign_r>:
2008b518:	defffa04 	addi	sp,sp,-24
2008b51c:	dc400115 	stw	r17,4(sp)
2008b520:	dfc00515 	stw	ra,20(sp)
2008b524:	dd000415 	stw	r20,16(sp)
2008b528:	dcc00315 	stw	r19,12(sp)
2008b52c:	dc800215 	stw	r18,8(sp)
2008b530:	dc000015 	stw	r16,0(sp)
2008b534:	00800204 	movi	r2,8
2008b538:	2823883a 	mov	r17,r5
2008b53c:	11404b2e 	bgeu	r2,r5,2008b66c <_memalign_r+0x154>
2008b540:	008003c4 	movi	r2,15
2008b544:	2029883a 	mov	r20,r4
2008b548:	11400136 	bltu	r2,r5,2008b550 <_memalign_r+0x38>
2008b54c:	04400404 	movi	r17,16
2008b550:	308002c4 	addi	r2,r6,11
2008b554:	00c00584 	movi	r3,22
2008b558:	18803e2e 	bgeu	r3,r2,2008b654 <_memalign_r+0x13c>
2008b55c:	04bffe04 	movi	r18,-8
2008b560:	14a4703a 	and	r18,r2,r18
2008b564:	90003d16 	blt	r18,zero,2008b65c <_memalign_r+0x144>
2008b568:	91803c36 	bltu	r18,r6,2008b65c <_memalign_r+0x144>
2008b56c:	89400404 	addi	r5,r17,16
2008b570:	a009883a 	mov	r4,r20
2008b574:	2c8b883a 	add	r5,r5,r18
2008b578:	008b6f40 	call	2008b6f4 <_malloc_r>
2008b57c:	1027883a 	mov	r19,r2
2008b580:	10005026 	beq	r2,zero,2008b6c4 <_memalign_r+0x1ac>
2008b584:	a009883a 	mov	r4,r20
2008b588:	0099e3c0 	call	20099e3c <__malloc_lock>
2008b58c:	9809883a 	mov	r4,r19
2008b590:	880b883a 	mov	r5,r17
2008b594:	9c3ffe04 	addi	r16,r19,-8
2008b598:	0088bf80 	call	20088bf8 <__umodsi3>
2008b59c:	10001c26 	beq	r2,zero,2008b610 <_memalign_r+0xf8>
2008b5a0:	88bfffc4 	addi	r2,r17,-1
2008b5a4:	9887883a 	add	r3,r19,r2
2008b5a8:	0445c83a 	sub	r2,zero,r17
2008b5ac:	1884703a 	and	r2,r3,r2
2008b5b0:	10bffe04 	addi	r2,r2,-8
2008b5b4:	1409c83a 	sub	r4,r2,r16
2008b5b8:	014003c4 	movi	r5,15
2008b5bc:	8007883a 	mov	r3,r16
2008b5c0:	2900330e 	bge	r5,r4,2008b690 <_memalign_r+0x178>
2008b5c4:	1021883a 	mov	r16,r2
2008b5c8:	993fff17 	ldw	r4,-4(r19)
2008b5cc:	00bfff04 	movi	r2,-4
2008b5d0:	80c7c83a 	sub	r3,r16,r3
2008b5d4:	2084703a 	and	r2,r4,r2
2008b5d8:	10c5c83a 	sub	r2,r2,r3
2008b5dc:	11000054 	ori	r4,r2,1
2008b5e0:	81000115 	stw	r4,4(r16)
2008b5e4:	8085883a 	add	r2,r16,r2
2008b5e8:	11800117 	ldw	r6,4(r2)
2008b5ec:	a009883a 	mov	r4,r20
2008b5f0:	980b883a 	mov	r5,r19
2008b5f4:	31800054 	ori	r6,r6,1
2008b5f8:	11800115 	stw	r6,4(r2)
2008b5fc:	98bfff17 	ldw	r2,-4(r19)
2008b600:	1080004c 	andi	r2,r2,1
2008b604:	1884b03a 	or	r2,r3,r2
2008b608:	98bfff15 	stw	r2,-4(r19)
2008b60c:	00929cc0 	call	200929cc <_free_r>
2008b610:	80c00117 	ldw	r3,4(r16)
2008b614:	00bfff04 	movi	r2,-4
2008b618:	1884703a 	and	r2,r3,r2
2008b61c:	1485c83a 	sub	r2,r2,r18
2008b620:	00c003c4 	movi	r3,15
2008b624:	18801c16 	blt	r3,r2,2008b698 <_memalign_r+0x180>
2008b628:	a009883a 	mov	r4,r20
2008b62c:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008b630:	80800204 	addi	r2,r16,8
2008b634:	dfc00517 	ldw	ra,20(sp)
2008b638:	dd000417 	ldw	r20,16(sp)
2008b63c:	dcc00317 	ldw	r19,12(sp)
2008b640:	dc800217 	ldw	r18,8(sp)
2008b644:	dc400117 	ldw	r17,4(sp)
2008b648:	dc000017 	ldw	r16,0(sp)
2008b64c:	dec00604 	addi	sp,sp,24
2008b650:	f800283a 	ret
2008b654:	04800404 	movi	r18,16
2008b658:	91bfc42e 	bgeu	r18,r6,2008b56c <__flash_rwdata_start+0xfffec780>
2008b65c:	00800304 	movi	r2,12
2008b660:	a0800015 	stw	r2,0(r20)
2008b664:	0005883a 	mov	r2,zero
2008b668:	003ff206 	br	2008b634 <__flash_rwdata_start+0xfffec848>
2008b66c:	300b883a 	mov	r5,r6
2008b670:	dfc00517 	ldw	ra,20(sp)
2008b674:	dd000417 	ldw	r20,16(sp)
2008b678:	dcc00317 	ldw	r19,12(sp)
2008b67c:	dc800217 	ldw	r18,8(sp)
2008b680:	dc400117 	ldw	r17,4(sp)
2008b684:	dc000017 	ldw	r16,0(sp)
2008b688:	dec00604 	addi	sp,sp,24
2008b68c:	008b6f41 	jmpi	2008b6f4 <_malloc_r>
2008b690:	1461883a 	add	r16,r2,r17
2008b694:	003fcc06 	br	2008b5c8 <__flash_rwdata_start+0xfffec7dc>
2008b698:	848b883a 	add	r5,r16,r18
2008b69c:	10800054 	ori	r2,r2,1
2008b6a0:	28800115 	stw	r2,4(r5)
2008b6a4:	80800117 	ldw	r2,4(r16)
2008b6a8:	a009883a 	mov	r4,r20
2008b6ac:	29400204 	addi	r5,r5,8
2008b6b0:	1080004c 	andi	r2,r2,1
2008b6b4:	90a4b03a 	or	r18,r18,r2
2008b6b8:	84800115 	stw	r18,4(r16)
2008b6bc:	00929cc0 	call	200929cc <_free_r>
2008b6c0:	003fd906 	br	2008b628 <__flash_rwdata_start+0xfffec83c>
2008b6c4:	0005883a 	mov	r2,zero
2008b6c8:	003fda06 	br	2008b634 <__flash_rwdata_start+0xfffec848>

2008b6cc <malloc>:
2008b6cc:	00800034 	movhi	r2,0
2008b6d0:	108a7104 	addi	r2,r2,10692
2008b6d4:	200b883a 	mov	r5,r4
2008b6d8:	11000017 	ldw	r4,0(r2)
2008b6dc:	008b6f41 	jmpi	2008b6f4 <_malloc_r>

2008b6e0 <free>:
2008b6e0:	00800034 	movhi	r2,0
2008b6e4:	108a7104 	addi	r2,r2,10692
2008b6e8:	200b883a 	mov	r5,r4
2008b6ec:	11000017 	ldw	r4,0(r2)
2008b6f0:	00929cc1 	jmpi	200929cc <_free_r>

2008b6f4 <_malloc_r>:
2008b6f4:	defff504 	addi	sp,sp,-44
2008b6f8:	dc800315 	stw	r18,12(sp)
2008b6fc:	dfc00a15 	stw	ra,40(sp)
2008b700:	df000915 	stw	fp,36(sp)
2008b704:	ddc00815 	stw	r23,32(sp)
2008b708:	dd800715 	stw	r22,28(sp)
2008b70c:	dd400615 	stw	r21,24(sp)
2008b710:	dd000515 	stw	r20,20(sp)
2008b714:	dcc00415 	stw	r19,16(sp)
2008b718:	dc400215 	stw	r17,8(sp)
2008b71c:	dc000115 	stw	r16,4(sp)
2008b720:	288002c4 	addi	r2,r5,11
2008b724:	00c00584 	movi	r3,22
2008b728:	2025883a 	mov	r18,r4
2008b72c:	18802a2e 	bgeu	r3,r2,2008b7d8 <_malloc_r+0xe4>
2008b730:	047ffe04 	movi	r17,-8
2008b734:	1462703a 	and	r17,r2,r17
2008b738:	88009e16 	blt	r17,zero,2008b9b4 <_malloc_r+0x2c0>
2008b73c:	89409d36 	bltu	r17,r5,2008b9b4 <_malloc_r+0x2c0>
2008b740:	0099e3c0 	call	20099e3c <__malloc_lock>
2008b744:	00807dc4 	movi	r2,503
2008b748:	14402736 	bltu	r2,r17,2008b7e8 <_malloc_r+0xf4>
2008b74c:	8806d0fa 	srli	r3,r17,3
2008b750:	04c00034 	movhi	r19,0
2008b754:	9cc48304 	addi	r19,r19,4620
2008b758:	18c5883a 	add	r2,r3,r3
2008b75c:	1085883a 	add	r2,r2,r2
2008b760:	1085883a 	add	r2,r2,r2
2008b764:	9885883a 	add	r2,r19,r2
2008b768:	14000317 	ldw	r16,12(r2)
2008b76c:	80814a26 	beq	r16,r2,2008bc98 <_malloc_r+0x5a4>
2008b770:	80c00117 	ldw	r3,4(r16)
2008b774:	81000317 	ldw	r4,12(r16)
2008b778:	00bfff04 	movi	r2,-4
2008b77c:	1884703a 	and	r2,r3,r2
2008b780:	81400217 	ldw	r5,8(r16)
2008b784:	8085883a 	add	r2,r16,r2
2008b788:	10c00117 	ldw	r3,4(r2)
2008b78c:	29000315 	stw	r4,12(r5)
2008b790:	21400215 	stw	r5,8(r4)
2008b794:	18c00054 	ori	r3,r3,1
2008b798:	10c00115 	stw	r3,4(r2)
2008b79c:	9009883a 	mov	r4,r18
2008b7a0:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008b7a4:	80800204 	addi	r2,r16,8
2008b7a8:	dfc00a17 	ldw	ra,40(sp)
2008b7ac:	df000917 	ldw	fp,36(sp)
2008b7b0:	ddc00817 	ldw	r23,32(sp)
2008b7b4:	dd800717 	ldw	r22,28(sp)
2008b7b8:	dd400617 	ldw	r21,24(sp)
2008b7bc:	dd000517 	ldw	r20,20(sp)
2008b7c0:	dcc00417 	ldw	r19,16(sp)
2008b7c4:	dc800317 	ldw	r18,12(sp)
2008b7c8:	dc400217 	ldw	r17,8(sp)
2008b7cc:	dc000117 	ldw	r16,4(sp)
2008b7d0:	dec00b04 	addi	sp,sp,44
2008b7d4:	f800283a 	ret
2008b7d8:	04400404 	movi	r17,16
2008b7dc:	89407536 	bltu	r17,r5,2008b9b4 <_malloc_r+0x2c0>
2008b7e0:	0099e3c0 	call	20099e3c <__malloc_lock>
2008b7e4:	003fd906 	br	2008b74c <__flash_rwdata_start+0xfffec960>
2008b7e8:	8806d27a 	srli	r3,r17,9
2008b7ec:	18007526 	beq	r3,zero,2008b9c4 <_malloc_r+0x2d0>
2008b7f0:	00800104 	movi	r2,4
2008b7f4:	10c0ef36 	bltu	r2,r3,2008bbb4 <_malloc_r+0x4c0>
2008b7f8:	8806d1ba 	srli	r3,r17,6
2008b7fc:	19c00e04 	addi	r7,r3,56
2008b800:	39cb883a 	add	r5,r7,r7
2008b804:	04c00034 	movhi	r19,0
2008b808:	294b883a 	add	r5,r5,r5
2008b80c:	9cc48304 	addi	r19,r19,4620
2008b810:	294b883a 	add	r5,r5,r5
2008b814:	994b883a 	add	r5,r19,r5
2008b818:	2c000317 	ldw	r16,12(r5)
2008b81c:	2c000e26 	beq	r5,r16,2008b858 <_malloc_r+0x164>
2008b820:	80800117 	ldw	r2,4(r16)
2008b824:	01bfff04 	movi	r6,-4
2008b828:	010003c4 	movi	r4,15
2008b82c:	1184703a 	and	r2,r2,r6
2008b830:	1447c83a 	sub	r3,r2,r17
2008b834:	20c00716 	blt	r4,r3,2008b854 <_malloc_r+0x160>
2008b838:	1800650e 	bge	r3,zero,2008b9d0 <_malloc_r+0x2dc>
2008b83c:	84000317 	ldw	r16,12(r16)
2008b840:	2c000526 	beq	r5,r16,2008b858 <_malloc_r+0x164>
2008b844:	80800117 	ldw	r2,4(r16)
2008b848:	1184703a 	and	r2,r2,r6
2008b84c:	1447c83a 	sub	r3,r2,r17
2008b850:	20fff90e 	bge	r4,r3,2008b838 <__flash_rwdata_start+0xfffeca4c>
2008b854:	39ffffc4 	addi	r7,r7,-1
2008b858:	38c00044 	addi	r3,r7,1
2008b85c:	01800034 	movhi	r6,0
2008b860:	9c000417 	ldw	r16,16(r19)
2008b864:	31848304 	addi	r6,r6,4620
2008b868:	32400204 	addi	r9,r6,8
2008b86c:	82410326 	beq	r16,r9,2008bc7c <_malloc_r+0x588>
2008b870:	81000117 	ldw	r4,4(r16)
2008b874:	00bfff04 	movi	r2,-4
2008b878:	208e703a 	and	r7,r4,r2
2008b87c:	3c45c83a 	sub	r2,r7,r17
2008b880:	010003c4 	movi	r4,15
2008b884:	2080ee16 	blt	r4,r2,2008bc40 <_malloc_r+0x54c>
2008b888:	32400515 	stw	r9,20(r6)
2008b88c:	32400415 	stw	r9,16(r6)
2008b890:	1000510e 	bge	r2,zero,2008b9d8 <_malloc_r+0x2e4>
2008b894:	00807fc4 	movi	r2,511
2008b898:	11c0ce36 	bltu	r2,r7,2008bbd4 <_malloc_r+0x4e0>
2008b89c:	3808d0fa 	srli	r4,r7,3
2008b8a0:	01c00044 	movi	r7,1
2008b8a4:	30800117 	ldw	r2,4(r6)
2008b8a8:	210b883a 	add	r5,r4,r4
2008b8ac:	294b883a 	add	r5,r5,r5
2008b8b0:	2009d0ba 	srai	r4,r4,2
2008b8b4:	294b883a 	add	r5,r5,r5
2008b8b8:	298b883a 	add	r5,r5,r6
2008b8bc:	2a000217 	ldw	r8,8(r5)
2008b8c0:	3908983a 	sll	r4,r7,r4
2008b8c4:	81400315 	stw	r5,12(r16)
2008b8c8:	82000215 	stw	r8,8(r16)
2008b8cc:	2088b03a 	or	r4,r4,r2
2008b8d0:	2c000215 	stw	r16,8(r5)
2008b8d4:	31000115 	stw	r4,4(r6)
2008b8d8:	44000315 	stw	r16,12(r8)
2008b8dc:	1805d0ba 	srai	r2,r3,2
2008b8e0:	01400044 	movi	r5,1
2008b8e4:	288a983a 	sll	r5,r5,r2
2008b8e8:	21404336 	bltu	r4,r5,2008b9f8 <_malloc_r+0x304>
2008b8ec:	2144703a 	and	r2,r4,r5
2008b8f0:	10000a1e 	bne	r2,zero,2008b91c <_malloc_r+0x228>
2008b8f4:	00bfff04 	movi	r2,-4
2008b8f8:	294b883a 	add	r5,r5,r5
2008b8fc:	1886703a 	and	r3,r3,r2
2008b900:	2144703a 	and	r2,r4,r5
2008b904:	18c00104 	addi	r3,r3,4
2008b908:	1000041e 	bne	r2,zero,2008b91c <_malloc_r+0x228>
2008b90c:	294b883a 	add	r5,r5,r5
2008b910:	2144703a 	and	r2,r4,r5
2008b914:	18c00104 	addi	r3,r3,4
2008b918:	103ffc26 	beq	r2,zero,2008b90c <__flash_rwdata_start+0xfffecb20>
2008b91c:	023fff04 	movi	r8,-4
2008b920:	01c003c4 	movi	r7,15
2008b924:	18c5883a 	add	r2,r3,r3
2008b928:	1085883a 	add	r2,r2,r2
2008b92c:	1085883a 	add	r2,r2,r2
2008b930:	9895883a 	add	r10,r19,r2
2008b934:	52c00304 	addi	r11,r10,12
2008b938:	1819883a 	mov	r12,r3
2008b93c:	5c000017 	ldw	r16,0(r11)
2008b940:	59bffd04 	addi	r6,r11,-12
2008b944:	8180041e 	bne	r16,r6,2008b958 <_malloc_r+0x264>
2008b948:	0000ce06 	br	2008bc84 <_malloc_r+0x590>
2008b94c:	2000d70e 	bge	r4,zero,2008bcac <_malloc_r+0x5b8>
2008b950:	84000317 	ldw	r16,12(r16)
2008b954:	8180cb26 	beq	r16,r6,2008bc84 <_malloc_r+0x590>
2008b958:	80800117 	ldw	r2,4(r16)
2008b95c:	1204703a 	and	r2,r2,r8
2008b960:	1449c83a 	sub	r4,r2,r17
2008b964:	393ff90e 	bge	r7,r4,2008b94c <__flash_rwdata_start+0xfffecb60>
2008b968:	80800317 	ldw	r2,12(r16)
2008b96c:	80c00217 	ldw	r3,8(r16)
2008b970:	89400054 	ori	r5,r17,1
2008b974:	81400115 	stw	r5,4(r16)
2008b978:	18800315 	stw	r2,12(r3)
2008b97c:	10c00215 	stw	r3,8(r2)
2008b980:	8463883a 	add	r17,r16,r17
2008b984:	9c400515 	stw	r17,20(r19)
2008b988:	9c400415 	stw	r17,16(r19)
2008b98c:	20800054 	ori	r2,r4,1
2008b990:	88800115 	stw	r2,4(r17)
2008b994:	8a400315 	stw	r9,12(r17)
2008b998:	8a400215 	stw	r9,8(r17)
2008b99c:	8923883a 	add	r17,r17,r4
2008b9a0:	89000015 	stw	r4,0(r17)
2008b9a4:	9009883a 	mov	r4,r18
2008b9a8:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008b9ac:	80800204 	addi	r2,r16,8
2008b9b0:	003f7d06 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008b9b4:	00800304 	movi	r2,12
2008b9b8:	90800015 	stw	r2,0(r18)
2008b9bc:	0005883a 	mov	r2,zero
2008b9c0:	003f7906 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008b9c4:	01401f84 	movi	r5,126
2008b9c8:	01c00fc4 	movi	r7,63
2008b9cc:	003f8d06 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008b9d0:	81000317 	ldw	r4,12(r16)
2008b9d4:	003f6a06 	br	2008b780 <__flash_rwdata_start+0xfffec994>
2008b9d8:	81c5883a 	add	r2,r16,r7
2008b9dc:	10c00117 	ldw	r3,4(r2)
2008b9e0:	9009883a 	mov	r4,r18
2008b9e4:	18c00054 	ori	r3,r3,1
2008b9e8:	10c00115 	stw	r3,4(r2)
2008b9ec:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008b9f0:	80800204 	addi	r2,r16,8
2008b9f4:	003f6c06 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008b9f8:	9c000217 	ldw	r16,8(r19)
2008b9fc:	00bfff04 	movi	r2,-4
2008ba00:	85800117 	ldw	r22,4(r16)
2008ba04:	b0ac703a 	and	r22,r22,r2
2008ba08:	b4400336 	bltu	r22,r17,2008ba18 <_malloc_r+0x324>
2008ba0c:	b445c83a 	sub	r2,r22,r17
2008ba10:	00c003c4 	movi	r3,15
2008ba14:	18805d16 	blt	r3,r2,2008bb8c <_malloc_r+0x498>
2008ba18:	05c00034 	movhi	r23,0
2008ba1c:	00800034 	movhi	r2,0
2008ba20:	bdca7204 	addi	r23,r23,10696
2008ba24:	108a9304 	addi	r2,r2,10828
2008ba28:	15400017 	ldw	r21,0(r2)
2008ba2c:	b9000017 	ldw	r4,0(r23)
2008ba30:	00ffffc4 	movi	r3,-1
2008ba34:	858d883a 	add	r6,r16,r22
2008ba38:	8d6b883a 	add	r21,r17,r21
2008ba3c:	20c0e426 	beq	r4,r3,2008bdd0 <_malloc_r+0x6dc>
2008ba40:	ad4403c4 	addi	r21,r21,4111
2008ba44:	00fc0004 	movi	r3,-4096
2008ba48:	a8ea703a 	and	r21,r21,r3
2008ba4c:	9009883a 	mov	r4,r18
2008ba50:	a80b883a 	mov	r5,r21
2008ba54:	d9800015 	stw	r6,0(sp)
2008ba58:	008c2b80 	call	2008c2b8 <_sbrk_r>
2008ba5c:	00ffffc4 	movi	r3,-1
2008ba60:	1029883a 	mov	r20,r2
2008ba64:	d9800017 	ldw	r6,0(sp)
2008ba68:	10c0a426 	beq	r2,r3,2008bcfc <_malloc_r+0x608>
2008ba6c:	1180a236 	bltu	r2,r6,2008bcf8 <_malloc_r+0x604>
2008ba70:	07000034 	movhi	fp,0
2008ba74:	e70c0104 	addi	fp,fp,12292
2008ba78:	e0c00017 	ldw	r3,0(fp)
2008ba7c:	a8c7883a 	add	r3,r21,r3
2008ba80:	e0c00015 	stw	r3,0(fp)
2008ba84:	3500da26 	beq	r6,r20,2008bdf0 <_malloc_r+0x6fc>
2008ba88:	b9000017 	ldw	r4,0(r23)
2008ba8c:	00bfffc4 	movi	r2,-1
2008ba90:	2080e426 	beq	r4,r2,2008be24 <_malloc_r+0x730>
2008ba94:	a185c83a 	sub	r2,r20,r6
2008ba98:	1885883a 	add	r2,r3,r2
2008ba9c:	e0800015 	stw	r2,0(fp)
2008baa0:	a0c001cc 	andi	r3,r20,7
2008baa4:	1800b526 	beq	r3,zero,2008bd7c <_malloc_r+0x688>
2008baa8:	a0e9c83a 	sub	r20,r20,r3
2008baac:	00840204 	movi	r2,4104
2008bab0:	a5000204 	addi	r20,r20,8
2008bab4:	10c7c83a 	sub	r3,r2,r3
2008bab8:	a545883a 	add	r2,r20,r21
2008babc:	1083ffcc 	andi	r2,r2,4095
2008bac0:	18abc83a 	sub	r21,r3,r2
2008bac4:	9009883a 	mov	r4,r18
2008bac8:	a80b883a 	mov	r5,r21
2008bacc:	008c2b80 	call	2008c2b8 <_sbrk_r>
2008bad0:	00ffffc4 	movi	r3,-1
2008bad4:	10c0d026 	beq	r2,r3,2008be18 <_malloc_r+0x724>
2008bad8:	1507c83a 	sub	r3,r2,r20
2008badc:	a8c7883a 	add	r3,r21,r3
2008bae0:	18c00054 	ori	r3,r3,1
2008bae4:	e0800017 	ldw	r2,0(fp)
2008bae8:	9d000215 	stw	r20,8(r19)
2008baec:	a0c00115 	stw	r3,4(r20)
2008baf0:	a887883a 	add	r3,r21,r2
2008baf4:	e0c00015 	stw	r3,0(fp)
2008baf8:	84c00e26 	beq	r16,r19,2008bb34 <_malloc_r+0x440>
2008bafc:	018003c4 	movi	r6,15
2008bb00:	3580a02e 	bgeu	r6,r22,2008bd84 <_malloc_r+0x690>
2008bb04:	81400117 	ldw	r5,4(r16)
2008bb08:	013ffe04 	movi	r4,-8
2008bb0c:	b0bffd04 	addi	r2,r22,-12
2008bb10:	1104703a 	and	r2,r2,r4
2008bb14:	2900004c 	andi	r4,r5,1
2008bb18:	1108b03a 	or	r4,r2,r4
2008bb1c:	81000115 	stw	r4,4(r16)
2008bb20:	01400144 	movi	r5,5
2008bb24:	8089883a 	add	r4,r16,r2
2008bb28:	21400115 	stw	r5,4(r4)
2008bb2c:	21400215 	stw	r5,8(r4)
2008bb30:	3080c036 	bltu	r6,r2,2008be34 <_malloc_r+0x740>
2008bb34:	00800034 	movhi	r2,0
2008bb38:	108a9204 	addi	r2,r2,10824
2008bb3c:	11000017 	ldw	r4,0(r2)
2008bb40:	20c0012e 	bgeu	r4,r3,2008bb48 <_malloc_r+0x454>
2008bb44:	10c00015 	stw	r3,0(r2)
2008bb48:	00800034 	movhi	r2,0
2008bb4c:	108a9104 	addi	r2,r2,10820
2008bb50:	11000017 	ldw	r4,0(r2)
2008bb54:	9c000217 	ldw	r16,8(r19)
2008bb58:	20c0012e 	bgeu	r4,r3,2008bb60 <_malloc_r+0x46c>
2008bb5c:	10c00015 	stw	r3,0(r2)
2008bb60:	80c00117 	ldw	r3,4(r16)
2008bb64:	00bfff04 	movi	r2,-4
2008bb68:	1886703a 	and	r3,r3,r2
2008bb6c:	1c45c83a 	sub	r2,r3,r17
2008bb70:	1c400236 	bltu	r3,r17,2008bb7c <_malloc_r+0x488>
2008bb74:	00c003c4 	movi	r3,15
2008bb78:	18800416 	blt	r3,r2,2008bb8c <_malloc_r+0x498>
2008bb7c:	9009883a 	mov	r4,r18
2008bb80:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008bb84:	0005883a 	mov	r2,zero
2008bb88:	003f0706 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008bb8c:	88c00054 	ori	r3,r17,1
2008bb90:	80c00115 	stw	r3,4(r16)
2008bb94:	8463883a 	add	r17,r16,r17
2008bb98:	10800054 	ori	r2,r2,1
2008bb9c:	9c400215 	stw	r17,8(r19)
2008bba0:	88800115 	stw	r2,4(r17)
2008bba4:	9009883a 	mov	r4,r18
2008bba8:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008bbac:	80800204 	addi	r2,r16,8
2008bbb0:	003efd06 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008bbb4:	00800504 	movi	r2,20
2008bbb8:	10c0482e 	bgeu	r2,r3,2008bcdc <_malloc_r+0x5e8>
2008bbbc:	00801504 	movi	r2,84
2008bbc0:	10c06836 	bltu	r2,r3,2008bd64 <_malloc_r+0x670>
2008bbc4:	8806d33a 	srli	r3,r17,12
2008bbc8:	19c01b84 	addi	r7,r3,110
2008bbcc:	39cb883a 	add	r5,r7,r7
2008bbd0:	003f0c06 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008bbd4:	3804d27a 	srli	r2,r7,9
2008bbd8:	01000104 	movi	r4,4
2008bbdc:	2080422e 	bgeu	r4,r2,2008bce8 <_malloc_r+0x5f4>
2008bbe0:	01000504 	movi	r4,20
2008bbe4:	20807c36 	bltu	r4,r2,2008bdd8 <_malloc_r+0x6e4>
2008bbe8:	110016c4 	addi	r4,r2,91
2008bbec:	210b883a 	add	r5,r4,r4
2008bbf0:	294b883a 	add	r5,r5,r5
2008bbf4:	294b883a 	add	r5,r5,r5
2008bbf8:	994b883a 	add	r5,r19,r5
2008bbfc:	28800217 	ldw	r2,8(r5)
2008bc00:	02000034 	movhi	r8,0
2008bc04:	42048304 	addi	r8,r8,4620
2008bc08:	11406326 	beq	r2,r5,2008bd98 <_malloc_r+0x6a4>
2008bc0c:	01bfff04 	movi	r6,-4
2008bc10:	11000117 	ldw	r4,4(r2)
2008bc14:	2188703a 	and	r4,r4,r6
2008bc18:	3900022e 	bgeu	r7,r4,2008bc24 <_malloc_r+0x530>
2008bc1c:	10800217 	ldw	r2,8(r2)
2008bc20:	28bffb1e 	bne	r5,r2,2008bc10 <__flash_rwdata_start+0xfffece24>
2008bc24:	11800317 	ldw	r6,12(r2)
2008bc28:	99000117 	ldw	r4,4(r19)
2008bc2c:	81800315 	stw	r6,12(r16)
2008bc30:	80800215 	stw	r2,8(r16)
2008bc34:	34000215 	stw	r16,8(r6)
2008bc38:	14000315 	stw	r16,12(r2)
2008bc3c:	003f2706 	br	2008b8dc <__flash_rwdata_start+0xfffecaf0>
2008bc40:	88c00054 	ori	r3,r17,1
2008bc44:	80c00115 	stw	r3,4(r16)
2008bc48:	8463883a 	add	r17,r16,r17
2008bc4c:	34400515 	stw	r17,20(r6)
2008bc50:	34400415 	stw	r17,16(r6)
2008bc54:	10c00054 	ori	r3,r2,1
2008bc58:	8a400315 	stw	r9,12(r17)
2008bc5c:	8a400215 	stw	r9,8(r17)
2008bc60:	88c00115 	stw	r3,4(r17)
2008bc64:	88a3883a 	add	r17,r17,r2
2008bc68:	88800015 	stw	r2,0(r17)
2008bc6c:	9009883a 	mov	r4,r18
2008bc70:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008bc74:	80800204 	addi	r2,r16,8
2008bc78:	003ecb06 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008bc7c:	31000117 	ldw	r4,4(r6)
2008bc80:	003f1606 	br	2008b8dc <__flash_rwdata_start+0xfffecaf0>
2008bc84:	63000044 	addi	r12,r12,1
2008bc88:	608000cc 	andi	r2,r12,3
2008bc8c:	5ac00204 	addi	r11,r11,8
2008bc90:	103f2a1e 	bne	r2,zero,2008b93c <__flash_rwdata_start+0xfffecb50>
2008bc94:	00002106 	br	2008bd1c <_malloc_r+0x628>
2008bc98:	80800204 	addi	r2,r16,8
2008bc9c:	84000517 	ldw	r16,20(r16)
2008bca0:	143eb31e 	bne	r2,r16,2008b770 <__flash_rwdata_start+0xfffec984>
2008bca4:	18c00084 	addi	r3,r3,2
2008bca8:	003eec06 	br	2008b85c <__flash_rwdata_start+0xfffeca70>
2008bcac:	8085883a 	add	r2,r16,r2
2008bcb0:	10c00117 	ldw	r3,4(r2)
2008bcb4:	81000317 	ldw	r4,12(r16)
2008bcb8:	81400217 	ldw	r5,8(r16)
2008bcbc:	18c00054 	ori	r3,r3,1
2008bcc0:	10c00115 	stw	r3,4(r2)
2008bcc4:	29000315 	stw	r4,12(r5)
2008bcc8:	21400215 	stw	r5,8(r4)
2008bccc:	9009883a 	mov	r4,r18
2008bcd0:	0099e5c0 	call	20099e5c <__malloc_unlock>
2008bcd4:	80800204 	addi	r2,r16,8
2008bcd8:	003eb306 	br	2008b7a8 <__flash_rwdata_start+0xfffec9bc>
2008bcdc:	19c016c4 	addi	r7,r3,91
2008bce0:	39cb883a 	add	r5,r7,r7
2008bce4:	003ec706 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008bce8:	3804d1ba 	srli	r2,r7,6
2008bcec:	11000e04 	addi	r4,r2,56
2008bcf0:	210b883a 	add	r5,r4,r4
2008bcf4:	003fbe06 	br	2008bbf0 <__flash_rwdata_start+0xfffece04>
2008bcf8:	84ff5d26 	beq	r16,r19,2008ba70 <__flash_rwdata_start+0xfffecc84>
2008bcfc:	9c000217 	ldw	r16,8(r19)
2008bd00:	00bfff04 	movi	r2,-4
2008bd04:	80c00117 	ldw	r3,4(r16)
2008bd08:	1886703a 	and	r3,r3,r2
2008bd0c:	003f9706 	br	2008bb6c <__flash_rwdata_start+0xfffecd80>
2008bd10:	52800017 	ldw	r10,0(r10)
2008bd14:	18ffffc4 	addi	r3,r3,-1
2008bd18:	50805c1e 	bne	r10,r2,2008be8c <_malloc_r+0x798>
2008bd1c:	190000cc 	andi	r4,r3,3
2008bd20:	50bffe04 	addi	r2,r10,-8
2008bd24:	203ffa1e 	bne	r4,zero,2008bd10 <__flash_rwdata_start+0xfffecf24>
2008bd28:	98800117 	ldw	r2,4(r19)
2008bd2c:	0146303a 	nor	r3,zero,r5
2008bd30:	1884703a 	and	r2,r3,r2
2008bd34:	98800115 	stw	r2,4(r19)
2008bd38:	294b883a 	add	r5,r5,r5
2008bd3c:	117f2e36 	bltu	r2,r5,2008b9f8 <__flash_rwdata_start+0xfffecc0c>
2008bd40:	283f2d26 	beq	r5,zero,2008b9f8 <__flash_rwdata_start+0xfffecc0c>
2008bd44:	1146703a 	and	r3,r2,r5
2008bd48:	1800521e 	bne	r3,zero,2008be94 <_malloc_r+0x7a0>
2008bd4c:	6007883a 	mov	r3,r12
2008bd50:	294b883a 	add	r5,r5,r5
2008bd54:	1148703a 	and	r4,r2,r5
2008bd58:	18c00104 	addi	r3,r3,4
2008bd5c:	203ffc26 	beq	r4,zero,2008bd50 <__flash_rwdata_start+0xfffecf64>
2008bd60:	003ef006 	br	2008b924 <__flash_rwdata_start+0xfffecb38>
2008bd64:	00805504 	movi	r2,340
2008bd68:	10c01336 	bltu	r2,r3,2008bdb8 <_malloc_r+0x6c4>
2008bd6c:	8806d3fa 	srli	r3,r17,15
2008bd70:	19c01dc4 	addi	r7,r3,119
2008bd74:	39cb883a 	add	r5,r7,r7
2008bd78:	003ea206 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008bd7c:	00c40004 	movi	r3,4096
2008bd80:	003f4d06 	br	2008bab8 <__flash_rwdata_start+0xfffecccc>
2008bd84:	00800044 	movi	r2,1
2008bd88:	a0800115 	stw	r2,4(r20)
2008bd8c:	a021883a 	mov	r16,r20
2008bd90:	0007883a 	mov	r3,zero
2008bd94:	003f7506 	br	2008bb6c <__flash_rwdata_start+0xfffecd80>
2008bd98:	200bd0ba 	srai	r5,r4,2
2008bd9c:	01800044 	movi	r6,1
2008bda0:	41000117 	ldw	r4,4(r8)
2008bda4:	314a983a 	sll	r5,r6,r5
2008bda8:	100d883a 	mov	r6,r2
2008bdac:	2908b03a 	or	r4,r5,r4
2008bdb0:	41000115 	stw	r4,4(r8)
2008bdb4:	003f9d06 	br	2008bc2c <__flash_rwdata_start+0xfffece40>
2008bdb8:	00815504 	movi	r2,1364
2008bdbc:	10c01336 	bltu	r2,r3,2008be0c <_malloc_r+0x718>
2008bdc0:	8806d4ba 	srli	r3,r17,18
2008bdc4:	19c01f04 	addi	r7,r3,124
2008bdc8:	39cb883a 	add	r5,r7,r7
2008bdcc:	003e8d06 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008bdd0:	ad400404 	addi	r21,r21,16
2008bdd4:	003f1d06 	br	2008ba4c <__flash_rwdata_start+0xfffecc60>
2008bdd8:	01001504 	movi	r4,84
2008bddc:	20801c36 	bltu	r4,r2,2008be50 <_malloc_r+0x75c>
2008bde0:	3804d33a 	srli	r2,r7,12
2008bde4:	11001b84 	addi	r4,r2,110
2008bde8:	210b883a 	add	r5,r4,r4
2008bdec:	003f8006 	br	2008bbf0 <__flash_rwdata_start+0xfffece04>
2008bdf0:	3083ffcc 	andi	r2,r6,4095
2008bdf4:	103f241e 	bne	r2,zero,2008ba88 <__flash_rwdata_start+0xfffecc9c>
2008bdf8:	99000217 	ldw	r4,8(r19)
2008bdfc:	ad85883a 	add	r2,r21,r22
2008be00:	10800054 	ori	r2,r2,1
2008be04:	20800115 	stw	r2,4(r4)
2008be08:	003f4a06 	br	2008bb34 <__flash_rwdata_start+0xfffecd48>
2008be0c:	01403f04 	movi	r5,252
2008be10:	01c01f84 	movi	r7,126
2008be14:	003e7b06 	br	2008b804 <__flash_rwdata_start+0xfffeca18>
2008be18:	00c00044 	movi	r3,1
2008be1c:	002b883a 	mov	r21,zero
2008be20:	003f3006 	br	2008bae4 <__flash_rwdata_start+0xfffeccf8>
2008be24:	00800034 	movhi	r2,0
2008be28:	108a7204 	addi	r2,r2,10696
2008be2c:	15000015 	stw	r20,0(r2)
2008be30:	003f1b06 	br	2008baa0 <__flash_rwdata_start+0xfffeccb4>
2008be34:	9009883a 	mov	r4,r18
2008be38:	81400204 	addi	r5,r16,8
2008be3c:	00929cc0 	call	200929cc <_free_r>
2008be40:	00800034 	movhi	r2,0
2008be44:	108c0104 	addi	r2,r2,12292
2008be48:	10c00017 	ldw	r3,0(r2)
2008be4c:	003f3906 	br	2008bb34 <__flash_rwdata_start+0xfffecd48>
2008be50:	01005504 	movi	r4,340
2008be54:	20800436 	bltu	r4,r2,2008be68 <_malloc_r+0x774>
2008be58:	3804d3fa 	srli	r2,r7,15
2008be5c:	11001dc4 	addi	r4,r2,119
2008be60:	210b883a 	add	r5,r4,r4
2008be64:	003f6206 	br	2008bbf0 <__flash_rwdata_start+0xfffece04>
2008be68:	01015504 	movi	r4,1364
2008be6c:	20800436 	bltu	r4,r2,2008be80 <_malloc_r+0x78c>
2008be70:	3804d4ba 	srli	r2,r7,18
2008be74:	11001f04 	addi	r4,r2,124
2008be78:	210b883a 	add	r5,r4,r4
2008be7c:	003f5c06 	br	2008bbf0 <__flash_rwdata_start+0xfffece04>
2008be80:	01403f04 	movi	r5,252
2008be84:	01001f84 	movi	r4,126
2008be88:	003f5906 	br	2008bbf0 <__flash_rwdata_start+0xfffece04>
2008be8c:	98800117 	ldw	r2,4(r19)
2008be90:	003fa906 	br	2008bd38 <__flash_rwdata_start+0xfffecf4c>
2008be94:	6007883a 	mov	r3,r12
2008be98:	003ea206 	br	2008b924 <__flash_rwdata_start+0xfffecb38>

2008be9c <memcmp>:
2008be9c:	01c000c4 	movi	r7,3
2008bea0:	3980192e 	bgeu	r7,r6,2008bf08 <memcmp+0x6c>
2008bea4:	2144b03a 	or	r2,r4,r5
2008bea8:	11c4703a 	and	r2,r2,r7
2008beac:	10000f26 	beq	r2,zero,2008beec <memcmp+0x50>
2008beb0:	20800003 	ldbu	r2,0(r4)
2008beb4:	28c00003 	ldbu	r3,0(r5)
2008beb8:	10c0151e 	bne	r2,r3,2008bf10 <memcmp+0x74>
2008bebc:	31bfff84 	addi	r6,r6,-2
2008bec0:	01ffffc4 	movi	r7,-1
2008bec4:	00000406 	br	2008bed8 <memcmp+0x3c>
2008bec8:	20800003 	ldbu	r2,0(r4)
2008becc:	28c00003 	ldbu	r3,0(r5)
2008bed0:	31bfffc4 	addi	r6,r6,-1
2008bed4:	10c00e1e 	bne	r2,r3,2008bf10 <memcmp+0x74>
2008bed8:	21000044 	addi	r4,r4,1
2008bedc:	29400044 	addi	r5,r5,1
2008bee0:	31fff91e 	bne	r6,r7,2008bec8 <__flash_rwdata_start+0xfffed0dc>
2008bee4:	0005883a 	mov	r2,zero
2008bee8:	f800283a 	ret
2008beec:	20c00017 	ldw	r3,0(r4)
2008bef0:	28800017 	ldw	r2,0(r5)
2008bef4:	1880041e 	bne	r3,r2,2008bf08 <memcmp+0x6c>
2008bef8:	31bfff04 	addi	r6,r6,-4
2008befc:	21000104 	addi	r4,r4,4
2008bf00:	29400104 	addi	r5,r5,4
2008bf04:	39bff936 	bltu	r7,r6,2008beec <__flash_rwdata_start+0xfffed100>
2008bf08:	303fe91e 	bne	r6,zero,2008beb0 <__flash_rwdata_start+0xfffed0c4>
2008bf0c:	003ff506 	br	2008bee4 <__flash_rwdata_start+0xfffed0f8>
2008bf10:	10c5c83a 	sub	r2,r2,r3
2008bf14:	f800283a 	ret

2008bf18 <memcpy>:
2008bf18:	deffff04 	addi	sp,sp,-4
2008bf1c:	dc000015 	stw	r16,0(sp)
2008bf20:	00c003c4 	movi	r3,15
2008bf24:	2005883a 	mov	r2,r4
2008bf28:	1980432e 	bgeu	r3,r6,2008c038 <memcpy+0x120>
2008bf2c:	2146b03a 	or	r3,r4,r5
2008bf30:	18c000cc 	andi	r3,r3,3
2008bf34:	1800421e 	bne	r3,zero,2008c040 <memcpy+0x128>
2008bf38:	343ffc04 	addi	r16,r6,-16
2008bf3c:	8020d13a 	srli	r16,r16,4
2008bf40:	28c00104 	addi	r3,r5,4
2008bf44:	23400104 	addi	r13,r4,4
2008bf48:	801e913a 	slli	r15,r16,4
2008bf4c:	2b000204 	addi	r12,r5,8
2008bf50:	22c00204 	addi	r11,r4,8
2008bf54:	7bc00504 	addi	r15,r15,20
2008bf58:	2a800304 	addi	r10,r5,12
2008bf5c:	22400304 	addi	r9,r4,12
2008bf60:	2bdf883a 	add	r15,r5,r15
2008bf64:	2811883a 	mov	r8,r5
2008bf68:	200f883a 	mov	r7,r4
2008bf6c:	41000017 	ldw	r4,0(r8)
2008bf70:	39c00404 	addi	r7,r7,16
2008bf74:	18c00404 	addi	r3,r3,16
2008bf78:	393ffc15 	stw	r4,-16(r7)
2008bf7c:	1bbffc17 	ldw	r14,-16(r3)
2008bf80:	6b400404 	addi	r13,r13,16
2008bf84:	5ac00404 	addi	r11,r11,16
2008bf88:	6bbffc15 	stw	r14,-16(r13)
2008bf8c:	63800017 	ldw	r14,0(r12)
2008bf90:	4a400404 	addi	r9,r9,16
2008bf94:	42000404 	addi	r8,r8,16
2008bf98:	5bbffc15 	stw	r14,-16(r11)
2008bf9c:	53800017 	ldw	r14,0(r10)
2008bfa0:	63000404 	addi	r12,r12,16
2008bfa4:	52800404 	addi	r10,r10,16
2008bfa8:	4bbffc15 	stw	r14,-16(r9)
2008bfac:	1bffef1e 	bne	r3,r15,2008bf6c <__flash_rwdata_start+0xfffed180>
2008bfb0:	81c00044 	addi	r7,r16,1
2008bfb4:	380e913a 	slli	r7,r7,4
2008bfb8:	310003cc 	andi	r4,r6,15
2008bfbc:	02c000c4 	movi	r11,3
2008bfc0:	11c7883a 	add	r3,r2,r7
2008bfc4:	29cb883a 	add	r5,r5,r7
2008bfc8:	59001f2e 	bgeu	r11,r4,2008c048 <memcpy+0x130>
2008bfcc:	1813883a 	mov	r9,r3
2008bfd0:	2811883a 	mov	r8,r5
2008bfd4:	200f883a 	mov	r7,r4
2008bfd8:	42800017 	ldw	r10,0(r8)
2008bfdc:	4a400104 	addi	r9,r9,4
2008bfe0:	39ffff04 	addi	r7,r7,-4
2008bfe4:	4abfff15 	stw	r10,-4(r9)
2008bfe8:	42000104 	addi	r8,r8,4
2008bfec:	59fffa36 	bltu	r11,r7,2008bfd8 <__flash_rwdata_start+0xfffed1ec>
2008bff0:	213fff04 	addi	r4,r4,-4
2008bff4:	2008d0ba 	srli	r4,r4,2
2008bff8:	318000cc 	andi	r6,r6,3
2008bffc:	21000044 	addi	r4,r4,1
2008c000:	2109883a 	add	r4,r4,r4
2008c004:	2109883a 	add	r4,r4,r4
2008c008:	1907883a 	add	r3,r3,r4
2008c00c:	290b883a 	add	r5,r5,r4
2008c010:	30000626 	beq	r6,zero,2008c02c <memcpy+0x114>
2008c014:	198d883a 	add	r6,r3,r6
2008c018:	29c00003 	ldbu	r7,0(r5)
2008c01c:	18c00044 	addi	r3,r3,1
2008c020:	29400044 	addi	r5,r5,1
2008c024:	19ffffc5 	stb	r7,-1(r3)
2008c028:	19bffb1e 	bne	r3,r6,2008c018 <__flash_rwdata_start+0xfffed22c>
2008c02c:	dc000017 	ldw	r16,0(sp)
2008c030:	dec00104 	addi	sp,sp,4
2008c034:	f800283a 	ret
2008c038:	2007883a 	mov	r3,r4
2008c03c:	003ff406 	br	2008c010 <__flash_rwdata_start+0xfffed224>
2008c040:	2007883a 	mov	r3,r4
2008c044:	003ff306 	br	2008c014 <__flash_rwdata_start+0xfffed228>
2008c048:	200d883a 	mov	r6,r4
2008c04c:	003ff006 	br	2008c010 <__flash_rwdata_start+0xfffed224>

2008c050 <memset>:
2008c050:	20c000cc 	andi	r3,r4,3
2008c054:	2005883a 	mov	r2,r4
2008c058:	18004326 	beq	r3,zero,2008c168 <memset+0x118>
2008c05c:	31ffffc4 	addi	r7,r6,-1
2008c060:	30004026 	beq	r6,zero,2008c164 <memset+0x114>
2008c064:	2813883a 	mov	r9,r5
2008c068:	200d883a 	mov	r6,r4
2008c06c:	2007883a 	mov	r3,r4
2008c070:	00000406 	br	2008c084 <memset+0x34>
2008c074:	3a3fffc4 	addi	r8,r7,-1
2008c078:	31800044 	addi	r6,r6,1
2008c07c:	38003926 	beq	r7,zero,2008c164 <memset+0x114>
2008c080:	400f883a 	mov	r7,r8
2008c084:	18c00044 	addi	r3,r3,1
2008c088:	32400005 	stb	r9,0(r6)
2008c08c:	1a0000cc 	andi	r8,r3,3
2008c090:	403ff81e 	bne	r8,zero,2008c074 <__flash_rwdata_start+0xfffed288>
2008c094:	010000c4 	movi	r4,3
2008c098:	21c02d2e 	bgeu	r4,r7,2008c150 <memset+0x100>
2008c09c:	29803fcc 	andi	r6,r5,255
2008c0a0:	3008923a 	slli	r4,r6,8
2008c0a4:	218cb03a 	or	r6,r4,r6
2008c0a8:	3008943a 	slli	r4,r6,16
2008c0ac:	218cb03a 	or	r6,r4,r6
2008c0b0:	010003c4 	movi	r4,15
2008c0b4:	21c0182e 	bgeu	r4,r7,2008c118 <memset+0xc8>
2008c0b8:	3b3ffc04 	addi	r12,r7,-16
2008c0bc:	6018d13a 	srli	r12,r12,4
2008c0c0:	1a000104 	addi	r8,r3,4
2008c0c4:	1ac00204 	addi	r11,r3,8
2008c0c8:	6008913a 	slli	r4,r12,4
2008c0cc:	1a800304 	addi	r10,r3,12
2008c0d0:	1813883a 	mov	r9,r3
2008c0d4:	21000504 	addi	r4,r4,20
2008c0d8:	1909883a 	add	r4,r3,r4
2008c0dc:	49800015 	stw	r6,0(r9)
2008c0e0:	41800015 	stw	r6,0(r8)
2008c0e4:	59800015 	stw	r6,0(r11)
2008c0e8:	51800015 	stw	r6,0(r10)
2008c0ec:	42000404 	addi	r8,r8,16
2008c0f0:	4a400404 	addi	r9,r9,16
2008c0f4:	5ac00404 	addi	r11,r11,16
2008c0f8:	52800404 	addi	r10,r10,16
2008c0fc:	413ff71e 	bne	r8,r4,2008c0dc <__flash_rwdata_start+0xfffed2f0>
2008c100:	63000044 	addi	r12,r12,1
2008c104:	6018913a 	slli	r12,r12,4
2008c108:	39c003cc 	andi	r7,r7,15
2008c10c:	010000c4 	movi	r4,3
2008c110:	1b07883a 	add	r3,r3,r12
2008c114:	21c00e2e 	bgeu	r4,r7,2008c150 <memset+0x100>
2008c118:	1813883a 	mov	r9,r3
2008c11c:	3811883a 	mov	r8,r7
2008c120:	010000c4 	movi	r4,3
2008c124:	49800015 	stw	r6,0(r9)
2008c128:	423fff04 	addi	r8,r8,-4
2008c12c:	4a400104 	addi	r9,r9,4
2008c130:	223ffc36 	bltu	r4,r8,2008c124 <__flash_rwdata_start+0xfffed338>
2008c134:	393fff04 	addi	r4,r7,-4
2008c138:	2008d0ba 	srli	r4,r4,2
2008c13c:	39c000cc 	andi	r7,r7,3
2008c140:	21000044 	addi	r4,r4,1
2008c144:	2109883a 	add	r4,r4,r4
2008c148:	2109883a 	add	r4,r4,r4
2008c14c:	1907883a 	add	r3,r3,r4
2008c150:	38000426 	beq	r7,zero,2008c164 <memset+0x114>
2008c154:	19cf883a 	add	r7,r3,r7
2008c158:	19400005 	stb	r5,0(r3)
2008c15c:	18c00044 	addi	r3,r3,1
2008c160:	19fffd1e 	bne	r3,r7,2008c158 <__flash_rwdata_start+0xfffed36c>
2008c164:	f800283a 	ret
2008c168:	2007883a 	mov	r3,r4
2008c16c:	300f883a 	mov	r7,r6
2008c170:	003fc806 	br	2008c094 <__flash_rwdata_start+0xfffed2a8>

2008c174 <_printf_r>:
2008c174:	defffd04 	addi	sp,sp,-12
2008c178:	dfc00015 	stw	ra,0(sp)
2008c17c:	d9800115 	stw	r6,4(sp)
2008c180:	d9c00215 	stw	r7,8(sp)
2008c184:	280d883a 	mov	r6,r5
2008c188:	21400217 	ldw	r5,8(r4)
2008c18c:	d9c00104 	addi	r7,sp,4
2008c190:	008e5040 	call	2008e504 <___vfprintf_internal_r>
2008c194:	dfc00017 	ldw	ra,0(sp)
2008c198:	dec00304 	addi	sp,sp,12
2008c19c:	f800283a 	ret

2008c1a0 <printf>:
2008c1a0:	defffc04 	addi	sp,sp,-16
2008c1a4:	dfc00015 	stw	ra,0(sp)
2008c1a8:	d9400115 	stw	r5,4(sp)
2008c1ac:	d9800215 	stw	r6,8(sp)
2008c1b0:	d9c00315 	stw	r7,12(sp)
2008c1b4:	00800034 	movhi	r2,0
2008c1b8:	108a7104 	addi	r2,r2,10692
2008c1bc:	10800017 	ldw	r2,0(r2)
2008c1c0:	200b883a 	mov	r5,r4
2008c1c4:	d9800104 	addi	r6,sp,4
2008c1c8:	11000217 	ldw	r4,8(r2)
2008c1cc:	00904540 	call	20090454 <__vfprintf_internal>
2008c1d0:	dfc00017 	ldw	ra,0(sp)
2008c1d4:	dec00404 	addi	sp,sp,16
2008c1d8:	f800283a 	ret

2008c1dc <_putchar_r>:
2008c1dc:	21800217 	ldw	r6,8(r4)
2008c1e0:	00947801 	jmpi	20094780 <_putc_r>

2008c1e4 <putchar>:
2008c1e4:	00800034 	movhi	r2,0
2008c1e8:	108a7104 	addi	r2,r2,10692
2008c1ec:	200b883a 	mov	r5,r4
2008c1f0:	11000017 	ldw	r4,0(r2)
2008c1f4:	21800217 	ldw	r6,8(r4)
2008c1f8:	00947801 	jmpi	20094780 <_putc_r>

2008c1fc <_puts_r>:
2008c1fc:	defff604 	addi	sp,sp,-40
2008c200:	dc000715 	stw	r16,28(sp)
2008c204:	2021883a 	mov	r16,r4
2008c208:	2809883a 	mov	r4,r5
2008c20c:	dc400815 	stw	r17,32(sp)
2008c210:	dfc00915 	stw	ra,36(sp)
2008c214:	2823883a 	mov	r17,r5
2008c218:	008c4740 	call	2008c474 <strlen>
2008c21c:	81400217 	ldw	r5,8(r16)
2008c220:	11000044 	addi	r4,r2,1
2008c224:	d8800115 	stw	r2,4(sp)
2008c228:	00800034 	movhi	r2,0
2008c22c:	2980030b 	ldhu	r6,12(r5)
2008c230:	1081db04 	addi	r2,r2,1900
2008c234:	d8800215 	stw	r2,8(sp)
2008c238:	00800044 	movi	r2,1
2008c23c:	d8800315 	stw	r2,12(sp)
2008c240:	00800084 	movi	r2,2
2008c244:	d8800515 	stw	r2,20(sp)
2008c248:	dc400015 	stw	r17,0(sp)
2008c24c:	d9000615 	stw	r4,24(sp)
2008c250:	dec00415 	stw	sp,16(sp)
2008c254:	3088000c 	andi	r2,r6,8192
2008c258:	1000061e 	bne	r2,zero,2008c274 <_puts_r+0x78>
2008c25c:	29001917 	ldw	r4,100(r5)
2008c260:	00b7ffc4 	movi	r2,-8193
2008c264:	31880014 	ori	r6,r6,8192
2008c268:	2084703a 	and	r2,r4,r2
2008c26c:	2980030d 	sth	r6,12(r5)
2008c270:	28801915 	stw	r2,100(r5)
2008c274:	8009883a 	mov	r4,r16
2008c278:	d9800404 	addi	r6,sp,16
2008c27c:	0092cbc0 	call	20092cbc <__sfvwrite_r>
2008c280:	1000061e 	bne	r2,zero,2008c29c <_puts_r+0xa0>
2008c284:	00800284 	movi	r2,10
2008c288:	dfc00917 	ldw	ra,36(sp)
2008c28c:	dc400817 	ldw	r17,32(sp)
2008c290:	dc000717 	ldw	r16,28(sp)
2008c294:	dec00a04 	addi	sp,sp,40
2008c298:	f800283a 	ret
2008c29c:	00bfffc4 	movi	r2,-1
2008c2a0:	003ff906 	br	2008c288 <__flash_rwdata_start+0xfffed49c>

2008c2a4 <puts>:
2008c2a4:	00800034 	movhi	r2,0
2008c2a8:	108a7104 	addi	r2,r2,10692
2008c2ac:	200b883a 	mov	r5,r4
2008c2b0:	11000017 	ldw	r4,0(r2)
2008c2b4:	008c1fc1 	jmpi	2008c1fc <_puts_r>

2008c2b8 <_sbrk_r>:
2008c2b8:	defffd04 	addi	sp,sp,-12
2008c2bc:	dc000015 	stw	r16,0(sp)
2008c2c0:	04000034 	movhi	r16,0
2008c2c4:	dc400115 	stw	r17,4(sp)
2008c2c8:	840a9404 	addi	r16,r16,10832
2008c2cc:	2023883a 	mov	r17,r4
2008c2d0:	2809883a 	mov	r4,r5
2008c2d4:	dfc00215 	stw	ra,8(sp)
2008c2d8:	80000015 	stw	zero,0(r16)
2008c2dc:	009a0280 	call	2009a028 <sbrk>
2008c2e0:	00ffffc4 	movi	r3,-1
2008c2e4:	10c00526 	beq	r2,r3,2008c2fc <_sbrk_r+0x44>
2008c2e8:	dfc00217 	ldw	ra,8(sp)
2008c2ec:	dc400117 	ldw	r17,4(sp)
2008c2f0:	dc000017 	ldw	r16,0(sp)
2008c2f4:	dec00304 	addi	sp,sp,12
2008c2f8:	f800283a 	ret
2008c2fc:	80c00017 	ldw	r3,0(r16)
2008c300:	183ff926 	beq	r3,zero,2008c2e8 <__flash_rwdata_start+0xfffed4fc>
2008c304:	88c00015 	stw	r3,0(r17)
2008c308:	003ff706 	br	2008c2e8 <__flash_rwdata_start+0xfffed4fc>

2008c30c <_sprintf_r>:
2008c30c:	deffe404 	addi	sp,sp,-112
2008c310:	2807883a 	mov	r3,r5
2008c314:	dfc01a15 	stw	ra,104(sp)
2008c318:	d9c01b15 	stw	r7,108(sp)
2008c31c:	00a00034 	movhi	r2,32768
2008c320:	10bfffc4 	addi	r2,r2,-1
2008c324:	02008204 	movi	r8,520
2008c328:	d8800215 	stw	r2,8(sp)
2008c32c:	d8800515 	stw	r2,20(sp)
2008c330:	d80b883a 	mov	r5,sp
2008c334:	d9c01b04 	addi	r7,sp,108
2008c338:	00bfffc4 	movi	r2,-1
2008c33c:	d8c00015 	stw	r3,0(sp)
2008c340:	d8c00415 	stw	r3,16(sp)
2008c344:	da00030d 	sth	r8,12(sp)
2008c348:	d880038d 	sth	r2,14(sp)
2008c34c:	008c5740 	call	2008c574 <___svfprintf_internal_r>
2008c350:	d8c00017 	ldw	r3,0(sp)
2008c354:	18000005 	stb	zero,0(r3)
2008c358:	dfc01a17 	ldw	ra,104(sp)
2008c35c:	dec01c04 	addi	sp,sp,112
2008c360:	f800283a 	ret

2008c364 <sprintf>:
2008c364:	deffe304 	addi	sp,sp,-116
2008c368:	2007883a 	mov	r3,r4
2008c36c:	dfc01a15 	stw	ra,104(sp)
2008c370:	d9801b15 	stw	r6,108(sp)
2008c374:	d9c01c15 	stw	r7,112(sp)
2008c378:	01000034 	movhi	r4,0
2008c37c:	210a7104 	addi	r4,r4,10692
2008c380:	21000017 	ldw	r4,0(r4)
2008c384:	00a00034 	movhi	r2,32768
2008c388:	10bfffc4 	addi	r2,r2,-1
2008c38c:	280d883a 	mov	r6,r5
2008c390:	02008204 	movi	r8,520
2008c394:	d8800215 	stw	r2,8(sp)
2008c398:	d8800515 	stw	r2,20(sp)
2008c39c:	d80b883a 	mov	r5,sp
2008c3a0:	d9c01b04 	addi	r7,sp,108
2008c3a4:	00bfffc4 	movi	r2,-1
2008c3a8:	d8c00015 	stw	r3,0(sp)
2008c3ac:	d8c00415 	stw	r3,16(sp)
2008c3b0:	da00030d 	sth	r8,12(sp)
2008c3b4:	d880038d 	sth	r2,14(sp)
2008c3b8:	008c5740 	call	2008c574 <___svfprintf_internal_r>
2008c3bc:	d8c00017 	ldw	r3,0(sp)
2008c3c0:	18000005 	stb	zero,0(r3)
2008c3c4:	dfc01a17 	ldw	ra,104(sp)
2008c3c8:	dec01d04 	addi	sp,sp,116
2008c3cc:	f800283a 	ret

2008c3d0 <strcmp>:
2008c3d0:	2144b03a 	or	r2,r4,r5
2008c3d4:	108000cc 	andi	r2,r2,3
2008c3d8:	1000171e 	bne	r2,zero,2008c438 <strcmp+0x68>
2008c3dc:	20800017 	ldw	r2,0(r4)
2008c3e0:	28c00017 	ldw	r3,0(r5)
2008c3e4:	10c0141e 	bne	r2,r3,2008c438 <strcmp+0x68>
2008c3e8:	027fbff4 	movhi	r9,65279
2008c3ec:	4a7fbfc4 	addi	r9,r9,-257
2008c3f0:	0086303a 	nor	r3,zero,r2
2008c3f4:	02202074 	movhi	r8,32897
2008c3f8:	1245883a 	add	r2,r2,r9
2008c3fc:	42202004 	addi	r8,r8,-32640
2008c400:	10c4703a 	and	r2,r2,r3
2008c404:	1204703a 	and	r2,r2,r8
2008c408:	10000226 	beq	r2,zero,2008c414 <strcmp+0x44>
2008c40c:	00001706 	br	2008c46c <strcmp+0x9c>
2008c410:	1000161e 	bne	r2,zero,2008c46c <strcmp+0x9c>
2008c414:	21000104 	addi	r4,r4,4
2008c418:	20c00017 	ldw	r3,0(r4)
2008c41c:	29400104 	addi	r5,r5,4
2008c420:	29800017 	ldw	r6,0(r5)
2008c424:	1a4f883a 	add	r7,r3,r9
2008c428:	00c4303a 	nor	r2,zero,r3
2008c42c:	3884703a 	and	r2,r7,r2
2008c430:	1204703a 	and	r2,r2,r8
2008c434:	19bff626 	beq	r3,r6,2008c410 <__flash_rwdata_start+0xfffed624>
2008c438:	20800007 	ldb	r2,0(r4)
2008c43c:	1000051e 	bne	r2,zero,2008c454 <strcmp+0x84>
2008c440:	00000606 	br	2008c45c <strcmp+0x8c>
2008c444:	21000044 	addi	r4,r4,1
2008c448:	20800007 	ldb	r2,0(r4)
2008c44c:	29400044 	addi	r5,r5,1
2008c450:	10000226 	beq	r2,zero,2008c45c <strcmp+0x8c>
2008c454:	28c00007 	ldb	r3,0(r5)
2008c458:	10fffa26 	beq	r2,r3,2008c444 <__flash_rwdata_start+0xfffed658>
2008c45c:	20800003 	ldbu	r2,0(r4)
2008c460:	28c00003 	ldbu	r3,0(r5)
2008c464:	10c5c83a 	sub	r2,r2,r3
2008c468:	f800283a 	ret
2008c46c:	0005883a 	mov	r2,zero
2008c470:	f800283a 	ret

2008c474 <strlen>:
2008c474:	208000cc 	andi	r2,r4,3
2008c478:	10002026 	beq	r2,zero,2008c4fc <strlen+0x88>
2008c47c:	20800007 	ldb	r2,0(r4)
2008c480:	10002026 	beq	r2,zero,2008c504 <strlen+0x90>
2008c484:	2005883a 	mov	r2,r4
2008c488:	00000206 	br	2008c494 <strlen+0x20>
2008c48c:	10c00007 	ldb	r3,0(r2)
2008c490:	18001826 	beq	r3,zero,2008c4f4 <strlen+0x80>
2008c494:	10800044 	addi	r2,r2,1
2008c498:	10c000cc 	andi	r3,r2,3
2008c49c:	183ffb1e 	bne	r3,zero,2008c48c <__flash_rwdata_start+0xfffed6a0>
2008c4a0:	10c00017 	ldw	r3,0(r2)
2008c4a4:	01ffbff4 	movhi	r7,65279
2008c4a8:	39ffbfc4 	addi	r7,r7,-257
2008c4ac:	00ca303a 	nor	r5,zero,r3
2008c4b0:	01a02074 	movhi	r6,32897
2008c4b4:	19c7883a 	add	r3,r3,r7
2008c4b8:	31a02004 	addi	r6,r6,-32640
2008c4bc:	1946703a 	and	r3,r3,r5
2008c4c0:	1986703a 	and	r3,r3,r6
2008c4c4:	1800091e 	bne	r3,zero,2008c4ec <strlen+0x78>
2008c4c8:	10800104 	addi	r2,r2,4
2008c4cc:	10c00017 	ldw	r3,0(r2)
2008c4d0:	19cb883a 	add	r5,r3,r7
2008c4d4:	00c6303a 	nor	r3,zero,r3
2008c4d8:	28c6703a 	and	r3,r5,r3
2008c4dc:	1986703a 	and	r3,r3,r6
2008c4e0:	183ff926 	beq	r3,zero,2008c4c8 <__flash_rwdata_start+0xfffed6dc>
2008c4e4:	00000106 	br	2008c4ec <strlen+0x78>
2008c4e8:	10800044 	addi	r2,r2,1
2008c4ec:	10c00007 	ldb	r3,0(r2)
2008c4f0:	183ffd1e 	bne	r3,zero,2008c4e8 <__flash_rwdata_start+0xfffed6fc>
2008c4f4:	1105c83a 	sub	r2,r2,r4
2008c4f8:	f800283a 	ret
2008c4fc:	2005883a 	mov	r2,r4
2008c500:	003fe706 	br	2008c4a0 <__flash_rwdata_start+0xfffed6b4>
2008c504:	0005883a 	mov	r2,zero
2008c508:	f800283a 	ret

2008c50c <strrchr>:
2008c50c:	defffd04 	addi	sp,sp,-12
2008c510:	dc000015 	stw	r16,0(sp)
2008c514:	dfc00215 	stw	ra,8(sp)
2008c518:	dc400115 	stw	r17,4(sp)
2008c51c:	2821883a 	mov	r16,r5
2008c520:	28000f26 	beq	r5,zero,2008c560 <strrchr+0x54>
2008c524:	2007883a 	mov	r3,r4
2008c528:	0023883a 	mov	r17,zero
2008c52c:	00000206 	br	2008c538 <strrchr+0x2c>
2008c530:	10c00044 	addi	r3,r2,1
2008c534:	1023883a 	mov	r17,r2
2008c538:	1809883a 	mov	r4,r3
2008c53c:	800b883a 	mov	r5,r16
2008c540:	00950040 	call	20095004 <strchr>
2008c544:	103ffa1e 	bne	r2,zero,2008c530 <__flash_rwdata_start+0xfffed744>
2008c548:	8805883a 	mov	r2,r17
2008c54c:	dfc00217 	ldw	ra,8(sp)
2008c550:	dc400117 	ldw	r17,4(sp)
2008c554:	dc000017 	ldw	r16,0(sp)
2008c558:	dec00304 	addi	sp,sp,12
2008c55c:	f800283a 	ret
2008c560:	dfc00217 	ldw	ra,8(sp)
2008c564:	dc400117 	ldw	r17,4(sp)
2008c568:	dc000017 	ldw	r16,0(sp)
2008c56c:	dec00304 	addi	sp,sp,12
2008c570:	00950041 	jmpi	20095004 <strchr>

2008c574 <___svfprintf_internal_r>:
2008c574:	deffb504 	addi	sp,sp,-300
2008c578:	dfc04a15 	stw	ra,296(sp)
2008c57c:	ddc04815 	stw	r23,288(sp)
2008c580:	d9002f15 	stw	r4,188(sp)
2008c584:	282f883a 	mov	r23,r5
2008c588:	d9802915 	stw	r6,164(sp)
2008c58c:	d9c02d15 	stw	r7,180(sp)
2008c590:	df004915 	stw	fp,292(sp)
2008c594:	dd804715 	stw	r22,284(sp)
2008c598:	dd404615 	stw	r21,280(sp)
2008c59c:	dd004515 	stw	r20,276(sp)
2008c5a0:	dcc04415 	stw	r19,272(sp)
2008c5a4:	dc804315 	stw	r18,268(sp)
2008c5a8:	dc404215 	stw	r17,264(sp)
2008c5ac:	dc004115 	stw	r16,260(sp)
2008c5b0:	00933b00 	call	200933b0 <_localeconv_r>
2008c5b4:	10800017 	ldw	r2,0(r2)
2008c5b8:	1009883a 	mov	r4,r2
2008c5bc:	d8803515 	stw	r2,212(sp)
2008c5c0:	008c4740 	call	2008c474 <strlen>
2008c5c4:	d8803915 	stw	r2,228(sp)
2008c5c8:	b880030b 	ldhu	r2,12(r23)
2008c5cc:	1080200c 	andi	r2,r2,128
2008c5d0:	10000226 	beq	r2,zero,2008c5dc <___svfprintf_internal_r+0x68>
2008c5d4:	b8800417 	ldw	r2,16(r23)
2008c5d8:	10065f26 	beq	r2,zero,2008df58 <___svfprintf_internal_r+0x19e4>
2008c5dc:	db001dc4 	addi	r12,sp,119
2008c5e0:	dd801e04 	addi	r22,sp,120
2008c5e4:	d8800404 	addi	r2,sp,16
2008c5e8:	05000034 	movhi	r20,0
2008c5ec:	b317c83a 	sub	r11,r22,r12
2008c5f0:	a501ec84 	addi	r20,r20,1970
2008c5f4:	db002815 	stw	r12,160(sp)
2008c5f8:	d8801e15 	stw	r2,120(sp)
2008c5fc:	d8002015 	stw	zero,128(sp)
2008c600:	d8001f15 	stw	zero,124(sp)
2008c604:	d8003315 	stw	zero,204(sp)
2008c608:	d8003715 	stw	zero,220(sp)
2008c60c:	d8003815 	stw	zero,224(sp)
2008c610:	1011883a 	mov	r8,r2
2008c614:	d8003b15 	stw	zero,236(sp)
2008c618:	d8003a15 	stw	zero,232(sp)
2008c61c:	d8003015 	stw	zero,192(sp)
2008c620:	dac03d15 	stw	r11,244(sp)
2008c624:	db002917 	ldw	r12,164(sp)
2008c628:	60800007 	ldb	r2,0(r12)
2008c62c:	1000ab26 	beq	r2,zero,2008c8dc <___svfprintf_internal_r+0x368>
2008c630:	00c00944 	movi	r3,37
2008c634:	10c0a926 	beq	r2,r3,2008c8dc <___svfprintf_internal_r+0x368>
2008c638:	6021883a 	mov	r16,r12
2008c63c:	00000106 	br	2008c644 <___svfprintf_internal_r+0xd0>
2008c640:	10c08426 	beq	r2,r3,2008c854 <___svfprintf_internal_r+0x2e0>
2008c644:	84000044 	addi	r16,r16,1
2008c648:	80800007 	ldb	r2,0(r16)
2008c64c:	103ffc1e 	bne	r2,zero,2008c640 <__flash_rwdata_start+0xfffed854>
2008c650:	dac02917 	ldw	r11,164(sp)
2008c654:	82e3c83a 	sub	r17,r16,r11
2008c658:	88000f26 	beq	r17,zero,2008c698 <___svfprintf_internal_r+0x124>
2008c65c:	d8c02017 	ldw	r3,128(sp)
2008c660:	d8801f17 	ldw	r2,124(sp)
2008c664:	dac02917 	ldw	r11,164(sp)
2008c668:	1c47883a 	add	r3,r3,r17
2008c66c:	10800044 	addi	r2,r2,1
2008c670:	d8c02015 	stw	r3,128(sp)
2008c674:	42c00015 	stw	r11,0(r8)
2008c678:	44400115 	stw	r17,4(r8)
2008c67c:	d8801f15 	stw	r2,124(sp)
2008c680:	00c001c4 	movi	r3,7
2008c684:	18807616 	blt	r3,r2,2008c860 <___svfprintf_internal_r+0x2ec>
2008c688:	42000204 	addi	r8,r8,8
2008c68c:	db003017 	ldw	r12,192(sp)
2008c690:	6459883a 	add	r12,r12,r17
2008c694:	db003015 	stw	r12,192(sp)
2008c698:	80800007 	ldb	r2,0(r16)
2008c69c:	10007726 	beq	r2,zero,2008c87c <___svfprintf_internal_r+0x308>
2008c6a0:	80800044 	addi	r2,r16,1
2008c6a4:	84000047 	ldb	r16,1(r16)
2008c6a8:	d8002785 	stb	zero,158(sp)
2008c6ac:	000d883a 	mov	r6,zero
2008c6b0:	027fffc4 	movi	r9,-1
2008c6b4:	d8002e15 	stw	zero,184(sp)
2008c6b8:	0023883a 	mov	r17,zero
2008c6bc:	01001604 	movi	r4,88
2008c6c0:	01400244 	movi	r5,9
2008c6c4:	02800a84 	movi	r10,42
2008c6c8:	01c01b04 	movi	r7,108
2008c6cc:	10c00044 	addi	r3,r2,1
2008c6d0:	80bff804 	addi	r2,r16,-32
2008c6d4:	2082e636 	bltu	r4,r2,2008d270 <___svfprintf_internal_r+0xcfc>
2008c6d8:	100490ba 	slli	r2,r2,2
2008c6dc:	02c80274 	movhi	r11,8201
2008c6e0:	5af1bc04 	addi	r11,r11,-14608
2008c6e4:	12c5883a 	add	r2,r2,r11
2008c6e8:	10800017 	ldw	r2,0(r2)
2008c6ec:	1000683a 	jmp	r2
2008c6f0:	2008d050 	cmplti	zero,r4,9025
2008c6f4:	2008d270 	cmpltui	zero,r4,9033
2008c6f8:	2008d270 	cmpltui	zero,r4,9033
2008c6fc:	2008d070 	cmpltui	zero,r4,9025
2008c700:	2008d270 	cmpltui	zero,r4,9033
2008c704:	2008d270 	cmpltui	zero,r4,9033
2008c708:	2008d270 	cmpltui	zero,r4,9033
2008c70c:	2008d270 	cmpltui	zero,r4,9033
2008c710:	2008d270 	cmpltui	zero,r4,9033
2008c714:	2008d270 	cmpltui	zero,r4,9033
2008c718:	2008d080 	call	22008d08 <__flash_rwdata_start+0x1f69f1c>
2008c71c:	2008d0ac 	andhi	zero,r4,9026
2008c720:	2008d270 	cmpltui	zero,r4,9033
2008c724:	2008c8e4 	muli	zero,r4,8995
2008c728:	2008c8f4 	orhi	zero,r4,8995
2008c72c:	2008d270 	cmpltui	zero,r4,9033
2008c730:	2008c934 	orhi	zero,r4,8996
2008c734:	2008cf14 	ori	zero,r4,9020
2008c738:	2008cf14 	ori	zero,r4,9020
2008c73c:	2008cf14 	ori	zero,r4,9020
2008c740:	2008cf14 	ori	zero,r4,9020
2008c744:	2008cf14 	ori	zero,r4,9020
2008c748:	2008cf14 	ori	zero,r4,9020
2008c74c:	2008cf14 	ori	zero,r4,9020
2008c750:	2008cf14 	ori	zero,r4,9020
2008c754:	2008cf14 	ori	zero,r4,9020
2008c758:	2008d270 	cmpltui	zero,r4,9033
2008c75c:	2008d270 	cmpltui	zero,r4,9033
2008c760:	2008d270 	cmpltui	zero,r4,9033
2008c764:	2008d270 	cmpltui	zero,r4,9033
2008c768:	2008d270 	cmpltui	zero,r4,9033
2008c76c:	2008d270 	cmpltui	zero,r4,9033
2008c770:	2008d270 	cmpltui	zero,r4,9033
2008c774:	2008d270 	cmpltui	zero,r4,9033
2008c778:	2008d270 	cmpltui	zero,r4,9033
2008c77c:	2008d270 	cmpltui	zero,r4,9033
2008c780:	2008c944 	addi	zero,r4,8997
2008c784:	2008cdc4 	addi	zero,r4,9015
2008c788:	2008d270 	cmpltui	zero,r4,9033
2008c78c:	2008cdc4 	addi	zero,r4,9015
2008c790:	2008d270 	cmpltui	zero,r4,9033
2008c794:	2008d270 	cmpltui	zero,r4,9033
2008c798:	2008d270 	cmpltui	zero,r4,9033
2008c79c:	2008d270 	cmpltui	zero,r4,9033
2008c7a0:	2008ce68 	cmpgeui	zero,r4,9017
2008c7a4:	2008d270 	cmpltui	zero,r4,9033
2008c7a8:	2008d270 	cmpltui	zero,r4,9033
2008c7ac:	2008d204 	addi	zero,r4,9032
2008c7b0:	2008d270 	cmpltui	zero,r4,9033
2008c7b4:	2008d270 	cmpltui	zero,r4,9033
2008c7b8:	2008d270 	cmpltui	zero,r4,9033
2008c7bc:	2008d270 	cmpltui	zero,r4,9033
2008c7c0:	2008d270 	cmpltui	zero,r4,9033
2008c7c4:	2008ce78 	rdprs	zero,r4,9017
2008c7c8:	2008d270 	cmpltui	zero,r4,9033
2008c7cc:	2008d270 	cmpltui	zero,r4,9033
2008c7d0:	2008ceb8 	rdprs	zero,r4,9018
2008c7d4:	2008d270 	cmpltui	zero,r4,9033
2008c7d8:	2008d270 	cmpltui	zero,r4,9033
2008c7dc:	2008d270 	cmpltui	zero,r4,9033
2008c7e0:	2008d270 	cmpltui	zero,r4,9033
2008c7e4:	2008d270 	cmpltui	zero,r4,9033
2008c7e8:	2008d270 	cmpltui	zero,r4,9033
2008c7ec:	2008d270 	cmpltui	zero,r4,9033
2008c7f0:	2008d270 	cmpltui	zero,r4,9033
2008c7f4:	2008d270 	cmpltui	zero,r4,9033
2008c7f8:	2008d270 	cmpltui	zero,r4,9033
2008c7fc:	2008d15c 	xori	zero,r4,9029
2008c800:	2008d19c 	xori	zero,r4,9030
2008c804:	2008cdc4 	addi	zero,r4,9015
2008c808:	2008cdc4 	addi	zero,r4,9015
2008c80c:	2008cdc4 	addi	zero,r4,9015
2008c810:	2008d0bc 	xorhi	zero,r4,9026
2008c814:	2008d19c 	xori	zero,r4,9030
2008c818:	2008d270 	cmpltui	zero,r4,9033
2008c81c:	2008d270 	cmpltui	zero,r4,9033
2008c820:	2008d0cc 	andi	zero,r4,9027
2008c824:	2008d270 	cmpltui	zero,r4,9033
2008c828:	2008d0e0 	cmpeqi	zero,r4,9027
2008c82c:	2008d234 	orhi	zero,r4,9032
2008c830:	2008d114 	ori	zero,r4,9028
2008c834:	2008cf48 	cmpgei	zero,r4,9021
2008c838:	2008d270 	cmpltui	zero,r4,9033
2008c83c:	2008cf58 	cmpnei	zero,r4,9021
2008c840:	2008d270 	cmpltui	zero,r4,9033
2008c844:	2008cfd0 	cmplti	zero,r4,9023
2008c848:	2008d270 	cmpltui	zero,r4,9033
2008c84c:	2008d270 	cmpltui	zero,r4,9033
2008c850:	2008d010 	cmplti	zero,r4,9024
2008c854:	db002917 	ldw	r12,164(sp)
2008c858:	8323c83a 	sub	r17,r16,r12
2008c85c:	003f7e06 	br	2008c658 <__flash_rwdata_start+0xfffed86c>
2008c860:	d9002f17 	ldw	r4,188(sp)
2008c864:	b80b883a 	mov	r5,r23
2008c868:	b00d883a 	mov	r6,r22
2008c86c:	00951680 	call	20095168 <__ssprint_r>
2008c870:	1000081e 	bne	r2,zero,2008c894 <___svfprintf_internal_r+0x320>
2008c874:	da000404 	addi	r8,sp,16
2008c878:	003f8406 	br	2008c68c <__flash_rwdata_start+0xfffed8a0>
2008c87c:	d8802017 	ldw	r2,128(sp)
2008c880:	10000426 	beq	r2,zero,2008c894 <___svfprintf_internal_r+0x320>
2008c884:	d9002f17 	ldw	r4,188(sp)
2008c888:	b80b883a 	mov	r5,r23
2008c88c:	d9801e04 	addi	r6,sp,120
2008c890:	00951680 	call	20095168 <__ssprint_r>
2008c894:	b880030b 	ldhu	r2,12(r23)
2008c898:	1080100c 	andi	r2,r2,64
2008c89c:	10000d1e 	bne	r2,zero,2008c8d4 <___svfprintf_internal_r+0x360>
2008c8a0:	d8803017 	ldw	r2,192(sp)
2008c8a4:	dfc04a17 	ldw	ra,296(sp)
2008c8a8:	df004917 	ldw	fp,292(sp)
2008c8ac:	ddc04817 	ldw	r23,288(sp)
2008c8b0:	dd804717 	ldw	r22,284(sp)
2008c8b4:	dd404617 	ldw	r21,280(sp)
2008c8b8:	dd004517 	ldw	r20,276(sp)
2008c8bc:	dcc04417 	ldw	r19,272(sp)
2008c8c0:	dc804317 	ldw	r18,268(sp)
2008c8c4:	dc404217 	ldw	r17,264(sp)
2008c8c8:	dc004117 	ldw	r16,260(sp)
2008c8cc:	dec04b04 	addi	sp,sp,300
2008c8d0:	f800283a 	ret
2008c8d4:	00bfffc4 	movi	r2,-1
2008c8d8:	003ff206 	br	2008c8a4 <__flash_rwdata_start+0xfffedab8>
2008c8dc:	dc002917 	ldw	r16,164(sp)
2008c8e0:	003f6d06 	br	2008c698 <__flash_rwdata_start+0xfffed8ac>
2008c8e4:	1805883a 	mov	r2,r3
2008c8e8:	8c400114 	ori	r17,r17,4
2008c8ec:	1c000007 	ldb	r16,0(r3)
2008c8f0:	003f7606 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008c8f4:	1c000007 	ldb	r16,0(r3)
2008c8f8:	18800044 	addi	r2,r3,1
2008c8fc:	8286e726 	beq	r16,r10,2008e49c <___svfprintf_internal_r+0x1f28>
2008c900:	82fff404 	addi	r11,r16,-48
2008c904:	1007883a 	mov	r3,r2
2008c908:	0013883a 	mov	r9,zero
2008c90c:	2aff7036 	bltu	r5,r11,2008c6d0 <__flash_rwdata_start+0xfffed8e4>
2008c910:	1c000007 	ldb	r16,0(r3)
2008c914:	4a4002a4 	muli	r9,r9,10
2008c918:	18c00044 	addi	r3,r3,1
2008c91c:	5a53883a 	add	r9,r11,r9
2008c920:	82fff404 	addi	r11,r16,-48
2008c924:	2afffa2e 	bgeu	r5,r11,2008c910 <__flash_rwdata_start+0xfffedb24>
2008c928:	483f690e 	bge	r9,zero,2008c6d0 <__flash_rwdata_start+0xfffed8e4>
2008c92c:	027fffc4 	movi	r9,-1
2008c930:	003f6706 	br	2008c6d0 <__flash_rwdata_start+0xfffed8e4>
2008c934:	8c402014 	ori	r17,r17,128
2008c938:	1805883a 	mov	r2,r3
2008c93c:	1c000007 	ldb	r16,0(r3)
2008c940:	003f6206 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008c944:	8c400414 	ori	r17,r17,16
2008c948:	d8c02915 	stw	r3,164(sp)
2008c94c:	d9802785 	stb	r6,158(sp)
2008c950:	8880080c 	andi	r2,r17,32
2008c954:	d8c02d17 	ldw	r3,180(sp)
2008c958:	10021526 	beq	r2,zero,2008d1b0 <___svfprintf_internal_r+0xc3c>
2008c95c:	db002d17 	ldw	r12,180(sp)
2008c960:	18800117 	ldw	r2,4(r3)
2008c964:	1cc00017 	ldw	r19,0(r3)
2008c968:	63000204 	addi	r12,r12,8
2008c96c:	db002d15 	stw	r12,180(sp)
2008c970:	1039883a 	mov	fp,r2
2008c974:	10021916 	blt	r2,zero,2008d1dc <___svfprintf_internal_r+0xc68>
2008c978:	dd402783 	ldbu	r21,158(sp)
2008c97c:	da403215 	stw	r9,200(sp)
2008c980:	00800044 	movi	r2,1
2008c984:	9f06b03a 	or	r3,r19,fp
2008c988:	48000216 	blt	r9,zero,2008c994 <___svfprintf_internal_r+0x420>
2008c98c:	013fdfc4 	movi	r4,-129
2008c990:	8922703a 	and	r17,r17,r4
2008c994:	1802461e 	bne	r3,zero,2008d2b0 <___svfprintf_internal_r+0xd3c>
2008c998:	48035426 	beq	r9,zero,2008d6ec <___svfprintf_internal_r+0x1178>
2008c99c:	10803fcc 	andi	r2,r2,255
2008c9a0:	00c00044 	movi	r3,1
2008c9a4:	10c26726 	beq	r2,r3,2008d344 <___svfprintf_internal_r+0xdd0>
2008c9a8:	00c00084 	movi	r3,2
2008c9ac:	10c2ea26 	beq	r2,r3,2008d558 <___svfprintf_internal_r+0xfe4>
2008c9b0:	b007883a 	mov	r3,r22
2008c9b4:	9808d0fa 	srli	r4,r19,3
2008c9b8:	e00a977a 	slli	r5,fp,29
2008c9bc:	e038d0fa 	srli	fp,fp,3
2008c9c0:	9cc001cc 	andi	r19,r19,7
2008c9c4:	98800c04 	addi	r2,r19,48
2008c9c8:	18ffffc4 	addi	r3,r3,-1
2008c9cc:	2926b03a 	or	r19,r5,r4
2008c9d0:	18800005 	stb	r2,0(r3)
2008c9d4:	9f08b03a 	or	r4,r19,fp
2008c9d8:	203ff61e 	bne	r4,zero,2008c9b4 <__flash_rwdata_start+0xfffedbc8>
2008c9dc:	8900004c 	andi	r4,r17,1
2008c9e0:	d8c03115 	stw	r3,196(sp)
2008c9e4:	2002ea26 	beq	r4,zero,2008d590 <___svfprintf_internal_r+0x101c>
2008c9e8:	10803fcc 	andi	r2,r2,255
2008c9ec:	1080201c 	xori	r2,r2,128
2008c9f0:	10bfe004 	addi	r2,r2,-128
2008c9f4:	01000c04 	movi	r4,48
2008c9f8:	11057526 	beq	r2,r4,2008dfd0 <___svfprintf_internal_r+0x1a5c>
2008c9fc:	dac03117 	ldw	r11,196(sp)
2008ca00:	193fffc5 	stb	r4,-1(r3)
2008ca04:	5affffc4 	addi	r11,r11,-1
2008ca08:	dac03115 	stw	r11,196(sp)
2008ca0c:	b2e5c83a 	sub	r18,r22,r11
2008ca10:	9005883a 	mov	r2,r18
2008ca14:	9240010e 	bge	r18,r9,2008ca1c <___svfprintf_internal_r+0x4a8>
2008ca18:	4805883a 	mov	r2,r9
2008ca1c:	d8802a15 	stw	r2,168(sp)
2008ca20:	d8003415 	stw	zero,208(sp)
2008ca24:	a8803fcc 	andi	r2,r21,255
2008ca28:	1080201c 	xori	r2,r2,128
2008ca2c:	10bfe004 	addi	r2,r2,-128
2008ca30:	10000326 	beq	r2,zero,2008ca40 <___svfprintf_internal_r+0x4cc>
2008ca34:	d8c02a17 	ldw	r3,168(sp)
2008ca38:	18c00044 	addi	r3,r3,1
2008ca3c:	d8c02a15 	stw	r3,168(sp)
2008ca40:	8ac0008c 	andi	r11,r17,2
2008ca44:	dac02b15 	stw	r11,172(sp)
2008ca48:	58000326 	beq	r11,zero,2008ca58 <___svfprintf_internal_r+0x4e4>
2008ca4c:	db002a17 	ldw	r12,168(sp)
2008ca50:	63000084 	addi	r12,r12,2
2008ca54:	db002a15 	stw	r12,168(sp)
2008ca58:	88c0210c 	andi	r3,r17,132
2008ca5c:	d8c02c15 	stw	r3,176(sp)
2008ca60:	1802111e 	bne	r3,zero,2008d2a8 <___svfprintf_internal_r+0xd34>
2008ca64:	dac02e17 	ldw	r11,184(sp)
2008ca68:	db002a17 	ldw	r12,168(sp)
2008ca6c:	5b39c83a 	sub	fp,r11,r12
2008ca70:	07020d0e 	bge	zero,fp,2008d2a8 <___svfprintf_internal_r+0xd34>
2008ca74:	02400404 	movi	r9,16
2008ca78:	d8c02017 	ldw	r3,128(sp)
2008ca7c:	d8801f17 	ldw	r2,124(sp)
2008ca80:	4f058c0e 	bge	r9,fp,2008e0b4 <___svfprintf_internal_r+0x1b40>
2008ca84:	01400034 	movhi	r5,0
2008ca88:	e009883a 	mov	r4,fp
2008ca8c:	2941f084 	addi	r5,r5,1986
2008ca90:	dc003c15 	stw	r16,240(sp)
2008ca94:	9039883a 	mov	fp,r18
2008ca98:	d9403615 	stw	r5,216(sp)
2008ca9c:	8825883a 	mov	r18,r17
2008caa0:	482b883a 	mov	r21,r9
2008caa4:	04c001c4 	movi	r19,7
2008caa8:	dc002f17 	ldw	r16,188(sp)
2008caac:	2023883a 	mov	r17,r4
2008cab0:	00000306 	br	2008cac0 <___svfprintf_internal_r+0x54c>
2008cab4:	8c7ffc04 	addi	r17,r17,-16
2008cab8:	42000204 	addi	r8,r8,8
2008cabc:	ac40130e 	bge	r21,r17,2008cb0c <___svfprintf_internal_r+0x598>
2008cac0:	02c00034 	movhi	r11,0
2008cac4:	18c00404 	addi	r3,r3,16
2008cac8:	10800044 	addi	r2,r2,1
2008cacc:	5ac1f084 	addi	r11,r11,1986
2008cad0:	42c00015 	stw	r11,0(r8)
2008cad4:	45400115 	stw	r21,4(r8)
2008cad8:	d8c02015 	stw	r3,128(sp)
2008cadc:	d8801f15 	stw	r2,124(sp)
2008cae0:	98bff40e 	bge	r19,r2,2008cab4 <__flash_rwdata_start+0xfffedcc8>
2008cae4:	8009883a 	mov	r4,r16
2008cae8:	b80b883a 	mov	r5,r23
2008caec:	b00d883a 	mov	r6,r22
2008caf0:	00951680 	call	20095168 <__ssprint_r>
2008caf4:	103f671e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008caf8:	8c7ffc04 	addi	r17,r17,-16
2008cafc:	d8c02017 	ldw	r3,128(sp)
2008cb00:	d8801f17 	ldw	r2,124(sp)
2008cb04:	da000404 	addi	r8,sp,16
2008cb08:	ac7fed16 	blt	r21,r17,2008cac0 <__flash_rwdata_start+0xfffedcd4>
2008cb0c:	dc003c17 	ldw	r16,240(sp)
2008cb10:	8809883a 	mov	r4,r17
2008cb14:	9023883a 	mov	r17,r18
2008cb18:	e025883a 	mov	r18,fp
2008cb1c:	2039883a 	mov	fp,r4
2008cb20:	db003617 	ldw	r12,216(sp)
2008cb24:	e0c7883a 	add	r3,fp,r3
2008cb28:	10800044 	addi	r2,r2,1
2008cb2c:	43000015 	stw	r12,0(r8)
2008cb30:	47000115 	stw	fp,4(r8)
2008cb34:	d8c02015 	stw	r3,128(sp)
2008cb38:	d8801f15 	stw	r2,124(sp)
2008cb3c:	010001c4 	movi	r4,7
2008cb40:	20834416 	blt	r4,r2,2008d854 <___svfprintf_internal_r+0x12e0>
2008cb44:	d8802787 	ldb	r2,158(sp)
2008cb48:	42000204 	addi	r8,r8,8
2008cb4c:	10000c26 	beq	r2,zero,2008cb80 <___svfprintf_internal_r+0x60c>
2008cb50:	d8801f17 	ldw	r2,124(sp)
2008cb54:	d9002784 	addi	r4,sp,158
2008cb58:	18c00044 	addi	r3,r3,1
2008cb5c:	10800044 	addi	r2,r2,1
2008cb60:	41000015 	stw	r4,0(r8)
2008cb64:	01000044 	movi	r4,1
2008cb68:	41000115 	stw	r4,4(r8)
2008cb6c:	d8c02015 	stw	r3,128(sp)
2008cb70:	d8801f15 	stw	r2,124(sp)
2008cb74:	010001c4 	movi	r4,7
2008cb78:	2082f616 	blt	r4,r2,2008d754 <___svfprintf_internal_r+0x11e0>
2008cb7c:	42000204 	addi	r8,r8,8
2008cb80:	dac02b17 	ldw	r11,172(sp)
2008cb84:	58000c26 	beq	r11,zero,2008cbb8 <___svfprintf_internal_r+0x644>
2008cb88:	d8801f17 	ldw	r2,124(sp)
2008cb8c:	d9002704 	addi	r4,sp,156
2008cb90:	18c00084 	addi	r3,r3,2
2008cb94:	10800044 	addi	r2,r2,1
2008cb98:	41000015 	stw	r4,0(r8)
2008cb9c:	01000084 	movi	r4,2
2008cba0:	41000115 	stw	r4,4(r8)
2008cba4:	d8c02015 	stw	r3,128(sp)
2008cba8:	d8801f15 	stw	r2,124(sp)
2008cbac:	010001c4 	movi	r4,7
2008cbb0:	2082e016 	blt	r4,r2,2008d734 <___svfprintf_internal_r+0x11c0>
2008cbb4:	42000204 	addi	r8,r8,8
2008cbb8:	db002c17 	ldw	r12,176(sp)
2008cbbc:	00802004 	movi	r2,128
2008cbc0:	60822f26 	beq	r12,r2,2008d480 <___svfprintf_internal_r+0xf0c>
2008cbc4:	db003217 	ldw	r12,200(sp)
2008cbc8:	64abc83a 	sub	r21,r12,r18
2008cbcc:	0540310e 	bge	zero,r21,2008cc94 <___svfprintf_internal_r+0x720>
2008cbd0:	07000404 	movi	fp,16
2008cbd4:	d8801f17 	ldw	r2,124(sp)
2008cbd8:	e544270e 	bge	fp,r21,2008dc78 <___svfprintf_internal_r+0x1704>
2008cbdc:	01400034 	movhi	r5,0
2008cbe0:	a809883a 	mov	r4,r21
2008cbe4:	2941ec84 	addi	r5,r5,1970
2008cbe8:	dc002c15 	stw	r16,176(sp)
2008cbec:	902b883a 	mov	r21,r18
2008cbf0:	d9402b15 	stw	r5,172(sp)
2008cbf4:	8825883a 	mov	r18,r17
2008cbf8:	04c001c4 	movi	r19,7
2008cbfc:	dc002f17 	ldw	r16,188(sp)
2008cc00:	2023883a 	mov	r17,r4
2008cc04:	00000306 	br	2008cc14 <___svfprintf_internal_r+0x6a0>
2008cc08:	8c7ffc04 	addi	r17,r17,-16
2008cc0c:	42000204 	addi	r8,r8,8
2008cc10:	e440110e 	bge	fp,r17,2008cc58 <___svfprintf_internal_r+0x6e4>
2008cc14:	18c00404 	addi	r3,r3,16
2008cc18:	10800044 	addi	r2,r2,1
2008cc1c:	45000015 	stw	r20,0(r8)
2008cc20:	47000115 	stw	fp,4(r8)
2008cc24:	d8c02015 	stw	r3,128(sp)
2008cc28:	d8801f15 	stw	r2,124(sp)
2008cc2c:	98bff60e 	bge	r19,r2,2008cc08 <__flash_rwdata_start+0xfffede1c>
2008cc30:	8009883a 	mov	r4,r16
2008cc34:	b80b883a 	mov	r5,r23
2008cc38:	b00d883a 	mov	r6,r22
2008cc3c:	00951680 	call	20095168 <__ssprint_r>
2008cc40:	103f141e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008cc44:	8c7ffc04 	addi	r17,r17,-16
2008cc48:	d8c02017 	ldw	r3,128(sp)
2008cc4c:	d8801f17 	ldw	r2,124(sp)
2008cc50:	da000404 	addi	r8,sp,16
2008cc54:	e47fef16 	blt	fp,r17,2008cc14 <__flash_rwdata_start+0xfffede28>
2008cc58:	dc002c17 	ldw	r16,176(sp)
2008cc5c:	8809883a 	mov	r4,r17
2008cc60:	9023883a 	mov	r17,r18
2008cc64:	a825883a 	mov	r18,r21
2008cc68:	202b883a 	mov	r21,r4
2008cc6c:	dac02b17 	ldw	r11,172(sp)
2008cc70:	1d47883a 	add	r3,r3,r21
2008cc74:	10800044 	addi	r2,r2,1
2008cc78:	42c00015 	stw	r11,0(r8)
2008cc7c:	45400115 	stw	r21,4(r8)
2008cc80:	d8c02015 	stw	r3,128(sp)
2008cc84:	d8801f15 	stw	r2,124(sp)
2008cc88:	010001c4 	movi	r4,7
2008cc8c:	2082a116 	blt	r4,r2,2008d714 <___svfprintf_internal_r+0x11a0>
2008cc90:	42000204 	addi	r8,r8,8
2008cc94:	8880400c 	andi	r2,r17,256
2008cc98:	1001b01e 	bne	r2,zero,2008d35c <___svfprintf_internal_r+0xde8>
2008cc9c:	d8801f17 	ldw	r2,124(sp)
2008cca0:	db003117 	ldw	r12,196(sp)
2008cca4:	1c87883a 	add	r3,r3,r18
2008cca8:	10800044 	addi	r2,r2,1
2008ccac:	43000015 	stw	r12,0(r8)
2008ccb0:	44800115 	stw	r18,4(r8)
2008ccb4:	d8c02015 	stw	r3,128(sp)
2008ccb8:	d8801f15 	stw	r2,124(sp)
2008ccbc:	010001c4 	movi	r4,7
2008ccc0:	20828216 	blt	r4,r2,2008d6cc <___svfprintf_internal_r+0x1158>
2008ccc4:	42000204 	addi	r8,r8,8
2008ccc8:	8c40010c 	andi	r17,r17,4
2008cccc:	88003226 	beq	r17,zero,2008cd98 <___svfprintf_internal_r+0x824>
2008ccd0:	db002e17 	ldw	r12,184(sp)
2008ccd4:	dac02a17 	ldw	r11,168(sp)
2008ccd8:	62e1c83a 	sub	r16,r12,r11
2008ccdc:	04002e0e 	bge	zero,r16,2008cd98 <___svfprintf_internal_r+0x824>
2008cce0:	04400404 	movi	r17,16
2008cce4:	d8801f17 	ldw	r2,124(sp)
2008cce8:	8c05330e 	bge	r17,r16,2008e1b8 <___svfprintf_internal_r+0x1c44>
2008ccec:	01000034 	movhi	r4,0
2008ccf0:	2101f084 	addi	r4,r4,1986
2008ccf4:	d9003615 	stw	r4,216(sp)
2008ccf8:	048001c4 	movi	r18,7
2008ccfc:	dcc02f17 	ldw	r19,188(sp)
2008cd00:	00000306 	br	2008cd10 <___svfprintf_internal_r+0x79c>
2008cd04:	843ffc04 	addi	r16,r16,-16
2008cd08:	42000204 	addi	r8,r8,8
2008cd0c:	8c00130e 	bge	r17,r16,2008cd5c <___svfprintf_internal_r+0x7e8>
2008cd10:	01400034 	movhi	r5,0
2008cd14:	18c00404 	addi	r3,r3,16
2008cd18:	10800044 	addi	r2,r2,1
2008cd1c:	2941f084 	addi	r5,r5,1986
2008cd20:	41400015 	stw	r5,0(r8)
2008cd24:	44400115 	stw	r17,4(r8)
2008cd28:	d8c02015 	stw	r3,128(sp)
2008cd2c:	d8801f15 	stw	r2,124(sp)
2008cd30:	90bff40e 	bge	r18,r2,2008cd04 <__flash_rwdata_start+0xfffedf18>
2008cd34:	9809883a 	mov	r4,r19
2008cd38:	b80b883a 	mov	r5,r23
2008cd3c:	b00d883a 	mov	r6,r22
2008cd40:	00951680 	call	20095168 <__ssprint_r>
2008cd44:	103ed31e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008cd48:	843ffc04 	addi	r16,r16,-16
2008cd4c:	d8c02017 	ldw	r3,128(sp)
2008cd50:	d8801f17 	ldw	r2,124(sp)
2008cd54:	da000404 	addi	r8,sp,16
2008cd58:	8c3fed16 	blt	r17,r16,2008cd10 <__flash_rwdata_start+0xfffedf24>
2008cd5c:	dac03617 	ldw	r11,216(sp)
2008cd60:	1c07883a 	add	r3,r3,r16
2008cd64:	10800044 	addi	r2,r2,1
2008cd68:	42c00015 	stw	r11,0(r8)
2008cd6c:	44000115 	stw	r16,4(r8)
2008cd70:	d8c02015 	stw	r3,128(sp)
2008cd74:	d8801f15 	stw	r2,124(sp)
2008cd78:	010001c4 	movi	r4,7
2008cd7c:	2080060e 	bge	r4,r2,2008cd98 <___svfprintf_internal_r+0x824>
2008cd80:	d9002f17 	ldw	r4,188(sp)
2008cd84:	b80b883a 	mov	r5,r23
2008cd88:	b00d883a 	mov	r6,r22
2008cd8c:	00951680 	call	20095168 <__ssprint_r>
2008cd90:	103ec01e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008cd94:	d8c02017 	ldw	r3,128(sp)
2008cd98:	d8802a17 	ldw	r2,168(sp)
2008cd9c:	db002e17 	ldw	r12,184(sp)
2008cda0:	1300010e 	bge	r2,r12,2008cda8 <___svfprintf_internal_r+0x834>
2008cda4:	6005883a 	mov	r2,r12
2008cda8:	dac03017 	ldw	r11,192(sp)
2008cdac:	5897883a 	add	r11,r11,r2
2008cdb0:	dac03015 	stw	r11,192(sp)
2008cdb4:	1802331e 	bne	r3,zero,2008d684 <___svfprintf_internal_r+0x1110>
2008cdb8:	d8001f15 	stw	zero,124(sp)
2008cdbc:	da000404 	addi	r8,sp,16
2008cdc0:	003e1806 	br	2008c624 <__flash_rwdata_start+0xfffed838>
2008cdc4:	db002d17 	ldw	r12,180(sp)
2008cdc8:	dac02d17 	ldw	r11,180(sp)
2008cdcc:	d8c02915 	stw	r3,164(sp)
2008cdd0:	63000017 	ldw	r12,0(r12)
2008cdd4:	5ac00117 	ldw	r11,4(r11)
2008cdd8:	d9802785 	stb	r6,158(sp)
2008cddc:	6009883a 	mov	r4,r12
2008cde0:	580b883a 	mov	r5,r11
2008cde4:	db003715 	stw	r12,220(sp)
2008cde8:	da004015 	stw	r8,256(sp)
2008cdec:	da403f15 	stw	r9,252(sp)
2008cdf0:	dac03815 	stw	r11,224(sp)
2008cdf4:	0094e540 	call	20094e54 <__fpclassifyd>
2008cdf8:	db002d17 	ldw	r12,180(sp)
2008cdfc:	04800044 	movi	r18,1
2008ce00:	da004017 	ldw	r8,256(sp)
2008ce04:	64c00204 	addi	r19,r12,8
2008ce08:	da403f17 	ldw	r9,252(sp)
2008ce0c:	d9003717 	ldw	r4,220(sp)
2008ce10:	d9403817 	ldw	r5,224(sp)
2008ce14:	1483561e 	bne	r2,r18,2008db70 <___svfprintf_internal_r+0x15fc>
2008ce18:	000d883a 	mov	r6,zero
2008ce1c:	000f883a 	mov	r7,zero
2008ce20:	0098ddc0 	call	20098ddc <__ledf2>
2008ce24:	da004017 	ldw	r8,256(sp)
2008ce28:	1004ee16 	blt	r2,zero,2008e1e4 <___svfprintf_internal_r+0x1c70>
2008ce2c:	dd402783 	ldbu	r21,158(sp)
2008ce30:	008011c4 	movi	r2,71
2008ce34:	1404440e 	bge	r2,r16,2008df48 <___svfprintf_internal_r+0x19d4>
2008ce38:	00c00034 	movhi	r3,0
2008ce3c:	18c1dd04 	addi	r3,r3,1908
2008ce40:	d8c03115 	stw	r3,196(sp)
2008ce44:	02c000c4 	movi	r11,3
2008ce48:	00bfdfc4 	movi	r2,-129
2008ce4c:	dac02a15 	stw	r11,168(sp)
2008ce50:	88a2703a 	and	r17,r17,r2
2008ce54:	dcc02d15 	stw	r19,180(sp)
2008ce58:	5825883a 	mov	r18,r11
2008ce5c:	d8003215 	stw	zero,200(sp)
2008ce60:	d8003415 	stw	zero,208(sp)
2008ce64:	003eef06 	br	2008ca24 <__flash_rwdata_start+0xfffedc38>
2008ce68:	8c400214 	ori	r17,r17,8
2008ce6c:	1805883a 	mov	r2,r3
2008ce70:	1c000007 	ldb	r16,0(r3)
2008ce74:	003e1506 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008ce78:	8c400414 	ori	r17,r17,16
2008ce7c:	d8c02915 	stw	r3,164(sp)
2008ce80:	88c0080c 	andi	r3,r17,32
2008ce84:	d8802d17 	ldw	r2,180(sp)
2008ce88:	18005526 	beq	r3,zero,2008cfe0 <___svfprintf_internal_r+0xa6c>
2008ce8c:	dac02d17 	ldw	r11,180(sp)
2008ce90:	14c00017 	ldw	r19,0(r2)
2008ce94:	17000117 	ldw	fp,4(r2)
2008ce98:	5ac00204 	addi	r11,r11,8
2008ce9c:	dac02d15 	stw	r11,180(sp)
2008cea0:	00800044 	movi	r2,1
2008cea4:	9f06b03a 	or	r3,r19,fp
2008cea8:	d8002785 	stb	zero,158(sp)
2008ceac:	da403215 	stw	r9,200(sp)
2008ceb0:	002b883a 	mov	r21,zero
2008ceb4:	003eb406 	br	2008c988 <__flash_rwdata_start+0xfffedb9c>
2008ceb8:	03000034 	movhi	r12,0
2008cebc:	6301e004 	addi	r12,r12,1920
2008cec0:	d8c02915 	stw	r3,164(sp)
2008cec4:	d9802785 	stb	r6,158(sp)
2008cec8:	db003b15 	stw	r12,236(sp)
2008cecc:	88c0080c 	andi	r3,r17,32
2008ced0:	d8802d17 	ldw	r2,180(sp)
2008ced4:	18005626 	beq	r3,zero,2008d030 <___svfprintf_internal_r+0xabc>
2008ced8:	dac02d17 	ldw	r11,180(sp)
2008cedc:	14c00017 	ldw	r19,0(r2)
2008cee0:	17000117 	ldw	fp,4(r2)
2008cee4:	5ac00204 	addi	r11,r11,8
2008cee8:	dac02d15 	stw	r11,180(sp)
2008ceec:	8880004c 	andi	r2,r17,1
2008cef0:	10029326 	beq	r2,zero,2008d940 <___svfprintf_internal_r+0x13cc>
2008cef4:	9f06b03a 	or	r3,r19,fp
2008cef8:	18033526 	beq	r3,zero,2008dbd0 <___svfprintf_internal_r+0x165c>
2008cefc:	00800c04 	movi	r2,48
2008cf00:	d8802705 	stb	r2,156(sp)
2008cf04:	dc002745 	stb	r16,157(sp)
2008cf08:	8c400094 	ori	r17,r17,2
2008cf0c:	00800084 	movi	r2,2
2008cf10:	003fe506 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008cf14:	1805883a 	mov	r2,r3
2008cf18:	d8002e15 	stw	zero,184(sp)
2008cf1c:	82fff404 	addi	r11,r16,-48
2008cf20:	0019883a 	mov	r12,zero
2008cf24:	14000007 	ldb	r16,0(r2)
2008cf28:	630002a4 	muli	r12,r12,10
2008cf2c:	18c00044 	addi	r3,r3,1
2008cf30:	1805883a 	mov	r2,r3
2008cf34:	62d9883a 	add	r12,r12,r11
2008cf38:	82fff404 	addi	r11,r16,-48
2008cf3c:	2afff92e 	bgeu	r5,r11,2008cf24 <__flash_rwdata_start+0xfffee138>
2008cf40:	db002e15 	stw	r12,184(sp)
2008cf44:	003de206 	br	2008c6d0 <__flash_rwdata_start+0xfffed8e4>
2008cf48:	8c400814 	ori	r17,r17,32
2008cf4c:	1805883a 	mov	r2,r3
2008cf50:	1c000007 	ldb	r16,0(r3)
2008cf54:	003ddd06 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008cf58:	dac02d17 	ldw	r11,180(sp)
2008cf5c:	db002d17 	ldw	r12,180(sp)
2008cf60:	d8c02915 	stw	r3,164(sp)
2008cf64:	5ac00017 	ldw	r11,0(r11)
2008cf68:	d8002785 	stb	zero,158(sp)
2008cf6c:	64c00104 	addi	r19,r12,4
2008cf70:	dac03115 	stw	r11,196(sp)
2008cf74:	58048126 	beq	r11,zero,2008e17c <___svfprintf_internal_r+0x1c08>
2008cf78:	d9003117 	ldw	r4,196(sp)
2008cf7c:	48041716 	blt	r9,zero,2008dfdc <___svfprintf_internal_r+0x1a68>
2008cf80:	480d883a 	mov	r6,r9
2008cf84:	000b883a 	mov	r5,zero
2008cf88:	da004015 	stw	r8,256(sp)
2008cf8c:	da403f15 	stw	r9,252(sp)
2008cf90:	009359c0 	call	2009359c <memchr>
2008cf94:	da004017 	ldw	r8,256(sp)
2008cf98:	da403f17 	ldw	r9,252(sp)
2008cf9c:	1004db26 	beq	r2,zero,2008e30c <___svfprintf_internal_r+0x1d98>
2008cfa0:	d8c03117 	ldw	r3,196(sp)
2008cfa4:	10e5c83a 	sub	r18,r2,r3
2008cfa8:	4c80010e 	bge	r9,r18,2008cfb0 <___svfprintf_internal_r+0xa3c>
2008cfac:	4825883a 	mov	r18,r9
2008cfb0:	9005883a 	mov	r2,r18
2008cfb4:	90040e16 	blt	r18,zero,2008dff0 <___svfprintf_internal_r+0x1a7c>
2008cfb8:	dd402783 	ldbu	r21,158(sp)
2008cfbc:	d8802a15 	stw	r2,168(sp)
2008cfc0:	dcc02d15 	stw	r19,180(sp)
2008cfc4:	d8003215 	stw	zero,200(sp)
2008cfc8:	d8003415 	stw	zero,208(sp)
2008cfcc:	003e9506 	br	2008ca24 <__flash_rwdata_start+0xfffedc38>
2008cfd0:	d8c02915 	stw	r3,164(sp)
2008cfd4:	88c0080c 	andi	r3,r17,32
2008cfd8:	d8802d17 	ldw	r2,180(sp)
2008cfdc:	183fab1e 	bne	r3,zero,2008ce8c <__flash_rwdata_start+0xfffee0a0>
2008cfe0:	88c0040c 	andi	r3,r17,16
2008cfe4:	1802681e 	bne	r3,zero,2008d988 <___svfprintf_internal_r+0x1414>
2008cfe8:	88c0100c 	andi	r3,r17,64
2008cfec:	18026626 	beq	r3,zero,2008d988 <___svfprintf_internal_r+0x1414>
2008cff0:	dac02d17 	ldw	r11,180(sp)
2008cff4:	14c0000b 	ldhu	r19,0(r2)
2008cff8:	0039883a 	mov	fp,zero
2008cffc:	5ac00104 	addi	r11,r11,4
2008d000:	dac02d15 	stw	r11,180(sp)
2008d004:	00800044 	movi	r2,1
2008d008:	9807883a 	mov	r3,r19
2008d00c:	003fa606 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d010:	00800034 	movhi	r2,0
2008d014:	1081e504 	addi	r2,r2,1940
2008d018:	d8c02915 	stw	r3,164(sp)
2008d01c:	d8803b15 	stw	r2,236(sp)
2008d020:	d9802785 	stb	r6,158(sp)
2008d024:	88c0080c 	andi	r3,r17,32
2008d028:	d8802d17 	ldw	r2,180(sp)
2008d02c:	183faa1e 	bne	r3,zero,2008ced8 <__flash_rwdata_start+0xfffee0ec>
2008d030:	88c0040c 	andi	r3,r17,16
2008d034:	1802e826 	beq	r3,zero,2008dbd8 <___svfprintf_internal_r+0x1664>
2008d038:	db002d17 	ldw	r12,180(sp)
2008d03c:	14c00017 	ldw	r19,0(r2)
2008d040:	0039883a 	mov	fp,zero
2008d044:	63000104 	addi	r12,r12,4
2008d048:	db002d15 	stw	r12,180(sp)
2008d04c:	003fa706 	br	2008ceec <__flash_rwdata_start+0xfffee100>
2008d050:	30803fcc 	andi	r2,r6,255
2008d054:	1080201c 	xori	r2,r2,128
2008d058:	10bfe004 	addi	r2,r2,-128
2008d05c:	1002d91e 	bne	r2,zero,2008dbc4 <___svfprintf_internal_r+0x1650>
2008d060:	1805883a 	mov	r2,r3
2008d064:	01800804 	movi	r6,32
2008d068:	1c000007 	ldb	r16,0(r3)
2008d06c:	003d9706 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d070:	8c400054 	ori	r17,r17,1
2008d074:	1805883a 	mov	r2,r3
2008d078:	1c000007 	ldb	r16,0(r3)
2008d07c:	003d9306 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d080:	dac02d17 	ldw	r11,180(sp)
2008d084:	db002d17 	ldw	r12,180(sp)
2008d088:	5ac00017 	ldw	r11,0(r11)
2008d08c:	dac02e15 	stw	r11,184(sp)
2008d090:	62c00104 	addi	r11,r12,4
2008d094:	db002e17 	ldw	r12,184(sp)
2008d098:	60033e16 	blt	r12,zero,2008dd94 <___svfprintf_internal_r+0x1820>
2008d09c:	dac02d15 	stw	r11,180(sp)
2008d0a0:	1805883a 	mov	r2,r3
2008d0a4:	1c000007 	ldb	r16,0(r3)
2008d0a8:	003d8806 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d0ac:	1805883a 	mov	r2,r3
2008d0b0:	01800ac4 	movi	r6,43
2008d0b4:	1c000007 	ldb	r16,0(r3)
2008d0b8:	003d8406 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d0bc:	8c401014 	ori	r17,r17,64
2008d0c0:	1805883a 	mov	r2,r3
2008d0c4:	1c000007 	ldb	r16,0(r3)
2008d0c8:	003d8006 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d0cc:	1c000007 	ldb	r16,0(r3)
2008d0d0:	81c33626 	beq	r16,r7,2008ddac <___svfprintf_internal_r+0x1838>
2008d0d4:	8c400414 	ori	r17,r17,16
2008d0d8:	1805883a 	mov	r2,r3
2008d0dc:	003d7b06 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008d0e0:	d8c02915 	stw	r3,164(sp)
2008d0e4:	d9802785 	stb	r6,158(sp)
2008d0e8:	8880080c 	andi	r2,r17,32
2008d0ec:	1002c226 	beq	r2,zero,2008dbf8 <___svfprintf_internal_r+0x1684>
2008d0f0:	db002d17 	ldw	r12,180(sp)
2008d0f4:	dac03017 	ldw	r11,192(sp)
2008d0f8:	60800017 	ldw	r2,0(r12)
2008d0fc:	5807d7fa 	srai	r3,r11,31
2008d100:	63000104 	addi	r12,r12,4
2008d104:	db002d15 	stw	r12,180(sp)
2008d108:	12c00015 	stw	r11,0(r2)
2008d10c:	10c00115 	stw	r3,4(r2)
2008d110:	003d4406 	br	2008c624 <__flash_rwdata_start+0xfffed838>
2008d114:	db002d17 	ldw	r12,180(sp)
2008d118:	00800c04 	movi	r2,48
2008d11c:	d8802705 	stb	r2,156(sp)
2008d120:	64c00017 	ldw	r19,0(r12)
2008d124:	00801e04 	movi	r2,120
2008d128:	d8802745 	stb	r2,157(sp)
2008d12c:	00800034 	movhi	r2,0
2008d130:	1081e504 	addi	r2,r2,1940
2008d134:	63000104 	addi	r12,r12,4
2008d138:	d8c02915 	stw	r3,164(sp)
2008d13c:	d8803b15 	stw	r2,236(sp)
2008d140:	0039883a 	mov	fp,zero
2008d144:	8c400094 	ori	r17,r17,2
2008d148:	db002d15 	stw	r12,180(sp)
2008d14c:	00800084 	movi	r2,2
2008d150:	04001e04 	movi	r16,120
2008d154:	9807883a 	mov	r3,r19
2008d158:	003f5306 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d15c:	db002d17 	ldw	r12,180(sp)
2008d160:	d8c02915 	stw	r3,164(sp)
2008d164:	dac01404 	addi	r11,sp,80
2008d168:	60800017 	ldw	r2,0(r12)
2008d16c:	00c00044 	movi	r3,1
2008d170:	63000104 	addi	r12,r12,4
2008d174:	d8801405 	stb	r2,80(sp)
2008d178:	d8c02a15 	stw	r3,168(sp)
2008d17c:	d8002785 	stb	zero,158(sp)
2008d180:	db002d15 	stw	r12,180(sp)
2008d184:	1825883a 	mov	r18,r3
2008d188:	d8003215 	stw	zero,200(sp)
2008d18c:	d8003415 	stw	zero,208(sp)
2008d190:	dac03115 	stw	r11,196(sp)
2008d194:	0005883a 	mov	r2,zero
2008d198:	003e2906 	br	2008ca40 <__flash_rwdata_start+0xfffedc54>
2008d19c:	d8c02915 	stw	r3,164(sp)
2008d1a0:	d9802785 	stb	r6,158(sp)
2008d1a4:	8880080c 	andi	r2,r17,32
2008d1a8:	d8c02d17 	ldw	r3,180(sp)
2008d1ac:	103deb1e 	bne	r2,zero,2008c95c <__flash_rwdata_start+0xfffedb70>
2008d1b0:	8880040c 	andi	r2,r17,16
2008d1b4:	1001e51e 	bne	r2,zero,2008d94c <___svfprintf_internal_r+0x13d8>
2008d1b8:	8880100c 	andi	r2,r17,64
2008d1bc:	1001e326 	beq	r2,zero,2008d94c <___svfprintf_internal_r+0x13d8>
2008d1c0:	1cc0000f 	ldh	r19,0(r3)
2008d1c4:	db002d17 	ldw	r12,180(sp)
2008d1c8:	9839d7fa 	srai	fp,r19,31
2008d1cc:	63000104 	addi	r12,r12,4
2008d1d0:	db002d15 	stw	r12,180(sp)
2008d1d4:	e005883a 	mov	r2,fp
2008d1d8:	103de70e 	bge	r2,zero,2008c978 <__flash_rwdata_start+0xfffedb8c>
2008d1dc:	04e7c83a 	sub	r19,zero,r19
2008d1e0:	9804c03a 	cmpne	r2,r19,zero
2008d1e4:	0739c83a 	sub	fp,zero,fp
2008d1e8:	e0b9c83a 	sub	fp,fp,r2
2008d1ec:	05400b44 	movi	r21,45
2008d1f0:	dd402785 	stb	r21,158(sp)
2008d1f4:	da403215 	stw	r9,200(sp)
2008d1f8:	00800044 	movi	r2,1
2008d1fc:	9f06b03a 	or	r3,r19,fp
2008d200:	003de106 	br	2008c988 <__flash_rwdata_start+0xfffedb9c>
2008d204:	8c400414 	ori	r17,r17,16
2008d208:	d8c02915 	stw	r3,164(sp)
2008d20c:	8880080c 	andi	r2,r17,32
2008d210:	10000b26 	beq	r2,zero,2008d240 <___svfprintf_internal_r+0xccc>
2008d214:	db002d17 	ldw	r12,180(sp)
2008d218:	0005883a 	mov	r2,zero
2008d21c:	64c00017 	ldw	r19,0(r12)
2008d220:	67000117 	ldw	fp,4(r12)
2008d224:	63000204 	addi	r12,r12,8
2008d228:	db002d15 	stw	r12,180(sp)
2008d22c:	9f06b03a 	or	r3,r19,fp
2008d230:	003f1d06 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d234:	d8c02915 	stw	r3,164(sp)
2008d238:	8880080c 	andi	r2,r17,32
2008d23c:	103ff51e 	bne	r2,zero,2008d214 <__flash_rwdata_start+0xfffee428>
2008d240:	8880040c 	andi	r2,r17,16
2008d244:	1001c81e 	bne	r2,zero,2008d968 <___svfprintf_internal_r+0x13f4>
2008d248:	8880100c 	andi	r2,r17,64
2008d24c:	1001c626 	beq	r2,zero,2008d968 <___svfprintf_internal_r+0x13f4>
2008d250:	db002d17 	ldw	r12,180(sp)
2008d254:	0039883a 	mov	fp,zero
2008d258:	0005883a 	mov	r2,zero
2008d25c:	64c0000b 	ldhu	r19,0(r12)
2008d260:	63000104 	addi	r12,r12,4
2008d264:	db002d15 	stw	r12,180(sp)
2008d268:	9807883a 	mov	r3,r19
2008d26c:	003f0e06 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d270:	d8c02915 	stw	r3,164(sp)
2008d274:	d9802785 	stb	r6,158(sp)
2008d278:	803d8026 	beq	r16,zero,2008c87c <__flash_rwdata_start+0xfffeda90>
2008d27c:	02c00044 	movi	r11,1
2008d280:	db001404 	addi	r12,sp,80
2008d284:	dac02a15 	stw	r11,168(sp)
2008d288:	dc001405 	stb	r16,80(sp)
2008d28c:	d8002785 	stb	zero,158(sp)
2008d290:	5825883a 	mov	r18,r11
2008d294:	d8003215 	stw	zero,200(sp)
2008d298:	d8003415 	stw	zero,208(sp)
2008d29c:	db003115 	stw	r12,196(sp)
2008d2a0:	0005883a 	mov	r2,zero
2008d2a4:	003de606 	br	2008ca40 <__flash_rwdata_start+0xfffedc54>
2008d2a8:	d8c02017 	ldw	r3,128(sp)
2008d2ac:	003e2706 	br	2008cb4c <__flash_rwdata_start+0xfffedd60>
2008d2b0:	10803fcc 	andi	r2,r2,255
2008d2b4:	00c00044 	movi	r3,1
2008d2b8:	10fdbb1e 	bne	r2,r3,2008c9a8 <__flash_rwdata_start+0xfffedbbc>
2008d2bc:	e000021e 	bne	fp,zero,2008d2c8 <___svfprintf_internal_r+0xd54>
2008d2c0:	00800244 	movi	r2,9
2008d2c4:	14c01f2e 	bgeu	r2,r19,2008d344 <___svfprintf_internal_r+0xdd0>
2008d2c8:	dc002a15 	stw	r16,168(sp)
2008d2cc:	dc402b15 	stw	r17,172(sp)
2008d2d0:	9821883a 	mov	r16,r19
2008d2d4:	e023883a 	mov	r17,fp
2008d2d8:	b025883a 	mov	r18,r22
2008d2dc:	4827883a 	mov	r19,r9
2008d2e0:	4039883a 	mov	fp,r8
2008d2e4:	8009883a 	mov	r4,r16
2008d2e8:	880b883a 	mov	r5,r17
2008d2ec:	01800284 	movi	r6,10
2008d2f0:	000f883a 	mov	r7,zero
2008d2f4:	00986e80 	call	200986e8 <__umoddi3>
2008d2f8:	10800c04 	addi	r2,r2,48
2008d2fc:	94bfffc4 	addi	r18,r18,-1
2008d300:	8009883a 	mov	r4,r16
2008d304:	880b883a 	mov	r5,r17
2008d308:	01800284 	movi	r6,10
2008d30c:	000f883a 	mov	r7,zero
2008d310:	90800005 	stb	r2,0(r18)
2008d314:	00981280 	call	20098128 <__udivdi3>
2008d318:	1021883a 	mov	r16,r2
2008d31c:	10c4b03a 	or	r2,r2,r3
2008d320:	1823883a 	mov	r17,r3
2008d324:	103fef1e 	bne	r2,zero,2008d2e4 <__flash_rwdata_start+0xfffee4f8>
2008d328:	dc803115 	stw	r18,196(sp)
2008d32c:	dc002a17 	ldw	r16,168(sp)
2008d330:	dc402b17 	ldw	r17,172(sp)
2008d334:	9813883a 	mov	r9,r19
2008d338:	e011883a 	mov	r8,fp
2008d33c:	b4a5c83a 	sub	r18,r22,r18
2008d340:	003db306 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008d344:	9cc00c04 	addi	r19,r19,48
2008d348:	db001dc4 	addi	r12,sp,119
2008d34c:	dcc01dc5 	stb	r19,119(sp)
2008d350:	dc803d17 	ldw	r18,244(sp)
2008d354:	db003115 	stw	r12,196(sp)
2008d358:	003dad06 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008d35c:	00801944 	movi	r2,101
2008d360:	14008d0e 	bge	r2,r16,2008d598 <___svfprintf_internal_r+0x1024>
2008d364:	d9003717 	ldw	r4,220(sp)
2008d368:	d9403817 	ldw	r5,224(sp)
2008d36c:	000d883a 	mov	r6,zero
2008d370:	000f883a 	mov	r7,zero
2008d374:	d8c03e15 	stw	r3,248(sp)
2008d378:	da004015 	stw	r8,256(sp)
2008d37c:	0098c780 	call	20098c78 <__eqdf2>
2008d380:	d8c03e17 	ldw	r3,248(sp)
2008d384:	da004017 	ldw	r8,256(sp)
2008d388:	1000fd1e 	bne	r2,zero,2008d780 <___svfprintf_internal_r+0x120c>
2008d38c:	d8801f17 	ldw	r2,124(sp)
2008d390:	01000034 	movhi	r4,0
2008d394:	2101ec04 	addi	r4,r4,1968
2008d398:	18c00044 	addi	r3,r3,1
2008d39c:	10800044 	addi	r2,r2,1
2008d3a0:	41000015 	stw	r4,0(r8)
2008d3a4:	01000044 	movi	r4,1
2008d3a8:	41000115 	stw	r4,4(r8)
2008d3ac:	d8c02015 	stw	r3,128(sp)
2008d3b0:	d8801f15 	stw	r2,124(sp)
2008d3b4:	010001c4 	movi	r4,7
2008d3b8:	20823316 	blt	r4,r2,2008dc88 <___svfprintf_internal_r+0x1714>
2008d3bc:	42000204 	addi	r8,r8,8
2008d3c0:	d8802617 	ldw	r2,152(sp)
2008d3c4:	dac03317 	ldw	r11,204(sp)
2008d3c8:	12c00216 	blt	r2,r11,2008d3d4 <___svfprintf_internal_r+0xe60>
2008d3cc:	8880004c 	andi	r2,r17,1
2008d3d0:	103e3d26 	beq	r2,zero,2008ccc8 <__flash_rwdata_start+0xfffededc>
2008d3d4:	db003917 	ldw	r12,228(sp)
2008d3d8:	d8801f17 	ldw	r2,124(sp)
2008d3dc:	dac03517 	ldw	r11,212(sp)
2008d3e0:	1b07883a 	add	r3,r3,r12
2008d3e4:	10800044 	addi	r2,r2,1
2008d3e8:	42c00015 	stw	r11,0(r8)
2008d3ec:	43000115 	stw	r12,4(r8)
2008d3f0:	d8c02015 	stw	r3,128(sp)
2008d3f4:	d8801f15 	stw	r2,124(sp)
2008d3f8:	010001c4 	movi	r4,7
2008d3fc:	20826f16 	blt	r4,r2,2008ddbc <___svfprintf_internal_r+0x1848>
2008d400:	42000204 	addi	r8,r8,8
2008d404:	db003317 	ldw	r12,204(sp)
2008d408:	643fffc4 	addi	r16,r12,-1
2008d40c:	043e2e0e 	bge	zero,r16,2008ccc8 <__flash_rwdata_start+0xfffededc>
2008d410:	04800404 	movi	r18,16
2008d414:	d8801f17 	ldw	r2,124(sp)
2008d418:	9400a00e 	bge	r18,r16,2008d69c <___svfprintf_internal_r+0x1128>
2008d41c:	01400034 	movhi	r5,0
2008d420:	2941ec84 	addi	r5,r5,1970
2008d424:	d9402b15 	stw	r5,172(sp)
2008d428:	054001c4 	movi	r21,7
2008d42c:	dcc02f17 	ldw	r19,188(sp)
2008d430:	00000306 	br	2008d440 <___svfprintf_internal_r+0xecc>
2008d434:	42000204 	addi	r8,r8,8
2008d438:	843ffc04 	addi	r16,r16,-16
2008d43c:	94009a0e 	bge	r18,r16,2008d6a8 <___svfprintf_internal_r+0x1134>
2008d440:	18c00404 	addi	r3,r3,16
2008d444:	10800044 	addi	r2,r2,1
2008d448:	45000015 	stw	r20,0(r8)
2008d44c:	44800115 	stw	r18,4(r8)
2008d450:	d8c02015 	stw	r3,128(sp)
2008d454:	d8801f15 	stw	r2,124(sp)
2008d458:	a8bff60e 	bge	r21,r2,2008d434 <__flash_rwdata_start+0xfffee648>
2008d45c:	9809883a 	mov	r4,r19
2008d460:	b80b883a 	mov	r5,r23
2008d464:	b00d883a 	mov	r6,r22
2008d468:	00951680 	call	20095168 <__ssprint_r>
2008d46c:	103d091e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d470:	d8c02017 	ldw	r3,128(sp)
2008d474:	d8801f17 	ldw	r2,124(sp)
2008d478:	da000404 	addi	r8,sp,16
2008d47c:	003fee06 	br	2008d438 <__flash_rwdata_start+0xfffee64c>
2008d480:	dac02e17 	ldw	r11,184(sp)
2008d484:	db002a17 	ldw	r12,168(sp)
2008d488:	5b2bc83a 	sub	r21,r11,r12
2008d48c:	057dcd0e 	bge	zero,r21,2008cbc4 <__flash_rwdata_start+0xfffeddd8>
2008d490:	07000404 	movi	fp,16
2008d494:	d8801f17 	ldw	r2,124(sp)
2008d498:	e5435d0e 	bge	fp,r21,2008e210 <___svfprintf_internal_r+0x1c9c>
2008d49c:	01400034 	movhi	r5,0
2008d4a0:	a809883a 	mov	r4,r21
2008d4a4:	2941ec84 	addi	r5,r5,1970
2008d4a8:	dc002c15 	stw	r16,176(sp)
2008d4ac:	902b883a 	mov	r21,r18
2008d4b0:	d9402b15 	stw	r5,172(sp)
2008d4b4:	8825883a 	mov	r18,r17
2008d4b8:	04c001c4 	movi	r19,7
2008d4bc:	dc002f17 	ldw	r16,188(sp)
2008d4c0:	2023883a 	mov	r17,r4
2008d4c4:	00000306 	br	2008d4d4 <___svfprintf_internal_r+0xf60>
2008d4c8:	8c7ffc04 	addi	r17,r17,-16
2008d4cc:	42000204 	addi	r8,r8,8
2008d4d0:	e440110e 	bge	fp,r17,2008d518 <___svfprintf_internal_r+0xfa4>
2008d4d4:	18c00404 	addi	r3,r3,16
2008d4d8:	10800044 	addi	r2,r2,1
2008d4dc:	45000015 	stw	r20,0(r8)
2008d4e0:	47000115 	stw	fp,4(r8)
2008d4e4:	d8c02015 	stw	r3,128(sp)
2008d4e8:	d8801f15 	stw	r2,124(sp)
2008d4ec:	98bff60e 	bge	r19,r2,2008d4c8 <__flash_rwdata_start+0xfffee6dc>
2008d4f0:	8009883a 	mov	r4,r16
2008d4f4:	b80b883a 	mov	r5,r23
2008d4f8:	b00d883a 	mov	r6,r22
2008d4fc:	00951680 	call	20095168 <__ssprint_r>
2008d500:	103ce41e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d504:	8c7ffc04 	addi	r17,r17,-16
2008d508:	d8c02017 	ldw	r3,128(sp)
2008d50c:	d8801f17 	ldw	r2,124(sp)
2008d510:	da000404 	addi	r8,sp,16
2008d514:	e47fef16 	blt	fp,r17,2008d4d4 <__flash_rwdata_start+0xfffee6e8>
2008d518:	dc002c17 	ldw	r16,176(sp)
2008d51c:	8809883a 	mov	r4,r17
2008d520:	9023883a 	mov	r17,r18
2008d524:	a825883a 	mov	r18,r21
2008d528:	202b883a 	mov	r21,r4
2008d52c:	dac02b17 	ldw	r11,172(sp)
2008d530:	1d47883a 	add	r3,r3,r21
2008d534:	10800044 	addi	r2,r2,1
2008d538:	42c00015 	stw	r11,0(r8)
2008d53c:	45400115 	stw	r21,4(r8)
2008d540:	d8c02015 	stw	r3,128(sp)
2008d544:	d8801f15 	stw	r2,124(sp)
2008d548:	010001c4 	movi	r4,7
2008d54c:	20818016 	blt	r4,r2,2008db50 <___svfprintf_internal_r+0x15dc>
2008d550:	42000204 	addi	r8,r8,8
2008d554:	003d9b06 	br	2008cbc4 <__flash_rwdata_start+0xfffeddd8>
2008d558:	d9403b17 	ldw	r5,236(sp)
2008d55c:	b007883a 	mov	r3,r22
2008d560:	988003cc 	andi	r2,r19,15
2008d564:	e008973a 	slli	r4,fp,28
2008d568:	2885883a 	add	r2,r5,r2
2008d56c:	9826d13a 	srli	r19,r19,4
2008d570:	10800003 	ldbu	r2,0(r2)
2008d574:	e038d13a 	srli	fp,fp,4
2008d578:	18ffffc4 	addi	r3,r3,-1
2008d57c:	24e6b03a 	or	r19,r4,r19
2008d580:	18800005 	stb	r2,0(r3)
2008d584:	9f04b03a 	or	r2,r19,fp
2008d588:	103ff51e 	bne	r2,zero,2008d560 <__flash_rwdata_start+0xfffee774>
2008d58c:	d8c03115 	stw	r3,196(sp)
2008d590:	b0e5c83a 	sub	r18,r22,r3
2008d594:	003d1e06 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008d598:	db003317 	ldw	r12,204(sp)
2008d59c:	00800044 	movi	r2,1
2008d5a0:	18c00044 	addi	r3,r3,1
2008d5a4:	13014b0e 	bge	r2,r12,2008dad4 <___svfprintf_internal_r+0x1560>
2008d5a8:	dc001f17 	ldw	r16,124(sp)
2008d5ac:	dac03117 	ldw	r11,196(sp)
2008d5b0:	00800044 	movi	r2,1
2008d5b4:	84000044 	addi	r16,r16,1
2008d5b8:	40800115 	stw	r2,4(r8)
2008d5bc:	42c00015 	stw	r11,0(r8)
2008d5c0:	d8c02015 	stw	r3,128(sp)
2008d5c4:	dc001f15 	stw	r16,124(sp)
2008d5c8:	008001c4 	movi	r2,7
2008d5cc:	14014e16 	blt	r2,r16,2008db08 <___svfprintf_internal_r+0x1594>
2008d5d0:	42000204 	addi	r8,r8,8
2008d5d4:	db003917 	ldw	r12,228(sp)
2008d5d8:	dac03517 	ldw	r11,212(sp)
2008d5dc:	84000044 	addi	r16,r16,1
2008d5e0:	1b07883a 	add	r3,r3,r12
2008d5e4:	42c00015 	stw	r11,0(r8)
2008d5e8:	43000115 	stw	r12,4(r8)
2008d5ec:	d8c02015 	stw	r3,128(sp)
2008d5f0:	dc001f15 	stw	r16,124(sp)
2008d5f4:	008001c4 	movi	r2,7
2008d5f8:	14014c16 	blt	r2,r16,2008db2c <___svfprintf_internal_r+0x15b8>
2008d5fc:	44800204 	addi	r18,r8,8
2008d600:	d9003717 	ldw	r4,220(sp)
2008d604:	d9403817 	ldw	r5,224(sp)
2008d608:	000d883a 	mov	r6,zero
2008d60c:	000f883a 	mov	r7,zero
2008d610:	d8c03e15 	stw	r3,248(sp)
2008d614:	0098c780 	call	20098c78 <__eqdf2>
2008d618:	d8c03e17 	ldw	r3,248(sp)
2008d61c:	db003317 	ldw	r12,204(sp)
2008d620:	10009526 	beq	r2,zero,2008d878 <___svfprintf_internal_r+0x1304>
2008d624:	dac03117 	ldw	r11,196(sp)
2008d628:	60bfffc4 	addi	r2,r12,-1
2008d62c:	1887883a 	add	r3,r3,r2
2008d630:	59000044 	addi	r4,r11,1
2008d634:	84000044 	addi	r16,r16,1
2008d638:	90800115 	stw	r2,4(r18)
2008d63c:	91000015 	stw	r4,0(r18)
2008d640:	d8c02015 	stw	r3,128(sp)
2008d644:	dc001f15 	stw	r16,124(sp)
2008d648:	008001c4 	movi	r2,7
2008d64c:	1400b316 	blt	r2,r16,2008d91c <___svfprintf_internal_r+0x13a8>
2008d650:	94800204 	addi	r18,r18,8
2008d654:	dac03a17 	ldw	r11,232(sp)
2008d658:	dd4022c4 	addi	r21,sp,139
2008d65c:	84000044 	addi	r16,r16,1
2008d660:	1ac7883a 	add	r3,r3,r11
2008d664:	95400015 	stw	r21,0(r18)
2008d668:	92c00115 	stw	r11,4(r18)
2008d66c:	d8c02015 	stw	r3,128(sp)
2008d670:	dc001f15 	stw	r16,124(sp)
2008d674:	008001c4 	movi	r2,7
2008d678:	14001416 	blt	r2,r16,2008d6cc <___svfprintf_internal_r+0x1158>
2008d67c:	92000204 	addi	r8,r18,8
2008d680:	003d9106 	br	2008ccc8 <__flash_rwdata_start+0xfffededc>
2008d684:	d9002f17 	ldw	r4,188(sp)
2008d688:	b80b883a 	mov	r5,r23
2008d68c:	b00d883a 	mov	r6,r22
2008d690:	00951680 	call	20095168 <__ssprint_r>
2008d694:	103dc826 	beq	r2,zero,2008cdb8 <__flash_rwdata_start+0xfffedfcc>
2008d698:	003c7e06 	br	2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d69c:	01000034 	movhi	r4,0
2008d6a0:	2101ec84 	addi	r4,r4,1970
2008d6a4:	d9002b15 	stw	r4,172(sp)
2008d6a8:	dac02b17 	ldw	r11,172(sp)
2008d6ac:	1c07883a 	add	r3,r3,r16
2008d6b0:	44000115 	stw	r16,4(r8)
2008d6b4:	42c00015 	stw	r11,0(r8)
2008d6b8:	10800044 	addi	r2,r2,1
2008d6bc:	d8c02015 	stw	r3,128(sp)
2008d6c0:	d8801f15 	stw	r2,124(sp)
2008d6c4:	010001c4 	movi	r4,7
2008d6c8:	20bd7e0e 	bge	r4,r2,2008ccc4 <__flash_rwdata_start+0xfffeded8>
2008d6cc:	d9002f17 	ldw	r4,188(sp)
2008d6d0:	b80b883a 	mov	r5,r23
2008d6d4:	b00d883a 	mov	r6,r22
2008d6d8:	00951680 	call	20095168 <__ssprint_r>
2008d6dc:	103c6d1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d6e0:	d8c02017 	ldw	r3,128(sp)
2008d6e4:	da000404 	addi	r8,sp,16
2008d6e8:	003d7706 	br	2008ccc8 <__flash_rwdata_start+0xfffededc>
2008d6ec:	10803fcc 	andi	r2,r2,255
2008d6f0:	1000201e 	bne	r2,zero,2008d774 <___svfprintf_internal_r+0x1200>
2008d6f4:	8880004c 	andi	r2,r17,1
2008d6f8:	10001e26 	beq	r2,zero,2008d774 <___svfprintf_internal_r+0x1200>
2008d6fc:	00800c04 	movi	r2,48
2008d700:	d8c01dc4 	addi	r3,sp,119
2008d704:	d8801dc5 	stb	r2,119(sp)
2008d708:	dc803d17 	ldw	r18,244(sp)
2008d70c:	d8c03115 	stw	r3,196(sp)
2008d710:	003cbf06 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008d714:	d9002f17 	ldw	r4,188(sp)
2008d718:	b80b883a 	mov	r5,r23
2008d71c:	b00d883a 	mov	r6,r22
2008d720:	00951680 	call	20095168 <__ssprint_r>
2008d724:	103c5b1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d728:	d8c02017 	ldw	r3,128(sp)
2008d72c:	da000404 	addi	r8,sp,16
2008d730:	003d5806 	br	2008cc94 <__flash_rwdata_start+0xfffedea8>
2008d734:	d9002f17 	ldw	r4,188(sp)
2008d738:	b80b883a 	mov	r5,r23
2008d73c:	b00d883a 	mov	r6,r22
2008d740:	00951680 	call	20095168 <__ssprint_r>
2008d744:	103c531e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d748:	d8c02017 	ldw	r3,128(sp)
2008d74c:	da000404 	addi	r8,sp,16
2008d750:	003d1906 	br	2008cbb8 <__flash_rwdata_start+0xfffeddcc>
2008d754:	d9002f17 	ldw	r4,188(sp)
2008d758:	b80b883a 	mov	r5,r23
2008d75c:	b00d883a 	mov	r6,r22
2008d760:	00951680 	call	20095168 <__ssprint_r>
2008d764:	103c4b1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d768:	d8c02017 	ldw	r3,128(sp)
2008d76c:	da000404 	addi	r8,sp,16
2008d770:	003d0306 	br	2008cb80 <__flash_rwdata_start+0xfffedd94>
2008d774:	0025883a 	mov	r18,zero
2008d778:	dd803115 	stw	r22,196(sp)
2008d77c:	003ca406 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008d780:	dc002617 	ldw	r16,152(sp)
2008d784:	0401480e 	bge	zero,r16,2008dca8 <___svfprintf_internal_r+0x1734>
2008d788:	db003117 	ldw	r12,196(sp)
2008d78c:	dac03317 	ldw	r11,204(sp)
2008d790:	62e1883a 	add	r16,r12,r11
2008d794:	db003417 	ldw	r12,208(sp)
2008d798:	5825883a 	mov	r18,r11
2008d79c:	62c0010e 	bge	r12,r11,2008d7a4 <___svfprintf_internal_r+0x1230>
2008d7a0:	6025883a 	mov	r18,r12
2008d7a4:	04800b0e 	bge	zero,r18,2008d7d4 <___svfprintf_internal_r+0x1260>
2008d7a8:	d8801f17 	ldw	r2,124(sp)
2008d7ac:	dac03117 	ldw	r11,196(sp)
2008d7b0:	1c87883a 	add	r3,r3,r18
2008d7b4:	10800044 	addi	r2,r2,1
2008d7b8:	42c00015 	stw	r11,0(r8)
2008d7bc:	44800115 	stw	r18,4(r8)
2008d7c0:	d8c02015 	stw	r3,128(sp)
2008d7c4:	d8801f15 	stw	r2,124(sp)
2008d7c8:	010001c4 	movi	r4,7
2008d7cc:	20823f16 	blt	r4,r2,2008e0cc <___svfprintf_internal_r+0x1b58>
2008d7d0:	42000204 	addi	r8,r8,8
2008d7d4:	90023b16 	blt	r18,zero,2008e0c4 <___svfprintf_internal_r+0x1b50>
2008d7d8:	db003417 	ldw	r12,208(sp)
2008d7dc:	64a5c83a 	sub	r18,r12,r18
2008d7e0:	0480780e 	bge	zero,r18,2008d9c4 <___svfprintf_internal_r+0x1450>
2008d7e4:	05400404 	movi	r21,16
2008d7e8:	d8801f17 	ldw	r2,124(sp)
2008d7ec:	ac81140e 	bge	r21,r18,2008dc40 <___svfprintf_internal_r+0x16cc>
2008d7f0:	01400034 	movhi	r5,0
2008d7f4:	2941ec84 	addi	r5,r5,1970
2008d7f8:	d9402b15 	stw	r5,172(sp)
2008d7fc:	070001c4 	movi	fp,7
2008d800:	dcc02f17 	ldw	r19,188(sp)
2008d804:	00000306 	br	2008d814 <___svfprintf_internal_r+0x12a0>
2008d808:	42000204 	addi	r8,r8,8
2008d80c:	94bffc04 	addi	r18,r18,-16
2008d810:	ac810e0e 	bge	r21,r18,2008dc4c <___svfprintf_internal_r+0x16d8>
2008d814:	18c00404 	addi	r3,r3,16
2008d818:	10800044 	addi	r2,r2,1
2008d81c:	45000015 	stw	r20,0(r8)
2008d820:	45400115 	stw	r21,4(r8)
2008d824:	d8c02015 	stw	r3,128(sp)
2008d828:	d8801f15 	stw	r2,124(sp)
2008d82c:	e0bff60e 	bge	fp,r2,2008d808 <__flash_rwdata_start+0xfffeea1c>
2008d830:	9809883a 	mov	r4,r19
2008d834:	b80b883a 	mov	r5,r23
2008d838:	b00d883a 	mov	r6,r22
2008d83c:	00951680 	call	20095168 <__ssprint_r>
2008d840:	103c141e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d844:	d8c02017 	ldw	r3,128(sp)
2008d848:	d8801f17 	ldw	r2,124(sp)
2008d84c:	da000404 	addi	r8,sp,16
2008d850:	003fee06 	br	2008d80c <__flash_rwdata_start+0xfffeea20>
2008d854:	d9002f17 	ldw	r4,188(sp)
2008d858:	b80b883a 	mov	r5,r23
2008d85c:	b00d883a 	mov	r6,r22
2008d860:	00951680 	call	20095168 <__ssprint_r>
2008d864:	103c0b1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d868:	d8c02017 	ldw	r3,128(sp)
2008d86c:	d8802787 	ldb	r2,158(sp)
2008d870:	da000404 	addi	r8,sp,16
2008d874:	003cb506 	br	2008cb4c <__flash_rwdata_start+0xfffedd60>
2008d878:	657fffc4 	addi	r21,r12,-1
2008d87c:	057f750e 	bge	zero,r21,2008d654 <__flash_rwdata_start+0xfffee868>
2008d880:	07000404 	movi	fp,16
2008d884:	e542ed0e 	bge	fp,r21,2008e43c <___svfprintf_internal_r+0x1ec8>
2008d888:	01000034 	movhi	r4,0
2008d88c:	2101ec84 	addi	r4,r4,1970
2008d890:	d9002b15 	stw	r4,172(sp)
2008d894:	01c001c4 	movi	r7,7
2008d898:	dcc02f17 	ldw	r19,188(sp)
2008d89c:	00000306 	br	2008d8ac <___svfprintf_internal_r+0x1338>
2008d8a0:	ad7ffc04 	addi	r21,r21,-16
2008d8a4:	94800204 	addi	r18,r18,8
2008d8a8:	e540130e 	bge	fp,r21,2008d8f8 <___svfprintf_internal_r+0x1384>
2008d8ac:	18c00404 	addi	r3,r3,16
2008d8b0:	84000044 	addi	r16,r16,1
2008d8b4:	95000015 	stw	r20,0(r18)
2008d8b8:	97000115 	stw	fp,4(r18)
2008d8bc:	d8c02015 	stw	r3,128(sp)
2008d8c0:	dc001f15 	stw	r16,124(sp)
2008d8c4:	3c3ff60e 	bge	r7,r16,2008d8a0 <__flash_rwdata_start+0xfffeeab4>
2008d8c8:	9809883a 	mov	r4,r19
2008d8cc:	b80b883a 	mov	r5,r23
2008d8d0:	b00d883a 	mov	r6,r22
2008d8d4:	d9c03e15 	stw	r7,248(sp)
2008d8d8:	00951680 	call	20095168 <__ssprint_r>
2008d8dc:	d9c03e17 	ldw	r7,248(sp)
2008d8e0:	103bec1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d8e4:	ad7ffc04 	addi	r21,r21,-16
2008d8e8:	d8c02017 	ldw	r3,128(sp)
2008d8ec:	dc001f17 	ldw	r16,124(sp)
2008d8f0:	dc800404 	addi	r18,sp,16
2008d8f4:	e57fed16 	blt	fp,r21,2008d8ac <__flash_rwdata_start+0xfffeeac0>
2008d8f8:	dac02b17 	ldw	r11,172(sp)
2008d8fc:	1d47883a 	add	r3,r3,r21
2008d900:	84000044 	addi	r16,r16,1
2008d904:	92c00015 	stw	r11,0(r18)
2008d908:	95400115 	stw	r21,4(r18)
2008d90c:	d8c02015 	stw	r3,128(sp)
2008d910:	dc001f15 	stw	r16,124(sp)
2008d914:	008001c4 	movi	r2,7
2008d918:	143f4d0e 	bge	r2,r16,2008d650 <__flash_rwdata_start+0xfffee864>
2008d91c:	d9002f17 	ldw	r4,188(sp)
2008d920:	b80b883a 	mov	r5,r23
2008d924:	b00d883a 	mov	r6,r22
2008d928:	00951680 	call	20095168 <__ssprint_r>
2008d92c:	103bd91e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d930:	d8c02017 	ldw	r3,128(sp)
2008d934:	dc001f17 	ldw	r16,124(sp)
2008d938:	dc800404 	addi	r18,sp,16
2008d93c:	003f4506 	br	2008d654 <__flash_rwdata_start+0xfffee868>
2008d940:	00800084 	movi	r2,2
2008d944:	9f06b03a 	or	r3,r19,fp
2008d948:	003d5706 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d94c:	1cc00017 	ldw	r19,0(r3)
2008d950:	dac02d17 	ldw	r11,180(sp)
2008d954:	9839d7fa 	srai	fp,r19,31
2008d958:	5ac00104 	addi	r11,r11,4
2008d95c:	dac02d15 	stw	r11,180(sp)
2008d960:	e005883a 	mov	r2,fp
2008d964:	003c0306 	br	2008c974 <__flash_rwdata_start+0xfffedb88>
2008d968:	dac02d17 	ldw	r11,180(sp)
2008d96c:	0039883a 	mov	fp,zero
2008d970:	0005883a 	mov	r2,zero
2008d974:	5cc00017 	ldw	r19,0(r11)
2008d978:	5ac00104 	addi	r11,r11,4
2008d97c:	dac02d15 	stw	r11,180(sp)
2008d980:	9807883a 	mov	r3,r19
2008d984:	003d4806 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d988:	db002d17 	ldw	r12,180(sp)
2008d98c:	14c00017 	ldw	r19,0(r2)
2008d990:	0039883a 	mov	fp,zero
2008d994:	63000104 	addi	r12,r12,4
2008d998:	db002d15 	stw	r12,180(sp)
2008d99c:	00800044 	movi	r2,1
2008d9a0:	9807883a 	mov	r3,r19
2008d9a4:	003d4006 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008d9a8:	d9002f17 	ldw	r4,188(sp)
2008d9ac:	b80b883a 	mov	r5,r23
2008d9b0:	b00d883a 	mov	r6,r22
2008d9b4:	00951680 	call	20095168 <__ssprint_r>
2008d9b8:	103bb61e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008d9bc:	d8c02017 	ldw	r3,128(sp)
2008d9c0:	da000404 	addi	r8,sp,16
2008d9c4:	db003117 	ldw	r12,196(sp)
2008d9c8:	dac03417 	ldw	r11,208(sp)
2008d9cc:	d8802617 	ldw	r2,152(sp)
2008d9d0:	62e5883a 	add	r18,r12,r11
2008d9d4:	db003317 	ldw	r12,204(sp)
2008d9d8:	13000216 	blt	r2,r12,2008d9e4 <___svfprintf_internal_r+0x1470>
2008d9dc:	8900004c 	andi	r4,r17,1
2008d9e0:	20000c26 	beq	r4,zero,2008da14 <___svfprintf_internal_r+0x14a0>
2008d9e4:	dac03917 	ldw	r11,228(sp)
2008d9e8:	d9001f17 	ldw	r4,124(sp)
2008d9ec:	db003517 	ldw	r12,212(sp)
2008d9f0:	1ac7883a 	add	r3,r3,r11
2008d9f4:	21000044 	addi	r4,r4,1
2008d9f8:	43000015 	stw	r12,0(r8)
2008d9fc:	42c00115 	stw	r11,4(r8)
2008da00:	d8c02015 	stw	r3,128(sp)
2008da04:	d9001f15 	stw	r4,124(sp)
2008da08:	014001c4 	movi	r5,7
2008da0c:	2901b716 	blt	r5,r4,2008e0ec <___svfprintf_internal_r+0x1b78>
2008da10:	42000204 	addi	r8,r8,8
2008da14:	dac03317 	ldw	r11,204(sp)
2008da18:	8489c83a 	sub	r4,r16,r18
2008da1c:	5885c83a 	sub	r2,r11,r2
2008da20:	1021883a 	mov	r16,r2
2008da24:	2080010e 	bge	r4,r2,2008da2c <___svfprintf_internal_r+0x14b8>
2008da28:	2021883a 	mov	r16,r4
2008da2c:	04000a0e 	bge	zero,r16,2008da58 <___svfprintf_internal_r+0x14e4>
2008da30:	d9001f17 	ldw	r4,124(sp)
2008da34:	1c07883a 	add	r3,r3,r16
2008da38:	44800015 	stw	r18,0(r8)
2008da3c:	21000044 	addi	r4,r4,1
2008da40:	44000115 	stw	r16,4(r8)
2008da44:	d8c02015 	stw	r3,128(sp)
2008da48:	d9001f15 	stw	r4,124(sp)
2008da4c:	014001c4 	movi	r5,7
2008da50:	2901bf16 	blt	r5,r4,2008e150 <___svfprintf_internal_r+0x1bdc>
2008da54:	42000204 	addi	r8,r8,8
2008da58:	8001bb16 	blt	r16,zero,2008e148 <___svfprintf_internal_r+0x1bd4>
2008da5c:	1421c83a 	sub	r16,r2,r16
2008da60:	043c990e 	bge	zero,r16,2008ccc8 <__flash_rwdata_start+0xfffededc>
2008da64:	04800404 	movi	r18,16
2008da68:	d8801f17 	ldw	r2,124(sp)
2008da6c:	943f0b0e 	bge	r18,r16,2008d69c <__flash_rwdata_start+0xfffee8b0>
2008da70:	01400034 	movhi	r5,0
2008da74:	2941ec84 	addi	r5,r5,1970
2008da78:	d9402b15 	stw	r5,172(sp)
2008da7c:	054001c4 	movi	r21,7
2008da80:	dcc02f17 	ldw	r19,188(sp)
2008da84:	00000306 	br	2008da94 <___svfprintf_internal_r+0x1520>
2008da88:	42000204 	addi	r8,r8,8
2008da8c:	843ffc04 	addi	r16,r16,-16
2008da90:	943f050e 	bge	r18,r16,2008d6a8 <__flash_rwdata_start+0xfffee8bc>
2008da94:	18c00404 	addi	r3,r3,16
2008da98:	10800044 	addi	r2,r2,1
2008da9c:	45000015 	stw	r20,0(r8)
2008daa0:	44800115 	stw	r18,4(r8)
2008daa4:	d8c02015 	stw	r3,128(sp)
2008daa8:	d8801f15 	stw	r2,124(sp)
2008daac:	a8bff60e 	bge	r21,r2,2008da88 <__flash_rwdata_start+0xfffeec9c>
2008dab0:	9809883a 	mov	r4,r19
2008dab4:	b80b883a 	mov	r5,r23
2008dab8:	b00d883a 	mov	r6,r22
2008dabc:	00951680 	call	20095168 <__ssprint_r>
2008dac0:	103b741e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008dac4:	d8c02017 	ldw	r3,128(sp)
2008dac8:	d8801f17 	ldw	r2,124(sp)
2008dacc:	da000404 	addi	r8,sp,16
2008dad0:	003fee06 	br	2008da8c <__flash_rwdata_start+0xfffeeca0>
2008dad4:	8888703a 	and	r4,r17,r2
2008dad8:	203eb31e 	bne	r4,zero,2008d5a8 <__flash_rwdata_start+0xfffee7bc>
2008dadc:	dc001f17 	ldw	r16,124(sp)
2008dae0:	db003117 	ldw	r12,196(sp)
2008dae4:	40800115 	stw	r2,4(r8)
2008dae8:	84000044 	addi	r16,r16,1
2008daec:	43000015 	stw	r12,0(r8)
2008daf0:	d8c02015 	stw	r3,128(sp)
2008daf4:	dc001f15 	stw	r16,124(sp)
2008daf8:	008001c4 	movi	r2,7
2008dafc:	143f8716 	blt	r2,r16,2008d91c <__flash_rwdata_start+0xfffeeb30>
2008db00:	44800204 	addi	r18,r8,8
2008db04:	003ed306 	br	2008d654 <__flash_rwdata_start+0xfffee868>
2008db08:	d9002f17 	ldw	r4,188(sp)
2008db0c:	b80b883a 	mov	r5,r23
2008db10:	b00d883a 	mov	r6,r22
2008db14:	00951680 	call	20095168 <__ssprint_r>
2008db18:	103b5e1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008db1c:	d8c02017 	ldw	r3,128(sp)
2008db20:	dc001f17 	ldw	r16,124(sp)
2008db24:	da000404 	addi	r8,sp,16
2008db28:	003eaa06 	br	2008d5d4 <__flash_rwdata_start+0xfffee7e8>
2008db2c:	d9002f17 	ldw	r4,188(sp)
2008db30:	b80b883a 	mov	r5,r23
2008db34:	b00d883a 	mov	r6,r22
2008db38:	00951680 	call	20095168 <__ssprint_r>
2008db3c:	103b551e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008db40:	d8c02017 	ldw	r3,128(sp)
2008db44:	dc001f17 	ldw	r16,124(sp)
2008db48:	dc800404 	addi	r18,sp,16
2008db4c:	003eac06 	br	2008d600 <__flash_rwdata_start+0xfffee814>
2008db50:	d9002f17 	ldw	r4,188(sp)
2008db54:	b80b883a 	mov	r5,r23
2008db58:	b00d883a 	mov	r6,r22
2008db5c:	00951680 	call	20095168 <__ssprint_r>
2008db60:	103b4c1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008db64:	d8c02017 	ldw	r3,128(sp)
2008db68:	da000404 	addi	r8,sp,16
2008db6c:	003c1506 	br	2008cbc4 <__flash_rwdata_start+0xfffeddd8>
2008db70:	da004015 	stw	r8,256(sp)
2008db74:	da403f15 	stw	r9,252(sp)
2008db78:	0094e540 	call	20094e54 <__fpclassifyd>
2008db7c:	da004017 	ldw	r8,256(sp)
2008db80:	da403f17 	ldw	r9,252(sp)
2008db84:	1000951e 	bne	r2,zero,2008dddc <___svfprintf_internal_r+0x1868>
2008db88:	008011c4 	movi	r2,71
2008db8c:	1400fb16 	blt	r2,r16,2008df7c <___svfprintf_internal_r+0x1a08>
2008db90:	03000034 	movhi	r12,0
2008db94:	6301de04 	addi	r12,r12,1912
2008db98:	db003115 	stw	r12,196(sp)
2008db9c:	00c000c4 	movi	r3,3
2008dba0:	00bfdfc4 	movi	r2,-129
2008dba4:	d8c02a15 	stw	r3,168(sp)
2008dba8:	88a2703a 	and	r17,r17,r2
2008dbac:	dd402783 	ldbu	r21,158(sp)
2008dbb0:	dcc02d15 	stw	r19,180(sp)
2008dbb4:	1825883a 	mov	r18,r3
2008dbb8:	d8003215 	stw	zero,200(sp)
2008dbbc:	d8003415 	stw	zero,208(sp)
2008dbc0:	003b9806 	br	2008ca24 <__flash_rwdata_start+0xfffedc38>
2008dbc4:	1c000007 	ldb	r16,0(r3)
2008dbc8:	1805883a 	mov	r2,r3
2008dbcc:	003abf06 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008dbd0:	00800084 	movi	r2,2
2008dbd4:	003cb406 	br	2008cea8 <__flash_rwdata_start+0xfffee0bc>
2008dbd8:	88c0100c 	andi	r3,r17,64
2008dbdc:	1800f626 	beq	r3,zero,2008dfb8 <___svfprintf_internal_r+0x1a44>
2008dbe0:	dac02d17 	ldw	r11,180(sp)
2008dbe4:	14c0000b 	ldhu	r19,0(r2)
2008dbe8:	0039883a 	mov	fp,zero
2008dbec:	5ac00104 	addi	r11,r11,4
2008dbf0:	dac02d15 	stw	r11,180(sp)
2008dbf4:	003cbd06 	br	2008ceec <__flash_rwdata_start+0xfffee100>
2008dbf8:	8880040c 	andi	r2,r17,16
2008dbfc:	1000091e 	bne	r2,zero,2008dc24 <___svfprintf_internal_r+0x16b0>
2008dc00:	8c40100c 	andi	r17,r17,64
2008dc04:	88000726 	beq	r17,zero,2008dc24 <___svfprintf_internal_r+0x16b0>
2008dc08:	db002d17 	ldw	r12,180(sp)
2008dc0c:	dac03017 	ldw	r11,192(sp)
2008dc10:	60800017 	ldw	r2,0(r12)
2008dc14:	63000104 	addi	r12,r12,4
2008dc18:	db002d15 	stw	r12,180(sp)
2008dc1c:	12c0000d 	sth	r11,0(r2)
2008dc20:	003a8006 	br	2008c624 <__flash_rwdata_start+0xfffed838>
2008dc24:	db002d17 	ldw	r12,180(sp)
2008dc28:	dac03017 	ldw	r11,192(sp)
2008dc2c:	60800017 	ldw	r2,0(r12)
2008dc30:	63000104 	addi	r12,r12,4
2008dc34:	db002d15 	stw	r12,180(sp)
2008dc38:	12c00015 	stw	r11,0(r2)
2008dc3c:	003a7906 	br	2008c624 <__flash_rwdata_start+0xfffed838>
2008dc40:	01000034 	movhi	r4,0
2008dc44:	2101ec84 	addi	r4,r4,1970
2008dc48:	d9002b15 	stw	r4,172(sp)
2008dc4c:	dac02b17 	ldw	r11,172(sp)
2008dc50:	1c87883a 	add	r3,r3,r18
2008dc54:	10800044 	addi	r2,r2,1
2008dc58:	42c00015 	stw	r11,0(r8)
2008dc5c:	44800115 	stw	r18,4(r8)
2008dc60:	d8c02015 	stw	r3,128(sp)
2008dc64:	d8801f15 	stw	r2,124(sp)
2008dc68:	010001c4 	movi	r4,7
2008dc6c:	20bf4e16 	blt	r4,r2,2008d9a8 <__flash_rwdata_start+0xfffeebbc>
2008dc70:	42000204 	addi	r8,r8,8
2008dc74:	003f5306 	br	2008d9c4 <__flash_rwdata_start+0xfffeebd8>
2008dc78:	01000034 	movhi	r4,0
2008dc7c:	2101ec84 	addi	r4,r4,1970
2008dc80:	d9002b15 	stw	r4,172(sp)
2008dc84:	003bf906 	br	2008cc6c <__flash_rwdata_start+0xfffede80>
2008dc88:	d9002f17 	ldw	r4,188(sp)
2008dc8c:	b80b883a 	mov	r5,r23
2008dc90:	b00d883a 	mov	r6,r22
2008dc94:	00951680 	call	20095168 <__ssprint_r>
2008dc98:	103afe1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008dc9c:	d8c02017 	ldw	r3,128(sp)
2008dca0:	da000404 	addi	r8,sp,16
2008dca4:	003dc606 	br	2008d3c0 <__flash_rwdata_start+0xfffee5d4>
2008dca8:	d8801f17 	ldw	r2,124(sp)
2008dcac:	03000034 	movhi	r12,0
2008dcb0:	01000044 	movi	r4,1
2008dcb4:	18c00044 	addi	r3,r3,1
2008dcb8:	10800044 	addi	r2,r2,1
2008dcbc:	6301ec04 	addi	r12,r12,1968
2008dcc0:	41000115 	stw	r4,4(r8)
2008dcc4:	43000015 	stw	r12,0(r8)
2008dcc8:	d8c02015 	stw	r3,128(sp)
2008dccc:	d8801f15 	stw	r2,124(sp)
2008dcd0:	010001c4 	movi	r4,7
2008dcd4:	2080ad16 	blt	r4,r2,2008df8c <___svfprintf_internal_r+0x1a18>
2008dcd8:	42000204 	addi	r8,r8,8
2008dcdc:	8000041e 	bne	r16,zero,2008dcf0 <___svfprintf_internal_r+0x177c>
2008dce0:	dac03317 	ldw	r11,204(sp)
2008dce4:	5800021e 	bne	r11,zero,2008dcf0 <___svfprintf_internal_r+0x177c>
2008dce8:	8880004c 	andi	r2,r17,1
2008dcec:	103bf626 	beq	r2,zero,2008ccc8 <__flash_rwdata_start+0xfffededc>
2008dcf0:	db003917 	ldw	r12,228(sp)
2008dcf4:	d8801f17 	ldw	r2,124(sp)
2008dcf8:	dac03517 	ldw	r11,212(sp)
2008dcfc:	1b07883a 	add	r3,r3,r12
2008dd00:	10800044 	addi	r2,r2,1
2008dd04:	42c00015 	stw	r11,0(r8)
2008dd08:	43000115 	stw	r12,4(r8)
2008dd0c:	d8c02015 	stw	r3,128(sp)
2008dd10:	d8801f15 	stw	r2,124(sp)
2008dd14:	010001c4 	movi	r4,7
2008dd18:	20818616 	blt	r4,r2,2008e334 <___svfprintf_internal_r+0x1dc0>
2008dd1c:	42000204 	addi	r8,r8,8
2008dd20:	0421c83a 	sub	r16,zero,r16
2008dd24:	0400bc0e 	bge	zero,r16,2008e018 <___svfprintf_internal_r+0x1aa4>
2008dd28:	04800404 	movi	r18,16
2008dd2c:	9400f80e 	bge	r18,r16,2008e110 <___svfprintf_internal_r+0x1b9c>
2008dd30:	01000034 	movhi	r4,0
2008dd34:	2101ec84 	addi	r4,r4,1970
2008dd38:	d9002b15 	stw	r4,172(sp)
2008dd3c:	054001c4 	movi	r21,7
2008dd40:	dcc02f17 	ldw	r19,188(sp)
2008dd44:	00000306 	br	2008dd54 <___svfprintf_internal_r+0x17e0>
2008dd48:	42000204 	addi	r8,r8,8
2008dd4c:	843ffc04 	addi	r16,r16,-16
2008dd50:	9400f20e 	bge	r18,r16,2008e11c <___svfprintf_internal_r+0x1ba8>
2008dd54:	18c00404 	addi	r3,r3,16
2008dd58:	10800044 	addi	r2,r2,1
2008dd5c:	45000015 	stw	r20,0(r8)
2008dd60:	44800115 	stw	r18,4(r8)
2008dd64:	d8c02015 	stw	r3,128(sp)
2008dd68:	d8801f15 	stw	r2,124(sp)
2008dd6c:	a8bff60e 	bge	r21,r2,2008dd48 <__flash_rwdata_start+0xfffeef5c>
2008dd70:	9809883a 	mov	r4,r19
2008dd74:	b80b883a 	mov	r5,r23
2008dd78:	b00d883a 	mov	r6,r22
2008dd7c:	00951680 	call	20095168 <__ssprint_r>
2008dd80:	103ac41e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008dd84:	d8c02017 	ldw	r3,128(sp)
2008dd88:	d8801f17 	ldw	r2,124(sp)
2008dd8c:	da000404 	addi	r8,sp,16
2008dd90:	003fee06 	br	2008dd4c <__flash_rwdata_start+0xfffeef60>
2008dd94:	db002e17 	ldw	r12,184(sp)
2008dd98:	1805883a 	mov	r2,r3
2008dd9c:	dac02d15 	stw	r11,180(sp)
2008dda0:	0319c83a 	sub	r12,zero,r12
2008dda4:	db002e15 	stw	r12,184(sp)
2008dda8:	003acf06 	br	2008c8e8 <__flash_rwdata_start+0xfffedafc>
2008ddac:	18800044 	addi	r2,r3,1
2008ddb0:	8c400814 	ori	r17,r17,32
2008ddb4:	1c000047 	ldb	r16,1(r3)
2008ddb8:	003a4406 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008ddbc:	d9002f17 	ldw	r4,188(sp)
2008ddc0:	b80b883a 	mov	r5,r23
2008ddc4:	b00d883a 	mov	r6,r22
2008ddc8:	00951680 	call	20095168 <__ssprint_r>
2008ddcc:	103ab11e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008ddd0:	d8c02017 	ldw	r3,128(sp)
2008ddd4:	da000404 	addi	r8,sp,16
2008ddd8:	003d8a06 	br	2008d404 <__flash_rwdata_start+0xfffee618>
2008dddc:	057ff7c4 	movi	r21,-33
2008dde0:	00bfffc4 	movi	r2,-1
2008dde4:	856a703a 	and	r21,r16,r21
2008dde8:	48807126 	beq	r9,r2,2008dfb0 <___svfprintf_internal_r+0x1a3c>
2008ddec:	008011c4 	movi	r2,71
2008ddf0:	a8814d26 	beq	r21,r2,2008e328 <___svfprintf_internal_r+0x1db4>
2008ddf4:	db003817 	ldw	r12,224(sp)
2008ddf8:	8ac04014 	ori	r11,r17,256
2008ddfc:	dac02d15 	stw	r11,180(sp)
2008de00:	60015616 	blt	r12,zero,2008e35c <___svfprintf_internal_r+0x1de8>
2008de04:	dc803817 	ldw	r18,224(sp)
2008de08:	d8002a05 	stb	zero,168(sp)
2008de0c:	00801984 	movi	r2,102
2008de10:	80808c26 	beq	r16,r2,2008e044 <___svfprintf_internal_r+0x1ad0>
2008de14:	00801184 	movi	r2,70
2008de18:	80808a26 	beq	r16,r2,2008e044 <___svfprintf_internal_r+0x1ad0>
2008de1c:	00801144 	movi	r2,69
2008de20:	a8815226 	beq	r21,r2,2008e36c <___svfprintf_internal_r+0x1df8>
2008de24:	4839883a 	mov	fp,r9
2008de28:	d8802604 	addi	r2,sp,152
2008de2c:	d8800115 	stw	r2,4(sp)
2008de30:	d9002f17 	ldw	r4,188(sp)
2008de34:	d8802504 	addi	r2,sp,148
2008de38:	d9403717 	ldw	r5,220(sp)
2008de3c:	d8800215 	stw	r2,8(sp)
2008de40:	d8802104 	addi	r2,sp,132
2008de44:	df000015 	stw	fp,0(sp)
2008de48:	d8800315 	stw	r2,12(sp)
2008de4c:	900d883a 	mov	r6,r18
2008de50:	01c00084 	movi	r7,2
2008de54:	da004015 	stw	r8,256(sp)
2008de58:	da403f15 	stw	r9,252(sp)
2008de5c:	0090b4c0 	call	20090b4c <_dtoa_r>
2008de60:	d8803115 	stw	r2,196(sp)
2008de64:	008019c4 	movi	r2,103
2008de68:	da004017 	ldw	r8,256(sp)
2008de6c:	da403f17 	ldw	r9,252(sp)
2008de70:	80800226 	beq	r16,r2,2008de7c <___svfprintf_internal_r+0x1908>
2008de74:	008011c4 	movi	r2,71
2008de78:	8080841e 	bne	r16,r2,2008e08c <___svfprintf_internal_r+0x1b18>
2008de7c:	8880004c 	andi	r2,r17,1
2008de80:	10014f26 	beq	r2,zero,2008e3c0 <___svfprintf_internal_r+0x1e4c>
2008de84:	db003117 	ldw	r12,196(sp)
2008de88:	6715883a 	add	r10,r12,fp
2008de8c:	d9003717 	ldw	r4,220(sp)
2008de90:	900b883a 	mov	r5,r18
2008de94:	000d883a 	mov	r6,zero
2008de98:	000f883a 	mov	r7,zero
2008de9c:	da004015 	stw	r8,256(sp)
2008dea0:	da403f15 	stw	r9,252(sp)
2008dea4:	da803e15 	stw	r10,248(sp)
2008dea8:	0098c780 	call	20098c78 <__eqdf2>
2008deac:	da004017 	ldw	r8,256(sp)
2008deb0:	da403f17 	ldw	r9,252(sp)
2008deb4:	da803e17 	ldw	r10,248(sp)
2008deb8:	1000d926 	beq	r2,zero,2008e220 <___svfprintf_internal_r+0x1cac>
2008debc:	d8802117 	ldw	r2,132(sp)
2008dec0:	1280062e 	bgeu	r2,r10,2008dedc <___svfprintf_internal_r+0x1968>
2008dec4:	01000c04 	movi	r4,48
2008dec8:	10c00044 	addi	r3,r2,1
2008decc:	d8c02115 	stw	r3,132(sp)
2008ded0:	11000005 	stb	r4,0(r2)
2008ded4:	d8802117 	ldw	r2,132(sp)
2008ded8:	12bffb36 	bltu	r2,r10,2008dec8 <__flash_rwdata_start+0xfffef0dc>
2008dedc:	db003117 	ldw	r12,196(sp)
2008dee0:	1305c83a 	sub	r2,r2,r12
2008dee4:	d8803315 	stw	r2,204(sp)
2008dee8:	008011c4 	movi	r2,71
2008deec:	a880b626 	beq	r21,r2,2008e1c8 <___svfprintf_internal_r+0x1c54>
2008def0:	00801944 	movi	r2,101
2008def4:	14017c0e 	bge	r2,r16,2008e4e8 <___svfprintf_internal_r+0x1f74>
2008def8:	00801984 	movi	r2,102
2008defc:	80812626 	beq	r16,r2,2008e398 <___svfprintf_internal_r+0x1e24>
2008df00:	db002617 	ldw	r12,152(sp)
2008df04:	db003415 	stw	r12,208(sp)
2008df08:	db003417 	ldw	r12,208(sp)
2008df0c:	dac03317 	ldw	r11,204(sp)
2008df10:	62c11816 	blt	r12,r11,2008e374 <___svfprintf_internal_r+0x1e00>
2008df14:	8c40004c 	andi	r17,r17,1
2008df18:	88013b1e 	bne	r17,zero,2008e408 <___svfprintf_internal_r+0x1e94>
2008df1c:	6005883a 	mov	r2,r12
2008df20:	60012516 	blt	r12,zero,2008e3b8 <___svfprintf_internal_r+0x1e44>
2008df24:	dc803417 	ldw	r18,208(sp)
2008df28:	df002a07 	ldb	fp,168(sp)
2008df2c:	e000b01e 	bne	fp,zero,2008e1f0 <___svfprintf_internal_r+0x1c7c>
2008df30:	dc402d17 	ldw	r17,180(sp)
2008df34:	dd402783 	ldbu	r21,158(sp)
2008df38:	d8802a15 	stw	r2,168(sp)
2008df3c:	dcc02d15 	stw	r19,180(sp)
2008df40:	d8003215 	stw	zero,200(sp)
2008df44:	003ab706 	br	2008ca24 <__flash_rwdata_start+0xfffedc38>
2008df48:	00800034 	movhi	r2,0
2008df4c:	1081dc04 	addi	r2,r2,1904
2008df50:	d8803115 	stw	r2,196(sp)
2008df54:	003bbb06 	br	2008ce44 <__flash_rwdata_start+0xfffee058>
2008df58:	d9002f17 	ldw	r4,188(sp)
2008df5c:	04001004 	movi	r16,64
2008df60:	800b883a 	mov	r5,r16
2008df64:	008b6f40 	call	2008b6f4 <_malloc_r>
2008df68:	b8800015 	stw	r2,0(r23)
2008df6c:	b8800415 	stw	r2,16(r23)
2008df70:	10015f26 	beq	r2,zero,2008e4f0 <___svfprintf_internal_r+0x1f7c>
2008df74:	bc000515 	stw	r16,20(r23)
2008df78:	00399806 	br	2008c5dc <__flash_rwdata_start+0xfffed7f0>
2008df7c:	00800034 	movhi	r2,0
2008df80:	1081df04 	addi	r2,r2,1916
2008df84:	d8803115 	stw	r2,196(sp)
2008df88:	003f0406 	br	2008db9c <__flash_rwdata_start+0xfffeedb0>
2008df8c:	d9002f17 	ldw	r4,188(sp)
2008df90:	b80b883a 	mov	r5,r23
2008df94:	b00d883a 	mov	r6,r22
2008df98:	00951680 	call	20095168 <__ssprint_r>
2008df9c:	103a3d1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008dfa0:	dc002617 	ldw	r16,152(sp)
2008dfa4:	d8c02017 	ldw	r3,128(sp)
2008dfa8:	da000404 	addi	r8,sp,16
2008dfac:	003f4b06 	br	2008dcdc <__flash_rwdata_start+0xfffeeef0>
2008dfb0:	02400184 	movi	r9,6
2008dfb4:	003f8f06 	br	2008ddf4 <__flash_rwdata_start+0xfffef008>
2008dfb8:	db002d17 	ldw	r12,180(sp)
2008dfbc:	14c00017 	ldw	r19,0(r2)
2008dfc0:	0039883a 	mov	fp,zero
2008dfc4:	63000104 	addi	r12,r12,4
2008dfc8:	db002d15 	stw	r12,180(sp)
2008dfcc:	003bc706 	br	2008ceec <__flash_rwdata_start+0xfffee100>
2008dfd0:	d8c03117 	ldw	r3,196(sp)
2008dfd4:	b0e5c83a 	sub	r18,r22,r3
2008dfd8:	003a8d06 	br	2008ca10 <__flash_rwdata_start+0xfffedc24>
2008dfdc:	da004015 	stw	r8,256(sp)
2008dfe0:	008c4740 	call	2008c474 <strlen>
2008dfe4:	1025883a 	mov	r18,r2
2008dfe8:	da004017 	ldw	r8,256(sp)
2008dfec:	903bf20e 	bge	r18,zero,2008cfb8 <__flash_rwdata_start+0xfffee1cc>
2008dff0:	0005883a 	mov	r2,zero
2008dff4:	003bf006 	br	2008cfb8 <__flash_rwdata_start+0xfffee1cc>
2008dff8:	d9002f17 	ldw	r4,188(sp)
2008dffc:	b80b883a 	mov	r5,r23
2008e000:	b00d883a 	mov	r6,r22
2008e004:	00951680 	call	20095168 <__ssprint_r>
2008e008:	103a221e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008e00c:	d8c02017 	ldw	r3,128(sp)
2008e010:	d8801f17 	ldw	r2,124(sp)
2008e014:	da000404 	addi	r8,sp,16
2008e018:	db003317 	ldw	r12,204(sp)
2008e01c:	dac03117 	ldw	r11,196(sp)
2008e020:	10800044 	addi	r2,r2,1
2008e024:	1b07883a 	add	r3,r3,r12
2008e028:	42c00015 	stw	r11,0(r8)
2008e02c:	43000115 	stw	r12,4(r8)
2008e030:	d8c02015 	stw	r3,128(sp)
2008e034:	d8801f15 	stw	r2,124(sp)
2008e038:	010001c4 	movi	r4,7
2008e03c:	20bb210e 	bge	r4,r2,2008ccc4 <__flash_rwdata_start+0xfffeded8>
2008e040:	003da206 	br	2008d6cc <__flash_rwdata_start+0xfffee8e0>
2008e044:	d8802604 	addi	r2,sp,152
2008e048:	d8800115 	stw	r2,4(sp)
2008e04c:	d9002f17 	ldw	r4,188(sp)
2008e050:	d8802504 	addi	r2,sp,148
2008e054:	d9403717 	ldw	r5,220(sp)
2008e058:	d8800215 	stw	r2,8(sp)
2008e05c:	d8802104 	addi	r2,sp,132
2008e060:	da400015 	stw	r9,0(sp)
2008e064:	d8800315 	stw	r2,12(sp)
2008e068:	900d883a 	mov	r6,r18
2008e06c:	01c000c4 	movi	r7,3
2008e070:	da004015 	stw	r8,256(sp)
2008e074:	da403f15 	stw	r9,252(sp)
2008e078:	0090b4c0 	call	20090b4c <_dtoa_r>
2008e07c:	da403f17 	ldw	r9,252(sp)
2008e080:	da004017 	ldw	r8,256(sp)
2008e084:	d8803115 	stw	r2,196(sp)
2008e088:	4839883a 	mov	fp,r9
2008e08c:	dac03117 	ldw	r11,196(sp)
2008e090:	00801184 	movi	r2,70
2008e094:	5f15883a 	add	r10,r11,fp
2008e098:	a8bf7c1e 	bne	r21,r2,2008de8c <__flash_rwdata_start+0xfffef0a0>
2008e09c:	59000007 	ldb	r4,0(r11)
2008e0a0:	00800c04 	movi	r2,48
2008e0a4:	2080c826 	beq	r4,r2,2008e3c8 <___svfprintf_internal_r+0x1e54>
2008e0a8:	d8c02617 	ldw	r3,152(sp)
2008e0ac:	50d5883a 	add	r10,r10,r3
2008e0b0:	003f7606 	br	2008de8c <__flash_rwdata_start+0xfffef0a0>
2008e0b4:	01000034 	movhi	r4,0
2008e0b8:	2101f084 	addi	r4,r4,1986
2008e0bc:	d9003615 	stw	r4,216(sp)
2008e0c0:	003a9706 	br	2008cb20 <__flash_rwdata_start+0xfffedd34>
2008e0c4:	0025883a 	mov	r18,zero
2008e0c8:	003dc306 	br	2008d7d8 <__flash_rwdata_start+0xfffee9ec>
2008e0cc:	d9002f17 	ldw	r4,188(sp)
2008e0d0:	b80b883a 	mov	r5,r23
2008e0d4:	b00d883a 	mov	r6,r22
2008e0d8:	00951680 	call	20095168 <__ssprint_r>
2008e0dc:	1039ed1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008e0e0:	d8c02017 	ldw	r3,128(sp)
2008e0e4:	da000404 	addi	r8,sp,16
2008e0e8:	003dba06 	br	2008d7d4 <__flash_rwdata_start+0xfffee9e8>
2008e0ec:	d9002f17 	ldw	r4,188(sp)
2008e0f0:	b80b883a 	mov	r5,r23
2008e0f4:	b00d883a 	mov	r6,r22
2008e0f8:	00951680 	call	20095168 <__ssprint_r>
2008e0fc:	1039e51e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008e100:	d8802617 	ldw	r2,152(sp)
2008e104:	d8c02017 	ldw	r3,128(sp)
2008e108:	da000404 	addi	r8,sp,16
2008e10c:	003e4106 	br	2008da14 <__flash_rwdata_start+0xfffeec28>
2008e110:	03000034 	movhi	r12,0
2008e114:	6301ec84 	addi	r12,r12,1970
2008e118:	db002b15 	stw	r12,172(sp)
2008e11c:	dac02b17 	ldw	r11,172(sp)
2008e120:	1c07883a 	add	r3,r3,r16
2008e124:	10800044 	addi	r2,r2,1
2008e128:	42c00015 	stw	r11,0(r8)
2008e12c:	44000115 	stw	r16,4(r8)
2008e130:	d8c02015 	stw	r3,128(sp)
2008e134:	d8801f15 	stw	r2,124(sp)
2008e138:	010001c4 	movi	r4,7
2008e13c:	20bfae16 	blt	r4,r2,2008dff8 <__flash_rwdata_start+0xfffef20c>
2008e140:	42000204 	addi	r8,r8,8
2008e144:	003fb406 	br	2008e018 <__flash_rwdata_start+0xfffef22c>
2008e148:	0021883a 	mov	r16,zero
2008e14c:	003e4306 	br	2008da5c <__flash_rwdata_start+0xfffeec70>
2008e150:	d9002f17 	ldw	r4,188(sp)
2008e154:	b80b883a 	mov	r5,r23
2008e158:	b00d883a 	mov	r6,r22
2008e15c:	00951680 	call	20095168 <__ssprint_r>
2008e160:	1039cc1e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008e164:	d8802617 	ldw	r2,152(sp)
2008e168:	db003317 	ldw	r12,204(sp)
2008e16c:	d8c02017 	ldw	r3,128(sp)
2008e170:	da000404 	addi	r8,sp,16
2008e174:	6085c83a 	sub	r2,r12,r2
2008e178:	003e3706 	br	2008da58 <__flash_rwdata_start+0xfffeec6c>
2008e17c:	00800184 	movi	r2,6
2008e180:	1240012e 	bgeu	r2,r9,2008e188 <___svfprintf_internal_r+0x1c14>
2008e184:	1013883a 	mov	r9,r2
2008e188:	4825883a 	mov	r18,r9
2008e18c:	4805883a 	mov	r2,r9
2008e190:	4800a216 	blt	r9,zero,2008e41c <___svfprintf_internal_r+0x1ea8>
2008e194:	d8802a15 	stw	r2,168(sp)
2008e198:	00800034 	movhi	r2,0
2008e19c:	1081ea04 	addi	r2,r2,1960
2008e1a0:	d8803115 	stw	r2,196(sp)
2008e1a4:	dcc02d15 	stw	r19,180(sp)
2008e1a8:	d8003215 	stw	zero,200(sp)
2008e1ac:	d8003415 	stw	zero,208(sp)
2008e1b0:	0005883a 	mov	r2,zero
2008e1b4:	003a2206 	br	2008ca40 <__flash_rwdata_start+0xfffedc54>
2008e1b8:	03000034 	movhi	r12,0
2008e1bc:	6301f084 	addi	r12,r12,1986
2008e1c0:	db003615 	stw	r12,216(sp)
2008e1c4:	003ae506 	br	2008cd5c <__flash_rwdata_start+0xfffedf70>
2008e1c8:	d8c02617 	ldw	r3,152(sp)
2008e1cc:	00bfff44 	movi	r2,-3
2008e1d0:	18801516 	blt	r3,r2,2008e228 <___svfprintf_internal_r+0x1cb4>
2008e1d4:	48c01416 	blt	r9,r3,2008e228 <___svfprintf_internal_r+0x1cb4>
2008e1d8:	d8c03415 	stw	r3,208(sp)
2008e1dc:	040019c4 	movi	r16,103
2008e1e0:	003f4906 	br	2008df08 <__flash_rwdata_start+0xfffef11c>
2008e1e4:	05400b44 	movi	r21,45
2008e1e8:	dd402785 	stb	r21,158(sp)
2008e1ec:	003b1006 	br	2008ce30 <__flash_rwdata_start+0xfffee044>
2008e1f0:	00c00b44 	movi	r3,45
2008e1f4:	d8802a15 	stw	r2,168(sp)
2008e1f8:	dc402d17 	ldw	r17,180(sp)
2008e1fc:	d8c02785 	stb	r3,158(sp)
2008e200:	dcc02d15 	stw	r19,180(sp)
2008e204:	d8003215 	stw	zero,200(sp)
2008e208:	00800b44 	movi	r2,45
2008e20c:	003a0906 	br	2008ca34 <__flash_rwdata_start+0xfffedc48>
2008e210:	01000034 	movhi	r4,0
2008e214:	2101ec84 	addi	r4,r4,1970
2008e218:	d9002b15 	stw	r4,172(sp)
2008e21c:	003cc306 	br	2008d52c <__flash_rwdata_start+0xfffee740>
2008e220:	5005883a 	mov	r2,r10
2008e224:	003f2d06 	br	2008dedc <__flash_rwdata_start+0xfffef0f0>
2008e228:	843fff84 	addi	r16,r16,-2
2008e22c:	1f3fffc4 	addi	fp,r3,-1
2008e230:	df002615 	stw	fp,152(sp)
2008e234:	dc0022c5 	stb	r16,139(sp)
2008e238:	e000a016 	blt	fp,zero,2008e4bc <___svfprintf_internal_r+0x1f48>
2008e23c:	00800ac4 	movi	r2,43
2008e240:	d8802305 	stb	r2,140(sp)
2008e244:	00800244 	movi	r2,9
2008e248:	1700800e 	bge	r2,fp,2008e44c <___svfprintf_internal_r+0x1ed8>
2008e24c:	dd4022c4 	addi	r21,sp,139
2008e250:	dc002b15 	stw	r16,172(sp)
2008e254:	4025883a 	mov	r18,r8
2008e258:	a821883a 	mov	r16,r21
2008e25c:	e009883a 	mov	r4,fp
2008e260:	01400284 	movi	r5,10
2008e264:	0088b940 	call	20088b94 <__modsi3>
2008e268:	10800c04 	addi	r2,r2,48
2008e26c:	843fffc4 	addi	r16,r16,-1
2008e270:	e009883a 	mov	r4,fp
2008e274:	01400284 	movi	r5,10
2008e278:	80800005 	stb	r2,0(r16)
2008e27c:	0088b400 	call	20088b40 <__divsi3>
2008e280:	1039883a 	mov	fp,r2
2008e284:	00800244 	movi	r2,9
2008e288:	173ff416 	blt	r2,fp,2008e25c <__flash_rwdata_start+0xfffef470>
2008e28c:	9011883a 	mov	r8,r18
2008e290:	e0800c04 	addi	r2,fp,48
2008e294:	8025883a 	mov	r18,r16
2008e298:	913fffc4 	addi	r4,r18,-1
2008e29c:	90bfffc5 	stb	r2,-1(r18)
2008e2a0:	dc002b17 	ldw	r16,172(sp)
2008e2a4:	25408e2e 	bgeu	r4,r21,2008e4e0 <___svfprintf_internal_r+0x1f6c>
2008e2a8:	d9402384 	addi	r5,sp,142
2008e2ac:	2c8bc83a 	sub	r5,r5,r18
2008e2b0:	d8c02344 	addi	r3,sp,141
2008e2b4:	a94b883a 	add	r5,r21,r5
2008e2b8:	00000106 	br	2008e2c0 <___svfprintf_internal_r+0x1d4c>
2008e2bc:	20800003 	ldbu	r2,0(r4)
2008e2c0:	18800005 	stb	r2,0(r3)
2008e2c4:	18c00044 	addi	r3,r3,1
2008e2c8:	21000044 	addi	r4,r4,1
2008e2cc:	197ffb1e 	bne	r3,r5,2008e2bc <__flash_rwdata_start+0xfffef4d0>
2008e2d0:	d8802304 	addi	r2,sp,140
2008e2d4:	1485c83a 	sub	r2,r2,r18
2008e2d8:	d8c02344 	addi	r3,sp,141
2008e2dc:	1885883a 	add	r2,r3,r2
2008e2e0:	dac03317 	ldw	r11,204(sp)
2008e2e4:	156bc83a 	sub	r21,r2,r21
2008e2e8:	dd403a15 	stw	r21,232(sp)
2008e2ec:	00800044 	movi	r2,1
2008e2f0:	5d65883a 	add	r18,r11,r21
2008e2f4:	12c0770e 	bge	r2,r11,2008e4d4 <___svfprintf_internal_r+0x1f60>
2008e2f8:	94800044 	addi	r18,r18,1
2008e2fc:	9005883a 	mov	r2,r18
2008e300:	90007216 	blt	r18,zero,2008e4cc <___svfprintf_internal_r+0x1f58>
2008e304:	d8003415 	stw	zero,208(sp)
2008e308:	003f0706 	br	2008df28 <__flash_rwdata_start+0xfffef13c>
2008e30c:	da402a15 	stw	r9,168(sp)
2008e310:	dd402783 	ldbu	r21,158(sp)
2008e314:	4825883a 	mov	r18,r9
2008e318:	dcc02d15 	stw	r19,180(sp)
2008e31c:	d8003215 	stw	zero,200(sp)
2008e320:	d8003415 	stw	zero,208(sp)
2008e324:	0039bf06 	br	2008ca24 <__flash_rwdata_start+0xfffedc38>
2008e328:	483eb21e 	bne	r9,zero,2008ddf4 <__flash_rwdata_start+0xfffef008>
2008e32c:	9013883a 	mov	r9,r18
2008e330:	003eb006 	br	2008ddf4 <__flash_rwdata_start+0xfffef008>
2008e334:	d9002f17 	ldw	r4,188(sp)
2008e338:	b80b883a 	mov	r5,r23
2008e33c:	b00d883a 	mov	r6,r22
2008e340:	00951680 	call	20095168 <__ssprint_r>
2008e344:	1039531e 	bne	r2,zero,2008c894 <__flash_rwdata_start+0xfffedaa8>
2008e348:	dc002617 	ldw	r16,152(sp)
2008e34c:	d8c02017 	ldw	r3,128(sp)
2008e350:	d8801f17 	ldw	r2,124(sp)
2008e354:	da000404 	addi	r8,sp,16
2008e358:	003e7106 	br	2008dd20 <__flash_rwdata_start+0xfffeef34>
2008e35c:	00c00b44 	movi	r3,45
2008e360:	64a0003c 	xorhi	r18,r12,32768
2008e364:	d8c02a05 	stb	r3,168(sp)
2008e368:	003ea806 	br	2008de0c <__flash_rwdata_start+0xfffef020>
2008e36c:	4f000044 	addi	fp,r9,1
2008e370:	003ead06 	br	2008de28 <__flash_rwdata_start+0xfffef03c>
2008e374:	d8c03417 	ldw	r3,208(sp)
2008e378:	00c0410e 	bge	zero,r3,2008e480 <___svfprintf_internal_r+0x1f0c>
2008e37c:	04800044 	movi	r18,1
2008e380:	dac03317 	ldw	r11,204(sp)
2008e384:	92e5883a 	add	r18,r18,r11
2008e388:	9005883a 	mov	r2,r18
2008e38c:	903ee60e 	bge	r18,zero,2008df28 <__flash_rwdata_start+0xfffef13c>
2008e390:	0005883a 	mov	r2,zero
2008e394:	003ee406 	br	2008df28 <__flash_rwdata_start+0xfffef13c>
2008e398:	d8c02617 	ldw	r3,152(sp)
2008e39c:	d8c03415 	stw	r3,208(sp)
2008e3a0:	00c0310e 	bge	zero,r3,2008e468 <___svfprintf_internal_r+0x1ef4>
2008e3a4:	48001f1e 	bne	r9,zero,2008e424 <___svfprintf_internal_r+0x1eb0>
2008e3a8:	8c40004c 	andi	r17,r17,1
2008e3ac:	88001d1e 	bne	r17,zero,2008e424 <___svfprintf_internal_r+0x1eb0>
2008e3b0:	1805883a 	mov	r2,r3
2008e3b4:	183edb0e 	bge	r3,zero,2008df24 <__flash_rwdata_start+0xfffef138>
2008e3b8:	0005883a 	mov	r2,zero
2008e3bc:	003ed906 	br	2008df24 <__flash_rwdata_start+0xfffef138>
2008e3c0:	d8802117 	ldw	r2,132(sp)
2008e3c4:	003ec506 	br	2008dedc <__flash_rwdata_start+0xfffef0f0>
2008e3c8:	d9003717 	ldw	r4,220(sp)
2008e3cc:	900b883a 	mov	r5,r18
2008e3d0:	000d883a 	mov	r6,zero
2008e3d4:	000f883a 	mov	r7,zero
2008e3d8:	da004015 	stw	r8,256(sp)
2008e3dc:	da403f15 	stw	r9,252(sp)
2008e3e0:	da803e15 	stw	r10,248(sp)
2008e3e4:	0098c780 	call	20098c78 <__eqdf2>
2008e3e8:	da004017 	ldw	r8,256(sp)
2008e3ec:	da403f17 	ldw	r9,252(sp)
2008e3f0:	da803e17 	ldw	r10,248(sp)
2008e3f4:	103f2c26 	beq	r2,zero,2008e0a8 <__flash_rwdata_start+0xfffef2bc>
2008e3f8:	00800044 	movi	r2,1
2008e3fc:	1707c83a 	sub	r3,r2,fp
2008e400:	d8c02615 	stw	r3,152(sp)
2008e404:	003f2906 	br	2008e0ac <__flash_rwdata_start+0xfffef2c0>
2008e408:	db003417 	ldw	r12,208(sp)
2008e40c:	64800044 	addi	r18,r12,1
2008e410:	9005883a 	mov	r2,r18
2008e414:	903ec40e 	bge	r18,zero,2008df28 <__flash_rwdata_start+0xfffef13c>
2008e418:	003fdd06 	br	2008e390 <__flash_rwdata_start+0xfffef5a4>
2008e41c:	0005883a 	mov	r2,zero
2008e420:	003f5c06 	br	2008e194 <__flash_rwdata_start+0xfffef3a8>
2008e424:	dac03417 	ldw	r11,208(sp)
2008e428:	4a400044 	addi	r9,r9,1
2008e42c:	5a65883a 	add	r18,r11,r9
2008e430:	9005883a 	mov	r2,r18
2008e434:	903ebc0e 	bge	r18,zero,2008df28 <__flash_rwdata_start+0xfffef13c>
2008e438:	003fd506 	br	2008e390 <__flash_rwdata_start+0xfffef5a4>
2008e43c:	00800034 	movhi	r2,0
2008e440:	1081ec84 	addi	r2,r2,1970
2008e444:	d8802b15 	stw	r2,172(sp)
2008e448:	003d2b06 	br	2008d8f8 <__flash_rwdata_start+0xfffeeb0c>
2008e44c:	00800c04 	movi	r2,48
2008e450:	e0c00c04 	addi	r3,fp,48
2008e454:	d8802345 	stb	r2,141(sp)
2008e458:	d8c02385 	stb	r3,142(sp)
2008e45c:	d88023c4 	addi	r2,sp,143
2008e460:	dd4022c4 	addi	r21,sp,139
2008e464:	003f9e06 	br	2008e2e0 <__flash_rwdata_start+0xfffef4f4>
2008e468:	4800081e 	bne	r9,zero,2008e48c <___svfprintf_internal_r+0x1f18>
2008e46c:	8c40004c 	andi	r17,r17,1
2008e470:	8800061e 	bne	r17,zero,2008e48c <___svfprintf_internal_r+0x1f18>
2008e474:	00800044 	movi	r2,1
2008e478:	1025883a 	mov	r18,r2
2008e47c:	003eaa06 	br	2008df28 <__flash_rwdata_start+0xfffef13c>
2008e480:	04800084 	movi	r18,2
2008e484:	90e5c83a 	sub	r18,r18,r3
2008e488:	003fbd06 	br	2008e380 <__flash_rwdata_start+0xfffef594>
2008e48c:	4c800084 	addi	r18,r9,2
2008e490:	9005883a 	mov	r2,r18
2008e494:	903ea40e 	bge	r18,zero,2008df28 <__flash_rwdata_start+0xfffef13c>
2008e498:	003fbd06 	br	2008e390 <__flash_rwdata_start+0xfffef5a4>
2008e49c:	dac02d17 	ldw	r11,180(sp)
2008e4a0:	5a400017 	ldw	r9,0(r11)
2008e4a4:	5ac00104 	addi	r11,r11,4
2008e4a8:	dac02d15 	stw	r11,180(sp)
2008e4ac:	483e410e 	bge	r9,zero,2008ddb4 <__flash_rwdata_start+0xfffeefc8>
2008e4b0:	027fffc4 	movi	r9,-1
2008e4b4:	1c000047 	ldb	r16,1(r3)
2008e4b8:	00388406 	br	2008c6cc <__flash_rwdata_start+0xfffed8e0>
2008e4bc:	00800b44 	movi	r2,45
2008e4c0:	0739c83a 	sub	fp,zero,fp
2008e4c4:	d8802305 	stb	r2,140(sp)
2008e4c8:	003f5e06 	br	2008e244 <__flash_rwdata_start+0xfffef458>
2008e4cc:	0005883a 	mov	r2,zero
2008e4d0:	003f8c06 	br	2008e304 <__flash_rwdata_start+0xfffef518>
2008e4d4:	88a2703a 	and	r17,r17,r2
2008e4d8:	883f8826 	beq	r17,zero,2008e2fc <__flash_rwdata_start+0xfffef510>
2008e4dc:	003f8606 	br	2008e2f8 <__flash_rwdata_start+0xfffef50c>
2008e4e0:	d8802344 	addi	r2,sp,141
2008e4e4:	003f7e06 	br	2008e2e0 <__flash_rwdata_start+0xfffef4f4>
2008e4e8:	d8c02617 	ldw	r3,152(sp)
2008e4ec:	003f4f06 	br	2008e22c <__flash_rwdata_start+0xfffef440>
2008e4f0:	dac02f17 	ldw	r11,188(sp)
2008e4f4:	00800304 	movi	r2,12
2008e4f8:	58800015 	stw	r2,0(r11)
2008e4fc:	00bfffc4 	movi	r2,-1
2008e500:	0038e806 	br	2008c8a4 <__flash_rwdata_start+0xfffedab8>

2008e504 <___vfprintf_internal_r>:
2008e504:	deffb604 	addi	sp,sp,-296
2008e508:	dfc04915 	stw	ra,292(sp)
2008e50c:	ddc04715 	stw	r23,284(sp)
2008e510:	dd804615 	stw	r22,280(sp)
2008e514:	282f883a 	mov	r23,r5
2008e518:	202d883a 	mov	r22,r4
2008e51c:	d9802a15 	stw	r6,168(sp)
2008e520:	d9c02d15 	stw	r7,180(sp)
2008e524:	df004815 	stw	fp,288(sp)
2008e528:	dd404515 	stw	r21,276(sp)
2008e52c:	dd004415 	stw	r20,272(sp)
2008e530:	dcc04315 	stw	r19,268(sp)
2008e534:	dc804215 	stw	r18,264(sp)
2008e538:	dc404115 	stw	r17,260(sp)
2008e53c:	dc004015 	stw	r16,256(sp)
2008e540:	00933b00 	call	200933b0 <_localeconv_r>
2008e544:	10800017 	ldw	r2,0(r2)
2008e548:	1009883a 	mov	r4,r2
2008e54c:	d8803515 	stw	r2,212(sp)
2008e550:	008c4740 	call	2008c474 <strlen>
2008e554:	d8803815 	stw	r2,224(sp)
2008e558:	b0000226 	beq	r22,zero,2008e564 <___vfprintf_internal_r+0x60>
2008e55c:	b0800e17 	ldw	r2,56(r22)
2008e560:	1000e126 	beq	r2,zero,2008e8e8 <___vfprintf_internal_r+0x3e4>
2008e564:	b880030b 	ldhu	r2,12(r23)
2008e568:	10c8000c 	andi	r3,r2,8192
2008e56c:	1800061e 	bne	r3,zero,2008e588 <___vfprintf_internal_r+0x84>
2008e570:	b9001917 	ldw	r4,100(r23)
2008e574:	00f7ffc4 	movi	r3,-8193
2008e578:	10880014 	ori	r2,r2,8192
2008e57c:	20c6703a 	and	r3,r4,r3
2008e580:	b880030d 	sth	r2,12(r23)
2008e584:	b8c01915 	stw	r3,100(r23)
2008e588:	10c0020c 	andi	r3,r2,8
2008e58c:	1800a726 	beq	r3,zero,2008e82c <___vfprintf_internal_r+0x328>
2008e590:	b8c00417 	ldw	r3,16(r23)
2008e594:	1800a526 	beq	r3,zero,2008e82c <___vfprintf_internal_r+0x328>
2008e598:	1080068c 	andi	r2,r2,26
2008e59c:	00c00284 	movi	r3,10
2008e5a0:	10c0aa26 	beq	r2,r3,2008e84c <___vfprintf_internal_r+0x348>
2008e5a4:	dac01e04 	addi	r11,sp,120
2008e5a8:	db001dc4 	addi	r12,sp,119
2008e5ac:	d8800404 	addi	r2,sp,16
2008e5b0:	05000034 	movhi	r20,0
2008e5b4:	dac02815 	stw	r11,160(sp)
2008e5b8:	5b17c83a 	sub	r11,r11,r12
2008e5bc:	a501f484 	addi	r20,r20,2002
2008e5c0:	db002915 	stw	r12,164(sp)
2008e5c4:	d8801e15 	stw	r2,120(sp)
2008e5c8:	d8002015 	stw	zero,128(sp)
2008e5cc:	d8001f15 	stw	zero,124(sp)
2008e5d0:	d8003315 	stw	zero,204(sp)
2008e5d4:	d8003715 	stw	zero,220(sp)
2008e5d8:	d8003915 	stw	zero,228(sp)
2008e5dc:	1011883a 	mov	r8,r2
2008e5e0:	d8003b15 	stw	zero,236(sp)
2008e5e4:	d8003a15 	stw	zero,232(sp)
2008e5e8:	d8002f15 	stw	zero,188(sp)
2008e5ec:	dac03c15 	stw	r11,240(sp)
2008e5f0:	db002a17 	ldw	r12,168(sp)
2008e5f4:	60800007 	ldb	r2,0(r12)
2008e5f8:	1000be26 	beq	r2,zero,2008e8f4 <___vfprintf_internal_r+0x3f0>
2008e5fc:	00c00944 	movi	r3,37
2008e600:	10c0bc26 	beq	r2,r3,2008e8f4 <___vfprintf_internal_r+0x3f0>
2008e604:	6021883a 	mov	r16,r12
2008e608:	00000106 	br	2008e610 <___vfprintf_internal_r+0x10c>
2008e60c:	10c08426 	beq	r2,r3,2008e820 <___vfprintf_internal_r+0x31c>
2008e610:	84000044 	addi	r16,r16,1
2008e614:	80800007 	ldb	r2,0(r16)
2008e618:	103ffc1e 	bne	r2,zero,2008e60c <__flash_rwdata_start+0xfffef820>
2008e61c:	dac02a17 	ldw	r11,168(sp)
2008e620:	82e3c83a 	sub	r17,r16,r11
2008e624:	88000f26 	beq	r17,zero,2008e664 <___vfprintf_internal_r+0x160>
2008e628:	d8c02017 	ldw	r3,128(sp)
2008e62c:	d8801f17 	ldw	r2,124(sp)
2008e630:	dac02a17 	ldw	r11,168(sp)
2008e634:	1c47883a 	add	r3,r3,r17
2008e638:	10800044 	addi	r2,r2,1
2008e63c:	d8c02015 	stw	r3,128(sp)
2008e640:	42c00015 	stw	r11,0(r8)
2008e644:	44400115 	stw	r17,4(r8)
2008e648:	d8801f15 	stw	r2,124(sp)
2008e64c:	00c001c4 	movi	r3,7
2008e650:	18809316 	blt	r3,r2,2008e8a0 <___vfprintf_internal_r+0x39c>
2008e654:	42000204 	addi	r8,r8,8
2008e658:	db002f17 	ldw	r12,188(sp)
2008e65c:	6459883a 	add	r12,r12,r17
2008e660:	db002f15 	stw	r12,188(sp)
2008e664:	80800007 	ldb	r2,0(r16)
2008e668:	10009426 	beq	r2,zero,2008e8bc <___vfprintf_internal_r+0x3b8>
2008e66c:	80800044 	addi	r2,r16,1
2008e670:	84000047 	ldb	r16,1(r16)
2008e674:	d8002785 	stb	zero,158(sp)
2008e678:	000d883a 	mov	r6,zero
2008e67c:	027fffc4 	movi	r9,-1
2008e680:	d8002e15 	stw	zero,184(sp)
2008e684:	0023883a 	mov	r17,zero
2008e688:	01001604 	movi	r4,88
2008e68c:	01400244 	movi	r5,9
2008e690:	02800a84 	movi	r10,42
2008e694:	01c01b04 	movi	r7,108
2008e698:	10c00044 	addi	r3,r2,1
2008e69c:	80bff804 	addi	r2,r16,-32
2008e6a0:	2082cd36 	bltu	r4,r2,2008f1d8 <___vfprintf_internal_r+0xcd4>
2008e6a4:	100490ba 	slli	r2,r2,2
2008e6a8:	02c80274 	movhi	r11,8201
2008e6ac:	5af9af04 	addi	r11,r11,-6468
2008e6b0:	12c5883a 	add	r2,r2,r11
2008e6b4:	10800017 	ldw	r2,0(r2)
2008e6b8:	1000683a 	jmp	r2
2008e6bc:	2008eff0 	cmpltui	zero,r4,9151
2008e6c0:	2008f1d8 	cmpnei	zero,r4,9159
2008e6c4:	2008f1d8 	cmpnei	zero,r4,9159
2008e6c8:	2008f140 	call	22008f14 <__flash_rwdata_start+0x1f6a128>
2008e6cc:	2008f1d8 	cmpnei	zero,r4,9159
2008e6d0:	2008f1d8 	cmpnei	zero,r4,9159
2008e6d4:	2008f1d8 	cmpnei	zero,r4,9159
2008e6d8:	2008f1d8 	cmpnei	zero,r4,9159
2008e6dc:	2008f1d8 	cmpnei	zero,r4,9159
2008e6e0:	2008f1d8 	cmpnei	zero,r4,9159
2008e6e4:	2008f010 	cmplti	zero,r4,9152
2008e6e8:	2008f03c 	xorhi	zero,r4,9152
2008e6ec:	2008f1d8 	cmpnei	zero,r4,9159
2008e6f0:	2008e8fc 	xorhi	zero,r4,9123
2008e6f4:	2008e90c 	andi	zero,r4,9124
2008e6f8:	2008f1d8 	cmpnei	zero,r4,9159
2008e6fc:	2008e94c 	andi	zero,r4,9125
2008e700:	2008e95c 	xori	zero,r4,9125
2008e704:	2008e95c 	xori	zero,r4,9125
2008e708:	2008e95c 	xori	zero,r4,9125
2008e70c:	2008e95c 	xori	zero,r4,9125
2008e710:	2008e95c 	xori	zero,r4,9125
2008e714:	2008e95c 	xori	zero,r4,9125
2008e718:	2008e95c 	xori	zero,r4,9125
2008e71c:	2008e95c 	xori	zero,r4,9125
2008e720:	2008e95c 	xori	zero,r4,9125
2008e724:	2008f1d8 	cmpnei	zero,r4,9159
2008e728:	2008f1d8 	cmpnei	zero,r4,9159
2008e72c:	2008f1d8 	cmpnei	zero,r4,9159
2008e730:	2008f1d8 	cmpnei	zero,r4,9159
2008e734:	2008f1d8 	cmpnei	zero,r4,9159
2008e738:	2008f1d8 	cmpnei	zero,r4,9159
2008e73c:	2008f1d8 	cmpnei	zero,r4,9159
2008e740:	2008f1d8 	cmpnei	zero,r4,9159
2008e744:	2008f1d8 	cmpnei	zero,r4,9159
2008e748:	2008f1d8 	cmpnei	zero,r4,9159
2008e74c:	2008e990 	cmplti	zero,r4,9126
2008e750:	2008ee00 	call	22008ee0 <__flash_rwdata_start+0x1f6a0f4>
2008e754:	2008f1d8 	cmpnei	zero,r4,9159
2008e758:	2008ee00 	call	22008ee0 <__flash_rwdata_start+0x1f6a0f4>
2008e75c:	2008f1d8 	cmpnei	zero,r4,9159
2008e760:	2008f1d8 	cmpnei	zero,r4,9159
2008e764:	2008f1d8 	cmpnei	zero,r4,9159
2008e768:	2008f1d8 	cmpnei	zero,r4,9159
2008e76c:	2008eeec 	andhi	zero,r4,9147
2008e770:	2008f1d8 	cmpnei	zero,r4,9159
2008e774:	2008f1d8 	cmpnei	zero,r4,9159
2008e778:	2008ed94 	ori	zero,r4,9142
2008e77c:	2008f1d8 	cmpnei	zero,r4,9159
2008e780:	2008f1d8 	cmpnei	zero,r4,9159
2008e784:	2008f1d8 	cmpnei	zero,r4,9159
2008e788:	2008f1d8 	cmpnei	zero,r4,9159
2008e78c:	2008f1d8 	cmpnei	zero,r4,9159
2008e790:	2008edd0 	cmplti	zero,r4,9143
2008e794:	2008f1d8 	cmpnei	zero,r4,9159
2008e798:	2008f1d8 	cmpnei	zero,r4,9159
2008e79c:	2008ef94 	ori	zero,r4,9150
2008e7a0:	2008f1d8 	cmpnei	zero,r4,9159
2008e7a4:	2008f1d8 	cmpnei	zero,r4,9159
2008e7a8:	2008f1d8 	cmpnei	zero,r4,9159
2008e7ac:	2008f1d8 	cmpnei	zero,r4,9159
2008e7b0:	2008f1d8 	cmpnei	zero,r4,9159
2008e7b4:	2008f1d8 	cmpnei	zero,r4,9159
2008e7b8:	2008f1d8 	cmpnei	zero,r4,9159
2008e7bc:	2008f1d8 	cmpnei	zero,r4,9159
2008e7c0:	2008f1d8 	cmpnei	zero,r4,9159
2008e7c4:	2008f1d8 	cmpnei	zero,r4,9159
2008e7c8:	2008f04c 	andi	zero,r4,9153
2008e7cc:	2008eefc 	xorhi	zero,r4,9147
2008e7d0:	2008ee00 	call	22008ee0 <__flash_rwdata_start+0x1f6a0f4>
2008e7d4:	2008ee00 	call	22008ee0 <__flash_rwdata_start+0x1f6a0f4>
2008e7d8:	2008ee00 	call	22008ee0 <__flash_rwdata_start+0x1f6a0f4>
2008e7dc:	2008ef3c 	xorhi	zero,r4,9148
2008e7e0:	2008eefc 	xorhi	zero,r4,9147
2008e7e4:	2008f1d8 	cmpnei	zero,r4,9159
2008e7e8:	2008f1d8 	cmpnei	zero,r4,9159
2008e7ec:	2008ef4c 	andi	zero,r4,9149
2008e7f0:	2008f1d8 	cmpnei	zero,r4,9159
2008e7f4:	2008ef60 	cmpeqi	zero,r4,9149
2008e7f8:	2008f19c 	xori	zero,r4,9158
2008e7fc:	2008eea4 	muli	zero,r4,9146
2008e800:	2008f150 	cmplti	zero,r4,9157
2008e804:	2008f1d8 	cmpnei	zero,r4,9159
2008e808:	2008f08c 	andi	zero,r4,9154
2008e80c:	2008f1d8 	cmpnei	zero,r4,9159
2008e810:	2008f160 	cmpeqi	zero,r4,9157
2008e814:	2008f1d8 	cmpnei	zero,r4,9159
2008e818:	2008f1d8 	cmpnei	zero,r4,9159
2008e81c:	2008f100 	call	22008f10 <__flash_rwdata_start+0x1f6a124>
2008e820:	db002a17 	ldw	r12,168(sp)
2008e824:	8323c83a 	sub	r17,r16,r12
2008e828:	003f7e06 	br	2008e624 <__flash_rwdata_start+0xfffef838>
2008e82c:	b009883a 	mov	r4,r22
2008e830:	b80b883a 	mov	r5,r23
2008e834:	00906640 	call	20090664 <__swsetup_r>
2008e838:	10000c1e 	bne	r2,zero,2008e86c <___vfprintf_internal_r+0x368>
2008e83c:	b880030b 	ldhu	r2,12(r23)
2008e840:	00c00284 	movi	r3,10
2008e844:	1080068c 	andi	r2,r2,26
2008e848:	10ff561e 	bne	r2,r3,2008e5a4 <__flash_rwdata_start+0xfffef7b8>
2008e84c:	b880038f 	ldh	r2,14(r23)
2008e850:	103f5416 	blt	r2,zero,2008e5a4 <__flash_rwdata_start+0xfffef7b8>
2008e854:	d9802a17 	ldw	r6,168(sp)
2008e858:	d9c02d17 	ldw	r7,180(sp)
2008e85c:	b009883a 	mov	r4,r22
2008e860:	b80b883a 	mov	r5,r23
2008e864:	00904780 	call	20090478 <__sbprintf>
2008e868:	00000106 	br	2008e870 <___vfprintf_internal_r+0x36c>
2008e86c:	00bfffc4 	movi	r2,-1
2008e870:	dfc04917 	ldw	ra,292(sp)
2008e874:	df004817 	ldw	fp,288(sp)
2008e878:	ddc04717 	ldw	r23,284(sp)
2008e87c:	dd804617 	ldw	r22,280(sp)
2008e880:	dd404517 	ldw	r21,276(sp)
2008e884:	dd004417 	ldw	r20,272(sp)
2008e888:	dcc04317 	ldw	r19,268(sp)
2008e88c:	dc804217 	ldw	r18,264(sp)
2008e890:	dc404117 	ldw	r17,260(sp)
2008e894:	dc004017 	ldw	r16,256(sp)
2008e898:	dec04a04 	addi	sp,sp,296
2008e89c:	f800283a 	ret
2008e8a0:	b009883a 	mov	r4,r22
2008e8a4:	b80b883a 	mov	r5,r23
2008e8a8:	d9801e04 	addi	r6,sp,120
2008e8ac:	00964680 	call	20096468 <__sprint_r>
2008e8b0:	1000081e 	bne	r2,zero,2008e8d4 <___vfprintf_internal_r+0x3d0>
2008e8b4:	da000404 	addi	r8,sp,16
2008e8b8:	003f6706 	br	2008e658 <__flash_rwdata_start+0xfffef86c>
2008e8bc:	d8802017 	ldw	r2,128(sp)
2008e8c0:	10000426 	beq	r2,zero,2008e8d4 <___vfprintf_internal_r+0x3d0>
2008e8c4:	b009883a 	mov	r4,r22
2008e8c8:	b80b883a 	mov	r5,r23
2008e8cc:	d9801e04 	addi	r6,sp,120
2008e8d0:	00964680 	call	20096468 <__sprint_r>
2008e8d4:	b880030b 	ldhu	r2,12(r23)
2008e8d8:	1080100c 	andi	r2,r2,64
2008e8dc:	103fe31e 	bne	r2,zero,2008e86c <__flash_rwdata_start+0xfffefa80>
2008e8e0:	d8802f17 	ldw	r2,188(sp)
2008e8e4:	003fe206 	br	2008e870 <__flash_rwdata_start+0xfffefa84>
2008e8e8:	b009883a 	mov	r4,r22
2008e8ec:	00928580 	call	20092858 <__sinit>
2008e8f0:	003f1c06 	br	2008e564 <__flash_rwdata_start+0xfffef778>
2008e8f4:	dc002a17 	ldw	r16,168(sp)
2008e8f8:	003f5a06 	br	2008e664 <__flash_rwdata_start+0xfffef878>
2008e8fc:	1805883a 	mov	r2,r3
2008e900:	8c400114 	ori	r17,r17,4
2008e904:	1c000007 	ldb	r16,0(r3)
2008e908:	003f6306 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008e90c:	1c000007 	ldb	r16,0(r3)
2008e910:	18800044 	addi	r2,r3,1
2008e914:	8286ad26 	beq	r16,r10,200903cc <___vfprintf_internal_r+0x1ec8>
2008e918:	82fff404 	addi	r11,r16,-48
2008e91c:	1007883a 	mov	r3,r2
2008e920:	0013883a 	mov	r9,zero
2008e924:	2aff5d36 	bltu	r5,r11,2008e69c <__flash_rwdata_start+0xfffef8b0>
2008e928:	1c000007 	ldb	r16,0(r3)
2008e92c:	4a4002a4 	muli	r9,r9,10
2008e930:	18c00044 	addi	r3,r3,1
2008e934:	5a53883a 	add	r9,r11,r9
2008e938:	82fff404 	addi	r11,r16,-48
2008e93c:	2afffa2e 	bgeu	r5,r11,2008e928 <__flash_rwdata_start+0xfffefb3c>
2008e940:	483f560e 	bge	r9,zero,2008e69c <__flash_rwdata_start+0xfffef8b0>
2008e944:	027fffc4 	movi	r9,-1
2008e948:	003f5406 	br	2008e69c <__flash_rwdata_start+0xfffef8b0>
2008e94c:	8c402014 	ori	r17,r17,128
2008e950:	1805883a 	mov	r2,r3
2008e954:	1c000007 	ldb	r16,0(r3)
2008e958:	003f4f06 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008e95c:	1805883a 	mov	r2,r3
2008e960:	d8002e15 	stw	zero,184(sp)
2008e964:	82fff404 	addi	r11,r16,-48
2008e968:	0019883a 	mov	r12,zero
2008e96c:	14000007 	ldb	r16,0(r2)
2008e970:	630002a4 	muli	r12,r12,10
2008e974:	18c00044 	addi	r3,r3,1
2008e978:	1805883a 	mov	r2,r3
2008e97c:	62d9883a 	add	r12,r12,r11
2008e980:	82fff404 	addi	r11,r16,-48
2008e984:	2afff92e 	bgeu	r5,r11,2008e96c <__flash_rwdata_start+0xfffefb80>
2008e988:	db002e15 	stw	r12,184(sp)
2008e98c:	003f4306 	br	2008e69c <__flash_rwdata_start+0xfffef8b0>
2008e990:	8c400414 	ori	r17,r17,16
2008e994:	d8c02a15 	stw	r3,168(sp)
2008e998:	d9802785 	stb	r6,158(sp)
2008e99c:	8880080c 	andi	r2,r17,32
2008e9a0:	d8c02d17 	ldw	r3,180(sp)
2008e9a4:	10015a26 	beq	r2,zero,2008ef10 <___vfprintf_internal_r+0xa0c>
2008e9a8:	db002d17 	ldw	r12,180(sp)
2008e9ac:	18800117 	ldw	r2,4(r3)
2008e9b0:	1cc00017 	ldw	r19,0(r3)
2008e9b4:	63000204 	addi	r12,r12,8
2008e9b8:	db002d15 	stw	r12,180(sp)
2008e9bc:	1039883a 	mov	fp,r2
2008e9c0:	10044516 	blt	r2,zero,2008fad8 <___vfprintf_internal_r+0x15d4>
2008e9c4:	dd402783 	ldbu	r21,158(sp)
2008e9c8:	da403215 	stw	r9,200(sp)
2008e9cc:	00800044 	movi	r2,1
2008e9d0:	9f06b03a 	or	r3,r19,fp
2008e9d4:	48000216 	blt	r9,zero,2008e9e0 <___vfprintf_internal_r+0x4dc>
2008e9d8:	013fdfc4 	movi	r4,-129
2008e9dc:	8922703a 	and	r17,r17,r4
2008e9e0:	1802071e 	bne	r3,zero,2008f200 <___vfprintf_internal_r+0xcfc>
2008e9e4:	4802fa26 	beq	r9,zero,2008f5d0 <___vfprintf_internal_r+0x10cc>
2008e9e8:	10803fcc 	andi	r2,r2,255
2008e9ec:	00c00044 	movi	r3,1
2008e9f0:	10c22926 	beq	r2,r3,2008f298 <___vfprintf_internal_r+0xd94>
2008e9f4:	00c00084 	movi	r3,2
2008e9f8:	10c31726 	beq	r2,r3,2008f658 <___vfprintf_internal_r+0x1154>
2008e9fc:	d8c01e04 	addi	r3,sp,120
2008ea00:	9808d0fa 	srli	r4,r19,3
2008ea04:	e00a977a 	slli	r5,fp,29
2008ea08:	e038d0fa 	srli	fp,fp,3
2008ea0c:	9cc001cc 	andi	r19,r19,7
2008ea10:	98800c04 	addi	r2,r19,48
2008ea14:	18ffffc4 	addi	r3,r3,-1
2008ea18:	2926b03a 	or	r19,r5,r4
2008ea1c:	18800005 	stb	r2,0(r3)
2008ea20:	9f08b03a 	or	r4,r19,fp
2008ea24:	203ff61e 	bne	r4,zero,2008ea00 <__flash_rwdata_start+0xfffefc14>
2008ea28:	8900004c 	andi	r4,r17,1
2008ea2c:	d8c03115 	stw	r3,196(sp)
2008ea30:	2003931e 	bne	r4,zero,2008f880 <___vfprintf_internal_r+0x137c>
2008ea34:	dac02817 	ldw	r11,160(sp)
2008ea38:	58e5c83a 	sub	r18,r11,r3
2008ea3c:	9005883a 	mov	r2,r18
2008ea40:	9240010e 	bge	r18,r9,2008ea48 <___vfprintf_internal_r+0x544>
2008ea44:	4805883a 	mov	r2,r9
2008ea48:	d8802b15 	stw	r2,172(sp)
2008ea4c:	d8003415 	stw	zero,208(sp)
2008ea50:	a8803fcc 	andi	r2,r21,255
2008ea54:	1080201c 	xori	r2,r2,128
2008ea58:	10bfe004 	addi	r2,r2,-128
2008ea5c:	10000326 	beq	r2,zero,2008ea6c <___vfprintf_internal_r+0x568>
2008ea60:	db002b17 	ldw	r12,172(sp)
2008ea64:	63000044 	addi	r12,r12,1
2008ea68:	db002b15 	stw	r12,172(sp)
2008ea6c:	88c0008c 	andi	r3,r17,2
2008ea70:	d8c02c15 	stw	r3,176(sp)
2008ea74:	18000326 	beq	r3,zero,2008ea84 <___vfprintf_internal_r+0x580>
2008ea78:	dac02b17 	ldw	r11,172(sp)
2008ea7c:	5ac00084 	addi	r11,r11,2
2008ea80:	dac02b15 	stw	r11,172(sp)
2008ea84:	8b00210c 	andi	r12,r17,132
2008ea88:	db003015 	stw	r12,192(sp)
2008ea8c:	6001da1e 	bne	r12,zero,2008f1f8 <___vfprintf_internal_r+0xcf4>
2008ea90:	dac02e17 	ldw	r11,184(sp)
2008ea94:	db002b17 	ldw	r12,172(sp)
2008ea98:	5b39c83a 	sub	fp,r11,r12
2008ea9c:	0701d60e 	bge	zero,fp,2008f1f8 <___vfprintf_internal_r+0xcf4>
2008eaa0:	02400404 	movi	r9,16
2008eaa4:	d8c02017 	ldw	r3,128(sp)
2008eaa8:	d8801f17 	ldw	r2,124(sp)
2008eaac:	4f053c0e 	bge	r9,fp,2008ffa0 <___vfprintf_internal_r+0x1a9c>
2008eab0:	01400034 	movhi	r5,0
2008eab4:	2941f884 	addi	r5,r5,2018
2008eab8:	d9403615 	stw	r5,216(sp)
2008eabc:	482b883a 	mov	r21,r9
2008eac0:	04c001c4 	movi	r19,7
2008eac4:	00000306 	br	2008ead4 <___vfprintf_internal_r+0x5d0>
2008eac8:	e73ffc04 	addi	fp,fp,-16
2008eacc:	42000204 	addi	r8,r8,8
2008ead0:	af00130e 	bge	r21,fp,2008eb20 <___vfprintf_internal_r+0x61c>
2008ead4:	02c00034 	movhi	r11,0
2008ead8:	18c00404 	addi	r3,r3,16
2008eadc:	10800044 	addi	r2,r2,1
2008eae0:	5ac1f884 	addi	r11,r11,2018
2008eae4:	42c00015 	stw	r11,0(r8)
2008eae8:	45400115 	stw	r21,4(r8)
2008eaec:	d8c02015 	stw	r3,128(sp)
2008eaf0:	d8801f15 	stw	r2,124(sp)
2008eaf4:	98bff40e 	bge	r19,r2,2008eac8 <__flash_rwdata_start+0xfffefcdc>
2008eaf8:	b009883a 	mov	r4,r22
2008eafc:	b80b883a 	mov	r5,r23
2008eb00:	d9801e04 	addi	r6,sp,120
2008eb04:	00964680 	call	20096468 <__sprint_r>
2008eb08:	103f721e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008eb0c:	e73ffc04 	addi	fp,fp,-16
2008eb10:	d8c02017 	ldw	r3,128(sp)
2008eb14:	d8801f17 	ldw	r2,124(sp)
2008eb18:	da000404 	addi	r8,sp,16
2008eb1c:	af3fed16 	blt	r21,fp,2008ead4 <__flash_rwdata_start+0xfffefce8>
2008eb20:	db003617 	ldw	r12,216(sp)
2008eb24:	e0c7883a 	add	r3,fp,r3
2008eb28:	10800044 	addi	r2,r2,1
2008eb2c:	43000015 	stw	r12,0(r8)
2008eb30:	47000115 	stw	fp,4(r8)
2008eb34:	d8c02015 	stw	r3,128(sp)
2008eb38:	d8801f15 	stw	r2,124(sp)
2008eb3c:	010001c4 	movi	r4,7
2008eb40:	20830e16 	blt	r4,r2,2008f77c <___vfprintf_internal_r+0x1278>
2008eb44:	d8802787 	ldb	r2,158(sp)
2008eb48:	42000204 	addi	r8,r8,8
2008eb4c:	10000c26 	beq	r2,zero,2008eb80 <___vfprintf_internal_r+0x67c>
2008eb50:	d8801f17 	ldw	r2,124(sp)
2008eb54:	d9002784 	addi	r4,sp,158
2008eb58:	18c00044 	addi	r3,r3,1
2008eb5c:	10800044 	addi	r2,r2,1
2008eb60:	41000015 	stw	r4,0(r8)
2008eb64:	01000044 	movi	r4,1
2008eb68:	41000115 	stw	r4,4(r8)
2008eb6c:	d8c02015 	stw	r3,128(sp)
2008eb70:	d8801f15 	stw	r2,124(sp)
2008eb74:	010001c4 	movi	r4,7
2008eb78:	2082a716 	blt	r4,r2,2008f618 <___vfprintf_internal_r+0x1114>
2008eb7c:	42000204 	addi	r8,r8,8
2008eb80:	dac02c17 	ldw	r11,176(sp)
2008eb84:	58000c26 	beq	r11,zero,2008ebb8 <___vfprintf_internal_r+0x6b4>
2008eb88:	d8801f17 	ldw	r2,124(sp)
2008eb8c:	d9002704 	addi	r4,sp,156
2008eb90:	18c00084 	addi	r3,r3,2
2008eb94:	10800044 	addi	r2,r2,1
2008eb98:	41000015 	stw	r4,0(r8)
2008eb9c:	01000084 	movi	r4,2
2008eba0:	41000115 	stw	r4,4(r8)
2008eba4:	d8c02015 	stw	r3,128(sp)
2008eba8:	d8801f15 	stw	r2,124(sp)
2008ebac:	010001c4 	movi	r4,7
2008ebb0:	2082a116 	blt	r4,r2,2008f638 <___vfprintf_internal_r+0x1134>
2008ebb4:	42000204 	addi	r8,r8,8
2008ebb8:	db003017 	ldw	r12,192(sp)
2008ebbc:	00802004 	movi	r2,128
2008ebc0:	60820326 	beq	r12,r2,2008f3d0 <___vfprintf_internal_r+0xecc>
2008ebc4:	db003217 	ldw	r12,200(sp)
2008ebc8:	64abc83a 	sub	r21,r12,r18
2008ebcc:	0540260e 	bge	zero,r21,2008ec68 <___vfprintf_internal_r+0x764>
2008ebd0:	07000404 	movi	fp,16
2008ebd4:	d8801f17 	ldw	r2,124(sp)
2008ebd8:	e544570e 	bge	fp,r21,2008fd38 <___vfprintf_internal_r+0x1834>
2008ebdc:	01400034 	movhi	r5,0
2008ebe0:	2941f484 	addi	r5,r5,2002
2008ebe4:	d9402c15 	stw	r5,176(sp)
2008ebe8:	04c001c4 	movi	r19,7
2008ebec:	00000306 	br	2008ebfc <___vfprintf_internal_r+0x6f8>
2008ebf0:	ad7ffc04 	addi	r21,r21,-16
2008ebf4:	42000204 	addi	r8,r8,8
2008ebf8:	e540110e 	bge	fp,r21,2008ec40 <___vfprintf_internal_r+0x73c>
2008ebfc:	18c00404 	addi	r3,r3,16
2008ec00:	10800044 	addi	r2,r2,1
2008ec04:	45000015 	stw	r20,0(r8)
2008ec08:	47000115 	stw	fp,4(r8)
2008ec0c:	d8c02015 	stw	r3,128(sp)
2008ec10:	d8801f15 	stw	r2,124(sp)
2008ec14:	98bff60e 	bge	r19,r2,2008ebf0 <__flash_rwdata_start+0xfffefe04>
2008ec18:	b009883a 	mov	r4,r22
2008ec1c:	b80b883a 	mov	r5,r23
2008ec20:	d9801e04 	addi	r6,sp,120
2008ec24:	00964680 	call	20096468 <__sprint_r>
2008ec28:	103f2a1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008ec2c:	ad7ffc04 	addi	r21,r21,-16
2008ec30:	d8c02017 	ldw	r3,128(sp)
2008ec34:	d8801f17 	ldw	r2,124(sp)
2008ec38:	da000404 	addi	r8,sp,16
2008ec3c:	e57fef16 	blt	fp,r21,2008ebfc <__flash_rwdata_start+0xfffefe10>
2008ec40:	dac02c17 	ldw	r11,176(sp)
2008ec44:	1d47883a 	add	r3,r3,r21
2008ec48:	10800044 	addi	r2,r2,1
2008ec4c:	42c00015 	stw	r11,0(r8)
2008ec50:	45400115 	stw	r21,4(r8)
2008ec54:	d8c02015 	stw	r3,128(sp)
2008ec58:	d8801f15 	stw	r2,124(sp)
2008ec5c:	010001c4 	movi	r4,7
2008ec60:	20826516 	blt	r4,r2,2008f5f8 <___vfprintf_internal_r+0x10f4>
2008ec64:	42000204 	addi	r8,r8,8
2008ec68:	8880400c 	andi	r2,r17,256
2008ec6c:	1001901e 	bne	r2,zero,2008f2b0 <___vfprintf_internal_r+0xdac>
2008ec70:	d8801f17 	ldw	r2,124(sp)
2008ec74:	db003117 	ldw	r12,196(sp)
2008ec78:	1c87883a 	add	r3,r3,r18
2008ec7c:	10800044 	addi	r2,r2,1
2008ec80:	43000015 	stw	r12,0(r8)
2008ec84:	44800115 	stw	r18,4(r8)
2008ec88:	d8c02015 	stw	r3,128(sp)
2008ec8c:	d8801f15 	stw	r2,124(sp)
2008ec90:	010001c4 	movi	r4,7
2008ec94:	20824016 	blt	r4,r2,2008f598 <___vfprintf_internal_r+0x1094>
2008ec98:	42000204 	addi	r8,r8,8
2008ec9c:	8c40010c 	andi	r17,r17,4
2008eca0:	88003126 	beq	r17,zero,2008ed68 <___vfprintf_internal_r+0x864>
2008eca4:	db002e17 	ldw	r12,184(sp)
2008eca8:	dac02b17 	ldw	r11,172(sp)
2008ecac:	62e1c83a 	sub	r16,r12,r11
2008ecb0:	04002d0e 	bge	zero,r16,2008ed68 <___vfprintf_internal_r+0x864>
2008ecb4:	04400404 	movi	r17,16
2008ecb8:	d8801f17 	ldw	r2,124(sp)
2008ecbc:	8c05150e 	bge	r17,r16,20090114 <___vfprintf_internal_r+0x1c10>
2008ecc0:	01000034 	movhi	r4,0
2008ecc4:	2101f884 	addi	r4,r4,2018
2008ecc8:	d9003615 	stw	r4,216(sp)
2008eccc:	048001c4 	movi	r18,7
2008ecd0:	00000306 	br	2008ece0 <___vfprintf_internal_r+0x7dc>
2008ecd4:	843ffc04 	addi	r16,r16,-16
2008ecd8:	42000204 	addi	r8,r8,8
2008ecdc:	8c00130e 	bge	r17,r16,2008ed2c <___vfprintf_internal_r+0x828>
2008ece0:	01400034 	movhi	r5,0
2008ece4:	18c00404 	addi	r3,r3,16
2008ece8:	10800044 	addi	r2,r2,1
2008ecec:	2941f884 	addi	r5,r5,2018
2008ecf0:	41400015 	stw	r5,0(r8)
2008ecf4:	44400115 	stw	r17,4(r8)
2008ecf8:	d8c02015 	stw	r3,128(sp)
2008ecfc:	d8801f15 	stw	r2,124(sp)
2008ed00:	90bff40e 	bge	r18,r2,2008ecd4 <__flash_rwdata_start+0xfffefee8>
2008ed04:	b009883a 	mov	r4,r22
2008ed08:	b80b883a 	mov	r5,r23
2008ed0c:	d9801e04 	addi	r6,sp,120
2008ed10:	00964680 	call	20096468 <__sprint_r>
2008ed14:	103eef1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008ed18:	843ffc04 	addi	r16,r16,-16
2008ed1c:	d8c02017 	ldw	r3,128(sp)
2008ed20:	d8801f17 	ldw	r2,124(sp)
2008ed24:	da000404 	addi	r8,sp,16
2008ed28:	8c3fed16 	blt	r17,r16,2008ece0 <__flash_rwdata_start+0xfffefef4>
2008ed2c:	dac03617 	ldw	r11,216(sp)
2008ed30:	1c07883a 	add	r3,r3,r16
2008ed34:	10800044 	addi	r2,r2,1
2008ed38:	42c00015 	stw	r11,0(r8)
2008ed3c:	44000115 	stw	r16,4(r8)
2008ed40:	d8c02015 	stw	r3,128(sp)
2008ed44:	d8801f15 	stw	r2,124(sp)
2008ed48:	010001c4 	movi	r4,7
2008ed4c:	2080060e 	bge	r4,r2,2008ed68 <___vfprintf_internal_r+0x864>
2008ed50:	b009883a 	mov	r4,r22
2008ed54:	b80b883a 	mov	r5,r23
2008ed58:	d9801e04 	addi	r6,sp,120
2008ed5c:	00964680 	call	20096468 <__sprint_r>
2008ed60:	103edc1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008ed64:	d8c02017 	ldw	r3,128(sp)
2008ed68:	d8802b17 	ldw	r2,172(sp)
2008ed6c:	db002e17 	ldw	r12,184(sp)
2008ed70:	1300010e 	bge	r2,r12,2008ed78 <___vfprintf_internal_r+0x874>
2008ed74:	6005883a 	mov	r2,r12
2008ed78:	dac02f17 	ldw	r11,188(sp)
2008ed7c:	5897883a 	add	r11,r11,r2
2008ed80:	dac02f15 	stw	r11,188(sp)
2008ed84:	18020c1e 	bne	r3,zero,2008f5b8 <___vfprintf_internal_r+0x10b4>
2008ed88:	d8001f15 	stw	zero,124(sp)
2008ed8c:	da000404 	addi	r8,sp,16
2008ed90:	003e1706 	br	2008e5f0 <__flash_rwdata_start+0xfffef804>
2008ed94:	8c400414 	ori	r17,r17,16
2008ed98:	d8c02a15 	stw	r3,168(sp)
2008ed9c:	8880080c 	andi	r2,r17,32
2008eda0:	10010126 	beq	r2,zero,2008f1a8 <___vfprintf_internal_r+0xca4>
2008eda4:	db002d17 	ldw	r12,180(sp)
2008eda8:	0005883a 	mov	r2,zero
2008edac:	64c00017 	ldw	r19,0(r12)
2008edb0:	67000117 	ldw	fp,4(r12)
2008edb4:	63000204 	addi	r12,r12,8
2008edb8:	db002d15 	stw	r12,180(sp)
2008edbc:	9f06b03a 	or	r3,r19,fp
2008edc0:	d8002785 	stb	zero,158(sp)
2008edc4:	da403215 	stw	r9,200(sp)
2008edc8:	002b883a 	mov	r21,zero
2008edcc:	003f0106 	br	2008e9d4 <__flash_rwdata_start+0xfffefbe8>
2008edd0:	8c400414 	ori	r17,r17,16
2008edd4:	d8c02a15 	stw	r3,168(sp)
2008edd8:	8880080c 	andi	r2,r17,32
2008eddc:	1000e326 	beq	r2,zero,2008f16c <___vfprintf_internal_r+0xc68>
2008ede0:	dac02d17 	ldw	r11,180(sp)
2008ede4:	00800044 	movi	r2,1
2008ede8:	5cc00017 	ldw	r19,0(r11)
2008edec:	5f000117 	ldw	fp,4(r11)
2008edf0:	5ac00204 	addi	r11,r11,8
2008edf4:	dac02d15 	stw	r11,180(sp)
2008edf8:	9f06b03a 	or	r3,r19,fp
2008edfc:	003ff006 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008ee00:	db002d17 	ldw	r12,180(sp)
2008ee04:	dac02d17 	ldw	r11,180(sp)
2008ee08:	d8c02a15 	stw	r3,168(sp)
2008ee0c:	63000017 	ldw	r12,0(r12)
2008ee10:	5ac00117 	ldw	r11,4(r11)
2008ee14:	d9802785 	stb	r6,158(sp)
2008ee18:	6009883a 	mov	r4,r12
2008ee1c:	580b883a 	mov	r5,r11
2008ee20:	db003715 	stw	r12,220(sp)
2008ee24:	da003f15 	stw	r8,252(sp)
2008ee28:	da403e15 	stw	r9,248(sp)
2008ee2c:	dac03915 	stw	r11,228(sp)
2008ee30:	0094e540 	call	20094e54 <__fpclassifyd>
2008ee34:	db002d17 	ldw	r12,180(sp)
2008ee38:	04800044 	movi	r18,1
2008ee3c:	da003f17 	ldw	r8,252(sp)
2008ee40:	64c00204 	addi	r19,r12,8
2008ee44:	da403e17 	ldw	r9,248(sp)
2008ee48:	d9003717 	ldw	r4,220(sp)
2008ee4c:	d9403917 	ldw	r5,228(sp)
2008ee50:	14832b1e 	bne	r2,r18,2008fb00 <___vfprintf_internal_r+0x15fc>
2008ee54:	000d883a 	mov	r6,zero
2008ee58:	000f883a 	mov	r7,zero
2008ee5c:	0098ddc0 	call	20098ddc <__ledf2>
2008ee60:	da003f17 	ldw	r8,252(sp)
2008ee64:	1004b716 	blt	r2,zero,20090144 <___vfprintf_internal_r+0x1c40>
2008ee68:	dd402783 	ldbu	r21,158(sp)
2008ee6c:	008011c4 	movi	r2,71
2008ee70:	14040e0e 	bge	r2,r16,2008feac <___vfprintf_internal_r+0x19a8>
2008ee74:	00c00034 	movhi	r3,0
2008ee78:	18c1dd04 	addi	r3,r3,1908
2008ee7c:	d8c03115 	stw	r3,196(sp)
2008ee80:	02c000c4 	movi	r11,3
2008ee84:	00bfdfc4 	movi	r2,-129
2008ee88:	dac02b15 	stw	r11,172(sp)
2008ee8c:	88a2703a 	and	r17,r17,r2
2008ee90:	dcc02d15 	stw	r19,180(sp)
2008ee94:	5825883a 	mov	r18,r11
2008ee98:	d8003215 	stw	zero,200(sp)
2008ee9c:	d8003415 	stw	zero,208(sp)
2008eea0:	003eeb06 	br	2008ea50 <__flash_rwdata_start+0xfffefc64>
2008eea4:	db002d17 	ldw	r12,180(sp)
2008eea8:	00800c04 	movi	r2,48
2008eeac:	d8802705 	stb	r2,156(sp)
2008eeb0:	64c00017 	ldw	r19,0(r12)
2008eeb4:	00801e04 	movi	r2,120
2008eeb8:	d8802745 	stb	r2,157(sp)
2008eebc:	00800034 	movhi	r2,0
2008eec0:	1081e504 	addi	r2,r2,1940
2008eec4:	63000104 	addi	r12,r12,4
2008eec8:	d8c02a15 	stw	r3,168(sp)
2008eecc:	d8803b15 	stw	r2,236(sp)
2008eed0:	0039883a 	mov	fp,zero
2008eed4:	8c400094 	ori	r17,r17,2
2008eed8:	db002d15 	stw	r12,180(sp)
2008eedc:	00800084 	movi	r2,2
2008eee0:	04001e04 	movi	r16,120
2008eee4:	9807883a 	mov	r3,r19
2008eee8:	003fb506 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008eeec:	8c400214 	ori	r17,r17,8
2008eef0:	1805883a 	mov	r2,r3
2008eef4:	1c000007 	ldb	r16,0(r3)
2008eef8:	003de706 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008eefc:	d8c02a15 	stw	r3,168(sp)
2008ef00:	d9802785 	stb	r6,158(sp)
2008ef04:	8880080c 	andi	r2,r17,32
2008ef08:	d8c02d17 	ldw	r3,180(sp)
2008ef0c:	103ea61e 	bne	r2,zero,2008e9a8 <__flash_rwdata_start+0xfffefbbc>
2008ef10:	8880040c 	andi	r2,r17,16
2008ef14:	1002221e 	bne	r2,zero,2008f7a0 <___vfprintf_internal_r+0x129c>
2008ef18:	8880100c 	andi	r2,r17,64
2008ef1c:	10022026 	beq	r2,zero,2008f7a0 <___vfprintf_internal_r+0x129c>
2008ef20:	1cc0000f 	ldh	r19,0(r3)
2008ef24:	db002d17 	ldw	r12,180(sp)
2008ef28:	9839d7fa 	srai	fp,r19,31
2008ef2c:	63000104 	addi	r12,r12,4
2008ef30:	db002d15 	stw	r12,180(sp)
2008ef34:	e005883a 	mov	r2,fp
2008ef38:	003ea106 	br	2008e9c0 <__flash_rwdata_start+0xfffefbd4>
2008ef3c:	8c401014 	ori	r17,r17,64
2008ef40:	1805883a 	mov	r2,r3
2008ef44:	1c000007 	ldb	r16,0(r3)
2008ef48:	003dd306 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008ef4c:	1c000007 	ldb	r16,0(r3)
2008ef50:	81c3e926 	beq	r16,r7,2008fef8 <___vfprintf_internal_r+0x19f4>
2008ef54:	8c400414 	ori	r17,r17,16
2008ef58:	1805883a 	mov	r2,r3
2008ef5c:	003dce06 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008ef60:	d8c02a15 	stw	r3,168(sp)
2008ef64:	d9802785 	stb	r6,158(sp)
2008ef68:	8880080c 	andi	r2,r17,32
2008ef6c:	10034726 	beq	r2,zero,2008fc8c <___vfprintf_internal_r+0x1788>
2008ef70:	db002d17 	ldw	r12,180(sp)
2008ef74:	dac02f17 	ldw	r11,188(sp)
2008ef78:	60800017 	ldw	r2,0(r12)
2008ef7c:	5807d7fa 	srai	r3,r11,31
2008ef80:	63000104 	addi	r12,r12,4
2008ef84:	db002d15 	stw	r12,180(sp)
2008ef88:	12c00015 	stw	r11,0(r2)
2008ef8c:	10c00115 	stw	r3,4(r2)
2008ef90:	003d9706 	br	2008e5f0 <__flash_rwdata_start+0xfffef804>
2008ef94:	03000034 	movhi	r12,0
2008ef98:	6301e004 	addi	r12,r12,1920
2008ef9c:	d8c02a15 	stw	r3,168(sp)
2008efa0:	d9802785 	stb	r6,158(sp)
2008efa4:	db003b15 	stw	r12,236(sp)
2008efa8:	88c0080c 	andi	r3,r17,32
2008efac:	d8802d17 	ldw	r2,180(sp)
2008efb0:	18005b26 	beq	r3,zero,2008f120 <___vfprintf_internal_r+0xc1c>
2008efb4:	dac02d17 	ldw	r11,180(sp)
2008efb8:	14c00017 	ldw	r19,0(r2)
2008efbc:	17000117 	ldw	fp,4(r2)
2008efc0:	5ac00204 	addi	r11,r11,8
2008efc4:	dac02d15 	stw	r11,180(sp)
2008efc8:	8880004c 	andi	r2,r17,1
2008efcc:	10022926 	beq	r2,zero,2008f874 <___vfprintf_internal_r+0x1370>
2008efd0:	9f06b03a 	or	r3,r19,fp
2008efd4:	18032b26 	beq	r3,zero,2008fc84 <___vfprintf_internal_r+0x1780>
2008efd8:	00800c04 	movi	r2,48
2008efdc:	d8802705 	stb	r2,156(sp)
2008efe0:	dc002745 	stb	r16,157(sp)
2008efe4:	8c400094 	ori	r17,r17,2
2008efe8:	00800084 	movi	r2,2
2008efec:	003f7406 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008eff0:	30803fcc 	andi	r2,r6,255
2008eff4:	1080201c 	xori	r2,r2,128
2008eff8:	10bfe004 	addi	r2,r2,-128
2008effc:	1003351e 	bne	r2,zero,2008fcd4 <___vfprintf_internal_r+0x17d0>
2008f000:	1805883a 	mov	r2,r3
2008f004:	01800804 	movi	r6,32
2008f008:	1c000007 	ldb	r16,0(r3)
2008f00c:	003da206 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008f010:	dac02d17 	ldw	r11,180(sp)
2008f014:	db002d17 	ldw	r12,180(sp)
2008f018:	5ac00017 	ldw	r11,0(r11)
2008f01c:	dac02e15 	stw	r11,184(sp)
2008f020:	62c00104 	addi	r11,r12,4
2008f024:	db002e17 	ldw	r12,184(sp)
2008f028:	6003ad16 	blt	r12,zero,2008fee0 <___vfprintf_internal_r+0x19dc>
2008f02c:	dac02d15 	stw	r11,180(sp)
2008f030:	1805883a 	mov	r2,r3
2008f034:	1c000007 	ldb	r16,0(r3)
2008f038:	003d9706 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008f03c:	1805883a 	mov	r2,r3
2008f040:	01800ac4 	movi	r6,43
2008f044:	1c000007 	ldb	r16,0(r3)
2008f048:	003d9306 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008f04c:	db002d17 	ldw	r12,180(sp)
2008f050:	d8c02a15 	stw	r3,168(sp)
2008f054:	00c00044 	movi	r3,1
2008f058:	60800017 	ldw	r2,0(r12)
2008f05c:	63000104 	addi	r12,r12,4
2008f060:	d8c02b15 	stw	r3,172(sp)
2008f064:	d8002785 	stb	zero,158(sp)
2008f068:	d8801405 	stb	r2,80(sp)
2008f06c:	db002d15 	stw	r12,180(sp)
2008f070:	dac01404 	addi	r11,sp,80
2008f074:	1825883a 	mov	r18,r3
2008f078:	d8003215 	stw	zero,200(sp)
2008f07c:	d8003415 	stw	zero,208(sp)
2008f080:	dac03115 	stw	r11,196(sp)
2008f084:	0005883a 	mov	r2,zero
2008f088:	003e7806 	br	2008ea6c <__flash_rwdata_start+0xfffefc80>
2008f08c:	dac02d17 	ldw	r11,180(sp)
2008f090:	db002d17 	ldw	r12,180(sp)
2008f094:	d8c02a15 	stw	r3,168(sp)
2008f098:	5ac00017 	ldw	r11,0(r11)
2008f09c:	d8002785 	stb	zero,158(sp)
2008f0a0:	64c00104 	addi	r19,r12,4
2008f0a4:	dac03115 	stw	r11,196(sp)
2008f0a8:	5803fe26 	beq	r11,zero,200900a4 <___vfprintf_internal_r+0x1ba0>
2008f0ac:	d9003117 	ldw	r4,196(sp)
2008f0b0:	4803b416 	blt	r9,zero,2008ff84 <___vfprintf_internal_r+0x1a80>
2008f0b4:	480d883a 	mov	r6,r9
2008f0b8:	000b883a 	mov	r5,zero
2008f0bc:	da003f15 	stw	r8,252(sp)
2008f0c0:	da403e15 	stw	r9,248(sp)
2008f0c4:	009359c0 	call	2009359c <memchr>
2008f0c8:	da003f17 	ldw	r8,252(sp)
2008f0cc:	da403e17 	ldw	r9,248(sp)
2008f0d0:	10043026 	beq	r2,zero,20090194 <___vfprintf_internal_r+0x1c90>
2008f0d4:	d8c03117 	ldw	r3,196(sp)
2008f0d8:	10e5c83a 	sub	r18,r2,r3
2008f0dc:	4c836b16 	blt	r9,r18,2008fe8c <___vfprintf_internal_r+0x1988>
2008f0e0:	9005883a 	mov	r2,r18
2008f0e4:	9003ac16 	blt	r18,zero,2008ff98 <___vfprintf_internal_r+0x1a94>
2008f0e8:	dd402783 	ldbu	r21,158(sp)
2008f0ec:	d8802b15 	stw	r2,172(sp)
2008f0f0:	dcc02d15 	stw	r19,180(sp)
2008f0f4:	d8003215 	stw	zero,200(sp)
2008f0f8:	d8003415 	stw	zero,208(sp)
2008f0fc:	003e5406 	br	2008ea50 <__flash_rwdata_start+0xfffefc64>
2008f100:	00800034 	movhi	r2,0
2008f104:	1081e504 	addi	r2,r2,1940
2008f108:	d8c02a15 	stw	r3,168(sp)
2008f10c:	d8803b15 	stw	r2,236(sp)
2008f110:	d9802785 	stb	r6,158(sp)
2008f114:	88c0080c 	andi	r3,r17,32
2008f118:	d8802d17 	ldw	r2,180(sp)
2008f11c:	183fa51e 	bne	r3,zero,2008efb4 <__flash_rwdata_start+0xffff01c8>
2008f120:	88c0040c 	andi	r3,r17,16
2008f124:	1802ee26 	beq	r3,zero,2008fce0 <___vfprintf_internal_r+0x17dc>
2008f128:	db002d17 	ldw	r12,180(sp)
2008f12c:	14c00017 	ldw	r19,0(r2)
2008f130:	0039883a 	mov	fp,zero
2008f134:	63000104 	addi	r12,r12,4
2008f138:	db002d15 	stw	r12,180(sp)
2008f13c:	003fa206 	br	2008efc8 <__flash_rwdata_start+0xffff01dc>
2008f140:	8c400054 	ori	r17,r17,1
2008f144:	1805883a 	mov	r2,r3
2008f148:	1c000007 	ldb	r16,0(r3)
2008f14c:	003d5206 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008f150:	8c400814 	ori	r17,r17,32
2008f154:	1805883a 	mov	r2,r3
2008f158:	1c000007 	ldb	r16,0(r3)
2008f15c:	003d4e06 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008f160:	d8c02a15 	stw	r3,168(sp)
2008f164:	8880080c 	andi	r2,r17,32
2008f168:	103f1d1e 	bne	r2,zero,2008ede0 <__flash_rwdata_start+0xfffefff4>
2008f16c:	8880040c 	andi	r2,r17,16
2008f170:	1001b81e 	bne	r2,zero,2008f854 <___vfprintf_internal_r+0x1350>
2008f174:	8880100c 	andi	r2,r17,64
2008f178:	1001b626 	beq	r2,zero,2008f854 <___vfprintf_internal_r+0x1350>
2008f17c:	dac02d17 	ldw	r11,180(sp)
2008f180:	0039883a 	mov	fp,zero
2008f184:	00800044 	movi	r2,1
2008f188:	5cc0000b 	ldhu	r19,0(r11)
2008f18c:	5ac00104 	addi	r11,r11,4
2008f190:	dac02d15 	stw	r11,180(sp)
2008f194:	9807883a 	mov	r3,r19
2008f198:	003f0906 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008f19c:	d8c02a15 	stw	r3,168(sp)
2008f1a0:	8880080c 	andi	r2,r17,32
2008f1a4:	103eff1e 	bne	r2,zero,2008eda4 <__flash_rwdata_start+0xfffeffb8>
2008f1a8:	8880040c 	andi	r2,r17,16
2008f1ac:	1001a11e 	bne	r2,zero,2008f834 <___vfprintf_internal_r+0x1330>
2008f1b0:	8880100c 	andi	r2,r17,64
2008f1b4:	10019f26 	beq	r2,zero,2008f834 <___vfprintf_internal_r+0x1330>
2008f1b8:	db002d17 	ldw	r12,180(sp)
2008f1bc:	0039883a 	mov	fp,zero
2008f1c0:	0005883a 	mov	r2,zero
2008f1c4:	64c0000b 	ldhu	r19,0(r12)
2008f1c8:	63000104 	addi	r12,r12,4
2008f1cc:	db002d15 	stw	r12,180(sp)
2008f1d0:	9807883a 	mov	r3,r19
2008f1d4:	003efa06 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008f1d8:	d8c02a15 	stw	r3,168(sp)
2008f1dc:	d9802785 	stb	r6,158(sp)
2008f1e0:	803db626 	beq	r16,zero,2008e8bc <__flash_rwdata_start+0xfffefad0>
2008f1e4:	00c00044 	movi	r3,1
2008f1e8:	d8c02b15 	stw	r3,172(sp)
2008f1ec:	dc001405 	stb	r16,80(sp)
2008f1f0:	d8002785 	stb	zero,158(sp)
2008f1f4:	003f9e06 	br	2008f070 <__flash_rwdata_start+0xffff0284>
2008f1f8:	d8c02017 	ldw	r3,128(sp)
2008f1fc:	003e5306 	br	2008eb4c <__flash_rwdata_start+0xfffefd60>
2008f200:	10803fcc 	andi	r2,r2,255
2008f204:	00c00044 	movi	r3,1
2008f208:	10fdfa1e 	bne	r2,r3,2008e9f4 <__flash_rwdata_start+0xfffefc08>
2008f20c:	e000021e 	bne	fp,zero,2008f218 <___vfprintf_internal_r+0xd14>
2008f210:	00800244 	movi	r2,9
2008f214:	14c0202e 	bgeu	r2,r19,2008f298 <___vfprintf_internal_r+0xd94>
2008f218:	dc002b15 	stw	r16,172(sp)
2008f21c:	dc402c15 	stw	r17,176(sp)
2008f220:	9821883a 	mov	r16,r19
2008f224:	e023883a 	mov	r17,fp
2008f228:	dc801e04 	addi	r18,sp,120
2008f22c:	4827883a 	mov	r19,r9
2008f230:	4039883a 	mov	fp,r8
2008f234:	8009883a 	mov	r4,r16
2008f238:	880b883a 	mov	r5,r17
2008f23c:	01800284 	movi	r6,10
2008f240:	000f883a 	mov	r7,zero
2008f244:	00986e80 	call	200986e8 <__umoddi3>
2008f248:	10800c04 	addi	r2,r2,48
2008f24c:	94bfffc4 	addi	r18,r18,-1
2008f250:	8009883a 	mov	r4,r16
2008f254:	880b883a 	mov	r5,r17
2008f258:	01800284 	movi	r6,10
2008f25c:	000f883a 	mov	r7,zero
2008f260:	90800005 	stb	r2,0(r18)
2008f264:	00981280 	call	20098128 <__udivdi3>
2008f268:	1021883a 	mov	r16,r2
2008f26c:	10c4b03a 	or	r2,r2,r3
2008f270:	1823883a 	mov	r17,r3
2008f274:	103fef1e 	bne	r2,zero,2008f234 <__flash_rwdata_start+0xffff0448>
2008f278:	dac02817 	ldw	r11,160(sp)
2008f27c:	dc803115 	stw	r18,196(sp)
2008f280:	dc002b17 	ldw	r16,172(sp)
2008f284:	dc402c17 	ldw	r17,176(sp)
2008f288:	9813883a 	mov	r9,r19
2008f28c:	e011883a 	mov	r8,fp
2008f290:	5ca5c83a 	sub	r18,r11,r18
2008f294:	003de906 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f298:	9cc00c04 	addi	r19,r19,48
2008f29c:	d8c01dc4 	addi	r3,sp,119
2008f2a0:	dcc01dc5 	stb	r19,119(sp)
2008f2a4:	dc803c17 	ldw	r18,240(sp)
2008f2a8:	d8c03115 	stw	r3,196(sp)
2008f2ac:	003de306 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f2b0:	00801944 	movi	r2,101
2008f2b4:	1400710e 	bge	r2,r16,2008f47c <___vfprintf_internal_r+0xf78>
2008f2b8:	d9003717 	ldw	r4,220(sp)
2008f2bc:	d9403917 	ldw	r5,228(sp)
2008f2c0:	000d883a 	mov	r6,zero
2008f2c4:	000f883a 	mov	r7,zero
2008f2c8:	d8c03d15 	stw	r3,244(sp)
2008f2cc:	da003f15 	stw	r8,252(sp)
2008f2d0:	0098c780 	call	20098c78 <__eqdf2>
2008f2d4:	d8c03d17 	ldw	r3,244(sp)
2008f2d8:	da003f17 	ldw	r8,252(sp)
2008f2dc:	1000ef1e 	bne	r2,zero,2008f69c <___vfprintf_internal_r+0x1198>
2008f2e0:	d8801f17 	ldw	r2,124(sp)
2008f2e4:	01000034 	movhi	r4,0
2008f2e8:	2101ec04 	addi	r4,r4,1968
2008f2ec:	18c00044 	addi	r3,r3,1
2008f2f0:	10800044 	addi	r2,r2,1
2008f2f4:	41000015 	stw	r4,0(r8)
2008f2f8:	01000044 	movi	r4,1
2008f2fc:	41000115 	stw	r4,4(r8)
2008f300:	d8c02015 	stw	r3,128(sp)
2008f304:	d8801f15 	stw	r2,124(sp)
2008f308:	010001c4 	movi	r4,7
2008f30c:	20828e16 	blt	r4,r2,2008fd48 <___vfprintf_internal_r+0x1844>
2008f310:	42000204 	addi	r8,r8,8
2008f314:	d8802617 	ldw	r2,152(sp)
2008f318:	dac03317 	ldw	r11,204(sp)
2008f31c:	12c00216 	blt	r2,r11,2008f328 <___vfprintf_internal_r+0xe24>
2008f320:	8880004c 	andi	r2,r17,1
2008f324:	103e5d26 	beq	r2,zero,2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008f328:	db003817 	ldw	r12,224(sp)
2008f32c:	d8801f17 	ldw	r2,124(sp)
2008f330:	dac03517 	ldw	r11,212(sp)
2008f334:	1b07883a 	add	r3,r3,r12
2008f338:	10800044 	addi	r2,r2,1
2008f33c:	42c00015 	stw	r11,0(r8)
2008f340:	43000115 	stw	r12,4(r8)
2008f344:	d8c02015 	stw	r3,128(sp)
2008f348:	d8801f15 	stw	r2,124(sp)
2008f34c:	010001c4 	movi	r4,7
2008f350:	2082ed16 	blt	r4,r2,2008ff08 <___vfprintf_internal_r+0x1a04>
2008f354:	42000204 	addi	r8,r8,8
2008f358:	db003317 	ldw	r12,204(sp)
2008f35c:	643fffc4 	addi	r16,r12,-1
2008f360:	043e4e0e 	bge	zero,r16,2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008f364:	04800404 	movi	r18,16
2008f368:	d8801f17 	ldw	r2,124(sp)
2008f36c:	94007e0e 	bge	r18,r16,2008f568 <___vfprintf_internal_r+0x1064>
2008f370:	01400034 	movhi	r5,0
2008f374:	2941f484 	addi	r5,r5,2002
2008f378:	d9402c15 	stw	r5,176(sp)
2008f37c:	054001c4 	movi	r21,7
2008f380:	00000306 	br	2008f390 <___vfprintf_internal_r+0xe8c>
2008f384:	42000204 	addi	r8,r8,8
2008f388:	843ffc04 	addi	r16,r16,-16
2008f38c:	9400790e 	bge	r18,r16,2008f574 <___vfprintf_internal_r+0x1070>
2008f390:	18c00404 	addi	r3,r3,16
2008f394:	10800044 	addi	r2,r2,1
2008f398:	45000015 	stw	r20,0(r8)
2008f39c:	44800115 	stw	r18,4(r8)
2008f3a0:	d8c02015 	stw	r3,128(sp)
2008f3a4:	d8801f15 	stw	r2,124(sp)
2008f3a8:	a8bff60e 	bge	r21,r2,2008f384 <__flash_rwdata_start+0xffff0598>
2008f3ac:	b009883a 	mov	r4,r22
2008f3b0:	b80b883a 	mov	r5,r23
2008f3b4:	d9801e04 	addi	r6,sp,120
2008f3b8:	00964680 	call	20096468 <__sprint_r>
2008f3bc:	103d451e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f3c0:	d8c02017 	ldw	r3,128(sp)
2008f3c4:	d8801f17 	ldw	r2,124(sp)
2008f3c8:	da000404 	addi	r8,sp,16
2008f3cc:	003fee06 	br	2008f388 <__flash_rwdata_start+0xffff059c>
2008f3d0:	dac02e17 	ldw	r11,184(sp)
2008f3d4:	db002b17 	ldw	r12,172(sp)
2008f3d8:	5b2bc83a 	sub	r21,r11,r12
2008f3dc:	057df90e 	bge	zero,r21,2008ebc4 <__flash_rwdata_start+0xfffefdd8>
2008f3e0:	07000404 	movi	fp,16
2008f3e4:	d8801f17 	ldw	r2,124(sp)
2008f3e8:	e543640e 	bge	fp,r21,2009017c <___vfprintf_internal_r+0x1c78>
2008f3ec:	01400034 	movhi	r5,0
2008f3f0:	2941f484 	addi	r5,r5,2002
2008f3f4:	d9402c15 	stw	r5,176(sp)
2008f3f8:	04c001c4 	movi	r19,7
2008f3fc:	00000306 	br	2008f40c <___vfprintf_internal_r+0xf08>
2008f400:	ad7ffc04 	addi	r21,r21,-16
2008f404:	42000204 	addi	r8,r8,8
2008f408:	e540110e 	bge	fp,r21,2008f450 <___vfprintf_internal_r+0xf4c>
2008f40c:	18c00404 	addi	r3,r3,16
2008f410:	10800044 	addi	r2,r2,1
2008f414:	45000015 	stw	r20,0(r8)
2008f418:	47000115 	stw	fp,4(r8)
2008f41c:	d8c02015 	stw	r3,128(sp)
2008f420:	d8801f15 	stw	r2,124(sp)
2008f424:	98bff60e 	bge	r19,r2,2008f400 <__flash_rwdata_start+0xffff0614>
2008f428:	b009883a 	mov	r4,r22
2008f42c:	b80b883a 	mov	r5,r23
2008f430:	d9801e04 	addi	r6,sp,120
2008f434:	00964680 	call	20096468 <__sprint_r>
2008f438:	103d261e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f43c:	ad7ffc04 	addi	r21,r21,-16
2008f440:	d8c02017 	ldw	r3,128(sp)
2008f444:	d8801f17 	ldw	r2,124(sp)
2008f448:	da000404 	addi	r8,sp,16
2008f44c:	e57fef16 	blt	fp,r21,2008f40c <__flash_rwdata_start+0xffff0620>
2008f450:	dac02c17 	ldw	r11,176(sp)
2008f454:	1d47883a 	add	r3,r3,r21
2008f458:	10800044 	addi	r2,r2,1
2008f45c:	42c00015 	stw	r11,0(r8)
2008f460:	45400115 	stw	r21,4(r8)
2008f464:	d8c02015 	stw	r3,128(sp)
2008f468:	d8801f15 	stw	r2,124(sp)
2008f46c:	010001c4 	movi	r4,7
2008f470:	20819116 	blt	r4,r2,2008fab8 <___vfprintf_internal_r+0x15b4>
2008f474:	42000204 	addi	r8,r8,8
2008f478:	003dd206 	br	2008ebc4 <__flash_rwdata_start+0xfffefdd8>
2008f47c:	db003317 	ldw	r12,204(sp)
2008f480:	00800044 	movi	r2,1
2008f484:	18c00044 	addi	r3,r3,1
2008f488:	1301530e 	bge	r2,r12,2008f9d8 <___vfprintf_internal_r+0x14d4>
2008f48c:	dc001f17 	ldw	r16,124(sp)
2008f490:	dac03117 	ldw	r11,196(sp)
2008f494:	00800044 	movi	r2,1
2008f498:	84000044 	addi	r16,r16,1
2008f49c:	40800115 	stw	r2,4(r8)
2008f4a0:	42c00015 	stw	r11,0(r8)
2008f4a4:	d8c02015 	stw	r3,128(sp)
2008f4a8:	dc001f15 	stw	r16,124(sp)
2008f4ac:	008001c4 	movi	r2,7
2008f4b0:	14016b16 	blt	r2,r16,2008fa60 <___vfprintf_internal_r+0x155c>
2008f4b4:	42000204 	addi	r8,r8,8
2008f4b8:	db003817 	ldw	r12,224(sp)
2008f4bc:	dac03517 	ldw	r11,212(sp)
2008f4c0:	84000044 	addi	r16,r16,1
2008f4c4:	1b07883a 	add	r3,r3,r12
2008f4c8:	42c00015 	stw	r11,0(r8)
2008f4cc:	43000115 	stw	r12,4(r8)
2008f4d0:	d8c02015 	stw	r3,128(sp)
2008f4d4:	dc001f15 	stw	r16,124(sp)
2008f4d8:	008001c4 	movi	r2,7
2008f4dc:	14016916 	blt	r2,r16,2008fa84 <___vfprintf_internal_r+0x1580>
2008f4e0:	44800204 	addi	r18,r8,8
2008f4e4:	d9003717 	ldw	r4,220(sp)
2008f4e8:	d9403917 	ldw	r5,228(sp)
2008f4ec:	000d883a 	mov	r6,zero
2008f4f0:	000f883a 	mov	r7,zero
2008f4f4:	d8c03d15 	stw	r3,244(sp)
2008f4f8:	0098c780 	call	20098c78 <__eqdf2>
2008f4fc:	d8c03d17 	ldw	r3,244(sp)
2008f500:	db003317 	ldw	r12,204(sp)
2008f504:	1000ad26 	beq	r2,zero,2008f7bc <___vfprintf_internal_r+0x12b8>
2008f508:	dac03117 	ldw	r11,196(sp)
2008f50c:	60bfffc4 	addi	r2,r12,-1
2008f510:	1887883a 	add	r3,r3,r2
2008f514:	59000044 	addi	r4,r11,1
2008f518:	84000044 	addi	r16,r16,1
2008f51c:	90800115 	stw	r2,4(r18)
2008f520:	91000015 	stw	r4,0(r18)
2008f524:	d8c02015 	stw	r3,128(sp)
2008f528:	dc001f15 	stw	r16,124(sp)
2008f52c:	008001c4 	movi	r2,7
2008f530:	14014216 	blt	r2,r16,2008fa3c <___vfprintf_internal_r+0x1538>
2008f534:	94800204 	addi	r18,r18,8
2008f538:	dac03a17 	ldw	r11,232(sp)
2008f53c:	dd4022c4 	addi	r21,sp,139
2008f540:	84000044 	addi	r16,r16,1
2008f544:	1ac7883a 	add	r3,r3,r11
2008f548:	95400015 	stw	r21,0(r18)
2008f54c:	92c00115 	stw	r11,4(r18)
2008f550:	d8c02015 	stw	r3,128(sp)
2008f554:	dc001f15 	stw	r16,124(sp)
2008f558:	008001c4 	movi	r2,7
2008f55c:	14000e16 	blt	r2,r16,2008f598 <___vfprintf_internal_r+0x1094>
2008f560:	92000204 	addi	r8,r18,8
2008f564:	003dcd06 	br	2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008f568:	01000034 	movhi	r4,0
2008f56c:	2101f484 	addi	r4,r4,2002
2008f570:	d9002c15 	stw	r4,176(sp)
2008f574:	dac02c17 	ldw	r11,176(sp)
2008f578:	1c07883a 	add	r3,r3,r16
2008f57c:	44000115 	stw	r16,4(r8)
2008f580:	42c00015 	stw	r11,0(r8)
2008f584:	10800044 	addi	r2,r2,1
2008f588:	d8c02015 	stw	r3,128(sp)
2008f58c:	d8801f15 	stw	r2,124(sp)
2008f590:	010001c4 	movi	r4,7
2008f594:	20bdc00e 	bge	r4,r2,2008ec98 <__flash_rwdata_start+0xfffefeac>
2008f598:	b009883a 	mov	r4,r22
2008f59c:	b80b883a 	mov	r5,r23
2008f5a0:	d9801e04 	addi	r6,sp,120
2008f5a4:	00964680 	call	20096468 <__sprint_r>
2008f5a8:	103cca1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f5ac:	d8c02017 	ldw	r3,128(sp)
2008f5b0:	da000404 	addi	r8,sp,16
2008f5b4:	003db906 	br	2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008f5b8:	b009883a 	mov	r4,r22
2008f5bc:	b80b883a 	mov	r5,r23
2008f5c0:	d9801e04 	addi	r6,sp,120
2008f5c4:	00964680 	call	20096468 <__sprint_r>
2008f5c8:	103def26 	beq	r2,zero,2008ed88 <__flash_rwdata_start+0xfffeff9c>
2008f5cc:	003cc106 	br	2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f5d0:	10803fcc 	andi	r2,r2,255
2008f5d4:	1000651e 	bne	r2,zero,2008f76c <___vfprintf_internal_r+0x1268>
2008f5d8:	8880004c 	andi	r2,r17,1
2008f5dc:	10013226 	beq	r2,zero,2008faa8 <___vfprintf_internal_r+0x15a4>
2008f5e0:	00800c04 	movi	r2,48
2008f5e4:	d8c01dc4 	addi	r3,sp,119
2008f5e8:	d8801dc5 	stb	r2,119(sp)
2008f5ec:	dc803c17 	ldw	r18,240(sp)
2008f5f0:	d8c03115 	stw	r3,196(sp)
2008f5f4:	003d1106 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f5f8:	b009883a 	mov	r4,r22
2008f5fc:	b80b883a 	mov	r5,r23
2008f600:	d9801e04 	addi	r6,sp,120
2008f604:	00964680 	call	20096468 <__sprint_r>
2008f608:	103cb21e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f60c:	d8c02017 	ldw	r3,128(sp)
2008f610:	da000404 	addi	r8,sp,16
2008f614:	003d9406 	br	2008ec68 <__flash_rwdata_start+0xfffefe7c>
2008f618:	b009883a 	mov	r4,r22
2008f61c:	b80b883a 	mov	r5,r23
2008f620:	d9801e04 	addi	r6,sp,120
2008f624:	00964680 	call	20096468 <__sprint_r>
2008f628:	103caa1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f62c:	d8c02017 	ldw	r3,128(sp)
2008f630:	da000404 	addi	r8,sp,16
2008f634:	003d5206 	br	2008eb80 <__flash_rwdata_start+0xfffefd94>
2008f638:	b009883a 	mov	r4,r22
2008f63c:	b80b883a 	mov	r5,r23
2008f640:	d9801e04 	addi	r6,sp,120
2008f644:	00964680 	call	20096468 <__sprint_r>
2008f648:	103ca21e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f64c:	d8c02017 	ldw	r3,128(sp)
2008f650:	da000404 	addi	r8,sp,16
2008f654:	003d5806 	br	2008ebb8 <__flash_rwdata_start+0xfffefdcc>
2008f658:	d9403b17 	ldw	r5,236(sp)
2008f65c:	d8c01e04 	addi	r3,sp,120
2008f660:	988003cc 	andi	r2,r19,15
2008f664:	e008973a 	slli	r4,fp,28
2008f668:	2885883a 	add	r2,r5,r2
2008f66c:	9826d13a 	srli	r19,r19,4
2008f670:	10800003 	ldbu	r2,0(r2)
2008f674:	e038d13a 	srli	fp,fp,4
2008f678:	18ffffc4 	addi	r3,r3,-1
2008f67c:	24e6b03a 	or	r19,r4,r19
2008f680:	18800005 	stb	r2,0(r3)
2008f684:	9f04b03a 	or	r2,r19,fp
2008f688:	103ff51e 	bne	r2,zero,2008f660 <__flash_rwdata_start+0xffff0874>
2008f68c:	db002817 	ldw	r12,160(sp)
2008f690:	d8c03115 	stw	r3,196(sp)
2008f694:	60e5c83a 	sub	r18,r12,r3
2008f698:	003ce806 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f69c:	dc002617 	ldw	r16,152(sp)
2008f6a0:	0401b10e 	bge	zero,r16,2008fd68 <___vfprintf_internal_r+0x1864>
2008f6a4:	db003117 	ldw	r12,196(sp)
2008f6a8:	dac03317 	ldw	r11,204(sp)
2008f6ac:	62e1883a 	add	r16,r12,r11
2008f6b0:	db003417 	ldw	r12,208(sp)
2008f6b4:	5825883a 	mov	r18,r11
2008f6b8:	62c0010e 	bge	r12,r11,2008f6c0 <___vfprintf_internal_r+0x11bc>
2008f6bc:	6025883a 	mov	r18,r12
2008f6c0:	04800b0e 	bge	zero,r18,2008f6f0 <___vfprintf_internal_r+0x11ec>
2008f6c4:	d8801f17 	ldw	r2,124(sp)
2008f6c8:	dac03117 	ldw	r11,196(sp)
2008f6cc:	1c87883a 	add	r3,r3,r18
2008f6d0:	10800044 	addi	r2,r2,1
2008f6d4:	42c00015 	stw	r11,0(r8)
2008f6d8:	44800115 	stw	r18,4(r8)
2008f6dc:	d8c02015 	stw	r3,128(sp)
2008f6e0:	d8801f15 	stw	r2,124(sp)
2008f6e4:	010001c4 	movi	r4,7
2008f6e8:	20824f16 	blt	r4,r2,20090028 <___vfprintf_internal_r+0x1b24>
2008f6ec:	42000204 	addi	r8,r8,8
2008f6f0:	90024b16 	blt	r18,zero,20090020 <___vfprintf_internal_r+0x1b1c>
2008f6f4:	db003417 	ldw	r12,208(sp)
2008f6f8:	64a5c83a 	sub	r18,r12,r18
2008f6fc:	0480730e 	bge	zero,r18,2008f8cc <___vfprintf_internal_r+0x13c8>
2008f700:	05400404 	movi	r21,16
2008f704:	d8801f17 	ldw	r2,124(sp)
2008f708:	ac817d0e 	bge	r21,r18,2008fd00 <___vfprintf_internal_r+0x17fc>
2008f70c:	01400034 	movhi	r5,0
2008f710:	2941f484 	addi	r5,r5,2002
2008f714:	d9402c15 	stw	r5,176(sp)
2008f718:	070001c4 	movi	fp,7
2008f71c:	00000306 	br	2008f72c <___vfprintf_internal_r+0x1228>
2008f720:	42000204 	addi	r8,r8,8
2008f724:	94bffc04 	addi	r18,r18,-16
2008f728:	ac81780e 	bge	r21,r18,2008fd0c <___vfprintf_internal_r+0x1808>
2008f72c:	18c00404 	addi	r3,r3,16
2008f730:	10800044 	addi	r2,r2,1
2008f734:	45000015 	stw	r20,0(r8)
2008f738:	45400115 	stw	r21,4(r8)
2008f73c:	d8c02015 	stw	r3,128(sp)
2008f740:	d8801f15 	stw	r2,124(sp)
2008f744:	e0bff60e 	bge	fp,r2,2008f720 <__flash_rwdata_start+0xffff0934>
2008f748:	b009883a 	mov	r4,r22
2008f74c:	b80b883a 	mov	r5,r23
2008f750:	d9801e04 	addi	r6,sp,120
2008f754:	00964680 	call	20096468 <__sprint_r>
2008f758:	103c5e1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f75c:	d8c02017 	ldw	r3,128(sp)
2008f760:	d8801f17 	ldw	r2,124(sp)
2008f764:	da000404 	addi	r8,sp,16
2008f768:	003fee06 	br	2008f724 <__flash_rwdata_start+0xffff0938>
2008f76c:	dac01e04 	addi	r11,sp,120
2008f770:	0025883a 	mov	r18,zero
2008f774:	dac03115 	stw	r11,196(sp)
2008f778:	003cb006 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f77c:	b009883a 	mov	r4,r22
2008f780:	b80b883a 	mov	r5,r23
2008f784:	d9801e04 	addi	r6,sp,120
2008f788:	00964680 	call	20096468 <__sprint_r>
2008f78c:	103c511e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f790:	d8c02017 	ldw	r3,128(sp)
2008f794:	d8802787 	ldb	r2,158(sp)
2008f798:	da000404 	addi	r8,sp,16
2008f79c:	003ceb06 	br	2008eb4c <__flash_rwdata_start+0xfffefd60>
2008f7a0:	1cc00017 	ldw	r19,0(r3)
2008f7a4:	dac02d17 	ldw	r11,180(sp)
2008f7a8:	9839d7fa 	srai	fp,r19,31
2008f7ac:	5ac00104 	addi	r11,r11,4
2008f7b0:	dac02d15 	stw	r11,180(sp)
2008f7b4:	e005883a 	mov	r2,fp
2008f7b8:	003c8106 	br	2008e9c0 <__flash_rwdata_start+0xfffefbd4>
2008f7bc:	657fffc4 	addi	r21,r12,-1
2008f7c0:	057f5d0e 	bge	zero,r21,2008f538 <__flash_rwdata_start+0xffff074c>
2008f7c4:	07000404 	movi	fp,16
2008f7c8:	e540900e 	bge	fp,r21,2008fa0c <___vfprintf_internal_r+0x1508>
2008f7cc:	01000034 	movhi	r4,0
2008f7d0:	2101f484 	addi	r4,r4,2002
2008f7d4:	d9002c15 	stw	r4,176(sp)
2008f7d8:	01c001c4 	movi	r7,7
2008f7dc:	00000306 	br	2008f7ec <___vfprintf_internal_r+0x12e8>
2008f7e0:	94800204 	addi	r18,r18,8
2008f7e4:	ad7ffc04 	addi	r21,r21,-16
2008f7e8:	e5408b0e 	bge	fp,r21,2008fa18 <___vfprintf_internal_r+0x1514>
2008f7ec:	18c00404 	addi	r3,r3,16
2008f7f0:	84000044 	addi	r16,r16,1
2008f7f4:	95000015 	stw	r20,0(r18)
2008f7f8:	97000115 	stw	fp,4(r18)
2008f7fc:	d8c02015 	stw	r3,128(sp)
2008f800:	dc001f15 	stw	r16,124(sp)
2008f804:	3c3ff60e 	bge	r7,r16,2008f7e0 <__flash_rwdata_start+0xffff09f4>
2008f808:	b009883a 	mov	r4,r22
2008f80c:	b80b883a 	mov	r5,r23
2008f810:	d9801e04 	addi	r6,sp,120
2008f814:	d9c03d15 	stw	r7,244(sp)
2008f818:	00964680 	call	20096468 <__sprint_r>
2008f81c:	d9c03d17 	ldw	r7,244(sp)
2008f820:	103c2c1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f824:	d8c02017 	ldw	r3,128(sp)
2008f828:	dc001f17 	ldw	r16,124(sp)
2008f82c:	dc800404 	addi	r18,sp,16
2008f830:	003fec06 	br	2008f7e4 <__flash_rwdata_start+0xffff09f8>
2008f834:	dac02d17 	ldw	r11,180(sp)
2008f838:	0039883a 	mov	fp,zero
2008f83c:	0005883a 	mov	r2,zero
2008f840:	5cc00017 	ldw	r19,0(r11)
2008f844:	5ac00104 	addi	r11,r11,4
2008f848:	dac02d15 	stw	r11,180(sp)
2008f84c:	9807883a 	mov	r3,r19
2008f850:	003d5b06 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008f854:	db002d17 	ldw	r12,180(sp)
2008f858:	0039883a 	mov	fp,zero
2008f85c:	00800044 	movi	r2,1
2008f860:	64c00017 	ldw	r19,0(r12)
2008f864:	63000104 	addi	r12,r12,4
2008f868:	db002d15 	stw	r12,180(sp)
2008f86c:	9807883a 	mov	r3,r19
2008f870:	003d5306 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008f874:	00800084 	movi	r2,2
2008f878:	9f06b03a 	or	r3,r19,fp
2008f87c:	003d5006 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008f880:	10803fcc 	andi	r2,r2,255
2008f884:	1080201c 	xori	r2,r2,128
2008f888:	10bfe004 	addi	r2,r2,-128
2008f88c:	01000c04 	movi	r4,48
2008f890:	1101a526 	beq	r2,r4,2008ff28 <___vfprintf_internal_r+0x1a24>
2008f894:	dac03117 	ldw	r11,196(sp)
2008f898:	db002817 	ldw	r12,160(sp)
2008f89c:	193fffc5 	stb	r4,-1(r3)
2008f8a0:	5affffc4 	addi	r11,r11,-1
2008f8a4:	dac03115 	stw	r11,196(sp)
2008f8a8:	62e5c83a 	sub	r18,r12,r11
2008f8ac:	003c6306 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008f8b0:	b009883a 	mov	r4,r22
2008f8b4:	b80b883a 	mov	r5,r23
2008f8b8:	d9801e04 	addi	r6,sp,120
2008f8bc:	00964680 	call	20096468 <__sprint_r>
2008f8c0:	103c041e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f8c4:	d8c02017 	ldw	r3,128(sp)
2008f8c8:	da000404 	addi	r8,sp,16
2008f8cc:	db003117 	ldw	r12,196(sp)
2008f8d0:	dac03417 	ldw	r11,208(sp)
2008f8d4:	d8802617 	ldw	r2,152(sp)
2008f8d8:	62e5883a 	add	r18,r12,r11
2008f8dc:	db003317 	ldw	r12,204(sp)
2008f8e0:	13000216 	blt	r2,r12,2008f8ec <___vfprintf_internal_r+0x13e8>
2008f8e4:	8900004c 	andi	r4,r17,1
2008f8e8:	20000c26 	beq	r4,zero,2008f91c <___vfprintf_internal_r+0x1418>
2008f8ec:	dac03817 	ldw	r11,224(sp)
2008f8f0:	d9001f17 	ldw	r4,124(sp)
2008f8f4:	db003517 	ldw	r12,212(sp)
2008f8f8:	1ac7883a 	add	r3,r3,r11
2008f8fc:	21000044 	addi	r4,r4,1
2008f900:	43000015 	stw	r12,0(r8)
2008f904:	42c00115 	stw	r11,4(r8)
2008f908:	d8c02015 	stw	r3,128(sp)
2008f90c:	d9001f15 	stw	r4,124(sp)
2008f910:	014001c4 	movi	r5,7
2008f914:	2901cc16 	blt	r5,r4,20090048 <___vfprintf_internal_r+0x1b44>
2008f918:	42000204 	addi	r8,r8,8
2008f91c:	dac03317 	ldw	r11,204(sp)
2008f920:	8489c83a 	sub	r4,r16,r18
2008f924:	5885c83a 	sub	r2,r11,r2
2008f928:	1021883a 	mov	r16,r2
2008f92c:	2080010e 	bge	r4,r2,2008f934 <___vfprintf_internal_r+0x1430>
2008f930:	2021883a 	mov	r16,r4
2008f934:	04000a0e 	bge	zero,r16,2008f960 <___vfprintf_internal_r+0x145c>
2008f938:	d9001f17 	ldw	r4,124(sp)
2008f93c:	1c07883a 	add	r3,r3,r16
2008f940:	44800015 	stw	r18,0(r8)
2008f944:	21000044 	addi	r4,r4,1
2008f948:	44000115 	stw	r16,4(r8)
2008f94c:	d8c02015 	stw	r3,128(sp)
2008f950:	d9001f15 	stw	r4,124(sp)
2008f954:	014001c4 	movi	r5,7
2008f958:	2901e316 	blt	r5,r4,200900e8 <___vfprintf_internal_r+0x1be4>
2008f95c:	42000204 	addi	r8,r8,8
2008f960:	8001df16 	blt	r16,zero,200900e0 <___vfprintf_internal_r+0x1bdc>
2008f964:	1421c83a 	sub	r16,r2,r16
2008f968:	043ccc0e 	bge	zero,r16,2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008f96c:	04800404 	movi	r18,16
2008f970:	d8801f17 	ldw	r2,124(sp)
2008f974:	943efc0e 	bge	r18,r16,2008f568 <__flash_rwdata_start+0xffff077c>
2008f978:	01400034 	movhi	r5,0
2008f97c:	2941f484 	addi	r5,r5,2002
2008f980:	d9402c15 	stw	r5,176(sp)
2008f984:	054001c4 	movi	r21,7
2008f988:	00000306 	br	2008f998 <___vfprintf_internal_r+0x1494>
2008f98c:	42000204 	addi	r8,r8,8
2008f990:	843ffc04 	addi	r16,r16,-16
2008f994:	943ef70e 	bge	r18,r16,2008f574 <__flash_rwdata_start+0xffff0788>
2008f998:	18c00404 	addi	r3,r3,16
2008f99c:	10800044 	addi	r2,r2,1
2008f9a0:	45000015 	stw	r20,0(r8)
2008f9a4:	44800115 	stw	r18,4(r8)
2008f9a8:	d8c02015 	stw	r3,128(sp)
2008f9ac:	d8801f15 	stw	r2,124(sp)
2008f9b0:	a8bff60e 	bge	r21,r2,2008f98c <__flash_rwdata_start+0xffff0ba0>
2008f9b4:	b009883a 	mov	r4,r22
2008f9b8:	b80b883a 	mov	r5,r23
2008f9bc:	d9801e04 	addi	r6,sp,120
2008f9c0:	00964680 	call	20096468 <__sprint_r>
2008f9c4:	103bc31e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008f9c8:	d8c02017 	ldw	r3,128(sp)
2008f9cc:	d8801f17 	ldw	r2,124(sp)
2008f9d0:	da000404 	addi	r8,sp,16
2008f9d4:	003fee06 	br	2008f990 <__flash_rwdata_start+0xffff0ba4>
2008f9d8:	8888703a 	and	r4,r17,r2
2008f9dc:	203eab1e 	bne	r4,zero,2008f48c <__flash_rwdata_start+0xffff06a0>
2008f9e0:	dc001f17 	ldw	r16,124(sp)
2008f9e4:	db003117 	ldw	r12,196(sp)
2008f9e8:	40800115 	stw	r2,4(r8)
2008f9ec:	84000044 	addi	r16,r16,1
2008f9f0:	43000015 	stw	r12,0(r8)
2008f9f4:	d8c02015 	stw	r3,128(sp)
2008f9f8:	dc001f15 	stw	r16,124(sp)
2008f9fc:	008001c4 	movi	r2,7
2008fa00:	14000e16 	blt	r2,r16,2008fa3c <___vfprintf_internal_r+0x1538>
2008fa04:	44800204 	addi	r18,r8,8
2008fa08:	003ecb06 	br	2008f538 <__flash_rwdata_start+0xffff074c>
2008fa0c:	00800034 	movhi	r2,0
2008fa10:	1081f484 	addi	r2,r2,2002
2008fa14:	d8802c15 	stw	r2,176(sp)
2008fa18:	dac02c17 	ldw	r11,176(sp)
2008fa1c:	1d47883a 	add	r3,r3,r21
2008fa20:	84000044 	addi	r16,r16,1
2008fa24:	92c00015 	stw	r11,0(r18)
2008fa28:	95400115 	stw	r21,4(r18)
2008fa2c:	d8c02015 	stw	r3,128(sp)
2008fa30:	dc001f15 	stw	r16,124(sp)
2008fa34:	008001c4 	movi	r2,7
2008fa38:	143ebe0e 	bge	r2,r16,2008f534 <__flash_rwdata_start+0xffff0748>
2008fa3c:	b009883a 	mov	r4,r22
2008fa40:	b80b883a 	mov	r5,r23
2008fa44:	d9801e04 	addi	r6,sp,120
2008fa48:	00964680 	call	20096468 <__sprint_r>
2008fa4c:	103ba11e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fa50:	d8c02017 	ldw	r3,128(sp)
2008fa54:	dc001f17 	ldw	r16,124(sp)
2008fa58:	dc800404 	addi	r18,sp,16
2008fa5c:	003eb606 	br	2008f538 <__flash_rwdata_start+0xffff074c>
2008fa60:	b009883a 	mov	r4,r22
2008fa64:	b80b883a 	mov	r5,r23
2008fa68:	d9801e04 	addi	r6,sp,120
2008fa6c:	00964680 	call	20096468 <__sprint_r>
2008fa70:	103b981e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fa74:	d8c02017 	ldw	r3,128(sp)
2008fa78:	dc001f17 	ldw	r16,124(sp)
2008fa7c:	da000404 	addi	r8,sp,16
2008fa80:	003e8d06 	br	2008f4b8 <__flash_rwdata_start+0xffff06cc>
2008fa84:	b009883a 	mov	r4,r22
2008fa88:	b80b883a 	mov	r5,r23
2008fa8c:	d9801e04 	addi	r6,sp,120
2008fa90:	00964680 	call	20096468 <__sprint_r>
2008fa94:	103b8f1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fa98:	d8c02017 	ldw	r3,128(sp)
2008fa9c:	dc001f17 	ldw	r16,124(sp)
2008faa0:	dc800404 	addi	r18,sp,16
2008faa4:	003e8f06 	br	2008f4e4 <__flash_rwdata_start+0xffff06f8>
2008faa8:	db001e04 	addi	r12,sp,120
2008faac:	0025883a 	mov	r18,zero
2008fab0:	db003115 	stw	r12,196(sp)
2008fab4:	003be106 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008fab8:	b009883a 	mov	r4,r22
2008fabc:	b80b883a 	mov	r5,r23
2008fac0:	d9801e04 	addi	r6,sp,120
2008fac4:	00964680 	call	20096468 <__sprint_r>
2008fac8:	103b821e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008facc:	d8c02017 	ldw	r3,128(sp)
2008fad0:	da000404 	addi	r8,sp,16
2008fad4:	003c3b06 	br	2008ebc4 <__flash_rwdata_start+0xfffefdd8>
2008fad8:	04e7c83a 	sub	r19,zero,r19
2008fadc:	9804c03a 	cmpne	r2,r19,zero
2008fae0:	0739c83a 	sub	fp,zero,fp
2008fae4:	e0b9c83a 	sub	fp,fp,r2
2008fae8:	05400b44 	movi	r21,45
2008faec:	dd402785 	stb	r21,158(sp)
2008faf0:	da403215 	stw	r9,200(sp)
2008faf4:	00800044 	movi	r2,1
2008faf8:	9f06b03a 	or	r3,r19,fp
2008fafc:	003bb506 	br	2008e9d4 <__flash_rwdata_start+0xfffefbe8>
2008fb00:	da003f15 	stw	r8,252(sp)
2008fb04:	da403e15 	stw	r9,248(sp)
2008fb08:	0094e540 	call	20094e54 <__fpclassifyd>
2008fb0c:	da003f17 	ldw	r8,252(sp)
2008fb10:	da403e17 	ldw	r9,248(sp)
2008fb14:	1000ce26 	beq	r2,zero,2008fe50 <___vfprintf_internal_r+0x194c>
2008fb18:	057ff7c4 	movi	r21,-33
2008fb1c:	00bfffc4 	movi	r2,-1
2008fb20:	856a703a 	and	r21,r16,r21
2008fb24:	4881e826 	beq	r9,r2,200902c8 <___vfprintf_internal_r+0x1dc4>
2008fb28:	008011c4 	movi	r2,71
2008fb2c:	a881e326 	beq	r21,r2,200902bc <___vfprintf_internal_r+0x1db8>
2008fb30:	db003917 	ldw	r12,228(sp)
2008fb34:	8ac04014 	ori	r11,r17,256
2008fb38:	dac02d15 	stw	r11,180(sp)
2008fb3c:	6001ed16 	blt	r12,zero,200902f4 <___vfprintf_internal_r+0x1df0>
2008fb40:	dc803917 	ldw	r18,228(sp)
2008fb44:	d8002b05 	stb	zero,172(sp)
2008fb48:	00801984 	movi	r2,102
2008fb4c:	80811826 	beq	r16,r2,2008ffb0 <___vfprintf_internal_r+0x1aac>
2008fb50:	00801184 	movi	r2,70
2008fb54:	80811626 	beq	r16,r2,2008ffb0 <___vfprintf_internal_r+0x1aac>
2008fb58:	00801144 	movi	r2,69
2008fb5c:	a881e926 	beq	r21,r2,20090304 <___vfprintf_internal_r+0x1e00>
2008fb60:	4839883a 	mov	fp,r9
2008fb64:	d8802604 	addi	r2,sp,152
2008fb68:	d8800115 	stw	r2,4(sp)
2008fb6c:	d9403717 	ldw	r5,220(sp)
2008fb70:	d8802504 	addi	r2,sp,148
2008fb74:	d8800215 	stw	r2,8(sp)
2008fb78:	d8802104 	addi	r2,sp,132
2008fb7c:	df000015 	stw	fp,0(sp)
2008fb80:	d8800315 	stw	r2,12(sp)
2008fb84:	b009883a 	mov	r4,r22
2008fb88:	900d883a 	mov	r6,r18
2008fb8c:	01c00084 	movi	r7,2
2008fb90:	da003f15 	stw	r8,252(sp)
2008fb94:	da403e15 	stw	r9,248(sp)
2008fb98:	0090b4c0 	call	20090b4c <_dtoa_r>
2008fb9c:	d8803115 	stw	r2,196(sp)
2008fba0:	008019c4 	movi	r2,103
2008fba4:	da003f17 	ldw	r8,252(sp)
2008fba8:	da403e17 	ldw	r9,248(sp)
2008fbac:	80800226 	beq	r16,r2,2008fbb8 <___vfprintf_internal_r+0x16b4>
2008fbb0:	008011c4 	movi	r2,71
2008fbb4:	8081101e 	bne	r16,r2,2008fff8 <___vfprintf_internal_r+0x1af4>
2008fbb8:	8880004c 	andi	r2,r17,1
2008fbbc:	1001dd26 	beq	r2,zero,20090334 <___vfprintf_internal_r+0x1e30>
2008fbc0:	db003117 	ldw	r12,196(sp)
2008fbc4:	6715883a 	add	r10,r12,fp
2008fbc8:	d9003717 	ldw	r4,220(sp)
2008fbcc:	900b883a 	mov	r5,r18
2008fbd0:	000d883a 	mov	r6,zero
2008fbd4:	000f883a 	mov	r7,zero
2008fbd8:	da003f15 	stw	r8,252(sp)
2008fbdc:	da403e15 	stw	r9,248(sp)
2008fbe0:	da803d15 	stw	r10,244(sp)
2008fbe4:	0098c780 	call	20098c78 <__eqdf2>
2008fbe8:	da003f17 	ldw	r8,252(sp)
2008fbec:	da403e17 	ldw	r9,248(sp)
2008fbf0:	da803d17 	ldw	r10,244(sp)
2008fbf4:	10016526 	beq	r2,zero,2009018c <___vfprintf_internal_r+0x1c88>
2008fbf8:	d8802117 	ldw	r2,132(sp)
2008fbfc:	1280062e 	bgeu	r2,r10,2008fc18 <___vfprintf_internal_r+0x1714>
2008fc00:	01000c04 	movi	r4,48
2008fc04:	10c00044 	addi	r3,r2,1
2008fc08:	d8c02115 	stw	r3,132(sp)
2008fc0c:	11000005 	stb	r4,0(r2)
2008fc10:	d8802117 	ldw	r2,132(sp)
2008fc14:	12bffb36 	bltu	r2,r10,2008fc04 <__flash_rwdata_start+0xffff0e18>
2008fc18:	db003117 	ldw	r12,196(sp)
2008fc1c:	1305c83a 	sub	r2,r2,r12
2008fc20:	d8803315 	stw	r2,204(sp)
2008fc24:	008011c4 	movi	r2,71
2008fc28:	a8814d26 	beq	r21,r2,20090160 <___vfprintf_internal_r+0x1c5c>
2008fc2c:	00801944 	movi	r2,101
2008fc30:	1402060e 	bge	r2,r16,2009044c <___vfprintf_internal_r+0x1f48>
2008fc34:	00801984 	movi	r2,102
2008fc38:	8081b426 	beq	r16,r2,2009030c <___vfprintf_internal_r+0x1e08>
2008fc3c:	db002617 	ldw	r12,152(sp)
2008fc40:	db003415 	stw	r12,208(sp)
2008fc44:	db003417 	ldw	r12,208(sp)
2008fc48:	dac03317 	ldw	r11,204(sp)
2008fc4c:	62c1a016 	blt	r12,r11,200902d0 <___vfprintf_internal_r+0x1dcc>
2008fc50:	8c40004c 	andi	r17,r17,1
2008fc54:	8801bf1e 	bne	r17,zero,20090354 <___vfprintf_internal_r+0x1e50>
2008fc58:	6005883a 	mov	r2,r12
2008fc5c:	6001b316 	blt	r12,zero,2009032c <___vfprintf_internal_r+0x1e28>
2008fc60:	dc803417 	ldw	r18,208(sp)
2008fc64:	df002b07 	ldb	fp,172(sp)
2008fc68:	e0012e1e 	bne	fp,zero,20090124 <___vfprintf_internal_r+0x1c20>
2008fc6c:	dc402d17 	ldw	r17,180(sp)
2008fc70:	dd402783 	ldbu	r21,158(sp)
2008fc74:	d8802b15 	stw	r2,172(sp)
2008fc78:	dcc02d15 	stw	r19,180(sp)
2008fc7c:	d8003215 	stw	zero,200(sp)
2008fc80:	003b7306 	br	2008ea50 <__flash_rwdata_start+0xfffefc64>
2008fc84:	00800084 	movi	r2,2
2008fc88:	003c4d06 	br	2008edc0 <__flash_rwdata_start+0xfffeffd4>
2008fc8c:	8880040c 	andi	r2,r17,16
2008fc90:	1000091e 	bne	r2,zero,2008fcb8 <___vfprintf_internal_r+0x17b4>
2008fc94:	8c40100c 	andi	r17,r17,64
2008fc98:	88000726 	beq	r17,zero,2008fcb8 <___vfprintf_internal_r+0x17b4>
2008fc9c:	db002d17 	ldw	r12,180(sp)
2008fca0:	dac02f17 	ldw	r11,188(sp)
2008fca4:	60800017 	ldw	r2,0(r12)
2008fca8:	63000104 	addi	r12,r12,4
2008fcac:	db002d15 	stw	r12,180(sp)
2008fcb0:	12c0000d 	sth	r11,0(r2)
2008fcb4:	003a4e06 	br	2008e5f0 <__flash_rwdata_start+0xfffef804>
2008fcb8:	db002d17 	ldw	r12,180(sp)
2008fcbc:	dac02f17 	ldw	r11,188(sp)
2008fcc0:	60800017 	ldw	r2,0(r12)
2008fcc4:	63000104 	addi	r12,r12,4
2008fcc8:	db002d15 	stw	r12,180(sp)
2008fccc:	12c00015 	stw	r11,0(r2)
2008fcd0:	003a4706 	br	2008e5f0 <__flash_rwdata_start+0xfffef804>
2008fcd4:	1c000007 	ldb	r16,0(r3)
2008fcd8:	1805883a 	mov	r2,r3
2008fcdc:	003a6e06 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008fce0:	88c0100c 	andi	r3,r17,64
2008fce4:	18006b26 	beq	r3,zero,2008fe94 <___vfprintf_internal_r+0x1990>
2008fce8:	dac02d17 	ldw	r11,180(sp)
2008fcec:	14c0000b 	ldhu	r19,0(r2)
2008fcf0:	0039883a 	mov	fp,zero
2008fcf4:	5ac00104 	addi	r11,r11,4
2008fcf8:	dac02d15 	stw	r11,180(sp)
2008fcfc:	003cb206 	br	2008efc8 <__flash_rwdata_start+0xffff01dc>
2008fd00:	01000034 	movhi	r4,0
2008fd04:	2101f484 	addi	r4,r4,2002
2008fd08:	d9002c15 	stw	r4,176(sp)
2008fd0c:	dac02c17 	ldw	r11,176(sp)
2008fd10:	1c87883a 	add	r3,r3,r18
2008fd14:	10800044 	addi	r2,r2,1
2008fd18:	42c00015 	stw	r11,0(r8)
2008fd1c:	44800115 	stw	r18,4(r8)
2008fd20:	d8c02015 	stw	r3,128(sp)
2008fd24:	d8801f15 	stw	r2,124(sp)
2008fd28:	010001c4 	movi	r4,7
2008fd2c:	20bee016 	blt	r4,r2,2008f8b0 <__flash_rwdata_start+0xffff0ac4>
2008fd30:	42000204 	addi	r8,r8,8
2008fd34:	003ee506 	br	2008f8cc <__flash_rwdata_start+0xffff0ae0>
2008fd38:	01000034 	movhi	r4,0
2008fd3c:	2101f484 	addi	r4,r4,2002
2008fd40:	d9002c15 	stw	r4,176(sp)
2008fd44:	003bbe06 	br	2008ec40 <__flash_rwdata_start+0xfffefe54>
2008fd48:	b009883a 	mov	r4,r22
2008fd4c:	b80b883a 	mov	r5,r23
2008fd50:	d9801e04 	addi	r6,sp,120
2008fd54:	00964680 	call	20096468 <__sprint_r>
2008fd58:	103ade1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fd5c:	d8c02017 	ldw	r3,128(sp)
2008fd60:	da000404 	addi	r8,sp,16
2008fd64:	003d6b06 	br	2008f314 <__flash_rwdata_start+0xffff0528>
2008fd68:	d8801f17 	ldw	r2,124(sp)
2008fd6c:	03000034 	movhi	r12,0
2008fd70:	01000044 	movi	r4,1
2008fd74:	18c00044 	addi	r3,r3,1
2008fd78:	10800044 	addi	r2,r2,1
2008fd7c:	6301ec04 	addi	r12,r12,1968
2008fd80:	41000115 	stw	r4,4(r8)
2008fd84:	43000015 	stw	r12,0(r8)
2008fd88:	d8c02015 	stw	r3,128(sp)
2008fd8c:	d8801f15 	stw	r2,124(sp)
2008fd90:	010001c4 	movi	r4,7
2008fd94:	20804916 	blt	r4,r2,2008febc <___vfprintf_internal_r+0x19b8>
2008fd98:	42000204 	addi	r8,r8,8
2008fd9c:	8000041e 	bne	r16,zero,2008fdb0 <___vfprintf_internal_r+0x18ac>
2008fda0:	dac03317 	ldw	r11,204(sp)
2008fda4:	5800021e 	bne	r11,zero,2008fdb0 <___vfprintf_internal_r+0x18ac>
2008fda8:	8880004c 	andi	r2,r17,1
2008fdac:	103bbb26 	beq	r2,zero,2008ec9c <__flash_rwdata_start+0xfffefeb0>
2008fdb0:	db003817 	ldw	r12,224(sp)
2008fdb4:	d8801f17 	ldw	r2,124(sp)
2008fdb8:	dac03517 	ldw	r11,212(sp)
2008fdbc:	1b07883a 	add	r3,r3,r12
2008fdc0:	10800044 	addi	r2,r2,1
2008fdc4:	42c00015 	stw	r11,0(r8)
2008fdc8:	43000115 	stw	r12,4(r8)
2008fdcc:	d8c02015 	stw	r3,128(sp)
2008fdd0:	d8801f15 	stw	r2,124(sp)
2008fdd4:	010001c4 	movi	r4,7
2008fdd8:	20812e16 	blt	r4,r2,20090294 <___vfprintf_internal_r+0x1d90>
2008fddc:	42000204 	addi	r8,r8,8
2008fde0:	0421c83a 	sub	r16,zero,r16
2008fde4:	04005c0e 	bge	zero,r16,2008ff58 <___vfprintf_internal_r+0x1a54>
2008fde8:	04800404 	movi	r18,16
2008fdec:	94009f0e 	bge	r18,r16,2009006c <___vfprintf_internal_r+0x1b68>
2008fdf0:	01000034 	movhi	r4,0
2008fdf4:	2101f484 	addi	r4,r4,2002
2008fdf8:	d9002c15 	stw	r4,176(sp)
2008fdfc:	054001c4 	movi	r21,7
2008fe00:	00000306 	br	2008fe10 <___vfprintf_internal_r+0x190c>
2008fe04:	42000204 	addi	r8,r8,8
2008fe08:	843ffc04 	addi	r16,r16,-16
2008fe0c:	94009a0e 	bge	r18,r16,20090078 <___vfprintf_internal_r+0x1b74>
2008fe10:	18c00404 	addi	r3,r3,16
2008fe14:	10800044 	addi	r2,r2,1
2008fe18:	45000015 	stw	r20,0(r8)
2008fe1c:	44800115 	stw	r18,4(r8)
2008fe20:	d8c02015 	stw	r3,128(sp)
2008fe24:	d8801f15 	stw	r2,124(sp)
2008fe28:	a8bff60e 	bge	r21,r2,2008fe04 <__flash_rwdata_start+0xffff1018>
2008fe2c:	b009883a 	mov	r4,r22
2008fe30:	b80b883a 	mov	r5,r23
2008fe34:	d9801e04 	addi	r6,sp,120
2008fe38:	00964680 	call	20096468 <__sprint_r>
2008fe3c:	103aa51e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fe40:	d8c02017 	ldw	r3,128(sp)
2008fe44:	d8801f17 	ldw	r2,124(sp)
2008fe48:	da000404 	addi	r8,sp,16
2008fe4c:	003fee06 	br	2008fe08 <__flash_rwdata_start+0xffff101c>
2008fe50:	008011c4 	movi	r2,71
2008fe54:	1400be16 	blt	r2,r16,20090150 <___vfprintf_internal_r+0x1c4c>
2008fe58:	03000034 	movhi	r12,0
2008fe5c:	6301de04 	addi	r12,r12,1912
2008fe60:	db003115 	stw	r12,196(sp)
2008fe64:	00c000c4 	movi	r3,3
2008fe68:	00bfdfc4 	movi	r2,-129
2008fe6c:	d8c02b15 	stw	r3,172(sp)
2008fe70:	88a2703a 	and	r17,r17,r2
2008fe74:	dd402783 	ldbu	r21,158(sp)
2008fe78:	dcc02d15 	stw	r19,180(sp)
2008fe7c:	1825883a 	mov	r18,r3
2008fe80:	d8003215 	stw	zero,200(sp)
2008fe84:	d8003415 	stw	zero,208(sp)
2008fe88:	003af106 	br	2008ea50 <__flash_rwdata_start+0xfffefc64>
2008fe8c:	4825883a 	mov	r18,r9
2008fe90:	003c9306 	br	2008f0e0 <__flash_rwdata_start+0xffff02f4>
2008fe94:	db002d17 	ldw	r12,180(sp)
2008fe98:	14c00017 	ldw	r19,0(r2)
2008fe9c:	0039883a 	mov	fp,zero
2008fea0:	63000104 	addi	r12,r12,4
2008fea4:	db002d15 	stw	r12,180(sp)
2008fea8:	003c4706 	br	2008efc8 <__flash_rwdata_start+0xffff01dc>
2008feac:	00800034 	movhi	r2,0
2008feb0:	1081dc04 	addi	r2,r2,1904
2008feb4:	d8803115 	stw	r2,196(sp)
2008feb8:	003bf106 	br	2008ee80 <__flash_rwdata_start+0xffff0094>
2008febc:	b009883a 	mov	r4,r22
2008fec0:	b80b883a 	mov	r5,r23
2008fec4:	d9801e04 	addi	r6,sp,120
2008fec8:	00964680 	call	20096468 <__sprint_r>
2008fecc:	103a811e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008fed0:	dc002617 	ldw	r16,152(sp)
2008fed4:	d8c02017 	ldw	r3,128(sp)
2008fed8:	da000404 	addi	r8,sp,16
2008fedc:	003faf06 	br	2008fd9c <__flash_rwdata_start+0xffff0fb0>
2008fee0:	db002e17 	ldw	r12,184(sp)
2008fee4:	1805883a 	mov	r2,r3
2008fee8:	dac02d15 	stw	r11,180(sp)
2008feec:	0319c83a 	sub	r12,zero,r12
2008fef0:	db002e15 	stw	r12,184(sp)
2008fef4:	003a8206 	br	2008e900 <__flash_rwdata_start+0xfffefb14>
2008fef8:	18800044 	addi	r2,r3,1
2008fefc:	8c400814 	ori	r17,r17,32
2008ff00:	1c000047 	ldb	r16,1(r3)
2008ff04:	0039e406 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
2008ff08:	b009883a 	mov	r4,r22
2008ff0c:	b80b883a 	mov	r5,r23
2008ff10:	d9801e04 	addi	r6,sp,120
2008ff14:	00964680 	call	20096468 <__sprint_r>
2008ff18:	103a6e1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008ff1c:	d8c02017 	ldw	r3,128(sp)
2008ff20:	da000404 	addi	r8,sp,16
2008ff24:	003d0c06 	br	2008f358 <__flash_rwdata_start+0xffff056c>
2008ff28:	db002817 	ldw	r12,160(sp)
2008ff2c:	d8c03117 	ldw	r3,196(sp)
2008ff30:	60e5c83a 	sub	r18,r12,r3
2008ff34:	003ac106 	br	2008ea3c <__flash_rwdata_start+0xfffefc50>
2008ff38:	b009883a 	mov	r4,r22
2008ff3c:	b80b883a 	mov	r5,r23
2008ff40:	d9801e04 	addi	r6,sp,120
2008ff44:	00964680 	call	20096468 <__sprint_r>
2008ff48:	103a621e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2008ff4c:	d8c02017 	ldw	r3,128(sp)
2008ff50:	d8801f17 	ldw	r2,124(sp)
2008ff54:	da000404 	addi	r8,sp,16
2008ff58:	db003317 	ldw	r12,204(sp)
2008ff5c:	dac03117 	ldw	r11,196(sp)
2008ff60:	10800044 	addi	r2,r2,1
2008ff64:	1b07883a 	add	r3,r3,r12
2008ff68:	42c00015 	stw	r11,0(r8)
2008ff6c:	43000115 	stw	r12,4(r8)
2008ff70:	d8c02015 	stw	r3,128(sp)
2008ff74:	d8801f15 	stw	r2,124(sp)
2008ff78:	010001c4 	movi	r4,7
2008ff7c:	20bb460e 	bge	r4,r2,2008ec98 <__flash_rwdata_start+0xfffefeac>
2008ff80:	003d8506 	br	2008f598 <__flash_rwdata_start+0xffff07ac>
2008ff84:	da003f15 	stw	r8,252(sp)
2008ff88:	008c4740 	call	2008c474 <strlen>
2008ff8c:	1025883a 	mov	r18,r2
2008ff90:	da003f17 	ldw	r8,252(sp)
2008ff94:	903c540e 	bge	r18,zero,2008f0e8 <__flash_rwdata_start+0xffff02fc>
2008ff98:	0005883a 	mov	r2,zero
2008ff9c:	003c5206 	br	2008f0e8 <__flash_rwdata_start+0xffff02fc>
2008ffa0:	01000034 	movhi	r4,0
2008ffa4:	2101f884 	addi	r4,r4,2018
2008ffa8:	d9003615 	stw	r4,216(sp)
2008ffac:	003adc06 	br	2008eb20 <__flash_rwdata_start+0xfffefd34>
2008ffb0:	d8802604 	addi	r2,sp,152
2008ffb4:	d8800115 	stw	r2,4(sp)
2008ffb8:	d9403717 	ldw	r5,220(sp)
2008ffbc:	d8802504 	addi	r2,sp,148
2008ffc0:	d8800215 	stw	r2,8(sp)
2008ffc4:	d8802104 	addi	r2,sp,132
2008ffc8:	da400015 	stw	r9,0(sp)
2008ffcc:	d8800315 	stw	r2,12(sp)
2008ffd0:	b009883a 	mov	r4,r22
2008ffd4:	900d883a 	mov	r6,r18
2008ffd8:	01c000c4 	movi	r7,3
2008ffdc:	da003f15 	stw	r8,252(sp)
2008ffe0:	da403e15 	stw	r9,248(sp)
2008ffe4:	0090b4c0 	call	20090b4c <_dtoa_r>
2008ffe8:	da403e17 	ldw	r9,248(sp)
2008ffec:	da003f17 	ldw	r8,252(sp)
2008fff0:	d8803115 	stw	r2,196(sp)
2008fff4:	4839883a 	mov	fp,r9
2008fff8:	dac03117 	ldw	r11,196(sp)
2008fffc:	00801184 	movi	r2,70
20090000:	5f15883a 	add	r10,r11,fp
20090004:	a8bef01e 	bne	r21,r2,2008fbc8 <__flash_rwdata_start+0xffff0ddc>
20090008:	59000007 	ldb	r4,0(r11)
2009000c:	00800c04 	movi	r2,48
20090010:	2080d526 	beq	r4,r2,20090368 <___vfprintf_internal_r+0x1e64>
20090014:	d8c02617 	ldw	r3,152(sp)
20090018:	50d5883a 	add	r10,r10,r3
2009001c:	003eea06 	br	2008fbc8 <__flash_rwdata_start+0xffff0ddc>
20090020:	0025883a 	mov	r18,zero
20090024:	003db306 	br	2008f6f4 <__flash_rwdata_start+0xffff0908>
20090028:	b009883a 	mov	r4,r22
2009002c:	b80b883a 	mov	r5,r23
20090030:	d9801e04 	addi	r6,sp,120
20090034:	00964680 	call	20096468 <__sprint_r>
20090038:	103a261e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2009003c:	d8c02017 	ldw	r3,128(sp)
20090040:	da000404 	addi	r8,sp,16
20090044:	003daa06 	br	2008f6f0 <__flash_rwdata_start+0xffff0904>
20090048:	b009883a 	mov	r4,r22
2009004c:	b80b883a 	mov	r5,r23
20090050:	d9801e04 	addi	r6,sp,120
20090054:	00964680 	call	20096468 <__sprint_r>
20090058:	103a1e1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
2009005c:	d8802617 	ldw	r2,152(sp)
20090060:	d8c02017 	ldw	r3,128(sp)
20090064:	da000404 	addi	r8,sp,16
20090068:	003e2c06 	br	2008f91c <__flash_rwdata_start+0xffff0b30>
2009006c:	03000034 	movhi	r12,0
20090070:	6301f484 	addi	r12,r12,2002
20090074:	db002c15 	stw	r12,176(sp)
20090078:	dac02c17 	ldw	r11,176(sp)
2009007c:	1c07883a 	add	r3,r3,r16
20090080:	10800044 	addi	r2,r2,1
20090084:	42c00015 	stw	r11,0(r8)
20090088:	44000115 	stw	r16,4(r8)
2009008c:	d8c02015 	stw	r3,128(sp)
20090090:	d8801f15 	stw	r2,124(sp)
20090094:	010001c4 	movi	r4,7
20090098:	20bfa716 	blt	r4,r2,2008ff38 <__flash_rwdata_start+0xffff114c>
2009009c:	42000204 	addi	r8,r8,8
200900a0:	003fad06 	br	2008ff58 <__flash_rwdata_start+0xffff116c>
200900a4:	00800184 	movi	r2,6
200900a8:	1240012e 	bgeu	r2,r9,200900b0 <___vfprintf_internal_r+0x1bac>
200900ac:	1013883a 	mov	r9,r2
200900b0:	4825883a 	mov	r18,r9
200900b4:	4805883a 	mov	r2,r9
200900b8:	4800c216 	blt	r9,zero,200903c4 <___vfprintf_internal_r+0x1ec0>
200900bc:	d8802b15 	stw	r2,172(sp)
200900c0:	00800034 	movhi	r2,0
200900c4:	1081ea04 	addi	r2,r2,1960
200900c8:	d8803115 	stw	r2,196(sp)
200900cc:	dcc02d15 	stw	r19,180(sp)
200900d0:	d8003215 	stw	zero,200(sp)
200900d4:	d8003415 	stw	zero,208(sp)
200900d8:	0005883a 	mov	r2,zero
200900dc:	003a6306 	br	2008ea6c <__flash_rwdata_start+0xfffefc80>
200900e0:	0021883a 	mov	r16,zero
200900e4:	003e1f06 	br	2008f964 <__flash_rwdata_start+0xffff0b78>
200900e8:	b009883a 	mov	r4,r22
200900ec:	b80b883a 	mov	r5,r23
200900f0:	d9801e04 	addi	r6,sp,120
200900f4:	00964680 	call	20096468 <__sprint_r>
200900f8:	1039f61e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
200900fc:	d8802617 	ldw	r2,152(sp)
20090100:	db003317 	ldw	r12,204(sp)
20090104:	d8c02017 	ldw	r3,128(sp)
20090108:	da000404 	addi	r8,sp,16
2009010c:	6085c83a 	sub	r2,r12,r2
20090110:	003e1306 	br	2008f960 <__flash_rwdata_start+0xffff0b74>
20090114:	03000034 	movhi	r12,0
20090118:	6301f884 	addi	r12,r12,2018
2009011c:	db003615 	stw	r12,216(sp)
20090120:	003b0206 	br	2008ed2c <__flash_rwdata_start+0xfffeff40>
20090124:	00c00b44 	movi	r3,45
20090128:	d8802b15 	stw	r2,172(sp)
2009012c:	dc402d17 	ldw	r17,180(sp)
20090130:	d8c02785 	stb	r3,158(sp)
20090134:	dcc02d15 	stw	r19,180(sp)
20090138:	d8003215 	stw	zero,200(sp)
2009013c:	00800b44 	movi	r2,45
20090140:	003a4706 	br	2008ea60 <__flash_rwdata_start+0xfffefc74>
20090144:	05400b44 	movi	r21,45
20090148:	dd402785 	stb	r21,158(sp)
2009014c:	003b4706 	br	2008ee6c <__flash_rwdata_start+0xffff0080>
20090150:	00800034 	movhi	r2,0
20090154:	1081df04 	addi	r2,r2,1916
20090158:	d8803115 	stw	r2,196(sp)
2009015c:	003f4106 	br	2008fe64 <__flash_rwdata_start+0xffff1078>
20090160:	d8c02617 	ldw	r3,152(sp)
20090164:	00bfff44 	movi	r2,-3
20090168:	18801116 	blt	r3,r2,200901b0 <___vfprintf_internal_r+0x1cac>
2009016c:	48c01016 	blt	r9,r3,200901b0 <___vfprintf_internal_r+0x1cac>
20090170:	d8c03415 	stw	r3,208(sp)
20090174:	040019c4 	movi	r16,103
20090178:	003eb206 	br	2008fc44 <__flash_rwdata_start+0xffff0e58>
2009017c:	01000034 	movhi	r4,0
20090180:	2101f484 	addi	r4,r4,2002
20090184:	d9002c15 	stw	r4,176(sp)
20090188:	003cb106 	br	2008f450 <__flash_rwdata_start+0xffff0664>
2009018c:	5005883a 	mov	r2,r10
20090190:	003ea106 	br	2008fc18 <__flash_rwdata_start+0xffff0e2c>
20090194:	da402b15 	stw	r9,172(sp)
20090198:	dd402783 	ldbu	r21,158(sp)
2009019c:	4825883a 	mov	r18,r9
200901a0:	dcc02d15 	stw	r19,180(sp)
200901a4:	d8003215 	stw	zero,200(sp)
200901a8:	d8003415 	stw	zero,208(sp)
200901ac:	003a2806 	br	2008ea50 <__flash_rwdata_start+0xfffefc64>
200901b0:	843fff84 	addi	r16,r16,-2
200901b4:	1f3fffc4 	addi	fp,r3,-1
200901b8:	df002615 	stw	fp,152(sp)
200901bc:	dc0022c5 	stb	r16,139(sp)
200901c0:	e0009816 	blt	fp,zero,20090424 <___vfprintf_internal_r+0x1f20>
200901c4:	00800ac4 	movi	r2,43
200901c8:	d8802305 	stb	r2,140(sp)
200901cc:	00800244 	movi	r2,9
200901d0:	1700750e 	bge	r2,fp,200903a8 <___vfprintf_internal_r+0x1ea4>
200901d4:	dd4022c4 	addi	r21,sp,139
200901d8:	dc002c15 	stw	r16,176(sp)
200901dc:	4025883a 	mov	r18,r8
200901e0:	a821883a 	mov	r16,r21
200901e4:	e009883a 	mov	r4,fp
200901e8:	01400284 	movi	r5,10
200901ec:	0088b940 	call	20088b94 <__modsi3>
200901f0:	10800c04 	addi	r2,r2,48
200901f4:	843fffc4 	addi	r16,r16,-1
200901f8:	e009883a 	mov	r4,fp
200901fc:	01400284 	movi	r5,10
20090200:	80800005 	stb	r2,0(r16)
20090204:	0088b400 	call	20088b40 <__divsi3>
20090208:	1039883a 	mov	fp,r2
2009020c:	00800244 	movi	r2,9
20090210:	173ff416 	blt	r2,fp,200901e4 <__flash_rwdata_start+0xffff13f8>
20090214:	9011883a 	mov	r8,r18
20090218:	e0800c04 	addi	r2,fp,48
2009021c:	8025883a 	mov	r18,r16
20090220:	913fffc4 	addi	r4,r18,-1
20090224:	90bfffc5 	stb	r2,-1(r18)
20090228:	dc002c17 	ldw	r16,176(sp)
2009022c:	2540852e 	bgeu	r4,r21,20090444 <___vfprintf_internal_r+0x1f40>
20090230:	d9402384 	addi	r5,sp,142
20090234:	2c8bc83a 	sub	r5,r5,r18
20090238:	d8c02344 	addi	r3,sp,141
2009023c:	a94b883a 	add	r5,r21,r5
20090240:	00000106 	br	20090248 <___vfprintf_internal_r+0x1d44>
20090244:	20800003 	ldbu	r2,0(r4)
20090248:	18800005 	stb	r2,0(r3)
2009024c:	18c00044 	addi	r3,r3,1
20090250:	21000044 	addi	r4,r4,1
20090254:	197ffb1e 	bne	r3,r5,20090244 <__flash_rwdata_start+0xffff1458>
20090258:	d8802304 	addi	r2,sp,140
2009025c:	1485c83a 	sub	r2,r2,r18
20090260:	d8c02344 	addi	r3,sp,141
20090264:	1885883a 	add	r2,r3,r2
20090268:	dac03317 	ldw	r11,204(sp)
2009026c:	156bc83a 	sub	r21,r2,r21
20090270:	dd403a15 	stw	r21,232(sp)
20090274:	00800044 	movi	r2,1
20090278:	5d65883a 	add	r18,r11,r21
2009027c:	12c0660e 	bge	r2,r11,20090418 <___vfprintf_internal_r+0x1f14>
20090280:	94800044 	addi	r18,r18,1
20090284:	9005883a 	mov	r2,r18
20090288:	90006116 	blt	r18,zero,20090410 <___vfprintf_internal_r+0x1f0c>
2009028c:	d8003415 	stw	zero,208(sp)
20090290:	003e7406 	br	2008fc64 <__flash_rwdata_start+0xffff0e78>
20090294:	b009883a 	mov	r4,r22
20090298:	b80b883a 	mov	r5,r23
2009029c:	d9801e04 	addi	r6,sp,120
200902a0:	00964680 	call	20096468 <__sprint_r>
200902a4:	10398b1e 	bne	r2,zero,2008e8d4 <__flash_rwdata_start+0xfffefae8>
200902a8:	dc002617 	ldw	r16,152(sp)
200902ac:	d8c02017 	ldw	r3,128(sp)
200902b0:	d8801f17 	ldw	r2,124(sp)
200902b4:	da000404 	addi	r8,sp,16
200902b8:	003ec906 	br	2008fde0 <__flash_rwdata_start+0xffff0ff4>
200902bc:	483e1c1e 	bne	r9,zero,2008fb30 <__flash_rwdata_start+0xffff0d44>
200902c0:	9013883a 	mov	r9,r18
200902c4:	003e1a06 	br	2008fb30 <__flash_rwdata_start+0xffff0d44>
200902c8:	02400184 	movi	r9,6
200902cc:	003e1806 	br	2008fb30 <__flash_rwdata_start+0xffff0d44>
200902d0:	d8c03417 	ldw	r3,208(sp)
200902d4:	00c04b0e 	bge	zero,r3,20090404 <___vfprintf_internal_r+0x1f00>
200902d8:	04800044 	movi	r18,1
200902dc:	dac03317 	ldw	r11,204(sp)
200902e0:	92e5883a 	add	r18,r18,r11
200902e4:	9005883a 	mov	r2,r18
200902e8:	903e5e0e 	bge	r18,zero,2008fc64 <__flash_rwdata_start+0xffff0e78>
200902ec:	0005883a 	mov	r2,zero
200902f0:	003e5c06 	br	2008fc64 <__flash_rwdata_start+0xffff0e78>
200902f4:	00c00b44 	movi	r3,45
200902f8:	64a0003c 	xorhi	r18,r12,32768
200902fc:	d8c02b05 	stb	r3,172(sp)
20090300:	003e1106 	br	2008fb48 <__flash_rwdata_start+0xffff0d5c>
20090304:	4f000044 	addi	fp,r9,1
20090308:	003e1606 	br	2008fb64 <__flash_rwdata_start+0xffff0d78>
2009030c:	d8c02617 	ldw	r3,152(sp)
20090310:	d8c03415 	stw	r3,208(sp)
20090314:	00c0350e 	bge	zero,r3,200903ec <___vfprintf_internal_r+0x1ee8>
20090318:	4800081e 	bne	r9,zero,2009033c <___vfprintf_internal_r+0x1e38>
2009031c:	8c40004c 	andi	r17,r17,1
20090320:	8800061e 	bne	r17,zero,2009033c <___vfprintf_internal_r+0x1e38>
20090324:	1805883a 	mov	r2,r3
20090328:	183e4d0e 	bge	r3,zero,2008fc60 <__flash_rwdata_start+0xffff0e74>
2009032c:	0005883a 	mov	r2,zero
20090330:	003e4b06 	br	2008fc60 <__flash_rwdata_start+0xffff0e74>
20090334:	d8802117 	ldw	r2,132(sp)
20090338:	003e3706 	br	2008fc18 <__flash_rwdata_start+0xffff0e2c>
2009033c:	dac03417 	ldw	r11,208(sp)
20090340:	4a400044 	addi	r9,r9,1
20090344:	5a65883a 	add	r18,r11,r9
20090348:	9005883a 	mov	r2,r18
2009034c:	903e450e 	bge	r18,zero,2008fc64 <__flash_rwdata_start+0xffff0e78>
20090350:	003fe606 	br	200902ec <__flash_rwdata_start+0xffff1500>
20090354:	db003417 	ldw	r12,208(sp)
20090358:	64800044 	addi	r18,r12,1
2009035c:	9005883a 	mov	r2,r18
20090360:	903e400e 	bge	r18,zero,2008fc64 <__flash_rwdata_start+0xffff0e78>
20090364:	003fe106 	br	200902ec <__flash_rwdata_start+0xffff1500>
20090368:	d9003717 	ldw	r4,220(sp)
2009036c:	900b883a 	mov	r5,r18
20090370:	000d883a 	mov	r6,zero
20090374:	000f883a 	mov	r7,zero
20090378:	da003f15 	stw	r8,252(sp)
2009037c:	da403e15 	stw	r9,248(sp)
20090380:	da803d15 	stw	r10,244(sp)
20090384:	0098c780 	call	20098c78 <__eqdf2>
20090388:	da003f17 	ldw	r8,252(sp)
2009038c:	da403e17 	ldw	r9,248(sp)
20090390:	da803d17 	ldw	r10,244(sp)
20090394:	103f1f26 	beq	r2,zero,20090014 <__flash_rwdata_start+0xffff1228>
20090398:	00800044 	movi	r2,1
2009039c:	1707c83a 	sub	r3,r2,fp
200903a0:	d8c02615 	stw	r3,152(sp)
200903a4:	003f1c06 	br	20090018 <__flash_rwdata_start+0xffff122c>
200903a8:	00800c04 	movi	r2,48
200903ac:	e0c00c04 	addi	r3,fp,48
200903b0:	d8802345 	stb	r2,141(sp)
200903b4:	d8c02385 	stb	r3,142(sp)
200903b8:	d88023c4 	addi	r2,sp,143
200903bc:	dd4022c4 	addi	r21,sp,139
200903c0:	003fa906 	br	20090268 <__flash_rwdata_start+0xffff147c>
200903c4:	0005883a 	mov	r2,zero
200903c8:	003f3c06 	br	200900bc <__flash_rwdata_start+0xffff12d0>
200903cc:	dac02d17 	ldw	r11,180(sp)
200903d0:	5a400017 	ldw	r9,0(r11)
200903d4:	5ac00104 	addi	r11,r11,4
200903d8:	dac02d15 	stw	r11,180(sp)
200903dc:	483ec80e 	bge	r9,zero,2008ff00 <__flash_rwdata_start+0xffff1114>
200903e0:	027fffc4 	movi	r9,-1
200903e4:	1c000047 	ldb	r16,1(r3)
200903e8:	0038ab06 	br	2008e698 <__flash_rwdata_start+0xfffef8ac>
200903ec:	4800111e 	bne	r9,zero,20090434 <___vfprintf_internal_r+0x1f30>
200903f0:	8c40004c 	andi	r17,r17,1
200903f4:	88000f1e 	bne	r17,zero,20090434 <___vfprintf_internal_r+0x1f30>
200903f8:	00800044 	movi	r2,1
200903fc:	1025883a 	mov	r18,r2
20090400:	003e1806 	br	2008fc64 <__flash_rwdata_start+0xffff0e78>
20090404:	04800084 	movi	r18,2
20090408:	90e5c83a 	sub	r18,r18,r3
2009040c:	003fb306 	br	200902dc <__flash_rwdata_start+0xffff14f0>
20090410:	0005883a 	mov	r2,zero
20090414:	003f9d06 	br	2009028c <__flash_rwdata_start+0xffff14a0>
20090418:	88a2703a 	and	r17,r17,r2
2009041c:	883f9926 	beq	r17,zero,20090284 <__flash_rwdata_start+0xffff1498>
20090420:	003f9706 	br	20090280 <__flash_rwdata_start+0xffff1494>
20090424:	00800b44 	movi	r2,45
20090428:	0739c83a 	sub	fp,zero,fp
2009042c:	d8802305 	stb	r2,140(sp)
20090430:	003f6606 	br	200901cc <__flash_rwdata_start+0xffff13e0>
20090434:	4c800084 	addi	r18,r9,2
20090438:	9005883a 	mov	r2,r18
2009043c:	903e090e 	bge	r18,zero,2008fc64 <__flash_rwdata_start+0xffff0e78>
20090440:	003faa06 	br	200902ec <__flash_rwdata_start+0xffff1500>
20090444:	d8802344 	addi	r2,sp,141
20090448:	003f8706 	br	20090268 <__flash_rwdata_start+0xffff147c>
2009044c:	d8c02617 	ldw	r3,152(sp)
20090450:	003f5806 	br	200901b4 <__flash_rwdata_start+0xffff13c8>

20090454 <__vfprintf_internal>:
20090454:	2007883a 	mov	r3,r4
20090458:	01000034 	movhi	r4,0
2009045c:	210a7104 	addi	r4,r4,10692
20090460:	21000017 	ldw	r4,0(r4)
20090464:	2805883a 	mov	r2,r5
20090468:	300f883a 	mov	r7,r6
2009046c:	180b883a 	mov	r5,r3
20090470:	100d883a 	mov	r6,r2
20090474:	008e5041 	jmpi	2008e504 <___vfprintf_internal_r>

20090478 <__sbprintf>:
20090478:	2880030b 	ldhu	r2,12(r5)
2009047c:	2ac01917 	ldw	r11,100(r5)
20090480:	2a80038b 	ldhu	r10,14(r5)
20090484:	2a400717 	ldw	r9,28(r5)
20090488:	2a000917 	ldw	r8,36(r5)
2009048c:	defee204 	addi	sp,sp,-1144
20090490:	00c10004 	movi	r3,1024
20090494:	dc011a15 	stw	r16,1128(sp)
20090498:	10bfff4c 	andi	r2,r2,65533
2009049c:	2821883a 	mov	r16,r5
200904a0:	d8cb883a 	add	r5,sp,r3
200904a4:	dc811c15 	stw	r18,1136(sp)
200904a8:	dc411b15 	stw	r17,1132(sp)
200904ac:	dfc11d15 	stw	ra,1140(sp)
200904b0:	2025883a 	mov	r18,r4
200904b4:	d881030d 	sth	r2,1036(sp)
200904b8:	dac11915 	stw	r11,1124(sp)
200904bc:	da81038d 	sth	r10,1038(sp)
200904c0:	da410715 	stw	r9,1052(sp)
200904c4:	da010915 	stw	r8,1060(sp)
200904c8:	dec10015 	stw	sp,1024(sp)
200904cc:	dec10415 	stw	sp,1040(sp)
200904d0:	d8c10215 	stw	r3,1032(sp)
200904d4:	d8c10515 	stw	r3,1044(sp)
200904d8:	d8010615 	stw	zero,1048(sp)
200904dc:	008e5040 	call	2008e504 <___vfprintf_internal_r>
200904e0:	1023883a 	mov	r17,r2
200904e4:	10000416 	blt	r2,zero,200904f8 <__sbprintf+0x80>
200904e8:	9009883a 	mov	r4,r18
200904ec:	d9410004 	addi	r5,sp,1024
200904f0:	009247c0 	call	2009247c <_fflush_r>
200904f4:	10000d1e 	bne	r2,zero,2009052c <__sbprintf+0xb4>
200904f8:	d8c1030b 	ldhu	r3,1036(sp)
200904fc:	18c0100c 	andi	r3,r3,64
20090500:	18000326 	beq	r3,zero,20090510 <__sbprintf+0x98>
20090504:	8080030b 	ldhu	r2,12(r16)
20090508:	10801014 	ori	r2,r2,64
2009050c:	8080030d 	sth	r2,12(r16)
20090510:	8805883a 	mov	r2,r17
20090514:	dfc11d17 	ldw	ra,1140(sp)
20090518:	dc811c17 	ldw	r18,1136(sp)
2009051c:	dc411b17 	ldw	r17,1132(sp)
20090520:	dc011a17 	ldw	r16,1128(sp)
20090524:	dec11e04 	addi	sp,sp,1144
20090528:	f800283a 	ret
2009052c:	047fffc4 	movi	r17,-1
20090530:	003ff106 	br	200904f8 <__flash_rwdata_start+0xffff170c>

20090534 <_vsnprintf_r>:
20090534:	3005883a 	mov	r2,r6
20090538:	30003616 	blt	r6,zero,20090614 <_vsnprintf_r+0xe0>
2009053c:	deffe404 	addi	sp,sp,-112
20090540:	00c08204 	movi	r3,520
20090544:	dc001a15 	stw	r16,104(sp)
20090548:	dfc01b15 	stw	ra,108(sp)
2009054c:	d8c0030d 	sth	r3,12(sp)
20090550:	d9400015 	stw	r5,0(sp)
20090554:	d9400415 	stw	r5,16(sp)
20090558:	380d883a 	mov	r6,r7
2009055c:	2021883a 	mov	r16,r4
20090560:	10001326 	beq	r2,zero,200905b0 <_vsnprintf_r+0x7c>
20090564:	00c00034 	movhi	r3,0
20090568:	18ca7104 	addi	r3,r3,10692
2009056c:	19000017 	ldw	r4,0(r3)
20090570:	d9c01c17 	ldw	r7,112(sp)
20090574:	10bfffc4 	addi	r2,r2,-1
20090578:	d8800215 	stw	r2,8(sp)
2009057c:	d8800515 	stw	r2,20(sp)
20090580:	d80b883a 	mov	r5,sp
20090584:	00bfffc4 	movi	r2,-1
20090588:	d880038d 	sth	r2,14(sp)
2009058c:	008c5740 	call	2008c574 <___svfprintf_internal_r>
20090590:	00ffffc4 	movi	r3,-1
20090594:	10c01c16 	blt	r2,r3,20090608 <_vsnprintf_r+0xd4>
20090598:	d8c00017 	ldw	r3,0(sp)
2009059c:	18000005 	stb	zero,0(r3)
200905a0:	dfc01b17 	ldw	ra,108(sp)
200905a4:	dc001a17 	ldw	r16,104(sp)
200905a8:	dec01c04 	addi	sp,sp,112
200905ac:	f800283a 	ret
200905b0:	00800034 	movhi	r2,0
200905b4:	108a7104 	addi	r2,r2,10692
200905b8:	11000017 	ldw	r4,0(r2)
200905bc:	d9c01c17 	ldw	r7,112(sp)
200905c0:	00bfffc4 	movi	r2,-1
200905c4:	d80b883a 	mov	r5,sp
200905c8:	d8000215 	stw	zero,8(sp)
200905cc:	d8000515 	stw	zero,20(sp)
200905d0:	d880038d 	sth	r2,14(sp)
200905d4:	008c5740 	call	2008c574 <___svfprintf_internal_r>
200905d8:	00ffffc4 	movi	r3,-1
200905dc:	10c00416 	blt	r2,r3,200905f0 <_vsnprintf_r+0xbc>
200905e0:	dfc01b17 	ldw	ra,108(sp)
200905e4:	dc001a17 	ldw	r16,104(sp)
200905e8:	dec01c04 	addi	sp,sp,112
200905ec:	f800283a 	ret
200905f0:	00c022c4 	movi	r3,139
200905f4:	80c00015 	stw	r3,0(r16)
200905f8:	dfc01b17 	ldw	ra,108(sp)
200905fc:	dc001a17 	ldw	r16,104(sp)
20090600:	dec01c04 	addi	sp,sp,112
20090604:	f800283a 	ret
20090608:	00c022c4 	movi	r3,139
2009060c:	80c00015 	stw	r3,0(r16)
20090610:	003fe106 	br	20090598 <__flash_rwdata_start+0xffff17ac>
20090614:	008022c4 	movi	r2,139
20090618:	20800015 	stw	r2,0(r4)
2009061c:	00bfffc4 	movi	r2,-1
20090620:	f800283a 	ret

20090624 <vsnprintf>:
20090624:	00800034 	movhi	r2,0
20090628:	108a7104 	addi	r2,r2,10692
2009062c:	2011883a 	mov	r8,r4
20090630:	11000017 	ldw	r4,0(r2)
20090634:	defffe04 	addi	sp,sp,-8
20090638:	2807883a 	mov	r3,r5
2009063c:	3005883a 	mov	r2,r6
20090640:	d9c00015 	stw	r7,0(sp)
20090644:	400b883a 	mov	r5,r8
20090648:	180d883a 	mov	r6,r3
2009064c:	100f883a 	mov	r7,r2
20090650:	dfc00115 	stw	ra,4(sp)
20090654:	00905340 	call	20090534 <_vsnprintf_r>
20090658:	dfc00117 	ldw	ra,4(sp)
2009065c:	dec00204 	addi	sp,sp,8
20090660:	f800283a 	ret

20090664 <__swsetup_r>:
20090664:	00800034 	movhi	r2,0
20090668:	defffd04 	addi	sp,sp,-12
2009066c:	108a7104 	addi	r2,r2,10692
20090670:	dc400115 	stw	r17,4(sp)
20090674:	2023883a 	mov	r17,r4
20090678:	11000017 	ldw	r4,0(r2)
2009067c:	dc000015 	stw	r16,0(sp)
20090680:	dfc00215 	stw	ra,8(sp)
20090684:	2821883a 	mov	r16,r5
20090688:	20000226 	beq	r4,zero,20090694 <__swsetup_r+0x30>
2009068c:	20c00e17 	ldw	r3,56(r4)
20090690:	18003126 	beq	r3,zero,20090758 <__swsetup_r+0xf4>
20090694:	8080030b 	ldhu	r2,12(r16)
20090698:	10c0020c 	andi	r3,r2,8
2009069c:	100d883a 	mov	r6,r2
200906a0:	18000f26 	beq	r3,zero,200906e0 <__swsetup_r+0x7c>
200906a4:	80c00417 	ldw	r3,16(r16)
200906a8:	18001526 	beq	r3,zero,20090700 <__swsetup_r+0x9c>
200906ac:	1100004c 	andi	r4,r2,1
200906b0:	20001c1e 	bne	r4,zero,20090724 <__swsetup_r+0xc0>
200906b4:	1080008c 	andi	r2,r2,2
200906b8:	1000291e 	bne	r2,zero,20090760 <__swsetup_r+0xfc>
200906bc:	80800517 	ldw	r2,20(r16)
200906c0:	80800215 	stw	r2,8(r16)
200906c4:	18001c26 	beq	r3,zero,20090738 <__swsetup_r+0xd4>
200906c8:	0005883a 	mov	r2,zero
200906cc:	dfc00217 	ldw	ra,8(sp)
200906d0:	dc400117 	ldw	r17,4(sp)
200906d4:	dc000017 	ldw	r16,0(sp)
200906d8:	dec00304 	addi	sp,sp,12
200906dc:	f800283a 	ret
200906e0:	3080040c 	andi	r2,r6,16
200906e4:	10002e26 	beq	r2,zero,200907a0 <__swsetup_r+0x13c>
200906e8:	3080010c 	andi	r2,r6,4
200906ec:	10001e1e 	bne	r2,zero,20090768 <__swsetup_r+0x104>
200906f0:	80c00417 	ldw	r3,16(r16)
200906f4:	30800214 	ori	r2,r6,8
200906f8:	8080030d 	sth	r2,12(r16)
200906fc:	183feb1e 	bne	r3,zero,200906ac <__flash_rwdata_start+0xffff18c0>
20090700:	1140a00c 	andi	r5,r2,640
20090704:	01008004 	movi	r4,512
20090708:	293fe826 	beq	r5,r4,200906ac <__flash_rwdata_start+0xffff18c0>
2009070c:	8809883a 	mov	r4,r17
20090710:	800b883a 	mov	r5,r16
20090714:	00933e40 	call	200933e4 <__smakebuf_r>
20090718:	8080030b 	ldhu	r2,12(r16)
2009071c:	80c00417 	ldw	r3,16(r16)
20090720:	003fe206 	br	200906ac <__flash_rwdata_start+0xffff18c0>
20090724:	80800517 	ldw	r2,20(r16)
20090728:	80000215 	stw	zero,8(r16)
2009072c:	0085c83a 	sub	r2,zero,r2
20090730:	80800615 	stw	r2,24(r16)
20090734:	183fe41e 	bne	r3,zero,200906c8 <__flash_rwdata_start+0xffff18dc>
20090738:	80c0030b 	ldhu	r3,12(r16)
2009073c:	0005883a 	mov	r2,zero
20090740:	1900200c 	andi	r4,r3,128
20090744:	203fe126 	beq	r4,zero,200906cc <__flash_rwdata_start+0xffff18e0>
20090748:	18c01014 	ori	r3,r3,64
2009074c:	80c0030d 	sth	r3,12(r16)
20090750:	00bfffc4 	movi	r2,-1
20090754:	003fdd06 	br	200906cc <__flash_rwdata_start+0xffff18e0>
20090758:	00928580 	call	20092858 <__sinit>
2009075c:	003fcd06 	br	20090694 <__flash_rwdata_start+0xffff18a8>
20090760:	0005883a 	mov	r2,zero
20090764:	003fd606 	br	200906c0 <__flash_rwdata_start+0xffff18d4>
20090768:	81400c17 	ldw	r5,48(r16)
2009076c:	28000626 	beq	r5,zero,20090788 <__swsetup_r+0x124>
20090770:	80801004 	addi	r2,r16,64
20090774:	28800326 	beq	r5,r2,20090784 <__swsetup_r+0x120>
20090778:	8809883a 	mov	r4,r17
2009077c:	00929cc0 	call	200929cc <_free_r>
20090780:	8180030b 	ldhu	r6,12(r16)
20090784:	80000c15 	stw	zero,48(r16)
20090788:	80c00417 	ldw	r3,16(r16)
2009078c:	00bff6c4 	movi	r2,-37
20090790:	118c703a 	and	r6,r2,r6
20090794:	80000115 	stw	zero,4(r16)
20090798:	80c00015 	stw	r3,0(r16)
2009079c:	003fd506 	br	200906f4 <__flash_rwdata_start+0xffff1908>
200907a0:	00800244 	movi	r2,9
200907a4:	88800015 	stw	r2,0(r17)
200907a8:	30801014 	ori	r2,r6,64
200907ac:	8080030d 	sth	r2,12(r16)
200907b0:	00bfffc4 	movi	r2,-1
200907b4:	003fc506 	br	200906cc <__flash_rwdata_start+0xffff18e0>

200907b8 <__call_exitprocs>:
200907b8:	00800034 	movhi	r2,0
200907bc:	108a7004 	addi	r2,r2,10688
200907c0:	10800017 	ldw	r2,0(r2)
200907c4:	defff404 	addi	sp,sp,-48
200907c8:	dd800815 	stw	r22,32(sp)
200907cc:	d8800015 	stw	r2,0(sp)
200907d0:	10805204 	addi	r2,r2,328
200907d4:	dd000615 	stw	r20,24(sp)
200907d8:	dc800415 	stw	r18,16(sp)
200907dc:	dfc00b15 	stw	ra,44(sp)
200907e0:	df000a15 	stw	fp,40(sp)
200907e4:	ddc00915 	stw	r23,36(sp)
200907e8:	dd400715 	stw	r21,28(sp)
200907ec:	dcc00515 	stw	r19,20(sp)
200907f0:	dc400315 	stw	r17,12(sp)
200907f4:	dc000215 	stw	r16,8(sp)
200907f8:	2025883a 	mov	r18,r4
200907fc:	2829883a 	mov	r20,r5
20090800:	d8800115 	stw	r2,4(sp)
20090804:	05bfffc4 	movi	r22,-1
20090808:	d8800017 	ldw	r2,0(sp)
2009080c:	14c05217 	ldw	r19,328(r2)
20090810:	98001d26 	beq	r19,zero,20090888 <__call_exitprocs+0xd0>
20090814:	dd400117 	ldw	r21,4(sp)
20090818:	98800117 	ldw	r2,4(r19)
2009081c:	173fffc4 	addi	fp,r2,-1
20090820:	e0000d16 	blt	fp,zero,20090858 <__call_exitprocs+0xa0>
20090824:	14000044 	addi	r16,r2,1
20090828:	8421883a 	add	r16,r16,r16
2009082c:	8421883a 	add	r16,r16,r16
20090830:	84402004 	addi	r17,r16,128
20090834:	9c63883a 	add	r17,r19,r17
20090838:	9c21883a 	add	r16,r19,r16
2009083c:	a0001e26 	beq	r20,zero,200908b8 <__call_exitprocs+0x100>
20090840:	80804017 	ldw	r2,256(r16)
20090844:	15001c26 	beq	r2,r20,200908b8 <__call_exitprocs+0x100>
20090848:	e73fffc4 	addi	fp,fp,-1
2009084c:	843fff04 	addi	r16,r16,-4
20090850:	8c7fff04 	addi	r17,r17,-4
20090854:	e5bff91e 	bne	fp,r22,2009083c <__flash_rwdata_start+0xffff1a50>
20090858:	00880274 	movhi	r2,8201
2009085c:	10adb804 	addi	r2,r2,-18720
20090860:	10000926 	beq	r2,zero,20090888 <__call_exitprocs+0xd0>
20090864:	98800117 	ldw	r2,4(r19)
20090868:	1000311e 	bne	r2,zero,20090930 <__call_exitprocs+0x178>
2009086c:	98800017 	ldw	r2,0(r19)
20090870:	10003426 	beq	r2,zero,20090944 <__call_exitprocs+0x18c>
20090874:	9809883a 	mov	r4,r19
20090878:	a8800015 	stw	r2,0(r21)
2009087c:	008b6e00 	call	2008b6e0 <free>
20090880:	acc00017 	ldw	r19,0(r21)
20090884:	983fe41e 	bne	r19,zero,20090818 <__flash_rwdata_start+0xffff1a2c>
20090888:	dfc00b17 	ldw	ra,44(sp)
2009088c:	df000a17 	ldw	fp,40(sp)
20090890:	ddc00917 	ldw	r23,36(sp)
20090894:	dd800817 	ldw	r22,32(sp)
20090898:	dd400717 	ldw	r21,28(sp)
2009089c:	dd000617 	ldw	r20,24(sp)
200908a0:	dcc00517 	ldw	r19,20(sp)
200908a4:	dc800417 	ldw	r18,16(sp)
200908a8:	dc400317 	ldw	r17,12(sp)
200908ac:	dc000217 	ldw	r16,8(sp)
200908b0:	dec00c04 	addi	sp,sp,48
200908b4:	f800283a 	ret
200908b8:	98800117 	ldw	r2,4(r19)
200908bc:	80c00017 	ldw	r3,0(r16)
200908c0:	10bfffc4 	addi	r2,r2,-1
200908c4:	17001526 	beq	r2,fp,2009091c <__call_exitprocs+0x164>
200908c8:	80000015 	stw	zero,0(r16)
200908cc:	183fde26 	beq	r3,zero,20090848 <__flash_rwdata_start+0xffff1a5c>
200908d0:	00800044 	movi	r2,1
200908d4:	1708983a 	sll	r4,r2,fp
200908d8:	98806217 	ldw	r2,392(r19)
200908dc:	9dc00117 	ldw	r23,4(r19)
200908e0:	2084703a 	and	r2,r4,r2
200908e4:	1000061e 	bne	r2,zero,20090900 <__call_exitprocs+0x148>
200908e8:	183ee83a 	callr	r3
200908ec:	98800117 	ldw	r2,4(r19)
200908f0:	15ffc51e 	bne	r2,r23,20090808 <__flash_rwdata_start+0xffff1a1c>
200908f4:	a8800017 	ldw	r2,0(r21)
200908f8:	14ffd326 	beq	r2,r19,20090848 <__flash_rwdata_start+0xffff1a5c>
200908fc:	003fc206 	br	20090808 <__flash_rwdata_start+0xffff1a1c>
20090900:	98806317 	ldw	r2,396(r19)
20090904:	2084703a 	and	r2,r4,r2
20090908:	1000061e 	bne	r2,zero,20090924 <__call_exitprocs+0x16c>
2009090c:	89400017 	ldw	r5,0(r17)
20090910:	9009883a 	mov	r4,r18
20090914:	183ee83a 	callr	r3
20090918:	003ff406 	br	200908ec <__flash_rwdata_start+0xffff1b00>
2009091c:	9f000115 	stw	fp,4(r19)
20090920:	003fea06 	br	200908cc <__flash_rwdata_start+0xffff1ae0>
20090924:	89000017 	ldw	r4,0(r17)
20090928:	183ee83a 	callr	r3
2009092c:	003fef06 	br	200908ec <__flash_rwdata_start+0xffff1b00>
20090930:	98800017 	ldw	r2,0(r19)
20090934:	982b883a 	mov	r21,r19
20090938:	1027883a 	mov	r19,r2
2009093c:	983fb61e 	bne	r19,zero,20090818 <__flash_rwdata_start+0xffff1a2c>
20090940:	003fd106 	br	20090888 <__flash_rwdata_start+0xffff1a9c>
20090944:	0005883a 	mov	r2,zero
20090948:	003ffa06 	br	20090934 <__flash_rwdata_start+0xffff1b48>

2009094c <quorem>:
2009094c:	defff704 	addi	sp,sp,-36
20090950:	dc800215 	stw	r18,8(sp)
20090954:	20800417 	ldw	r2,16(r4)
20090958:	2c800417 	ldw	r18,16(r5)
2009095c:	dfc00815 	stw	ra,32(sp)
20090960:	ddc00715 	stw	r23,28(sp)
20090964:	dd800615 	stw	r22,24(sp)
20090968:	dd400515 	stw	r21,20(sp)
2009096c:	dd000415 	stw	r20,16(sp)
20090970:	dcc00315 	stw	r19,12(sp)
20090974:	dc400115 	stw	r17,4(sp)
20090978:	dc000015 	stw	r16,0(sp)
2009097c:	14807116 	blt	r2,r18,20090b44 <quorem+0x1f8>
20090980:	94bfffc4 	addi	r18,r18,-1
20090984:	94ad883a 	add	r22,r18,r18
20090988:	b5ad883a 	add	r22,r22,r22
2009098c:	2c400504 	addi	r17,r5,20
20090990:	8da9883a 	add	r20,r17,r22
20090994:	25400504 	addi	r21,r4,20
20090998:	282f883a 	mov	r23,r5
2009099c:	adad883a 	add	r22,r21,r22
200909a0:	a1400017 	ldw	r5,0(r20)
200909a4:	2021883a 	mov	r16,r4
200909a8:	b1000017 	ldw	r4,0(r22)
200909ac:	29400044 	addi	r5,r5,1
200909b0:	0088bf00 	call	20088bf0 <__udivsi3>
200909b4:	1027883a 	mov	r19,r2
200909b8:	10002c26 	beq	r2,zero,20090a6c <quorem+0x120>
200909bc:	a813883a 	mov	r9,r21
200909c0:	8811883a 	mov	r8,r17
200909c4:	0009883a 	mov	r4,zero
200909c8:	000d883a 	mov	r6,zero
200909cc:	41c00017 	ldw	r7,0(r8)
200909d0:	49400017 	ldw	r5,0(r9)
200909d4:	42000104 	addi	r8,r8,4
200909d8:	38bfffcc 	andi	r2,r7,65535
200909dc:	14c5383a 	mul	r2,r2,r19
200909e0:	380ed43a 	srli	r7,r7,16
200909e4:	28ffffcc 	andi	r3,r5,65535
200909e8:	2085883a 	add	r2,r4,r2
200909ec:	1008d43a 	srli	r4,r2,16
200909f0:	3ccf383a 	mul	r7,r7,r19
200909f4:	198d883a 	add	r6,r3,r6
200909f8:	10ffffcc 	andi	r3,r2,65535
200909fc:	30c7c83a 	sub	r3,r6,r3
20090a00:	280ad43a 	srli	r5,r5,16
20090a04:	21c9883a 	add	r4,r4,r7
20090a08:	180dd43a 	srai	r6,r3,16
20090a0c:	20bfffcc 	andi	r2,r4,65535
20090a10:	288bc83a 	sub	r5,r5,r2
20090a14:	298b883a 	add	r5,r5,r6
20090a18:	280e943a 	slli	r7,r5,16
20090a1c:	18ffffcc 	andi	r3,r3,65535
20090a20:	2008d43a 	srli	r4,r4,16
20090a24:	38ceb03a 	or	r7,r7,r3
20090a28:	49c00015 	stw	r7,0(r9)
20090a2c:	280dd43a 	srai	r6,r5,16
20090a30:	4a400104 	addi	r9,r9,4
20090a34:	a23fe52e 	bgeu	r20,r8,200909cc <__flash_rwdata_start+0xffff1be0>
20090a38:	b0800017 	ldw	r2,0(r22)
20090a3c:	10000b1e 	bne	r2,zero,20090a6c <quorem+0x120>
20090a40:	b0bfff04 	addi	r2,r22,-4
20090a44:	a880082e 	bgeu	r21,r2,20090a68 <quorem+0x11c>
20090a48:	b0ffff17 	ldw	r3,-4(r22)
20090a4c:	18000326 	beq	r3,zero,20090a5c <quorem+0x110>
20090a50:	00000506 	br	20090a68 <quorem+0x11c>
20090a54:	10c00017 	ldw	r3,0(r2)
20090a58:	1800031e 	bne	r3,zero,20090a68 <quorem+0x11c>
20090a5c:	10bfff04 	addi	r2,r2,-4
20090a60:	94bfffc4 	addi	r18,r18,-1
20090a64:	a8bffb36 	bltu	r21,r2,20090a54 <__flash_rwdata_start+0xffff1c68>
20090a68:	84800415 	stw	r18,16(r16)
20090a6c:	8009883a 	mov	r4,r16
20090a70:	b80b883a 	mov	r5,r23
20090a74:	00940b40 	call	200940b4 <__mcmp>
20090a78:	10002616 	blt	r2,zero,20090b14 <quorem+0x1c8>
20090a7c:	9cc00044 	addi	r19,r19,1
20090a80:	a80d883a 	mov	r6,r21
20090a84:	000b883a 	mov	r5,zero
20090a88:	31000017 	ldw	r4,0(r6)
20090a8c:	88800017 	ldw	r2,0(r17)
20090a90:	31800104 	addi	r6,r6,4
20090a94:	20ffffcc 	andi	r3,r4,65535
20090a98:	194b883a 	add	r5,r3,r5
20090a9c:	10ffffcc 	andi	r3,r2,65535
20090aa0:	28c7c83a 	sub	r3,r5,r3
20090aa4:	1004d43a 	srli	r2,r2,16
20090aa8:	2008d43a 	srli	r4,r4,16
20090aac:	180bd43a 	srai	r5,r3,16
20090ab0:	18ffffcc 	andi	r3,r3,65535
20090ab4:	2089c83a 	sub	r4,r4,r2
20090ab8:	2149883a 	add	r4,r4,r5
20090abc:	2004943a 	slli	r2,r4,16
20090ac0:	8c400104 	addi	r17,r17,4
20090ac4:	200bd43a 	srai	r5,r4,16
20090ac8:	10c6b03a 	or	r3,r2,r3
20090acc:	30ffff15 	stw	r3,-4(r6)
20090ad0:	a47fed2e 	bgeu	r20,r17,20090a88 <__flash_rwdata_start+0xffff1c9c>
20090ad4:	9485883a 	add	r2,r18,r18
20090ad8:	1085883a 	add	r2,r2,r2
20090adc:	a887883a 	add	r3,r21,r2
20090ae0:	18800017 	ldw	r2,0(r3)
20090ae4:	10000b1e 	bne	r2,zero,20090b14 <quorem+0x1c8>
20090ae8:	18bfff04 	addi	r2,r3,-4
20090aec:	a880082e 	bgeu	r21,r2,20090b10 <quorem+0x1c4>
20090af0:	18ffff17 	ldw	r3,-4(r3)
20090af4:	18000326 	beq	r3,zero,20090b04 <quorem+0x1b8>
20090af8:	00000506 	br	20090b10 <quorem+0x1c4>
20090afc:	10c00017 	ldw	r3,0(r2)
20090b00:	1800031e 	bne	r3,zero,20090b10 <quorem+0x1c4>
20090b04:	10bfff04 	addi	r2,r2,-4
20090b08:	94bfffc4 	addi	r18,r18,-1
20090b0c:	a8bffb36 	bltu	r21,r2,20090afc <__flash_rwdata_start+0xffff1d10>
20090b10:	84800415 	stw	r18,16(r16)
20090b14:	9805883a 	mov	r2,r19
20090b18:	dfc00817 	ldw	ra,32(sp)
20090b1c:	ddc00717 	ldw	r23,28(sp)
20090b20:	dd800617 	ldw	r22,24(sp)
20090b24:	dd400517 	ldw	r21,20(sp)
20090b28:	dd000417 	ldw	r20,16(sp)
20090b2c:	dcc00317 	ldw	r19,12(sp)
20090b30:	dc800217 	ldw	r18,8(sp)
20090b34:	dc400117 	ldw	r17,4(sp)
20090b38:	dc000017 	ldw	r16,0(sp)
20090b3c:	dec00904 	addi	sp,sp,36
20090b40:	f800283a 	ret
20090b44:	0005883a 	mov	r2,zero
20090b48:	003ff306 	br	20090b18 <__flash_rwdata_start+0xffff1d2c>

20090b4c <_dtoa_r>:
20090b4c:	20801017 	ldw	r2,64(r4)
20090b50:	deffde04 	addi	sp,sp,-136
20090b54:	dd401d15 	stw	r21,116(sp)
20090b58:	dcc01b15 	stw	r19,108(sp)
20090b5c:	dc801a15 	stw	r18,104(sp)
20090b60:	dc401915 	stw	r17,100(sp)
20090b64:	dc001815 	stw	r16,96(sp)
20090b68:	dfc02115 	stw	ra,132(sp)
20090b6c:	df002015 	stw	fp,128(sp)
20090b70:	ddc01f15 	stw	r23,124(sp)
20090b74:	dd801e15 	stw	r22,120(sp)
20090b78:	dd001c15 	stw	r20,112(sp)
20090b7c:	d9c00315 	stw	r7,12(sp)
20090b80:	2021883a 	mov	r16,r4
20090b84:	302b883a 	mov	r21,r6
20090b88:	2825883a 	mov	r18,r5
20090b8c:	dc402417 	ldw	r17,144(sp)
20090b90:	3027883a 	mov	r19,r6
20090b94:	10000826 	beq	r2,zero,20090bb8 <_dtoa_r+0x6c>
20090b98:	21801117 	ldw	r6,68(r4)
20090b9c:	00c00044 	movi	r3,1
20090ba0:	100b883a 	mov	r5,r2
20090ba4:	1986983a 	sll	r3,r3,r6
20090ba8:	11800115 	stw	r6,4(r2)
20090bac:	10c00215 	stw	r3,8(r2)
20090bb0:	00938880 	call	20093888 <_Bfree>
20090bb4:	80001015 	stw	zero,64(r16)
20090bb8:	a8002d16 	blt	r21,zero,20090c70 <_dtoa_r+0x124>
20090bbc:	88000015 	stw	zero,0(r17)
20090bc0:	a8dffc2c 	andhi	r3,r21,32752
20090bc4:	009ffc34 	movhi	r2,32752
20090bc8:	18801b26 	beq	r3,r2,20090c38 <_dtoa_r+0xec>
20090bcc:	9009883a 	mov	r4,r18
20090bd0:	980b883a 	mov	r5,r19
20090bd4:	000d883a 	mov	r6,zero
20090bd8:	000f883a 	mov	r7,zero
20090bdc:	0098c780 	call	20098c78 <__eqdf2>
20090be0:	10002a1e 	bne	r2,zero,20090c8c <_dtoa_r+0x140>
20090be4:	d8c02317 	ldw	r3,140(sp)
20090be8:	d9002517 	ldw	r4,148(sp)
20090bec:	00800044 	movi	r2,1
20090bf0:	18800015 	stw	r2,0(r3)
20090bf4:	2001a226 	beq	r4,zero,20091280 <_dtoa_r+0x734>
20090bf8:	00800034 	movhi	r2,0
20090bfc:	1081ec44 	addi	r2,r2,1969
20090c00:	20800015 	stw	r2,0(r4)
20090c04:	10bfffc4 	addi	r2,r2,-1
20090c08:	dfc02117 	ldw	ra,132(sp)
20090c0c:	df002017 	ldw	fp,128(sp)
20090c10:	ddc01f17 	ldw	r23,124(sp)
20090c14:	dd801e17 	ldw	r22,120(sp)
20090c18:	dd401d17 	ldw	r21,116(sp)
20090c1c:	dd001c17 	ldw	r20,112(sp)
20090c20:	dcc01b17 	ldw	r19,108(sp)
20090c24:	dc801a17 	ldw	r18,104(sp)
20090c28:	dc401917 	ldw	r17,100(sp)
20090c2c:	dc001817 	ldw	r16,96(sp)
20090c30:	dec02204 	addi	sp,sp,136
20090c34:	f800283a 	ret
20090c38:	d8c02317 	ldw	r3,140(sp)
20090c3c:	0089c3c4 	movi	r2,9999
20090c40:	18800015 	stw	r2,0(r3)
20090c44:	90017c26 	beq	r18,zero,20091238 <_dtoa_r+0x6ec>
20090c48:	00800034 	movhi	r2,0
20090c4c:	10820004 	addi	r2,r2,2048
20090c50:	d9002517 	ldw	r4,148(sp)
20090c54:	203fec26 	beq	r4,zero,20090c08 <__flash_rwdata_start+0xffff1e1c>
20090c58:	10c000c7 	ldb	r3,3(r2)
20090c5c:	18017d1e 	bne	r3,zero,20091254 <_dtoa_r+0x708>
20090c60:	10c000c4 	addi	r3,r2,3
20090c64:	d9802517 	ldw	r6,148(sp)
20090c68:	30c00015 	stw	r3,0(r6)
20090c6c:	003fe606 	br	20090c08 <__flash_rwdata_start+0xffff1e1c>
20090c70:	04e00034 	movhi	r19,32768
20090c74:	9cffffc4 	addi	r19,r19,-1
20090c78:	00800044 	movi	r2,1
20090c7c:	ace6703a 	and	r19,r21,r19
20090c80:	88800015 	stw	r2,0(r17)
20090c84:	982b883a 	mov	r21,r19
20090c88:	003fcd06 	br	20090bc0 <__flash_rwdata_start+0xffff1dd4>
20090c8c:	d8800204 	addi	r2,sp,8
20090c90:	a822d53a 	srli	r17,r21,20
20090c94:	d8800015 	stw	r2,0(sp)
20090c98:	8009883a 	mov	r4,r16
20090c9c:	900b883a 	mov	r5,r18
20090ca0:	980d883a 	mov	r6,r19
20090ca4:	d9c00104 	addi	r7,sp,4
20090ca8:	00944280 	call	20094428 <__d2b>
20090cac:	1039883a 	mov	fp,r2
20090cb0:	88016a1e 	bne	r17,zero,2009125c <_dtoa_r+0x710>
20090cb4:	dd000217 	ldw	r20,8(sp)
20090cb8:	dc400117 	ldw	r17,4(sp)
20090cbc:	00befbc4 	movi	r2,-1041
20090cc0:	a463883a 	add	r17,r20,r17
20090cc4:	8882ea16 	blt	r17,r2,20091870 <_dtoa_r+0xd24>
20090cc8:	00bf0384 	movi	r2,-1010
20090ccc:	1445c83a 	sub	r2,r2,r17
20090cd0:	89010484 	addi	r4,r17,1042
20090cd4:	a8aa983a 	sll	r21,r21,r2
20090cd8:	9108d83a 	srl	r4,r18,r4
20090cdc:	a908b03a 	or	r4,r21,r4
20090ce0:	008b1140 	call	2008b114 <__floatunsidf>
20090ce4:	017f8434 	movhi	r5,65040
20090ce8:	01800044 	movi	r6,1
20090cec:	1009883a 	mov	r4,r2
20090cf0:	194b883a 	add	r5,r3,r5
20090cf4:	8c7fffc4 	addi	r17,r17,-1
20090cf8:	d9800f15 	stw	r6,60(sp)
20090cfc:	000d883a 	mov	r6,zero
20090d00:	01cffe34 	movhi	r7,16376
20090d04:	008a6ec0 	call	2008a6ec <__subdf3>
20090d08:	0198dbf4 	movhi	r6,25455
20090d0c:	01cff4f4 	movhi	r7,16339
20090d10:	1009883a 	mov	r4,r2
20090d14:	180b883a 	mov	r5,r3
20090d18:	3190d844 	addi	r6,r6,17249
20090d1c:	39e1e9c4 	addi	r7,r7,-30809
20090d20:	0098ebc0 	call	20098ebc <__muldf3>
20090d24:	01a2d874 	movhi	r6,35681
20090d28:	01cff1f4 	movhi	r7,16327
20090d2c:	180b883a 	mov	r5,r3
20090d30:	31b22cc4 	addi	r6,r6,-14157
20090d34:	39e28a04 	addi	r7,r7,-30168
20090d38:	1009883a 	mov	r4,r2
20090d3c:	00895840 	call	20089584 <__adddf3>
20090d40:	8809883a 	mov	r4,r17
20090d44:	102d883a 	mov	r22,r2
20090d48:	182b883a 	mov	r21,r3
20090d4c:	008b0440 	call	2008b044 <__floatsidf>
20090d50:	019427f4 	movhi	r6,20639
20090d54:	01cff4f4 	movhi	r7,16339
20090d58:	1009883a 	mov	r4,r2
20090d5c:	180b883a 	mov	r5,r3
20090d60:	319e7ec4 	addi	r6,r6,31227
20090d64:	39d104c4 	addi	r7,r7,17427
20090d68:	0098ebc0 	call	20098ebc <__muldf3>
20090d6c:	b009883a 	mov	r4,r22
20090d70:	a80b883a 	mov	r5,r21
20090d74:	100d883a 	mov	r6,r2
20090d78:	180f883a 	mov	r7,r3
20090d7c:	00895840 	call	20089584 <__adddf3>
20090d80:	1009883a 	mov	r4,r2
20090d84:	180b883a 	mov	r5,r3
20090d88:	102d883a 	mov	r22,r2
20090d8c:	182b883a 	mov	r21,r3
20090d90:	008afbc0 	call	2008afbc <__fixdfsi>
20090d94:	b009883a 	mov	r4,r22
20090d98:	a80b883a 	mov	r5,r21
20090d9c:	000d883a 	mov	r6,zero
20090da0:	000f883a 	mov	r7,zero
20090da4:	d8800515 	stw	r2,20(sp)
20090da8:	0098ddc0 	call	20098ddc <__ledf2>
20090dac:	10023116 	blt	r2,zero,20091674 <_dtoa_r+0xb28>
20090db0:	d8c00517 	ldw	r3,20(sp)
20090db4:	00800584 	movi	r2,22
20090db8:	10c21f36 	bltu	r2,r3,20091638 <_dtoa_r+0xaec>
20090dbc:	180490fa 	slli	r2,r3,3
20090dc0:	00c00034 	movhi	r3,0
20090dc4:	18c21b04 	addi	r3,r3,2156
20090dc8:	1885883a 	add	r2,r3,r2
20090dcc:	11000017 	ldw	r4,0(r2)
20090dd0:	11400117 	ldw	r5,4(r2)
20090dd4:	900d883a 	mov	r6,r18
20090dd8:	980f883a 	mov	r7,r19
20090ddc:	0098cfc0 	call	20098cfc <__gedf2>
20090de0:	0082a70e 	bge	zero,r2,20091880 <_dtoa_r+0xd34>
20090de4:	d9000517 	ldw	r4,20(sp)
20090de8:	d8000d15 	stw	zero,52(sp)
20090dec:	213fffc4 	addi	r4,r4,-1
20090df0:	d9000515 	stw	r4,20(sp)
20090df4:	a463c83a 	sub	r17,r20,r17
20090df8:	8dbfffc4 	addi	r22,r17,-1
20090dfc:	b0021916 	blt	r22,zero,20091664 <_dtoa_r+0xb18>
20090e00:	d8000815 	stw	zero,32(sp)
20090e04:	d8800517 	ldw	r2,20(sp)
20090e08:	10020e16 	blt	r2,zero,20091644 <_dtoa_r+0xaf8>
20090e0c:	b0ad883a 	add	r22,r22,r2
20090e10:	d8800a15 	stw	r2,40(sp)
20090e14:	d8000915 	stw	zero,36(sp)
20090e18:	d8c00317 	ldw	r3,12(sp)
20090e1c:	00800244 	movi	r2,9
20090e20:	10c11a36 	bltu	r2,r3,2009128c <_dtoa_r+0x740>
20090e24:	00800144 	movi	r2,5
20090e28:	10c4fc0e 	bge	r2,r3,2009221c <_dtoa_r+0x16d0>
20090e2c:	18ffff04 	addi	r3,r3,-4
20090e30:	d8c00315 	stw	r3,12(sp)
20090e34:	0029883a 	mov	r20,zero
20090e38:	d9800317 	ldw	r6,12(sp)
20090e3c:	008000c4 	movi	r2,3
20090e40:	3083bd26 	beq	r6,r2,20091d38 <_dtoa_r+0x11ec>
20090e44:	1183670e 	bge	r2,r6,20091be4 <_dtoa_r+0x1098>
20090e48:	d8c00317 	ldw	r3,12(sp)
20090e4c:	00800104 	movi	r2,4
20090e50:	1882e726 	beq	r3,r2,200919f0 <_dtoa_r+0xea4>
20090e54:	00800144 	movi	r2,5
20090e58:	1884f21e 	bne	r3,r2,20092224 <_dtoa_r+0x16d8>
20090e5c:	00800044 	movi	r2,1
20090e60:	d8800b15 	stw	r2,44(sp)
20090e64:	d8c02217 	ldw	r3,136(sp)
20090e68:	d9000517 	ldw	r4,20(sp)
20090e6c:	1907883a 	add	r3,r3,r4
20090e70:	19800044 	addi	r6,r3,1
20090e74:	d8c00c15 	stw	r3,48(sp)
20090e78:	d9800615 	stw	r6,24(sp)
20090e7c:	0183c30e 	bge	zero,r6,20091d8c <_dtoa_r+0x1240>
20090e80:	d9800617 	ldw	r6,24(sp)
20090e84:	3023883a 	mov	r17,r6
20090e88:	80001115 	stw	zero,68(r16)
20090e8c:	008005c4 	movi	r2,23
20090e90:	1184f62e 	bgeu	r2,r6,2009226c <_dtoa_r+0x1720>
20090e94:	00c00044 	movi	r3,1
20090e98:	00800104 	movi	r2,4
20090e9c:	1085883a 	add	r2,r2,r2
20090ea0:	11000504 	addi	r4,r2,20
20090ea4:	180b883a 	mov	r5,r3
20090ea8:	18c00044 	addi	r3,r3,1
20090eac:	313ffb2e 	bgeu	r6,r4,20090e9c <__flash_rwdata_start+0xffff20b0>
20090eb0:	81401115 	stw	r5,68(r16)
20090eb4:	8009883a 	mov	r4,r16
20090eb8:	00937e00 	call	200937e0 <_Balloc>
20090ebc:	d8800715 	stw	r2,28(sp)
20090ec0:	80801015 	stw	r2,64(r16)
20090ec4:	00800384 	movi	r2,14
20090ec8:	1440fd36 	bltu	r2,r17,200912c0 <_dtoa_r+0x774>
20090ecc:	a000fc26 	beq	r20,zero,200912c0 <_dtoa_r+0x774>
20090ed0:	d8800517 	ldw	r2,20(sp)
20090ed4:	0083b90e 	bge	zero,r2,20091dbc <_dtoa_r+0x1270>
20090ed8:	d8c00517 	ldw	r3,20(sp)
20090edc:	108003cc 	andi	r2,r2,15
20090ee0:	100490fa 	slli	r2,r2,3
20090ee4:	182fd13a 	srai	r23,r3,4
20090ee8:	00c00034 	movhi	r3,0
20090eec:	18c21b04 	addi	r3,r3,2156
20090ef0:	1885883a 	add	r2,r3,r2
20090ef4:	b8c0040c 	andi	r3,r23,16
20090ef8:	12c00017 	ldw	r11,0(r2)
20090efc:	12800117 	ldw	r10,4(r2)
20090f00:	18039726 	beq	r3,zero,20091d60 <_dtoa_r+0x1214>
20090f04:	00800034 	movhi	r2,0
20090f08:	10821104 	addi	r2,r2,2116
20090f0c:	11800817 	ldw	r6,32(r2)
20090f10:	11c00917 	ldw	r7,36(r2)
20090f14:	9009883a 	mov	r4,r18
20090f18:	980b883a 	mov	r5,r19
20090f1c:	da801615 	stw	r10,88(sp)
20090f20:	dac01515 	stw	r11,84(sp)
20090f24:	0089e200 	call	20089e20 <__divdf3>
20090f28:	da801617 	ldw	r10,88(sp)
20090f2c:	dac01517 	ldw	r11,84(sp)
20090f30:	bdc003cc 	andi	r23,r23,15
20090f34:	044000c4 	movi	r17,3
20090f38:	d8800e15 	stw	r2,56(sp)
20090f3c:	182b883a 	mov	r21,r3
20090f40:	b8001126 	beq	r23,zero,20090f88 <_dtoa_r+0x43c>
20090f44:	05000034 	movhi	r20,0
20090f48:	a5021104 	addi	r20,r20,2116
20090f4c:	5805883a 	mov	r2,r11
20090f50:	5007883a 	mov	r3,r10
20090f54:	b980004c 	andi	r6,r23,1
20090f58:	1009883a 	mov	r4,r2
20090f5c:	b82fd07a 	srai	r23,r23,1
20090f60:	180b883a 	mov	r5,r3
20090f64:	30000426 	beq	r6,zero,20090f78 <_dtoa_r+0x42c>
20090f68:	a1800017 	ldw	r6,0(r20)
20090f6c:	a1c00117 	ldw	r7,4(r20)
20090f70:	8c400044 	addi	r17,r17,1
20090f74:	0098ebc0 	call	20098ebc <__muldf3>
20090f78:	a5000204 	addi	r20,r20,8
20090f7c:	b83ff51e 	bne	r23,zero,20090f54 <__flash_rwdata_start+0xffff2168>
20090f80:	1017883a 	mov	r11,r2
20090f84:	1815883a 	mov	r10,r3
20090f88:	d9000e17 	ldw	r4,56(sp)
20090f8c:	a80b883a 	mov	r5,r21
20090f90:	580d883a 	mov	r6,r11
20090f94:	500f883a 	mov	r7,r10
20090f98:	0089e200 	call	20089e20 <__divdf3>
20090f9c:	1029883a 	mov	r20,r2
20090fa0:	182b883a 	mov	r21,r3
20090fa4:	d9800d17 	ldw	r6,52(sp)
20090fa8:	30000626 	beq	r6,zero,20090fc4 <_dtoa_r+0x478>
20090fac:	a009883a 	mov	r4,r20
20090fb0:	a80b883a 	mov	r5,r21
20090fb4:	000d883a 	mov	r6,zero
20090fb8:	01cffc34 	movhi	r7,16368
20090fbc:	0098ddc0 	call	20098ddc <__ledf2>
20090fc0:	10043216 	blt	r2,zero,2009208c <_dtoa_r+0x1540>
20090fc4:	8809883a 	mov	r4,r17
20090fc8:	008b0440 	call	2008b044 <__floatsidf>
20090fcc:	1009883a 	mov	r4,r2
20090fd0:	180b883a 	mov	r5,r3
20090fd4:	a00d883a 	mov	r6,r20
20090fd8:	a80f883a 	mov	r7,r21
20090fdc:	0098ebc0 	call	20098ebc <__muldf3>
20090fe0:	000d883a 	mov	r6,zero
20090fe4:	1009883a 	mov	r4,r2
20090fe8:	180b883a 	mov	r5,r3
20090fec:	01d00734 	movhi	r7,16412
20090ff0:	00895840 	call	20089584 <__adddf3>
20090ff4:	1023883a 	mov	r17,r2
20090ff8:	d9800617 	ldw	r6,24(sp)
20090ffc:	00bf3034 	movhi	r2,64704
20091000:	1885883a 	add	r2,r3,r2
20091004:	d8800e15 	stw	r2,56(sp)
20091008:	30032e26 	beq	r6,zero,20091cc4 <_dtoa_r+0x1178>
2009100c:	d8c00517 	ldw	r3,20(sp)
20091010:	da800617 	ldw	r10,24(sp)
20091014:	d8c01215 	stw	r3,72(sp)
20091018:	d9000b17 	ldw	r4,44(sp)
2009101c:	2003b026 	beq	r4,zero,20091ee0 <_dtoa_r+0x1394>
20091020:	50bfffc4 	addi	r2,r10,-1
20091024:	100490fa 	slli	r2,r2,3
20091028:	00c00034 	movhi	r3,0
2009102c:	18c21b04 	addi	r3,r3,2156
20091030:	1885883a 	add	r2,r3,r2
20091034:	11800017 	ldw	r6,0(r2)
20091038:	11c00117 	ldw	r7,4(r2)
2009103c:	d8800717 	ldw	r2,28(sp)
20091040:	0009883a 	mov	r4,zero
20091044:	014ff834 	movhi	r5,16352
20091048:	da801615 	stw	r10,88(sp)
2009104c:	15c00044 	addi	r23,r2,1
20091050:	0089e200 	call	20089e20 <__divdf3>
20091054:	d9c00e17 	ldw	r7,56(sp)
20091058:	880d883a 	mov	r6,r17
2009105c:	1009883a 	mov	r4,r2
20091060:	180b883a 	mov	r5,r3
20091064:	008a6ec0 	call	2008a6ec <__subdf3>
20091068:	a80b883a 	mov	r5,r21
2009106c:	a009883a 	mov	r4,r20
20091070:	d8c01015 	stw	r3,64(sp)
20091074:	d8800e15 	stw	r2,56(sp)
20091078:	008afbc0 	call	2008afbc <__fixdfsi>
2009107c:	1009883a 	mov	r4,r2
20091080:	d8801715 	stw	r2,92(sp)
20091084:	008b0440 	call	2008b044 <__floatsidf>
20091088:	a009883a 	mov	r4,r20
2009108c:	a80b883a 	mov	r5,r21
20091090:	100d883a 	mov	r6,r2
20091094:	180f883a 	mov	r7,r3
20091098:	008a6ec0 	call	2008a6ec <__subdf3>
2009109c:	da001717 	ldw	r8,92(sp)
200910a0:	1829883a 	mov	r20,r3
200910a4:	d8c00717 	ldw	r3,28(sp)
200910a8:	d9000e17 	ldw	r4,56(sp)
200910ac:	d9401017 	ldw	r5,64(sp)
200910b0:	42000c04 	addi	r8,r8,48
200910b4:	1023883a 	mov	r17,r2
200910b8:	1a000005 	stb	r8,0(r3)
200910bc:	880d883a 	mov	r6,r17
200910c0:	a00f883a 	mov	r7,r20
200910c4:	402b883a 	mov	r21,r8
200910c8:	0098cfc0 	call	20098cfc <__gedf2>
200910cc:	00844516 	blt	zero,r2,200921e4 <_dtoa_r+0x1698>
200910d0:	0009883a 	mov	r4,zero
200910d4:	014ffc34 	movhi	r5,16368
200910d8:	880d883a 	mov	r6,r17
200910dc:	a00f883a 	mov	r7,r20
200910e0:	008a6ec0 	call	2008a6ec <__subdf3>
200910e4:	d9000e17 	ldw	r4,56(sp)
200910e8:	d9401017 	ldw	r5,64(sp)
200910ec:	100d883a 	mov	r6,r2
200910f0:	180f883a 	mov	r7,r3
200910f4:	0098cfc0 	call	20098cfc <__gedf2>
200910f8:	da801617 	ldw	r10,88(sp)
200910fc:	00843616 	blt	zero,r2,200921d8 <_dtoa_r+0x168c>
20091100:	00800044 	movi	r2,1
20091104:	12806e0e 	bge	r2,r10,200912c0 <_dtoa_r+0x774>
20091108:	d9000717 	ldw	r4,28(sp)
2009110c:	dd801315 	stw	r22,76(sp)
20091110:	dc001115 	stw	r16,68(sp)
20091114:	2295883a 	add	r10,r4,r10
20091118:	dcc01415 	stw	r19,80(sp)
2009111c:	502d883a 	mov	r22,r10
20091120:	dcc01017 	ldw	r19,64(sp)
20091124:	b821883a 	mov	r16,r23
20091128:	dc801015 	stw	r18,64(sp)
2009112c:	dc800e17 	ldw	r18,56(sp)
20091130:	00000906 	br	20091158 <_dtoa_r+0x60c>
20091134:	008a6ec0 	call	2008a6ec <__subdf3>
20091138:	1009883a 	mov	r4,r2
2009113c:	180b883a 	mov	r5,r3
20091140:	900d883a 	mov	r6,r18
20091144:	980f883a 	mov	r7,r19
20091148:	0098ddc0 	call	20098ddc <__ledf2>
2009114c:	10040e16 	blt	r2,zero,20092188 <_dtoa_r+0x163c>
20091150:	b821883a 	mov	r16,r23
20091154:	bd841026 	beq	r23,r22,20092198 <_dtoa_r+0x164c>
20091158:	9009883a 	mov	r4,r18
2009115c:	980b883a 	mov	r5,r19
20091160:	000d883a 	mov	r6,zero
20091164:	01d00934 	movhi	r7,16420
20091168:	0098ebc0 	call	20098ebc <__muldf3>
2009116c:	000d883a 	mov	r6,zero
20091170:	01d00934 	movhi	r7,16420
20091174:	8809883a 	mov	r4,r17
20091178:	a00b883a 	mov	r5,r20
2009117c:	1025883a 	mov	r18,r2
20091180:	1827883a 	mov	r19,r3
20091184:	0098ebc0 	call	20098ebc <__muldf3>
20091188:	180b883a 	mov	r5,r3
2009118c:	1009883a 	mov	r4,r2
20091190:	1823883a 	mov	r17,r3
20091194:	1029883a 	mov	r20,r2
20091198:	008afbc0 	call	2008afbc <__fixdfsi>
2009119c:	1009883a 	mov	r4,r2
200911a0:	102b883a 	mov	r21,r2
200911a4:	008b0440 	call	2008b044 <__floatsidf>
200911a8:	a009883a 	mov	r4,r20
200911ac:	880b883a 	mov	r5,r17
200911b0:	100d883a 	mov	r6,r2
200911b4:	180f883a 	mov	r7,r3
200911b8:	008a6ec0 	call	2008a6ec <__subdf3>
200911bc:	ad400c04 	addi	r21,r21,48
200911c0:	1009883a 	mov	r4,r2
200911c4:	180b883a 	mov	r5,r3
200911c8:	900d883a 	mov	r6,r18
200911cc:	980f883a 	mov	r7,r19
200911d0:	85400005 	stb	r21,0(r16)
200911d4:	1023883a 	mov	r17,r2
200911d8:	1829883a 	mov	r20,r3
200911dc:	0098ddc0 	call	20098ddc <__ledf2>
200911e0:	bdc00044 	addi	r23,r23,1
200911e4:	0009883a 	mov	r4,zero
200911e8:	014ffc34 	movhi	r5,16368
200911ec:	880d883a 	mov	r6,r17
200911f0:	a00f883a 	mov	r7,r20
200911f4:	103fcf0e 	bge	r2,zero,20091134 <__flash_rwdata_start+0xffff2348>
200911f8:	d9801217 	ldw	r6,72(sp)
200911fc:	dc001117 	ldw	r16,68(sp)
20091200:	d9800515 	stw	r6,20(sp)
20091204:	8009883a 	mov	r4,r16
20091208:	e00b883a 	mov	r5,fp
2009120c:	00938880 	call	20093888 <_Bfree>
20091210:	d8c00517 	ldw	r3,20(sp)
20091214:	d9002317 	ldw	r4,140(sp)
20091218:	d9802517 	ldw	r6,148(sp)
2009121c:	b8000005 	stb	zero,0(r23)
20091220:	18800044 	addi	r2,r3,1
20091224:	20800015 	stw	r2,0(r4)
20091228:	30027226 	beq	r6,zero,20091bf4 <_dtoa_r+0x10a8>
2009122c:	35c00015 	stw	r23,0(r6)
20091230:	d8800717 	ldw	r2,28(sp)
20091234:	003e7406 	br	20090c08 <__flash_rwdata_start+0xffff1e1c>
20091238:	00800434 	movhi	r2,16
2009123c:	10bfffc4 	addi	r2,r2,-1
20091240:	a8aa703a 	and	r21,r21,r2
20091244:	a83e801e 	bne	r21,zero,20090c48 <__flash_rwdata_start+0xffff1e5c>
20091248:	00800034 	movhi	r2,0
2009124c:	1081fd04 	addi	r2,r2,2036
20091250:	003e7f06 	br	20090c50 <__flash_rwdata_start+0xffff1e64>
20091254:	10c00204 	addi	r3,r2,8
20091258:	003e8206 	br	20090c64 <__flash_rwdata_start+0xffff1e78>
2009125c:	01400434 	movhi	r5,16
20091260:	297fffc4 	addi	r5,r5,-1
20091264:	994a703a 	and	r5,r19,r5
20091268:	9009883a 	mov	r4,r18
2009126c:	8c7f0044 	addi	r17,r17,-1023
20091270:	294ffc34 	orhi	r5,r5,16368
20091274:	dd000217 	ldw	r20,8(sp)
20091278:	d8000f15 	stw	zero,60(sp)
2009127c:	003e9f06 	br	20090cfc <__flash_rwdata_start+0xffff1f10>
20091280:	00800034 	movhi	r2,0
20091284:	1081ec04 	addi	r2,r2,1968
20091288:	003e5f06 	br	20090c08 <__flash_rwdata_start+0xffff1e1c>
2009128c:	80001115 	stw	zero,68(r16)
20091290:	8009883a 	mov	r4,r16
20091294:	000b883a 	mov	r5,zero
20091298:	00937e00 	call	200937e0 <_Balloc>
2009129c:	01bfffc4 	movi	r6,-1
200912a0:	d8800715 	stw	r2,28(sp)
200912a4:	80801015 	stw	r2,64(r16)
200912a8:	00800044 	movi	r2,1
200912ac:	d9800c15 	stw	r6,48(sp)
200912b0:	d8800b15 	stw	r2,44(sp)
200912b4:	d9800615 	stw	r6,24(sp)
200912b8:	d8002215 	stw	zero,136(sp)
200912bc:	d8000315 	stw	zero,12(sp)
200912c0:	d8800117 	ldw	r2,4(sp)
200912c4:	10008e16 	blt	r2,zero,20091500 <_dtoa_r+0x9b4>
200912c8:	d9000517 	ldw	r4,20(sp)
200912cc:	00c00384 	movi	r3,14
200912d0:	19008b16 	blt	r3,r4,20091500 <_dtoa_r+0x9b4>
200912d4:	200490fa 	slli	r2,r4,3
200912d8:	00c00034 	movhi	r3,0
200912dc:	d9802217 	ldw	r6,136(sp)
200912e0:	18c21b04 	addi	r3,r3,2156
200912e4:	1885883a 	add	r2,r3,r2
200912e8:	14400017 	ldw	r17,0(r2)
200912ec:	15000117 	ldw	r20,4(r2)
200912f0:	3001c716 	blt	r6,zero,20091a10 <_dtoa_r+0xec4>
200912f4:	880d883a 	mov	r6,r17
200912f8:	a00f883a 	mov	r7,r20
200912fc:	9009883a 	mov	r4,r18
20091300:	980b883a 	mov	r5,r19
20091304:	0089e200 	call	20089e20 <__divdf3>
20091308:	180b883a 	mov	r5,r3
2009130c:	1009883a 	mov	r4,r2
20091310:	008afbc0 	call	2008afbc <__fixdfsi>
20091314:	1009883a 	mov	r4,r2
20091318:	102d883a 	mov	r22,r2
2009131c:	008b0440 	call	2008b044 <__floatsidf>
20091320:	1009883a 	mov	r4,r2
20091324:	180b883a 	mov	r5,r3
20091328:	880d883a 	mov	r6,r17
2009132c:	a00f883a 	mov	r7,r20
20091330:	0098ebc0 	call	20098ebc <__muldf3>
20091334:	9009883a 	mov	r4,r18
20091338:	980b883a 	mov	r5,r19
2009133c:	100d883a 	mov	r6,r2
20091340:	180f883a 	mov	r7,r3
20091344:	008a6ec0 	call	2008a6ec <__subdf3>
20091348:	d9000717 	ldw	r4,28(sp)
2009134c:	d9800617 	ldw	r6,24(sp)
20091350:	180b883a 	mov	r5,r3
20091354:	b0c00c04 	addi	r3,r22,48
20091358:	20c00005 	stb	r3,0(r4)
2009135c:	25c00044 	addi	r23,r4,1
20091360:	01000044 	movi	r4,1
20091364:	1011883a 	mov	r8,r2
20091368:	2807883a 	mov	r3,r5
2009136c:	31003d26 	beq	r6,r4,20091464 <_dtoa_r+0x918>
20091370:	000d883a 	mov	r6,zero
20091374:	01d00934 	movhi	r7,16420
20091378:	1009883a 	mov	r4,r2
2009137c:	0098ebc0 	call	20098ebc <__muldf3>
20091380:	1009883a 	mov	r4,r2
20091384:	180b883a 	mov	r5,r3
20091388:	000d883a 	mov	r6,zero
2009138c:	000f883a 	mov	r7,zero
20091390:	1027883a 	mov	r19,r2
20091394:	182b883a 	mov	r21,r3
20091398:	0098c780 	call	20098c78 <__eqdf2>
2009139c:	103f9926 	beq	r2,zero,20091204 <__flash_rwdata_start+0xffff2418>
200913a0:	d8c00617 	ldw	r3,24(sp)
200913a4:	d9000717 	ldw	r4,28(sp)
200913a8:	b825883a 	mov	r18,r23
200913ac:	18bfffc4 	addi	r2,r3,-1
200913b0:	20ad883a 	add	r22,r4,r2
200913b4:	dc000315 	stw	r16,12(sp)
200913b8:	00000a06 	br	200913e4 <_dtoa_r+0x898>
200913bc:	0098ebc0 	call	20098ebc <__muldf3>
200913c0:	1009883a 	mov	r4,r2
200913c4:	180b883a 	mov	r5,r3
200913c8:	000d883a 	mov	r6,zero
200913cc:	000f883a 	mov	r7,zero
200913d0:	1027883a 	mov	r19,r2
200913d4:	182b883a 	mov	r21,r3
200913d8:	b825883a 	mov	r18,r23
200913dc:	0098c780 	call	20098c78 <__eqdf2>
200913e0:	10022626 	beq	r2,zero,20091c7c <_dtoa_r+0x1130>
200913e4:	880d883a 	mov	r6,r17
200913e8:	a00f883a 	mov	r7,r20
200913ec:	9809883a 	mov	r4,r19
200913f0:	a80b883a 	mov	r5,r21
200913f4:	0089e200 	call	20089e20 <__divdf3>
200913f8:	180b883a 	mov	r5,r3
200913fc:	1009883a 	mov	r4,r2
20091400:	008afbc0 	call	2008afbc <__fixdfsi>
20091404:	1009883a 	mov	r4,r2
20091408:	1021883a 	mov	r16,r2
2009140c:	008b0440 	call	2008b044 <__floatsidf>
20091410:	1009883a 	mov	r4,r2
20091414:	180b883a 	mov	r5,r3
20091418:	880d883a 	mov	r6,r17
2009141c:	a00f883a 	mov	r7,r20
20091420:	0098ebc0 	call	20098ebc <__muldf3>
20091424:	9809883a 	mov	r4,r19
20091428:	a80b883a 	mov	r5,r21
2009142c:	100d883a 	mov	r6,r2
20091430:	180f883a 	mov	r7,r3
20091434:	008a6ec0 	call	2008a6ec <__subdf3>
20091438:	82000c04 	addi	r8,r16,48
2009143c:	92000005 	stb	r8,0(r18)
20091440:	1009883a 	mov	r4,r2
20091444:	180b883a 	mov	r5,r3
20091448:	000d883a 	mov	r6,zero
2009144c:	01d00934 	movhi	r7,16420
20091450:	1011883a 	mov	r8,r2
20091454:	bdc00044 	addi	r23,r23,1
20091458:	95bfd81e 	bne	r18,r22,200913bc <__flash_rwdata_start+0xffff25d0>
2009145c:	802d883a 	mov	r22,r16
20091460:	dc000317 	ldw	r16,12(sp)
20091464:	4009883a 	mov	r4,r8
20091468:	180b883a 	mov	r5,r3
2009146c:	400d883a 	mov	r6,r8
20091470:	180f883a 	mov	r7,r3
20091474:	00895840 	call	20089584 <__adddf3>
20091478:	8809883a 	mov	r4,r17
2009147c:	a00b883a 	mov	r5,r20
20091480:	100d883a 	mov	r6,r2
20091484:	180f883a 	mov	r7,r3
20091488:	1027883a 	mov	r19,r2
2009148c:	1825883a 	mov	r18,r3
20091490:	0098ddc0 	call	20098ddc <__ledf2>
20091494:	10000816 	blt	r2,zero,200914b8 <_dtoa_r+0x96c>
20091498:	8809883a 	mov	r4,r17
2009149c:	a00b883a 	mov	r5,r20
200914a0:	980d883a 	mov	r6,r19
200914a4:	900f883a 	mov	r7,r18
200914a8:	0098c780 	call	20098c78 <__eqdf2>
200914ac:	103f551e 	bne	r2,zero,20091204 <__flash_rwdata_start+0xffff2418>
200914b0:	b580004c 	andi	r22,r22,1
200914b4:	b03f5326 	beq	r22,zero,20091204 <__flash_rwdata_start+0xffff2418>
200914b8:	bd7fffc3 	ldbu	r21,-1(r23)
200914bc:	b8bfffc4 	addi	r2,r23,-1
200914c0:	1007883a 	mov	r3,r2
200914c4:	01400e44 	movi	r5,57
200914c8:	d9800717 	ldw	r6,28(sp)
200914cc:	00000506 	br	200914e4 <_dtoa_r+0x998>
200914d0:	18ffffc4 	addi	r3,r3,-1
200914d4:	30825e26 	beq	r6,r2,20091e50 <_dtoa_r+0x1304>
200914d8:	1d400003 	ldbu	r21,0(r3)
200914dc:	102f883a 	mov	r23,r2
200914e0:	10bfffc4 	addi	r2,r2,-1
200914e4:	a9003fcc 	andi	r4,r21,255
200914e8:	2100201c 	xori	r4,r4,128
200914ec:	213fe004 	addi	r4,r4,-128
200914f0:	217ff726 	beq	r4,r5,200914d0 <__flash_rwdata_start+0xffff26e4>
200914f4:	aa000044 	addi	r8,r21,1
200914f8:	12000005 	stb	r8,0(r2)
200914fc:	003f4106 	br	20091204 <__flash_rwdata_start+0xffff2418>
20091500:	d8c00b17 	ldw	r3,44(sp)
20091504:	18006726 	beq	r3,zero,200916a4 <_dtoa_r+0xb58>
20091508:	d9000317 	ldw	r4,12(sp)
2009150c:	00c00044 	movi	r3,1
20091510:	19016a0e 	bge	r3,r4,20091abc <_dtoa_r+0xf70>
20091514:	d8800617 	ldw	r2,24(sp)
20091518:	d8c00917 	ldw	r3,36(sp)
2009151c:	157fffc4 	addi	r21,r2,-1
20091520:	1d420716 	blt	r3,r21,20091d40 <_dtoa_r+0x11f4>
20091524:	1d6bc83a 	sub	r21,r3,r21
20091528:	d8800617 	ldw	r2,24(sp)
2009152c:	1002c716 	blt	r2,zero,2009204c <_dtoa_r+0x1500>
20091530:	dd000817 	ldw	r20,32(sp)
20091534:	d8800617 	ldw	r2,24(sp)
20091538:	d9800817 	ldw	r6,32(sp)
2009153c:	8009883a 	mov	r4,r16
20091540:	01400044 	movi	r5,1
20091544:	308d883a 	add	r6,r6,r2
20091548:	d9800815 	stw	r6,32(sp)
2009154c:	b0ad883a 	add	r22,r22,r2
20091550:	0093bec0 	call	20093bec <__i2b>
20091554:	1023883a 	mov	r17,r2
20091558:	a0000826 	beq	r20,zero,2009157c <_dtoa_r+0xa30>
2009155c:	0580070e 	bge	zero,r22,2009157c <_dtoa_r+0xa30>
20091560:	b005883a 	mov	r2,r22
20091564:	a5812016 	blt	r20,r22,200919e8 <_dtoa_r+0xe9c>
20091568:	d8c00817 	ldw	r3,32(sp)
2009156c:	a0a9c83a 	sub	r20,r20,r2
20091570:	b0adc83a 	sub	r22,r22,r2
20091574:	1887c83a 	sub	r3,r3,r2
20091578:	d8c00815 	stw	r3,32(sp)
2009157c:	d9000917 	ldw	r4,36(sp)
20091580:	0100140e 	bge	zero,r4,200915d4 <_dtoa_r+0xa88>
20091584:	d9800b17 	ldw	r6,44(sp)
20091588:	3001e526 	beq	r6,zero,20091d20 <_dtoa_r+0x11d4>
2009158c:	05400e0e 	bge	zero,r21,200915c8 <_dtoa_r+0xa7c>
20091590:	880b883a 	mov	r5,r17
20091594:	8009883a 	mov	r4,r16
20091598:	a80d883a 	mov	r6,r21
2009159c:	0093e240 	call	20093e24 <__pow5mult>
200915a0:	e00d883a 	mov	r6,fp
200915a4:	8009883a 	mov	r4,r16
200915a8:	100b883a 	mov	r5,r2
200915ac:	1023883a 	mov	r17,r2
200915b0:	0093c280 	call	20093c28 <__multiply>
200915b4:	102f883a 	mov	r23,r2
200915b8:	e00b883a 	mov	r5,fp
200915bc:	8009883a 	mov	r4,r16
200915c0:	00938880 	call	20093888 <_Bfree>
200915c4:	b839883a 	mov	fp,r23
200915c8:	d8800917 	ldw	r2,36(sp)
200915cc:	154dc83a 	sub	r6,r2,r21
200915d0:	3001281e 	bne	r6,zero,20091a74 <_dtoa_r+0xf28>
200915d4:	05c00044 	movi	r23,1
200915d8:	8009883a 	mov	r4,r16
200915dc:	b80b883a 	mov	r5,r23
200915e0:	0093bec0 	call	20093bec <__i2b>
200915e4:	d8c00a17 	ldw	r3,40(sp)
200915e8:	102b883a 	mov	r21,r2
200915ec:	00c0310e 	bge	zero,r3,200916b4 <_dtoa_r+0xb68>
200915f0:	8009883a 	mov	r4,r16
200915f4:	100b883a 	mov	r5,r2
200915f8:	180d883a 	mov	r6,r3
200915fc:	0093e240 	call	20093e24 <__pow5mult>
20091600:	d9000317 	ldw	r4,12(sp)
20091604:	102b883a 	mov	r21,r2
20091608:	b9011f0e 	bge	r23,r4,20091a88 <_dtoa_r+0xf3c>
2009160c:	0027883a 	mov	r19,zero
20091610:	a8800417 	ldw	r2,16(r21)
20091614:	10800104 	addi	r2,r2,4
20091618:	1085883a 	add	r2,r2,r2
2009161c:	1085883a 	add	r2,r2,r2
20091620:	a885883a 	add	r2,r21,r2
20091624:	11000017 	ldw	r4,0(r2)
20091628:	0093ad40 	call	20093ad4 <__hi0bits>
2009162c:	00c00804 	movi	r3,32
20091630:	1885c83a 	sub	r2,r3,r2
20091634:	00002506 	br	200916cc <_dtoa_r+0xb80>
20091638:	01800044 	movi	r6,1
2009163c:	d9800d15 	stw	r6,52(sp)
20091640:	003dec06 	br	20090df4 <__flash_rwdata_start+0xffff2008>
20091644:	d8c00817 	ldw	r3,32(sp)
20091648:	d9000517 	ldw	r4,20(sp)
2009164c:	d8000a15 	stw	zero,40(sp)
20091650:	1907c83a 	sub	r3,r3,r4
20091654:	010dc83a 	sub	r6,zero,r4
20091658:	d8c00815 	stw	r3,32(sp)
2009165c:	d9800915 	stw	r6,36(sp)
20091660:	003ded06 	br	20090e18 <__flash_rwdata_start+0xffff202c>
20091664:	05adc83a 	sub	r22,zero,r22
20091668:	dd800815 	stw	r22,32(sp)
2009166c:	002d883a 	mov	r22,zero
20091670:	003de406 	br	20090e04 <__flash_rwdata_start+0xffff2018>
20091674:	d9000517 	ldw	r4,20(sp)
20091678:	008b0440 	call	2008b044 <__floatsidf>
2009167c:	1009883a 	mov	r4,r2
20091680:	180b883a 	mov	r5,r3
20091684:	b00d883a 	mov	r6,r22
20091688:	a80f883a 	mov	r7,r21
2009168c:	0098c780 	call	20098c78 <__eqdf2>
20091690:	103dc726 	beq	r2,zero,20090db0 <__flash_rwdata_start+0xffff1fc4>
20091694:	d8800517 	ldw	r2,20(sp)
20091698:	10bfffc4 	addi	r2,r2,-1
2009169c:	d8800515 	stw	r2,20(sp)
200916a0:	003dc306 	br	20090db0 <__flash_rwdata_start+0xffff1fc4>
200916a4:	dd400917 	ldw	r21,36(sp)
200916a8:	dd000817 	ldw	r20,32(sp)
200916ac:	0023883a 	mov	r17,zero
200916b0:	003fa906 	br	20091558 <__flash_rwdata_start+0xffff276c>
200916b4:	d9800317 	ldw	r6,12(sp)
200916b8:	b981670e 	bge	r23,r6,20091c58 <_dtoa_r+0x110c>
200916bc:	0027883a 	mov	r19,zero
200916c0:	d8c00a17 	ldw	r3,40(sp)
200916c4:	183fd21e 	bne	r3,zero,20091610 <__flash_rwdata_start+0xffff2824>
200916c8:	00800044 	movi	r2,1
200916cc:	1585883a 	add	r2,r2,r22
200916d0:	108007cc 	andi	r2,r2,31
200916d4:	10005f26 	beq	r2,zero,20091854 <_dtoa_r+0xd08>
200916d8:	00c00804 	movi	r3,32
200916dc:	1887c83a 	sub	r3,r3,r2
200916e0:	01000104 	movi	r4,4
200916e4:	20c2dd0e 	bge	r4,r3,2009225c <_dtoa_r+0x1710>
200916e8:	d9000817 	ldw	r4,32(sp)
200916ec:	00c00704 	movi	r3,28
200916f0:	1885c83a 	sub	r2,r3,r2
200916f4:	2089883a 	add	r4,r4,r2
200916f8:	d9000815 	stw	r4,32(sp)
200916fc:	a0a9883a 	add	r20,r20,r2
20091700:	b0ad883a 	add	r22,r22,r2
20091704:	d8800817 	ldw	r2,32(sp)
20091708:	0080050e 	bge	zero,r2,20091720 <_dtoa_r+0xbd4>
2009170c:	e00b883a 	mov	r5,fp
20091710:	8009883a 	mov	r4,r16
20091714:	100d883a 	mov	r6,r2
20091718:	0093f640 	call	20093f64 <__lshift>
2009171c:	1039883a 	mov	fp,r2
20091720:	0580050e 	bge	zero,r22,20091738 <_dtoa_r+0xbec>
20091724:	a80b883a 	mov	r5,r21
20091728:	8009883a 	mov	r4,r16
2009172c:	b00d883a 	mov	r6,r22
20091730:	0093f640 	call	20093f64 <__lshift>
20091734:	102b883a 	mov	r21,r2
20091738:	d8c00d17 	ldw	r3,52(sp)
2009173c:	1801161e 	bne	r3,zero,20091b98 <_dtoa_r+0x104c>
20091740:	d8c00617 	ldw	r3,24(sp)
20091744:	00c12d0e 	bge	zero,r3,20091bfc <_dtoa_r+0x10b0>
20091748:	d8c00b17 	ldw	r3,44(sp)
2009174c:	1800571e 	bne	r3,zero,200918ac <_dtoa_r+0xd60>
20091750:	dc800717 	ldw	r18,28(sp)
20091754:	dcc00617 	ldw	r19,24(sp)
20091758:	9029883a 	mov	r20,r18
2009175c:	00000206 	br	20091768 <_dtoa_r+0xc1c>
20091760:	00938b00 	call	200938b0 <__multadd>
20091764:	1039883a 	mov	fp,r2
20091768:	e009883a 	mov	r4,fp
2009176c:	a80b883a 	mov	r5,r21
20091770:	009094c0 	call	2009094c <quorem>
20091774:	10800c04 	addi	r2,r2,48
20091778:	90800005 	stb	r2,0(r18)
2009177c:	94800044 	addi	r18,r18,1
20091780:	9507c83a 	sub	r3,r18,r20
20091784:	8009883a 	mov	r4,r16
20091788:	e00b883a 	mov	r5,fp
2009178c:	01800284 	movi	r6,10
20091790:	000f883a 	mov	r7,zero
20091794:	1cfff216 	blt	r3,r19,20091760 <__flash_rwdata_start+0xffff2974>
20091798:	1011883a 	mov	r8,r2
2009179c:	d8800617 	ldw	r2,24(sp)
200917a0:	00822e0e 	bge	zero,r2,2009205c <_dtoa_r+0x1510>
200917a4:	d9000717 	ldw	r4,28(sp)
200917a8:	0025883a 	mov	r18,zero
200917ac:	20af883a 	add	r23,r4,r2
200917b0:	e00b883a 	mov	r5,fp
200917b4:	01800044 	movi	r6,1
200917b8:	8009883a 	mov	r4,r16
200917bc:	da001715 	stw	r8,92(sp)
200917c0:	0093f640 	call	20093f64 <__lshift>
200917c4:	1009883a 	mov	r4,r2
200917c8:	a80b883a 	mov	r5,r21
200917cc:	1039883a 	mov	fp,r2
200917d0:	00940b40 	call	200940b4 <__mcmp>
200917d4:	da001717 	ldw	r8,92(sp)
200917d8:	00816e0e 	bge	zero,r2,20091d94 <_dtoa_r+0x1248>
200917dc:	b93fffc3 	ldbu	r4,-1(r23)
200917e0:	b8bfffc4 	addi	r2,r23,-1
200917e4:	1007883a 	mov	r3,r2
200917e8:	01800e44 	movi	r6,57
200917ec:	d9c00717 	ldw	r7,28(sp)
200917f0:	00000506 	br	20091808 <_dtoa_r+0xcbc>
200917f4:	18ffffc4 	addi	r3,r3,-1
200917f8:	38811926 	beq	r7,r2,20091c60 <_dtoa_r+0x1114>
200917fc:	19000003 	ldbu	r4,0(r3)
20091800:	102f883a 	mov	r23,r2
20091804:	10bfffc4 	addi	r2,r2,-1
20091808:	21403fcc 	andi	r5,r4,255
2009180c:	2940201c 	xori	r5,r5,128
20091810:	297fe004 	addi	r5,r5,-128
20091814:	29bff726 	beq	r5,r6,200917f4 <__flash_rwdata_start+0xffff2a08>
20091818:	21000044 	addi	r4,r4,1
2009181c:	11000005 	stb	r4,0(r2)
20091820:	8009883a 	mov	r4,r16
20091824:	a80b883a 	mov	r5,r21
20091828:	00938880 	call	20093888 <_Bfree>
2009182c:	883e7526 	beq	r17,zero,20091204 <__flash_rwdata_start+0xffff2418>
20091830:	90000426 	beq	r18,zero,20091844 <_dtoa_r+0xcf8>
20091834:	94400326 	beq	r18,r17,20091844 <_dtoa_r+0xcf8>
20091838:	8009883a 	mov	r4,r16
2009183c:	900b883a 	mov	r5,r18
20091840:	00938880 	call	20093888 <_Bfree>
20091844:	8009883a 	mov	r4,r16
20091848:	880b883a 	mov	r5,r17
2009184c:	00938880 	call	20093888 <_Bfree>
20091850:	003e6c06 	br	20091204 <__flash_rwdata_start+0xffff2418>
20091854:	00800704 	movi	r2,28
20091858:	d9800817 	ldw	r6,32(sp)
2009185c:	a0a9883a 	add	r20,r20,r2
20091860:	b0ad883a 	add	r22,r22,r2
20091864:	308d883a 	add	r6,r6,r2
20091868:	d9800815 	stw	r6,32(sp)
2009186c:	003fa506 	br	20091704 <__flash_rwdata_start+0xffff2918>
20091870:	013efb84 	movi	r4,-1042
20091874:	246bc83a 	sub	r21,r4,r17
20091878:	9548983a 	sll	r4,r18,r21
2009187c:	003d1806 	br	20090ce0 <__flash_rwdata_start+0xffff1ef4>
20091880:	d8000d15 	stw	zero,52(sp)
20091884:	003d5b06 	br	20090df4 <__flash_rwdata_start+0xffff2008>
20091888:	880b883a 	mov	r5,r17
2009188c:	8009883a 	mov	r4,r16
20091890:	01800284 	movi	r6,10
20091894:	000f883a 	mov	r7,zero
20091898:	00938b00 	call	200938b0 <__multadd>
2009189c:	1023883a 	mov	r17,r2
200918a0:	d8800c17 	ldw	r2,48(sp)
200918a4:	0082550e 	bge	zero,r2,200921fc <_dtoa_r+0x16b0>
200918a8:	d8800615 	stw	r2,24(sp)
200918ac:	0500050e 	bge	zero,r20,200918c4 <_dtoa_r+0xd78>
200918b0:	880b883a 	mov	r5,r17
200918b4:	8009883a 	mov	r4,r16
200918b8:	a00d883a 	mov	r6,r20
200918bc:	0093f640 	call	20093f64 <__lshift>
200918c0:	1023883a 	mov	r17,r2
200918c4:	98016a1e 	bne	r19,zero,20091e70 <_dtoa_r+0x1324>
200918c8:	8829883a 	mov	r20,r17
200918cc:	d9000617 	ldw	r4,24(sp)
200918d0:	dcc00717 	ldw	r19,28(sp)
200918d4:	9480004c 	andi	r18,r18,1
200918d8:	20bfffc4 	addi	r2,r4,-1
200918dc:	9885883a 	add	r2,r19,r2
200918e0:	d8800415 	stw	r2,16(sp)
200918e4:	dc800615 	stw	r18,24(sp)
200918e8:	e009883a 	mov	r4,fp
200918ec:	a80b883a 	mov	r5,r21
200918f0:	009094c0 	call	2009094c <quorem>
200918f4:	e009883a 	mov	r4,fp
200918f8:	880b883a 	mov	r5,r17
200918fc:	102f883a 	mov	r23,r2
20091900:	00940b40 	call	200940b4 <__mcmp>
20091904:	8009883a 	mov	r4,r16
20091908:	a80b883a 	mov	r5,r21
2009190c:	a00d883a 	mov	r6,r20
20091910:	102d883a 	mov	r22,r2
20091914:	00941140 	call	20094114 <__mdiff>
20091918:	1007883a 	mov	r3,r2
2009191c:	10800317 	ldw	r2,12(r2)
20091920:	bc800c04 	addi	r18,r23,48
20091924:	1000971e 	bne	r2,zero,20091b84 <_dtoa_r+0x1038>
20091928:	180b883a 	mov	r5,r3
2009192c:	e009883a 	mov	r4,fp
20091930:	d8c01515 	stw	r3,84(sp)
20091934:	00940b40 	call	200940b4 <__mcmp>
20091938:	d8c01517 	ldw	r3,84(sp)
2009193c:	8009883a 	mov	r4,r16
20091940:	d8801515 	stw	r2,84(sp)
20091944:	180b883a 	mov	r5,r3
20091948:	00938880 	call	20093888 <_Bfree>
2009194c:	d8801517 	ldw	r2,84(sp)
20091950:	1000041e 	bne	r2,zero,20091964 <_dtoa_r+0xe18>
20091954:	d9800317 	ldw	r6,12(sp)
20091958:	3000021e 	bne	r6,zero,20091964 <_dtoa_r+0xe18>
2009195c:	d8c00617 	ldw	r3,24(sp)
20091960:	18007626 	beq	r3,zero,20091b3c <_dtoa_r+0xff0>
20091964:	b0005b16 	blt	r22,zero,20091ad4 <_dtoa_r+0xf88>
20091968:	b000041e 	bne	r22,zero,2009197c <_dtoa_r+0xe30>
2009196c:	d9000317 	ldw	r4,12(sp)
20091970:	2000021e 	bne	r4,zero,2009197c <_dtoa_r+0xe30>
20091974:	d8c00617 	ldw	r3,24(sp)
20091978:	18005626 	beq	r3,zero,20091ad4 <_dtoa_r+0xf88>
2009197c:	00814d16 	blt	zero,r2,20091eb4 <_dtoa_r+0x1368>
20091980:	d8c00417 	ldw	r3,16(sp)
20091984:	9d800044 	addi	r22,r19,1
20091988:	9c800005 	stb	r18,0(r19)
2009198c:	b02f883a 	mov	r23,r22
20091990:	98c14c26 	beq	r19,r3,20091ec4 <_dtoa_r+0x1378>
20091994:	e00b883a 	mov	r5,fp
20091998:	8009883a 	mov	r4,r16
2009199c:	01800284 	movi	r6,10
200919a0:	000f883a 	mov	r7,zero
200919a4:	00938b00 	call	200938b0 <__multadd>
200919a8:	1039883a 	mov	fp,r2
200919ac:	8d006d26 	beq	r17,r20,20091b64 <_dtoa_r+0x1018>
200919b0:	880b883a 	mov	r5,r17
200919b4:	01800284 	movi	r6,10
200919b8:	000f883a 	mov	r7,zero
200919bc:	8009883a 	mov	r4,r16
200919c0:	00938b00 	call	200938b0 <__multadd>
200919c4:	a00b883a 	mov	r5,r20
200919c8:	8009883a 	mov	r4,r16
200919cc:	01800284 	movi	r6,10
200919d0:	000f883a 	mov	r7,zero
200919d4:	1023883a 	mov	r17,r2
200919d8:	00938b00 	call	200938b0 <__multadd>
200919dc:	1029883a 	mov	r20,r2
200919e0:	b027883a 	mov	r19,r22
200919e4:	003fc006 	br	200918e8 <__flash_rwdata_start+0xffff2afc>
200919e8:	a005883a 	mov	r2,r20
200919ec:	003ede06 	br	20091568 <__flash_rwdata_start+0xffff277c>
200919f0:	01000044 	movi	r4,1
200919f4:	d9000b15 	stw	r4,44(sp)
200919f8:	d9802217 	ldw	r6,136(sp)
200919fc:	0180dc0e 	bge	zero,r6,20091d70 <_dtoa_r+0x1224>
20091a00:	3023883a 	mov	r17,r6
20091a04:	d9800c15 	stw	r6,48(sp)
20091a08:	d9800615 	stw	r6,24(sp)
20091a0c:	003d1e06 	br	20090e88 <__flash_rwdata_start+0xffff209c>
20091a10:	d8800617 	ldw	r2,24(sp)
20091a14:	00be3716 	blt	zero,r2,200912f4 <__flash_rwdata_start+0xffff2508>
20091a18:	1000be1e 	bne	r2,zero,20091d14 <_dtoa_r+0x11c8>
20091a1c:	8809883a 	mov	r4,r17
20091a20:	a00b883a 	mov	r5,r20
20091a24:	000d883a 	mov	r6,zero
20091a28:	01d00534 	movhi	r7,16404
20091a2c:	0098ebc0 	call	20098ebc <__muldf3>
20091a30:	1009883a 	mov	r4,r2
20091a34:	180b883a 	mov	r5,r3
20091a38:	900d883a 	mov	r6,r18
20091a3c:	980f883a 	mov	r7,r19
20091a40:	0098cfc0 	call	20098cfc <__gedf2>
20091a44:	002b883a 	mov	r21,zero
20091a48:	0023883a 	mov	r17,zero
20091a4c:	10007a16 	blt	r2,zero,20091c38 <_dtoa_r+0x10ec>
20091a50:	d9002217 	ldw	r4,136(sp)
20091a54:	ddc00717 	ldw	r23,28(sp)
20091a58:	0108303a 	nor	r4,zero,r4
20091a5c:	d9000515 	stw	r4,20(sp)
20091a60:	8009883a 	mov	r4,r16
20091a64:	a80b883a 	mov	r5,r21
20091a68:	00938880 	call	20093888 <_Bfree>
20091a6c:	883f751e 	bne	r17,zero,20091844 <__flash_rwdata_start+0xffff2a58>
20091a70:	003de406 	br	20091204 <__flash_rwdata_start+0xffff2418>
20091a74:	e00b883a 	mov	r5,fp
20091a78:	8009883a 	mov	r4,r16
20091a7c:	0093e240 	call	20093e24 <__pow5mult>
20091a80:	1039883a 	mov	fp,r2
20091a84:	003ed306 	br	200915d4 <__flash_rwdata_start+0xffff27e8>
20091a88:	903ee01e 	bne	r18,zero,2009160c <__flash_rwdata_start+0xffff2820>
20091a8c:	00800434 	movhi	r2,16
20091a90:	10bfffc4 	addi	r2,r2,-1
20091a94:	9884703a 	and	r2,r19,r2
20091a98:	103f081e 	bne	r2,zero,200916bc <__flash_rwdata_start+0xffff28d0>
20091a9c:	9cdffc2c 	andhi	r19,r19,32752
20091aa0:	983f0626 	beq	r19,zero,200916bc <__flash_rwdata_start+0xffff28d0>
20091aa4:	d8800817 	ldw	r2,32(sp)
20091aa8:	b5800044 	addi	r22,r22,1
20091aac:	04c00044 	movi	r19,1
20091ab0:	10800044 	addi	r2,r2,1
20091ab4:	d8800815 	stw	r2,32(sp)
20091ab8:	003f0106 	br	200916c0 <__flash_rwdata_start+0xffff28d4>
20091abc:	d9800f17 	ldw	r6,60(sp)
20091ac0:	30016826 	beq	r6,zero,20092064 <_dtoa_r+0x1518>
20091ac4:	10810cc4 	addi	r2,r2,1075
20091ac8:	dd400917 	ldw	r21,36(sp)
20091acc:	dd000817 	ldw	r20,32(sp)
20091ad0:	003e9906 	br	20091538 <__flash_rwdata_start+0xffff274c>
20091ad4:	9011883a 	mov	r8,r18
20091ad8:	4007883a 	mov	r3,r8
20091adc:	e02d883a 	mov	r22,fp
20091ae0:	0080100e 	bge	zero,r2,20091b24 <_dtoa_r+0xfd8>
20091ae4:	01800044 	movi	r6,1
20091ae8:	8009883a 	mov	r4,r16
20091aec:	e00b883a 	mov	r5,fp
20091af0:	da001515 	stw	r8,84(sp)
20091af4:	da001715 	stw	r8,92(sp)
20091af8:	0093f640 	call	20093f64 <__lshift>
20091afc:	1009883a 	mov	r4,r2
20091b00:	a80b883a 	mov	r5,r21
20091b04:	102d883a 	mov	r22,r2
20091b08:	00940b40 	call	200940b4 <__mcmp>
20091b0c:	d8c01517 	ldw	r3,84(sp)
20091b10:	da001717 	ldw	r8,92(sp)
20091b14:	0081a50e 	bge	zero,r2,200921ac <_dtoa_r+0x1660>
20091b18:	00800e44 	movi	r2,57
20091b1c:	40817b26 	beq	r8,r2,2009210c <_dtoa_r+0x15c0>
20091b20:	40c00044 	addi	r3,r8,1
20091b24:	8825883a 	mov	r18,r17
20091b28:	9dc00044 	addi	r23,r19,1
20091b2c:	98c00005 	stb	r3,0(r19)
20091b30:	a023883a 	mov	r17,r20
20091b34:	b039883a 	mov	fp,r22
20091b38:	003f3906 	br	20091820 <__flash_rwdata_start+0xffff2a34>
20091b3c:	00800e44 	movi	r2,57
20091b40:	9011883a 	mov	r8,r18
20091b44:	90817226 	beq	r18,r2,20092110 <_dtoa_r+0x15c4>
20091b48:	0580010e 	bge	zero,r22,20091b50 <_dtoa_r+0x1004>
20091b4c:	ba000c44 	addi	r8,r23,49
20091b50:	8825883a 	mov	r18,r17
20091b54:	9dc00044 	addi	r23,r19,1
20091b58:	9a000005 	stb	r8,0(r19)
20091b5c:	a023883a 	mov	r17,r20
20091b60:	003f2f06 	br	20091820 <__flash_rwdata_start+0xffff2a34>
20091b64:	880b883a 	mov	r5,r17
20091b68:	8009883a 	mov	r4,r16
20091b6c:	01800284 	movi	r6,10
20091b70:	000f883a 	mov	r7,zero
20091b74:	00938b00 	call	200938b0 <__multadd>
20091b78:	1023883a 	mov	r17,r2
20091b7c:	1029883a 	mov	r20,r2
20091b80:	003f9706 	br	200919e0 <__flash_rwdata_start+0xffff2bf4>
20091b84:	8009883a 	mov	r4,r16
20091b88:	180b883a 	mov	r5,r3
20091b8c:	00938880 	call	20093888 <_Bfree>
20091b90:	00800044 	movi	r2,1
20091b94:	003f7306 	br	20091964 <__flash_rwdata_start+0xffff2b78>
20091b98:	e009883a 	mov	r4,fp
20091b9c:	a80b883a 	mov	r5,r21
20091ba0:	00940b40 	call	200940b4 <__mcmp>
20091ba4:	103ee60e 	bge	r2,zero,20091740 <__flash_rwdata_start+0xffff2954>
20091ba8:	8009883a 	mov	r4,r16
20091bac:	e00b883a 	mov	r5,fp
20091bb0:	01800284 	movi	r6,10
20091bb4:	000f883a 	mov	r7,zero
20091bb8:	00938b00 	call	200938b0 <__multadd>
20091bbc:	d9000517 	ldw	r4,20(sp)
20091bc0:	d9800b17 	ldw	r6,44(sp)
20091bc4:	1039883a 	mov	fp,r2
20091bc8:	213fffc4 	addi	r4,r4,-1
20091bcc:	d9000515 	stw	r4,20(sp)
20091bd0:	303f2d1e 	bne	r6,zero,20091888 <__flash_rwdata_start+0xffff2a9c>
20091bd4:	d9000c17 	ldw	r4,48(sp)
20091bd8:	0101780e 	bge	zero,r4,200921bc <_dtoa_r+0x1670>
20091bdc:	d9000615 	stw	r4,24(sp)
20091be0:	003edb06 	br	20091750 <__flash_rwdata_start+0xffff2964>
20091be4:	00800084 	movi	r2,2
20091be8:	30818e1e 	bne	r6,r2,20092224 <_dtoa_r+0x16d8>
20091bec:	d8000b15 	stw	zero,44(sp)
20091bf0:	003f8106 	br	200919f8 <__flash_rwdata_start+0xffff2c0c>
20091bf4:	d8800717 	ldw	r2,28(sp)
20091bf8:	003c0306 	br	20090c08 <__flash_rwdata_start+0xffff1e1c>
20091bfc:	d9000317 	ldw	r4,12(sp)
20091c00:	00800084 	movi	r2,2
20091c04:	113ed00e 	bge	r2,r4,20091748 <__flash_rwdata_start+0xffff295c>
20091c08:	d8c00617 	ldw	r3,24(sp)
20091c0c:	183f901e 	bne	r3,zero,20091a50 <__flash_rwdata_start+0xffff2c64>
20091c10:	a80b883a 	mov	r5,r21
20091c14:	8009883a 	mov	r4,r16
20091c18:	01800144 	movi	r6,5
20091c1c:	000f883a 	mov	r7,zero
20091c20:	00938b00 	call	200938b0 <__multadd>
20091c24:	e009883a 	mov	r4,fp
20091c28:	100b883a 	mov	r5,r2
20091c2c:	102b883a 	mov	r21,r2
20091c30:	00940b40 	call	200940b4 <__mcmp>
20091c34:	00bf860e 	bge	zero,r2,20091a50 <__flash_rwdata_start+0xffff2c64>
20091c38:	d9800717 	ldw	r6,28(sp)
20091c3c:	00800c44 	movi	r2,49
20091c40:	30800005 	stb	r2,0(r6)
20091c44:	d8800517 	ldw	r2,20(sp)
20091c48:	35c00044 	addi	r23,r6,1
20091c4c:	10800044 	addi	r2,r2,1
20091c50:	d8800515 	stw	r2,20(sp)
20091c54:	003f8206 	br	20091a60 <__flash_rwdata_start+0xffff2c74>
20091c58:	903e981e 	bne	r18,zero,200916bc <__flash_rwdata_start+0xffff28d0>
20091c5c:	003f8b06 	br	20091a8c <__flash_rwdata_start+0xffff2ca0>
20091c60:	d9800517 	ldw	r6,20(sp)
20091c64:	d8c00717 	ldw	r3,28(sp)
20091c68:	00800c44 	movi	r2,49
20091c6c:	31800044 	addi	r6,r6,1
20091c70:	d9800515 	stw	r6,20(sp)
20091c74:	18800005 	stb	r2,0(r3)
20091c78:	003ee906 	br	20091820 <__flash_rwdata_start+0xffff2a34>
20091c7c:	dc000317 	ldw	r16,12(sp)
20091c80:	003d6006 	br	20091204 <__flash_rwdata_start+0xffff2418>
20091c84:	8809883a 	mov	r4,r17
20091c88:	008b0440 	call	2008b044 <__floatsidf>
20091c8c:	a009883a 	mov	r4,r20
20091c90:	a80b883a 	mov	r5,r21
20091c94:	100d883a 	mov	r6,r2
20091c98:	180f883a 	mov	r7,r3
20091c9c:	0098ebc0 	call	20098ebc <__muldf3>
20091ca0:	1009883a 	mov	r4,r2
20091ca4:	180b883a 	mov	r5,r3
20091ca8:	000d883a 	mov	r6,zero
20091cac:	01d00734 	movhi	r7,16412
20091cb0:	00895840 	call	20089584 <__adddf3>
20091cb4:	1023883a 	mov	r17,r2
20091cb8:	00bf3034 	movhi	r2,64704
20091cbc:	1885883a 	add	r2,r3,r2
20091cc0:	d8800e15 	stw	r2,56(sp)
20091cc4:	a009883a 	mov	r4,r20
20091cc8:	a80b883a 	mov	r5,r21
20091ccc:	000d883a 	mov	r6,zero
20091cd0:	01d00534 	movhi	r7,16404
20091cd4:	008a6ec0 	call	2008a6ec <__subdf3>
20091cd8:	d9c00e17 	ldw	r7,56(sp)
20091cdc:	1009883a 	mov	r4,r2
20091ce0:	180b883a 	mov	r5,r3
20091ce4:	880d883a 	mov	r6,r17
20091ce8:	102b883a 	mov	r21,r2
20091cec:	1829883a 	mov	r20,r3
20091cf0:	0098cfc0 	call	20098cfc <__gedf2>
20091cf4:	00807716 	blt	zero,r2,20091ed4 <_dtoa_r+0x1388>
20091cf8:	d8800e17 	ldw	r2,56(sp)
20091cfc:	a809883a 	mov	r4,r21
20091d00:	a00b883a 	mov	r5,r20
20091d04:	11e0003c 	xorhi	r7,r2,32768
20091d08:	880d883a 	mov	r6,r17
20091d0c:	0098ddc0 	call	20098ddc <__ledf2>
20091d10:	103d6b0e 	bge	r2,zero,200912c0 <__flash_rwdata_start+0xffff24d4>
20091d14:	002b883a 	mov	r21,zero
20091d18:	0023883a 	mov	r17,zero
20091d1c:	003f4c06 	br	20091a50 <__flash_rwdata_start+0xffff2c64>
20091d20:	d9800917 	ldw	r6,36(sp)
20091d24:	e00b883a 	mov	r5,fp
20091d28:	8009883a 	mov	r4,r16
20091d2c:	0093e240 	call	20093e24 <__pow5mult>
20091d30:	1039883a 	mov	fp,r2
20091d34:	003e2706 	br	200915d4 <__flash_rwdata_start+0xffff27e8>
20091d38:	d8000b15 	stw	zero,44(sp)
20091d3c:	003c4906 	br	20090e64 <__flash_rwdata_start+0xffff2078>
20091d40:	d9000917 	ldw	r4,36(sp)
20091d44:	d9800a17 	ldw	r6,40(sp)
20091d48:	dd400915 	stw	r21,36(sp)
20091d4c:	a905c83a 	sub	r2,r21,r4
20091d50:	308d883a 	add	r6,r6,r2
20091d54:	d9800a15 	stw	r6,40(sp)
20091d58:	002b883a 	mov	r21,zero
20091d5c:	003df206 	br	20091528 <__flash_rwdata_start+0xffff273c>
20091d60:	dc800e15 	stw	r18,56(sp)
20091d64:	982b883a 	mov	r21,r19
20091d68:	04400084 	movi	r17,2
20091d6c:	003c7406 	br	20090f40 <__flash_rwdata_start+0xffff2154>
20091d70:	04400044 	movi	r17,1
20091d74:	dc400c15 	stw	r17,48(sp)
20091d78:	dc400615 	stw	r17,24(sp)
20091d7c:	dc402215 	stw	r17,136(sp)
20091d80:	80001115 	stw	zero,68(r16)
20091d84:	000b883a 	mov	r5,zero
20091d88:	003c4a06 	br	20090eb4 <__flash_rwdata_start+0xffff20c8>
20091d8c:	3023883a 	mov	r17,r6
20091d90:	003ffb06 	br	20091d80 <__flash_rwdata_start+0xffff2f94>
20091d94:	1000021e 	bne	r2,zero,20091da0 <_dtoa_r+0x1254>
20091d98:	4200004c 	andi	r8,r8,1
20091d9c:	403e8f1e 	bne	r8,zero,200917dc <__flash_rwdata_start+0xffff29f0>
20091da0:	01000c04 	movi	r4,48
20091da4:	00000106 	br	20091dac <_dtoa_r+0x1260>
20091da8:	102f883a 	mov	r23,r2
20091dac:	b8bfffc4 	addi	r2,r23,-1
20091db0:	10c00007 	ldb	r3,0(r2)
20091db4:	193ffc26 	beq	r3,r4,20091da8 <__flash_rwdata_start+0xffff2fbc>
20091db8:	003e9906 	br	20091820 <__flash_rwdata_start+0xffff2a34>
20091dbc:	d9000517 	ldw	r4,20(sp)
20091dc0:	012fc83a 	sub	r23,zero,r4
20091dc4:	b800ad26 	beq	r23,zero,2009207c <_dtoa_r+0x1530>
20091dc8:	b88003cc 	andi	r2,r23,15
20091dcc:	100490fa 	slli	r2,r2,3
20091dd0:	00c00034 	movhi	r3,0
20091dd4:	18c21b04 	addi	r3,r3,2156
20091dd8:	1885883a 	add	r2,r3,r2
20091ddc:	11800017 	ldw	r6,0(r2)
20091de0:	11c00117 	ldw	r7,4(r2)
20091de4:	b82fd13a 	srai	r23,r23,4
20091de8:	9009883a 	mov	r4,r18
20091dec:	980b883a 	mov	r5,r19
20091df0:	0098ebc0 	call	20098ebc <__muldf3>
20091df4:	1029883a 	mov	r20,r2
20091df8:	182b883a 	mov	r21,r3
20091dfc:	b800f426 	beq	r23,zero,200921d0 <_dtoa_r+0x1684>
20091e00:	02000034 	movhi	r8,0
20091e04:	42021104 	addi	r8,r8,2116
20091e08:	8029883a 	mov	r20,r16
20091e0c:	04400084 	movi	r17,2
20091e10:	4021883a 	mov	r16,r8
20091e14:	b980004c 	andi	r6,r23,1
20091e18:	1009883a 	mov	r4,r2
20091e1c:	b82fd07a 	srai	r23,r23,1
20091e20:	180b883a 	mov	r5,r3
20091e24:	30000426 	beq	r6,zero,20091e38 <_dtoa_r+0x12ec>
20091e28:	81800017 	ldw	r6,0(r16)
20091e2c:	81c00117 	ldw	r7,4(r16)
20091e30:	8c400044 	addi	r17,r17,1
20091e34:	0098ebc0 	call	20098ebc <__muldf3>
20091e38:	84000204 	addi	r16,r16,8
20091e3c:	b83ff51e 	bne	r23,zero,20091e14 <__flash_rwdata_start+0xffff3028>
20091e40:	a021883a 	mov	r16,r20
20091e44:	182b883a 	mov	r21,r3
20091e48:	1029883a 	mov	r20,r2
20091e4c:	003c5506 	br	20090fa4 <__flash_rwdata_start+0xffff21b8>
20091e50:	d9800517 	ldw	r6,20(sp)
20091e54:	d9000717 	ldw	r4,28(sp)
20091e58:	00c00c04 	movi	r3,48
20091e5c:	31800044 	addi	r6,r6,1
20091e60:	d9800515 	stw	r6,20(sp)
20091e64:	20c00005 	stb	r3,0(r4)
20091e68:	02000c44 	movi	r8,49
20091e6c:	003da206 	br	200914f8 <__flash_rwdata_start+0xffff270c>
20091e70:	89400117 	ldw	r5,4(r17)
20091e74:	8009883a 	mov	r4,r16
20091e78:	00937e00 	call	200937e0 <_Balloc>
20091e7c:	89800417 	ldw	r6,16(r17)
20091e80:	11000304 	addi	r4,r2,12
20091e84:	89400304 	addi	r5,r17,12
20091e88:	31800084 	addi	r6,r6,2
20091e8c:	318d883a 	add	r6,r6,r6
20091e90:	318d883a 	add	r6,r6,r6
20091e94:	1027883a 	mov	r19,r2
20091e98:	008bf180 	call	2008bf18 <memcpy>
20091e9c:	8009883a 	mov	r4,r16
20091ea0:	980b883a 	mov	r5,r19
20091ea4:	01800044 	movi	r6,1
20091ea8:	0093f640 	call	20093f64 <__lshift>
20091eac:	1029883a 	mov	r20,r2
20091eb0:	003e8606 	br	200918cc <__flash_rwdata_start+0xffff2ae0>
20091eb4:	00800e44 	movi	r2,57
20091eb8:	90809526 	beq	r18,r2,20092110 <_dtoa_r+0x15c4>
20091ebc:	92000044 	addi	r8,r18,1
20091ec0:	003f2306 	br	20091b50 <__flash_rwdata_start+0xffff2d64>
20091ec4:	9011883a 	mov	r8,r18
20091ec8:	8825883a 	mov	r18,r17
20091ecc:	a023883a 	mov	r17,r20
20091ed0:	003e3706 	br	200917b0 <__flash_rwdata_start+0xffff29c4>
20091ed4:	002b883a 	mov	r21,zero
20091ed8:	0023883a 	mov	r17,zero
20091edc:	003f5606 	br	20091c38 <__flash_rwdata_start+0xffff2e4c>
20091ee0:	51bfffc4 	addi	r6,r10,-1
20091ee4:	300490fa 	slli	r2,r6,3
20091ee8:	00c00034 	movhi	r3,0
20091eec:	18c21b04 	addi	r3,r3,2156
20091ef0:	1885883a 	add	r2,r3,r2
20091ef4:	d9c00e17 	ldw	r7,56(sp)
20091ef8:	11000017 	ldw	r4,0(r2)
20091efc:	11400117 	ldw	r5,4(r2)
20091f00:	d8800717 	ldw	r2,28(sp)
20091f04:	d9801015 	stw	r6,64(sp)
20091f08:	880d883a 	mov	r6,r17
20091f0c:	da801615 	stw	r10,88(sp)
20091f10:	15c00044 	addi	r23,r2,1
20091f14:	0098ebc0 	call	20098ebc <__muldf3>
20091f18:	a80b883a 	mov	r5,r21
20091f1c:	a009883a 	mov	r4,r20
20091f20:	d8c01115 	stw	r3,68(sp)
20091f24:	d8800e15 	stw	r2,56(sp)
20091f28:	008afbc0 	call	2008afbc <__fixdfsi>
20091f2c:	1009883a 	mov	r4,r2
20091f30:	1023883a 	mov	r17,r2
20091f34:	008b0440 	call	2008b044 <__floatsidf>
20091f38:	a009883a 	mov	r4,r20
20091f3c:	a80b883a 	mov	r5,r21
20091f40:	100d883a 	mov	r6,r2
20091f44:	180f883a 	mov	r7,r3
20091f48:	008a6ec0 	call	2008a6ec <__subdf3>
20091f4c:	1813883a 	mov	r9,r3
20091f50:	d8c00717 	ldw	r3,28(sp)
20091f54:	8c400c04 	addi	r17,r17,48
20091f58:	1011883a 	mov	r8,r2
20091f5c:	1c400005 	stb	r17,0(r3)
20091f60:	da801617 	ldw	r10,88(sp)
20091f64:	00800044 	movi	r2,1
20091f68:	50802326 	beq	r10,r2,20091ff8 <_dtoa_r+0x14ac>
20091f6c:	d8800717 	ldw	r2,28(sp)
20091f70:	b82b883a 	mov	r21,r23
20091f74:	dc001315 	stw	r16,76(sp)
20091f78:	12a9883a 	add	r20,r2,r10
20091f7c:	4807883a 	mov	r3,r9
20091f80:	4005883a 	mov	r2,r8
20091f84:	dc801415 	stw	r18,80(sp)
20091f88:	000d883a 	mov	r6,zero
20091f8c:	01d00934 	movhi	r7,16420
20091f90:	1009883a 	mov	r4,r2
20091f94:	180b883a 	mov	r5,r3
20091f98:	0098ebc0 	call	20098ebc <__muldf3>
20091f9c:	180b883a 	mov	r5,r3
20091fa0:	1009883a 	mov	r4,r2
20091fa4:	1821883a 	mov	r16,r3
20091fa8:	1025883a 	mov	r18,r2
20091fac:	008afbc0 	call	2008afbc <__fixdfsi>
20091fb0:	1009883a 	mov	r4,r2
20091fb4:	1023883a 	mov	r17,r2
20091fb8:	008b0440 	call	2008b044 <__floatsidf>
20091fbc:	9009883a 	mov	r4,r18
20091fc0:	800b883a 	mov	r5,r16
20091fc4:	100d883a 	mov	r6,r2
20091fc8:	180f883a 	mov	r7,r3
20091fcc:	8c400c04 	addi	r17,r17,48
20091fd0:	008a6ec0 	call	2008a6ec <__subdf3>
20091fd4:	ad400044 	addi	r21,r21,1
20091fd8:	ac7fffc5 	stb	r17,-1(r21)
20091fdc:	ad3fea1e 	bne	r21,r20,20091f88 <__flash_rwdata_start+0xffff319c>
20091fe0:	1813883a 	mov	r9,r3
20091fe4:	d8c01017 	ldw	r3,64(sp)
20091fe8:	dc001317 	ldw	r16,76(sp)
20091fec:	dc801417 	ldw	r18,80(sp)
20091ff0:	1011883a 	mov	r8,r2
20091ff4:	b8ef883a 	add	r23,r23,r3
20091ff8:	d9000e17 	ldw	r4,56(sp)
20091ffc:	d9401117 	ldw	r5,68(sp)
20092000:	000d883a 	mov	r6,zero
20092004:	01cff834 	movhi	r7,16352
20092008:	da001715 	stw	r8,92(sp)
2009200c:	da401515 	stw	r9,84(sp)
20092010:	00895840 	call	20089584 <__adddf3>
20092014:	da001717 	ldw	r8,92(sp)
20092018:	da401517 	ldw	r9,84(sp)
2009201c:	1009883a 	mov	r4,r2
20092020:	400d883a 	mov	r6,r8
20092024:	480f883a 	mov	r7,r9
20092028:	180b883a 	mov	r5,r3
2009202c:	0098ddc0 	call	20098ddc <__ledf2>
20092030:	da001717 	ldw	r8,92(sp)
20092034:	da401517 	ldw	r9,84(sp)
20092038:	10003b0e 	bge	r2,zero,20092128 <_dtoa_r+0x15dc>
2009203c:	d9001217 	ldw	r4,72(sp)
20092040:	bd7fffc3 	ldbu	r21,-1(r23)
20092044:	d9000515 	stw	r4,20(sp)
20092048:	003d1c06 	br	200914bc <__flash_rwdata_start+0xffff26d0>
2009204c:	d8c00817 	ldw	r3,32(sp)
20092050:	18a9c83a 	sub	r20,r3,r2
20092054:	0005883a 	mov	r2,zero
20092058:	003d3706 	br	20091538 <__flash_rwdata_start+0xffff274c>
2009205c:	00800044 	movi	r2,1
20092060:	003dd006 	br	200917a4 <__flash_rwdata_start+0xffff29b8>
20092064:	d8c00217 	ldw	r3,8(sp)
20092068:	00800d84 	movi	r2,54
2009206c:	dd400917 	ldw	r21,36(sp)
20092070:	10c5c83a 	sub	r2,r2,r3
20092074:	dd000817 	ldw	r20,32(sp)
20092078:	003d2f06 	br	20091538 <__flash_rwdata_start+0xffff274c>
2009207c:	9029883a 	mov	r20,r18
20092080:	982b883a 	mov	r21,r19
20092084:	04400084 	movi	r17,2
20092088:	003bc606 	br	20090fa4 <__flash_rwdata_start+0xffff21b8>
2009208c:	d8800617 	ldw	r2,24(sp)
20092090:	103efc26 	beq	r2,zero,20091c84 <__flash_rwdata_start+0xffff2e98>
20092094:	d8c00c17 	ldw	r3,48(sp)
20092098:	00fc890e 	bge	zero,r3,200912c0 <__flash_rwdata_start+0xffff24d4>
2009209c:	a80b883a 	mov	r5,r21
200920a0:	a009883a 	mov	r4,r20
200920a4:	000d883a 	mov	r6,zero
200920a8:	01d00934 	movhi	r7,16420
200920ac:	0098ebc0 	call	20098ebc <__muldf3>
200920b0:	89000044 	addi	r4,r17,1
200920b4:	1029883a 	mov	r20,r2
200920b8:	182b883a 	mov	r21,r3
200920bc:	008b0440 	call	2008b044 <__floatsidf>
200920c0:	a009883a 	mov	r4,r20
200920c4:	a80b883a 	mov	r5,r21
200920c8:	100d883a 	mov	r6,r2
200920cc:	180f883a 	mov	r7,r3
200920d0:	0098ebc0 	call	20098ebc <__muldf3>
200920d4:	1009883a 	mov	r4,r2
200920d8:	180b883a 	mov	r5,r3
200920dc:	000d883a 	mov	r6,zero
200920e0:	01d00734 	movhi	r7,16412
200920e4:	00895840 	call	20089584 <__adddf3>
200920e8:	d9000517 	ldw	r4,20(sp)
200920ec:	1023883a 	mov	r17,r2
200920f0:	00bf3034 	movhi	r2,64704
200920f4:	213fffc4 	addi	r4,r4,-1
200920f8:	1885883a 	add	r2,r3,r2
200920fc:	d9001215 	stw	r4,72(sp)
20092100:	d8800e15 	stw	r2,56(sp)
20092104:	da800c17 	ldw	r10,48(sp)
20092108:	003bc306 	br	20091018 <__flash_rwdata_start+0xffff222c>
2009210c:	b039883a 	mov	fp,r22
20092110:	01000e44 	movi	r4,57
20092114:	8825883a 	mov	r18,r17
20092118:	9dc00044 	addi	r23,r19,1
2009211c:	99000005 	stb	r4,0(r19)
20092120:	a023883a 	mov	r17,r20
20092124:	003dae06 	br	200917e0 <__flash_rwdata_start+0xffff29f4>
20092128:	d9800e17 	ldw	r6,56(sp)
2009212c:	d9c01117 	ldw	r7,68(sp)
20092130:	0009883a 	mov	r4,zero
20092134:	014ff834 	movhi	r5,16352
20092138:	da001715 	stw	r8,92(sp)
2009213c:	da401515 	stw	r9,84(sp)
20092140:	008a6ec0 	call	2008a6ec <__subdf3>
20092144:	da001717 	ldw	r8,92(sp)
20092148:	da401517 	ldw	r9,84(sp)
2009214c:	1009883a 	mov	r4,r2
20092150:	180b883a 	mov	r5,r3
20092154:	400d883a 	mov	r6,r8
20092158:	480f883a 	mov	r7,r9
2009215c:	0098cfc0 	call	20098cfc <__gedf2>
20092160:	00bc570e 	bge	zero,r2,200912c0 <__flash_rwdata_start+0xffff24d4>
20092164:	01000c04 	movi	r4,48
20092168:	00000106 	br	20092170 <_dtoa_r+0x1624>
2009216c:	102f883a 	mov	r23,r2
20092170:	b8bfffc4 	addi	r2,r23,-1
20092174:	10c00007 	ldb	r3,0(r2)
20092178:	193ffc26 	beq	r3,r4,2009216c <__flash_rwdata_start+0xffff3380>
2009217c:	d9801217 	ldw	r6,72(sp)
20092180:	d9800515 	stw	r6,20(sp)
20092184:	003c1f06 	br	20091204 <__flash_rwdata_start+0xffff2418>
20092188:	d8801217 	ldw	r2,72(sp)
2009218c:	dc001117 	ldw	r16,68(sp)
20092190:	d8800515 	stw	r2,20(sp)
20092194:	003cc906 	br	200914bc <__flash_rwdata_start+0xffff26d0>
20092198:	dd801317 	ldw	r22,76(sp)
2009219c:	dc001117 	ldw	r16,68(sp)
200921a0:	dcc01417 	ldw	r19,80(sp)
200921a4:	dc801017 	ldw	r18,64(sp)
200921a8:	003c4506 	br	200912c0 <__flash_rwdata_start+0xffff24d4>
200921ac:	103e5d1e 	bne	r2,zero,20091b24 <__flash_rwdata_start+0xffff2d38>
200921b0:	4080004c 	andi	r2,r8,1
200921b4:	103e5b26 	beq	r2,zero,20091b24 <__flash_rwdata_start+0xffff2d38>
200921b8:	003e5706 	br	20091b18 <__flash_rwdata_start+0xffff2d2c>
200921bc:	d8c00317 	ldw	r3,12(sp)
200921c0:	00800084 	movi	r2,2
200921c4:	10c00a16 	blt	r2,r3,200921f0 <_dtoa_r+0x16a4>
200921c8:	d9000c17 	ldw	r4,48(sp)
200921cc:	003e8306 	br	20091bdc <__flash_rwdata_start+0xffff2df0>
200921d0:	04400084 	movi	r17,2
200921d4:	003b7306 	br	20090fa4 <__flash_rwdata_start+0xffff21b8>
200921d8:	d9801217 	ldw	r6,72(sp)
200921dc:	d9800515 	stw	r6,20(sp)
200921e0:	003cb606 	br	200914bc <__flash_rwdata_start+0xffff26d0>
200921e4:	d9001217 	ldw	r4,72(sp)
200921e8:	d9000515 	stw	r4,20(sp)
200921ec:	003c0506 	br	20091204 <__flash_rwdata_start+0xffff2418>
200921f0:	d9800c17 	ldw	r6,48(sp)
200921f4:	d9800615 	stw	r6,24(sp)
200921f8:	003e8306 	br	20091c08 <__flash_rwdata_start+0xffff2e1c>
200921fc:	d9800317 	ldw	r6,12(sp)
20092200:	00800084 	movi	r2,2
20092204:	11800216 	blt	r2,r6,20092210 <_dtoa_r+0x16c4>
20092208:	d8800c17 	ldw	r2,48(sp)
2009220c:	003da606 	br	200918a8 <__flash_rwdata_start+0xffff2abc>
20092210:	d8800c17 	ldw	r2,48(sp)
20092214:	d8800615 	stw	r2,24(sp)
20092218:	003e7b06 	br	20091c08 <__flash_rwdata_start+0xffff2e1c>
2009221c:	05000044 	movi	r20,1
20092220:	003b0506 	br	20090e38 <__flash_rwdata_start+0xffff204c>
20092224:	8009883a 	mov	r4,r16
20092228:	80001115 	stw	zero,68(r16)
2009222c:	000b883a 	mov	r5,zero
20092230:	00937e00 	call	200937e0 <_Balloc>
20092234:	d8800715 	stw	r2,28(sp)
20092238:	d8c00717 	ldw	r3,28(sp)
2009223c:	00bfffc4 	movi	r2,-1
20092240:	01000044 	movi	r4,1
20092244:	d8800c15 	stw	r2,48(sp)
20092248:	80c01015 	stw	r3,64(r16)
2009224c:	d9000b15 	stw	r4,44(sp)
20092250:	d8800615 	stw	r2,24(sp)
20092254:	d8002215 	stw	zero,136(sp)
20092258:	003c1906 	br	200912c0 <__flash_rwdata_start+0xffff24d4>
2009225c:	193d2926 	beq	r3,r4,20091704 <__flash_rwdata_start+0xffff2918>
20092260:	00c00f04 	movi	r3,60
20092264:	1885c83a 	sub	r2,r3,r2
20092268:	003d7b06 	br	20091858 <__flash_rwdata_start+0xffff2a6c>
2009226c:	000b883a 	mov	r5,zero
20092270:	003b1006 	br	20090eb4 <__flash_rwdata_start+0xffff20c8>

20092274 <__sflush_r>:
20092274:	2880030b 	ldhu	r2,12(r5)
20092278:	defffb04 	addi	sp,sp,-20
2009227c:	dcc00315 	stw	r19,12(sp)
20092280:	dc400115 	stw	r17,4(sp)
20092284:	dfc00415 	stw	ra,16(sp)
20092288:	dc800215 	stw	r18,8(sp)
2009228c:	dc000015 	stw	r16,0(sp)
20092290:	10c0020c 	andi	r3,r2,8
20092294:	2823883a 	mov	r17,r5
20092298:	2027883a 	mov	r19,r4
2009229c:	1800311e 	bne	r3,zero,20092364 <__sflush_r+0xf0>
200922a0:	28c00117 	ldw	r3,4(r5)
200922a4:	10820014 	ori	r2,r2,2048
200922a8:	2880030d 	sth	r2,12(r5)
200922ac:	00c04b0e 	bge	zero,r3,200923dc <__sflush_r+0x168>
200922b0:	8a000a17 	ldw	r8,40(r17)
200922b4:	40002326 	beq	r8,zero,20092344 <__sflush_r+0xd0>
200922b8:	9c000017 	ldw	r16,0(r19)
200922bc:	10c4000c 	andi	r3,r2,4096
200922c0:	98000015 	stw	zero,0(r19)
200922c4:	18004826 	beq	r3,zero,200923e8 <__sflush_r+0x174>
200922c8:	89801417 	ldw	r6,80(r17)
200922cc:	10c0010c 	andi	r3,r2,4
200922d0:	18000626 	beq	r3,zero,200922ec <__sflush_r+0x78>
200922d4:	88c00117 	ldw	r3,4(r17)
200922d8:	88800c17 	ldw	r2,48(r17)
200922dc:	30cdc83a 	sub	r6,r6,r3
200922e0:	10000226 	beq	r2,zero,200922ec <__sflush_r+0x78>
200922e4:	88800f17 	ldw	r2,60(r17)
200922e8:	308dc83a 	sub	r6,r6,r2
200922ec:	89400717 	ldw	r5,28(r17)
200922f0:	9809883a 	mov	r4,r19
200922f4:	000f883a 	mov	r7,zero
200922f8:	403ee83a 	callr	r8
200922fc:	00ffffc4 	movi	r3,-1
20092300:	10c04426 	beq	r2,r3,20092414 <__sflush_r+0x1a0>
20092304:	88c0030b 	ldhu	r3,12(r17)
20092308:	89000417 	ldw	r4,16(r17)
2009230c:	88000115 	stw	zero,4(r17)
20092310:	197dffcc 	andi	r5,r3,63487
20092314:	8940030d 	sth	r5,12(r17)
20092318:	89000015 	stw	r4,0(r17)
2009231c:	18c4000c 	andi	r3,r3,4096
20092320:	18002c1e 	bne	r3,zero,200923d4 <__sflush_r+0x160>
20092324:	89400c17 	ldw	r5,48(r17)
20092328:	9c000015 	stw	r16,0(r19)
2009232c:	28000526 	beq	r5,zero,20092344 <__sflush_r+0xd0>
20092330:	88801004 	addi	r2,r17,64
20092334:	28800226 	beq	r5,r2,20092340 <__sflush_r+0xcc>
20092338:	9809883a 	mov	r4,r19
2009233c:	00929cc0 	call	200929cc <_free_r>
20092340:	88000c15 	stw	zero,48(r17)
20092344:	0005883a 	mov	r2,zero
20092348:	dfc00417 	ldw	ra,16(sp)
2009234c:	dcc00317 	ldw	r19,12(sp)
20092350:	dc800217 	ldw	r18,8(sp)
20092354:	dc400117 	ldw	r17,4(sp)
20092358:	dc000017 	ldw	r16,0(sp)
2009235c:	dec00504 	addi	sp,sp,20
20092360:	f800283a 	ret
20092364:	2c800417 	ldw	r18,16(r5)
20092368:	903ff626 	beq	r18,zero,20092344 <__flash_rwdata_start+0xffff3558>
2009236c:	2c000017 	ldw	r16,0(r5)
20092370:	108000cc 	andi	r2,r2,3
20092374:	2c800015 	stw	r18,0(r5)
20092378:	84a1c83a 	sub	r16,r16,r18
2009237c:	1000131e 	bne	r2,zero,200923cc <__sflush_r+0x158>
20092380:	28800517 	ldw	r2,20(r5)
20092384:	88800215 	stw	r2,8(r17)
20092388:	04000316 	blt	zero,r16,20092398 <__sflush_r+0x124>
2009238c:	003fed06 	br	20092344 <__flash_rwdata_start+0xffff3558>
20092390:	90a5883a 	add	r18,r18,r2
20092394:	043feb0e 	bge	zero,r16,20092344 <__flash_rwdata_start+0xffff3558>
20092398:	88800917 	ldw	r2,36(r17)
2009239c:	89400717 	ldw	r5,28(r17)
200923a0:	800f883a 	mov	r7,r16
200923a4:	900d883a 	mov	r6,r18
200923a8:	9809883a 	mov	r4,r19
200923ac:	103ee83a 	callr	r2
200923b0:	80a1c83a 	sub	r16,r16,r2
200923b4:	00bff616 	blt	zero,r2,20092390 <__flash_rwdata_start+0xffff35a4>
200923b8:	88c0030b 	ldhu	r3,12(r17)
200923bc:	00bfffc4 	movi	r2,-1
200923c0:	18c01014 	ori	r3,r3,64
200923c4:	88c0030d 	sth	r3,12(r17)
200923c8:	003fdf06 	br	20092348 <__flash_rwdata_start+0xffff355c>
200923cc:	0005883a 	mov	r2,zero
200923d0:	003fec06 	br	20092384 <__flash_rwdata_start+0xffff3598>
200923d4:	88801415 	stw	r2,80(r17)
200923d8:	003fd206 	br	20092324 <__flash_rwdata_start+0xffff3538>
200923dc:	28c00f17 	ldw	r3,60(r5)
200923e0:	00ffb316 	blt	zero,r3,200922b0 <__flash_rwdata_start+0xffff34c4>
200923e4:	003fd706 	br	20092344 <__flash_rwdata_start+0xffff3558>
200923e8:	89400717 	ldw	r5,28(r17)
200923ec:	000d883a 	mov	r6,zero
200923f0:	9809883a 	mov	r4,r19
200923f4:	01c00044 	movi	r7,1
200923f8:	403ee83a 	callr	r8
200923fc:	100d883a 	mov	r6,r2
20092400:	00bfffc4 	movi	r2,-1
20092404:	30801426 	beq	r6,r2,20092458 <__sflush_r+0x1e4>
20092408:	8880030b 	ldhu	r2,12(r17)
2009240c:	8a000a17 	ldw	r8,40(r17)
20092410:	003fae06 	br	200922cc <__flash_rwdata_start+0xffff34e0>
20092414:	98c00017 	ldw	r3,0(r19)
20092418:	183fba26 	beq	r3,zero,20092304 <__flash_rwdata_start+0xffff3518>
2009241c:	01000744 	movi	r4,29
20092420:	19000626 	beq	r3,r4,2009243c <__sflush_r+0x1c8>
20092424:	01000584 	movi	r4,22
20092428:	19000426 	beq	r3,r4,2009243c <__sflush_r+0x1c8>
2009242c:	88c0030b 	ldhu	r3,12(r17)
20092430:	18c01014 	ori	r3,r3,64
20092434:	88c0030d 	sth	r3,12(r17)
20092438:	003fc306 	br	20092348 <__flash_rwdata_start+0xffff355c>
2009243c:	8880030b 	ldhu	r2,12(r17)
20092440:	88c00417 	ldw	r3,16(r17)
20092444:	88000115 	stw	zero,4(r17)
20092448:	10bdffcc 	andi	r2,r2,63487
2009244c:	8880030d 	sth	r2,12(r17)
20092450:	88c00015 	stw	r3,0(r17)
20092454:	003fb306 	br	20092324 <__flash_rwdata_start+0xffff3538>
20092458:	98800017 	ldw	r2,0(r19)
2009245c:	103fea26 	beq	r2,zero,20092408 <__flash_rwdata_start+0xffff361c>
20092460:	00c00744 	movi	r3,29
20092464:	10c00226 	beq	r2,r3,20092470 <__sflush_r+0x1fc>
20092468:	00c00584 	movi	r3,22
2009246c:	10ffd21e 	bne	r2,r3,200923b8 <__flash_rwdata_start+0xffff35cc>
20092470:	9c000015 	stw	r16,0(r19)
20092474:	0005883a 	mov	r2,zero
20092478:	003fb306 	br	20092348 <__flash_rwdata_start+0xffff355c>

2009247c <_fflush_r>:
2009247c:	defffd04 	addi	sp,sp,-12
20092480:	dc000115 	stw	r16,4(sp)
20092484:	dfc00215 	stw	ra,8(sp)
20092488:	2021883a 	mov	r16,r4
2009248c:	20000226 	beq	r4,zero,20092498 <_fflush_r+0x1c>
20092490:	20800e17 	ldw	r2,56(r4)
20092494:	10000c26 	beq	r2,zero,200924c8 <_fflush_r+0x4c>
20092498:	2880030f 	ldh	r2,12(r5)
2009249c:	1000051e 	bne	r2,zero,200924b4 <_fflush_r+0x38>
200924a0:	0005883a 	mov	r2,zero
200924a4:	dfc00217 	ldw	ra,8(sp)
200924a8:	dc000117 	ldw	r16,4(sp)
200924ac:	dec00304 	addi	sp,sp,12
200924b0:	f800283a 	ret
200924b4:	8009883a 	mov	r4,r16
200924b8:	dfc00217 	ldw	ra,8(sp)
200924bc:	dc000117 	ldw	r16,4(sp)
200924c0:	dec00304 	addi	sp,sp,12
200924c4:	00922741 	jmpi	20092274 <__sflush_r>
200924c8:	d9400015 	stw	r5,0(sp)
200924cc:	00928580 	call	20092858 <__sinit>
200924d0:	d9400017 	ldw	r5,0(sp)
200924d4:	003ff006 	br	20092498 <__flash_rwdata_start+0xffff36ac>

200924d8 <fflush>:
200924d8:	20000526 	beq	r4,zero,200924f0 <fflush+0x18>
200924dc:	00800034 	movhi	r2,0
200924e0:	108a7104 	addi	r2,r2,10692
200924e4:	200b883a 	mov	r5,r4
200924e8:	11000017 	ldw	r4,0(r2)
200924ec:	009247c1 	jmpi	2009247c <_fflush_r>
200924f0:	00800034 	movhi	r2,0
200924f4:	108a7004 	addi	r2,r2,10688
200924f8:	11000017 	ldw	r4,0(r2)
200924fc:	01480274 	movhi	r5,8201
20092500:	29491f04 	addi	r5,r5,9340
20092504:	00932401 	jmpi	20093240 <_fwalk_reent>

20092508 <__fp_lock>:
20092508:	0005883a 	mov	r2,zero
2009250c:	f800283a 	ret

20092510 <__fp_unlock>:
20092510:	0005883a 	mov	r2,zero
20092514:	f800283a 	ret

20092518 <_cleanup_r>:
20092518:	01480274 	movhi	r5,8201
2009251c:	295ebe04 	addi	r5,r5,31480
20092520:	00932401 	jmpi	20093240 <_fwalk_reent>

20092524 <__sinit.part.1>:
20092524:	defff704 	addi	sp,sp,-36
20092528:	00c80274 	movhi	r3,8201
2009252c:	dfc00815 	stw	ra,32(sp)
20092530:	ddc00715 	stw	r23,28(sp)
20092534:	dd800615 	stw	r22,24(sp)
20092538:	dd400515 	stw	r21,20(sp)
2009253c:	dd000415 	stw	r20,16(sp)
20092540:	dcc00315 	stw	r19,12(sp)
20092544:	dc800215 	stw	r18,8(sp)
20092548:	dc400115 	stw	r17,4(sp)
2009254c:	dc000015 	stw	r16,0(sp)
20092550:	18c94604 	addi	r3,r3,9496
20092554:	24000117 	ldw	r16,4(r4)
20092558:	20c00f15 	stw	r3,60(r4)
2009255c:	2080bb04 	addi	r2,r4,748
20092560:	00c000c4 	movi	r3,3
20092564:	20c0b915 	stw	r3,740(r4)
20092568:	2080ba15 	stw	r2,744(r4)
2009256c:	2000b815 	stw	zero,736(r4)
20092570:	05c00204 	movi	r23,8
20092574:	00800104 	movi	r2,4
20092578:	2025883a 	mov	r18,r4
2009257c:	b80d883a 	mov	r6,r23
20092580:	81001704 	addi	r4,r16,92
20092584:	000b883a 	mov	r5,zero
20092588:	80000015 	stw	zero,0(r16)
2009258c:	80000115 	stw	zero,4(r16)
20092590:	80000215 	stw	zero,8(r16)
20092594:	8080030d 	sth	r2,12(r16)
20092598:	80001915 	stw	zero,100(r16)
2009259c:	8000038d 	sth	zero,14(r16)
200925a0:	80000415 	stw	zero,16(r16)
200925a4:	80000515 	stw	zero,20(r16)
200925a8:	80000615 	stw	zero,24(r16)
200925ac:	008c0500 	call	2008c050 <memset>
200925b0:	05880274 	movhi	r22,8201
200925b4:	94400217 	ldw	r17,8(r18)
200925b8:	05480274 	movhi	r21,8201
200925bc:	05080274 	movhi	r20,8201
200925c0:	04c80274 	movhi	r19,8201
200925c4:	b593b204 	addi	r22,r22,20168
200925c8:	ad53c904 	addi	r21,r21,20260
200925cc:	a513e804 	addi	r20,r20,20384
200925d0:	9cd3ff04 	addi	r19,r19,20476
200925d4:	85800815 	stw	r22,32(r16)
200925d8:	85400915 	stw	r21,36(r16)
200925dc:	85000a15 	stw	r20,40(r16)
200925e0:	84c00b15 	stw	r19,44(r16)
200925e4:	84000715 	stw	r16,28(r16)
200925e8:	00800284 	movi	r2,10
200925ec:	8880030d 	sth	r2,12(r17)
200925f0:	00800044 	movi	r2,1
200925f4:	89001704 	addi	r4,r17,92
200925f8:	b80d883a 	mov	r6,r23
200925fc:	000b883a 	mov	r5,zero
20092600:	88000015 	stw	zero,0(r17)
20092604:	88000115 	stw	zero,4(r17)
20092608:	88000215 	stw	zero,8(r17)
2009260c:	88001915 	stw	zero,100(r17)
20092610:	8880038d 	sth	r2,14(r17)
20092614:	88000415 	stw	zero,16(r17)
20092618:	88000515 	stw	zero,20(r17)
2009261c:	88000615 	stw	zero,24(r17)
20092620:	008c0500 	call	2008c050 <memset>
20092624:	94000317 	ldw	r16,12(r18)
20092628:	00800484 	movi	r2,18
2009262c:	8c400715 	stw	r17,28(r17)
20092630:	8d800815 	stw	r22,32(r17)
20092634:	8d400915 	stw	r21,36(r17)
20092638:	8d000a15 	stw	r20,40(r17)
2009263c:	8cc00b15 	stw	r19,44(r17)
20092640:	8080030d 	sth	r2,12(r16)
20092644:	00800084 	movi	r2,2
20092648:	80000015 	stw	zero,0(r16)
2009264c:	80000115 	stw	zero,4(r16)
20092650:	80000215 	stw	zero,8(r16)
20092654:	80001915 	stw	zero,100(r16)
20092658:	8080038d 	sth	r2,14(r16)
2009265c:	80000415 	stw	zero,16(r16)
20092660:	80000515 	stw	zero,20(r16)
20092664:	80000615 	stw	zero,24(r16)
20092668:	81001704 	addi	r4,r16,92
2009266c:	000b883a 	mov	r5,zero
20092670:	b80d883a 	mov	r6,r23
20092674:	008c0500 	call	2008c050 <memset>
20092678:	00800044 	movi	r2,1
2009267c:	84000715 	stw	r16,28(r16)
20092680:	85800815 	stw	r22,32(r16)
20092684:	85400915 	stw	r21,36(r16)
20092688:	85000a15 	stw	r20,40(r16)
2009268c:	84c00b15 	stw	r19,44(r16)
20092690:	90800e15 	stw	r2,56(r18)
20092694:	dfc00817 	ldw	ra,32(sp)
20092698:	ddc00717 	ldw	r23,28(sp)
2009269c:	dd800617 	ldw	r22,24(sp)
200926a0:	dd400517 	ldw	r21,20(sp)
200926a4:	dd000417 	ldw	r20,16(sp)
200926a8:	dcc00317 	ldw	r19,12(sp)
200926ac:	dc800217 	ldw	r18,8(sp)
200926b0:	dc400117 	ldw	r17,4(sp)
200926b4:	dc000017 	ldw	r16,0(sp)
200926b8:	dec00904 	addi	sp,sp,36
200926bc:	f800283a 	ret

200926c0 <__sfmoreglue>:
200926c0:	defffc04 	addi	sp,sp,-16
200926c4:	dc400115 	stw	r17,4(sp)
200926c8:	2c7fffc4 	addi	r17,r5,-1
200926cc:	8c401a24 	muli	r17,r17,104
200926d0:	dc800215 	stw	r18,8(sp)
200926d4:	2825883a 	mov	r18,r5
200926d8:	89401d04 	addi	r5,r17,116
200926dc:	dc000015 	stw	r16,0(sp)
200926e0:	dfc00315 	stw	ra,12(sp)
200926e4:	008b6f40 	call	2008b6f4 <_malloc_r>
200926e8:	1021883a 	mov	r16,r2
200926ec:	10000726 	beq	r2,zero,2009270c <__sfmoreglue+0x4c>
200926f0:	11000304 	addi	r4,r2,12
200926f4:	10000015 	stw	zero,0(r2)
200926f8:	14800115 	stw	r18,4(r2)
200926fc:	11000215 	stw	r4,8(r2)
20092700:	000b883a 	mov	r5,zero
20092704:	89801a04 	addi	r6,r17,104
20092708:	008c0500 	call	2008c050 <memset>
2009270c:	8005883a 	mov	r2,r16
20092710:	dfc00317 	ldw	ra,12(sp)
20092714:	dc800217 	ldw	r18,8(sp)
20092718:	dc400117 	ldw	r17,4(sp)
2009271c:	dc000017 	ldw	r16,0(sp)
20092720:	dec00404 	addi	sp,sp,16
20092724:	f800283a 	ret

20092728 <__sfp>:
20092728:	00800034 	movhi	r2,0
2009272c:	defffb04 	addi	sp,sp,-20
20092730:	108a7004 	addi	r2,r2,10688
20092734:	dc800215 	stw	r18,8(sp)
20092738:	14800017 	ldw	r18,0(r2)
2009273c:	dcc00315 	stw	r19,12(sp)
20092740:	dfc00415 	stw	ra,16(sp)
20092744:	90800e17 	ldw	r2,56(r18)
20092748:	dc400115 	stw	r17,4(sp)
2009274c:	dc000015 	stw	r16,0(sp)
20092750:	2027883a 	mov	r19,r4
20092754:	1000021e 	bne	r2,zero,20092760 <__sfp+0x38>
20092758:	9009883a 	mov	r4,r18
2009275c:	00925240 	call	20092524 <__sinit.part.1>
20092760:	9480b804 	addi	r18,r18,736
20092764:	047fffc4 	movi	r17,-1
20092768:	91400117 	ldw	r5,4(r18)
2009276c:	94000217 	ldw	r16,8(r18)
20092770:	297fffc4 	addi	r5,r5,-1
20092774:	28000a16 	blt	r5,zero,200927a0 <__sfp+0x78>
20092778:	8080030f 	ldh	r2,12(r16)
2009277c:	10000c26 	beq	r2,zero,200927b0 <__sfp+0x88>
20092780:	80c01d04 	addi	r3,r16,116
20092784:	00000206 	br	20092790 <__sfp+0x68>
20092788:	18bfe60f 	ldh	r2,-104(r3)
2009278c:	10000826 	beq	r2,zero,200927b0 <__sfp+0x88>
20092790:	297fffc4 	addi	r5,r5,-1
20092794:	1c3ffd04 	addi	r16,r3,-12
20092798:	18c01a04 	addi	r3,r3,104
2009279c:	2c7ffa1e 	bne	r5,r17,20092788 <__flash_rwdata_start+0xffff399c>
200927a0:	90800017 	ldw	r2,0(r18)
200927a4:	10001d26 	beq	r2,zero,2009281c <__sfp+0xf4>
200927a8:	1025883a 	mov	r18,r2
200927ac:	003fee06 	br	20092768 <__flash_rwdata_start+0xffff397c>
200927b0:	00bfffc4 	movi	r2,-1
200927b4:	8080038d 	sth	r2,14(r16)
200927b8:	00800044 	movi	r2,1
200927bc:	8080030d 	sth	r2,12(r16)
200927c0:	80001915 	stw	zero,100(r16)
200927c4:	80000015 	stw	zero,0(r16)
200927c8:	80000215 	stw	zero,8(r16)
200927cc:	80000115 	stw	zero,4(r16)
200927d0:	80000415 	stw	zero,16(r16)
200927d4:	80000515 	stw	zero,20(r16)
200927d8:	80000615 	stw	zero,24(r16)
200927dc:	81001704 	addi	r4,r16,92
200927e0:	000b883a 	mov	r5,zero
200927e4:	01800204 	movi	r6,8
200927e8:	008c0500 	call	2008c050 <memset>
200927ec:	8005883a 	mov	r2,r16
200927f0:	80000c15 	stw	zero,48(r16)
200927f4:	80000d15 	stw	zero,52(r16)
200927f8:	80001115 	stw	zero,68(r16)
200927fc:	80001215 	stw	zero,72(r16)
20092800:	dfc00417 	ldw	ra,16(sp)
20092804:	dcc00317 	ldw	r19,12(sp)
20092808:	dc800217 	ldw	r18,8(sp)
2009280c:	dc400117 	ldw	r17,4(sp)
20092810:	dc000017 	ldw	r16,0(sp)
20092814:	dec00504 	addi	sp,sp,20
20092818:	f800283a 	ret
2009281c:	9809883a 	mov	r4,r19
20092820:	01400104 	movi	r5,4
20092824:	00926c00 	call	200926c0 <__sfmoreglue>
20092828:	90800015 	stw	r2,0(r18)
2009282c:	103fde1e 	bne	r2,zero,200927a8 <__flash_rwdata_start+0xffff39bc>
20092830:	00800304 	movi	r2,12
20092834:	98800015 	stw	r2,0(r19)
20092838:	0005883a 	mov	r2,zero
2009283c:	003ff006 	br	20092800 <__flash_rwdata_start+0xffff3a14>

20092840 <_cleanup>:
20092840:	00800034 	movhi	r2,0
20092844:	108a7004 	addi	r2,r2,10688
20092848:	11000017 	ldw	r4,0(r2)
2009284c:	01480274 	movhi	r5,8201
20092850:	295ebe04 	addi	r5,r5,31480
20092854:	00932401 	jmpi	20093240 <_fwalk_reent>

20092858 <__sinit>:
20092858:	20800e17 	ldw	r2,56(r4)
2009285c:	10000126 	beq	r2,zero,20092864 <__sinit+0xc>
20092860:	f800283a 	ret
20092864:	00925241 	jmpi	20092524 <__sinit.part.1>

20092868 <__sfp_lock_acquire>:
20092868:	f800283a 	ret

2009286c <__sfp_lock_release>:
2009286c:	f800283a 	ret

20092870 <__sinit_lock_acquire>:
20092870:	f800283a 	ret

20092874 <__sinit_lock_release>:
20092874:	f800283a 	ret

20092878 <__fp_lock_all>:
20092878:	00800034 	movhi	r2,0
2009287c:	108a7104 	addi	r2,r2,10692
20092880:	11000017 	ldw	r4,0(r2)
20092884:	01480274 	movhi	r5,8201
20092888:	29494204 	addi	r5,r5,9480
2009288c:	009317c1 	jmpi	2009317c <_fwalk>

20092890 <__fp_unlock_all>:
20092890:	00800034 	movhi	r2,0
20092894:	108a7104 	addi	r2,r2,10692
20092898:	11000017 	ldw	r4,0(r2)
2009289c:	01480274 	movhi	r5,8201
200928a0:	29494404 	addi	r5,r5,9488
200928a4:	009317c1 	jmpi	2009317c <_fwalk>

200928a8 <_malloc_trim_r>:
200928a8:	defffb04 	addi	sp,sp,-20
200928ac:	dcc00315 	stw	r19,12(sp)
200928b0:	04c00034 	movhi	r19,0
200928b4:	dc800215 	stw	r18,8(sp)
200928b8:	dc400115 	stw	r17,4(sp)
200928bc:	dc000015 	stw	r16,0(sp)
200928c0:	dfc00415 	stw	ra,16(sp)
200928c4:	2821883a 	mov	r16,r5
200928c8:	9cc48304 	addi	r19,r19,4620
200928cc:	2025883a 	mov	r18,r4
200928d0:	0099e3c0 	call	20099e3c <__malloc_lock>
200928d4:	98800217 	ldw	r2,8(r19)
200928d8:	14400117 	ldw	r17,4(r2)
200928dc:	00bfff04 	movi	r2,-4
200928e0:	88a2703a 	and	r17,r17,r2
200928e4:	8c21c83a 	sub	r16,r17,r16
200928e8:	8403fbc4 	addi	r16,r16,4079
200928ec:	8020d33a 	srli	r16,r16,12
200928f0:	0083ffc4 	movi	r2,4095
200928f4:	843fffc4 	addi	r16,r16,-1
200928f8:	8020933a 	slli	r16,r16,12
200928fc:	1400060e 	bge	r2,r16,20092918 <_malloc_trim_r+0x70>
20092900:	9009883a 	mov	r4,r18
20092904:	000b883a 	mov	r5,zero
20092908:	008c2b80 	call	2008c2b8 <_sbrk_r>
2009290c:	98c00217 	ldw	r3,8(r19)
20092910:	1c47883a 	add	r3,r3,r17
20092914:	10c00a26 	beq	r2,r3,20092940 <_malloc_trim_r+0x98>
20092918:	9009883a 	mov	r4,r18
2009291c:	0099e5c0 	call	20099e5c <__malloc_unlock>
20092920:	0005883a 	mov	r2,zero
20092924:	dfc00417 	ldw	ra,16(sp)
20092928:	dcc00317 	ldw	r19,12(sp)
2009292c:	dc800217 	ldw	r18,8(sp)
20092930:	dc400117 	ldw	r17,4(sp)
20092934:	dc000017 	ldw	r16,0(sp)
20092938:	dec00504 	addi	sp,sp,20
2009293c:	f800283a 	ret
20092940:	9009883a 	mov	r4,r18
20092944:	040bc83a 	sub	r5,zero,r16
20092948:	008c2b80 	call	2008c2b8 <_sbrk_r>
2009294c:	00ffffc4 	movi	r3,-1
20092950:	10c00d26 	beq	r2,r3,20092988 <_malloc_trim_r+0xe0>
20092954:	00c00034 	movhi	r3,0
20092958:	18cc0104 	addi	r3,r3,12292
2009295c:	18800017 	ldw	r2,0(r3)
20092960:	99000217 	ldw	r4,8(r19)
20092964:	8c23c83a 	sub	r17,r17,r16
20092968:	8c400054 	ori	r17,r17,1
2009296c:	1421c83a 	sub	r16,r2,r16
20092970:	24400115 	stw	r17,4(r4)
20092974:	9009883a 	mov	r4,r18
20092978:	1c000015 	stw	r16,0(r3)
2009297c:	0099e5c0 	call	20099e5c <__malloc_unlock>
20092980:	00800044 	movi	r2,1
20092984:	003fe706 	br	20092924 <__flash_rwdata_start+0xffff3b38>
20092988:	9009883a 	mov	r4,r18
2009298c:	000b883a 	mov	r5,zero
20092990:	008c2b80 	call	2008c2b8 <_sbrk_r>
20092994:	99000217 	ldw	r4,8(r19)
20092998:	014003c4 	movi	r5,15
2009299c:	1107c83a 	sub	r3,r2,r4
200929a0:	28ffdd0e 	bge	r5,r3,20092918 <__flash_rwdata_start+0xffff3b2c>
200929a4:	01400034 	movhi	r5,0
200929a8:	294a7204 	addi	r5,r5,10696
200929ac:	29400017 	ldw	r5,0(r5)
200929b0:	18c00054 	ori	r3,r3,1
200929b4:	20c00115 	stw	r3,4(r4)
200929b8:	00c00034 	movhi	r3,0
200929bc:	1145c83a 	sub	r2,r2,r5
200929c0:	18cc0104 	addi	r3,r3,12292
200929c4:	18800015 	stw	r2,0(r3)
200929c8:	003fd306 	br	20092918 <__flash_rwdata_start+0xffff3b2c>

200929cc <_free_r>:
200929cc:	28004c26 	beq	r5,zero,20092b00 <_free_r+0x134>
200929d0:	defffd04 	addi	sp,sp,-12
200929d4:	dc400115 	stw	r17,4(sp)
200929d8:	dc000015 	stw	r16,0(sp)
200929dc:	2023883a 	mov	r17,r4
200929e0:	2821883a 	mov	r16,r5
200929e4:	dfc00215 	stw	ra,8(sp)
200929e8:	0099e3c0 	call	20099e3c <__malloc_lock>
200929ec:	813fff17 	ldw	r4,-4(r16)
200929f0:	00bfff84 	movi	r2,-2
200929f4:	02400034 	movhi	r9,0
200929f8:	81bffe04 	addi	r6,r16,-8
200929fc:	2084703a 	and	r2,r4,r2
20092a00:	4a448304 	addi	r9,r9,4620
20092a04:	308b883a 	add	r5,r6,r2
20092a08:	2a000117 	ldw	r8,4(r5)
20092a0c:	49c00217 	ldw	r7,8(r9)
20092a10:	00ffff04 	movi	r3,-4
20092a14:	40c6703a 	and	r3,r8,r3
20092a18:	39405326 	beq	r7,r5,20092b68 <_free_r+0x19c>
20092a1c:	28c00115 	stw	r3,4(r5)
20092a20:	2100004c 	andi	r4,r4,1
20092a24:	2000091e 	bne	r4,zero,20092a4c <_free_r+0x80>
20092a28:	81fffe17 	ldw	r7,-8(r16)
20092a2c:	4a000204 	addi	r8,r9,8
20092a30:	31cdc83a 	sub	r6,r6,r7
20092a34:	31000217 	ldw	r4,8(r6)
20092a38:	11c5883a 	add	r2,r2,r7
20092a3c:	22006126 	beq	r4,r8,20092bc4 <_free_r+0x1f8>
20092a40:	31c00317 	ldw	r7,12(r6)
20092a44:	21c00315 	stw	r7,12(r4)
20092a48:	39000215 	stw	r4,8(r7)
20092a4c:	28c9883a 	add	r4,r5,r3
20092a50:	21c00117 	ldw	r7,4(r4)
20092a54:	39c0004c 	andi	r7,r7,1
20092a58:	38000d1e 	bne	r7,zero,20092a90 <_free_r+0xc4>
20092a5c:	29000217 	ldw	r4,8(r5)
20092a60:	10c5883a 	add	r2,r2,r3
20092a64:	00c00034 	movhi	r3,0
20092a68:	18c48504 	addi	r3,r3,4628
20092a6c:	20c07526 	beq	r4,r3,20092c44 <_free_r+0x278>
20092a70:	29c00317 	ldw	r7,12(r5)
20092a74:	11400054 	ori	r5,r2,1
20092a78:	3087883a 	add	r3,r6,r2
20092a7c:	21c00315 	stw	r7,12(r4)
20092a80:	39000215 	stw	r4,8(r7)
20092a84:	31400115 	stw	r5,4(r6)
20092a88:	18800015 	stw	r2,0(r3)
20092a8c:	00000406 	br	20092aa0 <_free_r+0xd4>
20092a90:	10c00054 	ori	r3,r2,1
20092a94:	30c00115 	stw	r3,4(r6)
20092a98:	3087883a 	add	r3,r6,r2
20092a9c:	18800015 	stw	r2,0(r3)
20092aa0:	00c07fc4 	movi	r3,511
20092aa4:	18801736 	bltu	r3,r2,20092b04 <_free_r+0x138>
20092aa8:	1004d0fa 	srli	r2,r2,3
20092aac:	01400044 	movi	r5,1
20092ab0:	49000117 	ldw	r4,4(r9)
20092ab4:	1087883a 	add	r3,r2,r2
20092ab8:	18c7883a 	add	r3,r3,r3
20092abc:	1005d0ba 	srai	r2,r2,2
20092ac0:	18c7883a 	add	r3,r3,r3
20092ac4:	1a47883a 	add	r3,r3,r9
20092ac8:	19c00217 	ldw	r7,8(r3)
20092acc:	2884983a 	sll	r2,r5,r2
20092ad0:	30c00315 	stw	r3,12(r6)
20092ad4:	31c00215 	stw	r7,8(r6)
20092ad8:	1104b03a 	or	r2,r2,r4
20092adc:	19800215 	stw	r6,8(r3)
20092ae0:	48800115 	stw	r2,4(r9)
20092ae4:	39800315 	stw	r6,12(r7)
20092ae8:	8809883a 	mov	r4,r17
20092aec:	dfc00217 	ldw	ra,8(sp)
20092af0:	dc400117 	ldw	r17,4(sp)
20092af4:	dc000017 	ldw	r16,0(sp)
20092af8:	dec00304 	addi	sp,sp,12
20092afc:	0099e5c1 	jmpi	20099e5c <__malloc_unlock>
20092b00:	f800283a 	ret
20092b04:	1006d27a 	srli	r3,r2,9
20092b08:	01000104 	movi	r4,4
20092b0c:	20c04036 	bltu	r4,r3,20092c10 <_free_r+0x244>
20092b10:	1006d1ba 	srli	r3,r2,6
20092b14:	19400e04 	addi	r5,r3,56
20092b18:	2947883a 	add	r3,r5,r5
20092b1c:	18c7883a 	add	r3,r3,r3
20092b20:	18c7883a 	add	r3,r3,r3
20092b24:	1a49883a 	add	r4,r3,r9
20092b28:	20c00217 	ldw	r3,8(r4)
20092b2c:	01c00034 	movhi	r7,0
20092b30:	39c48304 	addi	r7,r7,4620
20092b34:	19003b26 	beq	r3,r4,20092c24 <_free_r+0x258>
20092b38:	01ffff04 	movi	r7,-4
20092b3c:	19400117 	ldw	r5,4(r3)
20092b40:	29ca703a 	and	r5,r5,r7
20092b44:	1140022e 	bgeu	r2,r5,20092b50 <_free_r+0x184>
20092b48:	18c00217 	ldw	r3,8(r3)
20092b4c:	20fffb1e 	bne	r4,r3,20092b3c <__flash_rwdata_start+0xffff3d50>
20092b50:	18800317 	ldw	r2,12(r3)
20092b54:	30800315 	stw	r2,12(r6)
20092b58:	30c00215 	stw	r3,8(r6)
20092b5c:	11800215 	stw	r6,8(r2)
20092b60:	19800315 	stw	r6,12(r3)
20092b64:	003fe006 	br	20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092b68:	2100004c 	andi	r4,r4,1
20092b6c:	1885883a 	add	r2,r3,r2
20092b70:	2000071e 	bne	r4,zero,20092b90 <_free_r+0x1c4>
20092b74:	817ffe17 	ldw	r5,-8(r16)
20092b78:	314dc83a 	sub	r6,r6,r5
20092b7c:	30c00317 	ldw	r3,12(r6)
20092b80:	31000217 	ldw	r4,8(r6)
20092b84:	1145883a 	add	r2,r2,r5
20092b88:	20c00315 	stw	r3,12(r4)
20092b8c:	19000215 	stw	r4,8(r3)
20092b90:	10c00054 	ori	r3,r2,1
20092b94:	30c00115 	stw	r3,4(r6)
20092b98:	00c00034 	movhi	r3,0
20092b9c:	18ca7304 	addi	r3,r3,10700
20092ba0:	18c00017 	ldw	r3,0(r3)
20092ba4:	49800215 	stw	r6,8(r9)
20092ba8:	10ffcf36 	bltu	r2,r3,20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092bac:	00800034 	movhi	r2,0
20092bb0:	108a9304 	addi	r2,r2,10828
20092bb4:	11400017 	ldw	r5,0(r2)
20092bb8:	8809883a 	mov	r4,r17
20092bbc:	00928a80 	call	200928a8 <_malloc_trim_r>
20092bc0:	003fc906 	br	20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092bc4:	28c9883a 	add	r4,r5,r3
20092bc8:	21000117 	ldw	r4,4(r4)
20092bcc:	2100004c 	andi	r4,r4,1
20092bd0:	20000a1e 	bne	r4,zero,20092bfc <_free_r+0x230>
20092bd4:	29000317 	ldw	r4,12(r5)
20092bd8:	29400217 	ldw	r5,8(r5)
20092bdc:	10c5883a 	add	r2,r2,r3
20092be0:	10c00054 	ori	r3,r2,1
20092be4:	29000315 	stw	r4,12(r5)
20092be8:	21400215 	stw	r5,8(r4)
20092bec:	30c00115 	stw	r3,4(r6)
20092bf0:	308d883a 	add	r6,r6,r2
20092bf4:	30800015 	stw	r2,0(r6)
20092bf8:	003fbb06 	br	20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092bfc:	10c00054 	ori	r3,r2,1
20092c00:	30c00115 	stw	r3,4(r6)
20092c04:	308d883a 	add	r6,r6,r2
20092c08:	30800015 	stw	r2,0(r6)
20092c0c:	003fb606 	br	20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092c10:	01000504 	movi	r4,20
20092c14:	20c01436 	bltu	r4,r3,20092c68 <_free_r+0x29c>
20092c18:	194016c4 	addi	r5,r3,91
20092c1c:	2947883a 	add	r3,r5,r5
20092c20:	003fbe06 	br	20092b1c <__flash_rwdata_start+0xffff3d30>
20092c24:	280bd0ba 	srai	r5,r5,2
20092c28:	00800044 	movi	r2,1
20092c2c:	39000117 	ldw	r4,4(r7)
20092c30:	114a983a 	sll	r5,r2,r5
20092c34:	1805883a 	mov	r2,r3
20092c38:	2908b03a 	or	r4,r5,r4
20092c3c:	39000115 	stw	r4,4(r7)
20092c40:	003fc406 	br	20092b54 <__flash_rwdata_start+0xffff3d68>
20092c44:	49800515 	stw	r6,20(r9)
20092c48:	49800415 	stw	r6,16(r9)
20092c4c:	10c00054 	ori	r3,r2,1
20092c50:	31000315 	stw	r4,12(r6)
20092c54:	31000215 	stw	r4,8(r6)
20092c58:	30c00115 	stw	r3,4(r6)
20092c5c:	308d883a 	add	r6,r6,r2
20092c60:	30800015 	stw	r2,0(r6)
20092c64:	003fa006 	br	20092ae8 <__flash_rwdata_start+0xffff3cfc>
20092c68:	01001504 	movi	r4,84
20092c6c:	20c00436 	bltu	r4,r3,20092c80 <_free_r+0x2b4>
20092c70:	1006d33a 	srli	r3,r2,12
20092c74:	19401b84 	addi	r5,r3,110
20092c78:	2947883a 	add	r3,r5,r5
20092c7c:	003fa706 	br	20092b1c <__flash_rwdata_start+0xffff3d30>
20092c80:	01005504 	movi	r4,340
20092c84:	20c00436 	bltu	r4,r3,20092c98 <_free_r+0x2cc>
20092c88:	1006d3fa 	srli	r3,r2,15
20092c8c:	19401dc4 	addi	r5,r3,119
20092c90:	2947883a 	add	r3,r5,r5
20092c94:	003fa106 	br	20092b1c <__flash_rwdata_start+0xffff3d30>
20092c98:	01015504 	movi	r4,1364
20092c9c:	20c00436 	bltu	r4,r3,20092cb0 <_free_r+0x2e4>
20092ca0:	1006d4ba 	srli	r3,r2,18
20092ca4:	19401f04 	addi	r5,r3,124
20092ca8:	2947883a 	add	r3,r5,r5
20092cac:	003f9b06 	br	20092b1c <__flash_rwdata_start+0xffff3d30>
20092cb0:	00c03f04 	movi	r3,252
20092cb4:	01401f84 	movi	r5,126
20092cb8:	003f9806 	br	20092b1c <__flash_rwdata_start+0xffff3d30>

20092cbc <__sfvwrite_r>:
20092cbc:	30800217 	ldw	r2,8(r6)
20092cc0:	10006726 	beq	r2,zero,20092e60 <__sfvwrite_r+0x1a4>
20092cc4:	defff404 	addi	sp,sp,-48
20092cc8:	dd000615 	stw	r20,24(sp)
20092ccc:	2029883a 	mov	r20,r4
20092cd0:	2900030b 	ldhu	r4,12(r5)
20092cd4:	ddc00915 	stw	r23,36(sp)
20092cd8:	dc000215 	stw	r16,8(sp)
20092cdc:	dfc00b15 	stw	ra,44(sp)
20092ce0:	df000a15 	stw	fp,40(sp)
20092ce4:	dd800815 	stw	r22,32(sp)
20092ce8:	dd400715 	stw	r21,28(sp)
20092cec:	dcc00515 	stw	r19,20(sp)
20092cf0:	dc800415 	stw	r18,16(sp)
20092cf4:	dc400315 	stw	r17,12(sp)
20092cf8:	2080020c 	andi	r2,r4,8
20092cfc:	2821883a 	mov	r16,r5
20092d00:	302f883a 	mov	r23,r6
20092d04:	10002726 	beq	r2,zero,20092da4 <__sfvwrite_r+0xe8>
20092d08:	28800417 	ldw	r2,16(r5)
20092d0c:	10002526 	beq	r2,zero,20092da4 <__sfvwrite_r+0xe8>
20092d10:	2080008c 	andi	r2,r4,2
20092d14:	bc400017 	ldw	r17,0(r23)
20092d18:	10002a26 	beq	r2,zero,20092dc4 <__sfvwrite_r+0x108>
20092d1c:	05600034 	movhi	r21,32768
20092d20:	0027883a 	mov	r19,zero
20092d24:	0025883a 	mov	r18,zero
20092d28:	ad7f0004 	addi	r21,r21,-1024
20092d2c:	980d883a 	mov	r6,r19
20092d30:	a009883a 	mov	r4,r20
20092d34:	90004626 	beq	r18,zero,20092e50 <__sfvwrite_r+0x194>
20092d38:	900f883a 	mov	r7,r18
20092d3c:	81400717 	ldw	r5,28(r16)
20092d40:	ac80022e 	bgeu	r21,r18,20092d4c <__sfvwrite_r+0x90>
20092d44:	01e00034 	movhi	r7,32768
20092d48:	39ff0004 	addi	r7,r7,-1024
20092d4c:	80800917 	ldw	r2,36(r16)
20092d50:	103ee83a 	callr	r2
20092d54:	0080520e 	bge	zero,r2,20092ea0 <__sfvwrite_r+0x1e4>
20092d58:	b8c00217 	ldw	r3,8(r23)
20092d5c:	98a7883a 	add	r19,r19,r2
20092d60:	90a5c83a 	sub	r18,r18,r2
20092d64:	1885c83a 	sub	r2,r3,r2
20092d68:	b8800215 	stw	r2,8(r23)
20092d6c:	103fef1e 	bne	r2,zero,20092d2c <__flash_rwdata_start+0xffff3f40>
20092d70:	0005883a 	mov	r2,zero
20092d74:	dfc00b17 	ldw	ra,44(sp)
20092d78:	df000a17 	ldw	fp,40(sp)
20092d7c:	ddc00917 	ldw	r23,36(sp)
20092d80:	dd800817 	ldw	r22,32(sp)
20092d84:	dd400717 	ldw	r21,28(sp)
20092d88:	dd000617 	ldw	r20,24(sp)
20092d8c:	dcc00517 	ldw	r19,20(sp)
20092d90:	dc800417 	ldw	r18,16(sp)
20092d94:	dc400317 	ldw	r17,12(sp)
20092d98:	dc000217 	ldw	r16,8(sp)
20092d9c:	dec00c04 	addi	sp,sp,48
20092da0:	f800283a 	ret
20092da4:	a009883a 	mov	r4,r20
20092da8:	800b883a 	mov	r5,r16
20092dac:	00906640 	call	20090664 <__swsetup_r>
20092db0:	1000ec1e 	bne	r2,zero,20093164 <__sfvwrite_r+0x4a8>
20092db4:	8100030b 	ldhu	r4,12(r16)
20092db8:	bc400017 	ldw	r17,0(r23)
20092dbc:	2080008c 	andi	r2,r4,2
20092dc0:	103fd61e 	bne	r2,zero,20092d1c <__flash_rwdata_start+0xffff3f30>
20092dc4:	2080004c 	andi	r2,r4,1
20092dc8:	10003a1e 	bne	r2,zero,20092eb4 <__sfvwrite_r+0x1f8>
20092dcc:	0039883a 	mov	fp,zero
20092dd0:	0025883a 	mov	r18,zero
20092dd4:	90001a26 	beq	r18,zero,20092e40 <__sfvwrite_r+0x184>
20092dd8:	2080800c 	andi	r2,r4,512
20092ddc:	85800217 	ldw	r22,8(r16)
20092de0:	10007626 	beq	r2,zero,20092fbc <__sfvwrite_r+0x300>
20092de4:	b027883a 	mov	r19,r22
20092de8:	95809436 	bltu	r18,r22,2009303c <__sfvwrite_r+0x380>
20092dec:	2081200c 	andi	r2,r4,1152
20092df0:	10009f1e 	bne	r2,zero,20093070 <__sfvwrite_r+0x3b4>
20092df4:	81000017 	ldw	r4,0(r16)
20092df8:	e00b883a 	mov	r5,fp
20092dfc:	980d883a 	mov	r6,r19
20092e00:	00936840 	call	20093684 <memmove>
20092e04:	81000217 	ldw	r4,8(r16)
20092e08:	81400017 	ldw	r5,0(r16)
20092e0c:	9005883a 	mov	r2,r18
20092e10:	2587c83a 	sub	r3,r4,r22
20092e14:	2ce7883a 	add	r19,r5,r19
20092e18:	80c00215 	stw	r3,8(r16)
20092e1c:	84c00015 	stw	r19,0(r16)
20092e20:	b8c00217 	ldw	r3,8(r23)
20092e24:	e0b9883a 	add	fp,fp,r2
20092e28:	90a5c83a 	sub	r18,r18,r2
20092e2c:	1885c83a 	sub	r2,r3,r2
20092e30:	b8800215 	stw	r2,8(r23)
20092e34:	103fce26 	beq	r2,zero,20092d70 <__flash_rwdata_start+0xffff3f84>
20092e38:	8100030b 	ldhu	r4,12(r16)
20092e3c:	903fe61e 	bne	r18,zero,20092dd8 <__flash_rwdata_start+0xffff3fec>
20092e40:	8f000017 	ldw	fp,0(r17)
20092e44:	8c800117 	ldw	r18,4(r17)
20092e48:	8c400204 	addi	r17,r17,8
20092e4c:	003fe106 	br	20092dd4 <__flash_rwdata_start+0xffff3fe8>
20092e50:	8cc00017 	ldw	r19,0(r17)
20092e54:	8c800117 	ldw	r18,4(r17)
20092e58:	8c400204 	addi	r17,r17,8
20092e5c:	003fb306 	br	20092d2c <__flash_rwdata_start+0xffff3f40>
20092e60:	0005883a 	mov	r2,zero
20092e64:	f800283a 	ret
20092e68:	00a00034 	movhi	r2,32768
20092e6c:	10bfffc4 	addi	r2,r2,-1
20092e70:	9009883a 	mov	r4,r18
20092e74:	1480012e 	bgeu	r2,r18,20092e7c <__sfvwrite_r+0x1c0>
20092e78:	1009883a 	mov	r4,r2
20092e7c:	980b883a 	mov	r5,r19
20092e80:	0088b400 	call	20088b40 <__divsi3>
20092e84:	81400717 	ldw	r5,28(r16)
20092e88:	80c00917 	ldw	r3,36(r16)
20092e8c:	988f383a 	mul	r7,r19,r2
20092e90:	a009883a 	mov	r4,r20
20092e94:	e00d883a 	mov	r6,fp
20092e98:	183ee83a 	callr	r3
20092e9c:	00bfe016 	blt	zero,r2,20092e20 <__flash_rwdata_start+0xffff4034>
20092ea0:	8080030b 	ldhu	r2,12(r16)
20092ea4:	10801014 	ori	r2,r2,64
20092ea8:	8080030d 	sth	r2,12(r16)
20092eac:	00bfffc4 	movi	r2,-1
20092eb0:	003fb006 	br	20092d74 <__flash_rwdata_start+0xffff3f88>
20092eb4:	0027883a 	mov	r19,zero
20092eb8:	0011883a 	mov	r8,zero
20092ebc:	0039883a 	mov	fp,zero
20092ec0:	0025883a 	mov	r18,zero
20092ec4:	90001f26 	beq	r18,zero,20092f44 <__sfvwrite_r+0x288>
20092ec8:	40006026 	beq	r8,zero,2009304c <__sfvwrite_r+0x390>
20092ecc:	982b883a 	mov	r21,r19
20092ed0:	94c0012e 	bgeu	r18,r19,20092ed8 <__sfvwrite_r+0x21c>
20092ed4:	902b883a 	mov	r21,r18
20092ed8:	81000017 	ldw	r4,0(r16)
20092edc:	80800417 	ldw	r2,16(r16)
20092ee0:	a82d883a 	mov	r22,r21
20092ee4:	81800217 	ldw	r6,8(r16)
20092ee8:	81c00517 	ldw	r7,20(r16)
20092eec:	1100022e 	bgeu	r2,r4,20092ef8 <__sfvwrite_r+0x23c>
20092ef0:	31c7883a 	add	r3,r6,r7
20092ef4:	1d401816 	blt	r3,r21,20092f58 <__sfvwrite_r+0x29c>
20092ef8:	a9c04416 	blt	r21,r7,2009300c <__sfvwrite_r+0x350>
20092efc:	80800917 	ldw	r2,36(r16)
20092f00:	81400717 	ldw	r5,28(r16)
20092f04:	a009883a 	mov	r4,r20
20092f08:	da000115 	stw	r8,4(sp)
20092f0c:	e00d883a 	mov	r6,fp
20092f10:	103ee83a 	callr	r2
20092f14:	102d883a 	mov	r22,r2
20092f18:	da000117 	ldw	r8,4(sp)
20092f1c:	00bfe00e 	bge	zero,r2,20092ea0 <__flash_rwdata_start+0xffff40b4>
20092f20:	9da7c83a 	sub	r19,r19,r22
20092f24:	98001f26 	beq	r19,zero,20092fa4 <__sfvwrite_r+0x2e8>
20092f28:	b8800217 	ldw	r2,8(r23)
20092f2c:	e5b9883a 	add	fp,fp,r22
20092f30:	95a5c83a 	sub	r18,r18,r22
20092f34:	15adc83a 	sub	r22,r2,r22
20092f38:	bd800215 	stw	r22,8(r23)
20092f3c:	b03f8c26 	beq	r22,zero,20092d70 <__flash_rwdata_start+0xffff3f84>
20092f40:	903fe11e 	bne	r18,zero,20092ec8 <__flash_rwdata_start+0xffff40dc>
20092f44:	8f000017 	ldw	fp,0(r17)
20092f48:	8c800117 	ldw	r18,4(r17)
20092f4c:	0011883a 	mov	r8,zero
20092f50:	8c400204 	addi	r17,r17,8
20092f54:	003fdb06 	br	20092ec4 <__flash_rwdata_start+0xffff40d8>
20092f58:	180d883a 	mov	r6,r3
20092f5c:	e00b883a 	mov	r5,fp
20092f60:	da000115 	stw	r8,4(sp)
20092f64:	d8c00015 	stw	r3,0(sp)
20092f68:	00936840 	call	20093684 <memmove>
20092f6c:	d8c00017 	ldw	r3,0(sp)
20092f70:	80800017 	ldw	r2,0(r16)
20092f74:	a009883a 	mov	r4,r20
20092f78:	800b883a 	mov	r5,r16
20092f7c:	10c5883a 	add	r2,r2,r3
20092f80:	80800015 	stw	r2,0(r16)
20092f84:	d8c00015 	stw	r3,0(sp)
20092f88:	009247c0 	call	2009247c <_fflush_r>
20092f8c:	d8c00017 	ldw	r3,0(sp)
20092f90:	da000117 	ldw	r8,4(sp)
20092f94:	103fc21e 	bne	r2,zero,20092ea0 <__flash_rwdata_start+0xffff40b4>
20092f98:	182d883a 	mov	r22,r3
20092f9c:	9da7c83a 	sub	r19,r19,r22
20092fa0:	983fe11e 	bne	r19,zero,20092f28 <__flash_rwdata_start+0xffff413c>
20092fa4:	a009883a 	mov	r4,r20
20092fa8:	800b883a 	mov	r5,r16
20092fac:	009247c0 	call	2009247c <_fflush_r>
20092fb0:	103fbb1e 	bne	r2,zero,20092ea0 <__flash_rwdata_start+0xffff40b4>
20092fb4:	0011883a 	mov	r8,zero
20092fb8:	003fdb06 	br	20092f28 <__flash_rwdata_start+0xffff413c>
20092fbc:	81000017 	ldw	r4,0(r16)
20092fc0:	80800417 	ldw	r2,16(r16)
20092fc4:	11000236 	bltu	r2,r4,20092fd0 <__sfvwrite_r+0x314>
20092fc8:	84c00517 	ldw	r19,20(r16)
20092fcc:	94ffa62e 	bgeu	r18,r19,20092e68 <__flash_rwdata_start+0xffff407c>
20092fd0:	9027883a 	mov	r19,r18
20092fd4:	b480012e 	bgeu	r22,r18,20092fdc <__sfvwrite_r+0x320>
20092fd8:	b027883a 	mov	r19,r22
20092fdc:	e00b883a 	mov	r5,fp
20092fe0:	980d883a 	mov	r6,r19
20092fe4:	00936840 	call	20093684 <memmove>
20092fe8:	80800217 	ldw	r2,8(r16)
20092fec:	80c00017 	ldw	r3,0(r16)
20092ff0:	14c5c83a 	sub	r2,r2,r19
20092ff4:	1cc7883a 	add	r3,r3,r19
20092ff8:	80800215 	stw	r2,8(r16)
20092ffc:	80c00015 	stw	r3,0(r16)
20093000:	10004326 	beq	r2,zero,20093110 <__sfvwrite_r+0x454>
20093004:	9805883a 	mov	r2,r19
20093008:	003f8506 	br	20092e20 <__flash_rwdata_start+0xffff4034>
2009300c:	a80d883a 	mov	r6,r21
20093010:	e00b883a 	mov	r5,fp
20093014:	da000115 	stw	r8,4(sp)
20093018:	00936840 	call	20093684 <memmove>
2009301c:	80800217 	ldw	r2,8(r16)
20093020:	80c00017 	ldw	r3,0(r16)
20093024:	da000117 	ldw	r8,4(sp)
20093028:	1545c83a 	sub	r2,r2,r21
2009302c:	1d6b883a 	add	r21,r3,r21
20093030:	80800215 	stw	r2,8(r16)
20093034:	85400015 	stw	r21,0(r16)
20093038:	003fb906 	br	20092f20 <__flash_rwdata_start+0xffff4134>
2009303c:	81000017 	ldw	r4,0(r16)
20093040:	902d883a 	mov	r22,r18
20093044:	9027883a 	mov	r19,r18
20093048:	003f6b06 	br	20092df8 <__flash_rwdata_start+0xffff400c>
2009304c:	e009883a 	mov	r4,fp
20093050:	01400284 	movi	r5,10
20093054:	900d883a 	mov	r6,r18
20093058:	009359c0 	call	2009359c <memchr>
2009305c:	10003e26 	beq	r2,zero,20093158 <__sfvwrite_r+0x49c>
20093060:	10800044 	addi	r2,r2,1
20093064:	1727c83a 	sub	r19,r2,fp
20093068:	02000044 	movi	r8,1
2009306c:	003f9706 	br	20092ecc <__flash_rwdata_start+0xffff40e0>
20093070:	80800517 	ldw	r2,20(r16)
20093074:	81400417 	ldw	r5,16(r16)
20093078:	80c00017 	ldw	r3,0(r16)
2009307c:	10a7883a 	add	r19,r2,r2
20093080:	9885883a 	add	r2,r19,r2
20093084:	1026d7fa 	srli	r19,r2,31
20093088:	196bc83a 	sub	r21,r3,r5
2009308c:	a9800044 	addi	r6,r21,1
20093090:	9885883a 	add	r2,r19,r2
20093094:	1027d07a 	srai	r19,r2,1
20093098:	3485883a 	add	r2,r6,r18
2009309c:	980d883a 	mov	r6,r19
200930a0:	9880022e 	bgeu	r19,r2,200930ac <__sfvwrite_r+0x3f0>
200930a4:	1027883a 	mov	r19,r2
200930a8:	100d883a 	mov	r6,r2
200930ac:	2101000c 	andi	r4,r4,1024
200930b0:	20001c26 	beq	r4,zero,20093124 <__sfvwrite_r+0x468>
200930b4:	a009883a 	mov	r4,r20
200930b8:	300b883a 	mov	r5,r6
200930bc:	008b6f40 	call	2008b6f4 <_malloc_r>
200930c0:	102d883a 	mov	r22,r2
200930c4:	10002926 	beq	r2,zero,2009316c <__sfvwrite_r+0x4b0>
200930c8:	81400417 	ldw	r5,16(r16)
200930cc:	1009883a 	mov	r4,r2
200930d0:	a80d883a 	mov	r6,r21
200930d4:	008bf180 	call	2008bf18 <memcpy>
200930d8:	8080030b 	ldhu	r2,12(r16)
200930dc:	00fedfc4 	movi	r3,-1153
200930e0:	10c4703a 	and	r2,r2,r3
200930e4:	10802014 	ori	r2,r2,128
200930e8:	8080030d 	sth	r2,12(r16)
200930ec:	b549883a 	add	r4,r22,r21
200930f0:	9d4bc83a 	sub	r5,r19,r21
200930f4:	85800415 	stw	r22,16(r16)
200930f8:	84c00515 	stw	r19,20(r16)
200930fc:	81000015 	stw	r4,0(r16)
20093100:	902d883a 	mov	r22,r18
20093104:	81400215 	stw	r5,8(r16)
20093108:	9027883a 	mov	r19,r18
2009310c:	003f3a06 	br	20092df8 <__flash_rwdata_start+0xffff400c>
20093110:	a009883a 	mov	r4,r20
20093114:	800b883a 	mov	r5,r16
20093118:	009247c0 	call	2009247c <_fflush_r>
2009311c:	103fb926 	beq	r2,zero,20093004 <__flash_rwdata_start+0xffff4218>
20093120:	003f5f06 	br	20092ea0 <__flash_rwdata_start+0xffff40b4>
20093124:	a009883a 	mov	r4,r20
20093128:	00948ec0 	call	200948ec <_realloc_r>
2009312c:	102d883a 	mov	r22,r2
20093130:	103fee1e 	bne	r2,zero,200930ec <__flash_rwdata_start+0xffff4300>
20093134:	81400417 	ldw	r5,16(r16)
20093138:	a009883a 	mov	r4,r20
2009313c:	00929cc0 	call	200929cc <_free_r>
20093140:	8080030b 	ldhu	r2,12(r16)
20093144:	00ffdfc4 	movi	r3,-129
20093148:	1884703a 	and	r2,r3,r2
2009314c:	00c00304 	movi	r3,12
20093150:	a0c00015 	stw	r3,0(r20)
20093154:	003f5306 	br	20092ea4 <__flash_rwdata_start+0xffff40b8>
20093158:	94c00044 	addi	r19,r18,1
2009315c:	02000044 	movi	r8,1
20093160:	003f5a06 	br	20092ecc <__flash_rwdata_start+0xffff40e0>
20093164:	00bfffc4 	movi	r2,-1
20093168:	003f0206 	br	20092d74 <__flash_rwdata_start+0xffff3f88>
2009316c:	00800304 	movi	r2,12
20093170:	a0800015 	stw	r2,0(r20)
20093174:	8080030b 	ldhu	r2,12(r16)
20093178:	003f4a06 	br	20092ea4 <__flash_rwdata_start+0xffff40b8>

2009317c <_fwalk>:
2009317c:	defff704 	addi	sp,sp,-36
20093180:	dd000415 	stw	r20,16(sp)
20093184:	dfc00815 	stw	ra,32(sp)
20093188:	ddc00715 	stw	r23,28(sp)
2009318c:	dd800615 	stw	r22,24(sp)
20093190:	dd400515 	stw	r21,20(sp)
20093194:	dcc00315 	stw	r19,12(sp)
20093198:	dc800215 	stw	r18,8(sp)
2009319c:	dc400115 	stw	r17,4(sp)
200931a0:	dc000015 	stw	r16,0(sp)
200931a4:	2500b804 	addi	r20,r4,736
200931a8:	a0002326 	beq	r20,zero,20093238 <_fwalk+0xbc>
200931ac:	282b883a 	mov	r21,r5
200931b0:	002f883a 	mov	r23,zero
200931b4:	05800044 	movi	r22,1
200931b8:	04ffffc4 	movi	r19,-1
200931bc:	a4400117 	ldw	r17,4(r20)
200931c0:	a4800217 	ldw	r18,8(r20)
200931c4:	8c7fffc4 	addi	r17,r17,-1
200931c8:	88000d16 	blt	r17,zero,20093200 <_fwalk+0x84>
200931cc:	94000304 	addi	r16,r18,12
200931d0:	94800384 	addi	r18,r18,14
200931d4:	80c0000b 	ldhu	r3,0(r16)
200931d8:	8c7fffc4 	addi	r17,r17,-1
200931dc:	813ffd04 	addi	r4,r16,-12
200931e0:	b0c0042e 	bgeu	r22,r3,200931f4 <_fwalk+0x78>
200931e4:	90c0000f 	ldh	r3,0(r18)
200931e8:	1cc00226 	beq	r3,r19,200931f4 <_fwalk+0x78>
200931ec:	a83ee83a 	callr	r21
200931f0:	b8aeb03a 	or	r23,r23,r2
200931f4:	84001a04 	addi	r16,r16,104
200931f8:	94801a04 	addi	r18,r18,104
200931fc:	8cfff51e 	bne	r17,r19,200931d4 <__flash_rwdata_start+0xffff43e8>
20093200:	a5000017 	ldw	r20,0(r20)
20093204:	a03fed1e 	bne	r20,zero,200931bc <__flash_rwdata_start+0xffff43d0>
20093208:	b805883a 	mov	r2,r23
2009320c:	dfc00817 	ldw	ra,32(sp)
20093210:	ddc00717 	ldw	r23,28(sp)
20093214:	dd800617 	ldw	r22,24(sp)
20093218:	dd400517 	ldw	r21,20(sp)
2009321c:	dd000417 	ldw	r20,16(sp)
20093220:	dcc00317 	ldw	r19,12(sp)
20093224:	dc800217 	ldw	r18,8(sp)
20093228:	dc400117 	ldw	r17,4(sp)
2009322c:	dc000017 	ldw	r16,0(sp)
20093230:	dec00904 	addi	sp,sp,36
20093234:	f800283a 	ret
20093238:	002f883a 	mov	r23,zero
2009323c:	003ff206 	br	20093208 <__flash_rwdata_start+0xffff441c>

20093240 <_fwalk_reent>:
20093240:	defff704 	addi	sp,sp,-36
20093244:	dd400515 	stw	r21,20(sp)
20093248:	dfc00815 	stw	ra,32(sp)
2009324c:	ddc00715 	stw	r23,28(sp)
20093250:	dd800615 	stw	r22,24(sp)
20093254:	dd000415 	stw	r20,16(sp)
20093258:	dcc00315 	stw	r19,12(sp)
2009325c:	dc800215 	stw	r18,8(sp)
20093260:	dc400115 	stw	r17,4(sp)
20093264:	dc000015 	stw	r16,0(sp)
20093268:	2540b804 	addi	r21,r4,736
2009326c:	a8002326 	beq	r21,zero,200932fc <_fwalk_reent+0xbc>
20093270:	2829883a 	mov	r20,r5
20093274:	202d883a 	mov	r22,r4
20093278:	002f883a 	mov	r23,zero
2009327c:	04c00044 	movi	r19,1
20093280:	04bfffc4 	movi	r18,-1
20093284:	ac400117 	ldw	r17,4(r21)
20093288:	ac000217 	ldw	r16,8(r21)
2009328c:	8c7fffc4 	addi	r17,r17,-1
20093290:	88000c16 	blt	r17,zero,200932c4 <_fwalk_reent+0x84>
20093294:	84000304 	addi	r16,r16,12
20093298:	80c0000b 	ldhu	r3,0(r16)
2009329c:	8c7fffc4 	addi	r17,r17,-1
200932a0:	817ffd04 	addi	r5,r16,-12
200932a4:	98c0052e 	bgeu	r19,r3,200932bc <_fwalk_reent+0x7c>
200932a8:	80c0008f 	ldh	r3,2(r16)
200932ac:	b009883a 	mov	r4,r22
200932b0:	1c800226 	beq	r3,r18,200932bc <_fwalk_reent+0x7c>
200932b4:	a03ee83a 	callr	r20
200932b8:	b8aeb03a 	or	r23,r23,r2
200932bc:	84001a04 	addi	r16,r16,104
200932c0:	8cbff51e 	bne	r17,r18,20093298 <__flash_rwdata_start+0xffff44ac>
200932c4:	ad400017 	ldw	r21,0(r21)
200932c8:	a83fee1e 	bne	r21,zero,20093284 <__flash_rwdata_start+0xffff4498>
200932cc:	b805883a 	mov	r2,r23
200932d0:	dfc00817 	ldw	ra,32(sp)
200932d4:	ddc00717 	ldw	r23,28(sp)
200932d8:	dd800617 	ldw	r22,24(sp)
200932dc:	dd400517 	ldw	r21,20(sp)
200932e0:	dd000417 	ldw	r20,16(sp)
200932e4:	dcc00317 	ldw	r19,12(sp)
200932e8:	dc800217 	ldw	r18,8(sp)
200932ec:	dc400117 	ldw	r17,4(sp)
200932f0:	dc000017 	ldw	r16,0(sp)
200932f4:	dec00904 	addi	sp,sp,36
200932f8:	f800283a 	ret
200932fc:	002f883a 	mov	r23,zero
20093300:	003ff206 	br	200932cc <__flash_rwdata_start+0xffff44e0>

20093304 <_setlocale_r>:
20093304:	30001b26 	beq	r6,zero,20093374 <_setlocale_r+0x70>
20093308:	01400034 	movhi	r5,0
2009330c:	defffe04 	addi	sp,sp,-8
20093310:	29420104 	addi	r5,r5,2052
20093314:	3009883a 	mov	r4,r6
20093318:	dc000015 	stw	r16,0(sp)
2009331c:	dfc00115 	stw	ra,4(sp)
20093320:	3021883a 	mov	r16,r6
20093324:	008c3d00 	call	2008c3d0 <strcmp>
20093328:	1000061e 	bne	r2,zero,20093344 <_setlocale_r+0x40>
2009332c:	00800034 	movhi	r2,0
20093330:	1081da04 	addi	r2,r2,1896
20093334:	dfc00117 	ldw	ra,4(sp)
20093338:	dc000017 	ldw	r16,0(sp)
2009333c:	dec00204 	addi	sp,sp,8
20093340:	f800283a 	ret
20093344:	01400034 	movhi	r5,0
20093348:	2941da04 	addi	r5,r5,1896
2009334c:	8009883a 	mov	r4,r16
20093350:	008c3d00 	call	2008c3d0 <strcmp>
20093354:	103ff526 	beq	r2,zero,2009332c <__flash_rwdata_start+0xffff4540>
20093358:	01400034 	movhi	r5,0
2009335c:	2941e404 	addi	r5,r5,1936
20093360:	8009883a 	mov	r4,r16
20093364:	008c3d00 	call	2008c3d0 <strcmp>
20093368:	103ff026 	beq	r2,zero,2009332c <__flash_rwdata_start+0xffff4540>
2009336c:	0005883a 	mov	r2,zero
20093370:	003ff006 	br	20093334 <__flash_rwdata_start+0xffff4548>
20093374:	00800034 	movhi	r2,0
20093378:	1081da04 	addi	r2,r2,1896
2009337c:	f800283a 	ret

20093380 <__locale_charset>:
20093380:	00800034 	movhi	r2,0
20093384:	10858d04 	addi	r2,r2,5684
20093388:	f800283a 	ret

2009338c <__locale_mb_cur_max>:
2009338c:	00800034 	movhi	r2,0
20093390:	108a7404 	addi	r2,r2,10704
20093394:	10800017 	ldw	r2,0(r2)
20093398:	f800283a 	ret

2009339c <__locale_msgcharset>:
2009339c:	00800034 	movhi	r2,0
200933a0:	10858504 	addi	r2,r2,5652
200933a4:	f800283a 	ret

200933a8 <__locale_cjk_lang>:
200933a8:	0005883a 	mov	r2,zero
200933ac:	f800283a 	ret

200933b0 <_localeconv_r>:
200933b0:	00800034 	movhi	r2,0
200933b4:	10859504 	addi	r2,r2,5716
200933b8:	f800283a 	ret

200933bc <setlocale>:
200933bc:	00c00034 	movhi	r3,0
200933c0:	18ca7104 	addi	r3,r3,10692
200933c4:	2005883a 	mov	r2,r4
200933c8:	19000017 	ldw	r4,0(r3)
200933cc:	280d883a 	mov	r6,r5
200933d0:	100b883a 	mov	r5,r2
200933d4:	00933041 	jmpi	20093304 <_setlocale_r>

200933d8 <localeconv>:
200933d8:	00800034 	movhi	r2,0
200933dc:	10859504 	addi	r2,r2,5716
200933e0:	f800283a 	ret

200933e4 <__smakebuf_r>:
200933e4:	2880030b 	ldhu	r2,12(r5)
200933e8:	10c0008c 	andi	r3,r2,2
200933ec:	1800401e 	bne	r3,zero,200934f0 <__smakebuf_r+0x10c>
200933f0:	deffec04 	addi	sp,sp,-80
200933f4:	dc000f15 	stw	r16,60(sp)
200933f8:	2821883a 	mov	r16,r5
200933fc:	2940038f 	ldh	r5,14(r5)
20093400:	dc401015 	stw	r17,64(sp)
20093404:	dfc01315 	stw	ra,76(sp)
20093408:	dcc01215 	stw	r19,72(sp)
2009340c:	dc801115 	stw	r18,68(sp)
20093410:	2023883a 	mov	r17,r4
20093414:	28001b16 	blt	r5,zero,20093484 <__smakebuf_r+0xa0>
20093418:	d80d883a 	mov	r6,sp
2009341c:	0097ddc0 	call	20097ddc <_fstat_r>
20093420:	10001716 	blt	r2,zero,20093480 <__smakebuf_r+0x9c>
20093424:	d8800117 	ldw	r2,4(sp)
20093428:	00e00014 	movui	r3,32768
2009342c:	10bc000c 	andi	r2,r2,61440
20093430:	10c03726 	beq	r2,r3,20093510 <__smakebuf_r+0x12c>
20093434:	80c0030b 	ldhu	r3,12(r16)
20093438:	18c20014 	ori	r3,r3,2048
2009343c:	80c0030d 	sth	r3,12(r16)
20093440:	00c80004 	movi	r3,8192
20093444:	10c03c1e 	bne	r2,r3,20093538 <__smakebuf_r+0x154>
20093448:	8140038f 	ldh	r5,14(r16)
2009344c:	8809883a 	mov	r4,r17
20093450:	0097e340 	call	20097e34 <_isatty_r>
20093454:	10004e26 	beq	r2,zero,20093590 <__smakebuf_r+0x1ac>
20093458:	8080030b 	ldhu	r2,12(r16)
2009345c:	04c00044 	movi	r19,1
20093460:	80c010c4 	addi	r3,r16,67
20093464:	14c4b03a 	or	r2,r2,r19
20093468:	8080030d 	sth	r2,12(r16)
2009346c:	80c00015 	stw	r3,0(r16)
20093470:	80c00415 	stw	r3,16(r16)
20093474:	84c00515 	stw	r19,20(r16)
20093478:	04810004 	movi	r18,1024
2009347c:	00000706 	br	2009349c <__smakebuf_r+0xb8>
20093480:	8080030b 	ldhu	r2,12(r16)
20093484:	10c0200c 	andi	r3,r2,128
20093488:	18001f1e 	bne	r3,zero,20093508 <__smakebuf_r+0x124>
2009348c:	04810004 	movi	r18,1024
20093490:	10820014 	ori	r2,r2,2048
20093494:	8080030d 	sth	r2,12(r16)
20093498:	0027883a 	mov	r19,zero
2009349c:	8809883a 	mov	r4,r17
200934a0:	900b883a 	mov	r5,r18
200934a4:	008b6f40 	call	2008b6f4 <_malloc_r>
200934a8:	10002e26 	beq	r2,zero,20093564 <__smakebuf_r+0x180>
200934ac:	80c0030b 	ldhu	r3,12(r16)
200934b0:	01080274 	movhi	r4,8201
200934b4:	21094604 	addi	r4,r4,9496
200934b8:	89000f15 	stw	r4,60(r17)
200934bc:	18c02014 	ori	r3,r3,128
200934c0:	80c0030d 	sth	r3,12(r16)
200934c4:	80800015 	stw	r2,0(r16)
200934c8:	80800415 	stw	r2,16(r16)
200934cc:	84800515 	stw	r18,20(r16)
200934d0:	98001c1e 	bne	r19,zero,20093544 <__smakebuf_r+0x160>
200934d4:	dfc01317 	ldw	ra,76(sp)
200934d8:	dcc01217 	ldw	r19,72(sp)
200934dc:	dc801117 	ldw	r18,68(sp)
200934e0:	dc401017 	ldw	r17,64(sp)
200934e4:	dc000f17 	ldw	r16,60(sp)
200934e8:	dec01404 	addi	sp,sp,80
200934ec:	f800283a 	ret
200934f0:	288010c4 	addi	r2,r5,67
200934f4:	28800015 	stw	r2,0(r5)
200934f8:	28800415 	stw	r2,16(r5)
200934fc:	00800044 	movi	r2,1
20093500:	28800515 	stw	r2,20(r5)
20093504:	f800283a 	ret
20093508:	04801004 	movi	r18,64
2009350c:	003fe006 	br	20093490 <__flash_rwdata_start+0xffff46a4>
20093510:	81000a17 	ldw	r4,40(r16)
20093514:	00c80274 	movhi	r3,8201
20093518:	18d3e804 	addi	r3,r3,20384
2009351c:	20ffc51e 	bne	r4,r3,20093434 <__flash_rwdata_start+0xffff4648>
20093520:	80c0030b 	ldhu	r3,12(r16)
20093524:	01010004 	movi	r4,1024
20093528:	81001315 	stw	r4,76(r16)
2009352c:	1906b03a 	or	r3,r3,r4
20093530:	80c0030d 	sth	r3,12(r16)
20093534:	003fc206 	br	20093440 <__flash_rwdata_start+0xffff4654>
20093538:	0027883a 	mov	r19,zero
2009353c:	04810004 	movi	r18,1024
20093540:	003fd606 	br	2009349c <__flash_rwdata_start+0xffff46b0>
20093544:	8140038f 	ldh	r5,14(r16)
20093548:	8809883a 	mov	r4,r17
2009354c:	0097e340 	call	20097e34 <_isatty_r>
20093550:	103fe026 	beq	r2,zero,200934d4 <__flash_rwdata_start+0xffff46e8>
20093554:	8080030b 	ldhu	r2,12(r16)
20093558:	10800054 	ori	r2,r2,1
2009355c:	8080030d 	sth	r2,12(r16)
20093560:	003fdc06 	br	200934d4 <__flash_rwdata_start+0xffff46e8>
20093564:	8080030b 	ldhu	r2,12(r16)
20093568:	10c0800c 	andi	r3,r2,512
2009356c:	183fd91e 	bne	r3,zero,200934d4 <__flash_rwdata_start+0xffff46e8>
20093570:	10800094 	ori	r2,r2,2
20093574:	80c010c4 	addi	r3,r16,67
20093578:	8080030d 	sth	r2,12(r16)
2009357c:	00800044 	movi	r2,1
20093580:	80c00015 	stw	r3,0(r16)
20093584:	80c00415 	stw	r3,16(r16)
20093588:	80800515 	stw	r2,20(r16)
2009358c:	003fd106 	br	200934d4 <__flash_rwdata_start+0xffff46e8>
20093590:	04c00044 	movi	r19,1
20093594:	04810004 	movi	r18,1024
20093598:	003fc006 	br	2009349c <__flash_rwdata_start+0xffff46b0>

2009359c <memchr>:
2009359c:	208000cc 	andi	r2,r4,3
200935a0:	280f883a 	mov	r7,r5
200935a4:	10003526 	beq	r2,zero,2009367c <memchr+0xe0>
200935a8:	30bfffc4 	addi	r2,r6,-1
200935ac:	30001b26 	beq	r6,zero,2009361c <memchr+0x80>
200935b0:	21800003 	ldbu	r6,0(r4)
200935b4:	28c03fcc 	andi	r3,r5,255
200935b8:	30c01a26 	beq	r6,r3,20093624 <memchr+0x88>
200935bc:	180d883a 	mov	r6,r3
200935c0:	00000406 	br	200935d4 <memchr+0x38>
200935c4:	10001526 	beq	r2,zero,2009361c <memchr+0x80>
200935c8:	20c00003 	ldbu	r3,0(r4)
200935cc:	10bfffc4 	addi	r2,r2,-1
200935d0:	19801426 	beq	r3,r6,20093624 <memchr+0x88>
200935d4:	21000044 	addi	r4,r4,1
200935d8:	20c000cc 	andi	r3,r4,3
200935dc:	183ff91e 	bne	r3,zero,200935c4 <__flash_rwdata_start+0xffff47d8>
200935e0:	024000c4 	movi	r9,3
200935e4:	48801136 	bltu	r9,r2,2009362c <memchr+0x90>
200935e8:	10000c26 	beq	r2,zero,2009361c <memchr+0x80>
200935ec:	20c00003 	ldbu	r3,0(r4)
200935f0:	29403fcc 	andi	r5,r5,255
200935f4:	19400b26 	beq	r3,r5,20093624 <memchr+0x88>
200935f8:	20c00044 	addi	r3,r4,1
200935fc:	2085883a 	add	r2,r4,r2
20093600:	39803fcc 	andi	r6,r7,255
20093604:	00000306 	br	20093614 <memchr+0x78>
20093608:	18c00044 	addi	r3,r3,1
2009360c:	197fffc3 	ldbu	r5,-1(r3)
20093610:	29800426 	beq	r5,r6,20093624 <memchr+0x88>
20093614:	1809883a 	mov	r4,r3
20093618:	18bffb1e 	bne	r3,r2,20093608 <__flash_rwdata_start+0xffff481c>
2009361c:	0005883a 	mov	r2,zero
20093620:	f800283a 	ret
20093624:	2005883a 	mov	r2,r4
20093628:	f800283a 	ret
2009362c:	28c03fcc 	andi	r3,r5,255
20093630:	1810923a 	slli	r8,r3,8
20093634:	02ffbff4 	movhi	r11,65279
20093638:	02a02074 	movhi	r10,32897
2009363c:	40c6b03a 	or	r3,r8,r3
20093640:	1810943a 	slli	r8,r3,16
20093644:	5affbfc4 	addi	r11,r11,-257
20093648:	52a02004 	addi	r10,r10,-32640
2009364c:	40d0b03a 	or	r8,r8,r3
20093650:	20c00017 	ldw	r3,0(r4)
20093654:	40c6f03a 	xor	r3,r8,r3
20093658:	1acd883a 	add	r6,r3,r11
2009365c:	00c6303a 	nor	r3,zero,r3
20093660:	30c6703a 	and	r3,r6,r3
20093664:	1a86703a 	and	r3,r3,r10
20093668:	183fdf1e 	bne	r3,zero,200935e8 <__flash_rwdata_start+0xffff47fc>
2009366c:	10bfff04 	addi	r2,r2,-4
20093670:	21000104 	addi	r4,r4,4
20093674:	48bff636 	bltu	r9,r2,20093650 <__flash_rwdata_start+0xffff4864>
20093678:	003fdb06 	br	200935e8 <__flash_rwdata_start+0xffff47fc>
2009367c:	3005883a 	mov	r2,r6
20093680:	003fd706 	br	200935e0 <__flash_rwdata_start+0xffff47f4>

20093684 <memmove>:
20093684:	2005883a 	mov	r2,r4
20093688:	29000b2e 	bgeu	r5,r4,200936b8 <memmove+0x34>
2009368c:	298f883a 	add	r7,r5,r6
20093690:	21c0092e 	bgeu	r4,r7,200936b8 <memmove+0x34>
20093694:	2187883a 	add	r3,r4,r6
20093698:	198bc83a 	sub	r5,r3,r6
2009369c:	30004b26 	beq	r6,zero,200937cc <memmove+0x148>
200936a0:	39ffffc4 	addi	r7,r7,-1
200936a4:	39000003 	ldbu	r4,0(r7)
200936a8:	18ffffc4 	addi	r3,r3,-1
200936ac:	19000005 	stb	r4,0(r3)
200936b0:	197ffb1e 	bne	r3,r5,200936a0 <__flash_rwdata_start+0xffff48b4>
200936b4:	f800283a 	ret
200936b8:	00c003c4 	movi	r3,15
200936bc:	1980412e 	bgeu	r3,r6,200937c4 <memmove+0x140>
200936c0:	1146b03a 	or	r3,r2,r5
200936c4:	18c000cc 	andi	r3,r3,3
200936c8:	1800411e 	bne	r3,zero,200937d0 <memmove+0x14c>
200936cc:	33fffc04 	addi	r15,r6,-16
200936d0:	781ed13a 	srli	r15,r15,4
200936d4:	28c00104 	addi	r3,r5,4
200936d8:	13400104 	addi	r13,r2,4
200936dc:	781c913a 	slli	r14,r15,4
200936e0:	2b000204 	addi	r12,r5,8
200936e4:	12c00204 	addi	r11,r2,8
200936e8:	73800504 	addi	r14,r14,20
200936ec:	2a800304 	addi	r10,r5,12
200936f0:	12400304 	addi	r9,r2,12
200936f4:	2b9d883a 	add	r14,r5,r14
200936f8:	2811883a 	mov	r8,r5
200936fc:	100f883a 	mov	r7,r2
20093700:	41000017 	ldw	r4,0(r8)
20093704:	39c00404 	addi	r7,r7,16
20093708:	18c00404 	addi	r3,r3,16
2009370c:	393ffc15 	stw	r4,-16(r7)
20093710:	193ffc17 	ldw	r4,-16(r3)
20093714:	6b400404 	addi	r13,r13,16
20093718:	5ac00404 	addi	r11,r11,16
2009371c:	693ffc15 	stw	r4,-16(r13)
20093720:	61000017 	ldw	r4,0(r12)
20093724:	4a400404 	addi	r9,r9,16
20093728:	42000404 	addi	r8,r8,16
2009372c:	593ffc15 	stw	r4,-16(r11)
20093730:	51000017 	ldw	r4,0(r10)
20093734:	63000404 	addi	r12,r12,16
20093738:	52800404 	addi	r10,r10,16
2009373c:	493ffc15 	stw	r4,-16(r9)
20093740:	1bbfef1e 	bne	r3,r14,20093700 <__flash_rwdata_start+0xffff4914>
20093744:	79000044 	addi	r4,r15,1
20093748:	2008913a 	slli	r4,r4,4
2009374c:	328003cc 	andi	r10,r6,15
20093750:	02c000c4 	movi	r11,3
20093754:	1107883a 	add	r3,r2,r4
20093758:	290b883a 	add	r5,r5,r4
2009375c:	5a801e2e 	bgeu	r11,r10,200937d8 <memmove+0x154>
20093760:	1813883a 	mov	r9,r3
20093764:	2811883a 	mov	r8,r5
20093768:	500f883a 	mov	r7,r10
2009376c:	41000017 	ldw	r4,0(r8)
20093770:	4a400104 	addi	r9,r9,4
20093774:	39ffff04 	addi	r7,r7,-4
20093778:	493fff15 	stw	r4,-4(r9)
2009377c:	42000104 	addi	r8,r8,4
20093780:	59fffa36 	bltu	r11,r7,2009376c <__flash_rwdata_start+0xffff4980>
20093784:	513fff04 	addi	r4,r10,-4
20093788:	2008d0ba 	srli	r4,r4,2
2009378c:	318000cc 	andi	r6,r6,3
20093790:	21000044 	addi	r4,r4,1
20093794:	2109883a 	add	r4,r4,r4
20093798:	2109883a 	add	r4,r4,r4
2009379c:	1907883a 	add	r3,r3,r4
200937a0:	290b883a 	add	r5,r5,r4
200937a4:	30000926 	beq	r6,zero,200937cc <memmove+0x148>
200937a8:	198d883a 	add	r6,r3,r6
200937ac:	29c00003 	ldbu	r7,0(r5)
200937b0:	18c00044 	addi	r3,r3,1
200937b4:	29400044 	addi	r5,r5,1
200937b8:	19ffffc5 	stb	r7,-1(r3)
200937bc:	19bffb1e 	bne	r3,r6,200937ac <__flash_rwdata_start+0xffff49c0>
200937c0:	f800283a 	ret
200937c4:	1007883a 	mov	r3,r2
200937c8:	003ff606 	br	200937a4 <__flash_rwdata_start+0xffff49b8>
200937cc:	f800283a 	ret
200937d0:	1007883a 	mov	r3,r2
200937d4:	003ff406 	br	200937a8 <__flash_rwdata_start+0xffff49bc>
200937d8:	500d883a 	mov	r6,r10
200937dc:	003ff106 	br	200937a4 <__flash_rwdata_start+0xffff49b8>

200937e0 <_Balloc>:
200937e0:	20801317 	ldw	r2,76(r4)
200937e4:	defffc04 	addi	sp,sp,-16
200937e8:	dc400115 	stw	r17,4(sp)
200937ec:	dc000015 	stw	r16,0(sp)
200937f0:	dfc00315 	stw	ra,12(sp)
200937f4:	dc800215 	stw	r18,8(sp)
200937f8:	2023883a 	mov	r17,r4
200937fc:	2821883a 	mov	r16,r5
20093800:	10000f26 	beq	r2,zero,20093840 <_Balloc+0x60>
20093804:	8407883a 	add	r3,r16,r16
20093808:	18c7883a 	add	r3,r3,r3
2009380c:	10c7883a 	add	r3,r2,r3
20093810:	18800017 	ldw	r2,0(r3)
20093814:	10001126 	beq	r2,zero,2009385c <_Balloc+0x7c>
20093818:	11000017 	ldw	r4,0(r2)
2009381c:	19000015 	stw	r4,0(r3)
20093820:	10000415 	stw	zero,16(r2)
20093824:	10000315 	stw	zero,12(r2)
20093828:	dfc00317 	ldw	ra,12(sp)
2009382c:	dc800217 	ldw	r18,8(sp)
20093830:	dc400117 	ldw	r17,4(sp)
20093834:	dc000017 	ldw	r16,0(sp)
20093838:	dec00404 	addi	sp,sp,16
2009383c:	f800283a 	ret
20093840:	01400104 	movi	r5,4
20093844:	01800844 	movi	r6,33
20093848:	0097a340 	call	20097a34 <_calloc_r>
2009384c:	88801315 	stw	r2,76(r17)
20093850:	103fec1e 	bne	r2,zero,20093804 <__flash_rwdata_start+0xffff4a18>
20093854:	0005883a 	mov	r2,zero
20093858:	003ff306 	br	20093828 <__flash_rwdata_start+0xffff4a3c>
2009385c:	01400044 	movi	r5,1
20093860:	2c24983a 	sll	r18,r5,r16
20093864:	8809883a 	mov	r4,r17
20093868:	91800144 	addi	r6,r18,5
2009386c:	318d883a 	add	r6,r6,r6
20093870:	318d883a 	add	r6,r6,r6
20093874:	0097a340 	call	20097a34 <_calloc_r>
20093878:	103ff626 	beq	r2,zero,20093854 <__flash_rwdata_start+0xffff4a68>
2009387c:	14000115 	stw	r16,4(r2)
20093880:	14800215 	stw	r18,8(r2)
20093884:	003fe606 	br	20093820 <__flash_rwdata_start+0xffff4a34>

20093888 <_Bfree>:
20093888:	28000826 	beq	r5,zero,200938ac <_Bfree+0x24>
2009388c:	28c00117 	ldw	r3,4(r5)
20093890:	20801317 	ldw	r2,76(r4)
20093894:	18c7883a 	add	r3,r3,r3
20093898:	18c7883a 	add	r3,r3,r3
2009389c:	10c5883a 	add	r2,r2,r3
200938a0:	10c00017 	ldw	r3,0(r2)
200938a4:	28c00015 	stw	r3,0(r5)
200938a8:	11400015 	stw	r5,0(r2)
200938ac:	f800283a 	ret

200938b0 <__multadd>:
200938b0:	defffa04 	addi	sp,sp,-24
200938b4:	dc000115 	stw	r16,4(sp)
200938b8:	2c000417 	ldw	r16,16(r5)
200938bc:	dc800315 	stw	r18,12(sp)
200938c0:	dc400215 	stw	r17,8(sp)
200938c4:	dfc00515 	stw	ra,20(sp)
200938c8:	dcc00415 	stw	r19,16(sp)
200938cc:	2823883a 	mov	r17,r5
200938d0:	2025883a 	mov	r18,r4
200938d4:	2a400504 	addi	r9,r5,20
200938d8:	0015883a 	mov	r10,zero
200938dc:	4a000017 	ldw	r8,0(r9)
200938e0:	4a400104 	addi	r9,r9,4
200938e4:	52800044 	addi	r10,r10,1
200938e8:	40ffffcc 	andi	r3,r8,65535
200938ec:	1987383a 	mul	r3,r3,r6
200938f0:	4010d43a 	srli	r8,r8,16
200938f4:	19cf883a 	add	r7,r3,r7
200938f8:	4191383a 	mul	r8,r8,r6
200938fc:	3816d43a 	srli	r11,r7,16
20093900:	38ffffcc 	andi	r3,r7,65535
20093904:	5a0f883a 	add	r7,r11,r8
20093908:	3810943a 	slli	r8,r7,16
2009390c:	380ed43a 	srli	r7,r7,16
20093910:	40c7883a 	add	r3,r8,r3
20093914:	48ffff15 	stw	r3,-4(r9)
20093918:	543ff016 	blt	r10,r16,200938dc <__flash_rwdata_start+0xffff4af0>
2009391c:	38000926 	beq	r7,zero,20093944 <__multadd+0x94>
20093920:	88800217 	ldw	r2,8(r17)
20093924:	80800f0e 	bge	r16,r2,20093964 <__multadd+0xb4>
20093928:	80800144 	addi	r2,r16,5
2009392c:	1085883a 	add	r2,r2,r2
20093930:	1085883a 	add	r2,r2,r2
20093934:	8885883a 	add	r2,r17,r2
20093938:	11c00015 	stw	r7,0(r2)
2009393c:	84000044 	addi	r16,r16,1
20093940:	8c000415 	stw	r16,16(r17)
20093944:	8805883a 	mov	r2,r17
20093948:	dfc00517 	ldw	ra,20(sp)
2009394c:	dcc00417 	ldw	r19,16(sp)
20093950:	dc800317 	ldw	r18,12(sp)
20093954:	dc400217 	ldw	r17,8(sp)
20093958:	dc000117 	ldw	r16,4(sp)
2009395c:	dec00604 	addi	sp,sp,24
20093960:	f800283a 	ret
20093964:	89400117 	ldw	r5,4(r17)
20093968:	9009883a 	mov	r4,r18
2009396c:	d9c00015 	stw	r7,0(sp)
20093970:	29400044 	addi	r5,r5,1
20093974:	00937e00 	call	200937e0 <_Balloc>
20093978:	89800417 	ldw	r6,16(r17)
2009397c:	11000304 	addi	r4,r2,12
20093980:	89400304 	addi	r5,r17,12
20093984:	31800084 	addi	r6,r6,2
20093988:	318d883a 	add	r6,r6,r6
2009398c:	318d883a 	add	r6,r6,r6
20093990:	1027883a 	mov	r19,r2
20093994:	008bf180 	call	2008bf18 <memcpy>
20093998:	d9c00017 	ldw	r7,0(sp)
2009399c:	88000a26 	beq	r17,zero,200939c8 <__multadd+0x118>
200939a0:	89000117 	ldw	r4,4(r17)
200939a4:	90c01317 	ldw	r3,76(r18)
200939a8:	2109883a 	add	r4,r4,r4
200939ac:	2109883a 	add	r4,r4,r4
200939b0:	1907883a 	add	r3,r3,r4
200939b4:	18800017 	ldw	r2,0(r3)
200939b8:	88800015 	stw	r2,0(r17)
200939bc:	1c400015 	stw	r17,0(r3)
200939c0:	9823883a 	mov	r17,r19
200939c4:	003fd806 	br	20093928 <__flash_rwdata_start+0xffff4b3c>
200939c8:	9823883a 	mov	r17,r19
200939cc:	003fd606 	br	20093928 <__flash_rwdata_start+0xffff4b3c>

200939d0 <__s2b>:
200939d0:	defff904 	addi	sp,sp,-28
200939d4:	dc400115 	stw	r17,4(sp)
200939d8:	dc000015 	stw	r16,0(sp)
200939dc:	2023883a 	mov	r17,r4
200939e0:	2821883a 	mov	r16,r5
200939e4:	39000204 	addi	r4,r7,8
200939e8:	01400244 	movi	r5,9
200939ec:	dcc00315 	stw	r19,12(sp)
200939f0:	dc800215 	stw	r18,8(sp)
200939f4:	dfc00615 	stw	ra,24(sp)
200939f8:	dd400515 	stw	r21,20(sp)
200939fc:	dd000415 	stw	r20,16(sp)
20093a00:	3825883a 	mov	r18,r7
20093a04:	3027883a 	mov	r19,r6
20093a08:	0088b400 	call	20088b40 <__divsi3>
20093a0c:	00c00044 	movi	r3,1
20093a10:	000b883a 	mov	r5,zero
20093a14:	1880030e 	bge	r3,r2,20093a24 <__s2b+0x54>
20093a18:	18c7883a 	add	r3,r3,r3
20093a1c:	29400044 	addi	r5,r5,1
20093a20:	18bffd16 	blt	r3,r2,20093a18 <__flash_rwdata_start+0xffff4c2c>
20093a24:	8809883a 	mov	r4,r17
20093a28:	00937e00 	call	200937e0 <_Balloc>
20093a2c:	d8c00717 	ldw	r3,28(sp)
20093a30:	10c00515 	stw	r3,20(r2)
20093a34:	00c00044 	movi	r3,1
20093a38:	10c00415 	stw	r3,16(r2)
20093a3c:	00c00244 	movi	r3,9
20093a40:	1cc0210e 	bge	r3,r19,20093ac8 <__s2b+0xf8>
20093a44:	80eb883a 	add	r21,r16,r3
20093a48:	a829883a 	mov	r20,r21
20093a4c:	84e1883a 	add	r16,r16,r19
20093a50:	a1c00007 	ldb	r7,0(r20)
20093a54:	8809883a 	mov	r4,r17
20093a58:	a5000044 	addi	r20,r20,1
20093a5c:	100b883a 	mov	r5,r2
20093a60:	01800284 	movi	r6,10
20093a64:	39fff404 	addi	r7,r7,-48
20093a68:	00938b00 	call	200938b0 <__multadd>
20093a6c:	a43ff81e 	bne	r20,r16,20093a50 <__flash_rwdata_start+0xffff4c64>
20093a70:	ace1883a 	add	r16,r21,r19
20093a74:	843ffe04 	addi	r16,r16,-8
20093a78:	9c800a0e 	bge	r19,r18,20093aa4 <__s2b+0xd4>
20093a7c:	94e5c83a 	sub	r18,r18,r19
20093a80:	84a5883a 	add	r18,r16,r18
20093a84:	81c00007 	ldb	r7,0(r16)
20093a88:	8809883a 	mov	r4,r17
20093a8c:	84000044 	addi	r16,r16,1
20093a90:	100b883a 	mov	r5,r2
20093a94:	01800284 	movi	r6,10
20093a98:	39fff404 	addi	r7,r7,-48
20093a9c:	00938b00 	call	200938b0 <__multadd>
20093aa0:	84bff81e 	bne	r16,r18,20093a84 <__flash_rwdata_start+0xffff4c98>
20093aa4:	dfc00617 	ldw	ra,24(sp)
20093aa8:	dd400517 	ldw	r21,20(sp)
20093aac:	dd000417 	ldw	r20,16(sp)
20093ab0:	dcc00317 	ldw	r19,12(sp)
20093ab4:	dc800217 	ldw	r18,8(sp)
20093ab8:	dc400117 	ldw	r17,4(sp)
20093abc:	dc000017 	ldw	r16,0(sp)
20093ac0:	dec00704 	addi	sp,sp,28
20093ac4:	f800283a 	ret
20093ac8:	84000284 	addi	r16,r16,10
20093acc:	1827883a 	mov	r19,r3
20093ad0:	003fe906 	br	20093a78 <__flash_rwdata_start+0xffff4c8c>

20093ad4 <__hi0bits>:
20093ad4:	20bfffec 	andhi	r2,r4,65535
20093ad8:	1000141e 	bne	r2,zero,20093b2c <__hi0bits+0x58>
20093adc:	2008943a 	slli	r4,r4,16
20093ae0:	00800404 	movi	r2,16
20093ae4:	20ffc02c 	andhi	r3,r4,65280
20093ae8:	1800021e 	bne	r3,zero,20093af4 <__hi0bits+0x20>
20093aec:	2008923a 	slli	r4,r4,8
20093af0:	10800204 	addi	r2,r2,8
20093af4:	20fc002c 	andhi	r3,r4,61440
20093af8:	1800021e 	bne	r3,zero,20093b04 <__hi0bits+0x30>
20093afc:	2008913a 	slli	r4,r4,4
20093b00:	10800104 	addi	r2,r2,4
20093b04:	20f0002c 	andhi	r3,r4,49152
20093b08:	1800031e 	bne	r3,zero,20093b18 <__hi0bits+0x44>
20093b0c:	2109883a 	add	r4,r4,r4
20093b10:	10800084 	addi	r2,r2,2
20093b14:	2109883a 	add	r4,r4,r4
20093b18:	20000316 	blt	r4,zero,20093b28 <__hi0bits+0x54>
20093b1c:	2110002c 	andhi	r4,r4,16384
20093b20:	2000041e 	bne	r4,zero,20093b34 <__hi0bits+0x60>
20093b24:	00800804 	movi	r2,32
20093b28:	f800283a 	ret
20093b2c:	0005883a 	mov	r2,zero
20093b30:	003fec06 	br	20093ae4 <__flash_rwdata_start+0xffff4cf8>
20093b34:	10800044 	addi	r2,r2,1
20093b38:	f800283a 	ret

20093b3c <__lo0bits>:
20093b3c:	20c00017 	ldw	r3,0(r4)
20093b40:	188001cc 	andi	r2,r3,7
20093b44:	10000826 	beq	r2,zero,20093b68 <__lo0bits+0x2c>
20093b48:	1880004c 	andi	r2,r3,1
20093b4c:	1000211e 	bne	r2,zero,20093bd4 <__lo0bits+0x98>
20093b50:	1880008c 	andi	r2,r3,2
20093b54:	1000211e 	bne	r2,zero,20093bdc <__lo0bits+0xa0>
20093b58:	1806d0ba 	srli	r3,r3,2
20093b5c:	00800084 	movi	r2,2
20093b60:	20c00015 	stw	r3,0(r4)
20093b64:	f800283a 	ret
20093b68:	18bfffcc 	andi	r2,r3,65535
20093b6c:	10001326 	beq	r2,zero,20093bbc <__lo0bits+0x80>
20093b70:	0005883a 	mov	r2,zero
20093b74:	19403fcc 	andi	r5,r3,255
20093b78:	2800021e 	bne	r5,zero,20093b84 <__lo0bits+0x48>
20093b7c:	1806d23a 	srli	r3,r3,8
20093b80:	10800204 	addi	r2,r2,8
20093b84:	194003cc 	andi	r5,r3,15
20093b88:	2800021e 	bne	r5,zero,20093b94 <__lo0bits+0x58>
20093b8c:	1806d13a 	srli	r3,r3,4
20093b90:	10800104 	addi	r2,r2,4
20093b94:	194000cc 	andi	r5,r3,3
20093b98:	2800021e 	bne	r5,zero,20093ba4 <__lo0bits+0x68>
20093b9c:	1806d0ba 	srli	r3,r3,2
20093ba0:	10800084 	addi	r2,r2,2
20093ba4:	1940004c 	andi	r5,r3,1
20093ba8:	2800081e 	bne	r5,zero,20093bcc <__lo0bits+0x90>
20093bac:	1806d07a 	srli	r3,r3,1
20093bb0:	1800051e 	bne	r3,zero,20093bc8 <__lo0bits+0x8c>
20093bb4:	00800804 	movi	r2,32
20093bb8:	f800283a 	ret
20093bbc:	1806d43a 	srli	r3,r3,16
20093bc0:	00800404 	movi	r2,16
20093bc4:	003feb06 	br	20093b74 <__flash_rwdata_start+0xffff4d88>
20093bc8:	10800044 	addi	r2,r2,1
20093bcc:	20c00015 	stw	r3,0(r4)
20093bd0:	f800283a 	ret
20093bd4:	0005883a 	mov	r2,zero
20093bd8:	f800283a 	ret
20093bdc:	1806d07a 	srli	r3,r3,1
20093be0:	00800044 	movi	r2,1
20093be4:	20c00015 	stw	r3,0(r4)
20093be8:	f800283a 	ret

20093bec <__i2b>:
20093bec:	defffd04 	addi	sp,sp,-12
20093bf0:	dc000015 	stw	r16,0(sp)
20093bf4:	04000044 	movi	r16,1
20093bf8:	dc400115 	stw	r17,4(sp)
20093bfc:	2823883a 	mov	r17,r5
20093c00:	800b883a 	mov	r5,r16
20093c04:	dfc00215 	stw	ra,8(sp)
20093c08:	00937e00 	call	200937e0 <_Balloc>
20093c0c:	14400515 	stw	r17,20(r2)
20093c10:	14000415 	stw	r16,16(r2)
20093c14:	dfc00217 	ldw	ra,8(sp)
20093c18:	dc400117 	ldw	r17,4(sp)
20093c1c:	dc000017 	ldw	r16,0(sp)
20093c20:	dec00304 	addi	sp,sp,12
20093c24:	f800283a 	ret

20093c28 <__multiply>:
20093c28:	defffa04 	addi	sp,sp,-24
20093c2c:	dcc00315 	stw	r19,12(sp)
20093c30:	dc800215 	stw	r18,8(sp)
20093c34:	2cc00417 	ldw	r19,16(r5)
20093c38:	34800417 	ldw	r18,16(r6)
20093c3c:	dd000415 	stw	r20,16(sp)
20093c40:	dc400115 	stw	r17,4(sp)
20093c44:	dfc00515 	stw	ra,20(sp)
20093c48:	dc000015 	stw	r16,0(sp)
20093c4c:	2829883a 	mov	r20,r5
20093c50:	3023883a 	mov	r17,r6
20093c54:	9c807016 	blt	r19,r18,20093e18 <__multiply+0x1f0>
20093c58:	9005883a 	mov	r2,r18
20093c5c:	9825883a 	mov	r18,r19
20093c60:	1027883a 	mov	r19,r2
20093c64:	a0800217 	ldw	r2,8(r20)
20093c68:	94e1883a 	add	r16,r18,r19
20093c6c:	a1400117 	ldw	r5,4(r20)
20093c70:	1400010e 	bge	r2,r16,20093c78 <__multiply+0x50>
20093c74:	29400044 	addi	r5,r5,1
20093c78:	00937e00 	call	200937e0 <_Balloc>
20093c7c:	8417883a 	add	r11,r16,r16
20093c80:	13000504 	addi	r12,r2,20
20093c84:	5ad7883a 	add	r11,r11,r11
20093c88:	62d7883a 	add	r11,r12,r11
20093c8c:	6007883a 	mov	r3,r12
20093c90:	62c0032e 	bgeu	r12,r11,20093ca0 <__multiply+0x78>
20093c94:	18000015 	stw	zero,0(r3)
20093c98:	18c00104 	addi	r3,r3,4
20093c9c:	1afffd36 	bltu	r3,r11,20093c94 <__flash_rwdata_start+0xffff4ea8>
20093ca0:	9ce7883a 	add	r19,r19,r19
20093ca4:	94a5883a 	add	r18,r18,r18
20093ca8:	89800504 	addi	r6,r17,20
20093cac:	9ce7883a 	add	r19,r19,r19
20093cb0:	a3800504 	addi	r14,r20,20
20093cb4:	94a5883a 	add	r18,r18,r18
20093cb8:	34db883a 	add	r13,r6,r19
20093cbc:	7495883a 	add	r10,r14,r18
20093cc0:	3340422e 	bgeu	r6,r13,20093dcc <__multiply+0x1a4>
20093cc4:	34400017 	ldw	r17,0(r6)
20093cc8:	8cbfffcc 	andi	r18,r17,65535
20093ccc:	90001b26 	beq	r18,zero,20093d3c <__multiply+0x114>
20093cd0:	6013883a 	mov	r9,r12
20093cd4:	7023883a 	mov	r17,r14
20093cd8:	0011883a 	mov	r8,zero
20093cdc:	88c00017 	ldw	r3,0(r17)
20093ce0:	4bc00017 	ldw	r15,0(r9)
20093ce4:	8c400104 	addi	r17,r17,4
20093ce8:	19ffffcc 	andi	r7,r3,65535
20093cec:	3c8f383a 	mul	r7,r7,r18
20093cf0:	1808d43a 	srli	r4,r3,16
20093cf4:	797fffcc 	andi	r5,r15,65535
20093cf8:	29cb883a 	add	r5,r5,r7
20093cfc:	2a0b883a 	add	r5,r5,r8
20093d00:	2489383a 	mul	r4,r4,r18
20093d04:	7806d43a 	srli	r3,r15,16
20093d08:	2810d43a 	srli	r8,r5,16
20093d0c:	297fffcc 	andi	r5,r5,65535
20093d10:	1907883a 	add	r3,r3,r4
20093d14:	1a07883a 	add	r3,r3,r8
20093d18:	1808943a 	slli	r4,r3,16
20093d1c:	480f883a 	mov	r7,r9
20093d20:	1810d43a 	srli	r8,r3,16
20093d24:	214ab03a 	or	r5,r4,r5
20093d28:	49400015 	stw	r5,0(r9)
20093d2c:	4a400104 	addi	r9,r9,4
20093d30:	8abfea36 	bltu	r17,r10,20093cdc <__flash_rwdata_start+0xffff4ef0>
20093d34:	3a000115 	stw	r8,4(r7)
20093d38:	34400017 	ldw	r17,0(r6)
20093d3c:	8822d43a 	srli	r17,r17,16
20093d40:	88001f26 	beq	r17,zero,20093dc0 <__multiply+0x198>
20093d44:	60c00017 	ldw	r3,0(r12)
20093d48:	7013883a 	mov	r9,r14
20093d4c:	601f883a 	mov	r15,r12
20093d50:	1811883a 	mov	r8,r3
20093d54:	6027883a 	mov	r19,r12
20093d58:	000f883a 	mov	r7,zero
20093d5c:	00000106 	br	20093d64 <__multiply+0x13c>
20093d60:	9027883a 	mov	r19,r18
20093d64:	4940000b 	ldhu	r5,0(r9)
20093d68:	4010d43a 	srli	r8,r8,16
20093d6c:	193fffcc 	andi	r4,r3,65535
20093d70:	2c4b383a 	mul	r5,r5,r17
20093d74:	7bc00104 	addi	r15,r15,4
20093d78:	4a400104 	addi	r9,r9,4
20093d7c:	2a0b883a 	add	r5,r5,r8
20093d80:	29cb883a 	add	r5,r5,r7
20093d84:	2806943a 	slli	r3,r5,16
20093d88:	9c800104 	addi	r18,r19,4
20093d8c:	280ad43a 	srli	r5,r5,16
20093d90:	1908b03a 	or	r4,r3,r4
20093d94:	793fff15 	stw	r4,-4(r15)
20093d98:	48ffff17 	ldw	r3,-4(r9)
20093d9c:	92000017 	ldw	r8,0(r18)
20093da0:	1806d43a 	srli	r3,r3,16
20093da4:	413fffcc 	andi	r4,r8,65535
20093da8:	1c47383a 	mul	r3,r3,r17
20093dac:	1907883a 	add	r3,r3,r4
20093db0:	1947883a 	add	r3,r3,r5
20093db4:	180ed43a 	srli	r7,r3,16
20093db8:	4abfe936 	bltu	r9,r10,20093d60 <__flash_rwdata_start+0xffff4f74>
20093dbc:	98c00115 	stw	r3,4(r19)
20093dc0:	31800104 	addi	r6,r6,4
20093dc4:	63000104 	addi	r12,r12,4
20093dc8:	337fbe36 	bltu	r6,r13,20093cc4 <__flash_rwdata_start+0xffff4ed8>
20093dcc:	0400090e 	bge	zero,r16,20093df4 <__multiply+0x1cc>
20093dd0:	58ffff17 	ldw	r3,-4(r11)
20093dd4:	5affff04 	addi	r11,r11,-4
20093dd8:	18000326 	beq	r3,zero,20093de8 <__multiply+0x1c0>
20093ddc:	00000506 	br	20093df4 <__multiply+0x1cc>
20093de0:	58c00017 	ldw	r3,0(r11)
20093de4:	1800031e 	bne	r3,zero,20093df4 <__multiply+0x1cc>
20093de8:	843fffc4 	addi	r16,r16,-1
20093dec:	5affff04 	addi	r11,r11,-4
20093df0:	803ffb1e 	bne	r16,zero,20093de0 <__flash_rwdata_start+0xffff4ff4>
20093df4:	14000415 	stw	r16,16(r2)
20093df8:	dfc00517 	ldw	ra,20(sp)
20093dfc:	dd000417 	ldw	r20,16(sp)
20093e00:	dcc00317 	ldw	r19,12(sp)
20093e04:	dc800217 	ldw	r18,8(sp)
20093e08:	dc400117 	ldw	r17,4(sp)
20093e0c:	dc000017 	ldw	r16,0(sp)
20093e10:	dec00604 	addi	sp,sp,24
20093e14:	f800283a 	ret
20093e18:	3029883a 	mov	r20,r6
20093e1c:	2823883a 	mov	r17,r5
20093e20:	003f9006 	br	20093c64 <__flash_rwdata_start+0xffff4e78>

20093e24 <__pow5mult>:
20093e24:	defffa04 	addi	sp,sp,-24
20093e28:	dcc00315 	stw	r19,12(sp)
20093e2c:	dc800215 	stw	r18,8(sp)
20093e30:	dc000015 	stw	r16,0(sp)
20093e34:	dfc00515 	stw	ra,20(sp)
20093e38:	dd000415 	stw	r20,16(sp)
20093e3c:	dc400115 	stw	r17,4(sp)
20093e40:	308000cc 	andi	r2,r6,3
20093e44:	3021883a 	mov	r16,r6
20093e48:	2027883a 	mov	r19,r4
20093e4c:	2825883a 	mov	r18,r5
20093e50:	10002e1e 	bne	r2,zero,20093f0c <__pow5mult+0xe8>
20093e54:	8021d0ba 	srai	r16,r16,2
20093e58:	80001a26 	beq	r16,zero,20093ec4 <__pow5mult+0xa0>
20093e5c:	9c401217 	ldw	r17,72(r19)
20093e60:	8800061e 	bne	r17,zero,20093e7c <__pow5mult+0x58>
20093e64:	00003406 	br	20093f38 <__pow5mult+0x114>
20093e68:	8021d07a 	srai	r16,r16,1
20093e6c:	80001526 	beq	r16,zero,20093ec4 <__pow5mult+0xa0>
20093e70:	88800017 	ldw	r2,0(r17)
20093e74:	10001c26 	beq	r2,zero,20093ee8 <__pow5mult+0xc4>
20093e78:	1023883a 	mov	r17,r2
20093e7c:	80c0004c 	andi	r3,r16,1
20093e80:	183ff926 	beq	r3,zero,20093e68 <__flash_rwdata_start+0xffff507c>
20093e84:	900b883a 	mov	r5,r18
20093e88:	880d883a 	mov	r6,r17
20093e8c:	9809883a 	mov	r4,r19
20093e90:	0093c280 	call	20093c28 <__multiply>
20093e94:	90001b26 	beq	r18,zero,20093f04 <__pow5mult+0xe0>
20093e98:	91c00117 	ldw	r7,4(r18)
20093e9c:	98c01317 	ldw	r3,76(r19)
20093ea0:	8021d07a 	srai	r16,r16,1
20093ea4:	39cf883a 	add	r7,r7,r7
20093ea8:	39cf883a 	add	r7,r7,r7
20093eac:	19c7883a 	add	r3,r3,r7
20093eb0:	19000017 	ldw	r4,0(r3)
20093eb4:	91000015 	stw	r4,0(r18)
20093eb8:	1c800015 	stw	r18,0(r3)
20093ebc:	1025883a 	mov	r18,r2
20093ec0:	803feb1e 	bne	r16,zero,20093e70 <__flash_rwdata_start+0xffff5084>
20093ec4:	9005883a 	mov	r2,r18
20093ec8:	dfc00517 	ldw	ra,20(sp)
20093ecc:	dd000417 	ldw	r20,16(sp)
20093ed0:	dcc00317 	ldw	r19,12(sp)
20093ed4:	dc800217 	ldw	r18,8(sp)
20093ed8:	dc400117 	ldw	r17,4(sp)
20093edc:	dc000017 	ldw	r16,0(sp)
20093ee0:	dec00604 	addi	sp,sp,24
20093ee4:	f800283a 	ret
20093ee8:	9809883a 	mov	r4,r19
20093eec:	880b883a 	mov	r5,r17
20093ef0:	880d883a 	mov	r6,r17
20093ef4:	0093c280 	call	20093c28 <__multiply>
20093ef8:	88800015 	stw	r2,0(r17)
20093efc:	10000015 	stw	zero,0(r2)
20093f00:	003fdd06 	br	20093e78 <__flash_rwdata_start+0xffff508c>
20093f04:	1025883a 	mov	r18,r2
20093f08:	003fd706 	br	20093e68 <__flash_rwdata_start+0xffff507c>
20093f0c:	10bfffc4 	addi	r2,r2,-1
20093f10:	1085883a 	add	r2,r2,r2
20093f14:	00c00034 	movhi	r3,0
20093f18:	18c20404 	addi	r3,r3,2064
20093f1c:	1085883a 	add	r2,r2,r2
20093f20:	1885883a 	add	r2,r3,r2
20093f24:	11800017 	ldw	r6,0(r2)
20093f28:	000f883a 	mov	r7,zero
20093f2c:	00938b00 	call	200938b0 <__multadd>
20093f30:	1025883a 	mov	r18,r2
20093f34:	003fc706 	br	20093e54 <__flash_rwdata_start+0xffff5068>
20093f38:	05000044 	movi	r20,1
20093f3c:	9809883a 	mov	r4,r19
20093f40:	a00b883a 	mov	r5,r20
20093f44:	00937e00 	call	200937e0 <_Balloc>
20093f48:	1023883a 	mov	r17,r2
20093f4c:	00809c44 	movi	r2,625
20093f50:	88800515 	stw	r2,20(r17)
20093f54:	8d000415 	stw	r20,16(r17)
20093f58:	9c401215 	stw	r17,72(r19)
20093f5c:	88000015 	stw	zero,0(r17)
20093f60:	003fc606 	br	20093e7c <__flash_rwdata_start+0xffff5090>

20093f64 <__lshift>:
20093f64:	defff904 	addi	sp,sp,-28
20093f68:	dd000415 	stw	r20,16(sp)
20093f6c:	dcc00315 	stw	r19,12(sp)
20093f70:	3029d17a 	srai	r20,r6,5
20093f74:	2cc00417 	ldw	r19,16(r5)
20093f78:	28800217 	ldw	r2,8(r5)
20093f7c:	dd400515 	stw	r21,20(sp)
20093f80:	a4e7883a 	add	r19,r20,r19
20093f84:	dc800215 	stw	r18,8(sp)
20093f88:	dc400115 	stw	r17,4(sp)
20093f8c:	dc000015 	stw	r16,0(sp)
20093f90:	dfc00615 	stw	ra,24(sp)
20093f94:	9c000044 	addi	r16,r19,1
20093f98:	2823883a 	mov	r17,r5
20093f9c:	302b883a 	mov	r21,r6
20093fa0:	2025883a 	mov	r18,r4
20093fa4:	29400117 	ldw	r5,4(r5)
20093fa8:	1400030e 	bge	r2,r16,20093fb8 <__lshift+0x54>
20093fac:	1085883a 	add	r2,r2,r2
20093fb0:	29400044 	addi	r5,r5,1
20093fb4:	143ffd16 	blt	r2,r16,20093fac <__flash_rwdata_start+0xffff51c0>
20093fb8:	9009883a 	mov	r4,r18
20093fbc:	00937e00 	call	200937e0 <_Balloc>
20093fc0:	11c00504 	addi	r7,r2,20
20093fc4:	0500090e 	bge	zero,r20,20093fec <__lshift+0x88>
20093fc8:	3811883a 	mov	r8,r7
20093fcc:	0007883a 	mov	r3,zero
20093fd0:	40000015 	stw	zero,0(r8)
20093fd4:	18c00044 	addi	r3,r3,1
20093fd8:	42000104 	addi	r8,r8,4
20093fdc:	1d3ffc1e 	bne	r3,r20,20093fd0 <__flash_rwdata_start+0xffff51e4>
20093fe0:	18c7883a 	add	r3,r3,r3
20093fe4:	18c7883a 	add	r3,r3,r3
20093fe8:	38cf883a 	add	r7,r7,r3
20093fec:	89000417 	ldw	r4,16(r17)
20093ff0:	88c00504 	addi	r3,r17,20
20093ff4:	a98007cc 	andi	r6,r21,31
20093ff8:	2109883a 	add	r4,r4,r4
20093ffc:	2109883a 	add	r4,r4,r4
20094000:	1909883a 	add	r4,r3,r4
20094004:	30002326 	beq	r6,zero,20094094 <__lshift+0x130>
20094008:	01400804 	movi	r5,32
2009400c:	298bc83a 	sub	r5,r5,r6
20094010:	0013883a 	mov	r9,zero
20094014:	1a000017 	ldw	r8,0(r3)
20094018:	3815883a 	mov	r10,r7
2009401c:	39c00104 	addi	r7,r7,4
20094020:	4190983a 	sll	r8,r8,r6
20094024:	18c00104 	addi	r3,r3,4
20094028:	4a10b03a 	or	r8,r9,r8
2009402c:	3a3fff15 	stw	r8,-4(r7)
20094030:	1a3fff17 	ldw	r8,-4(r3)
20094034:	4152d83a 	srl	r9,r8,r5
20094038:	193ff636 	bltu	r3,r4,20094014 <__flash_rwdata_start+0xffff5228>
2009403c:	52400115 	stw	r9,4(r10)
20094040:	48001a1e 	bne	r9,zero,200940ac <__lshift+0x148>
20094044:	843fffc4 	addi	r16,r16,-1
20094048:	14000415 	stw	r16,16(r2)
2009404c:	88000826 	beq	r17,zero,20094070 <__lshift+0x10c>
20094050:	89000117 	ldw	r4,4(r17)
20094054:	90c01317 	ldw	r3,76(r18)
20094058:	2109883a 	add	r4,r4,r4
2009405c:	2109883a 	add	r4,r4,r4
20094060:	1907883a 	add	r3,r3,r4
20094064:	19000017 	ldw	r4,0(r3)
20094068:	89000015 	stw	r4,0(r17)
2009406c:	1c400015 	stw	r17,0(r3)
20094070:	dfc00617 	ldw	ra,24(sp)
20094074:	dd400517 	ldw	r21,20(sp)
20094078:	dd000417 	ldw	r20,16(sp)
2009407c:	dcc00317 	ldw	r19,12(sp)
20094080:	dc800217 	ldw	r18,8(sp)
20094084:	dc400117 	ldw	r17,4(sp)
20094088:	dc000017 	ldw	r16,0(sp)
2009408c:	dec00704 	addi	sp,sp,28
20094090:	f800283a 	ret
20094094:	19400017 	ldw	r5,0(r3)
20094098:	39c00104 	addi	r7,r7,4
2009409c:	18c00104 	addi	r3,r3,4
200940a0:	397fff15 	stw	r5,-4(r7)
200940a4:	193ffb36 	bltu	r3,r4,20094094 <__flash_rwdata_start+0xffff52a8>
200940a8:	003fe606 	br	20094044 <__flash_rwdata_start+0xffff5258>
200940ac:	9c000084 	addi	r16,r19,2
200940b0:	003fe406 	br	20094044 <__flash_rwdata_start+0xffff5258>

200940b4 <__mcmp>:
200940b4:	20800417 	ldw	r2,16(r4)
200940b8:	28c00417 	ldw	r3,16(r5)
200940bc:	10c5c83a 	sub	r2,r2,r3
200940c0:	1000111e 	bne	r2,zero,20094108 <__mcmp+0x54>
200940c4:	18c7883a 	add	r3,r3,r3
200940c8:	18c7883a 	add	r3,r3,r3
200940cc:	21000504 	addi	r4,r4,20
200940d0:	29400504 	addi	r5,r5,20
200940d4:	20c5883a 	add	r2,r4,r3
200940d8:	28cb883a 	add	r5,r5,r3
200940dc:	00000106 	br	200940e4 <__mcmp+0x30>
200940e0:	20800a2e 	bgeu	r4,r2,2009410c <__mcmp+0x58>
200940e4:	10bfff04 	addi	r2,r2,-4
200940e8:	297fff04 	addi	r5,r5,-4
200940ec:	11800017 	ldw	r6,0(r2)
200940f0:	28c00017 	ldw	r3,0(r5)
200940f4:	30fffa26 	beq	r6,r3,200940e0 <__flash_rwdata_start+0xffff52f4>
200940f8:	30c00236 	bltu	r6,r3,20094104 <__mcmp+0x50>
200940fc:	00800044 	movi	r2,1
20094100:	f800283a 	ret
20094104:	00bfffc4 	movi	r2,-1
20094108:	f800283a 	ret
2009410c:	0005883a 	mov	r2,zero
20094110:	f800283a 	ret

20094114 <__mdiff>:
20094114:	defffb04 	addi	sp,sp,-20
20094118:	dc000015 	stw	r16,0(sp)
2009411c:	2821883a 	mov	r16,r5
20094120:	dcc00315 	stw	r19,12(sp)
20094124:	300b883a 	mov	r5,r6
20094128:	2027883a 	mov	r19,r4
2009412c:	8009883a 	mov	r4,r16
20094130:	dc800215 	stw	r18,8(sp)
20094134:	dfc00415 	stw	ra,16(sp)
20094138:	dc400115 	stw	r17,4(sp)
2009413c:	3025883a 	mov	r18,r6
20094140:	00940b40 	call	200940b4 <__mcmp>
20094144:	10005226 	beq	r2,zero,20094290 <__mdiff+0x17c>
20094148:	10004c16 	blt	r2,zero,2009427c <__mdiff+0x168>
2009414c:	0023883a 	mov	r17,zero
20094150:	81400117 	ldw	r5,4(r16)
20094154:	9809883a 	mov	r4,r19
20094158:	00937e00 	call	200937e0 <_Balloc>
2009415c:	83400417 	ldw	r13,16(r16)
20094160:	93800417 	ldw	r14,16(r18)
20094164:	81000504 	addi	r4,r16,20
20094168:	6b59883a 	add	r12,r13,r13
2009416c:	739d883a 	add	r14,r14,r14
20094170:	6319883a 	add	r12,r12,r12
20094174:	91800504 	addi	r6,r18,20
20094178:	739d883a 	add	r14,r14,r14
2009417c:	14400315 	stw	r17,12(r2)
20094180:	2319883a 	add	r12,r4,r12
20094184:	339d883a 	add	r14,r6,r14
20094188:	12400504 	addi	r9,r2,20
2009418c:	0007883a 	mov	r3,zero
20094190:	22000017 	ldw	r8,0(r4)
20094194:	32800017 	ldw	r10,0(r6)
20094198:	4ac00104 	addi	r11,r9,4
2009419c:	41ffffcc 	andi	r7,r8,65535
200941a0:	38c7883a 	add	r3,r7,r3
200941a4:	51ffffcc 	andi	r7,r10,65535
200941a8:	19cfc83a 	sub	r7,r3,r7
200941ac:	4010d43a 	srli	r8,r8,16
200941b0:	5014d43a 	srli	r10,r10,16
200941b4:	3807d43a 	srai	r3,r7,16
200941b8:	39ffffcc 	andi	r7,r7,65535
200941bc:	4291c83a 	sub	r8,r8,r10
200941c0:	40c7883a 	add	r3,r8,r3
200941c4:	1810943a 	slli	r8,r3,16
200941c8:	31800104 	addi	r6,r6,4
200941cc:	21000104 	addi	r4,r4,4
200941d0:	41ceb03a 	or	r7,r8,r7
200941d4:	49c00015 	stw	r7,0(r9)
200941d8:	1807d43a 	srai	r3,r3,16
200941dc:	580b883a 	mov	r5,r11
200941e0:	5813883a 	mov	r9,r11
200941e4:	33bfea36 	bltu	r6,r14,20094190 <__flash_rwdata_start+0xffff53a4>
200941e8:	2011883a 	mov	r8,r4
200941ec:	2300152e 	bgeu	r4,r12,20094244 <__mdiff+0x130>
200941f0:	21400017 	ldw	r5,0(r4)
200941f4:	4a400104 	addi	r9,r9,4
200941f8:	21000104 	addi	r4,r4,4
200941fc:	29ffffcc 	andi	r7,r5,65535
20094200:	38c7883a 	add	r3,r7,r3
20094204:	280ad43a 	srli	r5,r5,16
20094208:	180dd43a 	srai	r6,r3,16
2009420c:	19ffffcc 	andi	r7,r3,65535
20094210:	3147883a 	add	r3,r6,r5
20094214:	180a943a 	slli	r5,r3,16
20094218:	1807d43a 	srai	r3,r3,16
2009421c:	29ceb03a 	or	r7,r5,r7
20094220:	49ffff15 	stw	r7,-4(r9)
20094224:	233ff236 	bltu	r4,r12,200941f0 <__flash_rwdata_start+0xffff5404>
20094228:	0206303a 	nor	r3,zero,r8
2009422c:	1b07883a 	add	r3,r3,r12
20094230:	1806d0ba 	srli	r3,r3,2
20094234:	18c00044 	addi	r3,r3,1
20094238:	18c7883a 	add	r3,r3,r3
2009423c:	18c7883a 	add	r3,r3,r3
20094240:	58cb883a 	add	r5,r11,r3
20094244:	28ffff04 	addi	r3,r5,-4
20094248:	3800041e 	bne	r7,zero,2009425c <__mdiff+0x148>
2009424c:	18ffff04 	addi	r3,r3,-4
20094250:	19000017 	ldw	r4,0(r3)
20094254:	6b7fffc4 	addi	r13,r13,-1
20094258:	203ffc26 	beq	r4,zero,2009424c <__flash_rwdata_start+0xffff5460>
2009425c:	13400415 	stw	r13,16(r2)
20094260:	dfc00417 	ldw	ra,16(sp)
20094264:	dcc00317 	ldw	r19,12(sp)
20094268:	dc800217 	ldw	r18,8(sp)
2009426c:	dc400117 	ldw	r17,4(sp)
20094270:	dc000017 	ldw	r16,0(sp)
20094274:	dec00504 	addi	sp,sp,20
20094278:	f800283a 	ret
2009427c:	8005883a 	mov	r2,r16
20094280:	04400044 	movi	r17,1
20094284:	9021883a 	mov	r16,r18
20094288:	1025883a 	mov	r18,r2
2009428c:	003fb006 	br	20094150 <__flash_rwdata_start+0xffff5364>
20094290:	9809883a 	mov	r4,r19
20094294:	000b883a 	mov	r5,zero
20094298:	00937e00 	call	200937e0 <_Balloc>
2009429c:	00c00044 	movi	r3,1
200942a0:	10c00415 	stw	r3,16(r2)
200942a4:	10000515 	stw	zero,20(r2)
200942a8:	003fed06 	br	20094260 <__flash_rwdata_start+0xffff5474>

200942ac <__ulp>:
200942ac:	295ffc2c 	andhi	r5,r5,32752
200942b0:	00bf3034 	movhi	r2,64704
200942b4:	2887883a 	add	r3,r5,r2
200942b8:	00c0020e 	bge	zero,r3,200942c4 <__ulp+0x18>
200942bc:	0005883a 	mov	r2,zero
200942c0:	f800283a 	ret
200942c4:	00c7c83a 	sub	r3,zero,r3
200942c8:	180bd53a 	srai	r5,r3,20
200942cc:	008004c4 	movi	r2,19
200942d0:	11400a0e 	bge	r2,r5,200942fc <__ulp+0x50>
200942d4:	00800c84 	movi	r2,50
200942d8:	0007883a 	mov	r3,zero
200942dc:	11400516 	blt	r2,r5,200942f4 <__ulp+0x48>
200942e0:	00800cc4 	movi	r2,51
200942e4:	114bc83a 	sub	r5,r2,r5
200942e8:	00800044 	movi	r2,1
200942ec:	1144983a 	sll	r2,r2,r5
200942f0:	f800283a 	ret
200942f4:	00800044 	movi	r2,1
200942f8:	f800283a 	ret
200942fc:	00800234 	movhi	r2,8
20094300:	1147d83a 	sra	r3,r2,r5
20094304:	0005883a 	mov	r2,zero
20094308:	f800283a 	ret

2009430c <__b2d>:
2009430c:	defffa04 	addi	sp,sp,-24
20094310:	dc000015 	stw	r16,0(sp)
20094314:	24000417 	ldw	r16,16(r4)
20094318:	dc400115 	stw	r17,4(sp)
2009431c:	24400504 	addi	r17,r4,20
20094320:	8421883a 	add	r16,r16,r16
20094324:	8421883a 	add	r16,r16,r16
20094328:	8c21883a 	add	r16,r17,r16
2009432c:	dc800215 	stw	r18,8(sp)
20094330:	84bfff17 	ldw	r18,-4(r16)
20094334:	dd000415 	stw	r20,16(sp)
20094338:	dcc00315 	stw	r19,12(sp)
2009433c:	9009883a 	mov	r4,r18
20094340:	2829883a 	mov	r20,r5
20094344:	dfc00515 	stw	ra,20(sp)
20094348:	0093ad40 	call	20093ad4 <__hi0bits>
2009434c:	00c00804 	movi	r3,32
20094350:	1887c83a 	sub	r3,r3,r2
20094354:	a0c00015 	stw	r3,0(r20)
20094358:	00c00284 	movi	r3,10
2009435c:	84ffff04 	addi	r19,r16,-4
20094360:	18801216 	blt	r3,r2,200943ac <__b2d+0xa0>
20094364:	014002c4 	movi	r5,11
20094368:	2889c83a 	sub	r4,r5,r2
2009436c:	9106d83a 	srl	r3,r18,r4
20094370:	18cffc34 	orhi	r3,r3,16368
20094374:	8cc0282e 	bgeu	r17,r19,20094418 <__b2d+0x10c>
20094378:	817ffe17 	ldw	r5,-8(r16)
2009437c:	290ad83a 	srl	r5,r5,r4
20094380:	10800544 	addi	r2,r2,21
20094384:	9084983a 	sll	r2,r18,r2
20094388:	2884b03a 	or	r2,r5,r2
2009438c:	dfc00517 	ldw	ra,20(sp)
20094390:	dd000417 	ldw	r20,16(sp)
20094394:	dcc00317 	ldw	r19,12(sp)
20094398:	dc800217 	ldw	r18,8(sp)
2009439c:	dc400117 	ldw	r17,4(sp)
200943a0:	dc000017 	ldw	r16,0(sp)
200943a4:	dec00604 	addi	sp,sp,24
200943a8:	f800283a 	ret
200943ac:	113ffd44 	addi	r4,r2,-11
200943b0:	8cc00f2e 	bgeu	r17,r19,200943f0 <__b2d+0xe4>
200943b4:	81bffe04 	addi	r6,r16,-8
200943b8:	817ffe17 	ldw	r5,-8(r16)
200943bc:	20001326 	beq	r4,zero,2009440c <__b2d+0x100>
200943c0:	00c00ac4 	movi	r3,43
200943c4:	1885c83a 	sub	r2,r3,r2
200943c8:	2886d83a 	srl	r3,r5,r2
200943cc:	9124983a 	sll	r18,r18,r4
200943d0:	90e4b03a 	or	r18,r18,r3
200943d4:	90cffc34 	orhi	r3,r18,16368
200943d8:	8980112e 	bgeu	r17,r6,20094420 <__b2d+0x114>
200943dc:	81bffd17 	ldw	r6,-12(r16)
200943e0:	308cd83a 	srl	r6,r6,r2
200943e4:	2904983a 	sll	r2,r5,r4
200943e8:	1184b03a 	or	r2,r2,r6
200943ec:	003fe706 	br	2009438c <__flash_rwdata_start+0xffff55a0>
200943f0:	20000526 	beq	r4,zero,20094408 <__b2d+0xfc>
200943f4:	9124983a 	sll	r18,r18,r4
200943f8:	000d883a 	mov	r6,zero
200943fc:	000b883a 	mov	r5,zero
20094400:	90cffc34 	orhi	r3,r18,16368
20094404:	003ff706 	br	200943e4 <__flash_rwdata_start+0xffff55f8>
20094408:	000b883a 	mov	r5,zero
2009440c:	90cffc34 	orhi	r3,r18,16368
20094410:	2805883a 	mov	r2,r5
20094414:	003fdd06 	br	2009438c <__flash_rwdata_start+0xffff55a0>
20094418:	000b883a 	mov	r5,zero
2009441c:	003fd806 	br	20094380 <__flash_rwdata_start+0xffff5594>
20094420:	000d883a 	mov	r6,zero
20094424:	003fef06 	br	200943e4 <__flash_rwdata_start+0xffff55f8>

20094428 <__d2b>:
20094428:	defff704 	addi	sp,sp,-36
2009442c:	dc000215 	stw	r16,8(sp)
20094430:	3021883a 	mov	r16,r6
20094434:	dc400315 	stw	r17,12(sp)
20094438:	8022907a 	slli	r17,r16,1
2009443c:	dd400715 	stw	r21,28(sp)
20094440:	282b883a 	mov	r21,r5
20094444:	01400044 	movi	r5,1
20094448:	dd000615 	stw	r20,24(sp)
2009444c:	dcc00515 	stw	r19,20(sp)
20094450:	dc800415 	stw	r18,16(sp)
20094454:	dfc00815 	stw	ra,32(sp)
20094458:	3829883a 	mov	r20,r7
2009445c:	dc800917 	ldw	r18,36(sp)
20094460:	8822d57a 	srli	r17,r17,21
20094464:	00937e00 	call	200937e0 <_Balloc>
20094468:	1027883a 	mov	r19,r2
2009446c:	00800434 	movhi	r2,16
20094470:	10bfffc4 	addi	r2,r2,-1
20094474:	808c703a 	and	r6,r16,r2
20094478:	88000126 	beq	r17,zero,20094480 <__d2b+0x58>
2009447c:	31800434 	orhi	r6,r6,16
20094480:	d9800015 	stw	r6,0(sp)
20094484:	a8001f26 	beq	r21,zero,20094504 <__d2b+0xdc>
20094488:	d9000104 	addi	r4,sp,4
2009448c:	dd400115 	stw	r21,4(sp)
20094490:	0093b3c0 	call	20093b3c <__lo0bits>
20094494:	d8c00017 	ldw	r3,0(sp)
20094498:	1000291e 	bne	r2,zero,20094540 <__d2b+0x118>
2009449c:	d9000117 	ldw	r4,4(sp)
200944a0:	99000515 	stw	r4,20(r19)
200944a4:	1820c03a 	cmpne	r16,r3,zero
200944a8:	84000044 	addi	r16,r16,1
200944ac:	98c00615 	stw	r3,24(r19)
200944b0:	9c000415 	stw	r16,16(r19)
200944b4:	88001b1e 	bne	r17,zero,20094524 <__d2b+0xfc>
200944b8:	800690ba 	slli	r3,r16,2
200944bc:	10bef384 	addi	r2,r2,-1074
200944c0:	a0800015 	stw	r2,0(r20)
200944c4:	98c5883a 	add	r2,r19,r3
200944c8:	11000417 	ldw	r4,16(r2)
200944cc:	8020917a 	slli	r16,r16,5
200944d0:	0093ad40 	call	20093ad4 <__hi0bits>
200944d4:	8085c83a 	sub	r2,r16,r2
200944d8:	90800015 	stw	r2,0(r18)
200944dc:	9805883a 	mov	r2,r19
200944e0:	dfc00817 	ldw	ra,32(sp)
200944e4:	dd400717 	ldw	r21,28(sp)
200944e8:	dd000617 	ldw	r20,24(sp)
200944ec:	dcc00517 	ldw	r19,20(sp)
200944f0:	dc800417 	ldw	r18,16(sp)
200944f4:	dc400317 	ldw	r17,12(sp)
200944f8:	dc000217 	ldw	r16,8(sp)
200944fc:	dec00904 	addi	sp,sp,36
20094500:	f800283a 	ret
20094504:	d809883a 	mov	r4,sp
20094508:	0093b3c0 	call	20093b3c <__lo0bits>
2009450c:	d8c00017 	ldw	r3,0(sp)
20094510:	04000044 	movi	r16,1
20094514:	9c000415 	stw	r16,16(r19)
20094518:	98c00515 	stw	r3,20(r19)
2009451c:	10800804 	addi	r2,r2,32
20094520:	883fe526 	beq	r17,zero,200944b8 <__flash_rwdata_start+0xffff56cc>
20094524:	8c7ef344 	addi	r17,r17,-1075
20094528:	88a3883a 	add	r17,r17,r2
2009452c:	00c00d44 	movi	r3,53
20094530:	a4400015 	stw	r17,0(r20)
20094534:	1885c83a 	sub	r2,r3,r2
20094538:	90800015 	stw	r2,0(r18)
2009453c:	003fe706 	br	200944dc <__flash_rwdata_start+0xffff56f0>
20094540:	01000804 	movi	r4,32
20094544:	2089c83a 	sub	r4,r4,r2
20094548:	1908983a 	sll	r4,r3,r4
2009454c:	d9400117 	ldw	r5,4(sp)
20094550:	1886d83a 	srl	r3,r3,r2
20094554:	2148b03a 	or	r4,r4,r5
20094558:	99000515 	stw	r4,20(r19)
2009455c:	d8c00015 	stw	r3,0(sp)
20094560:	003fd006 	br	200944a4 <__flash_rwdata_start+0xffff56b8>

20094564 <__ratio>:
20094564:	defff904 	addi	sp,sp,-28
20094568:	dc400315 	stw	r17,12(sp)
2009456c:	2823883a 	mov	r17,r5
20094570:	d9400104 	addi	r5,sp,4
20094574:	dfc00615 	stw	ra,24(sp)
20094578:	dcc00515 	stw	r19,20(sp)
2009457c:	dc800415 	stw	r18,16(sp)
20094580:	2027883a 	mov	r19,r4
20094584:	dc000215 	stw	r16,8(sp)
20094588:	009430c0 	call	2009430c <__b2d>
2009458c:	8809883a 	mov	r4,r17
20094590:	d80b883a 	mov	r5,sp
20094594:	1025883a 	mov	r18,r2
20094598:	1821883a 	mov	r16,r3
2009459c:	009430c0 	call	2009430c <__b2d>
200945a0:	8a400417 	ldw	r9,16(r17)
200945a4:	9a000417 	ldw	r8,16(r19)
200945a8:	100d883a 	mov	r6,r2
200945ac:	d8800017 	ldw	r2,0(sp)
200945b0:	4251c83a 	sub	r8,r8,r9
200945b4:	4012917a 	slli	r9,r8,5
200945b8:	da000117 	ldw	r8,4(sp)
200945bc:	4091c83a 	sub	r8,r8,r2
200945c0:	4251883a 	add	r8,r8,r9
200945c4:	02000d0e 	bge	zero,r8,200945fc <__ratio+0x98>
200945c8:	4010953a 	slli	r8,r8,20
200945cc:	4421883a 	add	r16,r8,r16
200945d0:	9009883a 	mov	r4,r18
200945d4:	800b883a 	mov	r5,r16
200945d8:	180f883a 	mov	r7,r3
200945dc:	0089e200 	call	20089e20 <__divdf3>
200945e0:	dfc00617 	ldw	ra,24(sp)
200945e4:	dcc00517 	ldw	r19,20(sp)
200945e8:	dc800417 	ldw	r18,16(sp)
200945ec:	dc400317 	ldw	r17,12(sp)
200945f0:	dc000217 	ldw	r16,8(sp)
200945f4:	dec00704 	addi	sp,sp,28
200945f8:	f800283a 	ret
200945fc:	4010953a 	slli	r8,r8,20
20094600:	1a07c83a 	sub	r3,r3,r8
20094604:	003ff206 	br	200945d0 <__flash_rwdata_start+0xffff57e4>

20094608 <_mprec_log10>:
20094608:	defffe04 	addi	sp,sp,-8
2009460c:	dc000015 	stw	r16,0(sp)
20094610:	dfc00115 	stw	ra,4(sp)
20094614:	008005c4 	movi	r2,23
20094618:	2021883a 	mov	r16,r4
2009461c:	11000d0e 	bge	r2,r4,20094654 <_mprec_log10+0x4c>
20094620:	0005883a 	mov	r2,zero
20094624:	00cffc34 	movhi	r3,16368
20094628:	843fffc4 	addi	r16,r16,-1
2009462c:	1009883a 	mov	r4,r2
20094630:	180b883a 	mov	r5,r3
20094634:	000d883a 	mov	r6,zero
20094638:	01d00934 	movhi	r7,16420
2009463c:	0098ebc0 	call	20098ebc <__muldf3>
20094640:	803ff91e 	bne	r16,zero,20094628 <__flash_rwdata_start+0xffff583c>
20094644:	dfc00117 	ldw	ra,4(sp)
20094648:	dc000017 	ldw	r16,0(sp)
2009464c:	dec00204 	addi	sp,sp,8
20094650:	f800283a 	ret
20094654:	202090fa 	slli	r16,r4,3
20094658:	00800034 	movhi	r2,0
2009465c:	10821b04 	addi	r2,r2,2156
20094660:	1421883a 	add	r16,r2,r16
20094664:	80800017 	ldw	r2,0(r16)
20094668:	80c00117 	ldw	r3,4(r16)
2009466c:	dfc00117 	ldw	ra,4(sp)
20094670:	dc000017 	ldw	r16,0(sp)
20094674:	dec00204 	addi	sp,sp,8
20094678:	f800283a 	ret

2009467c <__copybits>:
2009467c:	297fffc4 	addi	r5,r5,-1
20094680:	280fd17a 	srai	r7,r5,5
20094684:	30c00417 	ldw	r3,16(r6)
20094688:	30800504 	addi	r2,r6,20
2009468c:	39c00044 	addi	r7,r7,1
20094690:	18c7883a 	add	r3,r3,r3
20094694:	39cf883a 	add	r7,r7,r7
20094698:	18c7883a 	add	r3,r3,r3
2009469c:	39cf883a 	add	r7,r7,r7
200946a0:	10c7883a 	add	r3,r2,r3
200946a4:	21cf883a 	add	r7,r4,r7
200946a8:	10c00d2e 	bgeu	r2,r3,200946e0 <__copybits+0x64>
200946ac:	200b883a 	mov	r5,r4
200946b0:	12000017 	ldw	r8,0(r2)
200946b4:	29400104 	addi	r5,r5,4
200946b8:	10800104 	addi	r2,r2,4
200946bc:	2a3fff15 	stw	r8,-4(r5)
200946c0:	10fffb36 	bltu	r2,r3,200946b0 <__flash_rwdata_start+0xffff58c4>
200946c4:	1985c83a 	sub	r2,r3,r6
200946c8:	10bffac4 	addi	r2,r2,-21
200946cc:	1004d0ba 	srli	r2,r2,2
200946d0:	10800044 	addi	r2,r2,1
200946d4:	1085883a 	add	r2,r2,r2
200946d8:	1085883a 	add	r2,r2,r2
200946dc:	2089883a 	add	r4,r4,r2
200946e0:	21c0032e 	bgeu	r4,r7,200946f0 <__copybits+0x74>
200946e4:	20000015 	stw	zero,0(r4)
200946e8:	21000104 	addi	r4,r4,4
200946ec:	21fffd36 	bltu	r4,r7,200946e4 <__flash_rwdata_start+0xffff58f8>
200946f0:	f800283a 	ret

200946f4 <__any_on>:
200946f4:	20c00417 	ldw	r3,16(r4)
200946f8:	2805d17a 	srai	r2,r5,5
200946fc:	21000504 	addi	r4,r4,20
20094700:	18800d0e 	bge	r3,r2,20094738 <__any_on+0x44>
20094704:	18c7883a 	add	r3,r3,r3
20094708:	18c7883a 	add	r3,r3,r3
2009470c:	20c7883a 	add	r3,r4,r3
20094710:	20c0192e 	bgeu	r4,r3,20094778 <__any_on+0x84>
20094714:	18bfff17 	ldw	r2,-4(r3)
20094718:	18ffff04 	addi	r3,r3,-4
2009471c:	1000041e 	bne	r2,zero,20094730 <__any_on+0x3c>
20094720:	20c0142e 	bgeu	r4,r3,20094774 <__any_on+0x80>
20094724:	18ffff04 	addi	r3,r3,-4
20094728:	19400017 	ldw	r5,0(r3)
2009472c:	283ffc26 	beq	r5,zero,20094720 <__flash_rwdata_start+0xffff5934>
20094730:	00800044 	movi	r2,1
20094734:	f800283a 	ret
20094738:	10c00a0e 	bge	r2,r3,20094764 <__any_on+0x70>
2009473c:	1085883a 	add	r2,r2,r2
20094740:	1085883a 	add	r2,r2,r2
20094744:	294007cc 	andi	r5,r5,31
20094748:	2087883a 	add	r3,r4,r2
2009474c:	283ff026 	beq	r5,zero,20094710 <__flash_rwdata_start+0xffff5924>
20094750:	19800017 	ldw	r6,0(r3)
20094754:	3144d83a 	srl	r2,r6,r5
20094758:	114a983a 	sll	r5,r2,r5
2009475c:	29bff41e 	bne	r5,r6,20094730 <__flash_rwdata_start+0xffff5944>
20094760:	003feb06 	br	20094710 <__flash_rwdata_start+0xffff5924>
20094764:	1085883a 	add	r2,r2,r2
20094768:	1085883a 	add	r2,r2,r2
2009476c:	2087883a 	add	r3,r4,r2
20094770:	003fe706 	br	20094710 <__flash_rwdata_start+0xffff5924>
20094774:	f800283a 	ret
20094778:	0005883a 	mov	r2,zero
2009477c:	f800283a 	ret

20094780 <_putc_r>:
20094780:	defffc04 	addi	sp,sp,-16
20094784:	dc000215 	stw	r16,8(sp)
20094788:	dfc00315 	stw	ra,12(sp)
2009478c:	2021883a 	mov	r16,r4
20094790:	20000226 	beq	r4,zero,2009479c <_putc_r+0x1c>
20094794:	20800e17 	ldw	r2,56(r4)
20094798:	10001b26 	beq	r2,zero,20094808 <_putc_r+0x88>
2009479c:	30800217 	ldw	r2,8(r6)
200947a0:	10bfffc4 	addi	r2,r2,-1
200947a4:	30800215 	stw	r2,8(r6)
200947a8:	10000a16 	blt	r2,zero,200947d4 <_putc_r+0x54>
200947ac:	30800017 	ldw	r2,0(r6)
200947b0:	11400005 	stb	r5,0(r2)
200947b4:	30800017 	ldw	r2,0(r6)
200947b8:	10c00044 	addi	r3,r2,1
200947bc:	30c00015 	stw	r3,0(r6)
200947c0:	10800003 	ldbu	r2,0(r2)
200947c4:	dfc00317 	ldw	ra,12(sp)
200947c8:	dc000217 	ldw	r16,8(sp)
200947cc:	dec00404 	addi	sp,sp,16
200947d0:	f800283a 	ret
200947d4:	30c00617 	ldw	r3,24(r6)
200947d8:	10c00616 	blt	r2,r3,200947f4 <_putc_r+0x74>
200947dc:	30800017 	ldw	r2,0(r6)
200947e0:	00c00284 	movi	r3,10
200947e4:	11400005 	stb	r5,0(r2)
200947e8:	30800017 	ldw	r2,0(r6)
200947ec:	11400003 	ldbu	r5,0(r2)
200947f0:	28fff11e 	bne	r5,r3,200947b8 <__flash_rwdata_start+0xffff59cc>
200947f4:	8009883a 	mov	r4,r16
200947f8:	dfc00317 	ldw	ra,12(sp)
200947fc:	dc000217 	ldw	r16,8(sp)
20094800:	dec00404 	addi	sp,sp,16
20094804:	00978301 	jmpi	20097830 <__swbuf_r>
20094808:	d9400015 	stw	r5,0(sp)
2009480c:	d9800115 	stw	r6,4(sp)
20094810:	00928580 	call	20092858 <__sinit>
20094814:	d9800117 	ldw	r6,4(sp)
20094818:	d9400017 	ldw	r5,0(sp)
2009481c:	003fdf06 	br	2009479c <__flash_rwdata_start+0xffff59b0>

20094820 <putc>:
20094820:	00800034 	movhi	r2,0
20094824:	defffc04 	addi	sp,sp,-16
20094828:	108a7104 	addi	r2,r2,10692
2009482c:	dc400115 	stw	r17,4(sp)
20094830:	14400017 	ldw	r17,0(r2)
20094834:	dc800215 	stw	r18,8(sp)
20094838:	dc000015 	stw	r16,0(sp)
2009483c:	dfc00315 	stw	ra,12(sp)
20094840:	2025883a 	mov	r18,r4
20094844:	2821883a 	mov	r16,r5
20094848:	88000226 	beq	r17,zero,20094854 <putc+0x34>
2009484c:	88800e17 	ldw	r2,56(r17)
20094850:	10001a26 	beq	r2,zero,200948bc <putc+0x9c>
20094854:	80800217 	ldw	r2,8(r16)
20094858:	10bfffc4 	addi	r2,r2,-1
2009485c:	80800215 	stw	r2,8(r16)
20094860:	10000c16 	blt	r2,zero,20094894 <putc+0x74>
20094864:	80800017 	ldw	r2,0(r16)
20094868:	14800005 	stb	r18,0(r2)
2009486c:	80800017 	ldw	r2,0(r16)
20094870:	10c00044 	addi	r3,r2,1
20094874:	80c00015 	stw	r3,0(r16)
20094878:	10800003 	ldbu	r2,0(r2)
2009487c:	dfc00317 	ldw	ra,12(sp)
20094880:	dc800217 	ldw	r18,8(sp)
20094884:	dc400117 	ldw	r17,4(sp)
20094888:	dc000017 	ldw	r16,0(sp)
2009488c:	dec00404 	addi	sp,sp,16
20094890:	f800283a 	ret
20094894:	80c00617 	ldw	r3,24(r16)
20094898:	10c00b16 	blt	r2,r3,200948c8 <putc+0xa8>
2009489c:	80800017 	ldw	r2,0(r16)
200948a0:	00c00284 	movi	r3,10
200948a4:	14800005 	stb	r18,0(r2)
200948a8:	80800017 	ldw	r2,0(r16)
200948ac:	11400003 	ldbu	r5,0(r2)
200948b0:	28ffef1e 	bne	r5,r3,20094870 <__flash_rwdata_start+0xffff5a84>
200948b4:	8809883a 	mov	r4,r17
200948b8:	00000506 	br	200948d0 <putc+0xb0>
200948bc:	8809883a 	mov	r4,r17
200948c0:	00928580 	call	20092858 <__sinit>
200948c4:	003fe306 	br	20094854 <__flash_rwdata_start+0xffff5a68>
200948c8:	8809883a 	mov	r4,r17
200948cc:	900b883a 	mov	r5,r18
200948d0:	800d883a 	mov	r6,r16
200948d4:	dfc00317 	ldw	ra,12(sp)
200948d8:	dc800217 	ldw	r18,8(sp)
200948dc:	dc400117 	ldw	r17,4(sp)
200948e0:	dc000017 	ldw	r16,0(sp)
200948e4:	dec00404 	addi	sp,sp,16
200948e8:	00978301 	jmpi	20097830 <__swbuf_r>

200948ec <_realloc_r>:
200948ec:	defff604 	addi	sp,sp,-40
200948f0:	dd000415 	stw	r20,16(sp)
200948f4:	dc400115 	stw	r17,4(sp)
200948f8:	dfc00915 	stw	ra,36(sp)
200948fc:	df000815 	stw	fp,32(sp)
20094900:	ddc00715 	stw	r23,28(sp)
20094904:	dd800615 	stw	r22,24(sp)
20094908:	dd400515 	stw	r21,20(sp)
2009490c:	dcc00315 	stw	r19,12(sp)
20094910:	dc800215 	stw	r18,8(sp)
20094914:	dc000015 	stw	r16,0(sp)
20094918:	2829883a 	mov	r20,r5
2009491c:	3023883a 	mov	r17,r6
20094920:	2800ad26 	beq	r5,zero,20094bd8 <_realloc_r+0x2ec>
20094924:	2025883a 	mov	r18,r4
20094928:	0099e3c0 	call	20099e3c <__malloc_lock>
2009492c:	a0ffff17 	ldw	r3,-4(r20)
20094930:	043fff04 	movi	r16,-4
20094934:	890002c4 	addi	r4,r17,11
20094938:	01c00584 	movi	r7,22
2009493c:	a57ffe04 	addi	r21,r20,-8
20094940:	1c20703a 	and	r16,r3,r16
20094944:	39001d2e 	bgeu	r7,r4,200949bc <_realloc_r+0xd0>
20094948:	05bffe04 	movi	r22,-8
2009494c:	25ac703a 	and	r22,r4,r22
20094950:	b00f883a 	mov	r7,r22
20094954:	b0006516 	blt	r22,zero,20094aec <_realloc_r+0x200>
20094958:	b4406436 	bltu	r22,r17,20094aec <_realloc_r+0x200>
2009495c:	81c01a0e 	bge	r16,r7,200949c8 <_realloc_r+0xdc>
20094960:	07000034 	movhi	fp,0
20094964:	e7048304 	addi	fp,fp,4620
20094968:	e1400217 	ldw	r5,8(fp)
2009496c:	ac11883a 	add	r8,r21,r16
20094970:	2a006226 	beq	r5,r8,20094afc <_realloc_r+0x210>
20094974:	41800117 	ldw	r6,4(r8)
20094978:	027fff84 	movi	r9,-2
2009497c:	3252703a 	and	r9,r6,r9
20094980:	4253883a 	add	r9,r8,r9
20094984:	49000117 	ldw	r4,4(r9)
20094988:	2100004c 	andi	r4,r4,1
2009498c:	2000281e 	bne	r4,zero,20094a30 <_realloc_r+0x144>
20094990:	00bfff04 	movi	r2,-4
20094994:	3084703a 	and	r2,r6,r2
20094998:	1409883a 	add	r4,r2,r16
2009499c:	21c05e16 	blt	r4,r7,20094b18 <_realloc_r+0x22c>
200949a0:	40800317 	ldw	r2,12(r8)
200949a4:	41400217 	ldw	r5,8(r8)
200949a8:	a023883a 	mov	r17,r20
200949ac:	2021883a 	mov	r16,r4
200949b0:	28800315 	stw	r2,12(r5)
200949b4:	11400215 	stw	r5,8(r2)
200949b8:	00000406 	br	200949cc <_realloc_r+0xe0>
200949bc:	01c00404 	movi	r7,16
200949c0:	382d883a 	mov	r22,r7
200949c4:	003fe406 	br	20094958 <__flash_rwdata_start+0xffff5b6c>
200949c8:	a023883a 	mov	r17,r20
200949cc:	858fc83a 	sub	r7,r16,r22
200949d0:	008003c4 	movi	r2,15
200949d4:	18c0004c 	andi	r3,r3,1
200949d8:	11c07236 	bltu	r2,r7,20094ba4 <_realloc_r+0x2b8>
200949dc:	1c06b03a 	or	r3,r3,r16
200949e0:	a8c00115 	stw	r3,4(r21)
200949e4:	ac21883a 	add	r16,r21,r16
200949e8:	80800117 	ldw	r2,4(r16)
200949ec:	10800054 	ori	r2,r2,1
200949f0:	80800115 	stw	r2,4(r16)
200949f4:	9009883a 	mov	r4,r18
200949f8:	0099e5c0 	call	20099e5c <__malloc_unlock>
200949fc:	8805883a 	mov	r2,r17
20094a00:	dfc00917 	ldw	ra,36(sp)
20094a04:	df000817 	ldw	fp,32(sp)
20094a08:	ddc00717 	ldw	r23,28(sp)
20094a0c:	dd800617 	ldw	r22,24(sp)
20094a10:	dd400517 	ldw	r21,20(sp)
20094a14:	dd000417 	ldw	r20,16(sp)
20094a18:	dcc00317 	ldw	r19,12(sp)
20094a1c:	dc800217 	ldw	r18,8(sp)
20094a20:	dc400117 	ldw	r17,4(sp)
20094a24:	dc000017 	ldw	r16,0(sp)
20094a28:	dec00a04 	addi	sp,sp,40
20094a2c:	f800283a 	ret
20094a30:	18c0004c 	andi	r3,r3,1
20094a34:	1800081e 	bne	r3,zero,20094a58 <_realloc_r+0x16c>
20094a38:	a4fffe17 	ldw	r19,-8(r20)
20094a3c:	00bfff04 	movi	r2,-4
20094a40:	ace7c83a 	sub	r19,r21,r19
20094a44:	98c00117 	ldw	r3,4(r19)
20094a48:	1886703a 	and	r3,r3,r2
20094a4c:	98000226 	beq	r19,zero,20094a58 <_realloc_r+0x16c>
20094a50:	1c2f883a 	add	r23,r3,r16
20094a54:	b9c06d0e 	bge	r23,r7,20094c0c <_realloc_r+0x320>
20094a58:	880b883a 	mov	r5,r17
20094a5c:	9009883a 	mov	r4,r18
20094a60:	008b6f40 	call	2008b6f4 <_malloc_r>
20094a64:	1023883a 	mov	r17,r2
20094a68:	1000ef26 	beq	r2,zero,20094e28 <_realloc_r+0x53c>
20094a6c:	a0ffff17 	ldw	r3,-4(r20)
20094a70:	113ffe04 	addi	r4,r2,-8
20094a74:	00bfff84 	movi	r2,-2
20094a78:	1884703a 	and	r2,r3,r2
20094a7c:	a885883a 	add	r2,r21,r2
20094a80:	2080bf26 	beq	r4,r2,20094d80 <_realloc_r+0x494>
20094a84:	81bfff04 	addi	r6,r16,-4
20094a88:	00800904 	movi	r2,36
20094a8c:	11808936 	bltu	r2,r6,20094cb4 <_realloc_r+0x3c8>
20094a90:	00c004c4 	movi	r3,19
20094a94:	19806c2e 	bgeu	r3,r6,20094c48 <_realloc_r+0x35c>
20094a98:	a0c00017 	ldw	r3,0(r20)
20094a9c:	88c00015 	stw	r3,0(r17)
20094aa0:	a0c00117 	ldw	r3,4(r20)
20094aa4:	88c00115 	stw	r3,4(r17)
20094aa8:	00c006c4 	movi	r3,27
20094aac:	1980ac36 	bltu	r3,r6,20094d60 <_realloc_r+0x474>
20094ab0:	88800204 	addi	r2,r17,8
20094ab4:	a0c00204 	addi	r3,r20,8
20094ab8:	19000017 	ldw	r4,0(r3)
20094abc:	11000015 	stw	r4,0(r2)
20094ac0:	19000117 	ldw	r4,4(r3)
20094ac4:	11000115 	stw	r4,4(r2)
20094ac8:	18c00217 	ldw	r3,8(r3)
20094acc:	10c00215 	stw	r3,8(r2)
20094ad0:	a00b883a 	mov	r5,r20
20094ad4:	9009883a 	mov	r4,r18
20094ad8:	00929cc0 	call	200929cc <_free_r>
20094adc:	9009883a 	mov	r4,r18
20094ae0:	0099e5c0 	call	20099e5c <__malloc_unlock>
20094ae4:	8805883a 	mov	r2,r17
20094ae8:	003fc506 	br	20094a00 <__flash_rwdata_start+0xffff5c14>
20094aec:	00800304 	movi	r2,12
20094af0:	90800015 	stw	r2,0(r18)
20094af4:	0005883a 	mov	r2,zero
20094af8:	003fc106 	br	20094a00 <__flash_rwdata_start+0xffff5c14>
20094afc:	29800117 	ldw	r6,4(r5)
20094b00:	00bfff04 	movi	r2,-4
20094b04:	b1000404 	addi	r4,r22,16
20094b08:	3084703a 	and	r2,r6,r2
20094b0c:	140d883a 	add	r6,r2,r16
20094b10:	31005b0e 	bge	r6,r4,20094c80 <_realloc_r+0x394>
20094b14:	2811883a 	mov	r8,r5
20094b18:	18c0004c 	andi	r3,r3,1
20094b1c:	183fce1e 	bne	r3,zero,20094a58 <__flash_rwdata_start+0xffff5c6c>
20094b20:	a4fffe17 	ldw	r19,-8(r20)
20094b24:	00ffff04 	movi	r3,-4
20094b28:	ace7c83a 	sub	r19,r21,r19
20094b2c:	99000117 	ldw	r4,4(r19)
20094b30:	20c6703a 	and	r3,r4,r3
20094b34:	403fc526 	beq	r8,zero,20094a4c <__flash_rwdata_start+0xffff5c60>
20094b38:	1c2f883a 	add	r23,r3,r16
20094b3c:	b8af883a 	add	r23,r23,r2
20094b40:	41406026 	beq	r8,r5,20094cc4 <_realloc_r+0x3d8>
20094b44:	b9ffc116 	blt	r23,r7,20094a4c <__flash_rwdata_start+0xffff5c60>
20094b48:	40c00217 	ldw	r3,8(r8)
20094b4c:	40800317 	ldw	r2,12(r8)
20094b50:	81bfff04 	addi	r6,r16,-4
20094b54:	01000904 	movi	r4,36
20094b58:	18800315 	stw	r2,12(r3)
20094b5c:	10c00215 	stw	r3,8(r2)
20094b60:	99400217 	ldw	r5,8(r19)
20094b64:	98c00317 	ldw	r3,12(r19)
20094b68:	9c400204 	addi	r17,r19,8
20094b6c:	28c00315 	stw	r3,12(r5)
20094b70:	19400215 	stw	r5,8(r3)
20094b74:	21802d36 	bltu	r4,r6,20094c2c <_realloc_r+0x340>
20094b78:	008004c4 	movi	r2,19
20094b7c:	1180352e 	bgeu	r2,r6,20094c54 <_realloc_r+0x368>
20094b80:	a0800017 	ldw	r2,0(r20)
20094b84:	98800215 	stw	r2,8(r19)
20094b88:	a0800117 	ldw	r2,4(r20)
20094b8c:	98800315 	stw	r2,12(r19)
20094b90:	008006c4 	movi	r2,27
20094b94:	11808036 	bltu	r2,r6,20094d98 <_realloc_r+0x4ac>
20094b98:	98c00404 	addi	r3,r19,16
20094b9c:	a5000204 	addi	r20,r20,8
20094ba0:	00002d06 	br	20094c58 <_realloc_r+0x36c>
20094ba4:	1d86b03a 	or	r3,r3,r22
20094ba8:	ad8b883a 	add	r5,r21,r22
20094bac:	a8c00115 	stw	r3,4(r21)
20094bb0:	38800054 	ori	r2,r7,1
20094bb4:	28800115 	stw	r2,4(r5)
20094bb8:	29cf883a 	add	r7,r5,r7
20094bbc:	38800117 	ldw	r2,4(r7)
20094bc0:	9009883a 	mov	r4,r18
20094bc4:	29400204 	addi	r5,r5,8
20094bc8:	10800054 	ori	r2,r2,1
20094bcc:	38800115 	stw	r2,4(r7)
20094bd0:	00929cc0 	call	200929cc <_free_r>
20094bd4:	003f8706 	br	200949f4 <__flash_rwdata_start+0xffff5c08>
20094bd8:	300b883a 	mov	r5,r6
20094bdc:	dfc00917 	ldw	ra,36(sp)
20094be0:	df000817 	ldw	fp,32(sp)
20094be4:	ddc00717 	ldw	r23,28(sp)
20094be8:	dd800617 	ldw	r22,24(sp)
20094bec:	dd400517 	ldw	r21,20(sp)
20094bf0:	dd000417 	ldw	r20,16(sp)
20094bf4:	dcc00317 	ldw	r19,12(sp)
20094bf8:	dc800217 	ldw	r18,8(sp)
20094bfc:	dc400117 	ldw	r17,4(sp)
20094c00:	dc000017 	ldw	r16,0(sp)
20094c04:	dec00a04 	addi	sp,sp,40
20094c08:	008b6f41 	jmpi	2008b6f4 <_malloc_r>
20094c0c:	98800317 	ldw	r2,12(r19)
20094c10:	98c00217 	ldw	r3,8(r19)
20094c14:	81bfff04 	addi	r6,r16,-4
20094c18:	01000904 	movi	r4,36
20094c1c:	18800315 	stw	r2,12(r3)
20094c20:	10c00215 	stw	r3,8(r2)
20094c24:	9c400204 	addi	r17,r19,8
20094c28:	21bfd32e 	bgeu	r4,r6,20094b78 <__flash_rwdata_start+0xffff5d8c>
20094c2c:	8809883a 	mov	r4,r17
20094c30:	a00b883a 	mov	r5,r20
20094c34:	00936840 	call	20093684 <memmove>
20094c38:	98c00117 	ldw	r3,4(r19)
20094c3c:	b821883a 	mov	r16,r23
20094c40:	982b883a 	mov	r21,r19
20094c44:	003f6106 	br	200949cc <__flash_rwdata_start+0xffff5be0>
20094c48:	8805883a 	mov	r2,r17
20094c4c:	a007883a 	mov	r3,r20
20094c50:	003f9906 	br	20094ab8 <__flash_rwdata_start+0xffff5ccc>
20094c54:	8807883a 	mov	r3,r17
20094c58:	a0800017 	ldw	r2,0(r20)
20094c5c:	b821883a 	mov	r16,r23
20094c60:	982b883a 	mov	r21,r19
20094c64:	18800015 	stw	r2,0(r3)
20094c68:	a0800117 	ldw	r2,4(r20)
20094c6c:	18800115 	stw	r2,4(r3)
20094c70:	a0800217 	ldw	r2,8(r20)
20094c74:	18800215 	stw	r2,8(r3)
20094c78:	98c00117 	ldw	r3,4(r19)
20094c7c:	003f5306 	br	200949cc <__flash_rwdata_start+0xffff5be0>
20094c80:	adab883a 	add	r21,r21,r22
20094c84:	3585c83a 	sub	r2,r6,r22
20094c88:	e5400215 	stw	r21,8(fp)
20094c8c:	10800054 	ori	r2,r2,1
20094c90:	a8800115 	stw	r2,4(r21)
20094c94:	a0bfff17 	ldw	r2,-4(r20)
20094c98:	9009883a 	mov	r4,r18
20094c9c:	1080004c 	andi	r2,r2,1
20094ca0:	b0acb03a 	or	r22,r22,r2
20094ca4:	a5bfff15 	stw	r22,-4(r20)
20094ca8:	0099e5c0 	call	20099e5c <__malloc_unlock>
20094cac:	a005883a 	mov	r2,r20
20094cb0:	003f5306 	br	20094a00 <__flash_rwdata_start+0xffff5c14>
20094cb4:	8809883a 	mov	r4,r17
20094cb8:	a00b883a 	mov	r5,r20
20094cbc:	00936840 	call	20093684 <memmove>
20094cc0:	003f8306 	br	20094ad0 <__flash_rwdata_start+0xffff5ce4>
20094cc4:	b0800404 	addi	r2,r22,16
20094cc8:	b8bf6016 	blt	r23,r2,20094a4c <__flash_rwdata_start+0xffff5c60>
20094ccc:	98800317 	ldw	r2,12(r19)
20094cd0:	98c00217 	ldw	r3,8(r19)
20094cd4:	81bfff04 	addi	r6,r16,-4
20094cd8:	01000904 	movi	r4,36
20094cdc:	18800315 	stw	r2,12(r3)
20094ce0:	10c00215 	stw	r3,8(r2)
20094ce4:	9c400204 	addi	r17,r19,8
20094ce8:	21804336 	bltu	r4,r6,20094df8 <_realloc_r+0x50c>
20094cec:	008004c4 	movi	r2,19
20094cf0:	11803f2e 	bgeu	r2,r6,20094df0 <_realloc_r+0x504>
20094cf4:	a0800017 	ldw	r2,0(r20)
20094cf8:	98800215 	stw	r2,8(r19)
20094cfc:	a0800117 	ldw	r2,4(r20)
20094d00:	98800315 	stw	r2,12(r19)
20094d04:	008006c4 	movi	r2,27
20094d08:	11803f36 	bltu	r2,r6,20094e08 <_realloc_r+0x51c>
20094d0c:	98800404 	addi	r2,r19,16
20094d10:	a5000204 	addi	r20,r20,8
20094d14:	a0c00017 	ldw	r3,0(r20)
20094d18:	10c00015 	stw	r3,0(r2)
20094d1c:	a0c00117 	ldw	r3,4(r20)
20094d20:	10c00115 	stw	r3,4(r2)
20094d24:	a0c00217 	ldw	r3,8(r20)
20094d28:	10c00215 	stw	r3,8(r2)
20094d2c:	9d87883a 	add	r3,r19,r22
20094d30:	bd85c83a 	sub	r2,r23,r22
20094d34:	e0c00215 	stw	r3,8(fp)
20094d38:	10800054 	ori	r2,r2,1
20094d3c:	18800115 	stw	r2,4(r3)
20094d40:	98800117 	ldw	r2,4(r19)
20094d44:	9009883a 	mov	r4,r18
20094d48:	1080004c 	andi	r2,r2,1
20094d4c:	b0acb03a 	or	r22,r22,r2
20094d50:	9d800115 	stw	r22,4(r19)
20094d54:	0099e5c0 	call	20099e5c <__malloc_unlock>
20094d58:	8805883a 	mov	r2,r17
20094d5c:	003f2806 	br	20094a00 <__flash_rwdata_start+0xffff5c14>
20094d60:	a0c00217 	ldw	r3,8(r20)
20094d64:	88c00215 	stw	r3,8(r17)
20094d68:	a0c00317 	ldw	r3,12(r20)
20094d6c:	88c00315 	stw	r3,12(r17)
20094d70:	30801126 	beq	r6,r2,20094db8 <_realloc_r+0x4cc>
20094d74:	88800404 	addi	r2,r17,16
20094d78:	a0c00404 	addi	r3,r20,16
20094d7c:	003f4e06 	br	20094ab8 <__flash_rwdata_start+0xffff5ccc>
20094d80:	893fff17 	ldw	r4,-4(r17)
20094d84:	00bfff04 	movi	r2,-4
20094d88:	a023883a 	mov	r17,r20
20094d8c:	2084703a 	and	r2,r4,r2
20094d90:	80a1883a 	add	r16,r16,r2
20094d94:	003f0d06 	br	200949cc <__flash_rwdata_start+0xffff5be0>
20094d98:	a0800217 	ldw	r2,8(r20)
20094d9c:	98800415 	stw	r2,16(r19)
20094da0:	a0800317 	ldw	r2,12(r20)
20094da4:	98800515 	stw	r2,20(r19)
20094da8:	31000a26 	beq	r6,r4,20094dd4 <_realloc_r+0x4e8>
20094dac:	98c00604 	addi	r3,r19,24
20094db0:	a5000404 	addi	r20,r20,16
20094db4:	003fa806 	br	20094c58 <__flash_rwdata_start+0xffff5e6c>
20094db8:	a1000417 	ldw	r4,16(r20)
20094dbc:	88800604 	addi	r2,r17,24
20094dc0:	a0c00604 	addi	r3,r20,24
20094dc4:	89000415 	stw	r4,16(r17)
20094dc8:	a1000517 	ldw	r4,20(r20)
20094dcc:	89000515 	stw	r4,20(r17)
20094dd0:	003f3906 	br	20094ab8 <__flash_rwdata_start+0xffff5ccc>
20094dd4:	a0800417 	ldw	r2,16(r20)
20094dd8:	a5000604 	addi	r20,r20,24
20094ddc:	98c00804 	addi	r3,r19,32
20094de0:	98800615 	stw	r2,24(r19)
20094de4:	a0bfff17 	ldw	r2,-4(r20)
20094de8:	98800715 	stw	r2,28(r19)
20094dec:	003f9a06 	br	20094c58 <__flash_rwdata_start+0xffff5e6c>
20094df0:	8805883a 	mov	r2,r17
20094df4:	003fc706 	br	20094d14 <__flash_rwdata_start+0xffff5f28>
20094df8:	8809883a 	mov	r4,r17
20094dfc:	a00b883a 	mov	r5,r20
20094e00:	00936840 	call	20093684 <memmove>
20094e04:	003fc906 	br	20094d2c <__flash_rwdata_start+0xffff5f40>
20094e08:	a0800217 	ldw	r2,8(r20)
20094e0c:	98800415 	stw	r2,16(r19)
20094e10:	a0800317 	ldw	r2,12(r20)
20094e14:	98800515 	stw	r2,20(r19)
20094e18:	31000726 	beq	r6,r4,20094e38 <_realloc_r+0x54c>
20094e1c:	98800604 	addi	r2,r19,24
20094e20:	a5000404 	addi	r20,r20,16
20094e24:	003fbb06 	br	20094d14 <__flash_rwdata_start+0xffff5f28>
20094e28:	9009883a 	mov	r4,r18
20094e2c:	0099e5c0 	call	20099e5c <__malloc_unlock>
20094e30:	0005883a 	mov	r2,zero
20094e34:	003ef206 	br	20094a00 <__flash_rwdata_start+0xffff5c14>
20094e38:	a0c00417 	ldw	r3,16(r20)
20094e3c:	a5000604 	addi	r20,r20,24
20094e40:	98800804 	addi	r2,r19,32
20094e44:	98c00615 	stw	r3,24(r19)
20094e48:	a0ffff17 	ldw	r3,-4(r20)
20094e4c:	98c00715 	stw	r3,28(r19)
20094e50:	003fb006 	br	20094d14 <__flash_rwdata_start+0xffff5f28>

20094e54 <__fpclassifyd>:
20094e54:	00a00034 	movhi	r2,32768
20094e58:	10bfffc4 	addi	r2,r2,-1
20094e5c:	2884703a 	and	r2,r5,r2
20094e60:	10000726 	beq	r2,zero,20094e80 <__fpclassifyd+0x2c>
20094e64:	00fffc34 	movhi	r3,65520
20094e68:	019ff834 	movhi	r6,32736
20094e6c:	28c7883a 	add	r3,r5,r3
20094e70:	31bfffc4 	addi	r6,r6,-1
20094e74:	30c00536 	bltu	r6,r3,20094e8c <__fpclassifyd+0x38>
20094e78:	00800104 	movi	r2,4
20094e7c:	f800283a 	ret
20094e80:	2000021e 	bne	r4,zero,20094e8c <__fpclassifyd+0x38>
20094e84:	00800084 	movi	r2,2
20094e88:	f800283a 	ret
20094e8c:	00dffc34 	movhi	r3,32752
20094e90:	019ff834 	movhi	r6,32736
20094e94:	28cb883a 	add	r5,r5,r3
20094e98:	31bfffc4 	addi	r6,r6,-1
20094e9c:	317ff62e 	bgeu	r6,r5,20094e78 <__flash_rwdata_start+0xffff608c>
20094ea0:	01400434 	movhi	r5,16
20094ea4:	297fffc4 	addi	r5,r5,-1
20094ea8:	28800236 	bltu	r5,r2,20094eb4 <__fpclassifyd+0x60>
20094eac:	008000c4 	movi	r2,3
20094eb0:	f800283a 	ret
20094eb4:	10c00226 	beq	r2,r3,20094ec0 <__fpclassifyd+0x6c>
20094eb8:	0005883a 	mov	r2,zero
20094ebc:	f800283a 	ret
20094ec0:	2005003a 	cmpeq	r2,r4,zero
20094ec4:	f800283a 	ret

20094ec8 <__sread>:
20094ec8:	defffe04 	addi	sp,sp,-8
20094ecc:	dc000015 	stw	r16,0(sp)
20094ed0:	2821883a 	mov	r16,r5
20094ed4:	2940038f 	ldh	r5,14(r5)
20094ed8:	dfc00115 	stw	ra,4(sp)
20094edc:	0097ee40 	call	20097ee4 <_read_r>
20094ee0:	10000716 	blt	r2,zero,20094f00 <__sread+0x38>
20094ee4:	80c01417 	ldw	r3,80(r16)
20094ee8:	1887883a 	add	r3,r3,r2
20094eec:	80c01415 	stw	r3,80(r16)
20094ef0:	dfc00117 	ldw	ra,4(sp)
20094ef4:	dc000017 	ldw	r16,0(sp)
20094ef8:	dec00204 	addi	sp,sp,8
20094efc:	f800283a 	ret
20094f00:	80c0030b 	ldhu	r3,12(r16)
20094f04:	18fbffcc 	andi	r3,r3,61439
20094f08:	80c0030d 	sth	r3,12(r16)
20094f0c:	dfc00117 	ldw	ra,4(sp)
20094f10:	dc000017 	ldw	r16,0(sp)
20094f14:	dec00204 	addi	sp,sp,8
20094f18:	f800283a 	ret

20094f1c <__seofread>:
20094f1c:	0005883a 	mov	r2,zero
20094f20:	f800283a 	ret

20094f24 <__swrite>:
20094f24:	2880030b 	ldhu	r2,12(r5)
20094f28:	defffb04 	addi	sp,sp,-20
20094f2c:	dcc00315 	stw	r19,12(sp)
20094f30:	dc800215 	stw	r18,8(sp)
20094f34:	dc400115 	stw	r17,4(sp)
20094f38:	dc000015 	stw	r16,0(sp)
20094f3c:	dfc00415 	stw	ra,16(sp)
20094f40:	10c0400c 	andi	r3,r2,256
20094f44:	2821883a 	mov	r16,r5
20094f48:	2027883a 	mov	r19,r4
20094f4c:	3025883a 	mov	r18,r6
20094f50:	3823883a 	mov	r17,r7
20094f54:	18000526 	beq	r3,zero,20094f6c <__swrite+0x48>
20094f58:	2940038f 	ldh	r5,14(r5)
20094f5c:	000d883a 	mov	r6,zero
20094f60:	01c00084 	movi	r7,2
20094f64:	0097e880 	call	20097e88 <_lseek_r>
20094f68:	8080030b 	ldhu	r2,12(r16)
20094f6c:	8140038f 	ldh	r5,14(r16)
20094f70:	10bbffcc 	andi	r2,r2,61439
20094f74:	9809883a 	mov	r4,r19
20094f78:	900d883a 	mov	r6,r18
20094f7c:	880f883a 	mov	r7,r17
20094f80:	8080030d 	sth	r2,12(r16)
20094f84:	dfc00417 	ldw	ra,16(sp)
20094f88:	dcc00317 	ldw	r19,12(sp)
20094f8c:	dc800217 	ldw	r18,8(sp)
20094f90:	dc400117 	ldw	r17,4(sp)
20094f94:	dc000017 	ldw	r16,0(sp)
20094f98:	dec00504 	addi	sp,sp,20
20094f9c:	00979841 	jmpi	20097984 <_write_r>

20094fa0 <__sseek>:
20094fa0:	defffe04 	addi	sp,sp,-8
20094fa4:	dc000015 	stw	r16,0(sp)
20094fa8:	2821883a 	mov	r16,r5
20094fac:	2940038f 	ldh	r5,14(r5)
20094fb0:	dfc00115 	stw	ra,4(sp)
20094fb4:	0097e880 	call	20097e88 <_lseek_r>
20094fb8:	00ffffc4 	movi	r3,-1
20094fbc:	10c00826 	beq	r2,r3,20094fe0 <__sseek+0x40>
20094fc0:	80c0030b 	ldhu	r3,12(r16)
20094fc4:	80801415 	stw	r2,80(r16)
20094fc8:	18c40014 	ori	r3,r3,4096
20094fcc:	80c0030d 	sth	r3,12(r16)
20094fd0:	dfc00117 	ldw	ra,4(sp)
20094fd4:	dc000017 	ldw	r16,0(sp)
20094fd8:	dec00204 	addi	sp,sp,8
20094fdc:	f800283a 	ret
20094fe0:	80c0030b 	ldhu	r3,12(r16)
20094fe4:	18fbffcc 	andi	r3,r3,61439
20094fe8:	80c0030d 	sth	r3,12(r16)
20094fec:	dfc00117 	ldw	ra,4(sp)
20094ff0:	dc000017 	ldw	r16,0(sp)
20094ff4:	dec00204 	addi	sp,sp,8
20094ff8:	f800283a 	ret

20094ffc <__sclose>:
20094ffc:	2940038f 	ldh	r5,14(r5)
20095000:	00979e01 	jmpi	200979e0 <_close_r>

20095004 <strchr>:
20095004:	2ac03fcc 	andi	r11,r5,255
20095008:	2815883a 	mov	r10,r5
2009500c:	208000cc 	andi	r2,r4,3
20095010:	58003726 	beq	r11,zero,200950f0 <strchr+0xec>
20095014:	10000b26 	beq	r2,zero,20095044 <strchr+0x40>
20095018:	20800003 	ldbu	r2,0(r4)
2009501c:	10003226 	beq	r2,zero,200950e8 <strchr+0xe4>
20095020:	28c03fcc 	andi	r3,r5,255
20095024:	5880041e 	bne	r11,r2,20095038 <strchr+0x34>
20095028:	00004d06 	br	20095160 <strchr+0x15c>
2009502c:	20800003 	ldbu	r2,0(r4)
20095030:	10002d26 	beq	r2,zero,200950e8 <strchr+0xe4>
20095034:	18804a26 	beq	r3,r2,20095160 <strchr+0x15c>
20095038:	21000044 	addi	r4,r4,1
2009503c:	208000cc 	andi	r2,r4,3
20095040:	103ffa1e 	bne	r2,zero,2009502c <__flash_rwdata_start+0xffff6240>
20095044:	29403fcc 	andi	r5,r5,255
20095048:	280e923a 	slli	r7,r5,8
2009504c:	20800017 	ldw	r2,0(r4)
20095050:	01bfbff4 	movhi	r6,65279
20095054:	394ab03a 	or	r5,r7,r5
20095058:	280e943a 	slli	r7,r5,16
2009505c:	31bfbfc4 	addi	r6,r6,-257
20095060:	0090303a 	nor	r8,zero,r2
20095064:	394eb03a 	or	r7,r7,r5
20095068:	1187883a 	add	r3,r2,r6
2009506c:	11c4f03a 	xor	r2,r2,r7
20095070:	008a303a 	nor	r5,zero,r2
20095074:	1185883a 	add	r2,r2,r6
20095078:	03202074 	movhi	r12,32897
2009507c:	2884703a 	and	r2,r5,r2
20095080:	40c6703a 	and	r3,r8,r3
20095084:	63202004 	addi	r12,r12,-32640
20095088:	10c4b03a 	or	r2,r2,r3
2009508c:	1304703a 	and	r2,r2,r12
20095090:	10000c1e 	bne	r2,zero,200950c4 <strchr+0xc0>
20095094:	21000104 	addi	r4,r4,4
20095098:	20800017 	ldw	r2,0(r4)
2009509c:	3886f03a 	xor	r3,r7,r2
200950a0:	00d2303a 	nor	r9,zero,r3
200950a4:	198b883a 	add	r5,r3,r6
200950a8:	0090303a 	nor	r8,zero,r2
200950ac:	1187883a 	add	r3,r2,r6
200950b0:	494a703a 	and	r5,r9,r5
200950b4:	40c4703a 	and	r2,r8,r3
200950b8:	2884b03a 	or	r2,r5,r2
200950bc:	1304703a 	and	r2,r2,r12
200950c0:	103ff426 	beq	r2,zero,20095094 <__flash_rwdata_start+0xffff62a8>
200950c4:	20800003 	ldbu	r2,0(r4)
200950c8:	10000726 	beq	r2,zero,200950e8 <strchr+0xe4>
200950cc:	58802426 	beq	r11,r2,20095160 <strchr+0x15c>
200950d0:	50c03fcc 	andi	r3,r10,255
200950d4:	00000106 	br	200950dc <strchr+0xd8>
200950d8:	18802126 	beq	r3,r2,20095160 <strchr+0x15c>
200950dc:	21000044 	addi	r4,r4,1
200950e0:	20800003 	ldbu	r2,0(r4)
200950e4:	103ffc1e 	bne	r2,zero,200950d8 <__flash_rwdata_start+0xffff62ec>
200950e8:	0005883a 	mov	r2,zero
200950ec:	f800283a 	ret
200950f0:	10000526 	beq	r2,zero,20095108 <strchr+0x104>
200950f4:	20800003 	ldbu	r2,0(r4)
200950f8:	10001926 	beq	r2,zero,20095160 <strchr+0x15c>
200950fc:	21000044 	addi	r4,r4,1
20095100:	208000cc 	andi	r2,r4,3
20095104:	103ffb1e 	bne	r2,zero,200950f4 <__flash_rwdata_start+0xffff6308>
20095108:	20800017 	ldw	r2,0(r4)
2009510c:	01bfbff4 	movhi	r6,65279
20095110:	31bfbfc4 	addi	r6,r6,-257
20095114:	0086303a 	nor	r3,zero,r2
20095118:	01602074 	movhi	r5,32897
2009511c:	1185883a 	add	r2,r2,r6
20095120:	29602004 	addi	r5,r5,-32640
20095124:	10c4703a 	and	r2,r2,r3
20095128:	1144703a 	and	r2,r2,r5
2009512c:	10000a1e 	bne	r2,zero,20095158 <strchr+0x154>
20095130:	21000104 	addi	r4,r4,4
20095134:	20800017 	ldw	r2,0(r4)
20095138:	1187883a 	add	r3,r2,r6
2009513c:	0084303a 	nor	r2,zero,r2
20095140:	1884703a 	and	r2,r3,r2
20095144:	1144703a 	and	r2,r2,r5
20095148:	103ff926 	beq	r2,zero,20095130 <__flash_rwdata_start+0xffff6344>
2009514c:	20800003 	ldbu	r2,0(r4)
20095150:	10000326 	beq	r2,zero,20095160 <strchr+0x15c>
20095154:	21000044 	addi	r4,r4,1
20095158:	20800003 	ldbu	r2,0(r4)
2009515c:	103ffd1e 	bne	r2,zero,20095154 <__flash_rwdata_start+0xffff6368>
20095160:	2005883a 	mov	r2,r4
20095164:	f800283a 	ret

20095168 <__ssprint_r>:
20095168:	30800217 	ldw	r2,8(r6)
2009516c:	defff604 	addi	sp,sp,-40
20095170:	ddc00715 	stw	r23,28(sp)
20095174:	dc800215 	stw	r18,8(sp)
20095178:	dfc00915 	stw	ra,36(sp)
2009517c:	df000815 	stw	fp,32(sp)
20095180:	dd800615 	stw	r22,24(sp)
20095184:	dd400515 	stw	r21,20(sp)
20095188:	dd000415 	stw	r20,16(sp)
2009518c:	dcc00315 	stw	r19,12(sp)
20095190:	dc400115 	stw	r17,4(sp)
20095194:	dc000015 	stw	r16,0(sp)
20095198:	3025883a 	mov	r18,r6
2009519c:	35c00017 	ldw	r23,0(r6)
200951a0:	10005626 	beq	r2,zero,200952fc <__ssprint_r+0x194>
200951a4:	2027883a 	mov	r19,r4
200951a8:	28800217 	ldw	r2,8(r5)
200951ac:	29000017 	ldw	r4,0(r5)
200951b0:	2823883a 	mov	r17,r5
200951b4:	0039883a 	mov	fp,zero
200951b8:	0021883a 	mov	r16,zero
200951bc:	80003926 	beq	r16,zero,200952a4 <__ssprint_r+0x13c>
200951c0:	102b883a 	mov	r21,r2
200951c4:	102d883a 	mov	r22,r2
200951c8:	80803a36 	bltu	r16,r2,200952b4 <__ssprint_r+0x14c>
200951cc:	88c0030b 	ldhu	r3,12(r17)
200951d0:	1881200c 	andi	r2,r3,1152
200951d4:	10002626 	beq	r2,zero,20095270 <__ssprint_r+0x108>
200951d8:	88800517 	ldw	r2,20(r17)
200951dc:	89400417 	ldw	r5,16(r17)
200951e0:	81c00044 	addi	r7,r16,1
200951e4:	108d883a 	add	r6,r2,r2
200951e8:	3085883a 	add	r2,r6,r2
200951ec:	100cd7fa 	srli	r6,r2,31
200951f0:	216dc83a 	sub	r22,r4,r5
200951f4:	3d89883a 	add	r4,r7,r22
200951f8:	3085883a 	add	r2,r6,r2
200951fc:	102bd07a 	srai	r21,r2,1
20095200:	a80d883a 	mov	r6,r21
20095204:	a900022e 	bgeu	r21,r4,20095210 <__ssprint_r+0xa8>
20095208:	202b883a 	mov	r21,r4
2009520c:	200d883a 	mov	r6,r4
20095210:	18c1000c 	andi	r3,r3,1024
20095214:	9809883a 	mov	r4,r19
20095218:	18002926 	beq	r3,zero,200952c0 <__ssprint_r+0x158>
2009521c:	300b883a 	mov	r5,r6
20095220:	008b6f40 	call	2008b6f4 <_malloc_r>
20095224:	1029883a 	mov	r20,r2
20095228:	10002b26 	beq	r2,zero,200952d8 <__ssprint_r+0x170>
2009522c:	89400417 	ldw	r5,16(r17)
20095230:	1009883a 	mov	r4,r2
20095234:	b00d883a 	mov	r6,r22
20095238:	008bf180 	call	2008bf18 <memcpy>
2009523c:	8880030b 	ldhu	r2,12(r17)
20095240:	00fedfc4 	movi	r3,-1153
20095244:	10c4703a 	and	r2,r2,r3
20095248:	10802014 	ori	r2,r2,128
2009524c:	8880030d 	sth	r2,12(r17)
20095250:	a589883a 	add	r4,r20,r22
20095254:	adadc83a 	sub	r22,r21,r22
20095258:	8d400515 	stw	r21,20(r17)
2009525c:	8d800215 	stw	r22,8(r17)
20095260:	8d000415 	stw	r20,16(r17)
20095264:	89000015 	stw	r4,0(r17)
20095268:	802b883a 	mov	r21,r16
2009526c:	802d883a 	mov	r22,r16
20095270:	e00b883a 	mov	r5,fp
20095274:	b00d883a 	mov	r6,r22
20095278:	00936840 	call	20093684 <memmove>
2009527c:	88800217 	ldw	r2,8(r17)
20095280:	89000017 	ldw	r4,0(r17)
20095284:	90c00217 	ldw	r3,8(r18)
20095288:	1545c83a 	sub	r2,r2,r21
2009528c:	2589883a 	add	r4,r4,r22
20095290:	88800215 	stw	r2,8(r17)
20095294:	89000015 	stw	r4,0(r17)
20095298:	1c21c83a 	sub	r16,r3,r16
2009529c:	94000215 	stw	r16,8(r18)
200952a0:	80001626 	beq	r16,zero,200952fc <__ssprint_r+0x194>
200952a4:	bf000017 	ldw	fp,0(r23)
200952a8:	bc000117 	ldw	r16,4(r23)
200952ac:	bdc00204 	addi	r23,r23,8
200952b0:	003fc206 	br	200951bc <__flash_rwdata_start+0xffff63d0>
200952b4:	802b883a 	mov	r21,r16
200952b8:	802d883a 	mov	r22,r16
200952bc:	003fec06 	br	20095270 <__flash_rwdata_start+0xffff6484>
200952c0:	00948ec0 	call	200948ec <_realloc_r>
200952c4:	1029883a 	mov	r20,r2
200952c8:	103fe11e 	bne	r2,zero,20095250 <__flash_rwdata_start+0xffff6464>
200952cc:	89400417 	ldw	r5,16(r17)
200952d0:	9809883a 	mov	r4,r19
200952d4:	00929cc0 	call	200929cc <_free_r>
200952d8:	88c0030b 	ldhu	r3,12(r17)
200952dc:	00800304 	movi	r2,12
200952e0:	98800015 	stw	r2,0(r19)
200952e4:	18c01014 	ori	r3,r3,64
200952e8:	88c0030d 	sth	r3,12(r17)
200952ec:	00bfffc4 	movi	r2,-1
200952f0:	90000215 	stw	zero,8(r18)
200952f4:	90000115 	stw	zero,4(r18)
200952f8:	00000206 	br	20095304 <__ssprint_r+0x19c>
200952fc:	90000115 	stw	zero,4(r18)
20095300:	0005883a 	mov	r2,zero
20095304:	dfc00917 	ldw	ra,36(sp)
20095308:	df000817 	ldw	fp,32(sp)
2009530c:	ddc00717 	ldw	r23,28(sp)
20095310:	dd800617 	ldw	r22,24(sp)
20095314:	dd400517 	ldw	r21,20(sp)
20095318:	dd000417 	ldw	r20,16(sp)
2009531c:	dcc00317 	ldw	r19,12(sp)
20095320:	dc800217 	ldw	r18,8(sp)
20095324:	dc400117 	ldw	r17,4(sp)
20095328:	dc000017 	ldw	r16,0(sp)
2009532c:	dec00a04 	addi	sp,sp,40
20095330:	f800283a 	ret

20095334 <___svfiprintf_internal_r>:
20095334:	2880030b 	ldhu	r2,12(r5)
20095338:	deffc904 	addi	sp,sp,-220
2009533c:	dd403215 	stw	r21,200(sp)
20095340:	dfc03615 	stw	ra,216(sp)
20095344:	df003515 	stw	fp,212(sp)
20095348:	ddc03415 	stw	r23,208(sp)
2009534c:	dd803315 	stw	r22,204(sp)
20095350:	dd003115 	stw	r20,196(sp)
20095354:	dcc03015 	stw	r19,192(sp)
20095358:	dc802f15 	stw	r18,188(sp)
2009535c:	dc402e15 	stw	r17,184(sp)
20095360:	dc002d15 	stw	r16,180(sp)
20095364:	d9402715 	stw	r5,156(sp)
20095368:	d9002915 	stw	r4,164(sp)
2009536c:	1080200c 	andi	r2,r2,128
20095370:	d9c02315 	stw	r7,140(sp)
20095374:	302b883a 	mov	r21,r6
20095378:	10000226 	beq	r2,zero,20095384 <___svfiprintf_internal_r+0x50>
2009537c:	28800417 	ldw	r2,16(r5)
20095380:	1003ce26 	beq	r2,zero,200962bc <___svfiprintf_internal_r+0xf88>
20095384:	dac01a04 	addi	r11,sp,104
20095388:	da8019c4 	addi	r10,sp,103
2009538c:	dc802917 	ldw	r18,164(sp)
20095390:	dd002717 	ldw	r20,156(sp)
20095394:	04c00034 	movhi	r19,0
20095398:	dac01e15 	stw	r11,120(sp)
2009539c:	5a97c83a 	sub	r11,r11,r10
200953a0:	9cc24d04 	addi	r19,r19,2356
200953a4:	da801f15 	stw	r10,124(sp)
200953a8:	dec01a15 	stw	sp,104(sp)
200953ac:	d8001c15 	stw	zero,112(sp)
200953b0:	d8001b15 	stw	zero,108(sp)
200953b4:	d811883a 	mov	r8,sp
200953b8:	d8002a15 	stw	zero,168(sp)
200953bc:	d8002415 	stw	zero,144(sp)
200953c0:	dac02b15 	stw	r11,172(sp)
200953c4:	a8800007 	ldb	r2,0(r21)
200953c8:	10026a26 	beq	r2,zero,20095d74 <___svfiprintf_internal_r+0xa40>
200953cc:	01000944 	movi	r4,37
200953d0:	11026826 	beq	r2,r4,20095d74 <___svfiprintf_internal_r+0xa40>
200953d4:	a805883a 	mov	r2,r21
200953d8:	00000106 	br	200953e0 <___svfiprintf_internal_r+0xac>
200953dc:	19000326 	beq	r3,r4,200953ec <___svfiprintf_internal_r+0xb8>
200953e0:	10800044 	addi	r2,r2,1
200953e4:	10c00007 	ldb	r3,0(r2)
200953e8:	183ffc1e 	bne	r3,zero,200953dc <__flash_rwdata_start+0xffff65f0>
200953ec:	1561c83a 	sub	r16,r2,r21
200953f0:	102d883a 	mov	r22,r2
200953f4:	80000e26 	beq	r16,zero,20095430 <___svfiprintf_internal_r+0xfc>
200953f8:	d8c01c17 	ldw	r3,112(sp)
200953fc:	d8801b17 	ldw	r2,108(sp)
20095400:	45400015 	stw	r21,0(r8)
20095404:	1c07883a 	add	r3,r3,r16
20095408:	10800044 	addi	r2,r2,1
2009540c:	d8c01c15 	stw	r3,112(sp)
20095410:	44000115 	stw	r16,4(r8)
20095414:	d8801b15 	stw	r2,108(sp)
20095418:	00c001c4 	movi	r3,7
2009541c:	1882d816 	blt	r3,r2,20095f80 <___svfiprintf_internal_r+0xc4c>
20095420:	42000204 	addi	r8,r8,8
20095424:	da802417 	ldw	r10,144(sp)
20095428:	5415883a 	add	r10,r10,r16
2009542c:	da802415 	stw	r10,144(sp)
20095430:	b0800007 	ldb	r2,0(r22)
20095434:	10027526 	beq	r2,zero,20095e0c <___svfiprintf_internal_r+0xad8>
20095438:	b1000047 	ldb	r4,1(r22)
2009543c:	b5400044 	addi	r21,r22,1
20095440:	d8001d85 	stb	zero,118(sp)
20095444:	000d883a 	mov	r6,zero
20095448:	043fffc4 	movi	r16,-1
2009544c:	d8002115 	stw	zero,132(sp)
20095450:	0023883a 	mov	r17,zero
20095454:	00c01604 	movi	r3,88
20095458:	01400244 	movi	r5,9
2009545c:	02400a84 	movi	r9,42
20095460:	01c01b04 	movi	r7,108
20095464:	ad400044 	addi	r21,r21,1
20095468:	20bff804 	addi	r2,r4,-32
2009546c:	18819736 	bltu	r3,r2,20095acc <___svfiprintf_internal_r+0x798>
20095470:	100490ba 	slli	r2,r2,2
20095474:	02c80274 	movhi	r11,8201
20095478:	5ad52204 	addi	r11,r11,21640
2009547c:	12c5883a 	add	r2,r2,r11
20095480:	10800017 	ldw	r2,0(r2)
20095484:	1000683a 	jmp	r2
20095488:	200959c4 	addi	zero,r4,9575
2009548c:	20095acc 	andi	zero,r4,9579
20095490:	20095acc 	andi	zero,r4,9579
20095494:	200959b8 	rdprs	zero,r4,9574
20095498:	20095acc 	andi	zero,r4,9579
2009549c:	20095acc 	andi	zero,r4,9579
200954a0:	20095acc 	andi	zero,r4,9579
200954a4:	20095acc 	andi	zero,r4,9579
200954a8:	20095acc 	andi	zero,r4,9579
200954ac:	20095acc 	andi	zero,r4,9579
200954b0:	200956e4 	muli	zero,r4,9563
200954b4:	20095b00 	call	220095b0 <__flash_rwdata_start+0x1f6a7c4>
200954b8:	20095acc 	andi	zero,r4,9579
200954bc:	2009570c 	andi	zero,r4,9564
200954c0:	20095b0c 	andi	zero,r4,9580
200954c4:	20095acc 	andi	zero,r4,9579
200954c8:	20095af4 	orhi	zero,r4,9579
200954cc:	20095a94 	ori	zero,r4,9578
200954d0:	20095a94 	ori	zero,r4,9578
200954d4:	20095a94 	ori	zero,r4,9578
200954d8:	20095a94 	ori	zero,r4,9578
200954dc:	20095a94 	ori	zero,r4,9578
200954e0:	20095a94 	ori	zero,r4,9578
200954e4:	20095a94 	ori	zero,r4,9578
200954e8:	20095a94 	ori	zero,r4,9578
200954ec:	20095a94 	ori	zero,r4,9578
200954f0:	20095acc 	andi	zero,r4,9579
200954f4:	20095acc 	andi	zero,r4,9579
200954f8:	20095acc 	andi	zero,r4,9579
200954fc:	20095acc 	andi	zero,r4,9579
20095500:	20095acc 	andi	zero,r4,9579
20095504:	20095acc 	andi	zero,r4,9579
20095508:	20095acc 	andi	zero,r4,9579
2009550c:	20095acc 	andi	zero,r4,9579
20095510:	20095acc 	andi	zero,r4,9579
20095514:	20095acc 	andi	zero,r4,9579
20095518:	20095a2c 	andhi	zero,r4,9576
2009551c:	20095acc 	andi	zero,r4,9579
20095520:	20095acc 	andi	zero,r4,9579
20095524:	20095acc 	andi	zero,r4,9579
20095528:	20095acc 	andi	zero,r4,9579
2009552c:	20095acc 	andi	zero,r4,9579
20095530:	20095acc 	andi	zero,r4,9579
20095534:	20095acc 	andi	zero,r4,9579
20095538:	20095acc 	andi	zero,r4,9579
2009553c:	20095acc 	andi	zero,r4,9579
20095540:	20095acc 	andi	zero,r4,9579
20095544:	200956b8 	rdprs	zero,r4,9562
20095548:	20095acc 	andi	zero,r4,9579
2009554c:	20095acc 	andi	zero,r4,9579
20095550:	20095acc 	andi	zero,r4,9579
20095554:	20095acc 	andi	zero,r4,9579
20095558:	20095acc 	andi	zero,r4,9579
2009555c:	200955ec 	andhi	zero,r4,9559
20095560:	20095acc 	andi	zero,r4,9579
20095564:	20095acc 	andi	zero,r4,9579
20095568:	20095918 	cmpnei	zero,r4,9572
2009556c:	20095acc 	andi	zero,r4,9579
20095570:	20095acc 	andi	zero,r4,9579
20095574:	20095acc 	andi	zero,r4,9579
20095578:	20095acc 	andi	zero,r4,9579
2009557c:	20095acc 	andi	zero,r4,9579
20095580:	20095acc 	andi	zero,r4,9579
20095584:	20095acc 	andi	zero,r4,9579
20095588:	20095acc 	andi	zero,r4,9579
2009558c:	20095acc 	andi	zero,r4,9579
20095590:	20095acc 	andi	zero,r4,9579
20095594:	20095804 	addi	zero,r4,9568
20095598:	200957c4 	addi	zero,r4,9567
2009559c:	20095acc 	andi	zero,r4,9579
200955a0:	20095acc 	andi	zero,r4,9579
200955a4:	20095acc 	andi	zero,r4,9579
200955a8:	20095974 	orhi	zero,r4,9573
200955ac:	200957c4 	addi	zero,r4,9567
200955b0:	20095acc 	andi	zero,r4,9579
200955b4:	20095acc 	andi	zero,r4,9579
200955b8:	20095960 	cmpeqi	zero,r4,9573
200955bc:	20095acc 	andi	zero,r4,9579
200955c0:	20095980 	call	22009598 <__flash_rwdata_start+0x1f6a7ac>
200955c4:	200956bc 	xorhi	zero,r4,9562
200955c8:	20095780 	call	22009578 <__flash_rwdata_start+0x1f6a78c>
200955cc:	20095774 	orhi	zero,r4,9565
200955d0:	20095acc 	andi	zero,r4,9579
200955d4:	20095718 	cmpnei	zero,r4,9564
200955d8:	20095acc 	andi	zero,r4,9579
200955dc:	200955f0 	cmpltui	zero,r4,9559
200955e0:	20095acc 	andi	zero,r4,9579
200955e4:	20095acc 	andi	zero,r4,9579
200955e8:	200959e0 	cmpeqi	zero,r4,9575
200955ec:	8c400414 	ori	r17,r17,16
200955f0:	8880080c 	andi	r2,r17,32
200955f4:	10029626 	beq	r2,zero,20096050 <___svfiprintf_internal_r+0xd1c>
200955f8:	da802317 	ldw	r10,140(sp)
200955fc:	dac02317 	ldw	r11,140(sp)
20095600:	00800044 	movi	r2,1
20095604:	52400017 	ldw	r9,0(r10)
20095608:	52800117 	ldw	r10,4(r10)
2009560c:	5ac00204 	addi	r11,r11,8
20095610:	dac02315 	stw	r11,140(sp)
20095614:	4a86b03a 	or	r3,r9,r10
20095618:	d8001d85 	stb	zero,118(sp)
2009561c:	8039883a 	mov	fp,r16
20095620:	0017883a 	mov	r11,zero
20095624:	80000216 	blt	r16,zero,20095630 <___svfiprintf_internal_r+0x2fc>
20095628:	013fdfc4 	movi	r4,-129
2009562c:	8922703a 	and	r17,r17,r4
20095630:	1801d21e 	bne	r3,zero,20095d7c <___svfiprintf_internal_r+0xa48>
20095634:	80024626 	beq	r16,zero,20095f50 <___svfiprintf_internal_r+0xc1c>
20095638:	10803fcc 	andi	r2,r2,255
2009563c:	00c00044 	movi	r3,1
20095640:	10c2b426 	beq	r2,r3,20096114 <___svfiprintf_internal_r+0xde0>
20095644:	00c00084 	movi	r3,2
20095648:	10c25d26 	beq	r2,r3,20095fc0 <___svfiprintf_internal_r+0xc8c>
2009564c:	d8c01a04 	addi	r3,sp,104
20095650:	4808d0fa 	srli	r4,r9,3
20095654:	500a977a 	slli	r5,r10,29
20095658:	5014d0fa 	srli	r10,r10,3
2009565c:	4a4001cc 	andi	r9,r9,7
20095660:	48800c04 	addi	r2,r9,48
20095664:	18ffffc4 	addi	r3,r3,-1
20095668:	2912b03a 	or	r9,r5,r4
2009566c:	18800005 	stb	r2,0(r3)
20095670:	4a88b03a 	or	r4,r9,r10
20095674:	203ff61e 	bne	r4,zero,20095650 <__flash_rwdata_start+0xffff6864>
20095678:	8900004c 	andi	r4,r17,1
2009567c:	d8c02615 	stw	r3,152(sp)
20095680:	2002961e 	bne	r4,zero,200960dc <___svfiprintf_internal_r+0xda8>
20095684:	da801e17 	ldw	r10,120(sp)
20095688:	50f9c83a 	sub	fp,r10,r3
2009568c:	df002015 	stw	fp,128(sp)
20095690:	e400010e 	bge	fp,r16,20095698 <___svfiprintf_internal_r+0x364>
20095694:	dc002015 	stw	r16,128(sp)
20095698:	5ac03fcc 	andi	r11,r11,255
2009569c:	5ac0201c 	xori	r11,r11,128
200956a0:	5affe004 	addi	r11,r11,-128
200956a4:	58006326 	beq	r11,zero,20095834 <___svfiprintf_internal_r+0x500>
200956a8:	d8c02017 	ldw	r3,128(sp)
200956ac:	18c00044 	addi	r3,r3,1
200956b0:	d8c02015 	stw	r3,128(sp)
200956b4:	00005f06 	br	20095834 <___svfiprintf_internal_r+0x500>
200956b8:	8c400414 	ori	r17,r17,16
200956bc:	8880080c 	andi	r2,r17,32
200956c0:	10027926 	beq	r2,zero,200960a8 <___svfiprintf_internal_r+0xd74>
200956c4:	dac02317 	ldw	r11,140(sp)
200956c8:	0005883a 	mov	r2,zero
200956cc:	5a400017 	ldw	r9,0(r11)
200956d0:	5a800117 	ldw	r10,4(r11)
200956d4:	5ac00204 	addi	r11,r11,8
200956d8:	dac02315 	stw	r11,140(sp)
200956dc:	4a86b03a 	or	r3,r9,r10
200956e0:	003fcd06 	br	20095618 <__flash_rwdata_start+0xffff682c>
200956e4:	da802317 	ldw	r10,140(sp)
200956e8:	dac02317 	ldw	r11,140(sp)
200956ec:	52800017 	ldw	r10,0(r10)
200956f0:	58800104 	addi	r2,r11,4
200956f4:	da802115 	stw	r10,132(sp)
200956f8:	50028c0e 	bge	r10,zero,2009612c <___svfiprintf_internal_r+0xdf8>
200956fc:	da802117 	ldw	r10,132(sp)
20095700:	d8802315 	stw	r2,140(sp)
20095704:	0295c83a 	sub	r10,zero,r10
20095708:	da802115 	stw	r10,132(sp)
2009570c:	8c400114 	ori	r17,r17,4
20095710:	a9000007 	ldb	r4,0(r21)
20095714:	003f5306 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095718:	da802317 	ldw	r10,140(sp)
2009571c:	dac02317 	ldw	r11,140(sp)
20095720:	d8001d85 	stb	zero,118(sp)
20095724:	52800017 	ldw	r10,0(r10)
20095728:	5dc00104 	addi	r23,r11,4
2009572c:	da802615 	stw	r10,152(sp)
20095730:	5002d626 	beq	r10,zero,2009628c <___svfiprintf_internal_r+0xf58>
20095734:	d9002617 	ldw	r4,152(sp)
20095738:	8002cc16 	blt	r16,zero,2009626c <___svfiprintf_internal_r+0xf38>
2009573c:	000b883a 	mov	r5,zero
20095740:	800d883a 	mov	r6,r16
20095744:	da002c15 	stw	r8,176(sp)
20095748:	009359c0 	call	2009359c <memchr>
2009574c:	da002c17 	ldw	r8,176(sp)
20095750:	1002f026 	beq	r2,zero,20096314 <___svfiprintf_internal_r+0xfe0>
20095754:	d8c02617 	ldw	r3,152(sp)
20095758:	10f9c83a 	sub	fp,r2,r3
2009575c:	8700010e 	bge	r16,fp,20095764 <___svfiprintf_internal_r+0x430>
20095760:	8039883a 	mov	fp,r16
20095764:	dac01d83 	ldbu	r11,118(sp)
20095768:	ddc02315 	stw	r23,140(sp)
2009576c:	0021883a 	mov	r16,zero
20095770:	003fc606 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20095774:	8c400814 	ori	r17,r17,32
20095778:	a9000007 	ldb	r4,0(r21)
2009577c:	003f3906 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095780:	da802317 	ldw	r10,140(sp)
20095784:	00800c04 	movi	r2,48
20095788:	dac02317 	ldw	r11,140(sp)
2009578c:	52400017 	ldw	r9,0(r10)
20095790:	d8801d05 	stb	r2,116(sp)
20095794:	00801e04 	movi	r2,120
20095798:	d8801d45 	stb	r2,117(sp)
2009579c:	00800034 	movhi	r2,0
200957a0:	1081e504 	addi	r2,r2,1940
200957a4:	5ac00104 	addi	r11,r11,4
200957a8:	d8802a15 	stw	r2,168(sp)
200957ac:	0015883a 	mov	r10,zero
200957b0:	8c400094 	ori	r17,r17,2
200957b4:	dac02315 	stw	r11,140(sp)
200957b8:	00800084 	movi	r2,2
200957bc:	4807883a 	mov	r3,r9
200957c0:	003f9506 	br	20095618 <__flash_rwdata_start+0xffff682c>
200957c4:	d9801d85 	stb	r6,118(sp)
200957c8:	8880080c 	andi	r2,r17,32
200957cc:	d8c02317 	ldw	r3,140(sp)
200957d0:	10009b26 	beq	r2,zero,20095a40 <___svfiprintf_internal_r+0x70c>
200957d4:	dac02317 	ldw	r11,140(sp)
200957d8:	18800117 	ldw	r2,4(r3)
200957dc:	1a400017 	ldw	r9,0(r3)
200957e0:	5ac00204 	addi	r11,r11,8
200957e4:	dac02315 	stw	r11,140(sp)
200957e8:	1015883a 	mov	r10,r2
200957ec:	10009f16 	blt	r2,zero,20095a6c <___svfiprintf_internal_r+0x738>
200957f0:	dac01d83 	ldbu	r11,118(sp)
200957f4:	8039883a 	mov	fp,r16
200957f8:	00800044 	movi	r2,1
200957fc:	4a86b03a 	or	r3,r9,r10
20095800:	003f8806 	br	20095624 <__flash_rwdata_start+0xffff6838>
20095804:	dac02317 	ldw	r11,140(sp)
20095808:	00c00044 	movi	r3,1
2009580c:	da801004 	addi	r10,sp,64
20095810:	58800017 	ldw	r2,0(r11)
20095814:	5ac00104 	addi	r11,r11,4
20095818:	d8c02015 	stw	r3,128(sp)
2009581c:	d8001d85 	stb	zero,118(sp)
20095820:	d8801005 	stb	r2,64(sp)
20095824:	dac02315 	stw	r11,140(sp)
20095828:	1839883a 	mov	fp,r3
2009582c:	da802615 	stw	r10,152(sp)
20095830:	0021883a 	mov	r16,zero
20095834:	8a80008c 	andi	r10,r17,2
20095838:	da802215 	stw	r10,136(sp)
2009583c:	50000326 	beq	r10,zero,2009584c <___svfiprintf_internal_r+0x518>
20095840:	dac02017 	ldw	r11,128(sp)
20095844:	5ac00084 	addi	r11,r11,2
20095848:	dac02015 	stw	r11,128(sp)
2009584c:	88c0210c 	andi	r3,r17,132
20095850:	d8c02515 	stw	r3,148(sp)
20095854:	1800bd1e 	bne	r3,zero,20095b4c <___svfiprintf_internal_r+0x818>
20095858:	da802117 	ldw	r10,132(sp)
2009585c:	dac02017 	ldw	r11,128(sp)
20095860:	52edc83a 	sub	r22,r10,r11
20095864:	0580b90e 	bge	zero,r22,20095b4c <___svfiprintf_internal_r+0x818>
20095868:	02400404 	movi	r9,16
2009586c:	d8c01c17 	ldw	r3,112(sp)
20095870:	d8801b17 	ldw	r2,108(sp)
20095874:	4d829b0e 	bge	r9,r22,200962e4 <___svfiprintf_internal_r+0xfb0>
20095878:	01400034 	movhi	r5,0
2009587c:	29425104 	addi	r5,r5,2372
20095880:	d9402815 	stw	r5,160(sp)
20095884:	05c001c4 	movi	r23,7
20095888:	00000306 	br	20095898 <___svfiprintf_internal_r+0x564>
2009588c:	b5bffc04 	addi	r22,r22,-16
20095890:	42000204 	addi	r8,r8,8
20095894:	4d80150e 	bge	r9,r22,200958ec <___svfiprintf_internal_r+0x5b8>
20095898:	02800034 	movhi	r10,0
2009589c:	18c00404 	addi	r3,r3,16
200958a0:	10800044 	addi	r2,r2,1
200958a4:	52825104 	addi	r10,r10,2372
200958a8:	42800015 	stw	r10,0(r8)
200958ac:	42400115 	stw	r9,4(r8)
200958b0:	d8c01c15 	stw	r3,112(sp)
200958b4:	d8801b15 	stw	r2,108(sp)
200958b8:	b8bff40e 	bge	r23,r2,2009588c <__flash_rwdata_start+0xffff6aa0>
200958bc:	9009883a 	mov	r4,r18
200958c0:	a00b883a 	mov	r5,r20
200958c4:	d9801a04 	addi	r6,sp,104
200958c8:	da402c15 	stw	r9,176(sp)
200958cc:	00951680 	call	20095168 <__ssprint_r>
200958d0:	da402c17 	ldw	r9,176(sp)
200958d4:	1001531e 	bne	r2,zero,20095e24 <___svfiprintf_internal_r+0xaf0>
200958d8:	b5bffc04 	addi	r22,r22,-16
200958dc:	d8c01c17 	ldw	r3,112(sp)
200958e0:	d8801b17 	ldw	r2,108(sp)
200958e4:	d811883a 	mov	r8,sp
200958e8:	4dbfeb16 	blt	r9,r22,20095898 <__flash_rwdata_start+0xffff6aac>
200958ec:	dac02817 	ldw	r11,160(sp)
200958f0:	b0c7883a 	add	r3,r22,r3
200958f4:	10800044 	addi	r2,r2,1
200958f8:	42c00015 	stw	r11,0(r8)
200958fc:	45800115 	stw	r22,4(r8)
20095900:	d8c01c15 	stw	r3,112(sp)
20095904:	d8801b15 	stw	r2,108(sp)
20095908:	010001c4 	movi	r4,7
2009590c:	2081dd16 	blt	r4,r2,20096084 <___svfiprintf_internal_r+0xd50>
20095910:	42000204 	addi	r8,r8,8
20095914:	00008f06 	br	20095b54 <___svfiprintf_internal_r+0x820>
20095918:	00800034 	movhi	r2,0
2009591c:	1081e004 	addi	r2,r2,1920
20095920:	d8802a15 	stw	r2,168(sp)
20095924:	d9801d85 	stb	r6,118(sp)
20095928:	8880080c 	andi	r2,r17,32
2009592c:	10003226 	beq	r2,zero,200959f8 <___svfiprintf_internal_r+0x6c4>
20095930:	da802317 	ldw	r10,140(sp)
20095934:	dac02317 	ldw	r11,140(sp)
20095938:	52400017 	ldw	r9,0(r10)
2009593c:	52800117 	ldw	r10,4(r10)
20095940:	5ac00204 	addi	r11,r11,8
20095944:	dac02315 	stw	r11,140(sp)
20095948:	8880004c 	andi	r2,r17,1
2009594c:	10003426 	beq	r2,zero,20095a20 <___svfiprintf_internal_r+0x6ec>
20095950:	4a86b03a 	or	r3,r9,r10
20095954:	1802231e 	bne	r3,zero,200961e4 <___svfiprintf_internal_r+0xeb0>
20095958:	00800084 	movi	r2,2
2009595c:	003f2e06 	br	20095618 <__flash_rwdata_start+0xffff682c>
20095960:	a9000007 	ldb	r4,0(r21)
20095964:	a805883a 	mov	r2,r21
20095968:	21c22426 	beq	r4,r7,200961fc <___svfiprintf_internal_r+0xec8>
2009596c:	8c400414 	ori	r17,r17,16
20095970:	003ebc06 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095974:	8c401014 	ori	r17,r17,64
20095978:	a9000007 	ldb	r4,0(r21)
2009597c:	003eb906 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095980:	d9801d85 	stb	r6,118(sp)
20095984:	8880080c 	andi	r2,r17,32
20095988:	10020d1e 	bne	r2,zero,200961c0 <___svfiprintf_internal_r+0xe8c>
2009598c:	8880040c 	andi	r2,r17,16
20095990:	10021e1e 	bne	r2,zero,2009620c <___svfiprintf_internal_r+0xed8>
20095994:	8c40100c 	andi	r17,r17,64
20095998:	88021c26 	beq	r17,zero,2009620c <___svfiprintf_internal_r+0xed8>
2009599c:	dac02317 	ldw	r11,140(sp)
200959a0:	da802417 	ldw	r10,144(sp)
200959a4:	58800017 	ldw	r2,0(r11)
200959a8:	5ac00104 	addi	r11,r11,4
200959ac:	dac02315 	stw	r11,140(sp)
200959b0:	1280000d 	sth	r10,0(r2)
200959b4:	003e8306 	br	200953c4 <__flash_rwdata_start+0xffff65d8>
200959b8:	8c400054 	ori	r17,r17,1
200959bc:	a9000007 	ldb	r4,0(r21)
200959c0:	003ea806 	br	20095464 <__flash_rwdata_start+0xffff6678>
200959c4:	30803fcc 	andi	r2,r6,255
200959c8:	1080201c 	xori	r2,r2,128
200959cc:	10bfe004 	addi	r2,r2,-128
200959d0:	1001f91e 	bne	r2,zero,200961b8 <___svfiprintf_internal_r+0xe84>
200959d4:	01800804 	movi	r6,32
200959d8:	a9000007 	ldb	r4,0(r21)
200959dc:	003ea106 	br	20095464 <__flash_rwdata_start+0xffff6678>
200959e0:	00800034 	movhi	r2,0
200959e4:	1081e504 	addi	r2,r2,1940
200959e8:	d8802a15 	stw	r2,168(sp)
200959ec:	d9801d85 	stb	r6,118(sp)
200959f0:	8880080c 	andi	r2,r17,32
200959f4:	103fce1e 	bne	r2,zero,20095930 <__flash_rwdata_start+0xffff6b44>
200959f8:	8880040c 	andi	r2,r17,16
200959fc:	1001e526 	beq	r2,zero,20096194 <___svfiprintf_internal_r+0xe60>
20095a00:	da802317 	ldw	r10,140(sp)
20095a04:	dac02317 	ldw	r11,140(sp)
20095a08:	52400017 	ldw	r9,0(r10)
20095a0c:	8880004c 	andi	r2,r17,1
20095a10:	5ac00104 	addi	r11,r11,4
20095a14:	dac02315 	stw	r11,140(sp)
20095a18:	0015883a 	mov	r10,zero
20095a1c:	103fcc1e 	bne	r2,zero,20095950 <__flash_rwdata_start+0xffff6b64>
20095a20:	00800084 	movi	r2,2
20095a24:	4a86b03a 	or	r3,r9,r10
20095a28:	003efb06 	br	20095618 <__flash_rwdata_start+0xffff682c>
20095a2c:	8c400414 	ori	r17,r17,16
20095a30:	d9801d85 	stb	r6,118(sp)
20095a34:	8880080c 	andi	r2,r17,32
20095a38:	d8c02317 	ldw	r3,140(sp)
20095a3c:	103f651e 	bne	r2,zero,200957d4 <__flash_rwdata_start+0xffff69e8>
20095a40:	8880040c 	andi	r2,r17,16
20095a44:	1001c61e 	bne	r2,zero,20096160 <___svfiprintf_internal_r+0xe2c>
20095a48:	8880100c 	andi	r2,r17,64
20095a4c:	1001c426 	beq	r2,zero,20096160 <___svfiprintf_internal_r+0xe2c>
20095a50:	1a40000f 	ldh	r9,0(r3)
20095a54:	dac02317 	ldw	r11,140(sp)
20095a58:	4815d7fa 	srai	r10,r9,31
20095a5c:	5ac00104 	addi	r11,r11,4
20095a60:	dac02315 	stw	r11,140(sp)
20095a64:	5005883a 	mov	r2,r10
20095a68:	103f610e 	bge	r2,zero,200957f0 <__flash_rwdata_start+0xffff6a04>
20095a6c:	0253c83a 	sub	r9,zero,r9
20095a70:	4804c03a 	cmpne	r2,r9,zero
20095a74:	0295c83a 	sub	r10,zero,r10
20095a78:	5095c83a 	sub	r10,r10,r2
20095a7c:	02c00b44 	movi	r11,45
20095a80:	dac01d85 	stb	r11,118(sp)
20095a84:	8039883a 	mov	fp,r16
20095a88:	00800044 	movi	r2,1
20095a8c:	4a86b03a 	or	r3,r9,r10
20095a90:	003ee406 	br	20095624 <__flash_rwdata_start+0xffff6838>
20095a94:	a815883a 	mov	r10,r21
20095a98:	d8002115 	stw	zero,132(sp)
20095a9c:	20bff404 	addi	r2,r4,-48
20095aa0:	51000007 	ldb	r4,0(r10)
20095aa4:	da802117 	ldw	r10,132(sp)
20095aa8:	ad400044 	addi	r21,r21,1
20095aac:	52c002a4 	muli	r11,r10,10
20095ab0:	a815883a 	mov	r10,r21
20095ab4:	5885883a 	add	r2,r11,r2
20095ab8:	d8802115 	stw	r2,132(sp)
20095abc:	20bff404 	addi	r2,r4,-48
20095ac0:	28bff72e 	bgeu	r5,r2,20095aa0 <__flash_rwdata_start+0xffff6cb4>
20095ac4:	20bff804 	addi	r2,r4,-32
20095ac8:	18be692e 	bgeu	r3,r2,20095470 <__flash_rwdata_start+0xffff6684>
20095acc:	d9801d85 	stb	r6,118(sp)
20095ad0:	2000ce26 	beq	r4,zero,20095e0c <___svfiprintf_internal_r+0xad8>
20095ad4:	02800044 	movi	r10,1
20095ad8:	dac01004 	addi	r11,sp,64
20095adc:	da802015 	stw	r10,128(sp)
20095ae0:	d9001005 	stb	r4,64(sp)
20095ae4:	d8001d85 	stb	zero,118(sp)
20095ae8:	5039883a 	mov	fp,r10
20095aec:	dac02615 	stw	r11,152(sp)
20095af0:	003f4f06 	br	20095830 <__flash_rwdata_start+0xffff6a44>
20095af4:	8c402014 	ori	r17,r17,128
20095af8:	a9000007 	ldb	r4,0(r21)
20095afc:	003e5906 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095b00:	01800ac4 	movi	r6,43
20095b04:	a9000007 	ldb	r4,0(r21)
20095b08:	003e5606 	br	20095464 <__flash_rwdata_start+0xffff6678>
20095b0c:	a9000007 	ldb	r4,0(r21)
20095b10:	aa800044 	addi	r10,r21,1
20095b14:	22420626 	beq	r4,r9,20096330 <___svfiprintf_internal_r+0xffc>
20095b18:	20bff404 	addi	r2,r4,-48
20095b1c:	502b883a 	mov	r21,r10
20095b20:	0021883a 	mov	r16,zero
20095b24:	28be5036 	bltu	r5,r2,20095468 <__flash_rwdata_start+0xffff667c>
20095b28:	a9000007 	ldb	r4,0(r21)
20095b2c:	840002a4 	muli	r16,r16,10
20095b30:	ad400044 	addi	r21,r21,1
20095b34:	1421883a 	add	r16,r2,r16
20095b38:	20bff404 	addi	r2,r4,-48
20095b3c:	28bffa2e 	bgeu	r5,r2,20095b28 <__flash_rwdata_start+0xffff6d3c>
20095b40:	803e490e 	bge	r16,zero,20095468 <__flash_rwdata_start+0xffff667c>
20095b44:	043fffc4 	movi	r16,-1
20095b48:	003e4706 	br	20095468 <__flash_rwdata_start+0xffff667c>
20095b4c:	d8c01c17 	ldw	r3,112(sp)
20095b50:	d8801b17 	ldw	r2,108(sp)
20095b54:	d9001d87 	ldb	r4,118(sp)
20095b58:	20000b26 	beq	r4,zero,20095b88 <___svfiprintf_internal_r+0x854>
20095b5c:	d9001d84 	addi	r4,sp,118
20095b60:	18c00044 	addi	r3,r3,1
20095b64:	10800044 	addi	r2,r2,1
20095b68:	41000015 	stw	r4,0(r8)
20095b6c:	01000044 	movi	r4,1
20095b70:	41000115 	stw	r4,4(r8)
20095b74:	d8c01c15 	stw	r3,112(sp)
20095b78:	d8801b15 	stw	r2,108(sp)
20095b7c:	010001c4 	movi	r4,7
20095b80:	20811e16 	blt	r4,r2,20095ffc <___svfiprintf_internal_r+0xcc8>
20095b84:	42000204 	addi	r8,r8,8
20095b88:	da802217 	ldw	r10,136(sp)
20095b8c:	50000b26 	beq	r10,zero,20095bbc <___svfiprintf_internal_r+0x888>
20095b90:	d9001d04 	addi	r4,sp,116
20095b94:	18c00084 	addi	r3,r3,2
20095b98:	10800044 	addi	r2,r2,1
20095b9c:	41000015 	stw	r4,0(r8)
20095ba0:	01000084 	movi	r4,2
20095ba4:	41000115 	stw	r4,4(r8)
20095ba8:	d8c01c15 	stw	r3,112(sp)
20095bac:	d8801b15 	stw	r2,108(sp)
20095bb0:	010001c4 	movi	r4,7
20095bb4:	20811a16 	blt	r4,r2,20096020 <___svfiprintf_internal_r+0xcec>
20095bb8:	42000204 	addi	r8,r8,8
20095bbc:	dac02517 	ldw	r11,148(sp)
20095bc0:	01002004 	movi	r4,128
20095bc4:	5900a826 	beq	r11,r4,20095e68 <___svfiprintf_internal_r+0xb34>
20095bc8:	8721c83a 	sub	r16,r16,fp
20095bcc:	0400260e 	bge	zero,r16,20095c68 <___svfiprintf_internal_r+0x934>
20095bd0:	01c00404 	movi	r7,16
20095bd4:	3c019d0e 	bge	r7,r16,2009624c <___svfiprintf_internal_r+0xf18>
20095bd8:	01000034 	movhi	r4,0
20095bdc:	21024d04 	addi	r4,r4,2356
20095be0:	d9002215 	stw	r4,136(sp)
20095be4:	382f883a 	mov	r23,r7
20095be8:	058001c4 	movi	r22,7
20095bec:	00000306 	br	20095bfc <___svfiprintf_internal_r+0x8c8>
20095bf0:	843ffc04 	addi	r16,r16,-16
20095bf4:	42000204 	addi	r8,r8,8
20095bf8:	bc00110e 	bge	r23,r16,20095c40 <___svfiprintf_internal_r+0x90c>
20095bfc:	18c00404 	addi	r3,r3,16
20095c00:	10800044 	addi	r2,r2,1
20095c04:	44c00015 	stw	r19,0(r8)
20095c08:	45c00115 	stw	r23,4(r8)
20095c0c:	d8c01c15 	stw	r3,112(sp)
20095c10:	d8801b15 	stw	r2,108(sp)
20095c14:	b0bff60e 	bge	r22,r2,20095bf0 <__flash_rwdata_start+0xffff6e04>
20095c18:	9009883a 	mov	r4,r18
20095c1c:	a00b883a 	mov	r5,r20
20095c20:	d9801a04 	addi	r6,sp,104
20095c24:	00951680 	call	20095168 <__ssprint_r>
20095c28:	10007e1e 	bne	r2,zero,20095e24 <___svfiprintf_internal_r+0xaf0>
20095c2c:	843ffc04 	addi	r16,r16,-16
20095c30:	d8c01c17 	ldw	r3,112(sp)
20095c34:	d8801b17 	ldw	r2,108(sp)
20095c38:	d811883a 	mov	r8,sp
20095c3c:	bc3fef16 	blt	r23,r16,20095bfc <__flash_rwdata_start+0xffff6e10>
20095c40:	da802217 	ldw	r10,136(sp)
20095c44:	1c07883a 	add	r3,r3,r16
20095c48:	10800044 	addi	r2,r2,1
20095c4c:	42800015 	stw	r10,0(r8)
20095c50:	44000115 	stw	r16,4(r8)
20095c54:	d8c01c15 	stw	r3,112(sp)
20095c58:	d8801b15 	stw	r2,108(sp)
20095c5c:	010001c4 	movi	r4,7
20095c60:	2080ce16 	blt	r4,r2,20095f9c <___svfiprintf_internal_r+0xc68>
20095c64:	42000204 	addi	r8,r8,8
20095c68:	dac02617 	ldw	r11,152(sp)
20095c6c:	1f07883a 	add	r3,r3,fp
20095c70:	10800044 	addi	r2,r2,1
20095c74:	42c00015 	stw	r11,0(r8)
20095c78:	47000115 	stw	fp,4(r8)
20095c7c:	d8c01c15 	stw	r3,112(sp)
20095c80:	d8801b15 	stw	r2,108(sp)
20095c84:	010001c4 	movi	r4,7
20095c88:	2080a316 	blt	r4,r2,20095f18 <___svfiprintf_internal_r+0xbe4>
20095c8c:	42000204 	addi	r8,r8,8
20095c90:	8c40010c 	andi	r17,r17,4
20095c94:	88002b26 	beq	r17,zero,20095d44 <___svfiprintf_internal_r+0xa10>
20095c98:	da802117 	ldw	r10,132(sp)
20095c9c:	dac02017 	ldw	r11,128(sp)
20095ca0:	52e1c83a 	sub	r16,r10,r11
20095ca4:	0400270e 	bge	zero,r16,20095d44 <___svfiprintf_internal_r+0xa10>
20095ca8:	04400404 	movi	r17,16
20095cac:	d8801b17 	ldw	r2,108(sp)
20095cb0:	8c01900e 	bge	r17,r16,200962f4 <___svfiprintf_internal_r+0xfc0>
20095cb4:	01400034 	movhi	r5,0
20095cb8:	29425104 	addi	r5,r5,2372
20095cbc:	d9402815 	stw	r5,160(sp)
20095cc0:	070001c4 	movi	fp,7
20095cc4:	00000306 	br	20095cd4 <___svfiprintf_internal_r+0x9a0>
20095cc8:	843ffc04 	addi	r16,r16,-16
20095ccc:	42000204 	addi	r8,r8,8
20095cd0:	8c00130e 	bge	r17,r16,20095d20 <___svfiprintf_internal_r+0x9ec>
20095cd4:	02800034 	movhi	r10,0
20095cd8:	18c00404 	addi	r3,r3,16
20095cdc:	10800044 	addi	r2,r2,1
20095ce0:	52825104 	addi	r10,r10,2372
20095ce4:	42800015 	stw	r10,0(r8)
20095ce8:	44400115 	stw	r17,4(r8)
20095cec:	d8c01c15 	stw	r3,112(sp)
20095cf0:	d8801b15 	stw	r2,108(sp)
20095cf4:	e0bff40e 	bge	fp,r2,20095cc8 <__flash_rwdata_start+0xffff6edc>
20095cf8:	9009883a 	mov	r4,r18
20095cfc:	a00b883a 	mov	r5,r20
20095d00:	d9801a04 	addi	r6,sp,104
20095d04:	00951680 	call	20095168 <__ssprint_r>
20095d08:	1000461e 	bne	r2,zero,20095e24 <___svfiprintf_internal_r+0xaf0>
20095d0c:	843ffc04 	addi	r16,r16,-16
20095d10:	d8c01c17 	ldw	r3,112(sp)
20095d14:	d8801b17 	ldw	r2,108(sp)
20095d18:	d811883a 	mov	r8,sp
20095d1c:	8c3fed16 	blt	r17,r16,20095cd4 <__flash_rwdata_start+0xffff6ee8>
20095d20:	dac02817 	ldw	r11,160(sp)
20095d24:	1c07883a 	add	r3,r3,r16
20095d28:	10800044 	addi	r2,r2,1
20095d2c:	42c00015 	stw	r11,0(r8)
20095d30:	44000115 	stw	r16,4(r8)
20095d34:	d8c01c15 	stw	r3,112(sp)
20095d38:	d8801b15 	stw	r2,108(sp)
20095d3c:	010001c4 	movi	r4,7
20095d40:	2080fd16 	blt	r4,r2,20096138 <___svfiprintf_internal_r+0xe04>
20095d44:	dd802017 	ldw	r22,128(sp)
20095d48:	da802117 	ldw	r10,132(sp)
20095d4c:	b280010e 	bge	r22,r10,20095d54 <___svfiprintf_internal_r+0xa20>
20095d50:	502d883a 	mov	r22,r10
20095d54:	dac02417 	ldw	r11,144(sp)
20095d58:	5d97883a 	add	r11,r11,r22
20095d5c:	dac02415 	stw	r11,144(sp)
20095d60:	1800751e 	bne	r3,zero,20095f38 <___svfiprintf_internal_r+0xc04>
20095d64:	a8800007 	ldb	r2,0(r21)
20095d68:	d8001b15 	stw	zero,108(sp)
20095d6c:	d811883a 	mov	r8,sp
20095d70:	103d961e 	bne	r2,zero,200953cc <__flash_rwdata_start+0xffff65e0>
20095d74:	a82d883a 	mov	r22,r21
20095d78:	003dad06 	br	20095430 <__flash_rwdata_start+0xffff6644>
20095d7c:	10803fcc 	andi	r2,r2,255
20095d80:	00c00044 	movi	r3,1
20095d84:	10fe2f1e 	bne	r2,r3,20095644 <__flash_rwdata_start+0xffff6858>
20095d88:	5000e026 	beq	r10,zero,2009610c <___svfiprintf_internal_r+0xdd8>
20095d8c:	dc002015 	stw	r16,128(sp)
20095d90:	dc402215 	stw	r17,136(sp)
20095d94:	dd801a04 	addi	r22,sp,104
20095d98:	402f883a 	mov	r23,r8
20095d9c:	5839883a 	mov	fp,r11
20095da0:	4821883a 	mov	r16,r9
20095da4:	5023883a 	mov	r17,r10
20095da8:	8009883a 	mov	r4,r16
20095dac:	880b883a 	mov	r5,r17
20095db0:	01800284 	movi	r6,10
20095db4:	000f883a 	mov	r7,zero
20095db8:	00986e80 	call	200986e8 <__umoddi3>
20095dbc:	10800c04 	addi	r2,r2,48
20095dc0:	b5bfffc4 	addi	r22,r22,-1
20095dc4:	8009883a 	mov	r4,r16
20095dc8:	880b883a 	mov	r5,r17
20095dcc:	01800284 	movi	r6,10
20095dd0:	000f883a 	mov	r7,zero
20095dd4:	b0800005 	stb	r2,0(r22)
20095dd8:	00981280 	call	20098128 <__udivdi3>
20095ddc:	1021883a 	mov	r16,r2
20095de0:	10c4b03a 	or	r2,r2,r3
20095de4:	1823883a 	mov	r17,r3
20095de8:	103fef1e 	bne	r2,zero,20095da8 <__flash_rwdata_start+0xffff6fbc>
20095dec:	da801e17 	ldw	r10,120(sp)
20095df0:	e017883a 	mov	r11,fp
20095df4:	dc002017 	ldw	r16,128(sp)
20095df8:	dc402217 	ldw	r17,136(sp)
20095dfc:	b811883a 	mov	r8,r23
20095e00:	dd802615 	stw	r22,152(sp)
20095e04:	55b9c83a 	sub	fp,r10,r22
20095e08:	003e2006 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20095e0c:	d8801c17 	ldw	r2,112(sp)
20095e10:	10000426 	beq	r2,zero,20095e24 <___svfiprintf_internal_r+0xaf0>
20095e14:	d9002917 	ldw	r4,164(sp)
20095e18:	d9402717 	ldw	r5,156(sp)
20095e1c:	d9801a04 	addi	r6,sp,104
20095e20:	00951680 	call	20095168 <__ssprint_r>
20095e24:	da802717 	ldw	r10,156(sp)
20095e28:	5080030b 	ldhu	r2,12(r10)
20095e2c:	1080100c 	andi	r2,r2,64
20095e30:	1000511e 	bne	r2,zero,20095f78 <___svfiprintf_internal_r+0xc44>
20095e34:	d8802417 	ldw	r2,144(sp)
20095e38:	dfc03617 	ldw	ra,216(sp)
20095e3c:	df003517 	ldw	fp,212(sp)
20095e40:	ddc03417 	ldw	r23,208(sp)
20095e44:	dd803317 	ldw	r22,204(sp)
20095e48:	dd403217 	ldw	r21,200(sp)
20095e4c:	dd003117 	ldw	r20,196(sp)
20095e50:	dcc03017 	ldw	r19,192(sp)
20095e54:	dc802f17 	ldw	r18,188(sp)
20095e58:	dc402e17 	ldw	r17,184(sp)
20095e5c:	dc002d17 	ldw	r16,180(sp)
20095e60:	dec03704 	addi	sp,sp,220
20095e64:	f800283a 	ret
20095e68:	da802117 	ldw	r10,132(sp)
20095e6c:	dac02017 	ldw	r11,128(sp)
20095e70:	52edc83a 	sub	r22,r10,r11
20095e74:	05bf540e 	bge	zero,r22,20095bc8 <__flash_rwdata_start+0xffff6ddc>
20095e78:	02400404 	movi	r9,16
20095e7c:	4d81210e 	bge	r9,r22,20096304 <___svfiprintf_internal_r+0xfd0>
20095e80:	01400034 	movhi	r5,0
20095e84:	29424d04 	addi	r5,r5,2356
20095e88:	d9402215 	stw	r5,136(sp)
20095e8c:	05c001c4 	movi	r23,7
20095e90:	00000306 	br	20095ea0 <___svfiprintf_internal_r+0xb6c>
20095e94:	b5bffc04 	addi	r22,r22,-16
20095e98:	42000204 	addi	r8,r8,8
20095e9c:	4d80130e 	bge	r9,r22,20095eec <___svfiprintf_internal_r+0xbb8>
20095ea0:	18c00404 	addi	r3,r3,16
20095ea4:	10800044 	addi	r2,r2,1
20095ea8:	44c00015 	stw	r19,0(r8)
20095eac:	42400115 	stw	r9,4(r8)
20095eb0:	d8c01c15 	stw	r3,112(sp)
20095eb4:	d8801b15 	stw	r2,108(sp)
20095eb8:	b8bff60e 	bge	r23,r2,20095e94 <__flash_rwdata_start+0xffff70a8>
20095ebc:	9009883a 	mov	r4,r18
20095ec0:	a00b883a 	mov	r5,r20
20095ec4:	d9801a04 	addi	r6,sp,104
20095ec8:	da402c15 	stw	r9,176(sp)
20095ecc:	00951680 	call	20095168 <__ssprint_r>
20095ed0:	da402c17 	ldw	r9,176(sp)
20095ed4:	103fd31e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20095ed8:	b5bffc04 	addi	r22,r22,-16
20095edc:	d8c01c17 	ldw	r3,112(sp)
20095ee0:	d8801b17 	ldw	r2,108(sp)
20095ee4:	d811883a 	mov	r8,sp
20095ee8:	4dbfed16 	blt	r9,r22,20095ea0 <__flash_rwdata_start+0xffff70b4>
20095eec:	da802217 	ldw	r10,136(sp)
20095ef0:	1d87883a 	add	r3,r3,r22
20095ef4:	10800044 	addi	r2,r2,1
20095ef8:	42800015 	stw	r10,0(r8)
20095efc:	45800115 	stw	r22,4(r8)
20095f00:	d8c01c15 	stw	r3,112(sp)
20095f04:	d8801b15 	stw	r2,108(sp)
20095f08:	010001c4 	movi	r4,7
20095f0c:	2080c616 	blt	r4,r2,20096228 <___svfiprintf_internal_r+0xef4>
20095f10:	42000204 	addi	r8,r8,8
20095f14:	003f2c06 	br	20095bc8 <__flash_rwdata_start+0xffff6ddc>
20095f18:	9009883a 	mov	r4,r18
20095f1c:	a00b883a 	mov	r5,r20
20095f20:	d9801a04 	addi	r6,sp,104
20095f24:	00951680 	call	20095168 <__ssprint_r>
20095f28:	103fbe1e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20095f2c:	d8c01c17 	ldw	r3,112(sp)
20095f30:	d811883a 	mov	r8,sp
20095f34:	003f5606 	br	20095c90 <__flash_rwdata_start+0xffff6ea4>
20095f38:	9009883a 	mov	r4,r18
20095f3c:	a00b883a 	mov	r5,r20
20095f40:	d9801a04 	addi	r6,sp,104
20095f44:	00951680 	call	20095168 <__ssprint_r>
20095f48:	103f8626 	beq	r2,zero,20095d64 <__flash_rwdata_start+0xffff6f78>
20095f4c:	003fb506 	br	20095e24 <__flash_rwdata_start+0xffff7038>
20095f50:	10803fcc 	andi	r2,r2,255
20095f54:	10003b1e 	bne	r2,zero,20096044 <___svfiprintf_internal_r+0xd10>
20095f58:	8880004c 	andi	r2,r17,1
20095f5c:	10007d26 	beq	r2,zero,20096154 <___svfiprintf_internal_r+0xe20>
20095f60:	00800c04 	movi	r2,48
20095f64:	d8c019c4 	addi	r3,sp,103
20095f68:	d88019c5 	stb	r2,103(sp)
20095f6c:	df002b17 	ldw	fp,172(sp)
20095f70:	d8c02615 	stw	r3,152(sp)
20095f74:	003dc506 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20095f78:	00bfffc4 	movi	r2,-1
20095f7c:	003fae06 	br	20095e38 <__flash_rwdata_start+0xffff704c>
20095f80:	9009883a 	mov	r4,r18
20095f84:	a00b883a 	mov	r5,r20
20095f88:	d9801a04 	addi	r6,sp,104
20095f8c:	00951680 	call	20095168 <__ssprint_r>
20095f90:	103fa41e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20095f94:	d811883a 	mov	r8,sp
20095f98:	003d2206 	br	20095424 <__flash_rwdata_start+0xffff6638>
20095f9c:	9009883a 	mov	r4,r18
20095fa0:	a00b883a 	mov	r5,r20
20095fa4:	d9801a04 	addi	r6,sp,104
20095fa8:	00951680 	call	20095168 <__ssprint_r>
20095fac:	103f9d1e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20095fb0:	d8c01c17 	ldw	r3,112(sp)
20095fb4:	d8801b17 	ldw	r2,108(sp)
20095fb8:	d811883a 	mov	r8,sp
20095fbc:	003f2a06 	br	20095c68 <__flash_rwdata_start+0xffff6e7c>
20095fc0:	d9402a17 	ldw	r5,168(sp)
20095fc4:	d8c01a04 	addi	r3,sp,104
20095fc8:	488003cc 	andi	r2,r9,15
20095fcc:	5008973a 	slli	r4,r10,28
20095fd0:	2885883a 	add	r2,r5,r2
20095fd4:	4812d13a 	srli	r9,r9,4
20095fd8:	10800003 	ldbu	r2,0(r2)
20095fdc:	5014d13a 	srli	r10,r10,4
20095fe0:	18ffffc4 	addi	r3,r3,-1
20095fe4:	2252b03a 	or	r9,r4,r9
20095fe8:	18800005 	stb	r2,0(r3)
20095fec:	4a84b03a 	or	r2,r9,r10
20095ff0:	103ff51e 	bne	r2,zero,20095fc8 <__flash_rwdata_start+0xffff71dc>
20095ff4:	d8c02615 	stw	r3,152(sp)
20095ff8:	003da206 	br	20095684 <__flash_rwdata_start+0xffff6898>
20095ffc:	9009883a 	mov	r4,r18
20096000:	a00b883a 	mov	r5,r20
20096004:	d9801a04 	addi	r6,sp,104
20096008:	00951680 	call	20095168 <__ssprint_r>
2009600c:	103f851e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20096010:	d8c01c17 	ldw	r3,112(sp)
20096014:	d8801b17 	ldw	r2,108(sp)
20096018:	d811883a 	mov	r8,sp
2009601c:	003eda06 	br	20095b88 <__flash_rwdata_start+0xffff6d9c>
20096020:	9009883a 	mov	r4,r18
20096024:	a00b883a 	mov	r5,r20
20096028:	d9801a04 	addi	r6,sp,104
2009602c:	00951680 	call	20095168 <__ssprint_r>
20096030:	103f7c1e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20096034:	d8c01c17 	ldw	r3,112(sp)
20096038:	d8801b17 	ldw	r2,108(sp)
2009603c:	d811883a 	mov	r8,sp
20096040:	003ede06 	br	20095bbc <__flash_rwdata_start+0xffff6dd0>
20096044:	da801a04 	addi	r10,sp,104
20096048:	da802615 	stw	r10,152(sp)
2009604c:	003d8f06 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20096050:	8880040c 	andi	r2,r17,16
20096054:	10004c1e 	bne	r2,zero,20096188 <___svfiprintf_internal_r+0xe54>
20096058:	8880100c 	andi	r2,r17,64
2009605c:	da802317 	ldw	r10,140(sp)
20096060:	10004a26 	beq	r2,zero,2009618c <___svfiprintf_internal_r+0xe58>
20096064:	5240000b 	ldhu	r9,0(r10)
20096068:	dac02317 	ldw	r11,140(sp)
2009606c:	0015883a 	mov	r10,zero
20096070:	00800044 	movi	r2,1
20096074:	5ac00104 	addi	r11,r11,4
20096078:	dac02315 	stw	r11,140(sp)
2009607c:	4807883a 	mov	r3,r9
20096080:	003d6506 	br	20095618 <__flash_rwdata_start+0xffff682c>
20096084:	9009883a 	mov	r4,r18
20096088:	a00b883a 	mov	r5,r20
2009608c:	d9801a04 	addi	r6,sp,104
20096090:	00951680 	call	20095168 <__ssprint_r>
20096094:	103f631e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
20096098:	d8c01c17 	ldw	r3,112(sp)
2009609c:	d8801b17 	ldw	r2,108(sp)
200960a0:	d811883a 	mov	r8,sp
200960a4:	003eab06 	br	20095b54 <__flash_rwdata_start+0xffff6d68>
200960a8:	8880040c 	andi	r2,r17,16
200960ac:	1000331e 	bne	r2,zero,2009617c <___svfiprintf_internal_r+0xe48>
200960b0:	8880100c 	andi	r2,r17,64
200960b4:	da802317 	ldw	r10,140(sp)
200960b8:	10003126 	beq	r2,zero,20096180 <___svfiprintf_internal_r+0xe4c>
200960bc:	5240000b 	ldhu	r9,0(r10)
200960c0:	dac02317 	ldw	r11,140(sp)
200960c4:	0015883a 	mov	r10,zero
200960c8:	0005883a 	mov	r2,zero
200960cc:	5ac00104 	addi	r11,r11,4
200960d0:	dac02315 	stw	r11,140(sp)
200960d4:	4807883a 	mov	r3,r9
200960d8:	003d4f06 	br	20095618 <__flash_rwdata_start+0xffff682c>
200960dc:	10803fcc 	andi	r2,r2,255
200960e0:	1080201c 	xori	r2,r2,128
200960e4:	10bfe004 	addi	r2,r2,-128
200960e8:	01000c04 	movi	r4,48
200960ec:	11005b26 	beq	r2,r4,2009625c <___svfiprintf_internal_r+0xf28>
200960f0:	da802617 	ldw	r10,152(sp)
200960f4:	d8801e17 	ldw	r2,120(sp)
200960f8:	193fffc5 	stb	r4,-1(r3)
200960fc:	52bfffc4 	addi	r10,r10,-1
20096100:	da802615 	stw	r10,152(sp)
20096104:	12b9c83a 	sub	fp,r2,r10
20096108:	003d6006 	br	2009568c <__flash_rwdata_start+0xffff68a0>
2009610c:	00800244 	movi	r2,9
20096110:	127f1e36 	bltu	r2,r9,20095d8c <__flash_rwdata_start+0xffff6fa0>
20096114:	4a400c04 	addi	r9,r9,48
20096118:	d8c019c4 	addi	r3,sp,103
2009611c:	da4019c5 	stb	r9,103(sp)
20096120:	df002b17 	ldw	fp,172(sp)
20096124:	d8c02615 	stw	r3,152(sp)
20096128:	003d5806 	br	2009568c <__flash_rwdata_start+0xffff68a0>
2009612c:	d8802315 	stw	r2,140(sp)
20096130:	a9000007 	ldb	r4,0(r21)
20096134:	003ccb06 	br	20095464 <__flash_rwdata_start+0xffff6678>
20096138:	9009883a 	mov	r4,r18
2009613c:	a00b883a 	mov	r5,r20
20096140:	d9801a04 	addi	r6,sp,104
20096144:	00951680 	call	20095168 <__ssprint_r>
20096148:	103f361e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
2009614c:	d8c01c17 	ldw	r3,112(sp)
20096150:	003efc06 	br	20095d44 <__flash_rwdata_start+0xffff6f58>
20096154:	d8c01a04 	addi	r3,sp,104
20096158:	d8c02615 	stw	r3,152(sp)
2009615c:	003d4b06 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20096160:	da802317 	ldw	r10,140(sp)
20096164:	1a400017 	ldw	r9,0(r3)
20096168:	52800104 	addi	r10,r10,4
2009616c:	da802315 	stw	r10,140(sp)
20096170:	4815d7fa 	srai	r10,r9,31
20096174:	5005883a 	mov	r2,r10
20096178:	003d9c06 	br	200957ec <__flash_rwdata_start+0xffff6a00>
2009617c:	da802317 	ldw	r10,140(sp)
20096180:	52400017 	ldw	r9,0(r10)
20096184:	003fce06 	br	200960c0 <__flash_rwdata_start+0xffff72d4>
20096188:	da802317 	ldw	r10,140(sp)
2009618c:	52400017 	ldw	r9,0(r10)
20096190:	003fb506 	br	20096068 <__flash_rwdata_start+0xffff727c>
20096194:	8880100c 	andi	r2,r17,64
20096198:	da802317 	ldw	r10,140(sp)
2009619c:	103e1926 	beq	r2,zero,20095a04 <__flash_rwdata_start+0xffff6c18>
200961a0:	dac02317 	ldw	r11,140(sp)
200961a4:	5240000b 	ldhu	r9,0(r10)
200961a8:	0015883a 	mov	r10,zero
200961ac:	5ac00104 	addi	r11,r11,4
200961b0:	dac02315 	stw	r11,140(sp)
200961b4:	003de406 	br	20095948 <__flash_rwdata_start+0xffff6b5c>
200961b8:	a9000007 	ldb	r4,0(r21)
200961bc:	003ca906 	br	20095464 <__flash_rwdata_start+0xffff6678>
200961c0:	dac02317 	ldw	r11,140(sp)
200961c4:	da802417 	ldw	r10,144(sp)
200961c8:	58800017 	ldw	r2,0(r11)
200961cc:	5007d7fa 	srai	r3,r10,31
200961d0:	5ac00104 	addi	r11,r11,4
200961d4:	dac02315 	stw	r11,140(sp)
200961d8:	12800015 	stw	r10,0(r2)
200961dc:	10c00115 	stw	r3,4(r2)
200961e0:	003c7806 	br	200953c4 <__flash_rwdata_start+0xffff65d8>
200961e4:	00800c04 	movi	r2,48
200961e8:	d8801d05 	stb	r2,116(sp)
200961ec:	d9001d45 	stb	r4,117(sp)
200961f0:	8c400094 	ori	r17,r17,2
200961f4:	00800084 	movi	r2,2
200961f8:	003d0706 	br	20095618 <__flash_rwdata_start+0xffff682c>
200961fc:	ad400044 	addi	r21,r21,1
20096200:	8c400814 	ori	r17,r17,32
20096204:	11000047 	ldb	r4,1(r2)
20096208:	003c9606 	br	20095464 <__flash_rwdata_start+0xffff6678>
2009620c:	dac02317 	ldw	r11,140(sp)
20096210:	da802417 	ldw	r10,144(sp)
20096214:	58800017 	ldw	r2,0(r11)
20096218:	5ac00104 	addi	r11,r11,4
2009621c:	dac02315 	stw	r11,140(sp)
20096220:	12800015 	stw	r10,0(r2)
20096224:	003c6706 	br	200953c4 <__flash_rwdata_start+0xffff65d8>
20096228:	9009883a 	mov	r4,r18
2009622c:	a00b883a 	mov	r5,r20
20096230:	d9801a04 	addi	r6,sp,104
20096234:	00951680 	call	20095168 <__ssprint_r>
20096238:	103efa1e 	bne	r2,zero,20095e24 <__flash_rwdata_start+0xffff7038>
2009623c:	d8c01c17 	ldw	r3,112(sp)
20096240:	d8801b17 	ldw	r2,108(sp)
20096244:	d811883a 	mov	r8,sp
20096248:	003e5f06 	br	20095bc8 <__flash_rwdata_start+0xffff6ddc>
2009624c:	02c00034 	movhi	r11,0
20096250:	5ac24d04 	addi	r11,r11,2356
20096254:	dac02215 	stw	r11,136(sp)
20096258:	003e7906 	br	20095c40 <__flash_rwdata_start+0xffff6e54>
2009625c:	da801e17 	ldw	r10,120(sp)
20096260:	d8c02617 	ldw	r3,152(sp)
20096264:	50f9c83a 	sub	fp,r10,r3
20096268:	003d0806 	br	2009568c <__flash_rwdata_start+0xffff68a0>
2009626c:	da002c15 	stw	r8,176(sp)
20096270:	008c4740 	call	2008c474 <strlen>
20096274:	1039883a 	mov	fp,r2
20096278:	dac01d83 	ldbu	r11,118(sp)
2009627c:	ddc02315 	stw	r23,140(sp)
20096280:	0021883a 	mov	r16,zero
20096284:	da002c17 	ldw	r8,176(sp)
20096288:	003d0006 	br	2009568c <__flash_rwdata_start+0xffff68a0>
2009628c:	00800184 	movi	r2,6
20096290:	1400012e 	bgeu	r2,r16,20096298 <___svfiprintf_internal_r+0xf64>
20096294:	1021883a 	mov	r16,r2
20096298:	8039883a 	mov	fp,r16
2009629c:	802d883a 	mov	r22,r16
200962a0:	80002116 	blt	r16,zero,20096328 <___svfiprintf_internal_r+0xff4>
200962a4:	00800034 	movhi	r2,0
200962a8:	1081ea04 	addi	r2,r2,1960
200962ac:	dd802015 	stw	r22,128(sp)
200962b0:	ddc02315 	stw	r23,140(sp)
200962b4:	d8802615 	stw	r2,152(sp)
200962b8:	003d5d06 	br	20095830 <__flash_rwdata_start+0xffff6a44>
200962bc:	04001004 	movi	r16,64
200962c0:	800b883a 	mov	r5,r16
200962c4:	008b6f40 	call	2008b6f4 <_malloc_r>
200962c8:	da802717 	ldw	r10,156(sp)
200962cc:	50800015 	stw	r2,0(r10)
200962d0:	50800415 	stw	r2,16(r10)
200962d4:	10002026 	beq	r2,zero,20096358 <___svfiprintf_internal_r+0x1024>
200962d8:	da802717 	ldw	r10,156(sp)
200962dc:	54000515 	stw	r16,20(r10)
200962e0:	003c2806 	br	20095384 <__flash_rwdata_start+0xffff6598>
200962e4:	01000034 	movhi	r4,0
200962e8:	21025104 	addi	r4,r4,2372
200962ec:	d9002815 	stw	r4,160(sp)
200962f0:	003d7e06 	br	200958ec <__flash_rwdata_start+0xffff6b00>
200962f4:	01000034 	movhi	r4,0
200962f8:	21025104 	addi	r4,r4,2372
200962fc:	d9002815 	stw	r4,160(sp)
20096300:	003e8706 	br	20095d20 <__flash_rwdata_start+0xffff6f34>
20096304:	01000034 	movhi	r4,0
20096308:	21024d04 	addi	r4,r4,2356
2009630c:	d9002215 	stw	r4,136(sp)
20096310:	003ef606 	br	20095eec <__flash_rwdata_start+0xffff7100>
20096314:	8039883a 	mov	fp,r16
20096318:	dac01d83 	ldbu	r11,118(sp)
2009631c:	ddc02315 	stw	r23,140(sp)
20096320:	0021883a 	mov	r16,zero
20096324:	003cd906 	br	2009568c <__flash_rwdata_start+0xffff68a0>
20096328:	002d883a 	mov	r22,zero
2009632c:	003fdd06 	br	200962a4 <__flash_rwdata_start+0xffff74b8>
20096330:	dac02317 	ldw	r11,140(sp)
20096334:	a805883a 	mov	r2,r21
20096338:	502b883a 	mov	r21,r10
2009633c:	5c000017 	ldw	r16,0(r11)
20096340:	59000104 	addi	r4,r11,4
20096344:	d9002315 	stw	r4,140(sp)
20096348:	803fae0e 	bge	r16,zero,20096204 <__flash_rwdata_start+0xffff7418>
2009634c:	043fffc4 	movi	r16,-1
20096350:	11000047 	ldb	r4,1(r2)
20096354:	003c4306 	br	20095464 <__flash_rwdata_start+0xffff6678>
20096358:	dac02917 	ldw	r11,164(sp)
2009635c:	00800304 	movi	r2,12
20096360:	58800015 	stw	r2,0(r11)
20096364:	00bfffc4 	movi	r2,-1
20096368:	003eb306 	br	20095e38 <__flash_rwdata_start+0xffff704c>

2009636c <__sprint_r.part.0>:
2009636c:	28801917 	ldw	r2,100(r5)
20096370:	defff604 	addi	sp,sp,-40
20096374:	dd400515 	stw	r21,20(sp)
20096378:	dcc00315 	stw	r19,12(sp)
2009637c:	dfc00915 	stw	ra,36(sp)
20096380:	df000815 	stw	fp,32(sp)
20096384:	ddc00715 	stw	r23,28(sp)
20096388:	dd800615 	stw	r22,24(sp)
2009638c:	dd000415 	stw	r20,16(sp)
20096390:	dc800215 	stw	r18,8(sp)
20096394:	dc400115 	stw	r17,4(sp)
20096398:	dc000015 	stw	r16,0(sp)
2009639c:	1088000c 	andi	r2,r2,8192
200963a0:	2827883a 	mov	r19,r5
200963a4:	302b883a 	mov	r21,r6
200963a8:	10002d26 	beq	r2,zero,20096460 <__sprint_r.part.0+0xf4>
200963ac:	30800217 	ldw	r2,8(r6)
200963b0:	35800017 	ldw	r22,0(r6)
200963b4:	10002826 	beq	r2,zero,20096458 <__sprint_r.part.0+0xec>
200963b8:	2029883a 	mov	r20,r4
200963bc:	b5c00104 	addi	r23,r22,4
200963c0:	04bfffc4 	movi	r18,-1
200963c4:	bc400017 	ldw	r17,0(r23)
200963c8:	b4000017 	ldw	r16,0(r22)
200963cc:	0039883a 	mov	fp,zero
200963d0:	8822d0ba 	srli	r17,r17,2
200963d4:	04400316 	blt	zero,r17,200963e4 <__sprint_r.part.0+0x78>
200963d8:	00001806 	br	2009643c <__sprint_r.part.0+0xd0>
200963dc:	84000104 	addi	r16,r16,4
200963e0:	8f001526 	beq	r17,fp,20096438 <__sprint_r.part.0+0xcc>
200963e4:	81400017 	ldw	r5,0(r16)
200963e8:	a009883a 	mov	r4,r20
200963ec:	980d883a 	mov	r6,r19
200963f0:	0097bfc0 	call	20097bfc <_fputwc_r>
200963f4:	e7000044 	addi	fp,fp,1
200963f8:	14bff81e 	bne	r2,r18,200963dc <__flash_rwdata_start+0xffff75f0>
200963fc:	9005883a 	mov	r2,r18
20096400:	a8000215 	stw	zero,8(r21)
20096404:	a8000115 	stw	zero,4(r21)
20096408:	dfc00917 	ldw	ra,36(sp)
2009640c:	df000817 	ldw	fp,32(sp)
20096410:	ddc00717 	ldw	r23,28(sp)
20096414:	dd800617 	ldw	r22,24(sp)
20096418:	dd400517 	ldw	r21,20(sp)
2009641c:	dd000417 	ldw	r20,16(sp)
20096420:	dcc00317 	ldw	r19,12(sp)
20096424:	dc800217 	ldw	r18,8(sp)
20096428:	dc400117 	ldw	r17,4(sp)
2009642c:	dc000017 	ldw	r16,0(sp)
20096430:	dec00a04 	addi	sp,sp,40
20096434:	f800283a 	ret
20096438:	a8800217 	ldw	r2,8(r21)
2009643c:	8c63883a 	add	r17,r17,r17
20096440:	8c63883a 	add	r17,r17,r17
20096444:	1445c83a 	sub	r2,r2,r17
20096448:	a8800215 	stw	r2,8(r21)
2009644c:	b5800204 	addi	r22,r22,8
20096450:	bdc00204 	addi	r23,r23,8
20096454:	103fdb1e 	bne	r2,zero,200963c4 <__flash_rwdata_start+0xffff75d8>
20096458:	0005883a 	mov	r2,zero
2009645c:	003fe806 	br	20096400 <__flash_rwdata_start+0xffff7614>
20096460:	0092cbc0 	call	20092cbc <__sfvwrite_r>
20096464:	003fe606 	br	20096400 <__flash_rwdata_start+0xffff7614>

20096468 <__sprint_r>:
20096468:	30c00217 	ldw	r3,8(r6)
2009646c:	18000126 	beq	r3,zero,20096474 <__sprint_r+0xc>
20096470:	009636c1 	jmpi	2009636c <__sprint_r.part.0>
20096474:	30000115 	stw	zero,4(r6)
20096478:	0005883a 	mov	r2,zero
2009647c:	f800283a 	ret

20096480 <___vfiprintf_internal_r>:
20096480:	deffca04 	addi	sp,sp,-216
20096484:	dd803215 	stw	r22,200(sp)
20096488:	dd403115 	stw	r21,196(sp)
2009648c:	dfc03515 	stw	ra,212(sp)
20096490:	df003415 	stw	fp,208(sp)
20096494:	ddc03315 	stw	r23,204(sp)
20096498:	dd003015 	stw	r20,192(sp)
2009649c:	dcc02f15 	stw	r19,188(sp)
200964a0:	dc802e15 	stw	r18,184(sp)
200964a4:	dc402d15 	stw	r17,180(sp)
200964a8:	dc002c15 	stw	r16,176(sp)
200964ac:	d9002015 	stw	r4,128(sp)
200964b0:	d9c02215 	stw	r7,136(sp)
200964b4:	282b883a 	mov	r21,r5
200964b8:	302d883a 	mov	r22,r6
200964bc:	20000226 	beq	r4,zero,200964c8 <___vfiprintf_internal_r+0x48>
200964c0:	20800e17 	ldw	r2,56(r4)
200964c4:	1001b126 	beq	r2,zero,20096b8c <___vfiprintf_internal_r+0x70c>
200964c8:	a880030b 	ldhu	r2,12(r21)
200964cc:	10c8000c 	andi	r3,r2,8192
200964d0:	1800061e 	bne	r3,zero,200964ec <___vfiprintf_internal_r+0x6c>
200964d4:	a9001917 	ldw	r4,100(r21)
200964d8:	00f7ffc4 	movi	r3,-8193
200964dc:	10880014 	ori	r2,r2,8192
200964e0:	20c6703a 	and	r3,r4,r3
200964e4:	a880030d 	sth	r2,12(r21)
200964e8:	a8c01915 	stw	r3,100(r21)
200964ec:	10c0020c 	andi	r3,r2,8
200964f0:	18018926 	beq	r3,zero,20096b18 <___vfiprintf_internal_r+0x698>
200964f4:	a8c00417 	ldw	r3,16(r21)
200964f8:	18018726 	beq	r3,zero,20096b18 <___vfiprintf_internal_r+0x698>
200964fc:	1080068c 	andi	r2,r2,26
20096500:	00c00284 	movi	r3,10
20096504:	10c18c26 	beq	r2,r3,20096b38 <___vfiprintf_internal_r+0x6b8>
20096508:	d8801a04 	addi	r2,sp,104
2009650c:	d8c019c4 	addi	r3,sp,103
20096510:	07000034 	movhi	fp,0
20096514:	05c00034 	movhi	r23,0
20096518:	10c9c83a 	sub	r4,r2,r3
2009651c:	e7025904 	addi	fp,fp,2404
20096520:	bdc25504 	addi	r23,r23,2388
20096524:	d8801e15 	stw	r2,120(sp)
20096528:	d8c01f15 	stw	r3,124(sp)
2009652c:	dec01a15 	stw	sp,104(sp)
20096530:	d8001c15 	stw	zero,112(sp)
20096534:	d8001b15 	stw	zero,108(sp)
20096538:	d8002615 	stw	zero,152(sp)
2009653c:	d8002315 	stw	zero,140(sp)
20096540:	d9002715 	stw	r4,156(sp)
20096544:	d811883a 	mov	r8,sp
20096548:	dd402115 	stw	r21,132(sp)
2009654c:	b021883a 	mov	r16,r22
20096550:	80800007 	ldb	r2,0(r16)
20096554:	10037226 	beq	r2,zero,20097320 <___vfiprintf_internal_r+0xea0>
20096558:	01000944 	movi	r4,37
2009655c:	11037026 	beq	r2,r4,20097320 <___vfiprintf_internal_r+0xea0>
20096560:	8005883a 	mov	r2,r16
20096564:	00000106 	br	2009656c <___vfiprintf_internal_r+0xec>
20096568:	19000326 	beq	r3,r4,20096578 <___vfiprintf_internal_r+0xf8>
2009656c:	10800044 	addi	r2,r2,1
20096570:	10c00007 	ldb	r3,0(r2)
20096574:	183ffc1e 	bne	r3,zero,20096568 <__flash_rwdata_start+0xffff777c>
20096578:	1425c83a 	sub	r18,r2,r16
2009657c:	1023883a 	mov	r17,r2
20096580:	90001026 	beq	r18,zero,200965c4 <___vfiprintf_internal_r+0x144>
20096584:	d8c01c17 	ldw	r3,112(sp)
20096588:	d8801b17 	ldw	r2,108(sp)
2009658c:	44000015 	stw	r16,0(r8)
20096590:	90c7883a 	add	r3,r18,r3
20096594:	10800044 	addi	r2,r2,1
20096598:	44800115 	stw	r18,4(r8)
2009659c:	d8c01c15 	stw	r3,112(sp)
200965a0:	d8801b15 	stw	r2,108(sp)
200965a4:	010001c4 	movi	r4,7
200965a8:	2080750e 	bge	r4,r2,20096780 <___vfiprintf_internal_r+0x300>
200965ac:	18036f1e 	bne	r3,zero,2009736c <___vfiprintf_internal_r+0xeec>
200965b0:	d8802317 	ldw	r2,140(sp)
200965b4:	d8001b15 	stw	zero,108(sp)
200965b8:	d811883a 	mov	r8,sp
200965bc:	1485883a 	add	r2,r2,r18
200965c0:	d8802315 	stw	r2,140(sp)
200965c4:	88800007 	ldb	r2,0(r17)
200965c8:	10041026 	beq	r2,zero,2009760c <___vfiprintf_internal_r+0x118c>
200965cc:	88c00047 	ldb	r3,1(r17)
200965d0:	88800044 	addi	r2,r17,1
200965d4:	d8001d85 	stb	zero,118(sp)
200965d8:	000f883a 	mov	r7,zero
200965dc:	027fffc4 	movi	r9,-1
200965e0:	0025883a 	mov	r18,zero
200965e4:	002b883a 	mov	r21,zero
200965e8:	01401604 	movi	r5,88
200965ec:	01800244 	movi	r6,9
200965f0:	03400a84 	movi	r13,42
200965f4:	03001b04 	movi	r12,108
200965f8:	14000044 	addi	r16,r2,1
200965fc:	18bff804 	addi	r2,r3,-32
20096600:	28825536 	bltu	r5,r2,20096f58 <___vfiprintf_internal_r+0xad8>
20096604:	100490ba 	slli	r2,r2,2
20096608:	01080274 	movhi	r4,8201
2009660c:	21198704 	addi	r4,r4,26140
20096610:	1105883a 	add	r2,r2,r4
20096614:	10800017 	ldw	r2,0(r2)
20096618:	1000683a 	jmp	r2
2009661c:	20096d1c 	xori	zero,r4,9652
20096620:	20096f58 	cmpnei	zero,r4,9661
20096624:	20096f58 	cmpnei	zero,r4,9661
20096628:	20096d3c 	xorhi	zero,r4,9652
2009662c:	20096f58 	cmpnei	zero,r4,9661
20096630:	20096f58 	cmpnei	zero,r4,9661
20096634:	20096f58 	cmpnei	zero,r4,9661
20096638:	20096f58 	cmpnei	zero,r4,9661
2009663c:	20096f58 	cmpnei	zero,r4,9661
20096640:	20096f58 	cmpnei	zero,r4,9661
20096644:	20096d4c 	andi	zero,r4,9653
20096648:	20096d6c 	andhi	zero,r4,9653
2009664c:	20096f58 	cmpnei	zero,r4,9661
20096650:	20096b94 	ori	zero,r4,9646
20096654:	20096c80 	call	220096c8 <__flash_rwdata_start+0x1f6a8dc>
20096658:	20096f58 	cmpnei	zero,r4,9661
2009665c:	20096c00 	call	220096c0 <__flash_rwdata_start+0x1f6a8d4>
20096660:	20096c10 	cmplti	zero,r4,9648
20096664:	20096c10 	cmplti	zero,r4,9648
20096668:	20096c10 	cmplti	zero,r4,9648
2009666c:	20096c10 	cmplti	zero,r4,9648
20096670:	20096c10 	cmplti	zero,r4,9648
20096674:	20096c10 	cmplti	zero,r4,9648
20096678:	20096c10 	cmplti	zero,r4,9648
2009667c:	20096c10 	cmplti	zero,r4,9648
20096680:	20096c10 	cmplti	zero,r4,9648
20096684:	20096f58 	cmpnei	zero,r4,9661
20096688:	20096f58 	cmpnei	zero,r4,9661
2009668c:	20096f58 	cmpnei	zero,r4,9661
20096690:	20096f58 	cmpnei	zero,r4,9661
20096694:	20096f58 	cmpnei	zero,r4,9661
20096698:	20096f58 	cmpnei	zero,r4,9661
2009669c:	20096f58 	cmpnei	zero,r4,9661
200966a0:	20096f58 	cmpnei	zero,r4,9661
200966a4:	20096f58 	cmpnei	zero,r4,9661
200966a8:	20096f58 	cmpnei	zero,r4,9661
200966ac:	20096c3c 	xorhi	zero,r4,9648
200966b0:	20096f58 	cmpnei	zero,r4,9661
200966b4:	20096f58 	cmpnei	zero,r4,9661
200966b8:	20096f58 	cmpnei	zero,r4,9661
200966bc:	20096f58 	cmpnei	zero,r4,9661
200966c0:	20096f58 	cmpnei	zero,r4,9661
200966c4:	20096f58 	cmpnei	zero,r4,9661
200966c8:	20096f58 	cmpnei	zero,r4,9661
200966cc:	20096f58 	cmpnei	zero,r4,9661
200966d0:	20096f58 	cmpnei	zero,r4,9661
200966d4:	20096f58 	cmpnei	zero,r4,9661
200966d8:	200967c8 	cmpgei	zero,r4,9631
200966dc:	20096f58 	cmpnei	zero,r4,9661
200966e0:	20096f58 	cmpnei	zero,r4,9661
200966e4:	20096f58 	cmpnei	zero,r4,9661
200966e8:	20096f58 	cmpnei	zero,r4,9661
200966ec:	20096f58 	cmpnei	zero,r4,9661
200966f0:	20096794 	ori	zero,r4,9630
200966f4:	20096f58 	cmpnei	zero,r4,9661
200966f8:	20096f58 	cmpnei	zero,r4,9661
200966fc:	20096ddc 	xori	zero,r4,9655
20096700:	20096f58 	cmpnei	zero,r4,9661
20096704:	20096f58 	cmpnei	zero,r4,9661
20096708:	20096f58 	cmpnei	zero,r4,9661
2009670c:	20096f58 	cmpnei	zero,r4,9661
20096710:	20096f58 	cmpnei	zero,r4,9661
20096714:	20096f58 	cmpnei	zero,r4,9661
20096718:	20096f58 	cmpnei	zero,r4,9661
2009671c:	20096f58 	cmpnei	zero,r4,9661
20096720:	20096f58 	cmpnei	zero,r4,9661
20096724:	20096f58 	cmpnei	zero,r4,9661
20096728:	20096d7c 	xorhi	zero,r4,9653
2009672c:	20096da8 	cmpgeui	zero,r4,9654
20096730:	20096f58 	cmpnei	zero,r4,9661
20096734:	20096f58 	cmpnei	zero,r4,9661
20096738:	20096f58 	cmpnei	zero,r4,9661
2009673c:	20096e84 	addi	zero,r4,9658
20096740:	20096da8 	cmpgeui	zero,r4,9654
20096744:	20096f58 	cmpnei	zero,r4,9661
20096748:	20096f58 	cmpnei	zero,r4,9661
2009674c:	20096e94 	ori	zero,r4,9658
20096750:	20096f58 	cmpnei	zero,r4,9661
20096754:	20096cc0 	call	220096cc <__flash_rwdata_start+0x1f6a8e0>
20096758:	200967cc 	andi	zero,r4,9631
2009675c:	20096ea8 	cmpgeui	zero,r4,9658
20096760:	20096ee8 	cmpgeui	zero,r4,9659
20096764:	20096f58 	cmpnei	zero,r4,9661
20096768:	20096e30 	cmpltui	zero,r4,9656
2009676c:	20096f58 	cmpnei	zero,r4,9661
20096770:	20096798 	cmpnei	zero,r4,9630
20096774:	20096f58 	cmpnei	zero,r4,9661
20096778:	20096f58 	cmpnei	zero,r4,9661
2009677c:	20096ef8 	rdprs	zero,r4,9659
20096780:	42000204 	addi	r8,r8,8
20096784:	d8802317 	ldw	r2,140(sp)
20096788:	1485883a 	add	r2,r2,r18
2009678c:	d8802315 	stw	r2,140(sp)
20096790:	003f8c06 	br	200965c4 <__flash_rwdata_start+0xffff77d8>
20096794:	ad400414 	ori	r21,r21,16
20096798:	a880080c 	andi	r2,r21,32
2009679c:	1001e61e 	bne	r2,zero,20096f38 <___vfiprintf_internal_r+0xab8>
200967a0:	a880040c 	andi	r2,r21,16
200967a4:	10034726 	beq	r2,zero,200974c4 <___vfiprintf_internal_r+0x1044>
200967a8:	d8802217 	ldw	r2,136(sp)
200967ac:	001b883a 	mov	r13,zero
200967b0:	15800017 	ldw	r22,0(r2)
200967b4:	10800104 	addi	r2,r2,4
200967b8:	d8802215 	stw	r2,136(sp)
200967bc:	b009883a 	mov	r4,r22
200967c0:	00800044 	movi	r2,1
200967c4:	00000c06 	br	200967f8 <___vfiprintf_internal_r+0x378>
200967c8:	ad400414 	ori	r21,r21,16
200967cc:	a880080c 	andi	r2,r21,32
200967d0:	1001491e 	bne	r2,zero,20096cf8 <___vfiprintf_internal_r+0x878>
200967d4:	a880040c 	andi	r2,r21,16
200967d8:	10032d26 	beq	r2,zero,20097490 <___vfiprintf_internal_r+0x1010>
200967dc:	d9002217 	ldw	r4,136(sp)
200967e0:	001b883a 	mov	r13,zero
200967e4:	0005883a 	mov	r2,zero
200967e8:	25800017 	ldw	r22,0(r4)
200967ec:	21000104 	addi	r4,r4,4
200967f0:	d9002215 	stw	r4,136(sp)
200967f4:	b009883a 	mov	r4,r22
200967f8:	d8001d85 	stb	zero,118(sp)
200967fc:	4827883a 	mov	r19,r9
20096800:	001d883a 	mov	r14,zero
20096804:	48000216 	blt	r9,zero,20096810 <___vfiprintf_internal_r+0x390>
20096808:	00ffdfc4 	movi	r3,-129
2009680c:	a8ea703a 	and	r21,r21,r3
20096810:	2002071e 	bne	r4,zero,20097030 <___vfiprintf_internal_r+0xbb0>
20096814:	4802ad26 	beq	r9,zero,200972cc <___vfiprintf_internal_r+0xe4c>
20096818:	10803fcc 	andi	r2,r2,255
2009681c:	00c00044 	movi	r3,1
20096820:	10c22b26 	beq	r2,r3,200970d0 <___vfiprintf_internal_r+0xc50>
20096824:	00c00084 	movi	r3,2
20096828:	dd001a04 	addi	r20,sp,104
2009682c:	10c0dd1e 	bne	r2,r3,20096ba4 <___vfiprintf_internal_r+0x724>
20096830:	d9002617 	ldw	r4,152(sp)
20096834:	b08003cc 	andi	r2,r22,15
20096838:	6806973a 	slli	r3,r13,28
2009683c:	2085883a 	add	r2,r4,r2
20096840:	b02cd13a 	srli	r22,r22,4
20096844:	10800003 	ldbu	r2,0(r2)
20096848:	681ad13a 	srli	r13,r13,4
2009684c:	a53fffc4 	addi	r20,r20,-1
20096850:	1dacb03a 	or	r22,r3,r22
20096854:	a0800005 	stb	r2,0(r20)
20096858:	b344b03a 	or	r2,r22,r13
2009685c:	103ff51e 	bne	r2,zero,20096834 <__flash_rwdata_start+0xffff7a48>
20096860:	d9001e17 	ldw	r4,120(sp)
20096864:	2527c83a 	sub	r19,r4,r20
20096868:	9823883a 	mov	r17,r19
2009686c:	9a40010e 	bge	r19,r9,20096874 <___vfiprintf_internal_r+0x3f4>
20096870:	4823883a 	mov	r17,r9
20096874:	73803fcc 	andi	r14,r14,255
20096878:	7380201c 	xori	r14,r14,128
2009687c:	73bfe004 	addi	r14,r14,-128
20096880:	70000126 	beq	r14,zero,20096888 <___vfiprintf_internal_r+0x408>
20096884:	8c400044 	addi	r17,r17,1
20096888:	ab40008c 	andi	r13,r21,2
2009688c:	68000126 	beq	r13,zero,20096894 <___vfiprintf_internal_r+0x414>
20096890:	8c400084 	addi	r17,r17,2
20096894:	ad80210c 	andi	r22,r21,132
20096898:	b001c51e 	bne	r22,zero,20096fb0 <___vfiprintf_internal_r+0xb30>
2009689c:	9447c83a 	sub	r3,r18,r17
200968a0:	00c1c30e 	bge	zero,r3,20096fb0 <___vfiprintf_internal_r+0xb30>
200968a4:	01c00404 	movi	r7,16
200968a8:	d8801c17 	ldw	r2,112(sp)
200968ac:	38c37b0e 	bge	r7,r3,2009769c <___vfiprintf_internal_r+0x121c>
200968b0:	01000034 	movhi	r4,0
200968b4:	21025904 	addi	r4,r4,2404
200968b8:	dc002915 	stw	r16,164(sp)
200968bc:	d9801b17 	ldw	r6,108(sp)
200968c0:	d9002415 	stw	r4,144(sp)
200968c4:	03c001c4 	movi	r15,7
200968c8:	da402515 	stw	r9,148(sp)
200968cc:	db402815 	stw	r13,160(sp)
200968d0:	1821883a 	mov	r16,r3
200968d4:	00000506 	br	200968ec <___vfiprintf_internal_r+0x46c>
200968d8:	31400084 	addi	r5,r6,2
200968dc:	42000204 	addi	r8,r8,8
200968e0:	200d883a 	mov	r6,r4
200968e4:	843ffc04 	addi	r16,r16,-16
200968e8:	3c000d0e 	bge	r7,r16,20096920 <___vfiprintf_internal_r+0x4a0>
200968ec:	10800404 	addi	r2,r2,16
200968f0:	31000044 	addi	r4,r6,1
200968f4:	47000015 	stw	fp,0(r8)
200968f8:	41c00115 	stw	r7,4(r8)
200968fc:	d8801c15 	stw	r2,112(sp)
20096900:	d9001b15 	stw	r4,108(sp)
20096904:	793ff40e 	bge	r15,r4,200968d8 <__flash_rwdata_start+0xffff7aec>
20096908:	10019b1e 	bne	r2,zero,20096f78 <___vfiprintf_internal_r+0xaf8>
2009690c:	843ffc04 	addi	r16,r16,-16
20096910:	000d883a 	mov	r6,zero
20096914:	01400044 	movi	r5,1
20096918:	d811883a 	mov	r8,sp
2009691c:	3c3ff316 	blt	r7,r16,200968ec <__flash_rwdata_start+0xffff7b00>
20096920:	8007883a 	mov	r3,r16
20096924:	da402517 	ldw	r9,148(sp)
20096928:	db402817 	ldw	r13,160(sp)
2009692c:	dc002917 	ldw	r16,164(sp)
20096930:	d9002417 	ldw	r4,144(sp)
20096934:	1885883a 	add	r2,r3,r2
20096938:	40c00115 	stw	r3,4(r8)
2009693c:	41000015 	stw	r4,0(r8)
20096940:	d8801c15 	stw	r2,112(sp)
20096944:	d9401b15 	stw	r5,108(sp)
20096948:	00c001c4 	movi	r3,7
2009694c:	19426a16 	blt	r3,r5,200972f8 <___vfiprintf_internal_r+0xe78>
20096950:	d8c01d87 	ldb	r3,118(sp)
20096954:	42000204 	addi	r8,r8,8
20096958:	29000044 	addi	r4,r5,1
2009695c:	1801991e 	bne	r3,zero,20096fc4 <___vfiprintf_internal_r+0xb44>
20096960:	68000c26 	beq	r13,zero,20096994 <___vfiprintf_internal_r+0x514>
20096964:	d8c01d04 	addi	r3,sp,116
20096968:	10800084 	addi	r2,r2,2
2009696c:	40c00015 	stw	r3,0(r8)
20096970:	00c00084 	movi	r3,2
20096974:	40c00115 	stw	r3,4(r8)
20096978:	d8801c15 	stw	r2,112(sp)
2009697c:	d9001b15 	stw	r4,108(sp)
20096980:	00c001c4 	movi	r3,7
20096984:	19024c16 	blt	r3,r4,200972b8 <___vfiprintf_internal_r+0xe38>
20096988:	200b883a 	mov	r5,r4
2009698c:	42000204 	addi	r8,r8,8
20096990:	21000044 	addi	r4,r4,1
20096994:	00c02004 	movi	r3,128
20096998:	b0c20126 	beq	r22,r3,200971a0 <___vfiprintf_internal_r+0xd20>
2009699c:	4cedc83a 	sub	r22,r9,r19
200969a0:	0580230e 	bge	zero,r22,20096a30 <___vfiprintf_internal_r+0x5b0>
200969a4:	01c00404 	movi	r7,16
200969a8:	3d83140e 	bge	r7,r22,200975fc <___vfiprintf_internal_r+0x117c>
200969ac:	01000034 	movhi	r4,0
200969b0:	21025504 	addi	r4,r4,2388
200969b4:	d9002415 	stw	r4,144(sp)
200969b8:	034001c4 	movi	r13,7
200969bc:	00000506 	br	200969d4 <___vfiprintf_internal_r+0x554>
200969c0:	29000084 	addi	r4,r5,2
200969c4:	42000204 	addi	r8,r8,8
200969c8:	180b883a 	mov	r5,r3
200969cc:	b5bffc04 	addi	r22,r22,-16
200969d0:	3d800d0e 	bge	r7,r22,20096a08 <___vfiprintf_internal_r+0x588>
200969d4:	10800404 	addi	r2,r2,16
200969d8:	28c00044 	addi	r3,r5,1
200969dc:	45c00015 	stw	r23,0(r8)
200969e0:	41c00115 	stw	r7,4(r8)
200969e4:	d8801c15 	stw	r2,112(sp)
200969e8:	d8c01b15 	stw	r3,108(sp)
200969ec:	68fff40e 	bge	r13,r3,200969c0 <__flash_rwdata_start+0xffff7bd4>
200969f0:	1001811e 	bne	r2,zero,20096ff8 <___vfiprintf_internal_r+0xb78>
200969f4:	b5bffc04 	addi	r22,r22,-16
200969f8:	01000044 	movi	r4,1
200969fc:	000b883a 	mov	r5,zero
20096a00:	d811883a 	mov	r8,sp
20096a04:	3dbff316 	blt	r7,r22,200969d4 <__flash_rwdata_start+0xffff7be8>
20096a08:	d8c02417 	ldw	r3,144(sp)
20096a0c:	1585883a 	add	r2,r2,r22
20096a10:	45800115 	stw	r22,4(r8)
20096a14:	40c00015 	stw	r3,0(r8)
20096a18:	d8801c15 	stw	r2,112(sp)
20096a1c:	d9001b15 	stw	r4,108(sp)
20096a20:	00c001c4 	movi	r3,7
20096a24:	1901d016 	blt	r3,r4,20097168 <___vfiprintf_internal_r+0xce8>
20096a28:	42000204 	addi	r8,r8,8
20096a2c:	21000044 	addi	r4,r4,1
20096a30:	14c5883a 	add	r2,r2,r19
20096a34:	45000015 	stw	r20,0(r8)
20096a38:	44c00115 	stw	r19,4(r8)
20096a3c:	d8801c15 	stw	r2,112(sp)
20096a40:	d9001b15 	stw	r4,108(sp)
20096a44:	00c001c4 	movi	r3,7
20096a48:	1901cf0e 	bge	r3,r4,20097188 <___vfiprintf_internal_r+0xd08>
20096a4c:	1002361e 	bne	r2,zero,20097328 <___vfiprintf_internal_r+0xea8>
20096a50:	d8001b15 	stw	zero,108(sp)
20096a54:	aac0010c 	andi	r11,r21,4
20096a58:	58002826 	beq	r11,zero,20096afc <___vfiprintf_internal_r+0x67c>
20096a5c:	9467c83a 	sub	r19,r18,r17
20096a60:	d811883a 	mov	r8,sp
20096a64:	04c3340e 	bge	zero,r19,20097738 <___vfiprintf_internal_r+0x12b8>
20096a68:	01c00404 	movi	r7,16
20096a6c:	3cc31b0e 	bge	r7,r19,200976dc <___vfiprintf_internal_r+0x125c>
20096a70:	00c00034 	movhi	r3,0
20096a74:	18c25904 	addi	r3,r3,2404
20096a78:	d9001b17 	ldw	r4,108(sp)
20096a7c:	d8c02415 	stw	r3,144(sp)
20096a80:	382b883a 	mov	r21,r7
20096a84:	050001c4 	movi	r20,7
20096a88:	dd802017 	ldw	r22,128(sp)
20096a8c:	00000506 	br	20096aa4 <___vfiprintf_internal_r+0x624>
20096a90:	21400084 	addi	r5,r4,2
20096a94:	42000204 	addi	r8,r8,8
20096a98:	1809883a 	mov	r4,r3
20096a9c:	9cfffc04 	addi	r19,r19,-16
20096aa0:	acc00d0e 	bge	r21,r19,20096ad8 <___vfiprintf_internal_r+0x658>
20096aa4:	10800404 	addi	r2,r2,16
20096aa8:	20c00044 	addi	r3,r4,1
20096aac:	47000015 	stw	fp,0(r8)
20096ab0:	45400115 	stw	r21,4(r8)
20096ab4:	d8801c15 	stw	r2,112(sp)
20096ab8:	d8c01b15 	stw	r3,108(sp)
20096abc:	a0fff40e 	bge	r20,r3,20096a90 <__flash_rwdata_start+0xffff7ca4>
20096ac0:	10019f1e 	bne	r2,zero,20097140 <___vfiprintf_internal_r+0xcc0>
20096ac4:	9cfffc04 	addi	r19,r19,-16
20096ac8:	01400044 	movi	r5,1
20096acc:	0009883a 	mov	r4,zero
20096ad0:	d811883a 	mov	r8,sp
20096ad4:	acfff316 	blt	r21,r19,20096aa4 <__flash_rwdata_start+0xffff7cb8>
20096ad8:	d8c02417 	ldw	r3,144(sp)
20096adc:	14c5883a 	add	r2,r2,r19
20096ae0:	44c00115 	stw	r19,4(r8)
20096ae4:	40c00015 	stw	r3,0(r8)
20096ae8:	d8801c15 	stw	r2,112(sp)
20096aec:	d9401b15 	stw	r5,108(sp)
20096af0:	00c001c4 	movi	r3,7
20096af4:	1941810e 	bge	r3,r5,200970fc <___vfiprintf_internal_r+0xc7c>
20096af8:	10017a1e 	bne	r2,zero,200970e4 <___vfiprintf_internal_r+0xc64>
20096afc:	8c82a416 	blt	r17,r18,20097590 <___vfiprintf_internal_r+0x1110>
20096b00:	d9002317 	ldw	r4,140(sp)
20096b04:	2449883a 	add	r4,r4,r17
20096b08:	d9002315 	stw	r4,140(sp)
20096b0c:	d8001b15 	stw	zero,108(sp)
20096b10:	d811883a 	mov	r8,sp
20096b14:	003e8e06 	br	20096550 <__flash_rwdata_start+0xffff7764>
20096b18:	d9002017 	ldw	r4,128(sp)
20096b1c:	a80b883a 	mov	r5,r21
20096b20:	00906640 	call	20090664 <__swsetup_r>
20096b24:	10000c1e 	bne	r2,zero,20096b58 <___vfiprintf_internal_r+0x6d8>
20096b28:	a880030b 	ldhu	r2,12(r21)
20096b2c:	00c00284 	movi	r3,10
20096b30:	1080068c 	andi	r2,r2,26
20096b34:	10fe741e 	bne	r2,r3,20096508 <__flash_rwdata_start+0xffff771c>
20096b38:	a880038f 	ldh	r2,14(r21)
20096b3c:	103e7216 	blt	r2,zero,20096508 <__flash_rwdata_start+0xffff771c>
20096b40:	d9002017 	ldw	r4,128(sp)
20096b44:	d9c02217 	ldw	r7,136(sp)
20096b48:	a80b883a 	mov	r5,r21
20096b4c:	b00d883a 	mov	r6,r22
20096b50:	00977740 	call	20097774 <__sbprintf>
20096b54:	00000106 	br	20096b5c <___vfiprintf_internal_r+0x6dc>
20096b58:	00bfffc4 	movi	r2,-1
20096b5c:	dfc03517 	ldw	ra,212(sp)
20096b60:	df003417 	ldw	fp,208(sp)
20096b64:	ddc03317 	ldw	r23,204(sp)
20096b68:	dd803217 	ldw	r22,200(sp)
20096b6c:	dd403117 	ldw	r21,196(sp)
20096b70:	dd003017 	ldw	r20,192(sp)
20096b74:	dcc02f17 	ldw	r19,188(sp)
20096b78:	dc802e17 	ldw	r18,184(sp)
20096b7c:	dc402d17 	ldw	r17,180(sp)
20096b80:	dc002c17 	ldw	r16,176(sp)
20096b84:	dec03604 	addi	sp,sp,216
20096b88:	f800283a 	ret
20096b8c:	00928580 	call	20092858 <__sinit>
20096b90:	003e4d06 	br	200964c8 <__flash_rwdata_start+0xffff76dc>
20096b94:	8005883a 	mov	r2,r16
20096b98:	ad400114 	ori	r21,r21,4
20096b9c:	80c00007 	ldb	r3,0(r16)
20096ba0:	003e9506 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096ba4:	b006d0fa 	srli	r3,r22,3
20096ba8:	6808977a 	slli	r4,r13,29
20096bac:	681ad0fa 	srli	r13,r13,3
20096bb0:	b58001cc 	andi	r22,r22,7
20096bb4:	b0800c04 	addi	r2,r22,48
20096bb8:	a53fffc4 	addi	r20,r20,-1
20096bbc:	20ecb03a 	or	r22,r4,r3
20096bc0:	a0800005 	stb	r2,0(r20)
20096bc4:	b346b03a 	or	r3,r22,r13
20096bc8:	183ff61e 	bne	r3,zero,20096ba4 <__flash_rwdata_start+0xffff7db8>
20096bcc:	a8c0004c 	andi	r3,r21,1
20096bd0:	a009883a 	mov	r4,r20
20096bd4:	18013b26 	beq	r3,zero,200970c4 <___vfiprintf_internal_r+0xc44>
20096bd8:	10803fcc 	andi	r2,r2,255
20096bdc:	1080201c 	xori	r2,r2,128
20096be0:	10bfe004 	addi	r2,r2,-128
20096be4:	00c00c04 	movi	r3,48
20096be8:	10ff1d26 	beq	r2,r3,20096860 <__flash_rwdata_start+0xffff7a74>
20096bec:	d8801e17 	ldw	r2,120(sp)
20096bf0:	a53fffc4 	addi	r20,r20,-1
20096bf4:	20ffffc5 	stb	r3,-1(r4)
20096bf8:	1527c83a 	sub	r19,r2,r20
20096bfc:	003f1a06 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
20096c00:	ad402014 	ori	r21,r21,128
20096c04:	8005883a 	mov	r2,r16
20096c08:	80c00007 	ldb	r3,0(r16)
20096c0c:	003e7a06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096c10:	8005883a 	mov	r2,r16
20096c14:	0025883a 	mov	r18,zero
20096c18:	193ff404 	addi	r4,r3,-48
20096c1c:	10c00007 	ldb	r3,0(r2)
20096c20:	948002a4 	muli	r18,r18,10
20096c24:	84000044 	addi	r16,r16,1
20096c28:	8005883a 	mov	r2,r16
20096c2c:	9125883a 	add	r18,r18,r4
20096c30:	193ff404 	addi	r4,r3,-48
20096c34:	313ff92e 	bgeu	r6,r4,20096c1c <__flash_rwdata_start+0xffff7e30>
20096c38:	003e7006 	br	200965fc <__flash_rwdata_start+0xffff7810>
20096c3c:	ad400414 	ori	r21,r21,16
20096c40:	d9c01d85 	stb	r7,118(sp)
20096c44:	a880080c 	andi	r2,r21,32
20096c48:	d8c02217 	ldw	r3,136(sp)
20096c4c:	10005a26 	beq	r2,zero,20096db8 <___vfiprintf_internal_r+0x938>
20096c50:	d9002217 	ldw	r4,136(sp)
20096c54:	18800117 	ldw	r2,4(r3)
20096c58:	1d800017 	ldw	r22,0(r3)
20096c5c:	21000204 	addi	r4,r4,8
20096c60:	d9002215 	stw	r4,136(sp)
20096c64:	101b883a 	mov	r13,r2
20096c68:	1001f416 	blt	r2,zero,2009743c <___vfiprintf_internal_r+0xfbc>
20096c6c:	db801d83 	ldbu	r14,118(sp)
20096c70:	4827883a 	mov	r19,r9
20096c74:	00800044 	movi	r2,1
20096c78:	b348b03a 	or	r4,r22,r13
20096c7c:	003ee106 	br	20096804 <__flash_rwdata_start+0xffff7a18>
20096c80:	80c00007 	ldb	r3,0(r16)
20096c84:	80800044 	addi	r2,r16,1
20096c88:	1b42a326 	beq	r3,r13,20097718 <___vfiprintf_internal_r+0x1298>
20096c8c:	193ff404 	addi	r4,r3,-48
20096c90:	1021883a 	mov	r16,r2
20096c94:	0013883a 	mov	r9,zero
20096c98:	313e5836 	bltu	r6,r4,200965fc <__flash_rwdata_start+0xffff7810>
20096c9c:	80c00007 	ldb	r3,0(r16)
20096ca0:	4a4002a4 	muli	r9,r9,10
20096ca4:	84000044 	addi	r16,r16,1
20096ca8:	2253883a 	add	r9,r4,r9
20096cac:	193ff404 	addi	r4,r3,-48
20096cb0:	313ffa2e 	bgeu	r6,r4,20096c9c <__flash_rwdata_start+0xffff7eb0>
20096cb4:	483e510e 	bge	r9,zero,200965fc <__flash_rwdata_start+0xffff7810>
20096cb8:	027fffc4 	movi	r9,-1
20096cbc:	003e4f06 	br	200965fc <__flash_rwdata_start+0xffff7810>
20096cc0:	d9c01d85 	stb	r7,118(sp)
20096cc4:	a880080c 	andi	r2,r21,32
20096cc8:	10020826 	beq	r2,zero,200974ec <___vfiprintf_internal_r+0x106c>
20096ccc:	d8c02217 	ldw	r3,136(sp)
20096cd0:	d9002317 	ldw	r4,140(sp)
20096cd4:	18800017 	ldw	r2,0(r3)
20096cd8:	2007d7fa 	srai	r3,r4,31
20096cdc:	d9002217 	ldw	r4,136(sp)
20096ce0:	10c00115 	stw	r3,4(r2)
20096ce4:	21000104 	addi	r4,r4,4
20096ce8:	d9002215 	stw	r4,136(sp)
20096cec:	d9002317 	ldw	r4,140(sp)
20096cf0:	11000015 	stw	r4,0(r2)
20096cf4:	003e1606 	br	20096550 <__flash_rwdata_start+0xffff7764>
20096cf8:	d8802217 	ldw	r2,136(sp)
20096cfc:	d8c02217 	ldw	r3,136(sp)
20096d00:	15800017 	ldw	r22,0(r2)
20096d04:	13400117 	ldw	r13,4(r2)
20096d08:	18c00204 	addi	r3,r3,8
20096d0c:	0005883a 	mov	r2,zero
20096d10:	d8c02215 	stw	r3,136(sp)
20096d14:	b348b03a 	or	r4,r22,r13
20096d18:	003eb706 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20096d1c:	38803fcc 	andi	r2,r7,255
20096d20:	1080201c 	xori	r2,r2,128
20096d24:	10bfe004 	addi	r2,r2,-128
20096d28:	1001e31e 	bne	r2,zero,200974b8 <___vfiprintf_internal_r+0x1038>
20096d2c:	8005883a 	mov	r2,r16
20096d30:	01c00804 	movi	r7,32
20096d34:	80c00007 	ldb	r3,0(r16)
20096d38:	003e2f06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096d3c:	ad400054 	ori	r21,r21,1
20096d40:	8005883a 	mov	r2,r16
20096d44:	80c00007 	ldb	r3,0(r16)
20096d48:	003e2b06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096d4c:	d8c02217 	ldw	r3,136(sp)
20096d50:	1c800017 	ldw	r18,0(r3)
20096d54:	18c00104 	addi	r3,r3,4
20096d58:	90023816 	blt	r18,zero,2009763c <___vfiprintf_internal_r+0x11bc>
20096d5c:	d8c02215 	stw	r3,136(sp)
20096d60:	8005883a 	mov	r2,r16
20096d64:	80c00007 	ldb	r3,0(r16)
20096d68:	003e2306 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096d6c:	8005883a 	mov	r2,r16
20096d70:	01c00ac4 	movi	r7,43
20096d74:	80c00007 	ldb	r3,0(r16)
20096d78:	003e1f06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096d7c:	d8c02217 	ldw	r3,136(sp)
20096d80:	04400044 	movi	r17,1
20096d84:	d8001d85 	stb	zero,118(sp)
20096d88:	18800017 	ldw	r2,0(r3)
20096d8c:	18c00104 	addi	r3,r3,4
20096d90:	d8c02215 	stw	r3,136(sp)
20096d94:	d8801005 	stb	r2,64(sp)
20096d98:	8827883a 	mov	r19,r17
20096d9c:	dd001004 	addi	r20,sp,64
20096da0:	0013883a 	mov	r9,zero
20096da4:	003eb806 	br	20096888 <__flash_rwdata_start+0xffff7a9c>
20096da8:	d9c01d85 	stb	r7,118(sp)
20096dac:	a880080c 	andi	r2,r21,32
20096db0:	d8c02217 	ldw	r3,136(sp)
20096db4:	103fa61e 	bne	r2,zero,20096c50 <__flash_rwdata_start+0xffff7e64>
20096db8:	a880040c 	andi	r2,r21,16
20096dbc:	1001dd26 	beq	r2,zero,20097534 <___vfiprintf_internal_r+0x10b4>
20096dc0:	1d800017 	ldw	r22,0(r3)
20096dc4:	d8802217 	ldw	r2,136(sp)
20096dc8:	b01bd7fa 	srai	r13,r22,31
20096dcc:	10800104 	addi	r2,r2,4
20096dd0:	d8802215 	stw	r2,136(sp)
20096dd4:	6805883a 	mov	r2,r13
20096dd8:	003fa306 	br	20096c68 <__flash_rwdata_start+0xffff7e7c>
20096ddc:	00800034 	movhi	r2,0
20096de0:	1081e004 	addi	r2,r2,1920
20096de4:	d8802615 	stw	r2,152(sp)
20096de8:	d9c01d85 	stb	r7,118(sp)
20096dec:	a880080c 	andi	r2,r21,32
20096df0:	10004726 	beq	r2,zero,20096f10 <___vfiprintf_internal_r+0xa90>
20096df4:	d9002217 	ldw	r4,136(sp)
20096df8:	25800017 	ldw	r22,0(r4)
20096dfc:	23400117 	ldw	r13,4(r4)
20096e00:	21000204 	addi	r4,r4,8
20096e04:	d9002215 	stw	r4,136(sp)
20096e08:	a880004c 	andi	r2,r21,1
20096e0c:	10014e26 	beq	r2,zero,20097348 <___vfiprintf_internal_r+0xec8>
20096e10:	b348b03a 	or	r4,r22,r13
20096e14:	20019c26 	beq	r4,zero,20097488 <___vfiprintf_internal_r+0x1008>
20096e18:	00800c04 	movi	r2,48
20096e1c:	d8801d05 	stb	r2,116(sp)
20096e20:	d8c01d45 	stb	r3,117(sp)
20096e24:	ad400094 	ori	r21,r21,2
20096e28:	00800084 	movi	r2,2
20096e2c:	003e7206 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20096e30:	d8c02217 	ldw	r3,136(sp)
20096e34:	d8001d85 	stb	zero,118(sp)
20096e38:	1d000017 	ldw	r20,0(r3)
20096e3c:	1d800104 	addi	r22,r3,4
20096e40:	a0021c26 	beq	r20,zero,200976b4 <___vfiprintf_internal_r+0x1234>
20096e44:	a009883a 	mov	r4,r20
20096e48:	48020016 	blt	r9,zero,2009764c <___vfiprintf_internal_r+0x11cc>
20096e4c:	480d883a 	mov	r6,r9
20096e50:	000b883a 	mov	r5,zero
20096e54:	da002a15 	stw	r8,168(sp)
20096e58:	da402b15 	stw	r9,172(sp)
20096e5c:	009359c0 	call	2009359c <memchr>
20096e60:	da002a17 	ldw	r8,168(sp)
20096e64:	da402b17 	ldw	r9,172(sp)
20096e68:	10022226 	beq	r2,zero,200976f4 <___vfiprintf_internal_r+0x1274>
20096e6c:	1527c83a 	sub	r19,r2,r20
20096e70:	4cc1c916 	blt	r9,r19,20097598 <___vfiprintf_internal_r+0x1118>
20096e74:	db801d83 	ldbu	r14,118(sp)
20096e78:	dd802215 	stw	r22,136(sp)
20096e7c:	0013883a 	mov	r9,zero
20096e80:	003e7906 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
20096e84:	ad401014 	ori	r21,r21,64
20096e88:	8005883a 	mov	r2,r16
20096e8c:	80c00007 	ldb	r3,0(r16)
20096e90:	003dd906 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096e94:	80c00007 	ldb	r3,0(r16)
20096e98:	8005883a 	mov	r2,r16
20096e9c:	1b01e326 	beq	r3,r12,2009762c <___vfiprintf_internal_r+0x11ac>
20096ea0:	ad400414 	ori	r21,r21,16
20096ea4:	003dd406 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096ea8:	d9002217 	ldw	r4,136(sp)
20096eac:	00800c04 	movi	r2,48
20096eb0:	d8801d05 	stb	r2,116(sp)
20096eb4:	25800017 	ldw	r22,0(r4)
20096eb8:	00801e04 	movi	r2,120
20096ebc:	d8801d45 	stb	r2,117(sp)
20096ec0:	00800034 	movhi	r2,0
20096ec4:	21000104 	addi	r4,r4,4
20096ec8:	1081e504 	addi	r2,r2,1940
20096ecc:	d9002215 	stw	r4,136(sp)
20096ed0:	d8802615 	stw	r2,152(sp)
20096ed4:	001b883a 	mov	r13,zero
20096ed8:	ad400094 	ori	r21,r21,2
20096edc:	00800084 	movi	r2,2
20096ee0:	b009883a 	mov	r4,r22
20096ee4:	003e4406 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20096ee8:	ad400814 	ori	r21,r21,32
20096eec:	8005883a 	mov	r2,r16
20096ef0:	80c00007 	ldb	r3,0(r16)
20096ef4:	003dc006 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20096ef8:	00800034 	movhi	r2,0
20096efc:	1081e504 	addi	r2,r2,1940
20096f00:	d8802615 	stw	r2,152(sp)
20096f04:	d9c01d85 	stb	r7,118(sp)
20096f08:	a880080c 	andi	r2,r21,32
20096f0c:	103fb91e 	bne	r2,zero,20096df4 <__flash_rwdata_start+0xffff8008>
20096f10:	a880040c 	andi	r2,r21,16
20096f14:	10010f1e 	bne	r2,zero,20097354 <___vfiprintf_internal_r+0xed4>
20096f18:	a880100c 	andi	r2,r21,64
20096f1c:	10010d26 	beq	r2,zero,20097354 <___vfiprintf_internal_r+0xed4>
20096f20:	d9002217 	ldw	r4,136(sp)
20096f24:	001b883a 	mov	r13,zero
20096f28:	2580000b 	ldhu	r22,0(r4)
20096f2c:	21000104 	addi	r4,r4,4
20096f30:	d9002215 	stw	r4,136(sp)
20096f34:	003fb406 	br	20096e08 <__flash_rwdata_start+0xffff801c>
20096f38:	d9002217 	ldw	r4,136(sp)
20096f3c:	00800044 	movi	r2,1
20096f40:	25800017 	ldw	r22,0(r4)
20096f44:	23400117 	ldw	r13,4(r4)
20096f48:	21000204 	addi	r4,r4,8
20096f4c:	d9002215 	stw	r4,136(sp)
20096f50:	b348b03a 	or	r4,r22,r13
20096f54:	003e2806 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20096f58:	d9c01d85 	stb	r7,118(sp)
20096f5c:	1801ab26 	beq	r3,zero,2009760c <___vfiprintf_internal_r+0x118c>
20096f60:	04400044 	movi	r17,1
20096f64:	d8c01005 	stb	r3,64(sp)
20096f68:	d8001d85 	stb	zero,118(sp)
20096f6c:	8827883a 	mov	r19,r17
20096f70:	dd001004 	addi	r20,sp,64
20096f74:	003f8a06 	br	20096da0 <__flash_rwdata_start+0xffff7fb4>
20096f78:	d9002017 	ldw	r4,128(sp)
20096f7c:	d9402117 	ldw	r5,132(sp)
20096f80:	d9801a04 	addi	r6,sp,104
20096f84:	d9c02b15 	stw	r7,172(sp)
20096f88:	dbc02a15 	stw	r15,168(sp)
20096f8c:	009636c0 	call	2009636c <__sprint_r.part.0>
20096f90:	d9c02b17 	ldw	r7,172(sp)
20096f94:	dbc02a17 	ldw	r15,168(sp)
20096f98:	1000631e 	bne	r2,zero,20097128 <___vfiprintf_internal_r+0xca8>
20096f9c:	d9801b17 	ldw	r6,108(sp)
20096fa0:	d8801c17 	ldw	r2,112(sp)
20096fa4:	d811883a 	mov	r8,sp
20096fa8:	31400044 	addi	r5,r6,1
20096fac:	003e4d06 	br	200968e4 <__flash_rwdata_start+0xffff7af8>
20096fb0:	d9401b17 	ldw	r5,108(sp)
20096fb4:	d8801c17 	ldw	r2,112(sp)
20096fb8:	29000044 	addi	r4,r5,1
20096fbc:	d8c01d87 	ldb	r3,118(sp)
20096fc0:	183e6726 	beq	r3,zero,20096960 <__flash_rwdata_start+0xffff7b74>
20096fc4:	00c00044 	movi	r3,1
20096fc8:	d9401d84 	addi	r5,sp,118
20096fcc:	10c5883a 	add	r2,r2,r3
20096fd0:	41400015 	stw	r5,0(r8)
20096fd4:	40c00115 	stw	r3,4(r8)
20096fd8:	d8801c15 	stw	r2,112(sp)
20096fdc:	d9001b15 	stw	r4,108(sp)
20096fe0:	014001c4 	movi	r5,7
20096fe4:	2900ab16 	blt	r5,r4,20097294 <___vfiprintf_internal_r+0xe14>
20096fe8:	200b883a 	mov	r5,r4
20096fec:	42000204 	addi	r8,r8,8
20096ff0:	21000044 	addi	r4,r4,1
20096ff4:	003e5a06 	br	20096960 <__flash_rwdata_start+0xffff7b74>
20096ff8:	d9002017 	ldw	r4,128(sp)
20096ffc:	d9402117 	ldw	r5,132(sp)
20097000:	d9801a04 	addi	r6,sp,104
20097004:	d9c02b15 	stw	r7,172(sp)
20097008:	db402a15 	stw	r13,168(sp)
2009700c:	009636c0 	call	2009636c <__sprint_r.part.0>
20097010:	d9c02b17 	ldw	r7,172(sp)
20097014:	db402a17 	ldw	r13,168(sp)
20097018:	1000431e 	bne	r2,zero,20097128 <___vfiprintf_internal_r+0xca8>
2009701c:	d9401b17 	ldw	r5,108(sp)
20097020:	d8801c17 	ldw	r2,112(sp)
20097024:	d811883a 	mov	r8,sp
20097028:	29000044 	addi	r4,r5,1
2009702c:	003e6706 	br	200969cc <__flash_rwdata_start+0xffff7be0>
20097030:	10803fcc 	andi	r2,r2,255
20097034:	00c00044 	movi	r3,1
20097038:	10fdfa1e 	bne	r2,r3,20096824 <__flash_rwdata_start+0xffff7a38>
2009703c:	6800021e 	bne	r13,zero,20097048 <___vfiprintf_internal_r+0xbc8>
20097040:	00800244 	movi	r2,9
20097044:	1580222e 	bgeu	r2,r22,200970d0 <___vfiprintf_internal_r+0xc50>
20097048:	dc802415 	stw	r18,144(sp)
2009704c:	dc002515 	stw	r16,148(sp)
20097050:	dc401a04 	addi	r17,sp,104
20097054:	b021883a 	mov	r16,r22
20097058:	4827883a 	mov	r19,r9
2009705c:	4029883a 	mov	r20,r8
20097060:	702d883a 	mov	r22,r14
20097064:	6825883a 	mov	r18,r13
20097068:	8009883a 	mov	r4,r16
2009706c:	900b883a 	mov	r5,r18
20097070:	01800284 	movi	r6,10
20097074:	000f883a 	mov	r7,zero
20097078:	00986e80 	call	200986e8 <__umoddi3>
2009707c:	10800c04 	addi	r2,r2,48
20097080:	8c7fffc4 	addi	r17,r17,-1
20097084:	8009883a 	mov	r4,r16
20097088:	900b883a 	mov	r5,r18
2009708c:	01800284 	movi	r6,10
20097090:	000f883a 	mov	r7,zero
20097094:	88800005 	stb	r2,0(r17)
20097098:	00981280 	call	20098128 <__udivdi3>
2009709c:	1021883a 	mov	r16,r2
200970a0:	10c4b03a 	or	r2,r2,r3
200970a4:	1825883a 	mov	r18,r3
200970a8:	103fef1e 	bne	r2,zero,20097068 <__flash_rwdata_start+0xffff827c>
200970ac:	dc802417 	ldw	r18,144(sp)
200970b0:	dc002517 	ldw	r16,148(sp)
200970b4:	a011883a 	mov	r8,r20
200970b8:	9813883a 	mov	r9,r19
200970bc:	b01d883a 	mov	r14,r22
200970c0:	8829883a 	mov	r20,r17
200970c4:	d8c01e17 	ldw	r3,120(sp)
200970c8:	1d27c83a 	sub	r19,r3,r20
200970cc:	003de606 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
200970d0:	b5800c04 	addi	r22,r22,48
200970d4:	dd8019c5 	stb	r22,103(sp)
200970d8:	dcc02717 	ldw	r19,156(sp)
200970dc:	dd0019c4 	addi	r20,sp,103
200970e0:	003de106 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
200970e4:	d9002017 	ldw	r4,128(sp)
200970e8:	d9402117 	ldw	r5,132(sp)
200970ec:	d9801a04 	addi	r6,sp,104
200970f0:	009636c0 	call	2009636c <__sprint_r.part.0>
200970f4:	10000c1e 	bne	r2,zero,20097128 <___vfiprintf_internal_r+0xca8>
200970f8:	d8801c17 	ldw	r2,112(sp)
200970fc:	8c80010e 	bge	r17,r18,20097104 <___vfiprintf_internal_r+0xc84>
20097100:	9023883a 	mov	r17,r18
20097104:	d8c02317 	ldw	r3,140(sp)
20097108:	1c47883a 	add	r3,r3,r17
2009710c:	d8c02315 	stw	r3,140(sp)
20097110:	103e7e26 	beq	r2,zero,20096b0c <__flash_rwdata_start+0xffff7d20>
20097114:	d9002017 	ldw	r4,128(sp)
20097118:	d9402117 	ldw	r5,132(sp)
2009711c:	d9801a04 	addi	r6,sp,104
20097120:	009636c0 	call	2009636c <__sprint_r.part.0>
20097124:	103e7926 	beq	r2,zero,20096b0c <__flash_rwdata_start+0xffff7d20>
20097128:	dd402117 	ldw	r21,132(sp)
2009712c:	a880030b 	ldhu	r2,12(r21)
20097130:	1080100c 	andi	r2,r2,64
20097134:	103e881e 	bne	r2,zero,20096b58 <__flash_rwdata_start+0xffff7d6c>
20097138:	d8802317 	ldw	r2,140(sp)
2009713c:	003e8706 	br	20096b5c <__flash_rwdata_start+0xffff7d70>
20097140:	d9402117 	ldw	r5,132(sp)
20097144:	b009883a 	mov	r4,r22
20097148:	d9801a04 	addi	r6,sp,104
2009714c:	009636c0 	call	2009636c <__sprint_r.part.0>
20097150:	103ff51e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
20097154:	d9001b17 	ldw	r4,108(sp)
20097158:	d8801c17 	ldw	r2,112(sp)
2009715c:	d811883a 	mov	r8,sp
20097160:	21400044 	addi	r5,r4,1
20097164:	003e4d06 	br	20096a9c <__flash_rwdata_start+0xffff7cb0>
20097168:	1000aa1e 	bne	r2,zero,20097414 <___vfiprintf_internal_r+0xf94>
2009716c:	00c00044 	movi	r3,1
20097170:	9805883a 	mov	r2,r19
20097174:	dd000015 	stw	r20,0(sp)
20097178:	dcc00115 	stw	r19,4(sp)
2009717c:	dcc01c15 	stw	r19,112(sp)
20097180:	d8c01b15 	stw	r3,108(sp)
20097184:	d811883a 	mov	r8,sp
20097188:	42000204 	addi	r8,r8,8
2009718c:	aac0010c 	andi	r11,r21,4
20097190:	583fda26 	beq	r11,zero,200970fc <__flash_rwdata_start+0xffff8310>
20097194:	9467c83a 	sub	r19,r18,r17
20097198:	04fe3316 	blt	zero,r19,20096a68 <__flash_rwdata_start+0xffff7c7c>
2009719c:	003fd706 	br	200970fc <__flash_rwdata_start+0xffff8310>
200971a0:	946dc83a 	sub	r22,r18,r17
200971a4:	05bdfd0e 	bge	zero,r22,2009699c <__flash_rwdata_start+0xffff7bb0>
200971a8:	00c00034 	movhi	r3,0
200971ac:	18c25504 	addi	r3,r3,2388
200971b0:	01c00404 	movi	r7,16
200971b4:	d8c02415 	stw	r3,144(sp)
200971b8:	3d81530e 	bge	r7,r22,20097708 <___vfiprintf_internal_r+0x1288>
200971bc:	8007883a 	mov	r3,r16
200971c0:	034001c4 	movi	r13,7
200971c4:	b021883a 	mov	r16,r22
200971c8:	da402515 	stw	r9,148(sp)
200971cc:	182d883a 	mov	r22,r3
200971d0:	00000506 	br	200971e8 <___vfiprintf_internal_r+0xd68>
200971d4:	29800084 	addi	r6,r5,2
200971d8:	42000204 	addi	r8,r8,8
200971dc:	180b883a 	mov	r5,r3
200971e0:	843ffc04 	addi	r16,r16,-16
200971e4:	3c000d0e 	bge	r7,r16,2009721c <___vfiprintf_internal_r+0xd9c>
200971e8:	10800404 	addi	r2,r2,16
200971ec:	28c00044 	addi	r3,r5,1
200971f0:	45c00015 	stw	r23,0(r8)
200971f4:	41c00115 	stw	r7,4(r8)
200971f8:	d8801c15 	stw	r2,112(sp)
200971fc:	d8c01b15 	stw	r3,108(sp)
20097200:	68fff40e 	bge	r13,r3,200971d4 <__flash_rwdata_start+0xffff83e8>
20097204:	1000151e 	bne	r2,zero,2009725c <___vfiprintf_internal_r+0xddc>
20097208:	843ffc04 	addi	r16,r16,-16
2009720c:	01800044 	movi	r6,1
20097210:	000b883a 	mov	r5,zero
20097214:	d811883a 	mov	r8,sp
20097218:	3c3ff316 	blt	r7,r16,200971e8 <__flash_rwdata_start+0xffff83fc>
2009721c:	da402517 	ldw	r9,148(sp)
20097220:	b007883a 	mov	r3,r22
20097224:	802d883a 	mov	r22,r16
20097228:	1821883a 	mov	r16,r3
2009722c:	d8c02417 	ldw	r3,144(sp)
20097230:	1585883a 	add	r2,r2,r22
20097234:	45800115 	stw	r22,4(r8)
20097238:	40c00015 	stw	r3,0(r8)
2009723c:	d8801c15 	stw	r2,112(sp)
20097240:	d9801b15 	stw	r6,108(sp)
20097244:	00c001c4 	movi	r3,7
20097248:	19806d16 	blt	r3,r6,20097400 <___vfiprintf_internal_r+0xf80>
2009724c:	42000204 	addi	r8,r8,8
20097250:	31000044 	addi	r4,r6,1
20097254:	300b883a 	mov	r5,r6
20097258:	003dd006 	br	2009699c <__flash_rwdata_start+0xffff7bb0>
2009725c:	d9002017 	ldw	r4,128(sp)
20097260:	d9402117 	ldw	r5,132(sp)
20097264:	d9801a04 	addi	r6,sp,104
20097268:	d9c02b15 	stw	r7,172(sp)
2009726c:	db402a15 	stw	r13,168(sp)
20097270:	009636c0 	call	2009636c <__sprint_r.part.0>
20097274:	d9c02b17 	ldw	r7,172(sp)
20097278:	db402a17 	ldw	r13,168(sp)
2009727c:	103faa1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
20097280:	d9401b17 	ldw	r5,108(sp)
20097284:	d8801c17 	ldw	r2,112(sp)
20097288:	d811883a 	mov	r8,sp
2009728c:	29800044 	addi	r6,r5,1
20097290:	003fd306 	br	200971e0 <__flash_rwdata_start+0xffff83f4>
20097294:	1000401e 	bne	r2,zero,20097398 <___vfiprintf_internal_r+0xf18>
20097298:	68003b26 	beq	r13,zero,20097388 <___vfiprintf_internal_r+0xf08>
2009729c:	d9001d04 	addi	r4,sp,116
200972a0:	00800084 	movi	r2,2
200972a4:	d9000015 	stw	r4,0(sp)
200972a8:	d8800115 	stw	r2,4(sp)
200972ac:	1809883a 	mov	r4,r3
200972b0:	d811883a 	mov	r8,sp
200972b4:	003db406 	br	20096988 <__flash_rwdata_start+0xffff7b9c>
200972b8:	1000451e 	bne	r2,zero,200973d0 <___vfiprintf_internal_r+0xf50>
200972bc:	01000044 	movi	r4,1
200972c0:	000b883a 	mov	r5,zero
200972c4:	d811883a 	mov	r8,sp
200972c8:	003db206 	br	20096994 <__flash_rwdata_start+0xffff7ba8>
200972cc:	10803fcc 	andi	r2,r2,255
200972d0:	1000071e 	bne	r2,zero,200972f0 <___vfiprintf_internal_r+0xe70>
200972d4:	a880004c 	andi	r2,r21,1
200972d8:	10000526 	beq	r2,zero,200972f0 <___vfiprintf_internal_r+0xe70>
200972dc:	00800c04 	movi	r2,48
200972e0:	d88019c5 	stb	r2,103(sp)
200972e4:	dcc02717 	ldw	r19,156(sp)
200972e8:	dd0019c4 	addi	r20,sp,103
200972ec:	003d5e06 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
200972f0:	dd001a04 	addi	r20,sp,104
200972f4:	003d5c06 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
200972f8:	1000971e 	bne	r2,zero,20097558 <___vfiprintf_internal_r+0x10d8>
200972fc:	d8c01d87 	ldb	r3,118(sp)
20097300:	18005826 	beq	r3,zero,20097464 <___vfiprintf_internal_r+0xfe4>
20097304:	00800044 	movi	r2,1
20097308:	d8c01d84 	addi	r3,sp,118
2009730c:	1009883a 	mov	r4,r2
20097310:	d8c00015 	stw	r3,0(sp)
20097314:	d8800115 	stw	r2,4(sp)
20097318:	d811883a 	mov	r8,sp
2009731c:	003f3206 	br	20096fe8 <__flash_rwdata_start+0xffff81fc>
20097320:	8023883a 	mov	r17,r16
20097324:	003ca706 	br	200965c4 <__flash_rwdata_start+0xffff77d8>
20097328:	d9002017 	ldw	r4,128(sp)
2009732c:	d9402117 	ldw	r5,132(sp)
20097330:	d9801a04 	addi	r6,sp,104
20097334:	009636c0 	call	2009636c <__sprint_r.part.0>
20097338:	103f7b1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
2009733c:	d8801c17 	ldw	r2,112(sp)
20097340:	d811883a 	mov	r8,sp
20097344:	003f9106 	br	2009718c <__flash_rwdata_start+0xffff83a0>
20097348:	00800084 	movi	r2,2
2009734c:	b348b03a 	or	r4,r22,r13
20097350:	003d2906 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20097354:	d8802217 	ldw	r2,136(sp)
20097358:	001b883a 	mov	r13,zero
2009735c:	15800017 	ldw	r22,0(r2)
20097360:	10800104 	addi	r2,r2,4
20097364:	d8802215 	stw	r2,136(sp)
20097368:	003ea706 	br	20096e08 <__flash_rwdata_start+0xffff801c>
2009736c:	d9002017 	ldw	r4,128(sp)
20097370:	d9402117 	ldw	r5,132(sp)
20097374:	d9801a04 	addi	r6,sp,104
20097378:	009636c0 	call	2009636c <__sprint_r.part.0>
2009737c:	103f6a1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
20097380:	d811883a 	mov	r8,sp
20097384:	003cff06 	br	20096784 <__flash_rwdata_start+0xffff7998>
20097388:	000b883a 	mov	r5,zero
2009738c:	1809883a 	mov	r4,r3
20097390:	d811883a 	mov	r8,sp
20097394:	003d7f06 	br	20096994 <__flash_rwdata_start+0xffff7ba8>
20097398:	d9002017 	ldw	r4,128(sp)
2009739c:	d9402117 	ldw	r5,132(sp)
200973a0:	d9801a04 	addi	r6,sp,104
200973a4:	da402b15 	stw	r9,172(sp)
200973a8:	db402a15 	stw	r13,168(sp)
200973ac:	009636c0 	call	2009636c <__sprint_r.part.0>
200973b0:	da402b17 	ldw	r9,172(sp)
200973b4:	db402a17 	ldw	r13,168(sp)
200973b8:	103f5b1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
200973bc:	d9401b17 	ldw	r5,108(sp)
200973c0:	d8801c17 	ldw	r2,112(sp)
200973c4:	d811883a 	mov	r8,sp
200973c8:	29000044 	addi	r4,r5,1
200973cc:	003d6406 	br	20096960 <__flash_rwdata_start+0xffff7b74>
200973d0:	d9002017 	ldw	r4,128(sp)
200973d4:	d9402117 	ldw	r5,132(sp)
200973d8:	d9801a04 	addi	r6,sp,104
200973dc:	da402b15 	stw	r9,172(sp)
200973e0:	009636c0 	call	2009636c <__sprint_r.part.0>
200973e4:	da402b17 	ldw	r9,172(sp)
200973e8:	103f4f1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
200973ec:	d9401b17 	ldw	r5,108(sp)
200973f0:	d8801c17 	ldw	r2,112(sp)
200973f4:	d811883a 	mov	r8,sp
200973f8:	29000044 	addi	r4,r5,1
200973fc:	003d6506 	br	20096994 <__flash_rwdata_start+0xffff7ba8>
20097400:	10009a1e 	bne	r2,zero,2009766c <___vfiprintf_internal_r+0x11ec>
20097404:	01000044 	movi	r4,1
20097408:	000b883a 	mov	r5,zero
2009740c:	d811883a 	mov	r8,sp
20097410:	003d6206 	br	2009699c <__flash_rwdata_start+0xffff7bb0>
20097414:	d9002017 	ldw	r4,128(sp)
20097418:	d9402117 	ldw	r5,132(sp)
2009741c:	d9801a04 	addi	r6,sp,104
20097420:	009636c0 	call	2009636c <__sprint_r.part.0>
20097424:	103f401e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
20097428:	d9001b17 	ldw	r4,108(sp)
2009742c:	d8801c17 	ldw	r2,112(sp)
20097430:	d811883a 	mov	r8,sp
20097434:	21000044 	addi	r4,r4,1
20097438:	003d7d06 	br	20096a30 <__flash_rwdata_start+0xffff7c44>
2009743c:	05adc83a 	sub	r22,zero,r22
20097440:	b004c03a 	cmpne	r2,r22,zero
20097444:	035bc83a 	sub	r13,zero,r13
20097448:	689bc83a 	sub	r13,r13,r2
2009744c:	03800b44 	movi	r14,45
20097450:	db801d85 	stb	r14,118(sp)
20097454:	4827883a 	mov	r19,r9
20097458:	00800044 	movi	r2,1
2009745c:	b348b03a 	or	r4,r22,r13
20097460:	003ce806 	br	20096804 <__flash_rwdata_start+0xffff7a18>
20097464:	000b883a 	mov	r5,zero
20097468:	01000044 	movi	r4,1
2009746c:	d811883a 	mov	r8,sp
20097470:	683d4826 	beq	r13,zero,20096994 <__flash_rwdata_start+0xffff7ba8>
20097474:	00800084 	movi	r2,2
20097478:	d8c01d04 	addi	r3,sp,116
2009747c:	d8c00015 	stw	r3,0(sp)
20097480:	d8800115 	stw	r2,4(sp)
20097484:	003d4006 	br	20096988 <__flash_rwdata_start+0xffff7b9c>
20097488:	00800084 	movi	r2,2
2009748c:	003cda06 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
20097490:	a880100c 	andi	r2,r21,64
20097494:	10004226 	beq	r2,zero,200975a0 <___vfiprintf_internal_r+0x1120>
20097498:	d8802217 	ldw	r2,136(sp)
2009749c:	001b883a 	mov	r13,zero
200974a0:	1580000b 	ldhu	r22,0(r2)
200974a4:	10800104 	addi	r2,r2,4
200974a8:	d8802215 	stw	r2,136(sp)
200974ac:	b009883a 	mov	r4,r22
200974b0:	0005883a 	mov	r2,zero
200974b4:	003cd006 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
200974b8:	80c00007 	ldb	r3,0(r16)
200974bc:	8005883a 	mov	r2,r16
200974c0:	003c4d06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
200974c4:	a880100c 	andi	r2,r21,64
200974c8:	10004426 	beq	r2,zero,200975dc <___vfiprintf_internal_r+0x115c>
200974cc:	d8c02217 	ldw	r3,136(sp)
200974d0:	001b883a 	mov	r13,zero
200974d4:	00800044 	movi	r2,1
200974d8:	1d80000b 	ldhu	r22,0(r3)
200974dc:	18c00104 	addi	r3,r3,4
200974e0:	d8c02215 	stw	r3,136(sp)
200974e4:	b009883a 	mov	r4,r22
200974e8:	003cc306 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
200974ec:	a880040c 	andi	r2,r21,16
200974f0:	1000091e 	bne	r2,zero,20097518 <___vfiprintf_internal_r+0x1098>
200974f4:	aac0100c 	andi	r11,r21,64
200974f8:	58000726 	beq	r11,zero,20097518 <___vfiprintf_internal_r+0x1098>
200974fc:	d8c02217 	ldw	r3,136(sp)
20097500:	d9002317 	ldw	r4,140(sp)
20097504:	18800017 	ldw	r2,0(r3)
20097508:	18c00104 	addi	r3,r3,4
2009750c:	d8c02215 	stw	r3,136(sp)
20097510:	1100000d 	sth	r4,0(r2)
20097514:	003c0e06 	br	20096550 <__flash_rwdata_start+0xffff7764>
20097518:	d8c02217 	ldw	r3,136(sp)
2009751c:	d9002317 	ldw	r4,140(sp)
20097520:	18800017 	ldw	r2,0(r3)
20097524:	18c00104 	addi	r3,r3,4
20097528:	d8c02215 	stw	r3,136(sp)
2009752c:	11000015 	stw	r4,0(r2)
20097530:	003c0706 	br	20096550 <__flash_rwdata_start+0xffff7764>
20097534:	a880100c 	andi	r2,r21,64
20097538:	10002126 	beq	r2,zero,200975c0 <___vfiprintf_internal_r+0x1140>
2009753c:	1d80000f 	ldh	r22,0(r3)
20097540:	d8c02217 	ldw	r3,136(sp)
20097544:	b01bd7fa 	srai	r13,r22,31
20097548:	18c00104 	addi	r3,r3,4
2009754c:	d8c02215 	stw	r3,136(sp)
20097550:	6805883a 	mov	r2,r13
20097554:	003dc406 	br	20096c68 <__flash_rwdata_start+0xffff7e7c>
20097558:	d9002017 	ldw	r4,128(sp)
2009755c:	d9402117 	ldw	r5,132(sp)
20097560:	d9801a04 	addi	r6,sp,104
20097564:	da402b15 	stw	r9,172(sp)
20097568:	db402a15 	stw	r13,168(sp)
2009756c:	009636c0 	call	2009636c <__sprint_r.part.0>
20097570:	da402b17 	ldw	r9,172(sp)
20097574:	db402a17 	ldw	r13,168(sp)
20097578:	103eeb1e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
2009757c:	d9401b17 	ldw	r5,108(sp)
20097580:	d8801c17 	ldw	r2,112(sp)
20097584:	d811883a 	mov	r8,sp
20097588:	29000044 	addi	r4,r5,1
2009758c:	003e8b06 	br	20096fbc <__flash_rwdata_start+0xffff81d0>
20097590:	9023883a 	mov	r17,r18
20097594:	003d5a06 	br	20096b00 <__flash_rwdata_start+0xffff7d14>
20097598:	4827883a 	mov	r19,r9
2009759c:	003e3506 	br	20096e74 <__flash_rwdata_start+0xffff8088>
200975a0:	d8c02217 	ldw	r3,136(sp)
200975a4:	001b883a 	mov	r13,zero
200975a8:	0005883a 	mov	r2,zero
200975ac:	1d800017 	ldw	r22,0(r3)
200975b0:	18c00104 	addi	r3,r3,4
200975b4:	d8c02215 	stw	r3,136(sp)
200975b8:	b009883a 	mov	r4,r22
200975bc:	003c8e06 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
200975c0:	1d800017 	ldw	r22,0(r3)
200975c4:	d9002217 	ldw	r4,136(sp)
200975c8:	b01bd7fa 	srai	r13,r22,31
200975cc:	21000104 	addi	r4,r4,4
200975d0:	d9002215 	stw	r4,136(sp)
200975d4:	6805883a 	mov	r2,r13
200975d8:	003da306 	br	20096c68 <__flash_rwdata_start+0xffff7e7c>
200975dc:	d9002217 	ldw	r4,136(sp)
200975e0:	001b883a 	mov	r13,zero
200975e4:	00800044 	movi	r2,1
200975e8:	25800017 	ldw	r22,0(r4)
200975ec:	21000104 	addi	r4,r4,4
200975f0:	d9002215 	stw	r4,136(sp)
200975f4:	b009883a 	mov	r4,r22
200975f8:	003c7f06 	br	200967f8 <__flash_rwdata_start+0xffff7a0c>
200975fc:	00c00034 	movhi	r3,0
20097600:	18c25504 	addi	r3,r3,2388
20097604:	d8c02415 	stw	r3,144(sp)
20097608:	003cff06 	br	20096a08 <__flash_rwdata_start+0xffff7c1c>
2009760c:	d8801c17 	ldw	r2,112(sp)
20097610:	dd402117 	ldw	r21,132(sp)
20097614:	103ec526 	beq	r2,zero,2009712c <__flash_rwdata_start+0xffff8340>
20097618:	d9002017 	ldw	r4,128(sp)
2009761c:	a80b883a 	mov	r5,r21
20097620:	d9801a04 	addi	r6,sp,104
20097624:	009636c0 	call	2009636c <__sprint_r.part.0>
20097628:	003ec006 	br	2009712c <__flash_rwdata_start+0xffff8340>
2009762c:	80800044 	addi	r2,r16,1
20097630:	ad400814 	ori	r21,r21,32
20097634:	80c00047 	ldb	r3,1(r16)
20097638:	003bef06 	br	200965f8 <__flash_rwdata_start+0xffff780c>
2009763c:	04a5c83a 	sub	r18,zero,r18
20097640:	8005883a 	mov	r2,r16
20097644:	d8c02215 	stw	r3,136(sp)
20097648:	003d5306 	br	20096b98 <__flash_rwdata_start+0xffff7dac>
2009764c:	da002a15 	stw	r8,168(sp)
20097650:	008c4740 	call	2008c474 <strlen>
20097654:	1027883a 	mov	r19,r2
20097658:	db801d83 	ldbu	r14,118(sp)
2009765c:	dd802215 	stw	r22,136(sp)
20097660:	0013883a 	mov	r9,zero
20097664:	da002a17 	ldw	r8,168(sp)
20097668:	003c7f06 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
2009766c:	d9002017 	ldw	r4,128(sp)
20097670:	d9402117 	ldw	r5,132(sp)
20097674:	d9801a04 	addi	r6,sp,104
20097678:	da402b15 	stw	r9,172(sp)
2009767c:	009636c0 	call	2009636c <__sprint_r.part.0>
20097680:	da402b17 	ldw	r9,172(sp)
20097684:	103ea81e 	bne	r2,zero,20097128 <__flash_rwdata_start+0xffff833c>
20097688:	d9401b17 	ldw	r5,108(sp)
2009768c:	d8801c17 	ldw	r2,112(sp)
20097690:	d811883a 	mov	r8,sp
20097694:	29000044 	addi	r4,r5,1
20097698:	003cc006 	br	2009699c <__flash_rwdata_start+0xffff7bb0>
2009769c:	d9401b17 	ldw	r5,108(sp)
200976a0:	01000034 	movhi	r4,0
200976a4:	21025904 	addi	r4,r4,2404
200976a8:	d9002415 	stw	r4,144(sp)
200976ac:	29400044 	addi	r5,r5,1
200976b0:	003c9f06 	br	20096930 <__flash_rwdata_start+0xffff7b44>
200976b4:	00800184 	movi	r2,6
200976b8:	1240012e 	bgeu	r2,r9,200976c0 <___vfiprintf_internal_r+0x1240>
200976bc:	1013883a 	mov	r9,r2
200976c0:	4827883a 	mov	r19,r9
200976c4:	4823883a 	mov	r17,r9
200976c8:	48001116 	blt	r9,zero,20097710 <___vfiprintf_internal_r+0x1290>
200976cc:	05000034 	movhi	r20,0
200976d0:	dd802215 	stw	r22,136(sp)
200976d4:	a501ea04 	addi	r20,r20,1960
200976d8:	003db106 	br	20096da0 <__flash_rwdata_start+0xffff7fb4>
200976dc:	d9401b17 	ldw	r5,108(sp)
200976e0:	01000034 	movhi	r4,0
200976e4:	21025904 	addi	r4,r4,2404
200976e8:	d9002415 	stw	r4,144(sp)
200976ec:	29400044 	addi	r5,r5,1
200976f0:	003cf906 	br	20096ad8 <__flash_rwdata_start+0xffff7cec>
200976f4:	4827883a 	mov	r19,r9
200976f8:	db801d83 	ldbu	r14,118(sp)
200976fc:	dd802215 	stw	r22,136(sp)
20097700:	0013883a 	mov	r9,zero
20097704:	003c5806 	br	20096868 <__flash_rwdata_start+0xffff7a7c>
20097708:	200d883a 	mov	r6,r4
2009770c:	003ec706 	br	2009722c <__flash_rwdata_start+0xffff8440>
20097710:	0023883a 	mov	r17,zero
20097714:	003fed06 	br	200976cc <__flash_rwdata_start+0xffff88e0>
20097718:	d9002217 	ldw	r4,136(sp)
2009771c:	22400017 	ldw	r9,0(r4)
20097720:	20c00104 	addi	r3,r4,4
20097724:	d8c02215 	stw	r3,136(sp)
20097728:	483fc20e 	bge	r9,zero,20097634 <__flash_rwdata_start+0xffff8848>
2009772c:	027fffc4 	movi	r9,-1
20097730:	80c00047 	ldb	r3,1(r16)
20097734:	003bb006 	br	200965f8 <__flash_rwdata_start+0xffff780c>
20097738:	8c80010e 	bge	r17,r18,20097740 <___vfiprintf_internal_r+0x12c0>
2009773c:	9023883a 	mov	r17,r18
20097740:	d8802317 	ldw	r2,140(sp)
20097744:	1445883a 	add	r2,r2,r17
20097748:	d8802315 	stw	r2,140(sp)
2009774c:	003cef06 	br	20096b0c <__flash_rwdata_start+0xffff7d20>

20097750 <__vfiprintf_internal>:
20097750:	2007883a 	mov	r3,r4
20097754:	01000034 	movhi	r4,0
20097758:	210a7104 	addi	r4,r4,10692
2009775c:	21000017 	ldw	r4,0(r4)
20097760:	2805883a 	mov	r2,r5
20097764:	300f883a 	mov	r7,r6
20097768:	180b883a 	mov	r5,r3
2009776c:	100d883a 	mov	r6,r2
20097770:	00964801 	jmpi	20096480 <___vfiprintf_internal_r>

20097774 <__sbprintf>:
20097774:	2880030b 	ldhu	r2,12(r5)
20097778:	2ac01917 	ldw	r11,100(r5)
2009777c:	2a80038b 	ldhu	r10,14(r5)
20097780:	2a400717 	ldw	r9,28(r5)
20097784:	2a000917 	ldw	r8,36(r5)
20097788:	defee204 	addi	sp,sp,-1144
2009778c:	00c10004 	movi	r3,1024
20097790:	dc011a15 	stw	r16,1128(sp)
20097794:	10bfff4c 	andi	r2,r2,65533
20097798:	2821883a 	mov	r16,r5
2009779c:	d8cb883a 	add	r5,sp,r3
200977a0:	dc811c15 	stw	r18,1136(sp)
200977a4:	dc411b15 	stw	r17,1132(sp)
200977a8:	dfc11d15 	stw	ra,1140(sp)
200977ac:	2025883a 	mov	r18,r4
200977b0:	d881030d 	sth	r2,1036(sp)
200977b4:	dac11915 	stw	r11,1124(sp)
200977b8:	da81038d 	sth	r10,1038(sp)
200977bc:	da410715 	stw	r9,1052(sp)
200977c0:	da010915 	stw	r8,1060(sp)
200977c4:	dec10015 	stw	sp,1024(sp)
200977c8:	dec10415 	stw	sp,1040(sp)
200977cc:	d8c10215 	stw	r3,1032(sp)
200977d0:	d8c10515 	stw	r3,1044(sp)
200977d4:	d8010615 	stw	zero,1048(sp)
200977d8:	00964800 	call	20096480 <___vfiprintf_internal_r>
200977dc:	1023883a 	mov	r17,r2
200977e0:	10000416 	blt	r2,zero,200977f4 <__sbprintf+0x80>
200977e4:	9009883a 	mov	r4,r18
200977e8:	d9410004 	addi	r5,sp,1024
200977ec:	009247c0 	call	2009247c <_fflush_r>
200977f0:	10000d1e 	bne	r2,zero,20097828 <__sbprintf+0xb4>
200977f4:	d8c1030b 	ldhu	r3,1036(sp)
200977f8:	18c0100c 	andi	r3,r3,64
200977fc:	18000326 	beq	r3,zero,2009780c <__sbprintf+0x98>
20097800:	8080030b 	ldhu	r2,12(r16)
20097804:	10801014 	ori	r2,r2,64
20097808:	8080030d 	sth	r2,12(r16)
2009780c:	8805883a 	mov	r2,r17
20097810:	dfc11d17 	ldw	ra,1140(sp)
20097814:	dc811c17 	ldw	r18,1136(sp)
20097818:	dc411b17 	ldw	r17,1132(sp)
2009781c:	dc011a17 	ldw	r16,1128(sp)
20097820:	dec11e04 	addi	sp,sp,1144
20097824:	f800283a 	ret
20097828:	047fffc4 	movi	r17,-1
2009782c:	003ff106 	br	200977f4 <__flash_rwdata_start+0xffff8a08>

20097830 <__swbuf_r>:
20097830:	defffc04 	addi	sp,sp,-16
20097834:	dc800215 	stw	r18,8(sp)
20097838:	dc400115 	stw	r17,4(sp)
2009783c:	dc000015 	stw	r16,0(sp)
20097840:	dfc00315 	stw	ra,12(sp)
20097844:	2025883a 	mov	r18,r4
20097848:	2823883a 	mov	r17,r5
2009784c:	3021883a 	mov	r16,r6
20097850:	20000226 	beq	r4,zero,2009785c <__swbuf_r+0x2c>
20097854:	20800e17 	ldw	r2,56(r4)
20097858:	10004126 	beq	r2,zero,20097960 <__swbuf_r+0x130>
2009785c:	80c00617 	ldw	r3,24(r16)
20097860:	8180030b 	ldhu	r6,12(r16)
20097864:	80c00215 	stw	r3,8(r16)
20097868:	30c0020c 	andi	r3,r6,8
2009786c:	18003526 	beq	r3,zero,20097944 <__swbuf_r+0x114>
20097870:	80c00417 	ldw	r3,16(r16)
20097874:	18003326 	beq	r3,zero,20097944 <__swbuf_r+0x114>
20097878:	3088000c 	andi	r2,r6,8192
2009787c:	8c403fcc 	andi	r17,r17,255
20097880:	10001726 	beq	r2,zero,200978e0 <__swbuf_r+0xb0>
20097884:	80800017 	ldw	r2,0(r16)
20097888:	81000517 	ldw	r4,20(r16)
2009788c:	10c7c83a 	sub	r3,r2,r3
20097890:	19001d0e 	bge	r3,r4,20097908 <__swbuf_r+0xd8>
20097894:	18c00044 	addi	r3,r3,1
20097898:	81400217 	ldw	r5,8(r16)
2009789c:	11000044 	addi	r4,r2,1
200978a0:	81000015 	stw	r4,0(r16)
200978a4:	297fffc4 	addi	r5,r5,-1
200978a8:	81400215 	stw	r5,8(r16)
200978ac:	14400005 	stb	r17,0(r2)
200978b0:	80800517 	ldw	r2,20(r16)
200978b4:	10c01d26 	beq	r2,r3,2009792c <__swbuf_r+0xfc>
200978b8:	8080030b 	ldhu	r2,12(r16)
200978bc:	1080004c 	andi	r2,r2,1
200978c0:	1000181e 	bne	r2,zero,20097924 <__swbuf_r+0xf4>
200978c4:	8805883a 	mov	r2,r17
200978c8:	dfc00317 	ldw	ra,12(sp)
200978cc:	dc800217 	ldw	r18,8(sp)
200978d0:	dc400117 	ldw	r17,4(sp)
200978d4:	dc000017 	ldw	r16,0(sp)
200978d8:	dec00404 	addi	sp,sp,16
200978dc:	f800283a 	ret
200978e0:	81001917 	ldw	r4,100(r16)
200978e4:	00b7ffc4 	movi	r2,-8193
200978e8:	31880014 	ori	r6,r6,8192
200978ec:	2084703a 	and	r2,r4,r2
200978f0:	80801915 	stw	r2,100(r16)
200978f4:	80800017 	ldw	r2,0(r16)
200978f8:	81000517 	ldw	r4,20(r16)
200978fc:	8180030d 	sth	r6,12(r16)
20097900:	10c7c83a 	sub	r3,r2,r3
20097904:	193fe316 	blt	r3,r4,20097894 <__flash_rwdata_start+0xffff8aa8>
20097908:	9009883a 	mov	r4,r18
2009790c:	800b883a 	mov	r5,r16
20097910:	009247c0 	call	2009247c <_fflush_r>
20097914:	1000091e 	bne	r2,zero,2009793c <__swbuf_r+0x10c>
20097918:	80800017 	ldw	r2,0(r16)
2009791c:	00c00044 	movi	r3,1
20097920:	003fdd06 	br	20097898 <__flash_rwdata_start+0xffff8aac>
20097924:	00800284 	movi	r2,10
20097928:	88bfe61e 	bne	r17,r2,200978c4 <__flash_rwdata_start+0xffff8ad8>
2009792c:	9009883a 	mov	r4,r18
20097930:	800b883a 	mov	r5,r16
20097934:	009247c0 	call	2009247c <_fflush_r>
20097938:	103fe226 	beq	r2,zero,200978c4 <__flash_rwdata_start+0xffff8ad8>
2009793c:	00bfffc4 	movi	r2,-1
20097940:	003fe106 	br	200978c8 <__flash_rwdata_start+0xffff8adc>
20097944:	9009883a 	mov	r4,r18
20097948:	800b883a 	mov	r5,r16
2009794c:	00906640 	call	20090664 <__swsetup_r>
20097950:	103ffa1e 	bne	r2,zero,2009793c <__flash_rwdata_start+0xffff8b50>
20097954:	8180030b 	ldhu	r6,12(r16)
20097958:	80c00417 	ldw	r3,16(r16)
2009795c:	003fc606 	br	20097878 <__flash_rwdata_start+0xffff8a8c>
20097960:	00928580 	call	20092858 <__sinit>
20097964:	003fbd06 	br	2009785c <__flash_rwdata_start+0xffff8a70>

20097968 <__swbuf>:
20097968:	00c00034 	movhi	r3,0
2009796c:	18ca7104 	addi	r3,r3,10692
20097970:	2005883a 	mov	r2,r4
20097974:	19000017 	ldw	r4,0(r3)
20097978:	280d883a 	mov	r6,r5
2009797c:	100b883a 	mov	r5,r2
20097980:	00978301 	jmpi	20097830 <__swbuf_r>

20097984 <_write_r>:
20097984:	defffd04 	addi	sp,sp,-12
20097988:	dc000015 	stw	r16,0(sp)
2009798c:	04000034 	movhi	r16,0
20097990:	dc400115 	stw	r17,4(sp)
20097994:	840a9404 	addi	r16,r16,10832
20097998:	2023883a 	mov	r17,r4
2009799c:	2809883a 	mov	r4,r5
200979a0:	300b883a 	mov	r5,r6
200979a4:	380d883a 	mov	r6,r7
200979a8:	dfc00215 	stw	ra,8(sp)
200979ac:	80000015 	stw	zero,0(r16)
200979b0:	009a36c0 	call	2009a36c <write>
200979b4:	00ffffc4 	movi	r3,-1
200979b8:	10c00526 	beq	r2,r3,200979d0 <_write_r+0x4c>
200979bc:	dfc00217 	ldw	ra,8(sp)
200979c0:	dc400117 	ldw	r17,4(sp)
200979c4:	dc000017 	ldw	r16,0(sp)
200979c8:	dec00304 	addi	sp,sp,12
200979cc:	f800283a 	ret
200979d0:	80c00017 	ldw	r3,0(r16)
200979d4:	183ff926 	beq	r3,zero,200979bc <__flash_rwdata_start+0xffff8bd0>
200979d8:	88c00015 	stw	r3,0(r17)
200979dc:	003ff706 	br	200979bc <__flash_rwdata_start+0xffff8bd0>

200979e0 <_close_r>:
200979e0:	defffd04 	addi	sp,sp,-12
200979e4:	dc000015 	stw	r16,0(sp)
200979e8:	04000034 	movhi	r16,0
200979ec:	dc400115 	stw	r17,4(sp)
200979f0:	840a9404 	addi	r16,r16,10832
200979f4:	2023883a 	mov	r17,r4
200979f8:	2809883a 	mov	r4,r5
200979fc:	dfc00215 	stw	ra,8(sp)
20097a00:	80000015 	stw	zero,0(r16)
20097a04:	00996300 	call	20099630 <close>
20097a08:	00ffffc4 	movi	r3,-1
20097a0c:	10c00526 	beq	r2,r3,20097a24 <_close_r+0x44>
20097a10:	dfc00217 	ldw	ra,8(sp)
20097a14:	dc400117 	ldw	r17,4(sp)
20097a18:	dc000017 	ldw	r16,0(sp)
20097a1c:	dec00304 	addi	sp,sp,12
20097a20:	f800283a 	ret
20097a24:	80c00017 	ldw	r3,0(r16)
20097a28:	183ff926 	beq	r3,zero,20097a10 <__flash_rwdata_start+0xffff8c24>
20097a2c:	88c00015 	stw	r3,0(r17)
20097a30:	003ff706 	br	20097a10 <__flash_rwdata_start+0xffff8c24>

20097a34 <_calloc_r>:
20097a34:	298b383a 	mul	r5,r5,r6
20097a38:	defffe04 	addi	sp,sp,-8
20097a3c:	dc000015 	stw	r16,0(sp)
20097a40:	dfc00115 	stw	ra,4(sp)
20097a44:	008b6f40 	call	2008b6f4 <_malloc_r>
20097a48:	1021883a 	mov	r16,r2
20097a4c:	10002826 	beq	r2,zero,20097af0 <_calloc_r+0xbc>
20097a50:	11bfff17 	ldw	r6,-4(r2)
20097a54:	00bfff04 	movi	r2,-4
20097a58:	00c00904 	movi	r3,36
20097a5c:	308c703a 	and	r6,r6,r2
20097a60:	308d883a 	add	r6,r6,r2
20097a64:	19801436 	bltu	r3,r6,20097ab8 <_calloc_r+0x84>
20097a68:	008004c4 	movi	r2,19
20097a6c:	11800936 	bltu	r2,r6,20097a94 <_calloc_r+0x60>
20097a70:	8005883a 	mov	r2,r16
20097a74:	10000015 	stw	zero,0(r2)
20097a78:	10000115 	stw	zero,4(r2)
20097a7c:	10000215 	stw	zero,8(r2)
20097a80:	8005883a 	mov	r2,r16
20097a84:	dfc00117 	ldw	ra,4(sp)
20097a88:	dc000017 	ldw	r16,0(sp)
20097a8c:	dec00204 	addi	sp,sp,8
20097a90:	f800283a 	ret
20097a94:	80000015 	stw	zero,0(r16)
20097a98:	80000115 	stw	zero,4(r16)
20097a9c:	008006c4 	movi	r2,27
20097aa0:	11800d2e 	bgeu	r2,r6,20097ad8 <_calloc_r+0xa4>
20097aa4:	80000215 	stw	zero,8(r16)
20097aa8:	80000315 	stw	zero,12(r16)
20097aac:	30c00c26 	beq	r6,r3,20097ae0 <_calloc_r+0xac>
20097ab0:	80800404 	addi	r2,r16,16
20097ab4:	003fef06 	br	20097a74 <__flash_rwdata_start+0xffff8c88>
20097ab8:	8009883a 	mov	r4,r16
20097abc:	000b883a 	mov	r5,zero
20097ac0:	008c0500 	call	2008c050 <memset>
20097ac4:	8005883a 	mov	r2,r16
20097ac8:	dfc00117 	ldw	ra,4(sp)
20097acc:	dc000017 	ldw	r16,0(sp)
20097ad0:	dec00204 	addi	sp,sp,8
20097ad4:	f800283a 	ret
20097ad8:	80800204 	addi	r2,r16,8
20097adc:	003fe506 	br	20097a74 <__flash_rwdata_start+0xffff8c88>
20097ae0:	80000415 	stw	zero,16(r16)
20097ae4:	80800604 	addi	r2,r16,24
20097ae8:	80000515 	stw	zero,20(r16)
20097aec:	003fe106 	br	20097a74 <__flash_rwdata_start+0xffff8c88>
20097af0:	0005883a 	mov	r2,zero
20097af4:	003fe306 	br	20097a84 <__flash_rwdata_start+0xffff8c98>

20097af8 <_fclose_r>:
20097af8:	28003926 	beq	r5,zero,20097be0 <_fclose_r+0xe8>
20097afc:	defffc04 	addi	sp,sp,-16
20097b00:	dc400115 	stw	r17,4(sp)
20097b04:	dc000015 	stw	r16,0(sp)
20097b08:	dfc00315 	stw	ra,12(sp)
20097b0c:	dc800215 	stw	r18,8(sp)
20097b10:	2023883a 	mov	r17,r4
20097b14:	2821883a 	mov	r16,r5
20097b18:	20000226 	beq	r4,zero,20097b24 <_fclose_r+0x2c>
20097b1c:	20800e17 	ldw	r2,56(r4)
20097b20:	10002726 	beq	r2,zero,20097bc0 <_fclose_r+0xc8>
20097b24:	8080030f 	ldh	r2,12(r16)
20097b28:	1000071e 	bne	r2,zero,20097b48 <_fclose_r+0x50>
20097b2c:	0005883a 	mov	r2,zero
20097b30:	dfc00317 	ldw	ra,12(sp)
20097b34:	dc800217 	ldw	r18,8(sp)
20097b38:	dc400117 	ldw	r17,4(sp)
20097b3c:	dc000017 	ldw	r16,0(sp)
20097b40:	dec00404 	addi	sp,sp,16
20097b44:	f800283a 	ret
20097b48:	8809883a 	mov	r4,r17
20097b4c:	800b883a 	mov	r5,r16
20097b50:	00922740 	call	20092274 <__sflush_r>
20097b54:	1025883a 	mov	r18,r2
20097b58:	80800b17 	ldw	r2,44(r16)
20097b5c:	10000426 	beq	r2,zero,20097b70 <_fclose_r+0x78>
20097b60:	81400717 	ldw	r5,28(r16)
20097b64:	8809883a 	mov	r4,r17
20097b68:	103ee83a 	callr	r2
20097b6c:	10001616 	blt	r2,zero,20097bc8 <_fclose_r+0xd0>
20097b70:	8080030b 	ldhu	r2,12(r16)
20097b74:	1080200c 	andi	r2,r2,128
20097b78:	1000151e 	bne	r2,zero,20097bd0 <_fclose_r+0xd8>
20097b7c:	81400c17 	ldw	r5,48(r16)
20097b80:	28000526 	beq	r5,zero,20097b98 <_fclose_r+0xa0>
20097b84:	80801004 	addi	r2,r16,64
20097b88:	28800226 	beq	r5,r2,20097b94 <_fclose_r+0x9c>
20097b8c:	8809883a 	mov	r4,r17
20097b90:	00929cc0 	call	200929cc <_free_r>
20097b94:	80000c15 	stw	zero,48(r16)
20097b98:	81401117 	ldw	r5,68(r16)
20097b9c:	28000326 	beq	r5,zero,20097bac <_fclose_r+0xb4>
20097ba0:	8809883a 	mov	r4,r17
20097ba4:	00929cc0 	call	200929cc <_free_r>
20097ba8:	80001115 	stw	zero,68(r16)
20097bac:	00928680 	call	20092868 <__sfp_lock_acquire>
20097bb0:	8000030d 	sth	zero,12(r16)
20097bb4:	009286c0 	call	2009286c <__sfp_lock_release>
20097bb8:	9005883a 	mov	r2,r18
20097bbc:	003fdc06 	br	20097b30 <__flash_rwdata_start+0xffff8d44>
20097bc0:	00928580 	call	20092858 <__sinit>
20097bc4:	003fd706 	br	20097b24 <__flash_rwdata_start+0xffff8d38>
20097bc8:	04bfffc4 	movi	r18,-1
20097bcc:	003fe806 	br	20097b70 <__flash_rwdata_start+0xffff8d84>
20097bd0:	81400417 	ldw	r5,16(r16)
20097bd4:	8809883a 	mov	r4,r17
20097bd8:	00929cc0 	call	200929cc <_free_r>
20097bdc:	003fe706 	br	20097b7c <__flash_rwdata_start+0xffff8d90>
20097be0:	0005883a 	mov	r2,zero
20097be4:	f800283a 	ret

20097be8 <fclose>:
20097be8:	00800034 	movhi	r2,0
20097bec:	108a7104 	addi	r2,r2,10692
20097bf0:	200b883a 	mov	r5,r4
20097bf4:	11000017 	ldw	r4,0(r2)
20097bf8:	0097af81 	jmpi	20097af8 <_fclose_r>

20097bfc <_fputwc_r>:
20097bfc:	3080030b 	ldhu	r2,12(r6)
20097c00:	defff804 	addi	sp,sp,-32
20097c04:	dcc00415 	stw	r19,16(sp)
20097c08:	dc800315 	stw	r18,12(sp)
20097c0c:	dc000115 	stw	r16,4(sp)
20097c10:	dfc00715 	stw	ra,28(sp)
20097c14:	dd400615 	stw	r21,24(sp)
20097c18:	dd000515 	stw	r20,20(sp)
20097c1c:	dc400215 	stw	r17,8(sp)
20097c20:	10c8000c 	andi	r3,r2,8192
20097c24:	3021883a 	mov	r16,r6
20097c28:	2027883a 	mov	r19,r4
20097c2c:	2825883a 	mov	r18,r5
20097c30:	1800051e 	bne	r3,zero,20097c48 <_fputwc_r+0x4c>
20097c34:	30c01917 	ldw	r3,100(r6)
20097c38:	10880014 	ori	r2,r2,8192
20097c3c:	3080030d 	sth	r2,12(r6)
20097c40:	18880014 	ori	r2,r3,8192
20097c44:	30801915 	stw	r2,100(r6)
20097c48:	009338c0 	call	2009338c <__locale_mb_cur_max>
20097c4c:	00c00044 	movi	r3,1
20097c50:	10c03e26 	beq	r2,r3,20097d4c <_fputwc_r+0x150>
20097c54:	9809883a 	mov	r4,r19
20097c58:	d80b883a 	mov	r5,sp
20097c5c:	900d883a 	mov	r6,r18
20097c60:	81c01704 	addi	r7,r16,92
20097c64:	0097f400 	call	20097f40 <_wcrtomb_r>
20097c68:	1029883a 	mov	r20,r2
20097c6c:	00bfffc4 	movi	r2,-1
20097c70:	a0802026 	beq	r20,r2,20097cf4 <_fputwc_r+0xf8>
20097c74:	d9400003 	ldbu	r5,0(sp)
20097c78:	a0001c26 	beq	r20,zero,20097cec <_fputwc_r+0xf0>
20097c7c:	0023883a 	mov	r17,zero
20097c80:	05400284 	movi	r21,10
20097c84:	00000906 	br	20097cac <_fputwc_r+0xb0>
20097c88:	80800017 	ldw	r2,0(r16)
20097c8c:	11400005 	stb	r5,0(r2)
20097c90:	80c00017 	ldw	r3,0(r16)
20097c94:	18c00044 	addi	r3,r3,1
20097c98:	80c00015 	stw	r3,0(r16)
20097c9c:	8c400044 	addi	r17,r17,1
20097ca0:	dc45883a 	add	r2,sp,r17
20097ca4:	8d00112e 	bgeu	r17,r20,20097cec <_fputwc_r+0xf0>
20097ca8:	11400003 	ldbu	r5,0(r2)
20097cac:	80c00217 	ldw	r3,8(r16)
20097cb0:	18ffffc4 	addi	r3,r3,-1
20097cb4:	80c00215 	stw	r3,8(r16)
20097cb8:	183ff30e 	bge	r3,zero,20097c88 <__flash_rwdata_start+0xffff8e9c>
20097cbc:	80800617 	ldw	r2,24(r16)
20097cc0:	18801916 	blt	r3,r2,20097d28 <_fputwc_r+0x12c>
20097cc4:	80800017 	ldw	r2,0(r16)
20097cc8:	11400005 	stb	r5,0(r2)
20097ccc:	80800017 	ldw	r2,0(r16)
20097cd0:	10c00003 	ldbu	r3,0(r2)
20097cd4:	10800044 	addi	r2,r2,1
20097cd8:	1d402326 	beq	r3,r21,20097d68 <_fputwc_r+0x16c>
20097cdc:	80800015 	stw	r2,0(r16)
20097ce0:	8c400044 	addi	r17,r17,1
20097ce4:	dc45883a 	add	r2,sp,r17
20097ce8:	8d3fef36 	bltu	r17,r20,20097ca8 <__flash_rwdata_start+0xffff8ebc>
20097cec:	9005883a 	mov	r2,r18
20097cf0:	00000406 	br	20097d04 <_fputwc_r+0x108>
20097cf4:	80c0030b 	ldhu	r3,12(r16)
20097cf8:	a005883a 	mov	r2,r20
20097cfc:	18c01014 	ori	r3,r3,64
20097d00:	80c0030d 	sth	r3,12(r16)
20097d04:	dfc00717 	ldw	ra,28(sp)
20097d08:	dd400617 	ldw	r21,24(sp)
20097d0c:	dd000517 	ldw	r20,20(sp)
20097d10:	dcc00417 	ldw	r19,16(sp)
20097d14:	dc800317 	ldw	r18,12(sp)
20097d18:	dc400217 	ldw	r17,8(sp)
20097d1c:	dc000117 	ldw	r16,4(sp)
20097d20:	dec00804 	addi	sp,sp,32
20097d24:	f800283a 	ret
20097d28:	9809883a 	mov	r4,r19
20097d2c:	29403fcc 	andi	r5,r5,255
20097d30:	800d883a 	mov	r6,r16
20097d34:	00978300 	call	20097830 <__swbuf_r>
20097d38:	10bfffe0 	cmpeqi	r2,r2,-1
20097d3c:	10803fcc 	andi	r2,r2,255
20097d40:	103fd626 	beq	r2,zero,20097c9c <__flash_rwdata_start+0xffff8eb0>
20097d44:	00bfffc4 	movi	r2,-1
20097d48:	003fee06 	br	20097d04 <__flash_rwdata_start+0xffff8f18>
20097d4c:	90ffffc4 	addi	r3,r18,-1
20097d50:	01003f84 	movi	r4,254
20097d54:	20ffbf36 	bltu	r4,r3,20097c54 <__flash_rwdata_start+0xffff8e68>
20097d58:	900b883a 	mov	r5,r18
20097d5c:	dc800005 	stb	r18,0(sp)
20097d60:	1029883a 	mov	r20,r2
20097d64:	003fc506 	br	20097c7c <__flash_rwdata_start+0xffff8e90>
20097d68:	9809883a 	mov	r4,r19
20097d6c:	a80b883a 	mov	r5,r21
20097d70:	800d883a 	mov	r6,r16
20097d74:	00978300 	call	20097830 <__swbuf_r>
20097d78:	10bfffe0 	cmpeqi	r2,r2,-1
20097d7c:	003fef06 	br	20097d3c <__flash_rwdata_start+0xffff8f50>

20097d80 <fputwc>:
20097d80:	00800034 	movhi	r2,0
20097d84:	defffc04 	addi	sp,sp,-16
20097d88:	108a7104 	addi	r2,r2,10692
20097d8c:	dc000115 	stw	r16,4(sp)
20097d90:	14000017 	ldw	r16,0(r2)
20097d94:	dc400215 	stw	r17,8(sp)
20097d98:	dfc00315 	stw	ra,12(sp)
20097d9c:	2023883a 	mov	r17,r4
20097da0:	280d883a 	mov	r6,r5
20097da4:	80000626 	beq	r16,zero,20097dc0 <fputwc+0x40>
20097da8:	80800e17 	ldw	r2,56(r16)
20097dac:	1000041e 	bne	r2,zero,20097dc0 <fputwc+0x40>
20097db0:	8009883a 	mov	r4,r16
20097db4:	d9400015 	stw	r5,0(sp)
20097db8:	00928580 	call	20092858 <__sinit>
20097dbc:	d9800017 	ldw	r6,0(sp)
20097dc0:	8009883a 	mov	r4,r16
20097dc4:	880b883a 	mov	r5,r17
20097dc8:	dfc00317 	ldw	ra,12(sp)
20097dcc:	dc400217 	ldw	r17,8(sp)
20097dd0:	dc000117 	ldw	r16,4(sp)
20097dd4:	dec00404 	addi	sp,sp,16
20097dd8:	0097bfc1 	jmpi	20097bfc <_fputwc_r>

20097ddc <_fstat_r>:
20097ddc:	defffd04 	addi	sp,sp,-12
20097de0:	dc000015 	stw	r16,0(sp)
20097de4:	04000034 	movhi	r16,0
20097de8:	dc400115 	stw	r17,4(sp)
20097dec:	840a9404 	addi	r16,r16,10832
20097df0:	2023883a 	mov	r17,r4
20097df4:	2809883a 	mov	r4,r5
20097df8:	300b883a 	mov	r5,r6
20097dfc:	dfc00215 	stw	ra,8(sp)
20097e00:	80000015 	stw	zero,0(r16)
20097e04:	00998680 	call	20099868 <fstat>
20097e08:	00ffffc4 	movi	r3,-1
20097e0c:	10c00526 	beq	r2,r3,20097e24 <_fstat_r+0x48>
20097e10:	dfc00217 	ldw	ra,8(sp)
20097e14:	dc400117 	ldw	r17,4(sp)
20097e18:	dc000017 	ldw	r16,0(sp)
20097e1c:	dec00304 	addi	sp,sp,12
20097e20:	f800283a 	ret
20097e24:	80c00017 	ldw	r3,0(r16)
20097e28:	183ff926 	beq	r3,zero,20097e10 <__flash_rwdata_start+0xffff9024>
20097e2c:	88c00015 	stw	r3,0(r17)
20097e30:	003ff706 	br	20097e10 <__flash_rwdata_start+0xffff9024>

20097e34 <_isatty_r>:
20097e34:	defffd04 	addi	sp,sp,-12
20097e38:	dc000015 	stw	r16,0(sp)
20097e3c:	04000034 	movhi	r16,0
20097e40:	dc400115 	stw	r17,4(sp)
20097e44:	840a9404 	addi	r16,r16,10832
20097e48:	2023883a 	mov	r17,r4
20097e4c:	2809883a 	mov	r4,r5
20097e50:	dfc00215 	stw	ra,8(sp)
20097e54:	80000015 	stw	zero,0(r16)
20097e58:	0099b180 	call	20099b18 <isatty>
20097e5c:	00ffffc4 	movi	r3,-1
20097e60:	10c00526 	beq	r2,r3,20097e78 <_isatty_r+0x44>
20097e64:	dfc00217 	ldw	ra,8(sp)
20097e68:	dc400117 	ldw	r17,4(sp)
20097e6c:	dc000017 	ldw	r16,0(sp)
20097e70:	dec00304 	addi	sp,sp,12
20097e74:	f800283a 	ret
20097e78:	80c00017 	ldw	r3,0(r16)
20097e7c:	183ff926 	beq	r3,zero,20097e64 <__flash_rwdata_start+0xffff9078>
20097e80:	88c00015 	stw	r3,0(r17)
20097e84:	003ff706 	br	20097e64 <__flash_rwdata_start+0xffff9078>

20097e88 <_lseek_r>:
20097e88:	defffd04 	addi	sp,sp,-12
20097e8c:	dc000015 	stw	r16,0(sp)
20097e90:	04000034 	movhi	r16,0
20097e94:	dc400115 	stw	r17,4(sp)
20097e98:	840a9404 	addi	r16,r16,10832
20097e9c:	2023883a 	mov	r17,r4
20097ea0:	2809883a 	mov	r4,r5
20097ea4:	300b883a 	mov	r5,r6
20097ea8:	380d883a 	mov	r6,r7
20097eac:	dfc00215 	stw	ra,8(sp)
20097eb0:	80000015 	stw	zero,0(r16)
20097eb4:	0099cf00 	call	20099cf0 <lseek>
20097eb8:	00ffffc4 	movi	r3,-1
20097ebc:	10c00526 	beq	r2,r3,20097ed4 <_lseek_r+0x4c>
20097ec0:	dfc00217 	ldw	ra,8(sp)
20097ec4:	dc400117 	ldw	r17,4(sp)
20097ec8:	dc000017 	ldw	r16,0(sp)
20097ecc:	dec00304 	addi	sp,sp,12
20097ed0:	f800283a 	ret
20097ed4:	80c00017 	ldw	r3,0(r16)
20097ed8:	183ff926 	beq	r3,zero,20097ec0 <__flash_rwdata_start+0xffff90d4>
20097edc:	88c00015 	stw	r3,0(r17)
20097ee0:	003ff706 	br	20097ec0 <__flash_rwdata_start+0xffff90d4>

20097ee4 <_read_r>:
20097ee4:	defffd04 	addi	sp,sp,-12
20097ee8:	dc000015 	stw	r16,0(sp)
20097eec:	04000034 	movhi	r16,0
20097ef0:	dc400115 	stw	r17,4(sp)
20097ef4:	840a9404 	addi	r16,r16,10832
20097ef8:	2023883a 	mov	r17,r4
20097efc:	2809883a 	mov	r4,r5
20097f00:	300b883a 	mov	r5,r6
20097f04:	380d883a 	mov	r6,r7
20097f08:	dfc00215 	stw	ra,8(sp)
20097f0c:	80000015 	stw	zero,0(r16)
20097f10:	0099ecc0 	call	20099ecc <read>
20097f14:	00ffffc4 	movi	r3,-1
20097f18:	10c00526 	beq	r2,r3,20097f30 <_read_r+0x4c>
20097f1c:	dfc00217 	ldw	ra,8(sp)
20097f20:	dc400117 	ldw	r17,4(sp)
20097f24:	dc000017 	ldw	r16,0(sp)
20097f28:	dec00304 	addi	sp,sp,12
20097f2c:	f800283a 	ret
20097f30:	80c00017 	ldw	r3,0(r16)
20097f34:	183ff926 	beq	r3,zero,20097f1c <__flash_rwdata_start+0xffff9130>
20097f38:	88c00015 	stw	r3,0(r17)
20097f3c:	003ff706 	br	20097f1c <__flash_rwdata_start+0xffff9130>

20097f40 <_wcrtomb_r>:
20097f40:	defff604 	addi	sp,sp,-40
20097f44:	00800034 	movhi	r2,0
20097f48:	dc800815 	stw	r18,32(sp)
20097f4c:	dc400715 	stw	r17,28(sp)
20097f50:	dc000615 	stw	r16,24(sp)
20097f54:	108a7504 	addi	r2,r2,10708
20097f58:	dfc00915 	stw	ra,36(sp)
20097f5c:	2021883a 	mov	r16,r4
20097f60:	3823883a 	mov	r17,r7
20097f64:	14800017 	ldw	r18,0(r2)
20097f68:	28001426 	beq	r5,zero,20097fbc <_wcrtomb_r+0x7c>
20097f6c:	d9400415 	stw	r5,16(sp)
20097f70:	d9800515 	stw	r6,20(sp)
20097f74:	00933800 	call	20093380 <__locale_charset>
20097f78:	d9400417 	ldw	r5,16(sp)
20097f7c:	d9800517 	ldw	r6,20(sp)
20097f80:	8009883a 	mov	r4,r16
20097f84:	dc400015 	stw	r17,0(sp)
20097f88:	100f883a 	mov	r7,r2
20097f8c:	903ee83a 	callr	r18
20097f90:	00ffffc4 	movi	r3,-1
20097f94:	10c0031e 	bne	r2,r3,20097fa4 <_wcrtomb_r+0x64>
20097f98:	88000015 	stw	zero,0(r17)
20097f9c:	00c02284 	movi	r3,138
20097fa0:	80c00015 	stw	r3,0(r16)
20097fa4:	dfc00917 	ldw	ra,36(sp)
20097fa8:	dc800817 	ldw	r18,32(sp)
20097fac:	dc400717 	ldw	r17,28(sp)
20097fb0:	dc000617 	ldw	r16,24(sp)
20097fb4:	dec00a04 	addi	sp,sp,40
20097fb8:	f800283a 	ret
20097fbc:	00933800 	call	20093380 <__locale_charset>
20097fc0:	8009883a 	mov	r4,r16
20097fc4:	dc400015 	stw	r17,0(sp)
20097fc8:	d9400104 	addi	r5,sp,4
20097fcc:	000d883a 	mov	r6,zero
20097fd0:	100f883a 	mov	r7,r2
20097fd4:	903ee83a 	callr	r18
20097fd8:	003fed06 	br	20097f90 <__flash_rwdata_start+0xffff91a4>

20097fdc <wcrtomb>:
20097fdc:	defff604 	addi	sp,sp,-40
20097fe0:	00800034 	movhi	r2,0
20097fe4:	dc800615 	stw	r18,24(sp)
20097fe8:	dc400515 	stw	r17,20(sp)
20097fec:	dc000415 	stw	r16,16(sp)
20097ff0:	108a7104 	addi	r2,r2,10692
20097ff4:	dfc00915 	stw	ra,36(sp)
20097ff8:	dd000815 	stw	r20,32(sp)
20097ffc:	dcc00715 	stw	r19,28(sp)
20098000:	2021883a 	mov	r16,r4
20098004:	3025883a 	mov	r18,r6
20098008:	14400017 	ldw	r17,0(r2)
2009800c:	20001826 	beq	r4,zero,20098070 <wcrtomb+0x94>
20098010:	00800034 	movhi	r2,0
20098014:	108a7504 	addi	r2,r2,10708
20098018:	15000017 	ldw	r20,0(r2)
2009801c:	2827883a 	mov	r19,r5
20098020:	00933800 	call	20093380 <__locale_charset>
20098024:	8809883a 	mov	r4,r17
20098028:	dc800015 	stw	r18,0(sp)
2009802c:	800b883a 	mov	r5,r16
20098030:	980d883a 	mov	r6,r19
20098034:	100f883a 	mov	r7,r2
20098038:	a03ee83a 	callr	r20
2009803c:	00ffffc4 	movi	r3,-1
20098040:	10c0031e 	bne	r2,r3,20098050 <wcrtomb+0x74>
20098044:	90000015 	stw	zero,0(r18)
20098048:	00c02284 	movi	r3,138
2009804c:	88c00015 	stw	r3,0(r17)
20098050:	dfc00917 	ldw	ra,36(sp)
20098054:	dd000817 	ldw	r20,32(sp)
20098058:	dcc00717 	ldw	r19,28(sp)
2009805c:	dc800617 	ldw	r18,24(sp)
20098060:	dc400517 	ldw	r17,20(sp)
20098064:	dc000417 	ldw	r16,16(sp)
20098068:	dec00a04 	addi	sp,sp,40
2009806c:	f800283a 	ret
20098070:	00800034 	movhi	r2,0
20098074:	108a7504 	addi	r2,r2,10708
20098078:	14000017 	ldw	r16,0(r2)
2009807c:	00933800 	call	20093380 <__locale_charset>
20098080:	8809883a 	mov	r4,r17
20098084:	dc800015 	stw	r18,0(sp)
20098088:	d9400104 	addi	r5,sp,4
2009808c:	000d883a 	mov	r6,zero
20098090:	100f883a 	mov	r7,r2
20098094:	803ee83a 	callr	r16
20098098:	003fe806 	br	2009803c <__flash_rwdata_start+0xffff9250>

2009809c <__ascii_wctomb>:
2009809c:	28000526 	beq	r5,zero,200980b4 <__ascii_wctomb+0x18>
200980a0:	00803fc4 	movi	r2,255
200980a4:	11800536 	bltu	r2,r6,200980bc <__ascii_wctomb+0x20>
200980a8:	29800005 	stb	r6,0(r5)
200980ac:	00800044 	movi	r2,1
200980b0:	f800283a 	ret
200980b4:	0005883a 	mov	r2,zero
200980b8:	f800283a 	ret
200980bc:	00802284 	movi	r2,138
200980c0:	20800015 	stw	r2,0(r4)
200980c4:	00bfffc4 	movi	r2,-1
200980c8:	f800283a 	ret

200980cc <_wctomb_r>:
200980cc:	00800034 	movhi	r2,0
200980d0:	defff904 	addi	sp,sp,-28
200980d4:	108a7504 	addi	r2,r2,10708
200980d8:	dfc00615 	stw	ra,24(sp)
200980dc:	dc400515 	stw	r17,20(sp)
200980e0:	dc000415 	stw	r16,16(sp)
200980e4:	3823883a 	mov	r17,r7
200980e8:	14000017 	ldw	r16,0(r2)
200980ec:	d9000115 	stw	r4,4(sp)
200980f0:	d9400215 	stw	r5,8(sp)
200980f4:	d9800315 	stw	r6,12(sp)
200980f8:	00933800 	call	20093380 <__locale_charset>
200980fc:	d9000117 	ldw	r4,4(sp)
20098100:	d9400217 	ldw	r5,8(sp)
20098104:	d9800317 	ldw	r6,12(sp)
20098108:	dc400015 	stw	r17,0(sp)
2009810c:	100f883a 	mov	r7,r2
20098110:	803ee83a 	callr	r16
20098114:	dfc00617 	ldw	ra,24(sp)
20098118:	dc400517 	ldw	r17,20(sp)
2009811c:	dc000417 	ldw	r16,16(sp)
20098120:	dec00704 	addi	sp,sp,28
20098124:	f800283a 	ret

20098128 <__udivdi3>:
20098128:	defff504 	addi	sp,sp,-44
2009812c:	dcc00415 	stw	r19,16(sp)
20098130:	dc000115 	stw	r16,4(sp)
20098134:	dfc00a15 	stw	ra,40(sp)
20098138:	df000915 	stw	fp,36(sp)
2009813c:	ddc00815 	stw	r23,32(sp)
20098140:	dd800715 	stw	r22,28(sp)
20098144:	dd400615 	stw	r21,24(sp)
20098148:	dd000515 	stw	r20,20(sp)
2009814c:	dc800315 	stw	r18,12(sp)
20098150:	dc400215 	stw	r17,8(sp)
20098154:	2027883a 	mov	r19,r4
20098158:	2821883a 	mov	r16,r5
2009815c:	3800421e 	bne	r7,zero,20098268 <__udivdi3+0x140>
20098160:	3025883a 	mov	r18,r6
20098164:	2023883a 	mov	r17,r4
20098168:	2980542e 	bgeu	r5,r6,200982bc <__udivdi3+0x194>
2009816c:	00bfffd4 	movui	r2,65535
20098170:	282d883a 	mov	r22,r5
20098174:	1180a836 	bltu	r2,r6,20098418 <__udivdi3+0x2f0>
20098178:	00803fc4 	movi	r2,255
2009817c:	1181422e 	bgeu	r2,r6,20098688 <__udivdi3+0x560>
20098180:	00800204 	movi	r2,8
20098184:	1007883a 	mov	r3,r2
20098188:	3084d83a 	srl	r2,r6,r2
2009818c:	01000034 	movhi	r4,0
20098190:	21019a04 	addi	r4,r4,1640
20098194:	2085883a 	add	r2,r4,r2
20098198:	10800003 	ldbu	r2,0(r2)
2009819c:	10c7883a 	add	r3,r2,r3
200981a0:	00800804 	movi	r2,32
200981a4:	10c5c83a 	sub	r2,r2,r3
200981a8:	10000526 	beq	r2,zero,200981c0 <__udivdi3+0x98>
200981ac:	80a0983a 	sll	r16,r16,r2
200981b0:	98c6d83a 	srl	r3,r19,r3
200981b4:	30a4983a 	sll	r18,r6,r2
200981b8:	98a2983a 	sll	r17,r19,r2
200981bc:	80ecb03a 	or	r22,r16,r3
200981c0:	902ad43a 	srli	r21,r18,16
200981c4:	b009883a 	mov	r4,r22
200981c8:	953fffcc 	andi	r20,r18,65535
200981cc:	a80b883a 	mov	r5,r21
200981d0:	0088bf80 	call	20088bf8 <__umodsi3>
200981d4:	b009883a 	mov	r4,r22
200981d8:	a80b883a 	mov	r5,r21
200981dc:	1027883a 	mov	r19,r2
200981e0:	0088bf00 	call	20088bf0 <__udivsi3>
200981e4:	1021883a 	mov	r16,r2
200981e8:	8806d43a 	srli	r3,r17,16
200981ec:	9804943a 	slli	r2,r19,16
200981f0:	8527383a 	mul	r19,r16,r20
200981f4:	10c4b03a 	or	r2,r2,r3
200981f8:	14c0052e 	bgeu	r2,r19,20098210 <__udivdi3+0xe8>
200981fc:	1485883a 	add	r2,r2,r18
20098200:	80ffffc4 	addi	r3,r16,-1
20098204:	14800136 	bltu	r2,r18,2009820c <__udivdi3+0xe4>
20098208:	14c13436 	bltu	r2,r19,200986dc <__udivdi3+0x5b4>
2009820c:	1821883a 	mov	r16,r3
20098210:	14e7c83a 	sub	r19,r2,r19
20098214:	9809883a 	mov	r4,r19
20098218:	a80b883a 	mov	r5,r21
2009821c:	0088bf80 	call	20088bf8 <__umodsi3>
20098220:	102d883a 	mov	r22,r2
20098224:	9809883a 	mov	r4,r19
20098228:	a80b883a 	mov	r5,r21
2009822c:	0088bf00 	call	20088bf0 <__udivsi3>
20098230:	b02c943a 	slli	r22,r22,16
20098234:	1529383a 	mul	r20,r2,r20
20098238:	8c7fffcc 	andi	r17,r17,65535
2009823c:	b462b03a 	or	r17,r22,r17
20098240:	8d00052e 	bgeu	r17,r20,20098258 <__udivdi3+0x130>
20098244:	8ca3883a 	add	r17,r17,r18
20098248:	10ffffc4 	addi	r3,r2,-1
2009824c:	8c80f636 	bltu	r17,r18,20098628 <__udivdi3+0x500>
20098250:	8d00f52e 	bgeu	r17,r20,20098628 <__udivdi3+0x500>
20098254:	10bfff84 	addi	r2,r2,-2
20098258:	8020943a 	slli	r16,r16,16
2009825c:	0007883a 	mov	r3,zero
20098260:	1404b03a 	or	r2,r2,r16
20098264:	00005b06 	br	200983d4 <__udivdi3+0x2ac>
20098268:	29c05836 	bltu	r5,r7,200983cc <__udivdi3+0x2a4>
2009826c:	00bfffd4 	movui	r2,65535
20098270:	11c0642e 	bgeu	r2,r7,20098404 <__udivdi3+0x2dc>
20098274:	00804034 	movhi	r2,256
20098278:	10bfffc4 	addi	r2,r2,-1
2009827c:	11c0f32e 	bgeu	r2,r7,2009864c <__udivdi3+0x524>
20098280:	00c00604 	movi	r3,24
20098284:	180b883a 	mov	r5,r3
20098288:	38c6d83a 	srl	r3,r7,r3
2009828c:	00800034 	movhi	r2,0
20098290:	10819a04 	addi	r2,r2,1640
20098294:	10c7883a 	add	r3,r2,r3
20098298:	18c00003 	ldbu	r3,0(r3)
2009829c:	01000804 	movi	r4,32
200982a0:	1947883a 	add	r3,r3,r5
200982a4:	20e5c83a 	sub	r18,r4,r3
200982a8:	9000661e 	bne	r18,zero,20098444 <__udivdi3+0x31c>
200982ac:	3c00f936 	bltu	r7,r16,20098694 <__udivdi3+0x56c>
200982b0:	9985403a 	cmpgeu	r2,r19,r6
200982b4:	0007883a 	mov	r3,zero
200982b8:	00004606 	br	200983d4 <__udivdi3+0x2ac>
200982bc:	3000041e 	bne	r6,zero,200982d0 <__udivdi3+0x1a8>
200982c0:	01000044 	movi	r4,1
200982c4:	000b883a 	mov	r5,zero
200982c8:	0088bf00 	call	20088bf0 <__udivsi3>
200982cc:	1025883a 	mov	r18,r2
200982d0:	00bfffd4 	movui	r2,65535
200982d4:	1480562e 	bgeu	r2,r18,20098430 <__udivdi3+0x308>
200982d8:	00804034 	movhi	r2,256
200982dc:	10bfffc4 	addi	r2,r2,-1
200982e0:	1480e32e 	bgeu	r2,r18,20098670 <__udivdi3+0x548>
200982e4:	00800604 	movi	r2,24
200982e8:	1007883a 	mov	r3,r2
200982ec:	9084d83a 	srl	r2,r18,r2
200982f0:	01000034 	movhi	r4,0
200982f4:	21019a04 	addi	r4,r4,1640
200982f8:	2085883a 	add	r2,r4,r2
200982fc:	10800003 	ldbu	r2,0(r2)
20098300:	10c5883a 	add	r2,r2,r3
20098304:	00c00804 	movi	r3,32
20098308:	1887c83a 	sub	r3,r3,r2
2009830c:	1800911e 	bne	r3,zero,20098554 <__udivdi3+0x42c>
20098310:	9028d43a 	srli	r20,r18,16
20098314:	84a1c83a 	sub	r16,r16,r18
20098318:	957fffcc 	andi	r21,r18,65535
2009831c:	00c00044 	movi	r3,1
20098320:	8009883a 	mov	r4,r16
20098324:	a00b883a 	mov	r5,r20
20098328:	d8c00015 	stw	r3,0(sp)
2009832c:	0088bf80 	call	20088bf8 <__umodsi3>
20098330:	8009883a 	mov	r4,r16
20098334:	a00b883a 	mov	r5,r20
20098338:	1027883a 	mov	r19,r2
2009833c:	0088bf00 	call	20088bf0 <__udivsi3>
20098340:	1021883a 	mov	r16,r2
20098344:	880cd43a 	srli	r6,r17,16
20098348:	9804943a 	slli	r2,r19,16
2009834c:	8567383a 	mul	r19,r16,r21
20098350:	d8c00017 	ldw	r3,0(sp)
20098354:	1188b03a 	or	r4,r2,r6
20098358:	24c0052e 	bgeu	r4,r19,20098370 <__udivdi3+0x248>
2009835c:	2489883a 	add	r4,r4,r18
20098360:	80bfffc4 	addi	r2,r16,-1
20098364:	24800136 	bltu	r4,r18,2009836c <__udivdi3+0x244>
20098368:	24c0d936 	bltu	r4,r19,200986d0 <__udivdi3+0x5a8>
2009836c:	1021883a 	mov	r16,r2
20098370:	24e7c83a 	sub	r19,r4,r19
20098374:	9809883a 	mov	r4,r19
20098378:	a00b883a 	mov	r5,r20
2009837c:	d8c00015 	stw	r3,0(sp)
20098380:	0088bf80 	call	20088bf8 <__umodsi3>
20098384:	102d883a 	mov	r22,r2
20098388:	9809883a 	mov	r4,r19
2009838c:	a00b883a 	mov	r5,r20
20098390:	0088bf00 	call	20088bf0 <__udivsi3>
20098394:	b02c943a 	slli	r22,r22,16
20098398:	156b383a 	mul	r21,r2,r21
2009839c:	8c7fffcc 	andi	r17,r17,65535
200983a0:	b462b03a 	or	r17,r22,r17
200983a4:	d8c00017 	ldw	r3,0(sp)
200983a8:	8d40052e 	bgeu	r17,r21,200983c0 <__udivdi3+0x298>
200983ac:	8ca3883a 	add	r17,r17,r18
200983b0:	113fffc4 	addi	r4,r2,-1
200983b4:	8c809a36 	bltu	r17,r18,20098620 <__udivdi3+0x4f8>
200983b8:	8d40992e 	bgeu	r17,r21,20098620 <__udivdi3+0x4f8>
200983bc:	10bfff84 	addi	r2,r2,-2
200983c0:	8020943a 	slli	r16,r16,16
200983c4:	1404b03a 	or	r2,r2,r16
200983c8:	00000206 	br	200983d4 <__udivdi3+0x2ac>
200983cc:	0007883a 	mov	r3,zero
200983d0:	0005883a 	mov	r2,zero
200983d4:	dfc00a17 	ldw	ra,40(sp)
200983d8:	df000917 	ldw	fp,36(sp)
200983dc:	ddc00817 	ldw	r23,32(sp)
200983e0:	dd800717 	ldw	r22,28(sp)
200983e4:	dd400617 	ldw	r21,24(sp)
200983e8:	dd000517 	ldw	r20,20(sp)
200983ec:	dcc00417 	ldw	r19,16(sp)
200983f0:	dc800317 	ldw	r18,12(sp)
200983f4:	dc400217 	ldw	r17,8(sp)
200983f8:	dc000117 	ldw	r16,4(sp)
200983fc:	dec00b04 	addi	sp,sp,44
20098400:	f800283a 	ret
20098404:	00803fc4 	movi	r2,255
20098408:	11c0932e 	bgeu	r2,r7,20098658 <__udivdi3+0x530>
2009840c:	00c00204 	movi	r3,8
20098410:	180b883a 	mov	r5,r3
20098414:	003f9c06 	br	20098288 <__flash_rwdata_start+0xffff949c>
20098418:	00804034 	movhi	r2,256
2009841c:	10bfffc4 	addi	r2,r2,-1
20098420:	1180902e 	bgeu	r2,r6,20098664 <__udivdi3+0x53c>
20098424:	00800604 	movi	r2,24
20098428:	1007883a 	mov	r3,r2
2009842c:	003f5606 	br	20098188 <__flash_rwdata_start+0xffff939c>
20098430:	00803fc4 	movi	r2,255
20098434:	1480912e 	bgeu	r2,r18,2009867c <__udivdi3+0x554>
20098438:	00800204 	movi	r2,8
2009843c:	1007883a 	mov	r3,r2
20098440:	003faa06 	br	200982ec <__flash_rwdata_start+0xffff9500>
20098444:	30eed83a 	srl	r23,r6,r3
20098448:	3c8e983a 	sll	r7,r7,r18
2009844c:	80f8d83a 	srl	fp,r16,r3
20098450:	98c6d83a 	srl	r3,r19,r3
20098454:	3deeb03a 	or	r23,r7,r23
20098458:	b828d43a 	srli	r20,r23,16
2009845c:	84a0983a 	sll	r16,r16,r18
20098460:	e009883a 	mov	r4,fp
20098464:	a00b883a 	mov	r5,r20
20098468:	80e2b03a 	or	r17,r16,r3
2009846c:	34aa983a 	sll	r21,r6,r18
20098470:	0088bf80 	call	20088bf8 <__umodsi3>
20098474:	e009883a 	mov	r4,fp
20098478:	a00b883a 	mov	r5,r20
2009847c:	102d883a 	mov	r22,r2
20098480:	0088bf00 	call	20088bf0 <__udivsi3>
20098484:	1021883a 	mov	r16,r2
20098488:	bf3fffcc 	andi	fp,r23,65535
2009848c:	b004943a 	slli	r2,r22,16
20098490:	8808d43a 	srli	r4,r17,16
20098494:	872d383a 	mul	r22,r16,fp
20098498:	1104b03a 	or	r2,r2,r4
2009849c:	1580042e 	bgeu	r2,r22,200984b0 <__udivdi3+0x388>
200984a0:	15c5883a 	add	r2,r2,r23
200984a4:	80ffffc4 	addi	r3,r16,-1
200984a8:	15c0812e 	bgeu	r2,r23,200986b0 <__udivdi3+0x588>
200984ac:	1821883a 	mov	r16,r3
200984b0:	15adc83a 	sub	r22,r2,r22
200984b4:	b009883a 	mov	r4,r22
200984b8:	a00b883a 	mov	r5,r20
200984bc:	0088bf80 	call	20088bf8 <__umodsi3>
200984c0:	a00b883a 	mov	r5,r20
200984c4:	b009883a 	mov	r4,r22
200984c8:	d8800015 	stw	r2,0(sp)
200984cc:	0088bf00 	call	20088bf0 <__udivsi3>
200984d0:	d8c00017 	ldw	r3,0(sp)
200984d4:	170b383a 	mul	r5,r2,fp
200984d8:	8c7fffcc 	andi	r17,r17,65535
200984dc:	1806943a 	slli	r3,r3,16
200984e0:	1c46b03a 	or	r3,r3,r17
200984e4:	1940042e 	bgeu	r3,r5,200984f8 <__udivdi3+0x3d0>
200984e8:	1dc7883a 	add	r3,r3,r23
200984ec:	113fffc4 	addi	r4,r2,-1
200984f0:	1dc06b2e 	bgeu	r3,r23,200986a0 <__udivdi3+0x578>
200984f4:	2005883a 	mov	r2,r4
200984f8:	8020943a 	slli	r16,r16,16
200984fc:	a9ffffcc 	andi	r7,r21,65535
20098500:	a82ad43a 	srli	r21,r21,16
20098504:	1404b03a 	or	r2,r2,r16
20098508:	113fffcc 	andi	r4,r2,65535
2009850c:	100cd43a 	srli	r6,r2,16
20098510:	21d3383a 	mul	r9,r4,r7
20098514:	2549383a 	mul	r4,r4,r21
20098518:	31cf383a 	mul	r7,r6,r7
2009851c:	4810d43a 	srli	r8,r9,16
20098520:	1947c83a 	sub	r3,r3,r5
20098524:	3909883a 	add	r4,r7,r4
20098528:	2209883a 	add	r4,r4,r8
2009852c:	354d383a 	mul	r6,r6,r21
20098530:	21c0022e 	bgeu	r4,r7,2009853c <__udivdi3+0x414>
20098534:	01400074 	movhi	r5,1
20098538:	314d883a 	add	r6,r6,r5
2009853c:	202ad43a 	srli	r21,r4,16
20098540:	354d883a 	add	r6,r6,r21
20098544:	19803f36 	bltu	r3,r6,20098644 <__udivdi3+0x51c>
20098548:	19803926 	beq	r3,r6,20098630 <__udivdi3+0x508>
2009854c:	0007883a 	mov	r3,zero
20098550:	003fa006 	br	200983d4 <__flash_rwdata_start+0xffff95e8>
20098554:	90e4983a 	sll	r18,r18,r3
20098558:	80aad83a 	srl	r21,r16,r2
2009855c:	80e0983a 	sll	r16,r16,r3
20098560:	9028d43a 	srli	r20,r18,16
20098564:	9884d83a 	srl	r2,r19,r2
20098568:	a809883a 	mov	r4,r21
2009856c:	a00b883a 	mov	r5,r20
20098570:	80acb03a 	or	r22,r16,r2
20098574:	98e2983a 	sll	r17,r19,r3
20098578:	0088bf80 	call	20088bf8 <__umodsi3>
2009857c:	a809883a 	mov	r4,r21
20098580:	a00b883a 	mov	r5,r20
20098584:	1021883a 	mov	r16,r2
20098588:	0088bf00 	call	20088bf0 <__udivsi3>
2009858c:	957fffcc 	andi	r21,r18,65535
20098590:	8020943a 	slli	r16,r16,16
20098594:	b00ad43a 	srli	r5,r22,16
20098598:	1567383a 	mul	r19,r2,r21
2009859c:	102f883a 	mov	r23,r2
200985a0:	8148b03a 	or	r4,r16,r5
200985a4:	24c0062e 	bgeu	r4,r19,200985c0 <__udivdi3+0x498>
200985a8:	2489883a 	add	r4,r4,r18
200985ac:	10bfffc4 	addi	r2,r2,-1
200985b0:	24804536 	bltu	r4,r18,200986c8 <__udivdi3+0x5a0>
200985b4:	24c0442e 	bgeu	r4,r19,200986c8 <__udivdi3+0x5a0>
200985b8:	bdffff84 	addi	r23,r23,-2
200985bc:	2489883a 	add	r4,r4,r18
200985c0:	24e7c83a 	sub	r19,r4,r19
200985c4:	9809883a 	mov	r4,r19
200985c8:	a00b883a 	mov	r5,r20
200985cc:	0088bf80 	call	20088bf8 <__umodsi3>
200985d0:	1021883a 	mov	r16,r2
200985d4:	9809883a 	mov	r4,r19
200985d8:	a00b883a 	mov	r5,r20
200985dc:	0088bf00 	call	20088bf0 <__udivsi3>
200985e0:	8020943a 	slli	r16,r16,16
200985e4:	1007883a 	mov	r3,r2
200985e8:	1545383a 	mul	r2,r2,r21
200985ec:	b13fffcc 	andi	r4,r22,65535
200985f0:	8108b03a 	or	r4,r16,r4
200985f4:	2080062e 	bgeu	r4,r2,20098610 <__udivdi3+0x4e8>
200985f8:	2489883a 	add	r4,r4,r18
200985fc:	197fffc4 	addi	r5,r3,-1
20098600:	24802f36 	bltu	r4,r18,200986c0 <__udivdi3+0x598>
20098604:	20802e2e 	bgeu	r4,r2,200986c0 <__udivdi3+0x598>
20098608:	18ffff84 	addi	r3,r3,-2
2009860c:	2489883a 	add	r4,r4,r18
20098610:	b82e943a 	slli	r23,r23,16
20098614:	20a1c83a 	sub	r16,r4,r2
20098618:	1dc6b03a 	or	r3,r3,r23
2009861c:	003f4006 	br	20098320 <__flash_rwdata_start+0xffff9534>
20098620:	2005883a 	mov	r2,r4
20098624:	003f6606 	br	200983c0 <__flash_rwdata_start+0xffff95d4>
20098628:	1805883a 	mov	r2,r3
2009862c:	003f0a06 	br	20098258 <__flash_rwdata_start+0xffff946c>
20098630:	2006943a 	slli	r3,r4,16
20098634:	9c88983a 	sll	r4,r19,r18
20098638:	4a7fffcc 	andi	r9,r9,65535
2009863c:	1a47883a 	add	r3,r3,r9
20098640:	20ffc22e 	bgeu	r4,r3,2009854c <__flash_rwdata_start+0xffff9760>
20098644:	10bfffc4 	addi	r2,r2,-1
20098648:	003fc006 	br	2009854c <__flash_rwdata_start+0xffff9760>
2009864c:	00c00404 	movi	r3,16
20098650:	180b883a 	mov	r5,r3
20098654:	003f0c06 	br	20098288 <__flash_rwdata_start+0xffff949c>
20098658:	0007883a 	mov	r3,zero
2009865c:	000b883a 	mov	r5,zero
20098660:	003f0906 	br	20098288 <__flash_rwdata_start+0xffff949c>
20098664:	00800404 	movi	r2,16
20098668:	1007883a 	mov	r3,r2
2009866c:	003ec606 	br	20098188 <__flash_rwdata_start+0xffff939c>
20098670:	00800404 	movi	r2,16
20098674:	1007883a 	mov	r3,r2
20098678:	003f1c06 	br	200982ec <__flash_rwdata_start+0xffff9500>
2009867c:	0005883a 	mov	r2,zero
20098680:	0007883a 	mov	r3,zero
20098684:	003f1906 	br	200982ec <__flash_rwdata_start+0xffff9500>
20098688:	0005883a 	mov	r2,zero
2009868c:	0007883a 	mov	r3,zero
20098690:	003ebd06 	br	20098188 <__flash_rwdata_start+0xffff939c>
20098694:	0007883a 	mov	r3,zero
20098698:	00800044 	movi	r2,1
2009869c:	003f4d06 	br	200983d4 <__flash_rwdata_start+0xffff95e8>
200986a0:	197f942e 	bgeu	r3,r5,200984f4 <__flash_rwdata_start+0xffff9708>
200986a4:	10bfff84 	addi	r2,r2,-2
200986a8:	1dc7883a 	add	r3,r3,r23
200986ac:	003f9206 	br	200984f8 <__flash_rwdata_start+0xffff970c>
200986b0:	15bf7e2e 	bgeu	r2,r22,200984ac <__flash_rwdata_start+0xffff96c0>
200986b4:	843fff84 	addi	r16,r16,-2
200986b8:	15c5883a 	add	r2,r2,r23
200986bc:	003f7c06 	br	200984b0 <__flash_rwdata_start+0xffff96c4>
200986c0:	2807883a 	mov	r3,r5
200986c4:	003fd206 	br	20098610 <__flash_rwdata_start+0xffff9824>
200986c8:	102f883a 	mov	r23,r2
200986cc:	003fbc06 	br	200985c0 <__flash_rwdata_start+0xffff97d4>
200986d0:	843fff84 	addi	r16,r16,-2
200986d4:	2489883a 	add	r4,r4,r18
200986d8:	003f2506 	br	20098370 <__flash_rwdata_start+0xffff9584>
200986dc:	843fff84 	addi	r16,r16,-2
200986e0:	1485883a 	add	r2,r2,r18
200986e4:	003eca06 	br	20098210 <__flash_rwdata_start+0xffff9424>

200986e8 <__umoddi3>:
200986e8:	defff404 	addi	sp,sp,-48
200986ec:	ddc00915 	stw	r23,36(sp)
200986f0:	dc400315 	stw	r17,12(sp)
200986f4:	dc000215 	stw	r16,8(sp)
200986f8:	dfc00b15 	stw	ra,44(sp)
200986fc:	df000a15 	stw	fp,40(sp)
20098700:	dd800815 	stw	r22,32(sp)
20098704:	dd400715 	stw	r21,28(sp)
20098708:	dd000615 	stw	r20,24(sp)
2009870c:	dcc00515 	stw	r19,20(sp)
20098710:	dc800415 	stw	r18,16(sp)
20098714:	2021883a 	mov	r16,r4
20098718:	2823883a 	mov	r17,r5
2009871c:	282f883a 	mov	r23,r5
20098720:	3800381e 	bne	r7,zero,20098804 <__umoddi3+0x11c>
20098724:	3027883a 	mov	r19,r6
20098728:	2029883a 	mov	r20,r4
2009872c:	29804e2e 	bgeu	r5,r6,20098868 <__umoddi3+0x180>
20098730:	00bfffd4 	movui	r2,65535
20098734:	11809c36 	bltu	r2,r6,200989a8 <__umoddi3+0x2c0>
20098738:	00803fc4 	movi	r2,255
2009873c:	11813b2e 	bgeu	r2,r6,20098c2c <__umoddi3+0x544>
20098740:	01400204 	movi	r5,8
20098744:	2805883a 	mov	r2,r5
20098748:	314ad83a 	srl	r5,r6,r5
2009874c:	00c00034 	movhi	r3,0
20098750:	18c19a04 	addi	r3,r3,1640
20098754:	194b883a 	add	r5,r3,r5
20098758:	29000003 	ldbu	r4,0(r5)
2009875c:	2089883a 	add	r4,r4,r2
20098760:	00800804 	movi	r2,32
20098764:	1105c83a 	sub	r2,r2,r4
20098768:	1000ec26 	beq	r2,zero,20098b1c <__umoddi3+0x434>
2009876c:	88a2983a 	sll	r17,r17,r2
20098770:	8108d83a 	srl	r4,r16,r4
20098774:	30a6983a 	sll	r19,r6,r2
20098778:	80a8983a 	sll	r20,r16,r2
2009877c:	1025883a 	mov	r18,r2
20098780:	892eb03a 	or	r23,r17,r4
20098784:	982cd43a 	srli	r22,r19,16
20098788:	b809883a 	mov	r4,r23
2009878c:	9d7fffcc 	andi	r21,r19,65535
20098790:	b00b883a 	mov	r5,r22
20098794:	0088bf80 	call	20088bf8 <__umodsi3>
20098798:	b809883a 	mov	r4,r23
2009879c:	b00b883a 	mov	r5,r22
200987a0:	1021883a 	mov	r16,r2
200987a4:	0088bf00 	call	20088bf0 <__udivsi3>
200987a8:	8020943a 	slli	r16,r16,16
200987ac:	a00cd43a 	srli	r6,r20,16
200987b0:	1545383a 	mul	r2,r2,r21
200987b4:	8188b03a 	or	r4,r16,r6
200987b8:	2080042e 	bgeu	r4,r2,200987cc <__umoddi3+0xe4>
200987bc:	24c9883a 	add	r4,r4,r19
200987c0:	24c00236 	bltu	r4,r19,200987cc <__umoddi3+0xe4>
200987c4:	2080012e 	bgeu	r4,r2,200987cc <__umoddi3+0xe4>
200987c8:	24c9883a 	add	r4,r4,r19
200987cc:	20a3c83a 	sub	r17,r4,r2
200987d0:	8809883a 	mov	r4,r17
200987d4:	b00b883a 	mov	r5,r22
200987d8:	0088bf80 	call	20088bf8 <__umodsi3>
200987dc:	8809883a 	mov	r4,r17
200987e0:	b00b883a 	mov	r5,r22
200987e4:	1021883a 	mov	r16,r2
200987e8:	0088bf00 	call	20088bf0 <__udivsi3>
200987ec:	8006943a 	slli	r3,r16,16
200987f0:	1545383a 	mul	r2,r2,r21
200987f4:	a13fffcc 	andi	r4,r20,65535
200987f8:	1906b03a 	or	r3,r3,r4
200987fc:	1880532e 	bgeu	r3,r2,2009894c <__umoddi3+0x264>
20098800:	00004e06 	br	2009893c <__umoddi3+0x254>
20098804:	29c05536 	bltu	r5,r7,2009895c <__umoddi3+0x274>
20098808:	00bfffd4 	movui	r2,65535
2009880c:	11c0612e 	bgeu	r2,r7,20098994 <__umoddi3+0x2ac>
20098810:	00804034 	movhi	r2,256
20098814:	10bfffc4 	addi	r2,r2,-1
20098818:	11c0f82e 	bgeu	r2,r7,20098bfc <__umoddi3+0x514>
2009881c:	01400604 	movi	r5,24
20098820:	282b883a 	mov	r21,r5
20098824:	394ad83a 	srl	r5,r7,r5
20098828:	00c00034 	movhi	r3,0
2009882c:	18c19a04 	addi	r3,r3,1640
20098830:	194b883a 	add	r5,r3,r5
20098834:	28800003 	ldbu	r2,0(r5)
20098838:	00c00804 	movi	r3,32
2009883c:	156b883a 	add	r21,r2,r21
20098840:	1d69c83a 	sub	r20,r3,r21
20098844:	a000631e 	bne	r20,zero,200989d4 <__umoddi3+0x2ec>
20098848:	3c400136 	bltu	r7,r17,20098850 <__umoddi3+0x168>
2009884c:	81810436 	bltu	r16,r6,20098c60 <__umoddi3+0x578>
20098850:	8185c83a 	sub	r2,r16,r6
20098854:	89e3c83a 	sub	r17,r17,r7
20098858:	8087803a 	cmpltu	r3,r16,r2
2009885c:	88efc83a 	sub	r23,r17,r3
20098860:	b807883a 	mov	r3,r23
20098864:	00003f06 	br	20098964 <__umoddi3+0x27c>
20098868:	3000041e 	bne	r6,zero,2009887c <__umoddi3+0x194>
2009886c:	01000044 	movi	r4,1
20098870:	000b883a 	mov	r5,zero
20098874:	0088bf00 	call	20088bf0 <__udivsi3>
20098878:	1027883a 	mov	r19,r2
2009887c:	00bfffd4 	movui	r2,65535
20098880:	14c04f2e 	bgeu	r2,r19,200989c0 <__umoddi3+0x2d8>
20098884:	00804034 	movhi	r2,256
20098888:	10bfffc4 	addi	r2,r2,-1
2009888c:	14c0e42e 	bgeu	r2,r19,20098c20 <__umoddi3+0x538>
20098890:	00800604 	movi	r2,24
20098894:	1007883a 	mov	r3,r2
20098898:	9884d83a 	srl	r2,r19,r2
2009889c:	01000034 	movhi	r4,0
200988a0:	21019a04 	addi	r4,r4,1640
200988a4:	2085883a 	add	r2,r4,r2
200988a8:	11000003 	ldbu	r4,0(r2)
200988ac:	00800804 	movi	r2,32
200988b0:	20c7883a 	add	r3,r4,r3
200988b4:	10c5c83a 	sub	r2,r2,r3
200988b8:	10009a1e 	bne	r2,zero,20098b24 <__umoddi3+0x43c>
200988bc:	982cd43a 	srli	r22,r19,16
200988c0:	8ce3c83a 	sub	r17,r17,r19
200988c4:	9c3fffcc 	andi	r16,r19,65535
200988c8:	0025883a 	mov	r18,zero
200988cc:	8809883a 	mov	r4,r17
200988d0:	b00b883a 	mov	r5,r22
200988d4:	0088bf80 	call	20088bf8 <__umodsi3>
200988d8:	8809883a 	mov	r4,r17
200988dc:	b00b883a 	mov	r5,r22
200988e0:	102b883a 	mov	r21,r2
200988e4:	0088bf00 	call	20088bf0 <__udivsi3>
200988e8:	a806943a 	slli	r3,r21,16
200988ec:	a008d43a 	srli	r4,r20,16
200988f0:	1405383a 	mul	r2,r2,r16
200988f4:	190cb03a 	or	r6,r3,r4
200988f8:	3080032e 	bgeu	r6,r2,20098908 <__umoddi3+0x220>
200988fc:	34cd883a 	add	r6,r6,r19
20098900:	34c00136 	bltu	r6,r19,20098908 <__umoddi3+0x220>
20098904:	3080d436 	bltu	r6,r2,20098c58 <__umoddi3+0x570>
20098908:	30abc83a 	sub	r21,r6,r2
2009890c:	a809883a 	mov	r4,r21
20098910:	b00b883a 	mov	r5,r22
20098914:	0088bf80 	call	20088bf8 <__umodsi3>
20098918:	1023883a 	mov	r17,r2
2009891c:	a809883a 	mov	r4,r21
20098920:	b00b883a 	mov	r5,r22
20098924:	0088bf00 	call	20088bf0 <__udivsi3>
20098928:	8822943a 	slli	r17,r17,16
2009892c:	1405383a 	mul	r2,r2,r16
20098930:	a13fffcc 	andi	r4,r20,65535
20098934:	8906b03a 	or	r3,r17,r4
20098938:	1880042e 	bgeu	r3,r2,2009894c <__umoddi3+0x264>
2009893c:	1cc7883a 	add	r3,r3,r19
20098940:	1cc00236 	bltu	r3,r19,2009894c <__umoddi3+0x264>
20098944:	1880012e 	bgeu	r3,r2,2009894c <__umoddi3+0x264>
20098948:	1cc7883a 	add	r3,r3,r19
2009894c:	1887c83a 	sub	r3,r3,r2
20098950:	1c84d83a 	srl	r2,r3,r18
20098954:	0007883a 	mov	r3,zero
20098958:	00000206 	br	20098964 <__umoddi3+0x27c>
2009895c:	2005883a 	mov	r2,r4
20098960:	2807883a 	mov	r3,r5
20098964:	dfc00b17 	ldw	ra,44(sp)
20098968:	df000a17 	ldw	fp,40(sp)
2009896c:	ddc00917 	ldw	r23,36(sp)
20098970:	dd800817 	ldw	r22,32(sp)
20098974:	dd400717 	ldw	r21,28(sp)
20098978:	dd000617 	ldw	r20,24(sp)
2009897c:	dcc00517 	ldw	r19,20(sp)
20098980:	dc800417 	ldw	r18,16(sp)
20098984:	dc400317 	ldw	r17,12(sp)
20098988:	dc000217 	ldw	r16,8(sp)
2009898c:	dec00c04 	addi	sp,sp,48
20098990:	f800283a 	ret
20098994:	00803fc4 	movi	r2,255
20098998:	11c0952e 	bgeu	r2,r7,20098bf0 <__umoddi3+0x508>
2009899c:	01400204 	movi	r5,8
200989a0:	282b883a 	mov	r21,r5
200989a4:	003f9f06 	br	20098824 <__flash_rwdata_start+0xffff9a38>
200989a8:	00804034 	movhi	r2,256
200989ac:	10bfffc4 	addi	r2,r2,-1
200989b0:	1180952e 	bgeu	r2,r6,20098c08 <__umoddi3+0x520>
200989b4:	01400604 	movi	r5,24
200989b8:	2805883a 	mov	r2,r5
200989bc:	003f6206 	br	20098748 <__flash_rwdata_start+0xffff995c>
200989c0:	00803fc4 	movi	r2,255
200989c4:	14c0932e 	bgeu	r2,r19,20098c14 <__umoddi3+0x52c>
200989c8:	00800204 	movi	r2,8
200989cc:	1007883a 	mov	r3,r2
200989d0:	003fb106 	br	20098898 <__flash_rwdata_start+0xffff9aac>
200989d4:	3548d83a 	srl	r4,r6,r21
200989d8:	3d0e983a 	sll	r7,r7,r20
200989dc:	8d10983a 	sll	r8,r17,r20
200989e0:	8d6cd83a 	srl	r22,r17,r21
200989e4:	3922b03a 	or	r17,r7,r4
200989e8:	882ed43a 	srli	r23,r17,16
200989ec:	8564d83a 	srl	r18,r16,r21
200989f0:	b009883a 	mov	r4,r22
200989f4:	b80b883a 	mov	r5,r23
200989f8:	44a4b03a 	or	r18,r8,r18
200989fc:	3526983a 	sll	r19,r6,r20
20098a00:	0088bf80 	call	20088bf8 <__umodsi3>
20098a04:	b009883a 	mov	r4,r22
20098a08:	b80b883a 	mov	r5,r23
20098a0c:	1039883a 	mov	fp,r2
20098a10:	0088bf00 	call	20088bf0 <__udivsi3>
20098a14:	102d883a 	mov	r22,r2
20098a18:	8a3fffcc 	andi	r8,r17,65535
20098a1c:	e004943a 	slli	r2,fp,16
20098a20:	900cd43a 	srli	r6,r18,16
20098a24:	b239383a 	mul	fp,r22,r8
20098a28:	8520983a 	sll	r16,r16,r20
20098a2c:	118ab03a 	or	r5,r2,r6
20098a30:	2f00042e 	bgeu	r5,fp,20098a44 <__umoddi3+0x35c>
20098a34:	2c4b883a 	add	r5,r5,r17
20098a38:	b0bfffc4 	addi	r2,r22,-1
20098a3c:	2c40822e 	bgeu	r5,r17,20098c48 <__umoddi3+0x560>
20098a40:	102d883a 	mov	r22,r2
20098a44:	2f39c83a 	sub	fp,r5,fp
20098a48:	e009883a 	mov	r4,fp
20098a4c:	b80b883a 	mov	r5,r23
20098a50:	da000115 	stw	r8,4(sp)
20098a54:	0088bf80 	call	20088bf8 <__umodsi3>
20098a58:	e009883a 	mov	r4,fp
20098a5c:	b80b883a 	mov	r5,r23
20098a60:	d8800015 	stw	r2,0(sp)
20098a64:	0088bf00 	call	20088bf0 <__udivsi3>
20098a68:	d9800017 	ldw	r6,0(sp)
20098a6c:	da000117 	ldw	r8,4(sp)
20098a70:	94bfffcc 	andi	r18,r18,65535
20098a74:	300c943a 	slli	r6,r6,16
20098a78:	1209383a 	mul	r4,r2,r8
20098a7c:	3490b03a 	or	r8,r6,r18
20098a80:	4100042e 	bgeu	r8,r4,20098a94 <__umoddi3+0x3ac>
20098a84:	4451883a 	add	r8,r8,r17
20098a88:	10ffffc4 	addi	r3,r2,-1
20098a8c:	44406a2e 	bgeu	r8,r17,20098c38 <__umoddi3+0x550>
20098a90:	1805883a 	mov	r2,r3
20098a94:	b012943a 	slli	r9,r22,16
20098a98:	9abfffcc 	andi	r10,r19,65535
20098a9c:	980ed43a 	srli	r7,r19,16
20098aa0:	124ab03a 	or	r5,r2,r9
20098aa4:	2a7fffcc 	andi	r9,r5,65535
20098aa8:	280ad43a 	srli	r5,r5,16
20098aac:	4a8d383a 	mul	r6,r9,r10
20098ab0:	49d3383a 	mul	r9,r9,r7
20098ab4:	2a95383a 	mul	r10,r5,r10
20098ab8:	3004d43a 	srli	r2,r6,16
20098abc:	4111c83a 	sub	r8,r8,r4
20098ac0:	5253883a 	add	r9,r10,r9
20098ac4:	4893883a 	add	r9,r9,r2
20098ac8:	29cb383a 	mul	r5,r5,r7
20098acc:	4a80022e 	bgeu	r9,r10,20098ad8 <__umoddi3+0x3f0>
20098ad0:	00800074 	movhi	r2,1
20098ad4:	288b883a 	add	r5,r5,r2
20098ad8:	4808d43a 	srli	r4,r9,16
20098adc:	4812943a 	slli	r9,r9,16
20098ae0:	31bfffcc 	andi	r6,r6,65535
20098ae4:	290b883a 	add	r5,r5,r4
20098ae8:	498d883a 	add	r6,r9,r6
20098aec:	41403a36 	bltu	r8,r5,20098bd8 <__umoddi3+0x4f0>
20098af0:	41405d26 	beq	r8,r5,20098c68 <__umoddi3+0x580>
20098af4:	4149c83a 	sub	r4,r8,r5
20098af8:	300f883a 	mov	r7,r6
20098afc:	81cfc83a 	sub	r7,r16,r7
20098b00:	81c7803a 	cmpltu	r3,r16,r7
20098b04:	20c7c83a 	sub	r3,r4,r3
20098b08:	1d44983a 	sll	r2,r3,r21
20098b0c:	3d0ed83a 	srl	r7,r7,r20
20098b10:	1d06d83a 	srl	r3,r3,r20
20098b14:	11c4b03a 	or	r2,r2,r7
20098b18:	003f9206 	br	20098964 <__flash_rwdata_start+0xffff9b78>
20098b1c:	0025883a 	mov	r18,zero
20098b20:	003f1806 	br	20098784 <__flash_rwdata_start+0xffff9998>
20098b24:	98a6983a 	sll	r19,r19,r2
20098b28:	88e8d83a 	srl	r20,r17,r3
20098b2c:	80c6d83a 	srl	r3,r16,r3
20098b30:	982cd43a 	srli	r22,r19,16
20098b34:	88a2983a 	sll	r17,r17,r2
20098b38:	a009883a 	mov	r4,r20
20098b3c:	b00b883a 	mov	r5,r22
20098b40:	88eab03a 	or	r21,r17,r3
20098b44:	1025883a 	mov	r18,r2
20098b48:	0088bf80 	call	20088bf8 <__umodsi3>
20098b4c:	a009883a 	mov	r4,r20
20098b50:	b00b883a 	mov	r5,r22
20098b54:	1023883a 	mov	r17,r2
20098b58:	0088bf00 	call	20088bf0 <__udivsi3>
20098b5c:	9f3fffcc 	andi	fp,r19,65535
20098b60:	8822943a 	slli	r17,r17,16
20098b64:	a80ad43a 	srli	r5,r21,16
20098b68:	1705383a 	mul	r2,r2,fp
20098b6c:	84a8983a 	sll	r20,r16,r18
20098b70:	8948b03a 	or	r4,r17,r5
20098b74:	2080042e 	bgeu	r4,r2,20098b88 <__umoddi3+0x4a0>
20098b78:	24c9883a 	add	r4,r4,r19
20098b7c:	24c00236 	bltu	r4,r19,20098b88 <__umoddi3+0x4a0>
20098b80:	2080012e 	bgeu	r4,r2,20098b88 <__umoddi3+0x4a0>
20098b84:	24c9883a 	add	r4,r4,r19
20098b88:	20afc83a 	sub	r23,r4,r2
20098b8c:	b809883a 	mov	r4,r23
20098b90:	b00b883a 	mov	r5,r22
20098b94:	0088bf80 	call	20088bf8 <__umodsi3>
20098b98:	1023883a 	mov	r17,r2
20098b9c:	b809883a 	mov	r4,r23
20098ba0:	b00b883a 	mov	r5,r22
20098ba4:	0088bf00 	call	20088bf0 <__udivsi3>
20098ba8:	8822943a 	slli	r17,r17,16
20098bac:	1705383a 	mul	r2,r2,fp
20098bb0:	a93fffcc 	andi	r4,r21,65535
20098bb4:	8908b03a 	or	r4,r17,r4
20098bb8:	2080042e 	bgeu	r4,r2,20098bcc <__umoddi3+0x4e4>
20098bbc:	24c9883a 	add	r4,r4,r19
20098bc0:	24c00236 	bltu	r4,r19,20098bcc <__umoddi3+0x4e4>
20098bc4:	2080012e 	bgeu	r4,r2,20098bcc <__umoddi3+0x4e4>
20098bc8:	24c9883a 	add	r4,r4,r19
20098bcc:	20a3c83a 	sub	r17,r4,r2
20098bd0:	e021883a 	mov	r16,fp
20098bd4:	003f3d06 	br	200988cc <__flash_rwdata_start+0xffff9ae0>
20098bd8:	34cfc83a 	sub	r7,r6,r19
20098bdc:	2c4bc83a 	sub	r5,r5,r17
20098be0:	31cd803a 	cmpltu	r6,r6,r7
20098be4:	298dc83a 	sub	r6,r5,r6
20098be8:	4189c83a 	sub	r4,r8,r6
20098bec:	003fc306 	br	20098afc <__flash_rwdata_start+0xffff9d10>
20098bf0:	000b883a 	mov	r5,zero
20098bf4:	002b883a 	mov	r21,zero
20098bf8:	003f0a06 	br	20098824 <__flash_rwdata_start+0xffff9a38>
20098bfc:	01400404 	movi	r5,16
20098c00:	282b883a 	mov	r21,r5
20098c04:	003f0706 	br	20098824 <__flash_rwdata_start+0xffff9a38>
20098c08:	01400404 	movi	r5,16
20098c0c:	2805883a 	mov	r2,r5
20098c10:	003ecd06 	br	20098748 <__flash_rwdata_start+0xffff995c>
20098c14:	0005883a 	mov	r2,zero
20098c18:	0007883a 	mov	r3,zero
20098c1c:	003f1e06 	br	20098898 <__flash_rwdata_start+0xffff9aac>
20098c20:	00800404 	movi	r2,16
20098c24:	1007883a 	mov	r3,r2
20098c28:	003f1b06 	br	20098898 <__flash_rwdata_start+0xffff9aac>
20098c2c:	000b883a 	mov	r5,zero
20098c30:	0005883a 	mov	r2,zero
20098c34:	003ec406 	br	20098748 <__flash_rwdata_start+0xffff995c>
20098c38:	413f952e 	bgeu	r8,r4,20098a90 <__flash_rwdata_start+0xffff9ca4>
20098c3c:	10bfff84 	addi	r2,r2,-2
20098c40:	4451883a 	add	r8,r8,r17
20098c44:	003f9306 	br	20098a94 <__flash_rwdata_start+0xffff9ca8>
20098c48:	2f3f7d2e 	bgeu	r5,fp,20098a40 <__flash_rwdata_start+0xffff9c54>
20098c4c:	b5bfff84 	addi	r22,r22,-2
20098c50:	2c4b883a 	add	r5,r5,r17
20098c54:	003f7b06 	br	20098a44 <__flash_rwdata_start+0xffff9c58>
20098c58:	34cd883a 	add	r6,r6,r19
20098c5c:	003f2a06 	br	20098908 <__flash_rwdata_start+0xffff9b1c>
20098c60:	8005883a 	mov	r2,r16
20098c64:	003efe06 	br	20098860 <__flash_rwdata_start+0xffff9a74>
20098c68:	81bfdb36 	bltu	r16,r6,20098bd8 <__flash_rwdata_start+0xffff9dec>
20098c6c:	300f883a 	mov	r7,r6
20098c70:	0009883a 	mov	r4,zero
20098c74:	003fa106 	br	20098afc <__flash_rwdata_start+0xffff9d10>

20098c78 <__eqdf2>:
20098c78:	2804d53a 	srli	r2,r5,20
20098c7c:	3806d53a 	srli	r3,r7,20
20098c80:	02000434 	movhi	r8,16
20098c84:	423fffc4 	addi	r8,r8,-1
20098c88:	1081ffcc 	andi	r2,r2,2047
20098c8c:	0241ffc4 	movi	r9,2047
20098c90:	2a14703a 	and	r10,r5,r8
20098c94:	18c1ffcc 	andi	r3,r3,2047
20098c98:	3a10703a 	and	r8,r7,r8
20098c9c:	280ad7fa 	srli	r5,r5,31
20098ca0:	380ed7fa 	srli	r7,r7,31
20098ca4:	12400f26 	beq	r2,r9,20098ce4 <__eqdf2+0x6c>
20098ca8:	0241ffc4 	movi	r9,2047
20098cac:	1a400326 	beq	r3,r9,20098cbc <__eqdf2+0x44>
20098cb0:	10c00526 	beq	r2,r3,20098cc8 <__eqdf2+0x50>
20098cb4:	00800044 	movi	r2,1
20098cb8:	f800283a 	ret
20098cbc:	4192b03a 	or	r9,r8,r6
20098cc0:	483ffc1e 	bne	r9,zero,20098cb4 <__flash_rwdata_start+0xffff9ec8>
20098cc4:	10fffb1e 	bne	r2,r3,20098cb4 <__flash_rwdata_start+0xffff9ec8>
20098cc8:	523ffa1e 	bne	r10,r8,20098cb4 <__flash_rwdata_start+0xffff9ec8>
20098ccc:	21bff91e 	bne	r4,r6,20098cb4 <__flash_rwdata_start+0xffff9ec8>
20098cd0:	29c00826 	beq	r5,r7,20098cf4 <__eqdf2+0x7c>
20098cd4:	103ff71e 	bne	r2,zero,20098cb4 <__flash_rwdata_start+0xffff9ec8>
20098cd8:	5104b03a 	or	r2,r10,r4
20098cdc:	1004c03a 	cmpne	r2,r2,zero
20098ce0:	f800283a 	ret
20098ce4:	5112b03a 	or	r9,r10,r4
20098ce8:	483fef26 	beq	r9,zero,20098ca8 <__flash_rwdata_start+0xffff9ebc>
20098cec:	00800044 	movi	r2,1
20098cf0:	f800283a 	ret
20098cf4:	0005883a 	mov	r2,zero
20098cf8:	f800283a 	ret

20098cfc <__gedf2>:
20098cfc:	2804d53a 	srli	r2,r5,20
20098d00:	3806d53a 	srli	r3,r7,20
20098d04:	02000434 	movhi	r8,16
20098d08:	423fffc4 	addi	r8,r8,-1
20098d0c:	0241ffc4 	movi	r9,2047
20098d10:	1081ffcc 	andi	r2,r2,2047
20098d14:	2a14703a 	and	r10,r5,r8
20098d18:	1a46703a 	and	r3,r3,r9
20098d1c:	3a10703a 	and	r8,r7,r8
20098d20:	280ad7fa 	srli	r5,r5,31
20098d24:	380ed7fa 	srli	r7,r7,31
20098d28:	12400b26 	beq	r2,r9,20098d58 <__gedf2+0x5c>
20098d2c:	1a401626 	beq	r3,r9,20098d88 <__gedf2+0x8c>
20098d30:	10000c1e 	bne	r2,zero,20098d64 <__gedf2+0x68>
20098d34:	5112b03a 	or	r9,r10,r4
20098d38:	4813003a 	cmpeq	r9,r9,zero
20098d3c:	4817883a 	mov	r11,r9
20098d40:	18000c1e 	bne	r3,zero,20098d74 <__gedf2+0x78>
20098d44:	4198b03a 	or	r12,r8,r6
20098d48:	60000a1e 	bne	r12,zero,20098d74 <__gedf2+0x78>
20098d4c:	48001326 	beq	r9,zero,20098d9c <__gedf2+0xa0>
20098d50:	0005883a 	mov	r2,zero
20098d54:	f800283a 	ret
20098d58:	5112b03a 	or	r9,r10,r4
20098d5c:	4800191e 	bne	r9,zero,20098dc4 <__gedf2+0xc8>
20098d60:	18800926 	beq	r3,r2,20098d88 <__gedf2+0x8c>
20098d64:	18000b1e 	bne	r3,zero,20098d94 <__gedf2+0x98>
20098d68:	4192b03a 	or	r9,r8,r6
20098d6c:	0017883a 	mov	r11,zero
20098d70:	48000a26 	beq	r9,zero,20098d9c <__gedf2+0xa0>
20098d74:	39c03fcc 	andi	r7,r7,255
20098d78:	58000726 	beq	r11,zero,20098d98 <__gedf2+0x9c>
20098d7c:	3800081e 	bne	r7,zero,20098da0 <__gedf2+0xa4>
20098d80:	00bfffc4 	movi	r2,-1
20098d84:	f800283a 	ret
20098d88:	4192b03a 	or	r9,r8,r6
20098d8c:	48000d1e 	bne	r9,zero,20098dc4 <__gedf2+0xc8>
20098d90:	103fe826 	beq	r2,zero,20098d34 <__flash_rwdata_start+0xffff9f48>
20098d94:	39c03fcc 	andi	r7,r7,255
20098d98:	29c00326 	beq	r5,r7,20098da8 <__gedf2+0xac>
20098d9c:	283ff81e 	bne	r5,zero,20098d80 <__flash_rwdata_start+0xffff9f94>
20098da0:	00800044 	movi	r2,1
20098da4:	f800283a 	ret
20098da8:	18bffc16 	blt	r3,r2,20098d9c <__flash_rwdata_start+0xffff9fb0>
20098dac:	10c00316 	blt	r2,r3,20098dbc <__gedf2+0xc0>
20098db0:	42bffa36 	bltu	r8,r10,20098d9c <__flash_rwdata_start+0xffff9fb0>
20098db4:	52000526 	beq	r10,r8,20098dcc <__gedf2+0xd0>
20098db8:	523fe52e 	bgeu	r10,r8,20098d50 <__flash_rwdata_start+0xffff9f64>
20098dbc:	283ff026 	beq	r5,zero,20098d80 <__flash_rwdata_start+0xffff9f94>
20098dc0:	003ff706 	br	20098da0 <__flash_rwdata_start+0xffff9fb4>
20098dc4:	00bfff84 	movi	r2,-2
20098dc8:	f800283a 	ret
20098dcc:	313ff336 	bltu	r6,r4,20098d9c <__flash_rwdata_start+0xffff9fb0>
20098dd0:	21bfdf2e 	bgeu	r4,r6,20098d50 <__flash_rwdata_start+0xffff9f64>
20098dd4:	283fea26 	beq	r5,zero,20098d80 <__flash_rwdata_start+0xffff9f94>
20098dd8:	003ff106 	br	20098da0 <__flash_rwdata_start+0xffff9fb4>

20098ddc <__ledf2>:
20098ddc:	2804d53a 	srli	r2,r5,20
20098de0:	3810d53a 	srli	r8,r7,20
20098de4:	00c00434 	movhi	r3,16
20098de8:	18ffffc4 	addi	r3,r3,-1
20098dec:	0241ffc4 	movi	r9,2047
20098df0:	1081ffcc 	andi	r2,r2,2047
20098df4:	28d4703a 	and	r10,r5,r3
20098df8:	4250703a 	and	r8,r8,r9
20098dfc:	38c6703a 	and	r3,r7,r3
20098e00:	280ad7fa 	srli	r5,r5,31
20098e04:	380ed7fa 	srli	r7,r7,31
20098e08:	12400b26 	beq	r2,r9,20098e38 <__ledf2+0x5c>
20098e0c:	42401926 	beq	r8,r9,20098e74 <__ledf2+0x98>
20098e10:	10000c1e 	bne	r2,zero,20098e44 <__ledf2+0x68>
20098e14:	5112b03a 	or	r9,r10,r4
20098e18:	4813003a 	cmpeq	r9,r9,zero
20098e1c:	4817883a 	mov	r11,r9
20098e20:	40000f26 	beq	r8,zero,20098e60 <__ledf2+0x84>
20098e24:	39c03fcc 	andi	r7,r7,255
20098e28:	58001826 	beq	r11,zero,20098e8c <__ledf2+0xb0>
20098e2c:	38000a1e 	bne	r7,zero,20098e58 <__ledf2+0x7c>
20098e30:	00bfffc4 	movi	r2,-1
20098e34:	f800283a 	ret
20098e38:	5112b03a 	or	r9,r10,r4
20098e3c:	48000f1e 	bne	r9,zero,20098e7c <__ledf2+0xa0>
20098e40:	40800c26 	beq	r8,r2,20098e74 <__ledf2+0x98>
20098e44:	4000101e 	bne	r8,zero,20098e88 <__ledf2+0xac>
20098e48:	1992b03a 	or	r9,r3,r6
20098e4c:	0017883a 	mov	r11,zero
20098e50:	483ff41e 	bne	r9,zero,20098e24 <__flash_rwdata_start+0xffffa038>
20098e54:	283ff61e 	bne	r5,zero,20098e30 <__flash_rwdata_start+0xffffa044>
20098e58:	00800044 	movi	r2,1
20098e5c:	f800283a 	ret
20098e60:	1998b03a 	or	r12,r3,r6
20098e64:	603fef1e 	bne	r12,zero,20098e24 <__flash_rwdata_start+0xffffa038>
20098e68:	483ffa26 	beq	r9,zero,20098e54 <__flash_rwdata_start+0xffffa068>
20098e6c:	0005883a 	mov	r2,zero
20098e70:	f800283a 	ret
20098e74:	1992b03a 	or	r9,r3,r6
20098e78:	48000226 	beq	r9,zero,20098e84 <__ledf2+0xa8>
20098e7c:	00800084 	movi	r2,2
20098e80:	f800283a 	ret
20098e84:	103fe326 	beq	r2,zero,20098e14 <__flash_rwdata_start+0xffffa028>
20098e88:	39c03fcc 	andi	r7,r7,255
20098e8c:	29fff11e 	bne	r5,r7,20098e54 <__flash_rwdata_start+0xffffa068>
20098e90:	40bff016 	blt	r8,r2,20098e54 <__flash_rwdata_start+0xffffa068>
20098e94:	12000316 	blt	r2,r8,20098ea4 <__ledf2+0xc8>
20098e98:	1abfee36 	bltu	r3,r10,20098e54 <__flash_rwdata_start+0xffffa068>
20098e9c:	50c00326 	beq	r10,r3,20098eac <__ledf2+0xd0>
20098ea0:	50fff22e 	bgeu	r10,r3,20098e6c <__flash_rwdata_start+0xffffa080>
20098ea4:	283fe226 	beq	r5,zero,20098e30 <__flash_rwdata_start+0xffffa044>
20098ea8:	003feb06 	br	20098e58 <__flash_rwdata_start+0xffffa06c>
20098eac:	313fe936 	bltu	r6,r4,20098e54 <__flash_rwdata_start+0xffffa068>
20098eb0:	21bfee2e 	bgeu	r4,r6,20098e6c <__flash_rwdata_start+0xffffa080>
20098eb4:	283fde26 	beq	r5,zero,20098e30 <__flash_rwdata_start+0xffffa044>
20098eb8:	003fe706 	br	20098e58 <__flash_rwdata_start+0xffffa06c>

20098ebc <__muldf3>:
20098ebc:	defff204 	addi	sp,sp,-56
20098ec0:	2804d53a 	srli	r2,r5,20
20098ec4:	dd800a15 	stw	r22,40(sp)
20098ec8:	282cd7fa 	srli	r22,r5,31
20098ecc:	dc000415 	stw	r16,16(sp)
20098ed0:	04000434 	movhi	r16,16
20098ed4:	df000c15 	stw	fp,48(sp)
20098ed8:	dd000815 	stw	r20,32(sp)
20098edc:	dcc00715 	stw	r19,28(sp)
20098ee0:	dc800615 	stw	r18,24(sp)
20098ee4:	dc400515 	stw	r17,20(sp)
20098ee8:	843fffc4 	addi	r16,r16,-1
20098eec:	dfc00d15 	stw	ra,52(sp)
20098ef0:	ddc00b15 	stw	r23,44(sp)
20098ef4:	dd400915 	stw	r21,36(sp)
20098ef8:	1501ffcc 	andi	r20,r2,2047
20098efc:	2023883a 	mov	r17,r4
20098f00:	2025883a 	mov	r18,r4
20098f04:	2c20703a 	and	r16,r5,r16
20098f08:	b027883a 	mov	r19,r22
20098f0c:	b7003fcc 	andi	fp,r22,255
20098f10:	a0005926 	beq	r20,zero,20099078 <__muldf3+0x1bc>
20098f14:	0081ffc4 	movi	r2,2047
20098f18:	a0803426 	beq	r20,r2,20098fec <__muldf3+0x130>
20098f1c:	84000434 	orhi	r16,r16,16
20098f20:	2004d77a 	srli	r2,r4,29
20098f24:	802090fa 	slli	r16,r16,3
20098f28:	202490fa 	slli	r18,r4,3
20098f2c:	a53f0044 	addi	r20,r20,-1023
20098f30:	80a0b03a 	or	r16,r16,r2
20098f34:	002b883a 	mov	r21,zero
20098f38:	0015883a 	mov	r10,zero
20098f3c:	3812d53a 	srli	r9,r7,20
20098f40:	3806d7fa 	srli	r3,r7,31
20098f44:	02000434 	movhi	r8,16
20098f48:	423fffc4 	addi	r8,r8,-1
20098f4c:	4941ffcc 	andi	r5,r9,2047
20098f50:	302f883a 	mov	r23,r6
20098f54:	3a22703a 	and	r17,r7,r8
20098f58:	1ac03fcc 	andi	r11,r3,255
20098f5c:	28006226 	beq	r5,zero,200990e8 <__muldf3+0x22c>
20098f60:	0081ffc4 	movi	r2,2047
20098f64:	28805a26 	beq	r5,r2,200990d0 <__muldf3+0x214>
20098f68:	8a000434 	orhi	r8,r17,16
20098f6c:	3004d77a 	srli	r2,r6,29
20098f70:	401090fa 	slli	r8,r8,3
20098f74:	302e90fa 	slli	r23,r6,3
20098f78:	297f0044 	addi	r5,r5,-1023
20098f7c:	40a2b03a 	or	r17,r8,r2
20098f80:	0013883a 	mov	r9,zero
20098f84:	4d4cb03a 	or	r6,r9,r21
20098f88:	300c90ba 	slli	r6,r6,2
20098f8c:	020802b4 	movhi	r8,8202
20098f90:	4223eb04 	addi	r8,r8,-28756
20098f94:	320d883a 	add	r6,r6,r8
20098f98:	31800017 	ldw	r6,0(r6)
20098f9c:	a14b883a 	add	r5,r20,r5
20098fa0:	1dacf03a 	xor	r22,r3,r22
20098fa4:	2b000044 	addi	r12,r5,1
20098fa8:	3000683a 	jmp	r6
20098fac:	200991e8 	cmpgeui	zero,r4,9799
20098fb0:	200991d4 	ori	zero,r4,9799
20098fb4:	200991d4 	ori	zero,r4,9799
20098fb8:	200991c0 	call	2200991c <__flash_rwdata_start+0x1f6ab30>
20098fbc:	20099008 	cmpgei	zero,r4,9792
20098fc0:	20099008 	cmpgei	zero,r4,9792
20098fc4:	200991a8 	cmpgeui	zero,r4,9798
20098fc8:	200991c0 	call	2200991c <__flash_rwdata_start+0x1f6ab30>
20098fcc:	20099008 	cmpgei	zero,r4,9792
20098fd0:	200991a8 	cmpgeui	zero,r4,9798
20098fd4:	20099008 	cmpgei	zero,r4,9792
20098fd8:	200991c0 	call	2200991c <__flash_rwdata_start+0x1f6ab30>
20098fdc:	2009900c 	andi	zero,r4,9792
20098fe0:	2009900c 	andi	zero,r4,9792
20098fe4:	2009900c 	andi	zero,r4,9792
20098fe8:	200993e4 	muli	zero,r4,9807
20098fec:	8104b03a 	or	r2,r16,r4
20098ff0:	10006a1e 	bne	r2,zero,2009919c <__muldf3+0x2e0>
20098ff4:	05400204 	movi	r21,8
20098ff8:	0021883a 	mov	r16,zero
20098ffc:	0025883a 	mov	r18,zero
20099000:	02800084 	movi	r10,2
20099004:	003fcd06 	br	20098f3c <__flash_rwdata_start+0xffffa150>
20099008:	b039883a 	mov	fp,r22
2009900c:	00800084 	movi	r2,2
20099010:	50804e1e 	bne	r10,r2,2009914c <__muldf3+0x290>
20099014:	e4c0004c 	andi	r19,fp,1
20099018:	0101ffc4 	movi	r4,2047
2009901c:	0021883a 	mov	r16,zero
20099020:	0025883a 	mov	r18,zero
20099024:	2008953a 	slli	r4,r4,20
20099028:	98c03fcc 	andi	r3,r19,255
2009902c:	01400434 	movhi	r5,16
20099030:	297fffc4 	addi	r5,r5,-1
20099034:	180697fa 	slli	r3,r3,31
20099038:	8160703a 	and	r16,r16,r5
2009903c:	8120b03a 	or	r16,r16,r4
20099040:	80c6b03a 	or	r3,r16,r3
20099044:	9005883a 	mov	r2,r18
20099048:	dfc00d17 	ldw	ra,52(sp)
2009904c:	df000c17 	ldw	fp,48(sp)
20099050:	ddc00b17 	ldw	r23,44(sp)
20099054:	dd800a17 	ldw	r22,40(sp)
20099058:	dd400917 	ldw	r21,36(sp)
2009905c:	dd000817 	ldw	r20,32(sp)
20099060:	dcc00717 	ldw	r19,28(sp)
20099064:	dc800617 	ldw	r18,24(sp)
20099068:	dc400517 	ldw	r17,20(sp)
2009906c:	dc000417 	ldw	r16,16(sp)
20099070:	dec00e04 	addi	sp,sp,56
20099074:	f800283a 	ret
20099078:	8104b03a 	or	r2,r16,r4
2009907c:	10004226 	beq	r2,zero,20099188 <__muldf3+0x2cc>
20099080:	8000f926 	beq	r16,zero,20099468 <__muldf3+0x5ac>
20099084:	8009883a 	mov	r4,r16
20099088:	d9800315 	stw	r6,12(sp)
2009908c:	d9c00015 	stw	r7,0(sp)
20099090:	008b4600 	call	2008b460 <__clzsi2>
20099094:	d9800317 	ldw	r6,12(sp)
20099098:	d9c00017 	ldw	r7,0(sp)
2009909c:	1007883a 	mov	r3,r2
200990a0:	01000a04 	movi	r4,40
200990a4:	18bffe04 	addi	r2,r3,-8
200990a8:	20c9c83a 	sub	r4,r4,r3
200990ac:	80a0983a 	sll	r16,r16,r2
200990b0:	8908d83a 	srl	r4,r17,r4
200990b4:	88a4983a 	sll	r18,r17,r2
200990b8:	2420b03a 	or	r16,r4,r16
200990bc:	017f0344 	movi	r5,-1011
200990c0:	28e9c83a 	sub	r20,r5,r3
200990c4:	002b883a 	mov	r21,zero
200990c8:	0015883a 	mov	r10,zero
200990cc:	003f9b06 	br	20098f3c <__flash_rwdata_start+0xffffa150>
200990d0:	8984b03a 	or	r2,r17,r6
200990d4:	10002a1e 	bne	r2,zero,20099180 <__muldf3+0x2c4>
200990d8:	0023883a 	mov	r17,zero
200990dc:	002f883a 	mov	r23,zero
200990e0:	02400084 	movi	r9,2
200990e4:	003fa706 	br	20098f84 <__flash_rwdata_start+0xffffa198>
200990e8:	8984b03a 	or	r2,r17,r6
200990ec:	10002026 	beq	r2,zero,20099170 <__muldf3+0x2b4>
200990f0:	8800cc26 	beq	r17,zero,20099424 <__muldf3+0x568>
200990f4:	8809883a 	mov	r4,r17
200990f8:	d8c00215 	stw	r3,8(sp)
200990fc:	d9800315 	stw	r6,12(sp)
20099100:	da800015 	stw	r10,0(sp)
20099104:	dac00115 	stw	r11,4(sp)
20099108:	008b4600 	call	2008b460 <__clzsi2>
2009910c:	d8c00217 	ldw	r3,8(sp)
20099110:	d9800317 	ldw	r6,12(sp)
20099114:	da800017 	ldw	r10,0(sp)
20099118:	dac00117 	ldw	r11,4(sp)
2009911c:	1009883a 	mov	r4,r2
20099120:	01400a04 	movi	r5,40
20099124:	25fffe04 	addi	r23,r4,-8
20099128:	290bc83a 	sub	r5,r5,r4
2009912c:	8dd0983a 	sll	r8,r17,r23
20099130:	314ad83a 	srl	r5,r6,r5
20099134:	35ee983a 	sll	r23,r6,r23
20099138:	2a22b03a 	or	r17,r5,r8
2009913c:	017f0344 	movi	r5,-1011
20099140:	290bc83a 	sub	r5,r5,r4
20099144:	0013883a 	mov	r9,zero
20099148:	003f8e06 	br	20098f84 <__flash_rwdata_start+0xffffa198>
2009914c:	008000c4 	movi	r2,3
20099150:	50811d26 	beq	r10,r2,200995c8 <__muldf3+0x70c>
20099154:	00800044 	movi	r2,1
20099158:	5080e01e 	bne	r10,r2,200994dc <__muldf3+0x620>
2009915c:	e0a6703a 	and	r19,fp,r2
20099160:	0009883a 	mov	r4,zero
20099164:	0021883a 	mov	r16,zero
20099168:	0025883a 	mov	r18,zero
2009916c:	003fad06 	br	20099024 <__flash_rwdata_start+0xffffa238>
20099170:	0023883a 	mov	r17,zero
20099174:	002f883a 	mov	r23,zero
20099178:	02400044 	movi	r9,1
2009917c:	003f8106 	br	20098f84 <__flash_rwdata_start+0xffffa198>
20099180:	024000c4 	movi	r9,3
20099184:	003f7f06 	br	20098f84 <__flash_rwdata_start+0xffffa198>
20099188:	05400104 	movi	r21,4
2009918c:	0021883a 	mov	r16,zero
20099190:	0025883a 	mov	r18,zero
20099194:	02800044 	movi	r10,1
20099198:	003f6806 	br	20098f3c <__flash_rwdata_start+0xffffa150>
2009919c:	05400304 	movi	r21,12
200991a0:	028000c4 	movi	r10,3
200991a4:	003f6506 	br	20098f3c <__flash_rwdata_start+0xffffa150>
200991a8:	04000434 	movhi	r16,16
200991ac:	0027883a 	mov	r19,zero
200991b0:	843fffc4 	addi	r16,r16,-1
200991b4:	04bfffc4 	movi	r18,-1
200991b8:	0101ffc4 	movi	r4,2047
200991bc:	003f9906 	br	20099024 <__flash_rwdata_start+0xffffa238>
200991c0:	8821883a 	mov	r16,r17
200991c4:	b825883a 	mov	r18,r23
200991c8:	5839883a 	mov	fp,r11
200991cc:	4815883a 	mov	r10,r9
200991d0:	003f8e06 	br	2009900c <__flash_rwdata_start+0xffffa220>
200991d4:	8821883a 	mov	r16,r17
200991d8:	b825883a 	mov	r18,r23
200991dc:	b039883a 	mov	fp,r22
200991e0:	4815883a 	mov	r10,r9
200991e4:	003f8906 	br	2009900c <__flash_rwdata_start+0xffffa220>
200991e8:	b80cd43a 	srli	r6,r23,16
200991ec:	9006d43a 	srli	r3,r18,16
200991f0:	90bfffcc 	andi	r2,r18,65535
200991f4:	bdffffcc 	andi	r23,r23,65535
200991f8:	b891383a 	mul	r8,r23,r2
200991fc:	b8c9383a 	mul	r4,r23,r3
20099200:	309b383a 	mul	r13,r6,r2
20099204:	400ed43a 	srli	r7,r8,16
20099208:	30df383a 	mul	r15,r6,r3
2009920c:	235b883a 	add	r13,r4,r13
20099210:	69db883a 	add	r13,r13,r7
20099214:	6900022e 	bgeu	r13,r4,20099220 <__muldf3+0x364>
20099218:	01000074 	movhi	r4,1
2009921c:	791f883a 	add	r15,r15,r4
20099220:	8828d43a 	srli	r20,r17,16
20099224:	8c7fffcc 	andi	r17,r17,65535
20099228:	888f383a 	mul	r7,r17,r2
2009922c:	88d3383a 	mul	r9,r17,r3
20099230:	a0a5383a 	mul	r18,r20,r2
20099234:	3816d43a 	srli	r11,r7,16
20099238:	6814943a 	slli	r10,r13,16
2009923c:	4ca5883a 	add	r18,r9,r18
20099240:	423fffcc 	andi	r8,r8,65535
20099244:	92e5883a 	add	r18,r18,r11
20099248:	6808d43a 	srli	r4,r13,16
2009924c:	5215883a 	add	r10,r10,r8
20099250:	a0c7383a 	mul	r3,r20,r3
20099254:	9240022e 	bgeu	r18,r9,20099260 <__muldf3+0x3a4>
20099258:	00800074 	movhi	r2,1
2009925c:	1887883a 	add	r3,r3,r2
20099260:	802ad43a 	srli	r21,r16,16
20099264:	80bfffcc 	andi	r2,r16,65535
20099268:	b893383a 	mul	r9,r23,r2
2009926c:	3091383a 	mul	r8,r6,r2
20099270:	bd6f383a 	mul	r23,r23,r21
20099274:	9026943a 	slli	r19,r18,16
20099278:	481ad43a 	srli	r13,r9,16
2009927c:	9024d43a 	srli	r18,r18,16
20099280:	39ffffcc 	andi	r7,r7,65535
20099284:	ba11883a 	add	r8,r23,r8
20099288:	99e7883a 	add	r19,r19,r7
2009928c:	4351883a 	add	r8,r8,r13
20099290:	1c97883a 	add	r11,r3,r18
20099294:	354d383a 	mul	r6,r6,r21
20099298:	9925883a 	add	r18,r19,r4
2009929c:	45c0022e 	bgeu	r8,r23,200992a8 <__muldf3+0x3ec>
200992a0:	00c00074 	movhi	r3,1
200992a4:	30cd883a 	add	r6,r6,r3
200992a8:	8889383a 	mul	r4,r17,r2
200992ac:	8d63383a 	mul	r17,r17,r21
200992b0:	a085383a 	mul	r2,r20,r2
200992b4:	200ed43a 	srli	r7,r4,16
200992b8:	401cd43a 	srli	r14,r8,16
200992bc:	401a943a 	slli	r13,r8,16
200992c0:	8885883a 	add	r2,r17,r2
200992c4:	4a3fffcc 	andi	r8,r9,65535
200992c8:	11c5883a 	add	r2,r2,r7
200992cc:	339d883a 	add	r14,r6,r14
200992d0:	6a11883a 	add	r8,r13,r8
200992d4:	a561383a 	mul	r16,r20,r21
200992d8:	1440022e 	bgeu	r2,r17,200992e4 <__muldf3+0x428>
200992dc:	00c00074 	movhi	r3,1
200992e0:	80e1883a 	add	r16,r16,r3
200992e4:	1006943a 	slli	r3,r2,16
200992e8:	213fffcc 	andi	r4,r4,65535
200992ec:	93db883a 	add	r13,r18,r15
200992f0:	1909883a 	add	r4,r3,r4
200992f4:	22c7883a 	add	r3,r4,r11
200992f8:	6cd3803a 	cmpltu	r9,r13,r19
200992fc:	6a09883a 	add	r4,r13,r8
20099300:	1a5b883a 	add	r13,r3,r9
20099304:	2211803a 	cmpltu	r8,r4,r8
20099308:	734d883a 	add	r6,r14,r13
2009930c:	100ed43a 	srli	r7,r2,16
20099310:	6a53803a 	cmpltu	r9,r13,r9
20099314:	3205883a 	add	r2,r6,r8
20099318:	1ac7803a 	cmpltu	r3,r3,r11
2009931c:	1211803a 	cmpltu	r8,r2,r8
20099320:	48c6b03a 	or	r3,r9,r3
20099324:	338d803a 	cmpltu	r6,r6,r14
20099328:	19c7883a 	add	r3,r3,r7
2009932c:	418cb03a 	or	r6,r8,r6
20099330:	1987883a 	add	r3,r3,r6
20099334:	2024927a 	slli	r18,r4,9
20099338:	1c07883a 	add	r3,r3,r16
2009933c:	1806927a 	slli	r3,r3,9
20099340:	1020d5fa 	srli	r16,r2,23
20099344:	2008d5fa 	srli	r4,r4,23
20099348:	9294b03a 	or	r10,r18,r10
2009934c:	1004927a 	slli	r2,r2,9
20099350:	5024c03a 	cmpne	r18,r10,zero
20099354:	1c20b03a 	or	r16,r3,r16
20099358:	9108b03a 	or	r4,r18,r4
2009935c:	80c0402c 	andhi	r3,r16,256
20099360:	20a4b03a 	or	r18,r4,r2
20099364:	18000726 	beq	r3,zero,20099384 <__muldf3+0x4c8>
20099368:	9006d07a 	srli	r3,r18,1
2009936c:	800897fa 	slli	r4,r16,31
20099370:	9080004c 	andi	r2,r18,1
20099374:	8020d07a 	srli	r16,r16,1
20099378:	10c4b03a 	or	r2,r2,r3
2009937c:	1124b03a 	or	r18,r2,r4
20099380:	600b883a 	mov	r5,r12
20099384:	2900ffc4 	addi	r4,r5,1023
20099388:	01004b0e 	bge	zero,r4,200994b8 <__muldf3+0x5fc>
2009938c:	908001cc 	andi	r2,r18,7
20099390:	10000726 	beq	r2,zero,200993b0 <__muldf3+0x4f4>
20099394:	90c003cc 	andi	r3,r18,15
20099398:	00800104 	movi	r2,4
2009939c:	18800426 	beq	r3,r2,200993b0 <__muldf3+0x4f4>
200993a0:	9087883a 	add	r3,r18,r2
200993a4:	1c85803a 	cmpltu	r2,r3,r18
200993a8:	80a1883a 	add	r16,r16,r2
200993ac:	1825883a 	mov	r18,r3
200993b0:	8080402c 	andhi	r2,r16,256
200993b4:	10000426 	beq	r2,zero,200993c8 <__muldf3+0x50c>
200993b8:	00bfc034 	movhi	r2,65280
200993bc:	10bfffc4 	addi	r2,r2,-1
200993c0:	29010004 	addi	r4,r5,1024
200993c4:	80a0703a 	and	r16,r16,r2
200993c8:	0081ff84 	movi	r2,2046
200993cc:	1100320e 	bge	r2,r4,20099498 <__muldf3+0x5dc>
200993d0:	b4c0004c 	andi	r19,r22,1
200993d4:	0101ffc4 	movi	r4,2047
200993d8:	0021883a 	mov	r16,zero
200993dc:	0025883a 	mov	r18,zero
200993e0:	003f1006 	br	20099024 <__flash_rwdata_start+0xffffa238>
200993e4:	8080022c 	andhi	r2,r16,8
200993e8:	10000926 	beq	r2,zero,20099410 <__muldf3+0x554>
200993ec:	8880022c 	andhi	r2,r17,8
200993f0:	1000071e 	bne	r2,zero,20099410 <__muldf3+0x554>
200993f4:	00800434 	movhi	r2,16
200993f8:	8c000234 	orhi	r16,r17,8
200993fc:	10bfffc4 	addi	r2,r2,-1
20099400:	1827883a 	mov	r19,r3
20099404:	80a0703a 	and	r16,r16,r2
20099408:	b825883a 	mov	r18,r23
2009940c:	003f6a06 	br	200991b8 <__flash_rwdata_start+0xffffa3cc>
20099410:	00800434 	movhi	r2,16
20099414:	84000234 	orhi	r16,r16,8
20099418:	10bfffc4 	addi	r2,r2,-1
2009941c:	80a0703a 	and	r16,r16,r2
20099420:	003f6506 	br	200991b8 <__flash_rwdata_start+0xffffa3cc>
20099424:	3009883a 	mov	r4,r6
20099428:	d8c00215 	stw	r3,8(sp)
2009942c:	d9800315 	stw	r6,12(sp)
20099430:	da800015 	stw	r10,0(sp)
20099434:	dac00115 	stw	r11,4(sp)
20099438:	008b4600 	call	2008b460 <__clzsi2>
2009943c:	11000804 	addi	r4,r2,32
20099440:	014009c4 	movi	r5,39
20099444:	d8c00217 	ldw	r3,8(sp)
20099448:	d9800317 	ldw	r6,12(sp)
2009944c:	da800017 	ldw	r10,0(sp)
20099450:	dac00117 	ldw	r11,4(sp)
20099454:	293f320e 	bge	r5,r4,20099120 <__flash_rwdata_start+0xffffa334>
20099458:	10bffe04 	addi	r2,r2,-8
2009945c:	b8a2983a 	sll	r17,r23,r2
20099460:	002f883a 	mov	r23,zero
20099464:	003f3506 	br	2009913c <__flash_rwdata_start+0xffffa350>
20099468:	d9800315 	stw	r6,12(sp)
2009946c:	d9c00015 	stw	r7,0(sp)
20099470:	008b4600 	call	2008b460 <__clzsi2>
20099474:	10c00804 	addi	r3,r2,32
20099478:	010009c4 	movi	r4,39
2009947c:	d9800317 	ldw	r6,12(sp)
20099480:	d9c00017 	ldw	r7,0(sp)
20099484:	20ff060e 	bge	r4,r3,200990a0 <__flash_rwdata_start+0xffffa2b4>
20099488:	10bffe04 	addi	r2,r2,-8
2009948c:	88a0983a 	sll	r16,r17,r2
20099490:	0025883a 	mov	r18,zero
20099494:	003f0906 	br	200990bc <__flash_rwdata_start+0xffffa2d0>
20099498:	9004d0fa 	srli	r2,r18,3
2009949c:	8024977a 	slli	r18,r16,29
200994a0:	8020927a 	slli	r16,r16,9
200994a4:	2101ffcc 	andi	r4,r4,2047
200994a8:	90a4b03a 	or	r18,r18,r2
200994ac:	8020d33a 	srli	r16,r16,12
200994b0:	b4c0004c 	andi	r19,r22,1
200994b4:	003edb06 	br	20099024 <__flash_rwdata_start+0xffffa238>
200994b8:	00ff0084 	movi	r3,-1022
200994bc:	1947c83a 	sub	r3,r3,r5
200994c0:	00800e04 	movi	r2,56
200994c4:	10c0080e 	bge	r2,r3,200994e8 <__muldf3+0x62c>
200994c8:	b4c0004c 	andi	r19,r22,1
200994cc:	0009883a 	mov	r4,zero
200994d0:	0021883a 	mov	r16,zero
200994d4:	0025883a 	mov	r18,zero
200994d8:	003ed206 	br	20099024 <__flash_rwdata_start+0xffffa238>
200994dc:	600b883a 	mov	r5,r12
200994e0:	e02d883a 	mov	r22,fp
200994e4:	003fa706 	br	20099384 <__flash_rwdata_start+0xffffa598>
200994e8:	008007c4 	movi	r2,31
200994ec:	10c01816 	blt	r2,r3,20099550 <__muldf3+0x694>
200994f0:	29410784 	addi	r5,r5,1054
200994f4:	8144983a 	sll	r2,r16,r5
200994f8:	90c8d83a 	srl	r4,r18,r3
200994fc:	914a983a 	sll	r5,r18,r5
20099500:	80c6d83a 	srl	r3,r16,r3
20099504:	2088b03a 	or	r4,r4,r2
20099508:	2804c03a 	cmpne	r2,r5,zero
2009950c:	2084b03a 	or	r2,r4,r2
20099510:	110001cc 	andi	r4,r2,7
20099514:	20000726 	beq	r4,zero,20099534 <__muldf3+0x678>
20099518:	114003cc 	andi	r5,r2,15
2009951c:	01000104 	movi	r4,4
20099520:	29000426 	beq	r5,r4,20099534 <__muldf3+0x678>
20099524:	11000104 	addi	r4,r2,4
20099528:	2085803a 	cmpltu	r2,r4,r2
2009952c:	1887883a 	add	r3,r3,r2
20099530:	2005883a 	mov	r2,r4
20099534:	1900202c 	andhi	r4,r3,128
20099538:	20001826 	beq	r4,zero,2009959c <__muldf3+0x6e0>
2009953c:	b4c0004c 	andi	r19,r22,1
20099540:	01000044 	movi	r4,1
20099544:	0021883a 	mov	r16,zero
20099548:	0025883a 	mov	r18,zero
2009954c:	003eb506 	br	20099024 <__flash_rwdata_start+0xffffa238>
20099550:	00bef884 	movi	r2,-1054
20099554:	1145c83a 	sub	r2,r2,r5
20099558:	8088d83a 	srl	r4,r16,r2
2009955c:	00800804 	movi	r2,32
20099560:	18801726 	beq	r3,r2,200995c0 <__muldf3+0x704>
20099564:	28810f84 	addi	r2,r5,1086
20099568:	8084983a 	sll	r2,r16,r2
2009956c:	1484b03a 	or	r2,r2,r18
20099570:	1004c03a 	cmpne	r2,r2,zero
20099574:	1104b03a 	or	r2,r2,r4
20099578:	10c001cc 	andi	r3,r2,7
2009957c:	18000b1e 	bne	r3,zero,200995ac <__muldf3+0x6f0>
20099580:	0021883a 	mov	r16,zero
20099584:	1004d0fa 	srli	r2,r2,3
20099588:	b4c0004c 	andi	r19,r22,1
2009958c:	0009883a 	mov	r4,zero
20099590:	10e4b03a 	or	r18,r2,r3
20099594:	003ea306 	br	20099024 <__flash_rwdata_start+0xffffa238>
20099598:	0007883a 	mov	r3,zero
2009959c:	1820927a 	slli	r16,r3,9
200995a0:	1806977a 	slli	r3,r3,29
200995a4:	8020d33a 	srli	r16,r16,12
200995a8:	003ff606 	br	20099584 <__flash_rwdata_start+0xffffa798>
200995ac:	110003cc 	andi	r4,r2,15
200995b0:	00c00104 	movi	r3,4
200995b4:	20fff826 	beq	r4,r3,20099598 <__flash_rwdata_start+0xffffa7ac>
200995b8:	0007883a 	mov	r3,zero
200995bc:	003fd906 	br	20099524 <__flash_rwdata_start+0xffffa738>
200995c0:	0005883a 	mov	r2,zero
200995c4:	003fe906 	br	2009956c <__flash_rwdata_start+0xffffa780>
200995c8:	00800434 	movhi	r2,16
200995cc:	84000234 	orhi	r16,r16,8
200995d0:	10bfffc4 	addi	r2,r2,-1
200995d4:	e4c0004c 	andi	r19,fp,1
200995d8:	80a0703a 	and	r16,r16,r2
200995dc:	003ef606 	br	200991b8 <__flash_rwdata_start+0xffffa3cc>

200995e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200995e0:	defffe04 	addi	sp,sp,-8
200995e4:	dfc00115 	stw	ra,4(sp)
200995e8:	df000015 	stw	fp,0(sp)
200995ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200995f0:	00800034 	movhi	r2,0
200995f4:	108a7b04 	addi	r2,r2,10732
200995f8:	10800017 	ldw	r2,0(r2)
200995fc:	10000526 	beq	r2,zero,20099614 <alt_get_errno+0x34>
20099600:	00800034 	movhi	r2,0
20099604:	108a7b04 	addi	r2,r2,10732
20099608:	10800017 	ldw	r2,0(r2)
2009960c:	103ee83a 	callr	r2
20099610:	00000206 	br	2009961c <alt_get_errno+0x3c>
20099614:	00800034 	movhi	r2,0
20099618:	108a9404 	addi	r2,r2,10832
}
2009961c:	e037883a 	mov	sp,fp
20099620:	dfc00117 	ldw	ra,4(sp)
20099624:	df000017 	ldw	fp,0(sp)
20099628:	dec00204 	addi	sp,sp,8
2009962c:	f800283a 	ret

20099630 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
20099630:	defffb04 	addi	sp,sp,-20
20099634:	dfc00415 	stw	ra,16(sp)
20099638:	df000315 	stw	fp,12(sp)
2009963c:	df000304 	addi	fp,sp,12
20099640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
20099644:	e0bfff17 	ldw	r2,-4(fp)
20099648:	10000616 	blt	r2,zero,20099664 <close+0x34>
2009964c:	e0bfff17 	ldw	r2,-4(fp)
20099650:	10c00324 	muli	r3,r2,12
20099654:	00800034 	movhi	r2,0
20099658:	1085ad04 	addi	r2,r2,5812
2009965c:	1885883a 	add	r2,r3,r2
20099660:	00000106 	br	20099668 <close+0x38>
20099664:	0005883a 	mov	r2,zero
20099668:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
2009966c:	e0bffd17 	ldw	r2,-12(fp)
20099670:	10001926 	beq	r2,zero,200996d8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
20099674:	e0bffd17 	ldw	r2,-12(fp)
20099678:	10800017 	ldw	r2,0(r2)
2009967c:	10800417 	ldw	r2,16(r2)
20099680:	10000626 	beq	r2,zero,2009969c <close+0x6c>
20099684:	e0bffd17 	ldw	r2,-12(fp)
20099688:	10800017 	ldw	r2,0(r2)
2009968c:	10800417 	ldw	r2,16(r2)
20099690:	e13ffd17 	ldw	r4,-12(fp)
20099694:	103ee83a 	callr	r2
20099698:	00000106 	br	200996a0 <close+0x70>
2009969c:	0005883a 	mov	r2,zero
200996a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
200996a4:	e13fff17 	ldw	r4,-4(fp)
200996a8:	0099fc80 	call	20099fc8 <alt_release_fd>
    if (rval < 0)
200996ac:	e0bffe17 	ldw	r2,-8(fp)
200996b0:	1000070e 	bge	r2,zero,200996d0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
200996b4:	00995e00 	call	200995e0 <alt_get_errno>
200996b8:	1007883a 	mov	r3,r2
200996bc:	e0bffe17 	ldw	r2,-8(fp)
200996c0:	0085c83a 	sub	r2,zero,r2
200996c4:	18800015 	stw	r2,0(r3)
      return -1;
200996c8:	00bfffc4 	movi	r2,-1
200996cc:	00000706 	br	200996ec <close+0xbc>
    }
    return 0;
200996d0:	0005883a 	mov	r2,zero
200996d4:	00000506 	br	200996ec <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
200996d8:	00995e00 	call	200995e0 <alt_get_errno>
200996dc:	1007883a 	mov	r3,r2
200996e0:	00801444 	movi	r2,81
200996e4:	18800015 	stw	r2,0(r3)
    return -1;
200996e8:	00bfffc4 	movi	r2,-1
  }
}
200996ec:	e037883a 	mov	sp,fp
200996f0:	dfc00117 	ldw	ra,4(sp)
200996f4:	df000017 	ldw	fp,0(sp)
200996f8:	dec00204 	addi	sp,sp,8
200996fc:	f800283a 	ret

20099700 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
20099700:	defffb04 	addi	sp,sp,-20
20099704:	df000415 	stw	fp,16(sp)
20099708:	df000404 	addi	fp,sp,16
2009970c:	e13ffe15 	stw	r4,-8(fp)
20099710:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
20099714:	e0fffe17 	ldw	r3,-8(fp)
20099718:	e0bfff17 	ldw	r2,-4(fp)
2009971c:	1885883a 	add	r2,r3,r2
20099720:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
20099724:	e0bffe17 	ldw	r2,-8(fp)
20099728:	e0bffc15 	stw	r2,-16(fp)
2009972c:	00000506 	br	20099744 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
20099730:	e0bffc17 	ldw	r2,-16(fp)
20099734:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
20099738:	e0bffc17 	ldw	r2,-16(fp)
2009973c:	10800804 	addi	r2,r2,32
20099740:	e0bffc15 	stw	r2,-16(fp)
20099744:	e0fffc17 	ldw	r3,-16(fp)
20099748:	e0bffd17 	ldw	r2,-12(fp)
2009974c:	18bff836 	bltu	r3,r2,20099730 <__flash_rwdata_start+0xffffa944>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
20099750:	e0bffe17 	ldw	r2,-8(fp)
20099754:	108007cc 	andi	r2,r2,31
20099758:	10000226 	beq	r2,zero,20099764 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
2009975c:	e0bffc17 	ldw	r2,-16(fp)
20099760:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
20099764:	e037883a 	mov	sp,fp
20099768:	df000017 	ldw	fp,0(sp)
2009976c:	dec00104 	addi	sp,sp,4
20099770:	f800283a 	ret

20099774 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
20099774:	defffe04 	addi	sp,sp,-8
20099778:	df000115 	stw	fp,4(sp)
2009977c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20099780:	e03fff15 	stw	zero,-4(fp)
20099784:	00000506 	br	2009979c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
20099788:	e0bfff17 	ldw	r2,-4(fp)
2009978c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20099790:	e0bfff17 	ldw	r2,-4(fp)
20099794:	10800804 	addi	r2,r2,32
20099798:	e0bfff15 	stw	r2,-4(fp)
2009979c:	e0bfff17 	ldw	r2,-4(fp)
200997a0:	10900030 	cmpltui	r2,r2,16384
200997a4:	103ff81e 	bne	r2,zero,20099788 <__flash_rwdata_start+0xffffa99c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
200997a8:	e037883a 	mov	sp,fp
200997ac:	df000017 	ldw	fp,0(sp)
200997b0:	dec00104 	addi	sp,sp,4
200997b4:	f800283a 	ret

200997b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
200997b8:	defffc04 	addi	sp,sp,-16
200997bc:	df000315 	stw	fp,12(sp)
200997c0:	df000304 	addi	fp,sp,12
200997c4:	e13ffd15 	stw	r4,-12(fp)
200997c8:	e17ffe15 	stw	r5,-8(fp)
200997cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
200997d0:	e0bfff17 	ldw	r2,-4(fp)
}
200997d4:	e037883a 	mov	sp,fp
200997d8:	df000017 	ldw	fp,0(sp)
200997dc:	dec00104 	addi	sp,sp,4
200997e0:	f800283a 	ret

200997e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
200997e4:	defffd04 	addi	sp,sp,-12
200997e8:	df000215 	stw	fp,8(sp)
200997ec:	df000204 	addi	fp,sp,8
200997f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
200997f4:	0001883a 	nop
200997f8:	e0bfff17 	ldw	r2,-4(fp)
200997fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20099800:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20099804:	10000226 	beq	r2,zero,20099810 <_exit+0x2c>
    ALT_SIM_FAIL();
20099808:	002af070 	cmpltui	zero,zero,43969
2009980c:	00000106 	br	20099814 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20099810:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20099814:	003fff06 	br	20099814 <__flash_rwdata_start+0xffffaa28>

20099818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099818:	defffe04 	addi	sp,sp,-8
2009981c:	dfc00115 	stw	ra,4(sp)
20099820:	df000015 	stw	fp,0(sp)
20099824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099828:	00800034 	movhi	r2,0
2009982c:	108a7b04 	addi	r2,r2,10732
20099830:	10800017 	ldw	r2,0(r2)
20099834:	10000526 	beq	r2,zero,2009984c <alt_get_errno+0x34>
20099838:	00800034 	movhi	r2,0
2009983c:	108a7b04 	addi	r2,r2,10732
20099840:	10800017 	ldw	r2,0(r2)
20099844:	103ee83a 	callr	r2
20099848:	00000206 	br	20099854 <alt_get_errno+0x3c>
2009984c:	00800034 	movhi	r2,0
20099850:	108a9404 	addi	r2,r2,10832
}
20099854:	e037883a 	mov	sp,fp
20099858:	dfc00117 	ldw	ra,4(sp)
2009985c:	df000017 	ldw	fp,0(sp)
20099860:	dec00204 	addi	sp,sp,8
20099864:	f800283a 	ret

20099868 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
20099868:	defffb04 	addi	sp,sp,-20
2009986c:	dfc00415 	stw	ra,16(sp)
20099870:	df000315 	stw	fp,12(sp)
20099874:	df000304 	addi	fp,sp,12
20099878:	e13ffe15 	stw	r4,-8(fp)
2009987c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099880:	e0bffe17 	ldw	r2,-8(fp)
20099884:	10000616 	blt	r2,zero,200998a0 <fstat+0x38>
20099888:	e0bffe17 	ldw	r2,-8(fp)
2009988c:	10c00324 	muli	r3,r2,12
20099890:	00800034 	movhi	r2,0
20099894:	1085ad04 	addi	r2,r2,5812
20099898:	1885883a 	add	r2,r3,r2
2009989c:	00000106 	br	200998a4 <fstat+0x3c>
200998a0:	0005883a 	mov	r2,zero
200998a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
200998a8:	e0bffd17 	ldw	r2,-12(fp)
200998ac:	10001026 	beq	r2,zero,200998f0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
200998b0:	e0bffd17 	ldw	r2,-12(fp)
200998b4:	10800017 	ldw	r2,0(r2)
200998b8:	10800817 	ldw	r2,32(r2)
200998bc:	10000726 	beq	r2,zero,200998dc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
200998c0:	e0bffd17 	ldw	r2,-12(fp)
200998c4:	10800017 	ldw	r2,0(r2)
200998c8:	10800817 	ldw	r2,32(r2)
200998cc:	e13ffd17 	ldw	r4,-12(fp)
200998d0:	e17fff17 	ldw	r5,-4(fp)
200998d4:	103ee83a 	callr	r2
200998d8:	00000a06 	br	20099904 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
200998dc:	e0bfff17 	ldw	r2,-4(fp)
200998e0:	00c80004 	movi	r3,8192
200998e4:	10c00115 	stw	r3,4(r2)
      return 0;
200998e8:	0005883a 	mov	r2,zero
200998ec:	00000506 	br	20099904 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
200998f0:	00998180 	call	20099818 <alt_get_errno>
200998f4:	1007883a 	mov	r3,r2
200998f8:	00801444 	movi	r2,81
200998fc:	18800015 	stw	r2,0(r3)
    return -1;
20099900:	00bfffc4 	movi	r2,-1
  }
}
20099904:	e037883a 	mov	sp,fp
20099908:	dfc00117 	ldw	ra,4(sp)
2009990c:	df000017 	ldw	fp,0(sp)
20099910:	dec00204 	addi	sp,sp,8
20099914:	f800283a 	ret

20099918 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
20099918:	defff004 	addi	sp,sp,-64
2009991c:	df000f15 	stw	fp,60(sp)
20099920:	df000f04 	addi	fp,sp,60
20099924:	e13ffd15 	stw	r4,-12(fp)
20099928:	e17ffe15 	stw	r5,-8(fp)
2009992c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
20099930:	00bffa84 	movi	r2,-22
20099934:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
20099938:	e0bffd17 	ldw	r2,-12(fp)
2009993c:	10800828 	cmpgeui	r2,r2,32
20099940:	10005c1e 	bne	r2,zero,20099ab4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099944:	0005303a 	rdctl	r2,status
20099948:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009994c:	e0fff317 	ldw	r3,-52(fp)
20099950:	00bfff84 	movi	r2,-2
20099954:	1884703a 	and	r2,r3,r2
20099958:	1001703a 	wrctl	status,r2
  
  return context;
2009995c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
20099960:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
20099964:	00800034 	movhi	r2,0
20099968:	108c9d04 	addi	r2,r2,12916
2009996c:	e0fffd17 	ldw	r3,-12(fp)
20099970:	180690fa 	slli	r3,r3,3
20099974:	10c5883a 	add	r2,r2,r3
20099978:	e0ffff17 	ldw	r3,-4(fp)
2009997c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
20099980:	00800034 	movhi	r2,0
20099984:	108c9d04 	addi	r2,r2,12916
20099988:	e0fffd17 	ldw	r3,-12(fp)
2009998c:	180690fa 	slli	r3,r3,3
20099990:	18c00104 	addi	r3,r3,4
20099994:	10c5883a 	add	r2,r2,r3
20099998:	e0fffe17 	ldw	r3,-8(fp)
2009999c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
200999a0:	e0bfff17 	ldw	r2,-4(fp)
200999a4:	10001f26 	beq	r2,zero,20099a24 <alt_irq_register+0x10c>
200999a8:	e0bffd17 	ldw	r2,-12(fp)
200999ac:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200999b0:	0005303a 	rdctl	r2,status
200999b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200999b8:	e0fff517 	ldw	r3,-44(fp)
200999bc:	00bfff84 	movi	r2,-2
200999c0:	1884703a 	and	r2,r3,r2
200999c4:	1001703a 	wrctl	status,r2
  
  return context;
200999c8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200999cc:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
200999d0:	e0bff417 	ldw	r2,-48(fp)
200999d4:	00c00044 	movi	r3,1
200999d8:	1884983a 	sll	r2,r3,r2
200999dc:	1007883a 	mov	r3,r2
200999e0:	00800034 	movhi	r2,0
200999e4:	108a9804 	addi	r2,r2,10848
200999e8:	10800017 	ldw	r2,0(r2)
200999ec:	1886b03a 	or	r3,r3,r2
200999f0:	00800034 	movhi	r2,0
200999f4:	108a9804 	addi	r2,r2,10848
200999f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
200999fc:	00800034 	movhi	r2,0
20099a00:	108a9804 	addi	r2,r2,10848
20099a04:	10800017 	ldw	r2,0(r2)
20099a08:	100170fa 	wrctl	ienable,r2
20099a0c:	e0bff617 	ldw	r2,-40(fp)
20099a10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099a14:	e0bff717 	ldw	r2,-36(fp)
20099a18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20099a1c:	0005883a 	mov	r2,zero
20099a20:	00001f06 	br	20099aa0 <alt_irq_register+0x188>
20099a24:	e0bffd17 	ldw	r2,-12(fp)
20099a28:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099a2c:	0005303a 	rdctl	r2,status
20099a30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099a34:	e0fff917 	ldw	r3,-28(fp)
20099a38:	00bfff84 	movi	r2,-2
20099a3c:	1884703a 	and	r2,r3,r2
20099a40:	1001703a 	wrctl	status,r2
  
  return context;
20099a44:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20099a48:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
20099a4c:	e0bff817 	ldw	r2,-32(fp)
20099a50:	00c00044 	movi	r3,1
20099a54:	1884983a 	sll	r2,r3,r2
20099a58:	0084303a 	nor	r2,zero,r2
20099a5c:	1007883a 	mov	r3,r2
20099a60:	00800034 	movhi	r2,0
20099a64:	108a9804 	addi	r2,r2,10848
20099a68:	10800017 	ldw	r2,0(r2)
20099a6c:	1886703a 	and	r3,r3,r2
20099a70:	00800034 	movhi	r2,0
20099a74:	108a9804 	addi	r2,r2,10848
20099a78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20099a7c:	00800034 	movhi	r2,0
20099a80:	108a9804 	addi	r2,r2,10848
20099a84:	10800017 	ldw	r2,0(r2)
20099a88:	100170fa 	wrctl	ienable,r2
20099a8c:	e0bffa17 	ldw	r2,-24(fp)
20099a90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099a94:	e0bffb17 	ldw	r2,-20(fp)
20099a98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20099a9c:	0005883a 	mov	r2,zero
20099aa0:	e0bff115 	stw	r2,-60(fp)
20099aa4:	e0bff217 	ldw	r2,-56(fp)
20099aa8:	e0bffc15 	stw	r2,-16(fp)
20099aac:	e0bffc17 	ldw	r2,-16(fp)
20099ab0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
20099ab4:	e0bff117 	ldw	r2,-60(fp)
}
20099ab8:	e037883a 	mov	sp,fp
20099abc:	df000017 	ldw	fp,0(sp)
20099ac0:	dec00104 	addi	sp,sp,4
20099ac4:	f800283a 	ret

20099ac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099ac8:	defffe04 	addi	sp,sp,-8
20099acc:	dfc00115 	stw	ra,4(sp)
20099ad0:	df000015 	stw	fp,0(sp)
20099ad4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099ad8:	00800034 	movhi	r2,0
20099adc:	108a7b04 	addi	r2,r2,10732
20099ae0:	10800017 	ldw	r2,0(r2)
20099ae4:	10000526 	beq	r2,zero,20099afc <alt_get_errno+0x34>
20099ae8:	00800034 	movhi	r2,0
20099aec:	108a7b04 	addi	r2,r2,10732
20099af0:	10800017 	ldw	r2,0(r2)
20099af4:	103ee83a 	callr	r2
20099af8:	00000206 	br	20099b04 <alt_get_errno+0x3c>
20099afc:	00800034 	movhi	r2,0
20099b00:	108a9404 	addi	r2,r2,10832
}
20099b04:	e037883a 	mov	sp,fp
20099b08:	dfc00117 	ldw	ra,4(sp)
20099b0c:	df000017 	ldw	fp,0(sp)
20099b10:	dec00204 	addi	sp,sp,8
20099b14:	f800283a 	ret

20099b18 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
20099b18:	deffed04 	addi	sp,sp,-76
20099b1c:	dfc01215 	stw	ra,72(sp)
20099b20:	df001115 	stw	fp,68(sp)
20099b24:	df001104 	addi	fp,sp,68
20099b28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099b2c:	e0bfff17 	ldw	r2,-4(fp)
20099b30:	10000616 	blt	r2,zero,20099b4c <isatty+0x34>
20099b34:	e0bfff17 	ldw	r2,-4(fp)
20099b38:	10c00324 	muli	r3,r2,12
20099b3c:	00800034 	movhi	r2,0
20099b40:	1085ad04 	addi	r2,r2,5812
20099b44:	1885883a 	add	r2,r3,r2
20099b48:	00000106 	br	20099b50 <isatty+0x38>
20099b4c:	0005883a 	mov	r2,zero
20099b50:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
20099b54:	e0bfef17 	ldw	r2,-68(fp)
20099b58:	10000e26 	beq	r2,zero,20099b94 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
20099b5c:	e0bfef17 	ldw	r2,-68(fp)
20099b60:	10800017 	ldw	r2,0(r2)
20099b64:	10800817 	ldw	r2,32(r2)
20099b68:	1000021e 	bne	r2,zero,20099b74 <isatty+0x5c>
    {
      return 1;
20099b6c:	00800044 	movi	r2,1
20099b70:	00000d06 	br	20099ba8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
20099b74:	e0bff004 	addi	r2,fp,-64
20099b78:	e13fff17 	ldw	r4,-4(fp)
20099b7c:	100b883a 	mov	r5,r2
20099b80:	00998680 	call	20099868 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
20099b84:	e0bff117 	ldw	r2,-60(fp)
20099b88:	10880020 	cmpeqi	r2,r2,8192
20099b8c:	10803fcc 	andi	r2,r2,255
20099b90:	00000506 	br	20099ba8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20099b94:	0099ac80 	call	20099ac8 <alt_get_errno>
20099b98:	1007883a 	mov	r3,r2
20099b9c:	00801444 	movi	r2,81
20099ba0:	18800015 	stw	r2,0(r3)
    return 0;
20099ba4:	0005883a 	mov	r2,zero
  }
}
20099ba8:	e037883a 	mov	sp,fp
20099bac:	dfc00117 	ldw	ra,4(sp)
20099bb0:	df000017 	ldw	fp,0(sp)
20099bb4:	dec00204 	addi	sp,sp,8
20099bb8:	f800283a 	ret

20099bbc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
20099bbc:	defffc04 	addi	sp,sp,-16
20099bc0:	df000315 	stw	fp,12(sp)
20099bc4:	df000304 	addi	fp,sp,12
20099bc8:	e13ffd15 	stw	r4,-12(fp)
20099bcc:	e17ffe15 	stw	r5,-8(fp)
20099bd0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
20099bd4:	e0fffe17 	ldw	r3,-8(fp)
20099bd8:	e0bffd17 	ldw	r2,-12(fp)
20099bdc:	18800c26 	beq	r3,r2,20099c10 <alt_load_section+0x54>
  {
    while( to != end )
20099be0:	00000806 	br	20099c04 <alt_load_section+0x48>
    {
      *to++ = *from++;
20099be4:	e0bffe17 	ldw	r2,-8(fp)
20099be8:	10c00104 	addi	r3,r2,4
20099bec:	e0fffe15 	stw	r3,-8(fp)
20099bf0:	e0fffd17 	ldw	r3,-12(fp)
20099bf4:	19000104 	addi	r4,r3,4
20099bf8:	e13ffd15 	stw	r4,-12(fp)
20099bfc:	18c00017 	ldw	r3,0(r3)
20099c00:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
20099c04:	e0fffe17 	ldw	r3,-8(fp)
20099c08:	e0bfff17 	ldw	r2,-4(fp)
20099c0c:	18bff51e 	bne	r3,r2,20099be4 <__flash_rwdata_start+0xffffadf8>
    {
      *to++ = *from++;
    }
  }
}
20099c10:	e037883a 	mov	sp,fp
20099c14:	df000017 	ldw	fp,0(sp)
20099c18:	dec00104 	addi	sp,sp,4
20099c1c:	f800283a 	ret

20099c20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20099c20:	defffe04 	addi	sp,sp,-8
20099c24:	dfc00115 	stw	ra,4(sp)
20099c28:	df000015 	stw	fp,0(sp)
20099c2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
20099c30:	010802b4 	movhi	r4,8202
20099c34:	213b7b04 	addi	r4,r4,-4628
20099c38:	01400034 	movhi	r5,0
20099c3c:	2942fa04 	addi	r5,r5,3048
20099c40:	01800034 	movhi	r6,0
20099c44:	318a8204 	addi	r6,r6,10760
20099c48:	0099bbc0 	call	20099bbc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
20099c4c:	01080234 	movhi	r4,8200
20099c50:	21000804 	addi	r4,r4,32
20099c54:	01480234 	movhi	r5,8200
20099c58:	29400804 	addi	r5,r5,32
20099c5c:	01880234 	movhi	r6,8200
20099c60:	31809004 	addi	r6,r6,576
20099c64:	0099bbc0 	call	20099bbc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
20099c68:	010802b4 	movhi	r4,8202
20099c6c:	21388104 	addi	r4,r4,-7676
20099c70:	01400034 	movhi	r5,0
20099c74:	29400004 	addi	r5,r5,0
20099c78:	01800034 	movhi	r6,0
20099c7c:	3182fa04 	addi	r6,r6,3048
20099c80:	0099bbc0 	call	20099bbc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
20099c84:	00997740 	call	20099774 <alt_dcache_flush_all>
  alt_icache_flush_all();
20099c88:	009d4b40 	call	2009d4b4 <alt_icache_flush_all>
}
20099c8c:	e037883a 	mov	sp,fp
20099c90:	dfc00117 	ldw	ra,4(sp)
20099c94:	df000017 	ldw	fp,0(sp)
20099c98:	dec00204 	addi	sp,sp,8
20099c9c:	f800283a 	ret

20099ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099ca0:	defffe04 	addi	sp,sp,-8
20099ca4:	dfc00115 	stw	ra,4(sp)
20099ca8:	df000015 	stw	fp,0(sp)
20099cac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099cb0:	00800034 	movhi	r2,0
20099cb4:	108a7b04 	addi	r2,r2,10732
20099cb8:	10800017 	ldw	r2,0(r2)
20099cbc:	10000526 	beq	r2,zero,20099cd4 <alt_get_errno+0x34>
20099cc0:	00800034 	movhi	r2,0
20099cc4:	108a7b04 	addi	r2,r2,10732
20099cc8:	10800017 	ldw	r2,0(r2)
20099ccc:	103ee83a 	callr	r2
20099cd0:	00000206 	br	20099cdc <alt_get_errno+0x3c>
20099cd4:	00800034 	movhi	r2,0
20099cd8:	108a9404 	addi	r2,r2,10832
}
20099cdc:	e037883a 	mov	sp,fp
20099ce0:	dfc00117 	ldw	ra,4(sp)
20099ce4:	df000017 	ldw	fp,0(sp)
20099ce8:	dec00204 	addi	sp,sp,8
20099cec:	f800283a 	ret

20099cf0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
20099cf0:	defff904 	addi	sp,sp,-28
20099cf4:	dfc00615 	stw	ra,24(sp)
20099cf8:	df000515 	stw	fp,20(sp)
20099cfc:	df000504 	addi	fp,sp,20
20099d00:	e13ffd15 	stw	r4,-12(fp)
20099d04:	e17ffe15 	stw	r5,-8(fp)
20099d08:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
20099d0c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099d10:	e0bffd17 	ldw	r2,-12(fp)
20099d14:	10000616 	blt	r2,zero,20099d30 <lseek+0x40>
20099d18:	e0bffd17 	ldw	r2,-12(fp)
20099d1c:	10c00324 	muli	r3,r2,12
20099d20:	00800034 	movhi	r2,0
20099d24:	1085ad04 	addi	r2,r2,5812
20099d28:	1885883a 	add	r2,r3,r2
20099d2c:	00000106 	br	20099d34 <lseek+0x44>
20099d30:	0005883a 	mov	r2,zero
20099d34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20099d38:	e0bffc17 	ldw	r2,-16(fp)
20099d3c:	10001026 	beq	r2,zero,20099d80 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
20099d40:	e0bffc17 	ldw	r2,-16(fp)
20099d44:	10800017 	ldw	r2,0(r2)
20099d48:	10800717 	ldw	r2,28(r2)
20099d4c:	10000926 	beq	r2,zero,20099d74 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
20099d50:	e0bffc17 	ldw	r2,-16(fp)
20099d54:	10800017 	ldw	r2,0(r2)
20099d58:	10800717 	ldw	r2,28(r2)
20099d5c:	e13ffc17 	ldw	r4,-16(fp)
20099d60:	e17ffe17 	ldw	r5,-8(fp)
20099d64:	e1bfff17 	ldw	r6,-4(fp)
20099d68:	103ee83a 	callr	r2
20099d6c:	e0bffb15 	stw	r2,-20(fp)
20099d70:	00000506 	br	20099d88 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
20099d74:	00bfde84 	movi	r2,-134
20099d78:	e0bffb15 	stw	r2,-20(fp)
20099d7c:	00000206 	br	20099d88 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
20099d80:	00bfebc4 	movi	r2,-81
20099d84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
20099d88:	e0bffb17 	ldw	r2,-20(fp)
20099d8c:	1000070e 	bge	r2,zero,20099dac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
20099d90:	0099ca00 	call	20099ca0 <alt_get_errno>
20099d94:	1007883a 	mov	r3,r2
20099d98:	e0bffb17 	ldw	r2,-20(fp)
20099d9c:	0085c83a 	sub	r2,zero,r2
20099da0:	18800015 	stw	r2,0(r3)
    rc = -1;
20099da4:	00bfffc4 	movi	r2,-1
20099da8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
20099dac:	e0bffb17 	ldw	r2,-20(fp)
}
20099db0:	e037883a 	mov	sp,fp
20099db4:	dfc00117 	ldw	ra,4(sp)
20099db8:	df000017 	ldw	fp,0(sp)
20099dbc:	dec00204 	addi	sp,sp,8
20099dc0:	f800283a 	ret

20099dc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20099dc4:	defffd04 	addi	sp,sp,-12
20099dc8:	dfc00215 	stw	ra,8(sp)
20099dcc:	df000115 	stw	fp,4(sp)
20099dd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20099dd4:	0009883a 	mov	r4,zero
20099dd8:	009a49c0 	call	2009a49c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
20099ddc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20099de0:	009a4d00 	call	2009a4d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20099de4:	01000034 	movhi	r4,0
20099de8:	21026004 	addi	r4,r4,2432
20099dec:	01400034 	movhi	r5,0
20099df0:	29426004 	addi	r5,r5,2432
20099df4:	01800034 	movhi	r6,0
20099df8:	31826004 	addi	r6,r6,2432
20099dfc:	009d8740 	call	2009d874 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
20099e00:	009d36c0 	call	2009d36c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20099e04:	010802b4 	movhi	r4,8202
20099e08:	2134f204 	addi	r4,r4,-11320
20099e0c:	009e0dc0 	call	2009e0dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20099e10:	d1202c17 	ldw	r4,-32592(gp)
20099e14:	d0e02d17 	ldw	r3,-32588(gp)
20099e18:	d0a02e17 	ldw	r2,-32584(gp)
20099e1c:	180b883a 	mov	r5,r3
20099e20:	100d883a 	mov	r6,r2
20099e24:	00886240 	call	20088624 <main>
20099e28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
20099e2c:	01000044 	movi	r4,1
20099e30:	00996300 	call	20099630 <close>
  exit (result);
20099e34:	e13fff17 	ldw	r4,-4(fp)
20099e38:	008b4c40 	call	2008b4c4 <exit>

20099e3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
20099e3c:	defffe04 	addi	sp,sp,-8
20099e40:	df000115 	stw	fp,4(sp)
20099e44:	df000104 	addi	fp,sp,4
20099e48:	e13fff15 	stw	r4,-4(fp)
}
20099e4c:	e037883a 	mov	sp,fp
20099e50:	df000017 	ldw	fp,0(sp)
20099e54:	dec00104 	addi	sp,sp,4
20099e58:	f800283a 	ret

20099e5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20099e5c:	defffe04 	addi	sp,sp,-8
20099e60:	df000115 	stw	fp,4(sp)
20099e64:	df000104 	addi	fp,sp,4
20099e68:	e13fff15 	stw	r4,-4(fp)
}
20099e6c:	e037883a 	mov	sp,fp
20099e70:	df000017 	ldw	fp,0(sp)
20099e74:	dec00104 	addi	sp,sp,4
20099e78:	f800283a 	ret

20099e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20099e7c:	defffe04 	addi	sp,sp,-8
20099e80:	dfc00115 	stw	ra,4(sp)
20099e84:	df000015 	stw	fp,0(sp)
20099e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20099e8c:	00800034 	movhi	r2,0
20099e90:	108a7b04 	addi	r2,r2,10732
20099e94:	10800017 	ldw	r2,0(r2)
20099e98:	10000526 	beq	r2,zero,20099eb0 <alt_get_errno+0x34>
20099e9c:	00800034 	movhi	r2,0
20099ea0:	108a7b04 	addi	r2,r2,10732
20099ea4:	10800017 	ldw	r2,0(r2)
20099ea8:	103ee83a 	callr	r2
20099eac:	00000206 	br	20099eb8 <alt_get_errno+0x3c>
20099eb0:	00800034 	movhi	r2,0
20099eb4:	108a9404 	addi	r2,r2,10832
}
20099eb8:	e037883a 	mov	sp,fp
20099ebc:	dfc00117 	ldw	ra,4(sp)
20099ec0:	df000017 	ldw	fp,0(sp)
20099ec4:	dec00204 	addi	sp,sp,8
20099ec8:	f800283a 	ret

20099ecc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20099ecc:	defff904 	addi	sp,sp,-28
20099ed0:	dfc00615 	stw	ra,24(sp)
20099ed4:	df000515 	stw	fp,20(sp)
20099ed8:	df000504 	addi	fp,sp,20
20099edc:	e13ffd15 	stw	r4,-12(fp)
20099ee0:	e17ffe15 	stw	r5,-8(fp)
20099ee4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20099ee8:	e0bffd17 	ldw	r2,-12(fp)
20099eec:	10000616 	blt	r2,zero,20099f08 <read+0x3c>
20099ef0:	e0bffd17 	ldw	r2,-12(fp)
20099ef4:	10c00324 	muli	r3,r2,12
20099ef8:	00800034 	movhi	r2,0
20099efc:	1085ad04 	addi	r2,r2,5812
20099f00:	1885883a 	add	r2,r3,r2
20099f04:	00000106 	br	20099f0c <read+0x40>
20099f08:	0005883a 	mov	r2,zero
20099f0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20099f10:	e0bffb17 	ldw	r2,-20(fp)
20099f14:	10002226 	beq	r2,zero,20099fa0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20099f18:	e0bffb17 	ldw	r2,-20(fp)
20099f1c:	10800217 	ldw	r2,8(r2)
20099f20:	108000cc 	andi	r2,r2,3
20099f24:	10800060 	cmpeqi	r2,r2,1
20099f28:	1000181e 	bne	r2,zero,20099f8c <read+0xc0>
        (fd->dev->read))
20099f2c:	e0bffb17 	ldw	r2,-20(fp)
20099f30:	10800017 	ldw	r2,0(r2)
20099f34:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20099f38:	10001426 	beq	r2,zero,20099f8c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20099f3c:	e0bffb17 	ldw	r2,-20(fp)
20099f40:	10800017 	ldw	r2,0(r2)
20099f44:	10800517 	ldw	r2,20(r2)
20099f48:	e0ffff17 	ldw	r3,-4(fp)
20099f4c:	e13ffb17 	ldw	r4,-20(fp)
20099f50:	e17ffe17 	ldw	r5,-8(fp)
20099f54:	180d883a 	mov	r6,r3
20099f58:	103ee83a 	callr	r2
20099f5c:	e0bffc15 	stw	r2,-16(fp)
20099f60:	e0bffc17 	ldw	r2,-16(fp)
20099f64:	1000070e 	bge	r2,zero,20099f84 <read+0xb8>
        {
          ALT_ERRNO = -rval;
20099f68:	0099e7c0 	call	20099e7c <alt_get_errno>
20099f6c:	1007883a 	mov	r3,r2
20099f70:	e0bffc17 	ldw	r2,-16(fp)
20099f74:	0085c83a 	sub	r2,zero,r2
20099f78:	18800015 	stw	r2,0(r3)
          return -1;
20099f7c:	00bfffc4 	movi	r2,-1
20099f80:	00000c06 	br	20099fb4 <read+0xe8>
        }
        return rval;
20099f84:	e0bffc17 	ldw	r2,-16(fp)
20099f88:	00000a06 	br	20099fb4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
20099f8c:	0099e7c0 	call	20099e7c <alt_get_errno>
20099f90:	1007883a 	mov	r3,r2
20099f94:	00800344 	movi	r2,13
20099f98:	18800015 	stw	r2,0(r3)
20099f9c:	00000406 	br	20099fb0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20099fa0:	0099e7c0 	call	20099e7c <alt_get_errno>
20099fa4:	1007883a 	mov	r3,r2
20099fa8:	00801444 	movi	r2,81
20099fac:	18800015 	stw	r2,0(r3)
  }
  return -1;
20099fb0:	00bfffc4 	movi	r2,-1
}
20099fb4:	e037883a 	mov	sp,fp
20099fb8:	dfc00117 	ldw	ra,4(sp)
20099fbc:	df000017 	ldw	fp,0(sp)
20099fc0:	dec00204 	addi	sp,sp,8
20099fc4:	f800283a 	ret

20099fc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20099fc8:	defffe04 	addi	sp,sp,-8
20099fcc:	df000115 	stw	fp,4(sp)
20099fd0:	df000104 	addi	fp,sp,4
20099fd4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20099fd8:	e0bfff17 	ldw	r2,-4(fp)
20099fdc:	108000d0 	cmplti	r2,r2,3
20099fe0:	10000d1e 	bne	r2,zero,2009a018 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
20099fe4:	00800034 	movhi	r2,0
20099fe8:	1085ad04 	addi	r2,r2,5812
20099fec:	e0ffff17 	ldw	r3,-4(fp)
20099ff0:	18c00324 	muli	r3,r3,12
20099ff4:	18c00204 	addi	r3,r3,8
20099ff8:	10c5883a 	add	r2,r2,r3
20099ffc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
2009a000:	00800034 	movhi	r2,0
2009a004:	1085ad04 	addi	r2,r2,5812
2009a008:	e0ffff17 	ldw	r3,-4(fp)
2009a00c:	18c00324 	muli	r3,r3,12
2009a010:	10c5883a 	add	r2,r2,r3
2009a014:	10000015 	stw	zero,0(r2)
  }
}
2009a018:	e037883a 	mov	sp,fp
2009a01c:	df000017 	ldw	fp,0(sp)
2009a020:	dec00104 	addi	sp,sp,4
2009a024:	f800283a 	ret

2009a028 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
2009a028:	defff904 	addi	sp,sp,-28
2009a02c:	df000615 	stw	fp,24(sp)
2009a030:	df000604 	addi	fp,sp,24
2009a034:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a038:	0005303a 	rdctl	r2,status
2009a03c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a040:	e0fffc17 	ldw	r3,-16(fp)
2009a044:	00bfff84 	movi	r2,-2
2009a048:	1884703a 	and	r2,r3,r2
2009a04c:	1001703a 	wrctl	status,r2
  
  return context;
2009a050:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2009a054:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
2009a058:	d0a01017 	ldw	r2,-32704(gp)
2009a05c:	10c000c4 	addi	r3,r2,3
2009a060:	00bfff04 	movi	r2,-4
2009a064:	1884703a 	and	r2,r3,r2
2009a068:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2009a06c:	d0e01017 	ldw	r3,-32704(gp)
2009a070:	e0bfff17 	ldw	r2,-4(fp)
2009a074:	1887883a 	add	r3,r3,r2
2009a078:	00880034 	movhi	r2,8192
2009a07c:	10800004 	addi	r2,r2,0
2009a080:	10c0062e 	bgeu	r2,r3,2009a09c <sbrk+0x74>
2009a084:	e0bffa17 	ldw	r2,-24(fp)
2009a088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a08c:	e0bffd17 	ldw	r2,-12(fp)
2009a090:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2009a094:	00bfffc4 	movi	r2,-1
2009a098:	00000b06 	br	2009a0c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2009a09c:	d0a01017 	ldw	r2,-32704(gp)
2009a0a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2009a0a4:	d0e01017 	ldw	r3,-32704(gp)
2009a0a8:	e0bfff17 	ldw	r2,-4(fp)
2009a0ac:	1885883a 	add	r2,r3,r2
2009a0b0:	d0a01015 	stw	r2,-32704(gp)
2009a0b4:	e0bffa17 	ldw	r2,-24(fp)
2009a0b8:	e0bffe15 	stw	r2,-8(fp)
2009a0bc:	e0bffe17 	ldw	r2,-8(fp)
2009a0c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2009a0c4:	e0bffb17 	ldw	r2,-20(fp)
} 
2009a0c8:	e037883a 	mov	sp,fp
2009a0cc:	df000017 	ldw	fp,0(sp)
2009a0d0:	dec00104 	addi	sp,sp,4
2009a0d4:	f800283a 	ret

2009a0d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
2009a0d8:	defffa04 	addi	sp,sp,-24
2009a0dc:	df000515 	stw	fp,20(sp)
2009a0e0:	df000504 	addi	fp,sp,20
2009a0e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a0e8:	0005303a 	rdctl	r2,status
2009a0ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a0f0:	e0fffc17 	ldw	r3,-16(fp)
2009a0f4:	00bfff84 	movi	r2,-2
2009a0f8:	1884703a 	and	r2,r3,r2
2009a0fc:	1001703a 	wrctl	status,r2
  
  return context;
2009a100:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
2009a104:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
2009a108:	e0bfff17 	ldw	r2,-4(fp)
2009a10c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
2009a110:	e0bffd17 	ldw	r2,-12(fp)
2009a114:	10800017 	ldw	r2,0(r2)
2009a118:	e0fffd17 	ldw	r3,-12(fp)
2009a11c:	18c00117 	ldw	r3,4(r3)
2009a120:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
2009a124:	e0bffd17 	ldw	r2,-12(fp)
2009a128:	10800117 	ldw	r2,4(r2)
2009a12c:	e0fffd17 	ldw	r3,-12(fp)
2009a130:	18c00017 	ldw	r3,0(r3)
2009a134:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
2009a138:	e0bffd17 	ldw	r2,-12(fp)
2009a13c:	e0fffd17 	ldw	r3,-12(fp)
2009a140:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
2009a144:	e0bffd17 	ldw	r2,-12(fp)
2009a148:	e0fffd17 	ldw	r3,-12(fp)
2009a14c:	10c00015 	stw	r3,0(r2)
2009a150:	e0bffb17 	ldw	r2,-20(fp)
2009a154:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a158:	e0bffe17 	ldw	r2,-8(fp)
2009a15c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
2009a160:	e037883a 	mov	sp,fp
2009a164:	df000017 	ldw	fp,0(sp)
2009a168:	dec00104 	addi	sp,sp,4
2009a16c:	f800283a 	ret

2009a170 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
2009a170:	defffb04 	addi	sp,sp,-20
2009a174:	dfc00415 	stw	ra,16(sp)
2009a178:	df000315 	stw	fp,12(sp)
2009a17c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
2009a180:	d0a01117 	ldw	r2,-32700(gp)
2009a184:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
2009a188:	d0a03017 	ldw	r2,-32576(gp)
2009a18c:	10800044 	addi	r2,r2,1
2009a190:	d0a03015 	stw	r2,-32576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2009a194:	00002e06 	br	2009a250 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
2009a198:	e0bffd17 	ldw	r2,-12(fp)
2009a19c:	10800017 	ldw	r2,0(r2)
2009a1a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
2009a1a4:	e0bffd17 	ldw	r2,-12(fp)
2009a1a8:	10800403 	ldbu	r2,16(r2)
2009a1ac:	10803fcc 	andi	r2,r2,255
2009a1b0:	10000426 	beq	r2,zero,2009a1c4 <alt_tick+0x54>
2009a1b4:	d0a03017 	ldw	r2,-32576(gp)
2009a1b8:	1000021e 	bne	r2,zero,2009a1c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
2009a1bc:	e0bffd17 	ldw	r2,-12(fp)
2009a1c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2009a1c4:	e0bffd17 	ldw	r2,-12(fp)
2009a1c8:	10800217 	ldw	r2,8(r2)
2009a1cc:	d0e03017 	ldw	r3,-32576(gp)
2009a1d0:	18801d36 	bltu	r3,r2,2009a248 <alt_tick+0xd8>
2009a1d4:	e0bffd17 	ldw	r2,-12(fp)
2009a1d8:	10800403 	ldbu	r2,16(r2)
2009a1dc:	10803fcc 	andi	r2,r2,255
2009a1e0:	1000191e 	bne	r2,zero,2009a248 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
2009a1e4:	e0bffd17 	ldw	r2,-12(fp)
2009a1e8:	10800317 	ldw	r2,12(r2)
2009a1ec:	e0fffd17 	ldw	r3,-12(fp)
2009a1f0:	18c00517 	ldw	r3,20(r3)
2009a1f4:	1809883a 	mov	r4,r3
2009a1f8:	103ee83a 	callr	r2
2009a1fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
2009a200:	e0bfff17 	ldw	r2,-4(fp)
2009a204:	1000031e 	bne	r2,zero,2009a214 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
2009a208:	e13ffd17 	ldw	r4,-12(fp)
2009a20c:	009a0d80 	call	2009a0d8 <alt_alarm_stop>
2009a210:	00000d06 	br	2009a248 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
2009a214:	e0bffd17 	ldw	r2,-12(fp)
2009a218:	10c00217 	ldw	r3,8(r2)
2009a21c:	e0bfff17 	ldw	r2,-4(fp)
2009a220:	1887883a 	add	r3,r3,r2
2009a224:	e0bffd17 	ldw	r2,-12(fp)
2009a228:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2009a22c:	e0bffd17 	ldw	r2,-12(fp)
2009a230:	10c00217 	ldw	r3,8(r2)
2009a234:	d0a03017 	ldw	r2,-32576(gp)
2009a238:	1880032e 	bgeu	r3,r2,2009a248 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2009a23c:	e0bffd17 	ldw	r2,-12(fp)
2009a240:	00c00044 	movi	r3,1
2009a244:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
2009a248:	e0bffe17 	ldw	r2,-8(fp)
2009a24c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
2009a250:	e0fffd17 	ldw	r3,-12(fp)
2009a254:	d0a01104 	addi	r2,gp,-32700
2009a258:	18bfcf1e 	bne	r3,r2,2009a198 <__flash_rwdata_start+0xffffb3ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2009a25c:	0001883a 	nop
}
2009a260:	e037883a 	mov	sp,fp
2009a264:	dfc00117 	ldw	ra,4(sp)
2009a268:	df000017 	ldw	fp,0(sp)
2009a26c:	dec00204 	addi	sp,sp,8
2009a270:	f800283a 	ret

2009a274 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
2009a274:	defffa04 	addi	sp,sp,-24
2009a278:	dfc00515 	stw	ra,20(sp)
2009a27c:	df000415 	stw	fp,16(sp)
2009a280:	df000404 	addi	fp,sp,16
2009a284:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
2009a288:	e0bfff17 	ldw	r2,-4(fp)
2009a28c:	108007c4 	addi	r2,r2,31
2009a290:	1004d17a 	srli	r2,r2,5
2009a294:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
2009a298:	e0bffc17 	ldw	r2,-16(fp)
2009a29c:	1004917a 	slli	r2,r2,5
2009a2a0:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
2009a2a4:	01000804 	movi	r4,32
2009a2a8:	e17ffd17 	ldw	r5,-12(fp)
2009a2ac:	008b4fc0 	call	2008b4fc <memalign>
2009a2b0:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
2009a2b4:	e0bffe17 	ldw	r2,-8(fp)
2009a2b8:	1000021e 	bne	r2,zero,2009a2c4 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
2009a2bc:	0005883a 	mov	r2,zero
2009a2c0:	00000506 	br	2009a2d8 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
2009a2c4:	e13ffe17 	ldw	r4,-8(fp)
2009a2c8:	e17ffd17 	ldw	r5,-12(fp)
2009a2cc:	00997000 	call	20099700 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
2009a2d0:	e0bffe17 	ldw	r2,-8(fp)
2009a2d4:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
2009a2d8:	e037883a 	mov	sp,fp
2009a2dc:	dfc00117 	ldw	ra,4(sp)
2009a2e0:	df000017 	ldw	fp,0(sp)
2009a2e4:	dec00204 	addi	sp,sp,8
2009a2e8:	f800283a 	ret

2009a2ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
2009a2ec:	defffd04 	addi	sp,sp,-12
2009a2f0:	dfc00215 	stw	ra,8(sp)
2009a2f4:	df000115 	stw	fp,4(sp)
2009a2f8:	df000104 	addi	fp,sp,4
2009a2fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
2009a300:	e13fff17 	ldw	r4,-4(fp)
2009a304:	009d1200 	call	2009d120 <alt_busy_sleep>
}
2009a308:	e037883a 	mov	sp,fp
2009a30c:	dfc00117 	ldw	ra,4(sp)
2009a310:	df000017 	ldw	fp,0(sp)
2009a314:	dec00204 	addi	sp,sp,8
2009a318:	f800283a 	ret

2009a31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009a31c:	defffe04 	addi	sp,sp,-8
2009a320:	dfc00115 	stw	ra,4(sp)
2009a324:	df000015 	stw	fp,0(sp)
2009a328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009a32c:	00800034 	movhi	r2,0
2009a330:	108a7b04 	addi	r2,r2,10732
2009a334:	10800017 	ldw	r2,0(r2)
2009a338:	10000526 	beq	r2,zero,2009a350 <alt_get_errno+0x34>
2009a33c:	00800034 	movhi	r2,0
2009a340:	108a7b04 	addi	r2,r2,10732
2009a344:	10800017 	ldw	r2,0(r2)
2009a348:	103ee83a 	callr	r2
2009a34c:	00000206 	br	2009a358 <alt_get_errno+0x3c>
2009a350:	00800034 	movhi	r2,0
2009a354:	108a9404 	addi	r2,r2,10832
}
2009a358:	e037883a 	mov	sp,fp
2009a35c:	dfc00117 	ldw	ra,4(sp)
2009a360:	df000017 	ldw	fp,0(sp)
2009a364:	dec00204 	addi	sp,sp,8
2009a368:	f800283a 	ret

2009a36c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2009a36c:	defff904 	addi	sp,sp,-28
2009a370:	dfc00615 	stw	ra,24(sp)
2009a374:	df000515 	stw	fp,20(sp)
2009a378:	df000504 	addi	fp,sp,20
2009a37c:	e13ffd15 	stw	r4,-12(fp)
2009a380:	e17ffe15 	stw	r5,-8(fp)
2009a384:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2009a388:	e0bffd17 	ldw	r2,-12(fp)
2009a38c:	10000616 	blt	r2,zero,2009a3a8 <write+0x3c>
2009a390:	e0bffd17 	ldw	r2,-12(fp)
2009a394:	10c00324 	muli	r3,r2,12
2009a398:	00800034 	movhi	r2,0
2009a39c:	1085ad04 	addi	r2,r2,5812
2009a3a0:	1885883a 	add	r2,r3,r2
2009a3a4:	00000106 	br	2009a3ac <write+0x40>
2009a3a8:	0005883a 	mov	r2,zero
2009a3ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
2009a3b0:	e0bffb17 	ldw	r2,-20(fp)
2009a3b4:	10002126 	beq	r2,zero,2009a43c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2009a3b8:	e0bffb17 	ldw	r2,-20(fp)
2009a3bc:	10800217 	ldw	r2,8(r2)
2009a3c0:	108000cc 	andi	r2,r2,3
2009a3c4:	10001826 	beq	r2,zero,2009a428 <write+0xbc>
2009a3c8:	e0bffb17 	ldw	r2,-20(fp)
2009a3cc:	10800017 	ldw	r2,0(r2)
2009a3d0:	10800617 	ldw	r2,24(r2)
2009a3d4:	10001426 	beq	r2,zero,2009a428 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2009a3d8:	e0bffb17 	ldw	r2,-20(fp)
2009a3dc:	10800017 	ldw	r2,0(r2)
2009a3e0:	10800617 	ldw	r2,24(r2)
2009a3e4:	e0ffff17 	ldw	r3,-4(fp)
2009a3e8:	e13ffb17 	ldw	r4,-20(fp)
2009a3ec:	e17ffe17 	ldw	r5,-8(fp)
2009a3f0:	180d883a 	mov	r6,r3
2009a3f4:	103ee83a 	callr	r2
2009a3f8:	e0bffc15 	stw	r2,-16(fp)
2009a3fc:	e0bffc17 	ldw	r2,-16(fp)
2009a400:	1000070e 	bge	r2,zero,2009a420 <write+0xb4>
      {
        ALT_ERRNO = -rval;
2009a404:	009a31c0 	call	2009a31c <alt_get_errno>
2009a408:	1007883a 	mov	r3,r2
2009a40c:	e0bffc17 	ldw	r2,-16(fp)
2009a410:	0085c83a 	sub	r2,zero,r2
2009a414:	18800015 	stw	r2,0(r3)
        return -1;
2009a418:	00bfffc4 	movi	r2,-1
2009a41c:	00000c06 	br	2009a450 <write+0xe4>
      }
      return rval;
2009a420:	e0bffc17 	ldw	r2,-16(fp)
2009a424:	00000a06 	br	2009a450 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2009a428:	009a31c0 	call	2009a31c <alt_get_errno>
2009a42c:	1007883a 	mov	r3,r2
2009a430:	00800344 	movi	r2,13
2009a434:	18800015 	stw	r2,0(r3)
2009a438:	00000406 	br	2009a44c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2009a43c:	009a31c0 	call	2009a31c <alt_get_errno>
2009a440:	1007883a 	mov	r3,r2
2009a444:	00801444 	movi	r2,81
2009a448:	18800015 	stw	r2,0(r3)
  }
  return -1;
2009a44c:	00bfffc4 	movi	r2,-1
}
2009a450:	e037883a 	mov	sp,fp
2009a454:	dfc00117 	ldw	ra,4(sp)
2009a458:	df000017 	ldw	fp,0(sp)
2009a45c:	dec00204 	addi	sp,sp,8
2009a460:	f800283a 	ret

2009a464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
2009a464:	defffd04 	addi	sp,sp,-12
2009a468:	dfc00215 	stw	ra,8(sp)
2009a46c:	df000115 	stw	fp,4(sp)
2009a470:	df000104 	addi	fp,sp,4
2009a474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
2009a478:	e13fff17 	ldw	r4,-4(fp)
2009a47c:	01400034 	movhi	r5,0
2009a480:	294a7804 	addi	r5,r5,10720
2009a484:	009d2c80 	call	2009d2c8 <alt_dev_llist_insert>
}
2009a488:	e037883a 	mov	sp,fp
2009a48c:	dfc00117 	ldw	ra,4(sp)
2009a490:	df000017 	ldw	fp,0(sp)
2009a494:	dec00204 	addi	sp,sp,8
2009a498:	f800283a 	ret

2009a49c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2009a49c:	defffd04 	addi	sp,sp,-12
2009a4a0:	dfc00215 	stw	ra,8(sp)
2009a4a4:	df000115 	stw	fp,4(sp)
2009a4a8:	df000104 	addi	fp,sp,4
2009a4ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
2009a4b0:	009ddcc0 	call	2009ddcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
2009a4b4:	00800044 	movi	r2,1
2009a4b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
2009a4bc:	e037883a 	mov	sp,fp
2009a4c0:	dfc00117 	ldw	ra,4(sp)
2009a4c4:	df000017 	ldw	fp,0(sp)
2009a4c8:	dec00204 	addi	sp,sp,8
2009a4cc:	f800283a 	ret

2009a4d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
2009a4d0:	defffe04 	addi	sp,sp,-8
2009a4d4:	dfc00115 	stw	ra,4(sp)
2009a4d8:	df000015 	stw	fp,0(sp)
2009a4dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
2009a4e0:	00800034 	movhi	r2,0
2009a4e4:	108a9e04 	addi	r2,r2,10872
2009a4e8:	00c80434 	movhi	r3,8208
2009a4ec:	18c52004 	addi	r3,r3,5248
2009a4f0:	10c00015 	stw	r3,0(r2)
2009a4f4:	00800034 	movhi	r2,0
2009a4f8:	108a9f04 	addi	r2,r2,10876
2009a4fc:	00c1dcf4 	movhi	r3,1907
2009a500:	18d65004 	addi	r3,r3,22848
2009a504:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2009a508:	01000034 	movhi	r4,0
2009a50c:	21061704 	addi	r4,r4,6236
2009a510:	000b883a 	mov	r5,zero
2009a514:	01800044 	movi	r6,1
2009a518:	009a7280 	call	2009a728 <altera_avalon_jtag_uart_init>
2009a51c:	01000034 	movhi	r4,0
2009a520:	21060d04 	addi	r4,r4,6196
2009a524:	009a4640 	call	2009a464 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2009a528:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( READ_DMA_0, read_dma_0);
2009a52c:	00800034 	movhi	r2,0
2009a530:	108a2504 	addi	r2,r2,10388
2009a534:	10c00717 	ldw	r3,28(r2)
2009a538:	00800034 	movhi	r2,0
2009a53c:	108a2504 	addi	r2,r2,10388
2009a540:	10800817 	ldw	r2,32(r2)
2009a544:	01000034 	movhi	r4,0
2009a548:	210a2504 	addi	r4,r4,10388
2009a54c:	180b883a 	mov	r5,r3
2009a550:	100d883a 	mov	r6,r2
2009a554:	009cd300 	call	2009cd30 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
2009a558:	00800034 	movhi	r2,0
2009a55c:	108a3d04 	addi	r2,r2,10484
2009a560:	10c00717 	ldw	r3,28(r2)
2009a564:	00800034 	movhi	r2,0
2009a568:	108a3d04 	addi	r2,r2,10484
2009a56c:	10800817 	ldw	r2,32(r2)
2009a570:	01000034 	movhi	r4,0
2009a574:	210a3d04 	addi	r4,r4,10484
2009a578:	180b883a 	mov	r5,r3
2009a57c:	100d883a 	mov	r6,r2
2009a580:	009cd300 	call	2009cd30 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( WRITE_DMA_0, write_dma_0);
2009a584:	00800034 	movhi	r2,0
2009a588:	108a5504 	addi	r2,r2,10580
2009a58c:	10c00717 	ldw	r3,28(r2)
2009a590:	00800034 	movhi	r2,0
2009a594:	108a5504 	addi	r2,r2,10580
2009a598:	10800817 	ldw	r2,32(r2)
2009a59c:	01000034 	movhi	r4,0
2009a5a0:	210a5504 	addi	r4,r4,10580
2009a5a4:	180b883a 	mov	r5,r3
2009a5a8:	100d883a 	mov	r6,r2
2009a5ac:	009cd300 	call	2009cd30 <alt_msgdma_init>
}
2009a5b0:	e037883a 	mov	sp,fp
2009a5b4:	dfc00117 	ldw	ra,4(sp)
2009a5b8:	df000017 	ldw	fp,0(sp)
2009a5bc:	dec00204 	addi	sp,sp,8
2009a5c0:	f800283a 	ret

2009a5c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
2009a5c4:	defffa04 	addi	sp,sp,-24
2009a5c8:	dfc00515 	stw	ra,20(sp)
2009a5cc:	df000415 	stw	fp,16(sp)
2009a5d0:	df000404 	addi	fp,sp,16
2009a5d4:	e13ffd15 	stw	r4,-12(fp)
2009a5d8:	e17ffe15 	stw	r5,-8(fp)
2009a5dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a5e0:	e0bffd17 	ldw	r2,-12(fp)
2009a5e4:	10800017 	ldw	r2,0(r2)
2009a5e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
2009a5ec:	e0bffc17 	ldw	r2,-16(fp)
2009a5f0:	10c00a04 	addi	r3,r2,40
2009a5f4:	e0bffd17 	ldw	r2,-12(fp)
2009a5f8:	10800217 	ldw	r2,8(r2)
2009a5fc:	1809883a 	mov	r4,r3
2009a600:	e17ffe17 	ldw	r5,-8(fp)
2009a604:	e1bfff17 	ldw	r6,-4(fp)
2009a608:	100f883a 	mov	r7,r2
2009a60c:	009abec0 	call	2009abec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
2009a610:	e037883a 	mov	sp,fp
2009a614:	dfc00117 	ldw	ra,4(sp)
2009a618:	df000017 	ldw	fp,0(sp)
2009a61c:	dec00204 	addi	sp,sp,8
2009a620:	f800283a 	ret

2009a624 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
2009a624:	defffa04 	addi	sp,sp,-24
2009a628:	dfc00515 	stw	ra,20(sp)
2009a62c:	df000415 	stw	fp,16(sp)
2009a630:	df000404 	addi	fp,sp,16
2009a634:	e13ffd15 	stw	r4,-12(fp)
2009a638:	e17ffe15 	stw	r5,-8(fp)
2009a63c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a640:	e0bffd17 	ldw	r2,-12(fp)
2009a644:	10800017 	ldw	r2,0(r2)
2009a648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
2009a64c:	e0bffc17 	ldw	r2,-16(fp)
2009a650:	10c00a04 	addi	r3,r2,40
2009a654:	e0bffd17 	ldw	r2,-12(fp)
2009a658:	10800217 	ldw	r2,8(r2)
2009a65c:	1809883a 	mov	r4,r3
2009a660:	e17ffe17 	ldw	r5,-8(fp)
2009a664:	e1bfff17 	ldw	r6,-4(fp)
2009a668:	100f883a 	mov	r7,r2
2009a66c:	009adf80 	call	2009adf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
2009a670:	e037883a 	mov	sp,fp
2009a674:	dfc00117 	ldw	ra,4(sp)
2009a678:	df000017 	ldw	fp,0(sp)
2009a67c:	dec00204 	addi	sp,sp,8
2009a680:	f800283a 	ret

2009a684 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
2009a684:	defffc04 	addi	sp,sp,-16
2009a688:	dfc00315 	stw	ra,12(sp)
2009a68c:	df000215 	stw	fp,8(sp)
2009a690:	df000204 	addi	fp,sp,8
2009a694:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
2009a698:	e0bfff17 	ldw	r2,-4(fp)
2009a69c:	10800017 	ldw	r2,0(r2)
2009a6a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
2009a6a4:	e0bffe17 	ldw	r2,-8(fp)
2009a6a8:	10c00a04 	addi	r3,r2,40
2009a6ac:	e0bfff17 	ldw	r2,-4(fp)
2009a6b0:	10800217 	ldw	r2,8(r2)
2009a6b4:	1809883a 	mov	r4,r3
2009a6b8:	100b883a 	mov	r5,r2
2009a6bc:	009aa980 	call	2009aa98 <altera_avalon_jtag_uart_close>
}
2009a6c0:	e037883a 	mov	sp,fp
2009a6c4:	dfc00117 	ldw	ra,4(sp)
2009a6c8:	df000017 	ldw	fp,0(sp)
2009a6cc:	dec00204 	addi	sp,sp,8
2009a6d0:	f800283a 	ret

2009a6d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
2009a6d4:	defffa04 	addi	sp,sp,-24
2009a6d8:	dfc00515 	stw	ra,20(sp)
2009a6dc:	df000415 	stw	fp,16(sp)
2009a6e0:	df000404 	addi	fp,sp,16
2009a6e4:	e13ffd15 	stw	r4,-12(fp)
2009a6e8:	e17ffe15 	stw	r5,-8(fp)
2009a6ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
2009a6f0:	e0bffd17 	ldw	r2,-12(fp)
2009a6f4:	10800017 	ldw	r2,0(r2)
2009a6f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
2009a6fc:	e0bffc17 	ldw	r2,-16(fp)
2009a700:	10800a04 	addi	r2,r2,40
2009a704:	1009883a 	mov	r4,r2
2009a708:	e17ffe17 	ldw	r5,-8(fp)
2009a70c:	e1bfff17 	ldw	r6,-4(fp)
2009a710:	009ab000 	call	2009ab00 <altera_avalon_jtag_uart_ioctl>
}
2009a714:	e037883a 	mov	sp,fp
2009a718:	dfc00117 	ldw	ra,4(sp)
2009a71c:	df000017 	ldw	fp,0(sp)
2009a720:	dec00204 	addi	sp,sp,8
2009a724:	f800283a 	ret

2009a728 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2009a728:	defffa04 	addi	sp,sp,-24
2009a72c:	dfc00515 	stw	ra,20(sp)
2009a730:	df000415 	stw	fp,16(sp)
2009a734:	df000404 	addi	fp,sp,16
2009a738:	e13ffd15 	stw	r4,-12(fp)
2009a73c:	e17ffe15 	stw	r5,-8(fp)
2009a740:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009a744:	e0bffd17 	ldw	r2,-12(fp)
2009a748:	00c00044 	movi	r3,1
2009a74c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
2009a750:	e0bffd17 	ldw	r2,-12(fp)
2009a754:	10800017 	ldw	r2,0(r2)
2009a758:	10800104 	addi	r2,r2,4
2009a75c:	1007883a 	mov	r3,r2
2009a760:	e0bffd17 	ldw	r2,-12(fp)
2009a764:	10800817 	ldw	r2,32(r2)
2009a768:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2009a76c:	e0fffe17 	ldw	r3,-8(fp)
2009a770:	e0bfff17 	ldw	r2,-4(fp)
2009a774:	d8000015 	stw	zero,0(sp)
2009a778:	1809883a 	mov	r4,r3
2009a77c:	100b883a 	mov	r5,r2
2009a780:	018802b4 	movhi	r6,8202
2009a784:	31a9fb04 	addi	r6,r6,-22548
2009a788:	e1fffd17 	ldw	r7,-12(fp)
2009a78c:	009d4e40 	call	2009d4e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
2009a790:	e0bffd17 	ldw	r2,-12(fp)
2009a794:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
2009a798:	e0bffd17 	ldw	r2,-12(fp)
2009a79c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
2009a7a0:	00800034 	movhi	r2,0
2009a7a4:	108a9c04 	addi	r2,r2,10864
2009a7a8:	10800017 	ldw	r2,0(r2)
2009a7ac:	1809883a 	mov	r4,r3
2009a7b0:	100b883a 	mov	r5,r2
2009a7b4:	018802b4 	movhi	r6,8202
2009a7b8:	31aa7c04 	addi	r6,r6,-22032
2009a7bc:	e1fffd17 	ldw	r7,-12(fp)
2009a7c0:	009cfe00 	call	2009cfe0 <alt_alarm_start>
2009a7c4:	1000040e 	bge	r2,zero,2009a7d8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
2009a7c8:	e0fffd17 	ldw	r3,-12(fp)
2009a7cc:	00a00034 	movhi	r2,32768
2009a7d0:	10bfffc4 	addi	r2,r2,-1
2009a7d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
2009a7d8:	e037883a 	mov	sp,fp
2009a7dc:	dfc00117 	ldw	ra,4(sp)
2009a7e0:	df000017 	ldw	fp,0(sp)
2009a7e4:	dec00204 	addi	sp,sp,8
2009a7e8:	f800283a 	ret

2009a7ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
2009a7ec:	defff804 	addi	sp,sp,-32
2009a7f0:	df000715 	stw	fp,28(sp)
2009a7f4:	df000704 	addi	fp,sp,28
2009a7f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
2009a7fc:	e0bfff17 	ldw	r2,-4(fp)
2009a800:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
2009a804:	e0bffb17 	ldw	r2,-20(fp)
2009a808:	10800017 	ldw	r2,0(r2)
2009a80c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a810:	e0bffc17 	ldw	r2,-16(fp)
2009a814:	10800104 	addi	r2,r2,4
2009a818:	10800037 	ldwio	r2,0(r2)
2009a81c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2009a820:	e0bffd17 	ldw	r2,-12(fp)
2009a824:	1080c00c 	andi	r2,r2,768
2009a828:	1000011e 	bne	r2,zero,2009a830 <altera_avalon_jtag_uart_irq+0x44>
      break;
2009a82c:	00006c06 	br	2009a9e0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
2009a830:	e0bffd17 	ldw	r2,-12(fp)
2009a834:	1080400c 	andi	r2,r2,256
2009a838:	10003426 	beq	r2,zero,2009a90c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
2009a83c:	00800074 	movhi	r2,1
2009a840:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a844:	e0bffb17 	ldw	r2,-20(fp)
2009a848:	10800a17 	ldw	r2,40(r2)
2009a84c:	10800044 	addi	r2,r2,1
2009a850:	1081ffcc 	andi	r2,r2,2047
2009a854:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
2009a858:	e0bffb17 	ldw	r2,-20(fp)
2009a85c:	10c00b17 	ldw	r3,44(r2)
2009a860:	e0bffe17 	ldw	r2,-8(fp)
2009a864:	1880011e 	bne	r3,r2,2009a86c <altera_avalon_jtag_uart_irq+0x80>
          break;
2009a868:	00001606 	br	2009a8c4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
2009a86c:	e0bffc17 	ldw	r2,-16(fp)
2009a870:	10800037 	ldwio	r2,0(r2)
2009a874:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
2009a878:	e0bff917 	ldw	r2,-28(fp)
2009a87c:	10a0000c 	andi	r2,r2,32768
2009a880:	1000011e 	bne	r2,zero,2009a888 <altera_avalon_jtag_uart_irq+0x9c>
          break;
2009a884:	00000f06 	br	2009a8c4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2009a888:	e0bffb17 	ldw	r2,-20(fp)
2009a88c:	10800a17 	ldw	r2,40(r2)
2009a890:	e0fff917 	ldw	r3,-28(fp)
2009a894:	1809883a 	mov	r4,r3
2009a898:	e0fffb17 	ldw	r3,-20(fp)
2009a89c:	1885883a 	add	r2,r3,r2
2009a8a0:	10800e04 	addi	r2,r2,56
2009a8a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a8a8:	e0bffb17 	ldw	r2,-20(fp)
2009a8ac:	10800a17 	ldw	r2,40(r2)
2009a8b0:	10800044 	addi	r2,r2,1
2009a8b4:	10c1ffcc 	andi	r3,r2,2047
2009a8b8:	e0bffb17 	ldw	r2,-20(fp)
2009a8bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
2009a8c0:	003fe006 	br	2009a844 <__flash_rwdata_start+0xffffba58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2009a8c4:	e0bff917 	ldw	r2,-28(fp)
2009a8c8:	10bfffec 	andhi	r2,r2,65535
2009a8cc:	10000f26 	beq	r2,zero,2009a90c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009a8d0:	e0bffb17 	ldw	r2,-20(fp)
2009a8d4:	10c00817 	ldw	r3,32(r2)
2009a8d8:	00bfff84 	movi	r2,-2
2009a8dc:	1886703a 	and	r3,r3,r2
2009a8e0:	e0bffb17 	ldw	r2,-20(fp)
2009a8e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
2009a8e8:	e0bffc17 	ldw	r2,-16(fp)
2009a8ec:	10800104 	addi	r2,r2,4
2009a8f0:	1007883a 	mov	r3,r2
2009a8f4:	e0bffb17 	ldw	r2,-20(fp)
2009a8f8:	10800817 	ldw	r2,32(r2)
2009a8fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a900:	e0bffc17 	ldw	r2,-16(fp)
2009a904:	10800104 	addi	r2,r2,4
2009a908:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
2009a90c:	e0bffd17 	ldw	r2,-12(fp)
2009a910:	1080800c 	andi	r2,r2,512
2009a914:	10003126 	beq	r2,zero,2009a9dc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2009a918:	e0bffd17 	ldw	r2,-12(fp)
2009a91c:	1004d43a 	srli	r2,r2,16
2009a920:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
2009a924:	00001406 	br	2009a978 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
2009a928:	e0bffc17 	ldw	r2,-16(fp)
2009a92c:	e0fffb17 	ldw	r3,-20(fp)
2009a930:	18c00d17 	ldw	r3,52(r3)
2009a934:	e13ffb17 	ldw	r4,-20(fp)
2009a938:	20c7883a 	add	r3,r4,r3
2009a93c:	18c20e04 	addi	r3,r3,2104
2009a940:	18c00003 	ldbu	r3,0(r3)
2009a944:	18c03fcc 	andi	r3,r3,255
2009a948:	18c0201c 	xori	r3,r3,128
2009a94c:	18ffe004 	addi	r3,r3,-128
2009a950:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009a954:	e0bffb17 	ldw	r2,-20(fp)
2009a958:	10800d17 	ldw	r2,52(r2)
2009a95c:	10800044 	addi	r2,r2,1
2009a960:	10c1ffcc 	andi	r3,r2,2047
2009a964:	e0bffb17 	ldw	r2,-20(fp)
2009a968:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
2009a96c:	e0bffa17 	ldw	r2,-24(fp)
2009a970:	10bfffc4 	addi	r2,r2,-1
2009a974:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
2009a978:	e0bffa17 	ldw	r2,-24(fp)
2009a97c:	10000526 	beq	r2,zero,2009a994 <altera_avalon_jtag_uart_irq+0x1a8>
2009a980:	e0bffb17 	ldw	r2,-20(fp)
2009a984:	10c00d17 	ldw	r3,52(r2)
2009a988:	e0bffb17 	ldw	r2,-20(fp)
2009a98c:	10800c17 	ldw	r2,48(r2)
2009a990:	18bfe51e 	bne	r3,r2,2009a928 <__flash_rwdata_start+0xffffbb3c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
2009a994:	e0bffa17 	ldw	r2,-24(fp)
2009a998:	10001026 	beq	r2,zero,2009a9dc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009a99c:	e0bffb17 	ldw	r2,-20(fp)
2009a9a0:	10c00817 	ldw	r3,32(r2)
2009a9a4:	00bfff44 	movi	r2,-3
2009a9a8:	1886703a 	and	r3,r3,r2
2009a9ac:	e0bffb17 	ldw	r2,-20(fp)
2009a9b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009a9b4:	e0bffb17 	ldw	r2,-20(fp)
2009a9b8:	10800017 	ldw	r2,0(r2)
2009a9bc:	10800104 	addi	r2,r2,4
2009a9c0:	1007883a 	mov	r3,r2
2009a9c4:	e0bffb17 	ldw	r2,-20(fp)
2009a9c8:	10800817 	ldw	r2,32(r2)
2009a9cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
2009a9d0:	e0bffc17 	ldw	r2,-16(fp)
2009a9d4:	10800104 	addi	r2,r2,4
2009a9d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
2009a9dc:	003f8c06 	br	2009a810 <__flash_rwdata_start+0xffffba24>
}
2009a9e0:	e037883a 	mov	sp,fp
2009a9e4:	df000017 	ldw	fp,0(sp)
2009a9e8:	dec00104 	addi	sp,sp,4
2009a9ec:	f800283a 	ret

2009a9f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
2009a9f0:	defff804 	addi	sp,sp,-32
2009a9f4:	df000715 	stw	fp,28(sp)
2009a9f8:	df000704 	addi	fp,sp,28
2009a9fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
2009aa00:	e0bffb17 	ldw	r2,-20(fp)
2009aa04:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
2009aa08:	e0bff917 	ldw	r2,-28(fp)
2009aa0c:	10800017 	ldw	r2,0(r2)
2009aa10:	10800104 	addi	r2,r2,4
2009aa14:	10800037 	ldwio	r2,0(r2)
2009aa18:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
2009aa1c:	e0bffa17 	ldw	r2,-24(fp)
2009aa20:	1081000c 	andi	r2,r2,1024
2009aa24:	10000b26 	beq	r2,zero,2009aa54 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
2009aa28:	e0bff917 	ldw	r2,-28(fp)
2009aa2c:	10800017 	ldw	r2,0(r2)
2009aa30:	10800104 	addi	r2,r2,4
2009aa34:	1007883a 	mov	r3,r2
2009aa38:	e0bff917 	ldw	r2,-28(fp)
2009aa3c:	10800817 	ldw	r2,32(r2)
2009aa40:	10810014 	ori	r2,r2,1024
2009aa44:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
2009aa48:	e0bff917 	ldw	r2,-28(fp)
2009aa4c:	10000915 	stw	zero,36(r2)
2009aa50:	00000a06 	br	2009aa7c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
2009aa54:	e0bff917 	ldw	r2,-28(fp)
2009aa58:	10c00917 	ldw	r3,36(r2)
2009aa5c:	00a00034 	movhi	r2,32768
2009aa60:	10bfff04 	addi	r2,r2,-4
2009aa64:	10c00536 	bltu	r2,r3,2009aa7c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
2009aa68:	e0bff917 	ldw	r2,-28(fp)
2009aa6c:	10800917 	ldw	r2,36(r2)
2009aa70:	10c00044 	addi	r3,r2,1
2009aa74:	e0bff917 	ldw	r2,-28(fp)
2009aa78:	10c00915 	stw	r3,36(r2)
2009aa7c:	00800034 	movhi	r2,0
2009aa80:	108a9c04 	addi	r2,r2,10864
2009aa84:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
2009aa88:	e037883a 	mov	sp,fp
2009aa8c:	df000017 	ldw	fp,0(sp)
2009aa90:	dec00104 	addi	sp,sp,4
2009aa94:	f800283a 	ret

2009aa98 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
2009aa98:	defffd04 	addi	sp,sp,-12
2009aa9c:	df000215 	stw	fp,8(sp)
2009aaa0:	df000204 	addi	fp,sp,8
2009aaa4:	e13ffe15 	stw	r4,-8(fp)
2009aaa8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2009aaac:	00000506 	br	2009aac4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
2009aab0:	e0bfff17 	ldw	r2,-4(fp)
2009aab4:	1090000c 	andi	r2,r2,16384
2009aab8:	10000226 	beq	r2,zero,2009aac4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
2009aabc:	00bffd44 	movi	r2,-11
2009aac0:	00000b06 	br	2009aaf0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
2009aac4:	e0bffe17 	ldw	r2,-8(fp)
2009aac8:	10c00d17 	ldw	r3,52(r2)
2009aacc:	e0bffe17 	ldw	r2,-8(fp)
2009aad0:	10800c17 	ldw	r2,48(r2)
2009aad4:	18800526 	beq	r3,r2,2009aaec <altera_avalon_jtag_uart_close+0x54>
2009aad8:	e0bffe17 	ldw	r2,-8(fp)
2009aadc:	10c00917 	ldw	r3,36(r2)
2009aae0:	e0bffe17 	ldw	r2,-8(fp)
2009aae4:	10800117 	ldw	r2,4(r2)
2009aae8:	18bff136 	bltu	r3,r2,2009aab0 <__flash_rwdata_start+0xffffbcc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
2009aaec:	0005883a 	mov	r2,zero
}
2009aaf0:	e037883a 	mov	sp,fp
2009aaf4:	df000017 	ldw	fp,0(sp)
2009aaf8:	dec00104 	addi	sp,sp,4
2009aafc:	f800283a 	ret

2009ab00 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
2009ab00:	defffa04 	addi	sp,sp,-24
2009ab04:	df000515 	stw	fp,20(sp)
2009ab08:	df000504 	addi	fp,sp,20
2009ab0c:	e13ffd15 	stw	r4,-12(fp)
2009ab10:	e17ffe15 	stw	r5,-8(fp)
2009ab14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
2009ab18:	00bff9c4 	movi	r2,-25
2009ab1c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
2009ab20:	e0bffe17 	ldw	r2,-8(fp)
2009ab24:	10da8060 	cmpeqi	r3,r2,27137
2009ab28:	1800031e 	bne	r3,zero,2009ab38 <altera_avalon_jtag_uart_ioctl+0x38>
2009ab2c:	109a80a0 	cmpeqi	r2,r2,27138
2009ab30:	1000191e 	bne	r2,zero,2009ab98 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
2009ab34:	00002806 	br	2009abd8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
2009ab38:	e0bffd17 	ldw	r2,-12(fp)
2009ab3c:	10c00117 	ldw	r3,4(r2)
2009ab40:	00a00034 	movhi	r2,32768
2009ab44:	10bfffc4 	addi	r2,r2,-1
2009ab48:	18801226 	beq	r3,r2,2009ab94 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
2009ab4c:	e0bfff17 	ldw	r2,-4(fp)
2009ab50:	10800017 	ldw	r2,0(r2)
2009ab54:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
2009ab58:	e0bffc17 	ldw	r2,-16(fp)
2009ab5c:	10800090 	cmplti	r2,r2,2
2009ab60:	1000061e 	bne	r2,zero,2009ab7c <altera_avalon_jtag_uart_ioctl+0x7c>
2009ab64:	e0fffc17 	ldw	r3,-16(fp)
2009ab68:	00a00034 	movhi	r2,32768
2009ab6c:	10bfffc4 	addi	r2,r2,-1
2009ab70:	18800226 	beq	r3,r2,2009ab7c <altera_avalon_jtag_uart_ioctl+0x7c>
2009ab74:	e0bffc17 	ldw	r2,-16(fp)
2009ab78:	00000206 	br	2009ab84 <altera_avalon_jtag_uart_ioctl+0x84>
2009ab7c:	00a00034 	movhi	r2,32768
2009ab80:	10bfff84 	addi	r2,r2,-2
2009ab84:	e0fffd17 	ldw	r3,-12(fp)
2009ab88:	18800115 	stw	r2,4(r3)
      rc = 0;
2009ab8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2009ab90:	00001106 	br	2009abd8 <altera_avalon_jtag_uart_ioctl+0xd8>
2009ab94:	00001006 	br	2009abd8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
2009ab98:	e0bffd17 	ldw	r2,-12(fp)
2009ab9c:	10c00117 	ldw	r3,4(r2)
2009aba0:	00a00034 	movhi	r2,32768
2009aba4:	10bfffc4 	addi	r2,r2,-1
2009aba8:	18800a26 	beq	r3,r2,2009abd4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2009abac:	e0bffd17 	ldw	r2,-12(fp)
2009abb0:	10c00917 	ldw	r3,36(r2)
2009abb4:	e0bffd17 	ldw	r2,-12(fp)
2009abb8:	10800117 	ldw	r2,4(r2)
2009abbc:	1885803a 	cmpltu	r2,r3,r2
2009abc0:	10c03fcc 	andi	r3,r2,255
2009abc4:	e0bfff17 	ldw	r2,-4(fp)
2009abc8:	10c00015 	stw	r3,0(r2)
      rc = 0;
2009abcc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
2009abd0:	00000006 	br	2009abd4 <altera_avalon_jtag_uart_ioctl+0xd4>
2009abd4:	0001883a 	nop

  default:
    break;
  }

  return rc;
2009abd8:	e0bffb17 	ldw	r2,-20(fp)
}
2009abdc:	e037883a 	mov	sp,fp
2009abe0:	df000017 	ldw	fp,0(sp)
2009abe4:	dec00104 	addi	sp,sp,4
2009abe8:	f800283a 	ret

2009abec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
2009abec:	defff304 	addi	sp,sp,-52
2009abf0:	dfc00c15 	stw	ra,48(sp)
2009abf4:	df000b15 	stw	fp,44(sp)
2009abf8:	df000b04 	addi	fp,sp,44
2009abfc:	e13ffc15 	stw	r4,-16(fp)
2009ac00:	e17ffd15 	stw	r5,-12(fp)
2009ac04:	e1bffe15 	stw	r6,-8(fp)
2009ac08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
2009ac0c:	e0bffd17 	ldw	r2,-12(fp)
2009ac10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009ac14:	00004906 	br	2009ad3c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2009ac18:	e0bffc17 	ldw	r2,-16(fp)
2009ac1c:	10800a17 	ldw	r2,40(r2)
2009ac20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
2009ac24:	e0bffc17 	ldw	r2,-16(fp)
2009ac28:	10800b17 	ldw	r2,44(r2)
2009ac2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
2009ac30:	e0fff717 	ldw	r3,-36(fp)
2009ac34:	e0bff817 	ldw	r2,-32(fp)
2009ac38:	18800536 	bltu	r3,r2,2009ac50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
2009ac3c:	e0fff717 	ldw	r3,-36(fp)
2009ac40:	e0bff817 	ldw	r2,-32(fp)
2009ac44:	1885c83a 	sub	r2,r3,r2
2009ac48:	e0bff615 	stw	r2,-40(fp)
2009ac4c:	00000406 	br	2009ac60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2009ac50:	00c20004 	movi	r3,2048
2009ac54:	e0bff817 	ldw	r2,-32(fp)
2009ac58:	1885c83a 	sub	r2,r3,r2
2009ac5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2009ac60:	e0bff617 	ldw	r2,-40(fp)
2009ac64:	1000011e 	bne	r2,zero,2009ac6c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
2009ac68:	00001d06 	br	2009ace0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
2009ac6c:	e0fffe17 	ldw	r3,-8(fp)
2009ac70:	e0bff617 	ldw	r2,-40(fp)
2009ac74:	1880022e 	bgeu	r3,r2,2009ac80 <altera_avalon_jtag_uart_read+0x94>
        n = space;
2009ac78:	e0bffe17 	ldw	r2,-8(fp)
2009ac7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
2009ac80:	e0bff817 	ldw	r2,-32(fp)
2009ac84:	10800e04 	addi	r2,r2,56
2009ac88:	e0fffc17 	ldw	r3,-16(fp)
2009ac8c:	1885883a 	add	r2,r3,r2
2009ac90:	e13ff517 	ldw	r4,-44(fp)
2009ac94:	100b883a 	mov	r5,r2
2009ac98:	e1bff617 	ldw	r6,-40(fp)
2009ac9c:	008bf180 	call	2008bf18 <memcpy>
      ptr   += n;
2009aca0:	e0fff517 	ldw	r3,-44(fp)
2009aca4:	e0bff617 	ldw	r2,-40(fp)
2009aca8:	1885883a 	add	r2,r3,r2
2009acac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
2009acb0:	e0fffe17 	ldw	r3,-8(fp)
2009acb4:	e0bff617 	ldw	r2,-40(fp)
2009acb8:	1885c83a 	sub	r2,r3,r2
2009acbc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009acc0:	e0fff817 	ldw	r3,-32(fp)
2009acc4:	e0bff617 	ldw	r2,-40(fp)
2009acc8:	1885883a 	add	r2,r3,r2
2009accc:	10c1ffcc 	andi	r3,r2,2047
2009acd0:	e0bffc17 	ldw	r2,-16(fp)
2009acd4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2009acd8:	e0bffe17 	ldw	r2,-8(fp)
2009acdc:	00bfce16 	blt	zero,r2,2009ac18 <__flash_rwdata_start+0xffffbe2c>

    /* If we read any data then return it */
    if (ptr != buffer)
2009ace0:	e0fff517 	ldw	r3,-44(fp)
2009ace4:	e0bffd17 	ldw	r2,-12(fp)
2009ace8:	18800126 	beq	r3,r2,2009acf0 <altera_avalon_jtag_uart_read+0x104>
      break;
2009acec:	00001506 	br	2009ad44 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
2009acf0:	e0bfff17 	ldw	r2,-4(fp)
2009acf4:	1090000c 	andi	r2,r2,16384
2009acf8:	10000126 	beq	r2,zero,2009ad00 <altera_avalon_jtag_uart_read+0x114>
      break;
2009acfc:	00001106 	br	2009ad44 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
2009ad00:	0001883a 	nop
2009ad04:	e0bffc17 	ldw	r2,-16(fp)
2009ad08:	10c00a17 	ldw	r3,40(r2)
2009ad0c:	e0bff717 	ldw	r2,-36(fp)
2009ad10:	1880051e 	bne	r3,r2,2009ad28 <altera_avalon_jtag_uart_read+0x13c>
2009ad14:	e0bffc17 	ldw	r2,-16(fp)
2009ad18:	10c00917 	ldw	r3,36(r2)
2009ad1c:	e0bffc17 	ldw	r2,-16(fp)
2009ad20:	10800117 	ldw	r2,4(r2)
2009ad24:	18bff736 	bltu	r3,r2,2009ad04 <__flash_rwdata_start+0xffffbf18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2009ad28:	e0bffc17 	ldw	r2,-16(fp)
2009ad2c:	10c00a17 	ldw	r3,40(r2)
2009ad30:	e0bff717 	ldw	r2,-36(fp)
2009ad34:	1880011e 	bne	r3,r2,2009ad3c <altera_avalon_jtag_uart_read+0x150>
      break;
2009ad38:	00000206 	br	2009ad44 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009ad3c:	e0bffe17 	ldw	r2,-8(fp)
2009ad40:	00bfb516 	blt	zero,r2,2009ac18 <__flash_rwdata_start+0xffffbe2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
2009ad44:	e0fff517 	ldw	r3,-44(fp)
2009ad48:	e0bffd17 	ldw	r2,-12(fp)
2009ad4c:	18801826 	beq	r3,r2,2009adb0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ad50:	0005303a 	rdctl	r2,status
2009ad54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009ad58:	e0fffa17 	ldw	r3,-24(fp)
2009ad5c:	00bfff84 	movi	r2,-2
2009ad60:	1884703a 	and	r2,r3,r2
2009ad64:	1001703a 	wrctl	status,r2
  
  return context;
2009ad68:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
2009ad6c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009ad70:	e0bffc17 	ldw	r2,-16(fp)
2009ad74:	10800817 	ldw	r2,32(r2)
2009ad78:	10c00054 	ori	r3,r2,1
2009ad7c:	e0bffc17 	ldw	r2,-16(fp)
2009ad80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009ad84:	e0bffc17 	ldw	r2,-16(fp)
2009ad88:	10800017 	ldw	r2,0(r2)
2009ad8c:	10800104 	addi	r2,r2,4
2009ad90:	1007883a 	mov	r3,r2
2009ad94:	e0bffc17 	ldw	r2,-16(fp)
2009ad98:	10800817 	ldw	r2,32(r2)
2009ad9c:	18800035 	stwio	r2,0(r3)
2009ada0:	e0bff917 	ldw	r2,-28(fp)
2009ada4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009ada8:	e0bffb17 	ldw	r2,-20(fp)
2009adac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
2009adb0:	e0fff517 	ldw	r3,-44(fp)
2009adb4:	e0bffd17 	ldw	r2,-12(fp)
2009adb8:	18800426 	beq	r3,r2,2009adcc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
2009adbc:	e0fff517 	ldw	r3,-44(fp)
2009adc0:	e0bffd17 	ldw	r2,-12(fp)
2009adc4:	1885c83a 	sub	r2,r3,r2
2009adc8:	00000606 	br	2009ade4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
2009adcc:	e0bfff17 	ldw	r2,-4(fp)
2009add0:	1090000c 	andi	r2,r2,16384
2009add4:	10000226 	beq	r2,zero,2009ade0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2009add8:	00bffd44 	movi	r2,-11
2009addc:	00000106 	br	2009ade4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
2009ade0:	00bffec4 	movi	r2,-5
}
2009ade4:	e037883a 	mov	sp,fp
2009ade8:	dfc00117 	ldw	ra,4(sp)
2009adec:	df000017 	ldw	fp,0(sp)
2009adf0:	dec00204 	addi	sp,sp,8
2009adf4:	f800283a 	ret

2009adf8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2009adf8:	defff304 	addi	sp,sp,-52
2009adfc:	dfc00c15 	stw	ra,48(sp)
2009ae00:	df000b15 	stw	fp,44(sp)
2009ae04:	df000b04 	addi	fp,sp,44
2009ae08:	e13ffc15 	stw	r4,-16(fp)
2009ae0c:	e17ffd15 	stw	r5,-12(fp)
2009ae10:	e1bffe15 	stw	r6,-8(fp)
2009ae14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2009ae18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
2009ae1c:	e0bffd17 	ldw	r2,-12(fp)
2009ae20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2009ae24:	00003806 	br	2009af08 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2009ae28:	e0bffc17 	ldw	r2,-16(fp)
2009ae2c:	10800c17 	ldw	r2,48(r2)
2009ae30:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
2009ae34:	e0bffc17 	ldw	r2,-16(fp)
2009ae38:	10800d17 	ldw	r2,52(r2)
2009ae3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
2009ae40:	e0fff817 	ldw	r3,-32(fp)
2009ae44:	e0bff517 	ldw	r2,-44(fp)
2009ae48:	1880062e 	bgeu	r3,r2,2009ae64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
2009ae4c:	e0fff517 	ldw	r3,-44(fp)
2009ae50:	e0bff817 	ldw	r2,-32(fp)
2009ae54:	1885c83a 	sub	r2,r3,r2
2009ae58:	10bfffc4 	addi	r2,r2,-1
2009ae5c:	e0bff615 	stw	r2,-40(fp)
2009ae60:	00000b06 	br	2009ae90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2009ae64:	e0bff517 	ldw	r2,-44(fp)
2009ae68:	10000526 	beq	r2,zero,2009ae80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
2009ae6c:	00c20004 	movi	r3,2048
2009ae70:	e0bff817 	ldw	r2,-32(fp)
2009ae74:	1885c83a 	sub	r2,r3,r2
2009ae78:	e0bff615 	stw	r2,-40(fp)
2009ae7c:	00000406 	br	2009ae90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
2009ae80:	00c1ffc4 	movi	r3,2047
2009ae84:	e0bff817 	ldw	r2,-32(fp)
2009ae88:	1885c83a 	sub	r2,r3,r2
2009ae8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
2009ae90:	e0bff617 	ldw	r2,-40(fp)
2009ae94:	1000011e 	bne	r2,zero,2009ae9c <altera_avalon_jtag_uart_write+0xa4>
        break;
2009ae98:	00001d06 	br	2009af10 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
2009ae9c:	e0fffe17 	ldw	r3,-8(fp)
2009aea0:	e0bff617 	ldw	r2,-40(fp)
2009aea4:	1880022e 	bgeu	r3,r2,2009aeb0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2009aea8:	e0bffe17 	ldw	r2,-8(fp)
2009aeac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
2009aeb0:	e0bff817 	ldw	r2,-32(fp)
2009aeb4:	10820e04 	addi	r2,r2,2104
2009aeb8:	e0fffc17 	ldw	r3,-16(fp)
2009aebc:	1885883a 	add	r2,r3,r2
2009aec0:	1009883a 	mov	r4,r2
2009aec4:	e17ffd17 	ldw	r5,-12(fp)
2009aec8:	e1bff617 	ldw	r6,-40(fp)
2009aecc:	008bf180 	call	2008bf18 <memcpy>
      ptr   += n;
2009aed0:	e0fffd17 	ldw	r3,-12(fp)
2009aed4:	e0bff617 	ldw	r2,-40(fp)
2009aed8:	1885883a 	add	r2,r3,r2
2009aedc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
2009aee0:	e0fffe17 	ldw	r3,-8(fp)
2009aee4:	e0bff617 	ldw	r2,-40(fp)
2009aee8:	1885c83a 	sub	r2,r3,r2
2009aeec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009aef0:	e0fff817 	ldw	r3,-32(fp)
2009aef4:	e0bff617 	ldw	r2,-40(fp)
2009aef8:	1885883a 	add	r2,r3,r2
2009aefc:	10c1ffcc 	andi	r3,r2,2047
2009af00:	e0bffc17 	ldw	r2,-16(fp)
2009af04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2009af08:	e0bffe17 	ldw	r2,-8(fp)
2009af0c:	00bfc616 	blt	zero,r2,2009ae28 <__flash_rwdata_start+0xffffc03c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009af10:	0005303a 	rdctl	r2,status
2009af14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009af18:	e0fffa17 	ldw	r3,-24(fp)
2009af1c:	00bfff84 	movi	r2,-2
2009af20:	1884703a 	and	r2,r3,r2
2009af24:	1001703a 	wrctl	status,r2
  
  return context;
2009af28:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
2009af2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009af30:	e0bffc17 	ldw	r2,-16(fp)
2009af34:	10800817 	ldw	r2,32(r2)
2009af38:	10c00094 	ori	r3,r2,2
2009af3c:	e0bffc17 	ldw	r2,-16(fp)
2009af40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009af44:	e0bffc17 	ldw	r2,-16(fp)
2009af48:	10800017 	ldw	r2,0(r2)
2009af4c:	10800104 	addi	r2,r2,4
2009af50:	1007883a 	mov	r3,r2
2009af54:	e0bffc17 	ldw	r2,-16(fp)
2009af58:	10800817 	ldw	r2,32(r2)
2009af5c:	18800035 	stwio	r2,0(r3)
2009af60:	e0bff917 	ldw	r2,-28(fp)
2009af64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009af68:	e0bffb17 	ldw	r2,-20(fp)
2009af6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
2009af70:	e0bffe17 	ldw	r2,-8(fp)
2009af74:	0080120e 	bge	zero,r2,2009afc0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
2009af78:	e0bfff17 	ldw	r2,-4(fp)
2009af7c:	1090000c 	andi	r2,r2,16384
2009af80:	10000126 	beq	r2,zero,2009af88 <altera_avalon_jtag_uart_write+0x190>
        break;
2009af84:	00001006 	br	2009afc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
2009af88:	0001883a 	nop
2009af8c:	e0bffc17 	ldw	r2,-16(fp)
2009af90:	10c00d17 	ldw	r3,52(r2)
2009af94:	e0bff517 	ldw	r2,-44(fp)
2009af98:	1880051e 	bne	r3,r2,2009afb0 <altera_avalon_jtag_uart_write+0x1b8>
2009af9c:	e0bffc17 	ldw	r2,-16(fp)
2009afa0:	10c00917 	ldw	r3,36(r2)
2009afa4:	e0bffc17 	ldw	r2,-16(fp)
2009afa8:	10800117 	ldw	r2,4(r2)
2009afac:	18bff736 	bltu	r3,r2,2009af8c <__flash_rwdata_start+0xffffc1a0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
2009afb0:	e0bffc17 	ldw	r2,-16(fp)
2009afb4:	10800917 	ldw	r2,36(r2)
2009afb8:	10000126 	beq	r2,zero,2009afc0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
2009afbc:	00000206 	br	2009afc8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
2009afc0:	e0bffe17 	ldw	r2,-8(fp)
2009afc4:	00bf9716 	blt	zero,r2,2009ae24 <__flash_rwdata_start+0xffffc038>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2009afc8:	e0fffd17 	ldw	r3,-12(fp)
2009afcc:	e0bff717 	ldw	r2,-36(fp)
2009afd0:	18800426 	beq	r3,r2,2009afe4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2009afd4:	e0fffd17 	ldw	r3,-12(fp)
2009afd8:	e0bff717 	ldw	r2,-36(fp)
2009afdc:	1885c83a 	sub	r2,r3,r2
2009afe0:	00000606 	br	2009affc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2009afe4:	e0bfff17 	ldw	r2,-4(fp)
2009afe8:	1090000c 	andi	r2,r2,16384
2009afec:	10000226 	beq	r2,zero,2009aff8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
2009aff0:	00bffd44 	movi	r2,-11
2009aff4:	00000106 	br	2009affc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2009aff8:	00bffec4 	movi	r2,-5
}
2009affc:	e037883a 	mov	sp,fp
2009b000:	dfc00117 	ldw	ra,4(sp)
2009b004:	df000017 	ldw	fp,0(sp)
2009b008:	dec00204 	addi	sp,sp,8
2009b00c:	f800283a 	ret

2009b010 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
2009b010:	defffe04 	addi	sp,sp,-8
2009b014:	df000115 	stw	fp,4(sp)
2009b018:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
2009b01c:	00800034 	movhi	r2,0
2009b020:	108a9e04 	addi	r2,r2,10872
2009b024:	10800017 	ldw	r2,0(r2)
2009b028:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
2009b02c:	00800034 	movhi	r2,0
2009b030:	108a9f04 	addi	r2,r2,10876
2009b034:	10800017 	ldw	r2,0(r2)
2009b038:	1000021e 	bne	r2,zero,2009b044 <alt_timestamp_start+0x34>
  {
    return -1;
2009b03c:	00bfffc4 	movi	r2,-1
2009b040:	00001106 	br	2009b088 <alt_timestamp_start+0x78>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
2009b044:	e0bfff17 	ldw	r2,-4(fp)
2009b048:	10800104 	addi	r2,r2,4
2009b04c:	00c00204 	movi	r3,8
2009b050:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
2009b054:	e0bfff17 	ldw	r2,-4(fp)
2009b058:	10800204 	addi	r2,r2,8
2009b05c:	00ffffd4 	movui	r3,65535
2009b060:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
2009b064:	e0bfff17 	ldw	r2,-4(fp)
2009b068:	10800304 	addi	r2,r2,12
2009b06c:	00ffffd4 	movui	r3,65535
2009b070:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
2009b074:	e0bfff17 	ldw	r2,-4(fp)
2009b078:	10800104 	addi	r2,r2,4
2009b07c:	00c00104 	movi	r3,4
2009b080:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
2009b084:	0005883a 	mov	r2,zero
}
2009b088:	e037883a 	mov	sp,fp
2009b08c:	df000017 	ldw	fp,0(sp)
2009b090:	dec00104 	addi	sp,sp,4
2009b094:	f800283a 	ret

2009b098 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
2009b098:	defffc04 	addi	sp,sp,-16
2009b09c:	df000315 	stw	fp,12(sp)
2009b0a0:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
2009b0a4:	00800034 	movhi	r2,0
2009b0a8:	108a9e04 	addi	r2,r2,10872
2009b0ac:	10800017 	ldw	r2,0(r2)
2009b0b0:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
2009b0b4:	00800034 	movhi	r2,0
2009b0b8:	108a9f04 	addi	r2,r2,10876
2009b0bc:	10800017 	ldw	r2,0(r2)
2009b0c0:	1000021e 	bne	r2,zero,2009b0cc <alt_timestamp+0x34>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
2009b0c4:	00bfffc4 	movi	r2,-1
2009b0c8:	00001306 	br	2009b118 <alt_timestamp+0x80>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
2009b0cc:	e0bffd17 	ldw	r2,-12(fp)
2009b0d0:	10800404 	addi	r2,r2,16
2009b0d4:	0007883a 	mov	r3,zero
2009b0d8:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
2009b0dc:	e0bffd17 	ldw	r2,-12(fp)
2009b0e0:	10800404 	addi	r2,r2,16
2009b0e4:	10800037 	ldwio	r2,0(r2)
2009b0e8:	10bfffcc 	andi	r2,r2,65535
2009b0ec:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
2009b0f0:	e0bffd17 	ldw	r2,-12(fp)
2009b0f4:	10800504 	addi	r2,r2,20
2009b0f8:	10800037 	ldwio	r2,0(r2)
2009b0fc:	10bfffcc 	andi	r2,r2,65535
2009b100:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
2009b104:	e0bfff17 	ldw	r2,-4(fp)
2009b108:	1006943a 	slli	r3,r2,16
2009b10c:	e0bffe17 	ldw	r2,-8(fp)
2009b110:	1884b03a 	or	r2,r3,r2
2009b114:	0084303a 	nor	r2,zero,r2
#endif
  }
}
2009b118:	e037883a 	mov	sp,fp
2009b11c:	df000017 	ldw	fp,0(sp)
2009b120:	dec00104 	addi	sp,sp,4
2009b124:	f800283a 	ret

2009b128 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
2009b128:	deffff04 	addi	sp,sp,-4
2009b12c:	df000015 	stw	fp,0(sp)
2009b130:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
2009b134:	00800034 	movhi	r2,0
2009b138:	108a9f04 	addi	r2,r2,10876
2009b13c:	10800017 	ldw	r2,0(r2)
}
2009b140:	e037883a 	mov	sp,fp
2009b144:	df000017 	ldw	fp,0(sp)
2009b148:	dec00104 	addi	sp,sp,4
2009b14c:	f800283a 	ret

2009b150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009b150:	defffe04 	addi	sp,sp,-8
2009b154:	dfc00115 	stw	ra,4(sp)
2009b158:	df000015 	stw	fp,0(sp)
2009b15c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009b160:	00800034 	movhi	r2,0
2009b164:	108a7b04 	addi	r2,r2,10732
2009b168:	10800017 	ldw	r2,0(r2)
2009b16c:	10000526 	beq	r2,zero,2009b184 <alt_get_errno+0x34>
2009b170:	00800034 	movhi	r2,0
2009b174:	108a7b04 	addi	r2,r2,10732
2009b178:	10800017 	ldw	r2,0(r2)
2009b17c:	103ee83a 	callr	r2
2009b180:	00000206 	br	2009b18c <alt_get_errno+0x3c>
2009b184:	00800034 	movhi	r2,0
2009b188:	108a9404 	addi	r2,r2,10832
}
2009b18c:	e037883a 	mov	sp,fp
2009b190:	dfc00117 	ldw	ra,4(sp)
2009b194:	df000017 	ldw	fp,0(sp)
2009b198:	dec00204 	addi	sp,sp,8
2009b19c:	f800283a 	ret

2009b1a0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
2009b1a0:	defffc04 	addi	sp,sp,-16
2009b1a4:	df000315 	stw	fp,12(sp)
2009b1a8:	df000304 	addi	fp,sp,12
2009b1ac:	e13ffd15 	stw	r4,-12(fp)
2009b1b0:	e17ffe15 	stw	r5,-8(fp)
2009b1b4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2009b1b8:	e0bffd17 	ldw	r2,-12(fp)
2009b1bc:	10800037 	ldwio	r2,0(r2)
2009b1c0:	1080010c 	andi	r2,r2,4
2009b1c4:	10000226 	beq	r2,zero,2009b1d0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
2009b1c8:	00bff904 	movi	r2,-28
2009b1cc:	00001506 	br	2009b224 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
2009b1d0:	e0bfff17 	ldw	r2,-4(fp)
2009b1d4:	10800017 	ldw	r2,0(r2)
2009b1d8:	1007883a 	mov	r3,r2
2009b1dc:	e0bffe17 	ldw	r2,-8(fp)
2009b1e0:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2009b1e4:	e0bffe17 	ldw	r2,-8(fp)
2009b1e8:	10800104 	addi	r2,r2,4
2009b1ec:	e0ffff17 	ldw	r3,-4(fp)
2009b1f0:	18c00117 	ldw	r3,4(r3)
2009b1f4:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
2009b1f8:	e0bffe17 	ldw	r2,-8(fp)
2009b1fc:	10800204 	addi	r2,r2,8
2009b200:	e0ffff17 	ldw	r3,-4(fp)
2009b204:	18c00217 	ldw	r3,8(r3)
2009b208:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2009b20c:	e0bffe17 	ldw	r2,-8(fp)
2009b210:	10800304 	addi	r2,r2,12
2009b214:	e0ffff17 	ldw	r3,-4(fp)
2009b218:	18c00317 	ldw	r3,12(r3)
2009b21c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
2009b220:	0005883a 	mov	r2,zero
}
2009b224:	e037883a 	mov	sp,fp
2009b228:	df000017 	ldw	fp,0(sp)
2009b22c:	dec00104 	addi	sp,sp,4
2009b230:	f800283a 	ret

2009b234 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2009b234:	defffc04 	addi	sp,sp,-16
2009b238:	df000315 	stw	fp,12(sp)
2009b23c:	df000304 	addi	fp,sp,12
2009b240:	e13ffd15 	stw	r4,-12(fp)
2009b244:	e17ffe15 	stw	r5,-8(fp)
2009b248:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2009b24c:	e0bffd17 	ldw	r2,-12(fp)
2009b250:	10800037 	ldwio	r2,0(r2)
2009b254:	1080010c 	andi	r2,r2,4
2009b258:	10000226 	beq	r2,zero,2009b264 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2009b25c:	00bff904 	movi	r2,-28
2009b260:	00003b06 	br	2009b350 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2009b264:	e0bfff17 	ldw	r2,-4(fp)
2009b268:	10800017 	ldw	r2,0(r2)
2009b26c:	1007883a 	mov	r3,r2
2009b270:	e0bffe17 	ldw	r2,-8(fp)
2009b274:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
2009b278:	e0bffe17 	ldw	r2,-8(fp)
2009b27c:	10800104 	addi	r2,r2,4
2009b280:	e0ffff17 	ldw	r3,-4(fp)
2009b284:	18c00117 	ldw	r3,4(r3)
2009b288:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
2009b28c:	e0bffe17 	ldw	r2,-8(fp)
2009b290:	10800204 	addi	r2,r2,8
2009b294:	e0ffff17 	ldw	r3,-4(fp)
2009b298:	18c00217 	ldw	r3,8(r3)
2009b29c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
2009b2a0:	e0bffe17 	ldw	r2,-8(fp)
2009b2a4:	10800304 	addi	r2,r2,12
2009b2a8:	e0ffff17 	ldw	r3,-4(fp)
2009b2ac:	18c0030b 	ldhu	r3,12(r3)
2009b2b0:	18ffffcc 	andi	r3,r3,65535
2009b2b4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2009b2b8:	e0bffe17 	ldw	r2,-8(fp)
2009b2bc:	10800384 	addi	r2,r2,14
2009b2c0:	e0ffff17 	ldw	r3,-4(fp)
2009b2c4:	18c00383 	ldbu	r3,14(r3)
2009b2c8:	18c03fcc 	andi	r3,r3,255
2009b2cc:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
2009b2d0:	e0bffe17 	ldw	r2,-8(fp)
2009b2d4:	108003c4 	addi	r2,r2,15
2009b2d8:	e0ffff17 	ldw	r3,-4(fp)
2009b2dc:	18c003c3 	ldbu	r3,15(r3)
2009b2e0:	18c03fcc 	andi	r3,r3,255
2009b2e4:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2009b2e8:	e0bffe17 	ldw	r2,-8(fp)
2009b2ec:	10800404 	addi	r2,r2,16
2009b2f0:	e0ffff17 	ldw	r3,-4(fp)
2009b2f4:	18c0040b 	ldhu	r3,16(r3)
2009b2f8:	18ffffcc 	andi	r3,r3,65535
2009b2fc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
2009b300:	e0bffe17 	ldw	r2,-8(fp)
2009b304:	10800484 	addi	r2,r2,18
2009b308:	e0ffff17 	ldw	r3,-4(fp)
2009b30c:	18c0048b 	ldhu	r3,18(r3)
2009b310:	18ffffcc 	andi	r3,r3,65535
2009b314:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2009b318:	e0bffe17 	ldw	r2,-8(fp)
2009b31c:	10800504 	addi	r2,r2,20
2009b320:	0007883a 	mov	r3,zero
2009b324:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
2009b328:	e0bffe17 	ldw	r2,-8(fp)
2009b32c:	10800604 	addi	r2,r2,24
2009b330:	0007883a 	mov	r3,zero
2009b334:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
2009b338:	e0bffe17 	ldw	r2,-8(fp)
2009b33c:	10800704 	addi	r2,r2,28
2009b340:	e0ffff17 	ldw	r3,-4(fp)
2009b344:	18c00717 	ldw	r3,28(r3)
2009b348:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2009b34c:	0005883a 	mov	r2,zero
}
2009b350:	e037883a 	mov	sp,fp
2009b354:	df000017 	ldw	fp,0(sp)
2009b358:	dec00104 	addi	sp,sp,4
2009b35c:	f800283a 	ret

2009b360 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
2009b360:	defff804 	addi	sp,sp,-32
2009b364:	dfc00715 	stw	ra,28(sp)
2009b368:	df000615 	stw	fp,24(sp)
2009b36c:	df000604 	addi	fp,sp,24
2009b370:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
2009b374:	e0bfff17 	ldw	r2,-4(fp)
2009b378:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2009b37c:	e0bffa17 	ldw	r2,-24(fp)
2009b380:	10801783 	ldbu	r2,94(r2)
2009b384:	10803fcc 	andi	r2,r2,255
2009b388:	10001126 	beq	r2,zero,2009b3d0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2009b38c:	e0bffa17 	ldw	r2,-24(fp)
2009b390:	10800617 	ldw	r2,24(r2)
2009b394:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
2009b398:	1007883a 	mov	r3,r2
2009b39c:	00bffdc4 	movi	r2,-9
2009b3a0:	1884703a 	and	r2,r3,r2
2009b3a4:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2009b3a8:	e0bffa17 	ldw	r2,-24(fp)
2009b3ac:	10800617 	ldw	r2,24(r2)
2009b3b0:	e0fffb17 	ldw	r3,-20(fp)
2009b3b4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
2009b3b8:	e0bffa17 	ldw	r2,-24(fp)
2009b3bc:	10800617 	ldw	r2,24(r2)
2009b3c0:	10800404 	addi	r2,r2,16
2009b3c4:	00c00044 	movi	r3,1
2009b3c8:	10c00035 	stwio	r3,0(r2)
2009b3cc:	00001106 	br	2009b414 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009b3d0:	e0bffa17 	ldw	r2,-24(fp)
2009b3d4:	10800317 	ldw	r2,12(r2)
2009b3d8:	10800104 	addi	r2,r2,4
2009b3dc:	10800037 	ldwio	r2,0(r2)
2009b3e0:	1007883a 	mov	r3,r2
2009b3e4:	00bffbc4 	movi	r2,-17
2009b3e8:	1884703a 	and	r2,r3,r2
2009b3ec:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009b3f0:	e0bffa17 	ldw	r2,-24(fp)
2009b3f4:	10800317 	ldw	r2,12(r2)
2009b3f8:	10800104 	addi	r2,r2,4
2009b3fc:	e0fffb17 	ldw	r3,-20(fp)
2009b400:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2009b404:	e0bffa17 	ldw	r2,-24(fp)
2009b408:	10800317 	ldw	r2,12(r2)
2009b40c:	00c08004 	movi	r3,512
2009b410:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2009b414:	e0bffa17 	ldw	r2,-24(fp)
2009b418:	10800b17 	ldw	r2,44(r2)
2009b41c:	10001226 	beq	r2,zero,2009b468 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b420:	0005303a 	rdctl	r2,status
2009b424:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b428:	e0fffd17 	ldw	r3,-12(fp)
2009b42c:	00bfff84 	movi	r2,-2
2009b430:	1884703a 	and	r2,r3,r2
2009b434:	1001703a 	wrctl	status,r2
  
  return context;
2009b438:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2009b43c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
2009b440:	e0bffa17 	ldw	r2,-24(fp)
2009b444:	10800b17 	ldw	r2,44(r2)
2009b448:	e0fffa17 	ldw	r3,-24(fp)
2009b44c:	18c00c17 	ldw	r3,48(r3)
2009b450:	1809883a 	mov	r4,r3
2009b454:	103ee83a 	callr	r2
2009b458:	e0bffc17 	ldw	r2,-16(fp)
2009b45c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b460:	e0bffe17 	ldw	r2,-8(fp)
2009b464:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
2009b468:	e0bffa17 	ldw	r2,-24(fp)
2009b46c:	10801783 	ldbu	r2,94(r2)
2009b470:	10803fcc 	andi	r2,r2,255
2009b474:	10000a26 	beq	r2,zero,2009b4a0 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2009b478:	e0bffa17 	ldw	r2,-24(fp)
2009b47c:	10800617 	ldw	r2,24(r2)
2009b480:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2009b484:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
2009b488:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
2009b48c:	e0bffa17 	ldw	r2,-24(fp)
2009b490:	10800617 	ldw	r2,24(r2)
2009b494:	e0fffb17 	ldw	r3,-20(fp)
2009b498:	10c00035 	stwio	r3,0(r2)
2009b49c:	00000b06 	br	2009b4cc <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009b4a0:	e0bffa17 	ldw	r2,-24(fp)
2009b4a4:	10800317 	ldw	r2,12(r2)
2009b4a8:	10800104 	addi	r2,r2,4
2009b4ac:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
2009b4b0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009b4b4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009b4b8:	e0bffa17 	ldw	r2,-24(fp)
2009b4bc:	10800317 	ldw	r2,12(r2)
2009b4c0:	10800104 	addi	r2,r2,4
2009b4c4:	e0fffb17 	ldw	r3,-20(fp)
2009b4c8:	10c00035 	stwio	r3,0(r2)
    }

    return;
2009b4cc:	0001883a 	nop
}
2009b4d0:	e037883a 	mov	sp,fp
2009b4d4:	dfc00117 	ldw	ra,4(sp)
2009b4d8:	df000017 	ldw	fp,0(sp)
2009b4dc:	dec00204 	addi	sp,sp,8
2009b4e0:	f800283a 	ret

2009b4e4 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009b4e4:	defffb04 	addi	sp,sp,-20
2009b4e8:	df000415 	stw	fp,16(sp)
2009b4ec:	df000404 	addi	fp,sp,16
2009b4f0:	e13ffc15 	stw	r4,-16(fp)
2009b4f4:	e17ffd15 	stw	r5,-12(fp)
2009b4f8:	e1bffe15 	stw	r6,-8(fp)
2009b4fc:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2009b500:	e0bffc17 	ldw	r2,-16(fp)
2009b504:	10c01217 	ldw	r3,72(r2)
2009b508:	e0800117 	ldw	r2,4(fp)
2009b50c:	18800436 	bltu	r3,r2,2009b520 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2009b510:	e0bffc17 	ldw	r2,-16(fp)
2009b514:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2009b518:	10803fcc 	andi	r2,r2,255
2009b51c:	10000226 	beq	r2,zero,2009b528 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2009b520:	00bffa84 	movi	r2,-22
2009b524:	00000e06 	br	2009b560 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
2009b528:	e0bffd17 	ldw	r2,-12(fp)
2009b52c:	e0fffe17 	ldw	r3,-8(fp)
2009b530:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2009b534:	e0bffd17 	ldw	r2,-12(fp)
2009b538:	e0ffff17 	ldw	r3,-4(fp)
2009b53c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009b540:	e0bffd17 	ldw	r2,-12(fp)
2009b544:	e0c00117 	ldw	r3,4(fp)
2009b548:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009b54c:	e0800217 	ldw	r2,8(fp)
2009b550:	10e00034 	orhi	r3,r2,32768
2009b554:	e0bffd17 	ldw	r2,-12(fp)
2009b558:	10c00315 	stw	r3,12(r2)
    
    return 0;
2009b55c:	0005883a 	mov	r2,zero
}
2009b560:	e037883a 	mov	sp,fp
2009b564:	df000017 	ldw	fp,0(sp)
2009b568:	dec00104 	addi	sp,sp,4
2009b56c:	f800283a 	ret

2009b570 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009b570:	defff604 	addi	sp,sp,-40
2009b574:	df000915 	stw	fp,36(sp)
2009b578:	df000904 	addi	fp,sp,36
2009b57c:	e13ff715 	stw	r4,-36(fp)
2009b580:	e17ff815 	stw	r5,-32(fp)
2009b584:	e1bff915 	stw	r6,-28(fp)
2009b588:	e1fffa15 	stw	r7,-24(fp)
2009b58c:	e1800317 	ldw	r6,12(fp)
2009b590:	e1400417 	ldw	r5,16(fp)
2009b594:	e1000517 	ldw	r4,20(fp)
2009b598:	e0c00617 	ldw	r3,24(fp)
2009b59c:	e0800717 	ldw	r2,28(fp)
2009b5a0:	e1bffb0d 	sth	r6,-20(fp)
2009b5a4:	e17ffc05 	stb	r5,-16(fp)
2009b5a8:	e13ffd05 	stb	r4,-12(fp)
2009b5ac:	e0fffe0d 	sth	r3,-8(fp)
2009b5b0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2009b5b4:	e0bff717 	ldw	r2,-36(fp)
2009b5b8:	10c01217 	ldw	r3,72(r2)
2009b5bc:	e0800117 	ldw	r2,4(fp)
2009b5c0:	18801936 	bltu	r3,r2,2009b628 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009b5c4:	e13ff717 	ldw	r4,-36(fp)
2009b5c8:	20801317 	ldw	r2,76(r4)
2009b5cc:	20c01417 	ldw	r3,80(r4)
2009b5d0:	e13ffe0b 	ldhu	r4,-8(fp)
2009b5d4:	213fffcc 	andi	r4,r4,65535
2009b5d8:	2015883a 	mov	r10,r4
2009b5dc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2009b5e0:	1ac01136 	bltu	r3,r11,2009b628 <alt_msgdma_construct_extended_descriptor+0xb8>
2009b5e4:	58c0011e 	bne	r11,r3,2009b5ec <alt_msgdma_construct_extended_descriptor+0x7c>
2009b5e8:	12800f36 	bltu	r2,r10,2009b628 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009b5ec:	e13ff717 	ldw	r4,-36(fp)
2009b5f0:	20801317 	ldw	r2,76(r4)
2009b5f4:	20c01417 	ldw	r3,80(r4)
2009b5f8:	e13fff0b 	ldhu	r4,-4(fp)
2009b5fc:	213fffcc 	andi	r4,r4,65535
2009b600:	2011883a 	mov	r8,r4
2009b604:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2009b608:	1a400736 	bltu	r3,r9,2009b628 <alt_msgdma_construct_extended_descriptor+0xb8>
2009b60c:	48c0011e 	bne	r9,r3,2009b614 <alt_msgdma_construct_extended_descriptor+0xa4>
2009b610:	12000536 	bltu	r2,r8,2009b628 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009b614:	e0bff717 	ldw	r2,-36(fp)
2009b618:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009b61c:	10803fcc 	andi	r2,r2,255
2009b620:	10800060 	cmpeqi	r2,r2,1
2009b624:	1000021e 	bne	r2,zero,2009b630 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2009b628:	00bffa84 	movi	r2,-22
2009b62c:	00002106 	br	2009b6b4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
2009b630:	e0bff817 	ldw	r2,-32(fp)
2009b634:	e0fff917 	ldw	r3,-28(fp)
2009b638:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
2009b63c:	e0bff817 	ldw	r2,-32(fp)
2009b640:	e0fffa17 	ldw	r3,-24(fp)
2009b644:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009b648:	e0bff817 	ldw	r2,-32(fp)
2009b64c:	e0c00117 	ldw	r3,4(fp)
2009b650:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2009b654:	e0bff817 	ldw	r2,-32(fp)
2009b658:	e0fffb0b 	ldhu	r3,-20(fp)
2009b65c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
2009b660:	e0bff817 	ldw	r2,-32(fp)
2009b664:	e0fffc03 	ldbu	r3,-16(fp)
2009b668:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
2009b66c:	e0bff817 	ldw	r2,-32(fp)
2009b670:	e0fffd03 	ldbu	r3,-12(fp)
2009b674:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
2009b678:	e0bff817 	ldw	r2,-32(fp)
2009b67c:	e0fffe0b 	ldhu	r3,-8(fp)
2009b680:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
2009b684:	e0bff817 	ldw	r2,-32(fp)
2009b688:	e0ffff0b 	ldhu	r3,-4(fp)
2009b68c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
2009b690:	e0bff817 	ldw	r2,-32(fp)
2009b694:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
2009b698:	e0bff817 	ldw	r2,-32(fp)
2009b69c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009b6a0:	e0800217 	ldw	r2,8(fp)
2009b6a4:	10e00034 	orhi	r3,r2,32768
2009b6a8:	e0bff817 	ldw	r2,-32(fp)
2009b6ac:	10c00715 	stw	r3,28(r2)

  return 0 ;
2009b6b0:	0005883a 	mov	r2,zero

}
2009b6b4:	e037883a 	mov	sp,fp
2009b6b8:	df000017 	ldw	fp,0(sp)
2009b6bc:	dec00104 	addi	sp,sp,4
2009b6c0:	f800283a 	ret

2009b6c4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009b6c4:	defff004 	addi	sp,sp,-64
2009b6c8:	dfc00f15 	stw	ra,60(sp)
2009b6cc:	df000e15 	stw	fp,56(sp)
2009b6d0:	df000e04 	addi	fp,sp,56
2009b6d4:	e13ffd15 	stw	r4,-12(fp)
2009b6d8:	e17ffe15 	stw	r5,-8(fp)
2009b6dc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
2009b6e0:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
2009b6e4:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
2009b6e8:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b6ec:	e0bffd17 	ldw	r2,-12(fp)
2009b6f0:	10800317 	ldw	r2,12(r2)
2009b6f4:	10800204 	addi	r2,r2,8
2009b6f8:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2009b6fc:	10bfffcc 	andi	r2,r2,65535
2009b700:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b704:	e0bffd17 	ldw	r2,-12(fp)
2009b708:	10800317 	ldw	r2,12(r2)
2009b70c:	10800204 	addi	r2,r2,8
2009b710:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2009b714:	1004d43a 	srli	r2,r2,16
2009b718:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b71c:	e0bffd17 	ldw	r2,-12(fp)
2009b720:	10800917 	ldw	r2,36(r2)
2009b724:	e0fff617 	ldw	r3,-40(fp)
2009b728:	1880042e 	bgeu	r3,r2,2009b73c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2009b72c:	e0bffd17 	ldw	r2,-12(fp)
2009b730:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b734:	e0fff517 	ldw	r3,-44(fp)
2009b738:	18800236 	bltu	r3,r2,2009b744 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
2009b73c:	00bff904 	movi	r2,-28
2009b740:	00008f06 	br	2009b980 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009b744:	00800804 	movi	r2,32
2009b748:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b74c:	0005303a 	rdctl	r2,status
2009b750:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b754:	e0fff717 	ldw	r3,-36(fp)
2009b758:	00bfff84 	movi	r2,-2
2009b75c:	1884703a 	and	r2,r3,r2
2009b760:	1001703a 	wrctl	status,r2
  
  return context;
2009b764:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2009b768:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b76c:	e0bffd17 	ldw	r2,-12(fp)
2009b770:	10800317 	ldw	r2,12(r2)
2009b774:	10800104 	addi	r2,r2,4
2009b778:	e0fff317 	ldw	r3,-52(fp)
2009b77c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009b780:	e0bffd17 	ldw	r2,-12(fp)
2009b784:	10800317 	ldw	r2,12(r2)
2009b788:	e0fffd17 	ldw	r3,-12(fp)
2009b78c:	18c00317 	ldw	r3,12(r3)
2009b790:	18c00037 	ldwio	r3,0(r3)
2009b794:	10c00035 	stwio	r3,0(r2)
2009b798:	e0bff417 	ldw	r2,-48(fp)
2009b79c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b7a0:	e0bff817 	ldw	r2,-32(fp)
2009b7a4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2009b7a8:	e0bffe17 	ldw	r2,-8(fp)
2009b7ac:	10001a26 	beq	r2,zero,2009b818 <alt_msgdma_descriptor_async_transfer+0x154>
2009b7b0:	e0bfff17 	ldw	r2,-4(fp)
2009b7b4:	1000181e 	bne	r2,zero,2009b818 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b7b8:	00000d06 	br	2009b7f0 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009b7bc:	01000044 	movi	r4,1
2009b7c0:	009d1200 	call	2009d120 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b7c4:	e0bff20b 	ldhu	r2,-56(fp)
2009b7c8:	1084e230 	cmpltui	r2,r2,5000
2009b7cc:	1000051e 	bne	r2,zero,2009b7e4 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
2009b7d0:	01000034 	movhi	r4,0
2009b7d4:	21027e04 	addi	r4,r4,2552
2009b7d8:	009db600 	call	2009db60 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009b7dc:	00bff084 	movi	r2,-62
2009b7e0:	00006706 	br	2009b980 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2009b7e4:	e0bff20b 	ldhu	r2,-56(fp)
2009b7e8:	10800044 	addi	r2,r2,1
2009b7ec:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009b7f0:	e0bffd17 	ldw	r2,-12(fp)
2009b7f4:	10c00317 	ldw	r3,12(r2)
2009b7f8:	e0bffd17 	ldw	r2,-12(fp)
2009b7fc:	10800417 	ldw	r2,16(r2)
2009b800:	1809883a 	mov	r4,r3
2009b804:	100b883a 	mov	r5,r2
2009b808:	e1bffe17 	ldw	r6,-8(fp)
2009b80c:	009b1a00 	call	2009b1a0 <alt_msgdma_write_standard_descriptor>
2009b810:	103fea1e 	bne	r2,zero,2009b7bc <__flash_rwdata_start+0xffffc9d0>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
2009b814:	00001f06 	br	2009b894 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009b818:	e0bffe17 	ldw	r2,-8(fp)
2009b81c:	10001b1e 	bne	r2,zero,2009b88c <alt_msgdma_descriptor_async_transfer+0x1c8>
2009b820:	e0bfff17 	ldw	r2,-4(fp)
2009b824:	10001926 	beq	r2,zero,2009b88c <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
2009b828:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009b82c:	00000d06 	br	2009b864 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009b830:	01000044 	movi	r4,1
2009b834:	009d1200 	call	2009d120 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009b838:	e0bff20b 	ldhu	r2,-56(fp)
2009b83c:	1084e230 	cmpltui	r2,r2,5000
2009b840:	1000051e 	bne	r2,zero,2009b858 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
2009b844:	01000034 	movhi	r4,0
2009b848:	21029404 	addi	r4,r4,2640
2009b84c:	009db600 	call	2009db60 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009b850:	00bff084 	movi	r2,-62
2009b854:	00004a06 	br	2009b980 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
2009b858:	e0bff20b 	ldhu	r2,-56(fp)
2009b85c:	10800044 	addi	r2,r2,1
2009b860:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009b864:	e0bffd17 	ldw	r2,-12(fp)
2009b868:	10c00317 	ldw	r3,12(r2)
2009b86c:	e0bffd17 	ldw	r2,-12(fp)
2009b870:	10800417 	ldw	r2,16(r2)
2009b874:	1809883a 	mov	r4,r3
2009b878:	100b883a 	mov	r5,r2
2009b87c:	e1bfff17 	ldw	r6,-4(fp)
2009b880:	009b2340 	call	2009b234 <alt_msgdma_write_extended_descriptor>
2009b884:	103fea1e 	bne	r2,zero,2009b830 <__flash_rwdata_start+0xffffca44>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009b888:	00000206 	br	2009b894 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2009b88c:	00bfffc4 	movi	r2,-1
2009b890:	00003b06 	br	2009b980 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2009b894:	e0bffd17 	ldw	r2,-12(fp)
2009b898:	10800b17 	ldw	r2,44(r2)
2009b89c:	10001c26 	beq	r2,zero,2009b910 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
2009b8a0:	e0bffd17 	ldw	r2,-12(fp)
2009b8a4:	10c00d17 	ldw	r3,52(r2)
2009b8a8:	e0bff317 	ldw	r2,-52(fp)
2009b8ac:	1884b03a 	or	r2,r3,r2
2009b8b0:	10800514 	ori	r2,r2,20
2009b8b4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2009b8b8:	e0fff317 	ldw	r3,-52(fp)
2009b8bc:	00bff7c4 	movi	r2,-33
2009b8c0:	1884703a 	and	r2,r3,r2
2009b8c4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b8c8:	0005303a 	rdctl	r2,status
2009b8cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b8d0:	e0fff917 	ldw	r3,-28(fp)
2009b8d4:	00bfff84 	movi	r2,-2
2009b8d8:	1884703a 	and	r2,r3,r2
2009b8dc:	1001703a 	wrctl	status,r2
  
  return context;
2009b8e0:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
2009b8e4:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b8e8:	e0bffd17 	ldw	r2,-12(fp)
2009b8ec:	10800317 	ldw	r2,12(r2)
2009b8f0:	10800104 	addi	r2,r2,4
2009b8f4:	e0fff317 	ldw	r3,-52(fp)
2009b8f8:	10c00035 	stwio	r3,0(r2)
2009b8fc:	e0bff417 	ldw	r2,-48(fp)
2009b900:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b904:	e0bffa17 	ldw	r2,-24(fp)
2009b908:	1001703a 	wrctl	status,r2
2009b90c:	00001b06 	br	2009b97c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
2009b910:	e0bffd17 	ldw	r2,-12(fp)
2009b914:	10c00d17 	ldw	r3,52(r2)
2009b918:	e0bff317 	ldw	r2,-52(fp)
2009b91c:	1884b03a 	or	r2,r3,r2
2009b920:	10800114 	ori	r2,r2,4
2009b924:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
2009b928:	e0fff317 	ldw	r3,-52(fp)
2009b92c:	00bff3c4 	movi	r2,-49
2009b930:	1884703a 	and	r2,r3,r2
2009b934:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009b938:	0005303a 	rdctl	r2,status
2009b93c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009b940:	e0fffb17 	ldw	r3,-20(fp)
2009b944:	00bfff84 	movi	r2,-2
2009b948:	1884703a 	and	r2,r3,r2
2009b94c:	1001703a 	wrctl	status,r2
  
  return context;
2009b950:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
2009b954:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009b958:	e0bffd17 	ldw	r2,-12(fp)
2009b95c:	10800317 	ldw	r2,12(r2)
2009b960:	10800104 	addi	r2,r2,4
2009b964:	e0fff317 	ldw	r3,-52(fp)
2009b968:	10c00035 	stwio	r3,0(r2)
2009b96c:	e0bff417 	ldw	r2,-48(fp)
2009b970:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009b974:	e0bffc17 	ldw	r2,-16(fp)
2009b978:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2009b97c:	0005883a 	mov	r2,zero
}
2009b980:	e037883a 	mov	sp,fp
2009b984:	dfc00117 	ldw	ra,4(sp)
2009b988:	df000017 	ldw	fp,0(sp)
2009b98c:	dec00204 	addi	sp,sp,8
2009b990:	f800283a 	ret

2009b994 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
2009b994:	defff004 	addi	sp,sp,-64
2009b998:	dfc00f15 	stw	ra,60(sp)
2009b99c:	df000e15 	stw	fp,56(sp)
2009b9a0:	df000e04 	addi	fp,sp,56
2009b9a4:	e13ffd15 	stw	r4,-12(fp)
2009b9a8:	e17ffe15 	stw	r5,-8(fp)
2009b9ac:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
2009b9b0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
2009b9b4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
2009b9b8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
2009b9bc:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b9c0:	e0bffd17 	ldw	r2,-12(fp)
2009b9c4:	10800317 	ldw	r2,12(r2)
2009b9c8:	10800204 	addi	r2,r2,8
2009b9cc:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2009b9d0:	10bfffcc 	andi	r2,r2,65535
2009b9d4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009b9d8:	e0bffd17 	ldw	r2,-12(fp)
2009b9dc:	10800317 	ldw	r2,12(r2)
2009b9e0:	10800204 	addi	r2,r2,8
2009b9e4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2009b9e8:	1004d43a 	srli	r2,r2,16
2009b9ec:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
2009b9f0:	00807804 	movi	r2,480
2009b9f4:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009b9f8:	00001906 	br	2009ba60 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
2009b9fc:	01000044 	movi	r4,1
2009ba00:	009d1200 	call	2009d120 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009ba04:	e0bff30b 	ldhu	r2,-52(fp)
2009ba08:	1084e230 	cmpltui	r2,r2,5000
2009ba0c:	1000051e 	bne	r2,zero,2009ba24 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2009ba10:	01000034 	movhi	r4,0
2009ba14:	2102aa04 	addi	r4,r4,2728
2009ba18:	009db600 	call	2009db60 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
2009ba1c:	00bff084 	movi	r2,-62
2009ba20:	0000b506 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
2009ba24:	e0bff30b 	ldhu	r2,-52(fp)
2009ba28:	10800044 	addi	r2,r2,1
2009ba2c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009ba30:	e0bffd17 	ldw	r2,-12(fp)
2009ba34:	10800317 	ldw	r2,12(r2)
2009ba38:	10800204 	addi	r2,r2,8
2009ba3c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
2009ba40:	10bfffcc 	andi	r2,r2,65535
2009ba44:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009ba48:	e0bffd17 	ldw	r2,-12(fp)
2009ba4c:	10800317 	ldw	r2,12(r2)
2009ba50:	10800204 	addi	r2,r2,8
2009ba54:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
2009ba58:	1004d43a 	srli	r2,r2,16
2009ba5c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009ba60:	e0bffd17 	ldw	r2,-12(fp)
2009ba64:	10800917 	ldw	r2,36(r2)
2009ba68:	e0fff517 	ldw	r3,-44(fp)
2009ba6c:	18bfe32e 	bgeu	r3,r2,2009b9fc <__flash_rwdata_start+0xffffcc10>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
2009ba70:	e0bffd17 	ldw	r2,-12(fp)
2009ba74:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009ba78:	e0fff417 	ldw	r3,-48(fp)
2009ba7c:	18bfdf2e 	bgeu	r3,r2,2009b9fc <__flash_rwdata_start+0xffffcc10>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ba80:	0005303a 	rdctl	r2,status
2009ba84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009ba88:	e0fff917 	ldw	r3,-28(fp)
2009ba8c:	00bfff84 	movi	r2,-2
2009ba90:	1884703a 	and	r2,r3,r2
2009ba94:	1001703a 	wrctl	status,r2
  
  return context;
2009ba98:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
2009ba9c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2009baa0:	e0bffd17 	ldw	r2,-12(fp)
2009baa4:	10800317 	ldw	r2,12(r2)
2009baa8:	10800104 	addi	r2,r2,4
2009baac:	00c00804 	movi	r3,32
2009bab0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009bab4:	e0bffd17 	ldw	r2,-12(fp)
2009bab8:	10800317 	ldw	r2,12(r2)
2009babc:	e0fffd17 	ldw	r3,-12(fp)
2009bac0:	18c00317 	ldw	r3,12(r3)
2009bac4:	18c00037 	ldwio	r3,0(r3)
2009bac8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2009bacc:	e0bffe17 	ldw	r2,-8(fp)
2009bad0:	10001b26 	beq	r2,zero,2009bb40 <alt_msgdma_descriptor_sync_transfer+0x1ac>
2009bad4:	e0bfff17 	ldw	r2,-4(fp)
2009bad8:	1000191e 	bne	r2,zero,2009bb40 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
2009badc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009bae0:	00000d06 	br	2009bb18 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2009bae4:	01000044 	movi	r4,1
2009bae8:	009d1200 	call	2009d120 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009baec:	e0bff30b 	ldhu	r2,-52(fp)
2009baf0:	1084e230 	cmpltui	r2,r2,5000
2009baf4:	1000051e 	bne	r2,zero,2009bb0c <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
2009baf8:	01000034 	movhi	r4,0
2009bafc:	2102be04 	addi	r4,r4,2808
2009bb00:	009db600 	call	2009db60 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009bb04:	00bff084 	movi	r2,-62
2009bb08:	00007b06 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
2009bb0c:	e0bff30b 	ldhu	r2,-52(fp)
2009bb10:	10800044 	addi	r2,r2,1
2009bb14:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009bb18:	e0bffd17 	ldw	r2,-12(fp)
2009bb1c:	10c00317 	ldw	r3,12(r2)
2009bb20:	e0bffd17 	ldw	r2,-12(fp)
2009bb24:	10800417 	ldw	r2,16(r2)
2009bb28:	1809883a 	mov	r4,r3
2009bb2c:	100b883a 	mov	r5,r2
2009bb30:	e1bffe17 	ldw	r6,-8(fp)
2009bb34:	009b1a00 	call	2009b1a0 <alt_msgdma_write_standard_descriptor>
2009bb38:	103fea1e 	bne	r2,zero,2009bae4 <__flash_rwdata_start+0xffffccf8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
2009bb3c:	00001f06 	br	2009bbbc <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009bb40:	e0bffe17 	ldw	r2,-8(fp)
2009bb44:	10001b1e 	bne	r2,zero,2009bbb4 <alt_msgdma_descriptor_sync_transfer+0x220>
2009bb48:	e0bfff17 	ldw	r2,-4(fp)
2009bb4c:	10001926 	beq	r2,zero,2009bbb4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
2009bb50:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009bb54:	00000d06 	br	2009bb8c <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009bb58:	01000044 	movi	r4,1
2009bb5c:	009d1200 	call	2009d120 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009bb60:	e0bff30b 	ldhu	r2,-52(fp)
2009bb64:	1084e230 	cmpltui	r2,r2,5000
2009bb68:	1000051e 	bne	r2,zero,2009bb80 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
2009bb6c:	01000034 	movhi	r4,0
2009bb70:	2102cf04 	addi	r4,r4,2876
2009bb74:	009db600 	call	2009db60 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009bb78:	00bff084 	movi	r2,-62
2009bb7c:	00005e06 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
2009bb80:	e0bff30b 	ldhu	r2,-52(fp)
2009bb84:	10800044 	addi	r2,r2,1
2009bb88:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
2009bb8c:	e0bffd17 	ldw	r2,-12(fp)
2009bb90:	10c00317 	ldw	r3,12(r2)
2009bb94:	e0bffd17 	ldw	r2,-12(fp)
2009bb98:	10800417 	ldw	r2,16(r2)
2009bb9c:	1809883a 	mov	r4,r3
2009bba0:	100b883a 	mov	r5,r2
2009bba4:	e1bfff17 	ldw	r6,-4(fp)
2009bba8:	009b2340 	call	2009b234 <alt_msgdma_write_extended_descriptor>
2009bbac:	103fea1e 	bne	r2,zero,2009bb58 <__flash_rwdata_start+0xffffcd6c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
2009bbb0:	00000206 	br	2009bbbc <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
2009bbb4:	00bfffc4 	movi	r2,-1
2009bbb8:	00004f06 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2009bbbc:	e0bffd17 	ldw	r2,-12(fp)
2009bbc0:	10800317 	ldw	r2,12(r2)
2009bbc4:	10800104 	addi	r2,r2,4
2009bbc8:	e0fffd17 	ldw	r3,-12(fp)
2009bbcc:	19000d17 	ldw	r4,52(r3)
2009bbd0:	00fff2c4 	movi	r3,-53
2009bbd4:	20c6703a 	and	r3,r4,r3
2009bbd8:	18c00114 	ori	r3,r3,4
2009bbdc:	10c00035 	stwio	r3,0(r2)
2009bbe0:	e0bff717 	ldw	r2,-36(fp)
2009bbe4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009bbe8:	e0bffa17 	ldw	r2,-24(fp)
2009bbec:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
2009bbf0:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2009bbf4:	e0bffd17 	ldw	r2,-12(fp)
2009bbf8:	10800317 	ldw	r2,12(r2)
2009bbfc:	10800037 	ldwio	r2,0(r2)
2009bc00:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2009bc04:	00001106 	br	2009bc4c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
2009bc08:	01000044 	movi	r4,1
2009bc0c:	009d1200 	call	2009d120 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
2009bc10:	e0bff30b 	ldhu	r2,-52(fp)
2009bc14:	1084e230 	cmpltui	r2,r2,5000
2009bc18:	1000051e 	bne	r2,zero,2009bc30 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2009bc1c:	01000034 	movhi	r4,0
2009bc20:	2102e004 	addi	r4,r4,2944
2009bc24:	009db600 	call	2009db60 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
2009bc28:	00bff084 	movi	r2,-62
2009bc2c:	00003206 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
2009bc30:	e0bff30b 	ldhu	r2,-52(fp)
2009bc34:	10800044 	addi	r2,r2,1
2009bc38:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2009bc3c:	e0bffd17 	ldw	r2,-12(fp)
2009bc40:	10800317 	ldw	r2,12(r2)
2009bc44:	10800037 	ldwio	r2,0(r2)
2009bc48:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2009bc4c:	e0fff217 	ldw	r3,-56(fp)
2009bc50:	e0bff817 	ldw	r2,-32(fp)
2009bc54:	1884703a 	and	r2,r3,r2
2009bc58:	1000031e 	bne	r2,zero,2009bc68 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2009bc5c:	e0bff217 	ldw	r2,-56(fp)
2009bc60:	1080004c 	andi	r2,r2,1
2009bc64:	103fe81e 	bne	r2,zero,2009bc08 <__flash_rwdata_start+0xffffce1c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
2009bc68:	e0fff217 	ldw	r3,-56(fp)
2009bc6c:	e0bff817 	ldw	r2,-32(fp)
2009bc70:	1884703a 	and	r2,r3,r2
2009bc74:	10000226 	beq	r2,zero,2009bc80 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
2009bc78:	e0bff817 	ldw	r2,-32(fp)
2009bc7c:	00001e06 	br	2009bcf8 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
2009bc80:	e0bffd17 	ldw	r2,-12(fp)
2009bc84:	10800317 	ldw	r2,12(r2)
2009bc88:	10800104 	addi	r2,r2,4
2009bc8c:	10800037 	ldwio	r2,0(r2)
2009bc90:	10800814 	ori	r2,r2,32
2009bc94:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009bc98:	0005303a 	rdctl	r2,status
2009bc9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009bca0:	e0fffb17 	ldw	r3,-20(fp)
2009bca4:	00bfff84 	movi	r2,-2
2009bca8:	1884703a 	and	r2,r3,r2
2009bcac:	1001703a 	wrctl	status,r2
  
  return context;
2009bcb0:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2009bcb4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009bcb8:	e0bffd17 	ldw	r2,-12(fp)
2009bcbc:	10800317 	ldw	r2,12(r2)
2009bcc0:	10800104 	addi	r2,r2,4
2009bcc4:	e0fff617 	ldw	r3,-40(fp)
2009bcc8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009bccc:	e0bffd17 	ldw	r2,-12(fp)
2009bcd0:	10800317 	ldw	r2,12(r2)
2009bcd4:	e0fffd17 	ldw	r3,-12(fp)
2009bcd8:	18c00317 	ldw	r3,12(r3)
2009bcdc:	18c00037 	ldwio	r3,0(r3)
2009bce0:	10c00035 	stwio	r3,0(r2)
2009bce4:	e0bff717 	ldw	r2,-36(fp)
2009bce8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009bcec:	e0bffc17 	ldw	r2,-16(fp)
2009bcf0:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2009bcf4:	0005883a 	mov	r2,zero

}
2009bcf8:	e037883a 	mov	sp,fp
2009bcfc:	dfc00117 	ldw	ra,4(sp)
2009bd00:	df000017 	ldw	fp,0(sp)
2009bd04:	dec00204 	addi	sp,sp,8
2009bd08:	f800283a 	ret

2009bd0c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2009bd0c:	defff804 	addi	sp,sp,-32
2009bd10:	dfc00715 	stw	ra,28(sp)
2009bd14:	df000615 	stw	fp,24(sp)
2009bd18:	df000604 	addi	fp,sp,24
2009bd1c:	e13ffc15 	stw	r4,-16(fp)
2009bd20:	e17ffd15 	stw	r5,-12(fp)
2009bd24:	e1bffe15 	stw	r6,-8(fp)
2009bd28:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2009bd2c:	e0bfff17 	ldw	r2,-4(fp)
2009bd30:	d8800015 	stw	r2,0(sp)
2009bd34:	e0800217 	ldw	r2,8(fp)
2009bd38:	d8800115 	stw	r2,4(sp)
2009bd3c:	e13ffc17 	ldw	r4,-16(fp)
2009bd40:	e17ffd17 	ldw	r5,-12(fp)
2009bd44:	000d883a 	mov	r6,zero
2009bd48:	e1fffe17 	ldw	r7,-8(fp)
2009bd4c:	009b4e40 	call	2009b4e4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2009bd50:	e037883a 	mov	sp,fp
2009bd54:	dfc00117 	ldw	ra,4(sp)
2009bd58:	df000017 	ldw	fp,0(sp)
2009bd5c:	dec00204 	addi	sp,sp,8
2009bd60:	f800283a 	ret

2009bd64 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
2009bd64:	defff804 	addi	sp,sp,-32
2009bd68:	dfc00715 	stw	ra,28(sp)
2009bd6c:	df000615 	stw	fp,24(sp)
2009bd70:	df000604 	addi	fp,sp,24
2009bd74:	e13ffc15 	stw	r4,-16(fp)
2009bd78:	e17ffd15 	stw	r5,-12(fp)
2009bd7c:	e1bffe15 	stw	r6,-8(fp)
2009bd80:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2009bd84:	e0bfff17 	ldw	r2,-4(fp)
2009bd88:	d8800015 	stw	r2,0(sp)
2009bd8c:	e0800217 	ldw	r2,8(fp)
2009bd90:	d8800115 	stw	r2,4(sp)
2009bd94:	e13ffc17 	ldw	r4,-16(fp)
2009bd98:	e17ffd17 	ldw	r5,-12(fp)
2009bd9c:	e1bffe17 	ldw	r6,-8(fp)
2009bda0:	000f883a 	mov	r7,zero
2009bda4:	009b4e40 	call	2009b4e4 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
2009bda8:	e037883a 	mov	sp,fp
2009bdac:	dfc00117 	ldw	ra,4(sp)
2009bdb0:	df000017 	ldw	fp,0(sp)
2009bdb4:	dec00204 	addi	sp,sp,8
2009bdb8:	f800283a 	ret

2009bdbc <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009bdbc:	defff804 	addi	sp,sp,-32
2009bdc0:	dfc00715 	stw	ra,28(sp)
2009bdc4:	df000615 	stw	fp,24(sp)
2009bdc8:	df000604 	addi	fp,sp,24
2009bdcc:	e13ffc15 	stw	r4,-16(fp)
2009bdd0:	e17ffd15 	stw	r5,-12(fp)
2009bdd4:	e1bffe15 	stw	r6,-8(fp)
2009bdd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
2009bddc:	e0800217 	ldw	r2,8(fp)
2009bde0:	d8800015 	stw	r2,0(sp)
2009bde4:	e0800317 	ldw	r2,12(fp)
2009bde8:	d8800115 	stw	r2,4(sp)
2009bdec:	e13ffc17 	ldw	r4,-16(fp)
2009bdf0:	e17ffd17 	ldw	r5,-12(fp)
2009bdf4:	e1bffe17 	ldw	r6,-8(fp)
2009bdf8:	e1ffff17 	ldw	r7,-4(fp)
2009bdfc:	009b4e40 	call	2009b4e4 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
2009be00:	e037883a 	mov	sp,fp
2009be04:	dfc00117 	ldw	ra,4(sp)
2009be08:	df000017 	ldw	fp,0(sp)
2009be0c:	dec00204 	addi	sp,sp,8
2009be10:	f800283a 	ret

2009be14 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2009be14:	defff004 	addi	sp,sp,-64
2009be18:	dfc00f15 	stw	ra,60(sp)
2009be1c:	df000e15 	stw	fp,56(sp)
2009be20:	df000e04 	addi	fp,sp,56
2009be24:	e13ff915 	stw	r4,-28(fp)
2009be28:	e17ffa15 	stw	r5,-24(fp)
2009be2c:	e1bffb15 	stw	r6,-20(fp)
2009be30:	e1fffc15 	stw	r7,-16(fp)
2009be34:	e1000317 	ldw	r4,12(fp)
2009be38:	e0c00417 	ldw	r3,16(fp)
2009be3c:	e0800517 	ldw	r2,20(fp)
2009be40:	e13ffd0d 	sth	r4,-12(fp)
2009be44:	e0fffe05 	stb	r3,-8(fp)
2009be48:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2009be4c:	e13ffd0b 	ldhu	r4,-12(fp)
2009be50:	e0fffe03 	ldbu	r3,-8(fp)
2009be54:	e0bfff0b 	ldhu	r2,-4(fp)
2009be58:	e17ffc17 	ldw	r5,-16(fp)
2009be5c:	d9400015 	stw	r5,0(sp)
2009be60:	e1400217 	ldw	r5,8(fp)
2009be64:	d9400115 	stw	r5,4(sp)
2009be68:	d9000215 	stw	r4,8(sp)
2009be6c:	d8000315 	stw	zero,12(sp)
2009be70:	d8c00415 	stw	r3,16(sp)
2009be74:	d8000515 	stw	zero,20(sp)
2009be78:	d8800615 	stw	r2,24(sp)
2009be7c:	e13ff917 	ldw	r4,-28(fp)
2009be80:	e17ffa17 	ldw	r5,-24(fp)
2009be84:	000d883a 	mov	r6,zero
2009be88:	e1fffb17 	ldw	r7,-20(fp)
2009be8c:	009b5700 	call	2009b570 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
2009be90:	e037883a 	mov	sp,fp
2009be94:	dfc00117 	ldw	ra,4(sp)
2009be98:	df000017 	ldw	fp,0(sp)
2009be9c:	dec00204 	addi	sp,sp,8
2009bea0:	f800283a 	ret

2009bea4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009bea4:	defff004 	addi	sp,sp,-64
2009bea8:	dfc00f15 	stw	ra,60(sp)
2009beac:	df000e15 	stw	fp,56(sp)
2009beb0:	df000e04 	addi	fp,sp,56
2009beb4:	e13ff915 	stw	r4,-28(fp)
2009beb8:	e17ffa15 	stw	r5,-24(fp)
2009bebc:	e1bffb15 	stw	r6,-20(fp)
2009bec0:	e1fffc15 	stw	r7,-16(fp)
2009bec4:	e1000317 	ldw	r4,12(fp)
2009bec8:	e0c00417 	ldw	r3,16(fp)
2009becc:	e0800517 	ldw	r2,20(fp)
2009bed0:	e13ffd0d 	sth	r4,-12(fp)
2009bed4:	e0fffe05 	stb	r3,-8(fp)
2009bed8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
2009bedc:	e13ffd0b 	ldhu	r4,-12(fp)
2009bee0:	e0fffe03 	ldbu	r3,-8(fp)
2009bee4:	e0bfff0b 	ldhu	r2,-4(fp)
2009bee8:	e17ffc17 	ldw	r5,-16(fp)
2009beec:	d9400015 	stw	r5,0(sp)
2009bef0:	e1400217 	ldw	r5,8(fp)
2009bef4:	d9400115 	stw	r5,4(sp)
2009bef8:	d9000215 	stw	r4,8(sp)
2009befc:	d8c00315 	stw	r3,12(sp)
2009bf00:	d8000415 	stw	zero,16(sp)
2009bf04:	d8800515 	stw	r2,20(sp)
2009bf08:	d8000615 	stw	zero,24(sp)
2009bf0c:	e13ff917 	ldw	r4,-28(fp)
2009bf10:	e17ffa17 	ldw	r5,-24(fp)
2009bf14:	e1bffb17 	ldw	r6,-20(fp)
2009bf18:	000f883a 	mov	r7,zero
2009bf1c:	009b5700 	call	2009b570 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
2009bf20:	e037883a 	mov	sp,fp
2009bf24:	dfc00117 	ldw	ra,4(sp)
2009bf28:	df000017 	ldw	fp,0(sp)
2009bf2c:	dec00204 	addi	sp,sp,8
2009bf30:	f800283a 	ret

2009bf34 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2009bf34:	deffee04 	addi	sp,sp,-72
2009bf38:	dfc01115 	stw	ra,68(sp)
2009bf3c:	df001015 	stw	fp,64(sp)
2009bf40:	df001004 	addi	fp,sp,64
2009bf44:	e13ff715 	stw	r4,-36(fp)
2009bf48:	e17ff815 	stw	r5,-32(fp)
2009bf4c:	e1bff915 	stw	r6,-28(fp)
2009bf50:	e1fffa15 	stw	r7,-24(fp)
2009bf54:	e1800417 	ldw	r6,16(fp)
2009bf58:	e1400517 	ldw	r5,20(fp)
2009bf5c:	e1000617 	ldw	r4,24(fp)
2009bf60:	e0c00717 	ldw	r3,28(fp)
2009bf64:	e0800817 	ldw	r2,32(fp)
2009bf68:	e1bffb0d 	sth	r6,-20(fp)
2009bf6c:	e17ffc05 	stb	r5,-16(fp)
2009bf70:	e13ffd05 	stb	r4,-12(fp)
2009bf74:	e0fffe0d 	sth	r3,-8(fp)
2009bf78:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2009bf7c:	e1bffb0b 	ldhu	r6,-20(fp)
2009bf80:	e17ffc03 	ldbu	r5,-16(fp)
2009bf84:	e13ffd03 	ldbu	r4,-12(fp)
2009bf88:	e0fffe0b 	ldhu	r3,-8(fp)
2009bf8c:	e0bfff0b 	ldhu	r2,-4(fp)
2009bf90:	e1c00217 	ldw	r7,8(fp)
2009bf94:	d9c00015 	stw	r7,0(sp)
2009bf98:	e1c00317 	ldw	r7,12(fp)
2009bf9c:	d9c00115 	stw	r7,4(sp)
2009bfa0:	d9800215 	stw	r6,8(sp)
2009bfa4:	d9400315 	stw	r5,12(sp)
2009bfa8:	d9000415 	stw	r4,16(sp)
2009bfac:	d8c00515 	stw	r3,20(sp)
2009bfb0:	d8800615 	stw	r2,24(sp)
2009bfb4:	e13ff717 	ldw	r4,-36(fp)
2009bfb8:	e17ff817 	ldw	r5,-32(fp)
2009bfbc:	e1bff917 	ldw	r6,-28(fp)
2009bfc0:	e1fffa17 	ldw	r7,-24(fp)
2009bfc4:	009b5700 	call	2009b570 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
2009bfc8:	e037883a 	mov	sp,fp
2009bfcc:	dfc00117 	ldw	ra,4(sp)
2009bfd0:	df000017 	ldw	fp,0(sp)
2009bfd4:	dec00204 	addi	sp,sp,8
2009bfd8:	f800283a 	ret

2009bfdc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009bfdc:	defffb04 	addi	sp,sp,-20
2009bfe0:	df000415 	stw	fp,16(sp)
2009bfe4:	df000404 	addi	fp,sp,16
2009bfe8:	e13ffc15 	stw	r4,-16(fp)
2009bfec:	e17ffd15 	stw	r5,-12(fp)
2009bff0:	e1bffe15 	stw	r6,-8(fp)
2009bff4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
2009bff8:	e0bffc17 	ldw	r2,-16(fp)
2009bffc:	10c01217 	ldw	r3,72(r2)
2009c000:	e0800117 	ldw	r2,4(fp)
2009c004:	18800436 	bltu	r3,r2,2009c018 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
2009c008:	e0bffc17 	ldw	r2,-16(fp)
2009c00c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2009c010:	10803fcc 	andi	r2,r2,255
2009c014:	10000226 	beq	r2,zero,2009c020 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2009c018:	00bffa84 	movi	r2,-22
2009c01c:	00001406 	br	2009c070 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
2009c020:	e0bffd17 	ldw	r2,-12(fp)
2009c024:	e0fffe17 	ldw	r3,-8(fp)
2009c028:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2009c02c:	e0bffd17 	ldw	r2,-12(fp)
2009c030:	e0ffff17 	ldw	r3,-4(fp)
2009c034:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009c038:	e0bffd17 	ldw	r2,-12(fp)
2009c03c:	e0c00117 	ldw	r3,4(fp)
2009c040:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
2009c044:	e0fffd17 	ldw	r3,-12(fp)
2009c048:	e0bffd17 	ldw	r2,-12(fp)
2009c04c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009c050:	e0c00217 	ldw	r3,8(fp)
2009c054:	00900034 	movhi	r2,16384
2009c058:	10bfffc4 	addi	r2,r2,-1
2009c05c:	1884703a 	and	r2,r3,r2
2009c060:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
2009c064:	e0bffd17 	ldw	r2,-12(fp)
2009c068:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2009c06c:	0005883a 	mov	r2,zero
}
2009c070:	e037883a 	mov	sp,fp
2009c074:	df000017 	ldw	fp,0(sp)
2009c078:	dec00104 	addi	sp,sp,4
2009c07c:	f800283a 	ret

2009c080 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009c080:	defff404 	addi	sp,sp,-48
2009c084:	df000b15 	stw	fp,44(sp)
2009c088:	df000b04 	addi	fp,sp,44
2009c08c:	e13ff715 	stw	r4,-36(fp)
2009c090:	e17ff815 	stw	r5,-32(fp)
2009c094:	e1bff915 	stw	r6,-28(fp)
2009c098:	e1fffa15 	stw	r7,-24(fp)
2009c09c:	e1800517 	ldw	r6,20(fp)
2009c0a0:	e1400617 	ldw	r5,24(fp)
2009c0a4:	e1000717 	ldw	r4,28(fp)
2009c0a8:	e0c00817 	ldw	r3,32(fp)
2009c0ac:	e0800917 	ldw	r2,36(fp)
2009c0b0:	e1bffb0d 	sth	r6,-20(fp)
2009c0b4:	e17ffc05 	stb	r5,-16(fp)
2009c0b8:	e13ffd05 	stb	r4,-12(fp)
2009c0bc:	e0fffe0d 	sth	r3,-8(fp)
2009c0c0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2009c0c4:	e0bff717 	ldw	r2,-36(fp)
2009c0c8:	10c01217 	ldw	r3,72(r2)
2009c0cc:	e0800317 	ldw	r2,12(fp)
2009c0d0:	18801936 	bltu	r3,r2,2009c138 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009c0d4:	e13ff717 	ldw	r4,-36(fp)
2009c0d8:	20801317 	ldw	r2,76(r4)
2009c0dc:	20c01417 	ldw	r3,80(r4)
2009c0e0:	e13ffe0b 	ldhu	r4,-8(fp)
2009c0e4:	213fffcc 	andi	r4,r4,65535
2009c0e8:	2015883a 	mov	r10,r4
2009c0ec:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2009c0f0:	1ac01136 	bltu	r3,r11,2009c138 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2009c0f4:	58c0011e 	bne	r11,r3,2009c0fc <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
2009c0f8:	12800f36 	bltu	r2,r10,2009c138 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009c0fc:	e13ff717 	ldw	r4,-36(fp)
2009c100:	20801317 	ldw	r2,76(r4)
2009c104:	20c01417 	ldw	r3,80(r4)
2009c108:	e13fff0b 	ldhu	r4,-4(fp)
2009c10c:	213fffcc 	andi	r4,r4,65535
2009c110:	2011883a 	mov	r8,r4
2009c114:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
2009c118:	1a400736 	bltu	r3,r9,2009c138 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2009c11c:	48c0011e 	bne	r9,r3,2009c124 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
2009c120:	12000536 	bltu	r2,r8,2009c138 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009c124:	e0bff717 	ldw	r2,-36(fp)
2009c128:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009c12c:	10803fcc 	andi	r2,r2,255
2009c130:	10800060 	cmpeqi	r2,r2,1
2009c134:	1000021e 	bne	r2,zero,2009c140 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
2009c138:	00bffa84 	movi	r2,-22
2009c13c:	00003106 	br	2009c204 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
2009c140:	e0bff817 	ldw	r2,-32(fp)
2009c144:	e0fff917 	ldw	r3,-28(fp)
2009c148:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2009c14c:	e0bff817 	ldw	r2,-32(fp)
2009c150:	e0fffa17 	ldw	r3,-24(fp)
2009c154:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
2009c158:	e0bff817 	ldw	r2,-32(fp)
2009c15c:	e0c00117 	ldw	r3,4(fp)
2009c160:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
2009c164:	e0bff817 	ldw	r2,-32(fp)
2009c168:	e0c00217 	ldw	r3,8(fp)
2009c16c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
2009c170:	e0bff817 	ldw	r2,-32(fp)
2009c174:	e0c00317 	ldw	r3,12(fp)
2009c178:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2009c17c:	e0bff817 	ldw	r2,-32(fp)
2009c180:	e0fffb0b 	ldhu	r3,-20(fp)
2009c184:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
2009c188:	e0bff817 	ldw	r2,-32(fp)
2009c18c:	e0fffc03 	ldbu	r3,-16(fp)
2009c190:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
2009c194:	e0bff817 	ldw	r2,-32(fp)
2009c198:	e0fffd03 	ldbu	r3,-12(fp)
2009c19c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
2009c1a0:	e0bff817 	ldw	r2,-32(fp)
2009c1a4:	e0fffe0b 	ldhu	r3,-8(fp)
2009c1a8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
2009c1ac:	e0bff817 	ldw	r2,-32(fp)
2009c1b0:	e0ffff0b 	ldhu	r3,-4(fp)
2009c1b4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
2009c1b8:	e0bff817 	ldw	r2,-32(fp)
2009c1bc:	1019883a 	mov	r12,r2
2009c1c0:	001b883a 	mov	r13,zero
2009c1c4:	e33ff515 	stw	r12,-44(fp)
2009c1c8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
2009c1cc:	e0fff517 	ldw	r3,-44(fp)
2009c1d0:	e0bff817 	ldw	r2,-32(fp)
2009c1d4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
2009c1d8:	e0fff617 	ldw	r3,-40(fp)
2009c1dc:	e0bff817 	ldw	r2,-32(fp)
2009c1e0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009c1e4:	e0c00417 	ldw	r3,16(fp)
2009c1e8:	00900034 	movhi	r2,16384
2009c1ec:	10bfffc4 	addi	r2,r2,-1
2009c1f0:	1884703a 	and	r2,r3,r2
2009c1f4:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
2009c1f8:	e0bff817 	ldw	r2,-32(fp)
2009c1fc:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
2009c200:	0005883a 	mov	r2,zero
}
2009c204:	e037883a 	mov	sp,fp
2009c208:	df000017 	ldw	fp,0(sp)
2009c20c:	dec00104 	addi	sp,sp,4
2009c210:	f800283a 	ret

2009c214 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2009c214:	defff804 	addi	sp,sp,-32
2009c218:	dfc00715 	stw	ra,28(sp)
2009c21c:	df000615 	stw	fp,24(sp)
2009c220:	df000604 	addi	fp,sp,24
2009c224:	e13ffc15 	stw	r4,-16(fp)
2009c228:	e17ffd15 	stw	r5,-12(fp)
2009c22c:	e1bffe15 	stw	r6,-8(fp)
2009c230:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c234:	e0800217 	ldw	r2,8(fp)
2009c238:	d8800015 	stw	r2,0(sp)
2009c23c:	e0800317 	ldw	r2,12(fp)
2009c240:	d8800115 	stw	r2,4(sp)
2009c244:	e13ffc17 	ldw	r4,-16(fp)
2009c248:	e17ffd17 	ldw	r5,-12(fp)
2009c24c:	e1bffe17 	ldw	r6,-8(fp)
2009c250:	e1ffff17 	ldw	r7,-4(fp)
2009c254:	009bfdc0 	call	2009bfdc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
2009c258:	e037883a 	mov	sp,fp
2009c25c:	dfc00117 	ldw	ra,4(sp)
2009c260:	df000017 	ldw	fp,0(sp)
2009c264:	dec00204 	addi	sp,sp,8
2009c268:	f800283a 	ret

2009c26c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009c26c:	defff804 	addi	sp,sp,-32
2009c270:	dfc00715 	stw	ra,28(sp)
2009c274:	df000615 	stw	fp,24(sp)
2009c278:	df000604 	addi	fp,sp,24
2009c27c:	e13ffc15 	stw	r4,-16(fp)
2009c280:	e17ffd15 	stw	r5,-12(fp)
2009c284:	e1bffe15 	stw	r6,-8(fp)
2009c288:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c28c:	e0bfff17 	ldw	r2,-4(fp)
2009c290:	d8800015 	stw	r2,0(sp)
2009c294:	e0800217 	ldw	r2,8(fp)
2009c298:	d8800115 	stw	r2,4(sp)
2009c29c:	e13ffc17 	ldw	r4,-16(fp)
2009c2a0:	e17ffd17 	ldw	r5,-12(fp)
2009c2a4:	000d883a 	mov	r6,zero
2009c2a8:	e1fffe17 	ldw	r7,-8(fp)
2009c2ac:	009bfdc0 	call	2009bfdc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
2009c2b0:	e037883a 	mov	sp,fp
2009c2b4:	dfc00117 	ldw	ra,4(sp)
2009c2b8:	df000017 	ldw	fp,0(sp)
2009c2bc:	dec00204 	addi	sp,sp,8
2009c2c0:	f800283a 	ret

2009c2c4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009c2c4:	defff804 	addi	sp,sp,-32
2009c2c8:	dfc00715 	stw	ra,28(sp)
2009c2cc:	df000615 	stw	fp,24(sp)
2009c2d0:	df000604 	addi	fp,sp,24
2009c2d4:	e13ffc15 	stw	r4,-16(fp)
2009c2d8:	e17ffd15 	stw	r5,-12(fp)
2009c2dc:	e1bffe15 	stw	r6,-8(fp)
2009c2e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009c2e4:	e0bfff17 	ldw	r2,-4(fp)
2009c2e8:	d8800015 	stw	r2,0(sp)
2009c2ec:	e0800217 	ldw	r2,8(fp)
2009c2f0:	d8800115 	stw	r2,4(sp)
2009c2f4:	e13ffc17 	ldw	r4,-16(fp)
2009c2f8:	e17ffd17 	ldw	r5,-12(fp)
2009c2fc:	e1bffe17 	ldw	r6,-8(fp)
2009c300:	000f883a 	mov	r7,zero
2009c304:	009bfdc0 	call	2009bfdc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
2009c308:	e037883a 	mov	sp,fp
2009c30c:	dfc00117 	ldw	ra,4(sp)
2009c310:	df000017 	ldw	fp,0(sp)
2009c314:	dec00204 	addi	sp,sp,8
2009c318:	f800283a 	ret

2009c31c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2009c31c:	deffee04 	addi	sp,sp,-72
2009c320:	dfc01115 	stw	ra,68(sp)
2009c324:	df001015 	stw	fp,64(sp)
2009c328:	df001004 	addi	fp,sp,64
2009c32c:	e13ff915 	stw	r4,-28(fp)
2009c330:	e17ffa15 	stw	r5,-24(fp)
2009c334:	e1bffb15 	stw	r6,-20(fp)
2009c338:	e1fffc15 	stw	r7,-16(fp)
2009c33c:	e1000417 	ldw	r4,16(fp)
2009c340:	e0c00517 	ldw	r3,20(fp)
2009c344:	e0800617 	ldw	r2,24(fp)
2009c348:	e13ffd0d 	sth	r4,-12(fp)
2009c34c:	e0fffe05 	stb	r3,-8(fp)
2009c350:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
2009c354:	e13ffd0b 	ldhu	r4,-12(fp)
2009c358:	e0fffe03 	ldbu	r3,-8(fp)
2009c35c:	e0bfff0b 	ldhu	r2,-4(fp)
2009c360:	e17ffb17 	ldw	r5,-20(fp)
2009c364:	d9400015 	stw	r5,0(sp)
2009c368:	e17ffc17 	ldw	r5,-16(fp)
2009c36c:	d9400115 	stw	r5,4(sp)
2009c370:	e1400217 	ldw	r5,8(fp)
2009c374:	d9400215 	stw	r5,8(sp)
2009c378:	e1400317 	ldw	r5,12(fp)
2009c37c:	d9400315 	stw	r5,12(sp)
2009c380:	d9000415 	stw	r4,16(sp)
2009c384:	d8000515 	stw	zero,20(sp)
2009c388:	d8c00615 	stw	r3,24(sp)
2009c38c:	d8000715 	stw	zero,28(sp)
2009c390:	d8800815 	stw	r2,32(sp)
2009c394:	e13ff917 	ldw	r4,-28(fp)
2009c398:	e17ffa17 	ldw	r5,-24(fp)
2009c39c:	000d883a 	mov	r6,zero
2009c3a0:	000f883a 	mov	r7,zero
2009c3a4:	009c0800 	call	2009c080 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
2009c3a8:	e037883a 	mov	sp,fp
2009c3ac:	dfc00117 	ldw	ra,4(sp)
2009c3b0:	df000017 	ldw	fp,0(sp)
2009c3b4:	dec00204 	addi	sp,sp,8
2009c3b8:	f800283a 	ret

2009c3bc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009c3bc:	deffee04 	addi	sp,sp,-72
2009c3c0:	dfc01115 	stw	ra,68(sp)
2009c3c4:	df001015 	stw	fp,64(sp)
2009c3c8:	df001004 	addi	fp,sp,64
2009c3cc:	e13ff915 	stw	r4,-28(fp)
2009c3d0:	e17ffa15 	stw	r5,-24(fp)
2009c3d4:	e1bffb15 	stw	r6,-20(fp)
2009c3d8:	e1fffc15 	stw	r7,-16(fp)
2009c3dc:	e1000417 	ldw	r4,16(fp)
2009c3e0:	e0c00517 	ldw	r3,20(fp)
2009c3e4:	e0800617 	ldw	r2,24(fp)
2009c3e8:	e13ffd0d 	sth	r4,-12(fp)
2009c3ec:	e0fffe05 	stb	r3,-8(fp)
2009c3f0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2009c3f4:	e13ffd0b 	ldhu	r4,-12(fp)
2009c3f8:	e0fffe03 	ldbu	r3,-8(fp)
2009c3fc:	e0bfff0b 	ldhu	r2,-4(fp)
2009c400:	d8000015 	stw	zero,0(sp)
2009c404:	d8000115 	stw	zero,4(sp)
2009c408:	e1400217 	ldw	r5,8(fp)
2009c40c:	d9400215 	stw	r5,8(sp)
2009c410:	e1400317 	ldw	r5,12(fp)
2009c414:	d9400315 	stw	r5,12(sp)
2009c418:	d9000415 	stw	r4,16(sp)
2009c41c:	d8c00515 	stw	r3,20(sp)
2009c420:	d8000615 	stw	zero,24(sp)
2009c424:	d8800715 	stw	r2,28(sp)
2009c428:	d8000815 	stw	zero,32(sp)
2009c42c:	e13ff917 	ldw	r4,-28(fp)
2009c430:	e17ffa17 	ldw	r5,-24(fp)
2009c434:	e1bffb17 	ldw	r6,-20(fp)
2009c438:	e1fffc17 	ldw	r7,-16(fp)
2009c43c:	009c0800 	call	2009c080 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
2009c440:	e037883a 	mov	sp,fp
2009c444:	dfc00117 	ldw	ra,4(sp)
2009c448:	df000017 	ldw	fp,0(sp)
2009c44c:	dec00204 	addi	sp,sp,8
2009c450:	f800283a 	ret

2009c454 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
2009c454:	deffec04 	addi	sp,sp,-80
2009c458:	dfc01315 	stw	ra,76(sp)
2009c45c:	df001215 	stw	fp,72(sp)
2009c460:	df001204 	addi	fp,sp,72
2009c464:	e13ff715 	stw	r4,-36(fp)
2009c468:	e17ff815 	stw	r5,-32(fp)
2009c46c:	e1bff915 	stw	r6,-28(fp)
2009c470:	e1fffa15 	stw	r7,-24(fp)
2009c474:	e1800617 	ldw	r6,24(fp)
2009c478:	e1400717 	ldw	r5,28(fp)
2009c47c:	e1000817 	ldw	r4,32(fp)
2009c480:	e0c00917 	ldw	r3,36(fp)
2009c484:	e0800a17 	ldw	r2,40(fp)
2009c488:	e1bffb0d 	sth	r6,-20(fp)
2009c48c:	e17ffc05 	stb	r5,-16(fp)
2009c490:	e13ffd05 	stb	r4,-12(fp)
2009c494:	e0fffe0d 	sth	r3,-8(fp)
2009c498:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2009c49c:	e1bffb0b 	ldhu	r6,-20(fp)
2009c4a0:	e17ffc03 	ldbu	r5,-16(fp)
2009c4a4:	e13ffd03 	ldbu	r4,-12(fp)
2009c4a8:	e0fffe0b 	ldhu	r3,-8(fp)
2009c4ac:	e0bfff0b 	ldhu	r2,-4(fp)
2009c4b0:	e1c00217 	ldw	r7,8(fp)
2009c4b4:	d9c00015 	stw	r7,0(sp)
2009c4b8:	e1c00317 	ldw	r7,12(fp)
2009c4bc:	d9c00115 	stw	r7,4(sp)
2009c4c0:	e1c00417 	ldw	r7,16(fp)
2009c4c4:	d9c00215 	stw	r7,8(sp)
2009c4c8:	e1c00517 	ldw	r7,20(fp)
2009c4cc:	d9c00315 	stw	r7,12(sp)
2009c4d0:	d9800415 	stw	r6,16(sp)
2009c4d4:	d9400515 	stw	r5,20(sp)
2009c4d8:	d9000615 	stw	r4,24(sp)
2009c4dc:	d8c00715 	stw	r3,28(sp)
2009c4e0:	d8800815 	stw	r2,32(sp)
2009c4e4:	e13ff717 	ldw	r4,-36(fp)
2009c4e8:	e17ff817 	ldw	r5,-32(fp)
2009c4ec:	e1bff917 	ldw	r6,-28(fp)
2009c4f0:	e1fffa17 	ldw	r7,-24(fp)
2009c4f4:	009c0800 	call	2009c080 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
2009c4f8:	e037883a 	mov	sp,fp
2009c4fc:	dfc00117 	ldw	ra,4(sp)
2009c500:	df000017 	ldw	fp,0(sp)
2009c504:	dec00204 	addi	sp,sp,8
2009c508:	f800283a 	ret

2009c50c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2009c50c:	defffc04 	addi	sp,sp,-16
2009c510:	df000315 	stw	fp,12(sp)
2009c514:	df000304 	addi	fp,sp,12
2009c518:	e13ffe15 	stw	r4,-8(fp)
2009c51c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
2009c520:	e0bfff17 	ldw	r2,-4(fp)
2009c524:	1000021e 	bne	r2,zero,2009c530 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2009c528:	00bffa84 	movi	r2,-22
2009c52c:	00002f06 	br	2009c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
2009c530:	e0bfff17 	ldw	r2,-4(fp)
2009c534:	10c00317 	ldw	r3,12(r2)
2009c538:	e0bfff17 	ldw	r2,-4(fp)
2009c53c:	18800226 	beq	r3,r2,2009c548 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2009c540:	00bffa84 	movi	r2,-22
2009c544:	00002906 	br	2009c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
2009c548:	e0bffe17 	ldw	r2,-8(fp)
2009c54c:	10800017 	ldw	r2,0(r2)
2009c550:	1000051e 	bne	r2,zero,2009c568 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
2009c554:	e0bffe17 	ldw	r2,-8(fp)
2009c558:	e0ffff17 	ldw	r3,-4(fp)
2009c55c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
2009c560:	0005883a 	mov	r2,zero
2009c564:	00002106 	br	2009c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
2009c568:	e0bffe17 	ldw	r2,-8(fp)
2009c56c:	10c00017 	ldw	r3,0(r2)
2009c570:	e0bfff17 	ldw	r2,-4(fp)
2009c574:	1880021e 	bne	r3,r2,2009c580 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2009c578:	00bffa84 	movi	r2,-22
2009c57c:	00001b06 	br	2009c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2009c580:	e0bffe17 	ldw	r2,-8(fp)
2009c584:	10800017 	ldw	r2,0(r2)
2009c588:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2009c58c:	00000906 	br	2009c5b4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
2009c590:	e0bffd17 	ldw	r2,-12(fp)
2009c594:	10c00317 	ldw	r3,12(r2)
2009c598:	e0bfff17 	ldw	r2,-4(fp)
2009c59c:	1880021e 	bne	r3,r2,2009c5a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2009c5a0:	00bffa84 	movi	r2,-22
2009c5a4:	00001106 	br	2009c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2009c5a8:	e0bffd17 	ldw	r2,-12(fp)
2009c5ac:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
2009c5b0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2009c5b4:	e0bffd17 	ldw	r2,-12(fp)
2009c5b8:	10800317 	ldw	r2,12(r2)
2009c5bc:	e0fffe17 	ldw	r3,-8(fp)
2009c5c0:	18c00017 	ldw	r3,0(r3)
2009c5c4:	10fff21e 	bne	r2,r3,2009c590 <__flash_rwdata_start+0xffffd7a4>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
2009c5c8:	e0ffff17 	ldw	r3,-4(fp)
2009c5cc:	e0bffd17 	ldw	r2,-12(fp)
2009c5d0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2009c5d4:	e0bffe17 	ldw	r2,-8(fp)
2009c5d8:	10800017 	ldw	r2,0(r2)
2009c5dc:	1007883a 	mov	r3,r2
2009c5e0:	e0bfff17 	ldw	r2,-4(fp)
2009c5e4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
2009c5e8:	0005883a 	mov	r2,zero
}
2009c5ec:	e037883a 	mov	sp,fp
2009c5f0:	df000017 	ldw	fp,0(sp)
2009c5f4:	dec00104 	addi	sp,sp,4
2009c5f8:	f800283a 	ret

2009c5fc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
2009c5fc:	defff804 	addi	sp,sp,-32
2009c600:	df000715 	stw	fp,28(sp)
2009c604:	df000704 	addi	fp,sp,28
2009c608:	e13ffe15 	stw	r4,-8(fp)
2009c60c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
2009c610:	e13fff17 	ldw	r4,-4(fp)
2009c614:	2000021e 	bne	r4,zero,2009c620 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
2009c618:	00bffa84 	movi	r2,-22
2009c61c:	00005906 	br	2009c784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
2009c620:	e13fff17 	ldw	r4,-4(fp)
2009c624:	2015883a 	mov	r10,r4
2009c628:	0017883a 	mov	r11,zero
2009c62c:	e2bffc15 	stw	r10,-16(fp)
2009c630:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009c634:	e13fff17 	ldw	r4,-4(fp)
2009c638:	21400317 	ldw	r5,12(r4)
2009c63c:	e13ffc17 	ldw	r4,-16(fp)
2009c640:	29000626 	beq	r5,r4,2009c65c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
2009c644:	e13fff17 	ldw	r4,-4(fp)
2009c648:	21400b17 	ldw	r5,44(r4)
2009c64c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009c650:	29000226 	beq	r5,r4,2009c65c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
2009c654:	00bffa84 	movi	r2,-22
2009c658:	00004a06 	br	2009c784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
2009c65c:	e13ffe17 	ldw	r4,-8(fp)
2009c660:	21000017 	ldw	r4,0(r4)
2009c664:	2000051e 	bne	r4,zero,2009c67c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
2009c668:	e0bffe17 	ldw	r2,-8(fp)
2009c66c:	e0ffff17 	ldw	r3,-4(fp)
2009c670:	10c00015 	stw	r3,0(r2)
		return 0;
2009c674:	0005883a 	mov	r2,zero
2009c678:	00004206 	br	2009c784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
2009c67c:	e13ffe17 	ldw	r4,-8(fp)
2009c680:	21400017 	ldw	r5,0(r4)
2009c684:	e13fff17 	ldw	r4,-4(fp)
2009c688:	2900021e 	bne	r5,r4,2009c694 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
2009c68c:	00bffa84 	movi	r2,-22
2009c690:	00003c06 	br	2009c784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
2009c694:	e13ffe17 	ldw	r4,-8(fp)
2009c698:	21000017 	ldw	r4,0(r4)
2009c69c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
2009c6a0:	e13ffe17 	ldw	r4,-8(fp)
2009c6a4:	21000017 	ldw	r4,0(r4)
2009c6a8:	2011883a 	mov	r8,r4
2009c6ac:	0013883a 	mov	r9,zero
2009c6b0:	e23ffa15 	stw	r8,-24(fp)
2009c6b4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c6b8:	00001806 	br	2009c71c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
2009c6bc:	e13fff17 	ldw	r4,-4(fp)
2009c6c0:	200d883a 	mov	r6,r4
2009c6c4:	000f883a 	mov	r7,zero
2009c6c8:	e1bffc15 	stw	r6,-16(fp)
2009c6cc:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
2009c6d0:	e13ff917 	ldw	r4,-28(fp)
2009c6d4:	21400317 	ldw	r5,12(r4)
2009c6d8:	e13ffc17 	ldw	r4,-16(fp)
2009c6dc:	2900061e 	bne	r5,r4,2009c6f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
2009c6e0:	e13ff917 	ldw	r4,-28(fp)
2009c6e4:	21400b17 	ldw	r5,44(r4)
2009c6e8:	e13ffd17 	ldw	r4,-12(fp)
2009c6ec:	2900021e 	bne	r5,r4,2009c6f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
2009c6f0:	00bffa84 	movi	r2,-22
2009c6f4:	00002306 	br	2009c784 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009c6f8:	e13ff917 	ldw	r4,-28(fp)
2009c6fc:	21000317 	ldw	r4,12(r4)
2009c700:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009c704:	e13ff917 	ldw	r4,-28(fp)
2009c708:	21000b17 	ldw	r4,44(r4)
2009c70c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009c710:	e13ffc17 	ldw	r4,-16(fp)
2009c714:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009c718:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c71c:	e13ff917 	ldw	r4,-28(fp)
2009c720:	21400317 	ldw	r5,12(r4)
2009c724:	e13ffa17 	ldw	r4,-24(fp)
2009c728:	29000426 	beq	r5,r4,2009c73c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009c72c:	e13ff917 	ldw	r4,-28(fp)
2009c730:	21400b17 	ldw	r5,44(r4)
2009c734:	e13ffb17 	ldw	r4,-20(fp)
2009c738:	293fe01e 	bne	r5,r4,2009c6bc <__flash_rwdata_start+0xffffd8d0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
2009c73c:	e13fff17 	ldw	r4,-4(fp)
2009c740:	2005883a 	mov	r2,r4
2009c744:	0007883a 	mov	r3,zero
2009c748:	e0bffc15 	stw	r2,-16(fp)
2009c74c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
2009c750:	e0fffc17 	ldw	r3,-16(fp)
2009c754:	e0bff917 	ldw	r2,-28(fp)
2009c758:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
2009c75c:	e0fffd17 	ldw	r3,-12(fp)
2009c760:	e0bff917 	ldw	r2,-28(fp)
2009c764:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
2009c768:	e0fffa17 	ldw	r3,-24(fp)
2009c76c:	e0bfff17 	ldw	r2,-4(fp)
2009c770:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
2009c774:	e0fffb17 	ldw	r3,-20(fp)
2009c778:	e0bfff17 	ldw	r2,-4(fp)
2009c77c:	10c00b15 	stw	r3,44(r2)
	return 0;
2009c780:	0005883a 	mov	r2,zero
}
2009c784:	e037883a 	mov	sp,fp
2009c788:	df000017 	ldw	fp,0(sp)
2009c78c:	dec00104 	addi	sp,sp,4
2009c790:	f800283a 	ret

2009c794 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
2009c794:	defffc04 	addi	sp,sp,-16
2009c798:	df000315 	stw	fp,12(sp)
2009c79c:	df000304 	addi	fp,sp,12
2009c7a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009c7a4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
2009c7a8:	e0bfff17 	ldw	r2,-4(fp)
2009c7ac:	1000021e 	bne	r2,zero,2009c7b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009c7b0:	00bffa84 	movi	r2,-22
2009c7b4:	00001906 	br	2009c81c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009c7b8:	e0bfff17 	ldw	r2,-4(fp)
2009c7bc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009c7c0:	00000a06 	br	2009c7ec <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
2009c7c4:	e0bffd17 	ldw	r2,-12(fp)
2009c7c8:	10800717 	ldw	r2,28(r2)
2009c7cc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c7d0:	e0bffe17 	ldw	r2,-8(fp)
2009c7d4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009c7d8:	e0bffd17 	ldw	r2,-12(fp)
2009c7dc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
2009c7e0:	e0bffd17 	ldw	r2,-12(fp)
2009c7e4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
2009c7e8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
2009c7ec:	e0bffd17 	ldw	r2,-12(fp)
2009c7f0:	10c00317 	ldw	r3,12(r2)
2009c7f4:	e0bfff17 	ldw	r2,-4(fp)
2009c7f8:	18bff21e 	bne	r3,r2,2009c7c4 <__flash_rwdata_start+0xffffd9d8>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
2009c7fc:	e0bffd17 	ldw	r2,-12(fp)
2009c800:	10800717 	ldw	r2,28(r2)
2009c804:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c808:	e0bffe17 	ldw	r2,-8(fp)
2009c80c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009c810:	e0bffd17 	ldw	r2,-12(fp)
2009c814:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
2009c818:	0005883a 	mov	r2,zero
}
2009c81c:	e037883a 	mov	sp,fp
2009c820:	df000017 	ldw	fp,0(sp)
2009c824:	dec00104 	addi	sp,sp,4
2009c828:	f800283a 	ret

2009c82c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
2009c82c:	defff804 	addi	sp,sp,-32
2009c830:	df000715 	stw	fp,28(sp)
2009c834:	df000704 	addi	fp,sp,28
2009c838:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
2009c83c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
2009c840:	e13fff17 	ldw	r4,-4(fp)
2009c844:	2000021e 	bne	r4,zero,2009c850 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
2009c848:	00bffa84 	movi	r2,-22
2009c84c:	00002806 	br	2009c8f0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
2009c850:	e13fff17 	ldw	r4,-4(fp)
2009c854:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
2009c858:	e13fff17 	ldw	r4,-4(fp)
2009c85c:	2005883a 	mov	r2,r4
2009c860:	0007883a 	mov	r3,zero
2009c864:	e0bffb15 	stw	r2,-20(fp)
2009c868:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c86c:	00001006 	br	2009c8b0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
2009c870:	e0bff917 	ldw	r2,-28(fp)
2009c874:	10800f17 	ldw	r2,60(r2)
2009c878:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c87c:	e0bffa17 	ldw	r2,-24(fp)
2009c880:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
2009c884:	e0bff917 	ldw	r2,-28(fp)
2009c888:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
2009c88c:	e0bff917 	ldw	r2,-28(fp)
2009c890:	10800317 	ldw	r2,12(r2)
2009c894:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
2009c898:	e0bff917 	ldw	r2,-28(fp)
2009c89c:	10800b17 	ldw	r2,44(r2)
2009c8a0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
2009c8a4:	e0bffd17 	ldw	r2,-12(fp)
2009c8a8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
2009c8ac:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
2009c8b0:	e0bff917 	ldw	r2,-28(fp)
2009c8b4:	10c00317 	ldw	r3,12(r2)
2009c8b8:	e0bffb17 	ldw	r2,-20(fp)
2009c8bc:	18800426 	beq	r3,r2,2009c8d0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
2009c8c0:	e0bff917 	ldw	r2,-28(fp)
2009c8c4:	10c00b17 	ldw	r3,44(r2)
2009c8c8:	e0bffc17 	ldw	r2,-16(fp)
2009c8cc:	18bfe81e 	bne	r3,r2,2009c870 <__flash_rwdata_start+0xffffda84>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
2009c8d0:	e0bff917 	ldw	r2,-28(fp)
2009c8d4:	10800f17 	ldw	r2,60(r2)
2009c8d8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
2009c8dc:	e0bffa17 	ldw	r2,-24(fp)
2009c8e0:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
2009c8e4:	e0bff917 	ldw	r2,-28(fp)
2009c8e8:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
2009c8ec:	0005883a 	mov	r2,zero
}
2009c8f0:	e037883a 	mov	sp,fp
2009c8f4:	df000017 	ldw	fp,0(sp)
2009c8f8:	dec00104 	addi	sp,sp,4
2009c8fc:	f800283a 	ret

2009c900 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009c900:	deffef04 	addi	sp,sp,-68
2009c904:	df001015 	stw	fp,64(sp)
2009c908:	df001004 	addi	fp,sp,64
2009c90c:	e13ffb15 	stw	r4,-20(fp)
2009c910:	e17ffc15 	stw	r5,-16(fp)
2009c914:	e1bffd15 	stw	r6,-12(fp)
2009c918:	3807883a 	mov	r3,r7
2009c91c:	e0800117 	ldw	r2,4(fp)
2009c920:	e0fffe05 	stb	r3,-8(fp)
2009c924:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
2009c928:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
2009c92c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
2009c930:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
2009c934:	e0bffc17 	ldw	r2,-16(fp)
2009c938:	e0bff915 	stw	r2,-28(fp)
2009c93c:	e0bffd17 	ldw	r2,-12(fp)
2009c940:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
2009c944:	e0bffb17 	ldw	r2,-20(fp)
2009c948:	10800617 	ldw	r2,24(r2)
2009c94c:	10800037 	ldwio	r2,0(r2)
2009c950:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
2009c954:	e0bff017 	ldw	r2,-64(fp)
2009c958:	1080004c 	andi	r2,r2,1
2009c95c:	10000226 	beq	r2,zero,2009c968 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
2009c960:	00bffc04 	movi	r2,-16
2009c964:	00009206 	br	2009cbb0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009c968:	00800804 	movi	r2,32
2009c96c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009c970:	0005303a 	rdctl	r2,status
2009c974:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009c978:	e0fff317 	ldw	r3,-52(fp)
2009c97c:	00bfff84 	movi	r2,-2
2009c980:	1884703a 	and	r2,r3,r2
2009c984:	1001703a 	wrctl	status,r2
  
  return context;
2009c988:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
2009c98c:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009c990:	e0bffb17 	ldw	r2,-20(fp)
2009c994:	10800317 	ldw	r2,12(r2)
2009c998:	10800104 	addi	r2,r2,4
2009c99c:	e0fff117 	ldw	r3,-60(fp)
2009c9a0:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
2009c9a4:	e0bffb17 	ldw	r2,-20(fp)
2009c9a8:	10800317 	ldw	r2,12(r2)
2009c9ac:	e0fffb17 	ldw	r3,-20(fp)
2009c9b0:	18c00317 	ldw	r3,12(r3)
2009c9b4:	18c00037 	ldwio	r3,0(r3)
2009c9b8:	10c00035 	stwio	r3,0(r2)
2009c9bc:	e0bff217 	ldw	r2,-56(fp)
2009c9c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009c9c4:	e0bff417 	ldw	r2,-48(fp)
2009c9c8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
2009c9cc:	e0bffb17 	ldw	r2,-20(fp)
2009c9d0:	10800b17 	ldw	r2,44(r2)
2009c9d4:	10002326 	beq	r2,zero,2009ca64 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
2009c9d8:	e0bffb17 	ldw	r2,-20(fp)
2009c9dc:	10c00d17 	ldw	r3,52(r2)
2009c9e0:	e0bff117 	ldw	r2,-60(fp)
2009c9e4:	1884b03a 	or	r2,r3,r2
2009c9e8:	10800514 	ori	r2,r2,20
2009c9ec:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
2009c9f0:	e0fff117 	ldw	r3,-60(fp)
2009c9f4:	00bff7c4 	movi	r2,-33
2009c9f8:	1884703a 	and	r2,r3,r2
2009c9fc:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
2009ca00:	e0bff017 	ldw	r2,-64(fp)
2009ca04:	10800214 	ori	r2,r2,8
2009ca08:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ca0c:	0005303a 	rdctl	r2,status
2009ca10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009ca14:	e0fff517 	ldw	r3,-44(fp)
2009ca18:	00bfff84 	movi	r2,-2
2009ca1c:	1884703a 	and	r2,r3,r2
2009ca20:	1001703a 	wrctl	status,r2
  
  return context;
2009ca24:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
2009ca28:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009ca2c:	e0bffb17 	ldw	r2,-20(fp)
2009ca30:	10800317 	ldw	r2,12(r2)
2009ca34:	10800104 	addi	r2,r2,4
2009ca38:	e0fff117 	ldw	r3,-60(fp)
2009ca3c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009ca40:	e0bffb17 	ldw	r2,-20(fp)
2009ca44:	10800617 	ldw	r2,24(r2)
2009ca48:	e0fff017 	ldw	r3,-64(fp)
2009ca4c:	10c00035 	stwio	r3,0(r2)
2009ca50:	e0bff217 	ldw	r2,-56(fp)
2009ca54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009ca58:	e0bff617 	ldw	r2,-40(fp)
2009ca5c:	1001703a 	wrctl	status,r2
2009ca60:	00002306 	br	2009caf0 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
2009ca64:	e0bffb17 	ldw	r2,-20(fp)
2009ca68:	10c00d17 	ldw	r3,52(r2)
2009ca6c:	e0bff117 	ldw	r2,-60(fp)
2009ca70:	1884b03a 	or	r2,r3,r2
2009ca74:	10800114 	ori	r2,r2,4
2009ca78:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
2009ca7c:	e0fff117 	ldw	r3,-60(fp)
2009ca80:	00bff3c4 	movi	r2,-49
2009ca84:	1884703a 	and	r2,r3,r2
2009ca88:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
2009ca8c:	e0fff017 	ldw	r3,-64(fp)
2009ca90:	00bffdc4 	movi	r2,-9
2009ca94:	1884703a 	and	r2,r3,r2
2009ca98:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009ca9c:	0005303a 	rdctl	r2,status
2009caa0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009caa4:	e0fff717 	ldw	r3,-36(fp)
2009caa8:	00bfff84 	movi	r2,-2
2009caac:	1884703a 	and	r2,r3,r2
2009cab0:	1001703a 	wrctl	status,r2
  
  return context;
2009cab4:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
2009cab8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
2009cabc:	e0bffb17 	ldw	r2,-20(fp)
2009cac0:	10800317 	ldw	r2,12(r2)
2009cac4:	10800104 	addi	r2,r2,4
2009cac8:	e0fff117 	ldw	r3,-60(fp)
2009cacc:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009cad0:	e0bffb17 	ldw	r2,-20(fp)
2009cad4:	10800617 	ldw	r2,24(r2)
2009cad8:	e0fff017 	ldw	r3,-64(fp)
2009cadc:	10c00035 	stwio	r3,0(r2)
2009cae0:	e0bff217 	ldw	r2,-56(fp)
2009cae4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009cae8:	e0bff817 	ldw	r2,-32(fp)
2009caec:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
2009caf0:	e0bffb17 	ldw	r2,-20(fp)
2009caf4:	10800617 	ldw	r2,24(r2)
2009caf8:	10800104 	addi	r2,r2,4
2009cafc:	e0fff917 	ldw	r3,-28(fp)
2009cb00:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
2009cb04:	e0bffb17 	ldw	r2,-20(fp)
2009cb08:	10800617 	ldw	r2,24(r2)
2009cb0c:	10800204 	addi	r2,r2,8
2009cb10:	e0fffa17 	ldw	r3,-24(fp)
2009cb14:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
2009cb18:	e0bffe03 	ldbu	r2,-8(fp)
2009cb1c:	10000426 	beq	r2,zero,2009cb30 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
2009cb20:	e0bff017 	ldw	r2,-64(fp)
2009cb24:	10800414 	ori	r2,r2,16
2009cb28:	e0bff015 	stw	r2,-64(fp)
2009cb2c:	00000406 	br	2009cb40 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
2009cb30:	e0fff017 	ldw	r3,-64(fp)
2009cb34:	00bffbc4 	movi	r2,-17
2009cb38:	1884703a 	and	r2,r3,r2
2009cb3c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
2009cb40:	e0bfff03 	ldbu	r2,-4(fp)
2009cb44:	10000e26 	beq	r2,zero,2009cb80 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
2009cb48:	e0bff017 	ldw	r2,-64(fp)
2009cb4c:	10800094 	ori	r2,r2,2
2009cb50:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009cb54:	e0bffb17 	ldw	r2,-20(fp)
2009cb58:	10800617 	ldw	r2,24(r2)
2009cb5c:	10800304 	addi	r2,r2,12
2009cb60:	10800037 	ldwio	r2,0(r2)
2009cb64:	10000a1e 	bne	r2,zero,2009cb90 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
2009cb68:	e0bffb17 	ldw	r2,-20(fp)
2009cb6c:	10800617 	ldw	r2,24(r2)
2009cb70:	10800304 	addi	r2,r2,12
2009cb74:	00c03fc4 	movi	r3,255
2009cb78:	10c00035 	stwio	r3,0(r2)
2009cb7c:	00000406 	br	2009cb90 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
2009cb80:	e0fff017 	ldw	r3,-64(fp)
2009cb84:	00bfff44 	movi	r2,-3
2009cb88:	1884703a 	and	r2,r3,r2
2009cb8c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
2009cb90:	e0bff017 	ldw	r2,-64(fp)
2009cb94:	10800054 	ori	r2,r2,1
2009cb98:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
2009cb9c:	e0bffb17 	ldw	r2,-20(fp)
2009cba0:	10800617 	ldw	r2,24(r2)
2009cba4:	e0fff017 	ldw	r3,-64(fp)
2009cba8:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
2009cbac:	0005883a 	mov	r2,zero
}
2009cbb0:	e037883a 	mov	sp,fp
2009cbb4:	df000017 	ldw	fp,0(sp)
2009cbb8:	dec00104 	addi	sp,sp,4
2009cbbc:	f800283a 	ret

2009cbc0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
2009cbc0:	defff704 	addi	sp,sp,-36
2009cbc4:	dfc00815 	stw	ra,32(sp)
2009cbc8:	df000715 	stw	fp,28(sp)
2009cbcc:	dc400615 	stw	r17,24(sp)
2009cbd0:	dc000515 	stw	r16,20(sp)
2009cbd4:	df000704 	addi	fp,sp,28
2009cbd8:	e13ffa15 	stw	r4,-24(fp)
2009cbdc:	e17ffb15 	stw	r5,-20(fp)
2009cbe0:	3007883a 	mov	r3,r6
2009cbe4:	3805883a 	mov	r2,r7
2009cbe8:	e0fffc05 	stb	r3,-16(fp)
2009cbec:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
2009cbf0:	e13ffb17 	ldw	r4,-20(fp)
2009cbf4:	009c7940 	call	2009c794 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
2009cbf8:	10000226 	beq	r2,zero,2009cc04 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2009cbfc:	00bffa84 	movi	r2,-22
2009cc00:	00000b06 	br	2009cc30 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
2009cc04:	e0bffb17 	ldw	r2,-20(fp)
2009cc08:	1021883a 	mov	r16,r2
2009cc0c:	0023883a 	mov	r17,zero
2009cc10:	e0fffc03 	ldbu	r3,-16(fp)
2009cc14:	e0bffd03 	ldbu	r2,-12(fp)
2009cc18:	d8800015 	stw	r2,0(sp)
2009cc1c:	e13ffa17 	ldw	r4,-24(fp)
2009cc20:	800b883a 	mov	r5,r16
2009cc24:	880d883a 	mov	r6,r17
2009cc28:	180f883a 	mov	r7,r3
2009cc2c:	009c9000 	call	2009c900 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009cc30:	e6fffe04 	addi	sp,fp,-8
2009cc34:	dfc00317 	ldw	ra,12(sp)
2009cc38:	df000217 	ldw	fp,8(sp)
2009cc3c:	dc400117 	ldw	r17,4(sp)
2009cc40:	dc000017 	ldw	r16,0(sp)
2009cc44:	dec00404 	addi	sp,sp,16
2009cc48:	f800283a 	ret

2009cc4c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2009cc4c:	defff704 	addi	sp,sp,-36
2009cc50:	dfc00815 	stw	ra,32(sp)
2009cc54:	df000715 	stw	fp,28(sp)
2009cc58:	dc400615 	stw	r17,24(sp)
2009cc5c:	dc000515 	stw	r16,20(sp)
2009cc60:	df000704 	addi	fp,sp,28
2009cc64:	e13ffa15 	stw	r4,-24(fp)
2009cc68:	e17ffb15 	stw	r5,-20(fp)
2009cc6c:	3007883a 	mov	r3,r6
2009cc70:	3805883a 	mov	r2,r7
2009cc74:	e0fffc05 	stb	r3,-16(fp)
2009cc78:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2009cc7c:	e13ffb17 	ldw	r4,-20(fp)
2009cc80:	009c82c0 	call	2009c82c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
2009cc84:	10000226 	beq	r2,zero,2009cc90 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
2009cc88:	00bffa84 	movi	r2,-22
2009cc8c:	00000b06 	br	2009ccbc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
2009cc90:	e0bffb17 	ldw	r2,-20(fp)
2009cc94:	1021883a 	mov	r16,r2
2009cc98:	0023883a 	mov	r17,zero
2009cc9c:	e0fffc03 	ldbu	r3,-16(fp)
2009cca0:	e0bffd03 	ldbu	r2,-12(fp)
2009cca4:	d8800015 	stw	r2,0(sp)
2009cca8:	e13ffa17 	ldw	r4,-24(fp)
2009ccac:	800b883a 	mov	r5,r16
2009ccb0:	880d883a 	mov	r6,r17
2009ccb4:	180f883a 	mov	r7,r3
2009ccb8:	009c9000 	call	2009c900 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009ccbc:	e6fffe04 	addi	sp,fp,-8
2009ccc0:	dfc00317 	ldw	ra,12(sp)
2009ccc4:	df000217 	ldw	fp,8(sp)
2009ccc8:	dc400117 	ldw	r17,4(sp)
2009cccc:	dc000017 	ldw	r16,0(sp)
2009ccd0:	dec00404 	addi	sp,sp,16
2009ccd4:	f800283a 	ret

2009ccd8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2009ccd8:	defffc04 	addi	sp,sp,-16
2009ccdc:	dfc00315 	stw	ra,12(sp)
2009cce0:	df000215 	stw	fp,8(sp)
2009cce4:	df000204 	addi	fp,sp,8
2009cce8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2009ccec:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2009ccf0:	e13fff17 	ldw	r4,-4(fp)
2009ccf4:	d1601304 	addi	r5,gp,-32692
2009ccf8:	009d4240 	call	2009d424 <alt_find_dev>
2009ccfc:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2009cd00:	e0bffe17 	ldw	r2,-8(fp)
2009cd04:	1000041e 	bne	r2,zero,2009cd18 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2009cd08:	009b1500 	call	2009b150 <alt_get_errno>
2009cd0c:	1007883a 	mov	r3,r2
2009cd10:	008004c4 	movi	r2,19
2009cd14:	18800015 	stw	r2,0(r3)
    }

    return dev;
2009cd18:	e0bffe17 	ldw	r2,-8(fp)
}
2009cd1c:	e037883a 	mov	sp,fp
2009cd20:	dfc00117 	ldw	ra,4(sp)
2009cd24:	df000017 	ldw	fp,0(sp)
2009cd28:	dec00204 	addi	sp,sp,8
2009cd2c:	f800283a 	ret

2009cd30 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2009cd30:	defff804 	addi	sp,sp,-32
2009cd34:	dfc00715 	stw	ra,28(sp)
2009cd38:	df000615 	stw	fp,24(sp)
2009cd3c:	df000604 	addi	fp,sp,24
2009cd40:	e13ffd15 	stw	r4,-12(fp)
2009cd44:	e17ffe15 	stw	r5,-8(fp)
2009cd48:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2009cd4c:	e0bffd17 	ldw	r2,-12(fp)
2009cd50:	10801783 	ldbu	r2,94(r2)
2009cd54:	10803fcc 	andi	r2,r2,255
2009cd58:	10000b26 	beq	r2,zero,2009cd88 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2009cd5c:	e0bffd17 	ldw	r2,-12(fp)
2009cd60:	10800617 	ldw	r2,24(r2)
2009cd64:	00c00104 	movi	r3,4
2009cd68:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009cd6c:	0001883a 	nop
2009cd70:	e0bffd17 	ldw	r2,-12(fp)
2009cd74:	10800617 	ldw	r2,24(r2)
2009cd78:	10800037 	ldwio	r2,0(r2)
2009cd7c:	1080010c 	andi	r2,r2,4
2009cd80:	1005d0ba 	srai	r2,r2,2
2009cd84:	103ffa1e 	bne	r2,zero,2009cd70 <__flash_rwdata_start+0xffffdf84>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2009cd88:	e0bffd17 	ldw	r2,-12(fp)
2009cd8c:	10800317 	ldw	r2,12(r2)
2009cd90:	10800104 	addi	r2,r2,4
2009cd94:	00c00084 	movi	r3,2
2009cd98:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009cd9c:	0001883a 	nop
2009cda0:	e0bffd17 	ldw	r2,-12(fp)
2009cda4:	10800317 	ldw	r2,12(r2)
2009cda8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2009cdac:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009cdb0:	103ffb1e 	bne	r2,zero,2009cda0 <__flash_rwdata_start+0xffffdfb4>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009cdb4:	e0bffd17 	ldw	r2,-12(fp)
2009cdb8:	10800317 	ldw	r2,12(r2)
2009cdbc:	10800104 	addi	r2,r2,4
2009cdc0:	10800037 	ldwio	r2,0(r2)
2009cdc4:	1007883a 	mov	r3,r2
2009cdc8:	00bffbc4 	movi	r2,-17
2009cdcc:	1884703a 	and	r2,r3,r2
2009cdd0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009cdd4:	e0bffb17 	ldw	r2,-20(fp)
2009cdd8:	10800814 	ori	r2,r2,32
2009cddc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009cde0:	e0bffd17 	ldw	r2,-12(fp)
2009cde4:	10800317 	ldw	r2,12(r2)
2009cde8:	10800104 	addi	r2,r2,4
2009cdec:	e0fffb17 	ldw	r3,-20(fp)
2009cdf0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2009cdf4:	e0bffd17 	ldw	r2,-12(fp)
2009cdf8:	10800317 	ldw	r2,12(r2)
2009cdfc:	e0fffd17 	ldw	r3,-12(fp)
2009ce00:	18c00317 	ldw	r3,12(r3)
2009ce04:	18c00037 	ldwio	r3,0(r3)
2009ce08:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2009ce0c:	e0bffd17 	ldw	r2,-12(fp)
2009ce10:	10801783 	ldbu	r2,94(r2)
2009ce14:	10803fcc 	andi	r2,r2,255
2009ce18:	10000826 	beq	r2,zero,2009ce3c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2009ce1c:	e0bffd17 	ldw	r2,-12(fp)
2009ce20:	10800617 	ldw	r2,24(r2)
2009ce24:	10800404 	addi	r2,r2,16
2009ce28:	e0fffd17 	ldw	r3,-12(fp)
2009ce2c:	18c00617 	ldw	r3,24(r3)
2009ce30:	18c00404 	addi	r3,r3,16
2009ce34:	18c00037 	ldwio	r3,0(r3)
2009ce38:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2009ce3c:	e13ffd17 	ldw	r4,-12(fp)
2009ce40:	d1601304 	addi	r5,gp,-32692
2009ce44:	009d2c80 	call	2009d2c8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2009ce48:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2009ce4c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2009ce50:	e0bffc17 	ldw	r2,-16(fp)
2009ce54:	1000081e 	bne	r2,zero,2009ce78 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2009ce58:	d8000015 	stw	zero,0(sp)
2009ce5c:	e13ffe17 	ldw	r4,-8(fp)
2009ce60:	e17fff17 	ldw	r5,-4(fp)
2009ce64:	018802b4 	movhi	r6,8202
2009ce68:	31acd804 	addi	r6,r6,-19616
2009ce6c:	e1fffd17 	ldw	r7,-12(fp)
2009ce70:	009d4e40 	call	2009d4e4 <alt_ic_isr_register>
2009ce74:	00000306 	br	2009ce84 <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2009ce78:	01000034 	movhi	r4,0
2009ce7c:	2102f204 	addi	r4,r4,3016
2009ce80:	009db600 	call	2009db60 <alt_printf>
    }
    
    return;
2009ce84:	0001883a 	nop

}
2009ce88:	e037883a 	mov	sp,fp
2009ce8c:	dfc00117 	ldw	ra,4(sp)
2009ce90:	df000017 	ldw	fp,0(sp)
2009ce94:	dec00204 	addi	sp,sp,8
2009ce98:	f800283a 	ret

2009ce9c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2009ce9c:	defffb04 	addi	sp,sp,-20
2009cea0:	df000415 	stw	fp,16(sp)
2009cea4:	df000404 	addi	fp,sp,16
2009cea8:	e13ffc15 	stw	r4,-16(fp)
2009ceac:	e17ffd15 	stw	r5,-12(fp)
2009ceb0:	e1bffe15 	stw	r6,-8(fp)
2009ceb4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2009ceb8:	e0bffc17 	ldw	r2,-16(fp)
2009cebc:	e0fffd17 	ldw	r3,-12(fp)
2009cec0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2009cec4:	e0bffc17 	ldw	r2,-16(fp)
2009cec8:	e0ffff17 	ldw	r3,-4(fp)
2009cecc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2009ced0:	e0bffc17 	ldw	r2,-16(fp)
2009ced4:	e0fffe17 	ldw	r3,-8(fp)
2009ced8:	10c00d15 	stw	r3,52(r2)

    return ;
2009cedc:	0001883a 	nop
}
2009cee0:	e037883a 	mov	sp,fp
2009cee4:	df000017 	ldw	fp,0(sp)
2009cee8:	dec00104 	addi	sp,sp,4
2009ceec:	f800283a 	ret

2009cef0 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009cef0:	defffc04 	addi	sp,sp,-16
2009cef4:	dfc00315 	stw	ra,12(sp)
2009cef8:	df000215 	stw	fp,8(sp)
2009cefc:	df000204 	addi	fp,sp,8
2009cf00:	e13ffe15 	stw	r4,-8(fp)
2009cf04:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2009cf08:	e13ffe17 	ldw	r4,-8(fp)
2009cf0c:	e17fff17 	ldw	r5,-4(fp)
2009cf10:	000d883a 	mov	r6,zero
2009cf14:	009b6c40 	call	2009b6c4 <alt_msgdma_descriptor_async_transfer>

}
2009cf18:	e037883a 	mov	sp,fp
2009cf1c:	dfc00117 	ldw	ra,4(sp)
2009cf20:	df000017 	ldw	fp,0(sp)
2009cf24:	dec00204 	addi	sp,sp,8
2009cf28:	f800283a 	ret

2009cf2c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009cf2c:	defffc04 	addi	sp,sp,-16
2009cf30:	dfc00315 	stw	ra,12(sp)
2009cf34:	df000215 	stw	fp,8(sp)
2009cf38:	df000204 	addi	fp,sp,8
2009cf3c:	e13ffe15 	stw	r4,-8(fp)
2009cf40:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2009cf44:	e13ffe17 	ldw	r4,-8(fp)
2009cf48:	000b883a 	mov	r5,zero
2009cf4c:	e1bfff17 	ldw	r6,-4(fp)
2009cf50:	009b6c40 	call	2009b6c4 <alt_msgdma_descriptor_async_transfer>
}
2009cf54:	e037883a 	mov	sp,fp
2009cf58:	dfc00117 	ldw	ra,4(sp)
2009cf5c:	df000017 	ldw	fp,0(sp)
2009cf60:	dec00204 	addi	sp,sp,8
2009cf64:	f800283a 	ret

2009cf68 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009cf68:	defffc04 	addi	sp,sp,-16
2009cf6c:	dfc00315 	stw	ra,12(sp)
2009cf70:	df000215 	stw	fp,8(sp)
2009cf74:	df000204 	addi	fp,sp,8
2009cf78:	e13ffe15 	stw	r4,-8(fp)
2009cf7c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2009cf80:	e13ffe17 	ldw	r4,-8(fp)
2009cf84:	e17fff17 	ldw	r5,-4(fp)
2009cf88:	000d883a 	mov	r6,zero
2009cf8c:	009b9940 	call	2009b994 <alt_msgdma_descriptor_sync_transfer>
}
2009cf90:	e037883a 	mov	sp,fp
2009cf94:	dfc00117 	ldw	ra,4(sp)
2009cf98:	df000017 	ldw	fp,0(sp)
2009cf9c:	dec00204 	addi	sp,sp,8
2009cfa0:	f800283a 	ret

2009cfa4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009cfa4:	defffc04 	addi	sp,sp,-16
2009cfa8:	dfc00315 	stw	ra,12(sp)
2009cfac:	df000215 	stw	fp,8(sp)
2009cfb0:	df000204 	addi	fp,sp,8
2009cfb4:	e13ffe15 	stw	r4,-8(fp)
2009cfb8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2009cfbc:	e13ffe17 	ldw	r4,-8(fp)
2009cfc0:	000b883a 	mov	r5,zero
2009cfc4:	e1bfff17 	ldw	r6,-4(fp)
2009cfc8:	009b9940 	call	2009b994 <alt_msgdma_descriptor_sync_transfer>
}
2009cfcc:	e037883a 	mov	sp,fp
2009cfd0:	dfc00117 	ldw	ra,4(sp)
2009cfd4:	df000017 	ldw	fp,0(sp)
2009cfd8:	dec00204 	addi	sp,sp,8
2009cfdc:	f800283a 	ret

2009cfe0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2009cfe0:	defff504 	addi	sp,sp,-44
2009cfe4:	df000a15 	stw	fp,40(sp)
2009cfe8:	df000a04 	addi	fp,sp,40
2009cfec:	e13ffc15 	stw	r4,-16(fp)
2009cff0:	e17ffd15 	stw	r5,-12(fp)
2009cff4:	e1bffe15 	stw	r6,-8(fp)
2009cff8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2009cffc:	e03ff615 	stw	zero,-40(fp)
2009d000:	00800034 	movhi	r2,0
2009d004:	108a9c04 	addi	r2,r2,10864
2009d008:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2009d00c:	10003f26 	beq	r2,zero,2009d10c <alt_alarm_start+0x12c>
  {
    if (alarm)
2009d010:	e0bffc17 	ldw	r2,-16(fp)
2009d014:	10003b26 	beq	r2,zero,2009d104 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2009d018:	e0bffc17 	ldw	r2,-16(fp)
2009d01c:	e0fffe17 	ldw	r3,-8(fp)
2009d020:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2009d024:	e0bffc17 	ldw	r2,-16(fp)
2009d028:	e0ffff17 	ldw	r3,-4(fp)
2009d02c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d030:	0005303a 	rdctl	r2,status
2009d034:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d038:	e0fff817 	ldw	r3,-32(fp)
2009d03c:	00bfff84 	movi	r2,-2
2009d040:	1884703a 	and	r2,r3,r2
2009d044:	1001703a 	wrctl	status,r2
  
  return context;
2009d048:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2009d04c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2009d050:	00800034 	movhi	r2,0
2009d054:	108a9d04 	addi	r2,r2,10868
2009d058:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2009d05c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2009d060:	e0fffd17 	ldw	r3,-12(fp)
2009d064:	e0bff617 	ldw	r2,-40(fp)
2009d068:	1885883a 	add	r2,r3,r2
2009d06c:	10c00044 	addi	r3,r2,1
2009d070:	e0bffc17 	ldw	r2,-16(fp)
2009d074:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2009d078:	e0bffc17 	ldw	r2,-16(fp)
2009d07c:	10c00217 	ldw	r3,8(r2)
2009d080:	e0bff617 	ldw	r2,-40(fp)
2009d084:	1880042e 	bgeu	r3,r2,2009d098 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2009d088:	e0bffc17 	ldw	r2,-16(fp)
2009d08c:	00c00044 	movi	r3,1
2009d090:	10c00405 	stb	r3,16(r2)
2009d094:	00000206 	br	2009d0a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2009d098:	e0bffc17 	ldw	r2,-16(fp)
2009d09c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2009d0a0:	e0fffc17 	ldw	r3,-16(fp)
2009d0a4:	00800034 	movhi	r2,0
2009d0a8:	108a7e04 	addi	r2,r2,10744
2009d0ac:	e0bff915 	stw	r2,-28(fp)
2009d0b0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009d0b4:	e0bffa17 	ldw	r2,-24(fp)
2009d0b8:	e0fff917 	ldw	r3,-28(fp)
2009d0bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009d0c0:	e0bff917 	ldw	r2,-28(fp)
2009d0c4:	10c00017 	ldw	r3,0(r2)
2009d0c8:	e0bffa17 	ldw	r2,-24(fp)
2009d0cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009d0d0:	e0bff917 	ldw	r2,-28(fp)
2009d0d4:	10800017 	ldw	r2,0(r2)
2009d0d8:	e0fffa17 	ldw	r3,-24(fp)
2009d0dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009d0e0:	e0bff917 	ldw	r2,-28(fp)
2009d0e4:	e0fffa17 	ldw	r3,-24(fp)
2009d0e8:	10c00015 	stw	r3,0(r2)
2009d0ec:	e0bff717 	ldw	r2,-36(fp)
2009d0f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d0f4:	e0bffb17 	ldw	r2,-20(fp)
2009d0f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2009d0fc:	0005883a 	mov	r2,zero
2009d100:	00000306 	br	2009d110 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2009d104:	00bffa84 	movi	r2,-22
2009d108:	00000106 	br	2009d110 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2009d10c:	00bfde84 	movi	r2,-134
  }
}
2009d110:	e037883a 	mov	sp,fp
2009d114:	df000017 	ldw	fp,0(sp)
2009d118:	dec00104 	addi	sp,sp,4
2009d11c:	f800283a 	ret

2009d120 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2009d120:	defffa04 	addi	sp,sp,-24
2009d124:	dfc00515 	stw	ra,20(sp)
2009d128:	df000415 	stw	fp,16(sp)
2009d12c:	df000404 	addi	fp,sp,16
2009d130:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2009d134:	008000c4 	movi	r2,3
2009d138:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2009d13c:	e0fffd17 	ldw	r3,-12(fp)
2009d140:	008003f4 	movhi	r2,15
2009d144:	10909004 	addi	r2,r2,16960
2009d148:	1885383a 	mul	r2,r3,r2
2009d14c:	0101dcf4 	movhi	r4,1907
2009d150:	21165004 	addi	r4,r4,22848
2009d154:	100b883a 	mov	r5,r2
2009d158:	0088bf00 	call	20088bf0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2009d15c:	01200034 	movhi	r4,32768
2009d160:	213fffc4 	addi	r4,r4,-1
2009d164:	100b883a 	mov	r5,r2
2009d168:	0088bf00 	call	20088bf0 <__udivsi3>
2009d16c:	e13fff17 	ldw	r4,-4(fp)
2009d170:	100b883a 	mov	r5,r2
2009d174:	0088bf00 	call	20088bf0 <__udivsi3>
2009d178:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2009d17c:	e0bffe17 	ldw	r2,-8(fp)
2009d180:	10002a26 	beq	r2,zero,2009d22c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2009d184:	e03ffc15 	stw	zero,-16(fp)
2009d188:	00001706 	br	2009d1e8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2009d18c:	00a00034 	movhi	r2,32768
2009d190:	10bfffc4 	addi	r2,r2,-1
2009d194:	10bfffc4 	addi	r2,r2,-1
2009d198:	103ffe1e 	bne	r2,zero,2009d194 <__flash_rwdata_start+0xffffe3a8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2009d19c:	e0fffd17 	ldw	r3,-12(fp)
2009d1a0:	008003f4 	movhi	r2,15
2009d1a4:	10909004 	addi	r2,r2,16960
2009d1a8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2009d1ac:	0101dcf4 	movhi	r4,1907
2009d1b0:	21165004 	addi	r4,r4,22848
2009d1b4:	100b883a 	mov	r5,r2
2009d1b8:	0088bf00 	call	20088bf0 <__udivsi3>
2009d1bc:	01200034 	movhi	r4,32768
2009d1c0:	213fffc4 	addi	r4,r4,-1
2009d1c4:	100b883a 	mov	r5,r2
2009d1c8:	0088bf00 	call	20088bf0 <__udivsi3>
2009d1cc:	1007883a 	mov	r3,r2
2009d1d0:	e0bfff17 	ldw	r2,-4(fp)
2009d1d4:	10c5c83a 	sub	r2,r2,r3
2009d1d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2009d1dc:	e0bffc17 	ldw	r2,-16(fp)
2009d1e0:	10800044 	addi	r2,r2,1
2009d1e4:	e0bffc15 	stw	r2,-16(fp)
2009d1e8:	e0fffc17 	ldw	r3,-16(fp)
2009d1ec:	e0bffe17 	ldw	r2,-8(fp)
2009d1f0:	18bfe616 	blt	r3,r2,2009d18c <__flash_rwdata_start+0xffffe3a0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009d1f4:	e0fffd17 	ldw	r3,-12(fp)
2009d1f8:	008003f4 	movhi	r2,15
2009d1fc:	10909004 	addi	r2,r2,16960
2009d200:	1885383a 	mul	r2,r3,r2
2009d204:	0101dcf4 	movhi	r4,1907
2009d208:	21165004 	addi	r4,r4,22848
2009d20c:	100b883a 	mov	r5,r2
2009d210:	0088bf00 	call	20088bf0 <__udivsi3>
2009d214:	1007883a 	mov	r3,r2
2009d218:	e0bfff17 	ldw	r2,-4(fp)
2009d21c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009d220:	10bfffc4 	addi	r2,r2,-1
2009d224:	103ffe1e 	bne	r2,zero,2009d220 <__flash_rwdata_start+0xffffe434>
2009d228:	00000d06 	br	2009d260 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009d22c:	e0fffd17 	ldw	r3,-12(fp)
2009d230:	008003f4 	movhi	r2,15
2009d234:	10909004 	addi	r2,r2,16960
2009d238:	1885383a 	mul	r2,r3,r2
2009d23c:	0101dcf4 	movhi	r4,1907
2009d240:	21165004 	addi	r4,r4,22848
2009d244:	100b883a 	mov	r5,r2
2009d248:	0088bf00 	call	20088bf0 <__udivsi3>
2009d24c:	1007883a 	mov	r3,r2
2009d250:	e0bfff17 	ldw	r2,-4(fp)
2009d254:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009d258:	10bfffc4 	addi	r2,r2,-1
2009d25c:	00bffe16 	blt	zero,r2,2009d258 <__flash_rwdata_start+0xffffe46c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2009d260:	0005883a 	mov	r2,zero
}
2009d264:	e037883a 	mov	sp,fp
2009d268:	dfc00117 	ldw	ra,4(sp)
2009d26c:	df000017 	ldw	fp,0(sp)
2009d270:	dec00204 	addi	sp,sp,8
2009d274:	f800283a 	ret

2009d278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009d278:	defffe04 	addi	sp,sp,-8
2009d27c:	dfc00115 	stw	ra,4(sp)
2009d280:	df000015 	stw	fp,0(sp)
2009d284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009d288:	00800034 	movhi	r2,0
2009d28c:	108a7b04 	addi	r2,r2,10732
2009d290:	10800017 	ldw	r2,0(r2)
2009d294:	10000526 	beq	r2,zero,2009d2ac <alt_get_errno+0x34>
2009d298:	00800034 	movhi	r2,0
2009d29c:	108a7b04 	addi	r2,r2,10732
2009d2a0:	10800017 	ldw	r2,0(r2)
2009d2a4:	103ee83a 	callr	r2
2009d2a8:	00000206 	br	2009d2b4 <alt_get_errno+0x3c>
2009d2ac:	00800034 	movhi	r2,0
2009d2b0:	108a9404 	addi	r2,r2,10832
}
2009d2b4:	e037883a 	mov	sp,fp
2009d2b8:	dfc00117 	ldw	ra,4(sp)
2009d2bc:	df000017 	ldw	fp,0(sp)
2009d2c0:	dec00204 	addi	sp,sp,8
2009d2c4:	f800283a 	ret

2009d2c8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2009d2c8:	defffa04 	addi	sp,sp,-24
2009d2cc:	dfc00515 	stw	ra,20(sp)
2009d2d0:	df000415 	stw	fp,16(sp)
2009d2d4:	df000404 	addi	fp,sp,16
2009d2d8:	e13ffe15 	stw	r4,-8(fp)
2009d2dc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2009d2e0:	e0bffe17 	ldw	r2,-8(fp)
2009d2e4:	10000326 	beq	r2,zero,2009d2f4 <alt_dev_llist_insert+0x2c>
2009d2e8:	e0bffe17 	ldw	r2,-8(fp)
2009d2ec:	10800217 	ldw	r2,8(r2)
2009d2f0:	1000061e 	bne	r2,zero,2009d30c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2009d2f4:	009d2780 	call	2009d278 <alt_get_errno>
2009d2f8:	1007883a 	mov	r3,r2
2009d2fc:	00800584 	movi	r2,22
2009d300:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2009d304:	00bffa84 	movi	r2,-22
2009d308:	00001306 	br	2009d358 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2009d30c:	e0bffe17 	ldw	r2,-8(fp)
2009d310:	e0ffff17 	ldw	r3,-4(fp)
2009d314:	e0fffc15 	stw	r3,-16(fp)
2009d318:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009d31c:	e0bffd17 	ldw	r2,-12(fp)
2009d320:	e0fffc17 	ldw	r3,-16(fp)
2009d324:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009d328:	e0bffc17 	ldw	r2,-16(fp)
2009d32c:	10c00017 	ldw	r3,0(r2)
2009d330:	e0bffd17 	ldw	r2,-12(fp)
2009d334:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009d338:	e0bffc17 	ldw	r2,-16(fp)
2009d33c:	10800017 	ldw	r2,0(r2)
2009d340:	e0fffd17 	ldw	r3,-12(fp)
2009d344:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009d348:	e0bffc17 	ldw	r2,-16(fp)
2009d34c:	e0fffd17 	ldw	r3,-12(fp)
2009d350:	10c00015 	stw	r3,0(r2)

  return 0;  
2009d354:	0005883a 	mov	r2,zero
}
2009d358:	e037883a 	mov	sp,fp
2009d35c:	dfc00117 	ldw	ra,4(sp)
2009d360:	df000017 	ldw	fp,0(sp)
2009d364:	dec00204 	addi	sp,sp,8
2009d368:	f800283a 	ret

2009d36c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2009d36c:	defffd04 	addi	sp,sp,-12
2009d370:	dfc00215 	stw	ra,8(sp)
2009d374:	df000115 	stw	fp,4(sp)
2009d378:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009d37c:	008802b4 	movhi	r2,8202
2009d380:	10b88004 	addi	r2,r2,-7680
2009d384:	e0bfff15 	stw	r2,-4(fp)
2009d388:	00000606 	br	2009d3a4 <_do_ctors+0x38>
        (*ctor) (); 
2009d38c:	e0bfff17 	ldw	r2,-4(fp)
2009d390:	10800017 	ldw	r2,0(r2)
2009d394:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009d398:	e0bfff17 	ldw	r2,-4(fp)
2009d39c:	10bfff04 	addi	r2,r2,-4
2009d3a0:	e0bfff15 	stw	r2,-4(fp)
2009d3a4:	e0ffff17 	ldw	r3,-4(fp)
2009d3a8:	008802b4 	movhi	r2,8202
2009d3ac:	10b88104 	addi	r2,r2,-7676
2009d3b0:	18bff62e 	bgeu	r3,r2,2009d38c <__flash_rwdata_start+0xffffe5a0>
        (*ctor) (); 
}
2009d3b4:	e037883a 	mov	sp,fp
2009d3b8:	dfc00117 	ldw	ra,4(sp)
2009d3bc:	df000017 	ldw	fp,0(sp)
2009d3c0:	dec00204 	addi	sp,sp,8
2009d3c4:	f800283a 	ret

2009d3c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2009d3c8:	defffd04 	addi	sp,sp,-12
2009d3cc:	dfc00215 	stw	ra,8(sp)
2009d3d0:	df000115 	stw	fp,4(sp)
2009d3d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009d3d8:	008802b4 	movhi	r2,8202
2009d3dc:	10b88004 	addi	r2,r2,-7680
2009d3e0:	e0bfff15 	stw	r2,-4(fp)
2009d3e4:	00000606 	br	2009d400 <_do_dtors+0x38>
        (*dtor) (); 
2009d3e8:	e0bfff17 	ldw	r2,-4(fp)
2009d3ec:	10800017 	ldw	r2,0(r2)
2009d3f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009d3f4:	e0bfff17 	ldw	r2,-4(fp)
2009d3f8:	10bfff04 	addi	r2,r2,-4
2009d3fc:	e0bfff15 	stw	r2,-4(fp)
2009d400:	e0ffff17 	ldw	r3,-4(fp)
2009d404:	008802b4 	movhi	r2,8202
2009d408:	10b88104 	addi	r2,r2,-7676
2009d40c:	18bff62e 	bgeu	r3,r2,2009d3e8 <__flash_rwdata_start+0xffffe5fc>
        (*dtor) (); 
}
2009d410:	e037883a 	mov	sp,fp
2009d414:	dfc00117 	ldw	ra,4(sp)
2009d418:	df000017 	ldw	fp,0(sp)
2009d41c:	dec00204 	addi	sp,sp,8
2009d420:	f800283a 	ret

2009d424 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2009d424:	defffa04 	addi	sp,sp,-24
2009d428:	dfc00515 	stw	ra,20(sp)
2009d42c:	df000415 	stw	fp,16(sp)
2009d430:	df000404 	addi	fp,sp,16
2009d434:	e13ffe15 	stw	r4,-8(fp)
2009d438:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2009d43c:	e0bfff17 	ldw	r2,-4(fp)
2009d440:	10800017 	ldw	r2,0(r2)
2009d444:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2009d448:	e13ffe17 	ldw	r4,-8(fp)
2009d44c:	008c4740 	call	2008c474 <strlen>
2009d450:	10800044 	addi	r2,r2,1
2009d454:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009d458:	00000d06 	br	2009d490 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2009d45c:	e0bffc17 	ldw	r2,-16(fp)
2009d460:	10c00217 	ldw	r3,8(r2)
2009d464:	e0bffd17 	ldw	r2,-12(fp)
2009d468:	1809883a 	mov	r4,r3
2009d46c:	e17ffe17 	ldw	r5,-8(fp)
2009d470:	100d883a 	mov	r6,r2
2009d474:	008be9c0 	call	2008be9c <memcmp>
2009d478:	1000021e 	bne	r2,zero,2009d484 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2009d47c:	e0bffc17 	ldw	r2,-16(fp)
2009d480:	00000706 	br	2009d4a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2009d484:	e0bffc17 	ldw	r2,-16(fp)
2009d488:	10800017 	ldw	r2,0(r2)
2009d48c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009d490:	e0fffc17 	ldw	r3,-16(fp)
2009d494:	e0bfff17 	ldw	r2,-4(fp)
2009d498:	18bff01e 	bne	r3,r2,2009d45c <__flash_rwdata_start+0xffffe670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2009d49c:	0005883a 	mov	r2,zero
}
2009d4a0:	e037883a 	mov	sp,fp
2009d4a4:	dfc00117 	ldw	ra,4(sp)
2009d4a8:	df000017 	ldw	fp,0(sp)
2009d4ac:	dec00204 	addi	sp,sp,8
2009d4b0:	f800283a 	ret

2009d4b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2009d4b4:	defffe04 	addi	sp,sp,-8
2009d4b8:	dfc00115 	stw	ra,4(sp)
2009d4bc:	df000015 	stw	fp,0(sp)
2009d4c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2009d4c4:	0009883a 	mov	r4,zero
2009d4c8:	01440004 	movi	r5,4096
2009d4cc:	009dfb40 	call	2009dfb4 <alt_icache_flush>
#endif
}
2009d4d0:	e037883a 	mov	sp,fp
2009d4d4:	dfc00117 	ldw	ra,4(sp)
2009d4d8:	df000017 	ldw	fp,0(sp)
2009d4dc:	dec00204 	addi	sp,sp,8
2009d4e0:	f800283a 	ret

2009d4e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009d4e4:	defff904 	addi	sp,sp,-28
2009d4e8:	dfc00615 	stw	ra,24(sp)
2009d4ec:	df000515 	stw	fp,20(sp)
2009d4f0:	df000504 	addi	fp,sp,20
2009d4f4:	e13ffc15 	stw	r4,-16(fp)
2009d4f8:	e17ffd15 	stw	r5,-12(fp)
2009d4fc:	e1bffe15 	stw	r6,-8(fp)
2009d500:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2009d504:	e0800217 	ldw	r2,8(fp)
2009d508:	d8800015 	stw	r2,0(sp)
2009d50c:	e13ffc17 	ldw	r4,-16(fp)
2009d510:	e17ffd17 	ldw	r5,-12(fp)
2009d514:	e1bffe17 	ldw	r6,-8(fp)
2009d518:	e1ffff17 	ldw	r7,-4(fp)
2009d51c:	009d6c40 	call	2009d6c4 <alt_iic_isr_register>
}  
2009d520:	e037883a 	mov	sp,fp
2009d524:	dfc00117 	ldw	ra,4(sp)
2009d528:	df000017 	ldw	fp,0(sp)
2009d52c:	dec00204 	addi	sp,sp,8
2009d530:	f800283a 	ret

2009d534 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2009d534:	defff904 	addi	sp,sp,-28
2009d538:	df000615 	stw	fp,24(sp)
2009d53c:	df000604 	addi	fp,sp,24
2009d540:	e13ffe15 	stw	r4,-8(fp)
2009d544:	e17fff15 	stw	r5,-4(fp)
2009d548:	e0bfff17 	ldw	r2,-4(fp)
2009d54c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d550:	0005303a 	rdctl	r2,status
2009d554:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d558:	e0fffb17 	ldw	r3,-20(fp)
2009d55c:	00bfff84 	movi	r2,-2
2009d560:	1884703a 	and	r2,r3,r2
2009d564:	1001703a 	wrctl	status,r2
  
  return context;
2009d568:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009d56c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2009d570:	e0bffa17 	ldw	r2,-24(fp)
2009d574:	00c00044 	movi	r3,1
2009d578:	1884983a 	sll	r2,r3,r2
2009d57c:	1007883a 	mov	r3,r2
2009d580:	00800034 	movhi	r2,0
2009d584:	108a9804 	addi	r2,r2,10848
2009d588:	10800017 	ldw	r2,0(r2)
2009d58c:	1886b03a 	or	r3,r3,r2
2009d590:	00800034 	movhi	r2,0
2009d594:	108a9804 	addi	r2,r2,10848
2009d598:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009d59c:	00800034 	movhi	r2,0
2009d5a0:	108a9804 	addi	r2,r2,10848
2009d5a4:	10800017 	ldw	r2,0(r2)
2009d5a8:	100170fa 	wrctl	ienable,r2
2009d5ac:	e0bffc17 	ldw	r2,-16(fp)
2009d5b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d5b4:	e0bffd17 	ldw	r2,-12(fp)
2009d5b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009d5bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2009d5c0:	0001883a 	nop
}
2009d5c4:	e037883a 	mov	sp,fp
2009d5c8:	df000017 	ldw	fp,0(sp)
2009d5cc:	dec00104 	addi	sp,sp,4
2009d5d0:	f800283a 	ret

2009d5d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2009d5d4:	defff904 	addi	sp,sp,-28
2009d5d8:	df000615 	stw	fp,24(sp)
2009d5dc:	df000604 	addi	fp,sp,24
2009d5e0:	e13ffe15 	stw	r4,-8(fp)
2009d5e4:	e17fff15 	stw	r5,-4(fp)
2009d5e8:	e0bfff17 	ldw	r2,-4(fp)
2009d5ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d5f0:	0005303a 	rdctl	r2,status
2009d5f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d5f8:	e0fffb17 	ldw	r3,-20(fp)
2009d5fc:	00bfff84 	movi	r2,-2
2009d600:	1884703a 	and	r2,r3,r2
2009d604:	1001703a 	wrctl	status,r2
  
  return context;
2009d608:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009d60c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2009d610:	e0bffa17 	ldw	r2,-24(fp)
2009d614:	00c00044 	movi	r3,1
2009d618:	1884983a 	sll	r2,r3,r2
2009d61c:	0084303a 	nor	r2,zero,r2
2009d620:	1007883a 	mov	r3,r2
2009d624:	00800034 	movhi	r2,0
2009d628:	108a9804 	addi	r2,r2,10848
2009d62c:	10800017 	ldw	r2,0(r2)
2009d630:	1886703a 	and	r3,r3,r2
2009d634:	00800034 	movhi	r2,0
2009d638:	108a9804 	addi	r2,r2,10848
2009d63c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009d640:	00800034 	movhi	r2,0
2009d644:	108a9804 	addi	r2,r2,10848
2009d648:	10800017 	ldw	r2,0(r2)
2009d64c:	100170fa 	wrctl	ienable,r2
2009d650:	e0bffc17 	ldw	r2,-16(fp)
2009d654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d658:	e0bffd17 	ldw	r2,-12(fp)
2009d65c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009d660:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2009d664:	0001883a 	nop
}
2009d668:	e037883a 	mov	sp,fp
2009d66c:	df000017 	ldw	fp,0(sp)
2009d670:	dec00104 	addi	sp,sp,4
2009d674:	f800283a 	ret

2009d678 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2009d678:	defffc04 	addi	sp,sp,-16
2009d67c:	df000315 	stw	fp,12(sp)
2009d680:	df000304 	addi	fp,sp,12
2009d684:	e13ffe15 	stw	r4,-8(fp)
2009d688:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2009d68c:	000530fa 	rdctl	r2,ienable
2009d690:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2009d694:	e0bfff17 	ldw	r2,-4(fp)
2009d698:	00c00044 	movi	r3,1
2009d69c:	1884983a 	sll	r2,r3,r2
2009d6a0:	1007883a 	mov	r3,r2
2009d6a4:	e0bffd17 	ldw	r2,-12(fp)
2009d6a8:	1884703a 	and	r2,r3,r2
2009d6ac:	1004c03a 	cmpne	r2,r2,zero
2009d6b0:	10803fcc 	andi	r2,r2,255
}
2009d6b4:	e037883a 	mov	sp,fp
2009d6b8:	df000017 	ldw	fp,0(sp)
2009d6bc:	dec00104 	addi	sp,sp,4
2009d6c0:	f800283a 	ret

2009d6c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009d6c4:	defff504 	addi	sp,sp,-44
2009d6c8:	dfc00a15 	stw	ra,40(sp)
2009d6cc:	df000915 	stw	fp,36(sp)
2009d6d0:	df000904 	addi	fp,sp,36
2009d6d4:	e13ffc15 	stw	r4,-16(fp)
2009d6d8:	e17ffd15 	stw	r5,-12(fp)
2009d6dc:	e1bffe15 	stw	r6,-8(fp)
2009d6e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2009d6e4:	00bffa84 	movi	r2,-22
2009d6e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2009d6ec:	e0bffd17 	ldw	r2,-12(fp)
2009d6f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2009d6f4:	e0bff817 	ldw	r2,-32(fp)
2009d6f8:	10800808 	cmpgei	r2,r2,32
2009d6fc:	1000271e 	bne	r2,zero,2009d79c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009d700:	0005303a 	rdctl	r2,status
2009d704:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009d708:	e0fffa17 	ldw	r3,-24(fp)
2009d70c:	00bfff84 	movi	r2,-2
2009d710:	1884703a 	and	r2,r3,r2
2009d714:	1001703a 	wrctl	status,r2
  
  return context;
2009d718:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2009d71c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2009d720:	00800034 	movhi	r2,0
2009d724:	108c9d04 	addi	r2,r2,12916
2009d728:	e0fff817 	ldw	r3,-32(fp)
2009d72c:	180690fa 	slli	r3,r3,3
2009d730:	10c5883a 	add	r2,r2,r3
2009d734:	e0fffe17 	ldw	r3,-8(fp)
2009d738:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2009d73c:	00800034 	movhi	r2,0
2009d740:	108c9d04 	addi	r2,r2,12916
2009d744:	e0fff817 	ldw	r3,-32(fp)
2009d748:	180690fa 	slli	r3,r3,3
2009d74c:	18c00104 	addi	r3,r3,4
2009d750:	10c5883a 	add	r2,r2,r3
2009d754:	e0ffff17 	ldw	r3,-4(fp)
2009d758:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2009d75c:	e0bffe17 	ldw	r2,-8(fp)
2009d760:	10000526 	beq	r2,zero,2009d778 <alt_iic_isr_register+0xb4>
2009d764:	e0bff817 	ldw	r2,-32(fp)
2009d768:	e13ffc17 	ldw	r4,-16(fp)
2009d76c:	100b883a 	mov	r5,r2
2009d770:	009d5340 	call	2009d534 <alt_ic_irq_enable>
2009d774:	00000406 	br	2009d788 <alt_iic_isr_register+0xc4>
2009d778:	e0bff817 	ldw	r2,-32(fp)
2009d77c:	e13ffc17 	ldw	r4,-16(fp)
2009d780:	100b883a 	mov	r5,r2
2009d784:	009d5d40 	call	2009d5d4 <alt_ic_irq_disable>
2009d788:	e0bff715 	stw	r2,-36(fp)
2009d78c:	e0bff917 	ldw	r2,-28(fp)
2009d790:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009d794:	e0bffb17 	ldw	r2,-20(fp)
2009d798:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2009d79c:	e0bff717 	ldw	r2,-36(fp)
}
2009d7a0:	e037883a 	mov	sp,fp
2009d7a4:	dfc00117 	ldw	ra,4(sp)
2009d7a8:	df000017 	ldw	fp,0(sp)
2009d7ac:	dec00204 	addi	sp,sp,8
2009d7b0:	f800283a 	ret

2009d7b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2009d7b4:	defff904 	addi	sp,sp,-28
2009d7b8:	dfc00615 	stw	ra,24(sp)
2009d7bc:	df000515 	stw	fp,20(sp)
2009d7c0:	df000504 	addi	fp,sp,20
2009d7c4:	e13ffc15 	stw	r4,-16(fp)
2009d7c8:	e17ffd15 	stw	r5,-12(fp)
2009d7cc:	e1bffe15 	stw	r6,-8(fp)
2009d7d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2009d7d4:	e13ffd17 	ldw	r4,-12(fp)
2009d7d8:	e17ffe17 	ldw	r5,-8(fp)
2009d7dc:	e1bfff17 	ldw	r6,-4(fp)
2009d7e0:	009da080 	call	2009da08 <open>
2009d7e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2009d7e8:	e0bffb17 	ldw	r2,-20(fp)
2009d7ec:	10001c16 	blt	r2,zero,2009d860 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2009d7f0:	00800034 	movhi	r2,0
2009d7f4:	1085ad04 	addi	r2,r2,5812
2009d7f8:	e0fffb17 	ldw	r3,-20(fp)
2009d7fc:	18c00324 	muli	r3,r3,12
2009d800:	10c5883a 	add	r2,r2,r3
2009d804:	10c00017 	ldw	r3,0(r2)
2009d808:	e0bffc17 	ldw	r2,-16(fp)
2009d80c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2009d810:	00800034 	movhi	r2,0
2009d814:	1085ad04 	addi	r2,r2,5812
2009d818:	e0fffb17 	ldw	r3,-20(fp)
2009d81c:	18c00324 	muli	r3,r3,12
2009d820:	18c00104 	addi	r3,r3,4
2009d824:	10c5883a 	add	r2,r2,r3
2009d828:	10c00017 	ldw	r3,0(r2)
2009d82c:	e0bffc17 	ldw	r2,-16(fp)
2009d830:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2009d834:	00800034 	movhi	r2,0
2009d838:	1085ad04 	addi	r2,r2,5812
2009d83c:	e0fffb17 	ldw	r3,-20(fp)
2009d840:	18c00324 	muli	r3,r3,12
2009d844:	18c00204 	addi	r3,r3,8
2009d848:	10c5883a 	add	r2,r2,r3
2009d84c:	10c00017 	ldw	r3,0(r2)
2009d850:	e0bffc17 	ldw	r2,-16(fp)
2009d854:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2009d858:	e13ffb17 	ldw	r4,-20(fp)
2009d85c:	0099fc80 	call	20099fc8 <alt_release_fd>
  }
} 
2009d860:	e037883a 	mov	sp,fp
2009d864:	dfc00117 	ldw	ra,4(sp)
2009d868:	df000017 	ldw	fp,0(sp)
2009d86c:	dec00204 	addi	sp,sp,8
2009d870:	f800283a 	ret

2009d874 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2009d874:	defffb04 	addi	sp,sp,-20
2009d878:	dfc00415 	stw	ra,16(sp)
2009d87c:	df000315 	stw	fp,12(sp)
2009d880:	df000304 	addi	fp,sp,12
2009d884:	e13ffd15 	stw	r4,-12(fp)
2009d888:	e17ffe15 	stw	r5,-8(fp)
2009d88c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2009d890:	01000034 	movhi	r4,0
2009d894:	2105b004 	addi	r4,r4,5824
2009d898:	e17ffd17 	ldw	r5,-12(fp)
2009d89c:	01800044 	movi	r6,1
2009d8a0:	01c07fc4 	movi	r7,511
2009d8a4:	009d7b40 	call	2009d7b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2009d8a8:	01000034 	movhi	r4,0
2009d8ac:	2105ad04 	addi	r4,r4,5812
2009d8b0:	e17ffe17 	ldw	r5,-8(fp)
2009d8b4:	000d883a 	mov	r6,zero
2009d8b8:	01c07fc4 	movi	r7,511
2009d8bc:	009d7b40 	call	2009d7b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2009d8c0:	01000034 	movhi	r4,0
2009d8c4:	2105b304 	addi	r4,r4,5836
2009d8c8:	e17fff17 	ldw	r5,-4(fp)
2009d8cc:	01800044 	movi	r6,1
2009d8d0:	01c07fc4 	movi	r7,511
2009d8d4:	009d7b40 	call	2009d7b4 <alt_open_fd>
}  
2009d8d8:	e037883a 	mov	sp,fp
2009d8dc:	dfc00117 	ldw	ra,4(sp)
2009d8e0:	df000017 	ldw	fp,0(sp)
2009d8e4:	dec00204 	addi	sp,sp,8
2009d8e8:	f800283a 	ret

2009d8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009d8ec:	defffe04 	addi	sp,sp,-8
2009d8f0:	dfc00115 	stw	ra,4(sp)
2009d8f4:	df000015 	stw	fp,0(sp)
2009d8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009d8fc:	00800034 	movhi	r2,0
2009d900:	108a7b04 	addi	r2,r2,10732
2009d904:	10800017 	ldw	r2,0(r2)
2009d908:	10000526 	beq	r2,zero,2009d920 <alt_get_errno+0x34>
2009d90c:	00800034 	movhi	r2,0
2009d910:	108a7b04 	addi	r2,r2,10732
2009d914:	10800017 	ldw	r2,0(r2)
2009d918:	103ee83a 	callr	r2
2009d91c:	00000206 	br	2009d928 <alt_get_errno+0x3c>
2009d920:	00800034 	movhi	r2,0
2009d924:	108a9404 	addi	r2,r2,10832
}
2009d928:	e037883a 	mov	sp,fp
2009d92c:	dfc00117 	ldw	ra,4(sp)
2009d930:	df000017 	ldw	fp,0(sp)
2009d934:	dec00204 	addi	sp,sp,8
2009d938:	f800283a 	ret

2009d93c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2009d93c:	defffd04 	addi	sp,sp,-12
2009d940:	df000215 	stw	fp,8(sp)
2009d944:	df000204 	addi	fp,sp,8
2009d948:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2009d94c:	e0bfff17 	ldw	r2,-4(fp)
2009d950:	10800217 	ldw	r2,8(r2)
2009d954:	10d00034 	orhi	r3,r2,16384
2009d958:	e0bfff17 	ldw	r2,-4(fp)
2009d95c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009d960:	e03ffe15 	stw	zero,-8(fp)
2009d964:	00001d06 	br	2009d9dc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009d968:	00800034 	movhi	r2,0
2009d96c:	1085ad04 	addi	r2,r2,5812
2009d970:	e0fffe17 	ldw	r3,-8(fp)
2009d974:	18c00324 	muli	r3,r3,12
2009d978:	10c5883a 	add	r2,r2,r3
2009d97c:	10c00017 	ldw	r3,0(r2)
2009d980:	e0bfff17 	ldw	r2,-4(fp)
2009d984:	10800017 	ldw	r2,0(r2)
2009d988:	1880111e 	bne	r3,r2,2009d9d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009d98c:	00800034 	movhi	r2,0
2009d990:	1085ad04 	addi	r2,r2,5812
2009d994:	e0fffe17 	ldw	r3,-8(fp)
2009d998:	18c00324 	muli	r3,r3,12
2009d99c:	18c00204 	addi	r3,r3,8
2009d9a0:	10c5883a 	add	r2,r2,r3
2009d9a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009d9a8:	1000090e 	bge	r2,zero,2009d9d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2009d9ac:	e0bffe17 	ldw	r2,-8(fp)
2009d9b0:	10c00324 	muli	r3,r2,12
2009d9b4:	00800034 	movhi	r2,0
2009d9b8:	1085ad04 	addi	r2,r2,5812
2009d9bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009d9c0:	e0bfff17 	ldw	r2,-4(fp)
2009d9c4:	18800226 	beq	r3,r2,2009d9d0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2009d9c8:	00bffcc4 	movi	r2,-13
2009d9cc:	00000a06 	br	2009d9f8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009d9d0:	e0bffe17 	ldw	r2,-8(fp)
2009d9d4:	10800044 	addi	r2,r2,1
2009d9d8:	e0bffe15 	stw	r2,-8(fp)
2009d9dc:	00800034 	movhi	r2,0
2009d9e0:	108a7a04 	addi	r2,r2,10728
2009d9e4:	10800017 	ldw	r2,0(r2)
2009d9e8:	1007883a 	mov	r3,r2
2009d9ec:	e0bffe17 	ldw	r2,-8(fp)
2009d9f0:	18bfdd2e 	bgeu	r3,r2,2009d968 <__flash_rwdata_start+0xffffeb7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2009d9f4:	0005883a 	mov	r2,zero
}
2009d9f8:	e037883a 	mov	sp,fp
2009d9fc:	df000017 	ldw	fp,0(sp)
2009da00:	dec00104 	addi	sp,sp,4
2009da04:	f800283a 	ret

2009da08 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2009da08:	defff604 	addi	sp,sp,-40
2009da0c:	dfc00915 	stw	ra,36(sp)
2009da10:	df000815 	stw	fp,32(sp)
2009da14:	df000804 	addi	fp,sp,32
2009da18:	e13ffd15 	stw	r4,-12(fp)
2009da1c:	e17ffe15 	stw	r5,-8(fp)
2009da20:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2009da24:	00bfffc4 	movi	r2,-1
2009da28:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2009da2c:	00bffb44 	movi	r2,-19
2009da30:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2009da34:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2009da38:	e13ffd17 	ldw	r4,-12(fp)
2009da3c:	01400034 	movhi	r5,0
2009da40:	294a7804 	addi	r5,r5,10720
2009da44:	009d4240 	call	2009d424 <alt_find_dev>
2009da48:	e0bff815 	stw	r2,-32(fp)
2009da4c:	e0bff817 	ldw	r2,-32(fp)
2009da50:	1000051e 	bne	r2,zero,2009da68 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2009da54:	e13ffd17 	ldw	r4,-12(fp)
2009da58:	009ddec0 	call	2009ddec <alt_find_file>
2009da5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2009da60:	00800044 	movi	r2,1
2009da64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2009da68:	e0bff817 	ldw	r2,-32(fp)
2009da6c:	10002926 	beq	r2,zero,2009db14 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2009da70:	e13ff817 	ldw	r4,-32(fp)
2009da74:	009df000 	call	2009df00 <alt_get_fd>
2009da78:	e0bff915 	stw	r2,-28(fp)
2009da7c:	e0bff917 	ldw	r2,-28(fp)
2009da80:	1000030e 	bge	r2,zero,2009da90 <open+0x88>
    {
      status = index;
2009da84:	e0bff917 	ldw	r2,-28(fp)
2009da88:	e0bffa15 	stw	r2,-24(fp)
2009da8c:	00002306 	br	2009db1c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2009da90:	e0bff917 	ldw	r2,-28(fp)
2009da94:	10c00324 	muli	r3,r2,12
2009da98:	00800034 	movhi	r2,0
2009da9c:	1085ad04 	addi	r2,r2,5812
2009daa0:	1885883a 	add	r2,r3,r2
2009daa4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2009daa8:	e0fffe17 	ldw	r3,-8(fp)
2009daac:	00900034 	movhi	r2,16384
2009dab0:	10bfffc4 	addi	r2,r2,-1
2009dab4:	1886703a 	and	r3,r3,r2
2009dab8:	e0bffc17 	ldw	r2,-16(fp)
2009dabc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2009dac0:	e0bffb17 	ldw	r2,-20(fp)
2009dac4:	1000051e 	bne	r2,zero,2009dadc <open+0xd4>
2009dac8:	e13ffc17 	ldw	r4,-16(fp)
2009dacc:	009d93c0 	call	2009d93c <alt_file_locked>
2009dad0:	e0bffa15 	stw	r2,-24(fp)
2009dad4:	e0bffa17 	ldw	r2,-24(fp)
2009dad8:	10001016 	blt	r2,zero,2009db1c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2009dadc:	e0bff817 	ldw	r2,-32(fp)
2009dae0:	10800317 	ldw	r2,12(r2)
2009dae4:	10000826 	beq	r2,zero,2009db08 <open+0x100>
2009dae8:	e0bff817 	ldw	r2,-32(fp)
2009daec:	10800317 	ldw	r2,12(r2)
2009daf0:	e13ffc17 	ldw	r4,-16(fp)
2009daf4:	e17ffd17 	ldw	r5,-12(fp)
2009daf8:	e1bffe17 	ldw	r6,-8(fp)
2009dafc:	e1ffff17 	ldw	r7,-4(fp)
2009db00:	103ee83a 	callr	r2
2009db04:	00000106 	br	2009db0c <open+0x104>
2009db08:	0005883a 	mov	r2,zero
2009db0c:	e0bffa15 	stw	r2,-24(fp)
2009db10:	00000206 	br	2009db1c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
2009db14:	00bffb44 	movi	r2,-19
2009db18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2009db1c:	e0bffa17 	ldw	r2,-24(fp)
2009db20:	1000090e 	bge	r2,zero,2009db48 <open+0x140>
  {
    alt_release_fd (index);  
2009db24:	e13ff917 	ldw	r4,-28(fp)
2009db28:	0099fc80 	call	20099fc8 <alt_release_fd>
    ALT_ERRNO = -status;
2009db2c:	009d8ec0 	call	2009d8ec <alt_get_errno>
2009db30:	1007883a 	mov	r3,r2
2009db34:	e0bffa17 	ldw	r2,-24(fp)
2009db38:	0085c83a 	sub	r2,zero,r2
2009db3c:	18800015 	stw	r2,0(r3)
    return -1;
2009db40:	00bfffc4 	movi	r2,-1
2009db44:	00000106 	br	2009db4c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
2009db48:	e0bff917 	ldw	r2,-28(fp)
}
2009db4c:	e037883a 	mov	sp,fp
2009db50:	dfc00117 	ldw	ra,4(sp)
2009db54:	df000017 	ldw	fp,0(sp)
2009db58:	dec00204 	addi	sp,sp,8
2009db5c:	f800283a 	ret

2009db60 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
2009db60:	defff204 	addi	sp,sp,-56
2009db64:	dfc00a15 	stw	ra,40(sp)
2009db68:	df000915 	stw	fp,36(sp)
2009db6c:	df000904 	addi	fp,sp,36
2009db70:	e1400215 	stw	r5,8(fp)
2009db74:	e1800315 	stw	r6,12(fp)
2009db78:	e1c00415 	stw	r7,16(fp)
2009db7c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
2009db80:	e0800204 	addi	r2,fp,8
2009db84:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
2009db88:	e0bfff17 	ldw	r2,-4(fp)
2009db8c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
2009db90:	00007106 	br	2009dd58 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
2009db94:	e0bff807 	ldb	r2,-32(fp)
2009db98:	10800960 	cmpeqi	r2,r2,37
2009db9c:	1000041e 	bne	r2,zero,2009dbb0 <alt_printf+0x50>
        {
            alt_putchar(c);
2009dba0:	e0bff807 	ldb	r2,-32(fp)
2009dba4:	1009883a 	mov	r4,r2
2009dba8:	009dd880 	call	2009dd88 <alt_putchar>
2009dbac:	00006a06 	br	2009dd58 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
2009dbb0:	e0bff717 	ldw	r2,-36(fp)
2009dbb4:	10c00044 	addi	r3,r2,1
2009dbb8:	e0fff715 	stw	r3,-36(fp)
2009dbbc:	10800003 	ldbu	r2,0(r2)
2009dbc0:	e0bff805 	stb	r2,-32(fp)
2009dbc4:	e0bff807 	ldb	r2,-32(fp)
2009dbc8:	10006226 	beq	r2,zero,2009dd54 <alt_printf+0x1f4>
            {
                if (c == '%')
2009dbcc:	e0bff807 	ldb	r2,-32(fp)
2009dbd0:	10800958 	cmpnei	r2,r2,37
2009dbd4:	1000041e 	bne	r2,zero,2009dbe8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
2009dbd8:	e0bff807 	ldb	r2,-32(fp)
2009dbdc:	1009883a 	mov	r4,r2
2009dbe0:	009dd880 	call	2009dd88 <alt_putchar>
2009dbe4:	00005c06 	br	2009dd58 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
2009dbe8:	e0bff807 	ldb	r2,-32(fp)
2009dbec:	108018d8 	cmpnei	r2,r2,99
2009dbf0:	1000081e 	bne	r2,zero,2009dc14 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
2009dbf4:	e0bffe17 	ldw	r2,-8(fp)
2009dbf8:	10c00104 	addi	r3,r2,4
2009dbfc:	e0fffe15 	stw	r3,-8(fp)
2009dc00:	10800017 	ldw	r2,0(r2)
2009dc04:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
2009dc08:	e13ffd17 	ldw	r4,-12(fp)
2009dc0c:	009dd880 	call	2009dd88 <alt_putchar>
2009dc10:	00005106 	br	2009dd58 <alt_printf+0x1f8>
                }
                else if (c == 'x')
2009dc14:	e0bff807 	ldb	r2,-32(fp)
2009dc18:	10801e18 	cmpnei	r2,r2,120
2009dc1c:	1000341e 	bne	r2,zero,2009dcf0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
2009dc20:	e0bffe17 	ldw	r2,-8(fp)
2009dc24:	10c00104 	addi	r3,r2,4
2009dc28:	e0fffe15 	stw	r3,-8(fp)
2009dc2c:	10800017 	ldw	r2,0(r2)
2009dc30:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
2009dc34:	e0bffb17 	ldw	r2,-20(fp)
2009dc38:	1000031e 	bne	r2,zero,2009dc48 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
2009dc3c:	01000c04 	movi	r4,48
2009dc40:	009dd880 	call	2009dd88 <alt_putchar>
                        continue;
2009dc44:	00004406 	br	2009dd58 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
2009dc48:	00800704 	movi	r2,28
2009dc4c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
2009dc50:	00000306 	br	2009dc60 <alt_printf+0x100>
                        digit_shift -= 4;
2009dc54:	e0bff917 	ldw	r2,-28(fp)
2009dc58:	10bfff04 	addi	r2,r2,-4
2009dc5c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
2009dc60:	00c003c4 	movi	r3,15
2009dc64:	e0bff917 	ldw	r2,-28(fp)
2009dc68:	1884983a 	sll	r2,r3,r2
2009dc6c:	1007883a 	mov	r3,r2
2009dc70:	e0bffb17 	ldw	r2,-20(fp)
2009dc74:	1884703a 	and	r2,r3,r2
2009dc78:	103ff626 	beq	r2,zero,2009dc54 <__flash_rwdata_start+0xffffee68>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009dc7c:	00001906 	br	2009dce4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
2009dc80:	00c003c4 	movi	r3,15
2009dc84:	e0bff917 	ldw	r2,-28(fp)
2009dc88:	1884983a 	sll	r2,r3,r2
2009dc8c:	1007883a 	mov	r3,r2
2009dc90:	e0bffb17 	ldw	r2,-20(fp)
2009dc94:	1886703a 	and	r3,r3,r2
2009dc98:	e0bff917 	ldw	r2,-28(fp)
2009dc9c:	1884d83a 	srl	r2,r3,r2
2009dca0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
2009dca4:	e0bffc17 	ldw	r2,-16(fp)
2009dca8:	108002a8 	cmpgeui	r2,r2,10
2009dcac:	1000041e 	bne	r2,zero,2009dcc0 <alt_printf+0x160>
                            c = '0' + digit;
2009dcb0:	e0bffc17 	ldw	r2,-16(fp)
2009dcb4:	10800c04 	addi	r2,r2,48
2009dcb8:	e0bff805 	stb	r2,-32(fp)
2009dcbc:	00000306 	br	2009dccc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
2009dcc0:	e0bffc17 	ldw	r2,-16(fp)
2009dcc4:	108015c4 	addi	r2,r2,87
2009dcc8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
2009dccc:	e0bff807 	ldb	r2,-32(fp)
2009dcd0:	1009883a 	mov	r4,r2
2009dcd4:	009dd880 	call	2009dd88 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009dcd8:	e0bff917 	ldw	r2,-28(fp)
2009dcdc:	10bfff04 	addi	r2,r2,-4
2009dce0:	e0bff915 	stw	r2,-28(fp)
2009dce4:	e0bff917 	ldw	r2,-28(fp)
2009dce8:	103fe50e 	bge	r2,zero,2009dc80 <__flash_rwdata_start+0xffffee94>
2009dcec:	00001a06 	br	2009dd58 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
2009dcf0:	e0bff807 	ldb	r2,-32(fp)
2009dcf4:	10801cd8 	cmpnei	r2,r2,115
2009dcf8:	1000151e 	bne	r2,zero,2009dd50 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
2009dcfc:	e0bffe17 	ldw	r2,-8(fp)
2009dd00:	10c00104 	addi	r3,r2,4
2009dd04:	e0fffe15 	stw	r3,-8(fp)
2009dd08:	10800017 	ldw	r2,0(r2)
2009dd0c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
2009dd10:	00000906 	br	2009dd38 <alt_printf+0x1d8>
                      alt_putchar(*s++);
2009dd14:	e0bffa17 	ldw	r2,-24(fp)
2009dd18:	10c00044 	addi	r3,r2,1
2009dd1c:	e0fffa15 	stw	r3,-24(fp)
2009dd20:	10800003 	ldbu	r2,0(r2)
2009dd24:	10803fcc 	andi	r2,r2,255
2009dd28:	1080201c 	xori	r2,r2,128
2009dd2c:	10bfe004 	addi	r2,r2,-128
2009dd30:	1009883a 	mov	r4,r2
2009dd34:	009dd880 	call	2009dd88 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
2009dd38:	e0bffa17 	ldw	r2,-24(fp)
2009dd3c:	10800003 	ldbu	r2,0(r2)
2009dd40:	10803fcc 	andi	r2,r2,255
2009dd44:	1080201c 	xori	r2,r2,128
2009dd48:	10bfe004 	addi	r2,r2,-128
2009dd4c:	103ff11e 	bne	r2,zero,2009dd14 <__flash_rwdata_start+0xffffef28>
2009dd50:	00000106 	br	2009dd58 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
2009dd54:	00000706 	br	2009dd74 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
2009dd58:	e0bff717 	ldw	r2,-36(fp)
2009dd5c:	10c00044 	addi	r3,r2,1
2009dd60:	e0fff715 	stw	r3,-36(fp)
2009dd64:	10800003 	ldbu	r2,0(r2)
2009dd68:	e0bff805 	stb	r2,-32(fp)
2009dd6c:	e0bff807 	ldb	r2,-32(fp)
2009dd70:	103f881e 	bne	r2,zero,2009db94 <__flash_rwdata_start+0xffffeda8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
2009dd74:	e037883a 	mov	sp,fp
2009dd78:	dfc00117 	ldw	ra,4(sp)
2009dd7c:	df000017 	ldw	fp,0(sp)
2009dd80:	dec00504 	addi	sp,sp,20
2009dd84:	f800283a 	ret

2009dd88 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
2009dd88:	defffd04 	addi	sp,sp,-12
2009dd8c:	dfc00215 	stw	ra,8(sp)
2009dd90:	df000115 	stw	fp,4(sp)
2009dd94:	df000104 	addi	fp,sp,4
2009dd98:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009dd9c:	00800034 	movhi	r2,0
2009dda0:	108a7104 	addi	r2,r2,10692
2009dda4:	10800017 	ldw	r2,0(r2)
2009dda8:	10800217 	ldw	r2,8(r2)
2009ddac:	e13fff17 	ldw	r4,-4(fp)
2009ddb0:	100b883a 	mov	r5,r2
2009ddb4:	00948200 	call	20094820 <putc>
#endif
#endif
}
2009ddb8:	e037883a 	mov	sp,fp
2009ddbc:	dfc00117 	ldw	ra,4(sp)
2009ddc0:	df000017 	ldw	fp,0(sp)
2009ddc4:	dec00204 	addi	sp,sp,8
2009ddc8:	f800283a 	ret

2009ddcc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
2009ddcc:	deffff04 	addi	sp,sp,-4
2009ddd0:	df000015 	stw	fp,0(sp)
2009ddd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2009ddd8:	000170fa 	wrctl	ienable,zero
}
2009dddc:	e037883a 	mov	sp,fp
2009dde0:	df000017 	ldw	fp,0(sp)
2009dde4:	dec00104 	addi	sp,sp,4
2009dde8:	f800283a 	ret

2009ddec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009ddec:	defffb04 	addi	sp,sp,-20
2009ddf0:	dfc00415 	stw	ra,16(sp)
2009ddf4:	df000315 	stw	fp,12(sp)
2009ddf8:	df000304 	addi	fp,sp,12
2009ddfc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009de00:	00800034 	movhi	r2,0
2009de04:	108a7604 	addi	r2,r2,10712
2009de08:	10800017 	ldw	r2,0(r2)
2009de0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009de10:	00003106 	br	2009ded8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
2009de14:	e0bffd17 	ldw	r2,-12(fp)
2009de18:	10800217 	ldw	r2,8(r2)
2009de1c:	1009883a 	mov	r4,r2
2009de20:	008c4740 	call	2008c474 <strlen>
2009de24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2009de28:	e0bffd17 	ldw	r2,-12(fp)
2009de2c:	10c00217 	ldw	r3,8(r2)
2009de30:	e0bffe17 	ldw	r2,-8(fp)
2009de34:	10bfffc4 	addi	r2,r2,-1
2009de38:	1885883a 	add	r2,r3,r2
2009de3c:	10800003 	ldbu	r2,0(r2)
2009de40:	10803fcc 	andi	r2,r2,255
2009de44:	1080201c 	xori	r2,r2,128
2009de48:	10bfe004 	addi	r2,r2,-128
2009de4c:	10800bd8 	cmpnei	r2,r2,47
2009de50:	1000031e 	bne	r2,zero,2009de60 <alt_find_file+0x74>
    {
      len -= 1;
2009de54:	e0bffe17 	ldw	r2,-8(fp)
2009de58:	10bfffc4 	addi	r2,r2,-1
2009de5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009de60:	e0bffe17 	ldw	r2,-8(fp)
2009de64:	e0ffff17 	ldw	r3,-4(fp)
2009de68:	1885883a 	add	r2,r3,r2
2009de6c:	10800003 	ldbu	r2,0(r2)
2009de70:	10803fcc 	andi	r2,r2,255
2009de74:	1080201c 	xori	r2,r2,128
2009de78:	10bfe004 	addi	r2,r2,-128
2009de7c:	10800be0 	cmpeqi	r2,r2,47
2009de80:	1000081e 	bne	r2,zero,2009dea4 <alt_find_file+0xb8>
2009de84:	e0bffe17 	ldw	r2,-8(fp)
2009de88:	e0ffff17 	ldw	r3,-4(fp)
2009de8c:	1885883a 	add	r2,r3,r2
2009de90:	10800003 	ldbu	r2,0(r2)
2009de94:	10803fcc 	andi	r2,r2,255
2009de98:	1080201c 	xori	r2,r2,128
2009de9c:	10bfe004 	addi	r2,r2,-128
2009dea0:	10000a1e 	bne	r2,zero,2009decc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
2009dea4:	e0bffd17 	ldw	r2,-12(fp)
2009dea8:	10c00217 	ldw	r3,8(r2)
2009deac:	e0bffe17 	ldw	r2,-8(fp)
2009deb0:	1809883a 	mov	r4,r3
2009deb4:	e17fff17 	ldw	r5,-4(fp)
2009deb8:	100d883a 	mov	r6,r2
2009debc:	008be9c0 	call	2008be9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009dec0:	1000021e 	bne	r2,zero,2009decc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2009dec4:	e0bffd17 	ldw	r2,-12(fp)
2009dec8:	00000806 	br	2009deec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
2009decc:	e0bffd17 	ldw	r2,-12(fp)
2009ded0:	10800017 	ldw	r2,0(r2)
2009ded4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009ded8:	e0fffd17 	ldw	r3,-12(fp)
2009dedc:	00800034 	movhi	r2,0
2009dee0:	108a7604 	addi	r2,r2,10712
2009dee4:	18bfcb1e 	bne	r3,r2,2009de14 <__flash_rwdata_start+0xfffff028>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2009dee8:	0005883a 	mov	r2,zero
}
2009deec:	e037883a 	mov	sp,fp
2009def0:	dfc00117 	ldw	ra,4(sp)
2009def4:	df000017 	ldw	fp,0(sp)
2009def8:	dec00204 	addi	sp,sp,8
2009defc:	f800283a 	ret

2009df00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009df00:	defffc04 	addi	sp,sp,-16
2009df04:	df000315 	stw	fp,12(sp)
2009df08:	df000304 	addi	fp,sp,12
2009df0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2009df10:	00bffa04 	movi	r2,-24
2009df14:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009df18:	e03ffd15 	stw	zero,-12(fp)
2009df1c:	00001d06 	br	2009df94 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
2009df20:	00800034 	movhi	r2,0
2009df24:	1085ad04 	addi	r2,r2,5812
2009df28:	e0fffd17 	ldw	r3,-12(fp)
2009df2c:	18c00324 	muli	r3,r3,12
2009df30:	10c5883a 	add	r2,r2,r3
2009df34:	10800017 	ldw	r2,0(r2)
2009df38:	1000131e 	bne	r2,zero,2009df88 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2009df3c:	00800034 	movhi	r2,0
2009df40:	1085ad04 	addi	r2,r2,5812
2009df44:	e0fffd17 	ldw	r3,-12(fp)
2009df48:	18c00324 	muli	r3,r3,12
2009df4c:	10c5883a 	add	r2,r2,r3
2009df50:	e0ffff17 	ldw	r3,-4(fp)
2009df54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2009df58:	00800034 	movhi	r2,0
2009df5c:	108a7a04 	addi	r2,r2,10728
2009df60:	10c00017 	ldw	r3,0(r2)
2009df64:	e0bffd17 	ldw	r2,-12(fp)
2009df68:	1880040e 	bge	r3,r2,2009df7c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2009df6c:	00800034 	movhi	r2,0
2009df70:	108a7a04 	addi	r2,r2,10728
2009df74:	e0fffd17 	ldw	r3,-12(fp)
2009df78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2009df7c:	e0bffd17 	ldw	r2,-12(fp)
2009df80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
2009df84:	00000606 	br	2009dfa0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009df88:	e0bffd17 	ldw	r2,-12(fp)
2009df8c:	10800044 	addi	r2,r2,1
2009df90:	e0bffd15 	stw	r2,-12(fp)
2009df94:	e0bffd17 	ldw	r2,-12(fp)
2009df98:	10800810 	cmplti	r2,r2,32
2009df9c:	103fe01e 	bne	r2,zero,2009df20 <__flash_rwdata_start+0xfffff134>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2009dfa0:	e0bffe17 	ldw	r2,-8(fp)
}
2009dfa4:	e037883a 	mov	sp,fp
2009dfa8:	df000017 	ldw	fp,0(sp)
2009dfac:	dec00104 	addi	sp,sp,4
2009dfb0:	f800283a 	ret

2009dfb4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2009dfb4:	defffb04 	addi	sp,sp,-20
2009dfb8:	df000415 	stw	fp,16(sp)
2009dfbc:	df000404 	addi	fp,sp,16
2009dfc0:	e13ffe15 	stw	r4,-8(fp)
2009dfc4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2009dfc8:	e0bfff17 	ldw	r2,-4(fp)
2009dfcc:	10840070 	cmpltui	r2,r2,4097
2009dfd0:	1000021e 	bne	r2,zero,2009dfdc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2009dfd4:	00840004 	movi	r2,4096
2009dfd8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2009dfdc:	e0fffe17 	ldw	r3,-8(fp)
2009dfe0:	e0bfff17 	ldw	r2,-4(fp)
2009dfe4:	1885883a 	add	r2,r3,r2
2009dfe8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009dfec:	e0bffe17 	ldw	r2,-8(fp)
2009dff0:	e0bffc15 	stw	r2,-16(fp)
2009dff4:	00000506 	br	2009e00c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2009dff8:	e0bffc17 	ldw	r2,-16(fp)
2009dffc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009e000:	e0bffc17 	ldw	r2,-16(fp)
2009e004:	10800804 	addi	r2,r2,32
2009e008:	e0bffc15 	stw	r2,-16(fp)
2009e00c:	e0fffc17 	ldw	r3,-16(fp)
2009e010:	e0bffd17 	ldw	r2,-12(fp)
2009e014:	18bff836 	bltu	r3,r2,2009dff8 <__flash_rwdata_start+0xfffff20c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2009e018:	e0bffe17 	ldw	r2,-8(fp)
2009e01c:	108007cc 	andi	r2,r2,31
2009e020:	10000226 	beq	r2,zero,2009e02c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2009e024:	e0bffc17 	ldw	r2,-16(fp)
2009e028:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2009e02c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2009e030:	e037883a 	mov	sp,fp
2009e034:	df000017 	ldw	fp,0(sp)
2009e038:	dec00104 	addi	sp,sp,4
2009e03c:	f800283a 	ret

2009e040 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
2009e040:	defffe04 	addi	sp,sp,-8
2009e044:	df000115 	stw	fp,4(sp)
2009e048:	df000104 	addi	fp,sp,4
2009e04c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
2009e050:	e0bfff17 	ldw	r2,-4(fp)
2009e054:	10bffe84 	addi	r2,r2,-6
2009e058:	10c00428 	cmpgeui	r3,r2,16
2009e05c:	18001a1e 	bne	r3,zero,2009e0c8 <alt_exception_cause_generated_bad_addr+0x88>
2009e060:	100690ba 	slli	r3,r2,2
2009e064:	008802b4 	movhi	r2,8202
2009e068:	10b81e04 	addi	r2,r2,-8072
2009e06c:	1885883a 	add	r2,r3,r2
2009e070:	10800017 	ldw	r2,0(r2)
2009e074:	1000683a 	jmp	r2
2009e078:	2009e0b8 	rdprs	zero,r4,10114
2009e07c:	2009e0b8 	rdprs	zero,r4,10114
2009e080:	2009e0c8 	cmpgei	zero,r4,10115
2009e084:	2009e0c8 	cmpgei	zero,r4,10115
2009e088:	2009e0c8 	cmpgei	zero,r4,10115
2009e08c:	2009e0b8 	rdprs	zero,r4,10114
2009e090:	2009e0c0 	call	22009e0c <__flash_rwdata_start+0x1f6b020>
2009e094:	2009e0c8 	cmpgei	zero,r4,10115
2009e098:	2009e0b8 	rdprs	zero,r4,10114
2009e09c:	2009e0b8 	rdprs	zero,r4,10114
2009e0a0:	2009e0c8 	cmpgei	zero,r4,10115
2009e0a4:	2009e0b8 	rdprs	zero,r4,10114
2009e0a8:	2009e0c0 	call	22009e0c <__flash_rwdata_start+0x1f6b020>
2009e0ac:	2009e0c8 	cmpgei	zero,r4,10115
2009e0b0:	2009e0c8 	cmpgei	zero,r4,10115
2009e0b4:	2009e0b8 	rdprs	zero,r4,10114
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2009e0b8:	00800044 	movi	r2,1
2009e0bc:	00000306 	br	2009e0cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009e0c0:	0005883a 	mov	r2,zero
2009e0c4:	00000106 	br	2009e0cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
2009e0c8:	0005883a 	mov	r2,zero
  }
}
2009e0cc:	e037883a 	mov	sp,fp
2009e0d0:	df000017 	ldw	fp,0(sp)
2009e0d4:	dec00104 	addi	sp,sp,4
2009e0d8:	f800283a 	ret

2009e0dc <atexit>:
2009e0dc:	200b883a 	mov	r5,r4
2009e0e0:	000d883a 	mov	r6,zero
2009e0e4:	0009883a 	mov	r4,zero
2009e0e8:	000f883a 	mov	r7,zero
2009e0ec:	009e0f01 	jmpi	2009e0f0 <__register_exitproc>

2009e0f0 <__register_exitproc>:
2009e0f0:	00800034 	movhi	r2,0
2009e0f4:	defffa04 	addi	sp,sp,-24
2009e0f8:	108a7004 	addi	r2,r2,10688
2009e0fc:	dc000315 	stw	r16,12(sp)
2009e100:	14000017 	ldw	r16,0(r2)
2009e104:	dc400415 	stw	r17,16(sp)
2009e108:	dfc00515 	stw	ra,20(sp)
2009e10c:	80805217 	ldw	r2,328(r16)
2009e110:	2023883a 	mov	r17,r4
2009e114:	10003626 	beq	r2,zero,2009e1f0 <__register_exitproc+0x100>
2009e118:	10c00117 	ldw	r3,4(r2)
2009e11c:	010007c4 	movi	r4,31
2009e120:	20c00e16 	blt	r4,r3,2009e15c <__register_exitproc+0x6c>
2009e124:	1a400044 	addi	r9,r3,1
2009e128:	8800211e 	bne	r17,zero,2009e1b0 <__register_exitproc+0xc0>
2009e12c:	18c00084 	addi	r3,r3,2
2009e130:	18c7883a 	add	r3,r3,r3
2009e134:	18c7883a 	add	r3,r3,r3
2009e138:	12400115 	stw	r9,4(r2)
2009e13c:	10c7883a 	add	r3,r2,r3
2009e140:	19400015 	stw	r5,0(r3)
2009e144:	0005883a 	mov	r2,zero
2009e148:	dfc00517 	ldw	ra,20(sp)
2009e14c:	dc400417 	ldw	r17,16(sp)
2009e150:	dc000317 	ldw	r16,12(sp)
2009e154:	dec00604 	addi	sp,sp,24
2009e158:	f800283a 	ret
2009e15c:	00880274 	movhi	r2,8201
2009e160:	10adb304 	addi	r2,r2,-18740
2009e164:	10002526 	beq	r2,zero,2009e1fc <__register_exitproc+0x10c>
2009e168:	01006404 	movi	r4,400
2009e16c:	d9400015 	stw	r5,0(sp)
2009e170:	d9800115 	stw	r6,4(sp)
2009e174:	d9c00215 	stw	r7,8(sp)
2009e178:	008b6cc0 	call	2008b6cc <malloc>
2009e17c:	d9400017 	ldw	r5,0(sp)
2009e180:	d9800117 	ldw	r6,4(sp)
2009e184:	d9c00217 	ldw	r7,8(sp)
2009e188:	10001c26 	beq	r2,zero,2009e1fc <__register_exitproc+0x10c>
2009e18c:	80c05217 	ldw	r3,328(r16)
2009e190:	10000115 	stw	zero,4(r2)
2009e194:	02400044 	movi	r9,1
2009e198:	10c00015 	stw	r3,0(r2)
2009e19c:	80805215 	stw	r2,328(r16)
2009e1a0:	10006215 	stw	zero,392(r2)
2009e1a4:	10006315 	stw	zero,396(r2)
2009e1a8:	0007883a 	mov	r3,zero
2009e1ac:	883fdf26 	beq	r17,zero,2009e12c <__flash_rwdata_start+0xfffff340>
2009e1b0:	18d1883a 	add	r8,r3,r3
2009e1b4:	4211883a 	add	r8,r8,r8
2009e1b8:	1211883a 	add	r8,r2,r8
2009e1bc:	41802215 	stw	r6,136(r8)
2009e1c0:	01000044 	movi	r4,1
2009e1c4:	11806217 	ldw	r6,392(r2)
2009e1c8:	20c8983a 	sll	r4,r4,r3
2009e1cc:	310cb03a 	or	r6,r6,r4
2009e1d0:	11806215 	stw	r6,392(r2)
2009e1d4:	41c04215 	stw	r7,264(r8)
2009e1d8:	01800084 	movi	r6,2
2009e1dc:	89bfd31e 	bne	r17,r6,2009e12c <__flash_rwdata_start+0xfffff340>
2009e1e0:	11806317 	ldw	r6,396(r2)
2009e1e4:	3108b03a 	or	r4,r6,r4
2009e1e8:	11006315 	stw	r4,396(r2)
2009e1ec:	003fcf06 	br	2009e12c <__flash_rwdata_start+0xfffff340>
2009e1f0:	80805304 	addi	r2,r16,332
2009e1f4:	80805215 	stw	r2,328(r16)
2009e1f8:	003fc706 	br	2009e118 <__flash_rwdata_start+0xfffff32c>
2009e1fc:	00bfffc4 	movi	r2,-1
2009e200:	003fd106 	br	2009e148 <__flash_rwdata_start+0xfffff35c>
