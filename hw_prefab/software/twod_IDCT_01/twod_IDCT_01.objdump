
twod_IDCT_01.elf:     file format elf32-littlenios2
twod_IDCT_01.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x00007d20 memsz 0x00007d20 flags r-x
    LOAD off    0x00009000 vaddr 0x00000000 paddr 0x20087d40 align 2**12
         filesz 0x00001e24 memsz 0x00001f78 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007b00  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000290  00000000  20087d40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b94  00000290  20087fd0  00009290  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00001e24  20089b64  0000ae24  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  00001f78  00001f78  0000ae24  2**0
                  CONTENTS
  7 .sram         00000000  20089b64  20089b64  0000ae24  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000ae24  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b20  00000000  00000000  0000ae48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019db1  00000000  00000000  0000b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006b28  00000000  00000000  00025719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000076d6  00000000  00000000  0002c241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cc8  00000000  00000000  00033918  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032f3  00000000  00000000  000355e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004b32  00000000  00000000  000388d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0003d408  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000650  00000000  00000000  0003d468  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00040b8c  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00040b8f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00040b92  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00040b93  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00040b94  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00040b98  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00040b9c  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00040ba0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00040ba9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00040bb2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00040bbb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003d  00000000  00000000  00040bc6  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  00040c03  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0012d109  00000000  00000000  000445f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000290 l    d  .rwdata	00000000 .rwdata
00001e24 l    d  .bss	00000000 .bss
00001f78 l    d  .lpddr2	00000000 .lpddr2
20089b64 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../twod_IDCT_01_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00000290 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20081d9c l     F .text	00000008 __fp_lock
20081da4 l     F .text	00000008 __fp_unlock
20081db8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
20082e08 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
20082f34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
20083054 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
20083080 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
20083180 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
20083274 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
20083358 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
20083534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001e0c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
20083790 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
200838d8 l     F .text	00000038 alt_dev_reg
00000c64 l     O .rwdata	00001060 jtag_uart
00001cc4 l     O .rwdata	00000060 read_dma_0
00001d24 l     O .rwdata	00000060 video_dma
00001d84 l     O .rwdata	00000060 write_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
20083c50 l     F .text	00000204 altera_avalon_jtag_uart_irq
20083e54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
20084474 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_msgdma.c
20084570 l     F .text	00000050 alt_get_errno
200845c0 l     F .text	00000094 alt_msgdma_write_standard_descriptor
20084654 l     F .text	0000012c alt_msgdma_write_extended_descriptor
20084780 l     F .text	00000184 alt_msgdma_irq
20084904 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
20084990 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
20084ae4 l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
20084db4 l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
200853fc l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
200854a0 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
200866dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
20086c18 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
20086d50 l     F .text	00000050 alt_get_errno
20086da0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001e4c g     O .bss	00000004 alt_instruction_exception_handler
20086310 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
20082cfc g     F .text	00000054 _isatty_r
2008347c g     F .text	00000078 alt_main
200802c0 g     F .text	000000a8 _puts_r
00001e78 g     O .bss	00000100 alt_irq
20082d50 g     F .text	0000005c _lseek_r
20087fd0 g       *ABS*	00000000 __flash_rwdata_start
200851dc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
00001f78 g       *ABS*	00000000 __alt_heap_start
20080000 g       *ABS*	00000000 __alt_mem_sram
20082a8c g     F .text	0000005c __sseek
200820ec g     F .text	00000010 __sinit
20087910 g     F .text	00000138 __swbuf_r
20081f54 g     F .text	00000068 __sfmoreglue
20083514 g     F .text	00000020 __malloc_unlock
2008129c g     F .text	0000015c memmove
200820d4 g     F .text	00000018 _cleanup
2008512c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
200873cc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
20082ca4 g     F .text	00000058 _fstat_r
00001e30 g     O .bss	00000004 errno
20082a08 g     F .text	00000008 __seofread
00001e38 g     O .bss	00000004 alt_argv
00009de4 g       *ABS*	00000000 _gp
20085c4c g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00000ae4 g     O .rwdata	00000180 alt_fd_list
20086888 g     F .text	00000090 alt_find_dev
20081164 g     F .text	00000138 memcpy
20081dac g     F .text	0000000c _cleanup_r
20086cd8 g     F .text	00000078 alt_io_redirect
20087d40 g       *ABS*	00000000 __DTOR_END__
2008606c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2008634c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
200862bc g     F .text	00000054 alt_msgdma_register_callback
20080368 g     F .text	00000014 puts
20087640 g     F .text	0000009c alt_exception_cause_generated_bad_addr
20084050 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
2008592c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
20082f24 g     F .text	00000008 .hidden __udivsi3
200831d0 g     F .text	000000a4 isatty
200875b4 g     F .text	0000008c alt_icache_flush
00001e2c g     O .bss	00000004 __malloc_top_pad
20080414 g     F .text	000004c0 __sfvwrite_r
20081960 g     F .text	00000054 _sbrk_r
20082dac g     F .text	0000005c _read_r
00001e04 g     O .rwdata	00000004 alt_max_fd
20082ba0 g     F .text	000000f0 _fclose_r
20081d6c g     F .text	00000030 fflush
00001e28 g     O .bss	00000004 __malloc_max_sbrked_mem
2008568c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
200833a8 g     F .text	000000d4 lseek
00001de4 g     O .rwdata	00000004 _global_impure_ptr
200813f8 g     F .text	00000568 _realloc_r
00001f78 g       *ABS*	00000000 __bss_end
20086b28 g     F .text	000000f0 alt_iic_isr_register
200872c8 g     F .text	00000104 alt_tick
20086150 g     F .text	0000016c alt_msgdma_init
200863c4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
2008210c g     F .text	00000018 __fp_lock_all
20086adc g     F .text	0000004c alt_ic_irq_enabled
20087230 g     F .text	00000098 alt_alarm_stop
00001e40 g     O .bss	00000004 alt_irq_active
200800fc g     F .exceptions	000000d0 alt_irq_handler
00000abc g     O .rwdata	00000028 alt_dev_null
200852c4 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
20085fe0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
20086698 g     F .text	00000044 alt_dcache_flush_all
00001e24 g       *ABS*	00000000 __ram_rwdata_end
00001dfc g     O .rwdata	00000008 alt_dev_list
200837e0 g     F .text	000000f8 write
200877a4 g     F .text	000000a0 _putc_r
00000290 g       *ABS*	00000000 __ram_rodata_end
200830d0 g     F .text	000000b0 fstat
20082f2c g     F .text	00000008 .hidden __umodsi3
200856e4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
00001f78 g       *ABS*	00000000 end
20083b8c g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
20087d40 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
200844e8 g     F .text	00000088 alt_avalon_timer_sc_init
2008425c g     F .text	00000218 altera_avalon_jtag_uart_write
200820fc g     F .text	00000004 __sfp_lock_acquire
2008107c g     F .text	000000e8 memchr
20082260 g     F .text	000002f0 _free_r
20086fc4 g     F .text	00000228 alt_printf
20087b78 g     F .text	00000194 __call_exitprocs
00001dec g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
00001e44 g     O .bss	00000004 _alt_tick_rate
00001e48 g     O .bss	00000004 _alt_nticks
20085184 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
20083584 g     F .text	000000fc read
20083944 g     F .text	000000e4 alt_sys_init
20087a64 g     F .text	00000114 __register_exitproc
20083efc g     F .text	00000068 altera_avalon_jtag_uart_close
00000290 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001e50 g     O .bss	00000028 __malloc_current_mallinfo
20083a28 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
20087500 g     F .text	000000b4 alt_get_fd
20086540 g     F .text	00000158 alt_busy_sleep
20082b4c g     F .text	00000054 _close_r
20085634 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
20087728 g     F .text	0000007c memcmp
20083ae8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001f78 g       *ABS*	00000000 __alt_stack_base
20083b38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
2008573c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
200819b4 g     F .text	00000154 __swsetup_r
20081fbc g     F .text	00000118 __sfp
000006b4 g     O .rwdata	00000408 __malloc_av_
20082108 g     F .text	00000004 __sinit_lock_release
200829b4 g     F .text	00000054 __sread
200873ec g     F .text	00000114 alt_find_file
2008672c g     F .text	000000a4 alt_dev_llist_insert
200834f4 g     F .text	00000020 __malloc_lock
200836e0 g     F .text	000000b0 sbrk
20081d10 g     F .text	0000005c _fflush_r
00001e24 g       *ABS*	00000000 __bss_start
20082890 g     F .text	00000124 memset
200860f8 g     F .text	00000058 alt_msgdma_open
2008028c g     F .text	00000034 main
00001e3c g     O .bss	00000004 alt_envp
00001e24 g     O .bss	00000004 __malloc_max_total_mem
20085a1c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
20083a88 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
20087a48 g     F .text	0000001c __swbuf
20082ae8 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
20082c90 g     F .text	00000014 fclose
20085d20 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
200808d4 g     F .text	000007a8 _malloc_r
00001e08 g     O .rwdata	00000004 alt_errno
20085874 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20082550 g     F .text	000000c4 _fwalk
20087844 g     F .text	000000cc putc
20082e74 g     F .text	00000054 .hidden __divsi3
2008213c g     F .text	00000124 _malloc_trim_r
20087d40 g       *ABS*	00000000 __CTOR_END__
20087d40 g       *ABS*	00000000 __flash_rodata_start
20087d40 g       *ABS*	00000000 __DTOR_LIST__
20083910 g     F .text	00000034 alt_irq_init
20083680 g     F .text	00000060 alt_release_fd
20086388 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
200876dc g     F .text	00000014 atexit
20082af0 g     F .text	0000005c _write_r
200857dc g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00001de8 g     O .rwdata	00000004 _impure_ptr
00001e34 g     O .bss	00000004 alt_argc
20081b08 g     F .text	00000208 __sflush_r
2008682c g     F .text	0000005c _do_dtors
20080020 g       .exceptions	00000000 alt_irq_entry
20082124 g     F .text	00000018 __fp_unlock_all
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00001df4 g     O .rwdata	00000008 alt_fs_list
20080020 g       *ABS*	00000000 __ram_exceptions_start
20086948 g     F .text	00000050 alt_ic_isr_register
00001e24 g       *ABS*	00000000 _edata
00001f78 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
20083f64 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
20086a38 g     F .text	000000a4 alt_ic_irq_disable
20082a10 g     F .text	0000007c __swrite
00001df0 g     O .rwdata	00000004 __malloc_trim_threshold
200876f0 g     F .text	00000038 exit
20082614 g     F .text	000000c4 _fwalk_reent
20085bb4 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20082ec8 g     F .text	0000005c .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
20082100 g     F .text	00000004 __sfp_lock_release
20085354 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
20085234 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
20087d0c g     F .text	00000034 _exit
20086400 g     F .text	00000140 alt_alarm_start
200826d8 g     F .text	000001b8 __smakebuf_r
00001e10 g     O .rwdata	00000008 alt_msgdma_list
2008037c g     F .text	00000098 strlen
20086e6c g     F .text	00000158 open
200871ec g     F .text	00000044 alt_putchar
20086918 g     F .text	00000030 alt_icache_flush_all
00001e18 g     O .rwdata	00000004 alt_priority_mask
20086998 g     F .text	000000a0 alt_ic_irq_enable
00001e1c g     O .rwdata	00000008 alt_alarm_list
200867d0 g     F .text	0000005c _do_ctors
20082f84 g     F .text	000000d0 close
200832d8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
20082104 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xffff8034>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	10879e04 	addi	r2,r2,7800
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	10879e04 	addi	r2,r2,7800
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xffff815c>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xffff8150>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a01a17 	ldw	r2,-32664(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a01a17 	ldw	r2,-32664(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xffff8274>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6a77914 	ori	gp,gp,40420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	10878914 	ori	r2,r2,7716

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18c7de14 	ori	r3,r3,8056

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xffff82a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	00832d80 	call	200832d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	008347c0 	call	2008347c <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xffff82b8>

2008028c <main>:
 */

#include <stdio.h>

int main()
{
2008028c:	defffe04 	addi	sp,sp,-8
20080290:	dfc00115 	stw	ra,4(sp)
20080294:	df000015 	stw	fp,0(sp)
20080298:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
2008029c:	01000034 	movhi	r4,0
200802a0:	21000004 	addi	r4,r4,0
200802a4:	00803680 	call	20080368 <puts>

  return 0;
200802a8:	0005883a 	mov	r2,zero
}
200802ac:	e037883a 	mov	sp,fp
200802b0:	dfc00117 	ldw	ra,4(sp)
200802b4:	df000017 	ldw	fp,0(sp)
200802b8:	dec00204 	addi	sp,sp,8
200802bc:	f800283a 	ret

200802c0 <_puts_r>:
200802c0:	defff604 	addi	sp,sp,-40
200802c4:	dc000715 	stw	r16,28(sp)
200802c8:	2021883a 	mov	r16,r4
200802cc:	2809883a 	mov	r4,r5
200802d0:	dc400815 	stw	r17,32(sp)
200802d4:	dfc00915 	stw	ra,36(sp)
200802d8:	2823883a 	mov	r17,r5
200802dc:	008037c0 	call	2008037c <strlen>
200802e0:	81400217 	ldw	r5,8(r16)
200802e4:	11000044 	addi	r4,r2,1
200802e8:	d8800115 	stw	r2,4(sp)
200802ec:	00800034 	movhi	r2,0
200802f0:	2980030b 	ldhu	r6,12(r5)
200802f4:	10800504 	addi	r2,r2,20
200802f8:	d8800215 	stw	r2,8(sp)
200802fc:	00800044 	movi	r2,1
20080300:	d8800315 	stw	r2,12(sp)
20080304:	00800084 	movi	r2,2
20080308:	d8800515 	stw	r2,20(sp)
2008030c:	dc400015 	stw	r17,0(sp)
20080310:	d9000615 	stw	r4,24(sp)
20080314:	dec00415 	stw	sp,16(sp)
20080318:	3088000c 	andi	r2,r6,8192
2008031c:	1000061e 	bne	r2,zero,20080338 <_puts_r+0x78>
20080320:	29001917 	ldw	r4,100(r5)
20080324:	00b7ffc4 	movi	r2,-8193
20080328:	31880014 	ori	r6,r6,8192
2008032c:	2084703a 	and	r2,r4,r2
20080330:	2980030d 	sth	r6,12(r5)
20080334:	28801915 	stw	r2,100(r5)
20080338:	8009883a 	mov	r4,r16
2008033c:	d9800404 	addi	r6,sp,16
20080340:	00804140 	call	20080414 <__sfvwrite_r>
20080344:	1000061e 	bne	r2,zero,20080360 <_puts_r+0xa0>
20080348:	00800284 	movi	r2,10
2008034c:	dfc00917 	ldw	ra,36(sp)
20080350:	dc400817 	ldw	r17,32(sp)
20080354:	dc000717 	ldw	r16,28(sp)
20080358:	dec00a04 	addi	sp,sp,40
2008035c:	f800283a 	ret
20080360:	00bfffc4 	movi	r2,-1
20080364:	003ff906 	br	2008034c <__flash_rwdata_start+0xffff837c>

20080368 <puts>:
20080368:	00800034 	movhi	r2,0
2008036c:	10877a04 	addi	r2,r2,7656
20080370:	200b883a 	mov	r5,r4
20080374:	11000017 	ldw	r4,0(r2)
20080378:	00802c01 	jmpi	200802c0 <_puts_r>

2008037c <strlen>:
2008037c:	208000cc 	andi	r2,r4,3
20080380:	10002026 	beq	r2,zero,20080404 <strlen+0x88>
20080384:	20800007 	ldb	r2,0(r4)
20080388:	10002026 	beq	r2,zero,2008040c <strlen+0x90>
2008038c:	2005883a 	mov	r2,r4
20080390:	00000206 	br	2008039c <strlen+0x20>
20080394:	10c00007 	ldb	r3,0(r2)
20080398:	18001826 	beq	r3,zero,200803fc <strlen+0x80>
2008039c:	10800044 	addi	r2,r2,1
200803a0:	10c000cc 	andi	r3,r2,3
200803a4:	183ffb1e 	bne	r3,zero,20080394 <__flash_rwdata_start+0xffff83c4>
200803a8:	10c00017 	ldw	r3,0(r2)
200803ac:	01ffbff4 	movhi	r7,65279
200803b0:	39ffbfc4 	addi	r7,r7,-257
200803b4:	00ca303a 	nor	r5,zero,r3
200803b8:	01a02074 	movhi	r6,32897
200803bc:	19c7883a 	add	r3,r3,r7
200803c0:	31a02004 	addi	r6,r6,-32640
200803c4:	1946703a 	and	r3,r3,r5
200803c8:	1986703a 	and	r3,r3,r6
200803cc:	1800091e 	bne	r3,zero,200803f4 <strlen+0x78>
200803d0:	10800104 	addi	r2,r2,4
200803d4:	10c00017 	ldw	r3,0(r2)
200803d8:	19cb883a 	add	r5,r3,r7
200803dc:	00c6303a 	nor	r3,zero,r3
200803e0:	28c6703a 	and	r3,r5,r3
200803e4:	1986703a 	and	r3,r3,r6
200803e8:	183ff926 	beq	r3,zero,200803d0 <__flash_rwdata_start+0xffff8400>
200803ec:	00000106 	br	200803f4 <strlen+0x78>
200803f0:	10800044 	addi	r2,r2,1
200803f4:	10c00007 	ldb	r3,0(r2)
200803f8:	183ffd1e 	bne	r3,zero,200803f0 <__flash_rwdata_start+0xffff8420>
200803fc:	1105c83a 	sub	r2,r2,r4
20080400:	f800283a 	ret
20080404:	2005883a 	mov	r2,r4
20080408:	003fe706 	br	200803a8 <__flash_rwdata_start+0xffff83d8>
2008040c:	0005883a 	mov	r2,zero
20080410:	f800283a 	ret

20080414 <__sfvwrite_r>:
20080414:	30800217 	ldw	r2,8(r6)
20080418:	10006726 	beq	r2,zero,200805b8 <__sfvwrite_r+0x1a4>
2008041c:	defff404 	addi	sp,sp,-48
20080420:	dd000615 	stw	r20,24(sp)
20080424:	2029883a 	mov	r20,r4
20080428:	2900030b 	ldhu	r4,12(r5)
2008042c:	ddc00915 	stw	r23,36(sp)
20080430:	dc000215 	stw	r16,8(sp)
20080434:	dfc00b15 	stw	ra,44(sp)
20080438:	df000a15 	stw	fp,40(sp)
2008043c:	dd800815 	stw	r22,32(sp)
20080440:	dd400715 	stw	r21,28(sp)
20080444:	dcc00515 	stw	r19,20(sp)
20080448:	dc800415 	stw	r18,16(sp)
2008044c:	dc400315 	stw	r17,12(sp)
20080450:	2080020c 	andi	r2,r4,8
20080454:	2821883a 	mov	r16,r5
20080458:	302f883a 	mov	r23,r6
2008045c:	10002726 	beq	r2,zero,200804fc <__sfvwrite_r+0xe8>
20080460:	28800417 	ldw	r2,16(r5)
20080464:	10002526 	beq	r2,zero,200804fc <__sfvwrite_r+0xe8>
20080468:	2080008c 	andi	r2,r4,2
2008046c:	bc400017 	ldw	r17,0(r23)
20080470:	10002a26 	beq	r2,zero,2008051c <__sfvwrite_r+0x108>
20080474:	05600034 	movhi	r21,32768
20080478:	0027883a 	mov	r19,zero
2008047c:	0025883a 	mov	r18,zero
20080480:	ad7f0004 	addi	r21,r21,-1024
20080484:	980d883a 	mov	r6,r19
20080488:	a009883a 	mov	r4,r20
2008048c:	90004626 	beq	r18,zero,200805a8 <__sfvwrite_r+0x194>
20080490:	900f883a 	mov	r7,r18
20080494:	81400717 	ldw	r5,28(r16)
20080498:	ac80022e 	bgeu	r21,r18,200804a4 <__sfvwrite_r+0x90>
2008049c:	01e00034 	movhi	r7,32768
200804a0:	39ff0004 	addi	r7,r7,-1024
200804a4:	80800917 	ldw	r2,36(r16)
200804a8:	103ee83a 	callr	r2
200804ac:	0080520e 	bge	zero,r2,200805f8 <__sfvwrite_r+0x1e4>
200804b0:	b8c00217 	ldw	r3,8(r23)
200804b4:	98a7883a 	add	r19,r19,r2
200804b8:	90a5c83a 	sub	r18,r18,r2
200804bc:	1885c83a 	sub	r2,r3,r2
200804c0:	b8800215 	stw	r2,8(r23)
200804c4:	103fef1e 	bne	r2,zero,20080484 <__flash_rwdata_start+0xffff84b4>
200804c8:	0005883a 	mov	r2,zero
200804cc:	dfc00b17 	ldw	ra,44(sp)
200804d0:	df000a17 	ldw	fp,40(sp)
200804d4:	ddc00917 	ldw	r23,36(sp)
200804d8:	dd800817 	ldw	r22,32(sp)
200804dc:	dd400717 	ldw	r21,28(sp)
200804e0:	dd000617 	ldw	r20,24(sp)
200804e4:	dcc00517 	ldw	r19,20(sp)
200804e8:	dc800417 	ldw	r18,16(sp)
200804ec:	dc400317 	ldw	r17,12(sp)
200804f0:	dc000217 	ldw	r16,8(sp)
200804f4:	dec00c04 	addi	sp,sp,48
200804f8:	f800283a 	ret
200804fc:	a009883a 	mov	r4,r20
20080500:	800b883a 	mov	r5,r16
20080504:	00819b40 	call	200819b4 <__swsetup_r>
20080508:	1000ec1e 	bne	r2,zero,200808bc <__sfvwrite_r+0x4a8>
2008050c:	8100030b 	ldhu	r4,12(r16)
20080510:	bc400017 	ldw	r17,0(r23)
20080514:	2080008c 	andi	r2,r4,2
20080518:	103fd61e 	bne	r2,zero,20080474 <__flash_rwdata_start+0xffff84a4>
2008051c:	2080004c 	andi	r2,r4,1
20080520:	10003a1e 	bne	r2,zero,2008060c <__sfvwrite_r+0x1f8>
20080524:	0039883a 	mov	fp,zero
20080528:	0025883a 	mov	r18,zero
2008052c:	90001a26 	beq	r18,zero,20080598 <__sfvwrite_r+0x184>
20080530:	2080800c 	andi	r2,r4,512
20080534:	85800217 	ldw	r22,8(r16)
20080538:	10007626 	beq	r2,zero,20080714 <__sfvwrite_r+0x300>
2008053c:	b027883a 	mov	r19,r22
20080540:	95809436 	bltu	r18,r22,20080794 <__sfvwrite_r+0x380>
20080544:	2081200c 	andi	r2,r4,1152
20080548:	10009f1e 	bne	r2,zero,200807c8 <__sfvwrite_r+0x3b4>
2008054c:	81000017 	ldw	r4,0(r16)
20080550:	e00b883a 	mov	r5,fp
20080554:	980d883a 	mov	r6,r19
20080558:	008129c0 	call	2008129c <memmove>
2008055c:	81000217 	ldw	r4,8(r16)
20080560:	81400017 	ldw	r5,0(r16)
20080564:	9005883a 	mov	r2,r18
20080568:	2587c83a 	sub	r3,r4,r22
2008056c:	2ce7883a 	add	r19,r5,r19
20080570:	80c00215 	stw	r3,8(r16)
20080574:	84c00015 	stw	r19,0(r16)
20080578:	b8c00217 	ldw	r3,8(r23)
2008057c:	e0b9883a 	add	fp,fp,r2
20080580:	90a5c83a 	sub	r18,r18,r2
20080584:	1885c83a 	sub	r2,r3,r2
20080588:	b8800215 	stw	r2,8(r23)
2008058c:	103fce26 	beq	r2,zero,200804c8 <__flash_rwdata_start+0xffff84f8>
20080590:	8100030b 	ldhu	r4,12(r16)
20080594:	903fe61e 	bne	r18,zero,20080530 <__flash_rwdata_start+0xffff8560>
20080598:	8f000017 	ldw	fp,0(r17)
2008059c:	8c800117 	ldw	r18,4(r17)
200805a0:	8c400204 	addi	r17,r17,8
200805a4:	003fe106 	br	2008052c <__flash_rwdata_start+0xffff855c>
200805a8:	8cc00017 	ldw	r19,0(r17)
200805ac:	8c800117 	ldw	r18,4(r17)
200805b0:	8c400204 	addi	r17,r17,8
200805b4:	003fb306 	br	20080484 <__flash_rwdata_start+0xffff84b4>
200805b8:	0005883a 	mov	r2,zero
200805bc:	f800283a 	ret
200805c0:	00a00034 	movhi	r2,32768
200805c4:	10bfffc4 	addi	r2,r2,-1
200805c8:	9009883a 	mov	r4,r18
200805cc:	1480012e 	bgeu	r2,r18,200805d4 <__sfvwrite_r+0x1c0>
200805d0:	1009883a 	mov	r4,r2
200805d4:	980b883a 	mov	r5,r19
200805d8:	0082e740 	call	20082e74 <__divsi3>
200805dc:	81400717 	ldw	r5,28(r16)
200805e0:	80c00917 	ldw	r3,36(r16)
200805e4:	988f383a 	mul	r7,r19,r2
200805e8:	a009883a 	mov	r4,r20
200805ec:	e00d883a 	mov	r6,fp
200805f0:	183ee83a 	callr	r3
200805f4:	00bfe016 	blt	zero,r2,20080578 <__flash_rwdata_start+0xffff85a8>
200805f8:	8080030b 	ldhu	r2,12(r16)
200805fc:	10801014 	ori	r2,r2,64
20080600:	8080030d 	sth	r2,12(r16)
20080604:	00bfffc4 	movi	r2,-1
20080608:	003fb006 	br	200804cc <__flash_rwdata_start+0xffff84fc>
2008060c:	0027883a 	mov	r19,zero
20080610:	0011883a 	mov	r8,zero
20080614:	0039883a 	mov	fp,zero
20080618:	0025883a 	mov	r18,zero
2008061c:	90001f26 	beq	r18,zero,2008069c <__sfvwrite_r+0x288>
20080620:	40006026 	beq	r8,zero,200807a4 <__sfvwrite_r+0x390>
20080624:	982b883a 	mov	r21,r19
20080628:	94c0012e 	bgeu	r18,r19,20080630 <__sfvwrite_r+0x21c>
2008062c:	902b883a 	mov	r21,r18
20080630:	81000017 	ldw	r4,0(r16)
20080634:	80800417 	ldw	r2,16(r16)
20080638:	a82d883a 	mov	r22,r21
2008063c:	81800217 	ldw	r6,8(r16)
20080640:	81c00517 	ldw	r7,20(r16)
20080644:	1100022e 	bgeu	r2,r4,20080650 <__sfvwrite_r+0x23c>
20080648:	31c7883a 	add	r3,r6,r7
2008064c:	1d401816 	blt	r3,r21,200806b0 <__sfvwrite_r+0x29c>
20080650:	a9c04416 	blt	r21,r7,20080764 <__sfvwrite_r+0x350>
20080654:	80800917 	ldw	r2,36(r16)
20080658:	81400717 	ldw	r5,28(r16)
2008065c:	a009883a 	mov	r4,r20
20080660:	da000115 	stw	r8,4(sp)
20080664:	e00d883a 	mov	r6,fp
20080668:	103ee83a 	callr	r2
2008066c:	102d883a 	mov	r22,r2
20080670:	da000117 	ldw	r8,4(sp)
20080674:	00bfe00e 	bge	zero,r2,200805f8 <__flash_rwdata_start+0xffff8628>
20080678:	9da7c83a 	sub	r19,r19,r22
2008067c:	98001f26 	beq	r19,zero,200806fc <__sfvwrite_r+0x2e8>
20080680:	b8800217 	ldw	r2,8(r23)
20080684:	e5b9883a 	add	fp,fp,r22
20080688:	95a5c83a 	sub	r18,r18,r22
2008068c:	15adc83a 	sub	r22,r2,r22
20080690:	bd800215 	stw	r22,8(r23)
20080694:	b03f8c26 	beq	r22,zero,200804c8 <__flash_rwdata_start+0xffff84f8>
20080698:	903fe11e 	bne	r18,zero,20080620 <__flash_rwdata_start+0xffff8650>
2008069c:	8f000017 	ldw	fp,0(r17)
200806a0:	8c800117 	ldw	r18,4(r17)
200806a4:	0011883a 	mov	r8,zero
200806a8:	8c400204 	addi	r17,r17,8
200806ac:	003fdb06 	br	2008061c <__flash_rwdata_start+0xffff864c>
200806b0:	180d883a 	mov	r6,r3
200806b4:	e00b883a 	mov	r5,fp
200806b8:	da000115 	stw	r8,4(sp)
200806bc:	d8c00015 	stw	r3,0(sp)
200806c0:	008129c0 	call	2008129c <memmove>
200806c4:	d8c00017 	ldw	r3,0(sp)
200806c8:	80800017 	ldw	r2,0(r16)
200806cc:	a009883a 	mov	r4,r20
200806d0:	800b883a 	mov	r5,r16
200806d4:	10c5883a 	add	r2,r2,r3
200806d8:	80800015 	stw	r2,0(r16)
200806dc:	d8c00015 	stw	r3,0(sp)
200806e0:	0081d100 	call	20081d10 <_fflush_r>
200806e4:	d8c00017 	ldw	r3,0(sp)
200806e8:	da000117 	ldw	r8,4(sp)
200806ec:	103fc21e 	bne	r2,zero,200805f8 <__flash_rwdata_start+0xffff8628>
200806f0:	182d883a 	mov	r22,r3
200806f4:	9da7c83a 	sub	r19,r19,r22
200806f8:	983fe11e 	bne	r19,zero,20080680 <__flash_rwdata_start+0xffff86b0>
200806fc:	a009883a 	mov	r4,r20
20080700:	800b883a 	mov	r5,r16
20080704:	0081d100 	call	20081d10 <_fflush_r>
20080708:	103fbb1e 	bne	r2,zero,200805f8 <__flash_rwdata_start+0xffff8628>
2008070c:	0011883a 	mov	r8,zero
20080710:	003fdb06 	br	20080680 <__flash_rwdata_start+0xffff86b0>
20080714:	81000017 	ldw	r4,0(r16)
20080718:	80800417 	ldw	r2,16(r16)
2008071c:	11000236 	bltu	r2,r4,20080728 <__sfvwrite_r+0x314>
20080720:	84c00517 	ldw	r19,20(r16)
20080724:	94ffa62e 	bgeu	r18,r19,200805c0 <__flash_rwdata_start+0xffff85f0>
20080728:	9027883a 	mov	r19,r18
2008072c:	b480012e 	bgeu	r22,r18,20080734 <__sfvwrite_r+0x320>
20080730:	b027883a 	mov	r19,r22
20080734:	e00b883a 	mov	r5,fp
20080738:	980d883a 	mov	r6,r19
2008073c:	008129c0 	call	2008129c <memmove>
20080740:	80800217 	ldw	r2,8(r16)
20080744:	80c00017 	ldw	r3,0(r16)
20080748:	14c5c83a 	sub	r2,r2,r19
2008074c:	1cc7883a 	add	r3,r3,r19
20080750:	80800215 	stw	r2,8(r16)
20080754:	80c00015 	stw	r3,0(r16)
20080758:	10004326 	beq	r2,zero,20080868 <__sfvwrite_r+0x454>
2008075c:	9805883a 	mov	r2,r19
20080760:	003f8506 	br	20080578 <__flash_rwdata_start+0xffff85a8>
20080764:	a80d883a 	mov	r6,r21
20080768:	e00b883a 	mov	r5,fp
2008076c:	da000115 	stw	r8,4(sp)
20080770:	008129c0 	call	2008129c <memmove>
20080774:	80800217 	ldw	r2,8(r16)
20080778:	80c00017 	ldw	r3,0(r16)
2008077c:	da000117 	ldw	r8,4(sp)
20080780:	1545c83a 	sub	r2,r2,r21
20080784:	1d6b883a 	add	r21,r3,r21
20080788:	80800215 	stw	r2,8(r16)
2008078c:	85400015 	stw	r21,0(r16)
20080790:	003fb906 	br	20080678 <__flash_rwdata_start+0xffff86a8>
20080794:	81000017 	ldw	r4,0(r16)
20080798:	902d883a 	mov	r22,r18
2008079c:	9027883a 	mov	r19,r18
200807a0:	003f6b06 	br	20080550 <__flash_rwdata_start+0xffff8580>
200807a4:	e009883a 	mov	r4,fp
200807a8:	01400284 	movi	r5,10
200807ac:	900d883a 	mov	r6,r18
200807b0:	008107c0 	call	2008107c <memchr>
200807b4:	10003e26 	beq	r2,zero,200808b0 <__sfvwrite_r+0x49c>
200807b8:	10800044 	addi	r2,r2,1
200807bc:	1727c83a 	sub	r19,r2,fp
200807c0:	02000044 	movi	r8,1
200807c4:	003f9706 	br	20080624 <__flash_rwdata_start+0xffff8654>
200807c8:	80800517 	ldw	r2,20(r16)
200807cc:	81400417 	ldw	r5,16(r16)
200807d0:	80c00017 	ldw	r3,0(r16)
200807d4:	10a7883a 	add	r19,r2,r2
200807d8:	9885883a 	add	r2,r19,r2
200807dc:	1026d7fa 	srli	r19,r2,31
200807e0:	196bc83a 	sub	r21,r3,r5
200807e4:	a9800044 	addi	r6,r21,1
200807e8:	9885883a 	add	r2,r19,r2
200807ec:	1027d07a 	srai	r19,r2,1
200807f0:	3485883a 	add	r2,r6,r18
200807f4:	980d883a 	mov	r6,r19
200807f8:	9880022e 	bgeu	r19,r2,20080804 <__sfvwrite_r+0x3f0>
200807fc:	1027883a 	mov	r19,r2
20080800:	100d883a 	mov	r6,r2
20080804:	2101000c 	andi	r4,r4,1024
20080808:	20001c26 	beq	r4,zero,2008087c <__sfvwrite_r+0x468>
2008080c:	a009883a 	mov	r4,r20
20080810:	300b883a 	mov	r5,r6
20080814:	00808d40 	call	200808d4 <_malloc_r>
20080818:	102d883a 	mov	r22,r2
2008081c:	10002926 	beq	r2,zero,200808c4 <__sfvwrite_r+0x4b0>
20080820:	81400417 	ldw	r5,16(r16)
20080824:	1009883a 	mov	r4,r2
20080828:	a80d883a 	mov	r6,r21
2008082c:	00811640 	call	20081164 <memcpy>
20080830:	8080030b 	ldhu	r2,12(r16)
20080834:	00fedfc4 	movi	r3,-1153
20080838:	10c4703a 	and	r2,r2,r3
2008083c:	10802014 	ori	r2,r2,128
20080840:	8080030d 	sth	r2,12(r16)
20080844:	b549883a 	add	r4,r22,r21
20080848:	9d4bc83a 	sub	r5,r19,r21
2008084c:	85800415 	stw	r22,16(r16)
20080850:	84c00515 	stw	r19,20(r16)
20080854:	81000015 	stw	r4,0(r16)
20080858:	902d883a 	mov	r22,r18
2008085c:	81400215 	stw	r5,8(r16)
20080860:	9027883a 	mov	r19,r18
20080864:	003f3a06 	br	20080550 <__flash_rwdata_start+0xffff8580>
20080868:	a009883a 	mov	r4,r20
2008086c:	800b883a 	mov	r5,r16
20080870:	0081d100 	call	20081d10 <_fflush_r>
20080874:	103fb926 	beq	r2,zero,2008075c <__flash_rwdata_start+0xffff878c>
20080878:	003f5f06 	br	200805f8 <__flash_rwdata_start+0xffff8628>
2008087c:	a009883a 	mov	r4,r20
20080880:	00813f80 	call	200813f8 <_realloc_r>
20080884:	102d883a 	mov	r22,r2
20080888:	103fee1e 	bne	r2,zero,20080844 <__flash_rwdata_start+0xffff8874>
2008088c:	81400417 	ldw	r5,16(r16)
20080890:	a009883a 	mov	r4,r20
20080894:	00822600 	call	20082260 <_free_r>
20080898:	8080030b 	ldhu	r2,12(r16)
2008089c:	00ffdfc4 	movi	r3,-129
200808a0:	1884703a 	and	r2,r3,r2
200808a4:	00c00304 	movi	r3,12
200808a8:	a0c00015 	stw	r3,0(r20)
200808ac:	003f5306 	br	200805fc <__flash_rwdata_start+0xffff862c>
200808b0:	94c00044 	addi	r19,r18,1
200808b4:	02000044 	movi	r8,1
200808b8:	003f5a06 	br	20080624 <__flash_rwdata_start+0xffff8654>
200808bc:	00bfffc4 	movi	r2,-1
200808c0:	003f0206 	br	200804cc <__flash_rwdata_start+0xffff84fc>
200808c4:	00800304 	movi	r2,12
200808c8:	a0800015 	stw	r2,0(r20)
200808cc:	8080030b 	ldhu	r2,12(r16)
200808d0:	003f4a06 	br	200805fc <__flash_rwdata_start+0xffff862c>

200808d4 <_malloc_r>:
200808d4:	defff504 	addi	sp,sp,-44
200808d8:	dc800315 	stw	r18,12(sp)
200808dc:	dfc00a15 	stw	ra,40(sp)
200808e0:	df000915 	stw	fp,36(sp)
200808e4:	ddc00815 	stw	r23,32(sp)
200808e8:	dd800715 	stw	r22,28(sp)
200808ec:	dd400615 	stw	r21,24(sp)
200808f0:	dd000515 	stw	r20,20(sp)
200808f4:	dcc00415 	stw	r19,16(sp)
200808f8:	dc400215 	stw	r17,8(sp)
200808fc:	dc000115 	stw	r16,4(sp)
20080900:	288002c4 	addi	r2,r5,11
20080904:	00c00584 	movi	r3,22
20080908:	2025883a 	mov	r18,r4
2008090c:	18802a2e 	bgeu	r3,r2,200809b8 <_malloc_r+0xe4>
20080910:	047ffe04 	movi	r17,-8
20080914:	1462703a 	and	r17,r2,r17
20080918:	88009e16 	blt	r17,zero,20080b94 <_malloc_r+0x2c0>
2008091c:	89409d36 	bltu	r17,r5,20080b94 <_malloc_r+0x2c0>
20080920:	00834f40 	call	200834f4 <__malloc_lock>
20080924:	00807dc4 	movi	r2,503
20080928:	14402736 	bltu	r2,r17,200809c8 <_malloc_r+0xf4>
2008092c:	8806d0fa 	srli	r3,r17,3
20080930:	04c00034 	movhi	r19,0
20080934:	9cc1ad04 	addi	r19,r19,1716
20080938:	18c5883a 	add	r2,r3,r3
2008093c:	1085883a 	add	r2,r2,r2
20080940:	1085883a 	add	r2,r2,r2
20080944:	9885883a 	add	r2,r19,r2
20080948:	14000317 	ldw	r16,12(r2)
2008094c:	80814a26 	beq	r16,r2,20080e78 <_malloc_r+0x5a4>
20080950:	80c00117 	ldw	r3,4(r16)
20080954:	81000317 	ldw	r4,12(r16)
20080958:	00bfff04 	movi	r2,-4
2008095c:	1884703a 	and	r2,r3,r2
20080960:	81400217 	ldw	r5,8(r16)
20080964:	8085883a 	add	r2,r16,r2
20080968:	10c00117 	ldw	r3,4(r2)
2008096c:	29000315 	stw	r4,12(r5)
20080970:	21400215 	stw	r5,8(r4)
20080974:	18c00054 	ori	r3,r3,1
20080978:	10c00115 	stw	r3,4(r2)
2008097c:	9009883a 	mov	r4,r18
20080980:	00835140 	call	20083514 <__malloc_unlock>
20080984:	80800204 	addi	r2,r16,8
20080988:	dfc00a17 	ldw	ra,40(sp)
2008098c:	df000917 	ldw	fp,36(sp)
20080990:	ddc00817 	ldw	r23,32(sp)
20080994:	dd800717 	ldw	r22,28(sp)
20080998:	dd400617 	ldw	r21,24(sp)
2008099c:	dd000517 	ldw	r20,20(sp)
200809a0:	dcc00417 	ldw	r19,16(sp)
200809a4:	dc800317 	ldw	r18,12(sp)
200809a8:	dc400217 	ldw	r17,8(sp)
200809ac:	dc000117 	ldw	r16,4(sp)
200809b0:	dec00b04 	addi	sp,sp,44
200809b4:	f800283a 	ret
200809b8:	04400404 	movi	r17,16
200809bc:	89407536 	bltu	r17,r5,20080b94 <_malloc_r+0x2c0>
200809c0:	00834f40 	call	200834f4 <__malloc_lock>
200809c4:	003fd906 	br	2008092c <__flash_rwdata_start+0xffff895c>
200809c8:	8806d27a 	srli	r3,r17,9
200809cc:	18007526 	beq	r3,zero,20080ba4 <_malloc_r+0x2d0>
200809d0:	00800104 	movi	r2,4
200809d4:	10c0ef36 	bltu	r2,r3,20080d94 <_malloc_r+0x4c0>
200809d8:	8806d1ba 	srli	r3,r17,6
200809dc:	19c00e04 	addi	r7,r3,56
200809e0:	39cb883a 	add	r5,r7,r7
200809e4:	04c00034 	movhi	r19,0
200809e8:	294b883a 	add	r5,r5,r5
200809ec:	9cc1ad04 	addi	r19,r19,1716
200809f0:	294b883a 	add	r5,r5,r5
200809f4:	994b883a 	add	r5,r19,r5
200809f8:	2c000317 	ldw	r16,12(r5)
200809fc:	2c000e26 	beq	r5,r16,20080a38 <_malloc_r+0x164>
20080a00:	80800117 	ldw	r2,4(r16)
20080a04:	01bfff04 	movi	r6,-4
20080a08:	010003c4 	movi	r4,15
20080a0c:	1184703a 	and	r2,r2,r6
20080a10:	1447c83a 	sub	r3,r2,r17
20080a14:	20c00716 	blt	r4,r3,20080a34 <_malloc_r+0x160>
20080a18:	1800650e 	bge	r3,zero,20080bb0 <_malloc_r+0x2dc>
20080a1c:	84000317 	ldw	r16,12(r16)
20080a20:	2c000526 	beq	r5,r16,20080a38 <_malloc_r+0x164>
20080a24:	80800117 	ldw	r2,4(r16)
20080a28:	1184703a 	and	r2,r2,r6
20080a2c:	1447c83a 	sub	r3,r2,r17
20080a30:	20fff90e 	bge	r4,r3,20080a18 <__flash_rwdata_start+0xffff8a48>
20080a34:	39ffffc4 	addi	r7,r7,-1
20080a38:	38c00044 	addi	r3,r7,1
20080a3c:	01800034 	movhi	r6,0
20080a40:	9c000417 	ldw	r16,16(r19)
20080a44:	3181ad04 	addi	r6,r6,1716
20080a48:	32400204 	addi	r9,r6,8
20080a4c:	82410326 	beq	r16,r9,20080e5c <_malloc_r+0x588>
20080a50:	81000117 	ldw	r4,4(r16)
20080a54:	00bfff04 	movi	r2,-4
20080a58:	208e703a 	and	r7,r4,r2
20080a5c:	3c45c83a 	sub	r2,r7,r17
20080a60:	010003c4 	movi	r4,15
20080a64:	2080ee16 	blt	r4,r2,20080e20 <_malloc_r+0x54c>
20080a68:	32400515 	stw	r9,20(r6)
20080a6c:	32400415 	stw	r9,16(r6)
20080a70:	1000510e 	bge	r2,zero,20080bb8 <_malloc_r+0x2e4>
20080a74:	00807fc4 	movi	r2,511
20080a78:	11c0ce36 	bltu	r2,r7,20080db4 <_malloc_r+0x4e0>
20080a7c:	3808d0fa 	srli	r4,r7,3
20080a80:	01c00044 	movi	r7,1
20080a84:	30800117 	ldw	r2,4(r6)
20080a88:	210b883a 	add	r5,r4,r4
20080a8c:	294b883a 	add	r5,r5,r5
20080a90:	2009d0ba 	srai	r4,r4,2
20080a94:	294b883a 	add	r5,r5,r5
20080a98:	298b883a 	add	r5,r5,r6
20080a9c:	2a000217 	ldw	r8,8(r5)
20080aa0:	3908983a 	sll	r4,r7,r4
20080aa4:	81400315 	stw	r5,12(r16)
20080aa8:	82000215 	stw	r8,8(r16)
20080aac:	2088b03a 	or	r4,r4,r2
20080ab0:	2c000215 	stw	r16,8(r5)
20080ab4:	31000115 	stw	r4,4(r6)
20080ab8:	44000315 	stw	r16,12(r8)
20080abc:	1805d0ba 	srai	r2,r3,2
20080ac0:	01400044 	movi	r5,1
20080ac4:	288a983a 	sll	r5,r5,r2
20080ac8:	21404336 	bltu	r4,r5,20080bd8 <_malloc_r+0x304>
20080acc:	2144703a 	and	r2,r4,r5
20080ad0:	10000a1e 	bne	r2,zero,20080afc <_malloc_r+0x228>
20080ad4:	00bfff04 	movi	r2,-4
20080ad8:	294b883a 	add	r5,r5,r5
20080adc:	1886703a 	and	r3,r3,r2
20080ae0:	2144703a 	and	r2,r4,r5
20080ae4:	18c00104 	addi	r3,r3,4
20080ae8:	1000041e 	bne	r2,zero,20080afc <_malloc_r+0x228>
20080aec:	294b883a 	add	r5,r5,r5
20080af0:	2144703a 	and	r2,r4,r5
20080af4:	18c00104 	addi	r3,r3,4
20080af8:	103ffc26 	beq	r2,zero,20080aec <__flash_rwdata_start+0xffff8b1c>
20080afc:	023fff04 	movi	r8,-4
20080b00:	01c003c4 	movi	r7,15
20080b04:	18c5883a 	add	r2,r3,r3
20080b08:	1085883a 	add	r2,r2,r2
20080b0c:	1085883a 	add	r2,r2,r2
20080b10:	9895883a 	add	r10,r19,r2
20080b14:	52c00304 	addi	r11,r10,12
20080b18:	1819883a 	mov	r12,r3
20080b1c:	5c000017 	ldw	r16,0(r11)
20080b20:	59bffd04 	addi	r6,r11,-12
20080b24:	8180041e 	bne	r16,r6,20080b38 <_malloc_r+0x264>
20080b28:	0000ce06 	br	20080e64 <_malloc_r+0x590>
20080b2c:	2000d70e 	bge	r4,zero,20080e8c <_malloc_r+0x5b8>
20080b30:	84000317 	ldw	r16,12(r16)
20080b34:	8180cb26 	beq	r16,r6,20080e64 <_malloc_r+0x590>
20080b38:	80800117 	ldw	r2,4(r16)
20080b3c:	1204703a 	and	r2,r2,r8
20080b40:	1449c83a 	sub	r4,r2,r17
20080b44:	393ff90e 	bge	r7,r4,20080b2c <__flash_rwdata_start+0xffff8b5c>
20080b48:	80800317 	ldw	r2,12(r16)
20080b4c:	80c00217 	ldw	r3,8(r16)
20080b50:	89400054 	ori	r5,r17,1
20080b54:	81400115 	stw	r5,4(r16)
20080b58:	18800315 	stw	r2,12(r3)
20080b5c:	10c00215 	stw	r3,8(r2)
20080b60:	8463883a 	add	r17,r16,r17
20080b64:	9c400515 	stw	r17,20(r19)
20080b68:	9c400415 	stw	r17,16(r19)
20080b6c:	20800054 	ori	r2,r4,1
20080b70:	88800115 	stw	r2,4(r17)
20080b74:	8a400315 	stw	r9,12(r17)
20080b78:	8a400215 	stw	r9,8(r17)
20080b7c:	8923883a 	add	r17,r17,r4
20080b80:	89000015 	stw	r4,0(r17)
20080b84:	9009883a 	mov	r4,r18
20080b88:	00835140 	call	20083514 <__malloc_unlock>
20080b8c:	80800204 	addi	r2,r16,8
20080b90:	003f7d06 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080b94:	00800304 	movi	r2,12
20080b98:	90800015 	stw	r2,0(r18)
20080b9c:	0005883a 	mov	r2,zero
20080ba0:	003f7906 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080ba4:	01401f84 	movi	r5,126
20080ba8:	01c00fc4 	movi	r7,63
20080bac:	003f8d06 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080bb0:	81000317 	ldw	r4,12(r16)
20080bb4:	003f6a06 	br	20080960 <__flash_rwdata_start+0xffff8990>
20080bb8:	81c5883a 	add	r2,r16,r7
20080bbc:	10c00117 	ldw	r3,4(r2)
20080bc0:	9009883a 	mov	r4,r18
20080bc4:	18c00054 	ori	r3,r3,1
20080bc8:	10c00115 	stw	r3,4(r2)
20080bcc:	00835140 	call	20083514 <__malloc_unlock>
20080bd0:	80800204 	addi	r2,r16,8
20080bd4:	003f6c06 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080bd8:	9c000217 	ldw	r16,8(r19)
20080bdc:	00bfff04 	movi	r2,-4
20080be0:	85800117 	ldw	r22,4(r16)
20080be4:	b0ac703a 	and	r22,r22,r2
20080be8:	b4400336 	bltu	r22,r17,20080bf8 <_malloc_r+0x324>
20080bec:	b445c83a 	sub	r2,r22,r17
20080bf0:	00c003c4 	movi	r3,15
20080bf4:	18805d16 	blt	r3,r2,20080d6c <_malloc_r+0x498>
20080bf8:	05c00034 	movhi	r23,0
20080bfc:	00800034 	movhi	r2,0
20080c00:	bdc77b04 	addi	r23,r23,7660
20080c04:	10878b04 	addi	r2,r2,7724
20080c08:	15400017 	ldw	r21,0(r2)
20080c0c:	b9000017 	ldw	r4,0(r23)
20080c10:	00ffffc4 	movi	r3,-1
20080c14:	858d883a 	add	r6,r16,r22
20080c18:	8d6b883a 	add	r21,r17,r21
20080c1c:	20c0e426 	beq	r4,r3,20080fb0 <_malloc_r+0x6dc>
20080c20:	ad4403c4 	addi	r21,r21,4111
20080c24:	00fc0004 	movi	r3,-4096
20080c28:	a8ea703a 	and	r21,r21,r3
20080c2c:	9009883a 	mov	r4,r18
20080c30:	a80b883a 	mov	r5,r21
20080c34:	d9800015 	stw	r6,0(sp)
20080c38:	00819600 	call	20081960 <_sbrk_r>
20080c3c:	00ffffc4 	movi	r3,-1
20080c40:	1029883a 	mov	r20,r2
20080c44:	d9800017 	ldw	r6,0(sp)
20080c48:	10c0a426 	beq	r2,r3,20080edc <_malloc_r+0x608>
20080c4c:	1180a236 	bltu	r2,r6,20080ed8 <_malloc_r+0x604>
20080c50:	07000034 	movhi	fp,0
20080c54:	e7079404 	addi	fp,fp,7760
20080c58:	e0c00017 	ldw	r3,0(fp)
20080c5c:	a8c7883a 	add	r3,r21,r3
20080c60:	e0c00015 	stw	r3,0(fp)
20080c64:	3500da26 	beq	r6,r20,20080fd0 <_malloc_r+0x6fc>
20080c68:	b9000017 	ldw	r4,0(r23)
20080c6c:	00bfffc4 	movi	r2,-1
20080c70:	2080e426 	beq	r4,r2,20081004 <_malloc_r+0x730>
20080c74:	a185c83a 	sub	r2,r20,r6
20080c78:	1885883a 	add	r2,r3,r2
20080c7c:	e0800015 	stw	r2,0(fp)
20080c80:	a0c001cc 	andi	r3,r20,7
20080c84:	1800b526 	beq	r3,zero,20080f5c <_malloc_r+0x688>
20080c88:	a0e9c83a 	sub	r20,r20,r3
20080c8c:	00840204 	movi	r2,4104
20080c90:	a5000204 	addi	r20,r20,8
20080c94:	10c7c83a 	sub	r3,r2,r3
20080c98:	a545883a 	add	r2,r20,r21
20080c9c:	1083ffcc 	andi	r2,r2,4095
20080ca0:	18abc83a 	sub	r21,r3,r2
20080ca4:	9009883a 	mov	r4,r18
20080ca8:	a80b883a 	mov	r5,r21
20080cac:	00819600 	call	20081960 <_sbrk_r>
20080cb0:	00ffffc4 	movi	r3,-1
20080cb4:	10c0d026 	beq	r2,r3,20080ff8 <_malloc_r+0x724>
20080cb8:	1507c83a 	sub	r3,r2,r20
20080cbc:	a8c7883a 	add	r3,r21,r3
20080cc0:	18c00054 	ori	r3,r3,1
20080cc4:	e0800017 	ldw	r2,0(fp)
20080cc8:	9d000215 	stw	r20,8(r19)
20080ccc:	a0c00115 	stw	r3,4(r20)
20080cd0:	a887883a 	add	r3,r21,r2
20080cd4:	e0c00015 	stw	r3,0(fp)
20080cd8:	84c00e26 	beq	r16,r19,20080d14 <_malloc_r+0x440>
20080cdc:	018003c4 	movi	r6,15
20080ce0:	3580a02e 	bgeu	r6,r22,20080f64 <_malloc_r+0x690>
20080ce4:	81400117 	ldw	r5,4(r16)
20080ce8:	013ffe04 	movi	r4,-8
20080cec:	b0bffd04 	addi	r2,r22,-12
20080cf0:	1104703a 	and	r2,r2,r4
20080cf4:	2900004c 	andi	r4,r5,1
20080cf8:	1108b03a 	or	r4,r2,r4
20080cfc:	81000115 	stw	r4,4(r16)
20080d00:	01400144 	movi	r5,5
20080d04:	8089883a 	add	r4,r16,r2
20080d08:	21400115 	stw	r5,4(r4)
20080d0c:	21400215 	stw	r5,8(r4)
20080d10:	3080c036 	bltu	r6,r2,20081014 <_malloc_r+0x740>
20080d14:	00800034 	movhi	r2,0
20080d18:	10878a04 	addi	r2,r2,7720
20080d1c:	11000017 	ldw	r4,0(r2)
20080d20:	20c0012e 	bgeu	r4,r3,20080d28 <_malloc_r+0x454>
20080d24:	10c00015 	stw	r3,0(r2)
20080d28:	00800034 	movhi	r2,0
20080d2c:	10878904 	addi	r2,r2,7716
20080d30:	11000017 	ldw	r4,0(r2)
20080d34:	9c000217 	ldw	r16,8(r19)
20080d38:	20c0012e 	bgeu	r4,r3,20080d40 <_malloc_r+0x46c>
20080d3c:	10c00015 	stw	r3,0(r2)
20080d40:	80c00117 	ldw	r3,4(r16)
20080d44:	00bfff04 	movi	r2,-4
20080d48:	1886703a 	and	r3,r3,r2
20080d4c:	1c45c83a 	sub	r2,r3,r17
20080d50:	1c400236 	bltu	r3,r17,20080d5c <_malloc_r+0x488>
20080d54:	00c003c4 	movi	r3,15
20080d58:	18800416 	blt	r3,r2,20080d6c <_malloc_r+0x498>
20080d5c:	9009883a 	mov	r4,r18
20080d60:	00835140 	call	20083514 <__malloc_unlock>
20080d64:	0005883a 	mov	r2,zero
20080d68:	003f0706 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080d6c:	88c00054 	ori	r3,r17,1
20080d70:	80c00115 	stw	r3,4(r16)
20080d74:	8463883a 	add	r17,r16,r17
20080d78:	10800054 	ori	r2,r2,1
20080d7c:	9c400215 	stw	r17,8(r19)
20080d80:	88800115 	stw	r2,4(r17)
20080d84:	9009883a 	mov	r4,r18
20080d88:	00835140 	call	20083514 <__malloc_unlock>
20080d8c:	80800204 	addi	r2,r16,8
20080d90:	003efd06 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080d94:	00800504 	movi	r2,20
20080d98:	10c0482e 	bgeu	r2,r3,20080ebc <_malloc_r+0x5e8>
20080d9c:	00801504 	movi	r2,84
20080da0:	10c06836 	bltu	r2,r3,20080f44 <_malloc_r+0x670>
20080da4:	8806d33a 	srli	r3,r17,12
20080da8:	19c01b84 	addi	r7,r3,110
20080dac:	39cb883a 	add	r5,r7,r7
20080db0:	003f0c06 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080db4:	3804d27a 	srli	r2,r7,9
20080db8:	01000104 	movi	r4,4
20080dbc:	2080422e 	bgeu	r4,r2,20080ec8 <_malloc_r+0x5f4>
20080dc0:	01000504 	movi	r4,20
20080dc4:	20807c36 	bltu	r4,r2,20080fb8 <_malloc_r+0x6e4>
20080dc8:	110016c4 	addi	r4,r2,91
20080dcc:	210b883a 	add	r5,r4,r4
20080dd0:	294b883a 	add	r5,r5,r5
20080dd4:	294b883a 	add	r5,r5,r5
20080dd8:	994b883a 	add	r5,r19,r5
20080ddc:	28800217 	ldw	r2,8(r5)
20080de0:	02000034 	movhi	r8,0
20080de4:	4201ad04 	addi	r8,r8,1716
20080de8:	11406326 	beq	r2,r5,20080f78 <_malloc_r+0x6a4>
20080dec:	01bfff04 	movi	r6,-4
20080df0:	11000117 	ldw	r4,4(r2)
20080df4:	2188703a 	and	r4,r4,r6
20080df8:	3900022e 	bgeu	r7,r4,20080e04 <_malloc_r+0x530>
20080dfc:	10800217 	ldw	r2,8(r2)
20080e00:	28bffb1e 	bne	r5,r2,20080df0 <__flash_rwdata_start+0xffff8e20>
20080e04:	11800317 	ldw	r6,12(r2)
20080e08:	99000117 	ldw	r4,4(r19)
20080e0c:	81800315 	stw	r6,12(r16)
20080e10:	80800215 	stw	r2,8(r16)
20080e14:	34000215 	stw	r16,8(r6)
20080e18:	14000315 	stw	r16,12(r2)
20080e1c:	003f2706 	br	20080abc <__flash_rwdata_start+0xffff8aec>
20080e20:	88c00054 	ori	r3,r17,1
20080e24:	80c00115 	stw	r3,4(r16)
20080e28:	8463883a 	add	r17,r16,r17
20080e2c:	34400515 	stw	r17,20(r6)
20080e30:	34400415 	stw	r17,16(r6)
20080e34:	10c00054 	ori	r3,r2,1
20080e38:	8a400315 	stw	r9,12(r17)
20080e3c:	8a400215 	stw	r9,8(r17)
20080e40:	88c00115 	stw	r3,4(r17)
20080e44:	88a3883a 	add	r17,r17,r2
20080e48:	88800015 	stw	r2,0(r17)
20080e4c:	9009883a 	mov	r4,r18
20080e50:	00835140 	call	20083514 <__malloc_unlock>
20080e54:	80800204 	addi	r2,r16,8
20080e58:	003ecb06 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080e5c:	31000117 	ldw	r4,4(r6)
20080e60:	003f1606 	br	20080abc <__flash_rwdata_start+0xffff8aec>
20080e64:	63000044 	addi	r12,r12,1
20080e68:	608000cc 	andi	r2,r12,3
20080e6c:	5ac00204 	addi	r11,r11,8
20080e70:	103f2a1e 	bne	r2,zero,20080b1c <__flash_rwdata_start+0xffff8b4c>
20080e74:	00002106 	br	20080efc <_malloc_r+0x628>
20080e78:	80800204 	addi	r2,r16,8
20080e7c:	84000517 	ldw	r16,20(r16)
20080e80:	143eb31e 	bne	r2,r16,20080950 <__flash_rwdata_start+0xffff8980>
20080e84:	18c00084 	addi	r3,r3,2
20080e88:	003eec06 	br	20080a3c <__flash_rwdata_start+0xffff8a6c>
20080e8c:	8085883a 	add	r2,r16,r2
20080e90:	10c00117 	ldw	r3,4(r2)
20080e94:	81000317 	ldw	r4,12(r16)
20080e98:	81400217 	ldw	r5,8(r16)
20080e9c:	18c00054 	ori	r3,r3,1
20080ea0:	10c00115 	stw	r3,4(r2)
20080ea4:	29000315 	stw	r4,12(r5)
20080ea8:	21400215 	stw	r5,8(r4)
20080eac:	9009883a 	mov	r4,r18
20080eb0:	00835140 	call	20083514 <__malloc_unlock>
20080eb4:	80800204 	addi	r2,r16,8
20080eb8:	003eb306 	br	20080988 <__flash_rwdata_start+0xffff89b8>
20080ebc:	19c016c4 	addi	r7,r3,91
20080ec0:	39cb883a 	add	r5,r7,r7
20080ec4:	003ec706 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080ec8:	3804d1ba 	srli	r2,r7,6
20080ecc:	11000e04 	addi	r4,r2,56
20080ed0:	210b883a 	add	r5,r4,r4
20080ed4:	003fbe06 	br	20080dd0 <__flash_rwdata_start+0xffff8e00>
20080ed8:	84ff5d26 	beq	r16,r19,20080c50 <__flash_rwdata_start+0xffff8c80>
20080edc:	9c000217 	ldw	r16,8(r19)
20080ee0:	00bfff04 	movi	r2,-4
20080ee4:	80c00117 	ldw	r3,4(r16)
20080ee8:	1886703a 	and	r3,r3,r2
20080eec:	003f9706 	br	20080d4c <__flash_rwdata_start+0xffff8d7c>
20080ef0:	52800017 	ldw	r10,0(r10)
20080ef4:	18ffffc4 	addi	r3,r3,-1
20080ef8:	50805c1e 	bne	r10,r2,2008106c <_malloc_r+0x798>
20080efc:	190000cc 	andi	r4,r3,3
20080f00:	50bffe04 	addi	r2,r10,-8
20080f04:	203ffa1e 	bne	r4,zero,20080ef0 <__flash_rwdata_start+0xffff8f20>
20080f08:	98800117 	ldw	r2,4(r19)
20080f0c:	0146303a 	nor	r3,zero,r5
20080f10:	1884703a 	and	r2,r3,r2
20080f14:	98800115 	stw	r2,4(r19)
20080f18:	294b883a 	add	r5,r5,r5
20080f1c:	117f2e36 	bltu	r2,r5,20080bd8 <__flash_rwdata_start+0xffff8c08>
20080f20:	283f2d26 	beq	r5,zero,20080bd8 <__flash_rwdata_start+0xffff8c08>
20080f24:	1146703a 	and	r3,r2,r5
20080f28:	1800521e 	bne	r3,zero,20081074 <_malloc_r+0x7a0>
20080f2c:	6007883a 	mov	r3,r12
20080f30:	294b883a 	add	r5,r5,r5
20080f34:	1148703a 	and	r4,r2,r5
20080f38:	18c00104 	addi	r3,r3,4
20080f3c:	203ffc26 	beq	r4,zero,20080f30 <__flash_rwdata_start+0xffff8f60>
20080f40:	003ef006 	br	20080b04 <__flash_rwdata_start+0xffff8b34>
20080f44:	00805504 	movi	r2,340
20080f48:	10c01336 	bltu	r2,r3,20080f98 <_malloc_r+0x6c4>
20080f4c:	8806d3fa 	srli	r3,r17,15
20080f50:	19c01dc4 	addi	r7,r3,119
20080f54:	39cb883a 	add	r5,r7,r7
20080f58:	003ea206 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080f5c:	00c40004 	movi	r3,4096
20080f60:	003f4d06 	br	20080c98 <__flash_rwdata_start+0xffff8cc8>
20080f64:	00800044 	movi	r2,1
20080f68:	a0800115 	stw	r2,4(r20)
20080f6c:	a021883a 	mov	r16,r20
20080f70:	0007883a 	mov	r3,zero
20080f74:	003f7506 	br	20080d4c <__flash_rwdata_start+0xffff8d7c>
20080f78:	200bd0ba 	srai	r5,r4,2
20080f7c:	01800044 	movi	r6,1
20080f80:	41000117 	ldw	r4,4(r8)
20080f84:	314a983a 	sll	r5,r6,r5
20080f88:	100d883a 	mov	r6,r2
20080f8c:	2908b03a 	or	r4,r5,r4
20080f90:	41000115 	stw	r4,4(r8)
20080f94:	003f9d06 	br	20080e0c <__flash_rwdata_start+0xffff8e3c>
20080f98:	00815504 	movi	r2,1364
20080f9c:	10c01336 	bltu	r2,r3,20080fec <_malloc_r+0x718>
20080fa0:	8806d4ba 	srli	r3,r17,18
20080fa4:	19c01f04 	addi	r7,r3,124
20080fa8:	39cb883a 	add	r5,r7,r7
20080fac:	003e8d06 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080fb0:	ad400404 	addi	r21,r21,16
20080fb4:	003f1d06 	br	20080c2c <__flash_rwdata_start+0xffff8c5c>
20080fb8:	01001504 	movi	r4,84
20080fbc:	20801c36 	bltu	r4,r2,20081030 <_malloc_r+0x75c>
20080fc0:	3804d33a 	srli	r2,r7,12
20080fc4:	11001b84 	addi	r4,r2,110
20080fc8:	210b883a 	add	r5,r4,r4
20080fcc:	003f8006 	br	20080dd0 <__flash_rwdata_start+0xffff8e00>
20080fd0:	3083ffcc 	andi	r2,r6,4095
20080fd4:	103f241e 	bne	r2,zero,20080c68 <__flash_rwdata_start+0xffff8c98>
20080fd8:	99000217 	ldw	r4,8(r19)
20080fdc:	ad85883a 	add	r2,r21,r22
20080fe0:	10800054 	ori	r2,r2,1
20080fe4:	20800115 	stw	r2,4(r4)
20080fe8:	003f4a06 	br	20080d14 <__flash_rwdata_start+0xffff8d44>
20080fec:	01403f04 	movi	r5,252
20080ff0:	01c01f84 	movi	r7,126
20080ff4:	003e7b06 	br	200809e4 <__flash_rwdata_start+0xffff8a14>
20080ff8:	00c00044 	movi	r3,1
20080ffc:	002b883a 	mov	r21,zero
20081000:	003f3006 	br	20080cc4 <__flash_rwdata_start+0xffff8cf4>
20081004:	00800034 	movhi	r2,0
20081008:	10877b04 	addi	r2,r2,7660
2008100c:	15000015 	stw	r20,0(r2)
20081010:	003f1b06 	br	20080c80 <__flash_rwdata_start+0xffff8cb0>
20081014:	9009883a 	mov	r4,r18
20081018:	81400204 	addi	r5,r16,8
2008101c:	00822600 	call	20082260 <_free_r>
20081020:	00800034 	movhi	r2,0
20081024:	10879404 	addi	r2,r2,7760
20081028:	10c00017 	ldw	r3,0(r2)
2008102c:	003f3906 	br	20080d14 <__flash_rwdata_start+0xffff8d44>
20081030:	01005504 	movi	r4,340
20081034:	20800436 	bltu	r4,r2,20081048 <_malloc_r+0x774>
20081038:	3804d3fa 	srli	r2,r7,15
2008103c:	11001dc4 	addi	r4,r2,119
20081040:	210b883a 	add	r5,r4,r4
20081044:	003f6206 	br	20080dd0 <__flash_rwdata_start+0xffff8e00>
20081048:	01015504 	movi	r4,1364
2008104c:	20800436 	bltu	r4,r2,20081060 <_malloc_r+0x78c>
20081050:	3804d4ba 	srli	r2,r7,18
20081054:	11001f04 	addi	r4,r2,124
20081058:	210b883a 	add	r5,r4,r4
2008105c:	003f5c06 	br	20080dd0 <__flash_rwdata_start+0xffff8e00>
20081060:	01403f04 	movi	r5,252
20081064:	01001f84 	movi	r4,126
20081068:	003f5906 	br	20080dd0 <__flash_rwdata_start+0xffff8e00>
2008106c:	98800117 	ldw	r2,4(r19)
20081070:	003fa906 	br	20080f18 <__flash_rwdata_start+0xffff8f48>
20081074:	6007883a 	mov	r3,r12
20081078:	003ea206 	br	20080b04 <__flash_rwdata_start+0xffff8b34>

2008107c <memchr>:
2008107c:	208000cc 	andi	r2,r4,3
20081080:	280f883a 	mov	r7,r5
20081084:	10003526 	beq	r2,zero,2008115c <memchr+0xe0>
20081088:	30bfffc4 	addi	r2,r6,-1
2008108c:	30001b26 	beq	r6,zero,200810fc <memchr+0x80>
20081090:	21800003 	ldbu	r6,0(r4)
20081094:	28c03fcc 	andi	r3,r5,255
20081098:	30c01a26 	beq	r6,r3,20081104 <memchr+0x88>
2008109c:	180d883a 	mov	r6,r3
200810a0:	00000406 	br	200810b4 <memchr+0x38>
200810a4:	10001526 	beq	r2,zero,200810fc <memchr+0x80>
200810a8:	20c00003 	ldbu	r3,0(r4)
200810ac:	10bfffc4 	addi	r2,r2,-1
200810b0:	19801426 	beq	r3,r6,20081104 <memchr+0x88>
200810b4:	21000044 	addi	r4,r4,1
200810b8:	20c000cc 	andi	r3,r4,3
200810bc:	183ff91e 	bne	r3,zero,200810a4 <__flash_rwdata_start+0xffff90d4>
200810c0:	024000c4 	movi	r9,3
200810c4:	48801136 	bltu	r9,r2,2008110c <memchr+0x90>
200810c8:	10000c26 	beq	r2,zero,200810fc <memchr+0x80>
200810cc:	20c00003 	ldbu	r3,0(r4)
200810d0:	29403fcc 	andi	r5,r5,255
200810d4:	19400b26 	beq	r3,r5,20081104 <memchr+0x88>
200810d8:	20c00044 	addi	r3,r4,1
200810dc:	2085883a 	add	r2,r4,r2
200810e0:	39803fcc 	andi	r6,r7,255
200810e4:	00000306 	br	200810f4 <memchr+0x78>
200810e8:	18c00044 	addi	r3,r3,1
200810ec:	197fffc3 	ldbu	r5,-1(r3)
200810f0:	29800426 	beq	r5,r6,20081104 <memchr+0x88>
200810f4:	1809883a 	mov	r4,r3
200810f8:	18bffb1e 	bne	r3,r2,200810e8 <__flash_rwdata_start+0xffff9118>
200810fc:	0005883a 	mov	r2,zero
20081100:	f800283a 	ret
20081104:	2005883a 	mov	r2,r4
20081108:	f800283a 	ret
2008110c:	28c03fcc 	andi	r3,r5,255
20081110:	1810923a 	slli	r8,r3,8
20081114:	02ffbff4 	movhi	r11,65279
20081118:	02a02074 	movhi	r10,32897
2008111c:	40c6b03a 	or	r3,r8,r3
20081120:	1810943a 	slli	r8,r3,16
20081124:	5affbfc4 	addi	r11,r11,-257
20081128:	52a02004 	addi	r10,r10,-32640
2008112c:	40d0b03a 	or	r8,r8,r3
20081130:	20c00017 	ldw	r3,0(r4)
20081134:	40c6f03a 	xor	r3,r8,r3
20081138:	1acd883a 	add	r6,r3,r11
2008113c:	00c6303a 	nor	r3,zero,r3
20081140:	30c6703a 	and	r3,r6,r3
20081144:	1a86703a 	and	r3,r3,r10
20081148:	183fdf1e 	bne	r3,zero,200810c8 <__flash_rwdata_start+0xffff90f8>
2008114c:	10bfff04 	addi	r2,r2,-4
20081150:	21000104 	addi	r4,r4,4
20081154:	48bff636 	bltu	r9,r2,20081130 <__flash_rwdata_start+0xffff9160>
20081158:	003fdb06 	br	200810c8 <__flash_rwdata_start+0xffff90f8>
2008115c:	3005883a 	mov	r2,r6
20081160:	003fd706 	br	200810c0 <__flash_rwdata_start+0xffff90f0>

20081164 <memcpy>:
20081164:	deffff04 	addi	sp,sp,-4
20081168:	dc000015 	stw	r16,0(sp)
2008116c:	00c003c4 	movi	r3,15
20081170:	2005883a 	mov	r2,r4
20081174:	1980432e 	bgeu	r3,r6,20081284 <memcpy+0x120>
20081178:	2146b03a 	or	r3,r4,r5
2008117c:	18c000cc 	andi	r3,r3,3
20081180:	1800421e 	bne	r3,zero,2008128c <memcpy+0x128>
20081184:	343ffc04 	addi	r16,r6,-16
20081188:	8020d13a 	srli	r16,r16,4
2008118c:	28c00104 	addi	r3,r5,4
20081190:	23400104 	addi	r13,r4,4
20081194:	801e913a 	slli	r15,r16,4
20081198:	2b000204 	addi	r12,r5,8
2008119c:	22c00204 	addi	r11,r4,8
200811a0:	7bc00504 	addi	r15,r15,20
200811a4:	2a800304 	addi	r10,r5,12
200811a8:	22400304 	addi	r9,r4,12
200811ac:	2bdf883a 	add	r15,r5,r15
200811b0:	2811883a 	mov	r8,r5
200811b4:	200f883a 	mov	r7,r4
200811b8:	41000017 	ldw	r4,0(r8)
200811bc:	39c00404 	addi	r7,r7,16
200811c0:	18c00404 	addi	r3,r3,16
200811c4:	393ffc15 	stw	r4,-16(r7)
200811c8:	1bbffc17 	ldw	r14,-16(r3)
200811cc:	6b400404 	addi	r13,r13,16
200811d0:	5ac00404 	addi	r11,r11,16
200811d4:	6bbffc15 	stw	r14,-16(r13)
200811d8:	63800017 	ldw	r14,0(r12)
200811dc:	4a400404 	addi	r9,r9,16
200811e0:	42000404 	addi	r8,r8,16
200811e4:	5bbffc15 	stw	r14,-16(r11)
200811e8:	53800017 	ldw	r14,0(r10)
200811ec:	63000404 	addi	r12,r12,16
200811f0:	52800404 	addi	r10,r10,16
200811f4:	4bbffc15 	stw	r14,-16(r9)
200811f8:	1bffef1e 	bne	r3,r15,200811b8 <__flash_rwdata_start+0xffff91e8>
200811fc:	81c00044 	addi	r7,r16,1
20081200:	380e913a 	slli	r7,r7,4
20081204:	310003cc 	andi	r4,r6,15
20081208:	02c000c4 	movi	r11,3
2008120c:	11c7883a 	add	r3,r2,r7
20081210:	29cb883a 	add	r5,r5,r7
20081214:	59001f2e 	bgeu	r11,r4,20081294 <memcpy+0x130>
20081218:	1813883a 	mov	r9,r3
2008121c:	2811883a 	mov	r8,r5
20081220:	200f883a 	mov	r7,r4
20081224:	42800017 	ldw	r10,0(r8)
20081228:	4a400104 	addi	r9,r9,4
2008122c:	39ffff04 	addi	r7,r7,-4
20081230:	4abfff15 	stw	r10,-4(r9)
20081234:	42000104 	addi	r8,r8,4
20081238:	59fffa36 	bltu	r11,r7,20081224 <__flash_rwdata_start+0xffff9254>
2008123c:	213fff04 	addi	r4,r4,-4
20081240:	2008d0ba 	srli	r4,r4,2
20081244:	318000cc 	andi	r6,r6,3
20081248:	21000044 	addi	r4,r4,1
2008124c:	2109883a 	add	r4,r4,r4
20081250:	2109883a 	add	r4,r4,r4
20081254:	1907883a 	add	r3,r3,r4
20081258:	290b883a 	add	r5,r5,r4
2008125c:	30000626 	beq	r6,zero,20081278 <memcpy+0x114>
20081260:	198d883a 	add	r6,r3,r6
20081264:	29c00003 	ldbu	r7,0(r5)
20081268:	18c00044 	addi	r3,r3,1
2008126c:	29400044 	addi	r5,r5,1
20081270:	19ffffc5 	stb	r7,-1(r3)
20081274:	19bffb1e 	bne	r3,r6,20081264 <__flash_rwdata_start+0xffff9294>
20081278:	dc000017 	ldw	r16,0(sp)
2008127c:	dec00104 	addi	sp,sp,4
20081280:	f800283a 	ret
20081284:	2007883a 	mov	r3,r4
20081288:	003ff406 	br	2008125c <__flash_rwdata_start+0xffff928c>
2008128c:	2007883a 	mov	r3,r4
20081290:	003ff306 	br	20081260 <__flash_rwdata_start+0xffff9290>
20081294:	200d883a 	mov	r6,r4
20081298:	003ff006 	br	2008125c <__flash_rwdata_start+0xffff928c>

2008129c <memmove>:
2008129c:	2005883a 	mov	r2,r4
200812a0:	29000b2e 	bgeu	r5,r4,200812d0 <memmove+0x34>
200812a4:	298f883a 	add	r7,r5,r6
200812a8:	21c0092e 	bgeu	r4,r7,200812d0 <memmove+0x34>
200812ac:	2187883a 	add	r3,r4,r6
200812b0:	198bc83a 	sub	r5,r3,r6
200812b4:	30004b26 	beq	r6,zero,200813e4 <memmove+0x148>
200812b8:	39ffffc4 	addi	r7,r7,-1
200812bc:	39000003 	ldbu	r4,0(r7)
200812c0:	18ffffc4 	addi	r3,r3,-1
200812c4:	19000005 	stb	r4,0(r3)
200812c8:	197ffb1e 	bne	r3,r5,200812b8 <__flash_rwdata_start+0xffff92e8>
200812cc:	f800283a 	ret
200812d0:	00c003c4 	movi	r3,15
200812d4:	1980412e 	bgeu	r3,r6,200813dc <memmove+0x140>
200812d8:	1146b03a 	or	r3,r2,r5
200812dc:	18c000cc 	andi	r3,r3,3
200812e0:	1800411e 	bne	r3,zero,200813e8 <memmove+0x14c>
200812e4:	33fffc04 	addi	r15,r6,-16
200812e8:	781ed13a 	srli	r15,r15,4
200812ec:	28c00104 	addi	r3,r5,4
200812f0:	13400104 	addi	r13,r2,4
200812f4:	781c913a 	slli	r14,r15,4
200812f8:	2b000204 	addi	r12,r5,8
200812fc:	12c00204 	addi	r11,r2,8
20081300:	73800504 	addi	r14,r14,20
20081304:	2a800304 	addi	r10,r5,12
20081308:	12400304 	addi	r9,r2,12
2008130c:	2b9d883a 	add	r14,r5,r14
20081310:	2811883a 	mov	r8,r5
20081314:	100f883a 	mov	r7,r2
20081318:	41000017 	ldw	r4,0(r8)
2008131c:	39c00404 	addi	r7,r7,16
20081320:	18c00404 	addi	r3,r3,16
20081324:	393ffc15 	stw	r4,-16(r7)
20081328:	193ffc17 	ldw	r4,-16(r3)
2008132c:	6b400404 	addi	r13,r13,16
20081330:	5ac00404 	addi	r11,r11,16
20081334:	693ffc15 	stw	r4,-16(r13)
20081338:	61000017 	ldw	r4,0(r12)
2008133c:	4a400404 	addi	r9,r9,16
20081340:	42000404 	addi	r8,r8,16
20081344:	593ffc15 	stw	r4,-16(r11)
20081348:	51000017 	ldw	r4,0(r10)
2008134c:	63000404 	addi	r12,r12,16
20081350:	52800404 	addi	r10,r10,16
20081354:	493ffc15 	stw	r4,-16(r9)
20081358:	1bbfef1e 	bne	r3,r14,20081318 <__flash_rwdata_start+0xffff9348>
2008135c:	79000044 	addi	r4,r15,1
20081360:	2008913a 	slli	r4,r4,4
20081364:	328003cc 	andi	r10,r6,15
20081368:	02c000c4 	movi	r11,3
2008136c:	1107883a 	add	r3,r2,r4
20081370:	290b883a 	add	r5,r5,r4
20081374:	5a801e2e 	bgeu	r11,r10,200813f0 <memmove+0x154>
20081378:	1813883a 	mov	r9,r3
2008137c:	2811883a 	mov	r8,r5
20081380:	500f883a 	mov	r7,r10
20081384:	41000017 	ldw	r4,0(r8)
20081388:	4a400104 	addi	r9,r9,4
2008138c:	39ffff04 	addi	r7,r7,-4
20081390:	493fff15 	stw	r4,-4(r9)
20081394:	42000104 	addi	r8,r8,4
20081398:	59fffa36 	bltu	r11,r7,20081384 <__flash_rwdata_start+0xffff93b4>
2008139c:	513fff04 	addi	r4,r10,-4
200813a0:	2008d0ba 	srli	r4,r4,2
200813a4:	318000cc 	andi	r6,r6,3
200813a8:	21000044 	addi	r4,r4,1
200813ac:	2109883a 	add	r4,r4,r4
200813b0:	2109883a 	add	r4,r4,r4
200813b4:	1907883a 	add	r3,r3,r4
200813b8:	290b883a 	add	r5,r5,r4
200813bc:	30000926 	beq	r6,zero,200813e4 <memmove+0x148>
200813c0:	198d883a 	add	r6,r3,r6
200813c4:	29c00003 	ldbu	r7,0(r5)
200813c8:	18c00044 	addi	r3,r3,1
200813cc:	29400044 	addi	r5,r5,1
200813d0:	19ffffc5 	stb	r7,-1(r3)
200813d4:	19bffb1e 	bne	r3,r6,200813c4 <__flash_rwdata_start+0xffff93f4>
200813d8:	f800283a 	ret
200813dc:	1007883a 	mov	r3,r2
200813e0:	003ff606 	br	200813bc <__flash_rwdata_start+0xffff93ec>
200813e4:	f800283a 	ret
200813e8:	1007883a 	mov	r3,r2
200813ec:	003ff406 	br	200813c0 <__flash_rwdata_start+0xffff93f0>
200813f0:	500d883a 	mov	r6,r10
200813f4:	003ff106 	br	200813bc <__flash_rwdata_start+0xffff93ec>

200813f8 <_realloc_r>:
200813f8:	defff604 	addi	sp,sp,-40
200813fc:	dd000415 	stw	r20,16(sp)
20081400:	dc400115 	stw	r17,4(sp)
20081404:	dfc00915 	stw	ra,36(sp)
20081408:	df000815 	stw	fp,32(sp)
2008140c:	ddc00715 	stw	r23,28(sp)
20081410:	dd800615 	stw	r22,24(sp)
20081414:	dd400515 	stw	r21,20(sp)
20081418:	dcc00315 	stw	r19,12(sp)
2008141c:	dc800215 	stw	r18,8(sp)
20081420:	dc000015 	stw	r16,0(sp)
20081424:	2829883a 	mov	r20,r5
20081428:	3023883a 	mov	r17,r6
2008142c:	2800ad26 	beq	r5,zero,200816e4 <_realloc_r+0x2ec>
20081430:	2025883a 	mov	r18,r4
20081434:	00834f40 	call	200834f4 <__malloc_lock>
20081438:	a0ffff17 	ldw	r3,-4(r20)
2008143c:	043fff04 	movi	r16,-4
20081440:	890002c4 	addi	r4,r17,11
20081444:	01c00584 	movi	r7,22
20081448:	a57ffe04 	addi	r21,r20,-8
2008144c:	1c20703a 	and	r16,r3,r16
20081450:	39001d2e 	bgeu	r7,r4,200814c8 <_realloc_r+0xd0>
20081454:	05bffe04 	movi	r22,-8
20081458:	25ac703a 	and	r22,r4,r22
2008145c:	b00f883a 	mov	r7,r22
20081460:	b0006516 	blt	r22,zero,200815f8 <_realloc_r+0x200>
20081464:	b4406436 	bltu	r22,r17,200815f8 <_realloc_r+0x200>
20081468:	81c01a0e 	bge	r16,r7,200814d4 <_realloc_r+0xdc>
2008146c:	07000034 	movhi	fp,0
20081470:	e701ad04 	addi	fp,fp,1716
20081474:	e1400217 	ldw	r5,8(fp)
20081478:	ac11883a 	add	r8,r21,r16
2008147c:	2a006226 	beq	r5,r8,20081608 <_realloc_r+0x210>
20081480:	41800117 	ldw	r6,4(r8)
20081484:	027fff84 	movi	r9,-2
20081488:	3252703a 	and	r9,r6,r9
2008148c:	4253883a 	add	r9,r8,r9
20081490:	49000117 	ldw	r4,4(r9)
20081494:	2100004c 	andi	r4,r4,1
20081498:	2000281e 	bne	r4,zero,2008153c <_realloc_r+0x144>
2008149c:	00bfff04 	movi	r2,-4
200814a0:	3084703a 	and	r2,r6,r2
200814a4:	1409883a 	add	r4,r2,r16
200814a8:	21c05e16 	blt	r4,r7,20081624 <_realloc_r+0x22c>
200814ac:	40800317 	ldw	r2,12(r8)
200814b0:	41400217 	ldw	r5,8(r8)
200814b4:	a023883a 	mov	r17,r20
200814b8:	2021883a 	mov	r16,r4
200814bc:	28800315 	stw	r2,12(r5)
200814c0:	11400215 	stw	r5,8(r2)
200814c4:	00000406 	br	200814d8 <_realloc_r+0xe0>
200814c8:	01c00404 	movi	r7,16
200814cc:	382d883a 	mov	r22,r7
200814d0:	003fe406 	br	20081464 <__flash_rwdata_start+0xffff9494>
200814d4:	a023883a 	mov	r17,r20
200814d8:	858fc83a 	sub	r7,r16,r22
200814dc:	008003c4 	movi	r2,15
200814e0:	18c0004c 	andi	r3,r3,1
200814e4:	11c07236 	bltu	r2,r7,200816b0 <_realloc_r+0x2b8>
200814e8:	1c06b03a 	or	r3,r3,r16
200814ec:	a8c00115 	stw	r3,4(r21)
200814f0:	ac21883a 	add	r16,r21,r16
200814f4:	80800117 	ldw	r2,4(r16)
200814f8:	10800054 	ori	r2,r2,1
200814fc:	80800115 	stw	r2,4(r16)
20081500:	9009883a 	mov	r4,r18
20081504:	00835140 	call	20083514 <__malloc_unlock>
20081508:	8805883a 	mov	r2,r17
2008150c:	dfc00917 	ldw	ra,36(sp)
20081510:	df000817 	ldw	fp,32(sp)
20081514:	ddc00717 	ldw	r23,28(sp)
20081518:	dd800617 	ldw	r22,24(sp)
2008151c:	dd400517 	ldw	r21,20(sp)
20081520:	dd000417 	ldw	r20,16(sp)
20081524:	dcc00317 	ldw	r19,12(sp)
20081528:	dc800217 	ldw	r18,8(sp)
2008152c:	dc400117 	ldw	r17,4(sp)
20081530:	dc000017 	ldw	r16,0(sp)
20081534:	dec00a04 	addi	sp,sp,40
20081538:	f800283a 	ret
2008153c:	18c0004c 	andi	r3,r3,1
20081540:	1800081e 	bne	r3,zero,20081564 <_realloc_r+0x16c>
20081544:	a4fffe17 	ldw	r19,-8(r20)
20081548:	00bfff04 	movi	r2,-4
2008154c:	ace7c83a 	sub	r19,r21,r19
20081550:	98c00117 	ldw	r3,4(r19)
20081554:	1886703a 	and	r3,r3,r2
20081558:	98000226 	beq	r19,zero,20081564 <_realloc_r+0x16c>
2008155c:	1c2f883a 	add	r23,r3,r16
20081560:	b9c06d0e 	bge	r23,r7,20081718 <_realloc_r+0x320>
20081564:	880b883a 	mov	r5,r17
20081568:	9009883a 	mov	r4,r18
2008156c:	00808d40 	call	200808d4 <_malloc_r>
20081570:	1023883a 	mov	r17,r2
20081574:	1000ef26 	beq	r2,zero,20081934 <_realloc_r+0x53c>
20081578:	a0ffff17 	ldw	r3,-4(r20)
2008157c:	113ffe04 	addi	r4,r2,-8
20081580:	00bfff84 	movi	r2,-2
20081584:	1884703a 	and	r2,r3,r2
20081588:	a885883a 	add	r2,r21,r2
2008158c:	2080bf26 	beq	r4,r2,2008188c <_realloc_r+0x494>
20081590:	81bfff04 	addi	r6,r16,-4
20081594:	00800904 	movi	r2,36
20081598:	11808936 	bltu	r2,r6,200817c0 <_realloc_r+0x3c8>
2008159c:	00c004c4 	movi	r3,19
200815a0:	19806c2e 	bgeu	r3,r6,20081754 <_realloc_r+0x35c>
200815a4:	a0c00017 	ldw	r3,0(r20)
200815a8:	88c00015 	stw	r3,0(r17)
200815ac:	a0c00117 	ldw	r3,4(r20)
200815b0:	88c00115 	stw	r3,4(r17)
200815b4:	00c006c4 	movi	r3,27
200815b8:	1980ac36 	bltu	r3,r6,2008186c <_realloc_r+0x474>
200815bc:	88800204 	addi	r2,r17,8
200815c0:	a0c00204 	addi	r3,r20,8
200815c4:	19000017 	ldw	r4,0(r3)
200815c8:	11000015 	stw	r4,0(r2)
200815cc:	19000117 	ldw	r4,4(r3)
200815d0:	11000115 	stw	r4,4(r2)
200815d4:	18c00217 	ldw	r3,8(r3)
200815d8:	10c00215 	stw	r3,8(r2)
200815dc:	a00b883a 	mov	r5,r20
200815e0:	9009883a 	mov	r4,r18
200815e4:	00822600 	call	20082260 <_free_r>
200815e8:	9009883a 	mov	r4,r18
200815ec:	00835140 	call	20083514 <__malloc_unlock>
200815f0:	8805883a 	mov	r2,r17
200815f4:	003fc506 	br	2008150c <__flash_rwdata_start+0xffff953c>
200815f8:	00800304 	movi	r2,12
200815fc:	90800015 	stw	r2,0(r18)
20081600:	0005883a 	mov	r2,zero
20081604:	003fc106 	br	2008150c <__flash_rwdata_start+0xffff953c>
20081608:	29800117 	ldw	r6,4(r5)
2008160c:	00bfff04 	movi	r2,-4
20081610:	b1000404 	addi	r4,r22,16
20081614:	3084703a 	and	r2,r6,r2
20081618:	140d883a 	add	r6,r2,r16
2008161c:	31005b0e 	bge	r6,r4,2008178c <_realloc_r+0x394>
20081620:	2811883a 	mov	r8,r5
20081624:	18c0004c 	andi	r3,r3,1
20081628:	183fce1e 	bne	r3,zero,20081564 <__flash_rwdata_start+0xffff9594>
2008162c:	a4fffe17 	ldw	r19,-8(r20)
20081630:	00ffff04 	movi	r3,-4
20081634:	ace7c83a 	sub	r19,r21,r19
20081638:	99000117 	ldw	r4,4(r19)
2008163c:	20c6703a 	and	r3,r4,r3
20081640:	403fc526 	beq	r8,zero,20081558 <__flash_rwdata_start+0xffff9588>
20081644:	1c2f883a 	add	r23,r3,r16
20081648:	b8af883a 	add	r23,r23,r2
2008164c:	41406026 	beq	r8,r5,200817d0 <_realloc_r+0x3d8>
20081650:	b9ffc116 	blt	r23,r7,20081558 <__flash_rwdata_start+0xffff9588>
20081654:	40c00217 	ldw	r3,8(r8)
20081658:	40800317 	ldw	r2,12(r8)
2008165c:	81bfff04 	addi	r6,r16,-4
20081660:	01000904 	movi	r4,36
20081664:	18800315 	stw	r2,12(r3)
20081668:	10c00215 	stw	r3,8(r2)
2008166c:	99400217 	ldw	r5,8(r19)
20081670:	98c00317 	ldw	r3,12(r19)
20081674:	9c400204 	addi	r17,r19,8
20081678:	28c00315 	stw	r3,12(r5)
2008167c:	19400215 	stw	r5,8(r3)
20081680:	21802d36 	bltu	r4,r6,20081738 <_realloc_r+0x340>
20081684:	008004c4 	movi	r2,19
20081688:	1180352e 	bgeu	r2,r6,20081760 <_realloc_r+0x368>
2008168c:	a0800017 	ldw	r2,0(r20)
20081690:	98800215 	stw	r2,8(r19)
20081694:	a0800117 	ldw	r2,4(r20)
20081698:	98800315 	stw	r2,12(r19)
2008169c:	008006c4 	movi	r2,27
200816a0:	11808036 	bltu	r2,r6,200818a4 <_realloc_r+0x4ac>
200816a4:	98c00404 	addi	r3,r19,16
200816a8:	a5000204 	addi	r20,r20,8
200816ac:	00002d06 	br	20081764 <_realloc_r+0x36c>
200816b0:	1d86b03a 	or	r3,r3,r22
200816b4:	ad8b883a 	add	r5,r21,r22
200816b8:	a8c00115 	stw	r3,4(r21)
200816bc:	38800054 	ori	r2,r7,1
200816c0:	28800115 	stw	r2,4(r5)
200816c4:	29cf883a 	add	r7,r5,r7
200816c8:	38800117 	ldw	r2,4(r7)
200816cc:	9009883a 	mov	r4,r18
200816d0:	29400204 	addi	r5,r5,8
200816d4:	10800054 	ori	r2,r2,1
200816d8:	38800115 	stw	r2,4(r7)
200816dc:	00822600 	call	20082260 <_free_r>
200816e0:	003f8706 	br	20081500 <__flash_rwdata_start+0xffff9530>
200816e4:	300b883a 	mov	r5,r6
200816e8:	dfc00917 	ldw	ra,36(sp)
200816ec:	df000817 	ldw	fp,32(sp)
200816f0:	ddc00717 	ldw	r23,28(sp)
200816f4:	dd800617 	ldw	r22,24(sp)
200816f8:	dd400517 	ldw	r21,20(sp)
200816fc:	dd000417 	ldw	r20,16(sp)
20081700:	dcc00317 	ldw	r19,12(sp)
20081704:	dc800217 	ldw	r18,8(sp)
20081708:	dc400117 	ldw	r17,4(sp)
2008170c:	dc000017 	ldw	r16,0(sp)
20081710:	dec00a04 	addi	sp,sp,40
20081714:	00808d41 	jmpi	200808d4 <_malloc_r>
20081718:	98800317 	ldw	r2,12(r19)
2008171c:	98c00217 	ldw	r3,8(r19)
20081720:	81bfff04 	addi	r6,r16,-4
20081724:	01000904 	movi	r4,36
20081728:	18800315 	stw	r2,12(r3)
2008172c:	10c00215 	stw	r3,8(r2)
20081730:	9c400204 	addi	r17,r19,8
20081734:	21bfd32e 	bgeu	r4,r6,20081684 <__flash_rwdata_start+0xffff96b4>
20081738:	8809883a 	mov	r4,r17
2008173c:	a00b883a 	mov	r5,r20
20081740:	008129c0 	call	2008129c <memmove>
20081744:	98c00117 	ldw	r3,4(r19)
20081748:	b821883a 	mov	r16,r23
2008174c:	982b883a 	mov	r21,r19
20081750:	003f6106 	br	200814d8 <__flash_rwdata_start+0xffff9508>
20081754:	8805883a 	mov	r2,r17
20081758:	a007883a 	mov	r3,r20
2008175c:	003f9906 	br	200815c4 <__flash_rwdata_start+0xffff95f4>
20081760:	8807883a 	mov	r3,r17
20081764:	a0800017 	ldw	r2,0(r20)
20081768:	b821883a 	mov	r16,r23
2008176c:	982b883a 	mov	r21,r19
20081770:	18800015 	stw	r2,0(r3)
20081774:	a0800117 	ldw	r2,4(r20)
20081778:	18800115 	stw	r2,4(r3)
2008177c:	a0800217 	ldw	r2,8(r20)
20081780:	18800215 	stw	r2,8(r3)
20081784:	98c00117 	ldw	r3,4(r19)
20081788:	003f5306 	br	200814d8 <__flash_rwdata_start+0xffff9508>
2008178c:	adab883a 	add	r21,r21,r22
20081790:	3585c83a 	sub	r2,r6,r22
20081794:	e5400215 	stw	r21,8(fp)
20081798:	10800054 	ori	r2,r2,1
2008179c:	a8800115 	stw	r2,4(r21)
200817a0:	a0bfff17 	ldw	r2,-4(r20)
200817a4:	9009883a 	mov	r4,r18
200817a8:	1080004c 	andi	r2,r2,1
200817ac:	b0acb03a 	or	r22,r22,r2
200817b0:	a5bfff15 	stw	r22,-4(r20)
200817b4:	00835140 	call	20083514 <__malloc_unlock>
200817b8:	a005883a 	mov	r2,r20
200817bc:	003f5306 	br	2008150c <__flash_rwdata_start+0xffff953c>
200817c0:	8809883a 	mov	r4,r17
200817c4:	a00b883a 	mov	r5,r20
200817c8:	008129c0 	call	2008129c <memmove>
200817cc:	003f8306 	br	200815dc <__flash_rwdata_start+0xffff960c>
200817d0:	b0800404 	addi	r2,r22,16
200817d4:	b8bf6016 	blt	r23,r2,20081558 <__flash_rwdata_start+0xffff9588>
200817d8:	98800317 	ldw	r2,12(r19)
200817dc:	98c00217 	ldw	r3,8(r19)
200817e0:	81bfff04 	addi	r6,r16,-4
200817e4:	01000904 	movi	r4,36
200817e8:	18800315 	stw	r2,12(r3)
200817ec:	10c00215 	stw	r3,8(r2)
200817f0:	9c400204 	addi	r17,r19,8
200817f4:	21804336 	bltu	r4,r6,20081904 <_realloc_r+0x50c>
200817f8:	008004c4 	movi	r2,19
200817fc:	11803f2e 	bgeu	r2,r6,200818fc <_realloc_r+0x504>
20081800:	a0800017 	ldw	r2,0(r20)
20081804:	98800215 	stw	r2,8(r19)
20081808:	a0800117 	ldw	r2,4(r20)
2008180c:	98800315 	stw	r2,12(r19)
20081810:	008006c4 	movi	r2,27
20081814:	11803f36 	bltu	r2,r6,20081914 <_realloc_r+0x51c>
20081818:	98800404 	addi	r2,r19,16
2008181c:	a5000204 	addi	r20,r20,8
20081820:	a0c00017 	ldw	r3,0(r20)
20081824:	10c00015 	stw	r3,0(r2)
20081828:	a0c00117 	ldw	r3,4(r20)
2008182c:	10c00115 	stw	r3,4(r2)
20081830:	a0c00217 	ldw	r3,8(r20)
20081834:	10c00215 	stw	r3,8(r2)
20081838:	9d87883a 	add	r3,r19,r22
2008183c:	bd85c83a 	sub	r2,r23,r22
20081840:	e0c00215 	stw	r3,8(fp)
20081844:	10800054 	ori	r2,r2,1
20081848:	18800115 	stw	r2,4(r3)
2008184c:	98800117 	ldw	r2,4(r19)
20081850:	9009883a 	mov	r4,r18
20081854:	1080004c 	andi	r2,r2,1
20081858:	b0acb03a 	or	r22,r22,r2
2008185c:	9d800115 	stw	r22,4(r19)
20081860:	00835140 	call	20083514 <__malloc_unlock>
20081864:	8805883a 	mov	r2,r17
20081868:	003f2806 	br	2008150c <__flash_rwdata_start+0xffff953c>
2008186c:	a0c00217 	ldw	r3,8(r20)
20081870:	88c00215 	stw	r3,8(r17)
20081874:	a0c00317 	ldw	r3,12(r20)
20081878:	88c00315 	stw	r3,12(r17)
2008187c:	30801126 	beq	r6,r2,200818c4 <_realloc_r+0x4cc>
20081880:	88800404 	addi	r2,r17,16
20081884:	a0c00404 	addi	r3,r20,16
20081888:	003f4e06 	br	200815c4 <__flash_rwdata_start+0xffff95f4>
2008188c:	893fff17 	ldw	r4,-4(r17)
20081890:	00bfff04 	movi	r2,-4
20081894:	a023883a 	mov	r17,r20
20081898:	2084703a 	and	r2,r4,r2
2008189c:	80a1883a 	add	r16,r16,r2
200818a0:	003f0d06 	br	200814d8 <__flash_rwdata_start+0xffff9508>
200818a4:	a0800217 	ldw	r2,8(r20)
200818a8:	98800415 	stw	r2,16(r19)
200818ac:	a0800317 	ldw	r2,12(r20)
200818b0:	98800515 	stw	r2,20(r19)
200818b4:	31000a26 	beq	r6,r4,200818e0 <_realloc_r+0x4e8>
200818b8:	98c00604 	addi	r3,r19,24
200818bc:	a5000404 	addi	r20,r20,16
200818c0:	003fa806 	br	20081764 <__flash_rwdata_start+0xffff9794>
200818c4:	a1000417 	ldw	r4,16(r20)
200818c8:	88800604 	addi	r2,r17,24
200818cc:	a0c00604 	addi	r3,r20,24
200818d0:	89000415 	stw	r4,16(r17)
200818d4:	a1000517 	ldw	r4,20(r20)
200818d8:	89000515 	stw	r4,20(r17)
200818dc:	003f3906 	br	200815c4 <__flash_rwdata_start+0xffff95f4>
200818e0:	a0800417 	ldw	r2,16(r20)
200818e4:	a5000604 	addi	r20,r20,24
200818e8:	98c00804 	addi	r3,r19,32
200818ec:	98800615 	stw	r2,24(r19)
200818f0:	a0bfff17 	ldw	r2,-4(r20)
200818f4:	98800715 	stw	r2,28(r19)
200818f8:	003f9a06 	br	20081764 <__flash_rwdata_start+0xffff9794>
200818fc:	8805883a 	mov	r2,r17
20081900:	003fc706 	br	20081820 <__flash_rwdata_start+0xffff9850>
20081904:	8809883a 	mov	r4,r17
20081908:	a00b883a 	mov	r5,r20
2008190c:	008129c0 	call	2008129c <memmove>
20081910:	003fc906 	br	20081838 <__flash_rwdata_start+0xffff9868>
20081914:	a0800217 	ldw	r2,8(r20)
20081918:	98800415 	stw	r2,16(r19)
2008191c:	a0800317 	ldw	r2,12(r20)
20081920:	98800515 	stw	r2,20(r19)
20081924:	31000726 	beq	r6,r4,20081944 <_realloc_r+0x54c>
20081928:	98800604 	addi	r2,r19,24
2008192c:	a5000404 	addi	r20,r20,16
20081930:	003fbb06 	br	20081820 <__flash_rwdata_start+0xffff9850>
20081934:	9009883a 	mov	r4,r18
20081938:	00835140 	call	20083514 <__malloc_unlock>
2008193c:	0005883a 	mov	r2,zero
20081940:	003ef206 	br	2008150c <__flash_rwdata_start+0xffff953c>
20081944:	a0c00417 	ldw	r3,16(r20)
20081948:	a5000604 	addi	r20,r20,24
2008194c:	98800804 	addi	r2,r19,32
20081950:	98c00615 	stw	r3,24(r19)
20081954:	a0ffff17 	ldw	r3,-4(r20)
20081958:	98c00715 	stw	r3,28(r19)
2008195c:	003fb006 	br	20081820 <__flash_rwdata_start+0xffff9850>

20081960 <_sbrk_r>:
20081960:	defffd04 	addi	sp,sp,-12
20081964:	dc000015 	stw	r16,0(sp)
20081968:	04000034 	movhi	r16,0
2008196c:	dc400115 	stw	r17,4(sp)
20081970:	84078c04 	addi	r16,r16,7728
20081974:	2023883a 	mov	r17,r4
20081978:	2809883a 	mov	r4,r5
2008197c:	dfc00215 	stw	ra,8(sp)
20081980:	80000015 	stw	zero,0(r16)
20081984:	00836e00 	call	200836e0 <sbrk>
20081988:	00ffffc4 	movi	r3,-1
2008198c:	10c00526 	beq	r2,r3,200819a4 <_sbrk_r+0x44>
20081990:	dfc00217 	ldw	ra,8(sp)
20081994:	dc400117 	ldw	r17,4(sp)
20081998:	dc000017 	ldw	r16,0(sp)
2008199c:	dec00304 	addi	sp,sp,12
200819a0:	f800283a 	ret
200819a4:	80c00017 	ldw	r3,0(r16)
200819a8:	183ff926 	beq	r3,zero,20081990 <__flash_rwdata_start+0xffff99c0>
200819ac:	88c00015 	stw	r3,0(r17)
200819b0:	003ff706 	br	20081990 <__flash_rwdata_start+0xffff99c0>

200819b4 <__swsetup_r>:
200819b4:	00800034 	movhi	r2,0
200819b8:	defffd04 	addi	sp,sp,-12
200819bc:	10877a04 	addi	r2,r2,7656
200819c0:	dc400115 	stw	r17,4(sp)
200819c4:	2023883a 	mov	r17,r4
200819c8:	11000017 	ldw	r4,0(r2)
200819cc:	dc000015 	stw	r16,0(sp)
200819d0:	dfc00215 	stw	ra,8(sp)
200819d4:	2821883a 	mov	r16,r5
200819d8:	20000226 	beq	r4,zero,200819e4 <__swsetup_r+0x30>
200819dc:	20c00e17 	ldw	r3,56(r4)
200819e0:	18003126 	beq	r3,zero,20081aa8 <__swsetup_r+0xf4>
200819e4:	8080030b 	ldhu	r2,12(r16)
200819e8:	10c0020c 	andi	r3,r2,8
200819ec:	100d883a 	mov	r6,r2
200819f0:	18000f26 	beq	r3,zero,20081a30 <__swsetup_r+0x7c>
200819f4:	80c00417 	ldw	r3,16(r16)
200819f8:	18001526 	beq	r3,zero,20081a50 <__swsetup_r+0x9c>
200819fc:	1100004c 	andi	r4,r2,1
20081a00:	20001c1e 	bne	r4,zero,20081a74 <__swsetup_r+0xc0>
20081a04:	1080008c 	andi	r2,r2,2
20081a08:	1000291e 	bne	r2,zero,20081ab0 <__swsetup_r+0xfc>
20081a0c:	80800517 	ldw	r2,20(r16)
20081a10:	80800215 	stw	r2,8(r16)
20081a14:	18001c26 	beq	r3,zero,20081a88 <__swsetup_r+0xd4>
20081a18:	0005883a 	mov	r2,zero
20081a1c:	dfc00217 	ldw	ra,8(sp)
20081a20:	dc400117 	ldw	r17,4(sp)
20081a24:	dc000017 	ldw	r16,0(sp)
20081a28:	dec00304 	addi	sp,sp,12
20081a2c:	f800283a 	ret
20081a30:	3080040c 	andi	r2,r6,16
20081a34:	10002e26 	beq	r2,zero,20081af0 <__swsetup_r+0x13c>
20081a38:	3080010c 	andi	r2,r6,4
20081a3c:	10001e1e 	bne	r2,zero,20081ab8 <__swsetup_r+0x104>
20081a40:	80c00417 	ldw	r3,16(r16)
20081a44:	30800214 	ori	r2,r6,8
20081a48:	8080030d 	sth	r2,12(r16)
20081a4c:	183feb1e 	bne	r3,zero,200819fc <__flash_rwdata_start+0xffff9a2c>
20081a50:	1140a00c 	andi	r5,r2,640
20081a54:	01008004 	movi	r4,512
20081a58:	293fe826 	beq	r5,r4,200819fc <__flash_rwdata_start+0xffff9a2c>
20081a5c:	8809883a 	mov	r4,r17
20081a60:	800b883a 	mov	r5,r16
20081a64:	00826d80 	call	200826d8 <__smakebuf_r>
20081a68:	8080030b 	ldhu	r2,12(r16)
20081a6c:	80c00417 	ldw	r3,16(r16)
20081a70:	003fe206 	br	200819fc <__flash_rwdata_start+0xffff9a2c>
20081a74:	80800517 	ldw	r2,20(r16)
20081a78:	80000215 	stw	zero,8(r16)
20081a7c:	0085c83a 	sub	r2,zero,r2
20081a80:	80800615 	stw	r2,24(r16)
20081a84:	183fe41e 	bne	r3,zero,20081a18 <__flash_rwdata_start+0xffff9a48>
20081a88:	80c0030b 	ldhu	r3,12(r16)
20081a8c:	0005883a 	mov	r2,zero
20081a90:	1900200c 	andi	r4,r3,128
20081a94:	203fe126 	beq	r4,zero,20081a1c <__flash_rwdata_start+0xffff9a4c>
20081a98:	18c01014 	ori	r3,r3,64
20081a9c:	80c0030d 	sth	r3,12(r16)
20081aa0:	00bfffc4 	movi	r2,-1
20081aa4:	003fdd06 	br	20081a1c <__flash_rwdata_start+0xffff9a4c>
20081aa8:	00820ec0 	call	200820ec <__sinit>
20081aac:	003fcd06 	br	200819e4 <__flash_rwdata_start+0xffff9a14>
20081ab0:	0005883a 	mov	r2,zero
20081ab4:	003fd606 	br	20081a10 <__flash_rwdata_start+0xffff9a40>
20081ab8:	81400c17 	ldw	r5,48(r16)
20081abc:	28000626 	beq	r5,zero,20081ad8 <__swsetup_r+0x124>
20081ac0:	80801004 	addi	r2,r16,64
20081ac4:	28800326 	beq	r5,r2,20081ad4 <__swsetup_r+0x120>
20081ac8:	8809883a 	mov	r4,r17
20081acc:	00822600 	call	20082260 <_free_r>
20081ad0:	8180030b 	ldhu	r6,12(r16)
20081ad4:	80000c15 	stw	zero,48(r16)
20081ad8:	80c00417 	ldw	r3,16(r16)
20081adc:	00bff6c4 	movi	r2,-37
20081ae0:	118c703a 	and	r6,r2,r6
20081ae4:	80000115 	stw	zero,4(r16)
20081ae8:	80c00015 	stw	r3,0(r16)
20081aec:	003fd506 	br	20081a44 <__flash_rwdata_start+0xffff9a74>
20081af0:	00800244 	movi	r2,9
20081af4:	88800015 	stw	r2,0(r17)
20081af8:	30801014 	ori	r2,r6,64
20081afc:	8080030d 	sth	r2,12(r16)
20081b00:	00bfffc4 	movi	r2,-1
20081b04:	003fc506 	br	20081a1c <__flash_rwdata_start+0xffff9a4c>

20081b08 <__sflush_r>:
20081b08:	2880030b 	ldhu	r2,12(r5)
20081b0c:	defffb04 	addi	sp,sp,-20
20081b10:	dcc00315 	stw	r19,12(sp)
20081b14:	dc400115 	stw	r17,4(sp)
20081b18:	dfc00415 	stw	ra,16(sp)
20081b1c:	dc800215 	stw	r18,8(sp)
20081b20:	dc000015 	stw	r16,0(sp)
20081b24:	10c0020c 	andi	r3,r2,8
20081b28:	2823883a 	mov	r17,r5
20081b2c:	2027883a 	mov	r19,r4
20081b30:	1800311e 	bne	r3,zero,20081bf8 <__sflush_r+0xf0>
20081b34:	28c00117 	ldw	r3,4(r5)
20081b38:	10820014 	ori	r2,r2,2048
20081b3c:	2880030d 	sth	r2,12(r5)
20081b40:	00c04b0e 	bge	zero,r3,20081c70 <__sflush_r+0x168>
20081b44:	8a000a17 	ldw	r8,40(r17)
20081b48:	40002326 	beq	r8,zero,20081bd8 <__sflush_r+0xd0>
20081b4c:	9c000017 	ldw	r16,0(r19)
20081b50:	10c4000c 	andi	r3,r2,4096
20081b54:	98000015 	stw	zero,0(r19)
20081b58:	18004826 	beq	r3,zero,20081c7c <__sflush_r+0x174>
20081b5c:	89801417 	ldw	r6,80(r17)
20081b60:	10c0010c 	andi	r3,r2,4
20081b64:	18000626 	beq	r3,zero,20081b80 <__sflush_r+0x78>
20081b68:	88c00117 	ldw	r3,4(r17)
20081b6c:	88800c17 	ldw	r2,48(r17)
20081b70:	30cdc83a 	sub	r6,r6,r3
20081b74:	10000226 	beq	r2,zero,20081b80 <__sflush_r+0x78>
20081b78:	88800f17 	ldw	r2,60(r17)
20081b7c:	308dc83a 	sub	r6,r6,r2
20081b80:	89400717 	ldw	r5,28(r17)
20081b84:	9809883a 	mov	r4,r19
20081b88:	000f883a 	mov	r7,zero
20081b8c:	403ee83a 	callr	r8
20081b90:	00ffffc4 	movi	r3,-1
20081b94:	10c04426 	beq	r2,r3,20081ca8 <__sflush_r+0x1a0>
20081b98:	88c0030b 	ldhu	r3,12(r17)
20081b9c:	89000417 	ldw	r4,16(r17)
20081ba0:	88000115 	stw	zero,4(r17)
20081ba4:	197dffcc 	andi	r5,r3,63487
20081ba8:	8940030d 	sth	r5,12(r17)
20081bac:	89000015 	stw	r4,0(r17)
20081bb0:	18c4000c 	andi	r3,r3,4096
20081bb4:	18002c1e 	bne	r3,zero,20081c68 <__sflush_r+0x160>
20081bb8:	89400c17 	ldw	r5,48(r17)
20081bbc:	9c000015 	stw	r16,0(r19)
20081bc0:	28000526 	beq	r5,zero,20081bd8 <__sflush_r+0xd0>
20081bc4:	88801004 	addi	r2,r17,64
20081bc8:	28800226 	beq	r5,r2,20081bd4 <__sflush_r+0xcc>
20081bcc:	9809883a 	mov	r4,r19
20081bd0:	00822600 	call	20082260 <_free_r>
20081bd4:	88000c15 	stw	zero,48(r17)
20081bd8:	0005883a 	mov	r2,zero
20081bdc:	dfc00417 	ldw	ra,16(sp)
20081be0:	dcc00317 	ldw	r19,12(sp)
20081be4:	dc800217 	ldw	r18,8(sp)
20081be8:	dc400117 	ldw	r17,4(sp)
20081bec:	dc000017 	ldw	r16,0(sp)
20081bf0:	dec00504 	addi	sp,sp,20
20081bf4:	f800283a 	ret
20081bf8:	2c800417 	ldw	r18,16(r5)
20081bfc:	903ff626 	beq	r18,zero,20081bd8 <__flash_rwdata_start+0xffff9c08>
20081c00:	2c000017 	ldw	r16,0(r5)
20081c04:	108000cc 	andi	r2,r2,3
20081c08:	2c800015 	stw	r18,0(r5)
20081c0c:	84a1c83a 	sub	r16,r16,r18
20081c10:	1000131e 	bne	r2,zero,20081c60 <__sflush_r+0x158>
20081c14:	28800517 	ldw	r2,20(r5)
20081c18:	88800215 	stw	r2,8(r17)
20081c1c:	04000316 	blt	zero,r16,20081c2c <__sflush_r+0x124>
20081c20:	003fed06 	br	20081bd8 <__flash_rwdata_start+0xffff9c08>
20081c24:	90a5883a 	add	r18,r18,r2
20081c28:	043feb0e 	bge	zero,r16,20081bd8 <__flash_rwdata_start+0xffff9c08>
20081c2c:	88800917 	ldw	r2,36(r17)
20081c30:	89400717 	ldw	r5,28(r17)
20081c34:	800f883a 	mov	r7,r16
20081c38:	900d883a 	mov	r6,r18
20081c3c:	9809883a 	mov	r4,r19
20081c40:	103ee83a 	callr	r2
20081c44:	80a1c83a 	sub	r16,r16,r2
20081c48:	00bff616 	blt	zero,r2,20081c24 <__flash_rwdata_start+0xffff9c54>
20081c4c:	88c0030b 	ldhu	r3,12(r17)
20081c50:	00bfffc4 	movi	r2,-1
20081c54:	18c01014 	ori	r3,r3,64
20081c58:	88c0030d 	sth	r3,12(r17)
20081c5c:	003fdf06 	br	20081bdc <__flash_rwdata_start+0xffff9c0c>
20081c60:	0005883a 	mov	r2,zero
20081c64:	003fec06 	br	20081c18 <__flash_rwdata_start+0xffff9c48>
20081c68:	88801415 	stw	r2,80(r17)
20081c6c:	003fd206 	br	20081bb8 <__flash_rwdata_start+0xffff9be8>
20081c70:	28c00f17 	ldw	r3,60(r5)
20081c74:	00ffb316 	blt	zero,r3,20081b44 <__flash_rwdata_start+0xffff9b74>
20081c78:	003fd706 	br	20081bd8 <__flash_rwdata_start+0xffff9c08>
20081c7c:	89400717 	ldw	r5,28(r17)
20081c80:	000d883a 	mov	r6,zero
20081c84:	9809883a 	mov	r4,r19
20081c88:	01c00044 	movi	r7,1
20081c8c:	403ee83a 	callr	r8
20081c90:	100d883a 	mov	r6,r2
20081c94:	00bfffc4 	movi	r2,-1
20081c98:	30801426 	beq	r6,r2,20081cec <__sflush_r+0x1e4>
20081c9c:	8880030b 	ldhu	r2,12(r17)
20081ca0:	8a000a17 	ldw	r8,40(r17)
20081ca4:	003fae06 	br	20081b60 <__flash_rwdata_start+0xffff9b90>
20081ca8:	98c00017 	ldw	r3,0(r19)
20081cac:	183fba26 	beq	r3,zero,20081b98 <__flash_rwdata_start+0xffff9bc8>
20081cb0:	01000744 	movi	r4,29
20081cb4:	19000626 	beq	r3,r4,20081cd0 <__sflush_r+0x1c8>
20081cb8:	01000584 	movi	r4,22
20081cbc:	19000426 	beq	r3,r4,20081cd0 <__sflush_r+0x1c8>
20081cc0:	88c0030b 	ldhu	r3,12(r17)
20081cc4:	18c01014 	ori	r3,r3,64
20081cc8:	88c0030d 	sth	r3,12(r17)
20081ccc:	003fc306 	br	20081bdc <__flash_rwdata_start+0xffff9c0c>
20081cd0:	8880030b 	ldhu	r2,12(r17)
20081cd4:	88c00417 	ldw	r3,16(r17)
20081cd8:	88000115 	stw	zero,4(r17)
20081cdc:	10bdffcc 	andi	r2,r2,63487
20081ce0:	8880030d 	sth	r2,12(r17)
20081ce4:	88c00015 	stw	r3,0(r17)
20081ce8:	003fb306 	br	20081bb8 <__flash_rwdata_start+0xffff9be8>
20081cec:	98800017 	ldw	r2,0(r19)
20081cf0:	103fea26 	beq	r2,zero,20081c9c <__flash_rwdata_start+0xffff9ccc>
20081cf4:	00c00744 	movi	r3,29
20081cf8:	10c00226 	beq	r2,r3,20081d04 <__sflush_r+0x1fc>
20081cfc:	00c00584 	movi	r3,22
20081d00:	10ffd21e 	bne	r2,r3,20081c4c <__flash_rwdata_start+0xffff9c7c>
20081d04:	9c000015 	stw	r16,0(r19)
20081d08:	0005883a 	mov	r2,zero
20081d0c:	003fb306 	br	20081bdc <__flash_rwdata_start+0xffff9c0c>

20081d10 <_fflush_r>:
20081d10:	defffd04 	addi	sp,sp,-12
20081d14:	dc000115 	stw	r16,4(sp)
20081d18:	dfc00215 	stw	ra,8(sp)
20081d1c:	2021883a 	mov	r16,r4
20081d20:	20000226 	beq	r4,zero,20081d2c <_fflush_r+0x1c>
20081d24:	20800e17 	ldw	r2,56(r4)
20081d28:	10000c26 	beq	r2,zero,20081d5c <_fflush_r+0x4c>
20081d2c:	2880030f 	ldh	r2,12(r5)
20081d30:	1000051e 	bne	r2,zero,20081d48 <_fflush_r+0x38>
20081d34:	0005883a 	mov	r2,zero
20081d38:	dfc00217 	ldw	ra,8(sp)
20081d3c:	dc000117 	ldw	r16,4(sp)
20081d40:	dec00304 	addi	sp,sp,12
20081d44:	f800283a 	ret
20081d48:	8009883a 	mov	r4,r16
20081d4c:	dfc00217 	ldw	ra,8(sp)
20081d50:	dc000117 	ldw	r16,4(sp)
20081d54:	dec00304 	addi	sp,sp,12
20081d58:	0081b081 	jmpi	20081b08 <__sflush_r>
20081d5c:	d9400015 	stw	r5,0(sp)
20081d60:	00820ec0 	call	200820ec <__sinit>
20081d64:	d9400017 	ldw	r5,0(sp)
20081d68:	003ff006 	br	20081d2c <__flash_rwdata_start+0xffff9d5c>

20081d6c <fflush>:
20081d6c:	20000526 	beq	r4,zero,20081d84 <fflush+0x18>
20081d70:	00800034 	movhi	r2,0
20081d74:	10877a04 	addi	r2,r2,7656
20081d78:	200b883a 	mov	r5,r4
20081d7c:	11000017 	ldw	r4,0(r2)
20081d80:	0081d101 	jmpi	20081d10 <_fflush_r>
20081d84:	00800034 	movhi	r2,0
20081d88:	10877904 	addi	r2,r2,7652
20081d8c:	11000017 	ldw	r4,0(r2)
20081d90:	01480234 	movhi	r5,8200
20081d94:	29474404 	addi	r5,r5,7440
20081d98:	00826141 	jmpi	20082614 <_fwalk_reent>

20081d9c <__fp_lock>:
20081d9c:	0005883a 	mov	r2,zero
20081da0:	f800283a 	ret

20081da4 <__fp_unlock>:
20081da4:	0005883a 	mov	r2,zero
20081da8:	f800283a 	ret

20081dac <_cleanup_r>:
20081dac:	01480234 	movhi	r5,8200
20081db0:	294ae804 	addi	r5,r5,11168
20081db4:	00826141 	jmpi	20082614 <_fwalk_reent>

20081db8 <__sinit.part.1>:
20081db8:	defff704 	addi	sp,sp,-36
20081dbc:	00c80234 	movhi	r3,8200
20081dc0:	dfc00815 	stw	ra,32(sp)
20081dc4:	ddc00715 	stw	r23,28(sp)
20081dc8:	dd800615 	stw	r22,24(sp)
20081dcc:	dd400515 	stw	r21,20(sp)
20081dd0:	dd000415 	stw	r20,16(sp)
20081dd4:	dcc00315 	stw	r19,12(sp)
20081dd8:	dc800215 	stw	r18,8(sp)
20081ddc:	dc400115 	stw	r17,4(sp)
20081de0:	dc000015 	stw	r16,0(sp)
20081de4:	18c76b04 	addi	r3,r3,7596
20081de8:	24000117 	ldw	r16,4(r4)
20081dec:	20c00f15 	stw	r3,60(r4)
20081df0:	2080bb04 	addi	r2,r4,748
20081df4:	00c000c4 	movi	r3,3
20081df8:	20c0b915 	stw	r3,740(r4)
20081dfc:	2080ba15 	stw	r2,744(r4)
20081e00:	2000b815 	stw	zero,736(r4)
20081e04:	05c00204 	movi	r23,8
20081e08:	00800104 	movi	r2,4
20081e0c:	2025883a 	mov	r18,r4
20081e10:	b80d883a 	mov	r6,r23
20081e14:	81001704 	addi	r4,r16,92
20081e18:	000b883a 	mov	r5,zero
20081e1c:	80000015 	stw	zero,0(r16)
20081e20:	80000115 	stw	zero,4(r16)
20081e24:	80000215 	stw	zero,8(r16)
20081e28:	8080030d 	sth	r2,12(r16)
20081e2c:	80001915 	stw	zero,100(r16)
20081e30:	8000038d 	sth	zero,14(r16)
20081e34:	80000415 	stw	zero,16(r16)
20081e38:	80000515 	stw	zero,20(r16)
20081e3c:	80000615 	stw	zero,24(r16)
20081e40:	00828900 	call	20082890 <memset>
20081e44:	05880234 	movhi	r22,8200
20081e48:	94400217 	ldw	r17,8(r18)
20081e4c:	05480234 	movhi	r21,8200
20081e50:	05080234 	movhi	r20,8200
20081e54:	04c80234 	movhi	r19,8200
20081e58:	b58a6d04 	addi	r22,r22,10676
20081e5c:	ad4a8404 	addi	r21,r21,10768
20081e60:	a50aa304 	addi	r20,r20,10892
20081e64:	9ccaba04 	addi	r19,r19,10984
20081e68:	85800815 	stw	r22,32(r16)
20081e6c:	85400915 	stw	r21,36(r16)
20081e70:	85000a15 	stw	r20,40(r16)
20081e74:	84c00b15 	stw	r19,44(r16)
20081e78:	84000715 	stw	r16,28(r16)
20081e7c:	00800284 	movi	r2,10
20081e80:	8880030d 	sth	r2,12(r17)
20081e84:	00800044 	movi	r2,1
20081e88:	89001704 	addi	r4,r17,92
20081e8c:	b80d883a 	mov	r6,r23
20081e90:	000b883a 	mov	r5,zero
20081e94:	88000015 	stw	zero,0(r17)
20081e98:	88000115 	stw	zero,4(r17)
20081e9c:	88000215 	stw	zero,8(r17)
20081ea0:	88001915 	stw	zero,100(r17)
20081ea4:	8880038d 	sth	r2,14(r17)
20081ea8:	88000415 	stw	zero,16(r17)
20081eac:	88000515 	stw	zero,20(r17)
20081eb0:	88000615 	stw	zero,24(r17)
20081eb4:	00828900 	call	20082890 <memset>
20081eb8:	94000317 	ldw	r16,12(r18)
20081ebc:	00800484 	movi	r2,18
20081ec0:	8c400715 	stw	r17,28(r17)
20081ec4:	8d800815 	stw	r22,32(r17)
20081ec8:	8d400915 	stw	r21,36(r17)
20081ecc:	8d000a15 	stw	r20,40(r17)
20081ed0:	8cc00b15 	stw	r19,44(r17)
20081ed4:	8080030d 	sth	r2,12(r16)
20081ed8:	00800084 	movi	r2,2
20081edc:	80000015 	stw	zero,0(r16)
20081ee0:	80000115 	stw	zero,4(r16)
20081ee4:	80000215 	stw	zero,8(r16)
20081ee8:	80001915 	stw	zero,100(r16)
20081eec:	8080038d 	sth	r2,14(r16)
20081ef0:	80000415 	stw	zero,16(r16)
20081ef4:	80000515 	stw	zero,20(r16)
20081ef8:	80000615 	stw	zero,24(r16)
20081efc:	81001704 	addi	r4,r16,92
20081f00:	000b883a 	mov	r5,zero
20081f04:	b80d883a 	mov	r6,r23
20081f08:	00828900 	call	20082890 <memset>
20081f0c:	00800044 	movi	r2,1
20081f10:	84000715 	stw	r16,28(r16)
20081f14:	85800815 	stw	r22,32(r16)
20081f18:	85400915 	stw	r21,36(r16)
20081f1c:	85000a15 	stw	r20,40(r16)
20081f20:	84c00b15 	stw	r19,44(r16)
20081f24:	90800e15 	stw	r2,56(r18)
20081f28:	dfc00817 	ldw	ra,32(sp)
20081f2c:	ddc00717 	ldw	r23,28(sp)
20081f30:	dd800617 	ldw	r22,24(sp)
20081f34:	dd400517 	ldw	r21,20(sp)
20081f38:	dd000417 	ldw	r20,16(sp)
20081f3c:	dcc00317 	ldw	r19,12(sp)
20081f40:	dc800217 	ldw	r18,8(sp)
20081f44:	dc400117 	ldw	r17,4(sp)
20081f48:	dc000017 	ldw	r16,0(sp)
20081f4c:	dec00904 	addi	sp,sp,36
20081f50:	f800283a 	ret

20081f54 <__sfmoreglue>:
20081f54:	defffc04 	addi	sp,sp,-16
20081f58:	dc400115 	stw	r17,4(sp)
20081f5c:	2c7fffc4 	addi	r17,r5,-1
20081f60:	8c401a24 	muli	r17,r17,104
20081f64:	dc800215 	stw	r18,8(sp)
20081f68:	2825883a 	mov	r18,r5
20081f6c:	89401d04 	addi	r5,r17,116
20081f70:	dc000015 	stw	r16,0(sp)
20081f74:	dfc00315 	stw	ra,12(sp)
20081f78:	00808d40 	call	200808d4 <_malloc_r>
20081f7c:	1021883a 	mov	r16,r2
20081f80:	10000726 	beq	r2,zero,20081fa0 <__sfmoreglue+0x4c>
20081f84:	11000304 	addi	r4,r2,12
20081f88:	10000015 	stw	zero,0(r2)
20081f8c:	14800115 	stw	r18,4(r2)
20081f90:	11000215 	stw	r4,8(r2)
20081f94:	000b883a 	mov	r5,zero
20081f98:	89801a04 	addi	r6,r17,104
20081f9c:	00828900 	call	20082890 <memset>
20081fa0:	8005883a 	mov	r2,r16
20081fa4:	dfc00317 	ldw	ra,12(sp)
20081fa8:	dc800217 	ldw	r18,8(sp)
20081fac:	dc400117 	ldw	r17,4(sp)
20081fb0:	dc000017 	ldw	r16,0(sp)
20081fb4:	dec00404 	addi	sp,sp,16
20081fb8:	f800283a 	ret

20081fbc <__sfp>:
20081fbc:	00800034 	movhi	r2,0
20081fc0:	defffb04 	addi	sp,sp,-20
20081fc4:	10877904 	addi	r2,r2,7652
20081fc8:	dc800215 	stw	r18,8(sp)
20081fcc:	14800017 	ldw	r18,0(r2)
20081fd0:	dcc00315 	stw	r19,12(sp)
20081fd4:	dfc00415 	stw	ra,16(sp)
20081fd8:	90800e17 	ldw	r2,56(r18)
20081fdc:	dc400115 	stw	r17,4(sp)
20081fe0:	dc000015 	stw	r16,0(sp)
20081fe4:	2027883a 	mov	r19,r4
20081fe8:	1000021e 	bne	r2,zero,20081ff4 <__sfp+0x38>
20081fec:	9009883a 	mov	r4,r18
20081ff0:	0081db80 	call	20081db8 <__sinit.part.1>
20081ff4:	9480b804 	addi	r18,r18,736
20081ff8:	047fffc4 	movi	r17,-1
20081ffc:	91400117 	ldw	r5,4(r18)
20082000:	94000217 	ldw	r16,8(r18)
20082004:	297fffc4 	addi	r5,r5,-1
20082008:	28000a16 	blt	r5,zero,20082034 <__sfp+0x78>
2008200c:	8080030f 	ldh	r2,12(r16)
20082010:	10000c26 	beq	r2,zero,20082044 <__sfp+0x88>
20082014:	80c01d04 	addi	r3,r16,116
20082018:	00000206 	br	20082024 <__sfp+0x68>
2008201c:	18bfe60f 	ldh	r2,-104(r3)
20082020:	10000826 	beq	r2,zero,20082044 <__sfp+0x88>
20082024:	297fffc4 	addi	r5,r5,-1
20082028:	1c3ffd04 	addi	r16,r3,-12
2008202c:	18c01a04 	addi	r3,r3,104
20082030:	2c7ffa1e 	bne	r5,r17,2008201c <__flash_rwdata_start+0xffffa04c>
20082034:	90800017 	ldw	r2,0(r18)
20082038:	10001d26 	beq	r2,zero,200820b0 <__sfp+0xf4>
2008203c:	1025883a 	mov	r18,r2
20082040:	003fee06 	br	20081ffc <__flash_rwdata_start+0xffffa02c>
20082044:	00bfffc4 	movi	r2,-1
20082048:	8080038d 	sth	r2,14(r16)
2008204c:	00800044 	movi	r2,1
20082050:	8080030d 	sth	r2,12(r16)
20082054:	80001915 	stw	zero,100(r16)
20082058:	80000015 	stw	zero,0(r16)
2008205c:	80000215 	stw	zero,8(r16)
20082060:	80000115 	stw	zero,4(r16)
20082064:	80000415 	stw	zero,16(r16)
20082068:	80000515 	stw	zero,20(r16)
2008206c:	80000615 	stw	zero,24(r16)
20082070:	81001704 	addi	r4,r16,92
20082074:	000b883a 	mov	r5,zero
20082078:	01800204 	movi	r6,8
2008207c:	00828900 	call	20082890 <memset>
20082080:	8005883a 	mov	r2,r16
20082084:	80000c15 	stw	zero,48(r16)
20082088:	80000d15 	stw	zero,52(r16)
2008208c:	80001115 	stw	zero,68(r16)
20082090:	80001215 	stw	zero,72(r16)
20082094:	dfc00417 	ldw	ra,16(sp)
20082098:	dcc00317 	ldw	r19,12(sp)
2008209c:	dc800217 	ldw	r18,8(sp)
200820a0:	dc400117 	ldw	r17,4(sp)
200820a4:	dc000017 	ldw	r16,0(sp)
200820a8:	dec00504 	addi	sp,sp,20
200820ac:	f800283a 	ret
200820b0:	9809883a 	mov	r4,r19
200820b4:	01400104 	movi	r5,4
200820b8:	0081f540 	call	20081f54 <__sfmoreglue>
200820bc:	90800015 	stw	r2,0(r18)
200820c0:	103fde1e 	bne	r2,zero,2008203c <__flash_rwdata_start+0xffffa06c>
200820c4:	00800304 	movi	r2,12
200820c8:	98800015 	stw	r2,0(r19)
200820cc:	0005883a 	mov	r2,zero
200820d0:	003ff006 	br	20082094 <__flash_rwdata_start+0xffffa0c4>

200820d4 <_cleanup>:
200820d4:	00800034 	movhi	r2,0
200820d8:	10877904 	addi	r2,r2,7652
200820dc:	11000017 	ldw	r4,0(r2)
200820e0:	01480234 	movhi	r5,8200
200820e4:	294ae804 	addi	r5,r5,11168
200820e8:	00826141 	jmpi	20082614 <_fwalk_reent>

200820ec <__sinit>:
200820ec:	20800e17 	ldw	r2,56(r4)
200820f0:	10000126 	beq	r2,zero,200820f8 <__sinit+0xc>
200820f4:	f800283a 	ret
200820f8:	0081db81 	jmpi	20081db8 <__sinit.part.1>

200820fc <__sfp_lock_acquire>:
200820fc:	f800283a 	ret

20082100 <__sfp_lock_release>:
20082100:	f800283a 	ret

20082104 <__sinit_lock_acquire>:
20082104:	f800283a 	ret

20082108 <__sinit_lock_release>:
20082108:	f800283a 	ret

2008210c <__fp_lock_all>:
2008210c:	00800034 	movhi	r2,0
20082110:	10877a04 	addi	r2,r2,7656
20082114:	11000017 	ldw	r4,0(r2)
20082118:	01480234 	movhi	r5,8200
2008211c:	29476704 	addi	r5,r5,7580
20082120:	00825501 	jmpi	20082550 <_fwalk>

20082124 <__fp_unlock_all>:
20082124:	00800034 	movhi	r2,0
20082128:	10877a04 	addi	r2,r2,7656
2008212c:	11000017 	ldw	r4,0(r2)
20082130:	01480234 	movhi	r5,8200
20082134:	29476904 	addi	r5,r5,7588
20082138:	00825501 	jmpi	20082550 <_fwalk>

2008213c <_malloc_trim_r>:
2008213c:	defffb04 	addi	sp,sp,-20
20082140:	dcc00315 	stw	r19,12(sp)
20082144:	04c00034 	movhi	r19,0
20082148:	dc800215 	stw	r18,8(sp)
2008214c:	dc400115 	stw	r17,4(sp)
20082150:	dc000015 	stw	r16,0(sp)
20082154:	dfc00415 	stw	ra,16(sp)
20082158:	2821883a 	mov	r16,r5
2008215c:	9cc1ad04 	addi	r19,r19,1716
20082160:	2025883a 	mov	r18,r4
20082164:	00834f40 	call	200834f4 <__malloc_lock>
20082168:	98800217 	ldw	r2,8(r19)
2008216c:	14400117 	ldw	r17,4(r2)
20082170:	00bfff04 	movi	r2,-4
20082174:	88a2703a 	and	r17,r17,r2
20082178:	8c21c83a 	sub	r16,r17,r16
2008217c:	8403fbc4 	addi	r16,r16,4079
20082180:	8020d33a 	srli	r16,r16,12
20082184:	0083ffc4 	movi	r2,4095
20082188:	843fffc4 	addi	r16,r16,-1
2008218c:	8020933a 	slli	r16,r16,12
20082190:	1400060e 	bge	r2,r16,200821ac <_malloc_trim_r+0x70>
20082194:	9009883a 	mov	r4,r18
20082198:	000b883a 	mov	r5,zero
2008219c:	00819600 	call	20081960 <_sbrk_r>
200821a0:	98c00217 	ldw	r3,8(r19)
200821a4:	1c47883a 	add	r3,r3,r17
200821a8:	10c00a26 	beq	r2,r3,200821d4 <_malloc_trim_r+0x98>
200821ac:	9009883a 	mov	r4,r18
200821b0:	00835140 	call	20083514 <__malloc_unlock>
200821b4:	0005883a 	mov	r2,zero
200821b8:	dfc00417 	ldw	ra,16(sp)
200821bc:	dcc00317 	ldw	r19,12(sp)
200821c0:	dc800217 	ldw	r18,8(sp)
200821c4:	dc400117 	ldw	r17,4(sp)
200821c8:	dc000017 	ldw	r16,0(sp)
200821cc:	dec00504 	addi	sp,sp,20
200821d0:	f800283a 	ret
200821d4:	9009883a 	mov	r4,r18
200821d8:	040bc83a 	sub	r5,zero,r16
200821dc:	00819600 	call	20081960 <_sbrk_r>
200821e0:	00ffffc4 	movi	r3,-1
200821e4:	10c00d26 	beq	r2,r3,2008221c <_malloc_trim_r+0xe0>
200821e8:	00c00034 	movhi	r3,0
200821ec:	18c79404 	addi	r3,r3,7760
200821f0:	18800017 	ldw	r2,0(r3)
200821f4:	99000217 	ldw	r4,8(r19)
200821f8:	8c23c83a 	sub	r17,r17,r16
200821fc:	8c400054 	ori	r17,r17,1
20082200:	1421c83a 	sub	r16,r2,r16
20082204:	24400115 	stw	r17,4(r4)
20082208:	9009883a 	mov	r4,r18
2008220c:	1c000015 	stw	r16,0(r3)
20082210:	00835140 	call	20083514 <__malloc_unlock>
20082214:	00800044 	movi	r2,1
20082218:	003fe706 	br	200821b8 <__flash_rwdata_start+0xffffa1e8>
2008221c:	9009883a 	mov	r4,r18
20082220:	000b883a 	mov	r5,zero
20082224:	00819600 	call	20081960 <_sbrk_r>
20082228:	99000217 	ldw	r4,8(r19)
2008222c:	014003c4 	movi	r5,15
20082230:	1107c83a 	sub	r3,r2,r4
20082234:	28ffdd0e 	bge	r5,r3,200821ac <__flash_rwdata_start+0xffffa1dc>
20082238:	01400034 	movhi	r5,0
2008223c:	29477b04 	addi	r5,r5,7660
20082240:	29400017 	ldw	r5,0(r5)
20082244:	18c00054 	ori	r3,r3,1
20082248:	20c00115 	stw	r3,4(r4)
2008224c:	00c00034 	movhi	r3,0
20082250:	1145c83a 	sub	r2,r2,r5
20082254:	18c79404 	addi	r3,r3,7760
20082258:	18800015 	stw	r2,0(r3)
2008225c:	003fd306 	br	200821ac <__flash_rwdata_start+0xffffa1dc>

20082260 <_free_r>:
20082260:	28004c26 	beq	r5,zero,20082394 <_free_r+0x134>
20082264:	defffd04 	addi	sp,sp,-12
20082268:	dc400115 	stw	r17,4(sp)
2008226c:	dc000015 	stw	r16,0(sp)
20082270:	2023883a 	mov	r17,r4
20082274:	2821883a 	mov	r16,r5
20082278:	dfc00215 	stw	ra,8(sp)
2008227c:	00834f40 	call	200834f4 <__malloc_lock>
20082280:	813fff17 	ldw	r4,-4(r16)
20082284:	00bfff84 	movi	r2,-2
20082288:	02400034 	movhi	r9,0
2008228c:	81bffe04 	addi	r6,r16,-8
20082290:	2084703a 	and	r2,r4,r2
20082294:	4a41ad04 	addi	r9,r9,1716
20082298:	308b883a 	add	r5,r6,r2
2008229c:	2a000117 	ldw	r8,4(r5)
200822a0:	49c00217 	ldw	r7,8(r9)
200822a4:	00ffff04 	movi	r3,-4
200822a8:	40c6703a 	and	r3,r8,r3
200822ac:	39405326 	beq	r7,r5,200823fc <_free_r+0x19c>
200822b0:	28c00115 	stw	r3,4(r5)
200822b4:	2100004c 	andi	r4,r4,1
200822b8:	2000091e 	bne	r4,zero,200822e0 <_free_r+0x80>
200822bc:	81fffe17 	ldw	r7,-8(r16)
200822c0:	4a000204 	addi	r8,r9,8
200822c4:	31cdc83a 	sub	r6,r6,r7
200822c8:	31000217 	ldw	r4,8(r6)
200822cc:	11c5883a 	add	r2,r2,r7
200822d0:	22006126 	beq	r4,r8,20082458 <_free_r+0x1f8>
200822d4:	31c00317 	ldw	r7,12(r6)
200822d8:	21c00315 	stw	r7,12(r4)
200822dc:	39000215 	stw	r4,8(r7)
200822e0:	28c9883a 	add	r4,r5,r3
200822e4:	21c00117 	ldw	r7,4(r4)
200822e8:	39c0004c 	andi	r7,r7,1
200822ec:	38000d1e 	bne	r7,zero,20082324 <_free_r+0xc4>
200822f0:	29000217 	ldw	r4,8(r5)
200822f4:	10c5883a 	add	r2,r2,r3
200822f8:	00c00034 	movhi	r3,0
200822fc:	18c1af04 	addi	r3,r3,1724
20082300:	20c07526 	beq	r4,r3,200824d8 <_free_r+0x278>
20082304:	29c00317 	ldw	r7,12(r5)
20082308:	11400054 	ori	r5,r2,1
2008230c:	3087883a 	add	r3,r6,r2
20082310:	21c00315 	stw	r7,12(r4)
20082314:	39000215 	stw	r4,8(r7)
20082318:	31400115 	stw	r5,4(r6)
2008231c:	18800015 	stw	r2,0(r3)
20082320:	00000406 	br	20082334 <_free_r+0xd4>
20082324:	10c00054 	ori	r3,r2,1
20082328:	30c00115 	stw	r3,4(r6)
2008232c:	3087883a 	add	r3,r6,r2
20082330:	18800015 	stw	r2,0(r3)
20082334:	00c07fc4 	movi	r3,511
20082338:	18801736 	bltu	r3,r2,20082398 <_free_r+0x138>
2008233c:	1004d0fa 	srli	r2,r2,3
20082340:	01400044 	movi	r5,1
20082344:	49000117 	ldw	r4,4(r9)
20082348:	1087883a 	add	r3,r2,r2
2008234c:	18c7883a 	add	r3,r3,r3
20082350:	1005d0ba 	srai	r2,r2,2
20082354:	18c7883a 	add	r3,r3,r3
20082358:	1a47883a 	add	r3,r3,r9
2008235c:	19c00217 	ldw	r7,8(r3)
20082360:	2884983a 	sll	r2,r5,r2
20082364:	30c00315 	stw	r3,12(r6)
20082368:	31c00215 	stw	r7,8(r6)
2008236c:	1104b03a 	or	r2,r2,r4
20082370:	19800215 	stw	r6,8(r3)
20082374:	48800115 	stw	r2,4(r9)
20082378:	39800315 	stw	r6,12(r7)
2008237c:	8809883a 	mov	r4,r17
20082380:	dfc00217 	ldw	ra,8(sp)
20082384:	dc400117 	ldw	r17,4(sp)
20082388:	dc000017 	ldw	r16,0(sp)
2008238c:	dec00304 	addi	sp,sp,12
20082390:	00835141 	jmpi	20083514 <__malloc_unlock>
20082394:	f800283a 	ret
20082398:	1006d27a 	srli	r3,r2,9
2008239c:	01000104 	movi	r4,4
200823a0:	20c04036 	bltu	r4,r3,200824a4 <_free_r+0x244>
200823a4:	1006d1ba 	srli	r3,r2,6
200823a8:	19400e04 	addi	r5,r3,56
200823ac:	2947883a 	add	r3,r5,r5
200823b0:	18c7883a 	add	r3,r3,r3
200823b4:	18c7883a 	add	r3,r3,r3
200823b8:	1a49883a 	add	r4,r3,r9
200823bc:	20c00217 	ldw	r3,8(r4)
200823c0:	01c00034 	movhi	r7,0
200823c4:	39c1ad04 	addi	r7,r7,1716
200823c8:	19003b26 	beq	r3,r4,200824b8 <_free_r+0x258>
200823cc:	01ffff04 	movi	r7,-4
200823d0:	19400117 	ldw	r5,4(r3)
200823d4:	29ca703a 	and	r5,r5,r7
200823d8:	1140022e 	bgeu	r2,r5,200823e4 <_free_r+0x184>
200823dc:	18c00217 	ldw	r3,8(r3)
200823e0:	20fffb1e 	bne	r4,r3,200823d0 <__flash_rwdata_start+0xffffa400>
200823e4:	18800317 	ldw	r2,12(r3)
200823e8:	30800315 	stw	r2,12(r6)
200823ec:	30c00215 	stw	r3,8(r6)
200823f0:	11800215 	stw	r6,8(r2)
200823f4:	19800315 	stw	r6,12(r3)
200823f8:	003fe006 	br	2008237c <__flash_rwdata_start+0xffffa3ac>
200823fc:	2100004c 	andi	r4,r4,1
20082400:	1885883a 	add	r2,r3,r2
20082404:	2000071e 	bne	r4,zero,20082424 <_free_r+0x1c4>
20082408:	817ffe17 	ldw	r5,-8(r16)
2008240c:	314dc83a 	sub	r6,r6,r5
20082410:	30c00317 	ldw	r3,12(r6)
20082414:	31000217 	ldw	r4,8(r6)
20082418:	1145883a 	add	r2,r2,r5
2008241c:	20c00315 	stw	r3,12(r4)
20082420:	19000215 	stw	r4,8(r3)
20082424:	10c00054 	ori	r3,r2,1
20082428:	30c00115 	stw	r3,4(r6)
2008242c:	00c00034 	movhi	r3,0
20082430:	18c77c04 	addi	r3,r3,7664
20082434:	18c00017 	ldw	r3,0(r3)
20082438:	49800215 	stw	r6,8(r9)
2008243c:	10ffcf36 	bltu	r2,r3,2008237c <__flash_rwdata_start+0xffffa3ac>
20082440:	00800034 	movhi	r2,0
20082444:	10878b04 	addi	r2,r2,7724
20082448:	11400017 	ldw	r5,0(r2)
2008244c:	8809883a 	mov	r4,r17
20082450:	008213c0 	call	2008213c <_malloc_trim_r>
20082454:	003fc906 	br	2008237c <__flash_rwdata_start+0xffffa3ac>
20082458:	28c9883a 	add	r4,r5,r3
2008245c:	21000117 	ldw	r4,4(r4)
20082460:	2100004c 	andi	r4,r4,1
20082464:	20000a1e 	bne	r4,zero,20082490 <_free_r+0x230>
20082468:	29000317 	ldw	r4,12(r5)
2008246c:	29400217 	ldw	r5,8(r5)
20082470:	10c5883a 	add	r2,r2,r3
20082474:	10c00054 	ori	r3,r2,1
20082478:	29000315 	stw	r4,12(r5)
2008247c:	21400215 	stw	r5,8(r4)
20082480:	30c00115 	stw	r3,4(r6)
20082484:	308d883a 	add	r6,r6,r2
20082488:	30800015 	stw	r2,0(r6)
2008248c:	003fbb06 	br	2008237c <__flash_rwdata_start+0xffffa3ac>
20082490:	10c00054 	ori	r3,r2,1
20082494:	30c00115 	stw	r3,4(r6)
20082498:	308d883a 	add	r6,r6,r2
2008249c:	30800015 	stw	r2,0(r6)
200824a0:	003fb606 	br	2008237c <__flash_rwdata_start+0xffffa3ac>
200824a4:	01000504 	movi	r4,20
200824a8:	20c01436 	bltu	r4,r3,200824fc <_free_r+0x29c>
200824ac:	194016c4 	addi	r5,r3,91
200824b0:	2947883a 	add	r3,r5,r5
200824b4:	003fbe06 	br	200823b0 <__flash_rwdata_start+0xffffa3e0>
200824b8:	280bd0ba 	srai	r5,r5,2
200824bc:	00800044 	movi	r2,1
200824c0:	39000117 	ldw	r4,4(r7)
200824c4:	114a983a 	sll	r5,r2,r5
200824c8:	1805883a 	mov	r2,r3
200824cc:	2908b03a 	or	r4,r5,r4
200824d0:	39000115 	stw	r4,4(r7)
200824d4:	003fc406 	br	200823e8 <__flash_rwdata_start+0xffffa418>
200824d8:	49800515 	stw	r6,20(r9)
200824dc:	49800415 	stw	r6,16(r9)
200824e0:	10c00054 	ori	r3,r2,1
200824e4:	31000315 	stw	r4,12(r6)
200824e8:	31000215 	stw	r4,8(r6)
200824ec:	30c00115 	stw	r3,4(r6)
200824f0:	308d883a 	add	r6,r6,r2
200824f4:	30800015 	stw	r2,0(r6)
200824f8:	003fa006 	br	2008237c <__flash_rwdata_start+0xffffa3ac>
200824fc:	01001504 	movi	r4,84
20082500:	20c00436 	bltu	r4,r3,20082514 <_free_r+0x2b4>
20082504:	1006d33a 	srli	r3,r2,12
20082508:	19401b84 	addi	r5,r3,110
2008250c:	2947883a 	add	r3,r5,r5
20082510:	003fa706 	br	200823b0 <__flash_rwdata_start+0xffffa3e0>
20082514:	01005504 	movi	r4,340
20082518:	20c00436 	bltu	r4,r3,2008252c <_free_r+0x2cc>
2008251c:	1006d3fa 	srli	r3,r2,15
20082520:	19401dc4 	addi	r5,r3,119
20082524:	2947883a 	add	r3,r5,r5
20082528:	003fa106 	br	200823b0 <__flash_rwdata_start+0xffffa3e0>
2008252c:	01015504 	movi	r4,1364
20082530:	20c00436 	bltu	r4,r3,20082544 <_free_r+0x2e4>
20082534:	1006d4ba 	srli	r3,r2,18
20082538:	19401f04 	addi	r5,r3,124
2008253c:	2947883a 	add	r3,r5,r5
20082540:	003f9b06 	br	200823b0 <__flash_rwdata_start+0xffffa3e0>
20082544:	00c03f04 	movi	r3,252
20082548:	01401f84 	movi	r5,126
2008254c:	003f9806 	br	200823b0 <__flash_rwdata_start+0xffffa3e0>

20082550 <_fwalk>:
20082550:	defff704 	addi	sp,sp,-36
20082554:	dd000415 	stw	r20,16(sp)
20082558:	dfc00815 	stw	ra,32(sp)
2008255c:	ddc00715 	stw	r23,28(sp)
20082560:	dd800615 	stw	r22,24(sp)
20082564:	dd400515 	stw	r21,20(sp)
20082568:	dcc00315 	stw	r19,12(sp)
2008256c:	dc800215 	stw	r18,8(sp)
20082570:	dc400115 	stw	r17,4(sp)
20082574:	dc000015 	stw	r16,0(sp)
20082578:	2500b804 	addi	r20,r4,736
2008257c:	a0002326 	beq	r20,zero,2008260c <_fwalk+0xbc>
20082580:	282b883a 	mov	r21,r5
20082584:	002f883a 	mov	r23,zero
20082588:	05800044 	movi	r22,1
2008258c:	04ffffc4 	movi	r19,-1
20082590:	a4400117 	ldw	r17,4(r20)
20082594:	a4800217 	ldw	r18,8(r20)
20082598:	8c7fffc4 	addi	r17,r17,-1
2008259c:	88000d16 	blt	r17,zero,200825d4 <_fwalk+0x84>
200825a0:	94000304 	addi	r16,r18,12
200825a4:	94800384 	addi	r18,r18,14
200825a8:	80c0000b 	ldhu	r3,0(r16)
200825ac:	8c7fffc4 	addi	r17,r17,-1
200825b0:	813ffd04 	addi	r4,r16,-12
200825b4:	b0c0042e 	bgeu	r22,r3,200825c8 <_fwalk+0x78>
200825b8:	90c0000f 	ldh	r3,0(r18)
200825bc:	1cc00226 	beq	r3,r19,200825c8 <_fwalk+0x78>
200825c0:	a83ee83a 	callr	r21
200825c4:	b8aeb03a 	or	r23,r23,r2
200825c8:	84001a04 	addi	r16,r16,104
200825cc:	94801a04 	addi	r18,r18,104
200825d0:	8cfff51e 	bne	r17,r19,200825a8 <__flash_rwdata_start+0xffffa5d8>
200825d4:	a5000017 	ldw	r20,0(r20)
200825d8:	a03fed1e 	bne	r20,zero,20082590 <__flash_rwdata_start+0xffffa5c0>
200825dc:	b805883a 	mov	r2,r23
200825e0:	dfc00817 	ldw	ra,32(sp)
200825e4:	ddc00717 	ldw	r23,28(sp)
200825e8:	dd800617 	ldw	r22,24(sp)
200825ec:	dd400517 	ldw	r21,20(sp)
200825f0:	dd000417 	ldw	r20,16(sp)
200825f4:	dcc00317 	ldw	r19,12(sp)
200825f8:	dc800217 	ldw	r18,8(sp)
200825fc:	dc400117 	ldw	r17,4(sp)
20082600:	dc000017 	ldw	r16,0(sp)
20082604:	dec00904 	addi	sp,sp,36
20082608:	f800283a 	ret
2008260c:	002f883a 	mov	r23,zero
20082610:	003ff206 	br	200825dc <__flash_rwdata_start+0xffffa60c>

20082614 <_fwalk_reent>:
20082614:	defff704 	addi	sp,sp,-36
20082618:	dd400515 	stw	r21,20(sp)
2008261c:	dfc00815 	stw	ra,32(sp)
20082620:	ddc00715 	stw	r23,28(sp)
20082624:	dd800615 	stw	r22,24(sp)
20082628:	dd000415 	stw	r20,16(sp)
2008262c:	dcc00315 	stw	r19,12(sp)
20082630:	dc800215 	stw	r18,8(sp)
20082634:	dc400115 	stw	r17,4(sp)
20082638:	dc000015 	stw	r16,0(sp)
2008263c:	2540b804 	addi	r21,r4,736
20082640:	a8002326 	beq	r21,zero,200826d0 <_fwalk_reent+0xbc>
20082644:	2829883a 	mov	r20,r5
20082648:	202d883a 	mov	r22,r4
2008264c:	002f883a 	mov	r23,zero
20082650:	04c00044 	movi	r19,1
20082654:	04bfffc4 	movi	r18,-1
20082658:	ac400117 	ldw	r17,4(r21)
2008265c:	ac000217 	ldw	r16,8(r21)
20082660:	8c7fffc4 	addi	r17,r17,-1
20082664:	88000c16 	blt	r17,zero,20082698 <_fwalk_reent+0x84>
20082668:	84000304 	addi	r16,r16,12
2008266c:	80c0000b 	ldhu	r3,0(r16)
20082670:	8c7fffc4 	addi	r17,r17,-1
20082674:	817ffd04 	addi	r5,r16,-12
20082678:	98c0052e 	bgeu	r19,r3,20082690 <_fwalk_reent+0x7c>
2008267c:	80c0008f 	ldh	r3,2(r16)
20082680:	b009883a 	mov	r4,r22
20082684:	1c800226 	beq	r3,r18,20082690 <_fwalk_reent+0x7c>
20082688:	a03ee83a 	callr	r20
2008268c:	b8aeb03a 	or	r23,r23,r2
20082690:	84001a04 	addi	r16,r16,104
20082694:	8cbff51e 	bne	r17,r18,2008266c <__flash_rwdata_start+0xffffa69c>
20082698:	ad400017 	ldw	r21,0(r21)
2008269c:	a83fee1e 	bne	r21,zero,20082658 <__flash_rwdata_start+0xffffa688>
200826a0:	b805883a 	mov	r2,r23
200826a4:	dfc00817 	ldw	ra,32(sp)
200826a8:	ddc00717 	ldw	r23,28(sp)
200826ac:	dd800617 	ldw	r22,24(sp)
200826b0:	dd400517 	ldw	r21,20(sp)
200826b4:	dd000417 	ldw	r20,16(sp)
200826b8:	dcc00317 	ldw	r19,12(sp)
200826bc:	dc800217 	ldw	r18,8(sp)
200826c0:	dc400117 	ldw	r17,4(sp)
200826c4:	dc000017 	ldw	r16,0(sp)
200826c8:	dec00904 	addi	sp,sp,36
200826cc:	f800283a 	ret
200826d0:	002f883a 	mov	r23,zero
200826d4:	003ff206 	br	200826a0 <__flash_rwdata_start+0xffffa6d0>

200826d8 <__smakebuf_r>:
200826d8:	2880030b 	ldhu	r2,12(r5)
200826dc:	10c0008c 	andi	r3,r2,2
200826e0:	1800401e 	bne	r3,zero,200827e4 <__smakebuf_r+0x10c>
200826e4:	deffec04 	addi	sp,sp,-80
200826e8:	dc000f15 	stw	r16,60(sp)
200826ec:	2821883a 	mov	r16,r5
200826f0:	2940038f 	ldh	r5,14(r5)
200826f4:	dc401015 	stw	r17,64(sp)
200826f8:	dfc01315 	stw	ra,76(sp)
200826fc:	dcc01215 	stw	r19,72(sp)
20082700:	dc801115 	stw	r18,68(sp)
20082704:	2023883a 	mov	r17,r4
20082708:	28001b16 	blt	r5,zero,20082778 <__smakebuf_r+0xa0>
2008270c:	d80d883a 	mov	r6,sp
20082710:	0082ca40 	call	20082ca4 <_fstat_r>
20082714:	10001716 	blt	r2,zero,20082774 <__smakebuf_r+0x9c>
20082718:	d8800117 	ldw	r2,4(sp)
2008271c:	00e00014 	movui	r3,32768
20082720:	10bc000c 	andi	r2,r2,61440
20082724:	10c03726 	beq	r2,r3,20082804 <__smakebuf_r+0x12c>
20082728:	80c0030b 	ldhu	r3,12(r16)
2008272c:	18c20014 	ori	r3,r3,2048
20082730:	80c0030d 	sth	r3,12(r16)
20082734:	00c80004 	movi	r3,8192
20082738:	10c03c1e 	bne	r2,r3,2008282c <__smakebuf_r+0x154>
2008273c:	8140038f 	ldh	r5,14(r16)
20082740:	8809883a 	mov	r4,r17
20082744:	0082cfc0 	call	20082cfc <_isatty_r>
20082748:	10004e26 	beq	r2,zero,20082884 <__smakebuf_r+0x1ac>
2008274c:	8080030b 	ldhu	r2,12(r16)
20082750:	04c00044 	movi	r19,1
20082754:	80c010c4 	addi	r3,r16,67
20082758:	14c4b03a 	or	r2,r2,r19
2008275c:	8080030d 	sth	r2,12(r16)
20082760:	80c00015 	stw	r3,0(r16)
20082764:	80c00415 	stw	r3,16(r16)
20082768:	84c00515 	stw	r19,20(r16)
2008276c:	04810004 	movi	r18,1024
20082770:	00000706 	br	20082790 <__smakebuf_r+0xb8>
20082774:	8080030b 	ldhu	r2,12(r16)
20082778:	10c0200c 	andi	r3,r2,128
2008277c:	18001f1e 	bne	r3,zero,200827fc <__smakebuf_r+0x124>
20082780:	04810004 	movi	r18,1024
20082784:	10820014 	ori	r2,r2,2048
20082788:	8080030d 	sth	r2,12(r16)
2008278c:	0027883a 	mov	r19,zero
20082790:	8809883a 	mov	r4,r17
20082794:	900b883a 	mov	r5,r18
20082798:	00808d40 	call	200808d4 <_malloc_r>
2008279c:	10002e26 	beq	r2,zero,20082858 <__smakebuf_r+0x180>
200827a0:	80c0030b 	ldhu	r3,12(r16)
200827a4:	01080234 	movhi	r4,8200
200827a8:	21076b04 	addi	r4,r4,7596
200827ac:	89000f15 	stw	r4,60(r17)
200827b0:	18c02014 	ori	r3,r3,128
200827b4:	80c0030d 	sth	r3,12(r16)
200827b8:	80800015 	stw	r2,0(r16)
200827bc:	80800415 	stw	r2,16(r16)
200827c0:	84800515 	stw	r18,20(r16)
200827c4:	98001c1e 	bne	r19,zero,20082838 <__smakebuf_r+0x160>
200827c8:	dfc01317 	ldw	ra,76(sp)
200827cc:	dcc01217 	ldw	r19,72(sp)
200827d0:	dc801117 	ldw	r18,68(sp)
200827d4:	dc401017 	ldw	r17,64(sp)
200827d8:	dc000f17 	ldw	r16,60(sp)
200827dc:	dec01404 	addi	sp,sp,80
200827e0:	f800283a 	ret
200827e4:	288010c4 	addi	r2,r5,67
200827e8:	28800015 	stw	r2,0(r5)
200827ec:	28800415 	stw	r2,16(r5)
200827f0:	00800044 	movi	r2,1
200827f4:	28800515 	stw	r2,20(r5)
200827f8:	f800283a 	ret
200827fc:	04801004 	movi	r18,64
20082800:	003fe006 	br	20082784 <__flash_rwdata_start+0xffffa7b4>
20082804:	81000a17 	ldw	r4,40(r16)
20082808:	00c80234 	movhi	r3,8200
2008280c:	18caa304 	addi	r3,r3,10892
20082810:	20ffc51e 	bne	r4,r3,20082728 <__flash_rwdata_start+0xffffa758>
20082814:	80c0030b 	ldhu	r3,12(r16)
20082818:	01010004 	movi	r4,1024
2008281c:	81001315 	stw	r4,76(r16)
20082820:	1906b03a 	or	r3,r3,r4
20082824:	80c0030d 	sth	r3,12(r16)
20082828:	003fc206 	br	20082734 <__flash_rwdata_start+0xffffa764>
2008282c:	0027883a 	mov	r19,zero
20082830:	04810004 	movi	r18,1024
20082834:	003fd606 	br	20082790 <__flash_rwdata_start+0xffffa7c0>
20082838:	8140038f 	ldh	r5,14(r16)
2008283c:	8809883a 	mov	r4,r17
20082840:	0082cfc0 	call	20082cfc <_isatty_r>
20082844:	103fe026 	beq	r2,zero,200827c8 <__flash_rwdata_start+0xffffa7f8>
20082848:	8080030b 	ldhu	r2,12(r16)
2008284c:	10800054 	ori	r2,r2,1
20082850:	8080030d 	sth	r2,12(r16)
20082854:	003fdc06 	br	200827c8 <__flash_rwdata_start+0xffffa7f8>
20082858:	8080030b 	ldhu	r2,12(r16)
2008285c:	10c0800c 	andi	r3,r2,512
20082860:	183fd91e 	bne	r3,zero,200827c8 <__flash_rwdata_start+0xffffa7f8>
20082864:	10800094 	ori	r2,r2,2
20082868:	80c010c4 	addi	r3,r16,67
2008286c:	8080030d 	sth	r2,12(r16)
20082870:	00800044 	movi	r2,1
20082874:	80c00015 	stw	r3,0(r16)
20082878:	80c00415 	stw	r3,16(r16)
2008287c:	80800515 	stw	r2,20(r16)
20082880:	003fd106 	br	200827c8 <__flash_rwdata_start+0xffffa7f8>
20082884:	04c00044 	movi	r19,1
20082888:	04810004 	movi	r18,1024
2008288c:	003fc006 	br	20082790 <__flash_rwdata_start+0xffffa7c0>

20082890 <memset>:
20082890:	20c000cc 	andi	r3,r4,3
20082894:	2005883a 	mov	r2,r4
20082898:	18004326 	beq	r3,zero,200829a8 <memset+0x118>
2008289c:	31ffffc4 	addi	r7,r6,-1
200828a0:	30004026 	beq	r6,zero,200829a4 <memset+0x114>
200828a4:	2813883a 	mov	r9,r5
200828a8:	200d883a 	mov	r6,r4
200828ac:	2007883a 	mov	r3,r4
200828b0:	00000406 	br	200828c4 <memset+0x34>
200828b4:	3a3fffc4 	addi	r8,r7,-1
200828b8:	31800044 	addi	r6,r6,1
200828bc:	38003926 	beq	r7,zero,200829a4 <memset+0x114>
200828c0:	400f883a 	mov	r7,r8
200828c4:	18c00044 	addi	r3,r3,1
200828c8:	32400005 	stb	r9,0(r6)
200828cc:	1a0000cc 	andi	r8,r3,3
200828d0:	403ff81e 	bne	r8,zero,200828b4 <__flash_rwdata_start+0xffffa8e4>
200828d4:	010000c4 	movi	r4,3
200828d8:	21c02d2e 	bgeu	r4,r7,20082990 <memset+0x100>
200828dc:	29803fcc 	andi	r6,r5,255
200828e0:	3008923a 	slli	r4,r6,8
200828e4:	218cb03a 	or	r6,r4,r6
200828e8:	3008943a 	slli	r4,r6,16
200828ec:	218cb03a 	or	r6,r4,r6
200828f0:	010003c4 	movi	r4,15
200828f4:	21c0182e 	bgeu	r4,r7,20082958 <memset+0xc8>
200828f8:	3b3ffc04 	addi	r12,r7,-16
200828fc:	6018d13a 	srli	r12,r12,4
20082900:	1a000104 	addi	r8,r3,4
20082904:	1ac00204 	addi	r11,r3,8
20082908:	6008913a 	slli	r4,r12,4
2008290c:	1a800304 	addi	r10,r3,12
20082910:	1813883a 	mov	r9,r3
20082914:	21000504 	addi	r4,r4,20
20082918:	1909883a 	add	r4,r3,r4
2008291c:	49800015 	stw	r6,0(r9)
20082920:	41800015 	stw	r6,0(r8)
20082924:	59800015 	stw	r6,0(r11)
20082928:	51800015 	stw	r6,0(r10)
2008292c:	42000404 	addi	r8,r8,16
20082930:	4a400404 	addi	r9,r9,16
20082934:	5ac00404 	addi	r11,r11,16
20082938:	52800404 	addi	r10,r10,16
2008293c:	413ff71e 	bne	r8,r4,2008291c <__flash_rwdata_start+0xffffa94c>
20082940:	63000044 	addi	r12,r12,1
20082944:	6018913a 	slli	r12,r12,4
20082948:	39c003cc 	andi	r7,r7,15
2008294c:	010000c4 	movi	r4,3
20082950:	1b07883a 	add	r3,r3,r12
20082954:	21c00e2e 	bgeu	r4,r7,20082990 <memset+0x100>
20082958:	1813883a 	mov	r9,r3
2008295c:	3811883a 	mov	r8,r7
20082960:	010000c4 	movi	r4,3
20082964:	49800015 	stw	r6,0(r9)
20082968:	423fff04 	addi	r8,r8,-4
2008296c:	4a400104 	addi	r9,r9,4
20082970:	223ffc36 	bltu	r4,r8,20082964 <__flash_rwdata_start+0xffffa994>
20082974:	393fff04 	addi	r4,r7,-4
20082978:	2008d0ba 	srli	r4,r4,2
2008297c:	39c000cc 	andi	r7,r7,3
20082980:	21000044 	addi	r4,r4,1
20082984:	2109883a 	add	r4,r4,r4
20082988:	2109883a 	add	r4,r4,r4
2008298c:	1907883a 	add	r3,r3,r4
20082990:	38000426 	beq	r7,zero,200829a4 <memset+0x114>
20082994:	19cf883a 	add	r7,r3,r7
20082998:	19400005 	stb	r5,0(r3)
2008299c:	18c00044 	addi	r3,r3,1
200829a0:	19fffd1e 	bne	r3,r7,20082998 <__flash_rwdata_start+0xffffa9c8>
200829a4:	f800283a 	ret
200829a8:	2007883a 	mov	r3,r4
200829ac:	300f883a 	mov	r7,r6
200829b0:	003fc806 	br	200828d4 <__flash_rwdata_start+0xffffa904>

200829b4 <__sread>:
200829b4:	defffe04 	addi	sp,sp,-8
200829b8:	dc000015 	stw	r16,0(sp)
200829bc:	2821883a 	mov	r16,r5
200829c0:	2940038f 	ldh	r5,14(r5)
200829c4:	dfc00115 	stw	ra,4(sp)
200829c8:	0082dac0 	call	20082dac <_read_r>
200829cc:	10000716 	blt	r2,zero,200829ec <__sread+0x38>
200829d0:	80c01417 	ldw	r3,80(r16)
200829d4:	1887883a 	add	r3,r3,r2
200829d8:	80c01415 	stw	r3,80(r16)
200829dc:	dfc00117 	ldw	ra,4(sp)
200829e0:	dc000017 	ldw	r16,0(sp)
200829e4:	dec00204 	addi	sp,sp,8
200829e8:	f800283a 	ret
200829ec:	80c0030b 	ldhu	r3,12(r16)
200829f0:	18fbffcc 	andi	r3,r3,61439
200829f4:	80c0030d 	sth	r3,12(r16)
200829f8:	dfc00117 	ldw	ra,4(sp)
200829fc:	dc000017 	ldw	r16,0(sp)
20082a00:	dec00204 	addi	sp,sp,8
20082a04:	f800283a 	ret

20082a08 <__seofread>:
20082a08:	0005883a 	mov	r2,zero
20082a0c:	f800283a 	ret

20082a10 <__swrite>:
20082a10:	2880030b 	ldhu	r2,12(r5)
20082a14:	defffb04 	addi	sp,sp,-20
20082a18:	dcc00315 	stw	r19,12(sp)
20082a1c:	dc800215 	stw	r18,8(sp)
20082a20:	dc400115 	stw	r17,4(sp)
20082a24:	dc000015 	stw	r16,0(sp)
20082a28:	dfc00415 	stw	ra,16(sp)
20082a2c:	10c0400c 	andi	r3,r2,256
20082a30:	2821883a 	mov	r16,r5
20082a34:	2027883a 	mov	r19,r4
20082a38:	3025883a 	mov	r18,r6
20082a3c:	3823883a 	mov	r17,r7
20082a40:	18000526 	beq	r3,zero,20082a58 <__swrite+0x48>
20082a44:	2940038f 	ldh	r5,14(r5)
20082a48:	000d883a 	mov	r6,zero
20082a4c:	01c00084 	movi	r7,2
20082a50:	0082d500 	call	20082d50 <_lseek_r>
20082a54:	8080030b 	ldhu	r2,12(r16)
20082a58:	8140038f 	ldh	r5,14(r16)
20082a5c:	10bbffcc 	andi	r2,r2,61439
20082a60:	9809883a 	mov	r4,r19
20082a64:	900d883a 	mov	r6,r18
20082a68:	880f883a 	mov	r7,r17
20082a6c:	8080030d 	sth	r2,12(r16)
20082a70:	dfc00417 	ldw	ra,16(sp)
20082a74:	dcc00317 	ldw	r19,12(sp)
20082a78:	dc800217 	ldw	r18,8(sp)
20082a7c:	dc400117 	ldw	r17,4(sp)
20082a80:	dc000017 	ldw	r16,0(sp)
20082a84:	dec00504 	addi	sp,sp,20
20082a88:	0082af01 	jmpi	20082af0 <_write_r>

20082a8c <__sseek>:
20082a8c:	defffe04 	addi	sp,sp,-8
20082a90:	dc000015 	stw	r16,0(sp)
20082a94:	2821883a 	mov	r16,r5
20082a98:	2940038f 	ldh	r5,14(r5)
20082a9c:	dfc00115 	stw	ra,4(sp)
20082aa0:	0082d500 	call	20082d50 <_lseek_r>
20082aa4:	00ffffc4 	movi	r3,-1
20082aa8:	10c00826 	beq	r2,r3,20082acc <__sseek+0x40>
20082aac:	80c0030b 	ldhu	r3,12(r16)
20082ab0:	80801415 	stw	r2,80(r16)
20082ab4:	18c40014 	ori	r3,r3,4096
20082ab8:	80c0030d 	sth	r3,12(r16)
20082abc:	dfc00117 	ldw	ra,4(sp)
20082ac0:	dc000017 	ldw	r16,0(sp)
20082ac4:	dec00204 	addi	sp,sp,8
20082ac8:	f800283a 	ret
20082acc:	80c0030b 	ldhu	r3,12(r16)
20082ad0:	18fbffcc 	andi	r3,r3,61439
20082ad4:	80c0030d 	sth	r3,12(r16)
20082ad8:	dfc00117 	ldw	ra,4(sp)
20082adc:	dc000017 	ldw	r16,0(sp)
20082ae0:	dec00204 	addi	sp,sp,8
20082ae4:	f800283a 	ret

20082ae8 <__sclose>:
20082ae8:	2940038f 	ldh	r5,14(r5)
20082aec:	0082b4c1 	jmpi	20082b4c <_close_r>

20082af0 <_write_r>:
20082af0:	defffd04 	addi	sp,sp,-12
20082af4:	dc000015 	stw	r16,0(sp)
20082af8:	04000034 	movhi	r16,0
20082afc:	dc400115 	stw	r17,4(sp)
20082b00:	84078c04 	addi	r16,r16,7728
20082b04:	2023883a 	mov	r17,r4
20082b08:	2809883a 	mov	r4,r5
20082b0c:	300b883a 	mov	r5,r6
20082b10:	380d883a 	mov	r6,r7
20082b14:	dfc00215 	stw	ra,8(sp)
20082b18:	80000015 	stw	zero,0(r16)
20082b1c:	00837e00 	call	200837e0 <write>
20082b20:	00ffffc4 	movi	r3,-1
20082b24:	10c00526 	beq	r2,r3,20082b3c <_write_r+0x4c>
20082b28:	dfc00217 	ldw	ra,8(sp)
20082b2c:	dc400117 	ldw	r17,4(sp)
20082b30:	dc000017 	ldw	r16,0(sp)
20082b34:	dec00304 	addi	sp,sp,12
20082b38:	f800283a 	ret
20082b3c:	80c00017 	ldw	r3,0(r16)
20082b40:	183ff926 	beq	r3,zero,20082b28 <__flash_rwdata_start+0xffffab58>
20082b44:	88c00015 	stw	r3,0(r17)
20082b48:	003ff706 	br	20082b28 <__flash_rwdata_start+0xffffab58>

20082b4c <_close_r>:
20082b4c:	defffd04 	addi	sp,sp,-12
20082b50:	dc000015 	stw	r16,0(sp)
20082b54:	04000034 	movhi	r16,0
20082b58:	dc400115 	stw	r17,4(sp)
20082b5c:	84078c04 	addi	r16,r16,7728
20082b60:	2023883a 	mov	r17,r4
20082b64:	2809883a 	mov	r4,r5
20082b68:	dfc00215 	stw	ra,8(sp)
20082b6c:	80000015 	stw	zero,0(r16)
20082b70:	0082f840 	call	20082f84 <close>
20082b74:	00ffffc4 	movi	r3,-1
20082b78:	10c00526 	beq	r2,r3,20082b90 <_close_r+0x44>
20082b7c:	dfc00217 	ldw	ra,8(sp)
20082b80:	dc400117 	ldw	r17,4(sp)
20082b84:	dc000017 	ldw	r16,0(sp)
20082b88:	dec00304 	addi	sp,sp,12
20082b8c:	f800283a 	ret
20082b90:	80c00017 	ldw	r3,0(r16)
20082b94:	183ff926 	beq	r3,zero,20082b7c <__flash_rwdata_start+0xffffabac>
20082b98:	88c00015 	stw	r3,0(r17)
20082b9c:	003ff706 	br	20082b7c <__flash_rwdata_start+0xffffabac>

20082ba0 <_fclose_r>:
20082ba0:	28003926 	beq	r5,zero,20082c88 <_fclose_r+0xe8>
20082ba4:	defffc04 	addi	sp,sp,-16
20082ba8:	dc400115 	stw	r17,4(sp)
20082bac:	dc000015 	stw	r16,0(sp)
20082bb0:	dfc00315 	stw	ra,12(sp)
20082bb4:	dc800215 	stw	r18,8(sp)
20082bb8:	2023883a 	mov	r17,r4
20082bbc:	2821883a 	mov	r16,r5
20082bc0:	20000226 	beq	r4,zero,20082bcc <_fclose_r+0x2c>
20082bc4:	20800e17 	ldw	r2,56(r4)
20082bc8:	10002726 	beq	r2,zero,20082c68 <_fclose_r+0xc8>
20082bcc:	8080030f 	ldh	r2,12(r16)
20082bd0:	1000071e 	bne	r2,zero,20082bf0 <_fclose_r+0x50>
20082bd4:	0005883a 	mov	r2,zero
20082bd8:	dfc00317 	ldw	ra,12(sp)
20082bdc:	dc800217 	ldw	r18,8(sp)
20082be0:	dc400117 	ldw	r17,4(sp)
20082be4:	dc000017 	ldw	r16,0(sp)
20082be8:	dec00404 	addi	sp,sp,16
20082bec:	f800283a 	ret
20082bf0:	8809883a 	mov	r4,r17
20082bf4:	800b883a 	mov	r5,r16
20082bf8:	0081b080 	call	20081b08 <__sflush_r>
20082bfc:	1025883a 	mov	r18,r2
20082c00:	80800b17 	ldw	r2,44(r16)
20082c04:	10000426 	beq	r2,zero,20082c18 <_fclose_r+0x78>
20082c08:	81400717 	ldw	r5,28(r16)
20082c0c:	8809883a 	mov	r4,r17
20082c10:	103ee83a 	callr	r2
20082c14:	10001616 	blt	r2,zero,20082c70 <_fclose_r+0xd0>
20082c18:	8080030b 	ldhu	r2,12(r16)
20082c1c:	1080200c 	andi	r2,r2,128
20082c20:	1000151e 	bne	r2,zero,20082c78 <_fclose_r+0xd8>
20082c24:	81400c17 	ldw	r5,48(r16)
20082c28:	28000526 	beq	r5,zero,20082c40 <_fclose_r+0xa0>
20082c2c:	80801004 	addi	r2,r16,64
20082c30:	28800226 	beq	r5,r2,20082c3c <_fclose_r+0x9c>
20082c34:	8809883a 	mov	r4,r17
20082c38:	00822600 	call	20082260 <_free_r>
20082c3c:	80000c15 	stw	zero,48(r16)
20082c40:	81401117 	ldw	r5,68(r16)
20082c44:	28000326 	beq	r5,zero,20082c54 <_fclose_r+0xb4>
20082c48:	8809883a 	mov	r4,r17
20082c4c:	00822600 	call	20082260 <_free_r>
20082c50:	80001115 	stw	zero,68(r16)
20082c54:	00820fc0 	call	200820fc <__sfp_lock_acquire>
20082c58:	8000030d 	sth	zero,12(r16)
20082c5c:	00821000 	call	20082100 <__sfp_lock_release>
20082c60:	9005883a 	mov	r2,r18
20082c64:	003fdc06 	br	20082bd8 <__flash_rwdata_start+0xffffac08>
20082c68:	00820ec0 	call	200820ec <__sinit>
20082c6c:	003fd706 	br	20082bcc <__flash_rwdata_start+0xffffabfc>
20082c70:	04bfffc4 	movi	r18,-1
20082c74:	003fe806 	br	20082c18 <__flash_rwdata_start+0xffffac48>
20082c78:	81400417 	ldw	r5,16(r16)
20082c7c:	8809883a 	mov	r4,r17
20082c80:	00822600 	call	20082260 <_free_r>
20082c84:	003fe706 	br	20082c24 <__flash_rwdata_start+0xffffac54>
20082c88:	0005883a 	mov	r2,zero
20082c8c:	f800283a 	ret

20082c90 <fclose>:
20082c90:	00800034 	movhi	r2,0
20082c94:	10877a04 	addi	r2,r2,7656
20082c98:	200b883a 	mov	r5,r4
20082c9c:	11000017 	ldw	r4,0(r2)
20082ca0:	0082ba01 	jmpi	20082ba0 <_fclose_r>

20082ca4 <_fstat_r>:
20082ca4:	defffd04 	addi	sp,sp,-12
20082ca8:	dc000015 	stw	r16,0(sp)
20082cac:	04000034 	movhi	r16,0
20082cb0:	dc400115 	stw	r17,4(sp)
20082cb4:	84078c04 	addi	r16,r16,7728
20082cb8:	2023883a 	mov	r17,r4
20082cbc:	2809883a 	mov	r4,r5
20082cc0:	300b883a 	mov	r5,r6
20082cc4:	dfc00215 	stw	ra,8(sp)
20082cc8:	80000015 	stw	zero,0(r16)
20082ccc:	00830d00 	call	200830d0 <fstat>
20082cd0:	00ffffc4 	movi	r3,-1
20082cd4:	10c00526 	beq	r2,r3,20082cec <_fstat_r+0x48>
20082cd8:	dfc00217 	ldw	ra,8(sp)
20082cdc:	dc400117 	ldw	r17,4(sp)
20082ce0:	dc000017 	ldw	r16,0(sp)
20082ce4:	dec00304 	addi	sp,sp,12
20082ce8:	f800283a 	ret
20082cec:	80c00017 	ldw	r3,0(r16)
20082cf0:	183ff926 	beq	r3,zero,20082cd8 <__flash_rwdata_start+0xffffad08>
20082cf4:	88c00015 	stw	r3,0(r17)
20082cf8:	003ff706 	br	20082cd8 <__flash_rwdata_start+0xffffad08>

20082cfc <_isatty_r>:
20082cfc:	defffd04 	addi	sp,sp,-12
20082d00:	dc000015 	stw	r16,0(sp)
20082d04:	04000034 	movhi	r16,0
20082d08:	dc400115 	stw	r17,4(sp)
20082d0c:	84078c04 	addi	r16,r16,7728
20082d10:	2023883a 	mov	r17,r4
20082d14:	2809883a 	mov	r4,r5
20082d18:	dfc00215 	stw	ra,8(sp)
20082d1c:	80000015 	stw	zero,0(r16)
20082d20:	00831d00 	call	200831d0 <isatty>
20082d24:	00ffffc4 	movi	r3,-1
20082d28:	10c00526 	beq	r2,r3,20082d40 <_isatty_r+0x44>
20082d2c:	dfc00217 	ldw	ra,8(sp)
20082d30:	dc400117 	ldw	r17,4(sp)
20082d34:	dc000017 	ldw	r16,0(sp)
20082d38:	dec00304 	addi	sp,sp,12
20082d3c:	f800283a 	ret
20082d40:	80c00017 	ldw	r3,0(r16)
20082d44:	183ff926 	beq	r3,zero,20082d2c <__flash_rwdata_start+0xffffad5c>
20082d48:	88c00015 	stw	r3,0(r17)
20082d4c:	003ff706 	br	20082d2c <__flash_rwdata_start+0xffffad5c>

20082d50 <_lseek_r>:
20082d50:	defffd04 	addi	sp,sp,-12
20082d54:	dc000015 	stw	r16,0(sp)
20082d58:	04000034 	movhi	r16,0
20082d5c:	dc400115 	stw	r17,4(sp)
20082d60:	84078c04 	addi	r16,r16,7728
20082d64:	2023883a 	mov	r17,r4
20082d68:	2809883a 	mov	r4,r5
20082d6c:	300b883a 	mov	r5,r6
20082d70:	380d883a 	mov	r6,r7
20082d74:	dfc00215 	stw	ra,8(sp)
20082d78:	80000015 	stw	zero,0(r16)
20082d7c:	00833a80 	call	200833a8 <lseek>
20082d80:	00ffffc4 	movi	r3,-1
20082d84:	10c00526 	beq	r2,r3,20082d9c <_lseek_r+0x4c>
20082d88:	dfc00217 	ldw	ra,8(sp)
20082d8c:	dc400117 	ldw	r17,4(sp)
20082d90:	dc000017 	ldw	r16,0(sp)
20082d94:	dec00304 	addi	sp,sp,12
20082d98:	f800283a 	ret
20082d9c:	80c00017 	ldw	r3,0(r16)
20082da0:	183ff926 	beq	r3,zero,20082d88 <__flash_rwdata_start+0xffffadb8>
20082da4:	88c00015 	stw	r3,0(r17)
20082da8:	003ff706 	br	20082d88 <__flash_rwdata_start+0xffffadb8>

20082dac <_read_r>:
20082dac:	defffd04 	addi	sp,sp,-12
20082db0:	dc000015 	stw	r16,0(sp)
20082db4:	04000034 	movhi	r16,0
20082db8:	dc400115 	stw	r17,4(sp)
20082dbc:	84078c04 	addi	r16,r16,7728
20082dc0:	2023883a 	mov	r17,r4
20082dc4:	2809883a 	mov	r4,r5
20082dc8:	300b883a 	mov	r5,r6
20082dcc:	380d883a 	mov	r6,r7
20082dd0:	dfc00215 	stw	ra,8(sp)
20082dd4:	80000015 	stw	zero,0(r16)
20082dd8:	00835840 	call	20083584 <read>
20082ddc:	00ffffc4 	movi	r3,-1
20082de0:	10c00526 	beq	r2,r3,20082df8 <_read_r+0x4c>
20082de4:	dfc00217 	ldw	ra,8(sp)
20082de8:	dc400117 	ldw	r17,4(sp)
20082dec:	dc000017 	ldw	r16,0(sp)
20082df0:	dec00304 	addi	sp,sp,12
20082df4:	f800283a 	ret
20082df8:	80c00017 	ldw	r3,0(r16)
20082dfc:	183ff926 	beq	r3,zero,20082de4 <__flash_rwdata_start+0xffffae14>
20082e00:	88c00015 	stw	r3,0(r17)
20082e04:	003ff706 	br	20082de4 <__flash_rwdata_start+0xffffae14>

20082e08 <udivmodsi4>:
20082e08:	2900182e 	bgeu	r5,r4,20082e6c <udivmodsi4+0x64>
20082e0c:	28001716 	blt	r5,zero,20082e6c <udivmodsi4+0x64>
20082e10:	00800804 	movi	r2,32
20082e14:	00c00044 	movi	r3,1
20082e18:	00000206 	br	20082e24 <udivmodsi4+0x1c>
20082e1c:	10001126 	beq	r2,zero,20082e64 <udivmodsi4+0x5c>
20082e20:	28000516 	blt	r5,zero,20082e38 <udivmodsi4+0x30>
20082e24:	294b883a 	add	r5,r5,r5
20082e28:	10bfffc4 	addi	r2,r2,-1
20082e2c:	18c7883a 	add	r3,r3,r3
20082e30:	293ffa36 	bltu	r5,r4,20082e1c <__flash_rwdata_start+0xffffae4c>
20082e34:	18000b26 	beq	r3,zero,20082e64 <udivmodsi4+0x5c>
20082e38:	0005883a 	mov	r2,zero
20082e3c:	21400236 	bltu	r4,r5,20082e48 <udivmodsi4+0x40>
20082e40:	2149c83a 	sub	r4,r4,r5
20082e44:	10c4b03a 	or	r2,r2,r3
20082e48:	1806d07a 	srli	r3,r3,1
20082e4c:	280ad07a 	srli	r5,r5,1
20082e50:	183ffa1e 	bne	r3,zero,20082e3c <__flash_rwdata_start+0xffffae6c>
20082e54:	3000011e 	bne	r6,zero,20082e5c <udivmodsi4+0x54>
20082e58:	f800283a 	ret
20082e5c:	2005883a 	mov	r2,r4
20082e60:	f800283a 	ret
20082e64:	0005883a 	mov	r2,zero
20082e68:	003ffa06 	br	20082e54 <__flash_rwdata_start+0xffffae84>
20082e6c:	00c00044 	movi	r3,1
20082e70:	003ff106 	br	20082e38 <__flash_rwdata_start+0xffffae68>

20082e74 <__divsi3>:
20082e74:	defffe04 	addi	sp,sp,-8
20082e78:	dfc00115 	stw	ra,4(sp)
20082e7c:	dc000015 	stw	r16,0(sp)
20082e80:	20000b16 	blt	r4,zero,20082eb0 <__divsi3+0x3c>
20082e84:	0021883a 	mov	r16,zero
20082e88:	28000c16 	blt	r5,zero,20082ebc <__divsi3+0x48>
20082e8c:	000d883a 	mov	r6,zero
20082e90:	0082e080 	call	20082e08 <udivmodsi4>
20082e94:	0407c83a 	sub	r3,zero,r16
20082e98:	1884f03a 	xor	r2,r3,r2
20082e9c:	1405883a 	add	r2,r2,r16
20082ea0:	dfc00117 	ldw	ra,4(sp)
20082ea4:	dc000017 	ldw	r16,0(sp)
20082ea8:	dec00204 	addi	sp,sp,8
20082eac:	f800283a 	ret
20082eb0:	0109c83a 	sub	r4,zero,r4
20082eb4:	04000044 	movi	r16,1
20082eb8:	283ff40e 	bge	r5,zero,20082e8c <__flash_rwdata_start+0xffffaebc>
20082ebc:	014bc83a 	sub	r5,zero,r5
20082ec0:	8400005c 	xori	r16,r16,1
20082ec4:	003ff106 	br	20082e8c <__flash_rwdata_start+0xffffaebc>

20082ec8 <__modsi3>:
20082ec8:	defffd04 	addi	sp,sp,-12
20082ecc:	dfc00215 	stw	ra,8(sp)
20082ed0:	dc400115 	stw	r17,4(sp)
20082ed4:	dc000015 	stw	r16,0(sp)
20082ed8:	20000c16 	blt	r4,zero,20082f0c <__modsi3+0x44>
20082edc:	0023883a 	mov	r17,zero
20082ee0:	0021883a 	mov	r16,zero
20082ee4:	28000d16 	blt	r5,zero,20082f1c <__modsi3+0x54>
20082ee8:	01800044 	movi	r6,1
20082eec:	0082e080 	call	20082e08 <udivmodsi4>
20082ef0:	1404f03a 	xor	r2,r2,r16
20082ef4:	8885883a 	add	r2,r17,r2
20082ef8:	dfc00217 	ldw	ra,8(sp)
20082efc:	dc400117 	ldw	r17,4(sp)
20082f00:	dc000017 	ldw	r16,0(sp)
20082f04:	dec00304 	addi	sp,sp,12
20082f08:	f800283a 	ret
20082f0c:	0109c83a 	sub	r4,zero,r4
20082f10:	04400044 	movi	r17,1
20082f14:	043fffc4 	movi	r16,-1
20082f18:	283ff30e 	bge	r5,zero,20082ee8 <__flash_rwdata_start+0xffffaf18>
20082f1c:	014bc83a 	sub	r5,zero,r5
20082f20:	003ff106 	br	20082ee8 <__flash_rwdata_start+0xffffaf18>

20082f24 <__udivsi3>:
20082f24:	000d883a 	mov	r6,zero
20082f28:	0082e081 	jmpi	20082e08 <udivmodsi4>

20082f2c <__umodsi3>:
20082f2c:	01800044 	movi	r6,1
20082f30:	0082e081 	jmpi	20082e08 <udivmodsi4>

20082f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20082f34:	defffe04 	addi	sp,sp,-8
20082f38:	dfc00115 	stw	ra,4(sp)
20082f3c:	df000015 	stw	fp,0(sp)
20082f40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20082f44:	00800034 	movhi	r2,0
20082f48:	10878204 	addi	r2,r2,7688
20082f4c:	10800017 	ldw	r2,0(r2)
20082f50:	10000526 	beq	r2,zero,20082f68 <alt_get_errno+0x34>
20082f54:	00800034 	movhi	r2,0
20082f58:	10878204 	addi	r2,r2,7688
20082f5c:	10800017 	ldw	r2,0(r2)
20082f60:	103ee83a 	callr	r2
20082f64:	00000206 	br	20082f70 <alt_get_errno+0x3c>
20082f68:	00800034 	movhi	r2,0
20082f6c:	10878c04 	addi	r2,r2,7728
}
20082f70:	e037883a 	mov	sp,fp
20082f74:	dfc00117 	ldw	ra,4(sp)
20082f78:	df000017 	ldw	fp,0(sp)
20082f7c:	dec00204 	addi	sp,sp,8
20082f80:	f800283a 	ret

20082f84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
20082f84:	defffb04 	addi	sp,sp,-20
20082f88:	dfc00415 	stw	ra,16(sp)
20082f8c:	df000315 	stw	fp,12(sp)
20082f90:	df000304 	addi	fp,sp,12
20082f94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
20082f98:	e0bfff17 	ldw	r2,-4(fp)
20082f9c:	10000616 	blt	r2,zero,20082fb8 <close+0x34>
20082fa0:	e0bfff17 	ldw	r2,-4(fp)
20082fa4:	10c00324 	muli	r3,r2,12
20082fa8:	00800034 	movhi	r2,0
20082fac:	1082b904 	addi	r2,r2,2788
20082fb0:	1885883a 	add	r2,r3,r2
20082fb4:	00000106 	br	20082fbc <close+0x38>
20082fb8:	0005883a 	mov	r2,zero
20082fbc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
20082fc0:	e0bffd17 	ldw	r2,-12(fp)
20082fc4:	10001926 	beq	r2,zero,2008302c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
20082fc8:	e0bffd17 	ldw	r2,-12(fp)
20082fcc:	10800017 	ldw	r2,0(r2)
20082fd0:	10800417 	ldw	r2,16(r2)
20082fd4:	10000626 	beq	r2,zero,20082ff0 <close+0x6c>
20082fd8:	e0bffd17 	ldw	r2,-12(fp)
20082fdc:	10800017 	ldw	r2,0(r2)
20082fe0:	10800417 	ldw	r2,16(r2)
20082fe4:	e13ffd17 	ldw	r4,-12(fp)
20082fe8:	103ee83a 	callr	r2
20082fec:	00000106 	br	20082ff4 <close+0x70>
20082ff0:	0005883a 	mov	r2,zero
20082ff4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20082ff8:	e13fff17 	ldw	r4,-4(fp)
20082ffc:	00836800 	call	20083680 <alt_release_fd>
    if (rval < 0)
20083000:	e0bffe17 	ldw	r2,-8(fp)
20083004:	1000070e 	bge	r2,zero,20083024 <close+0xa0>
    {
      ALT_ERRNO = -rval;
20083008:	0082f340 	call	20082f34 <alt_get_errno>
2008300c:	1007883a 	mov	r3,r2
20083010:	e0bffe17 	ldw	r2,-8(fp)
20083014:	0085c83a 	sub	r2,zero,r2
20083018:	18800015 	stw	r2,0(r3)
      return -1;
2008301c:	00bfffc4 	movi	r2,-1
20083020:	00000706 	br	20083040 <close+0xbc>
    }
    return 0;
20083024:	0005883a 	mov	r2,zero
20083028:	00000506 	br	20083040 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008302c:	0082f340 	call	20082f34 <alt_get_errno>
20083030:	1007883a 	mov	r3,r2
20083034:	00801444 	movi	r2,81
20083038:	18800015 	stw	r2,0(r3)
    return -1;
2008303c:	00bfffc4 	movi	r2,-1
  }
}
20083040:	e037883a 	mov	sp,fp
20083044:	dfc00117 	ldw	ra,4(sp)
20083048:	df000017 	ldw	fp,0(sp)
2008304c:	dec00204 	addi	sp,sp,8
20083050:	f800283a 	ret

20083054 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
20083054:	defffc04 	addi	sp,sp,-16
20083058:	df000315 	stw	fp,12(sp)
2008305c:	df000304 	addi	fp,sp,12
20083060:	e13ffd15 	stw	r4,-12(fp)
20083064:	e17ffe15 	stw	r5,-8(fp)
20083068:	e1bfff15 	stw	r6,-4(fp)
  return len;
2008306c:	e0bfff17 	ldw	r2,-4(fp)
}
20083070:	e037883a 	mov	sp,fp
20083074:	df000017 	ldw	fp,0(sp)
20083078:	dec00104 	addi	sp,sp,4
2008307c:	f800283a 	ret

20083080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20083080:	defffe04 	addi	sp,sp,-8
20083084:	dfc00115 	stw	ra,4(sp)
20083088:	df000015 	stw	fp,0(sp)
2008308c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20083090:	00800034 	movhi	r2,0
20083094:	10878204 	addi	r2,r2,7688
20083098:	10800017 	ldw	r2,0(r2)
2008309c:	10000526 	beq	r2,zero,200830b4 <alt_get_errno+0x34>
200830a0:	00800034 	movhi	r2,0
200830a4:	10878204 	addi	r2,r2,7688
200830a8:	10800017 	ldw	r2,0(r2)
200830ac:	103ee83a 	callr	r2
200830b0:	00000206 	br	200830bc <alt_get_errno+0x3c>
200830b4:	00800034 	movhi	r2,0
200830b8:	10878c04 	addi	r2,r2,7728
}
200830bc:	e037883a 	mov	sp,fp
200830c0:	dfc00117 	ldw	ra,4(sp)
200830c4:	df000017 	ldw	fp,0(sp)
200830c8:	dec00204 	addi	sp,sp,8
200830cc:	f800283a 	ret

200830d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
200830d0:	defffb04 	addi	sp,sp,-20
200830d4:	dfc00415 	stw	ra,16(sp)
200830d8:	df000315 	stw	fp,12(sp)
200830dc:	df000304 	addi	fp,sp,12
200830e0:	e13ffe15 	stw	r4,-8(fp)
200830e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200830e8:	e0bffe17 	ldw	r2,-8(fp)
200830ec:	10000616 	blt	r2,zero,20083108 <fstat+0x38>
200830f0:	e0bffe17 	ldw	r2,-8(fp)
200830f4:	10c00324 	muli	r3,r2,12
200830f8:	00800034 	movhi	r2,0
200830fc:	1082b904 	addi	r2,r2,2788
20083100:	1885883a 	add	r2,r3,r2
20083104:	00000106 	br	2008310c <fstat+0x3c>
20083108:	0005883a 	mov	r2,zero
2008310c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
20083110:	e0bffd17 	ldw	r2,-12(fp)
20083114:	10001026 	beq	r2,zero,20083158 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20083118:	e0bffd17 	ldw	r2,-12(fp)
2008311c:	10800017 	ldw	r2,0(r2)
20083120:	10800817 	ldw	r2,32(r2)
20083124:	10000726 	beq	r2,zero,20083144 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
20083128:	e0bffd17 	ldw	r2,-12(fp)
2008312c:	10800017 	ldw	r2,0(r2)
20083130:	10800817 	ldw	r2,32(r2)
20083134:	e13ffd17 	ldw	r4,-12(fp)
20083138:	e17fff17 	ldw	r5,-4(fp)
2008313c:	103ee83a 	callr	r2
20083140:	00000a06 	br	2008316c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
20083144:	e0bfff17 	ldw	r2,-4(fp)
20083148:	00c80004 	movi	r3,8192
2008314c:	10c00115 	stw	r3,4(r2)
      return 0;
20083150:	0005883a 	mov	r2,zero
20083154:	00000506 	br	2008316c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20083158:	00830800 	call	20083080 <alt_get_errno>
2008315c:	1007883a 	mov	r3,r2
20083160:	00801444 	movi	r2,81
20083164:	18800015 	stw	r2,0(r3)
    return -1;
20083168:	00bfffc4 	movi	r2,-1
  }
}
2008316c:	e037883a 	mov	sp,fp
20083170:	dfc00117 	ldw	ra,4(sp)
20083174:	df000017 	ldw	fp,0(sp)
20083178:	dec00204 	addi	sp,sp,8
2008317c:	f800283a 	ret

20083180 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20083180:	defffe04 	addi	sp,sp,-8
20083184:	dfc00115 	stw	ra,4(sp)
20083188:	df000015 	stw	fp,0(sp)
2008318c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20083190:	00800034 	movhi	r2,0
20083194:	10878204 	addi	r2,r2,7688
20083198:	10800017 	ldw	r2,0(r2)
2008319c:	10000526 	beq	r2,zero,200831b4 <alt_get_errno+0x34>
200831a0:	00800034 	movhi	r2,0
200831a4:	10878204 	addi	r2,r2,7688
200831a8:	10800017 	ldw	r2,0(r2)
200831ac:	103ee83a 	callr	r2
200831b0:	00000206 	br	200831bc <alt_get_errno+0x3c>
200831b4:	00800034 	movhi	r2,0
200831b8:	10878c04 	addi	r2,r2,7728
}
200831bc:	e037883a 	mov	sp,fp
200831c0:	dfc00117 	ldw	ra,4(sp)
200831c4:	df000017 	ldw	fp,0(sp)
200831c8:	dec00204 	addi	sp,sp,8
200831cc:	f800283a 	ret

200831d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
200831d0:	deffed04 	addi	sp,sp,-76
200831d4:	dfc01215 	stw	ra,72(sp)
200831d8:	df001115 	stw	fp,68(sp)
200831dc:	df001104 	addi	fp,sp,68
200831e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200831e4:	e0bfff17 	ldw	r2,-4(fp)
200831e8:	10000616 	blt	r2,zero,20083204 <isatty+0x34>
200831ec:	e0bfff17 	ldw	r2,-4(fp)
200831f0:	10c00324 	muli	r3,r2,12
200831f4:	00800034 	movhi	r2,0
200831f8:	1082b904 	addi	r2,r2,2788
200831fc:	1885883a 	add	r2,r3,r2
20083200:	00000106 	br	20083208 <isatty+0x38>
20083204:	0005883a 	mov	r2,zero
20083208:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
2008320c:	e0bfef17 	ldw	r2,-68(fp)
20083210:	10000e26 	beq	r2,zero,2008324c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
20083214:	e0bfef17 	ldw	r2,-68(fp)
20083218:	10800017 	ldw	r2,0(r2)
2008321c:	10800817 	ldw	r2,32(r2)
20083220:	1000021e 	bne	r2,zero,2008322c <isatty+0x5c>
    {
      return 1;
20083224:	00800044 	movi	r2,1
20083228:	00000d06 	br	20083260 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
2008322c:	e0bff004 	addi	r2,fp,-64
20083230:	e13fff17 	ldw	r4,-4(fp)
20083234:	100b883a 	mov	r5,r2
20083238:	00830d00 	call	200830d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
2008323c:	e0bff117 	ldw	r2,-60(fp)
20083240:	10880020 	cmpeqi	r2,r2,8192
20083244:	10803fcc 	andi	r2,r2,255
20083248:	00000506 	br	20083260 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2008324c:	00831800 	call	20083180 <alt_get_errno>
20083250:	1007883a 	mov	r3,r2
20083254:	00801444 	movi	r2,81
20083258:	18800015 	stw	r2,0(r3)
    return 0;
2008325c:	0005883a 	mov	r2,zero
  }
}
20083260:	e037883a 	mov	sp,fp
20083264:	dfc00117 	ldw	ra,4(sp)
20083268:	df000017 	ldw	fp,0(sp)
2008326c:	dec00204 	addi	sp,sp,8
20083270:	f800283a 	ret

20083274 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
20083274:	defffc04 	addi	sp,sp,-16
20083278:	df000315 	stw	fp,12(sp)
2008327c:	df000304 	addi	fp,sp,12
20083280:	e13ffd15 	stw	r4,-12(fp)
20083284:	e17ffe15 	stw	r5,-8(fp)
20083288:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
2008328c:	e0fffe17 	ldw	r3,-8(fp)
20083290:	e0bffd17 	ldw	r2,-12(fp)
20083294:	18800c26 	beq	r3,r2,200832c8 <alt_load_section+0x54>
  {
    while( to != end )
20083298:	00000806 	br	200832bc <alt_load_section+0x48>
    {
      *to++ = *from++;
2008329c:	e0bffe17 	ldw	r2,-8(fp)
200832a0:	10c00104 	addi	r3,r2,4
200832a4:	e0fffe15 	stw	r3,-8(fp)
200832a8:	e0fffd17 	ldw	r3,-12(fp)
200832ac:	19000104 	addi	r4,r3,4
200832b0:	e13ffd15 	stw	r4,-12(fp)
200832b4:	18c00017 	ldw	r3,0(r3)
200832b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
200832bc:	e0fffe17 	ldw	r3,-8(fp)
200832c0:	e0bfff17 	ldw	r2,-4(fp)
200832c4:	18bff51e 	bne	r3,r2,2008329c <__flash_rwdata_start+0xffffb2cc>
    {
      *to++ = *from++;
    }
  }
}
200832c8:	e037883a 	mov	sp,fp
200832cc:	df000017 	ldw	fp,0(sp)
200832d0:	dec00104 	addi	sp,sp,4
200832d4:	f800283a 	ret

200832d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
200832d8:	defffe04 	addi	sp,sp,-8
200832dc:	dfc00115 	stw	ra,4(sp)
200832e0:	df000015 	stw	fp,0(sp)
200832e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
200832e8:	01080234 	movhi	r4,8200
200832ec:	211ff404 	addi	r4,r4,32720
200832f0:	01400034 	movhi	r5,0
200832f4:	2940a404 	addi	r5,r5,656
200832f8:	01800034 	movhi	r6,0
200832fc:	31878904 	addi	r6,r6,7716
20083300:	00832740 	call	20083274 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
20083304:	01080234 	movhi	r4,8200
20083308:	21000804 	addi	r4,r4,32
2008330c:	01480234 	movhi	r5,8200
20083310:	29400804 	addi	r5,r5,32
20083314:	01880234 	movhi	r6,8200
20083318:	31809004 	addi	r6,r6,576
2008331c:	00832740 	call	20083274 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
20083320:	01080234 	movhi	r4,8200
20083324:	211f5004 	addi	r4,r4,32064
20083328:	01400034 	movhi	r5,0
2008332c:	29400004 	addi	r5,r5,0
20083330:	01800034 	movhi	r6,0
20083334:	3180a404 	addi	r6,r6,656
20083338:	00832740 	call	20083274 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
2008333c:	00866980 	call	20086698 <alt_dcache_flush_all>
  alt_icache_flush_all();
20083340:	00869180 	call	20086918 <alt_icache_flush_all>
}
20083344:	e037883a 	mov	sp,fp
20083348:	dfc00117 	ldw	ra,4(sp)
2008334c:	df000017 	ldw	fp,0(sp)
20083350:	dec00204 	addi	sp,sp,8
20083354:	f800283a 	ret

20083358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20083358:	defffe04 	addi	sp,sp,-8
2008335c:	dfc00115 	stw	ra,4(sp)
20083360:	df000015 	stw	fp,0(sp)
20083364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20083368:	00800034 	movhi	r2,0
2008336c:	10878204 	addi	r2,r2,7688
20083370:	10800017 	ldw	r2,0(r2)
20083374:	10000526 	beq	r2,zero,2008338c <alt_get_errno+0x34>
20083378:	00800034 	movhi	r2,0
2008337c:	10878204 	addi	r2,r2,7688
20083380:	10800017 	ldw	r2,0(r2)
20083384:	103ee83a 	callr	r2
20083388:	00000206 	br	20083394 <alt_get_errno+0x3c>
2008338c:	00800034 	movhi	r2,0
20083390:	10878c04 	addi	r2,r2,7728
}
20083394:	e037883a 	mov	sp,fp
20083398:	dfc00117 	ldw	ra,4(sp)
2008339c:	df000017 	ldw	fp,0(sp)
200833a0:	dec00204 	addi	sp,sp,8
200833a4:	f800283a 	ret

200833a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
200833a8:	defff904 	addi	sp,sp,-28
200833ac:	dfc00615 	stw	ra,24(sp)
200833b0:	df000515 	stw	fp,20(sp)
200833b4:	df000504 	addi	fp,sp,20
200833b8:	e13ffd15 	stw	r4,-12(fp)
200833bc:	e17ffe15 	stw	r5,-8(fp)
200833c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
200833c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200833c8:	e0bffd17 	ldw	r2,-12(fp)
200833cc:	10000616 	blt	r2,zero,200833e8 <lseek+0x40>
200833d0:	e0bffd17 	ldw	r2,-12(fp)
200833d4:	10c00324 	muli	r3,r2,12
200833d8:	00800034 	movhi	r2,0
200833dc:	1082b904 	addi	r2,r2,2788
200833e0:	1885883a 	add	r2,r3,r2
200833e4:	00000106 	br	200833ec <lseek+0x44>
200833e8:	0005883a 	mov	r2,zero
200833ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
200833f0:	e0bffc17 	ldw	r2,-16(fp)
200833f4:	10001026 	beq	r2,zero,20083438 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
200833f8:	e0bffc17 	ldw	r2,-16(fp)
200833fc:	10800017 	ldw	r2,0(r2)
20083400:	10800717 	ldw	r2,28(r2)
20083404:	10000926 	beq	r2,zero,2008342c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
20083408:	e0bffc17 	ldw	r2,-16(fp)
2008340c:	10800017 	ldw	r2,0(r2)
20083410:	10800717 	ldw	r2,28(r2)
20083414:	e13ffc17 	ldw	r4,-16(fp)
20083418:	e17ffe17 	ldw	r5,-8(fp)
2008341c:	e1bfff17 	ldw	r6,-4(fp)
20083420:	103ee83a 	callr	r2
20083424:	e0bffb15 	stw	r2,-20(fp)
20083428:	00000506 	br	20083440 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
2008342c:	00bfde84 	movi	r2,-134
20083430:	e0bffb15 	stw	r2,-20(fp)
20083434:	00000206 	br	20083440 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
20083438:	00bfebc4 	movi	r2,-81
2008343c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
20083440:	e0bffb17 	ldw	r2,-20(fp)
20083444:	1000070e 	bge	r2,zero,20083464 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
20083448:	00833580 	call	20083358 <alt_get_errno>
2008344c:	1007883a 	mov	r3,r2
20083450:	e0bffb17 	ldw	r2,-20(fp)
20083454:	0085c83a 	sub	r2,zero,r2
20083458:	18800015 	stw	r2,0(r3)
    rc = -1;
2008345c:	00bfffc4 	movi	r2,-1
20083460:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
20083464:	e0bffb17 	ldw	r2,-20(fp)
}
20083468:	e037883a 	mov	sp,fp
2008346c:	dfc00117 	ldw	ra,4(sp)
20083470:	df000017 	ldw	fp,0(sp)
20083474:	dec00204 	addi	sp,sp,8
20083478:	f800283a 	ret

2008347c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
2008347c:	defffd04 	addi	sp,sp,-12
20083480:	dfc00215 	stw	ra,8(sp)
20083484:	df000115 	stw	fp,4(sp)
20083488:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
2008348c:	0009883a 	mov	r4,zero
20083490:	00839100 	call	20083910 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
20083494:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20083498:	00839440 	call	20083944 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
2008349c:	01000034 	movhi	r4,0
200834a0:	21000a04 	addi	r4,r4,40
200834a4:	01400034 	movhi	r5,0
200834a8:	29400a04 	addi	r5,r5,40
200834ac:	01800034 	movhi	r6,0
200834b0:	31800a04 	addi	r6,r6,40
200834b4:	0086cd80 	call	20086cd8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
200834b8:	00867d00 	call	200867d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
200834bc:	01080234 	movhi	r4,8200
200834c0:	211a0b04 	addi	r4,r4,26668
200834c4:	00876dc0 	call	200876dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
200834c8:	d1201417 	ldw	r4,-32688(gp)
200834cc:	d0e01517 	ldw	r3,-32684(gp)
200834d0:	d0a01617 	ldw	r2,-32680(gp)
200834d4:	180b883a 	mov	r5,r3
200834d8:	100d883a 	mov	r6,r2
200834dc:	008028c0 	call	2008028c <main>
200834e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
200834e4:	01000044 	movi	r4,1
200834e8:	0082f840 	call	20082f84 <close>
  exit (result);
200834ec:	e13fff17 	ldw	r4,-4(fp)
200834f0:	00876f00 	call	200876f0 <exit>

200834f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
200834f4:	defffe04 	addi	sp,sp,-8
200834f8:	df000115 	stw	fp,4(sp)
200834fc:	df000104 	addi	fp,sp,4
20083500:	e13fff15 	stw	r4,-4(fp)
}
20083504:	e037883a 	mov	sp,fp
20083508:	df000017 	ldw	fp,0(sp)
2008350c:	dec00104 	addi	sp,sp,4
20083510:	f800283a 	ret

20083514 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20083514:	defffe04 	addi	sp,sp,-8
20083518:	df000115 	stw	fp,4(sp)
2008351c:	df000104 	addi	fp,sp,4
20083520:	e13fff15 	stw	r4,-4(fp)
}
20083524:	e037883a 	mov	sp,fp
20083528:	df000017 	ldw	fp,0(sp)
2008352c:	dec00104 	addi	sp,sp,4
20083530:	f800283a 	ret

20083534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20083534:	defffe04 	addi	sp,sp,-8
20083538:	dfc00115 	stw	ra,4(sp)
2008353c:	df000015 	stw	fp,0(sp)
20083540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20083544:	00800034 	movhi	r2,0
20083548:	10878204 	addi	r2,r2,7688
2008354c:	10800017 	ldw	r2,0(r2)
20083550:	10000526 	beq	r2,zero,20083568 <alt_get_errno+0x34>
20083554:	00800034 	movhi	r2,0
20083558:	10878204 	addi	r2,r2,7688
2008355c:	10800017 	ldw	r2,0(r2)
20083560:	103ee83a 	callr	r2
20083564:	00000206 	br	20083570 <alt_get_errno+0x3c>
20083568:	00800034 	movhi	r2,0
2008356c:	10878c04 	addi	r2,r2,7728
}
20083570:	e037883a 	mov	sp,fp
20083574:	dfc00117 	ldw	ra,4(sp)
20083578:	df000017 	ldw	fp,0(sp)
2008357c:	dec00204 	addi	sp,sp,8
20083580:	f800283a 	ret

20083584 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20083584:	defff904 	addi	sp,sp,-28
20083588:	dfc00615 	stw	ra,24(sp)
2008358c:	df000515 	stw	fp,20(sp)
20083590:	df000504 	addi	fp,sp,20
20083594:	e13ffd15 	stw	r4,-12(fp)
20083598:	e17ffe15 	stw	r5,-8(fp)
2008359c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200835a0:	e0bffd17 	ldw	r2,-12(fp)
200835a4:	10000616 	blt	r2,zero,200835c0 <read+0x3c>
200835a8:	e0bffd17 	ldw	r2,-12(fp)
200835ac:	10c00324 	muli	r3,r2,12
200835b0:	00800034 	movhi	r2,0
200835b4:	1082b904 	addi	r2,r2,2788
200835b8:	1885883a 	add	r2,r3,r2
200835bc:	00000106 	br	200835c4 <read+0x40>
200835c0:	0005883a 	mov	r2,zero
200835c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
200835c8:	e0bffb17 	ldw	r2,-20(fp)
200835cc:	10002226 	beq	r2,zero,20083658 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
200835d0:	e0bffb17 	ldw	r2,-20(fp)
200835d4:	10800217 	ldw	r2,8(r2)
200835d8:	108000cc 	andi	r2,r2,3
200835dc:	10800060 	cmpeqi	r2,r2,1
200835e0:	1000181e 	bne	r2,zero,20083644 <read+0xc0>
        (fd->dev->read))
200835e4:	e0bffb17 	ldw	r2,-20(fp)
200835e8:	10800017 	ldw	r2,0(r2)
200835ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
200835f0:	10001426 	beq	r2,zero,20083644 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
200835f4:	e0bffb17 	ldw	r2,-20(fp)
200835f8:	10800017 	ldw	r2,0(r2)
200835fc:	10800517 	ldw	r2,20(r2)
20083600:	e0ffff17 	ldw	r3,-4(fp)
20083604:	e13ffb17 	ldw	r4,-20(fp)
20083608:	e17ffe17 	ldw	r5,-8(fp)
2008360c:	180d883a 	mov	r6,r3
20083610:	103ee83a 	callr	r2
20083614:	e0bffc15 	stw	r2,-16(fp)
20083618:	e0bffc17 	ldw	r2,-16(fp)
2008361c:	1000070e 	bge	r2,zero,2008363c <read+0xb8>
        {
          ALT_ERRNO = -rval;
20083620:	00835340 	call	20083534 <alt_get_errno>
20083624:	1007883a 	mov	r3,r2
20083628:	e0bffc17 	ldw	r2,-16(fp)
2008362c:	0085c83a 	sub	r2,zero,r2
20083630:	18800015 	stw	r2,0(r3)
          return -1;
20083634:	00bfffc4 	movi	r2,-1
20083638:	00000c06 	br	2008366c <read+0xe8>
        }
        return rval;
2008363c:	e0bffc17 	ldw	r2,-16(fp)
20083640:	00000a06 	br	2008366c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
20083644:	00835340 	call	20083534 <alt_get_errno>
20083648:	1007883a 	mov	r3,r2
2008364c:	00800344 	movi	r2,13
20083650:	18800015 	stw	r2,0(r3)
20083654:	00000406 	br	20083668 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20083658:	00835340 	call	20083534 <alt_get_errno>
2008365c:	1007883a 	mov	r3,r2
20083660:	00801444 	movi	r2,81
20083664:	18800015 	stw	r2,0(r3)
  }
  return -1;
20083668:	00bfffc4 	movi	r2,-1
}
2008366c:	e037883a 	mov	sp,fp
20083670:	dfc00117 	ldw	ra,4(sp)
20083674:	df000017 	ldw	fp,0(sp)
20083678:	dec00204 	addi	sp,sp,8
2008367c:	f800283a 	ret

20083680 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
20083680:	defffe04 	addi	sp,sp,-8
20083684:	df000115 	stw	fp,4(sp)
20083688:	df000104 	addi	fp,sp,4
2008368c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
20083690:	e0bfff17 	ldw	r2,-4(fp)
20083694:	108000d0 	cmplti	r2,r2,3
20083698:	10000d1e 	bne	r2,zero,200836d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
2008369c:	00800034 	movhi	r2,0
200836a0:	1082b904 	addi	r2,r2,2788
200836a4:	e0ffff17 	ldw	r3,-4(fp)
200836a8:	18c00324 	muli	r3,r3,12
200836ac:	18c00204 	addi	r3,r3,8
200836b0:	10c5883a 	add	r2,r2,r3
200836b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
200836b8:	00800034 	movhi	r2,0
200836bc:	1082b904 	addi	r2,r2,2788
200836c0:	e0ffff17 	ldw	r3,-4(fp)
200836c4:	18c00324 	muli	r3,r3,12
200836c8:	10c5883a 	add	r2,r2,r3
200836cc:	10000015 	stw	zero,0(r2)
  }
}
200836d0:	e037883a 	mov	sp,fp
200836d4:	df000017 	ldw	fp,0(sp)
200836d8:	dec00104 	addi	sp,sp,4
200836dc:	f800283a 	ret

200836e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
200836e0:	defff904 	addi	sp,sp,-28
200836e4:	df000615 	stw	fp,24(sp)
200836e8:	df000604 	addi	fp,sp,24
200836ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200836f0:	0005303a 	rdctl	r2,status
200836f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200836f8:	e0fffc17 	ldw	r3,-16(fp)
200836fc:	00bfff84 	movi	r2,-2
20083700:	1884703a 	and	r2,r3,r2
20083704:	1001703a 	wrctl	status,r2
  
  return context;
20083708:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
2008370c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20083710:	d0a00a17 	ldw	r2,-32728(gp)
20083714:	10c000c4 	addi	r3,r2,3
20083718:	00bfff04 	movi	r2,-4
2008371c:	1884703a 	and	r2,r3,r2
20083720:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20083724:	d0e00a17 	ldw	r3,-32728(gp)
20083728:	e0bfff17 	ldw	r2,-4(fp)
2008372c:	1887883a 	add	r3,r3,r2
20083730:	00880034 	movhi	r2,8192
20083734:	10800004 	addi	r2,r2,0
20083738:	10c0062e 	bgeu	r2,r3,20083754 <sbrk+0x74>
2008373c:	e0bffa17 	ldw	r2,-24(fp)
20083740:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20083744:	e0bffd17 	ldw	r2,-12(fp)
20083748:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
2008374c:	00bfffc4 	movi	r2,-1
20083750:	00000b06 	br	20083780 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
20083754:	d0a00a17 	ldw	r2,-32728(gp)
20083758:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
2008375c:	d0e00a17 	ldw	r3,-32728(gp)
20083760:	e0bfff17 	ldw	r2,-4(fp)
20083764:	1885883a 	add	r2,r3,r2
20083768:	d0a00a15 	stw	r2,-32728(gp)
2008376c:	e0bffa17 	ldw	r2,-24(fp)
20083770:	e0bffe15 	stw	r2,-8(fp)
20083774:	e0bffe17 	ldw	r2,-8(fp)
20083778:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
2008377c:	e0bffb17 	ldw	r2,-20(fp)
} 
20083780:	e037883a 	mov	sp,fp
20083784:	df000017 	ldw	fp,0(sp)
20083788:	dec00104 	addi	sp,sp,4
2008378c:	f800283a 	ret

20083790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20083790:	defffe04 	addi	sp,sp,-8
20083794:	dfc00115 	stw	ra,4(sp)
20083798:	df000015 	stw	fp,0(sp)
2008379c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200837a0:	00800034 	movhi	r2,0
200837a4:	10878204 	addi	r2,r2,7688
200837a8:	10800017 	ldw	r2,0(r2)
200837ac:	10000526 	beq	r2,zero,200837c4 <alt_get_errno+0x34>
200837b0:	00800034 	movhi	r2,0
200837b4:	10878204 	addi	r2,r2,7688
200837b8:	10800017 	ldw	r2,0(r2)
200837bc:	103ee83a 	callr	r2
200837c0:	00000206 	br	200837cc <alt_get_errno+0x3c>
200837c4:	00800034 	movhi	r2,0
200837c8:	10878c04 	addi	r2,r2,7728
}
200837cc:	e037883a 	mov	sp,fp
200837d0:	dfc00117 	ldw	ra,4(sp)
200837d4:	df000017 	ldw	fp,0(sp)
200837d8:	dec00204 	addi	sp,sp,8
200837dc:	f800283a 	ret

200837e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
200837e0:	defff904 	addi	sp,sp,-28
200837e4:	dfc00615 	stw	ra,24(sp)
200837e8:	df000515 	stw	fp,20(sp)
200837ec:	df000504 	addi	fp,sp,20
200837f0:	e13ffd15 	stw	r4,-12(fp)
200837f4:	e17ffe15 	stw	r5,-8(fp)
200837f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200837fc:	e0bffd17 	ldw	r2,-12(fp)
20083800:	10000616 	blt	r2,zero,2008381c <write+0x3c>
20083804:	e0bffd17 	ldw	r2,-12(fp)
20083808:	10c00324 	muli	r3,r2,12
2008380c:	00800034 	movhi	r2,0
20083810:	1082b904 	addi	r2,r2,2788
20083814:	1885883a 	add	r2,r3,r2
20083818:	00000106 	br	20083820 <write+0x40>
2008381c:	0005883a 	mov	r2,zero
20083820:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20083824:	e0bffb17 	ldw	r2,-20(fp)
20083828:	10002126 	beq	r2,zero,200838b0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
2008382c:	e0bffb17 	ldw	r2,-20(fp)
20083830:	10800217 	ldw	r2,8(r2)
20083834:	108000cc 	andi	r2,r2,3
20083838:	10001826 	beq	r2,zero,2008389c <write+0xbc>
2008383c:	e0bffb17 	ldw	r2,-20(fp)
20083840:	10800017 	ldw	r2,0(r2)
20083844:	10800617 	ldw	r2,24(r2)
20083848:	10001426 	beq	r2,zero,2008389c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
2008384c:	e0bffb17 	ldw	r2,-20(fp)
20083850:	10800017 	ldw	r2,0(r2)
20083854:	10800617 	ldw	r2,24(r2)
20083858:	e0ffff17 	ldw	r3,-4(fp)
2008385c:	e13ffb17 	ldw	r4,-20(fp)
20083860:	e17ffe17 	ldw	r5,-8(fp)
20083864:	180d883a 	mov	r6,r3
20083868:	103ee83a 	callr	r2
2008386c:	e0bffc15 	stw	r2,-16(fp)
20083870:	e0bffc17 	ldw	r2,-16(fp)
20083874:	1000070e 	bge	r2,zero,20083894 <write+0xb4>
      {
        ALT_ERRNO = -rval;
20083878:	00837900 	call	20083790 <alt_get_errno>
2008387c:	1007883a 	mov	r3,r2
20083880:	e0bffc17 	ldw	r2,-16(fp)
20083884:	0085c83a 	sub	r2,zero,r2
20083888:	18800015 	stw	r2,0(r3)
        return -1;
2008388c:	00bfffc4 	movi	r2,-1
20083890:	00000c06 	br	200838c4 <write+0xe4>
      }
      return rval;
20083894:	e0bffc17 	ldw	r2,-16(fp)
20083898:	00000a06 	br	200838c4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
2008389c:	00837900 	call	20083790 <alt_get_errno>
200838a0:	1007883a 	mov	r3,r2
200838a4:	00800344 	movi	r2,13
200838a8:	18800015 	stw	r2,0(r3)
200838ac:	00000406 	br	200838c0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
200838b0:	00837900 	call	20083790 <alt_get_errno>
200838b4:	1007883a 	mov	r3,r2
200838b8:	00801444 	movi	r2,81
200838bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
200838c0:	00bfffc4 	movi	r2,-1
}
200838c4:	e037883a 	mov	sp,fp
200838c8:	dfc00117 	ldw	ra,4(sp)
200838cc:	df000017 	ldw	fp,0(sp)
200838d0:	dec00204 	addi	sp,sp,8
200838d4:	f800283a 	ret

200838d8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
200838d8:	defffd04 	addi	sp,sp,-12
200838dc:	dfc00215 	stw	ra,8(sp)
200838e0:	df000115 	stw	fp,4(sp)
200838e4:	df000104 	addi	fp,sp,4
200838e8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
200838ec:	e13fff17 	ldw	r4,-4(fp)
200838f0:	01400034 	movhi	r5,0
200838f4:	29477f04 	addi	r5,r5,7676
200838f8:	008672c0 	call	2008672c <alt_dev_llist_insert>
}
200838fc:	e037883a 	mov	sp,fp
20083900:	dfc00117 	ldw	ra,4(sp)
20083904:	df000017 	ldw	fp,0(sp)
20083908:	dec00204 	addi	sp,sp,8
2008390c:	f800283a 	ret

20083910 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
20083910:	defffd04 	addi	sp,sp,-12
20083914:	dfc00215 	stw	ra,8(sp)
20083918:	df000115 	stw	fp,4(sp)
2008391c:	df000104 	addi	fp,sp,4
20083920:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
20083924:	00873cc0 	call	200873cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
20083928:	00800044 	movi	r2,1
2008392c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
20083930:	e037883a 	mov	sp,fp
20083934:	dfc00117 	ldw	ra,4(sp)
20083938:	df000017 	ldw	fp,0(sp)
2008393c:	dec00204 	addi	sp,sp,8
20083940:	f800283a 	ret

20083944 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20083944:	defffe04 	addi	sp,sp,-8
20083948:	dfc00115 	stw	ra,4(sp)
2008394c:	df000015 	stw	fp,0(sp)
20083950:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20083954:	01080434 	movhi	r4,8208
20083958:	21052004 	addi	r4,r4,5248
2008395c:	000b883a 	mov	r5,zero
20083960:	000d883a 	mov	r6,zero
20083964:	01c0fa04 	movi	r7,1000
20083968:	00844e80 	call	200844e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
2008396c:	01000034 	movhi	r4,0
20083970:	21032304 	addi	r4,r4,3212
20083974:	000b883a 	mov	r5,zero
20083978:	01800044 	movi	r6,1
2008397c:	0083b8c0 	call	20083b8c <altera_avalon_jtag_uart_init>
20083980:	01000034 	movhi	r4,0
20083984:	21031904 	addi	r4,r4,3172
20083988:	00838d80 	call	200838d8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
2008398c:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( READ_DMA_0, read_dma_0);
20083990:	00800034 	movhi	r2,0
20083994:	10873104 	addi	r2,r2,7364
20083998:	10c00717 	ldw	r3,28(r2)
2008399c:	00800034 	movhi	r2,0
200839a0:	10873104 	addi	r2,r2,7364
200839a4:	10800817 	ldw	r2,32(r2)
200839a8:	01000034 	movhi	r4,0
200839ac:	21073104 	addi	r4,r4,7364
200839b0:	180b883a 	mov	r5,r3
200839b4:	100d883a 	mov	r6,r2
200839b8:	00861500 	call	20086150 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
200839bc:	00800034 	movhi	r2,0
200839c0:	10874904 	addi	r2,r2,7460
200839c4:	10c00717 	ldw	r3,28(r2)
200839c8:	00800034 	movhi	r2,0
200839cc:	10874904 	addi	r2,r2,7460
200839d0:	10800817 	ldw	r2,32(r2)
200839d4:	01000034 	movhi	r4,0
200839d8:	21074904 	addi	r4,r4,7460
200839dc:	180b883a 	mov	r5,r3
200839e0:	100d883a 	mov	r6,r2
200839e4:	00861500 	call	20086150 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( WRITE_DMA_0, write_dma_0);
200839e8:	00800034 	movhi	r2,0
200839ec:	10876104 	addi	r2,r2,7556
200839f0:	10c00717 	ldw	r3,28(r2)
200839f4:	00800034 	movhi	r2,0
200839f8:	10876104 	addi	r2,r2,7556
200839fc:	10800817 	ldw	r2,32(r2)
20083a00:	01000034 	movhi	r4,0
20083a04:	21076104 	addi	r4,r4,7556
20083a08:	180b883a 	mov	r5,r3
20083a0c:	100d883a 	mov	r6,r2
20083a10:	00861500 	call	20086150 <alt_msgdma_init>
}
20083a14:	e037883a 	mov	sp,fp
20083a18:	dfc00117 	ldw	ra,4(sp)
20083a1c:	df000017 	ldw	fp,0(sp)
20083a20:	dec00204 	addi	sp,sp,8
20083a24:	f800283a 	ret

20083a28 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20083a28:	defffa04 	addi	sp,sp,-24
20083a2c:	dfc00515 	stw	ra,20(sp)
20083a30:	df000415 	stw	fp,16(sp)
20083a34:	df000404 	addi	fp,sp,16
20083a38:	e13ffd15 	stw	r4,-12(fp)
20083a3c:	e17ffe15 	stw	r5,-8(fp)
20083a40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20083a44:	e0bffd17 	ldw	r2,-12(fp)
20083a48:	10800017 	ldw	r2,0(r2)
20083a4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20083a50:	e0bffc17 	ldw	r2,-16(fp)
20083a54:	10c00a04 	addi	r3,r2,40
20083a58:	e0bffd17 	ldw	r2,-12(fp)
20083a5c:	10800217 	ldw	r2,8(r2)
20083a60:	1809883a 	mov	r4,r3
20083a64:	e17ffe17 	ldw	r5,-8(fp)
20083a68:	e1bfff17 	ldw	r6,-4(fp)
20083a6c:	100f883a 	mov	r7,r2
20083a70:	00840500 	call	20084050 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
20083a74:	e037883a 	mov	sp,fp
20083a78:	dfc00117 	ldw	ra,4(sp)
20083a7c:	df000017 	ldw	fp,0(sp)
20083a80:	dec00204 	addi	sp,sp,8
20083a84:	f800283a 	ret

20083a88 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
20083a88:	defffa04 	addi	sp,sp,-24
20083a8c:	dfc00515 	stw	ra,20(sp)
20083a90:	df000415 	stw	fp,16(sp)
20083a94:	df000404 	addi	fp,sp,16
20083a98:	e13ffd15 	stw	r4,-12(fp)
20083a9c:	e17ffe15 	stw	r5,-8(fp)
20083aa0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20083aa4:	e0bffd17 	ldw	r2,-12(fp)
20083aa8:	10800017 	ldw	r2,0(r2)
20083aac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20083ab0:	e0bffc17 	ldw	r2,-16(fp)
20083ab4:	10c00a04 	addi	r3,r2,40
20083ab8:	e0bffd17 	ldw	r2,-12(fp)
20083abc:	10800217 	ldw	r2,8(r2)
20083ac0:	1809883a 	mov	r4,r3
20083ac4:	e17ffe17 	ldw	r5,-8(fp)
20083ac8:	e1bfff17 	ldw	r6,-4(fp)
20083acc:	100f883a 	mov	r7,r2
20083ad0:	008425c0 	call	2008425c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
20083ad4:	e037883a 	mov	sp,fp
20083ad8:	dfc00117 	ldw	ra,4(sp)
20083adc:	df000017 	ldw	fp,0(sp)
20083ae0:	dec00204 	addi	sp,sp,8
20083ae4:	f800283a 	ret

20083ae8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20083ae8:	defffc04 	addi	sp,sp,-16
20083aec:	dfc00315 	stw	ra,12(sp)
20083af0:	df000215 	stw	fp,8(sp)
20083af4:	df000204 	addi	fp,sp,8
20083af8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20083afc:	e0bfff17 	ldw	r2,-4(fp)
20083b00:	10800017 	ldw	r2,0(r2)
20083b04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20083b08:	e0bffe17 	ldw	r2,-8(fp)
20083b0c:	10c00a04 	addi	r3,r2,40
20083b10:	e0bfff17 	ldw	r2,-4(fp)
20083b14:	10800217 	ldw	r2,8(r2)
20083b18:	1809883a 	mov	r4,r3
20083b1c:	100b883a 	mov	r5,r2
20083b20:	0083efc0 	call	20083efc <altera_avalon_jtag_uart_close>
}
20083b24:	e037883a 	mov	sp,fp
20083b28:	dfc00117 	ldw	ra,4(sp)
20083b2c:	df000017 	ldw	fp,0(sp)
20083b30:	dec00204 	addi	sp,sp,8
20083b34:	f800283a 	ret

20083b38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
20083b38:	defffa04 	addi	sp,sp,-24
20083b3c:	dfc00515 	stw	ra,20(sp)
20083b40:	df000415 	stw	fp,16(sp)
20083b44:	df000404 	addi	fp,sp,16
20083b48:	e13ffd15 	stw	r4,-12(fp)
20083b4c:	e17ffe15 	stw	r5,-8(fp)
20083b50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
20083b54:	e0bffd17 	ldw	r2,-12(fp)
20083b58:	10800017 	ldw	r2,0(r2)
20083b5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
20083b60:	e0bffc17 	ldw	r2,-16(fp)
20083b64:	10800a04 	addi	r2,r2,40
20083b68:	1009883a 	mov	r4,r2
20083b6c:	e17ffe17 	ldw	r5,-8(fp)
20083b70:	e1bfff17 	ldw	r6,-4(fp)
20083b74:	0083f640 	call	20083f64 <altera_avalon_jtag_uart_ioctl>
}
20083b78:	e037883a 	mov	sp,fp
20083b7c:	dfc00117 	ldw	ra,4(sp)
20083b80:	df000017 	ldw	fp,0(sp)
20083b84:	dec00204 	addi	sp,sp,8
20083b88:	f800283a 	ret

20083b8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20083b8c:	defffa04 	addi	sp,sp,-24
20083b90:	dfc00515 	stw	ra,20(sp)
20083b94:	df000415 	stw	fp,16(sp)
20083b98:	df000404 	addi	fp,sp,16
20083b9c:	e13ffd15 	stw	r4,-12(fp)
20083ba0:	e17ffe15 	stw	r5,-8(fp)
20083ba4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20083ba8:	e0bffd17 	ldw	r2,-12(fp)
20083bac:	00c00044 	movi	r3,1
20083bb0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20083bb4:	e0bffd17 	ldw	r2,-12(fp)
20083bb8:	10800017 	ldw	r2,0(r2)
20083bbc:	10800104 	addi	r2,r2,4
20083bc0:	1007883a 	mov	r3,r2
20083bc4:	e0bffd17 	ldw	r2,-12(fp)
20083bc8:	10800817 	ldw	r2,32(r2)
20083bcc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
20083bd0:	e0fffe17 	ldw	r3,-8(fp)
20083bd4:	e0bfff17 	ldw	r2,-4(fp)
20083bd8:	d8000015 	stw	zero,0(sp)
20083bdc:	1809883a 	mov	r4,r3
20083be0:	100b883a 	mov	r5,r2
20083be4:	01880234 	movhi	r6,8200
20083be8:	318f1404 	addi	r6,r6,15440
20083bec:	e1fffd17 	ldw	r7,-12(fp)
20083bf0:	00869480 	call	20086948 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
20083bf4:	e0bffd17 	ldw	r2,-12(fp)
20083bf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
20083bfc:	e0bffd17 	ldw	r2,-12(fp)
20083c00:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20083c04:	00800034 	movhi	r2,0
20083c08:	10879104 	addi	r2,r2,7748
20083c0c:	10800017 	ldw	r2,0(r2)
20083c10:	1809883a 	mov	r4,r3
20083c14:	100b883a 	mov	r5,r2
20083c18:	01880234 	movhi	r6,8200
20083c1c:	318f9504 	addi	r6,r6,15956
20083c20:	e1fffd17 	ldw	r7,-12(fp)
20083c24:	00864000 	call	20086400 <alt_alarm_start>
20083c28:	1000040e 	bge	r2,zero,20083c3c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
20083c2c:	e0fffd17 	ldw	r3,-12(fp)
20083c30:	00a00034 	movhi	r2,32768
20083c34:	10bfffc4 	addi	r2,r2,-1
20083c38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
20083c3c:	e037883a 	mov	sp,fp
20083c40:	dfc00117 	ldw	ra,4(sp)
20083c44:	df000017 	ldw	fp,0(sp)
20083c48:	dec00204 	addi	sp,sp,8
20083c4c:	f800283a 	ret

20083c50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
20083c50:	defff804 	addi	sp,sp,-32
20083c54:	df000715 	stw	fp,28(sp)
20083c58:	df000704 	addi	fp,sp,28
20083c5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20083c60:	e0bfff17 	ldw	r2,-4(fp)
20083c64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
20083c68:	e0bffb17 	ldw	r2,-20(fp)
20083c6c:	10800017 	ldw	r2,0(r2)
20083c70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20083c74:	e0bffc17 	ldw	r2,-16(fp)
20083c78:	10800104 	addi	r2,r2,4
20083c7c:	10800037 	ldwio	r2,0(r2)
20083c80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
20083c84:	e0bffd17 	ldw	r2,-12(fp)
20083c88:	1080c00c 	andi	r2,r2,768
20083c8c:	1000011e 	bne	r2,zero,20083c94 <altera_avalon_jtag_uart_irq+0x44>
      break;
20083c90:	00006c06 	br	20083e44 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20083c94:	e0bffd17 	ldw	r2,-12(fp)
20083c98:	1080400c 	andi	r2,r2,256
20083c9c:	10003426 	beq	r2,zero,20083d70 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20083ca0:	00800074 	movhi	r2,1
20083ca4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20083ca8:	e0bffb17 	ldw	r2,-20(fp)
20083cac:	10800a17 	ldw	r2,40(r2)
20083cb0:	10800044 	addi	r2,r2,1
20083cb4:	1081ffcc 	andi	r2,r2,2047
20083cb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
20083cbc:	e0bffb17 	ldw	r2,-20(fp)
20083cc0:	10c00b17 	ldw	r3,44(r2)
20083cc4:	e0bffe17 	ldw	r2,-8(fp)
20083cc8:	1880011e 	bne	r3,r2,20083cd0 <altera_avalon_jtag_uart_irq+0x80>
          break;
20083ccc:	00001606 	br	20083d28 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20083cd0:	e0bffc17 	ldw	r2,-16(fp)
20083cd4:	10800037 	ldwio	r2,0(r2)
20083cd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20083cdc:	e0bff917 	ldw	r2,-28(fp)
20083ce0:	10a0000c 	andi	r2,r2,32768
20083ce4:	1000011e 	bne	r2,zero,20083cec <altera_avalon_jtag_uart_irq+0x9c>
          break;
20083ce8:	00000f06 	br	20083d28 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20083cec:	e0bffb17 	ldw	r2,-20(fp)
20083cf0:	10800a17 	ldw	r2,40(r2)
20083cf4:	e0fff917 	ldw	r3,-28(fp)
20083cf8:	1809883a 	mov	r4,r3
20083cfc:	e0fffb17 	ldw	r3,-20(fp)
20083d00:	1885883a 	add	r2,r3,r2
20083d04:	10800e04 	addi	r2,r2,56
20083d08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20083d0c:	e0bffb17 	ldw	r2,-20(fp)
20083d10:	10800a17 	ldw	r2,40(r2)
20083d14:	10800044 	addi	r2,r2,1
20083d18:	10c1ffcc 	andi	r3,r2,2047
20083d1c:	e0bffb17 	ldw	r2,-20(fp)
20083d20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
20083d24:	003fe006 	br	20083ca8 <__flash_rwdata_start+0xffffbcd8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
20083d28:	e0bff917 	ldw	r2,-28(fp)
20083d2c:	10bfffec 	andhi	r2,r2,65535
20083d30:	10000f26 	beq	r2,zero,20083d70 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20083d34:	e0bffb17 	ldw	r2,-20(fp)
20083d38:	10c00817 	ldw	r3,32(r2)
20083d3c:	00bfff84 	movi	r2,-2
20083d40:	1886703a 	and	r3,r3,r2
20083d44:	e0bffb17 	ldw	r2,-20(fp)
20083d48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20083d4c:	e0bffc17 	ldw	r2,-16(fp)
20083d50:	10800104 	addi	r2,r2,4
20083d54:	1007883a 	mov	r3,r2
20083d58:	e0bffb17 	ldw	r2,-20(fp)
20083d5c:	10800817 	ldw	r2,32(r2)
20083d60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20083d64:	e0bffc17 	ldw	r2,-16(fp)
20083d68:	10800104 	addi	r2,r2,4
20083d6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20083d70:	e0bffd17 	ldw	r2,-12(fp)
20083d74:	1080800c 	andi	r2,r2,512
20083d78:	10003126 	beq	r2,zero,20083e40 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20083d7c:	e0bffd17 	ldw	r2,-12(fp)
20083d80:	1004d43a 	srli	r2,r2,16
20083d84:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
20083d88:	00001406 	br	20083ddc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
20083d8c:	e0bffc17 	ldw	r2,-16(fp)
20083d90:	e0fffb17 	ldw	r3,-20(fp)
20083d94:	18c00d17 	ldw	r3,52(r3)
20083d98:	e13ffb17 	ldw	r4,-20(fp)
20083d9c:	20c7883a 	add	r3,r4,r3
20083da0:	18c20e04 	addi	r3,r3,2104
20083da4:	18c00003 	ldbu	r3,0(r3)
20083da8:	18c03fcc 	andi	r3,r3,255
20083dac:	18c0201c 	xori	r3,r3,128
20083db0:	18ffe004 	addi	r3,r3,-128
20083db4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20083db8:	e0bffb17 	ldw	r2,-20(fp)
20083dbc:	10800d17 	ldw	r2,52(r2)
20083dc0:	10800044 	addi	r2,r2,1
20083dc4:	10c1ffcc 	andi	r3,r2,2047
20083dc8:	e0bffb17 	ldw	r2,-20(fp)
20083dcc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
20083dd0:	e0bffa17 	ldw	r2,-24(fp)
20083dd4:	10bfffc4 	addi	r2,r2,-1
20083dd8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20083ddc:	e0bffa17 	ldw	r2,-24(fp)
20083de0:	10000526 	beq	r2,zero,20083df8 <altera_avalon_jtag_uart_irq+0x1a8>
20083de4:	e0bffb17 	ldw	r2,-20(fp)
20083de8:	10c00d17 	ldw	r3,52(r2)
20083dec:	e0bffb17 	ldw	r2,-20(fp)
20083df0:	10800c17 	ldw	r2,48(r2)
20083df4:	18bfe51e 	bne	r3,r2,20083d8c <__flash_rwdata_start+0xffffbdbc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
20083df8:	e0bffa17 	ldw	r2,-24(fp)
20083dfc:	10001026 	beq	r2,zero,20083e40 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20083e00:	e0bffb17 	ldw	r2,-20(fp)
20083e04:	10c00817 	ldw	r3,32(r2)
20083e08:	00bfff44 	movi	r2,-3
20083e0c:	1886703a 	and	r3,r3,r2
20083e10:	e0bffb17 	ldw	r2,-20(fp)
20083e14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20083e18:	e0bffb17 	ldw	r2,-20(fp)
20083e1c:	10800017 	ldw	r2,0(r2)
20083e20:	10800104 	addi	r2,r2,4
20083e24:	1007883a 	mov	r3,r2
20083e28:	e0bffb17 	ldw	r2,-20(fp)
20083e2c:	10800817 	ldw	r2,32(r2)
20083e30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20083e34:	e0bffc17 	ldw	r2,-16(fp)
20083e38:	10800104 	addi	r2,r2,4
20083e3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
20083e40:	003f8c06 	br	20083c74 <__flash_rwdata_start+0xffffbca4>
}
20083e44:	e037883a 	mov	sp,fp
20083e48:	df000017 	ldw	fp,0(sp)
20083e4c:	dec00104 	addi	sp,sp,4
20083e50:	f800283a 	ret

20083e54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
20083e54:	defff804 	addi	sp,sp,-32
20083e58:	df000715 	stw	fp,28(sp)
20083e5c:	df000704 	addi	fp,sp,28
20083e60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20083e64:	e0bffb17 	ldw	r2,-20(fp)
20083e68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20083e6c:	e0bff917 	ldw	r2,-28(fp)
20083e70:	10800017 	ldw	r2,0(r2)
20083e74:	10800104 	addi	r2,r2,4
20083e78:	10800037 	ldwio	r2,0(r2)
20083e7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20083e80:	e0bffa17 	ldw	r2,-24(fp)
20083e84:	1081000c 	andi	r2,r2,1024
20083e88:	10000b26 	beq	r2,zero,20083eb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20083e8c:	e0bff917 	ldw	r2,-28(fp)
20083e90:	10800017 	ldw	r2,0(r2)
20083e94:	10800104 	addi	r2,r2,4
20083e98:	1007883a 	mov	r3,r2
20083e9c:	e0bff917 	ldw	r2,-28(fp)
20083ea0:	10800817 	ldw	r2,32(r2)
20083ea4:	10810014 	ori	r2,r2,1024
20083ea8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20083eac:	e0bff917 	ldw	r2,-28(fp)
20083eb0:	10000915 	stw	zero,36(r2)
20083eb4:	00000a06 	br	20083ee0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20083eb8:	e0bff917 	ldw	r2,-28(fp)
20083ebc:	10c00917 	ldw	r3,36(r2)
20083ec0:	00a00034 	movhi	r2,32768
20083ec4:	10bfff04 	addi	r2,r2,-4
20083ec8:	10c00536 	bltu	r2,r3,20083ee0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
20083ecc:	e0bff917 	ldw	r2,-28(fp)
20083ed0:	10800917 	ldw	r2,36(r2)
20083ed4:	10c00044 	addi	r3,r2,1
20083ed8:	e0bff917 	ldw	r2,-28(fp)
20083edc:	10c00915 	stw	r3,36(r2)
20083ee0:	00800034 	movhi	r2,0
20083ee4:	10879104 	addi	r2,r2,7748
20083ee8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20083eec:	e037883a 	mov	sp,fp
20083ef0:	df000017 	ldw	fp,0(sp)
20083ef4:	dec00104 	addi	sp,sp,4
20083ef8:	f800283a 	ret

20083efc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20083efc:	defffd04 	addi	sp,sp,-12
20083f00:	df000215 	stw	fp,8(sp)
20083f04:	df000204 	addi	fp,sp,8
20083f08:	e13ffe15 	stw	r4,-8(fp)
20083f0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20083f10:	00000506 	br	20083f28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20083f14:	e0bfff17 	ldw	r2,-4(fp)
20083f18:	1090000c 	andi	r2,r2,16384
20083f1c:	10000226 	beq	r2,zero,20083f28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20083f20:	00bffd44 	movi	r2,-11
20083f24:	00000b06 	br	20083f54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20083f28:	e0bffe17 	ldw	r2,-8(fp)
20083f2c:	10c00d17 	ldw	r3,52(r2)
20083f30:	e0bffe17 	ldw	r2,-8(fp)
20083f34:	10800c17 	ldw	r2,48(r2)
20083f38:	18800526 	beq	r3,r2,20083f50 <altera_avalon_jtag_uart_close+0x54>
20083f3c:	e0bffe17 	ldw	r2,-8(fp)
20083f40:	10c00917 	ldw	r3,36(r2)
20083f44:	e0bffe17 	ldw	r2,-8(fp)
20083f48:	10800117 	ldw	r2,4(r2)
20083f4c:	18bff136 	bltu	r3,r2,20083f14 <__flash_rwdata_start+0xffffbf44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
20083f50:	0005883a 	mov	r2,zero
}
20083f54:	e037883a 	mov	sp,fp
20083f58:	df000017 	ldw	fp,0(sp)
20083f5c:	dec00104 	addi	sp,sp,4
20083f60:	f800283a 	ret

20083f64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20083f64:	defffa04 	addi	sp,sp,-24
20083f68:	df000515 	stw	fp,20(sp)
20083f6c:	df000504 	addi	fp,sp,20
20083f70:	e13ffd15 	stw	r4,-12(fp)
20083f74:	e17ffe15 	stw	r5,-8(fp)
20083f78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20083f7c:	00bff9c4 	movi	r2,-25
20083f80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20083f84:	e0bffe17 	ldw	r2,-8(fp)
20083f88:	10da8060 	cmpeqi	r3,r2,27137
20083f8c:	1800031e 	bne	r3,zero,20083f9c <altera_avalon_jtag_uart_ioctl+0x38>
20083f90:	109a80a0 	cmpeqi	r2,r2,27138
20083f94:	1000191e 	bne	r2,zero,20083ffc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
20083f98:	00002806 	br	2008403c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20083f9c:	e0bffd17 	ldw	r2,-12(fp)
20083fa0:	10c00117 	ldw	r3,4(r2)
20083fa4:	00a00034 	movhi	r2,32768
20083fa8:	10bfffc4 	addi	r2,r2,-1
20083fac:	18801226 	beq	r3,r2,20083ff8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
20083fb0:	e0bfff17 	ldw	r2,-4(fp)
20083fb4:	10800017 	ldw	r2,0(r2)
20083fb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20083fbc:	e0bffc17 	ldw	r2,-16(fp)
20083fc0:	10800090 	cmplti	r2,r2,2
20083fc4:	1000061e 	bne	r2,zero,20083fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
20083fc8:	e0fffc17 	ldw	r3,-16(fp)
20083fcc:	00a00034 	movhi	r2,32768
20083fd0:	10bfffc4 	addi	r2,r2,-1
20083fd4:	18800226 	beq	r3,r2,20083fe0 <altera_avalon_jtag_uart_ioctl+0x7c>
20083fd8:	e0bffc17 	ldw	r2,-16(fp)
20083fdc:	00000206 	br	20083fe8 <altera_avalon_jtag_uart_ioctl+0x84>
20083fe0:	00a00034 	movhi	r2,32768
20083fe4:	10bfff84 	addi	r2,r2,-2
20083fe8:	e0fffd17 	ldw	r3,-12(fp)
20083fec:	18800115 	stw	r2,4(r3)
      rc = 0;
20083ff0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20083ff4:	00001106 	br	2008403c <altera_avalon_jtag_uart_ioctl+0xd8>
20083ff8:	00001006 	br	2008403c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
20083ffc:	e0bffd17 	ldw	r2,-12(fp)
20084000:	10c00117 	ldw	r3,4(r2)
20084004:	00a00034 	movhi	r2,32768
20084008:	10bfffc4 	addi	r2,r2,-1
2008400c:	18800a26 	beq	r3,r2,20084038 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20084010:	e0bffd17 	ldw	r2,-12(fp)
20084014:	10c00917 	ldw	r3,36(r2)
20084018:	e0bffd17 	ldw	r2,-12(fp)
2008401c:	10800117 	ldw	r2,4(r2)
20084020:	1885803a 	cmpltu	r2,r3,r2
20084024:	10c03fcc 	andi	r3,r2,255
20084028:	e0bfff17 	ldw	r2,-4(fp)
2008402c:	10c00015 	stw	r3,0(r2)
      rc = 0;
20084030:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20084034:	00000006 	br	20084038 <altera_avalon_jtag_uart_ioctl+0xd4>
20084038:	0001883a 	nop

  default:
    break;
  }

  return rc;
2008403c:	e0bffb17 	ldw	r2,-20(fp)
}
20084040:	e037883a 	mov	sp,fp
20084044:	df000017 	ldw	fp,0(sp)
20084048:	dec00104 	addi	sp,sp,4
2008404c:	f800283a 	ret

20084050 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20084050:	defff304 	addi	sp,sp,-52
20084054:	dfc00c15 	stw	ra,48(sp)
20084058:	df000b15 	stw	fp,44(sp)
2008405c:	df000b04 	addi	fp,sp,44
20084060:	e13ffc15 	stw	r4,-16(fp)
20084064:	e17ffd15 	stw	r5,-12(fp)
20084068:	e1bffe15 	stw	r6,-8(fp)
2008406c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
20084070:	e0bffd17 	ldw	r2,-12(fp)
20084074:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20084078:	00004906 	br	200841a0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
2008407c:	e0bffc17 	ldw	r2,-16(fp)
20084080:	10800a17 	ldw	r2,40(r2)
20084084:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
20084088:	e0bffc17 	ldw	r2,-16(fp)
2008408c:	10800b17 	ldw	r2,44(r2)
20084090:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
20084094:	e0fff717 	ldw	r3,-36(fp)
20084098:	e0bff817 	ldw	r2,-32(fp)
2008409c:	18800536 	bltu	r3,r2,200840b4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
200840a0:	e0fff717 	ldw	r3,-36(fp)
200840a4:	e0bff817 	ldw	r2,-32(fp)
200840a8:	1885c83a 	sub	r2,r3,r2
200840ac:	e0bff615 	stw	r2,-40(fp)
200840b0:	00000406 	br	200840c4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
200840b4:	00c20004 	movi	r3,2048
200840b8:	e0bff817 	ldw	r2,-32(fp)
200840bc:	1885c83a 	sub	r2,r3,r2
200840c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
200840c4:	e0bff617 	ldw	r2,-40(fp)
200840c8:	1000011e 	bne	r2,zero,200840d0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
200840cc:	00001d06 	br	20084144 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
200840d0:	e0fffe17 	ldw	r3,-8(fp)
200840d4:	e0bff617 	ldw	r2,-40(fp)
200840d8:	1880022e 	bgeu	r3,r2,200840e4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
200840dc:	e0bffe17 	ldw	r2,-8(fp)
200840e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
200840e4:	e0bff817 	ldw	r2,-32(fp)
200840e8:	10800e04 	addi	r2,r2,56
200840ec:	e0fffc17 	ldw	r3,-16(fp)
200840f0:	1885883a 	add	r2,r3,r2
200840f4:	e13ff517 	ldw	r4,-44(fp)
200840f8:	100b883a 	mov	r5,r2
200840fc:	e1bff617 	ldw	r6,-40(fp)
20084100:	00811640 	call	20081164 <memcpy>
      ptr   += n;
20084104:	e0fff517 	ldw	r3,-44(fp)
20084108:	e0bff617 	ldw	r2,-40(fp)
2008410c:	1885883a 	add	r2,r3,r2
20084110:	e0bff515 	stw	r2,-44(fp)
      space -= n;
20084114:	e0fffe17 	ldw	r3,-8(fp)
20084118:	e0bff617 	ldw	r2,-40(fp)
2008411c:	1885c83a 	sub	r2,r3,r2
20084120:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20084124:	e0fff817 	ldw	r3,-32(fp)
20084128:	e0bff617 	ldw	r2,-40(fp)
2008412c:	1885883a 	add	r2,r3,r2
20084130:	10c1ffcc 	andi	r3,r2,2047
20084134:	e0bffc17 	ldw	r2,-16(fp)
20084138:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
2008413c:	e0bffe17 	ldw	r2,-8(fp)
20084140:	00bfce16 	blt	zero,r2,2008407c <__flash_rwdata_start+0xffffc0ac>

    /* If we read any data then return it */
    if (ptr != buffer)
20084144:	e0fff517 	ldw	r3,-44(fp)
20084148:	e0bffd17 	ldw	r2,-12(fp)
2008414c:	18800126 	beq	r3,r2,20084154 <altera_avalon_jtag_uart_read+0x104>
      break;
20084150:	00001506 	br	200841a8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20084154:	e0bfff17 	ldw	r2,-4(fp)
20084158:	1090000c 	andi	r2,r2,16384
2008415c:	10000126 	beq	r2,zero,20084164 <altera_avalon_jtag_uart_read+0x114>
      break;
20084160:	00001106 	br	200841a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
20084164:	0001883a 	nop
20084168:	e0bffc17 	ldw	r2,-16(fp)
2008416c:	10c00a17 	ldw	r3,40(r2)
20084170:	e0bff717 	ldw	r2,-36(fp)
20084174:	1880051e 	bne	r3,r2,2008418c <altera_avalon_jtag_uart_read+0x13c>
20084178:	e0bffc17 	ldw	r2,-16(fp)
2008417c:	10c00917 	ldw	r3,36(r2)
20084180:	e0bffc17 	ldw	r2,-16(fp)
20084184:	10800117 	ldw	r2,4(r2)
20084188:	18bff736 	bltu	r3,r2,20084168 <__flash_rwdata_start+0xffffc198>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
2008418c:	e0bffc17 	ldw	r2,-16(fp)
20084190:	10c00a17 	ldw	r3,40(r2)
20084194:	e0bff717 	ldw	r2,-36(fp)
20084198:	1880011e 	bne	r3,r2,200841a0 <altera_avalon_jtag_uart_read+0x150>
      break;
2008419c:	00000206 	br	200841a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
200841a0:	e0bffe17 	ldw	r2,-8(fp)
200841a4:	00bfb516 	blt	zero,r2,2008407c <__flash_rwdata_start+0xffffc0ac>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
200841a8:	e0fff517 	ldw	r3,-44(fp)
200841ac:	e0bffd17 	ldw	r2,-12(fp)
200841b0:	18801826 	beq	r3,r2,20084214 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200841b4:	0005303a 	rdctl	r2,status
200841b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200841bc:	e0fffa17 	ldw	r3,-24(fp)
200841c0:	00bfff84 	movi	r2,-2
200841c4:	1884703a 	and	r2,r3,r2
200841c8:	1001703a 	wrctl	status,r2
  
  return context;
200841cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
200841d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
200841d4:	e0bffc17 	ldw	r2,-16(fp)
200841d8:	10800817 	ldw	r2,32(r2)
200841dc:	10c00054 	ori	r3,r2,1
200841e0:	e0bffc17 	ldw	r2,-16(fp)
200841e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200841e8:	e0bffc17 	ldw	r2,-16(fp)
200841ec:	10800017 	ldw	r2,0(r2)
200841f0:	10800104 	addi	r2,r2,4
200841f4:	1007883a 	mov	r3,r2
200841f8:	e0bffc17 	ldw	r2,-16(fp)
200841fc:	10800817 	ldw	r2,32(r2)
20084200:	18800035 	stwio	r2,0(r3)
20084204:	e0bff917 	ldw	r2,-28(fp)
20084208:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008420c:	e0bffb17 	ldw	r2,-20(fp)
20084210:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
20084214:	e0fff517 	ldw	r3,-44(fp)
20084218:	e0bffd17 	ldw	r2,-12(fp)
2008421c:	18800426 	beq	r3,r2,20084230 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
20084220:	e0fff517 	ldw	r3,-44(fp)
20084224:	e0bffd17 	ldw	r2,-12(fp)
20084228:	1885c83a 	sub	r2,r3,r2
2008422c:	00000606 	br	20084248 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
20084230:	e0bfff17 	ldw	r2,-4(fp)
20084234:	1090000c 	andi	r2,r2,16384
20084238:	10000226 	beq	r2,zero,20084244 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
2008423c:	00bffd44 	movi	r2,-11
20084240:	00000106 	br	20084248 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
20084244:	00bffec4 	movi	r2,-5
}
20084248:	e037883a 	mov	sp,fp
2008424c:	dfc00117 	ldw	ra,4(sp)
20084250:	df000017 	ldw	fp,0(sp)
20084254:	dec00204 	addi	sp,sp,8
20084258:	f800283a 	ret

2008425c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
2008425c:	defff304 	addi	sp,sp,-52
20084260:	dfc00c15 	stw	ra,48(sp)
20084264:	df000b15 	stw	fp,44(sp)
20084268:	df000b04 	addi	fp,sp,44
2008426c:	e13ffc15 	stw	r4,-16(fp)
20084270:	e17ffd15 	stw	r5,-12(fp)
20084274:	e1bffe15 	stw	r6,-8(fp)
20084278:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
2008427c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
20084280:	e0bffd17 	ldw	r2,-12(fp)
20084284:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20084288:	00003806 	br	2008436c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
2008428c:	e0bffc17 	ldw	r2,-16(fp)
20084290:	10800c17 	ldw	r2,48(r2)
20084294:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
20084298:	e0bffc17 	ldw	r2,-16(fp)
2008429c:	10800d17 	ldw	r2,52(r2)
200842a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
200842a4:	e0fff817 	ldw	r3,-32(fp)
200842a8:	e0bff517 	ldw	r2,-44(fp)
200842ac:	1880062e 	bgeu	r3,r2,200842c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
200842b0:	e0fff517 	ldw	r3,-44(fp)
200842b4:	e0bff817 	ldw	r2,-32(fp)
200842b8:	1885c83a 	sub	r2,r3,r2
200842bc:	10bfffc4 	addi	r2,r2,-1
200842c0:	e0bff615 	stw	r2,-40(fp)
200842c4:	00000b06 	br	200842f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
200842c8:	e0bff517 	ldw	r2,-44(fp)
200842cc:	10000526 	beq	r2,zero,200842e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
200842d0:	00c20004 	movi	r3,2048
200842d4:	e0bff817 	ldw	r2,-32(fp)
200842d8:	1885c83a 	sub	r2,r3,r2
200842dc:	e0bff615 	stw	r2,-40(fp)
200842e0:	00000406 	br	200842f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
200842e4:	00c1ffc4 	movi	r3,2047
200842e8:	e0bff817 	ldw	r2,-32(fp)
200842ec:	1885c83a 	sub	r2,r3,r2
200842f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
200842f4:	e0bff617 	ldw	r2,-40(fp)
200842f8:	1000011e 	bne	r2,zero,20084300 <altera_avalon_jtag_uart_write+0xa4>
        break;
200842fc:	00001d06 	br	20084374 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
20084300:	e0fffe17 	ldw	r3,-8(fp)
20084304:	e0bff617 	ldw	r2,-40(fp)
20084308:	1880022e 	bgeu	r3,r2,20084314 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
2008430c:	e0bffe17 	ldw	r2,-8(fp)
20084310:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
20084314:	e0bff817 	ldw	r2,-32(fp)
20084318:	10820e04 	addi	r2,r2,2104
2008431c:	e0fffc17 	ldw	r3,-16(fp)
20084320:	1885883a 	add	r2,r3,r2
20084324:	1009883a 	mov	r4,r2
20084328:	e17ffd17 	ldw	r5,-12(fp)
2008432c:	e1bff617 	ldw	r6,-40(fp)
20084330:	00811640 	call	20081164 <memcpy>
      ptr   += n;
20084334:	e0fffd17 	ldw	r3,-12(fp)
20084338:	e0bff617 	ldw	r2,-40(fp)
2008433c:	1885883a 	add	r2,r3,r2
20084340:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
20084344:	e0fffe17 	ldw	r3,-8(fp)
20084348:	e0bff617 	ldw	r2,-40(fp)
2008434c:	1885c83a 	sub	r2,r3,r2
20084350:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20084354:	e0fff817 	ldw	r3,-32(fp)
20084358:	e0bff617 	ldw	r2,-40(fp)
2008435c:	1885883a 	add	r2,r3,r2
20084360:	10c1ffcc 	andi	r3,r2,2047
20084364:	e0bffc17 	ldw	r2,-16(fp)
20084368:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
2008436c:	e0bffe17 	ldw	r2,-8(fp)
20084370:	00bfc616 	blt	zero,r2,2008428c <__flash_rwdata_start+0xffffc2bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084374:	0005303a 	rdctl	r2,status
20084378:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2008437c:	e0fffa17 	ldw	r3,-24(fp)
20084380:	00bfff84 	movi	r2,-2
20084384:	1884703a 	and	r2,r3,r2
20084388:	1001703a 	wrctl	status,r2
  
  return context;
2008438c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
20084390:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20084394:	e0bffc17 	ldw	r2,-16(fp)
20084398:	10800817 	ldw	r2,32(r2)
2008439c:	10c00094 	ori	r3,r2,2
200843a0:	e0bffc17 	ldw	r2,-16(fp)
200843a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200843a8:	e0bffc17 	ldw	r2,-16(fp)
200843ac:	10800017 	ldw	r2,0(r2)
200843b0:	10800104 	addi	r2,r2,4
200843b4:	1007883a 	mov	r3,r2
200843b8:	e0bffc17 	ldw	r2,-16(fp)
200843bc:	10800817 	ldw	r2,32(r2)
200843c0:	18800035 	stwio	r2,0(r3)
200843c4:	e0bff917 	ldw	r2,-28(fp)
200843c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200843cc:	e0bffb17 	ldw	r2,-20(fp)
200843d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
200843d4:	e0bffe17 	ldw	r2,-8(fp)
200843d8:	0080120e 	bge	zero,r2,20084424 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
200843dc:	e0bfff17 	ldw	r2,-4(fp)
200843e0:	1090000c 	andi	r2,r2,16384
200843e4:	10000126 	beq	r2,zero,200843ec <altera_avalon_jtag_uart_write+0x190>
        break;
200843e8:	00001006 	br	2008442c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
200843ec:	0001883a 	nop
200843f0:	e0bffc17 	ldw	r2,-16(fp)
200843f4:	10c00d17 	ldw	r3,52(r2)
200843f8:	e0bff517 	ldw	r2,-44(fp)
200843fc:	1880051e 	bne	r3,r2,20084414 <altera_avalon_jtag_uart_write+0x1b8>
20084400:	e0bffc17 	ldw	r2,-16(fp)
20084404:	10c00917 	ldw	r3,36(r2)
20084408:	e0bffc17 	ldw	r2,-16(fp)
2008440c:	10800117 	ldw	r2,4(r2)
20084410:	18bff736 	bltu	r3,r2,200843f0 <__flash_rwdata_start+0xffffc420>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20084414:	e0bffc17 	ldw	r2,-16(fp)
20084418:	10800917 	ldw	r2,36(r2)
2008441c:	10000126 	beq	r2,zero,20084424 <altera_avalon_jtag_uart_write+0x1c8>
         break;
20084420:	00000206 	br	2008442c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
20084424:	e0bffe17 	ldw	r2,-8(fp)
20084428:	00bf9716 	blt	zero,r2,20084288 <__flash_rwdata_start+0xffffc2b8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2008442c:	e0fffd17 	ldw	r3,-12(fp)
20084430:	e0bff717 	ldw	r2,-36(fp)
20084434:	18800426 	beq	r3,r2,20084448 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
20084438:	e0fffd17 	ldw	r3,-12(fp)
2008443c:	e0bff717 	ldw	r2,-36(fp)
20084440:	1885c83a 	sub	r2,r3,r2
20084444:	00000606 	br	20084460 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
20084448:	e0bfff17 	ldw	r2,-4(fp)
2008444c:	1090000c 	andi	r2,r2,16384
20084450:	10000226 	beq	r2,zero,2008445c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
20084454:	00bffd44 	movi	r2,-11
20084458:	00000106 	br	20084460 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
2008445c:	00bffec4 	movi	r2,-5
}
20084460:	e037883a 	mov	sp,fp
20084464:	dfc00117 	ldw	ra,4(sp)
20084468:	df000017 	ldw	fp,0(sp)
2008446c:	dec00204 	addi	sp,sp,8
20084470:	f800283a 	ret

20084474 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
20084474:	defffa04 	addi	sp,sp,-24
20084478:	dfc00515 	stw	ra,20(sp)
2008447c:	df000415 	stw	fp,16(sp)
20084480:	df000404 	addi	fp,sp,16
20084484:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
20084488:	0007883a 	mov	r3,zero
2008448c:	e0bfff17 	ldw	r2,-4(fp)
20084490:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
20084494:	e0bfff17 	ldw	r2,-4(fp)
20084498:	10800104 	addi	r2,r2,4
2008449c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200844a0:	0005303a 	rdctl	r2,status
200844a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200844a8:	e0fffd17 	ldw	r3,-12(fp)
200844ac:	00bfff84 	movi	r2,-2
200844b0:	1884703a 	and	r2,r3,r2
200844b4:	1001703a 	wrctl	status,r2
  
  return context;
200844b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
200844bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
200844c0:	00872c80 	call	200872c8 <alt_tick>
200844c4:	e0bffc17 	ldw	r2,-16(fp)
200844c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200844cc:	e0bffe17 	ldw	r2,-8(fp)
200844d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
200844d4:	e037883a 	mov	sp,fp
200844d8:	dfc00117 	ldw	ra,4(sp)
200844dc:	df000017 	ldw	fp,0(sp)
200844e0:	dec00204 	addi	sp,sp,8
200844e4:	f800283a 	ret

200844e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
200844e8:	defff804 	addi	sp,sp,-32
200844ec:	dfc00715 	stw	ra,28(sp)
200844f0:	df000615 	stw	fp,24(sp)
200844f4:	df000604 	addi	fp,sp,24
200844f8:	e13ffc15 	stw	r4,-16(fp)
200844fc:	e17ffd15 	stw	r5,-12(fp)
20084500:	e1bffe15 	stw	r6,-8(fp)
20084504:	e1ffff15 	stw	r7,-4(fp)
20084508:	e0bfff17 	ldw	r2,-4(fp)
2008450c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
20084510:	00800034 	movhi	r2,0
20084514:	10879104 	addi	r2,r2,7748
20084518:	10800017 	ldw	r2,0(r2)
2008451c:	1000041e 	bne	r2,zero,20084530 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
20084520:	00800034 	movhi	r2,0
20084524:	10879104 	addi	r2,r2,7748
20084528:	e0fffb17 	ldw	r3,-20(fp)
2008452c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
20084530:	e0bffc17 	ldw	r2,-16(fp)
20084534:	10800104 	addi	r2,r2,4
20084538:	00c001c4 	movi	r3,7
2008453c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
20084540:	d8000015 	stw	zero,0(sp)
20084544:	e13ffd17 	ldw	r4,-12(fp)
20084548:	e17ffe17 	ldw	r5,-8(fp)
2008454c:	01880234 	movhi	r6,8200
20084550:	31911d04 	addi	r6,r6,17524
20084554:	e1fffc17 	ldw	r7,-16(fp)
20084558:	00869480 	call	20086948 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
2008455c:	e037883a 	mov	sp,fp
20084560:	dfc00117 	ldw	ra,4(sp)
20084564:	df000017 	ldw	fp,0(sp)
20084568:	dec00204 	addi	sp,sp,8
2008456c:	f800283a 	ret

20084570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20084570:	defffe04 	addi	sp,sp,-8
20084574:	dfc00115 	stw	ra,4(sp)
20084578:	df000015 	stw	fp,0(sp)
2008457c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20084580:	00800034 	movhi	r2,0
20084584:	10878204 	addi	r2,r2,7688
20084588:	10800017 	ldw	r2,0(r2)
2008458c:	10000526 	beq	r2,zero,200845a4 <alt_get_errno+0x34>
20084590:	00800034 	movhi	r2,0
20084594:	10878204 	addi	r2,r2,7688
20084598:	10800017 	ldw	r2,0(r2)
2008459c:	103ee83a 	callr	r2
200845a0:	00000206 	br	200845ac <alt_get_errno+0x3c>
200845a4:	00800034 	movhi	r2,0
200845a8:	10878c04 	addi	r2,r2,7728
}
200845ac:	e037883a 	mov	sp,fp
200845b0:	dfc00117 	ldw	ra,4(sp)
200845b4:	df000017 	ldw	fp,0(sp)
200845b8:	dec00204 	addi	sp,sp,8
200845bc:	f800283a 	ret

200845c0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
200845c0:	defffc04 	addi	sp,sp,-16
200845c4:	df000315 	stw	fp,12(sp)
200845c8:	df000304 	addi	fp,sp,12
200845cc:	e13ffd15 	stw	r4,-12(fp)
200845d0:	e17ffe15 	stw	r5,-8(fp)
200845d4:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
200845d8:	e0bffd17 	ldw	r2,-12(fp)
200845dc:	10800037 	ldwio	r2,0(r2)
200845e0:	1080010c 	andi	r2,r2,4
200845e4:	10000226 	beq	r2,zero,200845f0 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
200845e8:	00bff904 	movi	r2,-28
200845ec:	00001506 	br	20084644 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
200845f0:	e0bfff17 	ldw	r2,-4(fp)
200845f4:	10800017 	ldw	r2,0(r2)
200845f8:	1007883a 	mov	r3,r2
200845fc:	e0bffe17 	ldw	r2,-8(fp)
20084600:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
20084604:	e0bffe17 	ldw	r2,-8(fp)
20084608:	10800104 	addi	r2,r2,4
2008460c:	e0ffff17 	ldw	r3,-4(fp)
20084610:	18c00117 	ldw	r3,4(r3)
20084614:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
20084618:	e0bffe17 	ldw	r2,-8(fp)
2008461c:	10800204 	addi	r2,r2,8
20084620:	e0ffff17 	ldw	r3,-4(fp)
20084624:	18c00217 	ldw	r3,8(r3)
20084628:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
2008462c:	e0bffe17 	ldw	r2,-8(fp)
20084630:	10800304 	addi	r2,r2,12
20084634:	e0ffff17 	ldw	r3,-4(fp)
20084638:	18c00317 	ldw	r3,12(r3)
2008463c:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
20084640:	0005883a 	mov	r2,zero
}
20084644:	e037883a 	mov	sp,fp
20084648:	df000017 	ldw	fp,0(sp)
2008464c:	dec00104 	addi	sp,sp,4
20084650:	f800283a 	ret

20084654 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
20084654:	defffc04 	addi	sp,sp,-16
20084658:	df000315 	stw	fp,12(sp)
2008465c:	df000304 	addi	fp,sp,12
20084660:	e13ffd15 	stw	r4,-12(fp)
20084664:	e17ffe15 	stw	r5,-8(fp)
20084668:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2008466c:	e0bffd17 	ldw	r2,-12(fp)
20084670:	10800037 	ldwio	r2,0(r2)
20084674:	1080010c 	andi	r2,r2,4
20084678:	10000226 	beq	r2,zero,20084684 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
2008467c:	00bff904 	movi	r2,-28
20084680:	00003b06 	br	20084770 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
20084684:	e0bfff17 	ldw	r2,-4(fp)
20084688:	10800017 	ldw	r2,0(r2)
2008468c:	1007883a 	mov	r3,r2
20084690:	e0bffe17 	ldw	r2,-8(fp)
20084694:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
20084698:	e0bffe17 	ldw	r2,-8(fp)
2008469c:	10800104 	addi	r2,r2,4
200846a0:	e0ffff17 	ldw	r3,-4(fp)
200846a4:	18c00117 	ldw	r3,4(r3)
200846a8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
200846ac:	e0bffe17 	ldw	r2,-8(fp)
200846b0:	10800204 	addi	r2,r2,8
200846b4:	e0ffff17 	ldw	r3,-4(fp)
200846b8:	18c00217 	ldw	r3,8(r3)
200846bc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
200846c0:	e0bffe17 	ldw	r2,-8(fp)
200846c4:	10800304 	addi	r2,r2,12
200846c8:	e0ffff17 	ldw	r3,-4(fp)
200846cc:	18c0030b 	ldhu	r3,12(r3)
200846d0:	18ffffcc 	andi	r3,r3,65535
200846d4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
200846d8:	e0bffe17 	ldw	r2,-8(fp)
200846dc:	10800384 	addi	r2,r2,14
200846e0:	e0ffff17 	ldw	r3,-4(fp)
200846e4:	18c00383 	ldbu	r3,14(r3)
200846e8:	18c03fcc 	andi	r3,r3,255
200846ec:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
200846f0:	e0bffe17 	ldw	r2,-8(fp)
200846f4:	108003c4 	addi	r2,r2,15
200846f8:	e0ffff17 	ldw	r3,-4(fp)
200846fc:	18c003c3 	ldbu	r3,15(r3)
20084700:	18c03fcc 	andi	r3,r3,255
20084704:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
20084708:	e0bffe17 	ldw	r2,-8(fp)
2008470c:	10800404 	addi	r2,r2,16
20084710:	e0ffff17 	ldw	r3,-4(fp)
20084714:	18c0040b 	ldhu	r3,16(r3)
20084718:	18ffffcc 	andi	r3,r3,65535
2008471c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
20084720:	e0bffe17 	ldw	r2,-8(fp)
20084724:	10800484 	addi	r2,r2,18
20084728:	e0ffff17 	ldw	r3,-4(fp)
2008472c:	18c0048b 	ldhu	r3,18(r3)
20084730:	18ffffcc 	andi	r3,r3,65535
20084734:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
20084738:	e0bffe17 	ldw	r2,-8(fp)
2008473c:	10800504 	addi	r2,r2,20
20084740:	0007883a 	mov	r3,zero
20084744:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
20084748:	e0bffe17 	ldw	r2,-8(fp)
2008474c:	10800604 	addi	r2,r2,24
20084750:	0007883a 	mov	r3,zero
20084754:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
20084758:	e0bffe17 	ldw	r2,-8(fp)
2008475c:	10800704 	addi	r2,r2,28
20084760:	e0ffff17 	ldw	r3,-4(fp)
20084764:	18c00717 	ldw	r3,28(r3)
20084768:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
2008476c:	0005883a 	mov	r2,zero
}
20084770:	e037883a 	mov	sp,fp
20084774:	df000017 	ldw	fp,0(sp)
20084778:	dec00104 	addi	sp,sp,4
2008477c:	f800283a 	ret

20084780 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
20084780:	defff804 	addi	sp,sp,-32
20084784:	dfc00715 	stw	ra,28(sp)
20084788:	df000615 	stw	fp,24(sp)
2008478c:	df000604 	addi	fp,sp,24
20084790:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
20084794:	e0bfff17 	ldw	r2,-4(fp)
20084798:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
2008479c:	e0bffa17 	ldw	r2,-24(fp)
200847a0:	10801783 	ldbu	r2,94(r2)
200847a4:	10803fcc 	andi	r2,r2,255
200847a8:	10001126 	beq	r2,zero,200847f0 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
200847ac:	e0bffa17 	ldw	r2,-24(fp)
200847b0:	10800617 	ldw	r2,24(r2)
200847b4:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
200847b8:	1007883a 	mov	r3,r2
200847bc:	00bffdc4 	movi	r2,-9
200847c0:	1884703a 	and	r2,r3,r2
200847c4:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
200847c8:	e0bffa17 	ldw	r2,-24(fp)
200847cc:	10800617 	ldw	r2,24(r2)
200847d0:	e0fffb17 	ldw	r3,-20(fp)
200847d4:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
200847d8:	e0bffa17 	ldw	r2,-24(fp)
200847dc:	10800617 	ldw	r2,24(r2)
200847e0:	10800404 	addi	r2,r2,16
200847e4:	00c00044 	movi	r3,1
200847e8:	10c00035 	stwio	r3,0(r2)
200847ec:	00001106 	br	20084834 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
200847f0:	e0bffa17 	ldw	r2,-24(fp)
200847f4:	10800317 	ldw	r2,12(r2)
200847f8:	10800104 	addi	r2,r2,4
200847fc:	10800037 	ldwio	r2,0(r2)
20084800:	1007883a 	mov	r3,r2
20084804:	00bffbc4 	movi	r2,-17
20084808:	1884703a 	and	r2,r3,r2
2008480c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20084810:	e0bffa17 	ldw	r2,-24(fp)
20084814:	10800317 	ldw	r2,12(r2)
20084818:	10800104 	addi	r2,r2,4
2008481c:	e0fffb17 	ldw	r3,-20(fp)
20084820:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
20084824:	e0bffa17 	ldw	r2,-24(fp)
20084828:	10800317 	ldw	r2,12(r2)
2008482c:	00c08004 	movi	r3,512
20084830:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
20084834:	e0bffa17 	ldw	r2,-24(fp)
20084838:	10800b17 	ldw	r2,44(r2)
2008483c:	10001226 	beq	r2,zero,20084888 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084840:	0005303a 	rdctl	r2,status
20084844:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20084848:	e0fffd17 	ldw	r3,-12(fp)
2008484c:	00bfff84 	movi	r2,-2
20084850:	1884703a 	and	r2,r3,r2
20084854:	1001703a 	wrctl	status,r2
  
  return context;
20084858:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
2008485c:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
20084860:	e0bffa17 	ldw	r2,-24(fp)
20084864:	10800b17 	ldw	r2,44(r2)
20084868:	e0fffa17 	ldw	r3,-24(fp)
2008486c:	18c00c17 	ldw	r3,48(r3)
20084870:	1809883a 	mov	r4,r3
20084874:	103ee83a 	callr	r2
20084878:	e0bffc17 	ldw	r2,-16(fp)
2008487c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20084880:	e0bffe17 	ldw	r2,-8(fp)
20084884:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
20084888:	e0bffa17 	ldw	r2,-24(fp)
2008488c:	10801783 	ldbu	r2,94(r2)
20084890:	10803fcc 	andi	r2,r2,255
20084894:	10000a26 	beq	r2,zero,200848c0 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
20084898:	e0bffa17 	ldw	r2,-24(fp)
2008489c:	10800617 	ldw	r2,24(r2)
200848a0:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
200848a4:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
200848a8:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
200848ac:	e0bffa17 	ldw	r2,-24(fp)
200848b0:	10800617 	ldw	r2,24(r2)
200848b4:	e0fffb17 	ldw	r3,-20(fp)
200848b8:	10c00035 	stwio	r3,0(r2)
200848bc:	00000b06 	br	200848ec <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
200848c0:	e0bffa17 	ldw	r2,-24(fp)
200848c4:	10800317 	ldw	r2,12(r2)
200848c8:	10800104 	addi	r2,r2,4
200848cc:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
200848d0:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
200848d4:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
200848d8:	e0bffa17 	ldw	r2,-24(fp)
200848dc:	10800317 	ldw	r2,12(r2)
200848e0:	10800104 	addi	r2,r2,4
200848e4:	e0fffb17 	ldw	r3,-20(fp)
200848e8:	10c00035 	stwio	r3,0(r2)
    }

    return;
200848ec:	0001883a 	nop
}
200848f0:	e037883a 	mov	sp,fp
200848f4:	dfc00117 	ldw	ra,4(sp)
200848f8:	df000017 	ldw	fp,0(sp)
200848fc:	dec00204 	addi	sp,sp,8
20084900:	f800283a 	ret

20084904 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20084904:	defffb04 	addi	sp,sp,-20
20084908:	df000415 	stw	fp,16(sp)
2008490c:	df000404 	addi	fp,sp,16
20084910:	e13ffc15 	stw	r4,-16(fp)
20084914:	e17ffd15 	stw	r5,-12(fp)
20084918:	e1bffe15 	stw	r6,-8(fp)
2008491c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
20084920:	e0bffc17 	ldw	r2,-16(fp)
20084924:	10c01217 	ldw	r3,72(r2)
20084928:	e0800117 	ldw	r2,4(fp)
2008492c:	18800436 	bltu	r3,r2,20084940 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
20084930:	e0bffc17 	ldw	r2,-16(fp)
20084934:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20084938:	10803fcc 	andi	r2,r2,255
2008493c:	10000226 	beq	r2,zero,20084948 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20084940:	00bffa84 	movi	r2,-22
20084944:	00000e06 	br	20084980 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
20084948:	e0bffd17 	ldw	r2,-12(fp)
2008494c:	e0fffe17 	ldw	r3,-8(fp)
20084950:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
20084954:	e0bffd17 	ldw	r2,-12(fp)
20084958:	e0ffff17 	ldw	r3,-4(fp)
2008495c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20084960:	e0bffd17 	ldw	r2,-12(fp)
20084964:	e0c00117 	ldw	r3,4(fp)
20084968:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2008496c:	e0800217 	ldw	r2,8(fp)
20084970:	10e00034 	orhi	r3,r2,32768
20084974:	e0bffd17 	ldw	r2,-12(fp)
20084978:	10c00315 	stw	r3,12(r2)
    
    return 0;
2008497c:	0005883a 	mov	r2,zero
}
20084980:	e037883a 	mov	sp,fp
20084984:	df000017 	ldw	fp,0(sp)
20084988:	dec00104 	addi	sp,sp,4
2008498c:	f800283a 	ret

20084990 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20084990:	defff604 	addi	sp,sp,-40
20084994:	df000915 	stw	fp,36(sp)
20084998:	df000904 	addi	fp,sp,36
2008499c:	e13ff715 	stw	r4,-36(fp)
200849a0:	e17ff815 	stw	r5,-32(fp)
200849a4:	e1bff915 	stw	r6,-28(fp)
200849a8:	e1fffa15 	stw	r7,-24(fp)
200849ac:	e1800317 	ldw	r6,12(fp)
200849b0:	e1400417 	ldw	r5,16(fp)
200849b4:	e1000517 	ldw	r4,20(fp)
200849b8:	e0c00617 	ldw	r3,24(fp)
200849bc:	e0800717 	ldw	r2,28(fp)
200849c0:	e1bffb0d 	sth	r6,-20(fp)
200849c4:	e17ffc05 	stb	r5,-16(fp)
200849c8:	e13ffd05 	stb	r4,-12(fp)
200849cc:	e0fffe0d 	sth	r3,-8(fp)
200849d0:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
200849d4:	e0bff717 	ldw	r2,-36(fp)
200849d8:	10c01217 	ldw	r3,72(r2)
200849dc:	e0800117 	ldw	r2,4(fp)
200849e0:	18801936 	bltu	r3,r2,20084a48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
200849e4:	e13ff717 	ldw	r4,-36(fp)
200849e8:	20801317 	ldw	r2,76(r4)
200849ec:	20c01417 	ldw	r3,80(r4)
200849f0:	e13ffe0b 	ldhu	r4,-8(fp)
200849f4:	213fffcc 	andi	r4,r4,65535
200849f8:	2015883a 	mov	r10,r4
200849fc:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20084a00:	1ac01136 	bltu	r3,r11,20084a48 <alt_msgdma_construct_extended_descriptor+0xb8>
20084a04:	58c0011e 	bne	r11,r3,20084a0c <alt_msgdma_construct_extended_descriptor+0x7c>
20084a08:	12800f36 	bltu	r2,r10,20084a48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20084a0c:	e13ff717 	ldw	r4,-36(fp)
20084a10:	20801317 	ldw	r2,76(r4)
20084a14:	20c01417 	ldw	r3,80(r4)
20084a18:	e13fff0b 	ldhu	r4,-4(fp)
20084a1c:	213fffcc 	andi	r4,r4,65535
20084a20:	2011883a 	mov	r8,r4
20084a24:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20084a28:	1a400736 	bltu	r3,r9,20084a48 <alt_msgdma_construct_extended_descriptor+0xb8>
20084a2c:	48c0011e 	bne	r9,r3,20084a34 <alt_msgdma_construct_extended_descriptor+0xa4>
20084a30:	12000536 	bltu	r2,r8,20084a48 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
20084a34:	e0bff717 	ldw	r2,-36(fp)
20084a38:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20084a3c:	10803fcc 	andi	r2,r2,255
20084a40:	10800060 	cmpeqi	r2,r2,1
20084a44:	1000021e 	bne	r2,zero,20084a50 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20084a48:	00bffa84 	movi	r2,-22
20084a4c:	00002106 	br	20084ad4 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
20084a50:	e0bff817 	ldw	r2,-32(fp)
20084a54:	e0fff917 	ldw	r3,-28(fp)
20084a58:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
20084a5c:	e0bff817 	ldw	r2,-32(fp)
20084a60:	e0fffa17 	ldw	r3,-24(fp)
20084a64:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20084a68:	e0bff817 	ldw	r2,-32(fp)
20084a6c:	e0c00117 	ldw	r3,4(fp)
20084a70:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
20084a74:	e0bff817 	ldw	r2,-32(fp)
20084a78:	e0fffb0b 	ldhu	r3,-20(fp)
20084a7c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
20084a80:	e0bff817 	ldw	r2,-32(fp)
20084a84:	e0fffc03 	ldbu	r3,-16(fp)
20084a88:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
20084a8c:	e0bff817 	ldw	r2,-32(fp)
20084a90:	e0fffd03 	ldbu	r3,-12(fp)
20084a94:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
20084a98:	e0bff817 	ldw	r2,-32(fp)
20084a9c:	e0fffe0b 	ldhu	r3,-8(fp)
20084aa0:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
20084aa4:	e0bff817 	ldw	r2,-32(fp)
20084aa8:	e0ffff0b 	ldhu	r3,-4(fp)
20084aac:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
20084ab0:	e0bff817 	ldw	r2,-32(fp)
20084ab4:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
20084ab8:	e0bff817 	ldw	r2,-32(fp)
20084abc:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20084ac0:	e0800217 	ldw	r2,8(fp)
20084ac4:	10e00034 	orhi	r3,r2,32768
20084ac8:	e0bff817 	ldw	r2,-32(fp)
20084acc:	10c00715 	stw	r3,28(r2)

  return 0 ;
20084ad0:	0005883a 	mov	r2,zero

}
20084ad4:	e037883a 	mov	sp,fp
20084ad8:	df000017 	ldw	fp,0(sp)
20084adc:	dec00104 	addi	sp,sp,4
20084ae0:	f800283a 	ret

20084ae4 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
20084ae4:	defff004 	addi	sp,sp,-64
20084ae8:	dfc00f15 	stw	ra,60(sp)
20084aec:	df000e15 	stw	fp,56(sp)
20084af0:	df000e04 	addi	fp,sp,56
20084af4:	e13ffd15 	stw	r4,-12(fp)
20084af8:	e17ffe15 	stw	r5,-8(fp)
20084afc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
20084b00:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
20084b04:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
20084b08:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084b0c:	e0bffd17 	ldw	r2,-12(fp)
20084b10:	10800317 	ldw	r2,12(r2)
20084b14:	10800204 	addi	r2,r2,8
20084b18:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20084b1c:	10bfffcc 	andi	r2,r2,65535
20084b20:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084b24:	e0bffd17 	ldw	r2,-12(fp)
20084b28:	10800317 	ldw	r2,12(r2)
20084b2c:	10800204 	addi	r2,r2,8
20084b30:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20084b34:	1004d43a 	srli	r2,r2,16
20084b38:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20084b3c:	e0bffd17 	ldw	r2,-12(fp)
20084b40:	10800917 	ldw	r2,36(r2)
20084b44:	e0fff617 	ldw	r3,-40(fp)
20084b48:	1880042e 	bgeu	r3,r2,20084b5c <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
20084b4c:	e0bffd17 	ldw	r2,-12(fp)
20084b50:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20084b54:	e0fff517 	ldw	r3,-44(fp)
20084b58:	18800236 	bltu	r3,r2,20084b64 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
20084b5c:	00bff904 	movi	r2,-28
20084b60:	00008f06 	br	20084da0 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
20084b64:	00800804 	movi	r2,32
20084b68:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084b6c:	0005303a 	rdctl	r2,status
20084b70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20084b74:	e0fff717 	ldw	r3,-36(fp)
20084b78:	00bfff84 	movi	r2,-2
20084b7c:	1884703a 	and	r2,r3,r2
20084b80:	1001703a 	wrctl	status,r2
  
  return context;
20084b84:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
20084b88:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20084b8c:	e0bffd17 	ldw	r2,-12(fp)
20084b90:	10800317 	ldw	r2,12(r2)
20084b94:	10800104 	addi	r2,r2,4
20084b98:	e0fff317 	ldw	r3,-52(fp)
20084b9c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
20084ba0:	e0bffd17 	ldw	r2,-12(fp)
20084ba4:	10800317 	ldw	r2,12(r2)
20084ba8:	e0fffd17 	ldw	r3,-12(fp)
20084bac:	18c00317 	ldw	r3,12(r3)
20084bb0:	18c00037 	ldwio	r3,0(r3)
20084bb4:	10c00035 	stwio	r3,0(r2)
20084bb8:	e0bff417 	ldw	r2,-48(fp)
20084bbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20084bc0:	e0bff817 	ldw	r2,-32(fp)
20084bc4:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20084bc8:	e0bffe17 	ldw	r2,-8(fp)
20084bcc:	10001a26 	beq	r2,zero,20084c38 <alt_msgdma_descriptor_async_transfer+0x154>
20084bd0:	e0bfff17 	ldw	r2,-4(fp)
20084bd4:	1000181e 	bne	r2,zero,20084c38 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20084bd8:	00000d06 	br	20084c10 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20084bdc:	01000044 	movi	r4,1
20084be0:	00865400 	call	20086540 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20084be4:	e0bff20b 	ldhu	r2,-56(fp)
20084be8:	1084e230 	cmpltui	r2,r2,5000
20084bec:	1000051e 	bne	r2,zero,20084c04 <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
20084bf0:	01000034 	movhi	r4,0
20084bf4:	21002804 	addi	r4,r4,160
20084bf8:	0086fc40 	call	20086fc4 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20084bfc:	00bff084 	movi	r2,-62
20084c00:	00006706 	br	20084da0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
20084c04:	e0bff20b 	ldhu	r2,-56(fp)
20084c08:	10800044 	addi	r2,r2,1
20084c0c:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20084c10:	e0bffd17 	ldw	r2,-12(fp)
20084c14:	10c00317 	ldw	r3,12(r2)
20084c18:	e0bffd17 	ldw	r2,-12(fp)
20084c1c:	10800417 	ldw	r2,16(r2)
20084c20:	1809883a 	mov	r4,r3
20084c24:	100b883a 	mov	r5,r2
20084c28:	e1bffe17 	ldw	r6,-8(fp)
20084c2c:	00845c00 	call	200845c0 <alt_msgdma_write_standard_descriptor>
20084c30:	103fea1e 	bne	r2,zero,20084bdc <__flash_rwdata_start+0xffffcc0c>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20084c34:	00001f06 	br	20084cb4 <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20084c38:	e0bffe17 	ldw	r2,-8(fp)
20084c3c:	10001b1e 	bne	r2,zero,20084cac <alt_msgdma_descriptor_async_transfer+0x1c8>
20084c40:	e0bfff17 	ldw	r2,-4(fp)
20084c44:	10001926 	beq	r2,zero,20084cac <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
20084c48:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20084c4c:	00000d06 	br	20084c84 <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20084c50:	01000044 	movi	r4,1
20084c54:	00865400 	call	20086540 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20084c58:	e0bff20b 	ldhu	r2,-56(fp)
20084c5c:	1084e230 	cmpltui	r2,r2,5000
20084c60:	1000051e 	bne	r2,zero,20084c78 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
20084c64:	01000034 	movhi	r4,0
20084c68:	21003e04 	addi	r4,r4,248
20084c6c:	0086fc40 	call	20086fc4 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20084c70:	00bff084 	movi	r2,-62
20084c74:	00004a06 	br	20084da0 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
20084c78:	e0bff20b 	ldhu	r2,-56(fp)
20084c7c:	10800044 	addi	r2,r2,1
20084c80:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20084c84:	e0bffd17 	ldw	r2,-12(fp)
20084c88:	10c00317 	ldw	r3,12(r2)
20084c8c:	e0bffd17 	ldw	r2,-12(fp)
20084c90:	10800417 	ldw	r2,16(r2)
20084c94:	1809883a 	mov	r4,r3
20084c98:	100b883a 	mov	r5,r2
20084c9c:	e1bfff17 	ldw	r6,-4(fp)
20084ca0:	00846540 	call	20084654 <alt_msgdma_write_extended_descriptor>
20084ca4:	103fea1e 	bne	r2,zero,20084c50 <__flash_rwdata_start+0xffffcc80>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20084ca8:	00000206 	br	20084cb4 <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20084cac:	00bfffc4 	movi	r2,-1
20084cb0:	00003b06 	br	20084da0 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
20084cb4:	e0bffd17 	ldw	r2,-12(fp)
20084cb8:	10800b17 	ldw	r2,44(r2)
20084cbc:	10001c26 	beq	r2,zero,20084d30 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
20084cc0:	e0bffd17 	ldw	r2,-12(fp)
20084cc4:	10c00d17 	ldw	r3,52(r2)
20084cc8:	e0bff317 	ldw	r2,-52(fp)
20084ccc:	1884b03a 	or	r2,r3,r2
20084cd0:	10800514 	ori	r2,r2,20
20084cd4:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20084cd8:	e0fff317 	ldw	r3,-52(fp)
20084cdc:	00bff7c4 	movi	r2,-33
20084ce0:	1884703a 	and	r2,r3,r2
20084ce4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084ce8:	0005303a 	rdctl	r2,status
20084cec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20084cf0:	e0fff917 	ldw	r3,-28(fp)
20084cf4:	00bfff84 	movi	r2,-2
20084cf8:	1884703a 	and	r2,r3,r2
20084cfc:	1001703a 	wrctl	status,r2
  
  return context;
20084d00:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
20084d04:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20084d08:	e0bffd17 	ldw	r2,-12(fp)
20084d0c:	10800317 	ldw	r2,12(r2)
20084d10:	10800104 	addi	r2,r2,4
20084d14:	e0fff317 	ldw	r3,-52(fp)
20084d18:	10c00035 	stwio	r3,0(r2)
20084d1c:	e0bff417 	ldw	r2,-48(fp)
20084d20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20084d24:	e0bffa17 	ldw	r2,-24(fp)
20084d28:	1001703a 	wrctl	status,r2
20084d2c:	00001b06 	br	20084d9c <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
20084d30:	e0bffd17 	ldw	r2,-12(fp)
20084d34:	10c00d17 	ldw	r3,52(r2)
20084d38:	e0bff317 	ldw	r2,-52(fp)
20084d3c:	1884b03a 	or	r2,r3,r2
20084d40:	10800114 	ori	r2,r2,4
20084d44:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
20084d48:	e0fff317 	ldw	r3,-52(fp)
20084d4c:	00bff3c4 	movi	r2,-49
20084d50:	1884703a 	and	r2,r3,r2
20084d54:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084d58:	0005303a 	rdctl	r2,status
20084d5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20084d60:	e0fffb17 	ldw	r3,-20(fp)
20084d64:	00bfff84 	movi	r2,-2
20084d68:	1884703a 	and	r2,r3,r2
20084d6c:	1001703a 	wrctl	status,r2
  
  return context;
20084d70:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
20084d74:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20084d78:	e0bffd17 	ldw	r2,-12(fp)
20084d7c:	10800317 	ldw	r2,12(r2)
20084d80:	10800104 	addi	r2,r2,4
20084d84:	e0fff317 	ldw	r3,-52(fp)
20084d88:	10c00035 	stwio	r3,0(r2)
20084d8c:	e0bff417 	ldw	r2,-48(fp)
20084d90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20084d94:	e0bffc17 	ldw	r2,-16(fp)
20084d98:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
20084d9c:	0005883a 	mov	r2,zero
}
20084da0:	e037883a 	mov	sp,fp
20084da4:	dfc00117 	ldw	ra,4(sp)
20084da8:	df000017 	ldw	fp,0(sp)
20084dac:	dec00204 	addi	sp,sp,8
20084db0:	f800283a 	ret

20084db4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
20084db4:	defff004 	addi	sp,sp,-64
20084db8:	dfc00f15 	stw	ra,60(sp)
20084dbc:	df000e15 	stw	fp,56(sp)
20084dc0:	df000e04 	addi	fp,sp,56
20084dc4:	e13ffd15 	stw	r4,-12(fp)
20084dc8:	e17ffe15 	stw	r5,-8(fp)
20084dcc:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
20084dd0:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
20084dd4:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
20084dd8:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
20084ddc:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084de0:	e0bffd17 	ldw	r2,-12(fp)
20084de4:	10800317 	ldw	r2,12(r2)
20084de8:	10800204 	addi	r2,r2,8
20084dec:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20084df0:	10bfffcc 	andi	r2,r2,65535
20084df4:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084df8:	e0bffd17 	ldw	r2,-12(fp)
20084dfc:	10800317 	ldw	r2,12(r2)
20084e00:	10800204 	addi	r2,r2,8
20084e04:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20084e08:	1004d43a 	srli	r2,r2,16
20084e0c:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
20084e10:	00807804 	movi	r2,480
20084e14:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20084e18:	00001906 	br	20084e80 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20084e1c:	01000044 	movi	r4,1
20084e20:	00865400 	call	20086540 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20084e24:	e0bff30b 	ldhu	r2,-52(fp)
20084e28:	1084e230 	cmpltui	r2,r2,5000
20084e2c:	1000051e 	bne	r2,zero,20084e44 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
20084e30:	01000034 	movhi	r4,0
20084e34:	21005404 	addi	r4,r4,336
20084e38:	0086fc40 	call	20086fc4 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
20084e3c:	00bff084 	movi	r2,-62
20084e40:	0000b506 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
20084e44:	e0bff30b 	ldhu	r2,-52(fp)
20084e48:	10800044 	addi	r2,r2,1
20084e4c:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084e50:	e0bffd17 	ldw	r2,-12(fp)
20084e54:	10800317 	ldw	r2,12(r2)
20084e58:	10800204 	addi	r2,r2,8
20084e5c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
20084e60:	10bfffcc 	andi	r2,r2,65535
20084e64:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20084e68:	e0bffd17 	ldw	r2,-12(fp)
20084e6c:	10800317 	ldw	r2,12(r2)
20084e70:	10800204 	addi	r2,r2,8
20084e74:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
20084e78:	1004d43a 	srli	r2,r2,16
20084e7c:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20084e80:	e0bffd17 	ldw	r2,-12(fp)
20084e84:	10800917 	ldw	r2,36(r2)
20084e88:	e0fff517 	ldw	r3,-44(fp)
20084e8c:	18bfe32e 	bgeu	r3,r2,20084e1c <__flash_rwdata_start+0xffffce4c>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
20084e90:	e0bffd17 	ldw	r2,-12(fp)
20084e94:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20084e98:	e0fff417 	ldw	r3,-48(fp)
20084e9c:	18bfdf2e 	bgeu	r3,r2,20084e1c <__flash_rwdata_start+0xffffce4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20084ea0:	0005303a 	rdctl	r2,status
20084ea4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20084ea8:	e0fff917 	ldw	r3,-28(fp)
20084eac:	00bfff84 	movi	r2,-2
20084eb0:	1884703a 	and	r2,r3,r2
20084eb4:	1001703a 	wrctl	status,r2
  
  return context;
20084eb8:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
20084ebc:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20084ec0:	e0bffd17 	ldw	r2,-12(fp)
20084ec4:	10800317 	ldw	r2,12(r2)
20084ec8:	10800104 	addi	r2,r2,4
20084ecc:	00c00804 	movi	r3,32
20084ed0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
20084ed4:	e0bffd17 	ldw	r2,-12(fp)
20084ed8:	10800317 	ldw	r2,12(r2)
20084edc:	e0fffd17 	ldw	r3,-12(fp)
20084ee0:	18c00317 	ldw	r3,12(r3)
20084ee4:	18c00037 	ldwio	r3,0(r3)
20084ee8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20084eec:	e0bffe17 	ldw	r2,-8(fp)
20084ef0:	10001b26 	beq	r2,zero,20084f60 <alt_msgdma_descriptor_sync_transfer+0x1ac>
20084ef4:	e0bfff17 	ldw	r2,-4(fp)
20084ef8:	1000191e 	bne	r2,zero,20084f60 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
20084efc:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20084f00:	00000d06 	br	20084f38 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
20084f04:	01000044 	movi	r4,1
20084f08:	00865400 	call	20086540 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20084f0c:	e0bff30b 	ldhu	r2,-52(fp)
20084f10:	1084e230 	cmpltui	r2,r2,5000
20084f14:	1000051e 	bne	r2,zero,20084f2c <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
20084f18:	01000034 	movhi	r4,0
20084f1c:	21006804 	addi	r4,r4,416
20084f20:	0086fc40 	call	20086fc4 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20084f24:	00bff084 	movi	r2,-62
20084f28:	00007b06 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
20084f2c:	e0bff30b 	ldhu	r2,-52(fp)
20084f30:	10800044 	addi	r2,r2,1
20084f34:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20084f38:	e0bffd17 	ldw	r2,-12(fp)
20084f3c:	10c00317 	ldw	r3,12(r2)
20084f40:	e0bffd17 	ldw	r2,-12(fp)
20084f44:	10800417 	ldw	r2,16(r2)
20084f48:	1809883a 	mov	r4,r3
20084f4c:	100b883a 	mov	r5,r2
20084f50:	e1bffe17 	ldw	r6,-8(fp)
20084f54:	00845c00 	call	200845c0 <alt_msgdma_write_standard_descriptor>
20084f58:	103fea1e 	bne	r2,zero,20084f04 <__flash_rwdata_start+0xffffcf34>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20084f5c:	00001f06 	br	20084fdc <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20084f60:	e0bffe17 	ldw	r2,-8(fp)
20084f64:	10001b1e 	bne	r2,zero,20084fd4 <alt_msgdma_descriptor_sync_transfer+0x220>
20084f68:	e0bfff17 	ldw	r2,-4(fp)
20084f6c:	10001926 	beq	r2,zero,20084fd4 <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
20084f70:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20084f74:	00000d06 	br	20084fac <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20084f78:	01000044 	movi	r4,1
20084f7c:	00865400 	call	20086540 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20084f80:	e0bff30b 	ldhu	r2,-52(fp)
20084f84:	1084e230 	cmpltui	r2,r2,5000
20084f88:	1000051e 	bne	r2,zero,20084fa0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
20084f8c:	01000034 	movhi	r4,0
20084f90:	21007904 	addi	r4,r4,484
20084f94:	0086fc40 	call	20086fc4 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20084f98:	00bff084 	movi	r2,-62
20084f9c:	00005e06 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
20084fa0:	e0bff30b 	ldhu	r2,-52(fp)
20084fa4:	10800044 	addi	r2,r2,1
20084fa8:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20084fac:	e0bffd17 	ldw	r2,-12(fp)
20084fb0:	10c00317 	ldw	r3,12(r2)
20084fb4:	e0bffd17 	ldw	r2,-12(fp)
20084fb8:	10800417 	ldw	r2,16(r2)
20084fbc:	1809883a 	mov	r4,r3
20084fc0:	100b883a 	mov	r5,r2
20084fc4:	e1bfff17 	ldw	r6,-4(fp)
20084fc8:	00846540 	call	20084654 <alt_msgdma_write_extended_descriptor>
20084fcc:	103fea1e 	bne	r2,zero,20084f78 <__flash_rwdata_start+0xffffcfa8>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20084fd0:	00000206 	br	20084fdc <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20084fd4:	00bfffc4 	movi	r2,-1
20084fd8:	00004f06 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20084fdc:	e0bffd17 	ldw	r2,-12(fp)
20084fe0:	10800317 	ldw	r2,12(r2)
20084fe4:	10800104 	addi	r2,r2,4
20084fe8:	e0fffd17 	ldw	r3,-12(fp)
20084fec:	19000d17 	ldw	r4,52(r3)
20084ff0:	00fff2c4 	movi	r3,-53
20084ff4:	20c6703a 	and	r3,r4,r3
20084ff8:	18c00114 	ori	r3,r3,4
20084ffc:	10c00035 	stwio	r3,0(r2)
20085000:	e0bff717 	ldw	r2,-36(fp)
20085004:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20085008:	e0bffa17 	ldw	r2,-24(fp)
2008500c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
20085010:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20085014:	e0bffd17 	ldw	r2,-12(fp)
20085018:	10800317 	ldw	r2,12(r2)
2008501c:	10800037 	ldwio	r2,0(r2)
20085020:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20085024:	00001106 	br	2008506c <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
20085028:	01000044 	movi	r4,1
2008502c:	00865400 	call	20086540 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20085030:	e0bff30b 	ldhu	r2,-52(fp)
20085034:	1084e230 	cmpltui	r2,r2,5000
20085038:	1000051e 	bne	r2,zero,20085050 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2008503c:	01000034 	movhi	r4,0
20085040:	21008a04 	addi	r4,r4,552
20085044:	0086fc40 	call	20086fc4 <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
20085048:	00bff084 	movi	r2,-62
2008504c:	00003206 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
20085050:	e0bff30b 	ldhu	r2,-52(fp)
20085054:	10800044 	addi	r2,r2,1
20085058:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2008505c:	e0bffd17 	ldw	r2,-12(fp)
20085060:	10800317 	ldw	r2,12(r2)
20085064:	10800037 	ldwio	r2,0(r2)
20085068:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2008506c:	e0fff217 	ldw	r3,-56(fp)
20085070:	e0bff817 	ldw	r2,-32(fp)
20085074:	1884703a 	and	r2,r3,r2
20085078:	1000031e 	bne	r2,zero,20085088 <alt_msgdma_descriptor_sync_transfer+0x2d4>
2008507c:	e0bff217 	ldw	r2,-56(fp)
20085080:	1080004c 	andi	r2,r2,1
20085084:	103fe81e 	bne	r2,zero,20085028 <__flash_rwdata_start+0xffffd058>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
20085088:	e0fff217 	ldw	r3,-56(fp)
2008508c:	e0bff817 	ldw	r2,-32(fp)
20085090:	1884703a 	and	r2,r3,r2
20085094:	10000226 	beq	r2,zero,200850a0 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
20085098:	e0bff817 	ldw	r2,-32(fp)
2008509c:	00001e06 	br	20085118 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
200850a0:	e0bffd17 	ldw	r2,-12(fp)
200850a4:	10800317 	ldw	r2,12(r2)
200850a8:	10800104 	addi	r2,r2,4
200850ac:	10800037 	ldwio	r2,0(r2)
200850b0:	10800814 	ori	r2,r2,32
200850b4:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200850b8:	0005303a 	rdctl	r2,status
200850bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200850c0:	e0fffb17 	ldw	r3,-20(fp)
200850c4:	00bfff84 	movi	r2,-2
200850c8:	1884703a 	and	r2,r3,r2
200850cc:	1001703a 	wrctl	status,r2
  
  return context;
200850d0:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
200850d4:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
200850d8:	e0bffd17 	ldw	r2,-12(fp)
200850dc:	10800317 	ldw	r2,12(r2)
200850e0:	10800104 	addi	r2,r2,4
200850e4:	e0fff617 	ldw	r3,-40(fp)
200850e8:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
200850ec:	e0bffd17 	ldw	r2,-12(fp)
200850f0:	10800317 	ldw	r2,12(r2)
200850f4:	e0fffd17 	ldw	r3,-12(fp)
200850f8:	18c00317 	ldw	r3,12(r3)
200850fc:	18c00037 	ldwio	r3,0(r3)
20085100:	10c00035 	stwio	r3,0(r2)
20085104:	e0bff717 	ldw	r2,-36(fp)
20085108:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2008510c:	e0bffc17 	ldw	r2,-16(fp)
20085110:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
20085114:	0005883a 	mov	r2,zero

}
20085118:	e037883a 	mov	sp,fp
2008511c:	dfc00117 	ldw	ra,4(sp)
20085120:	df000017 	ldw	fp,0(sp)
20085124:	dec00204 	addi	sp,sp,8
20085128:	f800283a 	ret

2008512c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
2008512c:	defff804 	addi	sp,sp,-32
20085130:	dfc00715 	stw	ra,28(sp)
20085134:	df000615 	stw	fp,24(sp)
20085138:	df000604 	addi	fp,sp,24
2008513c:	e13ffc15 	stw	r4,-16(fp)
20085140:	e17ffd15 	stw	r5,-12(fp)
20085144:	e1bffe15 	stw	r6,-8(fp)
20085148:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
2008514c:	e0bfff17 	ldw	r2,-4(fp)
20085150:	d8800015 	stw	r2,0(sp)
20085154:	e0800217 	ldw	r2,8(fp)
20085158:	d8800115 	stw	r2,4(sp)
2008515c:	e13ffc17 	ldw	r4,-16(fp)
20085160:	e17ffd17 	ldw	r5,-12(fp)
20085164:	000d883a 	mov	r6,zero
20085168:	e1fffe17 	ldw	r7,-8(fp)
2008516c:	00849040 	call	20084904 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
20085170:	e037883a 	mov	sp,fp
20085174:	dfc00117 	ldw	ra,4(sp)
20085178:	df000017 	ldw	fp,0(sp)
2008517c:	dec00204 	addi	sp,sp,8
20085180:	f800283a 	ret

20085184 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
20085184:	defff804 	addi	sp,sp,-32
20085188:	dfc00715 	stw	ra,28(sp)
2008518c:	df000615 	stw	fp,24(sp)
20085190:	df000604 	addi	fp,sp,24
20085194:	e13ffc15 	stw	r4,-16(fp)
20085198:	e17ffd15 	stw	r5,-12(fp)
2008519c:	e1bffe15 	stw	r6,-8(fp)
200851a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
200851a4:	e0bfff17 	ldw	r2,-4(fp)
200851a8:	d8800015 	stw	r2,0(sp)
200851ac:	e0800217 	ldw	r2,8(fp)
200851b0:	d8800115 	stw	r2,4(sp)
200851b4:	e13ffc17 	ldw	r4,-16(fp)
200851b8:	e17ffd17 	ldw	r5,-12(fp)
200851bc:	e1bffe17 	ldw	r6,-8(fp)
200851c0:	000f883a 	mov	r7,zero
200851c4:	00849040 	call	20084904 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
200851c8:	e037883a 	mov	sp,fp
200851cc:	dfc00117 	ldw	ra,4(sp)
200851d0:	df000017 	ldw	fp,0(sp)
200851d4:	dec00204 	addi	sp,sp,8
200851d8:	f800283a 	ret

200851dc <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
200851dc:	defff804 	addi	sp,sp,-32
200851e0:	dfc00715 	stw	ra,28(sp)
200851e4:	df000615 	stw	fp,24(sp)
200851e8:	df000604 	addi	fp,sp,24
200851ec:	e13ffc15 	stw	r4,-16(fp)
200851f0:	e17ffd15 	stw	r5,-12(fp)
200851f4:	e1bffe15 	stw	r6,-8(fp)
200851f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
200851fc:	e0800217 	ldw	r2,8(fp)
20085200:	d8800015 	stw	r2,0(sp)
20085204:	e0800317 	ldw	r2,12(fp)
20085208:	d8800115 	stw	r2,4(sp)
2008520c:	e13ffc17 	ldw	r4,-16(fp)
20085210:	e17ffd17 	ldw	r5,-12(fp)
20085214:	e1bffe17 	ldw	r6,-8(fp)
20085218:	e1ffff17 	ldw	r7,-4(fp)
2008521c:	00849040 	call	20084904 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
20085220:	e037883a 	mov	sp,fp
20085224:	dfc00117 	ldw	ra,4(sp)
20085228:	df000017 	ldw	fp,0(sp)
2008522c:	dec00204 	addi	sp,sp,8
20085230:	f800283a 	ret

20085234 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
20085234:	defff004 	addi	sp,sp,-64
20085238:	dfc00f15 	stw	ra,60(sp)
2008523c:	df000e15 	stw	fp,56(sp)
20085240:	df000e04 	addi	fp,sp,56
20085244:	e13ff915 	stw	r4,-28(fp)
20085248:	e17ffa15 	stw	r5,-24(fp)
2008524c:	e1bffb15 	stw	r6,-20(fp)
20085250:	e1fffc15 	stw	r7,-16(fp)
20085254:	e1000317 	ldw	r4,12(fp)
20085258:	e0c00417 	ldw	r3,16(fp)
2008525c:	e0800517 	ldw	r2,20(fp)
20085260:	e13ffd0d 	sth	r4,-12(fp)
20085264:	e0fffe05 	stb	r3,-8(fp)
20085268:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008526c:	e13ffd0b 	ldhu	r4,-12(fp)
20085270:	e0fffe03 	ldbu	r3,-8(fp)
20085274:	e0bfff0b 	ldhu	r2,-4(fp)
20085278:	e17ffc17 	ldw	r5,-16(fp)
2008527c:	d9400015 	stw	r5,0(sp)
20085280:	e1400217 	ldw	r5,8(fp)
20085284:	d9400115 	stw	r5,4(sp)
20085288:	d9000215 	stw	r4,8(sp)
2008528c:	d8000315 	stw	zero,12(sp)
20085290:	d8c00415 	stw	r3,16(sp)
20085294:	d8000515 	stw	zero,20(sp)
20085298:	d8800615 	stw	r2,24(sp)
2008529c:	e13ff917 	ldw	r4,-28(fp)
200852a0:	e17ffa17 	ldw	r5,-24(fp)
200852a4:	000d883a 	mov	r6,zero
200852a8:	e1fffb17 	ldw	r7,-20(fp)
200852ac:	00849900 	call	20084990 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
200852b0:	e037883a 	mov	sp,fp
200852b4:	dfc00117 	ldw	ra,4(sp)
200852b8:	df000017 	ldw	fp,0(sp)
200852bc:	dec00204 	addi	sp,sp,8
200852c0:	f800283a 	ret

200852c4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
200852c4:	defff004 	addi	sp,sp,-64
200852c8:	dfc00f15 	stw	ra,60(sp)
200852cc:	df000e15 	stw	fp,56(sp)
200852d0:	df000e04 	addi	fp,sp,56
200852d4:	e13ff915 	stw	r4,-28(fp)
200852d8:	e17ffa15 	stw	r5,-24(fp)
200852dc:	e1bffb15 	stw	r6,-20(fp)
200852e0:	e1fffc15 	stw	r7,-16(fp)
200852e4:	e1000317 	ldw	r4,12(fp)
200852e8:	e0c00417 	ldw	r3,16(fp)
200852ec:	e0800517 	ldw	r2,20(fp)
200852f0:	e13ffd0d 	sth	r4,-12(fp)
200852f4:	e0fffe05 	stb	r3,-8(fp)
200852f8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
200852fc:	e13ffd0b 	ldhu	r4,-12(fp)
20085300:	e0fffe03 	ldbu	r3,-8(fp)
20085304:	e0bfff0b 	ldhu	r2,-4(fp)
20085308:	e17ffc17 	ldw	r5,-16(fp)
2008530c:	d9400015 	stw	r5,0(sp)
20085310:	e1400217 	ldw	r5,8(fp)
20085314:	d9400115 	stw	r5,4(sp)
20085318:	d9000215 	stw	r4,8(sp)
2008531c:	d8c00315 	stw	r3,12(sp)
20085320:	d8000415 	stw	zero,16(sp)
20085324:	d8800515 	stw	r2,20(sp)
20085328:	d8000615 	stw	zero,24(sp)
2008532c:	e13ff917 	ldw	r4,-28(fp)
20085330:	e17ffa17 	ldw	r5,-24(fp)
20085334:	e1bffb17 	ldw	r6,-20(fp)
20085338:	000f883a 	mov	r7,zero
2008533c:	00849900 	call	20084990 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
20085340:	e037883a 	mov	sp,fp
20085344:	dfc00117 	ldw	ra,4(sp)
20085348:	df000017 	ldw	fp,0(sp)
2008534c:	dec00204 	addi	sp,sp,8
20085350:	f800283a 	ret

20085354 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
20085354:	deffee04 	addi	sp,sp,-72
20085358:	dfc01115 	stw	ra,68(sp)
2008535c:	df001015 	stw	fp,64(sp)
20085360:	df001004 	addi	fp,sp,64
20085364:	e13ff715 	stw	r4,-36(fp)
20085368:	e17ff815 	stw	r5,-32(fp)
2008536c:	e1bff915 	stw	r6,-28(fp)
20085370:	e1fffa15 	stw	r7,-24(fp)
20085374:	e1800417 	ldw	r6,16(fp)
20085378:	e1400517 	ldw	r5,20(fp)
2008537c:	e1000617 	ldw	r4,24(fp)
20085380:	e0c00717 	ldw	r3,28(fp)
20085384:	e0800817 	ldw	r2,32(fp)
20085388:	e1bffb0d 	sth	r6,-20(fp)
2008538c:	e17ffc05 	stb	r5,-16(fp)
20085390:	e13ffd05 	stb	r4,-12(fp)
20085394:	e0fffe0d 	sth	r3,-8(fp)
20085398:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
2008539c:	e1bffb0b 	ldhu	r6,-20(fp)
200853a0:	e17ffc03 	ldbu	r5,-16(fp)
200853a4:	e13ffd03 	ldbu	r4,-12(fp)
200853a8:	e0fffe0b 	ldhu	r3,-8(fp)
200853ac:	e0bfff0b 	ldhu	r2,-4(fp)
200853b0:	e1c00217 	ldw	r7,8(fp)
200853b4:	d9c00015 	stw	r7,0(sp)
200853b8:	e1c00317 	ldw	r7,12(fp)
200853bc:	d9c00115 	stw	r7,4(sp)
200853c0:	d9800215 	stw	r6,8(sp)
200853c4:	d9400315 	stw	r5,12(sp)
200853c8:	d9000415 	stw	r4,16(sp)
200853cc:	d8c00515 	stw	r3,20(sp)
200853d0:	d8800615 	stw	r2,24(sp)
200853d4:	e13ff717 	ldw	r4,-36(fp)
200853d8:	e17ff817 	ldw	r5,-32(fp)
200853dc:	e1bff917 	ldw	r6,-28(fp)
200853e0:	e1fffa17 	ldw	r7,-24(fp)
200853e4:	00849900 	call	20084990 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
200853e8:	e037883a 	mov	sp,fp
200853ec:	dfc00117 	ldw	ra,4(sp)
200853f0:	df000017 	ldw	fp,0(sp)
200853f4:	dec00204 	addi	sp,sp,8
200853f8:	f800283a 	ret

200853fc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
200853fc:	defffb04 	addi	sp,sp,-20
20085400:	df000415 	stw	fp,16(sp)
20085404:	df000404 	addi	fp,sp,16
20085408:	e13ffc15 	stw	r4,-16(fp)
2008540c:	e17ffd15 	stw	r5,-12(fp)
20085410:	e1bffe15 	stw	r6,-8(fp)
20085414:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
20085418:	e0bffc17 	ldw	r2,-16(fp)
2008541c:	10c01217 	ldw	r3,72(r2)
20085420:	e0800117 	ldw	r2,4(fp)
20085424:	18800436 	bltu	r3,r2,20085438 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
20085428:	e0bffc17 	ldw	r2,-16(fp)
2008542c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20085430:	10803fcc 	andi	r2,r2,255
20085434:	10000226 	beq	r2,zero,20085440 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20085438:	00bffa84 	movi	r2,-22
2008543c:	00001406 	br	20085490 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
20085440:	e0bffd17 	ldw	r2,-12(fp)
20085444:	e0fffe17 	ldw	r3,-8(fp)
20085448:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2008544c:	e0bffd17 	ldw	r2,-12(fp)
20085450:	e0ffff17 	ldw	r3,-4(fp)
20085454:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20085458:	e0bffd17 	ldw	r2,-12(fp)
2008545c:	e0c00117 	ldw	r3,4(fp)
20085460:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
20085464:	e0fffd17 	ldw	r3,-12(fp)
20085468:	e0bffd17 	ldw	r2,-12(fp)
2008546c:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20085470:	e0c00217 	ldw	r3,8(fp)
20085474:	00900034 	movhi	r2,16384
20085478:	10bfffc4 	addi	r2,r2,-1
2008547c:	1884703a 	and	r2,r3,r2
20085480:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
20085484:	e0bffd17 	ldw	r2,-12(fp)
20085488:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2008548c:	0005883a 	mov	r2,zero
}
20085490:	e037883a 	mov	sp,fp
20085494:	df000017 	ldw	fp,0(sp)
20085498:	dec00104 	addi	sp,sp,4
2008549c:	f800283a 	ret

200854a0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
200854a0:	defff404 	addi	sp,sp,-48
200854a4:	df000b15 	stw	fp,44(sp)
200854a8:	df000b04 	addi	fp,sp,44
200854ac:	e13ff715 	stw	r4,-36(fp)
200854b0:	e17ff815 	stw	r5,-32(fp)
200854b4:	e1bff915 	stw	r6,-28(fp)
200854b8:	e1fffa15 	stw	r7,-24(fp)
200854bc:	e1800517 	ldw	r6,20(fp)
200854c0:	e1400617 	ldw	r5,24(fp)
200854c4:	e1000717 	ldw	r4,28(fp)
200854c8:	e0c00817 	ldw	r3,32(fp)
200854cc:	e0800917 	ldw	r2,36(fp)
200854d0:	e1bffb0d 	sth	r6,-20(fp)
200854d4:	e17ffc05 	stb	r5,-16(fp)
200854d8:	e13ffd05 	stb	r4,-12(fp)
200854dc:	e0fffe0d 	sth	r3,-8(fp)
200854e0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
200854e4:	e0bff717 	ldw	r2,-36(fp)
200854e8:	10c01217 	ldw	r3,72(r2)
200854ec:	e0800317 	ldw	r2,12(fp)
200854f0:	18801936 	bltu	r3,r2,20085558 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
200854f4:	e13ff717 	ldw	r4,-36(fp)
200854f8:	20801317 	ldw	r2,76(r4)
200854fc:	20c01417 	ldw	r3,80(r4)
20085500:	e13ffe0b 	ldhu	r4,-8(fp)
20085504:	213fffcc 	andi	r4,r4,65535
20085508:	2015883a 	mov	r10,r4
2008550c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20085510:	1ac01136 	bltu	r3,r11,20085558 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
20085514:	58c0011e 	bne	r11,r3,2008551c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
20085518:	12800f36 	bltu	r2,r10,20085558 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008551c:	e13ff717 	ldw	r4,-36(fp)
20085520:	20801317 	ldw	r2,76(r4)
20085524:	20c01417 	ldw	r3,80(r4)
20085528:	e13fff0b 	ldhu	r4,-4(fp)
2008552c:	213fffcc 	andi	r4,r4,65535
20085530:	2011883a 	mov	r8,r4
20085534:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20085538:	1a400736 	bltu	r3,r9,20085558 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2008553c:	48c0011e 	bne	r9,r3,20085544 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
20085540:	12000536 	bltu	r2,r8,20085558 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
20085544:	e0bff717 	ldw	r2,-36(fp)
20085548:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2008554c:	10803fcc 	andi	r2,r2,255
20085550:	10800060 	cmpeqi	r2,r2,1
20085554:	1000021e 	bne	r2,zero,20085560 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20085558:	00bffa84 	movi	r2,-22
2008555c:	00003106 	br	20085624 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
20085560:	e0bff817 	ldw	r2,-32(fp)
20085564:	e0fff917 	ldw	r3,-28(fp)
20085568:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
2008556c:	e0bff817 	ldw	r2,-32(fp)
20085570:	e0fffa17 	ldw	r3,-24(fp)
20085574:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
20085578:	e0bff817 	ldw	r2,-32(fp)
2008557c:	e0c00117 	ldw	r3,4(fp)
20085580:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
20085584:	e0bff817 	ldw	r2,-32(fp)
20085588:	e0c00217 	ldw	r3,8(fp)
2008558c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
20085590:	e0bff817 	ldw	r2,-32(fp)
20085594:	e0c00317 	ldw	r3,12(fp)
20085598:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
2008559c:	e0bff817 	ldw	r2,-32(fp)
200855a0:	e0fffb0b 	ldhu	r3,-20(fp)
200855a4:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
200855a8:	e0bff817 	ldw	r2,-32(fp)
200855ac:	e0fffc03 	ldbu	r3,-16(fp)
200855b0:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
200855b4:	e0bff817 	ldw	r2,-32(fp)
200855b8:	e0fffd03 	ldbu	r3,-12(fp)
200855bc:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
200855c0:	e0bff817 	ldw	r2,-32(fp)
200855c4:	e0fffe0b 	ldhu	r3,-8(fp)
200855c8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
200855cc:	e0bff817 	ldw	r2,-32(fp)
200855d0:	e0ffff0b 	ldhu	r3,-4(fp)
200855d4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
200855d8:	e0bff817 	ldw	r2,-32(fp)
200855dc:	1019883a 	mov	r12,r2
200855e0:	001b883a 	mov	r13,zero
200855e4:	e33ff515 	stw	r12,-44(fp)
200855e8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
200855ec:	e0fff517 	ldw	r3,-44(fp)
200855f0:	e0bff817 	ldw	r2,-32(fp)
200855f4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
200855f8:	e0fff617 	ldw	r3,-40(fp)
200855fc:	e0bff817 	ldw	r2,-32(fp)
20085600:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20085604:	e0c00417 	ldw	r3,16(fp)
20085608:	00900034 	movhi	r2,16384
2008560c:	10bfffc4 	addi	r2,r2,-1
20085610:	1884703a 	and	r2,r3,r2
20085614:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
20085618:	e0bff817 	ldw	r2,-32(fp)
2008561c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20085620:	0005883a 	mov	r2,zero
}
20085624:	e037883a 	mov	sp,fp
20085628:	df000017 	ldw	fp,0(sp)
2008562c:	dec00104 	addi	sp,sp,4
20085630:	f800283a 	ret

20085634 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
20085634:	defff804 	addi	sp,sp,-32
20085638:	dfc00715 	stw	ra,28(sp)
2008563c:	df000615 	stw	fp,24(sp)
20085640:	df000604 	addi	fp,sp,24
20085644:	e13ffc15 	stw	r4,-16(fp)
20085648:	e17ffd15 	stw	r5,-12(fp)
2008564c:	e1bffe15 	stw	r6,-8(fp)
20085650:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
20085654:	e0800217 	ldw	r2,8(fp)
20085658:	d8800015 	stw	r2,0(sp)
2008565c:	e0800317 	ldw	r2,12(fp)
20085660:	d8800115 	stw	r2,4(sp)
20085664:	e13ffc17 	ldw	r4,-16(fp)
20085668:	e17ffd17 	ldw	r5,-12(fp)
2008566c:	e1bffe17 	ldw	r6,-8(fp)
20085670:	e1ffff17 	ldw	r7,-4(fp)
20085674:	00853fc0 	call	200853fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
20085678:	e037883a 	mov	sp,fp
2008567c:	dfc00117 	ldw	ra,4(sp)
20085680:	df000017 	ldw	fp,0(sp)
20085684:	dec00204 	addi	sp,sp,8
20085688:	f800283a 	ret

2008568c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2008568c:	defff804 	addi	sp,sp,-32
20085690:	dfc00715 	stw	ra,28(sp)
20085694:	df000615 	stw	fp,24(sp)
20085698:	df000604 	addi	fp,sp,24
2008569c:	e13ffc15 	stw	r4,-16(fp)
200856a0:	e17ffd15 	stw	r5,-12(fp)
200856a4:	e1bffe15 	stw	r6,-8(fp)
200856a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
200856ac:	e0bfff17 	ldw	r2,-4(fp)
200856b0:	d8800015 	stw	r2,0(sp)
200856b4:	e0800217 	ldw	r2,8(fp)
200856b8:	d8800115 	stw	r2,4(sp)
200856bc:	e13ffc17 	ldw	r4,-16(fp)
200856c0:	e17ffd17 	ldw	r5,-12(fp)
200856c4:	000d883a 	mov	r6,zero
200856c8:	e1fffe17 	ldw	r7,-8(fp)
200856cc:	00853fc0 	call	200853fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
200856d0:	e037883a 	mov	sp,fp
200856d4:	dfc00117 	ldw	ra,4(sp)
200856d8:	df000017 	ldw	fp,0(sp)
200856dc:	dec00204 	addi	sp,sp,8
200856e0:	f800283a 	ret

200856e4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
200856e4:	defff804 	addi	sp,sp,-32
200856e8:	dfc00715 	stw	ra,28(sp)
200856ec:	df000615 	stw	fp,24(sp)
200856f0:	df000604 	addi	fp,sp,24
200856f4:	e13ffc15 	stw	r4,-16(fp)
200856f8:	e17ffd15 	stw	r5,-12(fp)
200856fc:	e1bffe15 	stw	r6,-8(fp)
20085700:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
20085704:	e0bfff17 	ldw	r2,-4(fp)
20085708:	d8800015 	stw	r2,0(sp)
2008570c:	e0800217 	ldw	r2,8(fp)
20085710:	d8800115 	stw	r2,4(sp)
20085714:	e13ffc17 	ldw	r4,-16(fp)
20085718:	e17ffd17 	ldw	r5,-12(fp)
2008571c:	e1bffe17 	ldw	r6,-8(fp)
20085720:	000f883a 	mov	r7,zero
20085724:	00853fc0 	call	200853fc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
20085728:	e037883a 	mov	sp,fp
2008572c:	dfc00117 	ldw	ra,4(sp)
20085730:	df000017 	ldw	fp,0(sp)
20085734:	dec00204 	addi	sp,sp,8
20085738:	f800283a 	ret

2008573c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
2008573c:	deffee04 	addi	sp,sp,-72
20085740:	dfc01115 	stw	ra,68(sp)
20085744:	df001015 	stw	fp,64(sp)
20085748:	df001004 	addi	fp,sp,64
2008574c:	e13ff915 	stw	r4,-28(fp)
20085750:	e17ffa15 	stw	r5,-24(fp)
20085754:	e1bffb15 	stw	r6,-20(fp)
20085758:	e1fffc15 	stw	r7,-16(fp)
2008575c:	e1000417 	ldw	r4,16(fp)
20085760:	e0c00517 	ldw	r3,20(fp)
20085764:	e0800617 	ldw	r2,24(fp)
20085768:	e13ffd0d 	sth	r4,-12(fp)
2008576c:	e0fffe05 	stb	r3,-8(fp)
20085770:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
20085774:	e13ffd0b 	ldhu	r4,-12(fp)
20085778:	e0fffe03 	ldbu	r3,-8(fp)
2008577c:	e0bfff0b 	ldhu	r2,-4(fp)
20085780:	e17ffb17 	ldw	r5,-20(fp)
20085784:	d9400015 	stw	r5,0(sp)
20085788:	e17ffc17 	ldw	r5,-16(fp)
2008578c:	d9400115 	stw	r5,4(sp)
20085790:	e1400217 	ldw	r5,8(fp)
20085794:	d9400215 	stw	r5,8(sp)
20085798:	e1400317 	ldw	r5,12(fp)
2008579c:	d9400315 	stw	r5,12(sp)
200857a0:	d9000415 	stw	r4,16(sp)
200857a4:	d8000515 	stw	zero,20(sp)
200857a8:	d8c00615 	stw	r3,24(sp)
200857ac:	d8000715 	stw	zero,28(sp)
200857b0:	d8800815 	stw	r2,32(sp)
200857b4:	e13ff917 	ldw	r4,-28(fp)
200857b8:	e17ffa17 	ldw	r5,-24(fp)
200857bc:	000d883a 	mov	r6,zero
200857c0:	000f883a 	mov	r7,zero
200857c4:	00854a00 	call	200854a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
200857c8:	e037883a 	mov	sp,fp
200857cc:	dfc00117 	ldw	ra,4(sp)
200857d0:	df000017 	ldw	fp,0(sp)
200857d4:	dec00204 	addi	sp,sp,8
200857d8:	f800283a 	ret

200857dc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
200857dc:	deffee04 	addi	sp,sp,-72
200857e0:	dfc01115 	stw	ra,68(sp)
200857e4:	df001015 	stw	fp,64(sp)
200857e8:	df001004 	addi	fp,sp,64
200857ec:	e13ff915 	stw	r4,-28(fp)
200857f0:	e17ffa15 	stw	r5,-24(fp)
200857f4:	e1bffb15 	stw	r6,-20(fp)
200857f8:	e1fffc15 	stw	r7,-16(fp)
200857fc:	e1000417 	ldw	r4,16(fp)
20085800:	e0c00517 	ldw	r3,20(fp)
20085804:	e0800617 	ldw	r2,24(fp)
20085808:	e13ffd0d 	sth	r4,-12(fp)
2008580c:	e0fffe05 	stb	r3,-8(fp)
20085810:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
20085814:	e13ffd0b 	ldhu	r4,-12(fp)
20085818:	e0fffe03 	ldbu	r3,-8(fp)
2008581c:	e0bfff0b 	ldhu	r2,-4(fp)
20085820:	d8000015 	stw	zero,0(sp)
20085824:	d8000115 	stw	zero,4(sp)
20085828:	e1400217 	ldw	r5,8(fp)
2008582c:	d9400215 	stw	r5,8(sp)
20085830:	e1400317 	ldw	r5,12(fp)
20085834:	d9400315 	stw	r5,12(sp)
20085838:	d9000415 	stw	r4,16(sp)
2008583c:	d8c00515 	stw	r3,20(sp)
20085840:	d8000615 	stw	zero,24(sp)
20085844:	d8800715 	stw	r2,28(sp)
20085848:	d8000815 	stw	zero,32(sp)
2008584c:	e13ff917 	ldw	r4,-28(fp)
20085850:	e17ffa17 	ldw	r5,-24(fp)
20085854:	e1bffb17 	ldw	r6,-20(fp)
20085858:	e1fffc17 	ldw	r7,-16(fp)
2008585c:	00854a00 	call	200854a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
20085860:	e037883a 	mov	sp,fp
20085864:	dfc00117 	ldw	ra,4(sp)
20085868:	df000017 	ldw	fp,0(sp)
2008586c:	dec00204 	addi	sp,sp,8
20085870:	f800283a 	ret

20085874 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20085874:	deffec04 	addi	sp,sp,-80
20085878:	dfc01315 	stw	ra,76(sp)
2008587c:	df001215 	stw	fp,72(sp)
20085880:	df001204 	addi	fp,sp,72
20085884:	e13ff715 	stw	r4,-36(fp)
20085888:	e17ff815 	stw	r5,-32(fp)
2008588c:	e1bff915 	stw	r6,-28(fp)
20085890:	e1fffa15 	stw	r7,-24(fp)
20085894:	e1800617 	ldw	r6,24(fp)
20085898:	e1400717 	ldw	r5,28(fp)
2008589c:	e1000817 	ldw	r4,32(fp)
200858a0:	e0c00917 	ldw	r3,36(fp)
200858a4:	e0800a17 	ldw	r2,40(fp)
200858a8:	e1bffb0d 	sth	r6,-20(fp)
200858ac:	e17ffc05 	stb	r5,-16(fp)
200858b0:	e13ffd05 	stb	r4,-12(fp)
200858b4:	e0fffe0d 	sth	r3,-8(fp)
200858b8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
200858bc:	e1bffb0b 	ldhu	r6,-20(fp)
200858c0:	e17ffc03 	ldbu	r5,-16(fp)
200858c4:	e13ffd03 	ldbu	r4,-12(fp)
200858c8:	e0fffe0b 	ldhu	r3,-8(fp)
200858cc:	e0bfff0b 	ldhu	r2,-4(fp)
200858d0:	e1c00217 	ldw	r7,8(fp)
200858d4:	d9c00015 	stw	r7,0(sp)
200858d8:	e1c00317 	ldw	r7,12(fp)
200858dc:	d9c00115 	stw	r7,4(sp)
200858e0:	e1c00417 	ldw	r7,16(fp)
200858e4:	d9c00215 	stw	r7,8(sp)
200858e8:	e1c00517 	ldw	r7,20(fp)
200858ec:	d9c00315 	stw	r7,12(sp)
200858f0:	d9800415 	stw	r6,16(sp)
200858f4:	d9400515 	stw	r5,20(sp)
200858f8:	d9000615 	stw	r4,24(sp)
200858fc:	d8c00715 	stw	r3,28(sp)
20085900:	d8800815 	stw	r2,32(sp)
20085904:	e13ff717 	ldw	r4,-36(fp)
20085908:	e17ff817 	ldw	r5,-32(fp)
2008590c:	e1bff917 	ldw	r6,-28(fp)
20085910:	e1fffa17 	ldw	r7,-24(fp)
20085914:	00854a00 	call	200854a0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
20085918:	e037883a 	mov	sp,fp
2008591c:	dfc00117 	ldw	ra,4(sp)
20085920:	df000017 	ldw	fp,0(sp)
20085924:	dec00204 	addi	sp,sp,8
20085928:	f800283a 	ret

2008592c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
2008592c:	defffc04 	addi	sp,sp,-16
20085930:	df000315 	stw	fp,12(sp)
20085934:	df000304 	addi	fp,sp,12
20085938:	e13ffe15 	stw	r4,-8(fp)
2008593c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
20085940:	e0bfff17 	ldw	r2,-4(fp)
20085944:	1000021e 	bne	r2,zero,20085950 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20085948:	00bffa84 	movi	r2,-22
2008594c:	00002f06 	br	20085a0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
20085950:	e0bfff17 	ldw	r2,-4(fp)
20085954:	10c00317 	ldw	r3,12(r2)
20085958:	e0bfff17 	ldw	r2,-4(fp)
2008595c:	18800226 	beq	r3,r2,20085968 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
20085960:	00bffa84 	movi	r2,-22
20085964:	00002906 	br	20085a0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
20085968:	e0bffe17 	ldw	r2,-8(fp)
2008596c:	10800017 	ldw	r2,0(r2)
20085970:	1000051e 	bne	r2,zero,20085988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
20085974:	e0bffe17 	ldw	r2,-8(fp)
20085978:	e0ffff17 	ldw	r3,-4(fp)
2008597c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
20085980:	0005883a 	mov	r2,zero
20085984:	00002106 	br	20085a0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
20085988:	e0bffe17 	ldw	r2,-8(fp)
2008598c:	10c00017 	ldw	r3,0(r2)
20085990:	e0bfff17 	ldw	r2,-4(fp)
20085994:	1880021e 	bne	r3,r2,200859a0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
20085998:	00bffa84 	movi	r2,-22
2008599c:	00001b06 	br	20085a0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
200859a0:	e0bffe17 	ldw	r2,-8(fp)
200859a4:	10800017 	ldw	r2,0(r2)
200859a8:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
200859ac:	00000906 	br	200859d4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
200859b0:	e0bffd17 	ldw	r2,-12(fp)
200859b4:	10c00317 	ldw	r3,12(r2)
200859b8:	e0bfff17 	ldw	r2,-4(fp)
200859bc:	1880021e 	bne	r3,r2,200859c8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
200859c0:	00bffa84 	movi	r2,-22
200859c4:	00001106 	br	20085a0c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
200859c8:	e0bffd17 	ldw	r2,-12(fp)
200859cc:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
200859d0:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
200859d4:	e0bffd17 	ldw	r2,-12(fp)
200859d8:	10800317 	ldw	r2,12(r2)
200859dc:	e0fffe17 	ldw	r3,-8(fp)
200859e0:	18c00017 	ldw	r3,0(r3)
200859e4:	10fff21e 	bne	r2,r3,200859b0 <__flash_rwdata_start+0xffffd9e0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
200859e8:	e0ffff17 	ldw	r3,-4(fp)
200859ec:	e0bffd17 	ldw	r2,-12(fp)
200859f0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
200859f4:	e0bffe17 	ldw	r2,-8(fp)
200859f8:	10800017 	ldw	r2,0(r2)
200859fc:	1007883a 	mov	r3,r2
20085a00:	e0bfff17 	ldw	r2,-4(fp)
20085a04:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
20085a08:	0005883a 	mov	r2,zero
}
20085a0c:	e037883a 	mov	sp,fp
20085a10:	df000017 	ldw	fp,0(sp)
20085a14:	dec00104 	addi	sp,sp,4
20085a18:	f800283a 	ret

20085a1c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
20085a1c:	defff804 	addi	sp,sp,-32
20085a20:	df000715 	stw	fp,28(sp)
20085a24:	df000704 	addi	fp,sp,28
20085a28:	e13ffe15 	stw	r4,-8(fp)
20085a2c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
20085a30:	e13fff17 	ldw	r4,-4(fp)
20085a34:	2000021e 	bne	r4,zero,20085a40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20085a38:	00bffa84 	movi	r2,-22
20085a3c:	00005906 	br	20085ba4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
20085a40:	e13fff17 	ldw	r4,-4(fp)
20085a44:	2015883a 	mov	r10,r4
20085a48:	0017883a 	mov	r11,zero
20085a4c:	e2bffc15 	stw	r10,-16(fp)
20085a50:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
20085a54:	e13fff17 	ldw	r4,-4(fp)
20085a58:	21400317 	ldw	r5,12(r4)
20085a5c:	e13ffc17 	ldw	r4,-16(fp)
20085a60:	29000626 	beq	r5,r4,20085a7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
20085a64:	e13fff17 	ldw	r4,-4(fp)
20085a68:	21400b17 	ldw	r5,44(r4)
20085a6c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
20085a70:	29000226 	beq	r5,r4,20085a7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
20085a74:	00bffa84 	movi	r2,-22
20085a78:	00004a06 	br	20085ba4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
20085a7c:	e13ffe17 	ldw	r4,-8(fp)
20085a80:	21000017 	ldw	r4,0(r4)
20085a84:	2000051e 	bne	r4,zero,20085a9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
20085a88:	e0bffe17 	ldw	r2,-8(fp)
20085a8c:	e0ffff17 	ldw	r3,-4(fp)
20085a90:	10c00015 	stw	r3,0(r2)
		return 0;
20085a94:	0005883a 	mov	r2,zero
20085a98:	00004206 	br	20085ba4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
20085a9c:	e13ffe17 	ldw	r4,-8(fp)
20085aa0:	21400017 	ldw	r5,0(r4)
20085aa4:	e13fff17 	ldw	r4,-4(fp)
20085aa8:	2900021e 	bne	r5,r4,20085ab4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
20085aac:	00bffa84 	movi	r2,-22
20085ab0:	00003c06 	br	20085ba4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
20085ab4:	e13ffe17 	ldw	r4,-8(fp)
20085ab8:	21000017 	ldw	r4,0(r4)
20085abc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
20085ac0:	e13ffe17 	ldw	r4,-8(fp)
20085ac4:	21000017 	ldw	r4,0(r4)
20085ac8:	2011883a 	mov	r8,r4
20085acc:	0013883a 	mov	r9,zero
20085ad0:	e23ffa15 	stw	r8,-24(fp)
20085ad4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20085ad8:	00001806 	br	20085b3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
20085adc:	e13fff17 	ldw	r4,-4(fp)
20085ae0:	200d883a 	mov	r6,r4
20085ae4:	000f883a 	mov	r7,zero
20085ae8:	e1bffc15 	stw	r6,-16(fp)
20085aec:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
20085af0:	e13ff917 	ldw	r4,-28(fp)
20085af4:	21400317 	ldw	r5,12(r4)
20085af8:	e13ffc17 	ldw	r4,-16(fp)
20085afc:	2900061e 	bne	r5,r4,20085b18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
20085b00:	e13ff917 	ldw	r4,-28(fp)
20085b04:	21400b17 	ldw	r5,44(r4)
20085b08:	e13ffd17 	ldw	r4,-12(fp)
20085b0c:	2900021e 	bne	r5,r4,20085b18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
20085b10:	00bffa84 	movi	r2,-22
20085b14:	00002306 	br	20085ba4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20085b18:	e13ff917 	ldw	r4,-28(fp)
20085b1c:	21000317 	ldw	r4,12(r4)
20085b20:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
20085b24:	e13ff917 	ldw	r4,-28(fp)
20085b28:	21000b17 	ldw	r4,44(r4)
20085b2c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20085b30:	e13ffc17 	ldw	r4,-16(fp)
20085b34:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
20085b38:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20085b3c:	e13ff917 	ldw	r4,-28(fp)
20085b40:	21400317 	ldw	r5,12(r4)
20085b44:	e13ffa17 	ldw	r4,-24(fp)
20085b48:	29000426 	beq	r5,r4,20085b5c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20085b4c:	e13ff917 	ldw	r4,-28(fp)
20085b50:	21400b17 	ldw	r5,44(r4)
20085b54:	e13ffb17 	ldw	r4,-20(fp)
20085b58:	293fe01e 	bne	r5,r4,20085adc <__flash_rwdata_start+0xffffdb0c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
20085b5c:	e13fff17 	ldw	r4,-4(fp)
20085b60:	2005883a 	mov	r2,r4
20085b64:	0007883a 	mov	r3,zero
20085b68:	e0bffc15 	stw	r2,-16(fp)
20085b6c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
20085b70:	e0fffc17 	ldw	r3,-16(fp)
20085b74:	e0bff917 	ldw	r2,-28(fp)
20085b78:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
20085b7c:	e0fffd17 	ldw	r3,-12(fp)
20085b80:	e0bff917 	ldw	r2,-28(fp)
20085b84:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
20085b88:	e0fffa17 	ldw	r3,-24(fp)
20085b8c:	e0bfff17 	ldw	r2,-4(fp)
20085b90:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
20085b94:	e0fffb17 	ldw	r3,-20(fp)
20085b98:	e0bfff17 	ldw	r2,-4(fp)
20085b9c:	10c00b15 	stw	r3,44(r2)
	return 0;
20085ba0:	0005883a 	mov	r2,zero
}
20085ba4:	e037883a 	mov	sp,fp
20085ba8:	df000017 	ldw	fp,0(sp)
20085bac:	dec00104 	addi	sp,sp,4
20085bb0:	f800283a 	ret

20085bb4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
20085bb4:	defffc04 	addi	sp,sp,-16
20085bb8:	df000315 	stw	fp,12(sp)
20085bbc:	df000304 	addi	fp,sp,12
20085bc0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
20085bc4:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
20085bc8:	e0bfff17 	ldw	r2,-4(fp)
20085bcc:	1000021e 	bne	r2,zero,20085bd8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
20085bd0:	00bffa84 	movi	r2,-22
20085bd4:	00001906 	br	20085c3c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
20085bd8:	e0bfff17 	ldw	r2,-4(fp)
20085bdc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20085be0:	00000a06 	br	20085c0c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
20085be4:	e0bffd17 	ldw	r2,-12(fp)
20085be8:	10800717 	ldw	r2,28(r2)
20085bec:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20085bf0:	e0bffe17 	ldw	r2,-8(fp)
20085bf4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20085bf8:	e0bffd17 	ldw	r2,-12(fp)
20085bfc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
20085c00:	e0bffd17 	ldw	r2,-12(fp)
20085c04:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
20085c08:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20085c0c:	e0bffd17 	ldw	r2,-12(fp)
20085c10:	10c00317 	ldw	r3,12(r2)
20085c14:	e0bfff17 	ldw	r2,-4(fp)
20085c18:	18bff21e 	bne	r3,r2,20085be4 <__flash_rwdata_start+0xffffdc14>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
20085c1c:	e0bffd17 	ldw	r2,-12(fp)
20085c20:	10800717 	ldw	r2,28(r2)
20085c24:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20085c28:	e0bffe17 	ldw	r2,-8(fp)
20085c2c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20085c30:	e0bffd17 	ldw	r2,-12(fp)
20085c34:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
20085c38:	0005883a 	mov	r2,zero
}
20085c3c:	e037883a 	mov	sp,fp
20085c40:	df000017 	ldw	fp,0(sp)
20085c44:	dec00104 	addi	sp,sp,4
20085c48:	f800283a 	ret

20085c4c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
20085c4c:	defff804 	addi	sp,sp,-32
20085c50:	df000715 	stw	fp,28(sp)
20085c54:	df000704 	addi	fp,sp,28
20085c58:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
20085c5c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
20085c60:	e13fff17 	ldw	r4,-4(fp)
20085c64:	2000021e 	bne	r4,zero,20085c70 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
20085c68:	00bffa84 	movi	r2,-22
20085c6c:	00002806 	br	20085d10 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
20085c70:	e13fff17 	ldw	r4,-4(fp)
20085c74:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
20085c78:	e13fff17 	ldw	r4,-4(fp)
20085c7c:	2005883a 	mov	r2,r4
20085c80:	0007883a 	mov	r3,zero
20085c84:	e0bffb15 	stw	r2,-20(fp)
20085c88:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20085c8c:	00001006 	br	20085cd0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
20085c90:	e0bff917 	ldw	r2,-28(fp)
20085c94:	10800f17 	ldw	r2,60(r2)
20085c98:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20085c9c:	e0bffa17 	ldw	r2,-24(fp)
20085ca0:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20085ca4:	e0bff917 	ldw	r2,-28(fp)
20085ca8:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20085cac:	e0bff917 	ldw	r2,-28(fp)
20085cb0:	10800317 	ldw	r2,12(r2)
20085cb4:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
20085cb8:	e0bff917 	ldw	r2,-28(fp)
20085cbc:	10800b17 	ldw	r2,44(r2)
20085cc0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20085cc4:	e0bffd17 	ldw	r2,-12(fp)
20085cc8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
20085ccc:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20085cd0:	e0bff917 	ldw	r2,-28(fp)
20085cd4:	10c00317 	ldw	r3,12(r2)
20085cd8:	e0bffb17 	ldw	r2,-20(fp)
20085cdc:	18800426 	beq	r3,r2,20085cf0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20085ce0:	e0bff917 	ldw	r2,-28(fp)
20085ce4:	10c00b17 	ldw	r3,44(r2)
20085ce8:	e0bffc17 	ldw	r2,-16(fp)
20085cec:	18bfe81e 	bne	r3,r2,20085c90 <__flash_rwdata_start+0xffffdcc0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
20085cf0:	e0bff917 	ldw	r2,-28(fp)
20085cf4:	10800f17 	ldw	r2,60(r2)
20085cf8:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20085cfc:	e0bffa17 	ldw	r2,-24(fp)
20085d00:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20085d04:	e0bff917 	ldw	r2,-28(fp)
20085d08:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
20085d0c:	0005883a 	mov	r2,zero
}
20085d10:	e037883a 	mov	sp,fp
20085d14:	df000017 	ldw	fp,0(sp)
20085d18:	dec00104 	addi	sp,sp,4
20085d1c:	f800283a 	ret

20085d20 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
20085d20:	deffef04 	addi	sp,sp,-68
20085d24:	df001015 	stw	fp,64(sp)
20085d28:	df001004 	addi	fp,sp,64
20085d2c:	e13ffb15 	stw	r4,-20(fp)
20085d30:	e17ffc15 	stw	r5,-16(fp)
20085d34:	e1bffd15 	stw	r6,-12(fp)
20085d38:	3807883a 	mov	r3,r7
20085d3c:	e0800117 	ldw	r2,4(fp)
20085d40:	e0fffe05 	stb	r3,-8(fp)
20085d44:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
20085d48:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
20085d4c:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
20085d50:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
20085d54:	e0bffc17 	ldw	r2,-16(fp)
20085d58:	e0bff915 	stw	r2,-28(fp)
20085d5c:	e0bffd17 	ldw	r2,-12(fp)
20085d60:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
20085d64:	e0bffb17 	ldw	r2,-20(fp)
20085d68:	10800617 	ldw	r2,24(r2)
20085d6c:	10800037 	ldwio	r2,0(r2)
20085d70:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
20085d74:	e0bff017 	ldw	r2,-64(fp)
20085d78:	1080004c 	andi	r2,r2,1
20085d7c:	10000226 	beq	r2,zero,20085d88 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
20085d80:	00bffc04 	movi	r2,-16
20085d84:	00009206 	br	20085fd0 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
20085d88:	00800804 	movi	r2,32
20085d8c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20085d90:	0005303a 	rdctl	r2,status
20085d94:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20085d98:	e0fff317 	ldw	r3,-52(fp)
20085d9c:	00bfff84 	movi	r2,-2
20085da0:	1884703a 	and	r2,r3,r2
20085da4:	1001703a 	wrctl	status,r2
  
  return context;
20085da8:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
20085dac:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20085db0:	e0bffb17 	ldw	r2,-20(fp)
20085db4:	10800317 	ldw	r2,12(r2)
20085db8:	10800104 	addi	r2,r2,4
20085dbc:	e0fff117 	ldw	r3,-60(fp)
20085dc0:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
20085dc4:	e0bffb17 	ldw	r2,-20(fp)
20085dc8:	10800317 	ldw	r2,12(r2)
20085dcc:	e0fffb17 	ldw	r3,-20(fp)
20085dd0:	18c00317 	ldw	r3,12(r3)
20085dd4:	18c00037 	ldwio	r3,0(r3)
20085dd8:	10c00035 	stwio	r3,0(r2)
20085ddc:	e0bff217 	ldw	r2,-56(fp)
20085de0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20085de4:	e0bff417 	ldw	r2,-48(fp)
20085de8:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20085dec:	e0bffb17 	ldw	r2,-20(fp)
20085df0:	10800b17 	ldw	r2,44(r2)
20085df4:	10002326 	beq	r2,zero,20085e84 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
20085df8:	e0bffb17 	ldw	r2,-20(fp)
20085dfc:	10c00d17 	ldw	r3,52(r2)
20085e00:	e0bff117 	ldw	r2,-60(fp)
20085e04:	1884b03a 	or	r2,r3,r2
20085e08:	10800514 	ori	r2,r2,20
20085e0c:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20085e10:	e0fff117 	ldw	r3,-60(fp)
20085e14:	00bff7c4 	movi	r2,-33
20085e18:	1884703a 	and	r2,r3,r2
20085e1c:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20085e20:	e0bff017 	ldw	r2,-64(fp)
20085e24:	10800214 	ori	r2,r2,8
20085e28:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20085e2c:	0005303a 	rdctl	r2,status
20085e30:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20085e34:	e0fff517 	ldw	r3,-44(fp)
20085e38:	00bfff84 	movi	r2,-2
20085e3c:	1884703a 	and	r2,r3,r2
20085e40:	1001703a 	wrctl	status,r2
  
  return context;
20085e44:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
20085e48:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20085e4c:	e0bffb17 	ldw	r2,-20(fp)
20085e50:	10800317 	ldw	r2,12(r2)
20085e54:	10800104 	addi	r2,r2,4
20085e58:	e0fff117 	ldw	r3,-60(fp)
20085e5c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20085e60:	e0bffb17 	ldw	r2,-20(fp)
20085e64:	10800617 	ldw	r2,24(r2)
20085e68:	e0fff017 	ldw	r3,-64(fp)
20085e6c:	10c00035 	stwio	r3,0(r2)
20085e70:	e0bff217 	ldw	r2,-56(fp)
20085e74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20085e78:	e0bff617 	ldw	r2,-40(fp)
20085e7c:	1001703a 	wrctl	status,r2
20085e80:	00002306 	br	20085f10 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
20085e84:	e0bffb17 	ldw	r2,-20(fp)
20085e88:	10c00d17 	ldw	r3,52(r2)
20085e8c:	e0bff117 	ldw	r2,-60(fp)
20085e90:	1884b03a 	or	r2,r3,r2
20085e94:	10800114 	ori	r2,r2,4
20085e98:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20085e9c:	e0fff117 	ldw	r3,-60(fp)
20085ea0:	00bff3c4 	movi	r2,-49
20085ea4:	1884703a 	and	r2,r3,r2
20085ea8:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20085eac:	e0fff017 	ldw	r3,-64(fp)
20085eb0:	00bffdc4 	movi	r2,-9
20085eb4:	1884703a 	and	r2,r3,r2
20085eb8:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20085ebc:	0005303a 	rdctl	r2,status
20085ec0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20085ec4:	e0fff717 	ldw	r3,-36(fp)
20085ec8:	00bfff84 	movi	r2,-2
20085ecc:	1884703a 	and	r2,r3,r2
20085ed0:	1001703a 	wrctl	status,r2
  
  return context;
20085ed4:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
20085ed8:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20085edc:	e0bffb17 	ldw	r2,-20(fp)
20085ee0:	10800317 	ldw	r2,12(r2)
20085ee4:	10800104 	addi	r2,r2,4
20085ee8:	e0fff117 	ldw	r3,-60(fp)
20085eec:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20085ef0:	e0bffb17 	ldw	r2,-20(fp)
20085ef4:	10800617 	ldw	r2,24(r2)
20085ef8:	e0fff017 	ldw	r3,-64(fp)
20085efc:	10c00035 	stwio	r3,0(r2)
20085f00:	e0bff217 	ldw	r2,-56(fp)
20085f04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20085f08:	e0bff817 	ldw	r2,-32(fp)
20085f0c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
20085f10:	e0bffb17 	ldw	r2,-20(fp)
20085f14:	10800617 	ldw	r2,24(r2)
20085f18:	10800104 	addi	r2,r2,4
20085f1c:	e0fff917 	ldw	r3,-28(fp)
20085f20:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
20085f24:	e0bffb17 	ldw	r2,-20(fp)
20085f28:	10800617 	ldw	r2,24(r2)
20085f2c:	10800204 	addi	r2,r2,8
20085f30:	e0fffa17 	ldw	r3,-24(fp)
20085f34:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
20085f38:	e0bffe03 	ldbu	r2,-8(fp)
20085f3c:	10000426 	beq	r2,zero,20085f50 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
20085f40:	e0bff017 	ldw	r2,-64(fp)
20085f44:	10800414 	ori	r2,r2,16
20085f48:	e0bff015 	stw	r2,-64(fp)
20085f4c:	00000406 	br	20085f60 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
20085f50:	e0fff017 	ldw	r3,-64(fp)
20085f54:	00bffbc4 	movi	r2,-17
20085f58:	1884703a 	and	r2,r3,r2
20085f5c:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20085f60:	e0bfff03 	ldbu	r2,-4(fp)
20085f64:	10000e26 	beq	r2,zero,20085fa0 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
20085f68:	e0bff017 	ldw	r2,-64(fp)
20085f6c:	10800094 	ori	r2,r2,2
20085f70:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20085f74:	e0bffb17 	ldw	r2,-20(fp)
20085f78:	10800617 	ldw	r2,24(r2)
20085f7c:	10800304 	addi	r2,r2,12
20085f80:	10800037 	ldwio	r2,0(r2)
20085f84:	10000a1e 	bne	r2,zero,20085fb0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20085f88:	e0bffb17 	ldw	r2,-20(fp)
20085f8c:	10800617 	ldw	r2,24(r2)
20085f90:	10800304 	addi	r2,r2,12
20085f94:	00c03fc4 	movi	r3,255
20085f98:	10c00035 	stwio	r3,0(r2)
20085f9c:	00000406 	br	20085fb0 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
20085fa0:	e0fff017 	ldw	r3,-64(fp)
20085fa4:	00bfff44 	movi	r2,-3
20085fa8:	1884703a 	and	r2,r3,r2
20085fac:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
20085fb0:	e0bff017 	ldw	r2,-64(fp)
20085fb4:	10800054 	ori	r2,r2,1
20085fb8:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20085fbc:	e0bffb17 	ldw	r2,-20(fp)
20085fc0:	10800617 	ldw	r2,24(r2)
20085fc4:	e0fff017 	ldw	r3,-64(fp)
20085fc8:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
20085fcc:	0005883a 	mov	r2,zero
}
20085fd0:	e037883a 	mov	sp,fp
20085fd4:	df000017 	ldw	fp,0(sp)
20085fd8:	dec00104 	addi	sp,sp,4
20085fdc:	f800283a 	ret

20085fe0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
20085fe0:	defff704 	addi	sp,sp,-36
20085fe4:	dfc00815 	stw	ra,32(sp)
20085fe8:	df000715 	stw	fp,28(sp)
20085fec:	dc400615 	stw	r17,24(sp)
20085ff0:	dc000515 	stw	r16,20(sp)
20085ff4:	df000704 	addi	fp,sp,28
20085ff8:	e13ffa15 	stw	r4,-24(fp)
20085ffc:	e17ffb15 	stw	r5,-20(fp)
20086000:	3007883a 	mov	r3,r6
20086004:	3805883a 	mov	r2,r7
20086008:	e0fffc05 	stb	r3,-16(fp)
2008600c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
20086010:	e13ffb17 	ldw	r4,-20(fp)
20086014:	0085bb40 	call	20085bb4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
20086018:	10000226 	beq	r2,zero,20086024 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
2008601c:	00bffa84 	movi	r2,-22
20086020:	00000b06 	br	20086050 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
20086024:	e0bffb17 	ldw	r2,-20(fp)
20086028:	1021883a 	mov	r16,r2
2008602c:	0023883a 	mov	r17,zero
20086030:	e0fffc03 	ldbu	r3,-16(fp)
20086034:	e0bffd03 	ldbu	r2,-12(fp)
20086038:	d8800015 	stw	r2,0(sp)
2008603c:	e13ffa17 	ldw	r4,-24(fp)
20086040:	800b883a 	mov	r5,r16
20086044:	880d883a 	mov	r6,r17
20086048:	180f883a 	mov	r7,r3
2008604c:	0085d200 	call	20085d20 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
20086050:	e6fffe04 	addi	sp,fp,-8
20086054:	dfc00317 	ldw	ra,12(sp)
20086058:	df000217 	ldw	fp,8(sp)
2008605c:	dc400117 	ldw	r17,4(sp)
20086060:	dc000017 	ldw	r16,0(sp)
20086064:	dec00404 	addi	sp,sp,16
20086068:	f800283a 	ret

2008606c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
2008606c:	defff704 	addi	sp,sp,-36
20086070:	dfc00815 	stw	ra,32(sp)
20086074:	df000715 	stw	fp,28(sp)
20086078:	dc400615 	stw	r17,24(sp)
2008607c:	dc000515 	stw	r16,20(sp)
20086080:	df000704 	addi	fp,sp,28
20086084:	e13ffa15 	stw	r4,-24(fp)
20086088:	e17ffb15 	stw	r5,-20(fp)
2008608c:	3007883a 	mov	r3,r6
20086090:	3805883a 	mov	r2,r7
20086094:	e0fffc05 	stb	r3,-16(fp)
20086098:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
2008609c:	e13ffb17 	ldw	r4,-20(fp)
200860a0:	0085c4c0 	call	20085c4c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
200860a4:	10000226 	beq	r2,zero,200860b0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
200860a8:	00bffa84 	movi	r2,-22
200860ac:	00000b06 	br	200860dc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
200860b0:	e0bffb17 	ldw	r2,-20(fp)
200860b4:	1021883a 	mov	r16,r2
200860b8:	0023883a 	mov	r17,zero
200860bc:	e0fffc03 	ldbu	r3,-16(fp)
200860c0:	e0bffd03 	ldbu	r2,-12(fp)
200860c4:	d8800015 	stw	r2,0(sp)
200860c8:	e13ffa17 	ldw	r4,-24(fp)
200860cc:	800b883a 	mov	r5,r16
200860d0:	880d883a 	mov	r6,r17
200860d4:	180f883a 	mov	r7,r3
200860d8:	0085d200 	call	20085d20 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
200860dc:	e6fffe04 	addi	sp,fp,-8
200860e0:	dfc00317 	ldw	ra,12(sp)
200860e4:	df000217 	ldw	fp,8(sp)
200860e8:	dc400117 	ldw	r17,4(sp)
200860ec:	dc000017 	ldw	r16,0(sp)
200860f0:	dec00404 	addi	sp,sp,16
200860f4:	f800283a 	ret

200860f8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
200860f8:	defffc04 	addi	sp,sp,-16
200860fc:	dfc00315 	stw	ra,12(sp)
20086100:	df000215 	stw	fp,8(sp)
20086104:	df000204 	addi	fp,sp,8
20086108:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2008610c:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
20086110:	e13fff17 	ldw	r4,-4(fp)
20086114:	d1600b04 	addi	r5,gp,-32724
20086118:	00868880 	call	20086888 <alt_find_dev>
2008611c:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
20086120:	e0bffe17 	ldw	r2,-8(fp)
20086124:	1000041e 	bne	r2,zero,20086138 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
20086128:	00845700 	call	20084570 <alt_get_errno>
2008612c:	1007883a 	mov	r3,r2
20086130:	008004c4 	movi	r2,19
20086134:	18800015 	stw	r2,0(r3)
    }

    return dev;
20086138:	e0bffe17 	ldw	r2,-8(fp)
}
2008613c:	e037883a 	mov	sp,fp
20086140:	dfc00117 	ldw	ra,4(sp)
20086144:	df000017 	ldw	fp,0(sp)
20086148:	dec00204 	addi	sp,sp,8
2008614c:	f800283a 	ret

20086150 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
20086150:	defff804 	addi	sp,sp,-32
20086154:	dfc00715 	stw	ra,28(sp)
20086158:	df000615 	stw	fp,24(sp)
2008615c:	df000604 	addi	fp,sp,24
20086160:	e13ffd15 	stw	r4,-12(fp)
20086164:	e17ffe15 	stw	r5,-8(fp)
20086168:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2008616c:	e0bffd17 	ldw	r2,-12(fp)
20086170:	10801783 	ldbu	r2,94(r2)
20086174:	10803fcc 	andi	r2,r2,255
20086178:	10000b26 	beq	r2,zero,200861a8 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2008617c:	e0bffd17 	ldw	r2,-12(fp)
20086180:	10800617 	ldw	r2,24(r2)
20086184:	00c00104 	movi	r3,4
20086188:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2008618c:	0001883a 	nop
20086190:	e0bffd17 	ldw	r2,-12(fp)
20086194:	10800617 	ldw	r2,24(r2)
20086198:	10800037 	ldwio	r2,0(r2)
2008619c:	1080010c 	andi	r2,r2,4
200861a0:	1005d0ba 	srai	r2,r2,2
200861a4:	103ffa1e 	bne	r2,zero,20086190 <__flash_rwdata_start+0xffffe1c0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
200861a8:	e0bffd17 	ldw	r2,-12(fp)
200861ac:	10800317 	ldw	r2,12(r2)
200861b0:	10800104 	addi	r2,r2,4
200861b4:	00c00084 	movi	r3,2
200861b8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
200861bc:	0001883a 	nop
200861c0:	e0bffd17 	ldw	r2,-12(fp)
200861c4:	10800317 	ldw	r2,12(r2)
200861c8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
200861cc:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
200861d0:	103ffb1e 	bne	r2,zero,200861c0 <__flash_rwdata_start+0xffffe1f0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
200861d4:	e0bffd17 	ldw	r2,-12(fp)
200861d8:	10800317 	ldw	r2,12(r2)
200861dc:	10800104 	addi	r2,r2,4
200861e0:	10800037 	ldwio	r2,0(r2)
200861e4:	1007883a 	mov	r3,r2
200861e8:	00bffbc4 	movi	r2,-17
200861ec:	1884703a 	and	r2,r3,r2
200861f0:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
200861f4:	e0bffb17 	ldw	r2,-20(fp)
200861f8:	10800814 	ori	r2,r2,32
200861fc:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20086200:	e0bffd17 	ldw	r2,-12(fp)
20086204:	10800317 	ldw	r2,12(r2)
20086208:	10800104 	addi	r2,r2,4
2008620c:	e0fffb17 	ldw	r3,-20(fp)
20086210:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
20086214:	e0bffd17 	ldw	r2,-12(fp)
20086218:	10800317 	ldw	r2,12(r2)
2008621c:	e0fffd17 	ldw	r3,-12(fp)
20086220:	18c00317 	ldw	r3,12(r3)
20086224:	18c00037 	ldwio	r3,0(r3)
20086228:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2008622c:	e0bffd17 	ldw	r2,-12(fp)
20086230:	10801783 	ldbu	r2,94(r2)
20086234:	10803fcc 	andi	r2,r2,255
20086238:	10000826 	beq	r2,zero,2008625c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2008623c:	e0bffd17 	ldw	r2,-12(fp)
20086240:	10800617 	ldw	r2,24(r2)
20086244:	10800404 	addi	r2,r2,16
20086248:	e0fffd17 	ldw	r3,-12(fp)
2008624c:	18c00617 	ldw	r3,24(r3)
20086250:	18c00404 	addi	r3,r3,16
20086254:	18c00037 	ldwio	r3,0(r3)
20086258:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2008625c:	e13ffd17 	ldw	r4,-12(fp)
20086260:	d1600b04 	addi	r5,gp,-32724
20086264:	008672c0 	call	2008672c <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
20086268:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2008626c:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
20086270:	e0bffc17 	ldw	r2,-16(fp)
20086274:	1000081e 	bne	r2,zero,20086298 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
20086278:	d8000015 	stw	zero,0(sp)
2008627c:	e13ffe17 	ldw	r4,-8(fp)
20086280:	e17fff17 	ldw	r5,-4(fp)
20086284:	01880234 	movhi	r6,8200
20086288:	3191e004 	addi	r6,r6,18304
2008628c:	e1fffd17 	ldw	r7,-12(fp)
20086290:	00869480 	call	20086948 <alt_ic_isr_register>
20086294:	00000306 	br	200862a4 <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
20086298:	01000034 	movhi	r4,0
2008629c:	21009c04 	addi	r4,r4,624
200862a0:	0086fc40 	call	20086fc4 <alt_printf>
    }
    
    return;
200862a4:	0001883a 	nop

}
200862a8:	e037883a 	mov	sp,fp
200862ac:	dfc00117 	ldw	ra,4(sp)
200862b0:	df000017 	ldw	fp,0(sp)
200862b4:	dec00204 	addi	sp,sp,8
200862b8:	f800283a 	ret

200862bc <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
200862bc:	defffb04 	addi	sp,sp,-20
200862c0:	df000415 	stw	fp,16(sp)
200862c4:	df000404 	addi	fp,sp,16
200862c8:	e13ffc15 	stw	r4,-16(fp)
200862cc:	e17ffd15 	stw	r5,-12(fp)
200862d0:	e1bffe15 	stw	r6,-8(fp)
200862d4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
200862d8:	e0bffc17 	ldw	r2,-16(fp)
200862dc:	e0fffd17 	ldw	r3,-12(fp)
200862e0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
200862e4:	e0bffc17 	ldw	r2,-16(fp)
200862e8:	e0ffff17 	ldw	r3,-4(fp)
200862ec:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
200862f0:	e0bffc17 	ldw	r2,-16(fp)
200862f4:	e0fffe17 	ldw	r3,-8(fp)
200862f8:	10c00d15 	stw	r3,52(r2)

    return ;
200862fc:	0001883a 	nop
}
20086300:	e037883a 	mov	sp,fp
20086304:	df000017 	ldw	fp,0(sp)
20086308:	dec00104 	addi	sp,sp,4
2008630c:	f800283a 	ret

20086310 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
20086310:	defffc04 	addi	sp,sp,-16
20086314:	dfc00315 	stw	ra,12(sp)
20086318:	df000215 	stw	fp,8(sp)
2008631c:	df000204 	addi	fp,sp,8
20086320:	e13ffe15 	stw	r4,-8(fp)
20086324:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
20086328:	e13ffe17 	ldw	r4,-8(fp)
2008632c:	e17fff17 	ldw	r5,-4(fp)
20086330:	000d883a 	mov	r6,zero
20086334:	0084ae40 	call	20084ae4 <alt_msgdma_descriptor_async_transfer>

}
20086338:	e037883a 	mov	sp,fp
2008633c:	dfc00117 	ldw	ra,4(sp)
20086340:	df000017 	ldw	fp,0(sp)
20086344:	dec00204 	addi	sp,sp,8
20086348:	f800283a 	ret

2008634c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2008634c:	defffc04 	addi	sp,sp,-16
20086350:	dfc00315 	stw	ra,12(sp)
20086354:	df000215 	stw	fp,8(sp)
20086358:	df000204 	addi	fp,sp,8
2008635c:	e13ffe15 	stw	r4,-8(fp)
20086360:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
20086364:	e13ffe17 	ldw	r4,-8(fp)
20086368:	000b883a 	mov	r5,zero
2008636c:	e1bfff17 	ldw	r6,-4(fp)
20086370:	0084ae40 	call	20084ae4 <alt_msgdma_descriptor_async_transfer>
}
20086374:	e037883a 	mov	sp,fp
20086378:	dfc00117 	ldw	ra,4(sp)
2008637c:	df000017 	ldw	fp,0(sp)
20086380:	dec00204 	addi	sp,sp,8
20086384:	f800283a 	ret

20086388 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
20086388:	defffc04 	addi	sp,sp,-16
2008638c:	dfc00315 	stw	ra,12(sp)
20086390:	df000215 	stw	fp,8(sp)
20086394:	df000204 	addi	fp,sp,8
20086398:	e13ffe15 	stw	r4,-8(fp)
2008639c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
200863a0:	e13ffe17 	ldw	r4,-8(fp)
200863a4:	e17fff17 	ldw	r5,-4(fp)
200863a8:	000d883a 	mov	r6,zero
200863ac:	0084db40 	call	20084db4 <alt_msgdma_descriptor_sync_transfer>
}
200863b0:	e037883a 	mov	sp,fp
200863b4:	dfc00117 	ldw	ra,4(sp)
200863b8:	df000017 	ldw	fp,0(sp)
200863bc:	dec00204 	addi	sp,sp,8
200863c0:	f800283a 	ret

200863c4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
200863c4:	defffc04 	addi	sp,sp,-16
200863c8:	dfc00315 	stw	ra,12(sp)
200863cc:	df000215 	stw	fp,8(sp)
200863d0:	df000204 	addi	fp,sp,8
200863d4:	e13ffe15 	stw	r4,-8(fp)
200863d8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
200863dc:	e13ffe17 	ldw	r4,-8(fp)
200863e0:	000b883a 	mov	r5,zero
200863e4:	e1bfff17 	ldw	r6,-4(fp)
200863e8:	0084db40 	call	20084db4 <alt_msgdma_descriptor_sync_transfer>
}
200863ec:	e037883a 	mov	sp,fp
200863f0:	dfc00117 	ldw	ra,4(sp)
200863f4:	df000017 	ldw	fp,0(sp)
200863f8:	dec00204 	addi	sp,sp,8
200863fc:	f800283a 	ret

20086400 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
20086400:	defff504 	addi	sp,sp,-44
20086404:	df000a15 	stw	fp,40(sp)
20086408:	df000a04 	addi	fp,sp,40
2008640c:	e13ffc15 	stw	r4,-16(fp)
20086410:	e17ffd15 	stw	r5,-12(fp)
20086414:	e1bffe15 	stw	r6,-8(fp)
20086418:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2008641c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20086420:	00800034 	movhi	r2,0
20086424:	10879104 	addi	r2,r2,7748
20086428:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2008642c:	10003f26 	beq	r2,zero,2008652c <alt_alarm_start+0x12c>
  {
    if (alarm)
20086430:	e0bffc17 	ldw	r2,-16(fp)
20086434:	10003b26 	beq	r2,zero,20086524 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
20086438:	e0bffc17 	ldw	r2,-16(fp)
2008643c:	e0fffe17 	ldw	r3,-8(fp)
20086440:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
20086444:	e0bffc17 	ldw	r2,-16(fp)
20086448:	e0ffff17 	ldw	r3,-4(fp)
2008644c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20086450:	0005303a 	rdctl	r2,status
20086454:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20086458:	e0fff817 	ldw	r3,-32(fp)
2008645c:	00bfff84 	movi	r2,-2
20086460:	1884703a 	and	r2,r3,r2
20086464:	1001703a 	wrctl	status,r2
  
  return context;
20086468:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2008646c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20086470:	00800034 	movhi	r2,0
20086474:	10879204 	addi	r2,r2,7752
20086478:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2008647c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
20086480:	e0fffd17 	ldw	r3,-12(fp)
20086484:	e0bff617 	ldw	r2,-40(fp)
20086488:	1885883a 	add	r2,r3,r2
2008648c:	10c00044 	addi	r3,r2,1
20086490:	e0bffc17 	ldw	r2,-16(fp)
20086494:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20086498:	e0bffc17 	ldw	r2,-16(fp)
2008649c:	10c00217 	ldw	r3,8(r2)
200864a0:	e0bff617 	ldw	r2,-40(fp)
200864a4:	1880042e 	bgeu	r3,r2,200864b8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
200864a8:	e0bffc17 	ldw	r2,-16(fp)
200864ac:	00c00044 	movi	r3,1
200864b0:	10c00405 	stb	r3,16(r2)
200864b4:	00000206 	br	200864c0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
200864b8:	e0bffc17 	ldw	r2,-16(fp)
200864bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
200864c0:	e0fffc17 	ldw	r3,-16(fp)
200864c4:	00800034 	movhi	r2,0
200864c8:	10878704 	addi	r2,r2,7708
200864cc:	e0bff915 	stw	r2,-28(fp)
200864d0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
200864d4:	e0bffa17 	ldw	r2,-24(fp)
200864d8:	e0fff917 	ldw	r3,-28(fp)
200864dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
200864e0:	e0bff917 	ldw	r2,-28(fp)
200864e4:	10c00017 	ldw	r3,0(r2)
200864e8:	e0bffa17 	ldw	r2,-24(fp)
200864ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
200864f0:	e0bff917 	ldw	r2,-28(fp)
200864f4:	10800017 	ldw	r2,0(r2)
200864f8:	e0fffa17 	ldw	r3,-24(fp)
200864fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
20086500:	e0bff917 	ldw	r2,-28(fp)
20086504:	e0fffa17 	ldw	r3,-24(fp)
20086508:	10c00015 	stw	r3,0(r2)
2008650c:	e0bff717 	ldw	r2,-36(fp)
20086510:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20086514:	e0bffb17 	ldw	r2,-20(fp)
20086518:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2008651c:	0005883a 	mov	r2,zero
20086520:	00000306 	br	20086530 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
20086524:	00bffa84 	movi	r2,-22
20086528:	00000106 	br	20086530 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2008652c:	00bfde84 	movi	r2,-134
  }
}
20086530:	e037883a 	mov	sp,fp
20086534:	df000017 	ldw	fp,0(sp)
20086538:	dec00104 	addi	sp,sp,4
2008653c:	f800283a 	ret

20086540 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
20086540:	defffa04 	addi	sp,sp,-24
20086544:	dfc00515 	stw	ra,20(sp)
20086548:	df000415 	stw	fp,16(sp)
2008654c:	df000404 	addi	fp,sp,16
20086550:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
20086554:	008000c4 	movi	r2,3
20086558:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2008655c:	e0fffd17 	ldw	r3,-12(fp)
20086560:	008003f4 	movhi	r2,15
20086564:	10909004 	addi	r2,r2,16960
20086568:	1885383a 	mul	r2,r3,r2
2008656c:	0101dcf4 	movhi	r4,1907
20086570:	21165004 	addi	r4,r4,22848
20086574:	100b883a 	mov	r5,r2
20086578:	0082f240 	call	20082f24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2008657c:	01200034 	movhi	r4,32768
20086580:	213fffc4 	addi	r4,r4,-1
20086584:	100b883a 	mov	r5,r2
20086588:	0082f240 	call	20082f24 <__udivsi3>
2008658c:	e13fff17 	ldw	r4,-4(fp)
20086590:	100b883a 	mov	r5,r2
20086594:	0082f240 	call	20082f24 <__udivsi3>
20086598:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2008659c:	e0bffe17 	ldw	r2,-8(fp)
200865a0:	10002a26 	beq	r2,zero,2008664c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
200865a4:	e03ffc15 	stw	zero,-16(fp)
200865a8:	00001706 	br	20086608 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
200865ac:	00a00034 	movhi	r2,32768
200865b0:	10bfffc4 	addi	r2,r2,-1
200865b4:	10bfffc4 	addi	r2,r2,-1
200865b8:	103ffe1e 	bne	r2,zero,200865b4 <__flash_rwdata_start+0xffffe5e4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
200865bc:	e0fffd17 	ldw	r3,-12(fp)
200865c0:	008003f4 	movhi	r2,15
200865c4:	10909004 	addi	r2,r2,16960
200865c8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
200865cc:	0101dcf4 	movhi	r4,1907
200865d0:	21165004 	addi	r4,r4,22848
200865d4:	100b883a 	mov	r5,r2
200865d8:	0082f240 	call	20082f24 <__udivsi3>
200865dc:	01200034 	movhi	r4,32768
200865e0:	213fffc4 	addi	r4,r4,-1
200865e4:	100b883a 	mov	r5,r2
200865e8:	0082f240 	call	20082f24 <__udivsi3>
200865ec:	1007883a 	mov	r3,r2
200865f0:	e0bfff17 	ldw	r2,-4(fp)
200865f4:	10c5c83a 	sub	r2,r2,r3
200865f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
200865fc:	e0bffc17 	ldw	r2,-16(fp)
20086600:	10800044 	addi	r2,r2,1
20086604:	e0bffc15 	stw	r2,-16(fp)
20086608:	e0fffc17 	ldw	r3,-16(fp)
2008660c:	e0bffe17 	ldw	r2,-8(fp)
20086610:	18bfe616 	blt	r3,r2,200865ac <__flash_rwdata_start+0xffffe5dc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
20086614:	e0fffd17 	ldw	r3,-12(fp)
20086618:	008003f4 	movhi	r2,15
2008661c:	10909004 	addi	r2,r2,16960
20086620:	1885383a 	mul	r2,r3,r2
20086624:	0101dcf4 	movhi	r4,1907
20086628:	21165004 	addi	r4,r4,22848
2008662c:	100b883a 	mov	r5,r2
20086630:	0082f240 	call	20082f24 <__udivsi3>
20086634:	1007883a 	mov	r3,r2
20086638:	e0bfff17 	ldw	r2,-4(fp)
2008663c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20086640:	10bfffc4 	addi	r2,r2,-1
20086644:	103ffe1e 	bne	r2,zero,20086640 <__flash_rwdata_start+0xffffe670>
20086648:	00000d06 	br	20086680 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2008664c:	e0fffd17 	ldw	r3,-12(fp)
20086650:	008003f4 	movhi	r2,15
20086654:	10909004 	addi	r2,r2,16960
20086658:	1885383a 	mul	r2,r3,r2
2008665c:	0101dcf4 	movhi	r4,1907
20086660:	21165004 	addi	r4,r4,22848
20086664:	100b883a 	mov	r5,r2
20086668:	0082f240 	call	20082f24 <__udivsi3>
2008666c:	1007883a 	mov	r3,r2
20086670:	e0bfff17 	ldw	r2,-4(fp)
20086674:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20086678:	10bfffc4 	addi	r2,r2,-1
2008667c:	00bffe16 	blt	zero,r2,20086678 <__flash_rwdata_start+0xffffe6a8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
20086680:	0005883a 	mov	r2,zero
}
20086684:	e037883a 	mov	sp,fp
20086688:	dfc00117 	ldw	ra,4(sp)
2008668c:	df000017 	ldw	fp,0(sp)
20086690:	dec00204 	addi	sp,sp,8
20086694:	f800283a 	ret

20086698 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
20086698:	defffe04 	addi	sp,sp,-8
2008669c:	df000115 	stw	fp,4(sp)
200866a0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200866a4:	e03fff15 	stw	zero,-4(fp)
200866a8:	00000506 	br	200866c0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
200866ac:	e0bfff17 	ldw	r2,-4(fp)
200866b0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
200866b4:	e0bfff17 	ldw	r2,-4(fp)
200866b8:	10800804 	addi	r2,r2,32
200866bc:	e0bfff15 	stw	r2,-4(fp)
200866c0:	e0bfff17 	ldw	r2,-4(fp)
200866c4:	10900030 	cmpltui	r2,r2,16384
200866c8:	103ff81e 	bne	r2,zero,200866ac <__flash_rwdata_start+0xffffe6dc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
200866cc:	e037883a 	mov	sp,fp
200866d0:	df000017 	ldw	fp,0(sp)
200866d4:	dec00104 	addi	sp,sp,4
200866d8:	f800283a 	ret

200866dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200866dc:	defffe04 	addi	sp,sp,-8
200866e0:	dfc00115 	stw	ra,4(sp)
200866e4:	df000015 	stw	fp,0(sp)
200866e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200866ec:	00800034 	movhi	r2,0
200866f0:	10878204 	addi	r2,r2,7688
200866f4:	10800017 	ldw	r2,0(r2)
200866f8:	10000526 	beq	r2,zero,20086710 <alt_get_errno+0x34>
200866fc:	00800034 	movhi	r2,0
20086700:	10878204 	addi	r2,r2,7688
20086704:	10800017 	ldw	r2,0(r2)
20086708:	103ee83a 	callr	r2
2008670c:	00000206 	br	20086718 <alt_get_errno+0x3c>
20086710:	00800034 	movhi	r2,0
20086714:	10878c04 	addi	r2,r2,7728
}
20086718:	e037883a 	mov	sp,fp
2008671c:	dfc00117 	ldw	ra,4(sp)
20086720:	df000017 	ldw	fp,0(sp)
20086724:	dec00204 	addi	sp,sp,8
20086728:	f800283a 	ret

2008672c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2008672c:	defffa04 	addi	sp,sp,-24
20086730:	dfc00515 	stw	ra,20(sp)
20086734:	df000415 	stw	fp,16(sp)
20086738:	df000404 	addi	fp,sp,16
2008673c:	e13ffe15 	stw	r4,-8(fp)
20086740:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
20086744:	e0bffe17 	ldw	r2,-8(fp)
20086748:	10000326 	beq	r2,zero,20086758 <alt_dev_llist_insert+0x2c>
2008674c:	e0bffe17 	ldw	r2,-8(fp)
20086750:	10800217 	ldw	r2,8(r2)
20086754:	1000061e 	bne	r2,zero,20086770 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
20086758:	00866dc0 	call	200866dc <alt_get_errno>
2008675c:	1007883a 	mov	r3,r2
20086760:	00800584 	movi	r2,22
20086764:	18800015 	stw	r2,0(r3)
    return -EINVAL;
20086768:	00bffa84 	movi	r2,-22
2008676c:	00001306 	br	200867bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
20086770:	e0bffe17 	ldw	r2,-8(fp)
20086774:	e0ffff17 	ldw	r3,-4(fp)
20086778:	e0fffc15 	stw	r3,-16(fp)
2008677c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20086780:	e0bffd17 	ldw	r2,-12(fp)
20086784:	e0fffc17 	ldw	r3,-16(fp)
20086788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2008678c:	e0bffc17 	ldw	r2,-16(fp)
20086790:	10c00017 	ldw	r3,0(r2)
20086794:	e0bffd17 	ldw	r2,-12(fp)
20086798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2008679c:	e0bffc17 	ldw	r2,-16(fp)
200867a0:	10800017 	ldw	r2,0(r2)
200867a4:	e0fffd17 	ldw	r3,-12(fp)
200867a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
200867ac:	e0bffc17 	ldw	r2,-16(fp)
200867b0:	e0fffd17 	ldw	r3,-12(fp)
200867b4:	10c00015 	stw	r3,0(r2)

  return 0;  
200867b8:	0005883a 	mov	r2,zero
}
200867bc:	e037883a 	mov	sp,fp
200867c0:	dfc00117 	ldw	ra,4(sp)
200867c4:	df000017 	ldw	fp,0(sp)
200867c8:	dec00204 	addi	sp,sp,8
200867cc:	f800283a 	ret

200867d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
200867d0:	defffd04 	addi	sp,sp,-12
200867d4:	dfc00215 	stw	ra,8(sp)
200867d8:	df000115 	stw	fp,4(sp)
200867dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200867e0:	00880234 	movhi	r2,8200
200867e4:	109f4f04 	addi	r2,r2,32060
200867e8:	e0bfff15 	stw	r2,-4(fp)
200867ec:	00000606 	br	20086808 <_do_ctors+0x38>
        (*ctor) (); 
200867f0:	e0bfff17 	ldw	r2,-4(fp)
200867f4:	10800017 	ldw	r2,0(r2)
200867f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200867fc:	e0bfff17 	ldw	r2,-4(fp)
20086800:	10bfff04 	addi	r2,r2,-4
20086804:	e0bfff15 	stw	r2,-4(fp)
20086808:	e0ffff17 	ldw	r3,-4(fp)
2008680c:	00880234 	movhi	r2,8200
20086810:	109f5004 	addi	r2,r2,32064
20086814:	18bff62e 	bgeu	r3,r2,200867f0 <__flash_rwdata_start+0xffffe820>
        (*ctor) (); 
}
20086818:	e037883a 	mov	sp,fp
2008681c:	dfc00117 	ldw	ra,4(sp)
20086820:	df000017 	ldw	fp,0(sp)
20086824:	dec00204 	addi	sp,sp,8
20086828:	f800283a 	ret

2008682c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2008682c:	defffd04 	addi	sp,sp,-12
20086830:	dfc00215 	stw	ra,8(sp)
20086834:	df000115 	stw	fp,4(sp)
20086838:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2008683c:	00880234 	movhi	r2,8200
20086840:	109f4f04 	addi	r2,r2,32060
20086844:	e0bfff15 	stw	r2,-4(fp)
20086848:	00000606 	br	20086864 <_do_dtors+0x38>
        (*dtor) (); 
2008684c:	e0bfff17 	ldw	r2,-4(fp)
20086850:	10800017 	ldw	r2,0(r2)
20086854:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20086858:	e0bfff17 	ldw	r2,-4(fp)
2008685c:	10bfff04 	addi	r2,r2,-4
20086860:	e0bfff15 	stw	r2,-4(fp)
20086864:	e0ffff17 	ldw	r3,-4(fp)
20086868:	00880234 	movhi	r2,8200
2008686c:	109f5004 	addi	r2,r2,32064
20086870:	18bff62e 	bgeu	r3,r2,2008684c <__flash_rwdata_start+0xffffe87c>
        (*dtor) (); 
}
20086874:	e037883a 	mov	sp,fp
20086878:	dfc00117 	ldw	ra,4(sp)
2008687c:	df000017 	ldw	fp,0(sp)
20086880:	dec00204 	addi	sp,sp,8
20086884:	f800283a 	ret

20086888 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20086888:	defffa04 	addi	sp,sp,-24
2008688c:	dfc00515 	stw	ra,20(sp)
20086890:	df000415 	stw	fp,16(sp)
20086894:	df000404 	addi	fp,sp,16
20086898:	e13ffe15 	stw	r4,-8(fp)
2008689c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
200868a0:	e0bfff17 	ldw	r2,-4(fp)
200868a4:	10800017 	ldw	r2,0(r2)
200868a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
200868ac:	e13ffe17 	ldw	r4,-8(fp)
200868b0:	008037c0 	call	2008037c <strlen>
200868b4:	10800044 	addi	r2,r2,1
200868b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
200868bc:	00000d06 	br	200868f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
200868c0:	e0bffc17 	ldw	r2,-16(fp)
200868c4:	10c00217 	ldw	r3,8(r2)
200868c8:	e0bffd17 	ldw	r2,-12(fp)
200868cc:	1809883a 	mov	r4,r3
200868d0:	e17ffe17 	ldw	r5,-8(fp)
200868d4:	100d883a 	mov	r6,r2
200868d8:	00877280 	call	20087728 <memcmp>
200868dc:	1000021e 	bne	r2,zero,200868e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
200868e0:	e0bffc17 	ldw	r2,-16(fp)
200868e4:	00000706 	br	20086904 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
200868e8:	e0bffc17 	ldw	r2,-16(fp)
200868ec:	10800017 	ldw	r2,0(r2)
200868f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
200868f4:	e0fffc17 	ldw	r3,-16(fp)
200868f8:	e0bfff17 	ldw	r2,-4(fp)
200868fc:	18bff01e 	bne	r3,r2,200868c0 <__flash_rwdata_start+0xffffe8f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20086900:	0005883a 	mov	r2,zero
}
20086904:	e037883a 	mov	sp,fp
20086908:	dfc00117 	ldw	ra,4(sp)
2008690c:	df000017 	ldw	fp,0(sp)
20086910:	dec00204 	addi	sp,sp,8
20086914:	f800283a 	ret

20086918 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
20086918:	defffe04 	addi	sp,sp,-8
2008691c:	dfc00115 	stw	ra,4(sp)
20086920:	df000015 	stw	fp,0(sp)
20086924:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
20086928:	0009883a 	mov	r4,zero
2008692c:	01440004 	movi	r5,4096
20086930:	00875b40 	call	200875b4 <alt_icache_flush>
#endif
}
20086934:	e037883a 	mov	sp,fp
20086938:	dfc00117 	ldw	ra,4(sp)
2008693c:	df000017 	ldw	fp,0(sp)
20086940:	dec00204 	addi	sp,sp,8
20086944:	f800283a 	ret

20086948 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20086948:	defff904 	addi	sp,sp,-28
2008694c:	dfc00615 	stw	ra,24(sp)
20086950:	df000515 	stw	fp,20(sp)
20086954:	df000504 	addi	fp,sp,20
20086958:	e13ffc15 	stw	r4,-16(fp)
2008695c:	e17ffd15 	stw	r5,-12(fp)
20086960:	e1bffe15 	stw	r6,-8(fp)
20086964:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
20086968:	e0800217 	ldw	r2,8(fp)
2008696c:	d8800015 	stw	r2,0(sp)
20086970:	e13ffc17 	ldw	r4,-16(fp)
20086974:	e17ffd17 	ldw	r5,-12(fp)
20086978:	e1bffe17 	ldw	r6,-8(fp)
2008697c:	e1ffff17 	ldw	r7,-4(fp)
20086980:	0086b280 	call	20086b28 <alt_iic_isr_register>
}  
20086984:	e037883a 	mov	sp,fp
20086988:	dfc00117 	ldw	ra,4(sp)
2008698c:	df000017 	ldw	fp,0(sp)
20086990:	dec00204 	addi	sp,sp,8
20086994:	f800283a 	ret

20086998 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
20086998:	defff904 	addi	sp,sp,-28
2008699c:	df000615 	stw	fp,24(sp)
200869a0:	df000604 	addi	fp,sp,24
200869a4:	e13ffe15 	stw	r4,-8(fp)
200869a8:	e17fff15 	stw	r5,-4(fp)
200869ac:	e0bfff17 	ldw	r2,-4(fp)
200869b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200869b4:	0005303a 	rdctl	r2,status
200869b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200869bc:	e0fffb17 	ldw	r3,-20(fp)
200869c0:	00bfff84 	movi	r2,-2
200869c4:	1884703a 	and	r2,r3,r2
200869c8:	1001703a 	wrctl	status,r2
  
  return context;
200869cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
200869d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
200869d4:	e0bffa17 	ldw	r2,-24(fp)
200869d8:	00c00044 	movi	r3,1
200869dc:	1884983a 	sll	r2,r3,r2
200869e0:	1007883a 	mov	r3,r2
200869e4:	00800034 	movhi	r2,0
200869e8:	10879004 	addi	r2,r2,7744
200869ec:	10800017 	ldw	r2,0(r2)
200869f0:	1886b03a 	or	r3,r3,r2
200869f4:	00800034 	movhi	r2,0
200869f8:	10879004 	addi	r2,r2,7744
200869fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20086a00:	00800034 	movhi	r2,0
20086a04:	10879004 	addi	r2,r2,7744
20086a08:	10800017 	ldw	r2,0(r2)
20086a0c:	100170fa 	wrctl	ienable,r2
20086a10:	e0bffc17 	ldw	r2,-16(fp)
20086a14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20086a18:	e0bffd17 	ldw	r2,-12(fp)
20086a1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20086a20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
20086a24:	0001883a 	nop
}
20086a28:	e037883a 	mov	sp,fp
20086a2c:	df000017 	ldw	fp,0(sp)
20086a30:	dec00104 	addi	sp,sp,4
20086a34:	f800283a 	ret

20086a38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
20086a38:	defff904 	addi	sp,sp,-28
20086a3c:	df000615 	stw	fp,24(sp)
20086a40:	df000604 	addi	fp,sp,24
20086a44:	e13ffe15 	stw	r4,-8(fp)
20086a48:	e17fff15 	stw	r5,-4(fp)
20086a4c:	e0bfff17 	ldw	r2,-4(fp)
20086a50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20086a54:	0005303a 	rdctl	r2,status
20086a58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20086a5c:	e0fffb17 	ldw	r3,-20(fp)
20086a60:	00bfff84 	movi	r2,-2
20086a64:	1884703a 	and	r2,r3,r2
20086a68:	1001703a 	wrctl	status,r2
  
  return context;
20086a6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
20086a70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
20086a74:	e0bffa17 	ldw	r2,-24(fp)
20086a78:	00c00044 	movi	r3,1
20086a7c:	1884983a 	sll	r2,r3,r2
20086a80:	0084303a 	nor	r2,zero,r2
20086a84:	1007883a 	mov	r3,r2
20086a88:	00800034 	movhi	r2,0
20086a8c:	10879004 	addi	r2,r2,7744
20086a90:	10800017 	ldw	r2,0(r2)
20086a94:	1886703a 	and	r3,r3,r2
20086a98:	00800034 	movhi	r2,0
20086a9c:	10879004 	addi	r2,r2,7744
20086aa0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20086aa4:	00800034 	movhi	r2,0
20086aa8:	10879004 	addi	r2,r2,7744
20086aac:	10800017 	ldw	r2,0(r2)
20086ab0:	100170fa 	wrctl	ienable,r2
20086ab4:	e0bffc17 	ldw	r2,-16(fp)
20086ab8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20086abc:	e0bffd17 	ldw	r2,-12(fp)
20086ac0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
20086ac4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
20086ac8:	0001883a 	nop
}
20086acc:	e037883a 	mov	sp,fp
20086ad0:	df000017 	ldw	fp,0(sp)
20086ad4:	dec00104 	addi	sp,sp,4
20086ad8:	f800283a 	ret

20086adc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
20086adc:	defffc04 	addi	sp,sp,-16
20086ae0:	df000315 	stw	fp,12(sp)
20086ae4:	df000304 	addi	fp,sp,12
20086ae8:	e13ffe15 	stw	r4,-8(fp)
20086aec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
20086af0:	000530fa 	rdctl	r2,ienable
20086af4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
20086af8:	e0bfff17 	ldw	r2,-4(fp)
20086afc:	00c00044 	movi	r3,1
20086b00:	1884983a 	sll	r2,r3,r2
20086b04:	1007883a 	mov	r3,r2
20086b08:	e0bffd17 	ldw	r2,-12(fp)
20086b0c:	1884703a 	and	r2,r3,r2
20086b10:	1004c03a 	cmpne	r2,r2,zero
20086b14:	10803fcc 	andi	r2,r2,255
}
20086b18:	e037883a 	mov	sp,fp
20086b1c:	df000017 	ldw	fp,0(sp)
20086b20:	dec00104 	addi	sp,sp,4
20086b24:	f800283a 	ret

20086b28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20086b28:	defff504 	addi	sp,sp,-44
20086b2c:	dfc00a15 	stw	ra,40(sp)
20086b30:	df000915 	stw	fp,36(sp)
20086b34:	df000904 	addi	fp,sp,36
20086b38:	e13ffc15 	stw	r4,-16(fp)
20086b3c:	e17ffd15 	stw	r5,-12(fp)
20086b40:	e1bffe15 	stw	r6,-8(fp)
20086b44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
20086b48:	00bffa84 	movi	r2,-22
20086b4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
20086b50:	e0bffd17 	ldw	r2,-12(fp)
20086b54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
20086b58:	e0bff817 	ldw	r2,-32(fp)
20086b5c:	10800808 	cmpgei	r2,r2,32
20086b60:	1000271e 	bne	r2,zero,20086c00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20086b64:	0005303a 	rdctl	r2,status
20086b68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20086b6c:	e0fffa17 	ldw	r3,-24(fp)
20086b70:	00bfff84 	movi	r2,-2
20086b74:	1884703a 	and	r2,r3,r2
20086b78:	1001703a 	wrctl	status,r2
  
  return context;
20086b7c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
20086b80:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
20086b84:	00800034 	movhi	r2,0
20086b88:	10879e04 	addi	r2,r2,7800
20086b8c:	e0fff817 	ldw	r3,-32(fp)
20086b90:	180690fa 	slli	r3,r3,3
20086b94:	10c5883a 	add	r2,r2,r3
20086b98:	e0fffe17 	ldw	r3,-8(fp)
20086b9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
20086ba0:	00800034 	movhi	r2,0
20086ba4:	10879e04 	addi	r2,r2,7800
20086ba8:	e0fff817 	ldw	r3,-32(fp)
20086bac:	180690fa 	slli	r3,r3,3
20086bb0:	18c00104 	addi	r3,r3,4
20086bb4:	10c5883a 	add	r2,r2,r3
20086bb8:	e0ffff17 	ldw	r3,-4(fp)
20086bbc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20086bc0:	e0bffe17 	ldw	r2,-8(fp)
20086bc4:	10000526 	beq	r2,zero,20086bdc <alt_iic_isr_register+0xb4>
20086bc8:	e0bff817 	ldw	r2,-32(fp)
20086bcc:	e13ffc17 	ldw	r4,-16(fp)
20086bd0:	100b883a 	mov	r5,r2
20086bd4:	00869980 	call	20086998 <alt_ic_irq_enable>
20086bd8:	00000406 	br	20086bec <alt_iic_isr_register+0xc4>
20086bdc:	e0bff817 	ldw	r2,-32(fp)
20086be0:	e13ffc17 	ldw	r4,-16(fp)
20086be4:	100b883a 	mov	r5,r2
20086be8:	0086a380 	call	20086a38 <alt_ic_irq_disable>
20086bec:	e0bff715 	stw	r2,-36(fp)
20086bf0:	e0bff917 	ldw	r2,-28(fp)
20086bf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20086bf8:	e0bffb17 	ldw	r2,-20(fp)
20086bfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
20086c00:	e0bff717 	ldw	r2,-36(fp)
}
20086c04:	e037883a 	mov	sp,fp
20086c08:	dfc00117 	ldw	ra,4(sp)
20086c0c:	df000017 	ldw	fp,0(sp)
20086c10:	dec00204 	addi	sp,sp,8
20086c14:	f800283a 	ret

20086c18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
20086c18:	defff904 	addi	sp,sp,-28
20086c1c:	dfc00615 	stw	ra,24(sp)
20086c20:	df000515 	stw	fp,20(sp)
20086c24:	df000504 	addi	fp,sp,20
20086c28:	e13ffc15 	stw	r4,-16(fp)
20086c2c:	e17ffd15 	stw	r5,-12(fp)
20086c30:	e1bffe15 	stw	r6,-8(fp)
20086c34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
20086c38:	e13ffd17 	ldw	r4,-12(fp)
20086c3c:	e17ffe17 	ldw	r5,-8(fp)
20086c40:	e1bfff17 	ldw	r6,-4(fp)
20086c44:	0086e6c0 	call	20086e6c <open>
20086c48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
20086c4c:	e0bffb17 	ldw	r2,-20(fp)
20086c50:	10001c16 	blt	r2,zero,20086cc4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
20086c54:	00800034 	movhi	r2,0
20086c58:	1082b904 	addi	r2,r2,2788
20086c5c:	e0fffb17 	ldw	r3,-20(fp)
20086c60:	18c00324 	muli	r3,r3,12
20086c64:	10c5883a 	add	r2,r2,r3
20086c68:	10c00017 	ldw	r3,0(r2)
20086c6c:	e0bffc17 	ldw	r2,-16(fp)
20086c70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
20086c74:	00800034 	movhi	r2,0
20086c78:	1082b904 	addi	r2,r2,2788
20086c7c:	e0fffb17 	ldw	r3,-20(fp)
20086c80:	18c00324 	muli	r3,r3,12
20086c84:	18c00104 	addi	r3,r3,4
20086c88:	10c5883a 	add	r2,r2,r3
20086c8c:	10c00017 	ldw	r3,0(r2)
20086c90:	e0bffc17 	ldw	r2,-16(fp)
20086c94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
20086c98:	00800034 	movhi	r2,0
20086c9c:	1082b904 	addi	r2,r2,2788
20086ca0:	e0fffb17 	ldw	r3,-20(fp)
20086ca4:	18c00324 	muli	r3,r3,12
20086ca8:	18c00204 	addi	r3,r3,8
20086cac:	10c5883a 	add	r2,r2,r3
20086cb0:	10c00017 	ldw	r3,0(r2)
20086cb4:	e0bffc17 	ldw	r2,-16(fp)
20086cb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
20086cbc:	e13ffb17 	ldw	r4,-20(fp)
20086cc0:	00836800 	call	20083680 <alt_release_fd>
  }
} 
20086cc4:	e037883a 	mov	sp,fp
20086cc8:	dfc00117 	ldw	ra,4(sp)
20086ccc:	df000017 	ldw	fp,0(sp)
20086cd0:	dec00204 	addi	sp,sp,8
20086cd4:	f800283a 	ret

20086cd8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20086cd8:	defffb04 	addi	sp,sp,-20
20086cdc:	dfc00415 	stw	ra,16(sp)
20086ce0:	df000315 	stw	fp,12(sp)
20086ce4:	df000304 	addi	fp,sp,12
20086ce8:	e13ffd15 	stw	r4,-12(fp)
20086cec:	e17ffe15 	stw	r5,-8(fp)
20086cf0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
20086cf4:	01000034 	movhi	r4,0
20086cf8:	2102bc04 	addi	r4,r4,2800
20086cfc:	e17ffd17 	ldw	r5,-12(fp)
20086d00:	01800044 	movi	r6,1
20086d04:	01c07fc4 	movi	r7,511
20086d08:	0086c180 	call	20086c18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
20086d0c:	01000034 	movhi	r4,0
20086d10:	2102b904 	addi	r4,r4,2788
20086d14:	e17ffe17 	ldw	r5,-8(fp)
20086d18:	000d883a 	mov	r6,zero
20086d1c:	01c07fc4 	movi	r7,511
20086d20:	0086c180 	call	20086c18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
20086d24:	01000034 	movhi	r4,0
20086d28:	2102bf04 	addi	r4,r4,2812
20086d2c:	e17fff17 	ldw	r5,-4(fp)
20086d30:	01800044 	movi	r6,1
20086d34:	01c07fc4 	movi	r7,511
20086d38:	0086c180 	call	20086c18 <alt_open_fd>
}  
20086d3c:	e037883a 	mov	sp,fp
20086d40:	dfc00117 	ldw	ra,4(sp)
20086d44:	df000017 	ldw	fp,0(sp)
20086d48:	dec00204 	addi	sp,sp,8
20086d4c:	f800283a 	ret

20086d50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20086d50:	defffe04 	addi	sp,sp,-8
20086d54:	dfc00115 	stw	ra,4(sp)
20086d58:	df000015 	stw	fp,0(sp)
20086d5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20086d60:	00800034 	movhi	r2,0
20086d64:	10878204 	addi	r2,r2,7688
20086d68:	10800017 	ldw	r2,0(r2)
20086d6c:	10000526 	beq	r2,zero,20086d84 <alt_get_errno+0x34>
20086d70:	00800034 	movhi	r2,0
20086d74:	10878204 	addi	r2,r2,7688
20086d78:	10800017 	ldw	r2,0(r2)
20086d7c:	103ee83a 	callr	r2
20086d80:	00000206 	br	20086d8c <alt_get_errno+0x3c>
20086d84:	00800034 	movhi	r2,0
20086d88:	10878c04 	addi	r2,r2,7728
}
20086d8c:	e037883a 	mov	sp,fp
20086d90:	dfc00117 	ldw	ra,4(sp)
20086d94:	df000017 	ldw	fp,0(sp)
20086d98:	dec00204 	addi	sp,sp,8
20086d9c:	f800283a 	ret

20086da0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
20086da0:	defffd04 	addi	sp,sp,-12
20086da4:	df000215 	stw	fp,8(sp)
20086da8:	df000204 	addi	fp,sp,8
20086dac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20086db0:	e0bfff17 	ldw	r2,-4(fp)
20086db4:	10800217 	ldw	r2,8(r2)
20086db8:	10d00034 	orhi	r3,r2,16384
20086dbc:	e0bfff17 	ldw	r2,-4(fp)
20086dc0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20086dc4:	e03ffe15 	stw	zero,-8(fp)
20086dc8:	00001d06 	br	20086e40 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20086dcc:	00800034 	movhi	r2,0
20086dd0:	1082b904 	addi	r2,r2,2788
20086dd4:	e0fffe17 	ldw	r3,-8(fp)
20086dd8:	18c00324 	muli	r3,r3,12
20086ddc:	10c5883a 	add	r2,r2,r3
20086de0:	10c00017 	ldw	r3,0(r2)
20086de4:	e0bfff17 	ldw	r2,-4(fp)
20086de8:	10800017 	ldw	r2,0(r2)
20086dec:	1880111e 	bne	r3,r2,20086e34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20086df0:	00800034 	movhi	r2,0
20086df4:	1082b904 	addi	r2,r2,2788
20086df8:	e0fffe17 	ldw	r3,-8(fp)
20086dfc:	18c00324 	muli	r3,r3,12
20086e00:	18c00204 	addi	r3,r3,8
20086e04:	10c5883a 	add	r2,r2,r3
20086e08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20086e0c:	1000090e 	bge	r2,zero,20086e34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
20086e10:	e0bffe17 	ldw	r2,-8(fp)
20086e14:	10c00324 	muli	r3,r2,12
20086e18:	00800034 	movhi	r2,0
20086e1c:	1082b904 	addi	r2,r2,2788
20086e20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20086e24:	e0bfff17 	ldw	r2,-4(fp)
20086e28:	18800226 	beq	r3,r2,20086e34 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
20086e2c:	00bffcc4 	movi	r2,-13
20086e30:	00000a06 	br	20086e5c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20086e34:	e0bffe17 	ldw	r2,-8(fp)
20086e38:	10800044 	addi	r2,r2,1
20086e3c:	e0bffe15 	stw	r2,-8(fp)
20086e40:	00800034 	movhi	r2,0
20086e44:	10878104 	addi	r2,r2,7684
20086e48:	10800017 	ldw	r2,0(r2)
20086e4c:	1007883a 	mov	r3,r2
20086e50:	e0bffe17 	ldw	r2,-8(fp)
20086e54:	18bfdd2e 	bgeu	r3,r2,20086dcc <__flash_rwdata_start+0xffffedfc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
20086e58:	0005883a 	mov	r2,zero
}
20086e5c:	e037883a 	mov	sp,fp
20086e60:	df000017 	ldw	fp,0(sp)
20086e64:	dec00104 	addi	sp,sp,4
20086e68:	f800283a 	ret

20086e6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20086e6c:	defff604 	addi	sp,sp,-40
20086e70:	dfc00915 	stw	ra,36(sp)
20086e74:	df000815 	stw	fp,32(sp)
20086e78:	df000804 	addi	fp,sp,32
20086e7c:	e13ffd15 	stw	r4,-12(fp)
20086e80:	e17ffe15 	stw	r5,-8(fp)
20086e84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20086e88:	00bfffc4 	movi	r2,-1
20086e8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
20086e90:	00bffb44 	movi	r2,-19
20086e94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
20086e98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20086e9c:	e13ffd17 	ldw	r4,-12(fp)
20086ea0:	01400034 	movhi	r5,0
20086ea4:	29477f04 	addi	r5,r5,7676
20086ea8:	00868880 	call	20086888 <alt_find_dev>
20086eac:	e0bff815 	stw	r2,-32(fp)
20086eb0:	e0bff817 	ldw	r2,-32(fp)
20086eb4:	1000051e 	bne	r2,zero,20086ecc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20086eb8:	e13ffd17 	ldw	r4,-12(fp)
20086ebc:	00873ec0 	call	200873ec <alt_find_file>
20086ec0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
20086ec4:	00800044 	movi	r2,1
20086ec8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20086ecc:	e0bff817 	ldw	r2,-32(fp)
20086ed0:	10002926 	beq	r2,zero,20086f78 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
20086ed4:	e13ff817 	ldw	r4,-32(fp)
20086ed8:	00875000 	call	20087500 <alt_get_fd>
20086edc:	e0bff915 	stw	r2,-28(fp)
20086ee0:	e0bff917 	ldw	r2,-28(fp)
20086ee4:	1000030e 	bge	r2,zero,20086ef4 <open+0x88>
    {
      status = index;
20086ee8:	e0bff917 	ldw	r2,-28(fp)
20086eec:	e0bffa15 	stw	r2,-24(fp)
20086ef0:	00002306 	br	20086f80 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
20086ef4:	e0bff917 	ldw	r2,-28(fp)
20086ef8:	10c00324 	muli	r3,r2,12
20086efc:	00800034 	movhi	r2,0
20086f00:	1082b904 	addi	r2,r2,2788
20086f04:	1885883a 	add	r2,r3,r2
20086f08:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20086f0c:	e0fffe17 	ldw	r3,-8(fp)
20086f10:	00900034 	movhi	r2,16384
20086f14:	10bfffc4 	addi	r2,r2,-1
20086f18:	1886703a 	and	r3,r3,r2
20086f1c:	e0bffc17 	ldw	r2,-16(fp)
20086f20:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
20086f24:	e0bffb17 	ldw	r2,-20(fp)
20086f28:	1000051e 	bne	r2,zero,20086f40 <open+0xd4>
20086f2c:	e13ffc17 	ldw	r4,-16(fp)
20086f30:	0086da00 	call	20086da0 <alt_file_locked>
20086f34:	e0bffa15 	stw	r2,-24(fp)
20086f38:	e0bffa17 	ldw	r2,-24(fp)
20086f3c:	10001016 	blt	r2,zero,20086f80 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20086f40:	e0bff817 	ldw	r2,-32(fp)
20086f44:	10800317 	ldw	r2,12(r2)
20086f48:	10000826 	beq	r2,zero,20086f6c <open+0x100>
20086f4c:	e0bff817 	ldw	r2,-32(fp)
20086f50:	10800317 	ldw	r2,12(r2)
20086f54:	e13ffc17 	ldw	r4,-16(fp)
20086f58:	e17ffd17 	ldw	r5,-12(fp)
20086f5c:	e1bffe17 	ldw	r6,-8(fp)
20086f60:	e1ffff17 	ldw	r7,-4(fp)
20086f64:	103ee83a 	callr	r2
20086f68:	00000106 	br	20086f70 <open+0x104>
20086f6c:	0005883a 	mov	r2,zero
20086f70:	e0bffa15 	stw	r2,-24(fp)
20086f74:	00000206 	br	20086f80 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
20086f78:	00bffb44 	movi	r2,-19
20086f7c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20086f80:	e0bffa17 	ldw	r2,-24(fp)
20086f84:	1000090e 	bge	r2,zero,20086fac <open+0x140>
  {
    alt_release_fd (index);  
20086f88:	e13ff917 	ldw	r4,-28(fp)
20086f8c:	00836800 	call	20083680 <alt_release_fd>
    ALT_ERRNO = -status;
20086f90:	0086d500 	call	20086d50 <alt_get_errno>
20086f94:	1007883a 	mov	r3,r2
20086f98:	e0bffa17 	ldw	r2,-24(fp)
20086f9c:	0085c83a 	sub	r2,zero,r2
20086fa0:	18800015 	stw	r2,0(r3)
    return -1;
20086fa4:	00bfffc4 	movi	r2,-1
20086fa8:	00000106 	br	20086fb0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
20086fac:	e0bff917 	ldw	r2,-28(fp)
}
20086fb0:	e037883a 	mov	sp,fp
20086fb4:	dfc00117 	ldw	ra,4(sp)
20086fb8:	df000017 	ldw	fp,0(sp)
20086fbc:	dec00204 	addi	sp,sp,8
20086fc0:	f800283a 	ret

20086fc4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
20086fc4:	defff204 	addi	sp,sp,-56
20086fc8:	dfc00a15 	stw	ra,40(sp)
20086fcc:	df000915 	stw	fp,36(sp)
20086fd0:	df000904 	addi	fp,sp,36
20086fd4:	e1400215 	stw	r5,8(fp)
20086fd8:	e1800315 	stw	r6,12(fp)
20086fdc:	e1c00415 	stw	r7,16(fp)
20086fe0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
20086fe4:	e0800204 	addi	r2,fp,8
20086fe8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
20086fec:	e0bfff17 	ldw	r2,-4(fp)
20086ff0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
20086ff4:	00007106 	br	200871bc <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20086ff8:	e0bff807 	ldb	r2,-32(fp)
20086ffc:	10800960 	cmpeqi	r2,r2,37
20087000:	1000041e 	bne	r2,zero,20087014 <alt_printf+0x50>
        {
            alt_putchar(c);
20087004:	e0bff807 	ldb	r2,-32(fp)
20087008:	1009883a 	mov	r4,r2
2008700c:	00871ec0 	call	200871ec <alt_putchar>
20087010:	00006a06 	br	200871bc <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
20087014:	e0bff717 	ldw	r2,-36(fp)
20087018:	10c00044 	addi	r3,r2,1
2008701c:	e0fff715 	stw	r3,-36(fp)
20087020:	10800003 	ldbu	r2,0(r2)
20087024:	e0bff805 	stb	r2,-32(fp)
20087028:	e0bff807 	ldb	r2,-32(fp)
2008702c:	10006226 	beq	r2,zero,200871b8 <alt_printf+0x1f4>
            {
                if (c == '%')
20087030:	e0bff807 	ldb	r2,-32(fp)
20087034:	10800958 	cmpnei	r2,r2,37
20087038:	1000041e 	bne	r2,zero,2008704c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
2008703c:	e0bff807 	ldb	r2,-32(fp)
20087040:	1009883a 	mov	r4,r2
20087044:	00871ec0 	call	200871ec <alt_putchar>
20087048:	00005c06 	br	200871bc <alt_printf+0x1f8>
                } 
                else if (c == 'c')
2008704c:	e0bff807 	ldb	r2,-32(fp)
20087050:	108018d8 	cmpnei	r2,r2,99
20087054:	1000081e 	bne	r2,zero,20087078 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
20087058:	e0bffe17 	ldw	r2,-8(fp)
2008705c:	10c00104 	addi	r3,r2,4
20087060:	e0fffe15 	stw	r3,-8(fp)
20087064:	10800017 	ldw	r2,0(r2)
20087068:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
2008706c:	e13ffd17 	ldw	r4,-12(fp)
20087070:	00871ec0 	call	200871ec <alt_putchar>
20087074:	00005106 	br	200871bc <alt_printf+0x1f8>
                }
                else if (c == 'x')
20087078:	e0bff807 	ldb	r2,-32(fp)
2008707c:	10801e18 	cmpnei	r2,r2,120
20087080:	1000341e 	bne	r2,zero,20087154 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
20087084:	e0bffe17 	ldw	r2,-8(fp)
20087088:	10c00104 	addi	r3,r2,4
2008708c:	e0fffe15 	stw	r3,-8(fp)
20087090:	10800017 	ldw	r2,0(r2)
20087094:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
20087098:	e0bffb17 	ldw	r2,-20(fp)
2008709c:	1000031e 	bne	r2,zero,200870ac <alt_printf+0xe8>
                    {
                        alt_putchar('0');
200870a0:	01000c04 	movi	r4,48
200870a4:	00871ec0 	call	200871ec <alt_putchar>
                        continue;
200870a8:	00004406 	br	200871bc <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
200870ac:	00800704 	movi	r2,28
200870b0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
200870b4:	00000306 	br	200870c4 <alt_printf+0x100>
                        digit_shift -= 4;
200870b8:	e0bff917 	ldw	r2,-28(fp)
200870bc:	10bfff04 	addi	r2,r2,-4
200870c0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
200870c4:	00c003c4 	movi	r3,15
200870c8:	e0bff917 	ldw	r2,-28(fp)
200870cc:	1884983a 	sll	r2,r3,r2
200870d0:	1007883a 	mov	r3,r2
200870d4:	e0bffb17 	ldw	r2,-20(fp)
200870d8:	1884703a 	and	r2,r3,r2
200870dc:	103ff626 	beq	r2,zero,200870b8 <__flash_rwdata_start+0xfffff0e8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
200870e0:	00001906 	br	20087148 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
200870e4:	00c003c4 	movi	r3,15
200870e8:	e0bff917 	ldw	r2,-28(fp)
200870ec:	1884983a 	sll	r2,r3,r2
200870f0:	1007883a 	mov	r3,r2
200870f4:	e0bffb17 	ldw	r2,-20(fp)
200870f8:	1886703a 	and	r3,r3,r2
200870fc:	e0bff917 	ldw	r2,-28(fp)
20087100:	1884d83a 	srl	r2,r3,r2
20087104:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
20087108:	e0bffc17 	ldw	r2,-16(fp)
2008710c:	108002a8 	cmpgeui	r2,r2,10
20087110:	1000041e 	bne	r2,zero,20087124 <alt_printf+0x160>
                            c = '0' + digit;
20087114:	e0bffc17 	ldw	r2,-16(fp)
20087118:	10800c04 	addi	r2,r2,48
2008711c:	e0bff805 	stb	r2,-32(fp)
20087120:	00000306 	br	20087130 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
20087124:	e0bffc17 	ldw	r2,-16(fp)
20087128:	108015c4 	addi	r2,r2,87
2008712c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
20087130:	e0bff807 	ldb	r2,-32(fp)
20087134:	1009883a 	mov	r4,r2
20087138:	00871ec0 	call	200871ec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2008713c:	e0bff917 	ldw	r2,-28(fp)
20087140:	10bfff04 	addi	r2,r2,-4
20087144:	e0bff915 	stw	r2,-28(fp)
20087148:	e0bff917 	ldw	r2,-28(fp)
2008714c:	103fe50e 	bge	r2,zero,200870e4 <__flash_rwdata_start+0xfffff114>
20087150:	00001a06 	br	200871bc <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
20087154:	e0bff807 	ldb	r2,-32(fp)
20087158:	10801cd8 	cmpnei	r2,r2,115
2008715c:	1000151e 	bne	r2,zero,200871b4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
20087160:	e0bffe17 	ldw	r2,-8(fp)
20087164:	10c00104 	addi	r3,r2,4
20087168:	e0fffe15 	stw	r3,-8(fp)
2008716c:	10800017 	ldw	r2,0(r2)
20087170:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
20087174:	00000906 	br	2008719c <alt_printf+0x1d8>
                      alt_putchar(*s++);
20087178:	e0bffa17 	ldw	r2,-24(fp)
2008717c:	10c00044 	addi	r3,r2,1
20087180:	e0fffa15 	stw	r3,-24(fp)
20087184:	10800003 	ldbu	r2,0(r2)
20087188:	10803fcc 	andi	r2,r2,255
2008718c:	1080201c 	xori	r2,r2,128
20087190:	10bfe004 	addi	r2,r2,-128
20087194:	1009883a 	mov	r4,r2
20087198:	00871ec0 	call	200871ec <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
2008719c:	e0bffa17 	ldw	r2,-24(fp)
200871a0:	10800003 	ldbu	r2,0(r2)
200871a4:	10803fcc 	andi	r2,r2,255
200871a8:	1080201c 	xori	r2,r2,128
200871ac:	10bfe004 	addi	r2,r2,-128
200871b0:	103ff11e 	bne	r2,zero,20087178 <__flash_rwdata_start+0xfffff1a8>
200871b4:	00000106 	br	200871bc <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
200871b8:	00000706 	br	200871d8 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
200871bc:	e0bff717 	ldw	r2,-36(fp)
200871c0:	10c00044 	addi	r3,r2,1
200871c4:	e0fff715 	stw	r3,-36(fp)
200871c8:	10800003 	ldbu	r2,0(r2)
200871cc:	e0bff805 	stb	r2,-32(fp)
200871d0:	e0bff807 	ldb	r2,-32(fp)
200871d4:	103f881e 	bne	r2,zero,20086ff8 <__flash_rwdata_start+0xfffff028>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
200871d8:	e037883a 	mov	sp,fp
200871dc:	dfc00117 	ldw	ra,4(sp)
200871e0:	df000017 	ldw	fp,0(sp)
200871e4:	dec00504 	addi	sp,sp,20
200871e8:	f800283a 	ret

200871ec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
200871ec:	defffd04 	addi	sp,sp,-12
200871f0:	dfc00215 	stw	ra,8(sp)
200871f4:	df000115 	stw	fp,4(sp)
200871f8:	df000104 	addi	fp,sp,4
200871fc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
20087200:	00800034 	movhi	r2,0
20087204:	10877a04 	addi	r2,r2,7656
20087208:	10800017 	ldw	r2,0(r2)
2008720c:	10800217 	ldw	r2,8(r2)
20087210:	e13fff17 	ldw	r4,-4(fp)
20087214:	100b883a 	mov	r5,r2
20087218:	00878440 	call	20087844 <putc>
#endif
#endif
}
2008721c:	e037883a 	mov	sp,fp
20087220:	dfc00117 	ldw	ra,4(sp)
20087224:	df000017 	ldw	fp,0(sp)
20087228:	dec00204 	addi	sp,sp,8
2008722c:	f800283a 	ret

20087230 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
20087230:	defffa04 	addi	sp,sp,-24
20087234:	df000515 	stw	fp,20(sp)
20087238:	df000504 	addi	fp,sp,20
2008723c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20087240:	0005303a 	rdctl	r2,status
20087244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20087248:	e0fffc17 	ldw	r3,-16(fp)
2008724c:	00bfff84 	movi	r2,-2
20087250:	1884703a 	and	r2,r3,r2
20087254:	1001703a 	wrctl	status,r2
  
  return context;
20087258:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
2008725c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20087260:	e0bfff17 	ldw	r2,-4(fp)
20087264:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20087268:	e0bffd17 	ldw	r2,-12(fp)
2008726c:	10800017 	ldw	r2,0(r2)
20087270:	e0fffd17 	ldw	r3,-12(fp)
20087274:	18c00117 	ldw	r3,4(r3)
20087278:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
2008727c:	e0bffd17 	ldw	r2,-12(fp)
20087280:	10800117 	ldw	r2,4(r2)
20087284:	e0fffd17 	ldw	r3,-12(fp)
20087288:	18c00017 	ldw	r3,0(r3)
2008728c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20087290:	e0bffd17 	ldw	r2,-12(fp)
20087294:	e0fffd17 	ldw	r3,-12(fp)
20087298:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
2008729c:	e0bffd17 	ldw	r2,-12(fp)
200872a0:	e0fffd17 	ldw	r3,-12(fp)
200872a4:	10c00015 	stw	r3,0(r2)
200872a8:	e0bffb17 	ldw	r2,-20(fp)
200872ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200872b0:	e0bffe17 	ldw	r2,-8(fp)
200872b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
200872b8:	e037883a 	mov	sp,fp
200872bc:	df000017 	ldw	fp,0(sp)
200872c0:	dec00104 	addi	sp,sp,4
200872c4:	f800283a 	ret

200872c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
200872c8:	defffb04 	addi	sp,sp,-20
200872cc:	dfc00415 	stw	ra,16(sp)
200872d0:	df000315 	stw	fp,12(sp)
200872d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
200872d8:	d0a00e17 	ldw	r2,-32712(gp)
200872dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
200872e0:	d0a01917 	ldw	r2,-32668(gp)
200872e4:	10800044 	addi	r2,r2,1
200872e8:	d0a01915 	stw	r2,-32668(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
200872ec:	00002e06 	br	200873a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
200872f0:	e0bffd17 	ldw	r2,-12(fp)
200872f4:	10800017 	ldw	r2,0(r2)
200872f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
200872fc:	e0bffd17 	ldw	r2,-12(fp)
20087300:	10800403 	ldbu	r2,16(r2)
20087304:	10803fcc 	andi	r2,r2,255
20087308:	10000426 	beq	r2,zero,2008731c <alt_tick+0x54>
2008730c:	d0a01917 	ldw	r2,-32668(gp)
20087310:	1000021e 	bne	r2,zero,2008731c <alt_tick+0x54>
    {
      alarm->rollover = 0;
20087314:	e0bffd17 	ldw	r2,-12(fp)
20087318:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
2008731c:	e0bffd17 	ldw	r2,-12(fp)
20087320:	10800217 	ldw	r2,8(r2)
20087324:	d0e01917 	ldw	r3,-32668(gp)
20087328:	18801d36 	bltu	r3,r2,200873a0 <alt_tick+0xd8>
2008732c:	e0bffd17 	ldw	r2,-12(fp)
20087330:	10800403 	ldbu	r2,16(r2)
20087334:	10803fcc 	andi	r2,r2,255
20087338:	1000191e 	bne	r2,zero,200873a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
2008733c:	e0bffd17 	ldw	r2,-12(fp)
20087340:	10800317 	ldw	r2,12(r2)
20087344:	e0fffd17 	ldw	r3,-12(fp)
20087348:	18c00517 	ldw	r3,20(r3)
2008734c:	1809883a 	mov	r4,r3
20087350:	103ee83a 	callr	r2
20087354:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20087358:	e0bfff17 	ldw	r2,-4(fp)
2008735c:	1000031e 	bne	r2,zero,2008736c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20087360:	e13ffd17 	ldw	r4,-12(fp)
20087364:	00872300 	call	20087230 <alt_alarm_stop>
20087368:	00000d06 	br	200873a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
2008736c:	e0bffd17 	ldw	r2,-12(fp)
20087370:	10c00217 	ldw	r3,8(r2)
20087374:	e0bfff17 	ldw	r2,-4(fp)
20087378:	1887883a 	add	r3,r3,r2
2008737c:	e0bffd17 	ldw	r2,-12(fp)
20087380:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20087384:	e0bffd17 	ldw	r2,-12(fp)
20087388:	10c00217 	ldw	r3,8(r2)
2008738c:	d0a01917 	ldw	r2,-32668(gp)
20087390:	1880032e 	bgeu	r3,r2,200873a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
20087394:	e0bffd17 	ldw	r2,-12(fp)
20087398:	00c00044 	movi	r3,1
2008739c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
200873a0:	e0bffe17 	ldw	r2,-8(fp)
200873a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
200873a8:	e0fffd17 	ldw	r3,-12(fp)
200873ac:	d0a00e04 	addi	r2,gp,-32712
200873b0:	18bfcf1e 	bne	r3,r2,200872f0 <__flash_rwdata_start+0xfffff320>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
200873b4:	0001883a 	nop
}
200873b8:	e037883a 	mov	sp,fp
200873bc:	dfc00117 	ldw	ra,4(sp)
200873c0:	df000017 	ldw	fp,0(sp)
200873c4:	dec00204 	addi	sp,sp,8
200873c8:	f800283a 	ret

200873cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
200873cc:	deffff04 	addi	sp,sp,-4
200873d0:	df000015 	stw	fp,0(sp)
200873d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
200873d8:	000170fa 	wrctl	ienable,zero
}
200873dc:	e037883a 	mov	sp,fp
200873e0:	df000017 	ldw	fp,0(sp)
200873e4:	dec00104 	addi	sp,sp,4
200873e8:	f800283a 	ret

200873ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
200873ec:	defffb04 	addi	sp,sp,-20
200873f0:	dfc00415 	stw	ra,16(sp)
200873f4:	df000315 	stw	fp,12(sp)
200873f8:	df000304 	addi	fp,sp,12
200873fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
20087400:	00800034 	movhi	r2,0
20087404:	10877d04 	addi	r2,r2,7668
20087408:	10800017 	ldw	r2,0(r2)
2008740c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
20087410:	00003106 	br	200874d8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
20087414:	e0bffd17 	ldw	r2,-12(fp)
20087418:	10800217 	ldw	r2,8(r2)
2008741c:	1009883a 	mov	r4,r2
20087420:	008037c0 	call	2008037c <strlen>
20087424:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
20087428:	e0bffd17 	ldw	r2,-12(fp)
2008742c:	10c00217 	ldw	r3,8(r2)
20087430:	e0bffe17 	ldw	r2,-8(fp)
20087434:	10bfffc4 	addi	r2,r2,-1
20087438:	1885883a 	add	r2,r3,r2
2008743c:	10800003 	ldbu	r2,0(r2)
20087440:	10803fcc 	andi	r2,r2,255
20087444:	1080201c 	xori	r2,r2,128
20087448:	10bfe004 	addi	r2,r2,-128
2008744c:	10800bd8 	cmpnei	r2,r2,47
20087450:	1000031e 	bne	r2,zero,20087460 <alt_find_file+0x74>
    {
      len -= 1;
20087454:	e0bffe17 	ldw	r2,-8(fp)
20087458:	10bfffc4 	addi	r2,r2,-1
2008745c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
20087460:	e0bffe17 	ldw	r2,-8(fp)
20087464:	e0ffff17 	ldw	r3,-4(fp)
20087468:	1885883a 	add	r2,r3,r2
2008746c:	10800003 	ldbu	r2,0(r2)
20087470:	10803fcc 	andi	r2,r2,255
20087474:	1080201c 	xori	r2,r2,128
20087478:	10bfe004 	addi	r2,r2,-128
2008747c:	10800be0 	cmpeqi	r2,r2,47
20087480:	1000081e 	bne	r2,zero,200874a4 <alt_find_file+0xb8>
20087484:	e0bffe17 	ldw	r2,-8(fp)
20087488:	e0ffff17 	ldw	r3,-4(fp)
2008748c:	1885883a 	add	r2,r3,r2
20087490:	10800003 	ldbu	r2,0(r2)
20087494:	10803fcc 	andi	r2,r2,255
20087498:	1080201c 	xori	r2,r2,128
2008749c:	10bfe004 	addi	r2,r2,-128
200874a0:	10000a1e 	bne	r2,zero,200874cc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
200874a4:	e0bffd17 	ldw	r2,-12(fp)
200874a8:	10c00217 	ldw	r3,8(r2)
200874ac:	e0bffe17 	ldw	r2,-8(fp)
200874b0:	1809883a 	mov	r4,r3
200874b4:	e17fff17 	ldw	r5,-4(fp)
200874b8:	100d883a 	mov	r6,r2
200874bc:	00877280 	call	20087728 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
200874c0:	1000021e 	bne	r2,zero,200874cc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
200874c4:	e0bffd17 	ldw	r2,-12(fp)
200874c8:	00000806 	br	200874ec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
200874cc:	e0bffd17 	ldw	r2,-12(fp)
200874d0:	10800017 	ldw	r2,0(r2)
200874d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
200874d8:	e0fffd17 	ldw	r3,-12(fp)
200874dc:	00800034 	movhi	r2,0
200874e0:	10877d04 	addi	r2,r2,7668
200874e4:	18bfcb1e 	bne	r3,r2,20087414 <__flash_rwdata_start+0xfffff444>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
200874e8:	0005883a 	mov	r2,zero
}
200874ec:	e037883a 	mov	sp,fp
200874f0:	dfc00117 	ldw	ra,4(sp)
200874f4:	df000017 	ldw	fp,0(sp)
200874f8:	dec00204 	addi	sp,sp,8
200874fc:	f800283a 	ret

20087500 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
20087500:	defffc04 	addi	sp,sp,-16
20087504:	df000315 	stw	fp,12(sp)
20087508:	df000304 	addi	fp,sp,12
2008750c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
20087510:	00bffa04 	movi	r2,-24
20087514:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20087518:	e03ffd15 	stw	zero,-12(fp)
2008751c:	00001d06 	br	20087594 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
20087520:	00800034 	movhi	r2,0
20087524:	1082b904 	addi	r2,r2,2788
20087528:	e0fffd17 	ldw	r3,-12(fp)
2008752c:	18c00324 	muli	r3,r3,12
20087530:	10c5883a 	add	r2,r2,r3
20087534:	10800017 	ldw	r2,0(r2)
20087538:	1000131e 	bne	r2,zero,20087588 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2008753c:	00800034 	movhi	r2,0
20087540:	1082b904 	addi	r2,r2,2788
20087544:	e0fffd17 	ldw	r3,-12(fp)
20087548:	18c00324 	muli	r3,r3,12
2008754c:	10c5883a 	add	r2,r2,r3
20087550:	e0ffff17 	ldw	r3,-4(fp)
20087554:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
20087558:	00800034 	movhi	r2,0
2008755c:	10878104 	addi	r2,r2,7684
20087560:	10c00017 	ldw	r3,0(r2)
20087564:	e0bffd17 	ldw	r2,-12(fp)
20087568:	1880040e 	bge	r3,r2,2008757c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2008756c:	00800034 	movhi	r2,0
20087570:	10878104 	addi	r2,r2,7684
20087574:	e0fffd17 	ldw	r3,-12(fp)
20087578:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2008757c:	e0bffd17 	ldw	r2,-12(fp)
20087580:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
20087584:	00000606 	br	200875a0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
20087588:	e0bffd17 	ldw	r2,-12(fp)
2008758c:	10800044 	addi	r2,r2,1
20087590:	e0bffd15 	stw	r2,-12(fp)
20087594:	e0bffd17 	ldw	r2,-12(fp)
20087598:	10800810 	cmplti	r2,r2,32
2008759c:	103fe01e 	bne	r2,zero,20087520 <__flash_rwdata_start+0xfffff550>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
200875a0:	e0bffe17 	ldw	r2,-8(fp)
}
200875a4:	e037883a 	mov	sp,fp
200875a8:	df000017 	ldw	fp,0(sp)
200875ac:	dec00104 	addi	sp,sp,4
200875b0:	f800283a 	ret

200875b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
200875b4:	defffb04 	addi	sp,sp,-20
200875b8:	df000415 	stw	fp,16(sp)
200875bc:	df000404 	addi	fp,sp,16
200875c0:	e13ffe15 	stw	r4,-8(fp)
200875c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
200875c8:	e0bfff17 	ldw	r2,-4(fp)
200875cc:	10840070 	cmpltui	r2,r2,4097
200875d0:	1000021e 	bne	r2,zero,200875dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
200875d4:	00840004 	movi	r2,4096
200875d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
200875dc:	e0fffe17 	ldw	r3,-8(fp)
200875e0:	e0bfff17 	ldw	r2,-4(fp)
200875e4:	1885883a 	add	r2,r3,r2
200875e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
200875ec:	e0bffe17 	ldw	r2,-8(fp)
200875f0:	e0bffc15 	stw	r2,-16(fp)
200875f4:	00000506 	br	2008760c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
200875f8:	e0bffc17 	ldw	r2,-16(fp)
200875fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
20087600:	e0bffc17 	ldw	r2,-16(fp)
20087604:	10800804 	addi	r2,r2,32
20087608:	e0bffc15 	stw	r2,-16(fp)
2008760c:	e0fffc17 	ldw	r3,-16(fp)
20087610:	e0bffd17 	ldw	r2,-12(fp)
20087614:	18bff836 	bltu	r3,r2,200875f8 <__flash_rwdata_start+0xfffff628>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
20087618:	e0bffe17 	ldw	r2,-8(fp)
2008761c:	108007cc 	andi	r2,r2,31
20087620:	10000226 	beq	r2,zero,2008762c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
20087624:	e0bffc17 	ldw	r2,-16(fp)
20087628:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2008762c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
20087630:	e037883a 	mov	sp,fp
20087634:	df000017 	ldw	fp,0(sp)
20087638:	dec00104 	addi	sp,sp,4
2008763c:	f800283a 	ret

20087640 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
20087640:	defffe04 	addi	sp,sp,-8
20087644:	df000115 	stw	fp,4(sp)
20087648:	df000104 	addi	fp,sp,4
2008764c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
20087650:	e0bfff17 	ldw	r2,-4(fp)
20087654:	10bffe84 	addi	r2,r2,-6
20087658:	10c00428 	cmpgeui	r3,r2,16
2008765c:	18001a1e 	bne	r3,zero,200876c8 <alt_exception_cause_generated_bad_addr+0x88>
20087660:	100690ba 	slli	r3,r2,2
20087664:	00880234 	movhi	r2,8200
20087668:	109d9e04 	addi	r2,r2,30328
2008766c:	1885883a 	add	r2,r3,r2
20087670:	10800017 	ldw	r2,0(r2)
20087674:	1000683a 	jmp	r2
20087678:	200876b8 	rdprs	zero,r4,8666
2008767c:	200876b8 	rdprs	zero,r4,8666
20087680:	200876c8 	cmpgei	zero,r4,8667
20087684:	200876c8 	cmpgei	zero,r4,8667
20087688:	200876c8 	cmpgei	zero,r4,8667
2008768c:	200876b8 	rdprs	zero,r4,8666
20087690:	200876c0 	call	2200876c <__flash_rwdata_start+0x1f8079c>
20087694:	200876c8 	cmpgei	zero,r4,8667
20087698:	200876b8 	rdprs	zero,r4,8666
2008769c:	200876b8 	rdprs	zero,r4,8666
200876a0:	200876c8 	cmpgei	zero,r4,8667
200876a4:	200876b8 	rdprs	zero,r4,8666
200876a8:	200876c0 	call	2200876c <__flash_rwdata_start+0x1f8079c>
200876ac:	200876c8 	cmpgei	zero,r4,8667
200876b0:	200876c8 	cmpgei	zero,r4,8667
200876b4:	200876b8 	rdprs	zero,r4,8666
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
200876b8:	00800044 	movi	r2,1
200876bc:	00000306 	br	200876cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
200876c0:	0005883a 	mov	r2,zero
200876c4:	00000106 	br	200876cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
200876c8:	0005883a 	mov	r2,zero
  }
}
200876cc:	e037883a 	mov	sp,fp
200876d0:	df000017 	ldw	fp,0(sp)
200876d4:	dec00104 	addi	sp,sp,4
200876d8:	f800283a 	ret

200876dc <atexit>:
200876dc:	200b883a 	mov	r5,r4
200876e0:	000d883a 	mov	r6,zero
200876e4:	0009883a 	mov	r4,zero
200876e8:	000f883a 	mov	r7,zero
200876ec:	0087a641 	jmpi	20087a64 <__register_exitproc>

200876f0 <exit>:
200876f0:	defffe04 	addi	sp,sp,-8
200876f4:	000b883a 	mov	r5,zero
200876f8:	dc000015 	stw	r16,0(sp)
200876fc:	dfc00115 	stw	ra,4(sp)
20087700:	2021883a 	mov	r16,r4
20087704:	0087b780 	call	20087b78 <__call_exitprocs>
20087708:	00800034 	movhi	r2,0
2008770c:	10877904 	addi	r2,r2,7652
20087710:	11000017 	ldw	r4,0(r2)
20087714:	20800f17 	ldw	r2,60(r4)
20087718:	10000126 	beq	r2,zero,20087720 <exit+0x30>
2008771c:	103ee83a 	callr	r2
20087720:	8009883a 	mov	r4,r16
20087724:	0087d0c0 	call	20087d0c <_exit>

20087728 <memcmp>:
20087728:	01c000c4 	movi	r7,3
2008772c:	3980192e 	bgeu	r7,r6,20087794 <memcmp+0x6c>
20087730:	2144b03a 	or	r2,r4,r5
20087734:	11c4703a 	and	r2,r2,r7
20087738:	10000f26 	beq	r2,zero,20087778 <memcmp+0x50>
2008773c:	20800003 	ldbu	r2,0(r4)
20087740:	28c00003 	ldbu	r3,0(r5)
20087744:	10c0151e 	bne	r2,r3,2008779c <memcmp+0x74>
20087748:	31bfff84 	addi	r6,r6,-2
2008774c:	01ffffc4 	movi	r7,-1
20087750:	00000406 	br	20087764 <memcmp+0x3c>
20087754:	20800003 	ldbu	r2,0(r4)
20087758:	28c00003 	ldbu	r3,0(r5)
2008775c:	31bfffc4 	addi	r6,r6,-1
20087760:	10c00e1e 	bne	r2,r3,2008779c <memcmp+0x74>
20087764:	21000044 	addi	r4,r4,1
20087768:	29400044 	addi	r5,r5,1
2008776c:	31fff91e 	bne	r6,r7,20087754 <__flash_rwdata_start+0xfffff784>
20087770:	0005883a 	mov	r2,zero
20087774:	f800283a 	ret
20087778:	20c00017 	ldw	r3,0(r4)
2008777c:	28800017 	ldw	r2,0(r5)
20087780:	1880041e 	bne	r3,r2,20087794 <memcmp+0x6c>
20087784:	31bfff04 	addi	r6,r6,-4
20087788:	21000104 	addi	r4,r4,4
2008778c:	29400104 	addi	r5,r5,4
20087790:	39bff936 	bltu	r7,r6,20087778 <__flash_rwdata_start+0xfffff7a8>
20087794:	303fe91e 	bne	r6,zero,2008773c <__flash_rwdata_start+0xfffff76c>
20087798:	003ff506 	br	20087770 <__flash_rwdata_start+0xfffff7a0>
2008779c:	10c5c83a 	sub	r2,r2,r3
200877a0:	f800283a 	ret

200877a4 <_putc_r>:
200877a4:	defffc04 	addi	sp,sp,-16
200877a8:	dc000215 	stw	r16,8(sp)
200877ac:	dfc00315 	stw	ra,12(sp)
200877b0:	2021883a 	mov	r16,r4
200877b4:	20000226 	beq	r4,zero,200877c0 <_putc_r+0x1c>
200877b8:	20800e17 	ldw	r2,56(r4)
200877bc:	10001b26 	beq	r2,zero,2008782c <_putc_r+0x88>
200877c0:	30800217 	ldw	r2,8(r6)
200877c4:	10bfffc4 	addi	r2,r2,-1
200877c8:	30800215 	stw	r2,8(r6)
200877cc:	10000a16 	blt	r2,zero,200877f8 <_putc_r+0x54>
200877d0:	30800017 	ldw	r2,0(r6)
200877d4:	11400005 	stb	r5,0(r2)
200877d8:	30800017 	ldw	r2,0(r6)
200877dc:	10c00044 	addi	r3,r2,1
200877e0:	30c00015 	stw	r3,0(r6)
200877e4:	10800003 	ldbu	r2,0(r2)
200877e8:	dfc00317 	ldw	ra,12(sp)
200877ec:	dc000217 	ldw	r16,8(sp)
200877f0:	dec00404 	addi	sp,sp,16
200877f4:	f800283a 	ret
200877f8:	30c00617 	ldw	r3,24(r6)
200877fc:	10c00616 	blt	r2,r3,20087818 <_putc_r+0x74>
20087800:	30800017 	ldw	r2,0(r6)
20087804:	00c00284 	movi	r3,10
20087808:	11400005 	stb	r5,0(r2)
2008780c:	30800017 	ldw	r2,0(r6)
20087810:	11400003 	ldbu	r5,0(r2)
20087814:	28fff11e 	bne	r5,r3,200877dc <__flash_rwdata_start+0xfffff80c>
20087818:	8009883a 	mov	r4,r16
2008781c:	dfc00317 	ldw	ra,12(sp)
20087820:	dc000217 	ldw	r16,8(sp)
20087824:	dec00404 	addi	sp,sp,16
20087828:	00879101 	jmpi	20087910 <__swbuf_r>
2008782c:	d9400015 	stw	r5,0(sp)
20087830:	d9800115 	stw	r6,4(sp)
20087834:	00820ec0 	call	200820ec <__sinit>
20087838:	d9800117 	ldw	r6,4(sp)
2008783c:	d9400017 	ldw	r5,0(sp)
20087840:	003fdf06 	br	200877c0 <__flash_rwdata_start+0xfffff7f0>

20087844 <putc>:
20087844:	00800034 	movhi	r2,0
20087848:	defffc04 	addi	sp,sp,-16
2008784c:	10877a04 	addi	r2,r2,7656
20087850:	dc400115 	stw	r17,4(sp)
20087854:	14400017 	ldw	r17,0(r2)
20087858:	dc800215 	stw	r18,8(sp)
2008785c:	dc000015 	stw	r16,0(sp)
20087860:	dfc00315 	stw	ra,12(sp)
20087864:	2025883a 	mov	r18,r4
20087868:	2821883a 	mov	r16,r5
2008786c:	88000226 	beq	r17,zero,20087878 <putc+0x34>
20087870:	88800e17 	ldw	r2,56(r17)
20087874:	10001a26 	beq	r2,zero,200878e0 <putc+0x9c>
20087878:	80800217 	ldw	r2,8(r16)
2008787c:	10bfffc4 	addi	r2,r2,-1
20087880:	80800215 	stw	r2,8(r16)
20087884:	10000c16 	blt	r2,zero,200878b8 <putc+0x74>
20087888:	80800017 	ldw	r2,0(r16)
2008788c:	14800005 	stb	r18,0(r2)
20087890:	80800017 	ldw	r2,0(r16)
20087894:	10c00044 	addi	r3,r2,1
20087898:	80c00015 	stw	r3,0(r16)
2008789c:	10800003 	ldbu	r2,0(r2)
200878a0:	dfc00317 	ldw	ra,12(sp)
200878a4:	dc800217 	ldw	r18,8(sp)
200878a8:	dc400117 	ldw	r17,4(sp)
200878ac:	dc000017 	ldw	r16,0(sp)
200878b0:	dec00404 	addi	sp,sp,16
200878b4:	f800283a 	ret
200878b8:	80c00617 	ldw	r3,24(r16)
200878bc:	10c00b16 	blt	r2,r3,200878ec <putc+0xa8>
200878c0:	80800017 	ldw	r2,0(r16)
200878c4:	00c00284 	movi	r3,10
200878c8:	14800005 	stb	r18,0(r2)
200878cc:	80800017 	ldw	r2,0(r16)
200878d0:	11400003 	ldbu	r5,0(r2)
200878d4:	28ffef1e 	bne	r5,r3,20087894 <__flash_rwdata_start+0xfffff8c4>
200878d8:	8809883a 	mov	r4,r17
200878dc:	00000506 	br	200878f4 <putc+0xb0>
200878e0:	8809883a 	mov	r4,r17
200878e4:	00820ec0 	call	200820ec <__sinit>
200878e8:	003fe306 	br	20087878 <__flash_rwdata_start+0xfffff8a8>
200878ec:	8809883a 	mov	r4,r17
200878f0:	900b883a 	mov	r5,r18
200878f4:	800d883a 	mov	r6,r16
200878f8:	dfc00317 	ldw	ra,12(sp)
200878fc:	dc800217 	ldw	r18,8(sp)
20087900:	dc400117 	ldw	r17,4(sp)
20087904:	dc000017 	ldw	r16,0(sp)
20087908:	dec00404 	addi	sp,sp,16
2008790c:	00879101 	jmpi	20087910 <__swbuf_r>

20087910 <__swbuf_r>:
20087910:	defffc04 	addi	sp,sp,-16
20087914:	dc800215 	stw	r18,8(sp)
20087918:	dc400115 	stw	r17,4(sp)
2008791c:	dc000015 	stw	r16,0(sp)
20087920:	dfc00315 	stw	ra,12(sp)
20087924:	2025883a 	mov	r18,r4
20087928:	2823883a 	mov	r17,r5
2008792c:	3021883a 	mov	r16,r6
20087930:	20000226 	beq	r4,zero,2008793c <__swbuf_r+0x2c>
20087934:	20800e17 	ldw	r2,56(r4)
20087938:	10004126 	beq	r2,zero,20087a40 <__swbuf_r+0x130>
2008793c:	80c00617 	ldw	r3,24(r16)
20087940:	8180030b 	ldhu	r6,12(r16)
20087944:	80c00215 	stw	r3,8(r16)
20087948:	30c0020c 	andi	r3,r6,8
2008794c:	18003526 	beq	r3,zero,20087a24 <__swbuf_r+0x114>
20087950:	80c00417 	ldw	r3,16(r16)
20087954:	18003326 	beq	r3,zero,20087a24 <__swbuf_r+0x114>
20087958:	3088000c 	andi	r2,r6,8192
2008795c:	8c403fcc 	andi	r17,r17,255
20087960:	10001726 	beq	r2,zero,200879c0 <__swbuf_r+0xb0>
20087964:	80800017 	ldw	r2,0(r16)
20087968:	81000517 	ldw	r4,20(r16)
2008796c:	10c7c83a 	sub	r3,r2,r3
20087970:	19001d0e 	bge	r3,r4,200879e8 <__swbuf_r+0xd8>
20087974:	18c00044 	addi	r3,r3,1
20087978:	81400217 	ldw	r5,8(r16)
2008797c:	11000044 	addi	r4,r2,1
20087980:	81000015 	stw	r4,0(r16)
20087984:	297fffc4 	addi	r5,r5,-1
20087988:	81400215 	stw	r5,8(r16)
2008798c:	14400005 	stb	r17,0(r2)
20087990:	80800517 	ldw	r2,20(r16)
20087994:	10c01d26 	beq	r2,r3,20087a0c <__swbuf_r+0xfc>
20087998:	8080030b 	ldhu	r2,12(r16)
2008799c:	1080004c 	andi	r2,r2,1
200879a0:	1000181e 	bne	r2,zero,20087a04 <__swbuf_r+0xf4>
200879a4:	8805883a 	mov	r2,r17
200879a8:	dfc00317 	ldw	ra,12(sp)
200879ac:	dc800217 	ldw	r18,8(sp)
200879b0:	dc400117 	ldw	r17,4(sp)
200879b4:	dc000017 	ldw	r16,0(sp)
200879b8:	dec00404 	addi	sp,sp,16
200879bc:	f800283a 	ret
200879c0:	81001917 	ldw	r4,100(r16)
200879c4:	00b7ffc4 	movi	r2,-8193
200879c8:	31880014 	ori	r6,r6,8192
200879cc:	2084703a 	and	r2,r4,r2
200879d0:	80801915 	stw	r2,100(r16)
200879d4:	80800017 	ldw	r2,0(r16)
200879d8:	81000517 	ldw	r4,20(r16)
200879dc:	8180030d 	sth	r6,12(r16)
200879e0:	10c7c83a 	sub	r3,r2,r3
200879e4:	193fe316 	blt	r3,r4,20087974 <__flash_rwdata_start+0xfffff9a4>
200879e8:	9009883a 	mov	r4,r18
200879ec:	800b883a 	mov	r5,r16
200879f0:	0081d100 	call	20081d10 <_fflush_r>
200879f4:	1000091e 	bne	r2,zero,20087a1c <__swbuf_r+0x10c>
200879f8:	80800017 	ldw	r2,0(r16)
200879fc:	00c00044 	movi	r3,1
20087a00:	003fdd06 	br	20087978 <__flash_rwdata_start+0xfffff9a8>
20087a04:	00800284 	movi	r2,10
20087a08:	88bfe61e 	bne	r17,r2,200879a4 <__flash_rwdata_start+0xfffff9d4>
20087a0c:	9009883a 	mov	r4,r18
20087a10:	800b883a 	mov	r5,r16
20087a14:	0081d100 	call	20081d10 <_fflush_r>
20087a18:	103fe226 	beq	r2,zero,200879a4 <__flash_rwdata_start+0xfffff9d4>
20087a1c:	00bfffc4 	movi	r2,-1
20087a20:	003fe106 	br	200879a8 <__flash_rwdata_start+0xfffff9d8>
20087a24:	9009883a 	mov	r4,r18
20087a28:	800b883a 	mov	r5,r16
20087a2c:	00819b40 	call	200819b4 <__swsetup_r>
20087a30:	103ffa1e 	bne	r2,zero,20087a1c <__flash_rwdata_start+0xfffffa4c>
20087a34:	8180030b 	ldhu	r6,12(r16)
20087a38:	80c00417 	ldw	r3,16(r16)
20087a3c:	003fc606 	br	20087958 <__flash_rwdata_start+0xfffff988>
20087a40:	00820ec0 	call	200820ec <__sinit>
20087a44:	003fbd06 	br	2008793c <__flash_rwdata_start+0xfffff96c>

20087a48 <__swbuf>:
20087a48:	00c00034 	movhi	r3,0
20087a4c:	18c77a04 	addi	r3,r3,7656
20087a50:	2005883a 	mov	r2,r4
20087a54:	19000017 	ldw	r4,0(r3)
20087a58:	280d883a 	mov	r6,r5
20087a5c:	100b883a 	mov	r5,r2
20087a60:	00879101 	jmpi	20087910 <__swbuf_r>

20087a64 <__register_exitproc>:
20087a64:	00800034 	movhi	r2,0
20087a68:	defffa04 	addi	sp,sp,-24
20087a6c:	10877904 	addi	r2,r2,7652
20087a70:	dc000315 	stw	r16,12(sp)
20087a74:	14000017 	ldw	r16,0(r2)
20087a78:	dc400415 	stw	r17,16(sp)
20087a7c:	dfc00515 	stw	ra,20(sp)
20087a80:	80805217 	ldw	r2,328(r16)
20087a84:	2023883a 	mov	r17,r4
20087a88:	10003626 	beq	r2,zero,20087b64 <__register_exitproc+0x100>
20087a8c:	10c00117 	ldw	r3,4(r2)
20087a90:	010007c4 	movi	r4,31
20087a94:	20c00e16 	blt	r4,r3,20087ad0 <__register_exitproc+0x6c>
20087a98:	1a400044 	addi	r9,r3,1
20087a9c:	8800211e 	bne	r17,zero,20087b24 <__register_exitproc+0xc0>
20087aa0:	18c00084 	addi	r3,r3,2
20087aa4:	18c7883a 	add	r3,r3,r3
20087aa8:	18c7883a 	add	r3,r3,r3
20087aac:	12400115 	stw	r9,4(r2)
20087ab0:	10c7883a 	add	r3,r2,r3
20087ab4:	19400015 	stw	r5,0(r3)
20087ab8:	0005883a 	mov	r2,zero
20087abc:	dfc00517 	ldw	ra,20(sp)
20087ac0:	dc400417 	ldw	r17,16(sp)
20087ac4:	dc000317 	ldw	r16,12(sp)
20087ac8:	dec00604 	addi	sp,sp,24
20087acc:	f800283a 	ret
20087ad0:	00800034 	movhi	r2,0
20087ad4:	10800004 	addi	r2,r2,0
20087ad8:	10002526 	beq	r2,zero,20087b70 <__register_exitproc+0x10c>
20087adc:	01006404 	movi	r4,400
20087ae0:	d9400015 	stw	r5,0(sp)
20087ae4:	d9800115 	stw	r6,4(sp)
20087ae8:	d9c00215 	stw	r7,8(sp)
20087aec:	00000000 	call	20000000 <__alt_data_end>
20087af0:	d9400017 	ldw	r5,0(sp)
20087af4:	d9800117 	ldw	r6,4(sp)
20087af8:	d9c00217 	ldw	r7,8(sp)
20087afc:	10001c26 	beq	r2,zero,20087b70 <__register_exitproc+0x10c>
20087b00:	80c05217 	ldw	r3,328(r16)
20087b04:	10000115 	stw	zero,4(r2)
20087b08:	02400044 	movi	r9,1
20087b0c:	10c00015 	stw	r3,0(r2)
20087b10:	80805215 	stw	r2,328(r16)
20087b14:	10006215 	stw	zero,392(r2)
20087b18:	10006315 	stw	zero,396(r2)
20087b1c:	0007883a 	mov	r3,zero
20087b20:	883fdf26 	beq	r17,zero,20087aa0 <__flash_rwdata_start+0xfffffad0>
20087b24:	18d1883a 	add	r8,r3,r3
20087b28:	4211883a 	add	r8,r8,r8
20087b2c:	1211883a 	add	r8,r2,r8
20087b30:	41802215 	stw	r6,136(r8)
20087b34:	01000044 	movi	r4,1
20087b38:	11806217 	ldw	r6,392(r2)
20087b3c:	20c8983a 	sll	r4,r4,r3
20087b40:	310cb03a 	or	r6,r6,r4
20087b44:	11806215 	stw	r6,392(r2)
20087b48:	41c04215 	stw	r7,264(r8)
20087b4c:	01800084 	movi	r6,2
20087b50:	89bfd31e 	bne	r17,r6,20087aa0 <__flash_rwdata_start+0xfffffad0>
20087b54:	11806317 	ldw	r6,396(r2)
20087b58:	3108b03a 	or	r4,r6,r4
20087b5c:	11006315 	stw	r4,396(r2)
20087b60:	003fcf06 	br	20087aa0 <__flash_rwdata_start+0xfffffad0>
20087b64:	80805304 	addi	r2,r16,332
20087b68:	80805215 	stw	r2,328(r16)
20087b6c:	003fc706 	br	20087a8c <__flash_rwdata_start+0xfffffabc>
20087b70:	00bfffc4 	movi	r2,-1
20087b74:	003fd106 	br	20087abc <__flash_rwdata_start+0xfffffaec>

20087b78 <__call_exitprocs>:
20087b78:	00800034 	movhi	r2,0
20087b7c:	10877904 	addi	r2,r2,7652
20087b80:	10800017 	ldw	r2,0(r2)
20087b84:	defff404 	addi	sp,sp,-48
20087b88:	dd800815 	stw	r22,32(sp)
20087b8c:	d8800015 	stw	r2,0(sp)
20087b90:	10805204 	addi	r2,r2,328
20087b94:	dd000615 	stw	r20,24(sp)
20087b98:	dc800415 	stw	r18,16(sp)
20087b9c:	dfc00b15 	stw	ra,44(sp)
20087ba0:	df000a15 	stw	fp,40(sp)
20087ba4:	ddc00915 	stw	r23,36(sp)
20087ba8:	dd400715 	stw	r21,28(sp)
20087bac:	dcc00515 	stw	r19,20(sp)
20087bb0:	dc400315 	stw	r17,12(sp)
20087bb4:	dc000215 	stw	r16,8(sp)
20087bb8:	2025883a 	mov	r18,r4
20087bbc:	2829883a 	mov	r20,r5
20087bc0:	d8800115 	stw	r2,4(sp)
20087bc4:	05bfffc4 	movi	r22,-1
20087bc8:	d8800017 	ldw	r2,0(sp)
20087bcc:	14c05217 	ldw	r19,328(r2)
20087bd0:	98001d26 	beq	r19,zero,20087c48 <__call_exitprocs+0xd0>
20087bd4:	dd400117 	ldw	r21,4(sp)
20087bd8:	98800117 	ldw	r2,4(r19)
20087bdc:	173fffc4 	addi	fp,r2,-1
20087be0:	e0000d16 	blt	fp,zero,20087c18 <__call_exitprocs+0xa0>
20087be4:	14000044 	addi	r16,r2,1
20087be8:	8421883a 	add	r16,r16,r16
20087bec:	8421883a 	add	r16,r16,r16
20087bf0:	84402004 	addi	r17,r16,128
20087bf4:	9c63883a 	add	r17,r19,r17
20087bf8:	9c21883a 	add	r16,r19,r16
20087bfc:	a0001e26 	beq	r20,zero,20087c78 <__call_exitprocs+0x100>
20087c00:	80804017 	ldw	r2,256(r16)
20087c04:	15001c26 	beq	r2,r20,20087c78 <__call_exitprocs+0x100>
20087c08:	e73fffc4 	addi	fp,fp,-1
20087c0c:	843fff04 	addi	r16,r16,-4
20087c10:	8c7fff04 	addi	r17,r17,-4
20087c14:	e5bff91e 	bne	fp,r22,20087bfc <__flash_rwdata_start+0xfffffc2c>
20087c18:	00800034 	movhi	r2,0
20087c1c:	10800004 	addi	r2,r2,0
20087c20:	10000926 	beq	r2,zero,20087c48 <__call_exitprocs+0xd0>
20087c24:	98800117 	ldw	r2,4(r19)
20087c28:	1000311e 	bne	r2,zero,20087cf0 <__call_exitprocs+0x178>
20087c2c:	98800017 	ldw	r2,0(r19)
20087c30:	10003426 	beq	r2,zero,20087d04 <__call_exitprocs+0x18c>
20087c34:	9809883a 	mov	r4,r19
20087c38:	a8800015 	stw	r2,0(r21)
20087c3c:	00000000 	call	20000000 <__alt_data_end>
20087c40:	acc00017 	ldw	r19,0(r21)
20087c44:	983fe41e 	bne	r19,zero,20087bd8 <__flash_rwdata_start+0xfffffc08>
20087c48:	dfc00b17 	ldw	ra,44(sp)
20087c4c:	df000a17 	ldw	fp,40(sp)
20087c50:	ddc00917 	ldw	r23,36(sp)
20087c54:	dd800817 	ldw	r22,32(sp)
20087c58:	dd400717 	ldw	r21,28(sp)
20087c5c:	dd000617 	ldw	r20,24(sp)
20087c60:	dcc00517 	ldw	r19,20(sp)
20087c64:	dc800417 	ldw	r18,16(sp)
20087c68:	dc400317 	ldw	r17,12(sp)
20087c6c:	dc000217 	ldw	r16,8(sp)
20087c70:	dec00c04 	addi	sp,sp,48
20087c74:	f800283a 	ret
20087c78:	98800117 	ldw	r2,4(r19)
20087c7c:	80c00017 	ldw	r3,0(r16)
20087c80:	10bfffc4 	addi	r2,r2,-1
20087c84:	17001526 	beq	r2,fp,20087cdc <__call_exitprocs+0x164>
20087c88:	80000015 	stw	zero,0(r16)
20087c8c:	183fde26 	beq	r3,zero,20087c08 <__flash_rwdata_start+0xfffffc38>
20087c90:	00800044 	movi	r2,1
20087c94:	1708983a 	sll	r4,r2,fp
20087c98:	98806217 	ldw	r2,392(r19)
20087c9c:	9dc00117 	ldw	r23,4(r19)
20087ca0:	2084703a 	and	r2,r4,r2
20087ca4:	1000061e 	bne	r2,zero,20087cc0 <__call_exitprocs+0x148>
20087ca8:	183ee83a 	callr	r3
20087cac:	98800117 	ldw	r2,4(r19)
20087cb0:	15ffc51e 	bne	r2,r23,20087bc8 <__flash_rwdata_start+0xfffffbf8>
20087cb4:	a8800017 	ldw	r2,0(r21)
20087cb8:	14ffd326 	beq	r2,r19,20087c08 <__flash_rwdata_start+0xfffffc38>
20087cbc:	003fc206 	br	20087bc8 <__flash_rwdata_start+0xfffffbf8>
20087cc0:	98806317 	ldw	r2,396(r19)
20087cc4:	2084703a 	and	r2,r4,r2
20087cc8:	1000061e 	bne	r2,zero,20087ce4 <__call_exitprocs+0x16c>
20087ccc:	89400017 	ldw	r5,0(r17)
20087cd0:	9009883a 	mov	r4,r18
20087cd4:	183ee83a 	callr	r3
20087cd8:	003ff406 	br	20087cac <__flash_rwdata_start+0xfffffcdc>
20087cdc:	9f000115 	stw	fp,4(r19)
20087ce0:	003fea06 	br	20087c8c <__flash_rwdata_start+0xfffffcbc>
20087ce4:	89000017 	ldw	r4,0(r17)
20087ce8:	183ee83a 	callr	r3
20087cec:	003fef06 	br	20087cac <__flash_rwdata_start+0xfffffcdc>
20087cf0:	98800017 	ldw	r2,0(r19)
20087cf4:	982b883a 	mov	r21,r19
20087cf8:	1027883a 	mov	r19,r2
20087cfc:	983fb61e 	bne	r19,zero,20087bd8 <__flash_rwdata_start+0xfffffc08>
20087d00:	003fd106 	br	20087c48 <__flash_rwdata_start+0xfffffc78>
20087d04:	0005883a 	mov	r2,zero
20087d08:	003ffa06 	br	20087cf4 <__flash_rwdata_start+0xfffffd24>

20087d0c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
20087d0c:	defffd04 	addi	sp,sp,-12
20087d10:	df000215 	stw	fp,8(sp)
20087d14:	df000204 	addi	fp,sp,8
20087d18:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
20087d1c:	0001883a 	nop
20087d20:	e0bfff17 	ldw	r2,-4(fp)
20087d24:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
20087d28:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
20087d2c:	10000226 	beq	r2,zero,20087d38 <_exit+0x2c>
    ALT_SIM_FAIL();
20087d30:	002af070 	cmpltui	zero,zero,43969
20087d34:	00000106 	br	20087d3c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
20087d38:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20087d3c:	003fff06 	br	20087d3c <__flash_rwdata_start+0xfffffd6c>
