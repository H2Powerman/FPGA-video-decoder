
ECE423_HW_TEST.elf:     file format elf32-littlenios2
ECE423_HW_TEST.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080240

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001b8fc memsz 0x0001b8fc flags r-x
    LOAD off    0x0001d000 vaddr 0x00000000 paddr 0x2009b91c align 2**12
         filesz 0x000023bc memsz 0x00002cf8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b6dc  20080240  20080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000868  00000000  2009b91c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00000868  2009c184  0001d868  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000093c  000023bc  2009dcd8  0001f3bc  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  00002cf8  00002cf8  0001f3bc  2**0
                  CONTENTS
  7 .sram         00000000  2009dcd8  2009dcd8  0001f3bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001f3bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000012b0  00000000  00000000  0001f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00030a17  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000befe  00000000  00000000  000510a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fa2f  00000000  00000000  0005cfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003a48  00000000  00000000  0006c9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000055b6  00000000  00000000  0007041c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d393  00000000  00000000  000759d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00092d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001bb8  00000000  00000000  00092dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000996e6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000996e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000996ec  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000996ed  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000996ee  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000996f2  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000996f6  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000996fa  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00099703  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009970c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00099715  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003b  00000000  00000000  00099720  2**0
                  CONTENTS, READONLY
 30 .jdi          000039ed  00000000  00000000  0009975b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00105871  00000000  00000000  0009d148  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080240 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000868 l    d  .rwdata	00000000 .rwdata
000023bc l    d  .bss	00000000 .bss
00002cf8 l    d  .lpddr2	00000000 .lpddr2
2009dcd8 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ECE423_HW_TEST_bsp//obj/HAL/src/crt0.o
20080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00002408 l     O .bss	00000140 fInfo.4006
00000000 l    df *ABS*	00000000 FatInternal.c
00002748 l     O .bss	00000200 szBlock.4051
00002548 l     O .bss	00000200 temp.4013
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 mmc.c
00000068 l     O .rodata	00000010 fbase
00000078 l     O .rodata	00000040 multipliers
20082b20 l     F .text	00000038 mmc_set_ios
20082b58 l     F .text	00000040 mmc_set_bus_width
20082b98 l     F .text	00000078 mmc_set_clock
20082c10 l     F .text	00000050 mmc_send_cmd
20082c60 l     F .text	00000070 mmc_go_idle
20082cd0 l     F .text	000000b4 mmc_send_if_cond
20082d84 l     F .text	00000164 sd_send_op_cond
20082ee8 l     F .text	0000016c mmc_send_op_cond
20083054 l     F .text	00000118 mmc_send_status
2008316c l     F .text	00000080 mmc_send_ext_csd
200831ec l     F .text	000000a8 mmc_switch
20083294 l     F .text	000001e0 sd_switch
20083474 l     F .text	00000388 sd_change_freq
000023bc l     O .bss	00000008 scr.3896
00002948 l     O .bss	00000040 switch_status.3897
200837fc l     F .text	00000124 mmc_change_freq
20083920 l     F .text	0000092c mmc_startup
2008424c l     F .text	00000054 mmc_set_blocklen
200842a0 l     F .text	00000118 mmc_read_blocks
00000000 l    df *ABS*	00000000 ocsdc.c
20084850 l     F .text	00000044 ocsdc_read
20084894 l     F .text	00000050 ocsdc_write
200848e4 l     F .text	00000068 ocsdc_set_buswidth
2008494c l     F .text	00000130 ocsdc_set_clock
20084a7c l     F .text	00000104 ocsdc_finish
20084b80 l     F .text	0000006c ocsdc_data_finish
20084bec l     F .text	00000110 ocsdc_setup_data_xfer
20084cfc l     F .text	000001cc ocsdc_send_cmd
20084ec8 l     F .text	000000a8 ocsdc_init
20084f70 l     F .text	0000006c ocsdc_set_ios
00000000 l    df *ABS*	00000000 sd_lib.c
00000000 l    df *ABS*	00000000 hw_vid_ctl.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
20086554 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000045a l     O .rodata	00000010 zeroes.4240
0000046a l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
0000047a l     O .rodata	00000010 zeroes.4255
2008dea0 l     F .text	000000bc __sbprintf
0000048a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
2008e1e0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
2008fd9c l     F .text	00000008 __fp_lock
2008fda4 l     F .text	00000008 __fp_unlock
2008fdb8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000c70 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000010b4 l     O .rwdata	00000020 lc_ctype_charset
00001094 l     O .rwdata	00000020 lc_message_charset
000010d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000004bc l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000005e0 l     O .rodata	00000010 zeroes.4184
000005f0 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
20093a94 l     F .text	000000fc __sprint_r.part.0
00000610 l     O .rodata	00000010 blanks.4199
00000600 l     O .rodata	00000010 zeroes.4200
20094e9c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 alt_close.c
20096d08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
20096e9c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
20096ec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
20096fc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
200970bc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
200971a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
2009737c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000023a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
2009781c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
20097964 l     F .text	00000038 alt_dev_reg
000012b4 l     O .rwdata	00001060 jtag_uart
00002314 l     O .rwdata	00000060 video_dma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
20097c94 l     F .text	00000204 altera_avalon_jtag_uart_irq
20097e98 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
200984b8 l     F .text	00000050 alt_get_errno
20098508 l     F .text	00000094 alt_msgdma_write_standard_descriptor
2009859c l     F .text	0000012c alt_msgdma_write_extended_descriptor
200986c8 l     F .text	00000184 alt_msgdma_irq
2009884c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
200988d8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
20098a2c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
20098cfc l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
20099344 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
200993e8 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
2009a624 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
2009ab60 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
2009ac98 l     F .text	00000050 alt_get_errno
2009ace8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002404 g     O .bss	00000004 alt_instruction_exception_handler
2009a258 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
20091e9c g     F .text	00000074 _mprec_log10
20086050 g     F .text	00000100 I2C_Read
20091f88 g     F .text	0000008c __any_on
20095408 g     F .text	00000054 _isatty_r
000004c8 g     O .rodata	00000028 __mprec_tinytens
200972c4 g     F .text	00000078 alt_main
20089c24 g     F .text	000000a8 _puts_r
20080368 g     F .text	0000006c Fat_FileBrowseBegin
00002bf8 g     O .bss	00000100 alt_irq
2009545c g     F .text	0000005c _lseek_r
2009c184 g       *ABS*	00000000 __flash_rwdata_start
200963a0 g     F .text	00000084 .hidden __eqdf2
20099124 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
00002cf8 g       *ABS*	00000000 __alt_heap_start
20089be8 g     F .text	0000003c printf
20095668 g     F .text	0000009c _wcrtomb_r
20080000 g       *ABS*	00000000 __alt_mem_sram
200926c8 g     F .text	0000005c __sseek
200900ec g     F .text	00000010 __sinit
20095514 g     F .text	00000138 __swbuf_r
20090b98 g     F .text	0000007c _setlocale_r
2008ff54 g     F .text	00000068 __sfmoreglue
2009735c g     F .text	00000020 __malloc_unlock
200803d4 g     F .text	0000042c Fat_FileBrowseNext
20086680 g     F .text	00000450 .hidden __divsf3
000023fc g     O .bss	00000004 altera_avalon_timer_ts_freq
20081e88 g     F .text	000000a8 fatIsValidDir
20090f18 g     F .text	0000015c memmove
200900d4 g     F .text	00000018 _cleanup
20091074 g     F .text	000000a8 _Balloc
20099074 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
20096424 g     F .text	000000e0 .hidden __gtdf2
2009b178 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
2008624c g     F .text	00000130 i2c_write
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
200953b0 g     F .text	00000058 _fstat_r
000023d4 g     O .bss	00000004 errno
20092644 g     F .text	00000008 __seofread
20092a5c g     F .text	00001038 ___svfiprintf_internal_r
200818ac g     F .text	00000180 fatNextCluster
000023e8 g     O .bss	00000004 alt_argv
0000a374 g       *ABS*	00000000 _gp
200977ec g     F .text	00000030 usleep
20097774 g     F .text	00000078 alt_uncached_malloc
20099b94 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00001134 g     O .rwdata	00000180 alt_fd_list
2009a7d0 g     F .text	00000090 alt_find_dev
20089960 g     F .text	00000138 memcpy
2008fdac g     F .text	0000000c _cleanup_r
20088ac4 g     F .text	000000d0 .hidden __floatsidf
2009ac20 g     F .text	00000078 alt_io_redirect
20096504 g     F .text	000000e0 .hidden __ltdf2
2009b91c g       *ABS*	00000000 __DTOR_END__
20099fb4 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
2009a294 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
2009a204 g     F .text	00000054 alt_msgdma_register_callback
20080b58 g     F .text	000000b0 Fat_FileExist
20089ccc g     F .text	00000014 puts
2009b3ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
2009257c g     F .text	00000074 __fpclassifyd
20091df8 g     F .text	000000a4 __ratio
20094e78 g     F .text	00000024 __vfiprintf_internal
20098094 g     F .text	0000020c altera_avalon_jtag_uart_read
20089114 g     F .text	00000014 malloc
20099874 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
20089bbc g     F .text	0000002c _printf_r
20086670 g     F .text	00000008 .hidden __udivsi3
20097018 g     F .text	000000a4 isatty
00000518 g     O .rodata	000000c8 __mprec_tens
20090c14 g     F .text	0000000c __locale_charset
2008e04c g     F .text	00000040 vsnprintf
2009b360 g     F .text	0000008c alt_icache_flush
000023d0 g     O .bss	00000004 __malloc_top_pad
00002384 g     O .rwdata	00000004 __mb_cur_max
20090c44 g     F .text	0000000c _localeconv_r
20091480 g     F .text	0000003c __i2b
20090550 g     F .text	000004c0 __sfvwrite_r
20089ce0 g     F .text	00000054 _sbrk_r
200954b8 g     F .text	0000005c _read_r
20096e28 g     F .text	00000074 alt_dcache_flush
0000239c g     O .rwdata	00000004 alt_max_fd
2008599c g     F .text	000005dc hw_init_hdmi
20082450 g     F .text	00000358 fatMount
200950cc g     F .text	000000f0 _fclose_r
2008fd6c g     F .text	00000030 fflush
000023cc g     O .bss	00000004 __malloc_max_sbrked_mem
20088c38 g     F .text	00000110 .hidden __extendsfdf2
20087004 g     F .text	0000089c .hidden __adddf3
20081f30 g     F .text	00000048 fatIsUnusedDir
20091ba0 g     F .text	0000011c __b2d
200995d4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
20095e10 g     F .text	00000590 .hidden __umoddi3
200852a4 g     F .text	000002a4 hw_video_display_init
200971f0 g     F .text	000000d4 lseek
0000237c g     O .rwdata	00000004 _global_impure_ptr
20092014 g     F .text	00000568 _realloc_r
00002cf8 g       *ABS*	00000000 __bss_end
2009aa70 g     F .text	000000f0 alt_iic_isr_register
20097670 g     F .text	00000104 alt_tick
2009a098 g     F .text	0000016c alt_msgdma_init
20095850 g     F .text	000005c0 .hidden __udivdi3
200951d0 g     F .text	00000184 _fputwc_r
000004f0 g     O .rodata	00000028 __mprec_bigtens
20091264 g     F .text	00000104 __s2b
20088b94 g     F .text	000000a4 .hidden __floatunsidf
200827e4 g     F .text	00000044 SD_ReadBlocks
20091948 g     F .text	00000060 __mcmp
2009a30c g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
200827a8 g     F .text	0000003c SD_ReadBlock512
2009010c g     F .text	00000018 __fp_lock_all
2009aa24 g     F .text	0000004c alt_ic_irq_enabled
20085f78 g     F .text	000000d8 I2C_Write
20080c08 g     F .text	00000220 Fat_FileOpen
200975d8 g     F .text	00000098 alt_alarm_stop
00002400 g     O .bss	00000004 alt_irq_active
20081ba4 g     F .text	000001e8 fatDelClusterList
200800fc g     F .exceptions	000000d0 alt_irq_handler
0000110c g     O .rwdata	00000028 alt_dev_null
2009920c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
20086150 g     F .text	00000088 i2c_start
20099f28 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
20089f34 g     F .text	00000068 strrchr
2009a5e0 g     F .text	00000044 alt_dcache_flush_all
20091368 g     F .text	00000068 __hi0bits
20088a3c g     F .text	00000088 .hidden __fixdfsi
2008480c g     F .text	00000044 flush_dcache_range
000023bc g       *ABS*	00000000 __ram_rwdata_end
00002394 g     O .rwdata	00000008 alt_dev_list
2008028c g     F .text	00000034 Fat_Mount
2009786c g     F .text	000000f8 write
2009b4d4 g     F .text	000000a0 _putc_r
00000868 g       *ABS*	00000000 __ram_rodata_end
20096f18 g     F .text	000000b0 fstat
20096504 g     F .text	000000e0 .hidden __ledf2
20082944 g     F .text	0000006c myprintf
200916b8 g     F .text	00000140 __pow5mult
20093ba8 g     F .text	000012d0 ___vfiprintf_internal_r
000023e0 g     O .bss	00000004 __nlocale_changed
20086678 g     F .text	00000008 .hidden __umodsi3
2009962c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
00002cf8 g       *ABS*	00000000 end
200843b8 g     F .text	00000118 mmc_init
20097bd0 g     F .text	000000c4 altera_avalon_jtag_uart_init
200801cc g     F .exceptions	00000074 alt_instruction_exception_entry
2009b91c g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
20088ee0 g     F .text	00000064 .hidden __clzsi2
200982a0 g     F .text	00000218 altera_avalon_jtag_uart_write
200814e8 g     F .text	00000034 Fat_FileClose
200900fc g     F .text	00000004 __sfp_lock_acquire
20080800 g     F .text	0000006c Fat_FileCount
20090e30 g     F .text	000000e8 memchr
2008bf2c g     F .text	00001f50 ___vfprintf_internal_r
20089d34 g     F .text	00000058 _sprintf_r
20090260 g     F .text	000002f0 _free_r
2009af0c g     F .text	00000228 alt_printf
20090c20 g     F .text	00000010 __locale_mb_cur_max
2009b754 g     F .text	00000194 __call_exitprocs
000023dc g     O .bss	00000004 __mlocale_changed
00002374 g     O .rwdata	00000004 __malloc_sbrk_base
20080240 g     F .text	0000004c _start
000023f0 g     O .bss	00000004 _alt_tick_rate
200917f8 g     F .text	00000150 __lshift
200990cc g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
000023f4 g     O .bss	00000004 _alt_nticks
200973cc g     F .text	000000fc read
200979d0 g     F .text	0000009c alt_sys_init
20092890 g     F .text	000001cc __ssprint_r
20085548 g     F .text	00000054 hw_video_display_register_written_buffer
2009b640 g     F .text	00000114 __register_exitproc
20080e28 g     F .text	00000044 Fat_FileSize
200914bc g     F .text	000001fc __multiply
20097f40 g     F .text	00000068 altera_avalon_jtag_uart_close
00000868 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
20082ac8 g     F .text	00000058 udelay
00002988 g     O .bss	00000028 __malloc_current_mallinfo
20091cbc g     F .text	0000013c __d2b
20097a6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
2009b2ac g     F .text	000000b4 alt_get_fd
2009a488 g     F .text	00000158 alt_busy_sleep
20084fdc g     F .text	00000184 ocsdc_mmc_init
20094fb4 g     F .text	00000054 _close_r
2009957c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
20080e6c g     F .text	0000057c Fat_FileRead
200898e4 g     F .text	0000007c memcmp
20097b2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00002cf8 g       *ABS*	00000000 __alt_stack_base
20097b7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
20082340 g     F .text	00000110 fatFindUnusedDirectory
20099684 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
2008e08c g     F .text	00000154 __swsetup_r
200878a0 g     F .text	000008cc .hidden __divdf3
2008ffbc g     F .text	00000118 __sfp
20091f10 g     F .text	00000078 __copybits
00000868 g     O .rwdata	00000408 __malloc_av_
20090108 g     F .text	00000004 __sinit_lock_release
20085754 g     F .text	0000006c hw_video_display_clear_screen
2008df5c g     F .text	000000f0 _vsnprintf_r
200861d8 g     F .text	00000074 i2c_stop
200965e4 g     F .text	00000724 .hidden __muldf3
200925f0 g     F .text	00000054 __sread
2008151c g     F .text	00000214 Fat_SpeedTest
2009b198 g     F .text	00000114 alt_find_file
2009a674 g     F .text	000000a4 alt_dev_llist_insert
2009733c g     F .text	00000020 __malloc_lock
20097528 g     F .text	000000b0 sbrk
20089f9c g     F .text	00001f90 ___svfprintf_internal_r
2008fd10 g     F .text	0000005c _fflush_r
20095008 g     F .text	000000c4 _calloc_r
20080ab0 g     F .text	00000074 Fat_CheckExtension
20082294 g     F .text	000000ac fatFindDirectory
000023bc g       *ABS*	00000000 __bss_start
20089a98 g     F .text	00000124 memset
2009a040 g     F .text	00000058 alt_msgdma_open
200864d0 g     F .text	00000084 main
20082198 g     F .text	00000090 fatReadSecter
000023ec g     O .bss	00000004 alt_envp
000023c8 g     O .bss	00000004 __malloc_max_total_mem
20099964 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
200829b0 g     F .text	00000088 myprintf_hexarray
20097acc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
2008637c g     F .text	00000154 i2c_read
2009564c g     F .text	0000001c __swbuf
20092724 g     F .text	00000008 __sclose
20081f78 g     F .text	00000198 fatDump
20000000 g       *ABS*	00000000 __alt_heap_limit
200951bc g     F .text	00000014 fclose
20088d48 g     F .text	00000198 .hidden __truncdfsf2
2008e3e0 g     F .text	00001728 _dtoa_r
20099c68 g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
2008913c g     F .text	000007a8 _malloc_r
200957c4 g     F .text	00000030 __ascii_wctomb
000023a0 g     O .rwdata	00000004 alt_errno
200997bc g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
20090a10 g     F .text	000000c4 _fwalk
20081d8c g     F .text	0000005c fatDumpDate
2009b574 g     F .text	000000cc putc
200813e8 g     F .text	00000100 Fat_FileSeek
200865c0 g     F .text	00000054 .hidden __divsi3
2009013c g     F .text	00000124 _malloc_trim_r
2009b91c g       *ABS*	00000000 __CTOR_END__
20086ad0 g     F .text	00000424 .hidden __mulsf3
20089df8 g     F .text	000000a4 strcmp
2009b91c g       *ABS*	00000000 __flash_rodata_start
2009b91c g       *ABS*	00000000 __DTOR_LIST__
20082110 g     F .text	00000088 fatArray2Value
20084654 g     F .text	000001b8 print_mmcinfo
200963a0 g     F .text	00000084 .hidden __nedf2
200817e0 g     F .text	000000cc fat32ClusterType
2009799c g     F .text	00000034 alt_irq_init
200974c8 g     F .text	00000060 alt_release_fd
2009a2d0 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
20088f44 g     F .text	0000001c memalign
20089d8c g     F .text	0000006c sprintf
00000314 g     O .rodata	00000100 .hidden __clz_tab
20082914 g     F .text	00000030 debug_output
000023d8 g     O .bss	00000004 _PathLocale
2009b488 g     F .text	00000014 atexit
20094f58 g     F .text	0000005c _write_r
20080900 g     F .text	000001b0 fatComposeShortFilename
20090c50 g     F .text	0000001c setlocale
20099724 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002380 g     O .rwdata	00000004 _impure_ptr
000023e4 g     O .bss	00000004 alt_argc
2008fb08 g     F .text	00000208 __sflush_r
000023f8 g     O .bss	00000004 altera_avalon_timer_ts_base
2009a774 g     F .text	0000005c _do_dtors
20090c3c g     F .text	00000008 __locale_cjk_lang
200802fc g     F .text	0000006c Fat_Type
20082a38 g     F .text	00000090 myprintf_dwordarray
200844d0 g     F .text	00000184 mmc_bread
20080020 g       .exceptions	00000000 alt_irq_entry
20091b40 g     F .text	00000060 __ulp
20090124 g     F .text	00000018 __fp_unlock_all
20081730 g     F .text	000000b0 fat16ClusterType
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
0000238c g     O .rwdata	00000008 alt_fs_list
20085958 g     F .text	00000044 hw_video_display_get_buffer
200857c0 g     F .text	00000030 hw_video_display_get_descriptor_span
20082228 g     F .text	0000006c fatReadMultiSecter
20080020 g       *ABS*	00000000 __ram_exceptions_start
20090c6c g     F .text	0000000c localeconv
2008086c g     F .text	00000094 fatSameLongFilename
2009a890 g     F .text	00000050 alt_ic_isr_register
000023bc g       *ABS*	00000000 _edata
20081de8 g     F .text	0000005c fatDumpTime
00002cf8 g       *ABS*	00000000 _end
20080240 g       *ABS*	00000000 __ram_exceptions_end
20097fa8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
2008559c g     F .text	0000005c hw_video_display_buffer_is_available
2009a980 g     F .text	000000a4 alt_ic_irq_disable
2009264c g     F .text	0000007c __swrite
00002378 g     O .rwdata	00000004 __malloc_trim_threshold
20090c30 g     F .text	0000000c __locale_msgcharset
2009b49c g     F .text	00000038 exit
20082828 g     F .text	000000ec fatMountSdcard
20090ad4 g     F .text	000000c4 _fwalk_reent
20099afc g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
20086ef4 g     F .text	00000110 .hidden __floatunsisf
200919a8 g     F .text	00000198 __mdiff
20086614 g     F .text	0000005c .hidden __modsi3
20088f60 g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
20090100 g     F .text	00000004 __sfp_lock_release
2009929c g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
2008524c g     F .text	00000058 SDLIB_ReadBlocks
20085160 g     F .text	00000098 SDLIB_Init
2009917c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
2009b8e8 g     F .text	00000034 _exit
2009a348 g     F .text	00000140 alt_alarm_start
20090c78 g     F .text	000001b8 __smakebuf_r
000023b0 g     O .rwdata	00000008 alt_msgdma_list
20089e9c g     F .text	00000098 strlen
200855f8 g     F .text	0000015c hw_video_display_switch_frames
200857f0 g     F .text	00000168 hw_video_display_allocate_buffers
2009adb4 g     F .text	00000158 open
20096424 g     F .text	000000e0 .hidden __gedf2
2009b134 g     F .text	00000044 alt_putchar
00002388 g     O .rwdata	00000004 __wctomb
20080b24 g     F .text	00000034 Fat_GetFileName
20093b90 g     F .text	00000018 __sprint_r
2009a860 g     F .text	00000030 alt_icache_flush_all
2009272c g     F .text	00000164 strchr
000023b8 g     O .rwdata	00000004 alt_priority_mask
2009a8e0 g     F .text	000000a0 alt_ic_irq_enable
2008de7c g     F .text	00000024 __vfprintf_internal
20081a2c g     F .text	00000178 fatFindUnusedCluster
200957f4 g     F .text	0000005c _wctomb_r
2008816c g     F .text	000008d0 .hidden __subdf3
000023c4 g     O .bss	00000004 sd_drv
200913d0 g     F .text	000000b0 __lo0bits
000023a8 g     O .rwdata	00000008 alt_alarm_list
2009a718 g     F .text	0000005c _do_ctors
20095704 g     F .text	000000c0 wcrtomb
20096d58 g     F .text	000000d0 close
200802c0 g     F .text	0000003c Fat_Unmount
20097120 g     F .text	00000080 alt_load
000029b0 g     O .bss	00000248 vInfo
20095354 g     F .text	0000005c fputwc
20089128 g     F .text	00000014 free
20090104 g     F .text	00000004 __sinit_lock_acquire
20091144 g     F .text	00000120 __multadd
20081e44 g     F .text	00000044 fatIsLastDir
2009111c g     F .text	00000028 _Bfree
200851f8 g     F .text	00000054 SDLIB_ReadBlock512



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffe3e80>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08409014 	ori	at,at,576
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801cc0 	call	200801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defff904 	addi	sp,sp,-28
20080100:	dfc00615 	stw	ra,24(sp)
20080104:	df000515 	stw	fp,20(sp)
20080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
2008010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080110:	0005313a 	rdctl	r2,ipending
20080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
20080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
2008011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
20080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
20080124:	00800044 	movi	r2,1
20080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008012c:	e0fffb17 	ldw	r3,-20(fp)
20080130:	e0bffc17 	ldw	r2,-16(fp)
20080134:	1884703a 	and	r2,r3,r2
20080138:	10001426 	beq	r2,zero,2008018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
2008013c:	00800034 	movhi	r2,0
20080140:	108afe04 	addi	r2,r2,11256
20080144:	e0fffd17 	ldw	r3,-12(fp)
20080148:	180690fa 	slli	r3,r3,3
2008014c:	10c5883a 	add	r2,r2,r3
20080150:	10c00017 	ldw	r3,0(r2)
20080154:	00800034 	movhi	r2,0
20080158:	108afe04 	addi	r2,r2,11256
2008015c:	e13ffd17 	ldw	r4,-12(fp)
20080160:	200890fa 	slli	r4,r4,3
20080164:	21000104 	addi	r4,r4,4
20080168:	1105883a 	add	r2,r2,r4
2008016c:	10800017 	ldw	r2,0(r2)
20080170:	1009883a 	mov	r4,r2
20080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
20080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
2008017c:	0005313a 	rdctl	r2,ipending
20080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
20080184:	e0bfff17 	ldw	r2,-4(fp)
20080188:	00000706 	br	200801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
2008018c:	e0bffc17 	ldw	r2,-16(fp)
20080190:	1085883a 	add	r2,r2,r2
20080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
20080198:	e0bffd17 	ldw	r2,-12(fp)
2008019c:	10800044 	addi	r2,r2,1
200801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
200801a4:	003fe106 	br	2008012c <__flash_rwdata_start+0xfffe3fa8>

    active = alt_irq_pending ();
200801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
200801ac:	e0bffb17 	ldw	r2,-20(fp)
200801b0:	103fdb1e 	bne	r2,zero,20080120 <__flash_rwdata_start+0xfffe3f9c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
200801b4:	0001883a 	nop
}
200801b8:	e037883a 	mov	sp,fp
200801bc:	dfc00117 	ldw	ra,4(sp)
200801c0:	df000017 	ldw	fp,0(sp)
200801c4:	dec00204 	addi	sp,sp,8
200801c8:	f800283a 	ret

200801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
200801cc:	defffb04 	addi	sp,sp,-20
200801d0:	dfc00415 	stw	ra,16(sp)
200801d4:	df000315 	stw	fp,12(sp)
200801d8:	df000304 	addi	fp,sp,12
200801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
200801e0:	000531fa 	rdctl	r2,exception
200801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
200801e8:	e0bffd17 	ldw	r2,-12(fp)
200801ec:	10801f0c 	andi	r2,r2,124
200801f0:	1004d0ba 	srli	r2,r2,2
200801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
200801f8:	0005333a 	rdctl	r2,badaddr
200801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080200:	d0a02417 	ldw	r2,-32624(gp)
20080204:	10000726 	beq	r2,zero,20080224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
20080208:	d0a02417 	ldw	r2,-32624(gp)
2008020c:	e0fffd17 	ldw	r3,-12(fp)
20080210:	1809883a 	mov	r4,r3
20080214:	e17fff17 	ldw	r5,-4(fp)
20080218:	e1bffe17 	ldw	r6,-8(fp)
2008021c:	103ee83a 	callr	r2
20080220:	00000206 	br	2008022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
20080228:	0005883a 	mov	r2,zero
}
2008022c:	e037883a 	mov	sp,fp
20080230:	dfc00117 	ldw	ra,4(sp)
20080234:	df000017 	ldw	fp,0(sp)
20080238:	dec00204 	addi	sp,sp,8
2008023c:	f800283a 	ret

Disassembly of section .text:

20080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080240:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008024c:	00bffd16 	blt	zero,r2,20080244 <__flash_rwdata_start+0xfffe40c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
20080250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
20080254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
20080258:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
2008025c:	d6a8dd14 	ori	gp,gp,41844
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
20080260:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
20080264:	1088ef14 	ori	r2,r2,9148

    movhi r3, %hi(__bss_end)
20080268:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
2008026c:	18cb3e14 	ori	r3,r3,11512

    beq r2, r3, 1f
20080270:	10c00326 	beq	r2,r3,20080280 <_start+0x40>

0:
    stw zero, (r2)
20080274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
20080278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
2008027c:	10fffd36 	bltu	r2,r3,20080274 <__flash_rwdata_start+0xfffe40f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
20080280:	00971200 	call	20097120 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
20080284:	00972c40 	call	200972c4 <alt_main>

20080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
20080288:	003fff06 	br	20080288 <__flash_rwdata_start+0xfffe4104>

2008028c <Fat_Mount>:
bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2);




FAT_HANDLE Fat_Mount(){
2008028c:	defffd04 	addi	sp,sp,-12
20080290:	dfc00215 	stw	ra,8(sp)
20080294:	df000115 	stw	fp,4(sp)
20080298:	df000104 	addi	fp,sp,4
    
    FAT_HANDLE hFat = 0;
2008029c:	e03fff15 	stw	zero,-4(fp)
    hFat = fatMountSdcard();
200802a0:	00828280 	call	20082828 <fatMountSdcard>
200802a4:	e0bfff15 	stw	r2,-4(fp)
    return hFat;      
200802a8:	e0bfff17 	ldw	r2,-4(fp)
}
200802ac:	e037883a 	mov	sp,fp
200802b0:	dfc00117 	ldw	ra,4(sp)
200802b4:	df000017 	ldw	fp,0(sp)
200802b8:	dec00204 	addi	sp,sp,8
200802bc:	f800283a 	ret

200802c0 <Fat_Unmount>:

void Fat_Unmount(FAT_HANDLE Fat){
200802c0:	defffd04 	addi	sp,sp,-12
200802c4:	df000215 	stw	fp,8(sp)
200802c8:	df000204 	addi	fp,sp,8
200802cc:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
200802d0:	e0bfff17 	ldw	r2,-4(fp)
200802d4:	e0bffe15 	stw	r2,-8(fp)
    if (!pVol)
200802d8:	e0bffe17 	ldw	r2,-8(fp)
200802dc:	1000011e 	bne	r2,zero,200802e4 <Fat_Unmount+0x24>
        return;
200802e0:	00000206 	br	200802ec <Fat_Unmount+0x2c>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
200802e4:	e0bffe17 	ldw	r2,-8(fp)
200802e8:	10000515 	stw	zero,20(r2)
    
    //free(pVol);
}   
200802ec:	e037883a 	mov	sp,fp
200802f0:	df000017 	ldw	fp,0(sp)
200802f4:	dec00104 	addi	sp,sp,4
200802f8:	f800283a 	ret

200802fc <Fat_Type>:

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
200802fc:	defffc04 	addi	sp,sp,-16
20080300:	df000315 	stw	fp,12(sp)
20080304:	df000304 	addi	fp,sp,12
20080308:	e13fff15 	stw	r4,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
2008030c:	e0bfff17 	ldw	r2,-4(fp)
20080310:	e0bffe15 	stw	r2,-8(fp)
    FAT_TYPE Type = FAT_UNKNOWN;
20080314:	e03ffd15 	stw	zero,-12(fp)
    if (pVol){
20080318:	e0bffe17 	ldw	r2,-8(fp)
2008031c:	10000d26 	beq	r2,zero,20080354 <Fat_Type+0x58>
        if (pVol->Partition_Type == PARTITION_FAT16)
20080320:	e0bffe17 	ldw	r2,-8(fp)
20080324:	10800417 	ldw	r2,16(r2)
20080328:	10800198 	cmpnei	r2,r2,6
2008032c:	1000031e 	bne	r2,zero,2008033c <Fat_Type+0x40>
            Type = FAT_FAT16;
20080330:	00800044 	movi	r2,1
20080334:	e0bffd15 	stw	r2,-12(fp)
20080338:	00000606 	br	20080354 <Fat_Type+0x58>
        else if (pVol->Partition_Type == PARTITION_FAT32)
2008033c:	e0bffe17 	ldw	r2,-8(fp)
20080340:	10800417 	ldw	r2,16(r2)
20080344:	108002d8 	cmpnei	r2,r2,11
20080348:	1000021e 	bne	r2,zero,20080354 <Fat_Type+0x58>
            Type = FAT_FAT32;
2008034c:	00800084 	movi	r2,2
20080350:	e0bffd15 	stw	r2,-12(fp)
    }
    return Type;        
20080354:	e0bffd17 	ldw	r2,-12(fp)
}
20080358:	e037883a 	mov	sp,fp
2008035c:	df000017 	ldw	fp,0(sp)
20080360:	dec00104 	addi	sp,sp,4
20080364:	f800283a 	ret

20080368 <Fat_FileBrowseBegin>:

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
20080368:	defffc04 	addi	sp,sp,-16
2008036c:	df000315 	stw	fp,12(sp)
20080370:	df000304 	addi	fp,sp,12
20080374:	e13ffe15 	stw	r4,-8(fp)
20080378:	e17fff15 	stw	r5,-4(fp)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
2008037c:	e0bffe17 	ldw	r2,-8(fp)
20080380:	e0bffd15 	stw	r2,-12(fp)
    if (!pVol)
20080384:	e0bffd17 	ldw	r2,-12(fp)
20080388:	1000021e 	bne	r2,zero,20080394 <Fat_FileBrowseBegin+0x2c>
        return FALSE;
2008038c:	0005883a 	mov	r2,zero
20080390:	00000c06 	br	200803c4 <Fat_FileBrowseBegin+0x5c>
    if (!pVol->bMount)
20080394:	e0bffd17 	ldw	r2,-12(fp)
20080398:	10800517 	ldw	r2,20(r2)
2008039c:	1000021e 	bne	r2,zero,200803a8 <Fat_FileBrowseBegin+0x40>
        return FALSE;
200803a0:	0005883a 	mov	r2,zero
200803a4:	00000706 	br	200803c4 <Fat_FileBrowseBegin+0x5c>
    pFatBrowseHandle->DirectoryIndex = -1;
200803a8:	e0bfff17 	ldw	r2,-4(fp)
200803ac:	00ffffc4 	movi	r3,-1
200803b0:	10c00015 	stw	r3,0(r2)
    pFatBrowseHandle->hFat = hFat;
200803b4:	e0bfff17 	ldw	r2,-4(fp)
200803b8:	e0fffe17 	ldw	r3,-8(fp)
200803bc:	10c00115 	stw	r3,4(r2)
    return TRUE;
200803c0:	00800044 	movi	r2,1
}
200803c4:	e037883a 	mov	sp,fp
200803c8:	df000017 	ldw	fp,0(sp)
200803cc:	dec00104 	addi	sp,sp,4
200803d0:	f800283a 	ret

200803d4 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
200803d4:	defff404 	addi	sp,sp,-48
200803d8:	dfc00b15 	stw	ra,44(sp)
200803dc:	df000a15 	stw	fp,40(sp)
200803e0:	df000a04 	addi	fp,sp,40
200803e4:	e13ffe15 	stw	r4,-8(fp)
200803e8:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
200803ec:	e03ff615 	stw	zero,-40(fp)
200803f0:	e03ff715 	stw	zero,-36(fp)
200803f4:	e03ff815 	stw	zero,-32(fp)
    int OrderValue = 0;
200803f8:	e03ff915 	stw	zero,-28(fp)
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
200803fc:	e0bffe17 	ldw	r2,-8(fp)
20080400:	10800117 	ldw	r2,4(r2)
20080404:	e0bffa15 	stw	r2,-24(fp)
    
    if (!pVol)
20080408:	e0bffa17 	ldw	r2,-24(fp)
2008040c:	1000021e 	bne	r2,zero,20080418 <Fat_FileBrowseNext+0x44>
        return FALSE;    
20080410:	0005883a 	mov	r2,zero
20080414:	0000f506 	br	200807ec <Fat_FileBrowseNext+0x418>
    
    if (!pVol->bMount)
20080418:	e0bffa17 	ldw	r2,-24(fp)
2008041c:	10800517 	ldw	r2,20(r2)
20080420:	1000021e 	bne	r2,zero,2008042c <Fat_FileBrowseNext+0x58>
        return FALSE;
20080424:	0005883a 	mov	r2,zero
20080428:	0000f006 	br	200807ec <Fat_FileBrowseNext+0x418>
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
2008042c:	e0bffe17 	ldw	r2,-8(fp)
20080430:	10800017 	ldw	r2,0(r2)
20080434:	10c00044 	addi	r3,r2,1
20080438:	e0bffe17 	ldw	r2,-8(fp)
2008043c:	10c00015 	stw	r3,0(r2)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20080440:	e0bffe17 	ldw	r2,-8(fp)
20080444:	10800017 	ldw	r2,0(r2)
20080448:	e13ffa17 	ldw	r4,-24(fp)
2008044c:	100b883a 	mov	r5,r2
20080450:	00822940 	call	20082294 <fatFindDirectory>
20080454:	e0bffb15 	stw	r2,-20(fp)
        if (!pDir)
20080458:	e0bffb17 	ldw	r2,-20(fp)
2008045c:	1000021e 	bne	r2,zero,20080468 <Fat_FileBrowseNext+0x94>
            bError = TRUE;
20080460:	00800044 	movi	r2,1
20080464:	e0bff715 	stw	r2,-36(fp)
            
        if (!bError){                        
20080468:	e0bff717 	ldw	r2,-36(fp)
2008046c:	1000d71e 	bne	r2,zero,200807cc <Fat_FileBrowseNext+0x3f8>
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
20080470:	e13ffb17 	ldw	r4,-20(fp)
20080474:	0081e880 	call	20081e88 <fatIsValidDir>
20080478:	1000d426 	beq	r2,zero,200807cc <Fat_FileBrowseNext+0x3f8>
2008047c:	e13ffb17 	ldw	r4,-20(fp)
20080480:	0081f300 	call	20081f30 <fatIsUnusedDir>
20080484:	1000d11e 	bne	r2,zero,200807cc <Fat_FileBrowseNext+0x3f8>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20080488:	e0bffb17 	ldw	r2,-20(fp)
2008048c:	108002c3 	ldbu	r2,11(r2)
20080490:	10803fcc 	andi	r2,r2,255
20080494:	108003cc 	andi	r2,r2,15
20080498:	108003d8 	cmpnei	r2,r2,15
2008049c:	1000521e 	bne	r2,zero,200805e8 <Fat_FileBrowseNext+0x214>
                    FAT_LONG_DIRECTORY *pLDIR = (FAT_LONG_DIRECTORY *)pDir;
200804a0:	e0bffb17 	ldw	r2,-20(fp)
200804a4:	e0bffc15 	stw	r2,-16(fp)
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
200804a8:	e0bffc17 	ldw	r2,-16(fp)
200804ac:	108002c3 	ldbu	r2,11(r2)
200804b0:	10803fcc 	andi	r2,r2,255
200804b4:	108003cc 	andi	r2,r2,15
200804b8:	108003e0 	cmpeqi	r2,r2,15
200804bc:	1000031e 	bne	r2,zero,200804cc <Fat_FileBrowseNext+0xf8>
                        bError = TRUE;
200804c0:	00800044 	movi	r2,1
200804c4:	e0bff715 	stw	r2,-36(fp)
200804c8:	00001e06 	br	20080544 <Fat_FileBrowseNext+0x170>
                    }else{                        
                        // check order
                        if (OrderValue == 0){
200804cc:	e0bff917 	ldw	r2,-28(fp)
200804d0:	1000141e 	bne	r2,zero,20080524 <Fat_FileBrowseNext+0x150>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
200804d4:	e0bff817 	ldw	r2,-32(fp)
200804d8:	1000041e 	bne	r2,zero,200804ec <Fat_FileBrowseNext+0x118>
200804dc:	e0bff917 	ldw	r2,-28(fp)
200804e0:	10c0100c 	andi	r3,r2,64
200804e4:	e0bff917 	ldw	r2,-28(fp)
200804e8:	18800326 	beq	r3,r2,200804f8 <Fat_FileBrowseNext+0x124>
                                bError = TRUE;
200804ec:	00800044 	movi	r2,1
200804f0:	e0bff715 	stw	r2,-36(fp)
200804f4:	00000506 	br	2008050c <Fat_FileBrowseNext+0x138>
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
200804f8:	e0bffc17 	ldw	r2,-16(fp)
200804fc:	10800003 	ldbu	r2,0(r2)
20080500:	10803fcc 	andi	r2,r2,255
20080504:	10800fcc 	andi	r2,r2,63
20080508:	e0bff915 	stw	r2,-28(fp)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
2008050c:	e0bfff17 	ldw	r2,-4(fp)
20080510:	1009883a 	mov	r4,r2
20080514:	000b883a 	mov	r5,zero
20080518:	01804004 	movi	r6,256
2008051c:	0089a980 	call	20089a98 <memset>
20080520:	00000806 	br	20080544 <Fat_FileBrowseNext+0x170>
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
20080524:	e0bffc17 	ldw	r2,-16(fp)
20080528:	10800003 	ldbu	r2,0(r2)
2008052c:	10803fcc 	andi	r2,r2,255
20080530:	10c00fcc 	andi	r3,r2,63
20080534:	e0bff917 	ldw	r2,-28(fp)
20080538:	18800226 	beq	r3,r2,20080544 <Fat_FileBrowseNext+0x170>
                                bError = TRUE;
2008053c:	00800044 	movi	r2,1
20080540:	e0bff715 	stw	r2,-36(fp)
                        }
                    }
                    
                    //                        
                    if (!bError){
20080544:	e0bff717 	ldw	r2,-36(fp)
20080548:	1000261e 	bne	r2,zero,200805e4 <Fat_FileBrowseNext+0x210>
                        int BaseOffset;
                        bLongFilename = TRUE;
2008054c:	00800044 	movi	r2,1
20080550:	e0bff815 	stw	r2,-32(fp)
                        OrderValue--;
20080554:	e0bff917 	ldw	r2,-28(fp)
20080558:	10bfffc4 	addi	r2,r2,-1
2008055c:	e0bff915 	stw	r2,-28(fp)
                        BaseOffset = OrderValue * 26;
20080560:	e0bff917 	ldw	r2,-28(fp)
20080564:	108006a4 	muli	r2,r2,26
20080568:	e0bffd15 	stw	r2,-12(fp)
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
2008056c:	e0bffd17 	ldw	r2,-12(fp)
20080570:	e0ffff17 	ldw	r3,-4(fp)
20080574:	1887883a 	add	r3,r3,r2
20080578:	e0bffc17 	ldw	r2,-16(fp)
2008057c:	10800044 	addi	r2,r2,1
20080580:	1809883a 	mov	r4,r3
20080584:	100b883a 	mov	r5,r2
20080588:	01800284 	movi	r6,10
2008058c:	00899600 	call	20089960 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
20080590:	e0bffd17 	ldw	r2,-12(fp)
20080594:	10800284 	addi	r2,r2,10
20080598:	e0ffff17 	ldw	r3,-4(fp)
2008059c:	1887883a 	add	r3,r3,r2
200805a0:	e0bffc17 	ldw	r2,-16(fp)
200805a4:	10800384 	addi	r2,r2,14
200805a8:	1809883a 	mov	r4,r3
200805ac:	100b883a 	mov	r5,r2
200805b0:	01800304 	movi	r6,12
200805b4:	00899600 	call	20089960 <memcpy>
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
200805b8:	e0bffd17 	ldw	r2,-12(fp)
200805bc:	10800584 	addi	r2,r2,22
200805c0:	e0ffff17 	ldw	r3,-4(fp)
200805c4:	1887883a 	add	r3,r3,r2
200805c8:	e0bffc17 	ldw	r2,-16(fp)
200805cc:	10800704 	addi	r2,r2,28
200805d0:	1809883a 	mov	r4,r3
200805d4:	100b883a 	mov	r5,r2
200805d8:	01800104 	movi	r6,4
200805dc:	00899600 	call	20089960 <memcpy>
200805e0:	00007a06 	br	200807cc <Fat_FileBrowseNext+0x3f8>
200805e4:	00007906 	br	200807cc <Fat_FileBrowseNext+0x3f8>
                    }                        
                }else{
                    if (bLongFilename){
200805e8:	e0bff817 	ldw	r2,-32(fp)
200805ec:	10000e26 	beq	r2,zero,20080628 <Fat_FileBrowseNext+0x254>
                        pFileContext->Attribute = ATTR_LONG_NAME;
200805f0:	e0bfff17 	ldw	r2,-4(fp)
200805f4:	00c003c4 	movi	r3,15
200805f8:	10c04505 	stb	r3,276(r2)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
200805fc:	e0bffb17 	ldw	r2,-20(fp)
20080600:	108002c3 	ldbu	r2,11(r2)
20080604:	10803fcc 	andi	r2,r2,255
20080608:	10800c0c 	andi	r2,r2,48
2008060c:	1000031e 	bne	r2,zero,2008061c <Fat_FileBrowseNext+0x248>
                            bError = TRUE;
20080610:	00800044 	movi	r2,1
20080614:	e0bff715 	stw	r2,-36(fp)
20080618:	00000906 	br	20080640 <Fat_FileBrowseNext+0x26c>
                        else    
                            bFind = TRUE;
2008061c:	00800044 	movi	r2,1
20080620:	e0bff615 	stw	r2,-40(fp)
20080624:	00000606 	br	20080640 <Fat_FileBrowseNext+0x26c>
                    }else{
                        fatComposeShortFilename(pDir, pFileContext->szName);
20080628:	e0bfff17 	ldw	r2,-4(fp)
2008062c:	e13ffb17 	ldw	r4,-20(fp)
20080630:	100b883a 	mov	r5,r2
20080634:	00809000 	call	20080900 <fatComposeShortFilename>
                        bFind = TRUE;
20080638:	00800044 	movi	r2,1
2008063c:	e0bff615 	stw	r2,-40(fp)
                    }
                    
                    if (bFind){
20080640:	e0bff617 	ldw	r2,-40(fp)
20080644:	10006126 	beq	r2,zero,200807cc <Fat_FileBrowseNext+0x3f8>
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
20080648:	e0bfff17 	ldw	r2,-4(fp)
2008064c:	e0fff817 	ldw	r3,-32(fp)
20080650:	10c04015 	stw	r3,256(r2)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20080654:	e0bffb17 	ldw	r2,-20(fp)
20080658:	108002c3 	ldbu	r2,11(r2)
2008065c:	10803fcc 	andi	r2,r2,255
20080660:	1080080c 	andi	r2,r2,32
20080664:	1004c03a 	cmpne	r2,r2,zero
20080668:	10c03fcc 	andi	r3,r2,255
2008066c:	e0bfff17 	ldw	r2,-4(fp)
20080670:	10c04115 	stw	r3,260(r2)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
20080674:	e0bffb17 	ldw	r2,-20(fp)
20080678:	108002c3 	ldbu	r2,11(r2)
2008067c:	10803fcc 	andi	r2,r2,255
20080680:	1080040c 	andi	r2,r2,16
20080684:	1004c03a 	cmpne	r2,r2,zero
20080688:	10c03fcc 	andi	r3,r2,255
2008068c:	e0bfff17 	ldw	r2,-4(fp)
20080690:	10c04215 	stw	r3,264(r2)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20080694:	e0bffb17 	ldw	r2,-20(fp)
20080698:	108002c3 	ldbu	r2,11(r2)
2008069c:	10803fcc 	andi	r2,r2,255
200806a0:	1080020c 	andi	r2,r2,8
200806a4:	1004c03a 	cmpne	r2,r2,zero
200806a8:	10c03fcc 	andi	r3,r2,255
200806ac:	e0bfff17 	ldw	r2,-4(fp)
200806b0:	10c04315 	stw	r3,268(r2)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
200806b4:	e0bffe17 	ldw	r2,-8(fp)
200806b8:	10c00017 	ldw	r3,0(r2)
200806bc:	e0bfff17 	ldw	r2,-4(fp)
200806c0:	10c04415 	stw	r3,272(r2)
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
200806c4:	e0bffb17 	ldw	r2,-20(fp)
200806c8:	10c002c3 	ldbu	r3,11(r2)
200806cc:	e0bfff17 	ldw	r2,-4(fp)
200806d0:	10c04505 	stb	r3,276(r2)
                        pFileContext->CreateTime = pDir->CreateTime;
200806d4:	e0bffb17 	ldw	r2,-20(fp)
200806d8:	10c00383 	ldbu	r3,14(r2)
200806dc:	108003c3 	ldbu	r2,15(r2)
200806e0:	1004923a 	slli	r2,r2,8
200806e4:	10c4b03a 	or	r2,r2,r3
200806e8:	1007883a 	mov	r3,r2
200806ec:	e0bfff17 	ldw	r2,-4(fp)
200806f0:	10c0458d 	sth	r3,278(r2)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
200806f4:	e0bffb17 	ldw	r2,-20(fp)
200806f8:	10c00483 	ldbu	r3,18(r2)
200806fc:	108004c3 	ldbu	r2,19(r2)
20080700:	1004923a 	slli	r2,r2,8
20080704:	10c4b03a 	or	r2,r2,r3
20080708:	1007883a 	mov	r3,r2
2008070c:	e0bfff17 	ldw	r2,-4(fp)
20080710:	10c0468d 	sth	r3,282(r2)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
20080714:	e0bffb17 	ldw	r2,-20(fp)
20080718:	10c00503 	ldbu	r3,20(r2)
2008071c:	10800543 	ldbu	r2,21(r2)
20080720:	1004923a 	slli	r2,r2,8
20080724:	10c4b03a 	or	r2,r2,r3
20080728:	1007883a 	mov	r3,r2
2008072c:	e0bfff17 	ldw	r2,-4(fp)
20080730:	10c0470d 	sth	r3,284(r2)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
20080734:	e0bffb17 	ldw	r2,-20(fp)
20080738:	10c00583 	ldbu	r3,22(r2)
2008073c:	108005c3 	ldbu	r2,23(r2)
20080740:	1004923a 	slli	r2,r2,8
20080744:	10c4b03a 	or	r2,r2,r3
20080748:	1007883a 	mov	r3,r2
2008074c:	e0bfff17 	ldw	r2,-4(fp)
20080750:	10c0478d 	sth	r3,286(r2)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
20080754:	e0bffb17 	ldw	r2,-20(fp)
20080758:	10c00603 	ldbu	r3,24(r2)
2008075c:	10800643 	ldbu	r2,25(r2)
20080760:	1004923a 	slli	r2,r2,8
20080764:	10c4b03a 	or	r2,r2,r3
20080768:	1007883a 	mov	r3,r2
2008076c:	e0bfff17 	ldw	r2,-4(fp)
20080770:	10c0480d 	sth	r3,288(r2)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
20080774:	e0bffb17 	ldw	r2,-20(fp)
20080778:	10c00683 	ldbu	r3,26(r2)
2008077c:	108006c3 	ldbu	r2,27(r2)
20080780:	1004923a 	slli	r2,r2,8
20080784:	10c4b03a 	or	r2,r2,r3
20080788:	1007883a 	mov	r3,r2
2008078c:	e0bfff17 	ldw	r2,-4(fp)
20080790:	10c0488d 	sth	r3,290(r2)
                        pFileContext->FileSize = pDir->FileSize;
20080794:	e0bffb17 	ldw	r2,-20(fp)
20080798:	10c00703 	ldbu	r3,28(r2)
2008079c:	11000743 	ldbu	r4,29(r2)
200807a0:	2008923a 	slli	r4,r4,8
200807a4:	20c6b03a 	or	r3,r4,r3
200807a8:	11000783 	ldbu	r4,30(r2)
200807ac:	2008943a 	slli	r4,r4,16
200807b0:	20c6b03a 	or	r3,r4,r3
200807b4:	108007c3 	ldbu	r2,31(r2)
200807b8:	1004963a 	slli	r2,r2,24
200807bc:	10c4b03a 	or	r2,r2,r3
200807c0:	1007883a 	mov	r3,r2
200807c4:	e0bfff17 	ldw	r2,-4(fp)
200807c8:	10c04915 	stw	r3,292(r2)
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
200807cc:	e0bff617 	ldw	r2,-40(fp)
200807d0:	1000051e 	bne	r2,zero,200807e8 <Fat_FileBrowseNext+0x414>
200807d4:	e13ffb17 	ldw	r4,-20(fp)
200807d8:	0081e440 	call	20081e44 <fatIsLastDir>
200807dc:	1000021e 	bne	r2,zero,200807e8 <Fat_FileBrowseNext+0x414>
200807e0:	e0bff717 	ldw	r2,-36(fp)
200807e4:	103f1126 	beq	r2,zero,2008042c <__flash_rwdata_start+0xfffe42a8>
    
    return bFind;
200807e8:	e0bff617 	ldw	r2,-40(fp)
    
}
200807ec:	e037883a 	mov	sp,fp
200807f0:	dfc00117 	ldw	ra,4(sp)
200807f4:	df000017 	ldw	fp,0(sp)
200807f8:	dec00204 	addi	sp,sp,8
200807fc:	f800283a 	ret

20080800 <Fat_FileCount>:


unsigned int Fat_FileCount(FAT_HANDLE Fat){
20080800:	deffb004 	addi	sp,sp,-320
20080804:	dfc04f15 	stw	ra,316(sp)
20080808:	df004e15 	stw	fp,312(sp)
2008080c:	df004e04 	addi	fp,sp,312
20080810:	e13fff15 	stw	r4,-4(fp)
    unsigned int nCount = 0;
20080814:	e03fb215 	stw	zero,-312(fp)
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20080818:	e0bfb304 	addi	r2,fp,-308
2008081c:	e13fff17 	ldw	r4,-4(fp)
20080820:	100b883a 	mov	r5,r2
20080824:	00803680 	call	20080368 <Fat_FileBrowseBegin>
20080828:	10000a26 	beq	r2,zero,20080854 <Fat_FileCount+0x54>
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
2008082c:	00000306 	br	2008083c <Fat_FileCount+0x3c>
            nCount++;
20080830:	e0bfb217 	ldw	r2,-312(fp)
20080834:	10800044 	addi	r2,r2,1
20080838:	e0bfb215 	stw	r2,-312(fp)
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
2008083c:	e0ffb304 	addi	r3,fp,-308
20080840:	e0bfb504 	addi	r2,fp,-300
20080844:	1809883a 	mov	r4,r3
20080848:	100b883a 	mov	r5,r2
2008084c:	00803d40 	call	200803d4 <Fat_FileBrowseNext>
20080850:	103ff71e 	bne	r2,zero,20080830 <__flash_rwdata_start+0xfffe46ac>
            nCount++;
    }
    
    return nCount;
20080854:	e0bfb217 	ldw	r2,-312(fp)
}
20080858:	e037883a 	mov	sp,fp
2008085c:	dfc00117 	ldw	ra,4(sp)
20080860:	df000017 	ldw	fp,0(sp)
20080864:	dec00204 	addi	sp,sp,8
20080868:	f800283a 	ret

2008086c <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
2008086c:	defffc04 	addi	sp,sp,-16
20080870:	df000315 	stw	fp,12(sp)
20080874:	df000304 	addi	fp,sp,12
20080878:	e13ffe15 	stw	r4,-8(fp)
2008087c:	e17fff15 	stw	r5,-4(fp)
    bool bSame = TRUE;
20080880:	00800044 	movi	r2,1
20080884:	e0bffd15 	stw	r2,-12(fp)
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20080888:	00000e06 	br	200808c4 <fatSameLongFilename+0x58>
        if (*p1 != *p2){
2008088c:	e0bffe17 	ldw	r2,-8(fp)
20080890:	10c0000b 	ldhu	r3,0(r2)
20080894:	e0bfff17 	ldw	r2,-4(fp)
20080898:	1080000b 	ldhu	r2,0(r2)
2008089c:	18ffffcc 	andi	r3,r3,65535
200808a0:	10bfffcc 	andi	r2,r2,65535
200808a4:	18800126 	beq	r3,r2,200808ac <fatSameLongFilename+0x40>
            bSame = FALSE;
200808a8:	e03ffd15 	stw	zero,-12(fp)
        }
        p1++;
200808ac:	e0bffe17 	ldw	r2,-8(fp)
200808b0:	10800084 	addi	r2,r2,2
200808b4:	e0bffe15 	stw	r2,-8(fp)
        p2++;
200808b8:	e0bfff17 	ldw	r2,-4(fp)
200808bc:	10800084 	addi	r2,r2,2
200808c0:	e0bfff15 	stw	r2,-4(fp)
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200808c4:	e0bffd17 	ldw	r2,-12(fp)
200808c8:	10000826 	beq	r2,zero,200808ec <fatSameLongFilename+0x80>
200808cc:	e0bffe17 	ldw	r2,-8(fp)
200808d0:	1080000b 	ldhu	r2,0(r2)
200808d4:	10bfffcc 	andi	r2,r2,65535
200808d8:	103fec1e 	bne	r2,zero,2008088c <__flash_rwdata_start+0xfffe4708>
200808dc:	e0bfff17 	ldw	r2,-4(fp)
200808e0:	1080000b 	ldhu	r2,0(r2)
200808e4:	10bfffcc 	andi	r2,r2,65535
200808e8:	103fe81e 	bne	r2,zero,2008088c <__flash_rwdata_start+0xfffe4708>
        p1++;
        p2++;
        
    }
    
    return bSame;
200808ec:	e0bffd17 	ldw	r2,-12(fp)
}
200808f0:	e037883a 	mov	sp,fp
200808f4:	df000017 	ldw	fp,0(sp)
200808f8:	dec00104 	addi	sp,sp,4
200808fc:	f800283a 	ret

20080900 <fatComposeShortFilename>:


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
20080900:	defffb04 	addi	sp,sp,-20
20080904:	df000415 	stw	fp,16(sp)
20080908:	df000404 	addi	fp,sp,16
2008090c:	e13ffe15 	stw	r4,-8(fp)
20080910:	e17fff15 	stw	r5,-4(fp)
    int i,nPos=0;
20080914:	e03ffd15 	stw	zero,-12(fp)
    
    i=0;
20080918:	e03ffc15 	stw	zero,-16(fp)
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
2008091c:	00000d06 	br	20080954 <fatComposeShortFilename+0x54>
        szFilename[nPos++] = pDir->Name[i++];
20080920:	e0bffd17 	ldw	r2,-12(fp)
20080924:	10c00044 	addi	r3,r2,1
20080928:	e0fffd15 	stw	r3,-12(fp)
2008092c:	1007883a 	mov	r3,r2
20080930:	e0bfff17 	ldw	r2,-4(fp)
20080934:	10c7883a 	add	r3,r2,r3
20080938:	e0bffc17 	ldw	r2,-16(fp)
2008093c:	11000044 	addi	r4,r2,1
20080940:	e13ffc15 	stw	r4,-16(fp)
20080944:	e13ffe17 	ldw	r4,-8(fp)
20080948:	2085883a 	add	r2,r4,r2
2008094c:	10800003 	ldbu	r2,0(r2)
20080950:	18800005 	stb	r2,0(r3)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20080954:	e0bffc17 	ldw	r2,-16(fp)
20080958:	10800208 	cmpgei	r2,r2,8
2008095c:	1000111e 	bne	r2,zero,200809a4 <fatComposeShortFilename+0xa4>
20080960:	e0fffe17 	ldw	r3,-8(fp)
20080964:	e0bffc17 	ldw	r2,-16(fp)
20080968:	1885883a 	add	r2,r3,r2
2008096c:	10800003 	ldbu	r2,0(r2)
20080970:	10803fcc 	andi	r2,r2,255
20080974:	1080201c 	xori	r2,r2,128
20080978:	10bfe004 	addi	r2,r2,-128
2008097c:	10000926 	beq	r2,zero,200809a4 <fatComposeShortFilename+0xa4>
20080980:	e0fffe17 	ldw	r3,-8(fp)
20080984:	e0bffc17 	ldw	r2,-16(fp)
20080988:	1885883a 	add	r2,r3,r2
2008098c:	10800003 	ldbu	r2,0(r2)
20080990:	10803fcc 	andi	r2,r2,255
20080994:	1080201c 	xori	r2,r2,128
20080998:	10bfe004 	addi	r2,r2,-128
2008099c:	10800818 	cmpnei	r2,r2,32
200809a0:	103fdf1e 	bne	r2,zero,20080920 <__flash_rwdata_start+0xfffe479c>
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
200809a4:	e0bffe17 	ldw	r2,-8(fp)
200809a8:	108002c3 	ldbu	r2,11(r2)
200809ac:	10803fcc 	andi	r2,r2,255
200809b0:	10800c0c 	andi	r2,r2,48
200809b4:	10003326 	beq	r2,zero,20080a84 <fatComposeShortFilename+0x184>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
200809b8:	e0bffe17 	ldw	r2,-8(fp)
200809bc:	108002c3 	ldbu	r2,11(r2)
200809c0:	10803fcc 	andi	r2,r2,255
200809c4:	10800c0c 	andi	r2,r2,48
200809c8:	10000826 	beq	r2,zero,200809ec <fatComposeShortFilename+0xec>
            szFilename[nPos++] = '.';   
200809cc:	e0bffd17 	ldw	r2,-12(fp)
200809d0:	10c00044 	addi	r3,r2,1
200809d4:	e0fffd15 	stw	r3,-12(fp)
200809d8:	1007883a 	mov	r3,r2
200809dc:	e0bfff17 	ldw	r2,-4(fp)
200809e0:	10c5883a 	add	r2,r2,r3
200809e4:	00c00b84 	movi	r3,46
200809e8:	10c00005 	stb	r3,0(r2)
        i=0;
200809ec:	e03ffc15 	stw	zero,-16(fp)
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200809f0:	00000e06 	br	20080a2c <fatComposeShortFilename+0x12c>
            szFilename[nPos++] = pDir->Extension[i++];
200809f4:	e0bffd17 	ldw	r2,-12(fp)
200809f8:	10c00044 	addi	r3,r2,1
200809fc:	e0fffd15 	stw	r3,-12(fp)
20080a00:	1007883a 	mov	r3,r2
20080a04:	e0bfff17 	ldw	r2,-4(fp)
20080a08:	10c7883a 	add	r3,r2,r3
20080a0c:	e0bffc17 	ldw	r2,-16(fp)
20080a10:	11000044 	addi	r4,r2,1
20080a14:	e13ffc15 	stw	r4,-16(fp)
20080a18:	e13ffe17 	ldw	r4,-8(fp)
20080a1c:	2085883a 	add	r2,r4,r2
20080a20:	10800204 	addi	r2,r2,8
20080a24:	10800003 	ldbu	r2,0(r2)
20080a28:	18800005 	stb	r2,0(r3)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20080a2c:	e0bffc17 	ldw	r2,-16(fp)
20080a30:	108000c8 	cmpgei	r2,r2,3
20080a34:	1000131e 	bne	r2,zero,20080a84 <fatComposeShortFilename+0x184>
20080a38:	e0fffe17 	ldw	r3,-8(fp)
20080a3c:	e0bffc17 	ldw	r2,-16(fp)
20080a40:	1885883a 	add	r2,r3,r2
20080a44:	10800204 	addi	r2,r2,8
20080a48:	10800003 	ldbu	r2,0(r2)
20080a4c:	10803fcc 	andi	r2,r2,255
20080a50:	1080201c 	xori	r2,r2,128
20080a54:	10bfe004 	addi	r2,r2,-128
20080a58:	10000a26 	beq	r2,zero,20080a84 <fatComposeShortFilename+0x184>
20080a5c:	e0fffe17 	ldw	r3,-8(fp)
20080a60:	e0bffc17 	ldw	r2,-16(fp)
20080a64:	1885883a 	add	r2,r3,r2
20080a68:	10800204 	addi	r2,r2,8
20080a6c:	10800003 	ldbu	r2,0(r2)
20080a70:	10803fcc 	andi	r2,r2,255
20080a74:	1080201c 	xori	r2,r2,128
20080a78:	10bfe004 	addi	r2,r2,-128
20080a7c:	10800818 	cmpnei	r2,r2,32
20080a80:	103fdc1e 	bne	r2,zero,200809f4 <__flash_rwdata_start+0xfffe4870>
            szFilename[nPos++] = pDir->Extension[i++];
    }            
    szFilename[nPos++] = 0;
20080a84:	e0bffd17 	ldw	r2,-12(fp)
20080a88:	10c00044 	addi	r3,r2,1
20080a8c:	e0fffd15 	stw	r3,-12(fp)
20080a90:	1007883a 	mov	r3,r2
20080a94:	e0bfff17 	ldw	r2,-4(fp)
20080a98:	10c5883a 	add	r2,r2,r3
20080a9c:	10000005 	stb	zero,0(r2)
}
20080aa0:	e037883a 	mov	sp,fp
20080aa4:	df000017 	ldw	fp,0(sp)
20080aa8:	dec00104 	addi	sp,sp,4
20080aac:	f800283a 	ret

20080ab0 <Fat_CheckExtension>:


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
20080ab0:	defffb04 	addi	sp,sp,-20
20080ab4:	dfc00415 	stw	ra,16(sp)
20080ab8:	df000315 	stw	fp,12(sp)
20080abc:	df000304 	addi	fp,sp,12
20080ac0:	e13ffe15 	stw	r4,-8(fp)
20080ac4:	e17fff15 	stw	r5,-4(fp)
	if(pFileContext == NULL)
20080ac8:	e0bffe17 	ldw	r2,-8(fp)
20080acc:	1000021e 	bne	r2,zero,20080ad8 <Fat_CheckExtension+0x28>
		return 0;
20080ad0:	0005883a 	mov	r2,zero
20080ad4:	00000e06 	br	20080b10 <Fat_CheckExtension+0x60>

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
20080ad8:	e0bffe17 	ldw	r2,-8(fp)
20080adc:	1009883a 	mov	r4,r2
20080ae0:	01400b84 	movi	r5,46
20080ae4:	0089f340 	call	20089f34 <strrchr>
20080ae8:	e0bffd15 	stw	r2,-12(fp)
20080aec:	e0bffd17 	ldw	r2,-12(fp)
20080af0:	10000626 	beq	r2,zero,20080b0c <Fat_CheckExtension+0x5c>
		if (strcmp(point, ext) == 0) {
20080af4:	e13ffd17 	ldw	r4,-12(fp)
20080af8:	e17fff17 	ldw	r5,-4(fp)
20080afc:	0089df80 	call	20089df8 <strcmp>
20080b00:	1000021e 	bne	r2,zero,20080b0c <Fat_CheckExtension+0x5c>
			return 1;
20080b04:	00800044 	movi	r2,1
20080b08:	00000106 	br	20080b10 <Fat_CheckExtension+0x60>
		}
	}

	return 0;
20080b0c:	0005883a 	mov	r2,zero
}
20080b10:	e037883a 	mov	sp,fp
20080b14:	dfc00117 	ldw	ra,4(sp)
20080b18:	df000017 	ldw	fp,0(sp)
20080b1c:	dec00204 	addi	sp,sp,8
20080b20:	f800283a 	ret

20080b24 <Fat_GetFileName>:


char* Fat_GetFileName(FILE_CONTEXT *pFileContext){
20080b24:	defffe04 	addi	sp,sp,-8
20080b28:	df000115 	stw	fp,4(sp)
20080b2c:	df000104 	addi	fp,sp,4
20080b30:	e13fff15 	stw	r4,-4(fp)
	if(pFileContext == NULL)
20080b34:	e0bfff17 	ldw	r2,-4(fp)
20080b38:	1000021e 	bne	r2,zero,20080b44 <Fat_GetFileName+0x20>
		return 0;
20080b3c:	0005883a 	mov	r2,zero
20080b40:	00000106 	br	20080b48 <Fat_GetFileName+0x24>
	else
		return pFileContext->szName;
20080b44:	e0bfff17 	ldw	r2,-4(fp)
}
20080b48:	e037883a 	mov	sp,fp
20080b4c:	df000017 	ldw	fp,0(sp)
20080b50:	dec00104 	addi	sp,sp,4
20080b54:	f800283a 	ret

20080b58 <Fat_FileExist>:

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
20080b58:	deffaf04 	addi	sp,sp,-324
20080b5c:	dfc05015 	stw	ra,320(sp)
20080b60:	df004f15 	stw	fp,316(sp)
20080b64:	df004f04 	addi	fp,sp,316
20080b68:	e13ffe15 	stw	r4,-8(fp)
20080b6c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20080b70:	e03fb115 	stw	zero,-316(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20080b74:	e0bfb204 	addi	r2,fp,-312
20080b78:	e13ffe17 	ldw	r4,-8(fp)
20080b7c:	100b883a 	mov	r5,r2
20080b80:	00803680 	call	20080368 <Fat_FileBrowseBegin>
20080b84:	10001a26 	beq	r2,zero,20080bf0 <Fat_FileExist+0x98>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20080b88:	00000f06 	br	20080bc8 <Fat_FileExist+0x70>
            if (FileContext.bLongFilename){
20080b8c:	e0bff417 	ldw	r2,-48(fp)
20080b90:	10000626 	beq	r2,zero,20080bac <Fat_FileExist+0x54>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
20080b94:	e0bfb404 	addi	r2,fp,-304
20080b98:	1009883a 	mov	r4,r2
20080b9c:	e17fff17 	ldw	r5,-4(fp)
20080ba0:	008086c0 	call	2008086c <fatSameLongFilename>
20080ba4:	e0bfb115 	stw	r2,-316(fp)
20080ba8:	00000706 	br	20080bc8 <Fat_FileExist+0x70>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20080bac:	e0bfb404 	addi	r2,fp,-304
20080bb0:	1009883a 	mov	r4,r2
20080bb4:	e17fff17 	ldw	r5,-4(fp)
20080bb8:	0089df80 	call	20089df8 <strcmp>
20080bbc:	1000021e 	bne	r2,zero,20080bc8 <Fat_FileExist+0x70>
                    bFind = TRUE;
20080bc0:	00800044 	movi	r2,1
20080bc4:	e0bfb115 	stw	r2,-316(fp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20080bc8:	e0bfb117 	ldw	r2,-316(fp)
20080bcc:	1000061e 	bne	r2,zero,20080be8 <Fat_FileExist+0x90>
20080bd0:	e0ffb204 	addi	r3,fp,-312
20080bd4:	e0bfb404 	addi	r2,fp,-304
20080bd8:	1809883a 	mov	r4,r3
20080bdc:	100b883a 	mov	r5,r2
20080be0:	00803d40 	call	200803d4 <Fat_FileBrowseNext>
20080be4:	103fe91e 	bne	r2,zero,20080b8c <__flash_rwdata_start+0xfffe4a08>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        Fat_FileClose(Fat); 
20080be8:	e13ffe17 	ldw	r4,-8(fp)
20080bec:	00814e80 	call	200814e8 <Fat_FileClose>
    }
    return bFind;            
20080bf0:	e0bfb117 	ldw	r2,-316(fp)
}    
20080bf4:	e037883a 	mov	sp,fp
20080bf8:	dfc00117 	ldw	ra,4(sp)
20080bfc:	df000017 	ldw	fp,0(sp)
20080c00:	dec00204 	addi	sp,sp,8
20080c04:	f800283a 	ret

20080c08 <Fat_FileOpen>:
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
20080c08:	deff6b04 	addi	sp,sp,-596
20080c0c:	dfc09415 	stw	ra,592(sp)
20080c10:	df009315 	stw	fp,588(sp)
20080c14:	df009304 	addi	fp,sp,588
20080c18:	e13ffe15 	stw	r4,-8(fp)
20080c1c:	e17fff15 	stw	r5,-4(fp)
    bool bFind = FALSE;
20080c20:	e03f6d15 	stw	zero,-588(fp)
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
20080c24:	e03f6e15 	stw	zero,-584(fp)
    int nPos = 0;
20080c28:	e03f6f15 	stw	zero,-580(fp)
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
20080c2c:	e0bf7204 	addi	r2,fp,-568
20080c30:	e13ffe17 	ldw	r4,-8(fp)
20080c34:	100b883a 	mov	r5,r2
20080c38:	00803680 	call	20080368 <Fat_FileBrowseBegin>
20080c3c:	10007426 	beq	r2,zero,20080e10 <Fat_FileOpen+0x208>
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20080c40:	00004c06 	br	20080d74 <Fat_FileOpen+0x16c>
            if (FileContext.bLongFilename){
20080c44:	e0bfb417 	ldw	r2,-304(fp)
20080c48:	10004326 	beq	r2,zero,20080d58 <Fat_FileOpen+0x150>
                //bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
                nPos = 0;
20080c4c:	e03f6f15 	stw	zero,-580(fp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
20080c50:	e0bf7404 	addi	r2,fp,-560
20080c54:	e0bf7015 	stw	r2,-576(fp)
                pData8 = FileContext.szName;
20080c58:	e0bf7404 	addi	r2,fp,-560
20080c5c:	e0bf7115 	stw	r2,-572(fp)
                while(*pData16){
20080c60:	00002d06 	br	20080d18 <Fat_FileOpen+0x110>
                    if (*pData8 && *pData8 != ' ')
20080c64:	e0bf7117 	ldw	r2,-572(fp)
20080c68:	10800003 	ldbu	r2,0(r2)
20080c6c:	10803fcc 	andi	r2,r2,255
20080c70:	10000e26 	beq	r2,zero,20080cac <Fat_FileOpen+0xa4>
20080c74:	e0bf7117 	ldw	r2,-572(fp)
20080c78:	10800003 	ldbu	r2,0(r2)
20080c7c:	10803fcc 	andi	r2,r2,255
20080c80:	10800820 	cmpeqi	r2,r2,32
20080c84:	1000091e 	bne	r2,zero,20080cac <Fat_FileOpen+0xa4>
                        szWaveFilename[nPos++] = *pData8;
20080c88:	e0bf6f17 	ldw	r2,-580(fp)
20080c8c:	10c00044 	addi	r3,r2,1
20080c90:	e0ff6f15 	stw	r3,-580(fp)
20080c94:	e0ff7117 	ldw	r3,-572(fp)
20080c98:	18c00003 	ldbu	r3,0(r3)
20080c9c:	1809883a 	mov	r4,r3
20080ca0:	e0ffbe04 	addi	r3,fp,-264
20080ca4:	1885883a 	add	r2,r3,r2
20080ca8:	11000005 	stb	r4,0(r2)
                    pData8++;
20080cac:	e0bf7117 	ldw	r2,-572(fp)
20080cb0:	10800044 	addi	r2,r2,1
20080cb4:	e0bf7115 	stw	r2,-572(fp)
                    if (*pData8 && *pData8 != ' ')
20080cb8:	e0bf7117 	ldw	r2,-572(fp)
20080cbc:	10800003 	ldbu	r2,0(r2)
20080cc0:	10803fcc 	andi	r2,r2,255
20080cc4:	10000e26 	beq	r2,zero,20080d00 <Fat_FileOpen+0xf8>
20080cc8:	e0bf7117 	ldw	r2,-572(fp)
20080ccc:	10800003 	ldbu	r2,0(r2)
20080cd0:	10803fcc 	andi	r2,r2,255
20080cd4:	10800820 	cmpeqi	r2,r2,32
20080cd8:	1000091e 	bne	r2,zero,20080d00 <Fat_FileOpen+0xf8>
                        szWaveFilename[nPos++] = *pData8;
20080cdc:	e0bf6f17 	ldw	r2,-580(fp)
20080ce0:	10c00044 	addi	r3,r2,1
20080ce4:	e0ff6f15 	stw	r3,-580(fp)
20080ce8:	e0ff7117 	ldw	r3,-572(fp)
20080cec:	18c00003 	ldbu	r3,0(r3)
20080cf0:	1809883a 	mov	r4,r3
20080cf4:	e0ffbe04 	addi	r3,fp,-264
20080cf8:	1885883a 	add	r2,r3,r2
20080cfc:	11000005 	stb	r4,0(r2)
                    pData8++;                    
20080d00:	e0bf7117 	ldw	r2,-572(fp)
20080d04:	10800044 	addi	r2,r2,1
20080d08:	e0bf7115 	stw	r2,-572(fp)
                    //    
                    pData16++;
20080d0c:	e0bf7017 	ldw	r2,-576(fp)
20080d10:	10800084 	addi	r2,r2,2
20080d14:	e0bf7015 	stw	r2,-576(fp)
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
20080d18:	e0bf7017 	ldw	r2,-576(fp)
20080d1c:	1080000b 	ldhu	r2,0(r2)
20080d20:	10bfffcc 	andi	r2,r2,65535
20080d24:	103fcf1e 	bne	r2,zero,20080c64 <__flash_rwdata_start+0xfffe4ae0>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20080d28:	e0ffbe04 	addi	r3,fp,-264
20080d2c:	e0bf6f17 	ldw	r2,-580(fp)
20080d30:	1885883a 	add	r2,r3,r2
20080d34:	10000005 	stb	zero,0(r2)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20080d38:	e0bfbe04 	addi	r2,fp,-264
20080d3c:	e13fff17 	ldw	r4,-4(fp)
20080d40:	100b883a 	mov	r5,r2
20080d44:	0089df80 	call	20089df8 <strcmp>
20080d48:	1000021e 	bne	r2,zero,20080d54 <Fat_FileOpen+0x14c>
                    bFind = TRUE;
20080d4c:	00800044 	movi	r2,1
20080d50:	e0bf6d15 	stw	r2,-588(fp)
20080d54:	00000706 	br	20080d74 <Fat_FileOpen+0x16c>
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20080d58:	e0bf7404 	addi	r2,fp,-560
20080d5c:	1009883a 	mov	r4,r2
20080d60:	e17fff17 	ldw	r5,-4(fp)
20080d64:	0089df80 	call	20089df8 <strcmp>
20080d68:	1000021e 	bne	r2,zero,20080d74 <Fat_FileOpen+0x16c>
                    bFind = TRUE;
20080d6c:	00800044 	movi	r2,1
20080d70:	e0bf6d15 	stw	r2,-588(fp)
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20080d74:	e0bf6d17 	ldw	r2,-588(fp)
20080d78:	1000061e 	bne	r2,zero,20080d94 <Fat_FileOpen+0x18c>
20080d7c:	e0ff7204 	addi	r3,fp,-568
20080d80:	e0bf7404 	addi	r2,fp,-560
20080d84:	1809883a 	mov	r4,r3
20080d88:	100b883a 	mov	r5,r2
20080d8c:	00803d40 	call	200803d4 <Fat_FileBrowseNext>
20080d90:	103fac1e 	bne	r2,zero,20080c44 <__flash_rwdata_start+0xfffe4ac0>
                if (strcmp(FileContext.szName, pFilename) == 0)
                    bFind = TRUE;
            }    
        } // while 
        
        if (bFind){
20080d94:	e0bf6d17 	ldw	r2,-588(fp)
20080d98:	10001d26 	beq	r2,zero,20080e10 <Fat_FileOpen+0x208>
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
20080d9c:	00800034 	movhi	r2,0
20080da0:	10890204 	addi	r2,r2,9224
20080da4:	e0bf6e15 	stw	r2,-584(fp)
            if (pFile){
20080da8:	e0bf6e17 	ldw	r2,-584(fp)
20080dac:	10001826 	beq	r2,zero,20080e10 <Fat_FileOpen+0x208>
                pFile->OpenAttribute = FILE_OPEN_READ; 
20080db0:	e0bf6e17 	ldw	r2,-584(fp)
20080db4:	00c00044 	movi	r3,1
20080db8:	10c00115 	stw	r3,4(r2)
                pFile->SeekPos = 0;
20080dbc:	e0bf6e17 	ldw	r2,-584(fp)
20080dc0:	10000215 	stw	zero,8(r2)
                pFile->Directory = FileContext;
20080dc4:	e0bf6e17 	ldw	r2,-584(fp)
20080dc8:	11000504 	addi	r4,r2,20
20080dcc:	e0ff7404 	addi	r3,fp,-560
20080dd0:	00804a04 	movi	r2,296
20080dd4:	180b883a 	mov	r5,r3
20080dd8:	100d883a 	mov	r6,r2
20080ddc:	00899600 	call	20089960 <memcpy>
                pFile->IsOpened = TRUE;
20080de0:	e0bf6e17 	ldw	r2,-584(fp)
20080de4:	00c00044 	movi	r3,1
20080de8:	10c00015 	stw	r3,0(r2)
                pFile->Cluster = FileContext.FirstLogicalCluster;
20080dec:	e0bfbc8b 	ldhu	r2,-270(fp)
20080df0:	10ffffcc 	andi	r3,r2,65535
20080df4:	e0bf6e17 	ldw	r2,-584(fp)
20080df8:	10c00315 	stw	r3,12(r2)
                pFile->ClusterSeq = 0;
20080dfc:	e0bf6e17 	ldw	r2,-584(fp)
20080e00:	10000415 	stw	zero,16(r2)
                pFile->Fat = Fat;
20080e04:	e0bf6e17 	ldw	r2,-584(fp)
20080e08:	e0fffe17 	ldw	r3,-8(fp)
20080e0c:	10c04f15 	stw	r3,316(r2)
            }    
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
20080e10:	e0bf6e17 	ldw	r2,-584(fp)
}
20080e14:	e037883a 	mov	sp,fp
20080e18:	dfc00117 	ldw	ra,4(sp)
20080e1c:	df000017 	ldw	fp,0(sp)
20080e20:	dec00204 	addi	sp,sp,8
20080e24:	f800283a 	ret

20080e28 <Fat_FileSize>:


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
20080e28:	defffd04 	addi	sp,sp,-12
20080e2c:	df000215 	stw	fp,8(sp)
20080e30:	df000204 	addi	fp,sp,8
20080e34:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20080e38:	e0bfff17 	ldw	r2,-4(fp)
20080e3c:	e0bffe15 	stw	r2,-8(fp)
    if (f->IsOpened)
20080e40:	e0bffe17 	ldw	r2,-8(fp)
20080e44:	10800017 	ldw	r2,0(r2)
20080e48:	10000326 	beq	r2,zero,20080e58 <Fat_FileSize+0x30>
        return f->Directory.FileSize;
20080e4c:	e0bffe17 	ldw	r2,-8(fp)
20080e50:	10804e17 	ldw	r2,312(r2)
20080e54:	00000106 	br	20080e5c <Fat_FileSize+0x34>
    return 0;        
20080e58:	0005883a 	mov	r2,zero
}
20080e5c:	e037883a 	mov	sp,fp
20080e60:	df000017 	ldw	fp,0(sp)
20080e64:	dec00104 	addi	sp,sp,4
20080e68:	f800283a 	ret

20080e6c <Fat_FileRead>:


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
20080e6c:	deffec04 	addi	sp,sp,-80
20080e70:	dfc01315 	stw	ra,76(sp)
20080e74:	df001215 	stw	fp,72(sp)
20080e78:	df001204 	addi	fp,sp,72
20080e7c:	e13ffd15 	stw	r4,-12(fp)
20080e80:	e17ffe15 	stw	r5,-8(fp)
20080e84:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20080e88:	e0bffd17 	ldw	r2,-12(fp)
20080e8c:	e0bff715 	stw	r2,-36(fp)
    VOLUME_INFO *pVol;
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
20080e90:	e03ff115 	stw	zero,-60(fp)
    int s;
    bool bSuccess= TRUE;
20080e94:	00800044 	movi	r2,1
20080e98:	e0bff315 	stw	r2,-52(fp)
    
    if (!f || !f->Fat)
20080e9c:	e0bff717 	ldw	r2,-36(fp)
20080ea0:	10000326 	beq	r2,zero,20080eb0 <Fat_FileRead+0x44>
20080ea4:	e0bff717 	ldw	r2,-36(fp)
20080ea8:	10804f17 	ldw	r2,316(r2)
20080eac:	1000021e 	bne	r2,zero,20080eb8 <Fat_FileRead+0x4c>
        return FALSE;
20080eb0:	0005883a 	mov	r2,zero
20080eb4:	00014706 	br	200813d4 <Fat_FileRead+0x568>
    pVol = (VOLUME_INFO *)f->Fat;        
20080eb8:	e0bff717 	ldw	r2,-36(fp)
20080ebc:	10804f17 	ldw	r2,316(r2)
20080ec0:	e0bff815 	stw	r2,-32(fp)
    
    if (!f->IsOpened){
20080ec4:	e0bff717 	ldw	r2,-36(fp)
20080ec8:	10800017 	ldw	r2,0(r2)
20080ecc:	1000021e 	bne	r2,zero,20080ed8 <Fat_FileRead+0x6c>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
20080ed0:	e0bff317 	ldw	r2,-52(fp)
20080ed4:	00013f06 	br	200813d4 <Fat_FileRead+0x568>
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
20080ed8:	e0bff817 	ldw	r2,-32(fp)
20080edc:	10800d17 	ldw	r2,52(r2)
20080ee0:	e0bff915 	stw	r2,-28(fp)
    Pos = f->SeekPos;
20080ee4:	e0bff717 	ldw	r2,-36(fp)
20080ee8:	10800217 	ldw	r2,8(r2)
20080eec:	e0bfee15 	stw	r2,-72(fp)
    if (BytesPerCluster == 65536){
20080ef0:	e0fff917 	ldw	r3,-28(fp)
20080ef4:	00800074 	movhi	r2,1
20080ef8:	18800a1e 	bne	r3,r2,20080f24 <Fat_FileRead+0xb8>
    	nClusterSeq = Pos >> 16;
20080efc:	e0bfee17 	ldw	r2,-72(fp)
20080f00:	1004d43a 	srli	r2,r2,16
20080f04:	e0bff215 	stw	r2,-56(fp)
    	Pos -= (f->ClusterSeq << 16);
20080f08:	e0bff717 	ldw	r2,-36(fp)
20080f0c:	10800417 	ldw	r2,16(r2)
20080f10:	1004943a 	slli	r2,r2,16
20080f14:	e0ffee17 	ldw	r3,-72(fp)
20080f18:	1885c83a 	sub	r2,r3,r2
20080f1c:	e0bfee15 	stw	r2,-72(fp)
20080f20:	00003206 	br	20080fec <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 32768){
20080f24:	e0fff917 	ldw	r3,-28(fp)
20080f28:	00a00014 	movui	r2,32768
20080f2c:	18800a1e 	bne	r3,r2,20080f58 <Fat_FileRead+0xec>
        nClusterSeq = Pos >> 15;
20080f30:	e0bfee17 	ldw	r2,-72(fp)
20080f34:	1004d3fa 	srli	r2,r2,15
20080f38:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 15);
20080f3c:	e0bff717 	ldw	r2,-36(fp)
20080f40:	10800417 	ldw	r2,16(r2)
20080f44:	100493fa 	slli	r2,r2,15
20080f48:	e0ffee17 	ldw	r3,-72(fp)
20080f4c:	1885c83a 	sub	r2,r3,r2
20080f50:	e0bfee15 	stw	r2,-72(fp)
20080f54:	00002506 	br	20080fec <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 16384){
20080f58:	e0bff917 	ldw	r2,-28(fp)
20080f5c:	10900018 	cmpnei	r2,r2,16384
20080f60:	10000a1e 	bne	r2,zero,20080f8c <Fat_FileRead+0x120>
        nClusterSeq = Pos >> 14;
20080f64:	e0bfee17 	ldw	r2,-72(fp)
20080f68:	1004d3ba 	srli	r2,r2,14
20080f6c:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 14);
20080f70:	e0bff717 	ldw	r2,-36(fp)
20080f74:	10800417 	ldw	r2,16(r2)
20080f78:	100493ba 	slli	r2,r2,14
20080f7c:	e0ffee17 	ldw	r3,-72(fp)
20080f80:	1885c83a 	sub	r2,r3,r2
20080f84:	e0bfee15 	stw	r2,-72(fp)
20080f88:	00001806 	br	20080fec <Fat_FileRead+0x180>
    }else if (BytesPerCluster == 2048){
20080f8c:	e0bff917 	ldw	r2,-28(fp)
20080f90:	10820018 	cmpnei	r2,r2,2048
20080f94:	10000a1e 	bne	r2,zero,20080fc0 <Fat_FileRead+0x154>
        nClusterSeq = Pos >> 11;
20080f98:	e0bfee17 	ldw	r2,-72(fp)
20080f9c:	1004d2fa 	srli	r2,r2,11
20080fa0:	e0bff215 	stw	r2,-56(fp)
        Pos -= (f->ClusterSeq << 11);
20080fa4:	e0bff717 	ldw	r2,-36(fp)
20080fa8:	10800417 	ldw	r2,16(r2)
20080fac:	100492fa 	slli	r2,r2,11
20080fb0:	e0ffee17 	ldw	r3,-72(fp)
20080fb4:	1885c83a 	sub	r2,r3,r2
20080fb8:	e0bfee15 	stw	r2,-72(fp)
20080fbc:	00000b06 	br	20080fec <Fat_FileRead+0x180>
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
20080fc0:	e13fee17 	ldw	r4,-72(fp)
20080fc4:	e17ff917 	ldw	r5,-28(fp)
20080fc8:	00866700 	call	20086670 <__udivsi3>
20080fcc:	e0bff215 	stw	r2,-56(fp)
        Pos -= f->ClusterSeq*BytesPerCluster;
20080fd0:	e0bff717 	ldw	r2,-36(fp)
20080fd4:	10c00417 	ldw	r3,16(r2)
20080fd8:	e0bff917 	ldw	r2,-28(fp)
20080fdc:	1885383a 	mul	r2,r3,r2
20080fe0:	e0ffee17 	ldw	r3,-72(fp)
20080fe4:	1885c83a 	sub	r2,r3,r2
20080fe8:	e0bfee15 	stw	r2,-72(fp)
    }    
        
       
    Cluster = f->Cluster;
20080fec:	e0bff717 	ldw	r2,-36(fp)
20080ff0:	10800317 	ldw	r2,12(r2)
20080ff4:	e0bff015 	stw	r2,-64(fp)
    if (nClusterSeq != f->ClusterSeq){
20080ff8:	e0bff717 	ldw	r2,-36(fp)
20080ffc:	10c00417 	ldw	r3,16(r2)
20081000:	e0bff217 	ldw	r2,-56(fp)
20081004:	18801f26 	beq	r3,r2,20081084 <Fat_FileRead+0x218>
        Cluster = f->Cluster;  //11/20/2007, richard
20081008:	e0bff717 	ldw	r2,-36(fp)
2008100c:	10800317 	ldw	r2,12(r2)
20081010:	e0bff015 	stw	r2,-64(fp)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
20081014:	00001606 	br	20081070 <Fat_FileRead+0x204>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
20081018:	e13ff817 	ldw	r4,-32(fp)
2008101c:	e17ff017 	ldw	r5,-64(fp)
20081020:	00818ac0 	call	200818ac <fatNextCluster>
20081024:	e0bffa15 	stw	r2,-24(fp)
            if (NextCluster == 0){
20081028:	e0bffa17 	ldw	r2,-24(fp)
2008102c:	1000021e 	bne	r2,zero,20081038 <Fat_FileRead+0x1cc>
                bSuccess = FALSE;
20081030:	e03ff315 	stw	zero,-52(fp)
20081034:	00000206 	br	20081040 <Fat_FileRead+0x1d4>
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
20081038:	e0bffa17 	ldw	r2,-24(fp)
2008103c:	e0bff015 	stw	r2,-64(fp)
            }        
            Pos -= BytesPerCluster;
20081040:	e0ffee17 	ldw	r3,-72(fp)
20081044:	e0bff917 	ldw	r2,-28(fp)
20081048:	1885c83a 	sub	r2,r3,r2
2008104c:	e0bfee15 	stw	r2,-72(fp)
            f->Cluster = Cluster;
20081050:	e0bff717 	ldw	r2,-36(fp)
20081054:	e0fff017 	ldw	r3,-64(fp)
20081058:	10c00315 	stw	r3,12(r2)
            f->ClusterSeq++; 
2008105c:	e0bff717 	ldw	r2,-36(fp)
20081060:	10800417 	ldw	r2,16(r2)
20081064:	10c00044 	addi	r3,r2,1
20081068:	e0bff717 	ldw	r2,-36(fp)
2008106c:	10c00415 	stw	r3,16(r2)
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
20081070:	e0ffee17 	ldw	r3,-72(fp)
20081074:	e0bff917 	ldw	r2,-28(fp)
20081078:	18800236 	bltu	r3,r2,20081084 <Fat_FileRead+0x218>
2008107c:	e0bff317 	ldw	r2,-52(fp)
20081080:	103fe51e 	bne	r2,zero,20081018 <__flash_rwdata_start+0xfffe4e94>
    alt_u32 SectorOffset, ByteOffset, SectorsToRead;
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
20081084:	e0bfee17 	ldw	r2,-72(fp)
20081088:	1004d27a 	srli	r2,r2,9
2008108c:	e0bff415 	stw	r2,-48(fp)
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
20081090:	e0bff817 	ldw	r2,-32(fp)
20081094:	10c00717 	ldw	r3,28(r2)
20081098:	e0bff417 	ldw	r2,-48(fp)
2008109c:	1885383a 	mul	r2,r3,r2
200810a0:	e0ffee17 	ldw	r3,-72(fp)
200810a4:	1885c83a 	sub	r2,r3,r2
200810a8:	e0bffb15 	stw	r2,-20(fp)

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200810ac:	e0bff017 	ldw	r2,-64(fp)
200810b0:	10ffff84 	addi	r3,r2,-2
200810b4:	e0bff817 	ldw	r2,-32(fp)
200810b8:	10800817 	ldw	r2,32(r2)
200810bc:	1887383a 	mul	r3,r3,r2
200810c0:	e0bff817 	ldw	r2,-32(fp)
200810c4:	10801017 	ldw	r2,64(r2)
200810c8:	1885883a 	add	r2,r3,r2
200810cc:	e0bfef15 	stw	r2,-68(fp)
    PhysicalSecter += SectorOffset;
200810d0:	e0ffef17 	ldw	r3,-68(fp)
200810d4:	e0bff417 	ldw	r2,-48(fp)
200810d8:	1885883a 	add	r2,r3,r2
200810dc:	e0bfef15 	stw	r2,-68(fp)
    nReadCount = 0;
200810e0:	e03ff115 	stw	zero,-60(fp)

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
200810e4:	e0bffb17 	ldw	r2,-20(fp)
200810e8:	1000031e 	bne	r2,zero,200810f8 <Fat_FileRead+0x28c>
200810ec:	e0bfff17 	ldw	r2,-4(fp)
200810f0:	10808008 	cmpgei	r2,r2,512
200810f4:	1000441e 	bne	r2,zero,20081208 <Fat_FileRead+0x39c>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
200810f8:	e13ff817 	ldw	r4,-32(fp)
200810fc:	e17fef17 	ldw	r5,-68(fp)
20081100:	00821980 	call	20082198 <fatReadSecter>
20081104:	1000021e 	bne	r2,zero,20081110 <Fat_FileRead+0x2a4>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector %d\r\n", PhysicalSecter));
			return FALSE;
20081108:	0005883a 	mov	r2,zero
2008110c:	0000b106 	br	200813d4 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize > (512 - ByteOffset)? 512 - ByteOffset : nBufferSize;
20081110:	e13fff17 	ldw	r4,-4(fp)
20081114:	00c08004 	movi	r3,512
20081118:	e0bffb17 	ldw	r2,-20(fp)
2008111c:	1887c83a 	sub	r3,r3,r2
20081120:	2005883a 	mov	r2,r4
20081124:	1880012e 	bgeu	r3,r2,2008112c <Fat_FileRead+0x2c0>
20081128:	1805883a 	mov	r2,r3
2008112c:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
20081130:	e0bffb17 	ldw	r2,-20(fp)
20081134:	10801104 	addi	r2,r2,68
20081138:	e0fff817 	ldw	r3,-32(fp)
2008113c:	1887883a 	add	r3,r3,r2
20081140:	e0bffc17 	ldw	r2,-16(fp)
20081144:	e13ffe17 	ldw	r4,-8(fp)
20081148:	180b883a 	mov	r5,r3
2008114c:	100d883a 	mov	r6,r2
20081150:	00899600 	call	20089960 <memcpy>
    	nReadCount = nCopyCount;
20081154:	e0bffc17 	ldw	r2,-16(fp)
20081158:	e0bff115 	stw	r2,-60(fp)

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
2008115c:	e0bfff17 	ldw	r2,-4(fp)
20081160:	e0fff117 	ldw	r3,-60(fp)
20081164:	1880222e 	bgeu	r3,r2,200811f0 <Fat_FileRead+0x384>
20081168:	e0bff817 	ldw	r2,-32(fp)
2008116c:	10800817 	ldw	r2,32(r2)
20081170:	10ffffc4 	addi	r3,r2,-1
20081174:	e0bff417 	ldw	r2,-48(fp)
20081178:	18801d1e 	bne	r3,r2,200811f0 <Fat_FileRead+0x384>
			// case: last sector of the cluster
			NextCluster = fatNextCluster(pVol, Cluster);
2008117c:	e13ff817 	ldw	r4,-32(fp)
20081180:	e17ff017 	ldw	r5,-64(fp)
20081184:	00818ac0 	call	200818ac <fatNextCluster>
20081188:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
2008118c:	e0bffa17 	ldw	r2,-24(fp)
20081190:	1000021e 	bne	r2,zero,2008119c <Fat_FileRead+0x330>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
20081194:	0005883a 	mov	r2,zero
20081198:	00008e06 	br	200813d4 <Fat_FileRead+0x568>
			}

			Cluster = NextCluster;
2008119c:	e0bffa17 	ldw	r2,-24(fp)
200811a0:	e0bff015 	stw	r2,-64(fp)
			f->ClusterSeq++;
200811a4:	e0bff717 	ldw	r2,-36(fp)
200811a8:	10800417 	ldw	r2,16(r2)
200811ac:	10c00044 	addi	r3,r2,1
200811b0:	e0bff717 	ldw	r2,-36(fp)
200811b4:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
200811b8:	e0bff717 	ldw	r2,-36(fp)
200811bc:	e0fff017 	ldw	r3,-64(fp)
200811c0:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
200811c4:	e0bff017 	ldw	r2,-64(fp)
200811c8:	10ffff84 	addi	r3,r2,-2
200811cc:	e0bff817 	ldw	r2,-32(fp)
200811d0:	10800817 	ldw	r2,32(r2)
200811d4:	1887383a 	mul	r3,r3,r2
200811d8:	e0bff817 	ldw	r2,-32(fp)
200811dc:	10801017 	ldw	r2,64(r2)
200811e0:	1885883a 	add	r2,r3,r2
200811e4:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
200811e8:	e03ff415 	stw	zero,-48(fp)
200811ec:	00000606 	br	20081208 <Fat_FileRead+0x39c>
    	} else {
    		SectorOffset++;
200811f0:	e0bff417 	ldw	r2,-48(fp)
200811f4:	10800044 	addi	r2,r2,1
200811f8:	e0bff415 	stw	r2,-48(fp)
    		PhysicalSecter++;
200811fc:	e0bfef17 	ldw	r2,-68(fp)
20081200:	10800044 	addi	r2,r2,1
20081204:	e0bfef15 	stw	r2,-68(fp)
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20081208:	e0ffff17 	ldw	r3,-4(fp)
2008120c:	e0bff117 	ldw	r2,-60(fp)
20081210:	1885c83a 	sub	r2,r3,r2
20081214:	1004d27a 	srli	r2,r2,9
20081218:	e0bff515 	stw	r2,-44(fp)

    while(SectorsToRead > 0){
2008121c:	00004c06 	br	20081350 <Fat_FileRead+0x4e4>
    	if(SectorsToRead < (pVol->BPB_SecPerCluster - SectorOffset)){
20081220:	e0bff817 	ldw	r2,-32(fp)
20081224:	10c00817 	ldw	r3,32(r2)
20081228:	e0bff417 	ldw	r2,-48(fp)
2008122c:	1885c83a 	sub	r2,r3,r2
20081230:	e0fff517 	ldw	r3,-44(fp)
20081234:	1880032e 	bgeu	r3,r2,20081244 <Fat_FileRead+0x3d8>
    		nCopySectors = SectorsToRead;
20081238:	e0bff517 	ldw	r2,-44(fp)
2008123c:	e0bff615 	stw	r2,-40(fp)
20081240:	00000506 	br	20081258 <Fat_FileRead+0x3ec>
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
20081244:	e0bff817 	ldw	r2,-32(fp)
20081248:	10c00817 	ldw	r3,32(r2)
2008124c:	e0bff417 	ldw	r2,-48(fp)
20081250:	1885c83a 	sub	r2,r3,r2
20081254:	e0bff615 	stw	r2,-40(fp)
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
20081258:	e1bff617 	ldw	r6,-40(fp)
2008125c:	e0fffe17 	ldw	r3,-8(fp)
20081260:	e0bff117 	ldw	r2,-60(fp)
20081264:	1885883a 	add	r2,r3,r2
20081268:	e13ff817 	ldw	r4,-32(fp)
2008126c:	e17fef17 	ldw	r5,-68(fp)
20081270:	100f883a 	mov	r7,r2
20081274:	00822280 	call	20082228 <fatReadMultiSecter>
20081278:	1000021e 	bne	r2,zero,20081284 <Fat_FileRead+0x418>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
2008127c:	0005883a 	mov	r2,zero
20081280:	00005406 	br	200813d4 <Fat_FileRead+0x568>
        }
        SectorsToRead -= nCopySectors;
20081284:	e0bff617 	ldw	r2,-40(fp)
20081288:	e0fff517 	ldw	r3,-44(fp)
2008128c:	1885c83a 	sub	r2,r3,r2
20081290:	e0bff515 	stw	r2,-44(fp)
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
20081294:	e0bff617 	ldw	r2,-40(fp)
20081298:	1004927a 	slli	r2,r2,9
2008129c:	1007883a 	mov	r3,r2
200812a0:	e0bff117 	ldw	r2,-60(fp)
200812a4:	10c5883a 	add	r2,r2,r3
200812a8:	e0bff115 	stw	r2,-60(fp)
        PhysicalSecter += nCopySectors;
200812ac:	e0bff617 	ldw	r2,-40(fp)
200812b0:	e0ffef17 	ldw	r3,-68(fp)
200812b4:	1885883a 	add	r2,r3,r2
200812b8:	e0bfef15 	stw	r2,-68(fp)

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
200812bc:	e0fff617 	ldw	r3,-40(fp)
200812c0:	e0bff817 	ldw	r2,-32(fp)
200812c4:	11000817 	ldw	r4,32(r2)
200812c8:	e0bff417 	ldw	r2,-48(fp)
200812cc:	2085c83a 	sub	r2,r4,r2
200812d0:	18801f1e 	bne	r3,r2,20081350 <Fat_FileRead+0x4e4>
200812d4:	e0bfff17 	ldw	r2,-4(fp)
200812d8:	e0fff117 	ldw	r3,-60(fp)
200812dc:	18801c2e 	bgeu	r3,r2,20081350 <Fat_FileRead+0x4e4>
			NextCluster = fatNextCluster(pVol, Cluster);
200812e0:	e13ff817 	ldw	r4,-32(fp)
200812e4:	e17ff017 	ldw	r5,-64(fp)
200812e8:	00818ac0 	call	200818ac <fatNextCluster>
200812ec:	e0bffa15 	stw	r2,-24(fp)
			if (NextCluster == 0){
200812f0:	e0bffa17 	ldw	r2,-24(fp)
200812f4:	1000021e 	bne	r2,zero,20081300 <Fat_FileRead+0x494>
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
200812f8:	0005883a 	mov	r2,zero
200812fc:	00003506 	br	200813d4 <Fat_FileRead+0x568>
			}else{
				Cluster = NextCluster;
20081300:	e0bffa17 	ldw	r2,-24(fp)
20081304:	e0bff015 	stw	r2,-64(fp)
			}
			f->ClusterSeq++;
20081308:	e0bff717 	ldw	r2,-36(fp)
2008130c:	10800417 	ldw	r2,16(r2)
20081310:	10c00044 	addi	r3,r2,1
20081314:	e0bff717 	ldw	r2,-36(fp)
20081318:	10c00415 	stw	r3,16(r2)
			f->Cluster = Cluster;
2008131c:	e0bff717 	ldw	r2,-36(fp)
20081320:	e0fff017 	ldw	r3,-64(fp)
20081324:	10c00315 	stw	r3,12(r2)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20081328:	e0bff017 	ldw	r2,-64(fp)
2008132c:	10ffff84 	addi	r3,r2,-2
20081330:	e0bff817 	ldw	r2,-32(fp)
20081334:	10800817 	ldw	r2,32(r2)
20081338:	1887383a 	mul	r3,r3,r2
2008133c:	e0bff817 	ldw	r2,-32(fp)
20081340:	10801017 	ldw	r2,64(r2)
20081344:	1885883a 	add	r2,r3,r2
20081348:	e0bfef15 	stw	r2,-68(fp)
			SectorOffset = 0;
2008134c:	e03ff415 	stw	zero,-48(fp)
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20081350:	e0bff517 	ldw	r2,-44(fp)
20081354:	103fb21e 	bne	r2,zero,20081220 <__flash_rwdata_start+0xfffe509c>
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
20081358:	e0bfff17 	ldw	r2,-4(fp)
2008135c:	e0fff117 	ldw	r3,-60(fp)
20081360:	1880132e 	bgeu	r3,r2,200813b0 <Fat_FileRead+0x544>
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20081364:	e13ff817 	ldw	r4,-32(fp)
20081368:	e17fef17 	ldw	r5,-68(fp)
2008136c:	00821980 	call	20082198 <fatReadSecter>
20081370:	1000021e 	bne	r2,zero,2008137c <Fat_FileRead+0x510>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector\r\n"));
			return FALSE;
20081374:	0005883a 	mov	r2,zero
20081378:	00001606 	br	200813d4 <Fat_FileRead+0x568>
        }

    	nCopyCount = nBufferSize - nReadCount;
2008137c:	e0ffff17 	ldw	r3,-4(fp)
20081380:	e0bff117 	ldw	r2,-60(fp)
20081384:	1885c83a 	sub	r2,r3,r2
20081388:	e0bffc15 	stw	r2,-16(fp)
    	memcpy(pBuffer+nReadCount, pVol->Secter_Data, nCopyCount);
2008138c:	e0fffe17 	ldw	r3,-8(fp)
20081390:	e0bff117 	ldw	r2,-60(fp)
20081394:	1889883a 	add	r4,r3,r2
20081398:	e0bff817 	ldw	r2,-32(fp)
2008139c:	10c01104 	addi	r3,r2,68
200813a0:	e0bffc17 	ldw	r2,-16(fp)
200813a4:	180b883a 	mov	r5,r3
200813a8:	100d883a 	mov	r6,r2
200813ac:	00899600 	call	20089960 <memcpy>
            f->Cluster = Cluster;
        }                    
    }
#endif
    
    if (bSuccess){
200813b0:	e0bff317 	ldw	r2,-52(fp)
200813b4:	10000626 	beq	r2,zero,200813d0 <Fat_FileRead+0x564>
        f->SeekPos += nBufferSize;
200813b8:	e0bff717 	ldw	r2,-36(fp)
200813bc:	10c00217 	ldw	r3,8(r2)
200813c0:	e0bfff17 	ldw	r2,-4(fp)
200813c4:	1887883a 	add	r3,r3,r2
200813c8:	e0bff717 	ldw	r2,-36(fp)
200813cc:	10c00215 	stw	r3,8(r2)
    }        
        
    
    return bSuccess;
200813d0:	e0bff317 	ldw	r2,-52(fp)
}
200813d4:	e037883a 	mov	sp,fp
200813d8:	dfc00117 	ldw	ra,4(sp)
200813dc:	df000017 	ldw	fp,0(sp)
200813e0:	dec00204 	addi	sp,sp,8
200813e4:	f800283a 	ret

200813e8 <Fat_FileSeek>:


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
200813e8:	defff904 	addi	sp,sp,-28
200813ec:	df000615 	stw	fp,24(sp)
200813f0:	df000604 	addi	fp,sp,24
200813f4:	e13ffd15 	stw	r4,-12(fp)
200813f8:	e17ffe15 	stw	r5,-8(fp)
200813fc:	e1bfff15 	stw	r6,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
20081400:	e0bffd17 	ldw	r2,-12(fp)
20081404:	e0bffb15 	stw	r2,-20(fp)
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
20081408:	00800044 	movi	r2,1
2008140c:	e0bffa15 	stw	r2,-24(fp)

    if (!f || !f->Fat)
20081410:	e0bffb17 	ldw	r2,-20(fp)
20081414:	10000326 	beq	r2,zero,20081424 <Fat_FileSeek+0x3c>
20081418:	e0bffb17 	ldw	r2,-20(fp)
2008141c:	10804f17 	ldw	r2,316(r2)
20081420:	1000021e 	bne	r2,zero,2008142c <Fat_FileSeek+0x44>
        return FALSE;
20081424:	0005883a 	mov	r2,zero
20081428:	00002b06 	br	200814d8 <Fat_FileSeek+0xf0>
    pVol = (VOLUME_INFO *)f->Fat;        
2008142c:	e0bffb17 	ldw	r2,-20(fp)
20081430:	10804f17 	ldw	r2,316(r2)
20081434:	e0bffc15 	stw	r2,-16(fp)
    
    if (!f->IsOpened)
20081438:	e0bffb17 	ldw	r2,-20(fp)
2008143c:	10800017 	ldw	r2,0(r2)
20081440:	1000021e 	bne	r2,zero,2008144c <Fat_FileSeek+0x64>
        return FALSE;
20081444:	0005883a 	mov	r2,zero
20081448:	00002306 	br	200814d8 <Fat_FileSeek+0xf0>
        
    switch(SeekPos){
2008144c:	e0bffe17 	ldw	r2,-8(fp)
20081450:	10c00060 	cmpeqi	r3,r2,1
20081454:	1800081e 	bne	r3,zero,20081478 <Fat_FileSeek+0x90>
20081458:	0080032e 	bgeu	zero,r2,20081468 <Fat_FileSeek+0x80>
2008145c:	108000a0 	cmpeqi	r2,r2,2
20081460:	10000c1e 	bne	r2,zero,20081494 <Fat_FileSeek+0xac>
20081464:	00001206 	br	200814b0 <Fat_FileSeek+0xc8>
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
20081468:	e0ffff17 	ldw	r3,-4(fp)
2008146c:	e0bffb17 	ldw	r2,-20(fp)
20081470:	10c00215 	stw	r3,8(r2)
            break;
20081474:	00001006 	br	200814b8 <Fat_FileSeek+0xd0>
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
20081478:	e0bffb17 	ldw	r2,-20(fp)
2008147c:	10c00217 	ldw	r3,8(r2)
20081480:	e0bfff17 	ldw	r2,-4(fp)
20081484:	1887883a 	add	r3,r3,r2
20081488:	e0bffb17 	ldw	r2,-20(fp)
2008148c:	10c00215 	stw	r3,8(r2)
            break;
20081490:	00000906 	br	200814b8 <Fat_FileSeek+0xd0>
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20081494:	e0bffb17 	ldw	r2,-20(fp)
20081498:	10c04e17 	ldw	r3,312(r2)
2008149c:	e0bfff17 	ldw	r2,-4(fp)
200814a0:	1887883a 	add	r3,r3,r2
200814a4:	e0bffb17 	ldw	r2,-20(fp)
200814a8:	10c00215 	stw	r3,8(r2)
            break;
200814ac:	00000206 	br	200814b8 <Fat_FileSeek+0xd0>
        default:
            bSuccess = FALSE;
200814b0:	e03ffa15 	stw	zero,-24(fp)
            break;    
200814b4:	0001883a 	nop
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
200814b8:	e0bffb17 	ldw	r2,-20(fp)
200814bc:	10804d8b 	ldhu	r2,310(r2)
200814c0:	10ffffcc 	andi	r3,r2,65535
200814c4:	e0bffb17 	ldw	r2,-20(fp)
200814c8:	10c00315 	stw	r3,12(r2)
    f->ClusterSeq = 0;
200814cc:	e0bffb17 	ldw	r2,-20(fp)
200814d0:	10000415 	stw	zero,16(r2)
    
    return bSuccess;
200814d4:	e0bffa17 	ldw	r2,-24(fp)
    
}
200814d8:	e037883a 	mov	sp,fp
200814dc:	df000017 	ldw	fp,0(sp)
200814e0:	dec00104 	addi	sp,sp,4
200814e4:	f800283a 	ret

200814e8 <Fat_FileClose>:

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
200814e8:	defffd04 	addi	sp,sp,-12
200814ec:	df000215 	stw	fp,8(sp)
200814f0:	df000204 	addi	fp,sp,8
200814f4:	e13fff15 	stw	r4,-4(fp)
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
200814f8:	e0bfff17 	ldw	r2,-4(fp)
200814fc:	e0bffe15 	stw	r2,-8(fp)
    if (!f)
20081500:	e0bffe17 	ldw	r2,-8(fp)
20081504:	1000011e 	bne	r2,zero,2008150c <Fat_FileClose+0x24>
        return;
20081508:	0001883a 	nop
        
    //free(f);
}
2008150c:	e037883a 	mov	sp,fp
20081510:	df000017 	ldw	fp,0(sp)
20081514:	dec00104 	addi	sp,sp,4
20081518:	f800283a 	ret

2008151c <Fat_SpeedTest>:



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
2008151c:	deff7304 	addi	sp,sp,-564
20081520:	dfc08c15 	stw	ra,560(sp)
20081524:	df008b15 	stw	fp,556(sp)
20081528:	dc008a15 	stw	r16,552(sp)
2008152c:	df008b04 	addi	fp,sp,556
20081530:	e13ffd15 	stw	r4,-12(fp)
20081534:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = TRUE;
20081538:	00800044 	movi	r2,1
2008153c:	e0bf7515 	stw	r2,-556(fp)
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
20081540:	e03f7615 	stw	zero,-552(fp)
    int nSecter = 0;
20081544:	e03f7715 	stw	zero,-548(fp)
    float fMegaBytePerSec = 0;
20081548:	e03f7815 	stw	zero,-544(fp)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
2008154c:	e0bffd17 	ldw	r2,-12(fp)
20081550:	e0bf7915 	stw	r2,-540(fp)
    if (!pVol)
20081554:	e0bf7917 	ldw	r2,-540(fp)
20081558:	1000021e 	bne	r2,zero,20081564 <Fat_SpeedTest+0x48>
        return 0;
2008155c:	0005883a 	mov	r2,zero
20081560:	00006b06 	br	20081710 <Fat_SpeedTest+0x1f4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20081564:	00800034 	movhi	r2,0
20081568:	1088fd04 	addi	r2,r2,9204
2008156c:	10800017 	ldw	r2,0(r2)
    time_start = alt_nticks();
20081570:	e0bf7a15 	stw	r2,-536(fp)
20081574:	00800034 	movhi	r2,0
20081578:	1088fd04 	addi	r2,r2,9204
2008157c:	14000017 	ldw	r16,0(r2)
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20081580:	e0bffe17 	ldw	r2,-8(fp)
20081584:	10c0fa24 	muli	r3,r2,1000
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20081588:	00800034 	movhi	r2,0
2008158c:	1088fc04 	addi	r2,r2,9200
20081590:	10800017 	ldw	r2,0(r2)
20081594:	1809883a 	mov	r4,r3
20081598:	100b883a 	mov	r5,r2
2008159c:	00866700 	call	20086670 <__udivsi3>
200815a0:	8085883a 	add	r2,r16,r2
200815a4:	e0bf7b15 	stw	r2,-532(fp)
    while(alt_nticks() < time_finish && bSuccess){
200815a8:	00000f06 	br	200815e8 <Fat_SpeedTest+0xcc>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
200815ac:	e0bf7917 	ldw	r2,-540(fp)
200815b0:	10800117 	ldw	r2,4(r2)
200815b4:	e0ff7917 	ldw	r3,-540(fp)
200815b8:	19000017 	ldw	r4,0(r3)
200815bc:	e17f7717 	ldw	r5,-548(fp)
200815c0:	e0ff7d04 	addi	r3,fp,-524
200815c4:	180d883a 	mov	r6,r3
200815c8:	103ee83a 	callr	r2
200815cc:	e0bf7515 	stw	r2,-556(fp)
        nSecter++;
200815d0:	e0bf7717 	ldw	r2,-548(fp)
200815d4:	10800044 	addi	r2,r2,1
200815d8:	e0bf7715 	stw	r2,-548(fp)
        TotalReadBytes += sizeof(szBlock);
200815dc:	e0bf7617 	ldw	r2,-552(fp)
200815e0:	10808004 	addi	r2,r2,512
200815e4:	e0bf7615 	stw	r2,-552(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
200815e8:	00800034 	movhi	r2,0
200815ec:	1088fd04 	addi	r2,r2,9204
200815f0:	10c00017 	ldw	r3,0(r2)
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
200815f4:	e0bf7b17 	ldw	r2,-532(fp)
200815f8:	1880022e 	bgeu	r3,r2,20081604 <Fat_SpeedTest+0xe8>
200815fc:	e0bf7517 	ldw	r2,-556(fp)
20081600:	103fea1e 	bne	r2,zero,200815ac <__flash_rwdata_start+0xfffe5428>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
20081604:	e0bf7517 	ldw	r2,-556(fp)
20081608:	10003726 	beq	r2,zero,200816e8 <Fat_SpeedTest+0x1cc>
2008160c:	00800034 	movhi	r2,0
20081610:	1088fd04 	addi	r2,r2,9204
20081614:	10c00017 	ldw	r3,0(r2)
        time_elapsed = alt_nticks() - time_start;
20081618:	e0bf7a17 	ldw	r2,-536(fp)
2008161c:	1885c83a 	sub	r2,r3,r2
20081620:	e0bf7c15 	stw	r2,-528(fp)
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
20081624:	e13f7617 	ldw	r4,-552(fp)
20081628:	0086ef40 	call	20086ef4 <__floatunsisf>
2008162c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20081630:	00800034 	movhi	r2,0
20081634:	1088fc04 	addi	r2,r2,9200
20081638:	10800017 	ldw	r2,0(r2)
2008163c:	1009883a 	mov	r4,r2
20081640:	0086ef40 	call	20086ef4 <__floatunsisf>
20081644:	1007883a 	mov	r3,r2
20081648:	8009883a 	mov	r4,r16
2008164c:	180b883a 	mov	r5,r3
20081650:	0086ad00 	call	20086ad0 <__mulsf3>
20081654:	1007883a 	mov	r3,r2
20081658:	1821883a 	mov	r16,r3
2008165c:	e13f7c17 	ldw	r4,-528(fp)
20081660:	0086ef40 	call	20086ef4 <__floatunsisf>
20081664:	1007883a 	mov	r3,r2
20081668:	8009883a 	mov	r4,r16
2008166c:	180b883a 	mov	r5,r3
20081670:	00866800 	call	20086680 <__divsf3>
20081674:	1007883a 	mov	r3,r2
20081678:	1805883a 	mov	r2,r3
2008167c:	1009883a 	mov	r4,r2
20081680:	0088c380 	call	20088c38 <__extendsfdf2>
20081684:	100b883a 	mov	r5,r2
20081688:	180d883a 	mov	r6,r3
2008168c:	2809883a 	mov	r4,r5
20081690:	300b883a 	mov	r5,r6
20081694:	000d883a 	mov	r6,zero
20081698:	01d02434 	movhi	r7,16528
2008169c:	00878a00 	call	200878a0 <__divdf3>
200816a0:	1009883a 	mov	r4,r2
200816a4:	180b883a 	mov	r5,r3
200816a8:	2005883a 	mov	r2,r4
200816ac:	2807883a 	mov	r3,r5
200816b0:	1009883a 	mov	r4,r2
200816b4:	180b883a 	mov	r5,r3
200816b8:	000d883a 	mov	r6,zero
200816bc:	01d02434 	movhi	r7,16528
200816c0:	00878a00 	call	200878a0 <__divdf3>
200816c4:	1009883a 	mov	r4,r2
200816c8:	180b883a 	mov	r5,r3
200816cc:	2005883a 	mov	r2,r4
200816d0:	2807883a 	mov	r3,r5
200816d4:	1009883a 	mov	r4,r2
200816d8:	180b883a 	mov	r5,r3
200816dc:	0088d480 	call	20088d48 <__truncdfsf2>
200816e0:	1007883a 	mov	r3,r2
200816e4:	e0ff7815 	stw	r3,-544(fp)
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
200816e8:	e13f7817 	ldw	r4,-544(fp)
200816ec:	0088c380 	call	20088c38 <__extendsfdf2>
200816f0:	100d883a 	mov	r6,r2
200816f4:	180f883a 	mov	r7,r3
200816f8:	01000034 	movhi	r4,0
200816fc:	21000004 	addi	r4,r4,0
20081700:	300b883a 	mov	r5,r6
20081704:	380d883a 	mov	r6,r7
20081708:	0089be80 	call	20089be8 <printf>
    return fMegaBytePerSec;
2008170c:	e0bf7817 	ldw	r2,-544(fp)
20081710:	1007883a 	mov	r3,r2
    
   
}
20081714:	1805883a 	mov	r2,r3
20081718:	e6ffff04 	addi	sp,fp,-4
2008171c:	dfc00217 	ldw	ra,8(sp)
20081720:	df000117 	ldw	fp,4(sp)
20081724:	dc000017 	ldw	r16,0(sp)
20081728:	dec00304 	addi	sp,sp,12
2008172c:	f800283a 	ret

20081730 <fat16ClusterType>:

//extern VOLUME_INFO gVolumeInfo;

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
20081730:	defffd04 	addi	sp,sp,-12
20081734:	df000215 	stw	fp,8(sp)
20081738:	df000204 	addi	fp,sp,8
2008173c:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20081740:	e0bfff17 	ldw	r2,-4(fp)
20081744:	10bfffcc 	andi	r2,r2,65535
20081748:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFF0)
2008174c:	e0bfff17 	ldw	r2,-4(fp)
20081750:	10000626 	beq	r2,zero,2008176c <fat16ClusterType+0x3c>
20081754:	e0bfff17 	ldw	r2,-4(fp)
20081758:	10bffc28 	cmpgeui	r2,r2,65520
2008175c:	1000031e 	bne	r2,zero,2008176c <fat16ClusterType+0x3c>
        Type = CLUSTER_NEXT_INFILE;
20081760:	00800104 	movi	r2,4
20081764:	e0bffe15 	stw	r2,-8(fp)
20081768:	00001806 	br	200817cc <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
2008176c:	e0bfff17 	ldw	r2,-4(fp)
20081770:	10bffe30 	cmpltui	r2,r2,65528
20081774:	1000031e 	bne	r2,zero,20081784 <fat16ClusterType+0x54>
        Type = CLUSTER_LAST_INFILE;
20081778:	008000c4 	movi	r2,3
2008177c:	e0bffe15 	stw	r2,-8(fp)
20081780:	00001206 	br	200817cc <fat16ClusterType+0x9c>
    else if (Fat == (alt_u16)0x00)
20081784:	e0bfff17 	ldw	r2,-4(fp)
20081788:	1000021e 	bne	r2,zero,20081794 <fat16ClusterType+0x64>
        Type = CLUSTER_UNUSED;
2008178c:	e03ffe15 	stw	zero,-8(fp)
20081790:	00000e06 	br	200817cc <fat16ClusterType+0x9c>
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20081794:	e0bfff17 	ldw	r2,-4(fp)
20081798:	10bffc30 	cmpltui	r2,r2,65520
2008179c:	1000061e 	bne	r2,zero,200817b8 <fat16ClusterType+0x88>
200817a0:	e0bfff17 	ldw	r2,-4(fp)
200817a4:	10bffde8 	cmpgeui	r2,r2,65527
200817a8:	1000031e 	bne	r2,zero,200817b8 <fat16ClusterType+0x88>
        Type = CLUSTER_RESERVED;
200817ac:	00800044 	movi	r2,1
200817b0:	e0bffe15 	stw	r2,-8(fp)
200817b4:	00000506 	br	200817cc <fat16ClusterType+0x9c>
    else if (Fat == 0xFFF7)
200817b8:	e0ffff17 	ldw	r3,-4(fp)
200817bc:	00bffdd4 	movui	r2,65527
200817c0:	1880021e 	bne	r3,r2,200817cc <fat16ClusterType+0x9c>
        Type = CLUSTER_BAD;
200817c4:	00800084 	movi	r2,2
200817c8:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
200817cc:	e0bffe17 	ldw	r2,-8(fp)
         
}
200817d0:	e037883a 	mov	sp,fp
200817d4:	df000017 	ldw	fp,0(sp)
200817d8:	dec00104 	addi	sp,sp,4
200817dc:	f800283a 	ret

200817e0 <fat32ClusterType>:

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
200817e0:	defffd04 	addi	sp,sp,-12
200817e4:	df000215 	stw	fp,8(sp)
200817e8:	df000204 	addi	fp,sp,8
200817ec:	e13fff15 	stw	r4,-4(fp)
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
200817f0:	e0ffff17 	ldw	r3,-4(fp)
200817f4:	00840034 	movhi	r2,4096
200817f8:	10bfffc4 	addi	r2,r2,-1
200817fc:	1884703a 	and	r2,r3,r2
20081800:	e0bfff15 	stw	r2,-4(fp)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20081804:	e0bfff17 	ldw	r2,-4(fp)
20081808:	10000726 	beq	r2,zero,20081828 <fat32ClusterType+0x48>
2008180c:	e0ffff17 	ldw	r3,-4(fp)
20081810:	00840034 	movhi	r2,4096
20081814:	10bffbc4 	addi	r2,r2,-17
20081818:	10c00336 	bltu	r2,r3,20081828 <fat32ClusterType+0x48>
        Type = CLUSTER_NEXT_INFILE;
2008181c:	00800104 	movi	r2,4
20081820:	e0bffe15 	stw	r2,-8(fp)
20081824:	00001c06 	br	20081898 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20081828:	e0ffff17 	ldw	r3,-4(fp)
2008182c:	00840034 	movhi	r2,4096
20081830:	10bffdc4 	addi	r2,r2,-9
20081834:	10c0032e 	bgeu	r2,r3,20081844 <fat32ClusterType+0x64>
        Type = CLUSTER_LAST_INFILE;
20081838:	008000c4 	movi	r2,3
2008183c:	e0bffe15 	stw	r2,-8(fp)
20081840:	00001506 	br	20081898 <fat32ClusterType+0xb8>
    else if (Fat == (alt_u32)0x00)
20081844:	e0bfff17 	ldw	r2,-4(fp)
20081848:	1000021e 	bne	r2,zero,20081854 <fat32ClusterType+0x74>
        Type = CLUSTER_UNUSED;
2008184c:	e03ffe15 	stw	zero,-8(fp)
20081850:	00001106 	br	20081898 <fat32ClusterType+0xb8>
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20081854:	e0ffff17 	ldw	r3,-4(fp)
20081858:	00840034 	movhi	r2,4096
2008185c:	10bffbc4 	addi	r2,r2,-17
20081860:	10c0072e 	bgeu	r2,r3,20081880 <fat32ClusterType+0xa0>
20081864:	e0ffff17 	ldw	r3,-4(fp)
20081868:	00840034 	movhi	r2,4096
2008186c:	10bffd84 	addi	r2,r2,-10
20081870:	10c00336 	bltu	r2,r3,20081880 <fat32ClusterType+0xa0>
        Type = CLUSTER_RESERVED;
20081874:	00800044 	movi	r2,1
20081878:	e0bffe15 	stw	r2,-8(fp)
2008187c:	00000606 	br	20081898 <fat32ClusterType+0xb8>
    else if (Fat == 0xFFFFFF7)
20081880:	e0ffff17 	ldw	r3,-4(fp)
20081884:	00840034 	movhi	r2,4096
20081888:	10bffdc4 	addi	r2,r2,-9
2008188c:	1880021e 	bne	r3,r2,20081898 <fat32ClusterType+0xb8>
        Type = CLUSTER_BAD;
20081890:	00800084 	movi	r2,2
20081894:	e0bffe15 	stw	r2,-8(fp)
        
    return Type;        
20081898:	e0bffe17 	ldw	r2,-8(fp)
         
}
2008189c:	e037883a 	mov	sp,fp
200818a0:	df000017 	ldw	fp,0(sp)
200818a4:	dec00104 	addi	sp,sp,4
200818a8:	f800283a 	ret

200818ac <fatNextCluster>:

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
200818ac:	defff604 	addi	sp,sp,-40
200818b0:	dfc00915 	stw	ra,36(sp)
200818b4:	df000815 	stw	fp,32(sp)
200818b8:	dc000715 	stw	r16,28(sp)
200818bc:	df000804 	addi	fp,sp,32
200818c0:	e13ffd15 	stw	r4,-12(fp)
200818c4:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
200818c8:	e0bffd17 	ldw	r2,-12(fp)
200818cc:	10800417 	ldw	r2,16(r2)
200818d0:	108002d8 	cmpnei	r2,r2,11
200818d4:	1000021e 	bne	r2,zero,200818e0 <fatNextCluster+0x34>
200818d8:	00800104 	movi	r2,4
200818dc:	00000106 	br	200818e4 <fatNextCluster+0x38>
200818e0:	00800084 	movi	r2,2
200818e4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
200818e8:	e0bffd17 	ldw	r2,-12(fp)
200818ec:	10c00717 	ldw	r3,28(r2)
200818f0:	e0bffa17 	ldw	r2,-24(fp)
200818f4:	1809883a 	mov	r4,r3
200818f8:	100b883a 	mov	r5,r2
200818fc:	00866700 	call	20086670 <__udivsi3>
20081900:	e0bffb15 	stw	r2,-20(fp)
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20081904:	e0bffd17 	ldw	r2,-12(fp)
20081908:	14000e17 	ldw	r16,56(r2)
2008190c:	e0fffa17 	ldw	r3,-24(fp)
20081910:	e0bffe17 	ldw	r2,-8(fp)
20081914:	1887383a 	mul	r3,r3,r2
20081918:	e0bffd17 	ldw	r2,-12(fp)
2008191c:	10800717 	ldw	r2,28(r2)
20081920:	1809883a 	mov	r4,r3
20081924:	100b883a 	mov	r5,r2
20081928:	00866700 	call	20086670 <__udivsi3>
2008192c:	8085883a 	add	r2,r16,r2
20081930:	e0bffc15 	stw	r2,-16(fp)
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
20081934:	e13ffd17 	ldw	r4,-12(fp)
20081938:	e17ffc17 	ldw	r5,-16(fp)
2008193c:	00821980 	call	20082198 <fatReadSecter>
20081940:	10002d26 	beq	r2,zero,200819f8 <fatNextCluster+0x14c>
        if (pVol->Partition_Type == PARTITION_FAT32){
20081944:	e0bffd17 	ldw	r2,-12(fp)
20081948:	10800417 	ldw	r2,16(r2)
2008194c:	108002d8 	cmpnei	r2,r2,11
20081950:	1000111e 	bne	r2,zero,20081998 <fatNextCluster+0xec>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20081954:	e0bffb17 	ldw	r2,-20(fp)
20081958:	e0fffe17 	ldw	r3,-8(fp)
2008195c:	1809883a 	mov	r4,r3
20081960:	100b883a 	mov	r5,r2
20081964:	00866780 	call	20086678 <__umodsi3>
20081968:	1007883a 	mov	r3,r2
2008196c:	e0bffa17 	ldw	r2,-24(fp)
20081970:	1885383a 	mul	r2,r3,r2
20081974:	10801104 	addi	r2,r2,68
20081978:	e0fffd17 	ldw	r3,-12(fp)
2008197c:	1885883a 	add	r2,r3,r2
20081980:	10800017 	ldw	r2,0(r2)
20081984:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat32ClusterType(NextCluster);
20081988:	e13ff917 	ldw	r4,-28(fp)
2008198c:	00817e00 	call	200817e0 <fat32ClusterType>
20081990:	e0bff815 	stw	r2,-32(fp)
20081994:	00001106 	br	200819dc <fatNextCluster+0x130>
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20081998:	e0bffb17 	ldw	r2,-20(fp)
2008199c:	e0fffe17 	ldw	r3,-8(fp)
200819a0:	1809883a 	mov	r4,r3
200819a4:	100b883a 	mov	r5,r2
200819a8:	00866780 	call	20086678 <__umodsi3>
200819ac:	1007883a 	mov	r3,r2
200819b0:	e0bffa17 	ldw	r2,-24(fp)
200819b4:	1885383a 	mul	r2,r3,r2
200819b8:	10801104 	addi	r2,r2,68
200819bc:	e0fffd17 	ldw	r3,-12(fp)
200819c0:	1885883a 	add	r2,r3,r2
200819c4:	1080000b 	ldhu	r2,0(r2)
200819c8:	10bfffcc 	andi	r2,r2,65535
200819cc:	e0bff915 	stw	r2,-28(fp)
            ClusterType = fat16ClusterType(NextCluster);
200819d0:	e13ff917 	ldw	r4,-28(fp)
200819d4:	00817300 	call	20081730 <fat16ClusterType>
200819d8:	e0bff815 	stw	r2,-32(fp)
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
200819dc:	e0bff817 	ldw	r2,-32(fp)
200819e0:	10800120 	cmpeqi	r2,r2,4
200819e4:	1000041e 	bne	r2,zero,200819f8 <fatNextCluster+0x14c>
200819e8:	e0bff817 	ldw	r2,-32(fp)
200819ec:	108000e0 	cmpeqi	r2,r2,3
200819f0:	1000011e 	bne	r2,zero,200819f8 <fatNextCluster+0x14c>
            NextCluster = 0;  // invalid cluster
200819f4:	e03ff915 	stw	zero,-28(fp)
    }
    if(NextCluster > 60607)
200819f8:	e0bff917 	ldw	r2,-28(fp)
200819fc:	10bb3030 	cmpltui	r2,r2,60608
20081a00:	1000031e 	bne	r2,zero,20081a10 <fatNextCluster+0x164>
    	printf("Error getting next cluster");
20081a04:	01000034 	movhi	r4,0
20081a08:	21000704 	addi	r4,r4,28
20081a0c:	0089be80 	call	20089be8 <printf>
    return NextCluster;
20081a10:	e0bff917 	ldw	r2,-28(fp)
}
20081a14:	e6ffff04 	addi	sp,fp,-4
20081a18:	dfc00217 	ldw	ra,8(sp)
20081a1c:	df000117 	ldw	fp,4(sp)
20081a20:	dc000017 	ldw	r16,0(sp)
20081a24:	dec00304 	addi	sp,sp,12
20081a28:	f800283a 	ret

20081a2c <fatFindUnusedCluster>:

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20081a2c:	defff304 	addi	sp,sp,-52
20081a30:	dfc00c15 	stw	ra,48(sp)
20081a34:	df000b15 	stw	fp,44(sp)
20081a38:	dc000a15 	stw	r16,40(sp)
20081a3c:	df000b04 	addi	fp,sp,44
20081a40:	e13ffe15 	stw	r4,-8(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
20081a44:	00bfffc4 	movi	r2,-1
20081a48:	e0bff615 	stw	r2,-40(fp)
20081a4c:	00800084 	movi	r2,2
20081a50:	e0bff715 	stw	r2,-36(fp)
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20081a54:	e0bffe17 	ldw	r2,-8(fp)
20081a58:	10800417 	ldw	r2,16(r2)
20081a5c:	108002d8 	cmpnei	r2,r2,11
20081a60:	1000021e 	bne	r2,zero,20081a6c <fatFindUnusedCluster+0x40>
20081a64:	00800104 	movi	r2,4
20081a68:	00000106 	br	20081a70 <fatFindUnusedCluster+0x44>
20081a6c:	00800084 	movi	r2,2
20081a70:	e0bff915 	stw	r2,-28(fp)
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20081a74:	e0bffe17 	ldw	r2,-8(fp)
20081a78:	10c00717 	ldw	r3,28(r2)
20081a7c:	e0bff917 	ldw	r2,-28(fp)
20081a80:	1809883a 	mov	r4,r3
20081a84:	100b883a 	mov	r5,r2
20081a88:	00866700 	call	20086670 <__udivsi3>
20081a8c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 Secter;
    bool bDone = FALSE;
20081a90:	e03ff815 	stw	zero,-32(fp)

    while(!bDone){     
20081a94:	00003a06 	br	20081b80 <fatFindUnusedCluster+0x154>
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20081a98:	e0bffe17 	ldw	r2,-8(fp)
20081a9c:	14000e17 	ldw	r16,56(r2)
20081aa0:	e0fff917 	ldw	r3,-28(fp)
20081aa4:	e0bff717 	ldw	r2,-36(fp)
20081aa8:	1887383a 	mul	r3,r3,r2
20081aac:	e0bffe17 	ldw	r2,-8(fp)
20081ab0:	10800717 	ldw	r2,28(r2)
20081ab4:	1809883a 	mov	r4,r3
20081ab8:	100b883a 	mov	r5,r2
20081abc:	00866700 	call	20086670 <__udivsi3>
20081ac0:	8085883a 	add	r2,r16,r2
20081ac4:	e0bffb15 	stw	r2,-20(fp)
        if (fatReadSecter(pVol, Secter)){
20081ac8:	e13ffe17 	ldw	r4,-8(fp)
20081acc:	e17ffb17 	ldw	r5,-20(fp)
20081ad0:	00821980 	call	20082198 <fatReadSecter>
20081ad4:	10002526 	beq	r2,zero,20081b6c <fatFindUnusedCluster+0x140>
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
20081ad8:	e0bffa17 	ldw	r2,-24(fp)
20081adc:	e0fff717 	ldw	r3,-36(fp)
20081ae0:	1809883a 	mov	r4,r3
20081ae4:	100b883a 	mov	r5,r2
20081ae8:	00866780 	call	20086678 <__umodsi3>
20081aec:	1007883a 	mov	r3,r2
20081af0:	e0bff917 	ldw	r2,-28(fp)
20081af4:	1885383a 	mul	r2,r3,r2
20081af8:	10801104 	addi	r2,r2,68
20081afc:	e0fffe17 	ldw	r3,-8(fp)
20081b00:	1885883a 	add	r2,r3,r2
20081b04:	e0bffc15 	stw	r2,-16(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20081b08:	e0bffe17 	ldw	r2,-8(fp)
20081b0c:	10800417 	ldw	r2,16(r2)
20081b10:	108002d8 	cmpnei	r2,r2,11
20081b14:	1000071e 	bne	r2,zero,20081b34 <fatFindUnusedCluster+0x108>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
20081b18:	e0bffc17 	ldw	r2,-16(fp)
20081b1c:	10800017 	ldw	r2,0(r2)
20081b20:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20081b24:	e13ffd17 	ldw	r4,-12(fp)
20081b28:	00817e00 	call	200817e0 <fat32ClusterType>
20081b2c:	e0bff515 	stw	r2,-44(fp)
20081b30:	00000706 	br	20081b50 <fatFindUnusedCluster+0x124>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
20081b34:	e0bffc17 	ldw	r2,-16(fp)
20081b38:	1080000b 	ldhu	r2,0(r2)
20081b3c:	10bfffcc 	andi	r2,r2,65535
20081b40:	e0bffd15 	stw	r2,-12(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20081b44:	e13ffd17 	ldw	r4,-12(fp)
20081b48:	00817300 	call	20081730 <fat16ClusterType>
20081b4c:	e0bff515 	stw	r2,-44(fp)
            }    
            if (ClusterType == CLUSTER_UNUSED){
20081b50:	e0bff517 	ldw	r2,-44(fp)
20081b54:	1000071e 	bne	r2,zero,20081b74 <fatFindUnusedCluster+0x148>
                UnusedCluster = ThisCluster;  // invalid cluster
20081b58:	e0bff717 	ldw	r2,-36(fp)
20081b5c:	e0bff615 	stw	r2,-40(fp)
                bDone = TRUE;
20081b60:	00800044 	movi	r2,1
20081b64:	e0bff815 	stw	r2,-32(fp)
20081b68:	00000206 	br	20081b74 <fatFindUnusedCluster+0x148>
            }    
        }else{
            bDone = TRUE;
20081b6c:	00800044 	movi	r2,1
20081b70:	e0bff815 	stw	r2,-32(fp)
        }     
        ThisCluster++;           
20081b74:	e0bff717 	ldw	r2,-36(fp)
20081b78:	10800044 	addi	r2,r2,1
20081b7c:	e0bff715 	stw	r2,-36(fp)
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
20081b80:	e0bff817 	ldw	r2,-32(fp)
20081b84:	103fc426 	beq	r2,zero,20081a98 <__flash_rwdata_start+0xfffe5914>
            bDone = TRUE;
        }     
        ThisCluster++;           
    }                
    
    return UnusedCluster;
20081b88:	e0bff617 	ldw	r2,-40(fp)

}
20081b8c:	e6ffff04 	addi	sp,fp,-4
20081b90:	dfc00217 	ldw	ra,8(sp)
20081b94:	df000117 	ldw	fp,4(sp)
20081b98:	dc000017 	ldw	r16,0(sp)
20081b9c:	dec00304 	addi	sp,sp,12
20081ba0:	f800283a 	ret

20081ba4 <fatDelClusterList>:


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
20081ba4:	defff204 	addi	sp,sp,-56
20081ba8:	dfc00d15 	stw	ra,52(sp)
20081bac:	df000c15 	stw	fp,48(sp)
20081bb0:	dc000b15 	stw	r16,44(sp)
20081bb4:	df000c04 	addi	fp,sp,48
20081bb8:	e13ffd15 	stw	r4,-12(fp)
20081bbc:	e17ffe15 	stw	r5,-8(fp)
    CLUSTER_TYPE ClusterType;
    bool bSuccess = TRUE;
20081bc0:	00800044 	movi	r2,1
20081bc4:	e0bff515 	stw	r2,-44(fp)
    bool bDone = FALSE;
20081bc8:	e03ff615 	stw	zero,-40(fp)
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20081bcc:	e0bffd17 	ldw	r2,-12(fp)
20081bd0:	10800417 	ldw	r2,16(r2)
20081bd4:	108002d8 	cmpnei	r2,r2,11
20081bd8:	1000021e 	bne	r2,zero,20081be4 <fatDelClusterList+0x40>
20081bdc:	00800104 	movi	r2,4
20081be0:	00000106 	br	20081be8 <fatDelClusterList+0x44>
20081be4:	00800084 	movi	r2,2
20081be8:	e0bff715 	stw	r2,-36(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20081bec:	e0bffd17 	ldw	r2,-12(fp)
20081bf0:	10c00717 	ldw	r3,28(r2)
20081bf4:	e0bff717 	ldw	r2,-36(fp)
20081bf8:	1809883a 	mov	r4,r3
20081bfc:	100b883a 	mov	r5,r2
20081c00:	00866700 	call	20086670 <__udivsi3>
20081c04:	e0bff815 	stw	r2,-32(fp)
     
    ClusterIndex = StartCluster;
20081c08:	e0bffe17 	ldw	r2,-8(fp)
20081c0c:	e0bff915 	stw	r2,-28(fp)
    while(bSuccess && !bDone){
20081c10:	00005306 	br	20081d60 <fatDelClusterList+0x1bc>
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20081c14:	e0bffd17 	ldw	r2,-12(fp)
20081c18:	14000e17 	ldw	r16,56(r2)
20081c1c:	e0fff717 	ldw	r3,-36(fp)
20081c20:	e0bff917 	ldw	r2,-28(fp)
20081c24:	1887383a 	mul	r3,r3,r2
20081c28:	e0bffd17 	ldw	r2,-12(fp)
20081c2c:	10800717 	ldw	r2,28(r2)
20081c30:	1809883a 	mov	r4,r3
20081c34:	100b883a 	mov	r5,r2
20081c38:	00866700 	call	20086670 <__udivsi3>
20081c3c:	8085883a 	add	r2,r16,r2
20081c40:	e0bffa15 	stw	r2,-24(fp)
        bSuccess = fatReadSecter(pVol, Secter);
20081c44:	e13ffd17 	ldw	r4,-12(fp)
20081c48:	e17ffa17 	ldw	r5,-24(fp)
20081c4c:	00821980 	call	20082198 <fatReadSecter>
20081c50:	e0bff515 	stw	r2,-44(fp)
        if (bSuccess){
20081c54:	e0bff517 	ldw	r2,-44(fp)
20081c58:	10004126 	beq	r2,zero,20081d60 <fatDelClusterList+0x1bc>
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20081c5c:	e0bff817 	ldw	r2,-32(fp)
20081c60:	e0fff917 	ldw	r3,-28(fp)
20081c64:	1809883a 	mov	r4,r3
20081c68:	100b883a 	mov	r5,r2
20081c6c:	00866780 	call	20086678 <__umodsi3>
20081c70:	1007883a 	mov	r3,r2
20081c74:	e0bff717 	ldw	r2,-36(fp)
20081c78:	1885383a 	mul	r2,r3,r2
20081c7c:	10801104 	addi	r2,r2,68
20081c80:	e0fffd17 	ldw	r3,-12(fp)
20081c84:	1885883a 	add	r2,r3,r2
20081c88:	e0bffb15 	stw	r2,-20(fp)
            if (pVol->Partition_Type == PARTITION_FAT32){
20081c8c:	e0bffd17 	ldw	r2,-12(fp)
20081c90:	10800417 	ldw	r2,16(r2)
20081c94:	108002d8 	cmpnei	r2,r2,11
20081c98:	1000071e 	bne	r2,zero,20081cb8 <fatDelClusterList+0x114>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
20081c9c:	e0bffb17 	ldw	r2,-20(fp)
20081ca0:	10800017 	ldw	r2,0(r2)
20081ca4:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat32ClusterType(ClusterEntryValue);
20081ca8:	e13ffc17 	ldw	r4,-16(fp)
20081cac:	00817e00 	call	200817e0 <fat32ClusterType>
20081cb0:	e0bff415 	stw	r2,-48(fp)
20081cb4:	00000706 	br	20081cd4 <fatDelClusterList+0x130>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20081cb8:	e0bffb17 	ldw	r2,-20(fp)
20081cbc:	1080000b 	ldhu	r2,0(r2)
20081cc0:	10bfffcc 	andi	r2,r2,65535
20081cc4:	e0bffc15 	stw	r2,-16(fp)
                ClusterType = fat16ClusterType(ClusterEntryValue);
20081cc8:	e13ffc17 	ldw	r4,-16(fp)
20081ccc:	00817300 	call	20081730 <fat16ClusterType>
20081cd0:	e0bff415 	stw	r2,-48(fp)
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20081cd4:	e0bff417 	ldw	r2,-48(fp)
20081cd8:	10800120 	cmpeqi	r2,r2,4
20081cdc:	1000071e 	bne	r2,zero,20081cfc <fatDelClusterList+0x158>
20081ce0:	e0bff417 	ldw	r2,-48(fp)
20081ce4:	108000e0 	cmpeqi	r2,r2,3
20081ce8:	1000041e 	bne	r2,zero,20081cfc <fatDelClusterList+0x158>
                bDone = TRUE;
20081cec:	00800044 	movi	r2,1
20081cf0:	e0bff615 	stw	r2,-40(fp)
                bSuccess = FALSE;
20081cf4:	e03ff515 	stw	zero,-44(fp)
20081cf8:	00001906 	br	20081d60 <fatDelClusterList+0x1bc>
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20081cfc:	e0bff417 	ldw	r2,-48(fp)
20081d00:	108000d8 	cmpnei	r2,r2,3
20081d04:	1000021e 	bne	r2,zero,20081d10 <fatDelClusterList+0x16c>
                    bDone = TRUE; // the last cluster
20081d08:	00800044 	movi	r2,1
20081d0c:	e0bff615 	stw	r2,-40(fp)
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
20081d10:	e0bffd17 	ldw	r2,-12(fp)
20081d14:	10800417 	ldw	r2,16(r2)
20081d18:	108002d8 	cmpnei	r2,r2,11
20081d1c:	1000031e 	bne	r2,zero,20081d2c <fatDelClusterList+0x188>
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
20081d20:	e0bffb17 	ldw	r2,-20(fp)
20081d24:	10000015 	stw	zero,0(r2)
20081d28:	00000206 	br	20081d34 <fatDelClusterList+0x190>
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
20081d2c:	e0bffb17 	ldw	r2,-20(fp)
20081d30:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
20081d34:	e0bffd17 	ldw	r2,-12(fp)
20081d38:	10800217 	ldw	r2,8(r2)
20081d3c:	e0fffd17 	ldw	r3,-12(fp)
20081d40:	19000017 	ldw	r4,0(r3)
20081d44:	e0fffd17 	ldw	r3,-12(fp)
20081d48:	19409117 	ldw	r5,580(r3)
20081d4c:	e0fffd17 	ldw	r3,-12(fp)
20081d50:	18c01104 	addi	r3,r3,68
20081d54:	180d883a 	mov	r6,r3
20081d58:	103ee83a 	callr	r2
20081d5c:	e0bff515 	stw	r2,-44(fp)
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
20081d60:	e0bff517 	ldw	r2,-44(fp)
20081d64:	10000226 	beq	r2,zero,20081d70 <fatDelClusterList+0x1cc>
20081d68:	e0bff617 	ldw	r2,-40(fp)
20081d6c:	103fa926 	beq	r2,zero,20081c14 <__flash_rwdata_start+0xfffe5a90>
            }    
        }                
    }  // while                
    
    
    return bSuccess;
20081d70:	e0bff517 	ldw	r2,-44(fp)

}
20081d74:	e6ffff04 	addi	sp,fp,-4
20081d78:	dfc00217 	ldw	ra,8(sp)
20081d7c:	df000117 	ldw	fp,4(sp)
20081d80:	dc000017 	ldw	r16,0(sp)
20081d84:	dec00304 	addi	sp,sp,12
20081d88:	f800283a 	ret

20081d8c <fatDumpDate>:


void fatDumpDate(unsigned short Date){
20081d8c:	defffb04 	addi	sp,sp,-20
20081d90:	df000415 	stw	fp,16(sp)
20081d94:	df000404 	addi	fp,sp,16
20081d98:	2005883a 	mov	r2,r4
20081d9c:	e0bfff0d 	sth	r2,-4(fp)
    int Year, Month, Day;
    Year = ((Date >> 9) & 0x1F) + 1980;
20081da0:	e0bfff0b 	ldhu	r2,-4(fp)
20081da4:	1004d27a 	srli	r2,r2,9
20081da8:	10bfffcc 	andi	r2,r2,65535
20081dac:	108007cc 	andi	r2,r2,31
20081db0:	1081ef04 	addi	r2,r2,1980
20081db4:	e0bffc15 	stw	r2,-16(fp)
    Month = ((Date >> 5) & 0xF);
20081db8:	e0bfff0b 	ldhu	r2,-4(fp)
20081dbc:	1004d17a 	srli	r2,r2,5
20081dc0:	10bfffcc 	andi	r2,r2,65535
20081dc4:	108003cc 	andi	r2,r2,15
20081dc8:	e0bffd15 	stw	r2,-12(fp)
    Day = ((Date >> 0) & 0x1F);
20081dcc:	e0bfff0b 	ldhu	r2,-4(fp)
20081dd0:	108007cc 	andi	r2,r2,31
20081dd4:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}
20081dd8:	e037883a 	mov	sp,fp
20081ddc:	df000017 	ldw	fp,0(sp)
20081de0:	dec00104 	addi	sp,sp,4
20081de4:	f800283a 	ret

20081de8 <fatDumpTime>:

void fatDumpTime(unsigned short Date){
20081de8:	defffb04 	addi	sp,sp,-20
20081dec:	df000415 	stw	fp,16(sp)
20081df0:	df000404 	addi	fp,sp,16
20081df4:	2005883a 	mov	r2,r4
20081df8:	e0bfff0d 	sth	r2,-4(fp)
    int H,M,S;
    H = ((Date >> 9) & 0x1F);
20081dfc:	e0bfff0b 	ldhu	r2,-4(fp)
20081e00:	1004d27a 	srli	r2,r2,9
20081e04:	10bfffcc 	andi	r2,r2,65535
20081e08:	108007cc 	andi	r2,r2,31
20081e0c:	e0bffc15 	stw	r2,-16(fp)
    M = ((Date >> 5) & 0x3F);
20081e10:	e0bfff0b 	ldhu	r2,-4(fp)
20081e14:	1004d17a 	srli	r2,r2,5
20081e18:	10bfffcc 	andi	r2,r2,65535
20081e1c:	10800fcc 	andi	r2,r2,63
20081e20:	e0bffd15 	stw	r2,-12(fp)
    S = ((Date >> 0) & 0x1F)*2;
20081e24:	e0bfff0b 	ldhu	r2,-4(fp)
20081e28:	108007cc 	andi	r2,r2,31
20081e2c:	1085883a 	add	r2,r2,r2
20081e30:	e0bffe15 	stw	r2,-8(fp)
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}
20081e34:	e037883a 	mov	sp,fp
20081e38:	df000017 	ldw	fp,0(sp)
20081e3c:	dec00104 	addi	sp,sp,4
20081e40:	f800283a 	ret

20081e44 <fatIsLastDir>:

bool fatIsLastDir(FAT_DIRECTORY *pDir){
20081e44:	defffe04 	addi	sp,sp,-8
20081e48:	df000115 	stw	fp,4(sp)
20081e4c:	df000104 	addi	fp,sp,4
20081e50:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
20081e54:	e0bfff17 	ldw	r2,-4(fp)
20081e58:	10800003 	ldbu	r2,0(r2)
20081e5c:	10803fcc 	andi	r2,r2,255
20081e60:	1080201c 	xori	r2,r2,128
20081e64:	10bfe004 	addi	r2,r2,-128
20081e68:	1000021e 	bne	r2,zero,20081e74 <fatIsLastDir+0x30>
        return TRUE;
20081e6c:	00800044 	movi	r2,1
20081e70:	00000106 	br	20081e78 <fatIsLastDir+0x34>
    return FALSE;        
20081e74:	0005883a 	mov	r2,zero
}
20081e78:	e037883a 	mov	sp,fp
20081e7c:	df000017 	ldw	fp,0(sp)
20081e80:	dec00104 	addi	sp,sp,4
20081e84:	f800283a 	ret

20081e88 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
20081e88:	defff704 	addi	sp,sp,-36
20081e8c:	dfc00815 	stw	ra,32(sp)
20081e90:	df000715 	stw	fp,28(sp)
20081e94:	df000704 	addi	fp,sp,28
20081e98:	e13fff15 	stw	r4,-4(fp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20081e9c:	00800034 	movhi	r2,0
20081ea0:	10800dc4 	addi	r2,r2,55
20081ea4:	e0fffa04 	addi	r3,fp,-24
20081ea8:	100b883a 	mov	r5,r2
20081eac:	00800444 	movi	r2,17
20081eb0:	1809883a 	mov	r4,r3
20081eb4:	100d883a 	mov	r6,r2
20081eb8:	00899600 	call	20089960 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20081ebc:	e03ff915 	stw	zero,-28(fp)
20081ec0:	00001206 	br	20081f0c <fatIsValidDir+0x84>
        if (pDir->Name[0] == szTest[i]){
20081ec4:	e0bfff17 	ldw	r2,-4(fp)
20081ec8:	11000003 	ldbu	r4,0(r2)
20081ecc:	e0fffa04 	addi	r3,fp,-24
20081ed0:	e0bff917 	ldw	r2,-28(fp)
20081ed4:	1885883a 	add	r2,r3,r2
20081ed8:	10800003 	ldbu	r2,0(r2)
20081edc:	20c03fcc 	andi	r3,r4,255
20081ee0:	18c0201c 	xori	r3,r3,128
20081ee4:	18ffe004 	addi	r3,r3,-128
20081ee8:	10803fcc 	andi	r2,r2,255
20081eec:	1080201c 	xori	r2,r2,128
20081ef0:	10bfe004 	addi	r2,r2,-128
20081ef4:	1880021e 	bne	r3,r2,20081f00 <fatIsValidDir+0x78>
            return FALSE;
20081ef8:	0005883a 	mov	r2,zero
20081efc:	00000706 	br	20081f1c <fatIsValidDir+0x94>

bool fatIsValidDir(FAT_DIRECTORY *pDir){
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
20081f00:	e0bff917 	ldw	r2,-28(fp)
20081f04:	10800044 	addi	r2,r2,1
20081f08:	e0bff915 	stw	r2,-28(fp)
20081f0c:	e0bff917 	ldw	r2,-28(fp)
20081f10:	10800470 	cmpltui	r2,r2,17
20081f14:	103feb1e 	bne	r2,zero,20081ec4 <__flash_rwdata_start+0xfffe5d40>
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
        }
    }    
    return TRUE;
20081f18:	00800044 	movi	r2,1
    
}
20081f1c:	e037883a 	mov	sp,fp
20081f20:	dfc00117 	ldw	ra,4(sp)
20081f24:	df000017 	ldw	fp,0(sp)
20081f28:	dec00204 	addi	sp,sp,8
20081f2c:	f800283a 	ret

20081f30 <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
20081f30:	defffe04 	addi	sp,sp,-8
20081f34:	df000115 	stw	fp,4(sp)
20081f38:	df000104 	addi	fp,sp,4
20081f3c:	e13fff15 	stw	r4,-4(fp)
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
20081f40:	e0bfff17 	ldw	r2,-4(fp)
20081f44:	10800003 	ldbu	r2,0(r2)
20081f48:	10803fcc 	andi	r2,r2,255
20081f4c:	1080201c 	xori	r2,r2,128
20081f50:	10bfe004 	addi	r2,r2,-128
20081f54:	10bff958 	cmpnei	r2,r2,-27
20081f58:	1000021e 	bne	r2,zero,20081f64 <fatIsUnusedDir+0x34>
        return TRUE;
20081f5c:	00800044 	movi	r2,1
20081f60:	00000106 	br	20081f68 <fatIsUnusedDir+0x38>
    return FALSE; 
20081f64:	0005883a 	mov	r2,zero
}
20081f68:	e037883a 	mov	sp,fp
20081f6c:	df000017 	ldw	fp,0(sp)
20081f70:	dec00104 	addi	sp,sp,4
20081f74:	f800283a 	ret

20081f78 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
20081f78:	defff804 	addi	sp,sp,-32
20081f7c:	dfc00715 	stw	ra,28(sp)
20081f80:	df000615 	stw	fp,24(sp)
20081f84:	df000604 	addi	fp,sp,24
20081f88:	e13fff15 	stw	r4,-4(fp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20081f8c:	00800034 	movhi	r2,0
20081f90:	10801204 	addi	r2,r2,72
20081f94:	e0fffb04 	addi	r3,fp,-20
20081f98:	100b883a 	mov	r5,r2
20081f9c:	008003c4 	movi	r2,15
20081fa0:	1809883a 	mov	r4,r3
20081fa4:	100d883a 	mov	r6,r2
20081fa8:	00899600 	call	20089960 <memcpy>
    int i;
    if (pDir->Name[0] == (char)0xE5){
20081fac:	e0bfff17 	ldw	r2,-4(fp)
20081fb0:	10800003 	ldbu	r2,0(r2)
20081fb4:	10803fcc 	andi	r2,r2,255
20081fb8:	1080201c 	xori	r2,r2,128
20081fbc:	10bfe004 	addi	r2,r2,-128
20081fc0:	10bff958 	cmpnei	r2,r2,-27
20081fc4:	1000011e 	bne	r2,zero,20081fcc <fatDump+0x54>
        FAT_DEBUG(("the directory entry is free.\n"));
        return;
20081fc8:	00004c06 	br	200820fc <fatDump+0x184>
    }
    if (pDir->Name[0] == 0x00){
20081fcc:	e0bfff17 	ldw	r2,-4(fp)
20081fd0:	10800003 	ldbu	r2,0(r2)
20081fd4:	10803fcc 	andi	r2,r2,255
20081fd8:	1080201c 	xori	r2,r2,128
20081fdc:	10bfe004 	addi	r2,r2,-128
20081fe0:	1000011e 	bne	r2,zero,20081fe8 <fatDump+0x70>
        FAT_DEBUG(("the directory entry is free, and there are no allocated directory entries after tis one.\n"));
        return;
20081fe4:	00004506 	br	200820fc <fatDump+0x184>
    }
    
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
20081fe8:	e0bfff17 	ldw	r2,-4(fp)
20081fec:	10800003 	ldbu	r2,0(r2)
20081ff0:	10803fcc 	andi	r2,r2,255
20081ff4:	1080201c 	xori	r2,r2,128
20081ff8:	10bfe004 	addi	r2,r2,-128
20081ffc:	10800848 	cmpgei	r2,r2,33
20082000:	1000081e 	bne	r2,zero,20082024 <fatDump+0xac>
20082004:	e0bfff17 	ldw	r2,-4(fp)
20082008:	10800003 	ldbu	r2,0(r2)
2008200c:	10803fcc 	andi	r2,r2,255
20082010:	1080201c 	xori	r2,r2,128
20082014:	10bfe004 	addi	r2,r2,-128
20082018:	10800160 	cmpeqi	r2,r2,5
2008201c:	1000011e 	bne	r2,zero,20082024 <fatDump+0xac>
        FAT_DEBUG(("Invalid file name.\n"));
        return;
20082020:	00003606 	br	200820fc <fatDump+0x184>
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
20082024:	e03ffa15 	stw	zero,-24(fp)
20082028:	00001106 	br	20082070 <fatDump+0xf8>
        if (pDir->Name[0] == szInvalidName[i]){
2008202c:	e0bfff17 	ldw	r2,-4(fp)
20082030:	11000003 	ldbu	r4,0(r2)
20082034:	e0fffb04 	addi	r3,fp,-20
20082038:	e0bffa17 	ldw	r2,-24(fp)
2008203c:	1885883a 	add	r2,r3,r2
20082040:	10800003 	ldbu	r2,0(r2)
20082044:	20c03fcc 	andi	r3,r4,255
20082048:	18c0201c 	xori	r3,r3,128
2008204c:	18ffe004 	addi	r3,r3,-128
20082050:	10803fcc 	andi	r2,r2,255
20082054:	1080201c 	xori	r2,r2,128
20082058:	10bfe004 	addi	r2,r2,-128
2008205c:	1880011e 	bne	r3,r2,20082064 <fatDump+0xec>
            FAT_DEBUG(("Invalid file name.\n"));
            return;
20082060:	00002606 	br	200820fc <fatDump+0x184>
    if (pDir->Name[0] <= 0x20 && pDir->Name[0] != 0x05){
        FAT_DEBUG(("Invalid file name.\n"));
        return;
    }
    
    for(i=0;i<sizeof(szInvalidName)/sizeof(szInvalidName[0]);i++){
20082064:	e0bffa17 	ldw	r2,-24(fp)
20082068:	10800044 	addi	r2,r2,1
2008206c:	e0bffa15 	stw	r2,-24(fp)
20082070:	e0bffa17 	ldw	r2,-24(fp)
20082074:	108003f0 	cmpltui	r2,r2,15
20082078:	103fec1e 	bne	r2,zero,2008202c <__flash_rwdata_start+0xfffe5ea8>
        FAT_DEBUG(("  Directory\n"));
    if (pDir->Attribute & ATTR_ARCHIVE)
        FAT_DEBUG(("  Archive\n"));
    if (pDir->Attribute & ATTR_LONG_NAME)
        FAT_DEBUG(("  Long Name\n"));
    FAT_DEBUG(("CreateTime:")); fatDumpTime(pDir->CreateTime);FAT_DEBUG(("\n"));
2008207c:	e0bfff17 	ldw	r2,-4(fp)
20082080:	10c00383 	ldbu	r3,14(r2)
20082084:	108003c3 	ldbu	r2,15(r2)
20082088:	1004923a 	slli	r2,r2,8
2008208c:	10c4b03a 	or	r2,r2,r3
20082090:	10bfffcc 	andi	r2,r2,65535
20082094:	1009883a 	mov	r4,r2
20082098:	0081de80 	call	20081de8 <fatDumpTime>
    FAT_DEBUG(("CreateDate:")); fatDumpDate(pDir->LastAccessDate);FAT_DEBUG(("\n"));
2008209c:	e0bfff17 	ldw	r2,-4(fp)
200820a0:	10c00483 	ldbu	r3,18(r2)
200820a4:	108004c3 	ldbu	r2,19(r2)
200820a8:	1004923a 	slli	r2,r2,8
200820ac:	10c4b03a 	or	r2,r2,r3
200820b0:	10bfffcc 	andi	r2,r2,65535
200820b4:	1009883a 	mov	r4,r2
200820b8:	0081d8c0 	call	20081d8c <fatDumpDate>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
200820bc:	e0bfff17 	ldw	r2,-4(fp)
200820c0:	10c00583 	ldbu	r3,22(r2)
200820c4:	108005c3 	ldbu	r2,23(r2)
200820c8:	1004923a 	slli	r2,r2,8
200820cc:	10c4b03a 	or	r2,r2,r3
200820d0:	10bfffcc 	andi	r2,r2,65535
200820d4:	1009883a 	mov	r4,r2
200820d8:	0081de80 	call	20081de8 <fatDumpTime>
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
200820dc:	e0bfff17 	ldw	r2,-4(fp)
200820e0:	10c00603 	ldbu	r3,24(r2)
200820e4:	10800643 	ldbu	r2,25(r2)
200820e8:	1004923a 	slli	r2,r2,8
200820ec:	10c4b03a 	or	r2,r2,r3
200820f0:	10bfffcc 	andi	r2,r2,65535
200820f4:	1009883a 	mov	r4,r2
200820f8:	0081d8c0 	call	20081d8c <fatDumpDate>
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
200820fc:	e037883a 	mov	sp,fp
20082100:	dfc00117 	ldw	ra,4(sp)
20082104:	df000017 	ldw	fp,0(sp)
20082108:	dec00204 	addi	sp,sp,8
2008210c:	f800283a 	ret

20082110 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
20082110:	defffa04 	addi	sp,sp,-24
20082114:	df000515 	stw	fp,20(sp)
20082118:	df000504 	addi	fp,sp,20
2008211c:	e13ffe15 	stw	r4,-8(fp)
20082120:	e17fff15 	stw	r5,-4(fp)
    alt_u8 *pMSB = (pValue + nNum - 1);
20082124:	e0bfff17 	ldw	r2,-4(fp)
20082128:	10bfffc4 	addi	r2,r2,-1
2008212c:	e0fffe17 	ldw	r3,-8(fp)
20082130:	1885883a 	add	r2,r3,r2
20082134:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
20082138:	e03ffd15 	stw	zero,-12(fp)
2008213c:	00000e06 	br	20082178 <fatArray2Value+0x68>
        nValue <<= 8;
20082140:	e0bffc17 	ldw	r2,-16(fp)
20082144:	1004923a 	slli	r2,r2,8
20082148:	e0bffc15 	stw	r2,-16(fp)
        nValue |= *pMSB--;
2008214c:	e0bffb17 	ldw	r2,-20(fp)
20082150:	10ffffc4 	addi	r3,r2,-1
20082154:	e0fffb15 	stw	r3,-20(fp)
20082158:	10800003 	ldbu	r2,0(r2)
2008215c:	10803fcc 	andi	r2,r2,255
20082160:	e0fffc17 	ldw	r3,-16(fp)
20082164:	1884b03a 	or	r2,r3,r2
20082168:	e0bffc15 	stw	r2,-16(fp)

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
2008216c:	e0bffd17 	ldw	r2,-12(fp)
20082170:	10800044 	addi	r2,r2,1
20082174:	e0bffd15 	stw	r2,-12(fp)
20082178:	e0fffd17 	ldw	r3,-12(fp)
2008217c:	e0bfff17 	ldw	r2,-4(fp)
20082180:	18bfef36 	bltu	r3,r2,20082140 <__flash_rwdata_start+0xfffe5fbc>
        nValue <<= 8;
        nValue |= *pMSB--;
        
    }
    
    return nValue;
20082184:	e0bffc17 	ldw	r2,-16(fp)
}
20082188:	e037883a 	mov	sp,fp
2008218c:	df000017 	ldw	fp,0(sp)
20082190:	dec00104 	addi	sp,sp,4
20082194:	f800283a 	ret

20082198 <fatReadSecter>:

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
20082198:	defffb04 	addi	sp,sp,-20
2008219c:	dfc00415 	stw	ra,16(sp)
200821a0:	df000315 	stw	fp,12(sp)
200821a4:	df000304 	addi	fp,sp,12
200821a8:	e13ffe15 	stw	r4,-8(fp)
200821ac:	e17fff15 	stw	r5,-4(fp)
    bool bSuccess = TRUE;
200821b0:	00800044 	movi	r2,1
200821b4:	e0bffd15 	stw	r2,-12(fp)
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200821b8:	e0bffe17 	ldw	r2,-8(fp)
200821bc:	10c09117 	ldw	r3,580(r2)
200821c0:	e0bfff17 	ldw	r2,-4(fp)
200821c4:	18801226 	beq	r3,r2,20082210 <fatReadSecter+0x78>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200821c8:	e0bffe17 	ldw	r2,-8(fp)
200821cc:	10800117 	ldw	r2,4(r2)
200821d0:	e0fffe17 	ldw	r3,-8(fp)
200821d4:	19000017 	ldw	r4,0(r3)
200821d8:	e0fffe17 	ldw	r3,-8(fp)
200821dc:	18c01104 	addi	r3,r3,68
200821e0:	e17fff17 	ldw	r5,-4(fp)
200821e4:	180d883a 	mov	r6,r3
200821e8:	103ee83a 	callr	r2
200821ec:	1000051e 	bne	r2,zero,20082204 <fatReadSecter+0x6c>
            pVol->Secter_Index = -1;
200821f0:	e0bffe17 	ldw	r2,-8(fp)
200821f4:	00ffffc4 	movi	r3,-1
200821f8:	10c09115 	stw	r3,580(r2)
            bSuccess = FALSE;
200821fc:	e03ffd15 	stw	zero,-12(fp)
20082200:	00000306 	br	20082210 <fatReadSecter+0x78>
        }else{
            pVol->Secter_Index = nSecter;
20082204:	e0bffe17 	ldw	r2,-8(fp)
20082208:	e0ffff17 	ldw	r3,-4(fp)
2008220c:	10c09115 	stw	r3,580(r2)
//            pVol->ReadBlock512(pVol->DiskHandle, nSecter, temp);
//            if(memcmp(temp, pVol->Secter_Data, 512))
//            	printf("Data check failed!\n");
        }
    }
    return bSuccess;          
20082210:	e0bffd17 	ldw	r2,-12(fp)
}     
20082214:	e037883a 	mov	sp,fp
20082218:	dfc00117 	ldw	ra,4(sp)
2008221c:	df000017 	ldw	fp,0(sp)
20082220:	dec00204 	addi	sp,sp,8
20082224:	f800283a 	ret

20082228 <fatReadMultiSecter>:
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
20082228:	defff904 	addi	sp,sp,-28
2008222c:	dfc00615 	stw	ra,24(sp)
20082230:	df000515 	stw	fp,20(sp)
20082234:	df000504 	addi	fp,sp,20
20082238:	e13ffc15 	stw	r4,-16(fp)
2008223c:	e17ffd15 	stw	r5,-12(fp)
20082240:	e1bffe15 	stw	r6,-8(fp)
20082244:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess = TRUE;
20082248:	00800044 	movi	r2,1
2008224c:	e0bffb15 	stw	r2,-20(fp)

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
20082250:	e0bffc17 	ldw	r2,-16(fp)
20082254:	10800317 	ldw	r2,12(r2)
20082258:	e0fffc17 	ldw	r3,-16(fp)
2008225c:	18c00017 	ldw	r3,0(r3)
20082260:	1809883a 	mov	r4,r3
20082264:	e17ffd17 	ldw	r5,-12(fp)
20082268:	e1bffe17 	ldw	r6,-8(fp)
2008226c:	e1ffff17 	ldw	r7,-4(fp)
20082270:	103ee83a 	callr	r2
20082274:	1000011e 	bne	r2,zero,2008227c <fatReadMultiSecter+0x54>
		bSuccess = FALSE;
20082278:	e03ffb15 	stw	zero,-20(fp)
	}
    return bSuccess;
2008227c:	e0bffb17 	ldw	r2,-20(fp)
}
20082280:	e037883a 	mov	sp,fp
20082284:	dfc00117 	ldw	ra,4(sp)
20082288:	df000017 	ldw	fp,0(sp)
2008228c:	dec00204 	addi	sp,sp,8
20082290:	f800283a 	ret

20082294 <fatFindDirectory>:
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
20082294:	defff804 	addi	sp,sp,-32
20082298:	dfc00715 	stw	ra,28(sp)
2008229c:	df000615 	stw	fp,24(sp)
200822a0:	df000604 	addi	fp,sp,24
200822a4:	e13ffe15 	stw	r4,-8(fp)
200822a8:	e17fff15 	stw	r5,-4(fp)
    FAT_DIRECTORY *pDir=NULL;
200822ac:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
200822b0:	e0bfff17 	ldw	r2,-4(fp)
200822b4:	1006917a 	slli	r3,r2,5
200822b8:	e0bffe17 	ldw	r2,-8(fp)
200822bc:	10800717 	ldw	r2,28(r2)
200822c0:	1809883a 	mov	r4,r3
200822c4:	100b883a 	mov	r5,r2
200822c8:	00866700 	call	20086670 <__udivsi3>
200822cc:	e0bffb15 	stw	r2,-20(fp)
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
200822d0:	e0bffe17 	ldw	r2,-8(fp)
200822d4:	10c00f17 	ldw	r3,60(r2)
200822d8:	e0bffb17 	ldw	r2,-20(fp)
200822dc:	1885883a 	add	r2,r3,r2
200822e0:	e0bffc15 	stw	r2,-16(fp)
        // read sector
    if (fatReadSecter(pVol, nSecter)){
200822e4:	e13ffe17 	ldw	r4,-8(fp)
200822e8:	e17ffc17 	ldw	r5,-16(fp)
200822ec:	00821980 	call	20082198 <fatReadSecter>
200822f0:	10000d26 	beq	r2,zero,20082328 <fatFindDirectory+0x94>
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
200822f4:	e0bfff17 	ldw	r2,-4(fp)
200822f8:	1006917a 	slli	r3,r2,5
200822fc:	e0bffe17 	ldw	r2,-8(fp)
20082300:	10800717 	ldw	r2,28(r2)
20082304:	1809883a 	mov	r4,r3
20082308:	100b883a 	mov	r5,r2
2008230c:	00866780 	call	20086678 <__umodsi3>
20082310:	e0bffd15 	stw	r2,-12(fp)
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
20082314:	e0bffd17 	ldw	r2,-12(fp)
20082318:	10801104 	addi	r2,r2,68
2008231c:	e0fffe17 	ldw	r3,-8(fp)
20082320:	1885883a 	add	r2,r3,r2
20082324:	e0bffa15 	stw	r2,-24(fp)
    }        
        
    return pDir;        
20082328:	e0bffa17 	ldw	r2,-24(fp)
}
2008232c:	e037883a 	mov	sp,fp
20082330:	dfc00117 	ldw	ra,4(sp)
20082334:	df000017 	ldw	fp,0(sp)
20082338:	dec00204 	addi	sp,sp,8
2008233c:	f800283a 	ret

20082340 <fatFindUnusedDirectory>:

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
20082340:	defff604 	addi	sp,sp,-40
20082344:	dfc00915 	stw	ra,36(sp)
20082348:	df000815 	stw	fp,32(sp)
2008234c:	df000804 	addi	fp,sp,32
20082350:	e13fff15 	stw	r4,-4(fp)
    alt_u32 Dir = -1;
20082354:	00bfffc4 	movi	r2,-1
20082358:	e0bff815 	stw	r2,-32(fp)
    FAT_DIRECTORY *pDir=NULL;
2008235c:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
20082360:	00800084 	movi	r2,2
20082364:	e0bff915 	stw	r2,-28(fp)
    bool bDone = FALSE;
20082368:	e03ffa15 	stw	zero,-24(fp)
             
    while(!bDone){             
2008236c:	00003006 	br	20082430 <fatFindUnusedDirectory+0xf0>
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20082370:	e0bff917 	ldw	r2,-28(fp)
20082374:	1006917a 	slli	r3,r2,5
20082378:	e0bfff17 	ldw	r2,-4(fp)
2008237c:	10800717 	ldw	r2,28(r2)
20082380:	1809883a 	mov	r4,r3
20082384:	100b883a 	mov	r5,r2
20082388:	00866700 	call	20086670 <__udivsi3>
2008238c:	e0bffc15 	stw	r2,-16(fp)
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
20082390:	e0bfff17 	ldw	r2,-4(fp)
20082394:	10c00f17 	ldw	r3,60(r2)
20082398:	e0bffc17 	ldw	r2,-16(fp)
2008239c:	1885883a 	add	r2,r3,r2
200823a0:	e0bffd15 	stw	r2,-12(fp)
            // read sector
        if (fatReadSecter(pVol, nSecter)){
200823a4:	e13fff17 	ldw	r4,-4(fp)
200823a8:	e17ffd17 	ldw	r5,-12(fp)
200823ac:	00821980 	call	20082198 <fatReadSecter>
200823b0:	10001e26 	beq	r2,zero,2008242c <fatFindUnusedDirectory+0xec>
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
200823b4:	e0bff917 	ldw	r2,-28(fp)
200823b8:	1006917a 	slli	r3,r2,5
200823bc:	e0bfff17 	ldw	r2,-4(fp)
200823c0:	10800717 	ldw	r2,28(r2)
200823c4:	1809883a 	mov	r4,r3
200823c8:	100b883a 	mov	r5,r2
200823cc:	00866780 	call	20086678 <__umodsi3>
200823d0:	e0bffe15 	stw	r2,-8(fp)
            pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
200823d4:	e0bffe17 	ldw	r2,-8(fp)
200823d8:	10801104 	addi	r2,r2,68
200823dc:	e0ffff17 	ldw	r3,-4(fp)
200823e0:	1885883a 	add	r2,r3,r2
200823e4:	e0bffb15 	stw	r2,-20(fp)
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
200823e8:	e13ffb17 	ldw	r4,-20(fp)
200823ec:	0081e440 	call	20081e44 <fatIsLastDir>
200823f0:	1000031e 	bne	r2,zero,20082400 <fatFindUnusedDirectory+0xc0>
200823f4:	e13ffb17 	ldw	r4,-20(fp)
200823f8:	0081f300 	call	20081f30 <fatIsUnusedDir>
200823fc:	10000726 	beq	r2,zero,2008241c <fatFindUnusedDirectory+0xdc>
                bDone = TRUE;
20082400:	00800044 	movi	r2,1
20082404:	e0bffa15 	stw	r2,-24(fp)
                if (fatIsUnusedDir(pDir))
20082408:	e13ffb17 	ldw	r4,-20(fp)
2008240c:	0081f300 	call	20081f30 <fatIsUnusedDir>
20082410:	10000226 	beq	r2,zero,2008241c <fatFindUnusedDirectory+0xdc>
                    Dir = nDirectoryIndex;
20082414:	e0bff917 	ldw	r2,-28(fp)
20082418:	e0bff815 	stw	r2,-32(fp)
            }
            nDirectoryIndex++;        
2008241c:	e0bff917 	ldw	r2,-28(fp)
20082420:	10800044 	addi	r2,r2,1
20082424:	e0bff915 	stw	r2,-28(fp)
20082428:	00000106 	br	20082430 <fatFindUnusedDirectory+0xf0>
        }else{
                bDone = FALSE;
2008242c:	e03ffa15 	stw	zero,-24(fp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
20082430:	e0bffa17 	ldw	r2,-24(fp)
20082434:	103fce26 	beq	r2,zero,20082370 <__flash_rwdata_start+0xfffe61ec>
        }else{
                bDone = FALSE;
        }
    }             
    
    return Dir;      
20082438:	e0bff817 	ldw	r2,-32(fp)
}
2008243c:	e037883a 	mov	sp,fp
20082440:	dfc00117 	ldw	ra,4(sp)
20082444:	df000017 	ldw	fp,0(sp)
20082448:	dec00204 	addi	sp,sp,8
2008244c:	f800283a 	ret

20082450 <fatMount>:

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
20082450:	defff604 	addi	sp,sp,-40
20082454:	dfc00915 	stw	ra,36(sp)
20082458:	df000815 	stw	fp,32(sp)
2008245c:	dc000715 	stw	r16,28(sp)
20082460:	df000804 	addi	fp,sp,32
20082464:	e13ffe15 	stw	r4,-8(fp)
    bool bSuccess = TRUE;
20082468:	00800044 	movi	r2,1
2008246c:	e0bff815 	stw	r2,-32(fp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20082470:	e0bffe17 	ldw	r2,-8(fp)
20082474:	10800117 	ldw	r2,4(r2)
20082478:	e0fffe17 	ldw	r3,-8(fp)
2008247c:	18c00017 	ldw	r3,0(r3)
20082480:	1809883a 	mov	r4,r3
20082484:	000b883a 	mov	r5,zero
20082488:	01800034 	movhi	r6,0
2008248c:	3189d204 	addi	r6,r6,10056
20082490:	103ee83a 	callr	r2
20082494:	1000021e 	bne	r2,zero,200824a0 <fatMount+0x50>
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
20082498:	0005883a 	mov	r2,zero
2008249c:	0000bc06 	br	20082790 <fatMount+0x340>
        return FALSE;
    }
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
200824a0:	00806f84 	movi	r2,446
200824a4:	e0bff915 	stw	r2,-28(fp)
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
200824a8:	00800034 	movhi	r2,0
200824ac:	1089d204 	addi	r2,r2,10056
200824b0:	10807083 	ldbu	r2,450(r2)
200824b4:	10803fcc 	andi	r2,r2,255
200824b8:	e0bffa15 	stw	r2,-24(fp)
    if (PartitionType == PARTITION_FAT16){
200824bc:	e0bffa17 	ldw	r2,-24(fp)
200824c0:	108001a0 	cmpeqi	r2,r2,6
200824c4:	1000051e 	bne	r2,zero,200824dc <fatMount+0x8c>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
200824c8:	e0bffa17 	ldw	r2,-24(fp)
200824cc:	108002e0 	cmpeqi	r2,r2,11
200824d0:	1000021e 	bne	r2,zero,200824dc <fatMount+0x8c>
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
200824d4:	0005883a 	mov	r2,zero
200824d8:	0000ad06 	br	20082790 <fatMount+0x340>
    }       
    pVol->Partition_Type = PartitionType; 
200824dc:	e0fffa17 	ldw	r3,-24(fp)
200824e0:	e0bffe17 	ldw	r2,-8(fp)
200824e4:	10c00415 	stw	r3,16(r2)
    // 2.2 Find the first section of partition 1                    
    FirstSectionInVolume1 = fatArray2Value(&szBlock[FirstPartitionEntry + 8],4);
200824e8:	e0bff917 	ldw	r2,-28(fp)
200824ec:	10c00204 	addi	r3,r2,8
200824f0:	00800034 	movhi	r2,0
200824f4:	1089d204 	addi	r2,r2,10056
200824f8:	1885883a 	add	r2,r3,r2
200824fc:	1009883a 	mov	r4,r2
20082500:	01400104 	movi	r5,4
20082504:	00821100 	call	20082110 <fatArray2Value>
20082508:	e0bffb15 	stw	r2,-20(fp)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
2008250c:	e0bffe17 	ldw	r2,-8(fp)
20082510:	10800117 	ldw	r2,4(r2)
20082514:	e0fffe17 	ldw	r3,-8(fp)
20082518:	19000017 	ldw	r4,0(r3)
2008251c:	e0fffb17 	ldw	r3,-20(fp)
20082520:	180b883a 	mov	r5,r3
20082524:	01800034 	movhi	r6,0
20082528:	3189d204 	addi	r6,r6,10056
2008252c:	103ee83a 	callr	r2
20082530:	1000021e 	bne	r2,zero,2008253c <fatMount+0xec>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
20082534:	0005883a 	mov	r2,zero
20082538:	00009506 	br	20082790 <fatMount+0x340>
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
2008253c:	e0fffb17 	ldw	r3,-20(fp)
20082540:	e0bffe17 	ldw	r2,-8(fp)
20082544:	10c00615 	stw	r3,24(r2)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20082548:	00800034 	movhi	r2,0
2008254c:	1089d204 	addi	r2,r2,10056
20082550:	10800303 	ldbu	r2,12(r2)
20082554:	10803fcc 	andi	r2,r2,255
20082558:	1006923a 	slli	r3,r2,8
2008255c:	00800034 	movhi	r2,0
20082560:	1089d204 	addi	r2,r2,10056
20082564:	108002c3 	ldbu	r2,11(r2)
20082568:	10803fcc 	andi	r2,r2,255
2008256c:	1885883a 	add	r2,r3,r2
20082570:	1007883a 	mov	r3,r2
20082574:	e0bffe17 	ldw	r2,-8(fp)
20082578:	10c00715 	stw	r3,28(r2)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
2008257c:	00800034 	movhi	r2,0
20082580:	1089d204 	addi	r2,r2,10056
20082584:	10800343 	ldbu	r2,13(r2)
20082588:	10c03fcc 	andi	r3,r2,255
2008258c:	e0bffe17 	ldw	r2,-8(fp)
20082590:	10c00815 	stw	r3,32(r2)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20082594:	00800034 	movhi	r2,0
20082598:	1089d204 	addi	r2,r2,10056
2008259c:	108003c3 	ldbu	r2,15(r2)
200825a0:	10803fcc 	andi	r2,r2,255
200825a4:	1006923a 	slli	r3,r2,8
200825a8:	00800034 	movhi	r2,0
200825ac:	1089d204 	addi	r2,r2,10056
200825b0:	10800383 	ldbu	r2,14(r2)
200825b4:	10803fcc 	andi	r2,r2,255
200825b8:	1885883a 	add	r2,r3,r2
200825bc:	1007883a 	mov	r3,r2
200825c0:	e0bffe17 	ldw	r2,-8(fp)
200825c4:	10c00915 	stw	r3,36(r2)
    pVol->BPB_NumFATs = szBlock[0x10];
200825c8:	00800034 	movhi	r2,0
200825cc:	1089d204 	addi	r2,r2,10056
200825d0:	10800403 	ldbu	r2,16(r2)
200825d4:	10c03fcc 	andi	r3,r2,255
200825d8:	e0bffe17 	ldw	r2,-8(fp)
200825dc:	10c00a15 	stw	r3,40(r2)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
200825e0:	00800034 	movhi	r2,0
200825e4:	1089d204 	addi	r2,r2,10056
200825e8:	10800483 	ldbu	r2,18(r2)
200825ec:	10803fcc 	andi	r2,r2,255
200825f0:	1006923a 	slli	r3,r2,8
200825f4:	00800034 	movhi	r2,0
200825f8:	1089d204 	addi	r2,r2,10056
200825fc:	10800443 	ldbu	r2,17(r2)
20082600:	10803fcc 	andi	r2,r2,255
20082604:	1885883a 	add	r2,r3,r2
20082608:	1007883a 	mov	r3,r2
2008260c:	e0bffe17 	ldw	r2,-8(fp)
20082610:	10c00b15 	stw	r3,44(r2)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20082614:	00800034 	movhi	r2,0
20082618:	1089d204 	addi	r2,r2,10056
2008261c:	108005c3 	ldbu	r2,23(r2)
20082620:	10803fcc 	andi	r2,r2,255
20082624:	1006923a 	slli	r3,r2,8
20082628:	00800034 	movhi	r2,0
2008262c:	1089d204 	addi	r2,r2,10056
20082630:	10800583 	ldbu	r2,22(r2)
20082634:	10803fcc 	andi	r2,r2,255
20082638:	1885883a 	add	r2,r3,r2
2008263c:	1007883a 	mov	r3,r2
20082640:	e0bffe17 	ldw	r2,-8(fp)
20082644:	10c00c15 	stw	r3,48(r2)
    
    // add for v2.0
    pVol->Secter_Index = -1;
20082648:	e0bffe17 	ldw	r2,-8(fp)
2008264c:	00ffffc4 	movi	r3,-1
20082650:	10c09115 	stw	r3,580(r2)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20082654:	e0bffe17 	ldw	r2,-8(fp)
20082658:	10801104 	addi	r2,r2,68
2008265c:	1009883a 	mov	r4,r2
20082660:	000b883a 	mov	r5,zero
20082664:	01808004 	movi	r6,512
20082668:	0089a980 	call	20089a98 <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
2008266c:	e0bffe17 	ldw	r2,-8(fp)
20082670:	10800417 	ldw	r2,16(r2)
20082674:	108002d8 	cmpnei	r2,r2,11
20082678:	1000071e 	bne	r2,zero,20082698 <fatMount+0x248>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
2008267c:	01000034 	movhi	r4,0
20082680:	2109db04 	addi	r4,r4,10092
20082684:	01400104 	movi	r5,4
20082688:	00821100 	call	20082110 <fatArray2Value>
2008268c:	1007883a 	mov	r3,r2
20082690:	e0bffe17 	ldw	r2,-8(fp)
20082694:	10c00c15 	stw	r3,48(r2)
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
20082698:	e0bffe17 	ldw	r2,-8(fp)
2008269c:	10800717 	ldw	r2,28(r2)
200826a0:	10808020 	cmpeqi	r2,r2,512
200826a4:	1000021e 	bne	r2,zero,200826b0 <fatMount+0x260>
        FAT_DEBUG(("This program only supports FAT BPB_BytsPerSec == %d\n", MY_SECTER_SIZE));
        return FALSE; // only support FAT16 in this example
200826a8:	0005883a 	mov	r2,zero
200826ac:	00003806 	br	20082790 <fatMount+0x340>
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
200826b0:	e0bffe17 	ldw	r2,-8(fp)
200826b4:	10c00617 	ldw	r3,24(r2)
200826b8:	e0bffe17 	ldw	r2,-8(fp)
200826bc:	10800917 	ldw	r2,36(r2)
200826c0:	1887883a 	add	r3,r3,r2
200826c4:	e0bffe17 	ldw	r2,-8(fp)
200826c8:	10c00e15 	stw	r3,56(r2)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200826cc:	e0bffe17 	ldw	r2,-8(fp)
200826d0:	10c00e17 	ldw	r3,56(r2)
200826d4:	e0bffe17 	ldw	r2,-8(fp)
200826d8:	11000a17 	ldw	r4,40(r2)
200826dc:	e0bffe17 	ldw	r2,-8(fp)
200826e0:	10800c17 	ldw	r2,48(r2)
200826e4:	2085383a 	mul	r2,r4,r2
200826e8:	1887883a 	add	r3,r3,r2
200826ec:	e0bffe17 	ldw	r2,-8(fp)
200826f0:	10c00f15 	stw	r3,60(r2)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200826f4:	e0bffe17 	ldw	r2,-8(fp)
200826f8:	14000f17 	ldw	r16,60(r2)
200826fc:	e0bffe17 	ldw	r2,-8(fp)
20082700:	10800b17 	ldw	r2,44(r2)
20082704:	1006917a 	slli	r3,r2,5
20082708:	e0bffe17 	ldw	r2,-8(fp)
2008270c:	10800717 	ldw	r2,28(r2)
20082710:	1885883a 	add	r2,r3,r2
20082714:	10ffffc4 	addi	r3,r2,-1
20082718:	e0bffe17 	ldw	r2,-8(fp)
2008271c:	10800717 	ldw	r2,28(r2)
20082720:	1809883a 	mov	r4,r3
20082724:	100b883a 	mov	r5,r2
20082728:	00866700 	call	20086670 <__udivsi3>
2008272c:	8087883a 	add	r3,r16,r2
20082730:	e0bffe17 	ldw	r2,-8(fp)
20082734:	10c01015 	stw	r3,64(r2)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
20082738:	e0bffe17 	ldw	r2,-8(fp)
2008273c:	10c00717 	ldw	r3,28(r2)
20082740:	e0bffe17 	ldw	r2,-8(fp)
20082744:	10800817 	ldw	r2,32(r2)
20082748:	1887383a 	mul	r3,r3,r2
2008274c:	e0bffe17 	ldw	r2,-8(fp)
20082750:	10c00d15 	stw	r3,52(r2)
    nFatTableSecterNum = pVol->BPB_NumFATs * pVol->BPB_FATSz;
20082754:	e0bffe17 	ldw	r2,-8(fp)
20082758:	10c00a17 	ldw	r3,40(r2)
2008275c:	e0bffe17 	ldw	r2,-8(fp)
20082760:	10800c17 	ldw	r2,48(r2)
20082764:	1885383a 	mul	r2,r3,r2
20082768:	e0bffc15 	stw	r2,-16(fp)
    nFatTableSize = nFatTableSecterNum * pVol->BPB_BytsPerSec;
2008276c:	e0bffe17 	ldw	r2,-8(fp)
20082770:	10c00717 	ldw	r3,28(r2)
20082774:	e0bffc17 	ldw	r2,-16(fp)
20082778:	1885383a 	mul	r2,r3,r2
2008277c:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
20082780:	e0bffe17 	ldw	r2,-8(fp)
20082784:	e0fff817 	ldw	r3,-32(fp)
20082788:	10c00515 	stw	r3,20(r2)
    return bSuccess;   
2008278c:	e0bff817 	ldw	r2,-32(fp)
    

}
20082790:	e6ffff04 	addi	sp,fp,-4
20082794:	dfc00217 	ldw	ra,8(sp)
20082798:	df000117 	ldw	fp,4(sp)
2008279c:	dc000017 	ldw	r16,0(sp)
200827a0:	dec00304 	addi	sp,sp,12
200827a4:	f800283a 	ret

200827a8 <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
200827a8:	defffb04 	addi	sp,sp,-20
200827ac:	dfc00415 	stw	ra,16(sp)
200827b0:	df000315 	stw	fp,12(sp)
200827b4:	df000304 	addi	fp,sp,12
200827b8:	e13ffd15 	stw	r4,-12(fp)
200827bc:	e17ffe15 	stw	r5,-8(fp)
200827c0:	e1bfff15 	stw	r6,-4(fp)
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
200827c4:	e13ffe17 	ldw	r4,-8(fp)
200827c8:	e17fff17 	ldw	r5,-4(fp)
200827cc:	00851f80 	call	200851f8 <SDLIB_ReadBlock512>
}
200827d0:	e037883a 	mov	sp,fp
200827d4:	dfc00117 	ldw	ra,4(sp)
200827d8:	df000017 	ldw	fp,0(sp)
200827dc:	dec00204 	addi	sp,sp,8
200827e0:	f800283a 	ret

200827e4 <SD_ReadBlocks>:

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
200827e4:	defffa04 	addi	sp,sp,-24
200827e8:	dfc00515 	stw	ra,20(sp)
200827ec:	df000415 	stw	fp,16(sp)
200827f0:	df000404 	addi	fp,sp,16
200827f4:	e13ffc15 	stw	r4,-16(fp)
200827f8:	e17ffd15 	stw	r5,-12(fp)
200827fc:	e1bffe15 	stw	r6,-8(fp)
20082800:	e1ffff15 	stw	r7,-4(fp)
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
20082804:	e13ffd17 	ldw	r4,-12(fp)
20082808:	e17ffe17 	ldw	r5,-8(fp)
2008280c:	e1bfff17 	ldw	r6,-4(fp)
20082810:	008524c0 	call	2008524c <SDLIB_ReadBlocks>
}
20082814:	e037883a 	mov	sp,fp
20082818:	dfc00117 	ldw	ra,4(sp)
2008281c:	df000017 	ldw	fp,0(sp)
20082820:	dec00204 	addi	sp,sp,8
20082824:	f800283a 	ret

20082828 <fatMountSdcard>:

FAT_HANDLE fatMountSdcard(void){
20082828:	defff804 	addi	sp,sp,-32
2008282c:	dfc00715 	stw	ra,28(sp)
20082830:	df000615 	stw	fp,24(sp)
20082834:	df000604 	addi	fp,sp,24
    FAT_HANDLE hFat = 0;
20082838:	e03ffa15 	stw	zero,-24(fp)
    VOLUME_INFO *pVol;
    const int nMaxTry=10;
2008283c:	00800284 	movi	r2,10
20082840:	e0bffd15 	stw	r2,-12(fp)
    bool bFind = FALSE;
20082844:	e03ffb15 	stw	zero,-20(fp)
    int nTry=0;
20082848:	e03ffc15 	stw	zero,-16(fp)
    bool bSuccess = TRUE;
2008284c:	00800044 	movi	r2,1
20082850:	e0bffe15 	stw	r2,-8(fp)
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20082854:	00000706 	br	20082874 <fatMountSdcard+0x4c>
        bFind = SDLIB_Init();
20082858:	00851600 	call	20085160 <SDLIB_Init>
2008285c:	e0bffb15 	stw	r2,-20(fp)
        if (!bFind)
20082860:	e0bffb17 	ldw	r2,-20(fp)
20082864:	1000031e 	bne	r2,zero,20082874 <fatMountSdcard+0x4c>
            usleep(100*1000);
20082868:	010000b4 	movhi	r4,2
2008286c:	2121a804 	addi	r4,r4,-31072
20082870:	00977ec0 	call	200977ec <usleep>
    bool bFind = FALSE;
    int nTry=0;
    bool bSuccess = TRUE;
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20082874:	e0bffb17 	ldw	r2,-20(fp)
20082878:	1000051e 	bne	r2,zero,20082890 <fatMountSdcard+0x68>
2008287c:	e0bffc17 	ldw	r2,-16(fp)
20082880:	10c00044 	addi	r3,r2,1
20082884:	e0fffc15 	stw	r3,-16(fp)
20082888:	e0fffd17 	ldw	r3,-12(fp)
2008288c:	10fff216 	blt	r2,r3,20082858 <__flash_rwdata_start+0xfffe66d4>
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
    }
    if (!bFind){
20082890:	e0bffb17 	ldw	r2,-20(fp)
20082894:	1000021e 	bne	r2,zero,200828a0 <fatMountSdcard+0x78>
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
20082898:	e0bffa17 	ldw	r2,-24(fp)
2008289c:	00001806 	br	20082900 <fatMountSdcard+0xd8>
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
200828a0:	00800034 	movhi	r2,0
200828a4:	108a6c04 	addi	r2,r2,10672
200828a8:	e0bffa15 	stw	r2,-24(fp)
    pVol = (VOLUME_INFO *)hFat;
200828ac:	e0bffa17 	ldw	r2,-24(fp)
200828b0:	e0bfff15 	stw	r2,-4(fp)
    pVol->ReadBlock512 = SD_ReadBlock512;
200828b4:	e0ffff17 	ldw	r3,-4(fp)
200828b8:	00880234 	movhi	r2,8200
200828bc:	1089ea04 	addi	r2,r2,10152
200828c0:	18800115 	stw	r2,4(r3)
    pVol->ReadBlocks = SD_ReadBlocks;
200828c4:	e0ffff17 	ldw	r3,-4(fp)
200828c8:	00880234 	movhi	r2,8200
200828cc:	1089f904 	addi	r2,r2,10212
200828d0:	18800315 	stw	r2,12(r3)
    bSuccess = fatMount(pVol);
200828d4:	e13fff17 	ldw	r4,-4(fp)
200828d8:	00824500 	call	20082450 <fatMount>
200828dc:	e0bffe15 	stw	r2,-8(fp)
  
    if (bSuccess){
200828e0:	e0bffe17 	ldw	r2,-8(fp)
200828e4:	10000426 	beq	r2,zero,200828f8 <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
200828e8:	e0bfff17 	ldw	r2,-4(fp)
200828ec:	00c00044 	movi	r3,1
200828f0:	10c00515 	stw	r3,20(r2)
200828f4:	00000106 	br	200828fc <fatMountSdcard+0xd4>
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        //free((void *)hFat);
        hFat = 0;
200828f8:	e03ffa15 	stw	zero,-24(fp)
    }        

    return hFat;   
200828fc:	e0bffa17 	ldw	r2,-24(fp)
}
20082900:	e037883a 	mov	sp,fp
20082904:	dfc00117 	ldw	ra,4(sp)
20082908:	df000017 	ldw	fp,0(sp)
2008290c:	dec00204 	addi	sp,sp,8
20082910:	f800283a 	ret

20082914 <debug_output>:
#include <stdarg.h> 
#include "hw_sd.h"
#include "debug.h"


void debug_output(char *pMessage){
20082914:	defffd04 	addi	sp,sp,-12
20082918:	dfc00215 	stw	ra,8(sp)
2008291c:	df000115 	stw	fp,4(sp)
20082920:	df000104 	addi	fp,sp,4
20082924:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
20082928:	e13fff17 	ldw	r4,-4(fp)
2008292c:	0089be80 	call	20089be8 <printf>
}
20082930:	e037883a 	mov	sp,fp
20082934:	dfc00117 	ldw	ra,4(sp)
20082938:	df000017 	ldw	fp,0(sp)
2008293c:	dec00204 	addi	sp,sp,8
20082940:	f800283a 	ret

20082944 <myprintf>:

int myprintf(char *format, ...){
20082944:	deff7804 	addi	sp,sp,-544
20082948:	dfc08415 	stw	ra,528(sp)
2008294c:	df008315 	stw	fp,524(sp)
20082950:	df008304 	addi	fp,sp,524
20082954:	e1400215 	stw	r5,8(fp)
20082958:	e1800315 	stw	r6,12(fp)
2008295c:	e1c00415 	stw	r7,16(fp)
20082960:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
20082964:	e0800204 	addi	r2,fp,8
20082968:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
2008296c:	e0bffe17 	ldw	r2,-8(fp)
20082970:	e0ff7e04 	addi	r3,fp,-520
20082974:	1809883a 	mov	r4,r3
20082978:	01408004 	movi	r5,512
2008297c:	e1bfff17 	ldw	r6,-4(fp)
20082980:	100f883a 	mov	r7,r2
20082984:	008e04c0 	call	2008e04c <vsnprintf>
20082988:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
2008298c:	e0bf7e04 	addi	r2,fp,-520
20082990:	1009883a 	mov	r4,r2
20082994:	00829140 	call	20082914 <debug_output>

    return rc;    
20082998:	e0bf7d17 	ldw	r2,-524(fp)
}
2008299c:	e037883a 	mov	sp,fp
200829a0:	dfc00117 	ldw	ra,4(sp)
200829a4:	df000017 	ldw	fp,0(sp)
200829a8:	dec00504 	addi	sp,sp,20
200829ac:	f800283a 	ret

200829b0 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
200829b0:	defff704 	addi	sp,sp,-36
200829b4:	dfc00815 	stw	ra,32(sp)
200829b8:	df000715 	stw	fp,28(sp)
200829bc:	df000704 	addi	fp,sp,28
200829c0:	e13ffe15 	stw	r4,-8(fp)
200829c4:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
200829c8:	e03ff915 	stw	zero,-28(fp)
200829cc:	00001106 	br	20082a14 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
200829d0:	e0bff917 	ldw	r2,-28(fp)
200829d4:	e0fffe17 	ldw	r3,-8(fp)
200829d8:	1885883a 	add	r2,r3,r2
200829dc:	10800003 	ldbu	r2,0(r2)
200829e0:	10803fcc 	andi	r2,r2,255
200829e4:	e0fffa04 	addi	r3,fp,-24
200829e8:	1809883a 	mov	r4,r3
200829ec:	01400034 	movhi	r5,0
200829f0:	29401604 	addi	r5,r5,88
200829f4:	100d883a 	mov	r6,r2
200829f8:	0089d8c0 	call	20089d8c <sprintf>
        DEBUG((szText));
200829fc:	e0bffa04 	addi	r2,fp,-24
20082a00:	1009883a 	mov	r4,r2
20082a04:	00829440 	call	20082944 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20082a08:	e0bff917 	ldw	r2,-28(fp)
20082a0c:	10800044 	addi	r2,r2,1
20082a10:	e0bff915 	stw	r2,-28(fp)
20082a14:	e0fff917 	ldw	r3,-28(fp)
20082a18:	e0bfff17 	ldw	r2,-4(fp)
20082a1c:	18bfec16 	blt	r3,r2,200829d0 <__flash_rwdata_start+0xfffe684c>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
20082a20:	e0bfff17 	ldw	r2,-4(fp)
}
20082a24:	e037883a 	mov	sp,fp
20082a28:	dfc00117 	ldw	ra,4(sp)
20082a2c:	df000017 	ldw	fp,0(sp)
20082a30:	dec00204 	addi	sp,sp,8
20082a34:	f800283a 	ret

20082a38 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
20082a38:	defff704 	addi	sp,sp,-36
20082a3c:	dfc00815 	stw	ra,32(sp)
20082a40:	df000715 	stw	fp,28(sp)
20082a44:	df000704 	addi	fp,sp,28
20082a48:	e13ffe15 	stw	r4,-8(fp)
20082a4c:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20082a50:	e03ff915 	stw	zero,-28(fp)
20082a54:	00001306 	br	20082aa4 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
20082a58:	e0bff917 	ldw	r2,-28(fp)
20082a5c:	1085883a 	add	r2,r2,r2
20082a60:	1085883a 	add	r2,r2,r2
20082a64:	1007883a 	mov	r3,r2
20082a68:	e0bffe17 	ldw	r2,-8(fp)
20082a6c:	10c5883a 	add	r2,r2,r3
20082a70:	10800017 	ldw	r2,0(r2)
20082a74:	e0fffa04 	addi	r3,fp,-24
20082a78:	1809883a 	mov	r4,r3
20082a7c:	01400034 	movhi	r5,0
20082a80:	29401804 	addi	r5,r5,96
20082a84:	100d883a 	mov	r6,r2
20082a88:	0089d8c0 	call	20089d8c <sprintf>
        DEBUG((szText));
20082a8c:	e0bffa04 	addi	r2,fp,-24
20082a90:	1009883a 	mov	r4,r2
20082a94:	00829440 	call	20082944 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20082a98:	e0bff917 	ldw	r2,-28(fp)
20082a9c:	10800044 	addi	r2,r2,1
20082aa0:	e0bff915 	stw	r2,-28(fp)
20082aa4:	e0fff917 	ldw	r3,-28(fp)
20082aa8:	e0bfff17 	ldw	r2,-4(fp)
20082aac:	18bfea16 	blt	r3,r2,20082a58 <__flash_rwdata_start+0xfffe68d4>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
20082ab0:	e0bfff17 	ldw	r2,-4(fp)
}
20082ab4:	e037883a 	mov	sp,fp
20082ab8:	dfc00117 	ldw	ra,4(sp)
20082abc:	df000017 	ldw	fp,0(sp)
20082ac0:	dec00204 	addi	sp,sp,8
20082ac4:	f800283a 	ret

20082ac8 <udelay>:
#define MMC_PRINT(x)	DEBUG(x)
#else
#define MMC_PRINT(x)
#endif

void udelay(int t) {
20082ac8:	defffd04 	addi	sp,sp,-12
20082acc:	df000215 	stw	fp,8(sp)
20082ad0:	df000204 	addi	fp,sp,8
20082ad4:	e13fff15 	stw	r4,-4(fp)
#define US_DELAY 100
	volatile int us = US_DELAY;
20082ad8:	00801904 	movi	r2,100
20082adc:	e0bffe15 	stw	r2,-8(fp)
	while (t--) {
20082ae0:	00000706 	br	20082b00 <udelay+0x38>
		us = US_DELAY;
20082ae4:	00801904 	movi	r2,100
20082ae8:	e0bffe15 	stw	r2,-8(fp)
		while (us--)
20082aec:	0001883a 	nop
20082af0:	e0bffe17 	ldw	r2,-8(fp)
20082af4:	10ffffc4 	addi	r3,r2,-1
20082af8:	e0fffe15 	stw	r3,-8(fp)
20082afc:	103ffc1e 	bne	r2,zero,20082af0 <__flash_rwdata_start+0xfffe696c>
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20082b00:	e0bfff17 	ldw	r2,-4(fp)
20082b04:	10ffffc4 	addi	r3,r2,-1
20082b08:	e0ffff15 	stw	r3,-4(fp)
20082b0c:	103ff51e 	bne	r2,zero,20082ae4 <__flash_rwdata_start+0xfffe6960>
		us = US_DELAY;
		while (us--)
			;
	}
}
20082b10:	e037883a 	mov	sp,fp
20082b14:	df000017 	ldw	fp,0(sp)
20082b18:	dec00104 	addi	sp,sp,4
20082b1c:	f800283a 	ret

20082b20 <mmc_set_ios>:
 * to platforms without floating point.
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
20082b20:	defffd04 	addi	sp,sp,-12
20082b24:	dfc00215 	stw	ra,8(sp)
20082b28:	df000115 	stw	fp,4(sp)
20082b2c:	df000104 	addi	fp,sp,4
20082b30:	e13fff15 	stw	r4,-4(fp)
	mmc->set_ios(mmc);
20082b34:	e0bfff17 	ldw	r2,-4(fp)
20082b38:	10802517 	ldw	r2,148(r2)
20082b3c:	e13fff17 	ldw	r4,-4(fp)
20082b40:	103ee83a 	callr	r2
}
20082b44:	e037883a 	mov	sp,fp
20082b48:	dfc00117 	ldw	ra,4(sp)
20082b4c:	df000017 	ldw	fp,0(sp)
20082b50:	dec00204 	addi	sp,sp,8
20082b54:	f800283a 	ret

20082b58 <mmc_set_bus_width>:

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
20082b58:	defffc04 	addi	sp,sp,-16
20082b5c:	dfc00315 	stw	ra,12(sp)
20082b60:	df000215 	stw	fp,8(sp)
20082b64:	df000204 	addi	fp,sp,8
20082b68:	e13ffe15 	stw	r4,-8(fp)
20082b6c:	e17fff15 	stw	r5,-4(fp)
	mmc->bus_width = width;
20082b70:	e0bffe17 	ldw	r2,-8(fp)
20082b74:	e0ffff17 	ldw	r3,-4(fp)
20082b78:	10c00f15 	stw	r3,60(r2)

	mmc_set_ios(mmc);
20082b7c:	e13ffe17 	ldw	r4,-8(fp)
20082b80:	0082b200 	call	20082b20 <mmc_set_ios>
}
20082b84:	e037883a 	mov	sp,fp
20082b88:	dfc00117 	ldw	ra,4(sp)
20082b8c:	df000017 	ldw	fp,0(sp)
20082b90:	dec00204 	addi	sp,sp,8
20082b94:	f800283a 	ret

20082b98 <mmc_set_clock>:

static void mmc_set_clock(struct mmc *mmc, uint clock) {
20082b98:	defffc04 	addi	sp,sp,-16
20082b9c:	dfc00315 	stw	ra,12(sp)
20082ba0:	df000215 	stw	fp,8(sp)
20082ba4:	df000204 	addi	fp,sp,8
20082ba8:	e13ffe15 	stw	r4,-8(fp)
20082bac:	e17fff15 	stw	r5,-4(fp)
	if (clock > mmc->f_max)
20082bb0:	e0bffe17 	ldw	r2,-8(fp)
20082bb4:	10c00d17 	ldw	r3,52(r2)
20082bb8:	e0bfff17 	ldw	r2,-4(fp)
20082bbc:	1880032e 	bgeu	r3,r2,20082bcc <mmc_set_clock+0x34>
		clock = mmc->f_max;
20082bc0:	e0bffe17 	ldw	r2,-8(fp)
20082bc4:	10800d17 	ldw	r2,52(r2)
20082bc8:	e0bfff15 	stw	r2,-4(fp)

	if (clock < mmc->f_min)
20082bcc:	e0bffe17 	ldw	r2,-8(fp)
20082bd0:	10800c17 	ldw	r2,48(r2)
20082bd4:	e0ffff17 	ldw	r3,-4(fp)
20082bd8:	1880032e 	bgeu	r3,r2,20082be8 <mmc_set_clock+0x50>
		clock = mmc->f_min;
20082bdc:	e0bffe17 	ldw	r2,-8(fp)
20082be0:	10800c17 	ldw	r2,48(r2)
20082be4:	e0bfff15 	stw	r2,-4(fp)

	mmc->clock = clock;
20082be8:	e0bffe17 	ldw	r2,-8(fp)
20082bec:	e0ffff17 	ldw	r3,-4(fp)
20082bf0:	10c01015 	stw	r3,64(r2)

	mmc_set_ios(mmc);
20082bf4:	e13ffe17 	ldw	r4,-8(fp)
20082bf8:	0082b200 	call	20082b20 <mmc_set_ios>
}
20082bfc:	e037883a 	mov	sp,fp
20082c00:	dfc00117 	ldw	ra,4(sp)
20082c04:	df000017 	ldw	fp,0(sp)
20082c08:	dec00204 	addi	sp,sp,8
20082c0c:	f800283a 	ret

20082c10 <mmc_send_cmd>:

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
20082c10:	defffa04 	addi	sp,sp,-24
20082c14:	dfc00515 	stw	ra,20(sp)
20082c18:	df000415 	stw	fp,16(sp)
20082c1c:	df000404 	addi	fp,sp,16
20082c20:	e13ffd15 	stw	r4,-12(fp)
20082c24:	e17ffe15 	stw	r5,-8(fp)
20082c28:	e1bfff15 	stw	r6,-4(fp)
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20082c2c:	e0bffd17 	ldw	r2,-12(fp)
20082c30:	10802417 	ldw	r2,144(r2)
20082c34:	e13ffd17 	ldw	r4,-12(fp)
20082c38:	e17ffe17 	ldw	r5,-8(fp)
20082c3c:	e1bfff17 	ldw	r6,-4(fp)
20082c40:	103ee83a 	callr	r2
20082c44:	e0bffc15 	stw	r2,-16(fp)

	return ret;
20082c48:	e0bffc17 	ldw	r2,-16(fp)
}
20082c4c:	e037883a 	mov	sp,fp
20082c50:	dfc00117 	ldw	ra,4(sp)
20082c54:	df000017 	ldw	fp,0(sp)
20082c58:	dec00204 	addi	sp,sp,8
20082c5c:	f800283a 	ret

20082c60 <mmc_go_idle>:

static int mmc_go_idle(struct mmc* mmc) {
20082c60:	defff504 	addi	sp,sp,-44
20082c64:	dfc00a15 	stw	ra,40(sp)
20082c68:	df000915 	stw	fp,36(sp)
20082c6c:	df000904 	addi	fp,sp,36
20082c70:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);
20082c74:	0100fa04 	movi	r4,1000
20082c78:	0082ac80 	call	20082ac8 <udelay>

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
20082c7c:	e03ff80d 	sth	zero,-32(fp)
	cmd.cmdarg = 0;
20082c80:	e03ffa15 	stw	zero,-24(fp)
	cmd.resp_type = MMC_RSP_NONE;
20082c84:	e03ff915 	stw	zero,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20082c88:	e0bff804 	addi	r2,fp,-32
20082c8c:	e13fff17 	ldw	r4,-4(fp)
20082c90:	100b883a 	mov	r5,r2
20082c94:	000d883a 	mov	r6,zero
20082c98:	0082c100 	call	20082c10 <mmc_send_cmd>
20082c9c:	e0bff715 	stw	r2,-36(fp)

	if (err)
20082ca0:	e0bff717 	ldw	r2,-36(fp)
20082ca4:	10000226 	beq	r2,zero,20082cb0 <mmc_go_idle+0x50>
		return err;
20082ca8:	e0bff717 	ldw	r2,-36(fp)
20082cac:	00000306 	br	20082cbc <mmc_go_idle+0x5c>

	udelay(2000);
20082cb0:	0101f404 	movi	r4,2000
20082cb4:	0082ac80 	call	20082ac8 <udelay>

	return 0;
20082cb8:	0005883a 	mov	r2,zero
}
20082cbc:	e037883a 	mov	sp,fp
20082cc0:	dfc00117 	ldw	ra,4(sp)
20082cc4:	df000017 	ldw	fp,0(sp)
20082cc8:	dec00204 	addi	sp,sp,8
20082ccc:	f800283a 	ret

20082cd0 <mmc_send_if_cond>:

static int mmc_send_if_cond(struct mmc *mmc) {
20082cd0:	defff504 	addi	sp,sp,-44
20082cd4:	dfc00a15 	stw	ra,40(sp)
20082cd8:	df000915 	stw	fp,36(sp)
20082cdc:	df000904 	addi	fp,sp,36
20082ce0:	e13fff15 	stw	r4,-4(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20082ce4:	00800204 	movi	r2,8
20082ce8:	e0bff80d 	sth	r2,-32(fp)
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20082cec:	e0bfff17 	ldw	r2,-4(fp)
20082cf0:	10c00917 	ldw	r3,36(r2)
20082cf4:	00804034 	movhi	r2,256
20082cf8:	10a00004 	addi	r2,r2,-32768
20082cfc:	1884703a 	and	r2,r3,r2
20082d00:	10000226 	beq	r2,zero,20082d0c <mmc_send_if_cond+0x3c>
20082d04:	00806a84 	movi	r2,426
20082d08:	00000106 	br	20082d10 <mmc_send_if_cond+0x40>
20082d0c:	00802a84 	movi	r2,170
20082d10:	e0bffa15 	stw	r2,-24(fp)
	cmd.resp_type = MMC_RSP_R7;
20082d14:	00800544 	movi	r2,21
20082d18:	e0bff915 	stw	r2,-28(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20082d1c:	e0bff804 	addi	r2,fp,-32
20082d20:	e13fff17 	ldw	r4,-4(fp)
20082d24:	100b883a 	mov	r5,r2
20082d28:	000d883a 	mov	r6,zero
20082d2c:	0082c100 	call	20082c10 <mmc_send_cmd>
20082d30:	e0bff715 	stw	r2,-36(fp)

	if (err)
20082d34:	e0bff717 	ldw	r2,-36(fp)
20082d38:	10000226 	beq	r2,zero,20082d44 <mmc_send_if_cond+0x74>
		return err;
20082d3c:	e0bff717 	ldw	r2,-36(fp)
20082d40:	00000b06 	br	20082d70 <mmc_send_if_cond+0xa0>

	if ((cmd.response[0] & 0xff) != 0xaa)
20082d44:	e0bffb17 	ldw	r2,-20(fp)
20082d48:	10803fcc 	andi	r2,r2,255
20082d4c:	10802aa0 	cmpeqi	r2,r2,170
20082d50:	1000021e 	bne	r2,zero,20082d5c <mmc_send_if_cond+0x8c>
		return UNUSABLE_ERR;
20082d54:	00bffbc4 	movi	r2,-17
20082d58:	00000506 	br	20082d70 <mmc_send_if_cond+0xa0>
	else
		mmc->version = SD_VERSION_2;
20082d5c:	e0ffff17 	ldw	r3,-4(fp)
20082d60:	008000b4 	movhi	r2,2
20082d64:	10800804 	addi	r2,r2,32
20082d68:	18800a15 	stw	r2,40(r3)

	return 0;
20082d6c:	0005883a 	mov	r2,zero
}
20082d70:	e037883a 	mov	sp,fp
20082d74:	dfc00117 	ldw	ra,4(sp)
20082d78:	df000017 	ldw	fp,0(sp)
20082d7c:	dec00204 	addi	sp,sp,8
20082d80:	f800283a 	ret

20082d84 <sd_send_op_cond>:

static int sd_send_op_cond(struct mmc *mmc) {
20082d84:	defff404 	addi	sp,sp,-48
20082d88:	dfc00b15 	stw	ra,44(sp)
20082d8c:	df000a15 	stw	fp,40(sp)
20082d90:	df000a04 	addi	fp,sp,40
20082d94:	e13fff15 	stw	r4,-4(fp)
	int timeout = 1000;
20082d98:	0080fa04 	movi	r2,1000
20082d9c:	e0bff615 	stw	r2,-40(fp)
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
20082da0:	00800dc4 	movi	r2,55
20082da4:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R1;
20082da8:	00800544 	movi	r2,21
20082dac:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = 0;
20082db0:	e03ffa15 	stw	zero,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20082db4:	e0bff804 	addi	r2,fp,-32
20082db8:	e13fff17 	ldw	r4,-4(fp)
20082dbc:	100b883a 	mov	r5,r2
20082dc0:	000d883a 	mov	r6,zero
20082dc4:	0082c100 	call	20082c10 <mmc_send_cmd>
20082dc8:	e0bff715 	stw	r2,-36(fp)

		if (err)
20082dcc:	e0bff717 	ldw	r2,-36(fp)
20082dd0:	10000226 	beq	r2,zero,20082ddc <sd_send_op_cond+0x58>
			return err;
20082dd4:	e0bff717 	ldw	r2,-36(fp)
20082dd8:	00003e06 	br	20082ed4 <sd_send_op_cond+0x150>

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
20082ddc:	00800a44 	movi	r2,41
20082de0:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
20082de4:	00800044 	movi	r2,1
20082de8:	e0bff915 	stw	r2,-28(fp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20082dec:	e0bfff17 	ldw	r2,-4(fp)
20082df0:	10c00917 	ldw	r3,36(r2)
20082df4:	00804034 	movhi	r2,256
20082df8:	10a00004 	addi	r2,r2,-32768
20082dfc:	1884703a 	and	r2,r3,r2
20082e00:	e0bffa15 	stw	r2,-24(fp)

		if (mmc->version == SD_VERSION_2)
20082e04:	e0bfff17 	ldw	r2,-4(fp)
20082e08:	10c00a17 	ldw	r3,40(r2)
20082e0c:	008000b4 	movhi	r2,2
20082e10:	10800804 	addi	r2,r2,32
20082e14:	1880031e 	bne	r3,r2,20082e24 <sd_send_op_cond+0xa0>
			cmd.cmdarg |= OCR_HCS;
20082e18:	e0bffa17 	ldw	r2,-24(fp)
20082e1c:	10900034 	orhi	r2,r2,16384
20082e20:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20082e24:	e0bff804 	addi	r2,fp,-32
20082e28:	e13fff17 	ldw	r4,-4(fp)
20082e2c:	100b883a 	mov	r5,r2
20082e30:	000d883a 	mov	r6,zero
20082e34:	0082c100 	call	20082c10 <mmc_send_cmd>
20082e38:	e0bff715 	stw	r2,-36(fp)

		if (err)
20082e3c:	e0bff717 	ldw	r2,-36(fp)
20082e40:	10000226 	beq	r2,zero,20082e4c <sd_send_op_cond+0xc8>
			return err;
20082e44:	e0bff717 	ldw	r2,-36(fp)
20082e48:	00002206 	br	20082ed4 <sd_send_op_cond+0x150>

		udelay(1000);
20082e4c:	0100fa04 	movi	r4,1000
20082e50:	0082ac80 	call	20082ac8 <udelay>
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
20082e54:	e0bffb17 	ldw	r2,-20(fp)
20082e58:	10000416 	blt	r2,zero,20082e6c <sd_send_op_cond+0xe8>
20082e5c:	e0bff617 	ldw	r2,-40(fp)
20082e60:	10ffffc4 	addi	r3,r2,-1
20082e64:	e0fff615 	stw	r3,-40(fp)
20082e68:	103fcd1e 	bne	r2,zero,20082da0 <__flash_rwdata_start+0xfffe6c1c>

	if (timeout <= 0)
20082e6c:	e0bff617 	ldw	r2,-40(fp)
20082e70:	00800216 	blt	zero,r2,20082e7c <sd_send_op_cond+0xf8>
		return UNUSABLE_ERR;
20082e74:	00bffbc4 	movi	r2,-17
20082e78:	00001606 	br	20082ed4 <sd_send_op_cond+0x150>

	if (mmc->version != SD_VERSION_2)
20082e7c:	e0bfff17 	ldw	r2,-4(fp)
20082e80:	10c00a17 	ldw	r3,40(r2)
20082e84:	008000b4 	movhi	r2,2
20082e88:	10800804 	addi	r2,r2,32
20082e8c:	18800426 	beq	r3,r2,20082ea0 <sd_send_op_cond+0x11c>
		mmc->version = SD_VERSION_1_0;
20082e90:	e0ffff17 	ldw	r3,-4(fp)
20082e94:	008000b4 	movhi	r2,2
20082e98:	10800404 	addi	r2,r2,16
20082e9c:	18800a15 	stw	r2,40(r3)

	mmc->ocr = cmd.response[0];
20082ea0:	e0fffb17 	ldw	r3,-20(fp)
20082ea4:	e0bfff17 	ldw	r2,-4(fp)
20082ea8:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20082eac:	e0bfff17 	ldw	r2,-4(fp)
20082eb0:	10801317 	ldw	r2,76(r2)
20082eb4:	1090002c 	andhi	r2,r2,16384
20082eb8:	1004c03a 	cmpne	r2,r2,zero
20082ebc:	10c03fcc 	andi	r3,r2,255
20082ec0:	e0bfff17 	ldw	r2,-4(fp)
20082ec4:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
20082ec8:	e0bfff17 	ldw	r2,-4(fp)
20082ecc:	10001e0d 	sth	zero,120(r2)

	return 0;
20082ed0:	0005883a 	mov	r2,zero
}
20082ed4:	e037883a 	mov	sp,fp
20082ed8:	dfc00117 	ldw	ra,4(sp)
20082edc:	df000017 	ldw	fp,0(sp)
20082ee0:	dec00204 	addi	sp,sp,8
20082ee4:	f800283a 	ret

20082ee8 <mmc_send_op_cond>:

static int mmc_send_op_cond(struct mmc *mmc) {
20082ee8:	defff404 	addi	sp,sp,-48
20082eec:	dfc00b15 	stw	ra,44(sp)
20082ef0:	df000a15 	stw	fp,40(sp)
20082ef4:	df000a04 	addi	fp,sp,40
20082ef8:	e13fff15 	stw	r4,-4(fp)
	int timeout = 10000;
20082efc:	0089c404 	movi	r2,10000
20082f00:	e0bff615 	stw	r2,-40(fp)
	struct mmc_cmd cmd;
	int err;

	/* Some cards seem to need this */
	mmc_go_idle(mmc);
20082f04:	e13fff17 	ldw	r4,-4(fp)
20082f08:	0082c600 	call	20082c60 <mmc_go_idle>

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20082f0c:	00800044 	movi	r2,1
20082f10:	e0bff80d 	sth	r2,-32(fp)
	cmd.resp_type = MMC_RSP_R3;
20082f14:	00800044 	movi	r2,1
20082f18:	e0bff915 	stw	r2,-28(fp)
	cmd.cmdarg = 0;
20082f1c:	e03ffa15 	stw	zero,-24(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20082f20:	e0bff804 	addi	r2,fp,-32
20082f24:	e13fff17 	ldw	r4,-4(fp)
20082f28:	100b883a 	mov	r5,r2
20082f2c:	000d883a 	mov	r6,zero
20082f30:	0082c100 	call	20082c10 <mmc_send_cmd>
20082f34:	e0bff715 	stw	r2,-36(fp)

	if (err)
20082f38:	e0bff717 	ldw	r2,-36(fp)
20082f3c:	10000226 	beq	r2,zero,20082f48 <mmc_send_op_cond+0x60>
		return err;
20082f40:	e0bff717 	ldw	r2,-36(fp)
20082f44:	00003e06 	br	20083040 <mmc_send_op_cond+0x158>

	udelay(1000);
20082f48:	0100fa04 	movi	r4,1000
20082f4c:	0082ac80 	call	20082ac8 <udelay>

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20082f50:	00800044 	movi	r2,1
20082f54:	e0bff80d 	sth	r2,-32(fp)
		cmd.resp_type = MMC_RSP_R3;
20082f58:	00800044 	movi	r2,1
20082f5c:	e0bff915 	stw	r2,-28(fp)
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
20082f60:	e0bfff17 	ldw	r2,-4(fp)
20082f64:	10c00917 	ldw	r3,36(r2)
20082f68:	e0bffb17 	ldw	r2,-20(fp)
20082f6c:	1886703a 	and	r3,r3,r2
20082f70:	00802034 	movhi	r2,128
20082f74:	10bfe004 	addi	r2,r2,-128
20082f78:	1886703a 	and	r3,r3,r2
				| (cmd.response[0] & OCR_ACCESS_MODE);
20082f7c:	e0bffb17 	ldw	r2,-20(fp)
20082f80:	1098002c 	andhi	r2,r2,24576
20082f84:	1884b03a 	or	r2,r3,r2
	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
20082f88:	e0bffa15 	stw	r2,-24(fp)
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
20082f8c:	e0bfff17 	ldw	r2,-4(fp)
20082f90:	10801217 	ldw	r2,72(r2)
20082f94:	1082000c 	andi	r2,r2,2048
20082f98:	10000326 	beq	r2,zero,20082fa8 <mmc_send_op_cond+0xc0>
			cmd.cmdarg |= OCR_HCS;
20082f9c:	e0bffa17 	ldw	r2,-24(fp)
20082fa0:	10900034 	orhi	r2,r2,16384
20082fa4:	e0bffa15 	stw	r2,-24(fp)

		err = mmc_send_cmd(mmc, &cmd, NULL);
20082fa8:	e0bff804 	addi	r2,fp,-32
20082fac:	e13fff17 	ldw	r4,-4(fp)
20082fb0:	100b883a 	mov	r5,r2
20082fb4:	000d883a 	mov	r6,zero
20082fb8:	0082c100 	call	20082c10 <mmc_send_cmd>
20082fbc:	e0bff715 	stw	r2,-36(fp)

		if (err)
20082fc0:	e0bff717 	ldw	r2,-36(fp)
20082fc4:	10000226 	beq	r2,zero,20082fd0 <mmc_send_op_cond+0xe8>
			return err;
20082fc8:	e0bff717 	ldw	r2,-36(fp)
20082fcc:	00001c06 	br	20083040 <mmc_send_op_cond+0x158>

		udelay(1000);
20082fd0:	0100fa04 	movi	r4,1000
20082fd4:	0082ac80 	call	20082ac8 <udelay>
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
20082fd8:	e0bffb17 	ldw	r2,-20(fp)
20082fdc:	10000416 	blt	r2,zero,20082ff0 <mmc_send_op_cond+0x108>
20082fe0:	e0bff617 	ldw	r2,-40(fp)
20082fe4:	10ffffc4 	addi	r3,r2,-1
20082fe8:	e0fff615 	stw	r3,-40(fp)
20082fec:	103fd81e 	bne	r2,zero,20082f50 <__flash_rwdata_start+0xfffe6dcc>

	if (timeout <= 0)
20082ff0:	e0bff617 	ldw	r2,-40(fp)
20082ff4:	00800216 	blt	zero,r2,20083000 <mmc_send_op_cond+0x118>
		return UNUSABLE_ERR;
20082ff8:	00bffbc4 	movi	r2,-17
20082ffc:	00001006 	br	20083040 <mmc_send_op_cond+0x158>

	mmc->version = MMC_VERSION_UNKNOWN;
20083000:	e0bfff17 	ldw	r2,-4(fp)
20083004:	00c00074 	movhi	r3,1
20083008:	10c00a15 	stw	r3,40(r2)
	mmc->ocr = cmd.response[0];
2008300c:	e0fffb17 	ldw	r3,-20(fp)
20083010:	e0bfff17 	ldw	r2,-4(fp)
20083014:	10c01315 	stw	r3,76(r2)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20083018:	e0bfff17 	ldw	r2,-4(fp)
2008301c:	10801317 	ldw	r2,76(r2)
20083020:	1090002c 	andhi	r2,r2,16384
20083024:	1004c03a 	cmpne	r2,r2,zero
20083028:	10c03fcc 	andi	r3,r2,255
2008302c:	e0bfff17 	ldw	r2,-4(fp)
20083030:	10c00e15 	stw	r3,56(r2)
	mmc->rca = 0;
20083034:	e0bfff17 	ldw	r2,-4(fp)
20083038:	10001e0d 	sth	zero,120(r2)

	return 0;
2008303c:	0005883a 	mov	r2,zero
}
20083040:	e037883a 	mov	sp,fp
20083044:	dfc00117 	ldw	ra,4(sp)
20083048:	df000017 	ldw	fp,0(sp)
2008304c:	dec00204 	addi	sp,sp,8
20083050:	f800283a 	ret

20083054 <mmc_send_status>:

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083054:	defff304 	addi	sp,sp,-52
20083058:	dfc00c15 	stw	ra,48(sp)
2008305c:	df000b15 	stw	fp,44(sp)
20083060:	df000b04 	addi	fp,sp,44
20083064:	e13ffe15 	stw	r4,-8(fp)
20083068:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	int err, retries = 5;
2008306c:	00800144 	movi	r2,5
20083070:	e0bff515 	stw	r2,-44(fp)

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
20083074:	00800344 	movi	r2,13
20083078:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
2008307c:	00800544 	movi	r2,21
20083080:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = mmc->rca << 16;
20083084:	e0bffe17 	ldw	r2,-8(fp)
20083088:	10801e0b 	ldhu	r2,120(r2)
2008308c:	10bfffcc 	andi	r2,r2,65535
20083090:	1004943a 	slli	r2,r2,16
20083094:	e0bff915 	stw	r2,-28(fp)

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
20083098:	e0bff704 	addi	r2,fp,-36
2008309c:	e13ffe17 	ldw	r4,-8(fp)
200830a0:	100b883a 	mov	r5,r2
200830a4:	000d883a 	mov	r6,zero
200830a8:	0082c100 	call	20082c10 <mmc_send_cmd>
200830ac:	e0bff615 	stw	r2,-40(fp)
		if (!err) {
200830b0:	e0bff617 	ldw	r2,-40(fp)
200830b4:	1000131e 	bne	r2,zero,20083104 <mmc_send_status+0xb0>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
200830b8:	e0bffa17 	ldw	r2,-24(fp)
200830bc:	1080400c 	andi	r2,r2,256
200830c0:	10000426 	beq	r2,zero,200830d4 <mmc_send_status+0x80>
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
200830c4:	e0bffa17 	ldw	r2,-24(fp)
200830c8:	1087800c 	andi	r2,r2,7680
200830cc:	10838018 	cmpnei	r2,r2,3584
200830d0:	1000191e 	bne	r2,zero,20083138 <mmc_send_status+0xe4>
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
200830d4:	e0fffa17 	ldw	r3,-24(fp)
200830d8:	00bf7e74 	movhi	r2,65017
200830dc:	10902004 	addi	r2,r2,16512
200830e0:	1884703a 	and	r2,r3,r2
200830e4:	10000e26 	beq	r2,zero,20083120 <mmc_send_status+0xcc>
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
200830e8:	e0bffa17 	ldw	r2,-24(fp)
200830ec:	01000034 	movhi	r4,0
200830f0:	21002e04 	addi	r4,r4,184
200830f4:	100b883a 	mov	r5,r2
200830f8:	0089be80 	call	20089be8 <printf>
				return COMM_ERR;
200830fc:	00bffb84 	movi	r2,-18
20083100:	00001506 	br	20083158 <mmc_send_status+0x104>
			}
		} else if (--retries < 0)
20083104:	e0bff517 	ldw	r2,-44(fp)
20083108:	10bfffc4 	addi	r2,r2,-1
2008310c:	e0bff515 	stw	r2,-44(fp)
20083110:	e0bff517 	ldw	r2,-44(fp)
20083114:	1000020e 	bge	r2,zero,20083120 <mmc_send_status+0xcc>
			return err;
20083118:	e0bff617 	ldw	r2,-40(fp)
2008311c:	00000e06 	br	20083158 <mmc_send_status+0x104>

		udelay(1000);
20083120:	0100fa04 	movi	r4,1000
20083124:	0082ac80 	call	20082ac8 <udelay>

	} while (timeout--);
20083128:	e0bfff17 	ldw	r2,-4(fp)
2008312c:	10ffffc4 	addi	r3,r2,-1
20083130:	e0ffff15 	stw	r3,-4(fp)
20083134:	103fd81e 	bne	r2,zero,20083098 <__flash_rwdata_start+0xfffe6f14>

	if (timeout <= 0) {
20083138:	e0bfff17 	ldw	r2,-4(fp)
2008313c:	00800516 	blt	zero,r2,20083154 <mmc_send_status+0x100>
		printf("Timeout waiting card ready\n\r");
20083140:	01000034 	movhi	r4,0
20083144:	21003404 	addi	r4,r4,208
20083148:	0089be80 	call	20089be8 <printf>
		return TIMEOUT;
2008314c:	00bffb44 	movi	r2,-19
20083150:	00000106 	br	20083158 <mmc_send_status+0x104>
	}

	return 0;
20083154:	0005883a 	mov	r2,zero
}
20083158:	e037883a 	mov	sp,fp
2008315c:	dfc00117 	ldw	ra,4(sp)
20083160:	df000017 	ldw	fp,0(sp)
20083164:	dec00204 	addi	sp,sp,8
20083168:	f800283a 	ret

2008316c <mmc_send_ext_csd>:

static int mmc_send_ext_csd(struct mmc *mmc, char *ext_csd) {
2008316c:	defff004 	addi	sp,sp,-64
20083170:	dfc00f15 	stw	ra,60(sp)
20083174:	df000e15 	stw	fp,56(sp)
20083178:	df000e04 	addi	fp,sp,56
2008317c:	e13ffe15 	stw	r4,-8(fp)
20083180:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20083184:	00800204 	movi	r2,8
20083188:	e0bff30d 	sth	r2,-52(fp)
	cmd.resp_type = MMC_RSP_R1;
2008318c:	00800544 	movi	r2,21
20083190:	e0bff415 	stw	r2,-48(fp)
	cmd.cmdarg = 0;
20083194:	e03ff515 	stw	zero,-44(fp)

	data.dest = (char *) ext_csd;
20083198:	e0bfff17 	ldw	r2,-4(fp)
2008319c:	e0bffa15 	stw	r2,-24(fp)
	data.blocks = 1;
200831a0:	00800044 	movi	r2,1
200831a4:	e0bffc15 	stw	r2,-16(fp)
	data.blocksize = 512;
200831a8:	00808004 	movi	r2,512
200831ac:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
200831b0:	00800044 	movi	r2,1
200831b4:	e0bffb15 	stw	r2,-20(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
200831b8:	e0fff304 	addi	r3,fp,-52
200831bc:	e0bffa04 	addi	r2,fp,-24
200831c0:	e13ffe17 	ldw	r4,-8(fp)
200831c4:	180b883a 	mov	r5,r3
200831c8:	100d883a 	mov	r6,r2
200831cc:	0082c100 	call	20082c10 <mmc_send_cmd>
200831d0:	e0bff215 	stw	r2,-56(fp)

	return err;
200831d4:	e0bff217 	ldw	r2,-56(fp)
}
200831d8:	e037883a 	mov	sp,fp
200831dc:	dfc00117 	ldw	ra,4(sp)
200831e0:	df000017 	ldw	fp,0(sp)
200831e4:	dec00204 	addi	sp,sp,8
200831e8:	f800283a 	ret

200831ec <mmc_switch>:

static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
200831ec:	defff104 	addi	sp,sp,-60
200831f0:	dfc00e15 	stw	ra,56(sp)
200831f4:	df000d15 	stw	fp,52(sp)
200831f8:	df000d04 	addi	fp,sp,52
200831fc:	e13ffc15 	stw	r4,-16(fp)
20083200:	2809883a 	mov	r4,r5
20083204:	3007883a 	mov	r3,r6
20083208:	3805883a 	mov	r2,r7
2008320c:	e13ffd05 	stb	r4,-12(fp)
20083210:	e0fffe05 	stb	r3,-8(fp)
20083214:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	int timeout = 1000;
20083218:	0080fa04 	movi	r2,1000
2008321c:	e0bff415 	stw	r2,-48(fp)
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
20083220:	00800184 	movi	r2,6
20083224:	e0bff50d 	sth	r2,-44(fp)
	cmd.resp_type = MMC_RSP_R1b;
20083228:	00800744 	movi	r2,29
2008322c:	e0bff615 	stw	r2,-40(fp)
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20083230:	e0bffe07 	ldb	r2,-8(fp)
20083234:	1004943a 	slli	r2,r2,16
20083238:	10c0c034 	orhi	r3,r2,768
			| (value << 8);
2008323c:	e0bfff07 	ldb	r2,-4(fp)
20083240:	1004923a 	slli	r2,r2,8
20083244:	1884b03a 	or	r2,r3,r2
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20083248:	e0bff715 	stw	r2,-36(fp)
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);
2008324c:	e0bff504 	addi	r2,fp,-44
20083250:	e13ffc17 	ldw	r4,-16(fp)
20083254:	100b883a 	mov	r5,r2
20083258:	000d883a 	mov	r6,zero
2008325c:	0082c100 	call	20082c10 <mmc_send_cmd>
20083260:	e0bff315 	stw	r2,-52(fp)

	/* Waiting for the ready status */
	if (!ret)
20083264:	e0bff317 	ldw	r2,-52(fp)
20083268:	1000041e 	bne	r2,zero,2008327c <mmc_switch+0x90>
		ret = mmc_send_status(mmc, timeout);
2008326c:	e13ffc17 	ldw	r4,-16(fp)
20083270:	e17ff417 	ldw	r5,-48(fp)
20083274:	00830540 	call	20083054 <mmc_send_status>
20083278:	e0bff315 	stw	r2,-52(fp)

	return ret;
2008327c:	e0bff317 	ldw	r2,-52(fp)

}
20083280:	e037883a 	mov	sp,fp
20083284:	dfc00117 	ldw	ra,4(sp)
20083288:	df000017 	ldw	fp,0(sp)
2008328c:	dec00204 	addi	sp,sp,8
20083290:	f800283a 	ret

20083294 <sd_switch>:

static int sd_switch(struct mmc *mmc, int mode, int group, char value,
		char *resp) {
20083294:	deffe804 	addi	sp,sp,-96
20083298:	dfc01715 	stw	ra,92(sp)
2008329c:	df001615 	stw	fp,88(sp)
200832a0:	df001604 	addi	fp,sp,88
200832a4:	e13ffc15 	stw	r4,-16(fp)
200832a8:	e17ffd15 	stw	r5,-12(fp)
200832ac:	e1bffe15 	stw	r6,-8(fp)
200832b0:	3805883a 	mov	r2,r7
200832b4:	e0bfff05 	stb	r2,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
200832b8:	00800184 	movi	r2,6
200832bc:	e0bff10d 	sth	r2,-60(fp)
	cmd.resp_type = MMC_RSP_R1;
200832c0:	00800544 	movi	r2,21
200832c4:	e0bff215 	stw	r2,-56(fp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
200832c8:	e0bffd17 	ldw	r2,-12(fp)
200832cc:	100697fa 	slli	r3,r2,31
200832d0:	00804034 	movhi	r2,256
200832d4:	10bfffc4 	addi	r2,r2,-1
200832d8:	1884b03a 	or	r2,r3,r2
200832dc:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg &= ~(0xf << (group * 4));
200832e0:	e0fff317 	ldw	r3,-52(fp)
200832e4:	e0bffe17 	ldw	r2,-8(fp)
200832e8:	1085883a 	add	r2,r2,r2
200832ec:	1085883a 	add	r2,r2,r2
200832f0:	1009883a 	mov	r4,r2
200832f4:	008003c4 	movi	r2,15
200832f8:	1104983a 	sll	r2,r2,r4
200832fc:	0084303a 	nor	r2,zero,r2
20083300:	1884703a 	and	r2,r3,r2
20083304:	e0bff315 	stw	r2,-52(fp)
	cmd.cmdarg |= value << (group * 4);
20083308:	e0fff317 	ldw	r3,-52(fp)
2008330c:	e13fff07 	ldb	r4,-4(fp)
20083310:	e0bffe17 	ldw	r2,-8(fp)
20083314:	1085883a 	add	r2,r2,r2
20083318:	1085883a 	add	r2,r2,r2
2008331c:	2084983a 	sll	r2,r4,r2
20083320:	1884b03a 	or	r2,r3,r2
20083324:	e0bff315 	stw	r2,-52(fp)

	data.dest = (char *) resp;
20083328:	e0800217 	ldw	r2,8(fp)
2008332c:	e0bff815 	stw	r2,-32(fp)
	data.blocksize = 64;
20083330:	00801004 	movi	r2,64
20083334:	e0bffb15 	stw	r2,-20(fp)
	data.blocks = 1;
20083338:	00800044 	movi	r2,1
2008333c:	e0bffa15 	stw	r2,-24(fp)
	data.flags = MMC_DATA_READ;
20083340:	00800044 	movi	r2,1
20083344:	e0bff915 	stw	r2,-28(fp)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);
20083348:	e0fff104 	addi	r3,fp,-60
2008334c:	e0bff804 	addi	r2,fp,-32
20083350:	e13ffc17 	ldw	r4,-16(fp)
20083354:	180b883a 	mov	r5,r3
20083358:	100d883a 	mov	r6,r2
2008335c:	0082c100 	call	20082c10 <mmc_send_cmd>
20083360:	e0bfeb15 	stw	r2,-84(fp)

	int i;
	uint* s = resp;
20083364:	e0800217 	ldw	r2,8(fp)
20083368:	e0bfec15 	stw	r2,-80(fp)
	for(i = 0; (i < 16); i++){
2008336c:	e03fea15 	stw	zero,-88(fp)
20083370:	00003706 	br	20083450 <sd_switch+0x1bc>
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20083374:	e0bfea17 	ldw	r2,-88(fp)
20083378:	1085883a 	add	r2,r2,r2
2008337c:	1085883a 	add	r2,r2,r2
20083380:	1007883a 	mov	r3,r2
20083384:	e0bfec17 	ldw	r2,-80(fp)
20083388:	10c5883a 	add	r2,r2,r3
2008338c:	10800017 	ldw	r2,0(r2)
20083390:	1004963a 	slli	r2,r2,24
20083394:	e0bfed15 	stw	r2,-76(fp)
		b1 = (s[i] & 0x0000ff00) << 8;
20083398:	e0bfea17 	ldw	r2,-88(fp)
2008339c:	1085883a 	add	r2,r2,r2
200833a0:	1085883a 	add	r2,r2,r2
200833a4:	1007883a 	mov	r3,r2
200833a8:	e0bfec17 	ldw	r2,-80(fp)
200833ac:	10c5883a 	add	r2,r2,r3
200833b0:	10800017 	ldw	r2,0(r2)
200833b4:	10bfc00c 	andi	r2,r2,65280
200833b8:	1004923a 	slli	r2,r2,8
200833bc:	e0bfee15 	stw	r2,-72(fp)
		b2 = (s[i] & 0x00ff0000) >> 8;
200833c0:	e0bfea17 	ldw	r2,-88(fp)
200833c4:	1085883a 	add	r2,r2,r2
200833c8:	1085883a 	add	r2,r2,r2
200833cc:	1007883a 	mov	r3,r2
200833d0:	e0bfec17 	ldw	r2,-80(fp)
200833d4:	10c5883a 	add	r2,r2,r3
200833d8:	10800017 	ldw	r2,0(r2)
200833dc:	10803fec 	andhi	r2,r2,255
200833e0:	1004d23a 	srli	r2,r2,8
200833e4:	e0bfef15 	stw	r2,-68(fp)
		b3 = (s[i] & 0xff000000) >> 24;
200833e8:	e0bfea17 	ldw	r2,-88(fp)
200833ec:	1085883a 	add	r2,r2,r2
200833f0:	1085883a 	add	r2,r2,r2
200833f4:	1007883a 	mov	r3,r2
200833f8:	e0bfec17 	ldw	r2,-80(fp)
200833fc:	10c5883a 	add	r2,r2,r3
20083400:	10800017 	ldw	r2,0(r2)
20083404:	1004d63a 	srli	r2,r2,24
20083408:	e0bff015 	stw	r2,-64(fp)
		s[i] = b0 | b1 | b2 | b3;
2008340c:	e0bfea17 	ldw	r2,-88(fp)
20083410:	1085883a 	add	r2,r2,r2
20083414:	1085883a 	add	r2,r2,r2
20083418:	1007883a 	mov	r3,r2
2008341c:	e0bfec17 	ldw	r2,-80(fp)
20083420:	10c5883a 	add	r2,r2,r3
20083424:	e13fed17 	ldw	r4,-76(fp)
20083428:	e0ffee17 	ldw	r3,-72(fp)
2008342c:	20c8b03a 	or	r4,r4,r3
20083430:	e0ffef17 	ldw	r3,-68(fp)
20083434:	20c8b03a 	or	r4,r4,r3
20083438:	e0fff017 	ldw	r3,-64(fp)
2008343c:	20c6b03a 	or	r3,r4,r3
20083440:	10c00015 	stw	r3,0(r2)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
20083444:	e0bfea17 	ldw	r2,-88(fp)
20083448:	10800044 	addi	r2,r2,1
2008344c:	e0bfea15 	stw	r2,-88(fp)
20083450:	e0bfea17 	ldw	r2,-88(fp)
20083454:	10800410 	cmplti	r2,r2,16
20083458:	103fc61e 	bne	r2,zero,20083374 <__flash_rwdata_start+0xfffe71f0>
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
	}
	return ret;
2008345c:	e0bfeb17 	ldw	r2,-84(fp)
}
20083460:	e037883a 	mov	sp,fp
20083464:	dfc00117 	ldw	ra,4(sp)
20083468:	df000017 	ldw	fp,0(sp)
2008346c:	dec00204 	addi	sp,sp,8
20083470:	f800283a 	ret

20083474 <sd_change_freq>:

static int sd_change_freq(struct mmc *mmc) {
20083474:	deffeb04 	addi	sp,sp,-84
20083478:	dfc01415 	stw	ra,80(sp)
2008347c:	df001315 	stw	fp,76(sp)
20083480:	df001304 	addi	fp,sp,76
20083484:	e13fff15 	stw	r4,-4(fp)
	static uint switch_status[16];
	struct mmc_data data;
	int timeout;

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;
20083488:	e0bfff17 	ldw	r2,-4(fp)
2008348c:	10001115 	stw	zero,68(r2)

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
20083490:	00800dc4 	movi	r2,55
20083494:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
20083498:	00800544 	movi	r2,21
2008349c:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = mmc->rca << 16;
200834a0:	e0bfff17 	ldw	r2,-4(fp)
200834a4:	10801e0b 	ldhu	r2,120(r2)
200834a8:	10bfffcc 	andi	r2,r2,65535
200834ac:	1004943a 	slli	r2,r2,16
200834b0:	e0bff615 	stw	r2,-40(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
200834b4:	e0bff404 	addi	r2,fp,-48
200834b8:	e13fff17 	ldw	r4,-4(fp)
200834bc:	100b883a 	mov	r5,r2
200834c0:	000d883a 	mov	r6,zero
200834c4:	0082c100 	call	20082c10 <mmc_send_cmd>
200834c8:	e0bfef15 	stw	r2,-68(fp)

	if (err)
200834cc:	e0bfef17 	ldw	r2,-68(fp)
200834d0:	10000226 	beq	r2,zero,200834dc <sd_change_freq+0x68>
		return err;
200834d4:	e0bfef17 	ldw	r2,-68(fp)
200834d8:	0000c306 	br	200837e8 <sd_change_freq+0x374>

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
200834dc:	00800cc4 	movi	r2,51
200834e0:	e0bff40d 	sth	r2,-48(fp)
	cmd.resp_type = MMC_RSP_R1;
200834e4:	00800544 	movi	r2,21
200834e8:	e0bff515 	stw	r2,-44(fp)
	cmd.cmdarg = 0;
200834ec:	e03ff615 	stw	zero,-40(fp)

	timeout = 3;
200834f0:	008000c4 	movi	r2,3
200834f4:	e0bfee15 	stw	r2,-72(fp)

	retry_scr: data.dest = (char *) scr;
200834f8:	d0a01204 	addi	r2,gp,-32696
200834fc:	e0bffb15 	stw	r2,-20(fp)
	data.blocksize = 8;
20083500:	00800204 	movi	r2,8
20083504:	e0bffe15 	stw	r2,-8(fp)
	data.blocks = 1;
20083508:	00800044 	movi	r2,1
2008350c:	e0bffd15 	stw	r2,-12(fp)
	data.flags = MMC_DATA_READ;
20083510:	00800044 	movi	r2,1
20083514:	e0bffc15 	stw	r2,-16(fp)

	err = mmc_send_cmd(mmc, &cmd, &data);
20083518:	e0fff404 	addi	r3,fp,-48
2008351c:	e0bffb04 	addi	r2,fp,-20
20083520:	e13fff17 	ldw	r4,-4(fp)
20083524:	180b883a 	mov	r5,r3
20083528:	100d883a 	mov	r6,r2
2008352c:	0082c100 	call	20082c10 <mmc_send_cmd>
20083530:	e0bfef15 	stw	r2,-68(fp)

	if (err) {
20083534:	e0bfef17 	ldw	r2,-68(fp)
20083538:	10000726 	beq	r2,zero,20083558 <sd_change_freq+0xe4>
		if (timeout--)
2008353c:	e0bfee17 	ldw	r2,-72(fp)
20083540:	10ffffc4 	addi	r3,r2,-1
20083544:	e0ffee15 	stw	r3,-72(fp)
20083548:	10000126 	beq	r2,zero,20083550 <sd_change_freq+0xdc>
			goto retry_scr;
2008354c:	003fea06 	br	200834f8 <__flash_rwdata_start+0xfffe7374>

		return err;
20083550:	e0bfef17 	ldw	r2,-68(fp)
20083554:	0000a406 	br	200837e8 <sd_change_freq+0x374>
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
20083558:	d0a01217 	ldw	r2,-32696(gp)
2008355c:	1004963a 	slli	r2,r2,24
20083560:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[0] & 0x0000ff00) << 8;
20083564:	d0a01217 	ldw	r2,-32696(gp)
20083568:	10bfc00c 	andi	r2,r2,65280
2008356c:	1004923a 	slli	r2,r2,8
20083570:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[0] & 0x00ff0000) >> 8;
20083574:	d0a01217 	ldw	r2,-32696(gp)
20083578:	10803fec 	andhi	r2,r2,255
2008357c:	1004d23a 	srli	r2,r2,8
20083580:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[0] & 0xff000000) >> 24;
20083584:	d0a01217 	ldw	r2,-32696(gp)
20083588:	1004d63a 	srli	r2,r2,24
2008358c:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[0] = b0 | b1 | b2 | b3;
20083590:	e0fff017 	ldw	r3,-64(fp)
20083594:	e0bff117 	ldw	r2,-60(fp)
20083598:	1886b03a 	or	r3,r3,r2
2008359c:	e0bff217 	ldw	r2,-56(fp)
200835a0:	1886b03a 	or	r3,r3,r2
200835a4:	e0bff317 	ldw	r2,-52(fp)
200835a8:	1886b03a 	or	r3,r3,r2
200835ac:	e0bfff17 	ldw	r2,-4(fp)
200835b0:	10c01415 	stw	r3,80(r2)

	b0 = (scr[1] & 0x000000ff) << 24;
200835b4:	d0a01304 	addi	r2,gp,-32692
200835b8:	10800017 	ldw	r2,0(r2)
200835bc:	1004963a 	slli	r2,r2,24
200835c0:	e0bff015 	stw	r2,-64(fp)
	b1 = (scr[1] & 0x0000ff00) << 8;
200835c4:	d0a01304 	addi	r2,gp,-32692
200835c8:	10800017 	ldw	r2,0(r2)
200835cc:	10bfc00c 	andi	r2,r2,65280
200835d0:	1004923a 	slli	r2,r2,8
200835d4:	e0bff115 	stw	r2,-60(fp)
	b2 = (scr[1] & 0x00ff0000) >> 8;
200835d8:	d0a01304 	addi	r2,gp,-32692
200835dc:	10800017 	ldw	r2,0(r2)
200835e0:	10803fec 	andhi	r2,r2,255
200835e4:	1004d23a 	srli	r2,r2,8
200835e8:	e0bff215 	stw	r2,-56(fp)
	b3 = (scr[1] & 0xff000000) >> 24;
200835ec:	d0a01304 	addi	r2,gp,-32692
200835f0:	10800017 	ldw	r2,0(r2)
200835f4:	1004d63a 	srli	r2,r2,24
200835f8:	e0bff315 	stw	r2,-52(fp)

	mmc->scr[1] = b0 | b1 | b2 | b3;
200835fc:	e0fff017 	ldw	r3,-64(fp)
20083600:	e0bff117 	ldw	r2,-60(fp)
20083604:	1886b03a 	or	r3,r3,r2
20083608:	e0bff217 	ldw	r2,-56(fp)
2008360c:	1886b03a 	or	r3,r3,r2
20083610:	e0bff317 	ldw	r2,-52(fp)
20083614:	1886b03a 	or	r3,r3,r2
20083618:	e0bfff17 	ldw	r2,-4(fp)
2008361c:	10c01515 	stw	r3,84(r2)

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
20083620:	e0bfff17 	ldw	r2,-4(fp)
20083624:	10801417 	ldw	r2,80(r2)
20083628:	1004d63a 	srli	r2,r2,24
2008362c:	108003cc 	andi	r2,r2,15
20083630:	10c00060 	cmpeqi	r3,r2,1
20083634:	1800091e 	bne	r3,zero,2008365c <sd_change_freq+0x1e8>
20083638:	0080032e 	bgeu	zero,r2,20083648 <sd_change_freq+0x1d4>
2008363c:	108000a0 	cmpeqi	r2,r2,2
20083640:	10000b1e 	bne	r2,zero,20083670 <sd_change_freq+0x1fc>
20083644:	00000f06 	br	20083684 <sd_change_freq+0x210>
	case 0:
		mmc->version = SD_VERSION_1_0;
20083648:	e0ffff17 	ldw	r3,-4(fp)
2008364c:	008000b4 	movhi	r2,2
20083650:	10800404 	addi	r2,r2,16
20083654:	18800a15 	stw	r2,40(r3)
		break;
20083658:	00000f06 	br	20083698 <sd_change_freq+0x224>
	case 1:
		mmc->version = SD_VERSION_1_10;
2008365c:	e0ffff17 	ldw	r3,-4(fp)
20083660:	008000b4 	movhi	r2,2
20083664:	10800684 	addi	r2,r2,26
20083668:	18800a15 	stw	r2,40(r3)
		break;
2008366c:	00000a06 	br	20083698 <sd_change_freq+0x224>
	case 2:
		mmc->version = SD_VERSION_2;
20083670:	e0ffff17 	ldw	r3,-4(fp)
20083674:	008000b4 	movhi	r2,2
20083678:	10800804 	addi	r2,r2,32
2008367c:	18800a15 	stw	r2,40(r3)
		break;
20083680:	00000506 	br	20083698 <sd_change_freq+0x224>
	default:
		mmc->version = SD_VERSION_1_0;
20083684:	e0ffff17 	ldw	r3,-4(fp)
20083688:	008000b4 	movhi	r2,2
2008368c:	10800404 	addi	r2,r2,16
20083690:	18800a15 	stw	r2,40(r3)
		break;
20083694:	0001883a 	nop
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
20083698:	e0bfff17 	ldw	r2,-4(fp)
2008369c:	10801417 	ldw	r2,80(r2)
200836a0:	1080012c 	andhi	r2,r2,4
200836a4:	10000526 	beq	r2,zero,200836bc <sd_change_freq+0x248>
		mmc->card_caps |= MMC_MODE_4BIT;
200836a8:	e0bfff17 	ldw	r2,-4(fp)
200836ac:	10801117 	ldw	r2,68(r2)
200836b0:	10c04014 	ori	r3,r2,256
200836b4:	e0bfff17 	ldw	r2,-4(fp)
200836b8:	10c01115 	stw	r3,68(r2)

	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
200836bc:	e0bfff17 	ldw	r2,-4(fp)
200836c0:	10c00a17 	ldw	r3,40(r2)
200836c4:	008000b4 	movhi	r2,2
200836c8:	10800404 	addi	r2,r2,16
200836cc:	1880021e 	bne	r3,r2,200836d8 <sd_change_freq+0x264>
		return 0;
200836d0:	0005883a 	mov	r2,zero
200836d4:	00004406 	br	200837e8 <sd_change_freq+0x374>

	timeout = 4;
200836d8:	00800104 	movi	r2,4
200836dc:	e0bfee15 	stw	r2,-72(fp)
	while (timeout--) {
200836e0:	00001306 	br	20083730 <sd_change_freq+0x2bc>
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1, (char *) switch_status);
200836e4:	00800034 	movhi	r2,0
200836e8:	108a5204 	addi	r2,r2,10568
200836ec:	d8800015 	stw	r2,0(sp)
200836f0:	e13fff17 	ldw	r4,-4(fp)
200836f4:	000b883a 	mov	r5,zero
200836f8:	000d883a 	mov	r6,zero
200836fc:	01c00044 	movi	r7,1
20083700:	00832940 	call	20083294 <sd_switch>
20083704:	e0bfef15 	stw	r2,-68(fp)

		if (err)
20083708:	e0bfef17 	ldw	r2,-68(fp)
2008370c:	10000226 	beq	r2,zero,20083718 <sd_change_freq+0x2a4>
			return err;
20083710:	e0bfef17 	ldw	r2,-68(fp)
20083714:	00003406 	br	200837e8 <sd_change_freq+0x374>

		MMC_PRINT(("switch status 7 %08x\n\r", switch_status[7]));
		MMC_PRINT(("switch status 3 %08x\n\r", switch_status[3]));
		MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
		/* The high-speed function is busy.  Try again */
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
20083718:	00800034 	movhi	r2,0
2008371c:	108a5204 	addi	r2,r2,10568
20083720:	10800717 	ldw	r2,28(r2)
20083724:	108000ac 	andhi	r2,r2,2
20083728:	1000011e 	bne	r2,zero,20083730 <sd_change_freq+0x2bc>
			break;
2008372c:	00000406 	br	20083740 <sd_change_freq+0x2cc>
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
20083730:	e0bfee17 	ldw	r2,-72(fp)
20083734:	10ffffc4 	addi	r3,r2,-1
20083738:	e0ffee15 	stw	r3,-72(fp)
2008373c:	103fe91e 	bne	r2,zero,200836e4 <__flash_rwdata_start+0xfffe7560>
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(switch_status[3] & SD_HIGHSPEED_SUPPORTED)){
20083740:	00800034 	movhi	r2,0
20083744:	108a5204 	addi	r2,r2,10568
20083748:	10800317 	ldw	r2,12(r2)
2008374c:	108000ac 	andhi	r2,r2,2
20083750:	1000021e 	bne	r2,zero,2008375c <sd_change_freq+0x2e8>
		MMC_PRINT(("SD high speed not supported!\n"));
		return 0;
20083754:	0005883a 	mov	r2,zero
20083758:	00002306 	br	200837e8 <sd_change_freq+0x374>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
2008375c:	e0bfff17 	ldw	r2,-4(fp)
20083760:	10801217 	ldw	r2,72(r2)
20083764:	1080040c 	andi	r2,r2,16
20083768:	10000426 	beq	r2,zero,2008377c <sd_change_freq+0x308>
2008376c:	e0bfff17 	ldw	r2,-4(fp)
20083770:	10801217 	ldw	r2,72(r2)
20083774:	1080004c 	andi	r2,r2,1
20083778:	1000021e 	bne	r2,zero,20083784 <sd_change_freq+0x310>
		return 0;
2008377c:	0005883a 	mov	r2,zero
20083780:	00001906 	br	200837e8 <sd_change_freq+0x374>

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (char *) switch_status);
20083784:	00800034 	movhi	r2,0
20083788:	108a5204 	addi	r2,r2,10568
2008378c:	d8800015 	stw	r2,0(sp)
20083790:	e13fff17 	ldw	r4,-4(fp)
20083794:	01400044 	movi	r5,1
20083798:	000d883a 	mov	r6,zero
2008379c:	01c00044 	movi	r7,1
200837a0:	00832940 	call	20083294 <sd_switch>
200837a4:	e0bfef15 	stw	r2,-68(fp)
	MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
	if (err)
200837a8:	e0bfef17 	ldw	r2,-68(fp)
200837ac:	10000226 	beq	r2,zero,200837b8 <sd_change_freq+0x344>
		return err;
200837b0:	e0bfef17 	ldw	r2,-68(fp)
200837b4:	00000c06 	br	200837e8 <sd_change_freq+0x374>

	if ((switch_status[4] & 0x0f000000) == 0x01000000){
200837b8:	00800034 	movhi	r2,0
200837bc:	108a5204 	addi	r2,r2,10568
200837c0:	10800417 	ldw	r2,16(r2)
200837c4:	10c3c02c 	andhi	r3,r2,3840
200837c8:	00804034 	movhi	r2,256
200837cc:	1880051e 	bne	r3,r2,200837e4 <sd_change_freq+0x370>
		MMC_PRINT(("High speed supported!\n"));
		mmc->card_caps |= MMC_MODE_HS;
200837d0:	e0bfff17 	ldw	r2,-4(fp)
200837d4:	10801117 	ldw	r2,68(r2)
200837d8:	10c00054 	ori	r3,r2,1
200837dc:	e0bfff17 	ldw	r2,-4(fp)
200837e0:	10c01115 	stw	r3,68(r2)
	}

	return 0;
200837e4:	0005883a 	mov	r2,zero
}
200837e8:	e037883a 	mov	sp,fp
200837ec:	dfc00117 	ldw	ra,4(sp)
200837f0:	df000017 	ldw	fp,0(sp)
200837f4:	dec00204 	addi	sp,sp,8
200837f8:	f800283a 	ret

200837fc <mmc_change_freq>:

static int mmc_change_freq(struct mmc *mmc) {
200837fc:	deff7b04 	addi	sp,sp,-532
20083800:	dfc08415 	stw	ra,528(sp)
20083804:	df008315 	stw	fp,524(sp)
20083808:	df008304 	addi	fp,sp,524
2008380c:	e13fff15 	stw	r4,-4(fp)
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
20083810:	e0bfff17 	ldw	r2,-4(fp)
20083814:	10001115 	stw	zero,68(r2)

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
20083818:	e0bfff17 	ldw	r2,-4(fp)
2008381c:	10c00a17 	ldw	r3,40(r2)
20083820:	00800074 	movhi	r2,1
20083824:	10800fc4 	addi	r2,r2,63
20083828:	10c00236 	bltu	r2,r3,20083834 <mmc_change_freq+0x38>
		return 0;
2008382c:	0005883a 	mov	r2,zero
20083830:	00003606 	br	2008390c <mmc_change_freq+0x110>

	err = mmc_send_ext_csd(mmc, ext_csd);
20083834:	e0bf7e44 	addi	r2,fp,-519
20083838:	e13fff17 	ldw	r4,-4(fp)
2008383c:	100b883a 	mov	r5,r2
20083840:	008316c0 	call	2008316c <mmc_send_ext_csd>
20083844:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
20083848:	e0bf7d17 	ldw	r2,-524(fp)
2008384c:	10000226 	beq	r2,zero,20083858 <mmc_change_freq+0x5c>
		return err;
20083850:	e0bf7d17 	ldw	r2,-524(fp)
20083854:	00002d06 	br	2008390c <mmc_change_freq+0x110>

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
20083858:	e0bfaf43 	ldbu	r2,-323(fp)
2008385c:	108003cc 	andi	r2,r2,15
20083860:	e0bf7e05 	stb	r2,-520(fp)

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);
20083864:	e13fff17 	ldw	r4,-4(fp)
20083868:	01400044 	movi	r5,1
2008386c:	01bfee44 	movi	r6,-71
20083870:	01c00044 	movi	r7,1
20083874:	00831ec0 	call	200831ec <mmc_switch>
20083878:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
2008387c:	e0bf7d17 	ldw	r2,-524(fp)
20083880:	10000226 	beq	r2,zero,2008388c <mmc_change_freq+0x90>
		return err;
20083884:	e0bf7d17 	ldw	r2,-524(fp)
20083888:	00002006 	br	2008390c <mmc_change_freq+0x110>

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);
2008388c:	e0bf7e44 	addi	r2,fp,-519
20083890:	e13fff17 	ldw	r4,-4(fp)
20083894:	100b883a 	mov	r5,r2
20083898:	008316c0 	call	2008316c <mmc_send_ext_csd>
2008389c:	e0bf7d15 	stw	r2,-524(fp)

	if (err)
200838a0:	e0bf7d17 	ldw	r2,-524(fp)
200838a4:	10000226 	beq	r2,zero,200838b0 <mmc_change_freq+0xb4>
		return err;
200838a8:	e0bf7d17 	ldw	r2,-524(fp)
200838ac:	00001706 	br	2008390c <mmc_change_freq+0x110>

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
200838b0:	e0bfac83 	ldbu	r2,-334(fp)
200838b4:	10803fcc 	andi	r2,r2,255
200838b8:	1080201c 	xori	r2,r2,128
200838bc:	10bfe004 	addi	r2,r2,-128
200838c0:	1000021e 	bne	r2,zero,200838cc <mmc_change_freq+0xd0>
		return 0;
200838c4:	0005883a 	mov	r2,zero
200838c8:	00001006 	br	2008390c <mmc_change_freq+0x110>

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
200838cc:	e0bf7e03 	ldbu	r2,-520(fp)
200838d0:	10803fcc 	andi	r2,r2,255
200838d4:	1080008c 	andi	r2,r2,2
200838d8:	10000626 	beq	r2,zero,200838f4 <mmc_change_freq+0xf8>
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
200838dc:	e0bfff17 	ldw	r2,-4(fp)
200838e0:	10801117 	ldw	r2,68(r2)
200838e4:	10c00454 	ori	r3,r2,17
200838e8:	e0bfff17 	ldw	r2,-4(fp)
200838ec:	10c01115 	stw	r3,68(r2)
200838f0:	00000506 	br	20083908 <mmc_change_freq+0x10c>
	else
		mmc->card_caps |= MMC_MODE_HS;
200838f4:	e0bfff17 	ldw	r2,-4(fp)
200838f8:	10801117 	ldw	r2,68(r2)
200838fc:	10c00054 	ori	r3,r2,1
20083900:	e0bfff17 	ldw	r2,-4(fp)
20083904:	10c01115 	stw	r3,68(r2)

	return 0;
20083908:	0005883a 	mov	r2,zero
}
2008390c:	e037883a 	mov	sp,fp
20083910:	dfc00117 	ldw	ra,4(sp)
20083914:	df000017 	ldw	fp,0(sp)
20083918:	dec00204 	addi	sp,sp,8
2008391c:	f800283a 	ret

20083920 <mmc_startup>:

static int mmc_startup(struct mmc *mmc) {
20083920:	defeeb04 	addi	sp,sp,-1108
20083924:	dfc11415 	stw	ra,1104(sp)
20083928:	df011315 	stw	fp,1100(sp)
2008392c:	df011304 	addi	fp,sp,1100
20083930:	e13fff15 	stw	r4,-4(fp)
	uint mult, freq;
	uint cmult, csize, capacity;
	struct mmc_cmd cmd;
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;
20083934:	0080fa04 	movi	r2,1000
20083938:	e0bef115 	stw	r2,-1084(fp)

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
2008393c:	00800084 	movi	r2,2
20083940:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
20083944:	008001c4 	movi	r2,7
20083948:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = 0;
2008394c:	e03efa15 	stw	zero,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20083950:	e0bef804 	addi	r2,fp,-1056
20083954:	e13fff17 	ldw	r4,-4(fp)
20083958:	100b883a 	mov	r5,r2
2008395c:	000d883a 	mov	r6,zero
20083960:	0082c100 	call	20082c10 <mmc_send_cmd>
20083964:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20083968:	e0beed17 	ldw	r2,-1100(fp)
2008396c:	10000226 	beq	r2,zero,20083978 <mmc_startup+0x58>
		return err;
20083970:	e0beed17 	ldw	r2,-1100(fp)
20083974:	00023006 	br	20084238 <mmc_startup+0x918>

	memcpy(mmc->cid, cmd.response, 16);
20083978:	e0bfff17 	ldw	r2,-4(fp)
2008397c:	10c01a04 	addi	r3,r2,104
20083980:	e0bef804 	addi	r2,fp,-1056
20083984:	10800304 	addi	r2,r2,12
20083988:	1809883a 	mov	r4,r3
2008398c:	100b883a 	mov	r5,r2
20083990:	01800404 	movi	r6,16
20083994:	00899600 	call	20089960 <memcpy>
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20083998:	008000c4 	movi	r2,3
2008399c:	e0bef80d 	sth	r2,-1056(fp)
	cmd.cmdarg = mmc->rca << 16;
200839a0:	e0bfff17 	ldw	r2,-4(fp)
200839a4:	10801e0b 	ldhu	r2,120(r2)
200839a8:	10bfffcc 	andi	r2,r2,65535
200839ac:	1004943a 	slli	r2,r2,16
200839b0:	e0befa15 	stw	r2,-1048(fp)
	cmd.resp_type = MMC_RSP_R6;
200839b4:	00800544 	movi	r2,21
200839b8:	e0bef915 	stw	r2,-1052(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
200839bc:	e0bef804 	addi	r2,fp,-1056
200839c0:	e13fff17 	ldw	r4,-4(fp)
200839c4:	100b883a 	mov	r5,r2
200839c8:	000d883a 	mov	r6,zero
200839cc:	0082c100 	call	20082c10 <mmc_send_cmd>
200839d0:	e0beed15 	stw	r2,-1100(fp)

	if (err)
200839d4:	e0beed17 	ldw	r2,-1100(fp)
200839d8:	10000226 	beq	r2,zero,200839e4 <mmc_startup+0xc4>
		return err;
200839dc:	e0beed17 	ldw	r2,-1100(fp)
200839e0:	00021506 	br	20084238 <mmc_startup+0x918>

	if (IS_SD(mmc))
200839e4:	e0bfff17 	ldw	r2,-4(fp)
200839e8:	10800a17 	ldw	r2,40(r2)
200839ec:	108000ac 	andhi	r2,r2,2
200839f0:	10000526 	beq	r2,zero,20083a08 <mmc_startup+0xe8>
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;
200839f4:	e0befb17 	ldw	r2,-1044(fp)
200839f8:	1004d43a 	srli	r2,r2,16
200839fc:	1007883a 	mov	r3,r2
20083a00:	e0bfff17 	ldw	r2,-4(fp)
20083a04:	10c01e0d 	sth	r3,120(r2)

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20083a08:	00800244 	movi	r2,9
20083a0c:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R2;
20083a10:	008001c4 	movi	r2,7
20083a14:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20083a18:	e0bfff17 	ldw	r2,-4(fp)
20083a1c:	10801e0b 	ldhu	r2,120(r2)
20083a20:	10bfffcc 	andi	r2,r2,65535
20083a24:	1004943a 	slli	r2,r2,16
20083a28:	e0befa15 	stw	r2,-1048(fp)

	err = mmc_send_cmd(mmc, &cmd, NULL);
20083a2c:	e0bef804 	addi	r2,fp,-1056
20083a30:	e13fff17 	ldw	r4,-4(fp)
20083a34:	100b883a 	mov	r5,r2
20083a38:	000d883a 	mov	r6,zero
20083a3c:	0082c100 	call	20082c10 <mmc_send_cmd>
20083a40:	e0beed15 	stw	r2,-1100(fp)

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
20083a44:	e13fff17 	ldw	r4,-4(fp)
20083a48:	e17ef117 	ldw	r5,-1084(fp)
20083a4c:	00830540 	call	20083054 <mmc_send_status>

	if (err)
20083a50:	e0beed17 	ldw	r2,-1100(fp)
20083a54:	10000226 	beq	r2,zero,20083a60 <mmc_startup+0x140>
		return err;
20083a58:	e0beed17 	ldw	r2,-1100(fp)
20083a5c:	0001f606 	br	20084238 <mmc_startup+0x918>

	mmc->csd[0] = cmd.response[0];
20083a60:	e0fefb17 	ldw	r3,-1044(fp)
20083a64:	e0bfff17 	ldw	r2,-4(fp)
20083a68:	10c01615 	stw	r3,88(r2)
	mmc->csd[1] = cmd.response[1];
20083a6c:	e0fefc17 	ldw	r3,-1040(fp)
20083a70:	e0bfff17 	ldw	r2,-4(fp)
20083a74:	10c01715 	stw	r3,92(r2)
	mmc->csd[2] = cmd.response[2];
20083a78:	e0fefd17 	ldw	r3,-1036(fp)
20083a7c:	e0bfff17 	ldw	r2,-4(fp)
20083a80:	10c01815 	stw	r3,96(r2)
	mmc->csd[3] = cmd.response[3];
20083a84:	e0fefe17 	ldw	r3,-1032(fp)
20083a88:	e0bfff17 	ldw	r2,-4(fp)
20083a8c:	10c01915 	stw	r3,100(r2)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20083a90:	e0bfff17 	ldw	r2,-4(fp)
20083a94:	10c00a17 	ldw	r3,40(r2)
20083a98:	00800074 	movhi	r2,1
20083a9c:	1880311e 	bne	r3,r2,20083b64 <mmc_startup+0x244>
		int version = (cmd.response[0] >> 26) & 0xf;
20083aa0:	e0befb17 	ldw	r2,-1044(fp)
20083aa4:	1004d6ba 	srli	r2,r2,26
20083aa8:	108003cc 	andi	r2,r2,15
20083aac:	e0bef215 	stw	r2,-1080(fp)

		switch (version) {
20083ab0:	e0bef217 	ldw	r2,-1080(fp)
20083ab4:	10800168 	cmpgeui	r2,r2,5
20083ab8:	1000251e 	bne	r2,zero,20083b50 <mmc_startup+0x230>
20083abc:	e0bef217 	ldw	r2,-1080(fp)
20083ac0:	100690ba 	slli	r3,r2,2
20083ac4:	00880234 	movhi	r2,8200
20083ac8:	108eb604 	addi	r2,r2,15064
20083acc:	1885883a 	add	r2,r3,r2
20083ad0:	10800017 	ldw	r2,0(r2)
20083ad4:	1000683a 	jmp	r2
20083ad8:	20083aec 	andhi	zero,r4,8427
20083adc:	20083b00 	call	220083b0 <__flash_rwdata_start+0x1f6c22c>
20083ae0:	20083b14 	ori	zero,r4,8428
20083ae4:	20083b28 	cmpgeui	zero,r4,8428
20083ae8:	20083b3c 	xorhi	zero,r4,8428
		case 0:
			mmc->version = MMC_VERSION_1_2;
20083aec:	e0ffff17 	ldw	r3,-4(fp)
20083af0:	00800074 	movhi	r2,1
20083af4:	10800484 	addi	r2,r2,18
20083af8:	18800a15 	stw	r2,40(r3)
			break;
20083afc:	00001906 	br	20083b64 <mmc_startup+0x244>
		case 1:
			mmc->version = MMC_VERSION_1_4;
20083b00:	e0ffff17 	ldw	r3,-4(fp)
20083b04:	00800074 	movhi	r2,1
20083b08:	10800504 	addi	r2,r2,20
20083b0c:	18800a15 	stw	r2,40(r3)
			break;
20083b10:	00001406 	br	20083b64 <mmc_startup+0x244>
		case 2:
			mmc->version = MMC_VERSION_2_2;
20083b14:	e0ffff17 	ldw	r3,-4(fp)
20083b18:	00800074 	movhi	r2,1
20083b1c:	10800884 	addi	r2,r2,34
20083b20:	18800a15 	stw	r2,40(r3)
			break;
20083b24:	00000f06 	br	20083b64 <mmc_startup+0x244>
		case 3:
			mmc->version = MMC_VERSION_3;
20083b28:	e0ffff17 	ldw	r3,-4(fp)
20083b2c:	00800074 	movhi	r2,1
20083b30:	10800c04 	addi	r2,r2,48
20083b34:	18800a15 	stw	r2,40(r3)
			break;
20083b38:	00000a06 	br	20083b64 <mmc_startup+0x244>
		case 4:
			mmc->version = MMC_VERSION_4;
20083b3c:	e0ffff17 	ldw	r3,-4(fp)
20083b40:	00800074 	movhi	r2,1
20083b44:	10801004 	addi	r2,r2,64
20083b48:	18800a15 	stw	r2,40(r3)
			break;
20083b4c:	00000506 	br	20083b64 <mmc_startup+0x244>
		default:
			mmc->version = MMC_VERSION_1_2;
20083b50:	e0ffff17 	ldw	r3,-4(fp)
20083b54:	00800074 	movhi	r2,1
20083b58:	10800484 	addi	r2,r2,18
20083b5c:	18800a15 	stw	r2,40(r3)
			break;
20083b60:	0001883a 	nop
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20083b64:	e0befb17 	ldw	r2,-1044(fp)
20083b68:	10c001cc 	andi	r3,r2,7
20083b6c:	00800034 	movhi	r2,0
20083b70:	10801a04 	addi	r2,r2,104
20083b74:	18c7883a 	add	r3,r3,r3
20083b78:	18c7883a 	add	r3,r3,r3
20083b7c:	10c5883a 	add	r2,r2,r3
20083b80:	10800017 	ldw	r2,0(r2)
20083b84:	e0bef315 	stw	r2,-1076(fp)
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20083b88:	e0befb17 	ldw	r2,-1044(fp)
20083b8c:	1004d0fa 	srli	r2,r2,3
20083b90:	10c003cc 	andi	r3,r2,15
20083b94:	00800034 	movhi	r2,0
20083b98:	10801e04 	addi	r2,r2,120
20083b9c:	18c7883a 	add	r3,r3,r3
20083ba0:	18c7883a 	add	r3,r3,r3
20083ba4:	10c5883a 	add	r2,r2,r3
20083ba8:	10800017 	ldw	r2,0(r2)
20083bac:	e0bef415 	stw	r2,-1072(fp)

	mmc->tran_speed = freq * mult;
20083bb0:	e0fef317 	ldw	r3,-1076(fp)
20083bb4:	e0bef417 	ldw	r2,-1072(fp)
20083bb8:	1887383a 	mul	r3,r3,r2
20083bbc:	e0bfff17 	ldw	r2,-4(fp)
20083bc0:	10c01f15 	stw	r3,124(r2)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083bc4:	e0befc17 	ldw	r2,-1040(fp)
20083bc8:	1004d43a 	srli	r2,r2,16
20083bcc:	108003cc 	andi	r2,r2,15
20083bd0:	00c00044 	movi	r3,1
20083bd4:	1884983a 	sll	r2,r3,r2
20083bd8:	1007883a 	mov	r3,r2
20083bdc:	e0bfff17 	ldw	r2,-4(fp)
20083be0:	10c02015 	stw	r3,128(r2)

	if (IS_SD(mmc))
20083be4:	e0bfff17 	ldw	r2,-4(fp)
20083be8:	10800a17 	ldw	r2,40(r2)
20083bec:	108000ac 	andhi	r2,r2,2
20083bf0:	10000526 	beq	r2,zero,20083c08 <mmc_startup+0x2e8>
		mmc->write_bl_len = mmc->read_bl_len;
20083bf4:	e0bfff17 	ldw	r2,-4(fp)
20083bf8:	10c02017 	ldw	r3,128(r2)
20083bfc:	e0bfff17 	ldw	r2,-4(fp)
20083c00:	10c02115 	stw	r3,132(r2)
20083c04:	00000806 	br	20083c28 <mmc_startup+0x308>
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
20083c08:	e0befe17 	ldw	r2,-1032(fp)
20083c0c:	1004d5ba 	srli	r2,r2,22
20083c10:	108003cc 	andi	r2,r2,15
20083c14:	00c00044 	movi	r3,1
20083c18:	1884983a 	sll	r2,r3,r2
20083c1c:	1007883a 	mov	r3,r2
20083c20:	e0bfff17 	ldw	r2,-4(fp)
20083c24:	10c02115 	stw	r3,132(r2)

	if (mmc->high_capacity) {
20083c28:	e0bfff17 	ldw	r2,-4(fp)
20083c2c:	10800e17 	ldw	r2,56(r2)
20083c30:	10000c26 	beq	r2,zero,20083c64 <mmc_startup+0x344>
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
20083c34:	e0bfff17 	ldw	r2,-4(fp)
20083c38:	10801717 	ldw	r2,92(r2)
20083c3c:	10800fcc 	andi	r2,r2,63
20083c40:	1006943a 	slli	r3,r2,16
20083c44:	e0bfff17 	ldw	r2,-4(fp)
20083c48:	10801817 	ldw	r2,96(r2)
20083c4c:	1004d43a 	srli	r2,r2,16
20083c50:	1884b03a 	or	r2,r3,r2
20083c54:	e0bef015 	stw	r2,-1088(fp)
		cmult = 8;
20083c58:	00800204 	movi	r2,8
20083c5c:	e0beef15 	stw	r2,-1092(fp)
20083c60:	00001206 	br	20083cac <mmc_startup+0x38c>
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20083c64:	e0bfff17 	ldw	r2,-4(fp)
20083c68:	10801717 	ldw	r2,92(r2)
20083c6c:	1080ffcc 	andi	r2,r2,1023
20083c70:	1085883a 	add	r2,r2,r2
20083c74:	1085883a 	add	r2,r2,r2
20083c78:	1007883a 	mov	r3,r2
20083c7c:	e0bfff17 	ldw	r2,-4(fp)
20083c80:	10801817 	ldw	r2,96(r2)
20083c84:	1004d7ba 	srli	r2,r2,30
20083c88:	1884b03a 	or	r2,r3,r2
20083c8c:	e0bef015 	stw	r2,-1088(fp)
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20083c90:	e0bfff17 	ldw	r2,-4(fp)
20083c94:	10c01817 	ldw	r3,96(r2)
20083c98:	00800134 	movhi	r2,4
20083c9c:	10a00004 	addi	r2,r2,-32768
20083ca0:	1884703a 	and	r2,r3,r2
20083ca4:	1004d3fa 	srli	r2,r2,15
20083ca8:	e0beef15 	stw	r2,-1092(fp)
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
20083cac:	e0bef017 	ldw	r2,-1088(fp)
20083cb0:	10800044 	addi	r2,r2,1
20083cb4:	e0feef17 	ldw	r3,-1092(fp)
20083cb8:	18c00084 	addi	r3,r3,2
20083cbc:	10c6983a 	sll	r3,r2,r3
20083cc0:	e0bfff17 	ldw	r2,-4(fp)
20083cc4:	10c02315 	stw	r3,140(r2)
	mmc->capacity *= mmc->read_bl_len;
20083cc8:	e0bfff17 	ldw	r2,-4(fp)
20083ccc:	10c02317 	ldw	r3,140(r2)
20083cd0:	e0bfff17 	ldw	r2,-4(fp)
20083cd4:	10802017 	ldw	r2,128(r2)
20083cd8:	1887383a 	mul	r3,r3,r2
20083cdc:	e0bfff17 	ldw	r2,-4(fp)
20083ce0:	10c02315 	stw	r3,140(r2)

	if (mmc->read_bl_len > 512)
20083ce4:	e0bfff17 	ldw	r2,-4(fp)
20083ce8:	10802017 	ldw	r2,128(r2)
20083cec:	10808070 	cmpltui	r2,r2,513
20083cf0:	1000031e 	bne	r2,zero,20083d00 <mmc_startup+0x3e0>
		mmc->read_bl_len = 512;
20083cf4:	e0bfff17 	ldw	r2,-4(fp)
20083cf8:	00c08004 	movi	r3,512
20083cfc:	10c02015 	stw	r3,128(r2)

	if (mmc->write_bl_len > 512)
20083d00:	e0bfff17 	ldw	r2,-4(fp)
20083d04:	10802117 	ldw	r2,132(r2)
20083d08:	10808070 	cmpltui	r2,r2,513
20083d0c:	1000031e 	bne	r2,zero,20083d1c <mmc_startup+0x3fc>
		mmc->write_bl_len = 512;
20083d10:	e0bfff17 	ldw	r2,-4(fp)
20083d14:	00c08004 	movi	r3,512
20083d18:	10c02115 	stw	r3,132(r2)

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20083d1c:	008001c4 	movi	r2,7
20083d20:	e0bef80d 	sth	r2,-1056(fp)
	cmd.resp_type = MMC_RSP_R1;
20083d24:	00800544 	movi	r2,21
20083d28:	e0bef915 	stw	r2,-1052(fp)
	cmd.cmdarg = mmc->rca << 16;
20083d2c:	e0bfff17 	ldw	r2,-4(fp)
20083d30:	10801e0b 	ldhu	r2,120(r2)
20083d34:	10bfffcc 	andi	r2,r2,65535
20083d38:	1004943a 	slli	r2,r2,16
20083d3c:	e0befa15 	stw	r2,-1048(fp)
	err = mmc_send_cmd(mmc, &cmd, NULL);
20083d40:	e0bef804 	addi	r2,fp,-1056
20083d44:	e13fff17 	ldw	r4,-4(fp)
20083d48:	100b883a 	mov	r5,r2
20083d4c:	000d883a 	mov	r6,zero
20083d50:	0082c100 	call	20082c10 <mmc_send_cmd>
20083d54:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20083d58:	e0beed17 	ldw	r2,-1100(fp)
20083d5c:	10000226 	beq	r2,zero,20083d68 <mmc_startup+0x448>
		return err;
20083d60:	e0beed17 	ldw	r2,-1100(fp)
20083d64:	00013406 	br	20084238 <mmc_startup+0x918>

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20083d68:	e0bfff17 	ldw	r2,-4(fp)
20083d6c:	00c00044 	movi	r3,1
20083d70:	10c02215 	stw	r3,136(r2)
	mmc->part_config = MMCPART_NOAVAILABLE;
20083d74:	e0bfff17 	ldw	r2,-4(fp)
20083d78:	00ffffc4 	movi	r3,-1
20083d7c:	10c01e85 	stb	r3,122(r2)
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20083d80:	e0bfff17 	ldw	r2,-4(fp)
20083d84:	10800a17 	ldw	r2,40(r2)
20083d88:	108000ac 	andhi	r2,r2,2
20083d8c:	1000621e 	bne	r2,zero,20083f18 <mmc_startup+0x5f8>
20083d90:	e0bfff17 	ldw	r2,-4(fp)
20083d94:	10c00a17 	ldw	r3,40(r2)
20083d98:	00800074 	movhi	r2,1
20083d9c:	10800fc4 	addi	r2,r2,63
20083da0:	10c05d2e 	bgeu	r2,r3,20083f18 <mmc_startup+0x5f8>
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
20083da4:	e0beff04 	addi	r2,fp,-1028
20083da8:	e13fff17 	ldw	r4,-4(fp)
20083dac:	100b883a 	mov	r5,r2
20083db0:	008316c0 	call	2008316c <mmc_send_ext_csd>
20083db4:	e0beed15 	stw	r2,-1100(fp)
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
20083db8:	e0beed17 	ldw	r2,-1100(fp)
20083dbc:	1005003a 	cmpeq	r2,r2,zero
20083dc0:	1007883a 	mov	r3,r2
20083dc4:	e0bf2f03 	ldbu	r2,-836(fp)
20083dc8:	10803fcc 	andi	r2,r2,255
20083dcc:	1080201c 	xori	r2,r2,128
20083dd0:	10bfe004 	addi	r2,r2,-128
20083dd4:	10800088 	cmpgei	r2,r2,2
20083dd8:	1884703a 	and	r2,r3,r2
20083ddc:	10803fcc 	andi	r2,r2,255
20083de0:	10002126 	beq	r2,zero,20083e68 <mmc_startup+0x548>
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20083de4:	e0bf3403 	ldbu	r2,-816(fp)
20083de8:	10c03fcc 	andi	r3,r2,255
20083dec:	18c0201c 	xori	r3,r3,128
20083df0:	18ffe004 	addi	r3,r3,-128
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20083df4:	e0bf3443 	ldbu	r2,-815(fp)
20083df8:	10803fcc 	andi	r2,r2,255
20083dfc:	1080201c 	xori	r2,r2,128
20083e00:	10bfe004 	addi	r2,r2,-128
20083e04:	1004923a 	slli	r2,r2,8
20083e08:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20083e0c:	e0bf3483 	ldbu	r2,-814(fp)
20083e10:	10803fcc 	andi	r2,r2,255
20083e14:	1080201c 	xori	r2,r2,128
20083e18:	10bfe004 	addi	r2,r2,-128
20083e1c:	1004943a 	slli	r2,r2,16
20083e20:	1886b03a 	or	r3,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
20083e24:	e0bf34c3 	ldbu	r2,-813(fp)
20083e28:	10803fcc 	andi	r2,r2,255
20083e2c:	1080201c 	xori	r2,r2,128
20083e30:	10bfe004 	addi	r2,r2,-128
20083e34:	1004963a 	slli	r2,r2,24
20083e38:	1884b03a 	or	r2,r3,r2
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
20083e3c:	e0bef515 	stw	r2,-1068(fp)
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
20083e40:	e0bef517 	ldw	r2,-1068(fp)
20083e44:	1004927a 	slli	r2,r2,9
20083e48:	e0bef515 	stw	r2,-1068(fp)
			if ((capacity >> 20) > 2 * 1024)
20083e4c:	e0bef517 	ldw	r2,-1068(fp)
20083e50:	1004d53a 	srli	r2,r2,20
20083e54:	10820070 	cmpltui	r2,r2,2049
20083e58:	1000031e 	bne	r2,zero,20083e68 <mmc_startup+0x548>
				mmc->capacity = capacity;
20083e5c:	e0bfff17 	ldw	r2,-4(fp)
20083e60:	e0fef517 	ldw	r3,-1068(fp)
20083e64:	10c02315 	stw	r3,140(r2)
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
20083e68:	e0bf2ac3 	ldbu	r2,-853(fp)
20083e6c:	10803fcc 	andi	r2,r2,255
20083e70:	1080201c 	xori	r2,r2,128
20083e74:	10bfe004 	addi	r2,r2,-128
20083e78:	10000926 	beq	r2,zero,20083ea0 <mmc_startup+0x580>
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20083e7c:	e0bf3703 	ldbu	r2,-804(fp)
					* 1024;
20083e80:	10803fcc 	andi	r2,r2,255
20083e84:	1080201c 	xori	r2,r2,128
20083e88:	10bfe004 	addi	r2,r2,-128
20083e8c:	100494fa 	slli	r2,r2,19
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20083e90:	1007883a 	mov	r3,r2
20083e94:	e0bfff17 	ldw	r2,-4(fp)
20083e98:	10c02215 	stw	r3,136(r2)
20083e9c:	00001206 	br	20083ee8 <mmc_startup+0x5c8>
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20083ea0:	e0bfff17 	ldw	r2,-4(fp)
20083ea4:	10801817 	ldw	r2,96(r2)
20083ea8:	109f000c 	andi	r2,r2,31744
20083eac:	1004d2ba 	srli	r2,r2,10
20083eb0:	e0bef615 	stw	r2,-1064(fp)
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
20083eb4:	e0bfff17 	ldw	r2,-4(fp)
20083eb8:	10801817 	ldw	r2,96(r2)
20083ebc:	1080f80c 	andi	r2,r2,992
20083ec0:	1004d17a 	srli	r2,r2,5
20083ec4:	e0bef715 	stw	r2,-1060(fp)
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
20083ec8:	e0bef617 	ldw	r2,-1064(fp)
20083ecc:	10c00044 	addi	r3,r2,1
20083ed0:	e0bef717 	ldw	r2,-1060(fp)
20083ed4:	10800044 	addi	r2,r2,1
20083ed8:	1885383a 	mul	r2,r3,r2
20083edc:	1007883a 	mov	r3,r2
20083ee0:	e0bfff17 	ldw	r2,-4(fp)
20083ee4:	10c02215 	stw	r3,136(r2)
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT)
20083ee8:	e0bf2703 	ldbu	r2,-868(fp)
20083eec:	10803fcc 	andi	r2,r2,255
20083ef0:	1080004c 	andi	r2,r2,1
20083ef4:	1000051e 	bne	r2,zero,20083f0c <mmc_startup+0x5ec>
				|| ext_csd[EXT_CSD_BOOT_MULT])
20083ef8:	e0bf3783 	ldbu	r2,-802(fp)
20083efc:	10803fcc 	andi	r2,r2,255
20083f00:	1080201c 	xori	r2,r2,128
20083f04:	10bfe004 	addi	r2,r2,-128
20083f08:	10000326 	beq	r2,zero,20083f18 <mmc_startup+0x5f8>
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
20083f0c:	e0ff2bc3 	ldbu	r3,-849(fp)
20083f10:	e0bfff17 	ldw	r2,-4(fp)
20083f14:	10c01e85 	stb	r3,122(r2)
	}

	if (IS_SD(mmc))
20083f18:	e0bfff17 	ldw	r2,-4(fp)
20083f1c:	10800a17 	ldw	r2,40(r2)
20083f20:	108000ac 	andhi	r2,r2,2
20083f24:	10000426 	beq	r2,zero,20083f38 <mmc_startup+0x618>
		err = sd_change_freq(mmc);
20083f28:	e13fff17 	ldw	r4,-4(fp)
20083f2c:	00834740 	call	20083474 <sd_change_freq>
20083f30:	e0beed15 	stw	r2,-1100(fp)
20083f34:	00000306 	br	20083f44 <mmc_startup+0x624>
	else
		err = mmc_change_freq(mmc);
20083f38:	e13fff17 	ldw	r4,-4(fp)
20083f3c:	00837fc0 	call	200837fc <mmc_change_freq>
20083f40:	e0beed15 	stw	r2,-1100(fp)

	if (err)
20083f44:	e0beed17 	ldw	r2,-1100(fp)
20083f48:	10000226 	beq	r2,zero,20083f54 <mmc_startup+0x634>
		return err;
20083f4c:	e0beed17 	ldw	r2,-1100(fp)
20083f50:	0000b906 	br	20084238 <mmc_startup+0x918>

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20083f54:	e0bfff17 	ldw	r2,-4(fp)
20083f58:	10c01117 	ldw	r3,68(r2)
20083f5c:	e0bfff17 	ldw	r2,-4(fp)
20083f60:	10801217 	ldw	r2,72(r2)
20083f64:	1886703a 	and	r3,r3,r2
20083f68:	e0bfff17 	ldw	r2,-4(fp)
20083f6c:	10c01115 	stw	r3,68(r2)

	if (IS_SD(mmc)) {
20083f70:	e0bfff17 	ldw	r2,-4(fp)
20083f74:	10800a17 	ldw	r2,40(r2)
20083f78:	108000ac 	andhi	r2,r2,2
20083f7c:	10003826 	beq	r2,zero,20084060 <mmc_startup+0x740>
		if (mmc->card_caps & MMC_MODE_4BIT) {
20083f80:	e0bfff17 	ldw	r2,-4(fp)
20083f84:	10801117 	ldw	r2,68(r2)
20083f88:	1080400c 	andi	r2,r2,256
20083f8c:	10002626 	beq	r2,zero,20084028 <mmc_startup+0x708>
			cmd.cmdidx = MMC_CMD_APP_CMD;
20083f90:	00800dc4 	movi	r2,55
20083f94:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
20083f98:	00800544 	movi	r2,21
20083f9c:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = mmc->rca << 16;
20083fa0:	e0bfff17 	ldw	r2,-4(fp)
20083fa4:	10801e0b 	ldhu	r2,120(r2)
20083fa8:	10bfffcc 	andi	r2,r2,65535
20083fac:	1004943a 	slli	r2,r2,16
20083fb0:	e0befa15 	stw	r2,-1048(fp)

			err = mmc_send_cmd(mmc, &cmd, NULL);
20083fb4:	e0bef804 	addi	r2,fp,-1056
20083fb8:	e13fff17 	ldw	r4,-4(fp)
20083fbc:	100b883a 	mov	r5,r2
20083fc0:	000d883a 	mov	r6,zero
20083fc4:	0082c100 	call	20082c10 <mmc_send_cmd>
20083fc8:	e0beed15 	stw	r2,-1100(fp)
			if (err)
20083fcc:	e0beed17 	ldw	r2,-1100(fp)
20083fd0:	10000226 	beq	r2,zero,20083fdc <mmc_startup+0x6bc>
				return err;
20083fd4:	e0beed17 	ldw	r2,-1100(fp)
20083fd8:	00009706 	br	20084238 <mmc_startup+0x918>

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
20083fdc:	00800184 	movi	r2,6
20083fe0:	e0bef80d 	sth	r2,-1056(fp)
			cmd.resp_type = MMC_RSP_R1;
20083fe4:	00800544 	movi	r2,21
20083fe8:	e0bef915 	stw	r2,-1052(fp)
			cmd.cmdarg = 2;
20083fec:	00800084 	movi	r2,2
20083ff0:	e0befa15 	stw	r2,-1048(fp)
			err = mmc_send_cmd(mmc, &cmd, NULL);
20083ff4:	e0bef804 	addi	r2,fp,-1056
20083ff8:	e13fff17 	ldw	r4,-4(fp)
20083ffc:	100b883a 	mov	r5,r2
20084000:	000d883a 	mov	r6,zero
20084004:	0082c100 	call	20082c10 <mmc_send_cmd>
20084008:	e0beed15 	stw	r2,-1100(fp)
			if (err)
2008400c:	e0beed17 	ldw	r2,-1100(fp)
20084010:	10000226 	beq	r2,zero,2008401c <mmc_startup+0x6fc>
				return err;
20084014:	e0beed17 	ldw	r2,-1100(fp)
20084018:	00008706 	br	20084238 <mmc_startup+0x918>

			mmc_set_bus_width(mmc, 4);
2008401c:	e13fff17 	ldw	r4,-4(fp)
20084020:	01400104 	movi	r5,4
20084024:	0082b580 	call	20082b58 <mmc_set_bus_width>
		}

		if (mmc->card_caps & MMC_MODE_HS)
20084028:	e0bfff17 	ldw	r2,-4(fp)
2008402c:	10801117 	ldw	r2,68(r2)
20084030:	1080004c 	andi	r2,r2,1
20084034:	10000526 	beq	r2,zero,2008404c <mmc_startup+0x72c>
			mmc->tran_speed = 50000000;
20084038:	e0ffff17 	ldw	r3,-4(fp)
2008403c:	0080bef4 	movhi	r2,763
20084040:	10bc2004 	addi	r2,r2,-3968
20084044:	18801f15 	stw	r2,124(r3)
20084048:	00007506 	br	20084220 <mmc_startup+0x900>
		else
			mmc->tran_speed = 25000000;
2008404c:	e0ffff17 	ldw	r3,-4(fp)
20084050:	00805f74 	movhi	r2,381
20084054:	109e1004 	addi	r2,r2,30784
20084058:	18801f15 	stw	r2,124(r3)
2008405c:	00007006 	br	20084220 <mmc_startup+0x900>
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
20084060:	e0bfff17 	ldw	r2,-4(fp)
20084064:	10801217 	ldw	r2,72(r2)
20084068:	1080c00c 	andi	r2,r2,768
2008406c:	1004d23a 	srli	r2,r2,8
20084070:	e0beee15 	stw	r2,-1096(fp)
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
20084074:	00005706 	br	200841d4 <mmc_startup+0x8b4>
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
20084078:	e0beee17 	ldw	r2,-1096(fp)
2008407c:	10803fcc 	andi	r2,r2,255
20084080:	1080201c 	xori	r2,r2,128
20084084:	10bfe004 	addi	r2,r2,-128
20084088:	e13fff17 	ldw	r4,-4(fp)
2008408c:	01400044 	movi	r5,1
20084090:	01bfedc4 	movi	r6,-73
20084094:	100f883a 	mov	r7,r2
20084098:	00831ec0 	call	200831ec <mmc_switch>
2008409c:	e0beed15 	stw	r2,-1100(fp)
			EXT_CSD_BUS_WIDTH, width);

			if (err)
200840a0:	e0beed17 	ldw	r2,-1100(fp)
200840a4:	10000126 	beq	r2,zero,200840ac <mmc_startup+0x78c>
				continue;
200840a8:	00004706 	br	200841c8 <mmc_startup+0x8a8>

			if (!width) {
200840ac:	e0beee17 	ldw	r2,-1096(fp)
200840b0:	1000041e 	bne	r2,zero,200840c4 <mmc_startup+0x7a4>
				mmc_set_bus_width(mmc, 1);
200840b4:	e13fff17 	ldw	r4,-4(fp)
200840b8:	01400044 	movi	r5,1
200840bc:	0082b580 	call	20082b58 <mmc_set_bus_width>
				break;
200840c0:	00004606 	br	200841dc <mmc_startup+0x8bc>
			} else
				mmc_set_bus_width(mmc, 4 * width);
200840c4:	e0beee17 	ldw	r2,-1096(fp)
200840c8:	1085883a 	add	r2,r2,r2
200840cc:	1085883a 	add	r2,r2,r2
200840d0:	e13fff17 	ldw	r4,-4(fp)
200840d4:	100b883a 	mov	r5,r2
200840d8:	0082b580 	call	20082b58 <mmc_set_bus_width>

			err = mmc_send_ext_csd(mmc, test_csd);
200840dc:	e0bf7f04 	addi	r2,fp,-516
200840e0:	e13fff17 	ldw	r4,-4(fp)
200840e4:	100b883a 	mov	r5,r2
200840e8:	008316c0 	call	2008316c <mmc_send_ext_csd>
200840ec:	e0beed15 	stw	r2,-1100(fp)
			if (!err
200840f0:	e0beed17 	ldw	r2,-1100(fp)
200840f4:	1000341e 	bne	r2,zero,200841c8 <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
200840f8:	e0ff2703 	ldbu	r3,-868(fp)
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
200840fc:	e0bfa703 	ldbu	r2,-356(fp)
			} else
				mmc_set_bus_width(mmc, 4 * width);

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
20084100:	18c03fcc 	andi	r3,r3,255
20084104:	18c0201c 	xori	r3,r3,128
20084108:	18ffe004 	addi	r3,r3,-128
2008410c:	10803fcc 	andi	r2,r2,255
20084110:	1080201c 	xori	r2,r2,128
20084114:	10bfe004 	addi	r2,r2,-128
20084118:	18802b1e 	bne	r3,r2,200841c8 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
2008411c:	e0ff2ac3 	ldbu	r3,-853(fp)
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
20084120:	e0bfaac3 	ldbu	r2,-341(fp)

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
20084124:	18c03fcc 	andi	r3,r3,255
20084128:	18c0201c 	xori	r3,r3,128
2008412c:	18ffe004 	addi	r3,r3,-128
20084130:	10803fcc 	andi	r2,r2,255
20084134:	1080201c 	xori	r2,r2,128
20084138:	10bfe004 	addi	r2,r2,-128
2008413c:	1880221e 	bne	r3,r2,200841c8 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
20084140:	e0ff2f03 	ldbu	r3,-836(fp)
20084144:	e0bfaf03 	ldbu	r2,-324(fp)
20084148:	18c03fcc 	andi	r3,r3,255
2008414c:	18c0201c 	xori	r3,r3,128
20084150:	18ffe004 	addi	r3,r3,-128
20084154:	10803fcc 	andi	r2,r2,255
20084158:	1080201c 	xori	r2,r2,128
2008415c:	10bfe004 	addi	r2,r2,-128
20084160:	1880191e 	bne	r3,r2,200841c8 <mmc_startup+0x8a8>
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20084164:	e0ff3703 	ldbu	r3,-804(fp)
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20084168:	e0bfb703 	ldbu	r2,-292(fp)
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
2008416c:	18c03fcc 	andi	r3,r3,255
20084170:	18c0201c 	xori	r3,r3,128
20084174:	18ffe004 	addi	r3,r3,-128
20084178:	10803fcc 	andi	r2,r2,255
2008417c:	1080201c 	xori	r2,r2,128
20084180:	10bfe004 	addi	r2,r2,-128
20084184:	1880101e 	bne	r3,r2,200841c8 <mmc_startup+0x8a8>
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
					&& memcmp(&ext_csd[EXT_CSD_SEC_CNT],
20084188:	e0beff04 	addi	r2,fp,-1028
2008418c:	10c03504 	addi	r3,r2,212
20084190:	e0bf7f04 	addi	r2,fp,-516
20084194:	10803504 	addi	r2,r2,212
20084198:	1809883a 	mov	r4,r3
2008419c:	100b883a 	mov	r5,r2
200841a0:	01800104 	movi	r6,4
200841a4:	00898e40 	call	200898e4 <memcmp>
200841a8:	1000071e 	bne	r2,zero,200841c8 <mmc_startup+0x8a8>
							&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
200841ac:	e0bfff17 	ldw	r2,-4(fp)
200841b0:	10c01117 	ldw	r3,68(r2)
200841b4:	e0beee17 	ldw	r2,-1096(fp)
200841b8:	1886b03a 	or	r3,r3,r2
200841bc:	e0bfff17 	ldw	r2,-4(fp)
200841c0:	10c01115 	stw	r3,68(r2)
				break;
200841c4:	00000506 	br	200841dc <mmc_startup+0x8bc>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
200841c8:	e0beee17 	ldw	r2,-1096(fp)
200841cc:	10bfffc4 	addi	r2,r2,-1
200841d0:	e0beee15 	stw	r2,-1096(fp)
200841d4:	e0beee17 	ldw	r2,-1096(fp)
200841d8:	103fa70e 	bge	r2,zero,20084078 <__flash_rwdata_start+0xfffe7ef4>
				mmc->card_caps |= width;
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
200841dc:	e0bfff17 	ldw	r2,-4(fp)
200841e0:	10801117 	ldw	r2,68(r2)
200841e4:	1080004c 	andi	r2,r2,1
200841e8:	10000d26 	beq	r2,zero,20084220 <mmc_startup+0x900>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
200841ec:	e0bfff17 	ldw	r2,-4(fp)
200841f0:	10801117 	ldw	r2,68(r2)
200841f4:	1080040c 	andi	r2,r2,16
200841f8:	10000526 	beq	r2,zero,20084210 <mmc_startup+0x8f0>
				mmc->tran_speed = 52000000;
200841fc:	e0ffff17 	ldw	r3,-4(fp)
20084200:	0080c674 	movhi	r2,793
20084204:	109d4004 	addi	r2,r2,29952
20084208:	18801f15 	stw	r2,124(r3)
2008420c:	00000406 	br	20084220 <mmc_startup+0x900>
			else
				mmc->tran_speed = 26000000;
20084210:	e0ffff17 	ldw	r3,-4(fp)
20084214:	00806374 	movhi	r2,397
20084218:	10aea004 	addi	r2,r2,-17792
2008421c:	18801f15 	stw	r2,124(r3)
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);
20084220:	e0bfff17 	ldw	r2,-4(fp)
20084224:	10801f17 	ldw	r2,124(r2)
20084228:	e13fff17 	ldw	r4,-4(fp)
2008422c:	100b883a 	mov	r5,r2
20084230:	0082b980 	call	20082b98 <mmc_set_clock>

	return 0;
20084234:	0005883a 	mov	r2,zero
}
20084238:	e037883a 	mov	sp,fp
2008423c:	dfc00117 	ldw	ra,4(sp)
20084240:	df000017 	ldw	fp,0(sp)
20084244:	dec00204 	addi	sp,sp,8
20084248:	f800283a 	ret

2008424c <mmc_set_blocklen>:

static int mmc_set_blocklen(struct mmc *mmc, int len) {
2008424c:	defff504 	addi	sp,sp,-44
20084250:	dfc00a15 	stw	ra,40(sp)
20084254:	df000915 	stw	fp,36(sp)
20084258:	df000904 	addi	fp,sp,36
2008425c:	e13ffe15 	stw	r4,-8(fp)
20084260:	e17fff15 	stw	r5,-4(fp)
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
20084264:	00800404 	movi	r2,16
20084268:	e0bff70d 	sth	r2,-36(fp)
	cmd.resp_type = MMC_RSP_R1;
2008426c:	00800544 	movi	r2,21
20084270:	e0bff815 	stw	r2,-32(fp)
	cmd.cmdarg = len;
20084274:	e0bfff17 	ldw	r2,-4(fp)
20084278:	e0bff915 	stw	r2,-28(fp)

	return mmc_send_cmd(mmc, &cmd, NULL);
2008427c:	e13ffe17 	ldw	r4,-8(fp)
20084280:	e17ff704 	addi	r5,fp,-36
20084284:	000d883a 	mov	r6,zero
20084288:	0082c100 	call	20082c10 <mmc_send_cmd>
}
2008428c:	e037883a 	mov	sp,fp
20084290:	dfc00117 	ldw	ra,4(sp)
20084294:	df000017 	ldw	fp,0(sp)
20084298:	dec00204 	addi	sp,sp,8
2008429c:	f800283a 	ret

200842a0 <mmc_read_blocks>:

static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
200842a0:	deffef04 	addi	sp,sp,-68
200842a4:	dfc01015 	stw	ra,64(sp)
200842a8:	df000f15 	stw	fp,60(sp)
200842ac:	df000f04 	addi	fp,sp,60
200842b0:	e13ffc15 	stw	r4,-16(fp)
200842b4:	e17ffd15 	stw	r5,-12(fp)
200842b8:	e1bffe15 	stw	r6,-8(fp)
200842bc:	e1ffff15 	stw	r7,-4(fp)
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
200842c0:	e0bfff17 	ldw	r2,-4(fp)
200842c4:	108000b0 	cmpltui	r2,r2,2
200842c8:	1000031e 	bne	r2,zero,200842d8 <mmc_read_blocks+0x38>
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
200842cc:	00800484 	movi	r2,18
200842d0:	e0bff10d 	sth	r2,-60(fp)
200842d4:	00000206 	br	200842e0 <mmc_read_blocks+0x40>
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
200842d8:	00800444 	movi	r2,17
200842dc:	e0bff10d 	sth	r2,-60(fp)

	if (mmc->high_capacity)
200842e0:	e0bffc17 	ldw	r2,-16(fp)
200842e4:	10800e17 	ldw	r2,56(r2)
200842e8:	10000326 	beq	r2,zero,200842f8 <mmc_read_blocks+0x58>
		cmd.cmdarg = start;
200842ec:	e0bffe17 	ldw	r2,-8(fp)
200842f0:	e0bff315 	stw	r2,-52(fp)
200842f4:	00000506 	br	2008430c <mmc_read_blocks+0x6c>
	else
		cmd.cmdarg = start * mmc->read_bl_len;
200842f8:	e0bffc17 	ldw	r2,-16(fp)
200842fc:	10c02017 	ldw	r3,128(r2)
20084300:	e0bffe17 	ldw	r2,-8(fp)
20084304:	1885383a 	mul	r2,r3,r2
20084308:	e0bff315 	stw	r2,-52(fp)

	cmd.resp_type = MMC_RSP_R1;
2008430c:	00800544 	movi	r2,21
20084310:	e0bff215 	stw	r2,-56(fp)

	data.dest = dst;
20084314:	e0bffd17 	ldw	r2,-12(fp)
20084318:	e0bff815 	stw	r2,-32(fp)
	data.blocks = blkcnt;
2008431c:	e0bfff17 	ldw	r2,-4(fp)
20084320:	e0bffa15 	stw	r2,-24(fp)
	data.blocksize = mmc->read_bl_len;
20084324:	e0bffc17 	ldw	r2,-16(fp)
20084328:	10802017 	ldw	r2,128(r2)
2008432c:	e0bffb15 	stw	r2,-20(fp)
	data.flags = MMC_DATA_READ;
20084330:	00800044 	movi	r2,1
20084334:	e0bff915 	stw	r2,-28(fp)

	if (mmc_send_cmd(mmc, &cmd, &data))
20084338:	e0bff804 	addi	r2,fp,-32
2008433c:	e13ffc17 	ldw	r4,-16(fp)
20084340:	e17ff104 	addi	r5,fp,-60
20084344:	100d883a 	mov	r6,r2
20084348:	0082c100 	call	20082c10 <mmc_send_cmd>
2008434c:	10000226 	beq	r2,zero,20084358 <mmc_read_blocks+0xb8>
		return 0;
20084350:	0005883a 	mov	r2,zero
20084354:	00001306 	br	200843a4 <mmc_read_blocks+0x104>

	if (blkcnt > 1) {
20084358:	e0bfff17 	ldw	r2,-4(fp)
2008435c:	108000b0 	cmpltui	r2,r2,2
20084360:	10000f1e 	bne	r2,zero,200843a0 <mmc_read_blocks+0x100>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20084364:	00800304 	movi	r2,12
20084368:	e0bff10d 	sth	r2,-60(fp)
		cmd.cmdarg = 0;
2008436c:	e03ff315 	stw	zero,-52(fp)
		cmd.resp_type = MMC_RSP_R1b;
20084370:	00800744 	movi	r2,29
20084374:	e0bff215 	stw	r2,-56(fp)
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
20084378:	e13ffc17 	ldw	r4,-16(fp)
2008437c:	e17ff104 	addi	r5,fp,-60
20084380:	000d883a 	mov	r6,zero
20084384:	0082c100 	call	20082c10 <mmc_send_cmd>
20084388:	10000526 	beq	r2,zero,200843a0 <mmc_read_blocks+0x100>
			printf("mmc fail to send stop cmd\n");
2008438c:	01000034 	movhi	r4,0
20084390:	21003c04 	addi	r4,r4,240
20084394:	0089ccc0 	call	20089ccc <puts>
			return 0;
20084398:	0005883a 	mov	r2,zero
2008439c:	00000106 	br	200843a4 <mmc_read_blocks+0x104>
		}
	}

	return blkcnt;
200843a0:	e0bfff17 	ldw	r2,-4(fp)
}
200843a4:	e037883a 	mov	sp,fp
200843a8:	dfc00117 	ldw	ra,4(sp)
200843ac:	df000017 	ldw	fp,0(sp)
200843b0:	dec00204 	addi	sp,sp,8
200843b4:	f800283a 	ret

200843b8 <mmc_init>:

int mmc_init(struct mmc *mmc) {
200843b8:	defffc04 	addi	sp,sp,-16
200843bc:	dfc00315 	stw	ra,12(sp)
200843c0:	df000215 	stw	fp,8(sp)
200843c4:	df000204 	addi	fp,sp,8
200843c8:	e13fff15 	stw	r4,-4(fp)
	int err;

	if (mmc->has_init)
200843cc:	e0bfff17 	ldw	r2,-4(fp)
200843d0:	10800b17 	ldw	r2,44(r2)
200843d4:	10000226 	beq	r2,zero,200843e0 <mmc_init+0x28>
		return 0;
200843d8:	0005883a 	mov	r2,zero
200843dc:	00003706 	br	200844bc <mmc_init+0x104>

	err = mmc->init(mmc);
200843e0:	e0bfff17 	ldw	r2,-4(fp)
200843e4:	10802617 	ldw	r2,152(r2)
200843e8:	e13fff17 	ldw	r4,-4(fp)
200843ec:	103ee83a 	callr	r2
200843f0:	e0bffe15 	stw	r2,-8(fp)

	if (err)
200843f4:	e0bffe17 	ldw	r2,-8(fp)
200843f8:	10000226 	beq	r2,zero,20084404 <mmc_init+0x4c>
		return err;
200843fc:	e0bffe17 	ldw	r2,-8(fp)
20084400:	00002e06 	br	200844bc <mmc_init+0x104>

	mmc_set_bus_width(mmc, 1);
20084404:	e13fff17 	ldw	r4,-4(fp)
20084408:	01400044 	movi	r5,1
2008440c:	0082b580 	call	20082b58 <mmc_set_bus_width>
	mmc_set_clock(mmc, 1);
20084410:	e13fff17 	ldw	r4,-4(fp)
20084414:	01400044 	movi	r5,1
20084418:	0082b980 	call	20082b98 <mmc_set_clock>

	/* Reset the Card */
	err = mmc_go_idle(mmc);
2008441c:	e13fff17 	ldw	r4,-4(fp)
20084420:	0082c600 	call	20082c60 <mmc_go_idle>
20084424:	e0bffe15 	stw	r2,-8(fp)

	if (err)
20084428:	e0bffe17 	ldw	r2,-8(fp)
2008442c:	10000226 	beq	r2,zero,20084438 <mmc_init+0x80>
		return err;
20084430:	e0bffe17 	ldw	r2,-8(fp)
20084434:	00002106 	br	200844bc <mmc_init+0x104>

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
20084438:	e0bfff17 	ldw	r2,-4(fp)
2008443c:	10001ec5 	stb	zero,123(r2)

	/* Test for SD version 2 */
	err = mmc_send_if_cond(mmc);
20084440:	e13fff17 	ldw	r4,-4(fp)
20084444:	0082cd00 	call	20082cd0 <mmc_send_if_cond>
20084448:	e0bffe15 	stw	r2,-8(fp)

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);
2008444c:	e13fff17 	ldw	r4,-4(fp)
20084450:	0082d840 	call	20082d84 <sd_send_op_cond>
20084454:	e0bffe15 	stw	r2,-8(fp)

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
20084458:	e0bffe17 	ldw	r2,-8(fp)
2008445c:	10bffb58 	cmpnei	r2,r2,-19
20084460:	10000a1e 	bne	r2,zero,2008448c <mmc_init+0xd4>
		err = mmc_send_op_cond(mmc);
20084464:	e13fff17 	ldw	r4,-4(fp)
20084468:	0082ee80 	call	20082ee8 <mmc_send_op_cond>
2008446c:	e0bffe15 	stw	r2,-8(fp)

		if (err) {
20084470:	e0bffe17 	ldw	r2,-8(fp)
20084474:	10000526 	beq	r2,zero,2008448c <mmc_init+0xd4>
			printf("Card did not respond to voltage select!\n\r");
20084478:	01000034 	movhi	r4,0
2008447c:	21004304 	addi	r4,r4,268
20084480:	0089be80 	call	20089be8 <printf>
			return UNUSABLE_ERR;
20084484:	00bffbc4 	movi	r2,-17
20084488:	00000c06 	br	200844bc <mmc_init+0x104>
		}
	}

	err = mmc_startup(mmc);
2008448c:	e13fff17 	ldw	r4,-4(fp)
20084490:	00839200 	call	20083920 <mmc_startup>
20084494:	e0bffe15 	stw	r2,-8(fp)
	if (err)
20084498:	e0bffe17 	ldw	r2,-8(fp)
2008449c:	10000326 	beq	r2,zero,200844ac <mmc_init+0xf4>
		mmc->has_init = 0;
200844a0:	e0bfff17 	ldw	r2,-4(fp)
200844a4:	10000b15 	stw	zero,44(r2)
200844a8:	00000306 	br	200844b8 <mmc_init+0x100>
	else
		mmc->has_init = 1;
200844ac:	e0bfff17 	ldw	r2,-4(fp)
200844b0:	00c00044 	movi	r3,1
200844b4:	10c00b15 	stw	r3,44(r2)
	return err;
200844b8:	e0bffe17 	ldw	r2,-8(fp)
}
200844bc:	e037883a 	mov	sp,fp
200844c0:	dfc00117 	ldw	ra,4(sp)
200844c4:	df000017 	ldw	fp,0(sp)
200844c8:	dec00204 	addi	sp,sp,8
200844cc:	f800283a 	ret

200844d0 <mmc_bread>:

size_t mmc_bread(struct mmc *mmc, size_t start, size_t blkcnt, void *dst) {
200844d0:	defff604 	addi	sp,sp,-40
200844d4:	dfc00915 	stw	ra,36(sp)
200844d8:	df000815 	stw	fp,32(sp)
200844dc:	dc000715 	stw	r16,28(sp)
200844e0:	df000804 	addi	fp,sp,32
200844e4:	e13ffb15 	stw	r4,-20(fp)
200844e8:	e17ffc15 	stw	r5,-16(fp)
200844ec:	e1bffd15 	stw	r6,-12(fp)
200844f0:	e1fffe15 	stw	r7,-8(fp)
	size_t cur, blocks_todo = blkcnt;
200844f4:	e0bffd17 	ldw	r2,-12(fp)
200844f8:	e0bff915 	stw	r2,-28(fp)

	if (blkcnt == 0)
200844fc:	e0bffd17 	ldw	r2,-12(fp)
20084500:	1000021e 	bne	r2,zero,2008450c <mmc_bread+0x3c>
		return 0;
20084504:	0005883a 	mov	r2,zero
20084508:	00004c06 	br	2008463c <mmc_bread+0x16c>

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
2008450c:	e0fffc17 	ldw	r3,-16(fp)
20084510:	e0bffd17 	ldw	r2,-12(fp)
20084514:	18a1883a 	add	r16,r3,r2
20084518:	e0bffb17 	ldw	r2,-20(fp)
2008451c:	10c02317 	ldw	r3,140(r2)
20084520:	e0bffb17 	ldw	r2,-20(fp)
20084524:	10802017 	ldw	r2,128(r2)
20084528:	1809883a 	mov	r4,r3
2008452c:	100b883a 	mov	r5,r2
20084530:	00866700 	call	20086670 <__udivsi3>
20084534:	1400172e 	bgeu	r2,r16,20084594 <mmc_bread+0xc4>
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
20084538:	e0fffc17 	ldw	r3,-16(fp)
2008453c:	e0bffd17 	ldw	r2,-12(fp)
20084540:	18a1883a 	add	r16,r3,r2
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
20084544:	e0bffb17 	ldw	r2,-20(fp)
20084548:	10c02317 	ldw	r3,140(r2)
2008454c:	e0bffb17 	ldw	r2,-20(fp)
20084550:	10802017 	ldw	r2,128(r2)

	if (blkcnt == 0)
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
20084554:	1809883a 	mov	r4,r3
20084558:	100b883a 	mov	r5,r2
2008455c:	00866700 	call	20086670 <__udivsi3>
20084560:	100d883a 	mov	r6,r2
20084564:	e0bffb17 	ldw	r2,-20(fp)
20084568:	10c02317 	ldw	r3,140(r2)
2008456c:	e0bffb17 	ldw	r2,-20(fp)
20084570:	10802017 	ldw	r2,128(r2)
20084574:	d8800015 	stw	r2,0(sp)
20084578:	01000034 	movhi	r4,0
2008457c:	21004e04 	addi	r4,r4,312
20084580:	800b883a 	mov	r5,r16
20084584:	180f883a 	mov	r7,r3
20084588:	0089be80 	call	20089be8 <printf>
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
2008458c:	0005883a 	mov	r2,zero
20084590:	00002a06 	br	2008463c <mmc_bread+0x16c>
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
20084594:	e0bffb17 	ldw	r2,-20(fp)
20084598:	10802017 	ldw	r2,128(r2)
2008459c:	e13ffb17 	ldw	r4,-20(fp)
200845a0:	100b883a 	mov	r5,r2
200845a4:	008424c0 	call	2008424c <mmc_set_blocklen>
200845a8:	10000226 	beq	r2,zero,200845b4 <mmc_bread+0xe4>
		return 0;
200845ac:	0005883a 	mov	r2,zero
200845b0:	00002206 	br	2008463c <mmc_bread+0x16c>

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;
200845b4:	e0bffb17 	ldw	r2,-20(fp)
200845b8:	10802817 	ldw	r2,160(r2)
200845bc:	e0fff917 	ldw	r3,-28(fp)
200845c0:	1880012e 	bgeu	r3,r2,200845c8 <mmc_bread+0xf8>
200845c4:	1805883a 	mov	r2,r3
200845c8:	e0bffa15 	stw	r2,-24(fp)

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
200845cc:	e13ffb17 	ldw	r4,-20(fp)
200845d0:	e17ffe17 	ldw	r5,-8(fp)
200845d4:	e1bffc17 	ldw	r6,-16(fp)
200845d8:	e1fffa17 	ldw	r7,-24(fp)
200845dc:	00842a00 	call	200842a0 <mmc_read_blocks>
200845e0:	1007883a 	mov	r3,r2
200845e4:	e0bffa17 	ldw	r2,-24(fp)
200845e8:	18800226 	beq	r3,r2,200845f4 <mmc_bread+0x124>
			return 0;
200845ec:	0005883a 	mov	r2,zero
200845f0:	00001206 	br	2008463c <mmc_bread+0x16c>

		blocks_todo -= cur;
200845f4:	e0fff917 	ldw	r3,-28(fp)
200845f8:	e0bffa17 	ldw	r2,-24(fp)
200845fc:	1885c83a 	sub	r2,r3,r2
20084600:	e0bff915 	stw	r2,-28(fp)
		start += cur;
20084604:	e0fffc17 	ldw	r3,-16(fp)
20084608:	e0bffa17 	ldw	r2,-24(fp)
2008460c:	1885883a 	add	r2,r3,r2
20084610:	e0bffc15 	stw	r2,-16(fp)
		dst += cur * mmc->read_bl_len;
20084614:	e0bffb17 	ldw	r2,-20(fp)
20084618:	10c02017 	ldw	r3,128(r2)
2008461c:	e0bffa17 	ldw	r2,-24(fp)
20084620:	1885383a 	mul	r2,r3,r2
20084624:	e0fffe17 	ldw	r3,-8(fp)
20084628:	1885883a 	add	r2,r3,r2
2008462c:	e0bffe15 	stw	r2,-8(fp)
	} while (blocks_todo > 0);
20084630:	e0bff917 	ldw	r2,-28(fp)
20084634:	103fdf1e 	bne	r2,zero,200845b4 <__flash_rwdata_start+0xfffe8430>

	return blkcnt;
20084638:	e0bffd17 	ldw	r2,-12(fp)
}
2008463c:	e6ffff04 	addi	sp,fp,-4
20084640:	dfc00217 	ldw	ra,8(sp)
20084644:	df000117 	ldw	fp,4(sp)
20084648:	dc000017 	ldw	r16,0(sp)
2008464c:	dec00304 	addi	sp,sp,12
20084650:	f800283a 	ret

20084654 <print_mmcinfo>:

void print_mmcinfo(struct mmc *mmc) {
20084654:	defffb04 	addi	sp,sp,-20
20084658:	dfc00415 	stw	ra,16(sp)
2008465c:	df000315 	stw	fp,12(sp)
20084660:	df000304 	addi	fp,sp,12
20084664:	e13fff15 	stw	r4,-4(fp)
	printf("Device: %s\n\r", mmc->name);
20084668:	e0bfff17 	ldw	r2,-4(fp)
2008466c:	01000034 	movhi	r4,0
20084670:	21005c04 	addi	r4,r4,368
20084674:	100b883a 	mov	r5,r2
20084678:	0089be80 	call	20089be8 <printf>
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
2008467c:	e0bfff17 	ldw	r2,-4(fp)
20084680:	10801a17 	ldw	r2,104(r2)
20084684:	1004d63a 	srli	r2,r2,24
20084688:	01000034 	movhi	r4,0
2008468c:	21006004 	addi	r4,r4,384
20084690:	100b883a 	mov	r5,r2
20084694:	0089be80 	call	20089be8 <printf>
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
20084698:	e0bfff17 	ldw	r2,-4(fp)
2008469c:	10801a17 	ldw	r2,104(r2)
200846a0:	1004d23a 	srli	r2,r2,8
200846a4:	10bfffcc 	andi	r2,r2,65535
200846a8:	01000034 	movhi	r4,0
200846ac:	21006604 	addi	r4,r4,408
200846b0:	100b883a 	mov	r5,r2
200846b4:	0089be80 	call	20089be8 <printf>
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
200846b8:	e0bfff17 	ldw	r2,-4(fp)
200846bc:	10801a17 	ldw	r2,104(r2)
200846c0:	11403fcc 	andi	r5,r2,255
200846c4:	e0bfff17 	ldw	r2,-4(fp)
200846c8:	10801b17 	ldw	r2,108(r2)
200846cc:	100cd63a 	srli	r6,r2,24
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
200846d0:	e0bfff17 	ldw	r2,-4(fp)
200846d4:	10801b17 	ldw	r2,108(r2)
200846d8:	1004d43a 	srli	r2,r2,16

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
200846dc:	11c03fcc 	andi	r7,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
200846e0:	e0bfff17 	ldw	r2,-4(fp)
200846e4:	10801b17 	ldw	r2,108(r2)
200846e8:	1004d23a 	srli	r2,r2,8

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
200846ec:	10c03fcc 	andi	r3,r2,255
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);
200846f0:	e0bfff17 	ldw	r2,-4(fp)
200846f4:	10801b17 	ldw	r2,108(r2)

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
200846f8:	10803fcc 	andi	r2,r2,255
200846fc:	d8c00015 	stw	r3,0(sp)
20084700:	d8800115 	stw	r2,4(sp)
20084704:	01000034 	movhi	r4,0
20084708:	21006904 	addi	r4,r4,420
2008470c:	0089be80 	call	20089be8 <printf>
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
20084710:	e0bfff17 	ldw	r2,-4(fp)
20084714:	10801f17 	ldw	r2,124(r2)
20084718:	01000034 	movhi	r4,0
2008471c:	21006e04 	addi	r4,r4,440
20084720:	100b883a 	mov	r5,r2
20084724:	0089be80 	call	20089be8 <printf>
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);
20084728:	e0bfff17 	ldw	r2,-4(fp)
2008472c:	10802017 	ldw	r2,128(r2)
20084730:	01000034 	movhi	r4,0
20084734:	21007304 	addi	r4,r4,460
20084738:	100b883a 	mov	r5,r2
2008473c:	0089be80 	call	20089be8 <printf>

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084740:	e0bfff17 	ldw	r2,-4(fp)
20084744:	10800a17 	ldw	r2,40(r2)
20084748:	108000ac 	andhi	r2,r2,2
2008474c:	10000326 	beq	r2,zero,2008475c <print_mmcinfo+0x108>
20084750:	00800034 	movhi	r2,0
20084754:	10807804 	addi	r2,r2,480
20084758:	00000206 	br	20084764 <print_mmcinfo+0x110>
2008475c:	00800034 	movhi	r2,0
20084760:	10807904 	addi	r2,r2,484
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20084764:	e0ffff17 	ldw	r3,-4(fp)
20084768:	18c00a17 	ldw	r3,40(r3)
2008476c:	1806d13a 	srli	r3,r3,4
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084770:	198003cc 	andi	r6,r3,15
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20084774:	e0ffff17 	ldw	r3,-4(fp)
20084778:	18c00a17 	ldw	r3,40(r3)
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
2008477c:	18c003cc 	andi	r3,r3,15
20084780:	01000034 	movhi	r4,0
20084784:	21007a04 	addi	r4,r4,488
20084788:	100b883a 	mov	r5,r2
2008478c:	180f883a 	mov	r7,r3
20084790:	0089be80 	call	20089be8 <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20084794:	e0bfff17 	ldw	r2,-4(fp)
20084798:	10800e17 	ldw	r2,56(r2)
2008479c:	10000326 	beq	r2,zero,200847ac <print_mmcinfo+0x158>
200847a0:	00800034 	movhi	r2,0
200847a4:	10807f04 	addi	r2,r2,508
200847a8:	00000206 	br	200847b4 <print_mmcinfo+0x160>
200847ac:	00800034 	movhi	r2,0
200847b0:	10808004 	addi	r2,r2,512
200847b4:	01000034 	movhi	r4,0
200847b8:	21008104 	addi	r4,r4,516
200847bc:	100b883a 	mov	r5,r2
200847c0:	0089be80 	call	20089be8 <printf>
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);
200847c4:	e0bfff17 	ldw	r2,-4(fp)
200847c8:	10802317 	ldw	r2,140(r2)
200847cc:	1004d53a 	srli	r2,r2,20
200847d0:	01000034 	movhi	r4,0
200847d4:	21008604 	addi	r4,r4,536
200847d8:	100b883a 	mov	r5,r2
200847dc:	0089be80 	call	20089be8 <printf>

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
200847e0:	e0bfff17 	ldw	r2,-4(fp)
200847e4:	10800f17 	ldw	r2,60(r2)
200847e8:	01000034 	movhi	r4,0
200847ec:	21008b04 	addi	r4,r4,556
200847f0:	100b883a 	mov	r5,r2
200847f4:	0089be80 	call	20089be8 <printf>
}
200847f8:	e037883a 	mov	sp,fp
200847fc:	dfc00117 	ldw	ra,4(sp)
20084800:	df000017 	ldw	fp,0(sp)
20084804:	dec00204 	addi	sp,sp,8
20084808:	f800283a 	ret

2008480c <flush_dcache_range>:
	int clk_freq;
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
2008480c:	defffc04 	addi	sp,sp,-16
20084810:	dfc00315 	stw	ra,12(sp)
20084814:	df000215 	stw	fp,8(sp)
20084818:	df000204 	addi	fp,sp,8
2008481c:	e13ffe15 	stw	r4,-8(fp)
20084820:	e17fff15 	stw	r5,-4(fp)
	alt_dcache_flush(start, end-start);
20084824:	e0ffff17 	ldw	r3,-4(fp)
20084828:	e0bffe17 	ldw	r2,-8(fp)
2008482c:	1885c83a 	sub	r2,r3,r2
20084830:	e13ffe17 	ldw	r4,-8(fp)
20084834:	100b883a 	mov	r5,r2
20084838:	0096e280 	call	20096e28 <alt_dcache_flush>
}
2008483c:	e037883a 	mov	sp,fp
20084840:	dfc00117 	ldw	ra,4(sp)
20084844:	df000017 	ldw	fp,0(sp)
20084848:	dec00204 	addi	sp,sp,8
2008484c:	f800283a 	ret

20084850 <ocsdc_read>:

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
20084850:	defffd04 	addi	sp,sp,-12
20084854:	df000215 	stw	fp,8(sp)
20084858:	df000204 	addi	fp,sp,8
2008485c:	e13ffe15 	stw	r4,-8(fp)
20084860:	e17fff15 	stw	r5,-4(fp)
	return IORD(dev->iobase, offset);
20084864:	e0bfff17 	ldw	r2,-4(fp)
20084868:	1085883a 	add	r2,r2,r2
2008486c:	1085883a 	add	r2,r2,r2
20084870:	1007883a 	mov	r3,r2
20084874:	e0bffe17 	ldw	r2,-8(fp)
20084878:	10800017 	ldw	r2,0(r2)
2008487c:	1885883a 	add	r2,r3,r2
20084880:	10800037 	ldwio	r2,0(r2)
}
20084884:	e037883a 	mov	sp,fp
20084888:	df000017 	ldw	fp,0(sp)
2008488c:	dec00104 	addi	sp,sp,4
20084890:	f800283a 	ret

20084894 <ocsdc_write>:

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
20084894:	defffc04 	addi	sp,sp,-16
20084898:	df000315 	stw	fp,12(sp)
2008489c:	df000304 	addi	fp,sp,12
200848a0:	e13ffd15 	stw	r4,-12(fp)
200848a4:	e17ffe15 	stw	r5,-8(fp)
200848a8:	e1bfff15 	stw	r6,-4(fp)
	IOWR(dev->iobase, offset, data);
200848ac:	e0bffe17 	ldw	r2,-8(fp)
200848b0:	1085883a 	add	r2,r2,r2
200848b4:	1085883a 	add	r2,r2,r2
200848b8:	1007883a 	mov	r3,r2
200848bc:	e0bffd17 	ldw	r2,-12(fp)
200848c0:	10800017 	ldw	r2,0(r2)
200848c4:	1885883a 	add	r2,r3,r2
200848c8:	1007883a 	mov	r3,r2
200848cc:	e0bfff17 	ldw	r2,-4(fp)
200848d0:	18800035 	stwio	r2,0(r3)
}
200848d4:	e037883a 	mov	sp,fp
200848d8:	df000017 	ldw	fp,0(sp)
200848dc:	dec00104 	addi	sp,sp,4
200848e0:	f800283a 	ret

200848e4 <ocsdc_set_buswidth>:

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
200848e4:	defffc04 	addi	sp,sp,-16
200848e8:	dfc00315 	stw	ra,12(sp)
200848ec:	df000215 	stw	fp,8(sp)
200848f0:	df000204 	addi	fp,sp,8
200848f4:	e13ffe15 	stw	r4,-8(fp)
200848f8:	e17fff15 	stw	r5,-4(fp)
	if (width == 4)
200848fc:	e0bfff17 	ldw	r2,-4(fp)
20084900:	10800118 	cmpnei	r2,r2,4
20084904:	1000051e 	bne	r2,zero,2008491c <ocsdc_set_buswidth+0x38>
		ocsdc_write(dev, OCSDC_CONTROL, 1);
20084908:	e13ffe17 	ldw	r4,-8(fp)
2008490c:	01400704 	movi	r5,28
20084910:	01800044 	movi	r6,1
20084914:	00848940 	call	20084894 <ocsdc_write>
20084918:	00000706 	br	20084938 <ocsdc_set_buswidth+0x54>
	else if (width == 1)
2008491c:	e0bfff17 	ldw	r2,-4(fp)
20084920:	10800058 	cmpnei	r2,r2,1
20084924:	1000041e 	bne	r2,zero,20084938 <ocsdc_set_buswidth+0x54>
		ocsdc_write(dev, OCSDC_CONTROL, 0);
20084928:	e13ffe17 	ldw	r4,-8(fp)
2008492c:	01400704 	movi	r5,28
20084930:	000d883a 	mov	r6,zero
20084934:	00848940 	call	20084894 <ocsdc_write>
}
20084938:	e037883a 	mov	sp,fp
2008493c:	dfc00117 	ldw	ra,4(sp)
20084940:	df000017 	ldw	fp,0(sp)
20084944:	dec00204 	addi	sp,sp,8
20084948:	f800283a 	ret

2008494c <ocsdc_set_clock>:

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
2008494c:	defff904 	addi	sp,sp,-28
20084950:	dfc00615 	stw	ra,24(sp)
20084954:	df000515 	stw	fp,20(sp)
20084958:	dc400415 	stw	r17,16(sp)
2008495c:	dc000315 	stw	r16,12(sp)
20084960:	df000504 	addi	fp,sp,20
20084964:	e13ffc15 	stw	r4,-16(fp)
20084968:	e17ffd15 	stw	r5,-12(fp)
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
2008496c:	e0bffc17 	ldw	r2,-16(fp)
20084970:	10800117 	ldw	r2,4(r2)
20084974:	1007883a 	mov	r3,r2
20084978:	e0bffd17 	ldw	r2,-12(fp)
2008497c:	18802926 	beq	r3,r2,20084a24 <ocsdc_set_clock+0xd8>
20084980:	e0bffc17 	ldw	r2,-16(fp)
20084984:	10800117 	ldw	r2,4(r2)
20084988:	1009883a 	mov	r4,r2
2008498c:	0088ac40 	call	20088ac4 <__floatsidf>
20084990:	1021883a 	mov	r16,r2
20084994:	1823883a 	mov	r17,r3
20084998:	e13ffd17 	ldw	r4,-12(fp)
2008499c:	0088b940 	call	20088b94 <__floatunsidf>
200849a0:	100f883a 	mov	r7,r2
200849a4:	1811883a 	mov	r8,r3
200849a8:	3809883a 	mov	r4,r7
200849ac:	400b883a 	mov	r5,r8
200849b0:	380d883a 	mov	r6,r7
200849b4:	400f883a 	mov	r7,r8
200849b8:	00870040 	call	20087004 <__adddf3>
200849bc:	1009883a 	mov	r4,r2
200849c0:	180b883a 	mov	r5,r3
200849c4:	2005883a 	mov	r2,r4
200849c8:	2807883a 	mov	r3,r5
200849cc:	8009883a 	mov	r4,r16
200849d0:	880b883a 	mov	r5,r17
200849d4:	100d883a 	mov	r6,r2
200849d8:	180f883a 	mov	r7,r3
200849dc:	00878a00 	call	200878a0 <__divdf3>
200849e0:	1009883a 	mov	r4,r2
200849e4:	180b883a 	mov	r5,r3
200849e8:	2005883a 	mov	r2,r4
200849ec:	2807883a 	mov	r3,r5
200849f0:	1009883a 	mov	r4,r2
200849f4:	180b883a 	mov	r5,r3
200849f8:	000d883a 	mov	r6,zero
200849fc:	01cffc34 	movhi	r7,16368
20084a00:	008816c0 	call	2008816c <__subdf3>
20084a04:	1009883a 	mov	r4,r2
20084a08:	180b883a 	mov	r5,r3
20084a0c:	2005883a 	mov	r2,r4
20084a10:	2807883a 	mov	r3,r5
20084a14:	1009883a 	mov	r4,r2
20084a18:	180b883a 	mov	r5,r3
20084a1c:	0088a3c0 	call	20088a3c <__fixdfsi>
20084a20:	00000106 	br	20084a28 <ocsdc_set_clock+0xdc>
20084a24:	00802004 	movi	r2,128
20084a28:	e0bffb15 	stw	r2,-20(fp)

	OCSDC_PRINT(("ocsdc_set_clock %d, div %d\n\r", clock, clk_div));
	//software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 1);
20084a2c:	e13ffc17 	ldw	r4,-16(fp)
20084a30:	01400a04 	movi	r5,40
20084a34:	01800044 	movi	r6,1
20084a38:	00848940 	call	20084894 <ocsdc_write>
	//set clock devider
	ocsdc_write(dev, OCSDC_CLOCK_DIVIDER, clk_div);
20084a3c:	e0bffb17 	ldw	r2,-20(fp)
20084a40:	e13ffc17 	ldw	r4,-16(fp)
20084a44:	01400904 	movi	r5,36
20084a48:	100d883a 	mov	r6,r2
20084a4c:	00848940 	call	20084894 <ocsdc_write>
	//clear software reset
	ocsdc_write(dev, OCSDC_SOFTWARE_RESET, 0);
20084a50:	e13ffc17 	ldw	r4,-16(fp)
20084a54:	01400a04 	movi	r5,40
20084a58:	000d883a 	mov	r6,zero
20084a5c:	00848940 	call	20084894 <ocsdc_write>
}
20084a60:	e6fffe04 	addi	sp,fp,-8
20084a64:	dfc00317 	ldw	ra,12(sp)
20084a68:	df000217 	ldw	fp,8(sp)
20084a6c:	dc400117 	ldw	r17,4(sp)
20084a70:	dc000017 	ldw	r16,0(sp)
20084a74:	dec00404 	addi	sp,sp,16
20084a78:	f800283a 	ret

20084a7c <ocsdc_finish>:

static int ocsdc_finish(struct ocsdc * dev, struct mmc_cmd *cmd) {
20084a7c:	defffa04 	addi	sp,sp,-24
20084a80:	dfc00515 	stw	ra,20(sp)
20084a84:	df000415 	stw	fp,16(sp)
20084a88:	df000404 	addi	fp,sp,16
20084a8c:	e13ffe15 	stw	r4,-8(fp)
20084a90:	e17fff15 	stw	r5,-4(fp)

	int retval = 0;
20084a94:	e03ffc15 	stw	zero,-16(fp)
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
20084a98:	e13ffe17 	ldw	r4,-8(fp)
20084a9c:	01400d04 	movi	r5,52
20084aa0:	00848500 	call	20084850 <ocsdc_read>
20084aa4:	e0bffd15 	stw	r2,-12(fp)
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20084aa8:	e0bffd17 	ldw	r2,-12(fp)
20084aac:	1080008c 	andi	r2,r2,2
20084ab0:	10000726 	beq	r2,zero,20084ad0 <ocsdc_finish+0x54>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20084ab4:	e13ffe17 	ldw	r4,-8(fp)
20084ab8:	01400d04 	movi	r5,52
20084abc:	000d883a 	mov	r6,zero
20084ac0:	00848940 	call	20084894 <ocsdc_write>
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
20084ac4:	00bfffc4 	movi	r2,-1
20084ac8:	e0bffc15 	stw	r2,-16(fp)
			break;
20084acc:	00002606 	br	20084b68 <ocsdc_finish+0xec>
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20084ad0:	e0bffd17 	ldw	r2,-12(fp)
20084ad4:	1080004c 	andi	r2,r2,1
20084ad8:	10002226 	beq	r2,zero,20084b64 <ocsdc_finish+0xe8>
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20084adc:	e13ffe17 	ldw	r4,-8(fp)
20084ae0:	01400d04 	movi	r5,52
20084ae4:	000d883a 	mov	r6,zero
20084ae8:	00848940 	call	20084894 <ocsdc_write>
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
20084aec:	e13ffe17 	ldw	r4,-8(fp)
20084af0:	01400204 	movi	r5,8
20084af4:	00848500 	call	20084850 <ocsdc_read>
20084af8:	1007883a 	mov	r3,r2
20084afc:	e0bfff17 	ldw	r2,-4(fp)
20084b00:	10c00315 	stw	r3,12(r2)
			if (cmd->resp_type & MMC_RSP_136) {
20084b04:	e0bfff17 	ldw	r2,-4(fp)
20084b08:	10800117 	ldw	r2,4(r2)
20084b0c:	1080008c 	andi	r2,r2,2
20084b10:	10001226 	beq	r2,zero,20084b5c <ocsdc_finish+0xe0>
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
20084b14:	e13ffe17 	ldw	r4,-8(fp)
20084b18:	01400304 	movi	r5,12
20084b1c:	00848500 	call	20084850 <ocsdc_read>
20084b20:	1007883a 	mov	r3,r2
20084b24:	e0bfff17 	ldw	r2,-4(fp)
20084b28:	10c00415 	stw	r3,16(r2)
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
20084b2c:	e13ffe17 	ldw	r4,-8(fp)
20084b30:	01400404 	movi	r5,16
20084b34:	00848500 	call	20084850 <ocsdc_read>
20084b38:	1007883a 	mov	r3,r2
20084b3c:	e0bfff17 	ldw	r2,-4(fp)
20084b40:	10c00515 	stw	r3,20(r2)
				cmd->response[3] = ocsdc_read(dev, OCSDC_RESPONSE_4);
20084b44:	e13ffe17 	ldw	r4,-8(fp)
20084b48:	01400504 	movi	r5,20
20084b4c:	00848500 	call	20084850 <ocsdc_read>
20084b50:	1007883a 	mov	r3,r2
20084b54:	e0bfff17 	ldw	r2,-4(fp)
20084b58:	10c00615 	stw	r3,24(r2)
			}
			OCSDC_PRINT(("ocsdc_finish:  %d ok\n\r", cmd->cmdidx));
			retval = 0;
20084b5c:	e03ffc15 	stw	zero,-16(fp)

			break;
20084b60:	00000106 	br	20084b68 <ocsdc_finish+0xec>
		}
		//else if (!(r2 & OCSDC_CMD_INT_STATUS_CIE)) {
		//	printf("ocsdc_finish: cmd %d no exec %x\n", cmd->cmdidx, r2);
		//}
	}
20084b64:	003fcc06 	br	20084a98 <__flash_rwdata_start+0xfffe8914>
	return retval;
20084b68:	e0bffc17 	ldw	r2,-16(fp)
}
20084b6c:	e037883a 	mov	sp,fp
20084b70:	dfc00117 	ldw	ra,4(sp)
20084b74:	df000017 	ldw	fp,0(sp)
20084b78:	dec00204 	addi	sp,sp,8
20084b7c:	f800283a 	ret

20084b80 <ocsdc_data_finish>:

static int ocsdc_data_finish(struct ocsdc * dev) {
20084b80:	defffc04 	addi	sp,sp,-16
20084b84:	dfc00315 	stw	ra,12(sp)
20084b88:	df000215 	stw	fp,8(sp)
20084b8c:	df000204 	addi	fp,sp,8
20084b90:	e13fff15 	stw	r4,-4(fp)
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
20084b94:	0001883a 	nop
20084b98:	e13fff17 	ldw	r4,-4(fp)
20084b9c:	01400f04 	movi	r5,60
20084ba0:	00848500 	call	20084850 <ocsdc_read>
20084ba4:	e0bffe15 	stw	r2,-8(fp)
20084ba8:	e0bffe17 	ldw	r2,-8(fp)
20084bac:	103ffa26 	beq	r2,zero,20084b98 <__flash_rwdata_start+0xfffe8a14>
    ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
20084bb0:	e13fff17 	ldw	r4,-4(fp)
20084bb4:	01400f04 	movi	r5,60
20084bb8:	000d883a 	mov	r6,zero
20084bbc:	00848940 	call	20084894 <ocsdc_write>

    if (status & SDCMSC_DAT_INT_STATUS_TRS) {
20084bc0:	e0bffe17 	ldw	r2,-8(fp)
20084bc4:	1080004c 	andi	r2,r2,1
20084bc8:	10000226 	beq	r2,zero,20084bd4 <ocsdc_data_finish+0x54>
    	OCSDC_PRINT(("ocsdc_data_finish: ok\n\r"));
    	return 0;
20084bcc:	0005883a 	mov	r2,zero
20084bd0:	00000106 	br	20084bd8 <ocsdc_data_finish+0x58>
    }
    else {
    	OCSDC_PRINT(("ocsdc_data_finish: status %x\n\r", status));
    	return -1;
20084bd4:	00bfffc4 	movi	r2,-1
    }
}
20084bd8:	e037883a 	mov	sp,fp
20084bdc:	dfc00117 	ldw	ra,4(sp)
20084be0:	df000017 	ldw	fp,0(sp)
20084be4:	dec00204 	addi	sp,sp,8
20084be8:	f800283a 	ret

20084bec <ocsdc_setup_data_xfer>:

static void ocsdc_setup_data_xfer(struct ocsdc * dev, struct mmc_cmd *cmd, struct mmc_data *data) {
20084bec:	defffb04 	addi	sp,sp,-20
20084bf0:	dfc00415 	stw	ra,16(sp)
20084bf4:	df000315 	stw	fp,12(sp)
20084bf8:	df000304 	addi	fp,sp,12
20084bfc:	e13ffd15 	stw	r4,-12(fp)
20084c00:	e17ffe15 	stw	r5,-8(fp)
20084c04:	e1bfff15 	stw	r6,-4(fp)

	//invalidate cache
	if (data->flags & MMC_DATA_READ) {
20084c08:	e0bfff17 	ldw	r2,-4(fp)
20084c0c:	10800117 	ldw	r2,4(r2)
20084c10:	1080004c 	andi	r2,r2,1
20084c14:	10001426 	beq	r2,zero,20084c68 <ocsdc_setup_data_xfer+0x7c>
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
20084c18:	e0bfff17 	ldw	r2,-4(fp)
20084c1c:	11400017 	ldw	r5,0(r2)
20084c20:	e0bfff17 	ldw	r2,-4(fp)
20084c24:	10c00017 	ldw	r3,0(r2)
20084c28:	e0bfff17 	ldw	r2,-4(fp)
20084c2c:	11000317 	ldw	r4,12(r2)
20084c30:	e0bfff17 	ldw	r2,-4(fp)
20084c34:	10800217 	ldw	r2,8(r2)
20084c38:	2085383a 	mul	r2,r4,r2
20084c3c:	1885883a 	add	r2,r3,r2
20084c40:	2809883a 	mov	r4,r5
20084c44:	100b883a 	mov	r5,r2
20084c48:	008480c0 	call	2008480c <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->dest);
20084c4c:	e0bfff17 	ldw	r2,-4(fp)
20084c50:	10800017 	ldw	r2,0(r2)
20084c54:	e13ffd17 	ldw	r4,-12(fp)
20084c58:	01401804 	movi	r5,96
20084c5c:	100d883a 	mov	r6,r2
20084c60:	00848940 	call	20084894 <ocsdc_write>
20084c64:	00001306 	br	20084cb4 <ocsdc_setup_data_xfer+0xc8>
	}
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
20084c68:	e0bfff17 	ldw	r2,-4(fp)
20084c6c:	11400017 	ldw	r5,0(r2)
20084c70:	e0bfff17 	ldw	r2,-4(fp)
20084c74:	10c00017 	ldw	r3,0(r2)
20084c78:	e0bfff17 	ldw	r2,-4(fp)
20084c7c:	11000317 	ldw	r4,12(r2)
20084c80:	e0bfff17 	ldw	r2,-4(fp)
20084c84:	10800217 	ldw	r2,8(r2)
20084c88:	2085383a 	mul	r2,r4,r2
20084c8c:	1885883a 	add	r2,r3,r2
20084c90:	2809883a 	mov	r4,r5
20084c94:	100b883a 	mov	r5,r2
20084c98:	008480c0 	call	2008480c <flush_dcache_range>
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
20084c9c:	e0bfff17 	ldw	r2,-4(fp)
20084ca0:	10800017 	ldw	r2,0(r2)
20084ca4:	e13ffd17 	ldw	r4,-12(fp)
20084ca8:	01401804 	movi	r5,96
20084cac:	100d883a 	mov	r6,r2
20084cb0:	00848940 	call	20084894 <ocsdc_write>
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
20084cb4:	e0bfff17 	ldw	r2,-4(fp)
20084cb8:	10800317 	ldw	r2,12(r2)
20084cbc:	e13ffd17 	ldw	r4,-12(fp)
20084cc0:	01401104 	movi	r5,68
20084cc4:	100d883a 	mov	r6,r2
20084cc8:	00848940 	call	20084894 <ocsdc_write>
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
20084ccc:	e0bfff17 	ldw	r2,-4(fp)
20084cd0:	10800217 	ldw	r2,8(r2)
20084cd4:	10bfffc4 	addi	r2,r2,-1
20084cd8:	e13ffd17 	ldw	r4,-12(fp)
20084cdc:	01401204 	movi	r5,72
20084ce0:	100d883a 	mov	r6,r2
20084ce4:	00848940 	call	20084894 <ocsdc_write>

	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}
20084ce8:	e037883a 	mov	sp,fp
20084cec:	dfc00117 	ldw	ra,4(sp)
20084cf0:	df000017 	ldw	fp,0(sp)
20084cf4:	dec00204 	addi	sp,sp,8
20084cf8:	f800283a 	ret

20084cfc <ocsdc_send_cmd>:

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20084cfc:	defff804 	addi	sp,sp,-32
20084d00:	dfc00715 	stw	ra,28(sp)
20084d04:	df000615 	stw	fp,24(sp)
20084d08:	df000604 	addi	fp,sp,24
20084d0c:	e13ffd15 	stw	r4,-12(fp)
20084d10:	e17ffe15 	stw	r5,-8(fp)
20084d14:	e1bfff15 	stw	r6,-4(fp)
	struct ocsdc * dev = mmc->priv;
20084d18:	e0bffd17 	ldw	r2,-12(fp)
20084d1c:	10800817 	ldw	r2,32(r2)
20084d20:	e0bffb15 	stw	r2,-20(fp)

	int command = (cmd->cmdidx << 8);
20084d24:	e0bffe17 	ldw	r2,-8(fp)
20084d28:	1080000b 	ldhu	r2,0(r2)
20084d2c:	10bfffcc 	andi	r2,r2,65535
20084d30:	1004923a 	slli	r2,r2,8
20084d34:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20084d38:	e0bffe17 	ldw	r2,-8(fp)
20084d3c:	10800117 	ldw	r2,4(r2)
20084d40:	1080004c 	andi	r2,r2,1
20084d44:	10000b26 	beq	r2,zero,20084d74 <ocsdc_send_cmd+0x78>
		if (cmd->resp_type & MMC_RSP_136)
20084d48:	e0bffe17 	ldw	r2,-8(fp)
20084d4c:	10800117 	ldw	r2,4(r2)
20084d50:	1080008c 	andi	r2,r2,2
20084d54:	10000426 	beq	r2,zero,20084d68 <ocsdc_send_cmd+0x6c>
			command |= 2;
20084d58:	e0bffa17 	ldw	r2,-24(fp)
20084d5c:	10800094 	ori	r2,r2,2
20084d60:	e0bffa15 	stw	r2,-24(fp)
20084d64:	00000306 	br	20084d74 <ocsdc_send_cmd+0x78>
		else {
			command |= 1;
20084d68:	e0bffa17 	ldw	r2,-24(fp)
20084d6c:	10800054 	ori	r2,r2,1
20084d70:	e0bffa15 	stw	r2,-24(fp)
		}
	}
	if (cmd->resp_type & MMC_RSP_BUSY)
20084d74:	e0bffe17 	ldw	r2,-8(fp)
20084d78:	10800117 	ldw	r2,4(r2)
20084d7c:	1080020c 	andi	r2,r2,8
20084d80:	10000326 	beq	r2,zero,20084d90 <ocsdc_send_cmd+0x94>
		command |= (1 << 2);
20084d84:	e0bffa17 	ldw	r2,-24(fp)
20084d88:	10800114 	ori	r2,r2,4
20084d8c:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_CRC)
20084d90:	e0bffe17 	ldw	r2,-8(fp)
20084d94:	10800117 	ldw	r2,4(r2)
20084d98:	1080010c 	andi	r2,r2,4
20084d9c:	10000326 	beq	r2,zero,20084dac <ocsdc_send_cmd+0xb0>
		command |= (1 << 3);
20084da0:	e0bffa17 	ldw	r2,-24(fp)
20084da4:	10800214 	ori	r2,r2,8
20084da8:	e0bffa15 	stw	r2,-24(fp)
	if (cmd->resp_type & MMC_RSP_OPCODE)
20084dac:	e0bffe17 	ldw	r2,-8(fp)
20084db0:	10800117 	ldw	r2,4(r2)
20084db4:	1080040c 	andi	r2,r2,16
20084db8:	10000326 	beq	r2,zero,20084dc8 <ocsdc_send_cmd+0xcc>
		command |= (1 << 4);
20084dbc:	e0bffa17 	ldw	r2,-24(fp)
20084dc0:	10800414 	ori	r2,r2,16
20084dc4:	e0bffa15 	stw	r2,-24(fp)

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20084dc8:	e0bfff17 	ldw	r2,-4(fp)
20084dcc:	10001d26 	beq	r2,zero,20084e44 <ocsdc_send_cmd+0x148>
20084dd0:	e0bfff17 	ldw	r2,-4(fp)
20084dd4:	10800117 	ldw	r2,4(r2)
20084dd8:	1080004c 	andi	r2,r2,1
20084ddc:	1000041e 	bne	r2,zero,20084df0 <ocsdc_send_cmd+0xf4>
20084de0:	e0bfff17 	ldw	r2,-4(fp)
20084de4:	10800117 	ldw	r2,4(r2)
20084de8:	1080008c 	andi	r2,r2,2
20084dec:	10001526 	beq	r2,zero,20084e44 <ocsdc_send_cmd+0x148>
20084df0:	e0bfff17 	ldw	r2,-4(fp)
20084df4:	10800217 	ldw	r2,8(r2)
20084df8:	10001226 	beq	r2,zero,20084e44 <ocsdc_send_cmd+0x148>
		if (data->flags & MMC_DATA_READ)
20084dfc:	e0bfff17 	ldw	r2,-4(fp)
20084e00:	10800117 	ldw	r2,4(r2)
20084e04:	1080004c 	andi	r2,r2,1
20084e08:	10000326 	beq	r2,zero,20084e18 <ocsdc_send_cmd+0x11c>
			command |= (1 << 5);
20084e0c:	e0bffa17 	ldw	r2,-24(fp)
20084e10:	10800814 	ori	r2,r2,32
20084e14:	e0bffa15 	stw	r2,-24(fp)
		if (data->flags & MMC_DATA_WRITE)
20084e18:	e0bfff17 	ldw	r2,-4(fp)
20084e1c:	10800117 	ldw	r2,4(r2)
20084e20:	1080008c 	andi	r2,r2,2
20084e24:	10000326 	beq	r2,zero,20084e34 <ocsdc_send_cmd+0x138>
			command |= (1 << 6);
20084e28:	e0bffa17 	ldw	r2,-24(fp)
20084e2c:	10801014 	ori	r2,r2,64
20084e30:	e0bffa15 	stw	r2,-24(fp)
		ocsdc_setup_data_xfer(dev, cmd, data);
20084e34:	e13ffb17 	ldw	r4,-20(fp)
20084e38:	e17ffe17 	ldw	r5,-8(fp)
20084e3c:	e1bfff17 	ldw	r6,-4(fp)
20084e40:	0084bec0 	call	20084bec <ocsdc_setup_data_xfer>
	}

	OCSDC_PRINT(("ocsdc_send_cmd %04x\n\r", command));

	ocsdc_write(dev, OCSDC_COMMAND, command);
20084e44:	e0bffa17 	ldw	r2,-24(fp)
20084e48:	e13ffb17 	ldw	r4,-20(fp)
20084e4c:	01400104 	movi	r5,4
20084e50:	100d883a 	mov	r6,r2
20084e54:	00848940 	call	20084894 <ocsdc_write>
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);
20084e58:	e0bffe17 	ldw	r2,-8(fp)
20084e5c:	10800217 	ldw	r2,8(r2)
20084e60:	e13ffb17 	ldw	r4,-20(fp)
20084e64:	000b883a 	mov	r5,zero
20084e68:	100d883a 	mov	r6,r2
20084e6c:	00848940 	call	20084894 <ocsdc_write>

	if (ocsdc_finish(dev, cmd) < 0) return -1;
20084e70:	e13ffb17 	ldw	r4,-20(fp)
20084e74:	e17ffe17 	ldw	r5,-8(fp)
20084e78:	0084a7c0 	call	20084a7c <ocsdc_finish>
20084e7c:	1000020e 	bge	r2,zero,20084e88 <ocsdc_send_cmd+0x18c>
20084e80:	00bfffc4 	movi	r2,-1
20084e84:	00000b06 	br	20084eb4 <ocsdc_send_cmd+0x1b8>
	if (data && data->blocks) {
20084e88:	e0bfff17 	ldw	r2,-4(fp)
20084e8c:	10000826 	beq	r2,zero,20084eb0 <ocsdc_send_cmd+0x1b4>
20084e90:	e0bfff17 	ldw	r2,-4(fp)
20084e94:	10800217 	ldw	r2,8(r2)
20084e98:	10000526 	beq	r2,zero,20084eb0 <ocsdc_send_cmd+0x1b4>
		bool ret = ocsdc_data_finish(dev);
20084e9c:	e13ffb17 	ldw	r4,-20(fp)
20084ea0:	0084b800 	call	20084b80 <ocsdc_data_finish>
20084ea4:	e0bffc15 	stw	r2,-16(fp)

		return ret;
20084ea8:	e0bffc17 	ldw	r2,-16(fp)
20084eac:	00000106 	br	20084eb4 <ocsdc_send_cmd+0x1b8>
	}
	else return 0;
20084eb0:	0005883a 	mov	r2,zero
}
20084eb4:	e037883a 	mov	sp,fp
20084eb8:	dfc00117 	ldw	ra,4(sp)
20084ebc:	df000017 	ldw	fp,0(sp)
20084ec0:	dec00204 	addi	sp,sp,8
20084ec4:	f800283a 	ret

20084ec8 <ocsdc_init>:

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20084ec8:	defffc04 	addi	sp,sp,-16
20084ecc:	dfc00315 	stw	ra,12(sp)
20084ed0:	df000215 	stw	fp,8(sp)
20084ed4:	df000204 	addi	fp,sp,8
20084ed8:	e13fff15 	stw	r4,-4(fp)
	struct ocsdc * dev = mmc->priv;
20084edc:	e0bfff17 	ldw	r2,-4(fp)
20084ee0:	10800817 	ldw	r2,32(r2)
20084ee4:	e0bffe15 	stw	r2,-8(fp)

	//set timeout
	ocsdc_write(dev, OCSDC_TIMEOUT, 0x7FFF);
20084ee8:	e13ffe17 	ldw	r4,-8(fp)
20084eec:	01400804 	movi	r5,32
20084ef0:	019fffc4 	movi	r6,32767
20084ef4:	00848940 	call	20084894 <ocsdc_write>
	//disable all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_ENABLE, 0);
20084ef8:	e13ffe17 	ldw	r4,-8(fp)
20084efc:	01400e04 	movi	r5,56
20084f00:	000d883a 	mov	r6,zero
20084f04:	00848940 	call	20084894 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_ENABLE, 0);
20084f08:	e13ffe17 	ldw	r4,-8(fp)
20084f0c:	01401004 	movi	r5,64
20084f10:	000d883a 	mov	r6,zero
20084f14:	00848940 	call	20084894 <ocsdc_write>
	//clear all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
20084f18:	e13ffe17 	ldw	r4,-8(fp)
20084f1c:	01400d04 	movi	r5,52
20084f20:	000d883a 	mov	r6,zero
20084f24:	00848940 	call	20084894 <ocsdc_write>
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
20084f28:	e13ffe17 	ldw	r4,-8(fp)
20084f2c:	01400f04 	movi	r5,60
20084f30:	000d883a 	mov	r6,zero
20084f34:	00848940 	call	20084894 <ocsdc_write>
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);
20084f38:	e0bffe17 	ldw	r2,-8(fp)
20084f3c:	10800117 	ldw	r2,4(r2)
20084f40:	1006d7fa 	srli	r3,r2,31
20084f44:	1885883a 	add	r2,r3,r2
20084f48:	1005d07a 	srai	r2,r2,1
20084f4c:	e13ffe17 	ldw	r4,-8(fp)
20084f50:	100b883a 	mov	r5,r2
20084f54:	008494c0 	call	2008494c <ocsdc_set_clock>

	return 0;
20084f58:	0005883a 	mov	r2,zero
}
20084f5c:	e037883a 	mov	sp,fp
20084f60:	dfc00117 	ldw	ra,4(sp)
20084f64:	df000017 	ldw	fp,0(sp)
20084f68:	dec00204 	addi	sp,sp,8
20084f6c:	f800283a 	ret

20084f70 <ocsdc_set_ios>:

static void ocsdc_set_ios(struct mmc *mmc)
{
20084f70:	defffd04 	addi	sp,sp,-12
20084f74:	dfc00215 	stw	ra,8(sp)
20084f78:	df000115 	stw	fp,4(sp)
20084f7c:	df000104 	addi	fp,sp,4
20084f80:	e13fff15 	stw	r4,-4(fp)
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20084f84:	e0bfff17 	ldw	r2,-4(fp)
20084f88:	10c00817 	ldw	r3,32(r2)
20084f8c:	e0bfff17 	ldw	r2,-4(fp)
20084f90:	10800f17 	ldw	r2,60(r2)
20084f94:	1809883a 	mov	r4,r3
20084f98:	100b883a 	mov	r5,r2
20084f9c:	00848e40 	call	200848e4 <ocsdc_set_buswidth>

	/* Set clock speed */
	if (mmc->clock)
20084fa0:	e0bfff17 	ldw	r2,-4(fp)
20084fa4:	10801017 	ldw	r2,64(r2)
20084fa8:	10000726 	beq	r2,zero,20084fc8 <ocsdc_set_ios+0x58>
		ocsdc_set_clock(mmc->priv, mmc->clock);
20084fac:	e0bfff17 	ldw	r2,-4(fp)
20084fb0:	10c00817 	ldw	r3,32(r2)
20084fb4:	e0bfff17 	ldw	r2,-4(fp)
20084fb8:	10801017 	ldw	r2,64(r2)
20084fbc:	1809883a 	mov	r4,r3
20084fc0:	100b883a 	mov	r5,r2
20084fc4:	008494c0 	call	2008494c <ocsdc_set_clock>
}
20084fc8:	e037883a 	mov	sp,fp
20084fcc:	dfc00117 	ldw	ra,4(sp)
20084fd0:	df000017 	ldw	fp,0(sp)
20084fd4:	dec00204 	addi	sp,sp,8
20084fd8:	f800283a 	ret

20084fdc <ocsdc_mmc_init>:

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20084fdc:	defffa04 	addi	sp,sp,-24
20084fe0:	dfc00515 	stw	ra,20(sp)
20084fe4:	df000415 	stw	fp,16(sp)
20084fe8:	df000404 	addi	fp,sp,16
20084fec:	e13ffe15 	stw	r4,-8(fp)
20084ff0:	e17fff15 	stw	r5,-4(fp)
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
20084ff4:	01002904 	movi	r4,164
20084ff8:	00891140 	call	20089114 <malloc>
20084ffc:	e0bffc15 	stw	r2,-16(fp)
	if (!mmc) goto MMC_ALLOC;
20085000:	e0bffc17 	ldw	r2,-16(fp)
20085004:	1000011e 	bne	r2,zero,2008500c <ocsdc_mmc_init+0x30>
20085008:	00004f06 	br	20085148 <ocsdc_mmc_init+0x16c>
	priv = malloc(sizeof(struct ocsdc));
2008500c:	01000204 	movi	r4,8
20085010:	00891140 	call	20089114 <malloc>
20085014:	e0bffd15 	stw	r2,-12(fp)
	if (!priv) goto OCSDC_ALLOC;
20085018:	e0bffd17 	ldw	r2,-12(fp)
2008501c:	1000041e 	bne	r2,zero,20085030 <ocsdc_mmc_init+0x54>
20085020:	0001883a 	nop
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
20085024:	e13ffc17 	ldw	r4,-16(fp)
20085028:	00891280 	call	20089128 <free>
2008502c:	00004606 	br	20085148 <ocsdc_mmc_init+0x16c>
	mmc = malloc(sizeof(struct mmc));
	if (!mmc) goto MMC_ALLOC;
	priv = malloc(sizeof(struct ocsdc));
	if (!priv) goto OCSDC_ALLOC;

	memset(mmc, 0, sizeof(struct mmc));
20085030:	e13ffc17 	ldw	r4,-16(fp)
20085034:	000b883a 	mov	r5,zero
20085038:	01802904 	movi	r6,164
2008503c:	0089a980 	call	20089a98 <memset>
	memset(priv, 0, sizeof(struct ocsdc));
20085040:	e13ffd17 	ldw	r4,-12(fp)
20085044:	000b883a 	mov	r5,zero
20085048:	01800204 	movi	r6,8
2008504c:	0089a980 	call	20089a98 <memset>

	priv->iobase = base_addr;
20085050:	e0bffd17 	ldw	r2,-12(fp)
20085054:	e0fffe17 	ldw	r3,-8(fp)
20085058:	10c00015 	stw	r3,0(r2)
	priv->clk_freq = clk_freq;
2008505c:	e0bffd17 	ldw	r2,-12(fp)
20085060:	e0ffff17 	ldw	r3,-4(fp)
20085064:	10c00115 	stw	r3,4(r2)

	sprintf(mmc->name, "ocsdc");
20085068:	e0bffc17 	ldw	r2,-16(fp)
2008506c:	00c01bc4 	movi	r3,111
20085070:	10c00005 	stb	r3,0(r2)
20085074:	00c018c4 	movi	r3,99
20085078:	10c00045 	stb	r3,1(r2)
2008507c:	00c01cc4 	movi	r3,115
20085080:	10c00085 	stb	r3,2(r2)
20085084:	00c01904 	movi	r3,100
20085088:	10c000c5 	stb	r3,3(r2)
2008508c:	00c018c4 	movi	r3,99
20085090:	10c00105 	stb	r3,4(r2)
20085094:	10000145 	stb	zero,5(r2)
	mmc->priv = priv;
20085098:	e0bffc17 	ldw	r2,-16(fp)
2008509c:	e0fffd17 	ldw	r3,-12(fp)
200850a0:	10c00815 	stw	r3,32(r2)
	mmc->send_cmd = ocsdc_send_cmd;
200850a4:	e0fffc17 	ldw	r3,-16(fp)
200850a8:	00880234 	movhi	r2,8200
200850ac:	10933f04 	addi	r2,r2,19708
200850b0:	18802415 	stw	r2,144(r3)
	mmc->set_ios = ocsdc_set_ios;
200850b4:	e0fffc17 	ldw	r3,-16(fp)
200850b8:	00880234 	movhi	r2,8200
200850bc:	1093dc04 	addi	r2,r2,20336
200850c0:	18802515 	stw	r2,148(r3)
	mmc->init = ocsdc_init;
200850c4:	e0fffc17 	ldw	r3,-16(fp)
200850c8:	00880234 	movhi	r2,8200
200850cc:	1093b204 	addi	r2,r2,20168
200850d0:	18802615 	stw	r2,152(r3)
	mmc->getcd = NULL;
200850d4:	e0bffc17 	ldw	r2,-16(fp)
200850d8:	10002715 	stw	zero,156(r2)

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
200850dc:	e0bffd17 	ldw	r2,-12(fp)
200850e0:	10800117 	ldw	r2,4(r2)
200850e4:	1009883a 	mov	r4,r2
200850e8:	01400184 	movi	r5,6
200850ec:	00865c00 	call	200865c0 <__divsi3>
200850f0:	1007883a 	mov	r3,r2
200850f4:	e0bffc17 	ldw	r2,-16(fp)
200850f8:	10c00c15 	stw	r3,48(r2)
	mmc->f_max = priv->clk_freq;
200850fc:	e0bffd17 	ldw	r2,-12(fp)
20085100:	10800117 	ldw	r2,4(r2)
20085104:	1007883a 	mov	r3,r2
20085108:	e0bffc17 	ldw	r2,-16(fp)
2008510c:	10c00d15 	stw	r3,52(r2)
	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
20085110:	e0bffc17 	ldw	r2,-16(fp)
20085114:	00c00c34 	movhi	r3,48
20085118:	10c00915 	stw	r3,36(r2)
	mmc->host_caps = MMC_MODE_4BIT;
2008511c:	e0bffc17 	ldw	r2,-16(fp)
20085120:	00c04004 	movi	r3,256
20085124:	10c01215 	stw	r3,72(r2)
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
20085128:	e0bffc17 	ldw	r2,-16(fp)
2008512c:	00c04444 	movi	r3,273
20085130:	10c01215 	stw	r3,72(r2)

	mmc->b_max = 256;
20085134:	e0bffc17 	ldw	r2,-16(fp)
20085138:	00c04004 	movi	r3,256
2008513c:	10c02815 	stw	r3,160(r2)

	return mmc;
20085140:	e0bffc17 	ldw	r2,-16(fp)
20085144:	00000106 	br	2008514c <ocsdc_mmc_init+0x170>

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
20085148:	0005883a 	mov	r2,zero
}
2008514c:	e037883a 	mov	sp,fp
20085150:	dfc00117 	ldw	ra,4(sp)
20085154:	df000017 	ldw	fp,0(sp)
20085158:	dec00204 	addi	sp,sp,8
2008515c:	f800283a 	ret

20085160 <SDLIB_Init>:

#define DEBUG_SDCARD_HEX //DEBUG_HEX_PRINTF

struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
20085160:	defffc04 	addi	sp,sp,-16
20085164:	dfc00315 	stw	ra,12(sp)
20085168:	df000215 	stw	fp,8(sp)
2008516c:	df000204 	addi	fp,sp,8
20085170:	e13fff15 	stw	r4,-4(fp)
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20085174:	d0a01417 	ldw	r2,-32688(gp)
20085178:	1000091e 	bne	r2,zero,200851a0 <SDLIB_Init+0x40>
		sd_drv = ocsdc_mmc_init(base_addr, 50000000);
2008517c:	e13fff17 	ldw	r4,-4(fp)
20085180:	0140bef4 	movhi	r5,763
20085184:	297c2004 	addi	r5,r5,-3968
20085188:	0084fdc0 	call	20084fdc <ocsdc_mmc_init>
2008518c:	d0a01415 	stw	r2,-32688(gp)
		if(!sd_drv){
20085190:	d0a01417 	ldw	r2,-32688(gp)
20085194:	1000021e 	bne	r2,zero,200851a0 <SDLIB_Init+0x40>
			SDCARD_DEBUG(("ocsdc_mmc_init failed\n\r"));
			return FALSE;
20085198:	0005883a 	mov	r2,zero
2008519c:	00001106 	br	200851e4 <SDLIB_Init+0x84>
		}
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
200851a0:	d0a01417 	ldw	r2,-32688(gp)
200851a4:	10800b17 	ldw	r2,44(r2)
200851a8:	10000226 	beq	r2,zero,200851b4 <SDLIB_Init+0x54>
		return TRUE;
200851ac:	00800044 	movi	r2,1
200851b0:	00000c06 	br	200851e4 <SDLIB_Init+0x84>
	int err = mmc_init(sd_drv);
200851b4:	d0a01417 	ldw	r2,-32688(gp)
200851b8:	1009883a 	mov	r4,r2
200851bc:	00843b80 	call	200843b8 <mmc_init>
200851c0:	e0bffe15 	stw	r2,-8(fp)
	if (err != 0 || sd_drv->has_init == 0) {
200851c4:	e0bffe17 	ldw	r2,-8(fp)
200851c8:	1000031e 	bne	r2,zero,200851d8 <SDLIB_Init+0x78>
200851cc:	d0a01417 	ldw	r2,-32688(gp)
200851d0:	10800b17 	ldw	r2,44(r2)
200851d4:	1000021e 	bne	r2,zero,200851e0 <SDLIB_Init+0x80>
		SDCARD_DEBUG(("SDLIB_Init failure\r\n"));
		return FALSE;
200851d8:	0005883a 	mov	r2,zero
200851dc:	00000106 	br	200851e4 <SDLIB_Init+0x84>

#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
200851e0:	00800044 	movi	r2,1
}
200851e4:	e037883a 	mov	sp,fp
200851e8:	dfc00117 	ldw	ra,4(sp)
200851ec:	df000017 	ldw	fp,0(sp)
200851f0:	dec00204 	addi	sp,sp,8
200851f4:	f800283a 	ret

200851f8 <SDLIB_ReadBlock512>:

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200851f8:	defffc04 	addi	sp,sp,-16
200851fc:	dfc00315 	stw	ra,12(sp)
20085200:	df000215 	stw	fp,8(sp)
20085204:	df000204 	addi	fp,sp,8
20085208:	e13ffe15 	stw	r4,-8(fp)
2008520c:	e17fff15 	stw	r5,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
20085210:	d0a01417 	ldw	r2,-32688(gp)
20085214:	1009883a 	mov	r4,r2
20085218:	e17ffe17 	ldw	r5,-8(fp)
2008521c:	01800044 	movi	r6,1
20085220:	e1ffff17 	ldw	r7,-4(fp)
20085224:	00844d00 	call	200844d0 <mmc_bread>
20085228:	1000021e 	bne	r2,zero,20085234 <SDLIB_ReadBlock512+0x3c>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
2008522c:	0005883a 	mov	r2,zero
20085230:	00000106 	br	20085238 <SDLIB_ReadBlock512+0x40>
	}

	return TRUE;
20085234:	00800044 	movi	r2,1
}
20085238:	e037883a 	mov	sp,fp
2008523c:	dfc00117 	ldw	ra,4(sp)
20085240:	df000017 	ldw	fp,0(sp)
20085244:	dec00204 	addi	sp,sp,8
20085248:	f800283a 	ret

2008524c <SDLIB_ReadBlocks>:

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
2008524c:	defffb04 	addi	sp,sp,-20
20085250:	dfc00415 	stw	ra,16(sp)
20085254:	df000315 	stw	fp,12(sp)
20085258:	df000304 	addi	fp,sp,12
2008525c:	e13ffd15 	stw	r4,-12(fp)
20085260:	e17ffe15 	stw	r5,-8(fp)
20085264:	e1bfff15 	stw	r6,-4(fp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20085268:	d0a01417 	ldw	r2,-32688(gp)
2008526c:	1009883a 	mov	r4,r2
20085270:	e17ffd17 	ldw	r5,-12(fp)
20085274:	e1bffe17 	ldw	r6,-8(fp)
20085278:	e1ffff17 	ldw	r7,-4(fp)
2008527c:	00844d00 	call	200844d0 <mmc_bread>
20085280:	1000021e 	bne	r2,zero,2008528c <SDLIB_ReadBlocks+0x40>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
20085284:	0005883a 	mov	r2,zero
20085288:	00000106 	br	20085290 <SDLIB_ReadBlocks+0x44>
	}

	return TRUE;
2008528c:	00800044 	movi	r2,1
}
20085290:	e037883a 	mov	sp,fp
20085294:	dfc00117 	ldw	ra,4(sp)
20085298:	df000017 	ldw	fp,0(sp)
2008529c:	dec00204 	addi	sp,sp,8
200852a0:	f800283a 	ret

200852a4 <hw_video_display_init>:
 *           the mSGDMA.
 *
 *  Returns: Ptr to  display controller structure, or NULL on failure.
 ******************************************************************/
hw_video_display* hw_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {
200852a4:	defff304 	addi	sp,sp,-52
200852a8:	dfc00c15 	stw	ra,48(sp)
200852ac:	df000b15 	stw	fp,44(sp)
200852b0:	df000b04 	addi	fp,sp,44
200852b4:	e13ffc15 	stw	r4,-16(fp)
200852b8:	e17ffd15 	stw	r5,-12(fp)
200852bc:	e1bffe15 	stw	r6,-8(fp)
200852c0:	e1ffff15 	stw	r7,-4(fp)

	if (hw_init_hdmi()) {
200852c4:	008599c0 	call	2008599c <hw_init_hdmi>
200852c8:	10000526 	beq	r2,zero,200852e0 <hw_video_display_init+0x3c>
		printf("Failed to initiate the HDMI chip!\n");
200852cc:	01000034 	movhi	r4,0
200852d0:	21009004 	addi	r4,r4,576
200852d4:	0089ccc0 	call	20089ccc <puts>
		return 0;
200852d8:	0005883a 	mov	r2,zero
200852dc:	00009506 	br	20085534 <hw_video_display_init+0x290>
	unsigned int bytes_per_pixel, bytes_per_frame, descriptors_per_frame, i;

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
200852e0:	00800104 	movi	r2,4
200852e4:	e0bff715 	stw	r2,-36(fp)
	bytes_per_frame = ((width * height) * bytes_per_pixel);
200852e8:	e0fffd17 	ldw	r3,-12(fp)
200852ec:	e0bffe17 	ldw	r2,-8(fp)
200852f0:	1885383a 	mul	r2,r3,r2
200852f4:	1007883a 	mov	r3,r2
200852f8:	e0bff717 	ldw	r2,-36(fp)
200852fc:	1885383a 	mul	r2,r3,r2
20085300:	e0bff815 	stw	r2,-32(fp)

	descriptors_per_frame = 1;
20085304:	00800044 	movi	r2,1
20085308:	e0bff915 	stw	r2,-28(fp)

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
2008530c:	e0bfff17 	ldw	r2,-4(fp)
20085310:	10800690 	cmplti	r2,r2,26
20085314:	1000061e 	bne	r2,zero,20085330 <hw_video_display_init+0x8c>
		printf("The required number of buffers exceeds the max!\n");
20085318:	01000034 	movhi	r4,0
2008531c:	21009904 	addi	r4,r4,612
20085320:	0089ccc0 	call	20089ccc <puts>
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
20085324:	00800644 	movi	r2,25
20085328:	e0bfff15 	stw	r2,-4(fp)
2008532c:	00000806 	br	20085350 <hw_video_display_init+0xac>
	} else if (num_buffers < 2){
20085330:	e0bfff17 	ldw	r2,-4(fp)
20085334:	10800088 	cmpgei	r2,r2,2
20085338:	1000051e 	bne	r2,zero,20085350 <hw_video_display_init+0xac>
		printf("The number of buffers must be > 2!\n");
2008533c:	01000034 	movhi	r4,0
20085340:	2100a504 	addi	r4,r4,660
20085344:	0089ccc0 	call	20089ccc <puts>
		num_buffers = 2;
20085348:	00800084 	movi	r2,2
2008534c:	e0bfff15 	stw	r2,-4(fp)
	}

	// malloc display struct
	display = (hw_video_display*) malloc(sizeof(hw_video_display));
20085350:	01002204 	movi	r4,136
20085354:	00891140 	call	20089114 <malloc>
20085358:	e0bffa15 	stw	r2,-24(fp)
	if (!display) {
2008535c:	e0bffa17 	ldw	r2,-24(fp)
20085360:	1000021e 	bne	r2,zero,2008536c <hw_video_display_init+0xc8>
		return NULL;
20085364:	0005883a 	mov	r2,zero
20085368:	00007206 	br	20085534 <hw_video_display_init+0x290>
	}

	// Init display struct
	display->width = width;
2008536c:	e0bffa17 	ldw	r2,-24(fp)
20085370:	e0fffd17 	ldw	r3,-12(fp)
20085374:	10c01c15 	stw	r3,112(r2)
	display->height = height;
20085378:	e0bffa17 	ldw	r2,-24(fp)
2008537c:	e0fffe17 	ldw	r3,-8(fp)
20085380:	10c01d15 	stw	r3,116(r2)
	display->num_frame_buffers = num_buffers;
20085384:	e0bffa17 	ldw	r2,-24(fp)
20085388:	e0ffff17 	ldw	r3,-4(fp)
2008538c:	10c02015 	stw	r3,128(r2)
	display->bytes_per_frame = bytes_per_frame;
20085390:	e0fff817 	ldw	r3,-32(fp)
20085394:	e0bffa17 	ldw	r2,-24(fp)
20085398:	10c01f15 	stw	r3,124(r2)
	display->bytes_per_pixel = bytes_per_pixel;
2008539c:	e0fff717 	ldw	r3,-36(fp)
200853a0:	e0bffa17 	ldw	r2,-24(fp)
200853a4:	10c01e15 	stw	r3,120(r2)
	display->buffer_being_displayed = 0;
200853a8:	e0bffa17 	ldw	r2,-24(fp)
200853ac:	10001a15 	stw	zero,104(r2)
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
200853b0:	e0bfff17 	ldw	r2,-4(fp)
200853b4:	10800088 	cmpgei	r2,r2,2
200853b8:	10c03fcc 	andi	r3,r2,255
200853bc:	e0bffa17 	ldw	r2,-24(fp)
200853c0:	10c01b15 	stw	r3,108(r2)
	// See iPrev_Wr_Buf in hw_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;
200853c4:	e0fff917 	ldw	r3,-28(fp)
200853c8:	e0bffa17 	ldw	r2,-24(fp)
200853cc:	10c02115 	stw	r3,132(r2)

	// malloc Frame and descriptor Bufs & SetUp Frame Buf Ptrs & Descriptor Ptrs
	if (hw_video_display_allocate_buffers(display, bytes_per_frame,
200853d0:	e0bff817 	ldw	r2,-32(fp)
200853d4:	e13ffa17 	ldw	r4,-24(fp)
200853d8:	100b883a 	mov	r5,r2
200853dc:	e1bfff17 	ldw	r6,-4(fp)
200853e0:	00857f00 	call	200857f0 <hw_video_display_allocate_buffers>
200853e4:	10000226 	beq	r2,zero,200853f0 <hw_video_display_init+0x14c>
			num_buffers)) {
		return NULL;
200853e8:	0005883a 	mov	r2,zero
200853ec:	00005106 	br	20085534 <hw_video_display_init+0x290>
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
200853f0:	e13ffc17 	ldw	r4,-16(fp)
200853f4:	009a0400 	call	2009a040 <alt_msgdma_open>
200853f8:	e0bffb15 	stw	r2,-20(fp)
	display->mSGDMA = pVid_DMA_CSR_Dev;
200853fc:	e0bffa17 	ldw	r2,-24(fp)
20085400:	e0fffb17 	ldw	r3,-20(fp)
20085404:	10c00015 	stw	r3,0(r2)
	if (pVid_DMA_CSR_Dev == NULL) {
20085408:	e0bffb17 	ldw	r2,-20(fp)
2008540c:	1000051e 	bne	r2,zero,20085424 <hw_video_display_init+0x180>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
20085410:	01000034 	movhi	r4,0
20085414:	2100ae04 	addi	r4,r4,696
20085418:	0089ccc0 	call	20089ccc <puts>
		return NULL;
2008541c:	0005883a 	mov	r2,zero
20085420:	00004406 	br	20085534 <hw_video_display_init+0x290>
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085424:	e03ff615 	stw	zero,-40(fp)
20085428:	00001a06 	br	20085494 <hw_video_display_init+0x1f0>
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
				display->buffer_ptrs[i]->desc_base,
2008542c:	e0fffa17 	ldw	r3,-24(fp)
20085430:	e0bff617 	ldw	r2,-40(fp)
20085434:	10800044 	addi	r2,r2,1
20085438:	1085883a 	add	r2,r2,r2
2008543c:	1085883a 	add	r2,r2,r2
20085440:	1885883a 	add	r2,r3,r2
20085444:	10800017 	ldw	r2,0(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085448:	11400017 	ldw	r5,0(r2)
				display->buffer_ptrs[i]->desc_base,
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
2008544c:	e0fffa17 	ldw	r3,-24(fp)
20085450:	e0bff617 	ldw	r2,-40(fp)
20085454:	10800044 	addi	r2,r2,1
20085458:	1085883a 	add	r2,r2,r2
2008545c:	1085883a 	add	r2,r2,r2
20085460:	1885883a 	add	r2,r3,r2
20085464:	10800017 	ldw	r2,0(r2)
20085468:	10c00117 	ldw	r3,4(r2)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
2008546c:	00a00034 	movhi	r2,32768
20085470:	1081c004 	addi	r2,r2,1792
20085474:	d8800015 	stw	r2,0(sp)
20085478:	e13ffb17 	ldw	r4,-20(fp)
2008547c:	180d883a 	mov	r6,r3
20085480:	e1fff817 	ldw	r7,-32(fp)
20085484:	00990cc0 	call	200990cc <alt_msgdma_construct_standard_mm_to_st_descriptor>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085488:	e0bff617 	ldw	r2,-40(fp)
2008548c:	10800044 	addi	r2,r2,1
20085490:	e0bff615 	stw	r2,-40(fp)
20085494:	e0bfff17 	ldw	r2,-4(fp)
20085498:	e0fff617 	ldw	r3,-40(fp)
2008549c:	18bfe336 	bltu	r3,r2,2008542c <__flash_rwdata_start+0xfffe92a8>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
200854a0:	e03ff615 	stw	zero,-40(fp)
200854a4:	00001106 	br	200854ec <hw_video_display_init+0x248>
		memset((void*) (display->buffer_ptrs[i]->buffer),
200854a8:	e0fffa17 	ldw	r3,-24(fp)
200854ac:	e0bff617 	ldw	r2,-40(fp)
200854b0:	10800044 	addi	r2,r2,1
200854b4:	1085883a 	add	r2,r2,r2
200854b8:	1085883a 	add	r2,r2,r2
200854bc:	1885883a 	add	r2,r3,r2
200854c0:	10800017 	ldw	r2,0(r2)
200854c4:	10c00117 	ldw	r3,4(r2)
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
200854c8:	e0bffa17 	ldw	r2,-24(fp)
200854cc:	10801f17 	ldw	r2,124(r2)
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
		memset((void*) (display->buffer_ptrs[i]->buffer),
200854d0:	1809883a 	mov	r4,r3
200854d4:	000b883a 	mov	r5,zero
200854d8:	100d883a 	mov	r6,r2
200854dc:	0089a980 	call	20089a98 <memset>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
200854e0:	e0bff617 	ldw	r2,-40(fp)
200854e4:	10800044 	addi	r2,r2,1
200854e8:	e0bff615 	stw	r2,-40(fp)
200854ec:	e0bfff17 	ldw	r2,-4(fp)
200854f0:	e0fff617 	ldw	r3,-40(fp)
200854f4:	18bfec36 	bltu	r3,r2,200854a8 <__flash_rwdata_start+0xfffe9324>
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
200854f8:	0001883a 	nop
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
200854fc:	e0bffa17 	ldw	r2,-24(fp)
20085500:	10801a17 	ldw	r2,104(r2)
20085504:	e0fffa17 	ldw	r3,-24(fp)
20085508:	10800044 	addi	r2,r2,1
2008550c:	1085883a 	add	r2,r2,r2
20085510:	1085883a 	add	r2,r2,r2
20085514:	1885883a 	add	r2,r3,r2
20085518:	10800017 	ldw	r2,0(r2)
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
2008551c:	10800017 	ldw	r2,0(r2)
20085520:	e13ffb17 	ldw	r4,-20(fp)
20085524:	100b883a 	mov	r5,r2
20085528:	009a2580 	call	2009a258 <alt_msgdma_standard_descriptor_async_transfer>
2008552c:	103ff31e 	bne	r2,zero,200854fc <__flash_rwdata_start+0xfffe9378>
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
			!= 0) {
	}  // Keep Trying until there is room to Transfer another Frame

	return (display);
20085530:	e0bffa17 	ldw	r2,-24(fp)
}
20085534:	e037883a 	mov	sp,fp
20085538:	dfc00117 	ldw	ra,4(sp)
2008553c:	df000017 	ldw	fp,0(sp)
20085540:	dec00204 	addi	sp,sp,8
20085544:	f800283a 	ret

20085548 <hw_video_display_register_written_buffer>:
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
20085548:	defffd04 	addi	sp,sp,-12
2008554c:	dfc00215 	stw	ra,8(sp)
20085550:	df000115 	stw	fp,4(sp)
20085554:	df000104 	addi	fp,sp,4
20085558:	e13fff15 	stw	r4,-4(fp)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
2008555c:	e0bfff17 	ldw	r2,-4(fp)
20085560:	10801b17 	ldw	r2,108(r2)
20085564:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers;
20085568:	e0bfff17 	ldw	r2,-4(fp)
2008556c:	10802017 	ldw	r2,128(r2)
20085570:	1809883a 	mov	r4,r3
20085574:	100b883a 	mov	r5,r2
20085578:	00866140 	call	20086614 <__modsi3>
2008557c:	1007883a 	mov	r3,r2
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
20085580:	e0bfff17 	ldw	r2,-4(fp)
20085584:	10c01b15 	stw	r3,108(r2)
			% display->num_frame_buffers;
}
20085588:	e037883a 	mov	sp,fp
2008558c:	dfc00117 	ldw	ra,4(sp)
20085590:	df000017 	ldw	fp,0(sp)
20085594:	dec00204 	addi	sp,sp,8
20085598:	f800283a 	ret

2008559c <hw_video_display_buffer_is_available>:
 *
 *           -1 - Free Buf not yet available
 *
 ******************************************************************/

int hw_video_display_buffer_is_available(hw_video_display* display) {
2008559c:	defffd04 	addi	sp,sp,-12
200855a0:	df000215 	stw	fp,8(sp)
200855a4:	df000204 	addi	fp,sp,8
200855a8:	e13fff15 	stw	r4,-4(fp)
	int ret_code = 0;
200855ac:	e03ffe15 	stw	zero,-8(fp)

	if (display->num_frame_buffers > 1) {
200855b0:	e0bfff17 	ldw	r2,-4(fp)
200855b4:	10802017 	ldw	r2,128(r2)
200855b8:	10800090 	cmplti	r2,r2,2
200855bc:	1000081e 	bne	r2,zero,200855e0 <hw_video_display_buffer_is_available+0x44>
		if (display->buffer_being_displayed == display->buffer_being_written) // If Frame Buf free to write to
200855c0:	e0bfff17 	ldw	r2,-4(fp)
200855c4:	10c01a17 	ldw	r3,104(r2)
200855c8:	e0bfff17 	ldw	r2,-4(fp)
200855cc:	10801b17 	ldw	r2,108(r2)
200855d0:	1880041e 	bne	r3,r2,200855e4 <hw_video_display_buffer_is_available+0x48>
				{
			ret_code = -1; // Free Buf not yet available
200855d4:	00bfffc4 	movi	r2,-1
200855d8:	e0bffe15 	stw	r2,-8(fp)
200855dc:	00000106 	br	200855e4 <hw_video_display_buffer_is_available+0x48>
		}
	} // END if(display->num_frame_buffers > 1)
	else  // Else Only one display Buf so HAVE TO Overwrite LIVE Buf
	{
		ret_code = 0;
200855e0:	e03ffe15 	stw	zero,-8(fp)
	}

	return (ret_code);
200855e4:	e0bffe17 	ldw	r2,-8(fp)
}
200855e8:	e037883a 	mov	sp,fp
200855ec:	df000017 	ldw	fp,0(sp)
200855f0:	dec00104 	addi	sp,sp,4
200855f4:	f800283a 	ret

200855f8 <hw_video_display_switch_frames>:

void hw_video_display_switch_frames(hw_video_display* display) {
200855f8:	defffb04 	addi	sp,sp,-20
200855fc:	dfc00415 	stw	ra,16(sp)
20085600:	df000315 	stw	fp,12(sp)
20085604:	df000304 	addi	fp,sp,12
20085608:	e13fff15 	stw	r4,-4(fp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
2008560c:	e0bfff17 	ldw	r2,-4(fp)
20085610:	10800017 	ldw	r2,0(r2)
20085614:	10800317 	ldw	r2,12(r2)
20085618:	10800204 	addi	r2,r2,8
2008561c:	10800037 	ldwio	r2,0(r2)
20085620:	10bfffcc 	andi	r2,r2,65535
20085624:	e0bffd15 	stw	r2,-12(fp)
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085628:	e0bfff17 	ldw	r2,-4(fp)
2008562c:	10801a17 	ldw	r2,104(r2)
20085630:	10c00044 	addi	r3,r2,1
			% display->num_frame_buffers);
20085634:	e0bfff17 	ldw	r2,-4(fp)
20085638:	10802017 	ldw	r2,128(r2)

	alt_u32 RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
			display->mSGDMA->csr_base) & ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
			>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
2008563c:	1809883a 	mov	r4,r3
20085640:	100b883a 	mov	r5,r2
20085644:	00866140 	call	20086614 <__modsi3>
20085648:	e0bffe15 	stw	r2,-8(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
2008564c:	e0bfff17 	ldw	r2,-4(fp)
20085650:	10802017 	ldw	r2,128(r2)
20085654:	10800058 	cmpnei	r2,r2,1
20085658:	1000191e 	bne	r2,zero,200856c0 <hw_video_display_switch_frames+0xc8>
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
2008565c:	00000706 	br	2008567c <hw_video_display_switch_frames+0x84>
			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
20085660:	e0bfff17 	ldw	r2,-4(fp)
20085664:	10800017 	ldw	r2,0(r2)
20085668:	10800317 	ldw	r2,12(r2)
2008566c:	10800204 	addi	r2,r2,8
20085670:	10800037 	ldwio	r2,0(r2)
20085674:	10bfffcc 	andi	r2,r2,65535
20085678:	e0bffd15 	stw	r2,-12(fp)
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 0) {
2008567c:	e0bffd17 	ldw	r2,-12(fp)
20085680:	103ff71e 	bne	r2,zero,20085660 <__flash_rwdata_start+0xfffe94dc>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20085684:	0001883a 	nop
20085688:	e0bfff17 	ldw	r2,-4(fp)
2008568c:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
20085690:	e0ffff17 	ldw	r3,-4(fp)
20085694:	e0bffe17 	ldw	r2,-8(fp)
20085698:	10800044 	addi	r2,r2,1
2008569c:	1085883a 	add	r2,r2,r2
200856a0:	1085883a 	add	r2,r2,r2
200856a4:	1885883a 	add	r2,r3,r2
200856a8:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200856ac:	10800017 	ldw	r2,0(r2)
200856b0:	100b883a 	mov	r5,r2
200856b4:	009a2580 	call	2009a258 <alt_msgdma_standard_descriptor_async_transfer>
200856b8:	103ff31e 	bne	r2,zero,20085688 <__flash_rwdata_start+0xfffe9504>
200856bc:	00002006 	br	20085740 <hw_video_display_switch_frames+0x148>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame
	}

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {
200856c0:	e0bfff17 	ldw	r2,-4(fp)
200856c4:	10c01b17 	ldw	r3,108(r2)
200856c8:	e0bffe17 	ldw	r2,-8(fp)
200856cc:	18801c26 	beq	r3,r2,20085740 <hw_video_display_switch_frames+0x148>

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
200856d0:	00000706 	br	200856f0 <hw_video_display_switch_frames+0xf8>

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
200856d4:	e0bfff17 	ldw	r2,-4(fp)
200856d8:	10800017 	ldw	r2,0(r2)
200856dc:	10800317 	ldw	r2,12(r2)
200856e0:	10800204 	addi	r2,r2,8
200856e4:	10800037 	ldwio	r2,0(r2)
200856e8:	10bfffcc 	andi	r2,r2,65535
200856ec:	e0bffd15 	stw	r2,-12(fp)

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {

		// Wait until the last buffer is displayed
		while (RD_Desc_Fifo_Level > 1) {
200856f0:	e0bffd17 	ldw	r2,-12(fp)
200856f4:	108000a8 	cmpgeui	r2,r2,2
200856f8:	103ff61e 	bne	r2,zero,200856d4 <__flash_rwdata_start+0xfffe9550>
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200856fc:	0001883a 	nop
20085700:	e0bfff17 	ldw	r2,-4(fp)
20085704:	11000017 	ldw	r4,0(r2)
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
20085708:	e0ffff17 	ldw	r3,-4(fp)
2008570c:	e0bffe17 	ldw	r2,-8(fp)
20085710:	10800044 	addi	r2,r2,1
20085714:	1085883a 	add	r2,r2,r2
20085718:	1085883a 	add	r2,r2,r2
2008571c:	1885883a 	add	r2,r3,r2
20085720:	10800017 	ldw	r2,0(r2)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20085724:	10800017 	ldw	r2,0(r2)
20085728:	100b883a 	mov	r5,r2
2008572c:	009a2580 	call	2009a258 <alt_msgdma_standard_descriptor_async_transfer>
20085730:	103ff31e 	bne	r2,zero,20085700 <__flash_rwdata_start+0xfffe957c>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame

		display->buffer_being_displayed = iNext_Rd_Buf;
20085734:	e0bfff17 	ldw	r2,-4(fp)
20085738:	e0fffe17 	ldw	r3,-8(fp)
2008573c:	10c01a15 	stw	r3,104(r2)
	}

	//printf("Displayed %d - Written %d\n", display->buffer_being_displayed, display->buffer_being_written);
}
20085740:	e037883a 	mov	sp,fp
20085744:	dfc00117 	ldw	ra,4(sp)
20085748:	df000017 	ldw	fp,0(sp)
2008574c:	dec00204 	addi	sp,sp,8
20085750:	f800283a 	ret

20085754 <hw_video_display_clear_screen>:
 *  Purpose: Uses the fast memset routine to clear entire Frame Buf
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
20085754:	defffc04 	addi	sp,sp,-16
20085758:	dfc00315 	stw	ra,12(sp)
2008575c:	df000215 	stw	fp,8(sp)
20085760:	df000204 	addi	fp,sp,8
20085764:	e13ffe15 	stw	r4,-8(fp)
20085768:	2805883a 	mov	r2,r5
2008576c:	e0bfff05 	stb	r2,-4(fp)
	memset(
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
20085770:	e0bffe17 	ldw	r2,-8(fp)
20085774:	10801b17 	ldw	r2,108(r2)
20085778:	e0fffe17 	ldw	r3,-8(fp)
2008577c:	10800044 	addi	r2,r2,1
20085780:	1085883a 	add	r2,r2,r2
20085784:	1085883a 	add	r2,r2,r2
20085788:	1885883a 	add	r2,r3,r2
2008578c:	10800017 	ldw	r2,0(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
20085790:	11000117 	ldw	r4,4(r2)
20085794:	e0ffff07 	ldb	r3,-4(fp)
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
20085798:	e0bffe17 	ldw	r2,-8(fp)
2008579c:	10801f17 	ldw	r2,124(r2)
 *             User can specify black(0x00) or white(0xFF).
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
200857a0:	180b883a 	mov	r5,r3
200857a4:	100d883a 	mov	r6,r2
200857a8:	0089a980 	call	20089a98 <memset>
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
			color, display->bytes_per_frame);
}
200857ac:	e037883a 	mov	sp,fp
200857b0:	dfc00117 	ldw	ra,4(sp)
200857b4:	df000017 	ldw	fp,0(sp)
200857b8:	dec00204 	addi	sp,sp,8
200857bc:	f800283a 	ret

200857c0 <hw_video_display_get_descriptor_span>:
 * display->descriptors_per_frame
 *  MUST be SetUp Before Calling this func
 * 
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 hw_video_display_get_descriptor_span(hw_video_display *display) {
200857c0:	defffe04 	addi	sp,sp,-8
200857c4:	df000115 	stw	fp,4(sp)
200857c8:	df000104 	addi	fp,sp,4
200857cc:	e13fff15 	stw	r4,-4(fp)
	return ((display->descriptors_per_frame + 2)
200857d0:	e0bfff17 	ldw	r2,-4(fp)
200857d4:	10802117 	ldw	r2,132(r2)
200857d8:	10800084 	addi	r2,r2,2
200857dc:	1004913a 	slli	r2,r2,4
			* sizeof(alt_msgdma_standard_descriptor));
}
200857e0:	e037883a 	mov	sp,fp
200857e4:	df000017 	ldw	fp,0(sp)
200857e8:	dec00104 	addi	sp,sp,4
200857ec:	f800283a 	ret

200857f0 <hw_video_display_allocate_buffers>:
 *  This Allocates memory for Frame Bufs & descriptors
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int hw_video_display_allocate_buffers(hw_video_display* display,
		int bytes_per_frame, int num_buffers) {
200857f0:	defff804 	addi	sp,sp,-32
200857f4:	dfc00715 	stw	ra,28(sp)
200857f8:	df000615 	stw	fp,24(sp)
200857fc:	dc000515 	stw	r16,20(sp)
20085800:	df000604 	addi	fp,sp,24
20085804:	e13ffc15 	stw	r4,-16(fp)
20085808:	e17ffd15 	stw	r5,-12(fp)
2008580c:	e1bffe15 	stw	r6,-8(fp)
	int i, ret_code = 0;
20085810:	e03ffb15 	stw	zero,-20(fp)

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085814:	e03ffa15 	stw	zero,-24(fp)
20085818:	00004506 	br	20085930 <hw_video_display_allocate_buffers+0x140>
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
2008581c:	01000204 	movi	r4,8
20085820:	00891140 	call	20089114 <malloc>
20085824:	1009883a 	mov	r4,r2
20085828:	e0fffc17 	ldw	r3,-16(fp)
2008582c:	e0bffa17 	ldw	r2,-24(fp)
20085830:	10800044 	addi	r2,r2,1
20085834:	1085883a 	add	r2,r2,r2
20085838:	1085883a 	add	r2,r2,r2
2008583c:	1885883a 	add	r2,r3,r2
20085840:	11000015 	stw	r4,0(r2)
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
20085844:	e0fffc17 	ldw	r3,-16(fp)
20085848:	e0bffa17 	ldw	r2,-24(fp)
2008584c:	10800044 	addi	r2,r2,1
20085850:	1085883a 	add	r2,r2,r2
20085854:	1085883a 	add	r2,r2,r2
20085858:	1885883a 	add	r2,r3,r2
2008585c:	10800017 	ldw	r2,0(r2)
20085860:	1000021e 	bne	r2,zero,2008586c <hw_video_display_allocate_buffers+0x7c>
			ret_code = -1;
20085864:	00bfffc4 	movi	r2,-1
20085868:	e0bffb15 	stw	r2,-20(fp)
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
2008586c:	e0fffc17 	ldw	r3,-16(fp)
20085870:	e0bffa17 	ldw	r2,-24(fp)
20085874:	10800044 	addi	r2,r2,1
20085878:	1085883a 	add	r2,r2,r2
2008587c:	1085883a 	add	r2,r2,r2
20085880:	1885883a 	add	r2,r3,r2
20085884:	14000017 	ldw	r16,0(r2)
20085888:	e0bffd17 	ldw	r2,-12(fp)
2008588c:	1009883a 	mov	r4,r2
20085890:	00977740 	call	20097774 <alt_uncached_malloc>
20085894:	80800115 	stw	r2,4(r16)
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085898:	e0fffc17 	ldw	r3,-16(fp)
2008589c:	e0bffa17 	ldw	r2,-24(fp)
200858a0:	10800044 	addi	r2,r2,1
200858a4:	1085883a 	add	r2,r2,r2
200858a8:	1085883a 	add	r2,r2,r2
200858ac:	1885883a 	add	r2,r3,r2
200858b0:	10800017 	ldw	r2,0(r2)
200858b4:	10800117 	ldw	r2,4(r2)
200858b8:	1000021e 	bne	r2,zero,200858c4 <hw_video_display_allocate_buffers+0xd4>
			ret_code = -1;
200858bc:	00bfffc4 	movi	r2,-1
200858c0:	e0bffb15 	stw	r2,-20(fp)

		display->buffer_ptrs[i]->desc_base =
200858c4:	e0fffc17 	ldw	r3,-16(fp)
200858c8:	e0bffa17 	ldw	r2,-24(fp)
200858cc:	10800044 	addi	r2,r2,1
200858d0:	1085883a 	add	r2,r2,r2
200858d4:	1085883a 	add	r2,r2,r2
200858d8:	1885883a 	add	r2,r3,r2
200858dc:	14000017 	ldw	r16,0(r2)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap
200858e0:	e13ffc17 	ldw	r4,-16(fp)
200858e4:	00857c00 	call	200857c0 <hw_video_display_get_descriptor_span>
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
200858e8:	01000804 	movi	r4,32
200858ec:	100b883a 	mov	r5,r2
200858f0:	0088f440 	call	20088f44 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
200858f4:	80800015 	stw	r2,0(r16)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
200858f8:	e0fffc17 	ldw	r3,-16(fp)
200858fc:	e0bffa17 	ldw	r2,-24(fp)
20085900:	10800044 	addi	r2,r2,1
20085904:	1085883a 	add	r2,r2,r2
20085908:	1085883a 	add	r2,r2,r2
2008590c:	1885883a 	add	r2,r3,r2
20085910:	10800017 	ldw	r2,0(r2)
20085914:	10800017 	ldw	r2,0(r2)
20085918:	1000021e 	bne	r2,zero,20085924 <hw_video_display_allocate_buffers+0x134>
			ret_code = -1;
2008591c:	00bfffc4 	movi	r2,-1
20085920:	e0bffb15 	stw	r2,-20(fp)
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085924:	e0bffa17 	ldw	r2,-24(fp)
20085928:	10800044 	addi	r2,r2,1
2008592c:	e0bffa15 	stw	r2,-24(fp)
20085930:	e0fffa17 	ldw	r3,-24(fp)
20085934:	e0bffe17 	ldw	r2,-8(fp)
20085938:	18bfb816 	blt	r3,r2,2008581c <__flash_rwdata_start+0xfffe9698>
		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
		}
	}

	return ret_code;
2008593c:	e0bffb17 	ldw	r2,-20(fp)
}
20085940:	e6ffff04 	addi	sp,fp,-4
20085944:	dfc00217 	ldw	ra,8(sp)
20085948:	df000117 	ldw	fp,4(sp)
2008594c:	dc000017 	ldw	r16,0(sp)
20085950:	dec00304 	addi	sp,sp,12
20085954:	f800283a 	ret

20085958 <hw_video_display_get_buffer>:

// ************************************************************

// Return a pointer to the buffer being written
alt_u32* hw_video_display_get_buffer(hw_video_display* display) {
20085958:	defffe04 	addi	sp,sp,-8
2008595c:	df000115 	stw	fp,4(sp)
20085960:	df000104 	addi	fp,sp,4
20085964:	e13fff15 	stw	r4,-4(fp)

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
20085968:	e0bfff17 	ldw	r2,-4(fp)
2008596c:	10801b17 	ldw	r2,108(r2)
20085970:	e0ffff17 	ldw	r3,-4(fp)
20085974:	10800044 	addi	r2,r2,1
20085978:	1085883a 	add	r2,r2,r2
2008597c:	1085883a 	add	r2,r2,r2
20085980:	1885883a 	add	r2,r3,r2
20085984:	10800017 	ldw	r2,0(r2)
20085988:	10800117 	ldw	r2,4(r2)
}
2008598c:	e037883a 	mov	sp,fp
20085990:	df000017 	ldw	fp,0(sp)
20085994:	dec00104 	addi	sp,sp,4
20085998:	f800283a 	ret

2008599c <hw_init_hdmi>:

// ************************************************************
int hw_init_hdmi() {
2008599c:	defff304 	addi	sp,sp,-52
200859a0:	dfc00c15 	stw	ra,48(sp)
200859a4:	df000b15 	stw	fp,44(sp)
200859a8:	df000b04 	addi	fp,sp,44
	bool r = 0;
200859ac:	e03ff615 	stw	zero,-40(fp)
	int slave_addr = 0x39 << 1;
200859b0:	00801c84 	movi	r2,114
200859b4:	e0bff715 	stw	r2,-36(fp)
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
200859b8:	e0bff717 	ldw	r2,-36(fp)
200859bc:	10c03fcc 	andi	r3,r2,255
200859c0:	18c0201c 	xori	r3,r3,128
200859c4:	18ffe004 	addi	r3,r3,-128
200859c8:	e0bffc04 	addi	r2,fp,-16
200859cc:	d8800015 	stw	r2,0(sp)
200859d0:	01080434 	movhi	r4,8208
200859d4:	21053804 	addi	r4,r4,5344
200859d8:	01480434 	movhi	r5,8208
200859dc:	29453004 	addi	r5,r5,5312
200859e0:	180d883a 	mov	r6,r3
200859e4:	000f883a 	mov	r7,zero
200859e8:	00860500 	call	20086050 <I2C_Read>
200859ec:	e0bff615 	stw	r2,-40(fp)
	if (!r)
200859f0:	e0bff617 	ldw	r2,-40(fp)
200859f4:	1000021e 	bne	r2,zero,20085a00 <hw_init_hdmi+0x64>
		return -1;
200859f8:	00bfffc4 	movi	r2,-1
200859fc:	00015906 	br	20085f64 <hw_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
20085a00:	e0bff717 	ldw	r2,-36(fp)
20085a04:	10c03fcc 	andi	r3,r2,255
20085a08:	18c0201c 	xori	r3,r3,128
20085a0c:	18ffe004 	addi	r3,r3,-128
20085a10:	e0bff804 	addi	r2,fp,-32
20085a14:	d8800015 	stw	r2,0(sp)
20085a18:	01080434 	movhi	r4,8208
20085a1c:	21053804 	addi	r4,r4,5344
20085a20:	01480434 	movhi	r5,8208
20085a24:	29453004 	addi	r5,r5,5312
20085a28:	180d883a 	mov	r6,r3
20085a2c:	01c03d84 	movi	r7,246
20085a30:	00860500 	call	20086050 <I2C_Read>
20085a34:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20085a38:	e0bff617 	ldw	r2,-40(fp)
20085a3c:	1000021e 	bne	r2,zero,20085a48 <hw_init_hdmi+0xac>
		return -2;
20085a40:	00bfff84 	movi	r2,-2
20085a44:	00014706 	br	20085f64 <hw_init_hdmi+0x5c8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
20085a48:	e0bff717 	ldw	r2,-36(fp)
20085a4c:	10c03fcc 	andi	r3,r2,255
20085a50:	18c0201c 	xori	r3,r3,128
20085a54:	18ffe004 	addi	r3,r3,-128
20085a58:	e0bff804 	addi	r2,fp,-32
20085a5c:	10800104 	addi	r2,r2,4
20085a60:	d8800015 	stw	r2,0(sp)
20085a64:	01080434 	movhi	r4,8208
20085a68:	21053804 	addi	r4,r4,5344
20085a6c:	01480434 	movhi	r5,8208
20085a70:	29453004 	addi	r5,r5,5312
20085a74:	180d883a 	mov	r6,r3
20085a78:	01c03d44 	movi	r7,245
20085a7c:	00860500 	call	20086050 <I2C_Read>
20085a80:	e0bff615 	stw	r2,-40(fp)
	if (!r)
20085a84:	e0bff617 	ldw	r2,-40(fp)
20085a88:	1000021e 	bne	r2,zero,20085a94 <hw_init_hdmi+0xf8>
		return -3;
20085a8c:	00bfff44 	movi	r2,-3
20085a90:	00013406 	br	20085f64 <hw_init_hdmi+0x5c8>

	// Initiate Color Conversion Matrix
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x18, 0xAA);
20085a94:	e0bff717 	ldw	r2,-36(fp)
20085a98:	10c03fcc 	andi	r3,r2,255
20085a9c:	18c0201c 	xori	r3,r3,128
20085aa0:	18ffe004 	addi	r3,r3,-128
20085aa4:	00802a84 	movi	r2,170
20085aa8:	d8800015 	stw	r2,0(sp)
20085aac:	01080434 	movhi	r4,8208
20085ab0:	21053804 	addi	r4,r4,5344
20085ab4:	01480434 	movhi	r5,8208
20085ab8:	29453004 	addi	r5,r5,5312
20085abc:	180d883a 	mov	r6,r3
20085ac0:	01c00604 	movi	r7,24
20085ac4:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x19, 0xF8);
20085ac8:	e0bff717 	ldw	r2,-36(fp)
20085acc:	10c03fcc 	andi	r3,r2,255
20085ad0:	18c0201c 	xori	r3,r3,128
20085ad4:	18ffe004 	addi	r3,r3,-128
20085ad8:	00803e04 	movi	r2,248
20085adc:	d8800015 	stw	r2,0(sp)
20085ae0:	01080434 	movhi	r4,8208
20085ae4:	21053804 	addi	r4,r4,5344
20085ae8:	01480434 	movhi	r5,8208
20085aec:	29453004 	addi	r5,r5,5312
20085af0:	180d883a 	mov	r6,r3
20085af4:	01c00644 	movi	r7,25
20085af8:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1A, 0x08);
20085afc:	e0bff717 	ldw	r2,-36(fp)
20085b00:	10c03fcc 	andi	r3,r2,255
20085b04:	18c0201c 	xori	r3,r3,128
20085b08:	18ffe004 	addi	r3,r3,-128
20085b0c:	00800204 	movi	r2,8
20085b10:	d8800015 	stw	r2,0(sp)
20085b14:	01080434 	movhi	r4,8208
20085b18:	21053804 	addi	r4,r4,5344
20085b1c:	01480434 	movhi	r5,8208
20085b20:	29453004 	addi	r5,r5,5312
20085b24:	180d883a 	mov	r6,r3
20085b28:	01c00684 	movi	r7,26
20085b2c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1B, 0x00);
20085b30:	e0bff717 	ldw	r2,-36(fp)
20085b34:	10803fcc 	andi	r2,r2,255
20085b38:	1080201c 	xori	r2,r2,128
20085b3c:	10bfe004 	addi	r2,r2,-128
20085b40:	d8000015 	stw	zero,0(sp)
20085b44:	01080434 	movhi	r4,8208
20085b48:	21053804 	addi	r4,r4,5344
20085b4c:	01480434 	movhi	r5,8208
20085b50:	29453004 	addi	r5,r5,5312
20085b54:	100d883a 	mov	r6,r2
20085b58:	01c006c4 	movi	r7,27
20085b5c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1C, 0x00);
20085b60:	e0bff717 	ldw	r2,-36(fp)
20085b64:	10803fcc 	andi	r2,r2,255
20085b68:	1080201c 	xori	r2,r2,128
20085b6c:	10bfe004 	addi	r2,r2,-128
20085b70:	d8000015 	stw	zero,0(sp)
20085b74:	01080434 	movhi	r4,8208
20085b78:	21053804 	addi	r4,r4,5344
20085b7c:	01480434 	movhi	r5,8208
20085b80:	29453004 	addi	r5,r5,5312
20085b84:	100d883a 	mov	r6,r2
20085b88:	01c00704 	movi	r7,28
20085b8c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1D, 0x00);
20085b90:	e0bff717 	ldw	r2,-36(fp)
20085b94:	10803fcc 	andi	r2,r2,255
20085b98:	1080201c 	xori	r2,r2,128
20085b9c:	10bfe004 	addi	r2,r2,-128
20085ba0:	d8000015 	stw	zero,0(sp)
20085ba4:	01080434 	movhi	r4,8208
20085ba8:	21053804 	addi	r4,r4,5344
20085bac:	01480434 	movhi	r5,8208
20085bb0:	29453004 	addi	r5,r5,5312
20085bb4:	100d883a 	mov	r6,r2
20085bb8:	01c00744 	movi	r7,29
20085bbc:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1E, 0x1a);
20085bc0:	e0bff717 	ldw	r2,-36(fp)
20085bc4:	10c03fcc 	andi	r3,r2,255
20085bc8:	18c0201c 	xori	r3,r3,128
20085bcc:	18ffe004 	addi	r3,r3,-128
20085bd0:	00800684 	movi	r2,26
20085bd4:	d8800015 	stw	r2,0(sp)
20085bd8:	01080434 	movhi	r4,8208
20085bdc:	21053804 	addi	r4,r4,5344
20085be0:	01480434 	movhi	r5,8208
20085be4:	29453004 	addi	r5,r5,5312
20085be8:	180d883a 	mov	r6,r3
20085bec:	01c00784 	movi	r7,30
20085bf0:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1F, 0x84);
20085bf4:	e0bff717 	ldw	r2,-36(fp)
20085bf8:	10c03fcc 	andi	r3,r2,255
20085bfc:	18c0201c 	xori	r3,r3,128
20085c00:	18ffe004 	addi	r3,r3,-128
20085c04:	00802104 	movi	r2,132
20085c08:	d8800015 	stw	r2,0(sp)
20085c0c:	01080434 	movhi	r4,8208
20085c10:	21053804 	addi	r4,r4,5344
20085c14:	01480434 	movhi	r5,8208
20085c18:	29453004 	addi	r5,r5,5312
20085c1c:	180d883a 	mov	r6,r3
20085c20:	01c007c4 	movi	r7,31
20085c24:	0085f780 	call	20085f78 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x20, 0x1A);
20085c28:	e0bff717 	ldw	r2,-36(fp)
20085c2c:	10c03fcc 	andi	r3,r2,255
20085c30:	18c0201c 	xori	r3,r3,128
20085c34:	18ffe004 	addi	r3,r3,-128
20085c38:	00800684 	movi	r2,26
20085c3c:	d8800015 	stw	r2,0(sp)
20085c40:	01080434 	movhi	r4,8208
20085c44:	21053804 	addi	r4,r4,5344
20085c48:	01480434 	movhi	r5,8208
20085c4c:	29453004 	addi	r5,r5,5312
20085c50:	180d883a 	mov	r6,r3
20085c54:	01c00804 	movi	r7,32
20085c58:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x21, 0x6A);
20085c5c:	e0bff717 	ldw	r2,-36(fp)
20085c60:	10c03fcc 	andi	r3,r2,255
20085c64:	18c0201c 	xori	r3,r3,128
20085c68:	18ffe004 	addi	r3,r3,-128
20085c6c:	00801a84 	movi	r2,106
20085c70:	d8800015 	stw	r2,0(sp)
20085c74:	01080434 	movhi	r4,8208
20085c78:	21053804 	addi	r4,r4,5344
20085c7c:	01480434 	movhi	r5,8208
20085c80:	29453004 	addi	r5,r5,5312
20085c84:	180d883a 	mov	r6,r3
20085c88:	01c00844 	movi	r7,33
20085c8c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x22, 0x08);
20085c90:	e0bff717 	ldw	r2,-36(fp)
20085c94:	10c03fcc 	andi	r3,r2,255
20085c98:	18c0201c 	xori	r3,r3,128
20085c9c:	18ffe004 	addi	r3,r3,-128
20085ca0:	00800204 	movi	r2,8
20085ca4:	d8800015 	stw	r2,0(sp)
20085ca8:	01080434 	movhi	r4,8208
20085cac:	21053804 	addi	r4,r4,5344
20085cb0:	01480434 	movhi	r5,8208
20085cb4:	29453004 	addi	r5,r5,5312
20085cb8:	180d883a 	mov	r6,r3
20085cbc:	01c00884 	movi	r7,34
20085cc0:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x23, 0x00);
20085cc4:	e0bff717 	ldw	r2,-36(fp)
20085cc8:	10803fcc 	andi	r2,r2,255
20085ccc:	1080201c 	xori	r2,r2,128
20085cd0:	10bfe004 	addi	r2,r2,-128
20085cd4:	d8000015 	stw	zero,0(sp)
20085cd8:	01080434 	movhi	r4,8208
20085cdc:	21053804 	addi	r4,r4,5344
20085ce0:	01480434 	movhi	r5,8208
20085ce4:	29453004 	addi	r5,r5,5312
20085ce8:	100d883a 	mov	r6,r2
20085cec:	01c008c4 	movi	r7,35
20085cf0:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x24, 0x1D);
20085cf4:	e0bff717 	ldw	r2,-36(fp)
20085cf8:	10c03fcc 	andi	r3,r2,255
20085cfc:	18c0201c 	xori	r3,r3,128
20085d00:	18ffe004 	addi	r3,r3,-128
20085d04:	00800744 	movi	r2,29
20085d08:	d8800015 	stw	r2,0(sp)
20085d0c:	01080434 	movhi	r4,8208
20085d10:	21053804 	addi	r4,r4,5344
20085d14:	01480434 	movhi	r5,8208
20085d18:	29453004 	addi	r5,r5,5312
20085d1c:	180d883a 	mov	r6,r3
20085d20:	01c00904 	movi	r7,36
20085d24:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x25, 0x50);
20085d28:	e0bff717 	ldw	r2,-36(fp)
20085d2c:	10c03fcc 	andi	r3,r2,255
20085d30:	18c0201c 	xori	r3,r3,128
20085d34:	18ffe004 	addi	r3,r3,-128
20085d38:	00801404 	movi	r2,80
20085d3c:	d8800015 	stw	r2,0(sp)
20085d40:	01080434 	movhi	r4,8208
20085d44:	21053804 	addi	r4,r4,5344
20085d48:	01480434 	movhi	r5,8208
20085d4c:	29453004 	addi	r5,r5,5312
20085d50:	180d883a 	mov	r6,r3
20085d54:	01c00944 	movi	r7,37
20085d58:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x26, 0x04);
20085d5c:	e0bff717 	ldw	r2,-36(fp)
20085d60:	10c03fcc 	andi	r3,r2,255
20085d64:	18c0201c 	xori	r3,r3,128
20085d68:	18ffe004 	addi	r3,r3,-128
20085d6c:	00800104 	movi	r2,4
20085d70:	d8800015 	stw	r2,0(sp)
20085d74:	01080434 	movhi	r4,8208
20085d78:	21053804 	addi	r4,r4,5344
20085d7c:	01480434 	movhi	r5,8208
20085d80:	29453004 	addi	r5,r5,5312
20085d84:	180d883a 	mov	r6,r3
20085d88:	01c00984 	movi	r7,38
20085d8c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x27, 0x23);
20085d90:	e0bff717 	ldw	r2,-36(fp)
20085d94:	10c03fcc 	andi	r3,r2,255
20085d98:	18c0201c 	xori	r3,r3,128
20085d9c:	18ffe004 	addi	r3,r3,-128
20085da0:	008008c4 	movi	r2,35
20085da4:	d8800015 	stw	r2,0(sp)
20085da8:	01080434 	movhi	r4,8208
20085dac:	21053804 	addi	r4,r4,5344
20085db0:	01480434 	movhi	r5,8208
20085db4:	29453004 	addi	r5,r5,5312
20085db8:	180d883a 	mov	r6,r3
20085dbc:	01c009c4 	movi	r7,39
20085dc0:	0085f780 	call	20085f78 <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x28, 0x1F);
20085dc4:	e0bff717 	ldw	r2,-36(fp)
20085dc8:	10c03fcc 	andi	r3,r2,255
20085dcc:	18c0201c 	xori	r3,r3,128
20085dd0:	18ffe004 	addi	r3,r3,-128
20085dd4:	008007c4 	movi	r2,31
20085dd8:	d8800015 	stw	r2,0(sp)
20085ddc:	01080434 	movhi	r4,8208
20085de0:	21053804 	addi	r4,r4,5344
20085de4:	01480434 	movhi	r5,8208
20085de8:	29453004 	addi	r5,r5,5312
20085dec:	180d883a 	mov	r6,r3
20085df0:	01c00a04 	movi	r7,40
20085df4:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x29, 0xFC);
20085df8:	e0bff717 	ldw	r2,-36(fp)
20085dfc:	10c03fcc 	andi	r3,r2,255
20085e00:	18c0201c 	xori	r3,r3,128
20085e04:	18ffe004 	addi	r3,r3,-128
20085e08:	00803f04 	movi	r2,252
20085e0c:	d8800015 	stw	r2,0(sp)
20085e10:	01080434 	movhi	r4,8208
20085e14:	21053804 	addi	r4,r4,5344
20085e18:	01480434 	movhi	r5,8208
20085e1c:	29453004 	addi	r5,r5,5312
20085e20:	180d883a 	mov	r6,r3
20085e24:	01c00a44 	movi	r7,41
20085e28:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2A, 0x08);
20085e2c:	e0bff717 	ldw	r2,-36(fp)
20085e30:	10c03fcc 	andi	r3,r2,255
20085e34:	18c0201c 	xori	r3,r3,128
20085e38:	18ffe004 	addi	r3,r3,-128
20085e3c:	00800204 	movi	r2,8
20085e40:	d8800015 	stw	r2,0(sp)
20085e44:	01080434 	movhi	r4,8208
20085e48:	21053804 	addi	r4,r4,5344
20085e4c:	01480434 	movhi	r5,8208
20085e50:	29453004 	addi	r5,r5,5312
20085e54:	180d883a 	mov	r6,r3
20085e58:	01c00a84 	movi	r7,42
20085e5c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2B, 0x00);
20085e60:	e0bff717 	ldw	r2,-36(fp)
20085e64:	10803fcc 	andi	r2,r2,255
20085e68:	1080201c 	xori	r2,r2,128
20085e6c:	10bfe004 	addi	r2,r2,-128
20085e70:	d8000015 	stw	zero,0(sp)
20085e74:	01080434 	movhi	r4,8208
20085e78:	21053804 	addi	r4,r4,5344
20085e7c:	01480434 	movhi	r5,8208
20085e80:	29453004 	addi	r5,r5,5312
20085e84:	100d883a 	mov	r6,r2
20085e88:	01c00ac4 	movi	r7,43
20085e8c:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2C, 0x0D);
20085e90:	e0bff717 	ldw	r2,-36(fp)
20085e94:	10c03fcc 	andi	r3,r2,255
20085e98:	18c0201c 	xori	r3,r3,128
20085e9c:	18ffe004 	addi	r3,r3,-128
20085ea0:	00800344 	movi	r2,13
20085ea4:	d8800015 	stw	r2,0(sp)
20085ea8:	01080434 	movhi	r4,8208
20085eac:	21053804 	addi	r4,r4,5344
20085eb0:	01480434 	movhi	r5,8208
20085eb4:	29453004 	addi	r5,r5,5312
20085eb8:	180d883a 	mov	r6,r3
20085ebc:	01c00b04 	movi	r7,44
20085ec0:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2D, 0xDE);
20085ec4:	e0bff717 	ldw	r2,-36(fp)
20085ec8:	10c03fcc 	andi	r3,r2,255
20085ecc:	18c0201c 	xori	r3,r3,128
20085ed0:	18ffe004 	addi	r3,r3,-128
20085ed4:	00803784 	movi	r2,222
20085ed8:	d8800015 	stw	r2,0(sp)
20085edc:	01080434 	movhi	r4,8208
20085ee0:	21053804 	addi	r4,r4,5344
20085ee4:	01480434 	movhi	r5,8208
20085ee8:	29453004 	addi	r5,r5,5312
20085eec:	180d883a 	mov	r6,r3
20085ef0:	01c00b44 	movi	r7,45
20085ef4:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2E, 0x19);
20085ef8:	e0bff717 	ldw	r2,-36(fp)
20085efc:	10c03fcc 	andi	r3,r2,255
20085f00:	18c0201c 	xori	r3,r3,128
20085f04:	18ffe004 	addi	r3,r3,-128
20085f08:	00800644 	movi	r2,25
20085f0c:	d8800015 	stw	r2,0(sp)
20085f10:	01080434 	movhi	r4,8208
20085f14:	21053804 	addi	r4,r4,5344
20085f18:	01480434 	movhi	r5,8208
20085f1c:	29453004 	addi	r5,r5,5312
20085f20:	180d883a 	mov	r6,r3
20085f24:	01c00b84 	movi	r7,46
20085f28:	0085f780 	call	20085f78 <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2F, 0x13);
20085f2c:	e0bff717 	ldw	r2,-36(fp)
20085f30:	10c03fcc 	andi	r3,r2,255
20085f34:	18c0201c 	xori	r3,r3,128
20085f38:	18ffe004 	addi	r3,r3,-128
20085f3c:	008004c4 	movi	r2,19
20085f40:	d8800015 	stw	r2,0(sp)
20085f44:	01080434 	movhi	r4,8208
20085f48:	21053804 	addi	r4,r4,5344
20085f4c:	01480434 	movhi	r5,8208
20085f50:	29453004 	addi	r5,r5,5312
20085f54:	180d883a 	mov	r6,r3
20085f58:	01c00bc4 	movi	r7,47
20085f5c:	0085f780 	call	20085f78 <I2C_Write>

	return 0;
20085f60:	0005883a 	mov	r2,zero
}
20085f64:	e037883a 	mov	sp,fp
20085f68:	dfc00117 	ldw	ra,4(sp)
20085f6c:	df000017 	ldw	fp,0(sp)
20085f70:	dec00204 	addi	sp,sp,8
20085f74:	f800283a 	ret

20085f78 <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
20085f78:	defff804 	addi	sp,sp,-32
20085f7c:	dfc00715 	stw	ra,28(sp)
20085f80:	df000615 	stw	fp,24(sp)
20085f84:	df000604 	addi	fp,sp,24
20085f88:	e13ffb15 	stw	r4,-20(fp)
20085f8c:	e17ffc15 	stw	r5,-16(fp)
20085f90:	3009883a 	mov	r4,r6
20085f94:	3807883a 	mov	r3,r7
20085f98:	e0800217 	ldw	r2,8(fp)
20085f9c:	e13ffd05 	stb	r4,-12(fp)
20085fa0:	e0fffe05 	stb	r3,-8(fp)
20085fa4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
20085fa8:	00800044 	movi	r2,1
20085fac:	e0bffa15 	stw	r2,-24(fp)

    i2c_start(clk_base, data_base);
20085fb0:	e13ffb17 	ldw	r4,-20(fp)
20085fb4:	e17ffc17 	ldw	r5,-16(fp)
20085fb8:	00861500 	call	20086150 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20085fbc:	e0bffd03 	ldbu	r2,-12(fp)
20085fc0:	10803fcc 	andi	r2,r2,255
20085fc4:	e13ffb17 	ldw	r4,-20(fp)
20085fc8:	e17ffc17 	ldw	r5,-16(fp)
20085fcc:	100d883a 	mov	r6,r2
20085fd0:	008624c0 	call	2008624c <i2c_write>
20085fd4:	1000011e 	bne	r2,zero,20085fdc <I2C_Write+0x64>
        bSuccess = FALSE;
20085fd8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20085fdc:	e0bffa17 	ldw	r2,-24(fp)
20085fe0:	10000726 	beq	r2,zero,20086000 <I2C_Write+0x88>
20085fe4:	e0bffe03 	ldbu	r2,-8(fp)
20085fe8:	e13ffb17 	ldw	r4,-20(fp)
20085fec:	e17ffc17 	ldw	r5,-16(fp)
20085ff0:	100d883a 	mov	r6,r2
20085ff4:	008624c0 	call	2008624c <i2c_write>
20085ff8:	1000011e 	bne	r2,zero,20086000 <I2C_Write+0x88>
        bSuccess = FALSE;
20085ffc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
20086000:	e0bffa17 	ldw	r2,-24(fp)
20086004:	10000726 	beq	r2,zero,20086024 <I2C_Write+0xac>
20086008:	e0bfff03 	ldbu	r2,-4(fp)
2008600c:	e13ffb17 	ldw	r4,-20(fp)
20086010:	e17ffc17 	ldw	r5,-16(fp)
20086014:	100d883a 	mov	r6,r2
20086018:	008624c0 	call	2008624c <i2c_write>
2008601c:	1000011e 	bne	r2,zero,20086024 <I2C_Write+0xac>
        bSuccess = FALSE;
20086020:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
20086024:	e13ffb17 	ldw	r4,-20(fp)
20086028:	e17ffc17 	ldw	r5,-16(fp)
2008602c:	00861d80 	call	200861d8 <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
20086030:	0106d604 	movi	r4,7000
20086034:	00977ec0 	call	200977ec <usleep>

    return bSuccess;
20086038:	e0bffa17 	ldw	r2,-24(fp)


}
2008603c:	e037883a 	mov	sp,fp
20086040:	dfc00117 	ldw	ra,4(sp)
20086044:	df000017 	ldw	fp,0(sp)
20086048:	dec00204 	addi	sp,sp,8
2008604c:	f800283a 	ret

20086050 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
20086050:	defff904 	addi	sp,sp,-28
20086054:	dfc00615 	stw	ra,24(sp)
20086058:	df000515 	stw	fp,20(sp)
2008605c:	df000504 	addi	fp,sp,20
20086060:	e13ffc15 	stw	r4,-16(fp)
20086064:	e17ffd15 	stw	r5,-12(fp)
20086068:	3007883a 	mov	r3,r6
2008606c:	3805883a 	mov	r2,r7
20086070:	e0fffe05 	stb	r3,-8(fp)
20086074:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
20086078:	00800044 	movi	r2,1
2008607c:	e0bffb15 	stw	r2,-20(fp)

    i2c_start(clk_base, data_base);
20086080:	e13ffc17 	ldw	r4,-16(fp)
20086084:	e17ffd17 	ldw	r5,-12(fp)
20086088:	00861500 	call	20086150 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
2008608c:	e0bffe03 	ldbu	r2,-8(fp)
20086090:	10803fcc 	andi	r2,r2,255
20086094:	e13ffc17 	ldw	r4,-16(fp)
20086098:	e17ffd17 	ldw	r5,-12(fp)
2008609c:	100d883a 	mov	r6,r2
200860a0:	008624c0 	call	2008624c <i2c_write>
200860a4:	1000011e 	bne	r2,zero,200860ac <I2C_Read+0x5c>
        bSuccess = FALSE;
200860a8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
200860ac:	e0bffb17 	ldw	r2,-20(fp)
200860b0:	10000726 	beq	r2,zero,200860d0 <I2C_Read+0x80>
200860b4:	e0bfff03 	ldbu	r2,-4(fp)
200860b8:	e13ffc17 	ldw	r4,-16(fp)
200860bc:	e17ffd17 	ldw	r5,-12(fp)
200860c0:	100d883a 	mov	r6,r2
200860c4:	008624c0 	call	2008624c <i2c_write>
200860c8:	1000011e 	bne	r2,zero,200860d0 <I2C_Read+0x80>
        bSuccess = FALSE;
200860cc:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
200860d0:	e13ffc17 	ldw	r4,-16(fp)
200860d4:	e17ffd17 	ldw	r5,-12(fp)
200860d8:	00861500 	call	20086150 <i2c_start>
    DeviceAddr |= 1; // Read
200860dc:	e0bffe03 	ldbu	r2,-8(fp)
200860e0:	10800054 	ori	r2,r2,1
200860e4:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
200860e8:	e0bffb17 	ldw	r2,-20(fp)
200860ec:	10000826 	beq	r2,zero,20086110 <I2C_Read+0xc0>
200860f0:	e0bffe03 	ldbu	r2,-8(fp)
200860f4:	10803fcc 	andi	r2,r2,255
200860f8:	e13ffc17 	ldw	r4,-16(fp)
200860fc:	e17ffd17 	ldw	r5,-12(fp)
20086100:	100d883a 	mov	r6,r2
20086104:	008624c0 	call	2008624c <i2c_write>
20086108:	1000011e 	bne	r2,zero,20086110 <I2C_Read+0xc0>
        bSuccess = FALSE;
2008610c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
20086110:	e0bffb17 	ldw	r2,-20(fp)
20086114:	10000526 	beq	r2,zero,2008612c <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
20086118:	e13ffc17 	ldw	r4,-16(fp)
2008611c:	e17ffd17 	ldw	r5,-12(fp)
20086120:	e1800217 	ldw	r6,8(fp)
20086124:	000f883a 	mov	r7,zero
20086128:	008637c0 	call	2008637c <i2c_read>
    }
    i2c_stop(clk_base, data_base);
2008612c:	e13ffc17 	ldw	r4,-16(fp)
20086130:	e17ffd17 	ldw	r5,-12(fp)
20086134:	00861d80 	call	200861d8 <i2c_stop>

    return bSuccess;
20086138:	e0bffb17 	ldw	r2,-20(fp)
}
2008613c:	e037883a 	mov	sp,fp
20086140:	dfc00117 	ldw	ra,4(sp)
20086144:	df000017 	ldw	fp,0(sp)
20086148:	dec00204 	addi	sp,sp,8
2008614c:	f800283a 	ret

20086150 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
20086150:	defffc04 	addi	sp,sp,-16
20086154:	dfc00315 	stw	ra,12(sp)
20086158:	df000215 	stw	fp,8(sp)
2008615c:	df000204 	addi	fp,sp,8
20086160:	e13ffe15 	stw	r4,-8(fp)
20086164:	e17fff15 	stw	r5,-4(fp)

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20086168:	e0bfff17 	ldw	r2,-4(fp)
2008616c:	10800104 	addi	r2,r2,4
20086170:	1007883a 	mov	r3,r2
20086174:	00800044 	movi	r2,1
20086178:	18800035 	stwio	r2,0(r3)

    // start condition
    SDA_HIGH(data_base); // data high
2008617c:	e0bfff17 	ldw	r2,-4(fp)
20086180:	00c00044 	movi	r3,1
20086184:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
20086188:	e0bffe17 	ldw	r2,-8(fp)
2008618c:	00c00044 	movi	r3,1
20086190:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
20086194:	01000044 	movi	r4,1
20086198:	00977ec0 	call	200977ec <usleep>

    SDA_LOW(data_base); // data low
2008619c:	e0bfff17 	ldw	r2,-4(fp)
200861a0:	0007883a 	mov	r3,zero
200861a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
200861a8:	01000044 	movi	r4,1
200861ac:	00977ec0 	call	200977ec <usleep>
    SCL_LOW(clk_base); // clock low
200861b0:	e0bffe17 	ldw	r2,-8(fp)
200861b4:	0007883a 	mov	r3,zero
200861b8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
200861bc:	01000044 	movi	r4,1
200861c0:	00977ec0 	call	200977ec <usleep>
}
200861c4:	e037883a 	mov	sp,fp
200861c8:	dfc00117 	ldw	ra,4(sp)
200861cc:	df000017 	ldw	fp,0(sp)
200861d0:	dec00204 	addi	sp,sp,8
200861d4:	f800283a 	ret

200861d8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
200861d8:	defffc04 	addi	sp,sp,-16
200861dc:	dfc00315 	stw	ra,12(sp)
200861e0:	df000215 	stw	fp,8(sp)
200861e4:	df000204 	addi	fp,sp,8
200861e8:	e13ffe15 	stw	r4,-8(fp)
200861ec:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
200861f0:	e0bfff17 	ldw	r2,-4(fp)
200861f4:	10800104 	addi	r2,r2,4
200861f8:	1007883a 	mov	r3,r2
200861fc:	00800044 	movi	r2,1
20086200:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
20086204:	e0bfff17 	ldw	r2,-4(fp)
20086208:	0007883a 	mov	r3,zero
2008620c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
20086210:	e0bffe17 	ldw	r2,-8(fp)
20086214:	00c00044 	movi	r3,1
20086218:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
2008621c:	01000044 	movi	r4,1
20086220:	00977ec0 	call	200977ec <usleep>
    SDA_HIGH(data_base); // data high
20086224:	e0bfff17 	ldw	r2,-4(fp)
20086228:	00c00044 	movi	r3,1
2008622c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
20086230:	01000044 	movi	r4,1
20086234:	00977ec0 	call	200977ec <usleep>



}
20086238:	e037883a 	mov	sp,fp
2008623c:	dfc00117 	ldw	ra,4(sp)
20086240:	df000017 	ldw	fp,0(sp)
20086244:	dec00204 	addi	sp,sp,8
20086248:	f800283a 	ret

2008624c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
2008624c:	defff804 	addi	sp,sp,-32
20086250:	dfc00715 	stw	ra,28(sp)
20086254:	df000615 	stw	fp,24(sp)
20086258:	df000604 	addi	fp,sp,24
2008625c:	e13ffd15 	stw	r4,-12(fp)
20086260:	e17ffe15 	stw	r5,-8(fp)
20086264:	3005883a 	mov	r2,r6
20086268:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
2008626c:	00bfe004 	movi	r2,-128
20086270:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086274:	e0bffe17 	ldw	r2,-8(fp)
20086278:	10800104 	addi	r2,r2,4
2008627c:	1007883a 	mov	r3,r2
20086280:	00800044 	movi	r2,1
20086284:	18800035 	stwio	r2,0(r3)

    for(i=0;i<8;i++){
20086288:	e03ffb15 	stw	zero,-20(fp)
2008628c:	00001f06 	br	2008630c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086290:	e0bffd17 	ldw	r2,-12(fp)
20086294:	0007883a 	mov	r3,zero
20086298:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
2008629c:	e0ffff03 	ldbu	r3,-4(fp)
200862a0:	e0bffa03 	ldbu	r2,-24(fp)
200862a4:	1884703a 	and	r2,r3,r2
200862a8:	10803fcc 	andi	r2,r2,255
200862ac:	10000426 	beq	r2,zero,200862c0 <i2c_write+0x74>
            SDA_HIGH(data_base);
200862b0:	e0bffe17 	ldw	r2,-8(fp)
200862b4:	00c00044 	movi	r3,1
200862b8:	10c00035 	stwio	r3,0(r2)
200862bc:	00000306 	br	200862cc <i2c_write+0x80>
        }else{
            SDA_LOW(data_base);
200862c0:	e0bffe17 	ldw	r2,-8(fp)
200862c4:	0007883a 	mov	r3,zero
200862c8:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
200862cc:	e0bffa03 	ldbu	r2,-24(fp)
200862d0:	1004d07a 	srli	r2,r2,1
200862d4:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
200862d8:	e0bffd17 	ldw	r2,-12(fp)
200862dc:	00c00044 	movi	r3,1
200862e0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
200862e4:	01000044 	movi	r4,1
200862e8:	00977ec0 	call	200977ec <usleep>
        SCL_LOW(clk_base);
200862ec:	e0bffd17 	ldw	r2,-12(fp)
200862f0:	0007883a 	mov	r3,zero
200862f4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
200862f8:	01000044 	movi	r4,1
200862fc:	00977ec0 	call	200977ec <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20086300:	e0bffb17 	ldw	r2,-20(fp)
20086304:	10800044 	addi	r2,r2,1
20086308:	e0bffb15 	stw	r2,-20(fp)
2008630c:	e0bffb17 	ldw	r2,-20(fp)
20086310:	10800210 	cmplti	r2,r2,8
20086314:	103fde1e 	bne	r2,zero,20086290 <__flash_rwdata_start+0xfffea10c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086318:	e0bffe17 	ldw	r2,-8(fp)
2008631c:	10800104 	addi	r2,r2,4
20086320:	0007883a 	mov	r3,zero
20086324:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20086328:	e0bffd17 	ldw	r2,-12(fp)
2008632c:	00c00044 	movi	r3,1
20086330:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
20086334:	01000044 	movi	r4,1
20086338:	00977ec0 	call	200977ec <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
2008633c:	e0bffe17 	ldw	r2,-8(fp)
20086340:	10800037 	ldwio	r2,0(r2)
20086344:	1005003a 	cmpeq	r2,r2,zero
20086348:	10803fcc 	andi	r2,r2,255
2008634c:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20086350:	e0bffd17 	ldw	r2,-12(fp)
20086354:	0007883a 	mov	r3,zero
20086358:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
2008635c:	01000044 	movi	r4,1
20086360:	00977ec0 	call	200977ec <usleep>
    return bAck;
20086364:	e0bffc17 	ldw	r2,-16(fp)
}
20086368:	e037883a 	mov	sp,fp
2008636c:	dfc00117 	ldw	ra,4(sp)
20086370:	df000017 	ldw	fp,0(sp)
20086374:	dec00204 	addi	sp,sp,8
20086378:	f800283a 	ret

2008637c <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
2008637c:	defff804 	addi	sp,sp,-32
20086380:	dfc00715 	stw	ra,28(sp)
20086384:	df000615 	stw	fp,24(sp)
20086388:	df000604 	addi	fp,sp,24
2008638c:	e13ffc15 	stw	r4,-16(fp)
20086390:	e17ffd15 	stw	r5,-12(fp)
20086394:	e1bffe15 	stw	r6,-8(fp)
20086398:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
2008639c:	e03ffa05 	stb	zero,-24(fp)
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
200863a0:	e0bffd17 	ldw	r2,-12(fp)
200863a4:	10800104 	addi	r2,r2,4
200863a8:	0007883a 	mov	r3,zero
200863ac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
200863b0:	e0bffc17 	ldw	r2,-16(fp)
200863b4:	0007883a 	mov	r3,zero
200863b8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
200863bc:	01000044 	movi	r4,1
200863c0:	00977ec0 	call	200977ec <usleep>

    for(i=0;i<8;i++){
200863c4:	e03ffb15 	stw	zero,-20(fp)
200863c8:	00001606 	br	20086424 <i2c_read+0xa8>
        Data <<= 1;
200863cc:	e0bffa03 	ldbu	r2,-24(fp)
200863d0:	1085883a 	add	r2,r2,r2
200863d4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
200863d8:	e0bffc17 	ldw	r2,-16(fp)
200863dc:	00c00044 	movi	r3,1
200863e0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
200863e4:	01000044 	movi	r4,1
200863e8:	00977ec0 	call	200977ec <usleep>
        if (SDA_READ(data_base))  // read data
200863ec:	e0bffd17 	ldw	r2,-12(fp)
200863f0:	10800037 	ldwio	r2,0(r2)
200863f4:	10000326 	beq	r2,zero,20086404 <i2c_read+0x88>
            Data |= 0x01;
200863f8:	e0bffa03 	ldbu	r2,-24(fp)
200863fc:	10800054 	ori	r2,r2,1
20086400:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log
20086404:	e0bffc17 	ldw	r2,-16(fp)
20086408:	0007883a 	mov	r3,zero
2008640c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
20086410:	01000044 	movi	r4,1
20086414:	00977ec0 	call	200977ec <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
20086418:	e0bffb17 	ldw	r2,-20(fp)
2008641c:	10800044 	addi	r2,r2,1
20086420:	e0bffb15 	stw	r2,-20(fp)
20086424:	e0bffb17 	ldw	r2,-20(fp)
20086428:	10800210 	cmplti	r2,r2,8
2008642c:	103fe71e 	bne	r2,zero,200863cc <__flash_rwdata_start+0xfffea248>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
20086430:	e0bffc17 	ldw	r2,-16(fp)
20086434:	0007883a 	mov	r3,zero
20086438:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
2008643c:	e0bffd17 	ldw	r2,-12(fp)
20086440:	10800104 	addi	r2,r2,4
20086444:	1007883a 	mov	r3,r2
20086448:	00800044 	movi	r2,1
2008644c:	18800035 	stwio	r2,0(r3)
    if (bAck)
20086450:	e0bfff17 	ldw	r2,-4(fp)
20086454:	10000426 	beq	r2,zero,20086468 <i2c_read+0xec>
        SDA_LOW(data_base);
20086458:	e0bffd17 	ldw	r2,-12(fp)
2008645c:	0007883a 	mov	r3,zero
20086460:	10c00035 	stwio	r3,0(r2)
20086464:	00000306 	br	20086474 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
20086468:	e0bffd17 	ldw	r2,-12(fp)
2008646c:	00c00044 	movi	r3,1
20086470:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
20086474:	e0bffc17 	ldw	r2,-16(fp)
20086478:	00c00044 	movi	r3,1
2008647c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
20086480:	01000044 	movi	r4,1
20086484:	00977ec0 	call	200977ec <usleep>
    SCL_LOW(clk_base); // clock low
20086488:	e0bffc17 	ldw	r2,-16(fp)
2008648c:	0007883a 	mov	r3,zero
20086490:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
20086494:	01000044 	movi	r4,1
20086498:	00977ec0 	call	200977ec <usleep>
    SDA_LOW(data_base);  // data low
2008649c:	e0bffd17 	ldw	r2,-12(fp)
200864a0:	0007883a 	mov	r3,zero
200864a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
200864a8:	01000044 	movi	r4,1
200864ac:	00977ec0 	call	200977ec <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
200864b0:	e0bffe17 	ldw	r2,-8(fp)
200864b4:	e0fffa03 	ldbu	r3,-24(fp)
200864b8:	10c00005 	stb	r3,0(r2)
}
200864bc:	e037883a 	mov	sp,fp
200864c0:	dfc00117 	ldw	ra,4(sp)
200864c4:	df000017 	ldw	fp,0(sp)
200864c8:	dec00204 	addi	sp,sp,8
200864cc:	f800283a 	ret

200864d0 <main>:
#include "hw_sd/hw_sd.h"
#include "hw_vid_ctl/hw_vid_ctl.h"


int main()
{
200864d0:	defffc04 	addi	sp,sp,-16
200864d4:	dfc00315 	stw	ra,12(sp)
200864d8:	df000215 	stw	fp,8(sp)
200864dc:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
200864e0:	01000034 	movhi	r4,0
200864e4:	2100ba04 	addi	r4,r4,744
200864e8:	0089ccc0 	call	20089ccc <puts>
  if (SDLIB_Init(SD_CONT_0_BASE) == 1){
200864ec:	01080434 	movhi	r4,8208
200864f0:	21040004 	addi	r4,r4,4096
200864f4:	00851600 	call	20085160 <SDLIB_Init>
200864f8:	10800058 	cmpnei	r2,r2,1
200864fc:	1000031e 	bne	r2,zero,2008650c <main+0x3c>

  printf("Passed SDLIB!\n");
20086500:	01000034 	movhi	r4,0
20086504:	2100bf04 	addi	r4,r4,764
20086508:	0089ccc0 	call	20089ccc <puts>
  }
  printf("2!\n");
2008650c:	01000034 	movhi	r4,0
20086510:	2100c304 	addi	r4,r4,780
20086514:	0089ccc0 	call	20089ccc <puts>
  FAT_HANDLE hFAT;
  hFAT = Fat_Mount();
20086518:	008028c0 	call	2008028c <Fat_Mount>
2008651c:	e0bffe15 	stw	r2,-8(fp)

  FAT_BROWSE_HANDLE *pFatBrowseHandle;
  printf("%d",Fat_FileBrowseBegin(hFAT,pFatBrowseHandle));
20086520:	e13ffe17 	ldw	r4,-8(fp)
20086524:	e17fff17 	ldw	r5,-4(fp)
20086528:	00803680 	call	20080368 <Fat_FileBrowseBegin>
2008652c:	01000034 	movhi	r4,0
20086530:	2100c404 	addi	r4,r4,784
20086534:	100b883a 	mov	r5,r2
20086538:	0089be80 	call	20089be8 <printf>

  return 0;
2008653c:	0005883a 	mov	r2,zero
}
20086540:	e037883a 	mov	sp,fp
20086544:	dfc00117 	ldw	ra,4(sp)
20086548:	df000017 	ldw	fp,0(sp)
2008654c:	dec00204 	addi	sp,sp,8
20086550:	f800283a 	ret

20086554 <udivmodsi4>:
20086554:	2900182e 	bgeu	r5,r4,200865b8 <udivmodsi4+0x64>
20086558:	28001716 	blt	r5,zero,200865b8 <udivmodsi4+0x64>
2008655c:	00800804 	movi	r2,32
20086560:	00c00044 	movi	r3,1
20086564:	00000206 	br	20086570 <udivmodsi4+0x1c>
20086568:	10001126 	beq	r2,zero,200865b0 <udivmodsi4+0x5c>
2008656c:	28000516 	blt	r5,zero,20086584 <udivmodsi4+0x30>
20086570:	294b883a 	add	r5,r5,r5
20086574:	10bfffc4 	addi	r2,r2,-1
20086578:	18c7883a 	add	r3,r3,r3
2008657c:	293ffa36 	bltu	r5,r4,20086568 <__flash_rwdata_start+0xfffea3e4>
20086580:	18000b26 	beq	r3,zero,200865b0 <udivmodsi4+0x5c>
20086584:	0005883a 	mov	r2,zero
20086588:	21400236 	bltu	r4,r5,20086594 <udivmodsi4+0x40>
2008658c:	2149c83a 	sub	r4,r4,r5
20086590:	10c4b03a 	or	r2,r2,r3
20086594:	1806d07a 	srli	r3,r3,1
20086598:	280ad07a 	srli	r5,r5,1
2008659c:	183ffa1e 	bne	r3,zero,20086588 <__flash_rwdata_start+0xfffea404>
200865a0:	3000011e 	bne	r6,zero,200865a8 <udivmodsi4+0x54>
200865a4:	f800283a 	ret
200865a8:	2005883a 	mov	r2,r4
200865ac:	f800283a 	ret
200865b0:	0005883a 	mov	r2,zero
200865b4:	003ffa06 	br	200865a0 <__flash_rwdata_start+0xfffea41c>
200865b8:	00c00044 	movi	r3,1
200865bc:	003ff106 	br	20086584 <__flash_rwdata_start+0xfffea400>

200865c0 <__divsi3>:
200865c0:	defffe04 	addi	sp,sp,-8
200865c4:	dfc00115 	stw	ra,4(sp)
200865c8:	dc000015 	stw	r16,0(sp)
200865cc:	20000b16 	blt	r4,zero,200865fc <__divsi3+0x3c>
200865d0:	0021883a 	mov	r16,zero
200865d4:	28000c16 	blt	r5,zero,20086608 <__divsi3+0x48>
200865d8:	000d883a 	mov	r6,zero
200865dc:	00865540 	call	20086554 <udivmodsi4>
200865e0:	0407c83a 	sub	r3,zero,r16
200865e4:	1884f03a 	xor	r2,r3,r2
200865e8:	1405883a 	add	r2,r2,r16
200865ec:	dfc00117 	ldw	ra,4(sp)
200865f0:	dc000017 	ldw	r16,0(sp)
200865f4:	dec00204 	addi	sp,sp,8
200865f8:	f800283a 	ret
200865fc:	0109c83a 	sub	r4,zero,r4
20086600:	04000044 	movi	r16,1
20086604:	283ff40e 	bge	r5,zero,200865d8 <__flash_rwdata_start+0xfffea454>
20086608:	014bc83a 	sub	r5,zero,r5
2008660c:	8400005c 	xori	r16,r16,1
20086610:	003ff106 	br	200865d8 <__flash_rwdata_start+0xfffea454>

20086614 <__modsi3>:
20086614:	defffd04 	addi	sp,sp,-12
20086618:	dfc00215 	stw	ra,8(sp)
2008661c:	dc400115 	stw	r17,4(sp)
20086620:	dc000015 	stw	r16,0(sp)
20086624:	20000c16 	blt	r4,zero,20086658 <__modsi3+0x44>
20086628:	0023883a 	mov	r17,zero
2008662c:	0021883a 	mov	r16,zero
20086630:	28000d16 	blt	r5,zero,20086668 <__modsi3+0x54>
20086634:	01800044 	movi	r6,1
20086638:	00865540 	call	20086554 <udivmodsi4>
2008663c:	1404f03a 	xor	r2,r2,r16
20086640:	8885883a 	add	r2,r17,r2
20086644:	dfc00217 	ldw	ra,8(sp)
20086648:	dc400117 	ldw	r17,4(sp)
2008664c:	dc000017 	ldw	r16,0(sp)
20086650:	dec00304 	addi	sp,sp,12
20086654:	f800283a 	ret
20086658:	0109c83a 	sub	r4,zero,r4
2008665c:	04400044 	movi	r17,1
20086660:	043fffc4 	movi	r16,-1
20086664:	283ff30e 	bge	r5,zero,20086634 <__flash_rwdata_start+0xfffea4b0>
20086668:	014bc83a 	sub	r5,zero,r5
2008666c:	003ff106 	br	20086634 <__flash_rwdata_start+0xfffea4b0>

20086670 <__udivsi3>:
20086670:	000d883a 	mov	r6,zero
20086674:	00865541 	jmpi	20086554 <udivmodsi4>

20086678 <__umodsi3>:
20086678:	01800044 	movi	r6,1
2008667c:	00865541 	jmpi	20086554 <udivmodsi4>

20086680 <__divsf3>:
20086680:	defff504 	addi	sp,sp,-44
20086684:	dd000515 	stw	r20,20(sp)
20086688:	2028d5fa 	srli	r20,r4,23
2008668c:	dd400615 	stw	r21,24(sp)
20086690:	202ad7fa 	srli	r21,r4,31
20086694:	00c02034 	movhi	r3,128
20086698:	dcc00415 	stw	r19,16(sp)
2008669c:	dc800315 	stw	r18,12(sp)
200866a0:	18ffffc4 	addi	r3,r3,-1
200866a4:	dfc00a15 	stw	ra,40(sp)
200866a8:	df000915 	stw	fp,36(sp)
200866ac:	ddc00815 	stw	r23,32(sp)
200866b0:	dd800715 	stw	r22,28(sp)
200866b4:	dc400215 	stw	r17,8(sp)
200866b8:	dc000115 	stw	r16,4(sp)
200866bc:	a5003fcc 	andi	r20,r20,255
200866c0:	1924703a 	and	r18,r3,r4
200866c4:	acc03fcc 	andi	r19,r21,255
200866c8:	a0004d26 	beq	r20,zero,20086800 <__divsf3+0x180>
200866cc:	00803fc4 	movi	r2,255
200866d0:	a0802e26 	beq	r20,r2,2008678c <__divsf3+0x10c>
200866d4:	91002034 	orhi	r4,r18,128
200866d8:	202490fa 	slli	r18,r4,3
200866dc:	a53fe044 	addi	r20,r20,-127
200866e0:	0021883a 	mov	r16,zero
200866e4:	002f883a 	mov	r23,zero
200866e8:	2804d5fa 	srli	r2,r5,23
200866ec:	282cd7fa 	srli	r22,r5,31
200866f0:	00c02034 	movhi	r3,128
200866f4:	18ffffc4 	addi	r3,r3,-1
200866f8:	10803fcc 	andi	r2,r2,255
200866fc:	1962703a 	and	r17,r3,r5
20086700:	b7003fcc 	andi	fp,r22,255
20086704:	10004526 	beq	r2,zero,2008681c <__divsf3+0x19c>
20086708:	00c03fc4 	movi	r3,255
2008670c:	10c04026 	beq	r2,r3,20086810 <__divsf3+0x190>
20086710:	88c02034 	orhi	r3,r17,128
20086714:	182290fa 	slli	r17,r3,3
20086718:	10bfe044 	addi	r2,r2,-127
2008671c:	0009883a 	mov	r4,zero
20086720:	2420b03a 	or	r16,r4,r16
20086724:	802090ba 	slli	r16,r16,2
20086728:	01c80234 	movhi	r7,8200
2008672c:	39d9d304 	addi	r7,r7,26444
20086730:	81e1883a 	add	r16,r16,r7
20086734:	80c00017 	ldw	r3,0(r16)
20086738:	ad8af03a 	xor	r5,r21,r22
2008673c:	280d883a 	mov	r6,r5
20086740:	a085c83a 	sub	r2,r20,r2
20086744:	29403fcc 	andi	r5,r5,255
20086748:	1800683a 	jmp	r3
2008674c:	20086958 	cmpnei	zero,r4,8613
20086750:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
20086754:	20086924 	muli	zero,r4,8612
20086758:	200868ec 	andhi	zero,r4,8611
2008675c:	20086924 	muli	zero,r4,8612
20086760:	2008679c 	xori	zero,r4,8606
20086764:	20086924 	muli	zero,r4,8612
20086768:	200868ec 	andhi	zero,r4,8611
2008676c:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
20086770:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
20086774:	2008679c 	xori	zero,r4,8606
20086778:	200868ec 	andhi	zero,r4,8611
2008677c:	200869f0 	cmpltui	zero,r4,8615
20086780:	200869f0 	cmpltui	zero,r4,8615
20086784:	200869f0 	cmpltui	zero,r4,8615
20086788:	20086930 	cmpltui	zero,r4,8612
2008678c:	9000531e 	bne	r18,zero,200868dc <__divsf3+0x25c>
20086790:	04000204 	movi	r16,8
20086794:	05c00084 	movi	r23,2
20086798:	003fd306 	br	200866e8 <__flash_rwdata_start+0xfffea564>
2008679c:	00c02034 	movhi	r3,128
200867a0:	000d883a 	mov	r6,zero
200867a4:	18ffffc4 	addi	r3,r3,-1
200867a8:	013fffc4 	movi	r4,-1
200867ac:	21003fcc 	andi	r4,r4,255
200867b0:	200895fa 	slli	r4,r4,23
200867b4:	30803fcc 	andi	r2,r6,255
200867b8:	01802034 	movhi	r6,128
200867bc:	31bfffc4 	addi	r6,r6,-1
200867c0:	100497fa 	slli	r2,r2,31
200867c4:	1986703a 	and	r3,r3,r6
200867c8:	1906b03a 	or	r3,r3,r4
200867cc:	1884b03a 	or	r2,r3,r2
200867d0:	dfc00a17 	ldw	ra,40(sp)
200867d4:	df000917 	ldw	fp,36(sp)
200867d8:	ddc00817 	ldw	r23,32(sp)
200867dc:	dd800717 	ldw	r22,28(sp)
200867e0:	dd400617 	ldw	r21,24(sp)
200867e4:	dd000517 	ldw	r20,20(sp)
200867e8:	dcc00417 	ldw	r19,16(sp)
200867ec:	dc800317 	ldw	r18,12(sp)
200867f0:	dc400217 	ldw	r17,8(sp)
200867f4:	dc000117 	ldw	r16,4(sp)
200867f8:	dec00b04 	addi	sp,sp,44
200867fc:	f800283a 	ret
20086800:	90002b1e 	bne	r18,zero,200868b0 <__divsf3+0x230>
20086804:	04000104 	movi	r16,4
20086808:	05c00044 	movi	r23,1
2008680c:	003fb606 	br	200866e8 <__flash_rwdata_start+0xfffea564>
20086810:	8800251e 	bne	r17,zero,200868a8 <__divsf3+0x228>
20086814:	01000084 	movi	r4,2
20086818:	00000206 	br	20086824 <__divsf3+0x1a4>
2008681c:	88001a1e 	bne	r17,zero,20086888 <__divsf3+0x208>
20086820:	01000044 	movi	r4,1
20086824:	2420b03a 	or	r16,r4,r16
20086828:	802090ba 	slli	r16,r16,2
2008682c:	00c80234 	movhi	r3,8200
20086830:	18da1204 	addi	r3,r3,26696
20086834:	80e1883a 	add	r16,r16,r3
20086838:	80c00017 	ldw	r3,0(r16)
2008683c:	ad8af03a 	xor	r5,r21,r22
20086840:	a085c83a 	sub	r2,r20,r2
20086844:	1800683a 	jmp	r3
20086848:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
2008684c:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
20086850:	20086a50 	cmplti	zero,r4,8617
20086854:	200868e8 	cmpgeui	zero,r4,8611
20086858:	20086a50 	cmplti	zero,r4,8617
2008685c:	2008679c 	xori	zero,r4,8606
20086860:	20086a50 	cmplti	zero,r4,8617
20086864:	200868e8 	cmpgeui	zero,r4,8611
20086868:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
2008686c:	20086900 	call	22008690 <__flash_rwdata_start+0x1f6c50c>
20086870:	2008679c 	xori	zero,r4,8606
20086874:	200868e8 	cmpgeui	zero,r4,8611
20086878:	200869f0 	cmpltui	zero,r4,8615
2008687c:	200869f0 	cmpltui	zero,r4,8615
20086880:	200869f0 	cmpltui	zero,r4,8615
20086884:	20086a1c 	xori	zero,r4,8616
20086888:	8809883a 	mov	r4,r17
2008688c:	0088ee00 	call	20088ee0 <__clzsi2>
20086890:	10fffec4 	addi	r3,r2,-5
20086894:	88e2983a 	sll	r17,r17,r3
20086898:	00ffe284 	movi	r3,-118
2008689c:	1885c83a 	sub	r2,r3,r2
200868a0:	0009883a 	mov	r4,zero
200868a4:	003f9e06 	br	20086720 <__flash_rwdata_start+0xfffea59c>
200868a8:	010000c4 	movi	r4,3
200868ac:	003f9c06 	br	20086720 <__flash_rwdata_start+0xfffea59c>
200868b0:	9009883a 	mov	r4,r18
200868b4:	d9400015 	stw	r5,0(sp)
200868b8:	0088ee00 	call	20088ee0 <__clzsi2>
200868bc:	10fffec4 	addi	r3,r2,-5
200868c0:	053fe284 	movi	r20,-118
200868c4:	90e4983a 	sll	r18,r18,r3
200868c8:	a0a9c83a 	sub	r20,r20,r2
200868cc:	0021883a 	mov	r16,zero
200868d0:	002f883a 	mov	r23,zero
200868d4:	d9400017 	ldw	r5,0(sp)
200868d8:	003f8306 	br	200866e8 <__flash_rwdata_start+0xfffea564>
200868dc:	04000304 	movi	r16,12
200868e0:	05c000c4 	movi	r23,3
200868e4:	003f8006 	br	200866e8 <__flash_rwdata_start+0xfffea564>
200868e8:	0023883a 	mov	r17,zero
200868ec:	e027883a 	mov	r19,fp
200868f0:	202f883a 	mov	r23,r4
200868f4:	00c00084 	movi	r3,2
200868f8:	980b883a 	mov	r5,r19
200868fc:	b8c0501e 	bne	r23,r3,20086a40 <__divsf3+0x3c0>
20086900:	2980004c 	andi	r6,r5,1
20086904:	013fffc4 	movi	r4,-1
20086908:	0007883a 	mov	r3,zero
2008690c:	003fa706 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086910:	013fe084 	movi	r4,-126
20086914:	2089c83a 	sub	r4,r4,r2
20086918:	00c006c4 	movi	r3,27
2008691c:	1900500e 	bge	r3,r4,20086a60 <__divsf3+0x3e0>
20086920:	9980004c 	andi	r6,r19,1
20086924:	0009883a 	mov	r4,zero
20086928:	0007883a 	mov	r3,zero
2008692c:	003f9f06 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086930:	9080102c 	andhi	r2,r18,64
20086934:	10000226 	beq	r2,zero,20086940 <__divsf3+0x2c0>
20086938:	8880102c 	andhi	r2,r17,64
2008693c:	10003a26 	beq	r2,zero,20086a28 <__divsf3+0x3a8>
20086940:	00802034 	movhi	r2,128
20086944:	90c01034 	orhi	r3,r18,64
20086948:	10bfffc4 	addi	r2,r2,-1
2008694c:	a80d883a 	mov	r6,r21
20086950:	1886703a 	and	r3,r3,r2
20086954:	003f9406 	br	200867a8 <__flash_rwdata_start+0xfffea624>
20086958:	9006917a 	slli	r3,r18,5
2008695c:	8822917a 	slli	r17,r17,5
20086960:	1c402936 	bltu	r3,r17,20086a08 <__divsf3+0x388>
20086964:	1c47c83a 	sub	r3,r3,r17
20086968:	2827883a 	mov	r19,r5
2008696c:	01800684 	movi	r6,26
20086970:	01000044 	movi	r4,1
20086974:	180f883a 	mov	r7,r3
20086978:	2109883a 	add	r4,r4,r4
2008697c:	18c7883a 	add	r3,r3,r3
20086980:	38000116 	blt	r7,zero,20086988 <__divsf3+0x308>
20086984:	1c400236 	bltu	r3,r17,20086990 <__divsf3+0x310>
20086988:	1c47c83a 	sub	r3,r3,r17
2008698c:	21000054 	ori	r4,r4,1
20086990:	31bfffc4 	addi	r6,r6,-1
20086994:	303ff71e 	bne	r6,zero,20086974 <__flash_rwdata_start+0xfffea7f0>
20086998:	1806c03a 	cmpne	r3,r3,zero
2008699c:	1922b03a 	or	r17,r3,r4
200869a0:	11001fc4 	addi	r4,r2,127
200869a4:	013fda0e 	bge	zero,r4,20086910 <__flash_rwdata_start+0xfffea78c>
200869a8:	88c001cc 	andi	r3,r17,7
200869ac:	18000426 	beq	r3,zero,200869c0 <__divsf3+0x340>
200869b0:	894003cc 	andi	r5,r17,15
200869b4:	00c00104 	movi	r3,4
200869b8:	28c00126 	beq	r5,r3,200869c0 <__divsf3+0x340>
200869bc:	88e3883a 	add	r17,r17,r3
200869c0:	88c2002c 	andhi	r3,r17,2048
200869c4:	18000426 	beq	r3,zero,200869d8 <__divsf3+0x358>
200869c8:	11002004 	addi	r4,r2,128
200869cc:	00be0034 	movhi	r2,63488
200869d0:	10bfffc4 	addi	r2,r2,-1
200869d4:	88a2703a 	and	r17,r17,r2
200869d8:	00803f84 	movi	r2,254
200869dc:	1100060e 	bge	r2,r4,200869f8 <__divsf3+0x378>
200869e0:	9980004c 	andi	r6,r19,1
200869e4:	013fffc4 	movi	r4,-1
200869e8:	0007883a 	mov	r3,zero
200869ec:	003f6f06 	br	200867ac <__flash_rwdata_start+0xfffea628>
200869f0:	9023883a 	mov	r17,r18
200869f4:	003fbf06 	br	200868f4 <__flash_rwdata_start+0xfffea770>
200869f8:	880691ba 	slli	r3,r17,6
200869fc:	9980004c 	andi	r6,r19,1
20086a00:	1806d27a 	srli	r3,r3,9
20086a04:	003f6906 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086a08:	10bfffc4 	addi	r2,r2,-1
20086a0c:	2827883a 	mov	r19,r5
20086a10:	018006c4 	movi	r6,27
20086a14:	0009883a 	mov	r4,zero
20086a18:	003fd606 	br	20086974 <__flash_rwdata_start+0xfffea7f0>
20086a1c:	9080102c 	andhi	r2,r18,64
20086a20:	0023883a 	mov	r17,zero
20086a24:	103fc626 	beq	r2,zero,20086940 <__flash_rwdata_start+0xfffea7bc>
20086a28:	00802034 	movhi	r2,128
20086a2c:	88c01034 	orhi	r3,r17,64
20086a30:	10bfffc4 	addi	r2,r2,-1
20086a34:	b00d883a 	mov	r6,r22
20086a38:	1886703a 	and	r3,r3,r2
20086a3c:	003f5a06 	br	200867a8 <__flash_rwdata_start+0xfffea624>
20086a40:	00c000c4 	movi	r3,3
20086a44:	b8c01c26 	beq	r23,r3,20086ab8 <__divsf3+0x438>
20086a48:	00c00044 	movi	r3,1
20086a4c:	b8ffd41e 	bne	r23,r3,200869a0 <__flash_rwdata_start+0xfffea81c>
20086a50:	2980004c 	andi	r6,r5,1
20086a54:	0009883a 	mov	r4,zero
20086a58:	0007883a 	mov	r3,zero
20086a5c:	003f5306 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086a60:	10802784 	addi	r2,r2,158
20086a64:	8884983a 	sll	r2,r17,r2
20086a68:	8908d83a 	srl	r4,r17,r4
20086a6c:	1022c03a 	cmpne	r17,r2,zero
20086a70:	8908b03a 	or	r4,r17,r4
20086a74:	208001cc 	andi	r2,r4,7
20086a78:	10000426 	beq	r2,zero,20086a8c <__divsf3+0x40c>
20086a7c:	20c003cc 	andi	r3,r4,15
20086a80:	00800104 	movi	r2,4
20086a84:	18800126 	beq	r3,r2,20086a8c <__divsf3+0x40c>
20086a88:	2089883a 	add	r4,r4,r2
20086a8c:	2081002c 	andhi	r2,r4,1024
20086a90:	10000426 	beq	r2,zero,20086aa4 <__divsf3+0x424>
20086a94:	9980004c 	andi	r6,r19,1
20086a98:	01000044 	movi	r4,1
20086a9c:	0007883a 	mov	r3,zero
20086aa0:	003f4206 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086aa4:	200691ba 	slli	r3,r4,6
20086aa8:	9980004c 	andi	r6,r19,1
20086aac:	0009883a 	mov	r4,zero
20086ab0:	1806d27a 	srli	r3,r3,9
20086ab4:	003f3d06 	br	200867ac <__flash_rwdata_start+0xfffea628>
20086ab8:	00802034 	movhi	r2,128
20086abc:	88c01034 	orhi	r3,r17,64
20086ac0:	10bfffc4 	addi	r2,r2,-1
20086ac4:	9980004c 	andi	r6,r19,1
20086ac8:	1886703a 	and	r3,r3,r2
20086acc:	003f3606 	br	200867a8 <__flash_rwdata_start+0xfffea624>

20086ad0 <__mulsf3>:
20086ad0:	defff504 	addi	sp,sp,-44
20086ad4:	dc400215 	stw	r17,8(sp)
20086ad8:	2022d5fa 	srli	r17,r4,23
20086adc:	dd400615 	stw	r21,24(sp)
20086ae0:	202ad7fa 	srli	r21,r4,31
20086ae4:	dc000115 	stw	r16,4(sp)
20086ae8:	04002034 	movhi	r16,128
20086aec:	df000915 	stw	fp,36(sp)
20086af0:	dd000515 	stw	r20,20(sp)
20086af4:	843fffc4 	addi	r16,r16,-1
20086af8:	dfc00a15 	stw	ra,40(sp)
20086afc:	ddc00815 	stw	r23,32(sp)
20086b00:	dd800715 	stw	r22,28(sp)
20086b04:	dcc00415 	stw	r19,16(sp)
20086b08:	dc800315 	stw	r18,12(sp)
20086b0c:	8c403fcc 	andi	r17,r17,255
20086b10:	8120703a 	and	r16,r16,r4
20086b14:	a829883a 	mov	r20,r21
20086b18:	af003fcc 	andi	fp,r21,255
20086b1c:	88005026 	beq	r17,zero,20086c60 <__mulsf3+0x190>
20086b20:	00803fc4 	movi	r2,255
20086b24:	88802f26 	beq	r17,r2,20086be4 <__mulsf3+0x114>
20086b28:	84002034 	orhi	r16,r16,128
20086b2c:	802090fa 	slli	r16,r16,3
20086b30:	8c7fe044 	addi	r17,r17,-127
20086b34:	0025883a 	mov	r18,zero
20086b38:	002f883a 	mov	r23,zero
20086b3c:	2804d5fa 	srli	r2,r5,23
20086b40:	282cd7fa 	srli	r22,r5,31
20086b44:	01002034 	movhi	r4,128
20086b48:	213fffc4 	addi	r4,r4,-1
20086b4c:	10803fcc 	andi	r2,r2,255
20086b50:	2166703a 	and	r19,r4,r5
20086b54:	b1803fcc 	andi	r6,r22,255
20086b58:	10004926 	beq	r2,zero,20086c80 <__mulsf3+0x1b0>
20086b5c:	00c03fc4 	movi	r3,255
20086b60:	10c04326 	beq	r2,r3,20086c70 <__mulsf3+0x1a0>
20086b64:	99402034 	orhi	r5,r19,128
20086b68:	282690fa 	slli	r19,r5,3
20086b6c:	10bfe044 	addi	r2,r2,-127
20086b70:	000b883a 	mov	r5,zero
20086b74:	8885883a 	add	r2,r17,r2
20086b78:	2c86b03a 	or	r3,r5,r18
20086b7c:	010003c4 	movi	r4,15
20086b80:	adaaf03a 	xor	r21,r21,r22
20086b84:	12000044 	addi	r8,r2,1
20086b88:	20c06536 	bltu	r4,r3,20086d20 <__mulsf3+0x250>
20086b8c:	180690ba 	slli	r3,r3,2
20086b90:	01080234 	movhi	r4,8200
20086b94:	211ae904 	addi	r4,r4,27556
20086b98:	1907883a 	add	r3,r3,r4
20086b9c:	18c00017 	ldw	r3,0(r3)
20086ba0:	1800683a 	jmp	r3
20086ba4:	20086d20 	cmpeqi	zero,r4,8628
20086ba8:	20086dec 	andhi	zero,r4,8631
20086bac:	20086dec 	andhi	zero,r4,8631
20086bb0:	20086dfc 	xorhi	zero,r4,8631
20086bb4:	20086bf4 	orhi	zero,r4,8623
20086bb8:	20086bf4 	orhi	zero,r4,8623
20086bbc:	20086d0c 	andi	zero,r4,8628
20086bc0:	20086dfc 	xorhi	zero,r4,8631
20086bc4:	20086bf4 	orhi	zero,r4,8623
20086bc8:	20086d0c 	andi	zero,r4,8628
20086bcc:	20086bf4 	orhi	zero,r4,8623
20086bd0:	20086dfc 	xorhi	zero,r4,8631
20086bd4:	20086bf8 	rdprs	zero,r4,8623
20086bd8:	20086bf8 	rdprs	zero,r4,8623
20086bdc:	20086bf8 	rdprs	zero,r4,8623
20086be0:	20086e0c 	andi	zero,r4,8632
20086be4:	8000311e 	bne	r16,zero,20086cac <__mulsf3+0x1dc>
20086be8:	04800204 	movi	r18,8
20086bec:	05c00084 	movi	r23,2
20086bf0:	003fd206 	br	20086b3c <__flash_rwdata_start+0xfffea9b8>
20086bf4:	a839883a 	mov	fp,r21
20086bf8:	00800084 	movi	r2,2
20086bfc:	b880231e 	bne	r23,r2,20086c8c <__mulsf3+0x1bc>
20086c00:	e500004c 	andi	r20,fp,1
20086c04:	00ffffc4 	movi	r3,-1
20086c08:	0009883a 	mov	r4,zero
20086c0c:	18c03fcc 	andi	r3,r3,255
20086c10:	180695fa 	slli	r3,r3,23
20086c14:	a0803fcc 	andi	r2,r20,255
20086c18:	04002034 	movhi	r16,128
20086c1c:	100497fa 	slli	r2,r2,31
20086c20:	843fffc4 	addi	r16,r16,-1
20086c24:	2420703a 	and	r16,r4,r16
20086c28:	80e0b03a 	or	r16,r16,r3
20086c2c:	8084b03a 	or	r2,r16,r2
20086c30:	dfc00a17 	ldw	ra,40(sp)
20086c34:	df000917 	ldw	fp,36(sp)
20086c38:	ddc00817 	ldw	r23,32(sp)
20086c3c:	dd800717 	ldw	r22,28(sp)
20086c40:	dd400617 	ldw	r21,24(sp)
20086c44:	dd000517 	ldw	r20,20(sp)
20086c48:	dcc00417 	ldw	r19,16(sp)
20086c4c:	dc800317 	ldw	r18,12(sp)
20086c50:	dc400217 	ldw	r17,8(sp)
20086c54:	dc000117 	ldw	r16,4(sp)
20086c58:	dec00b04 	addi	sp,sp,44
20086c5c:	f800283a 	ret
20086c60:	8000151e 	bne	r16,zero,20086cb8 <__mulsf3+0x1e8>
20086c64:	04800104 	movi	r18,4
20086c68:	05c00044 	movi	r23,1
20086c6c:	003fb306 	br	20086b3c <__flash_rwdata_start+0xfffea9b8>
20086c70:	980b003a 	cmpeq	r5,r19,zero
20086c74:	00c000c4 	movi	r3,3
20086c78:	194bc83a 	sub	r5,r3,r5
20086c7c:	003fbd06 	br	20086b74 <__flash_rwdata_start+0xfffea9f0>
20086c80:	9800181e 	bne	r19,zero,20086ce4 <__mulsf3+0x214>
20086c84:	01400044 	movi	r5,1
20086c88:	003fba06 	br	20086b74 <__flash_rwdata_start+0xfffea9f0>
20086c8c:	008000c4 	movi	r2,3
20086c90:	b8809226 	beq	r23,r2,20086edc <__mulsf3+0x40c>
20086c94:	00800044 	movi	r2,1
20086c98:	b880771e 	bne	r23,r2,20086e78 <__mulsf3+0x3a8>
20086c9c:	e0a8703a 	and	r20,fp,r2
20086ca0:	0007883a 	mov	r3,zero
20086ca4:	0009883a 	mov	r4,zero
20086ca8:	003fd806 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086cac:	04800304 	movi	r18,12
20086cb0:	05c000c4 	movi	r23,3
20086cb4:	003fa106 	br	20086b3c <__flash_rwdata_start+0xfffea9b8>
20086cb8:	8009883a 	mov	r4,r16
20086cbc:	d9400015 	stw	r5,0(sp)
20086cc0:	0088ee00 	call	20088ee0 <__clzsi2>
20086cc4:	10fffec4 	addi	r3,r2,-5
20086cc8:	047fe284 	movi	r17,-118
20086ccc:	80e0983a 	sll	r16,r16,r3
20086cd0:	88a3c83a 	sub	r17,r17,r2
20086cd4:	0025883a 	mov	r18,zero
20086cd8:	002f883a 	mov	r23,zero
20086cdc:	d9400017 	ldw	r5,0(sp)
20086ce0:	003f9606 	br	20086b3c <__flash_rwdata_start+0xfffea9b8>
20086ce4:	9809883a 	mov	r4,r19
20086ce8:	d9800015 	stw	r6,0(sp)
20086cec:	0088ee00 	call	20088ee0 <__clzsi2>
20086cf0:	10fffec4 	addi	r3,r2,-5
20086cf4:	98e6983a 	sll	r19,r19,r3
20086cf8:	00ffe284 	movi	r3,-118
20086cfc:	1885c83a 	sub	r2,r3,r2
20086d00:	000b883a 	mov	r5,zero
20086d04:	d9800017 	ldw	r6,0(sp)
20086d08:	003f9a06 	br	20086b74 <__flash_rwdata_start+0xfffea9f0>
20086d0c:	01002034 	movhi	r4,128
20086d10:	0029883a 	mov	r20,zero
20086d14:	213fffc4 	addi	r4,r4,-1
20086d18:	00ffffc4 	movi	r3,-1
20086d1c:	003fbb06 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086d20:	8006d43a 	srli	r3,r16,16
20086d24:	9812d43a 	srli	r9,r19,16
20086d28:	843fffcc 	andi	r16,r16,65535
20086d2c:	997fffcc 	andi	r5,r19,65535
20086d30:	2c0f383a 	mul	r7,r5,r16
20086d34:	28cb383a 	mul	r5,r5,r3
20086d38:	4c21383a 	mul	r16,r9,r16
20086d3c:	380cd43a 	srli	r6,r7,16
20086d40:	48d3383a 	mul	r9,r9,r3
20086d44:	2c21883a 	add	r16,r5,r16
20086d48:	8187883a 	add	r3,r16,r6
20086d4c:	1940022e 	bgeu	r3,r5,20086d58 <__mulsf3+0x288>
20086d50:	01000074 	movhi	r4,1
20086d54:	4913883a 	add	r9,r9,r4
20086d58:	1808943a 	slli	r4,r3,16
20086d5c:	39ffffcc 	andi	r7,r7,65535
20086d60:	1806d43a 	srli	r3,r3,16
20086d64:	21c9883a 	add	r4,r4,r7
20086d68:	202091ba 	slli	r16,r4,6
20086d6c:	48c7883a 	add	r3,r9,r3
20086d70:	2008d6ba 	srli	r4,r4,26
20086d74:	180691ba 	slli	r3,r3,6
20086d78:	8020c03a 	cmpne	r16,r16,zero
20086d7c:	8120b03a 	or	r16,r16,r4
20086d80:	80e0b03a 	or	r16,r16,r3
20086d84:	80c2002c 	andhi	r3,r16,2048
20086d88:	18000426 	beq	r3,zero,20086d9c <__mulsf3+0x2cc>
20086d8c:	8006d07a 	srli	r3,r16,1
20086d90:	8400004c 	andi	r16,r16,1
20086d94:	4005883a 	mov	r2,r8
20086d98:	80e0b03a 	or	r16,r16,r3
20086d9c:	10c01fc4 	addi	r3,r2,127
20086da0:	00c02d0e 	bge	zero,r3,20086e58 <__mulsf3+0x388>
20086da4:	810001cc 	andi	r4,r16,7
20086da8:	20000426 	beq	r4,zero,20086dbc <__mulsf3+0x2ec>
20086dac:	814003cc 	andi	r5,r16,15
20086db0:	01000104 	movi	r4,4
20086db4:	29000126 	beq	r5,r4,20086dbc <__mulsf3+0x2ec>
20086db8:	8121883a 	add	r16,r16,r4
20086dbc:	8102002c 	andhi	r4,r16,2048
20086dc0:	20000426 	beq	r4,zero,20086dd4 <__mulsf3+0x304>
20086dc4:	10c02004 	addi	r3,r2,128
20086dc8:	00be0034 	movhi	r2,63488
20086dcc:	10bfffc4 	addi	r2,r2,-1
20086dd0:	80a0703a 	and	r16,r16,r2
20086dd4:	00803f84 	movi	r2,254
20086dd8:	10c01b0e 	bge	r2,r3,20086e48 <__mulsf3+0x378>
20086ddc:	ad00004c 	andi	r20,r21,1
20086de0:	00ffffc4 	movi	r3,-1
20086de4:	0009883a 	mov	r4,zero
20086de8:	003f8806 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086dec:	9821883a 	mov	r16,r19
20086df0:	a839883a 	mov	fp,r21
20086df4:	282f883a 	mov	r23,r5
20086df8:	003f7f06 	br	20086bf8 <__flash_rwdata_start+0xfffeaa74>
20086dfc:	9821883a 	mov	r16,r19
20086e00:	3039883a 	mov	fp,r6
20086e04:	282f883a 	mov	r23,r5
20086e08:	003f7b06 	br	20086bf8 <__flash_rwdata_start+0xfffeaa74>
20086e0c:	8080102c 	andhi	r2,r16,64
20086e10:	10000826 	beq	r2,zero,20086e34 <__mulsf3+0x364>
20086e14:	9880102c 	andhi	r2,r19,64
20086e18:	1000061e 	bne	r2,zero,20086e34 <__mulsf3+0x364>
20086e1c:	00802034 	movhi	r2,128
20086e20:	99001034 	orhi	r4,r19,64
20086e24:	10bfffc4 	addi	r2,r2,-1
20086e28:	b029883a 	mov	r20,r22
20086e2c:	2088703a 	and	r4,r4,r2
20086e30:	003fb906 	br	20086d18 <__flash_rwdata_start+0xfffeab94>
20086e34:	00802034 	movhi	r2,128
20086e38:	81001034 	orhi	r4,r16,64
20086e3c:	10bfffc4 	addi	r2,r2,-1
20086e40:	2088703a 	and	r4,r4,r2
20086e44:	003fb406 	br	20086d18 <__flash_rwdata_start+0xfffeab94>
20086e48:	802091ba 	slli	r16,r16,6
20086e4c:	ad00004c 	andi	r20,r21,1
20086e50:	8008d27a 	srli	r4,r16,9
20086e54:	003f6d06 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086e58:	00ffe084 	movi	r3,-126
20086e5c:	1887c83a 	sub	r3,r3,r2
20086e60:	010006c4 	movi	r4,27
20086e64:	20c0070e 	bge	r4,r3,20086e84 <__mulsf3+0x3b4>
20086e68:	ad00004c 	andi	r20,r21,1
20086e6c:	0007883a 	mov	r3,zero
20086e70:	0009883a 	mov	r4,zero
20086e74:	003f6506 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086e78:	4005883a 	mov	r2,r8
20086e7c:	e02b883a 	mov	r21,fp
20086e80:	003fc606 	br	20086d9c <__flash_rwdata_start+0xfffeac18>
20086e84:	10802784 	addi	r2,r2,158
20086e88:	8084983a 	sll	r2,r16,r2
20086e8c:	80e0d83a 	srl	r16,r16,r3
20086e90:	1004c03a 	cmpne	r2,r2,zero
20086e94:	1404b03a 	or	r2,r2,r16
20086e98:	10c001cc 	andi	r3,r2,7
20086e9c:	18000426 	beq	r3,zero,20086eb0 <__mulsf3+0x3e0>
20086ea0:	110003cc 	andi	r4,r2,15
20086ea4:	00c00104 	movi	r3,4
20086ea8:	20c00126 	beq	r4,r3,20086eb0 <__mulsf3+0x3e0>
20086eac:	10c5883a 	add	r2,r2,r3
20086eb0:	10c1002c 	andhi	r3,r2,1024
20086eb4:	18000426 	beq	r3,zero,20086ec8 <__mulsf3+0x3f8>
20086eb8:	ad00004c 	andi	r20,r21,1
20086ebc:	00c00044 	movi	r3,1
20086ec0:	0009883a 	mov	r4,zero
20086ec4:	003f5106 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086ec8:	100491ba 	slli	r2,r2,6
20086ecc:	ad00004c 	andi	r20,r21,1
20086ed0:	0007883a 	mov	r3,zero
20086ed4:	1008d27a 	srli	r4,r2,9
20086ed8:	003f4c06 	br	20086c0c <__flash_rwdata_start+0xfffeaa88>
20086edc:	00802034 	movhi	r2,128
20086ee0:	81001034 	orhi	r4,r16,64
20086ee4:	10bfffc4 	addi	r2,r2,-1
20086ee8:	e500004c 	andi	r20,fp,1
20086eec:	2088703a 	and	r4,r4,r2
20086ef0:	003f8906 	br	20086d18 <__flash_rwdata_start+0xfffeab94>

20086ef4 <__floatunsisf>:
20086ef4:	defffe04 	addi	sp,sp,-8
20086ef8:	dc000015 	stw	r16,0(sp)
20086efc:	dfc00115 	stw	ra,4(sp)
20086f00:	2021883a 	mov	r16,r4
20086f04:	20002626 	beq	r4,zero,20086fa0 <__floatunsisf+0xac>
20086f08:	0088ee00 	call	20088ee0 <__clzsi2>
20086f0c:	00c02784 	movi	r3,158
20086f10:	1887c83a 	sub	r3,r3,r2
20086f14:	01002584 	movi	r4,150
20086f18:	20c00816 	blt	r4,r3,20086f3c <__floatunsisf+0x48>
20086f1c:	01000204 	movi	r4,8
20086f20:	2080340e 	bge	r4,r2,20086ff4 <__floatunsisf+0x100>
20086f24:	10bffe04 	addi	r2,r2,-8
20086f28:	8088983a 	sll	r4,r16,r2
20086f2c:	00802034 	movhi	r2,128
20086f30:	10bfffc4 	addi	r2,r2,-1
20086f34:	2088703a 	and	r4,r4,r2
20086f38:	00001b06 	br	20086fa8 <__floatunsisf+0xb4>
20086f3c:	01002644 	movi	r4,153
20086f40:	20c02316 	blt	r4,r3,20086fd0 <__floatunsisf+0xdc>
20086f44:	01000144 	movi	r4,5
20086f48:	2080020e 	bge	r4,r2,20086f54 <__floatunsisf+0x60>
20086f4c:	113ffec4 	addi	r4,r2,-5
20086f50:	8120983a 	sll	r16,r16,r4
20086f54:	017f0034 	movhi	r5,64512
20086f58:	297fffc4 	addi	r5,r5,-1
20086f5c:	810001cc 	andi	r4,r16,7
20086f60:	814a703a 	and	r5,r16,r5
20086f64:	20000426 	beq	r4,zero,20086f78 <__floatunsisf+0x84>
20086f68:	840003cc 	andi	r16,r16,15
20086f6c:	01000104 	movi	r4,4
20086f70:	81000126 	beq	r16,r4,20086f78 <__floatunsisf+0x84>
20086f74:	290b883a 	add	r5,r5,r4
20086f78:	2901002c 	andhi	r4,r5,1024
20086f7c:	20000526 	beq	r4,zero,20086f94 <__floatunsisf+0xa0>
20086f80:	00c027c4 	movi	r3,159
20086f84:	1887c83a 	sub	r3,r3,r2
20086f88:	00bf0034 	movhi	r2,64512
20086f8c:	10bfffc4 	addi	r2,r2,-1
20086f90:	288a703a 	and	r5,r5,r2
20086f94:	280891ba 	slli	r4,r5,6
20086f98:	2008d27a 	srli	r4,r4,9
20086f9c:	00000206 	br	20086fa8 <__floatunsisf+0xb4>
20086fa0:	0007883a 	mov	r3,zero
20086fa4:	0009883a 	mov	r4,zero
20086fa8:	18c03fcc 	andi	r3,r3,255
20086fac:	180695fa 	slli	r3,r3,23
20086fb0:	00802034 	movhi	r2,128
20086fb4:	10bfffc4 	addi	r2,r2,-1
20086fb8:	2084703a 	and	r2,r4,r2
20086fbc:	10c4b03a 	or	r2,r2,r3
20086fc0:	dfc00117 	ldw	ra,4(sp)
20086fc4:	dc000017 	ldw	r16,0(sp)
20086fc8:	dec00204 	addi	sp,sp,8
20086fcc:	f800283a 	ret
20086fd0:	01400144 	movi	r5,5
20086fd4:	110006c4 	addi	r4,r2,27
20086fd8:	8108983a 	sll	r4,r16,r4
20086fdc:	288dc83a 	sub	r6,r5,r2
20086fe0:	81a0d83a 	srl	r16,r16,r6
20086fe4:	2008c03a 	cmpne	r4,r4,zero
20086fe8:	2420b03a 	or	r16,r4,r16
20086fec:	28bfd90e 	bge	r5,r2,20086f54 <__flash_rwdata_start+0xfffeadd0>
20086ff0:	003fd606 	br	20086f4c <__flash_rwdata_start+0xfffeadc8>
20086ff4:	01402034 	movhi	r5,128
20086ff8:	297fffc4 	addi	r5,r5,-1
20086ffc:	8148703a 	and	r4,r16,r5
20087000:	003fe906 	br	20086fa8 <__flash_rwdata_start+0xfffeae24>

20087004 <__adddf3>:
20087004:	02000434 	movhi	r8,16
20087008:	423fffc4 	addi	r8,r8,-1
2008700c:	defffb04 	addi	sp,sp,-20
20087010:	2a12703a 	and	r9,r5,r8
20087014:	2806d7fa 	srli	r3,r5,31
20087018:	3a10703a 	and	r8,r7,r8
2008701c:	3804d53a 	srli	r2,r7,20
20087020:	3014d77a 	srli	r10,r6,29
20087024:	dc000015 	stw	r16,0(sp)
20087028:	481290fa 	slli	r9,r9,3
2008702c:	2820d53a 	srli	r16,r5,20
20087030:	401090fa 	slli	r8,r8,3
20087034:	200ad77a 	srli	r5,r4,29
20087038:	380ed7fa 	srli	r7,r7,31
2008703c:	dc800215 	stw	r18,8(sp)
20087040:	dc400115 	stw	r17,4(sp)
20087044:	dfc00415 	stw	ra,16(sp)
20087048:	dcc00315 	stw	r19,12(sp)
2008704c:	1c803fcc 	andi	r18,r3,255
20087050:	8401ffcc 	andi	r16,r16,2047
20087054:	494ab03a 	or	r5,r9,r5
20087058:	202290fa 	slli	r17,r4,3
2008705c:	1081ffcc 	andi	r2,r2,2047
20087060:	4290b03a 	or	r8,r8,r10
20087064:	300c90fa 	slli	r6,r6,3
20087068:	91c07026 	beq	r18,r7,2008722c <__adddf3+0x228>
2008706c:	8087c83a 	sub	r3,r16,r2
20087070:	00c0b30e 	bge	zero,r3,20087340 <__adddf3+0x33c>
20087074:	10002a1e 	bne	r2,zero,20087120 <__adddf3+0x11c>
20087078:	4184b03a 	or	r2,r8,r6
2008707c:	1000991e 	bne	r2,zero,200872e4 <__adddf3+0x2e0>
20087080:	888001cc 	andi	r2,r17,7
20087084:	10005b26 	beq	r2,zero,200871f4 <__adddf3+0x1f0>
20087088:	88c003cc 	andi	r3,r17,15
2008708c:	00800104 	movi	r2,4
20087090:	18805826 	beq	r3,r2,200871f4 <__adddf3+0x1f0>
20087094:	89800104 	addi	r6,r17,4
20087098:	3463803a 	cmpltu	r17,r6,r17
2008709c:	2c4b883a 	add	r5,r5,r17
200870a0:	2880202c 	andhi	r2,r5,128
200870a4:	9007883a 	mov	r3,r18
200870a8:	3023883a 	mov	r17,r6
200870ac:	10005426 	beq	r2,zero,20087200 <__adddf3+0x1fc>
200870b0:	84000044 	addi	r16,r16,1
200870b4:	0081ffc4 	movi	r2,2047
200870b8:	8080c126 	beq	r16,r2,200873c0 <__adddf3+0x3bc>
200870bc:	013fe034 	movhi	r4,65408
200870c0:	213fffc4 	addi	r4,r4,-1
200870c4:	290a703a 	and	r5,r5,r4
200870c8:	2804977a 	slli	r2,r5,29
200870cc:	280a927a 	slli	r5,r5,9
200870d0:	8822d0fa 	srli	r17,r17,3
200870d4:	8401ffcc 	andi	r16,r16,2047
200870d8:	2808d33a 	srli	r4,r5,12
200870dc:	1444b03a 	or	r2,r2,r17
200870e0:	8401ffcc 	andi	r16,r16,2047
200870e4:	800a953a 	slli	r5,r16,20
200870e8:	18c03fcc 	andi	r3,r3,255
200870ec:	04000434 	movhi	r16,16
200870f0:	180697fa 	slli	r3,r3,31
200870f4:	843fffc4 	addi	r16,r16,-1
200870f8:	2420703a 	and	r16,r4,r16
200870fc:	8160b03a 	or	r16,r16,r5
20087100:	80c6b03a 	or	r3,r16,r3
20087104:	dfc00417 	ldw	ra,16(sp)
20087108:	dcc00317 	ldw	r19,12(sp)
2008710c:	dc800217 	ldw	r18,8(sp)
20087110:	dc400117 	ldw	r17,4(sp)
20087114:	dc000017 	ldw	r16,0(sp)
20087118:	dec00504 	addi	sp,sp,20
2008711c:	f800283a 	ret
20087120:	0081ffc4 	movi	r2,2047
20087124:	80bfd626 	beq	r16,r2,20087080 <__flash_rwdata_start+0xfffeaefc>
20087128:	42002034 	orhi	r8,r8,128
2008712c:	00800e04 	movi	r2,56
20087130:	10c0a616 	blt	r2,r3,200873cc <__adddf3+0x3c8>
20087134:	008007c4 	movi	r2,31
20087138:	10c0c916 	blt	r2,r3,20087460 <__adddf3+0x45c>
2008713c:	00800804 	movi	r2,32
20087140:	10c5c83a 	sub	r2,r2,r3
20087144:	408e983a 	sll	r7,r8,r2
20087148:	30c8d83a 	srl	r4,r6,r3
2008714c:	3084983a 	sll	r2,r6,r2
20087150:	40c6d83a 	srl	r3,r8,r3
20087154:	390cb03a 	or	r6,r7,r4
20087158:	1004c03a 	cmpne	r2,r2,zero
2008715c:	308cb03a 	or	r6,r6,r2
20087160:	898dc83a 	sub	r6,r17,r6
20087164:	89a3803a 	cmpltu	r17,r17,r6
20087168:	28cbc83a 	sub	r5,r5,r3
2008716c:	2c4bc83a 	sub	r5,r5,r17
20087170:	3023883a 	mov	r17,r6
20087174:	2880202c 	andhi	r2,r5,128
20087178:	10006d26 	beq	r2,zero,20087330 <__adddf3+0x32c>
2008717c:	04c02034 	movhi	r19,128
20087180:	9cffffc4 	addi	r19,r19,-1
20087184:	2ce6703a 	and	r19,r5,r19
20087188:	98007e26 	beq	r19,zero,20087384 <__adddf3+0x380>
2008718c:	9809883a 	mov	r4,r19
20087190:	0088ee00 	call	20088ee0 <__clzsi2>
20087194:	10fffe04 	addi	r3,r2,-8
20087198:	010007c4 	movi	r4,31
2008719c:	20c07f16 	blt	r4,r3,2008739c <__adddf3+0x398>
200871a0:	01400a04 	movi	r5,40
200871a4:	2885c83a 	sub	r2,r5,r2
200871a8:	888ad83a 	srl	r5,r17,r2
200871ac:	98e6983a 	sll	r19,r19,r3
200871b0:	88e2983a 	sll	r17,r17,r3
200871b4:	2ce6b03a 	or	r19,r5,r19
200871b8:	1c007c16 	blt	r3,r16,200873ac <__adddf3+0x3a8>
200871bc:	1c21c83a 	sub	r16,r3,r16
200871c0:	81400044 	addi	r5,r16,1
200871c4:	00c007c4 	movi	r3,31
200871c8:	19409816 	blt	r3,r5,2008742c <__adddf3+0x428>
200871cc:	1c21c83a 	sub	r16,r3,r16
200871d0:	8c08983a 	sll	r4,r17,r16
200871d4:	8946d83a 	srl	r3,r17,r5
200871d8:	9c20983a 	sll	r16,r19,r16
200871dc:	2008c03a 	cmpne	r4,r4,zero
200871e0:	994ad83a 	srl	r5,r19,r5
200871e4:	1c06b03a 	or	r3,r3,r16
200871e8:	1922b03a 	or	r17,r3,r4
200871ec:	0021883a 	mov	r16,zero
200871f0:	003fa306 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200871f4:	2880202c 	andhi	r2,r5,128
200871f8:	9007883a 	mov	r3,r18
200871fc:	103fac1e 	bne	r2,zero,200870b0 <__flash_rwdata_start+0xfffeaf2c>
20087200:	2804977a 	slli	r2,r5,29
20087204:	8822d0fa 	srli	r17,r17,3
20087208:	0101ffc4 	movi	r4,2047
2008720c:	280ad0fa 	srli	r5,r5,3
20087210:	1444b03a 	or	r2,r2,r17
20087214:	81002c26 	beq	r16,r4,200872c8 <__adddf3+0x2c4>
20087218:	8120703a 	and	r16,r16,r4
2008721c:	01000434 	movhi	r4,16
20087220:	213fffc4 	addi	r4,r4,-1
20087224:	2908703a 	and	r4,r5,r4
20087228:	003fad06 	br	200870e0 <__flash_rwdata_start+0xfffeaf5c>
2008722c:	8089c83a 	sub	r4,r16,r2
20087230:	01006a0e 	bge	zero,r4,200873dc <__adddf3+0x3d8>
20087234:	10003326 	beq	r2,zero,20087304 <__adddf3+0x300>
20087238:	0081ffc4 	movi	r2,2047
2008723c:	80bf9026 	beq	r16,r2,20087080 <__flash_rwdata_start+0xfffeaefc>
20087240:	42002034 	orhi	r8,r8,128
20087244:	00800e04 	movi	r2,56
20087248:	1100b116 	blt	r2,r4,20087510 <__adddf3+0x50c>
2008724c:	008007c4 	movi	r2,31
20087250:	1100e216 	blt	r2,r4,200875dc <__adddf3+0x5d8>
20087254:	00800804 	movi	r2,32
20087258:	1105c83a 	sub	r2,r2,r4
2008725c:	4092983a 	sll	r9,r8,r2
20087260:	310ed83a 	srl	r7,r6,r4
20087264:	3084983a 	sll	r2,r6,r2
20087268:	4110d83a 	srl	r8,r8,r4
2008726c:	49ccb03a 	or	r6,r9,r7
20087270:	1004c03a 	cmpne	r2,r2,zero
20087274:	308cb03a 	or	r6,r6,r2
20087278:	344d883a 	add	r6,r6,r17
2008727c:	3463803a 	cmpltu	r17,r6,r17
20087280:	414b883a 	add	r5,r8,r5
20087284:	2c4b883a 	add	r5,r5,r17
20087288:	3023883a 	mov	r17,r6
2008728c:	2880202c 	andhi	r2,r5,128
20087290:	10002726 	beq	r2,zero,20087330 <__adddf3+0x32c>
20087294:	84000044 	addi	r16,r16,1
20087298:	0081ffc4 	movi	r2,2047
2008729c:	8080ae26 	beq	r16,r2,20087558 <__adddf3+0x554>
200872a0:	00bfe034 	movhi	r2,65408
200872a4:	10bfffc4 	addi	r2,r2,-1
200872a8:	288a703a 	and	r5,r5,r2
200872ac:	880cd07a 	srli	r6,r17,1
200872b0:	280897fa 	slli	r4,r5,31
200872b4:	88c0004c 	andi	r3,r17,1
200872b8:	30e2b03a 	or	r17,r6,r3
200872bc:	280ad07a 	srli	r5,r5,1
200872c0:	8922b03a 	or	r17,r17,r4
200872c4:	003f6e06 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200872c8:	1148b03a 	or	r4,r2,r5
200872cc:	20003c26 	beq	r4,zero,200873c0 <__adddf3+0x3bc>
200872d0:	29000234 	orhi	r4,r5,8
200872d4:	01400434 	movhi	r5,16
200872d8:	297fffc4 	addi	r5,r5,-1
200872dc:	2148703a 	and	r4,r4,r5
200872e0:	003f7f06 	br	200870e0 <__flash_rwdata_start+0xfffeaf5c>
200872e4:	18ffffc4 	addi	r3,r3,-1
200872e8:	18004d1e 	bne	r3,zero,20087420 <__adddf3+0x41c>
200872ec:	898dc83a 	sub	r6,r17,r6
200872f0:	89a3803a 	cmpltu	r17,r17,r6
200872f4:	2a0bc83a 	sub	r5,r5,r8
200872f8:	2c4bc83a 	sub	r5,r5,r17
200872fc:	3023883a 	mov	r17,r6
20087300:	003f9c06 	br	20087174 <__flash_rwdata_start+0xfffeaff0>
20087304:	4184b03a 	or	r2,r8,r6
20087308:	103f5d26 	beq	r2,zero,20087080 <__flash_rwdata_start+0xfffeaefc>
2008730c:	213fffc4 	addi	r4,r4,-1
20087310:	203fd926 	beq	r4,zero,20087278 <__flash_rwdata_start+0xfffeb0f4>
20087314:	0081ffc4 	movi	r2,2047
20087318:	80bfca1e 	bne	r16,r2,20087244 <__flash_rwdata_start+0xfffeb0c0>
2008731c:	003f5806 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087320:	10c8b03a 	or	r4,r2,r3
20087324:	20008b26 	beq	r4,zero,20087554 <__adddf3+0x550>
20087328:	100b883a 	mov	r5,r2
2008732c:	1823883a 	mov	r17,r3
20087330:	888001cc 	andi	r2,r17,7
20087334:	103f541e 	bne	r2,zero,20087088 <__flash_rwdata_start+0xfffeaf04>
20087338:	9007883a 	mov	r3,r18
2008733c:	003fb006 	br	20087200 <__flash_rwdata_start+0xfffeb07c>
20087340:	1800531e 	bne	r3,zero,20087490 <__adddf3+0x48c>
20087344:	80800044 	addi	r2,r16,1
20087348:	1081ffcc 	andi	r2,r2,2047
2008734c:	00c00044 	movi	r3,1
20087350:	1880990e 	bge	r3,r2,200875b8 <__adddf3+0x5b4>
20087354:	8985c83a 	sub	r2,r17,r6
20087358:	8887803a 	cmpltu	r3,r17,r2
2008735c:	2a27c83a 	sub	r19,r5,r8
20087360:	98e7c83a 	sub	r19,r19,r3
20087364:	98c0202c 	andhi	r3,r19,128
20087368:	18006226 	beq	r3,zero,200874f4 <__adddf3+0x4f0>
2008736c:	3463c83a 	sub	r17,r6,r17
20087370:	4151c83a 	sub	r8,r8,r5
20087374:	344d803a 	cmpltu	r6,r6,r17
20087378:	41a7c83a 	sub	r19,r8,r6
2008737c:	3825883a 	mov	r18,r7
20087380:	983f821e 	bne	r19,zero,2008718c <__flash_rwdata_start+0xfffeb008>
20087384:	8809883a 	mov	r4,r17
20087388:	0088ee00 	call	20088ee0 <__clzsi2>
2008738c:	10800804 	addi	r2,r2,32
20087390:	10fffe04 	addi	r3,r2,-8
20087394:	010007c4 	movi	r4,31
20087398:	20ff810e 	bge	r4,r3,200871a0 <__flash_rwdata_start+0xfffeb01c>
2008739c:	14fff604 	addi	r19,r2,-40
200873a0:	8ce6983a 	sll	r19,r17,r19
200873a4:	0023883a 	mov	r17,zero
200873a8:	1c3f840e 	bge	r3,r16,200871bc <__flash_rwdata_start+0xfffeb038>
200873ac:	017fe034 	movhi	r5,65408
200873b0:	297fffc4 	addi	r5,r5,-1
200873b4:	80e1c83a 	sub	r16,r16,r3
200873b8:	994a703a 	and	r5,r19,r5
200873bc:	003f3006 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200873c0:	0009883a 	mov	r4,zero
200873c4:	0005883a 	mov	r2,zero
200873c8:	003f4506 	br	200870e0 <__flash_rwdata_start+0xfffeaf5c>
200873cc:	418cb03a 	or	r6,r8,r6
200873d0:	300cc03a 	cmpne	r6,r6,zero
200873d4:	0007883a 	mov	r3,zero
200873d8:	003f6106 	br	20087160 <__flash_rwdata_start+0xfffeafdc>
200873dc:	2000921e 	bne	r4,zero,20087628 <__adddf3+0x624>
200873e0:	80800044 	addi	r2,r16,1
200873e4:	11c1ffcc 	andi	r7,r2,2047
200873e8:	01000044 	movi	r4,1
200873ec:	21c0610e 	bge	r4,r7,20087574 <__adddf3+0x570>
200873f0:	0101ffc4 	movi	r4,2047
200873f4:	1100a326 	beq	r2,r4,20087684 <__adddf3+0x680>
200873f8:	344d883a 	add	r6,r6,r17
200873fc:	3463803a 	cmpltu	r17,r6,r17
20087400:	414b883a 	add	r5,r8,r5
20087404:	2c4b883a 	add	r5,r5,r17
20087408:	282297fa 	slli	r17,r5,31
2008740c:	300cd07a 	srli	r6,r6,1
20087410:	280ad07a 	srli	r5,r5,1
20087414:	1021883a 	mov	r16,r2
20087418:	89a2b03a 	or	r17,r17,r6
2008741c:	003f1806 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087420:	0081ffc4 	movi	r2,2047
20087424:	80bf411e 	bne	r16,r2,2008712c <__flash_rwdata_start+0xfffeafa8>
20087428:	003f1506 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
2008742c:	80bff844 	addi	r2,r16,-31
20087430:	00c00804 	movi	r3,32
20087434:	9884d83a 	srl	r2,r19,r2
20087438:	28c04a26 	beq	r5,r3,20087564 <__adddf3+0x560>
2008743c:	00c00fc4 	movi	r3,63
20087440:	1c21c83a 	sub	r16,r3,r16
20087444:	9c26983a 	sll	r19,r19,r16
20087448:	9c62b03a 	or	r17,r19,r17
2008744c:	8822c03a 	cmpne	r17,r17,zero
20087450:	88a2b03a 	or	r17,r17,r2
20087454:	000b883a 	mov	r5,zero
20087458:	0021883a 	mov	r16,zero
2008745c:	003fb406 	br	20087330 <__flash_rwdata_start+0xfffeb1ac>
20087460:	18bff804 	addi	r2,r3,-32
20087464:	01000804 	movi	r4,32
20087468:	4084d83a 	srl	r2,r8,r2
2008746c:	19003f26 	beq	r3,r4,2008756c <__adddf3+0x568>
20087470:	01001004 	movi	r4,64
20087474:	20c7c83a 	sub	r3,r4,r3
20087478:	40d0983a 	sll	r8,r8,r3
2008747c:	418cb03a 	or	r6,r8,r6
20087480:	300cc03a 	cmpne	r6,r6,zero
20087484:	308cb03a 	or	r6,r6,r2
20087488:	0007883a 	mov	r3,zero
2008748c:	003f3406 	br	20087160 <__flash_rwdata_start+0xfffeafdc>
20087490:	80002326 	beq	r16,zero,20087520 <__adddf3+0x51c>
20087494:	0101ffc4 	movi	r4,2047
20087498:	11005e26 	beq	r2,r4,20087614 <__adddf3+0x610>
2008749c:	00c7c83a 	sub	r3,zero,r3
200874a0:	29402034 	orhi	r5,r5,128
200874a4:	01000e04 	movi	r4,56
200874a8:	20c07216 	blt	r4,r3,20087674 <__adddf3+0x670>
200874ac:	010007c4 	movi	r4,31
200874b0:	20c0ce16 	blt	r4,r3,200877ec <__adddf3+0x7e8>
200874b4:	01000804 	movi	r4,32
200874b8:	20c9c83a 	sub	r4,r4,r3
200874bc:	2914983a 	sll	r10,r5,r4
200874c0:	88d2d83a 	srl	r9,r17,r3
200874c4:	8908983a 	sll	r4,r17,r4
200874c8:	28c6d83a 	srl	r3,r5,r3
200874cc:	5262b03a 	or	r17,r10,r9
200874d0:	2008c03a 	cmpne	r4,r4,zero
200874d4:	8922b03a 	or	r17,r17,r4
200874d8:	3463c83a 	sub	r17,r6,r17
200874dc:	40c7c83a 	sub	r3,r8,r3
200874e0:	344d803a 	cmpltu	r6,r6,r17
200874e4:	198bc83a 	sub	r5,r3,r6
200874e8:	1021883a 	mov	r16,r2
200874ec:	3825883a 	mov	r18,r7
200874f0:	003f2006 	br	20087174 <__flash_rwdata_start+0xfffeaff0>
200874f4:	9886b03a 	or	r3,r19,r2
200874f8:	1800141e 	bne	r3,zero,2008754c <__adddf3+0x548>
200874fc:	0007883a 	mov	r3,zero
20087500:	000b883a 	mov	r5,zero
20087504:	0023883a 	mov	r17,zero
20087508:	0021883a 	mov	r16,zero
2008750c:	003f3c06 	br	20087200 <__flash_rwdata_start+0xfffeb07c>
20087510:	418cb03a 	or	r6,r8,r6
20087514:	300cc03a 	cmpne	r6,r6,zero
20087518:	0011883a 	mov	r8,zero
2008751c:	003f5606 	br	20087278 <__flash_rwdata_start+0xfffeb0f4>
20087520:	2c48b03a 	or	r4,r5,r17
20087524:	20003b26 	beq	r4,zero,20087614 <__adddf3+0x610>
20087528:	00c6303a 	nor	r3,zero,r3
2008752c:	1800371e 	bne	r3,zero,2008760c <__adddf3+0x608>
20087530:	3463c83a 	sub	r17,r6,r17
20087534:	414bc83a 	sub	r5,r8,r5
20087538:	344d803a 	cmpltu	r6,r6,r17
2008753c:	298bc83a 	sub	r5,r5,r6
20087540:	1021883a 	mov	r16,r2
20087544:	3825883a 	mov	r18,r7
20087548:	003f0a06 	br	20087174 <__flash_rwdata_start+0xfffeaff0>
2008754c:	1023883a 	mov	r17,r2
20087550:	003f0d06 	br	20087188 <__flash_rwdata_start+0xfffeb004>
20087554:	0007883a 	mov	r3,zero
20087558:	000b883a 	mov	r5,zero
2008755c:	0023883a 	mov	r17,zero
20087560:	003f2706 	br	20087200 <__flash_rwdata_start+0xfffeb07c>
20087564:	0027883a 	mov	r19,zero
20087568:	003fb706 	br	20087448 <__flash_rwdata_start+0xfffeb2c4>
2008756c:	0011883a 	mov	r8,zero
20087570:	003fc206 	br	2008747c <__flash_rwdata_start+0xfffeb2f8>
20087574:	2c44b03a 	or	r2,r5,r17
20087578:	8000871e 	bne	r16,zero,20087798 <__adddf3+0x794>
2008757c:	1000b126 	beq	r2,zero,20087844 <__adddf3+0x840>
20087580:	4184b03a 	or	r2,r8,r6
20087584:	103ebe26 	beq	r2,zero,20087080 <__flash_rwdata_start+0xfffeaefc>
20087588:	3445883a 	add	r2,r6,r17
2008758c:	1463803a 	cmpltu	r17,r2,r17
20087590:	414b883a 	add	r5,r8,r5
20087594:	2c4b883a 	add	r5,r5,r17
20087598:	28c0202c 	andhi	r3,r5,128
2008759c:	1023883a 	mov	r17,r2
200875a0:	183f6326 	beq	r3,zero,20087330 <__flash_rwdata_start+0xfffeb1ac>
200875a4:	00bfe034 	movhi	r2,65408
200875a8:	10bfffc4 	addi	r2,r2,-1
200875ac:	2021883a 	mov	r16,r4
200875b0:	288a703a 	and	r5,r5,r2
200875b4:	003eb206 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200875b8:	2c44b03a 	or	r2,r5,r17
200875bc:	8000251e 	bne	r16,zero,20087654 <__adddf3+0x650>
200875c0:	10004b1e 	bne	r2,zero,200876f0 <__adddf3+0x6ec>
200875c4:	4184b03a 	or	r2,r8,r6
200875c8:	103fe226 	beq	r2,zero,20087554 <__flash_rwdata_start+0xfffeb3d0>
200875cc:	400b883a 	mov	r5,r8
200875d0:	3023883a 	mov	r17,r6
200875d4:	3825883a 	mov	r18,r7
200875d8:	003ea906 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200875dc:	20bff804 	addi	r2,r4,-32
200875e0:	01c00804 	movi	r7,32
200875e4:	4084d83a 	srl	r2,r8,r2
200875e8:	21c07e26 	beq	r4,r7,200877e4 <__adddf3+0x7e0>
200875ec:	01c01004 	movi	r7,64
200875f0:	3909c83a 	sub	r4,r7,r4
200875f4:	4110983a 	sll	r8,r8,r4
200875f8:	418cb03a 	or	r6,r8,r6
200875fc:	300cc03a 	cmpne	r6,r6,zero
20087600:	308cb03a 	or	r6,r6,r2
20087604:	0011883a 	mov	r8,zero
20087608:	003f1b06 	br	20087278 <__flash_rwdata_start+0xfffeb0f4>
2008760c:	0101ffc4 	movi	r4,2047
20087610:	113fa41e 	bne	r2,r4,200874a4 <__flash_rwdata_start+0xfffeb320>
20087614:	400b883a 	mov	r5,r8
20087618:	3023883a 	mov	r17,r6
2008761c:	1021883a 	mov	r16,r2
20087620:	3825883a 	mov	r18,r7
20087624:	003e9606 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087628:	80001a1e 	bne	r16,zero,20087694 <__adddf3+0x690>
2008762c:	2c4eb03a 	or	r7,r5,r17
20087630:	38005526 	beq	r7,zero,20087788 <__adddf3+0x784>
20087634:	0108303a 	nor	r4,zero,r4
20087638:	2000511e 	bne	r4,zero,20087780 <__adddf3+0x77c>
2008763c:	89a3883a 	add	r17,r17,r6
20087640:	414b883a 	add	r5,r8,r5
20087644:	898d803a 	cmpltu	r6,r17,r6
20087648:	298b883a 	add	r5,r5,r6
2008764c:	1021883a 	mov	r16,r2
20087650:	003f0e06 	br	2008728c <__flash_rwdata_start+0xfffeb108>
20087654:	1000341e 	bne	r2,zero,20087728 <__adddf3+0x724>
20087658:	4184b03a 	or	r2,r8,r6
2008765c:	10006f26 	beq	r2,zero,2008781c <__adddf3+0x818>
20087660:	400b883a 	mov	r5,r8
20087664:	3023883a 	mov	r17,r6
20087668:	3825883a 	mov	r18,r7
2008766c:	0401ffc4 	movi	r16,2047
20087670:	003e8306 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087674:	2c62b03a 	or	r17,r5,r17
20087678:	8822c03a 	cmpne	r17,r17,zero
2008767c:	0007883a 	mov	r3,zero
20087680:	003f9506 	br	200874d8 <__flash_rwdata_start+0xfffeb354>
20087684:	1021883a 	mov	r16,r2
20087688:	000b883a 	mov	r5,zero
2008768c:	0023883a 	mov	r17,zero
20087690:	003edb06 	br	20087200 <__flash_rwdata_start+0xfffeb07c>
20087694:	01c1ffc4 	movi	r7,2047
20087698:	11c03b26 	beq	r2,r7,20087788 <__adddf3+0x784>
2008769c:	0109c83a 	sub	r4,zero,r4
200876a0:	29402034 	orhi	r5,r5,128
200876a4:	01c00e04 	movi	r7,56
200876a8:	39006216 	blt	r7,r4,20087834 <__adddf3+0x830>
200876ac:	01c007c4 	movi	r7,31
200876b0:	39006b16 	blt	r7,r4,20087860 <__adddf3+0x85c>
200876b4:	01c00804 	movi	r7,32
200876b8:	390fc83a 	sub	r7,r7,r4
200876bc:	29d4983a 	sll	r10,r5,r7
200876c0:	8912d83a 	srl	r9,r17,r4
200876c4:	89ce983a 	sll	r7,r17,r7
200876c8:	2908d83a 	srl	r4,r5,r4
200876cc:	5262b03a 	or	r17,r10,r9
200876d0:	380ac03a 	cmpne	r5,r7,zero
200876d4:	8962b03a 	or	r17,r17,r5
200876d8:	89a3883a 	add	r17,r17,r6
200876dc:	2211883a 	add	r8,r4,r8
200876e0:	898d803a 	cmpltu	r6,r17,r6
200876e4:	418b883a 	add	r5,r8,r6
200876e8:	1021883a 	mov	r16,r2
200876ec:	003ee706 	br	2008728c <__flash_rwdata_start+0xfffeb108>
200876f0:	4184b03a 	or	r2,r8,r6
200876f4:	103e6226 	beq	r2,zero,20087080 <__flash_rwdata_start+0xfffeaefc>
200876f8:	8987c83a 	sub	r3,r17,r6
200876fc:	88c9803a 	cmpltu	r4,r17,r3
20087700:	2a05c83a 	sub	r2,r5,r8
20087704:	1105c83a 	sub	r2,r2,r4
20087708:	1100202c 	andhi	r4,r2,128
2008770c:	203f0426 	beq	r4,zero,20087320 <__flash_rwdata_start+0xfffeb19c>
20087710:	3463c83a 	sub	r17,r6,r17
20087714:	414bc83a 	sub	r5,r8,r5
20087718:	344d803a 	cmpltu	r6,r6,r17
2008771c:	298bc83a 	sub	r5,r5,r6
20087720:	3825883a 	mov	r18,r7
20087724:	003e5606 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087728:	4184b03a 	or	r2,r8,r6
2008772c:	10002b26 	beq	r2,zero,200877dc <__adddf3+0x7d8>
20087730:	2804d0fa 	srli	r2,r5,3
20087734:	8822d0fa 	srli	r17,r17,3
20087738:	280a977a 	slli	r5,r5,29
2008773c:	10c0022c 	andhi	r3,r2,8
20087740:	2c62b03a 	or	r17,r5,r17
20087744:	18000826 	beq	r3,zero,20087768 <__adddf3+0x764>
20087748:	4008d0fa 	srli	r4,r8,3
2008774c:	20c0022c 	andhi	r3,r4,8
20087750:	1800051e 	bne	r3,zero,20087768 <__adddf3+0x764>
20087754:	300cd0fa 	srli	r6,r6,3
20087758:	4010977a 	slli	r8,r8,29
2008775c:	2005883a 	mov	r2,r4
20087760:	3825883a 	mov	r18,r7
20087764:	41a2b03a 	or	r17,r8,r6
20087768:	880ad77a 	srli	r5,r17,29
2008776c:	100490fa 	slli	r2,r2,3
20087770:	882290fa 	slli	r17,r17,3
20087774:	0401ffc4 	movi	r16,2047
20087778:	288ab03a 	or	r5,r5,r2
2008777c:	003e4006 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087780:	01c1ffc4 	movi	r7,2047
20087784:	11ffc71e 	bne	r2,r7,200876a4 <__flash_rwdata_start+0xfffeb520>
20087788:	400b883a 	mov	r5,r8
2008778c:	3023883a 	mov	r17,r6
20087790:	1021883a 	mov	r16,r2
20087794:	003e3a06 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087798:	10002d26 	beq	r2,zero,20087850 <__adddf3+0x84c>
2008779c:	4184b03a 	or	r2,r8,r6
200877a0:	10000e26 	beq	r2,zero,200877dc <__adddf3+0x7d8>
200877a4:	2804d0fa 	srli	r2,r5,3
200877a8:	8822d0fa 	srli	r17,r17,3
200877ac:	280a977a 	slli	r5,r5,29
200877b0:	10c0022c 	andhi	r3,r2,8
200877b4:	2c62b03a 	or	r17,r5,r17
200877b8:	183feb26 	beq	r3,zero,20087768 <__flash_rwdata_start+0xfffeb5e4>
200877bc:	4008d0fa 	srli	r4,r8,3
200877c0:	20c0022c 	andhi	r3,r4,8
200877c4:	183fe81e 	bne	r3,zero,20087768 <__flash_rwdata_start+0xfffeb5e4>
200877c8:	300cd0fa 	srli	r6,r6,3
200877cc:	4010977a 	slli	r8,r8,29
200877d0:	2005883a 	mov	r2,r4
200877d4:	41a2b03a 	or	r17,r8,r6
200877d8:	003fe306 	br	20087768 <__flash_rwdata_start+0xfffeb5e4>
200877dc:	0401ffc4 	movi	r16,2047
200877e0:	003e2706 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
200877e4:	0011883a 	mov	r8,zero
200877e8:	003f8306 	br	200875f8 <__flash_rwdata_start+0xfffeb474>
200877ec:	193ff804 	addi	r4,r3,-32
200877f0:	02400804 	movi	r9,32
200877f4:	2908d83a 	srl	r4,r5,r4
200877f8:	1a402526 	beq	r3,r9,20087890 <__adddf3+0x88c>
200877fc:	02401004 	movi	r9,64
20087800:	48c7c83a 	sub	r3,r9,r3
20087804:	28ca983a 	sll	r5,r5,r3
20087808:	2c62b03a 	or	r17,r5,r17
2008780c:	8822c03a 	cmpne	r17,r17,zero
20087810:	8922b03a 	or	r17,r17,r4
20087814:	0007883a 	mov	r3,zero
20087818:	003f2f06 	br	200874d8 <__flash_rwdata_start+0xfffeb354>
2008781c:	01402034 	movhi	r5,128
20087820:	0007883a 	mov	r3,zero
20087824:	297fffc4 	addi	r5,r5,-1
20087828:	047ffe04 	movi	r17,-8
2008782c:	0401ffc4 	movi	r16,2047
20087830:	003e7306 	br	20087200 <__flash_rwdata_start+0xfffeb07c>
20087834:	2c62b03a 	or	r17,r5,r17
20087838:	8822c03a 	cmpne	r17,r17,zero
2008783c:	0009883a 	mov	r4,zero
20087840:	003fa506 	br	200876d8 <__flash_rwdata_start+0xfffeb554>
20087844:	400b883a 	mov	r5,r8
20087848:	3023883a 	mov	r17,r6
2008784c:	003e0c06 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087850:	400b883a 	mov	r5,r8
20087854:	3023883a 	mov	r17,r6
20087858:	0401ffc4 	movi	r16,2047
2008785c:	003e0806 	br	20087080 <__flash_rwdata_start+0xfffeaefc>
20087860:	21fff804 	addi	r7,r4,-32
20087864:	02400804 	movi	r9,32
20087868:	29ced83a 	srl	r7,r5,r7
2008786c:	22400a26 	beq	r4,r9,20087898 <__adddf3+0x894>
20087870:	02401004 	movi	r9,64
20087874:	4909c83a 	sub	r4,r9,r4
20087878:	290a983a 	sll	r5,r5,r4
2008787c:	2c62b03a 	or	r17,r5,r17
20087880:	8822c03a 	cmpne	r17,r17,zero
20087884:	89e2b03a 	or	r17,r17,r7
20087888:	0009883a 	mov	r4,zero
2008788c:	003f9206 	br	200876d8 <__flash_rwdata_start+0xfffeb554>
20087890:	000b883a 	mov	r5,zero
20087894:	003fdc06 	br	20087808 <__flash_rwdata_start+0xfffeb684>
20087898:	000b883a 	mov	r5,zero
2008789c:	003ff706 	br	2008787c <__flash_rwdata_start+0xfffeb6f8>

200878a0 <__divdf3>:
200878a0:	defff204 	addi	sp,sp,-56
200878a4:	dd000815 	stw	r20,32(sp)
200878a8:	2828d53a 	srli	r20,r5,20
200878ac:	dd800a15 	stw	r22,40(sp)
200878b0:	282cd7fa 	srli	r22,r5,31
200878b4:	dc000415 	stw	r16,16(sp)
200878b8:	04000434 	movhi	r16,16
200878bc:	df000c15 	stw	fp,48(sp)
200878c0:	dcc00715 	stw	r19,28(sp)
200878c4:	dc800615 	stw	r18,24(sp)
200878c8:	dc400515 	stw	r17,20(sp)
200878cc:	843fffc4 	addi	r16,r16,-1
200878d0:	dfc00d15 	stw	ra,52(sp)
200878d4:	ddc00b15 	stw	r23,44(sp)
200878d8:	dd400915 	stw	r21,36(sp)
200878dc:	a501ffcc 	andi	r20,r20,2047
200878e0:	2025883a 	mov	r18,r4
200878e4:	2027883a 	mov	r19,r4
200878e8:	2c22703a 	and	r17,r5,r16
200878ec:	b7003fcc 	andi	fp,r22,255
200878f0:	a0005e26 	beq	r20,zero,20087a6c <__divdf3+0x1cc>
200878f4:	0081ffc4 	movi	r2,2047
200878f8:	a0803526 	beq	r20,r2,200879d0 <__divdf3+0x130>
200878fc:	8c000434 	orhi	r16,r17,16
20087900:	2004d77a 	srli	r2,r4,29
20087904:	802090fa 	slli	r16,r16,3
20087908:	202690fa 	slli	r19,r4,3
2008790c:	a53f0044 	addi	r20,r20,-1023
20087910:	80a2b03a 	or	r17,r16,r2
20087914:	0025883a 	mov	r18,zero
20087918:	0011883a 	mov	r8,zero
2008791c:	380ad53a 	srli	r5,r7,20
20087920:	382ed7fa 	srli	r23,r7,31
20087924:	04000434 	movhi	r16,16
20087928:	843fffc4 	addi	r16,r16,-1
2008792c:	2941ffcc 	andi	r5,r5,2047
20087930:	302b883a 	mov	r21,r6
20087934:	3c20703a 	and	r16,r7,r16
20087938:	ba403fcc 	andi	r9,r23,255
2008793c:	28006726 	beq	r5,zero,20087adc <__divdf3+0x23c>
20087940:	0081ffc4 	movi	r2,2047
20087944:	28805f26 	beq	r5,r2,20087ac4 <__divdf3+0x224>
20087948:	84000434 	orhi	r16,r16,16
2008794c:	3004d77a 	srli	r2,r6,29
20087950:	802090fa 	slli	r16,r16,3
20087954:	302a90fa 	slli	r21,r6,3
20087958:	297f0044 	addi	r5,r5,-1023
2008795c:	80a0b03a 	or	r16,r16,r2
20087960:	000f883a 	mov	r7,zero
20087964:	3c86b03a 	or	r3,r7,r18
20087968:	180690ba 	slli	r3,r3,2
2008796c:	00880234 	movhi	r2,8200
20087970:	109e6404 	addi	r2,r2,31120
20087974:	1887883a 	add	r3,r3,r2
20087978:	18c00017 	ldw	r3,0(r3)
2008797c:	b5c8f03a 	xor	r4,r22,r23
20087980:	200d883a 	mov	r6,r4
20087984:	24803fcc 	andi	r18,r4,255
20087988:	a169c83a 	sub	r20,r20,r5
2008798c:	1800683a 	jmp	r3
20087990:	20087bd8 	cmpnei	zero,r4,8687
20087994:	20087a08 	cmpgei	zero,r4,8680
20087998:	20087b9c 	xori	zero,r4,8686
2008799c:	200879ec 	andhi	zero,r4,8679
200879a0:	20087b9c 	xori	zero,r4,8686
200879a4:	20087b70 	cmpltui	zero,r4,8685
200879a8:	20087b9c 	xori	zero,r4,8686
200879ac:	200879ec 	andhi	zero,r4,8679
200879b0:	20087a08 	cmpgei	zero,r4,8680
200879b4:	20087a08 	cmpgei	zero,r4,8680
200879b8:	20087b70 	cmpltui	zero,r4,8685
200879bc:	200879ec 	andhi	zero,r4,8679
200879c0:	200879fc 	xorhi	zero,r4,8679
200879c4:	200879fc 	xorhi	zero,r4,8679
200879c8:	200879fc 	xorhi	zero,r4,8679
200879cc:	20087bac 	andhi	zero,r4,8686
200879d0:	8904b03a 	or	r2,r17,r4
200879d4:	1000631e 	bne	r2,zero,20087b64 <__divdf3+0x2c4>
200879d8:	04800204 	movi	r18,8
200879dc:	0023883a 	mov	r17,zero
200879e0:	0027883a 	mov	r19,zero
200879e4:	02000084 	movi	r8,2
200879e8:	003fcc06 	br	2008791c <__flash_rwdata_start+0xfffeb798>
200879ec:	8023883a 	mov	r17,r16
200879f0:	a827883a 	mov	r19,r21
200879f4:	4839883a 	mov	fp,r9
200879f8:	3811883a 	mov	r8,r7
200879fc:	00800084 	movi	r2,2
20087a00:	40812a1e 	bne	r8,r2,20087eac <__divdf3+0x60c>
20087a04:	e025883a 	mov	r18,fp
20087a08:	9180004c 	andi	r6,r18,1
20087a0c:	0101ffc4 	movi	r4,2047
20087a10:	000b883a 	mov	r5,zero
20087a14:	0027883a 	mov	r19,zero
20087a18:	2008953a 	slli	r4,r4,20
20087a1c:	30c03fcc 	andi	r3,r6,255
20087a20:	04000434 	movhi	r16,16
20087a24:	180697fa 	slli	r3,r3,31
20087a28:	843fffc4 	addi	r16,r16,-1
20087a2c:	2c20703a 	and	r16,r5,r16
20087a30:	8120b03a 	or	r16,r16,r4
20087a34:	80c6b03a 	or	r3,r16,r3
20087a38:	9805883a 	mov	r2,r19
20087a3c:	dfc00d17 	ldw	ra,52(sp)
20087a40:	df000c17 	ldw	fp,48(sp)
20087a44:	ddc00b17 	ldw	r23,44(sp)
20087a48:	dd800a17 	ldw	r22,40(sp)
20087a4c:	dd400917 	ldw	r21,36(sp)
20087a50:	dd000817 	ldw	r20,32(sp)
20087a54:	dcc00717 	ldw	r19,28(sp)
20087a58:	dc800617 	ldw	r18,24(sp)
20087a5c:	dc400517 	ldw	r17,20(sp)
20087a60:	dc000417 	ldw	r16,16(sp)
20087a64:	dec00e04 	addi	sp,sp,56
20087a68:	f800283a 	ret
20087a6c:	8904b03a 	or	r2,r17,r4
20087a70:	10003726 	beq	r2,zero,20087b50 <__divdf3+0x2b0>
20087a74:	88011c26 	beq	r17,zero,20087ee8 <__divdf3+0x648>
20087a78:	8809883a 	mov	r4,r17
20087a7c:	d9800315 	stw	r6,12(sp)
20087a80:	d9c00115 	stw	r7,4(sp)
20087a84:	0088ee00 	call	20088ee0 <__clzsi2>
20087a88:	d9800317 	ldw	r6,12(sp)
20087a8c:	d9c00117 	ldw	r7,4(sp)
20087a90:	1007883a 	mov	r3,r2
20087a94:	01000a04 	movi	r4,40
20087a98:	1cfffe04 	addi	r19,r3,-8
20087a9c:	20c9c83a 	sub	r4,r4,r3
20087aa0:	8cca983a 	sll	r5,r17,r19
20087aa4:	9108d83a 	srl	r4,r18,r4
20087aa8:	94e6983a 	sll	r19,r18,r19
20087aac:	2162b03a 	or	r17,r4,r5
20087ab0:	053f0344 	movi	r20,-1011
20087ab4:	a0e9c83a 	sub	r20,r20,r3
20087ab8:	0025883a 	mov	r18,zero
20087abc:	0011883a 	mov	r8,zero
20087ac0:	003f9606 	br	2008791c <__flash_rwdata_start+0xfffeb798>
20087ac4:	8184b03a 	or	r2,r16,r6
20087ac8:	10001f1e 	bne	r2,zero,20087b48 <__divdf3+0x2a8>
20087acc:	0021883a 	mov	r16,zero
20087ad0:	002b883a 	mov	r21,zero
20087ad4:	01c00084 	movi	r7,2
20087ad8:	003fa206 	br	20087964 <__flash_rwdata_start+0xfffeb7e0>
20087adc:	8184b03a 	or	r2,r16,r6
20087ae0:	10001526 	beq	r2,zero,20087b38 <__divdf3+0x298>
20087ae4:	80010c26 	beq	r16,zero,20087f18 <__divdf3+0x678>
20087ae8:	8009883a 	mov	r4,r16
20087aec:	d9800315 	stw	r6,12(sp)
20087af0:	da000215 	stw	r8,8(sp)
20087af4:	da400015 	stw	r9,0(sp)
20087af8:	0088ee00 	call	20088ee0 <__clzsi2>
20087afc:	d9800317 	ldw	r6,12(sp)
20087b00:	da000217 	ldw	r8,8(sp)
20087b04:	da400017 	ldw	r9,0(sp)
20087b08:	1007883a 	mov	r3,r2
20087b0c:	01000a04 	movi	r4,40
20087b10:	1d7ffe04 	addi	r21,r3,-8
20087b14:	20c9c83a 	sub	r4,r4,r3
20087b18:	8560983a 	sll	r16,r16,r21
20087b1c:	3108d83a 	srl	r4,r6,r4
20087b20:	356a983a 	sll	r21,r6,r21
20087b24:	2420b03a 	or	r16,r4,r16
20087b28:	017f0344 	movi	r5,-1011
20087b2c:	28cbc83a 	sub	r5,r5,r3
20087b30:	000f883a 	mov	r7,zero
20087b34:	003f8b06 	br	20087964 <__flash_rwdata_start+0xfffeb7e0>
20087b38:	0021883a 	mov	r16,zero
20087b3c:	002b883a 	mov	r21,zero
20087b40:	01c00044 	movi	r7,1
20087b44:	003f8706 	br	20087964 <__flash_rwdata_start+0xfffeb7e0>
20087b48:	01c000c4 	movi	r7,3
20087b4c:	003f8506 	br	20087964 <__flash_rwdata_start+0xfffeb7e0>
20087b50:	04800104 	movi	r18,4
20087b54:	0023883a 	mov	r17,zero
20087b58:	0027883a 	mov	r19,zero
20087b5c:	02000044 	movi	r8,1
20087b60:	003f6e06 	br	2008791c <__flash_rwdata_start+0xfffeb798>
20087b64:	04800304 	movi	r18,12
20087b68:	020000c4 	movi	r8,3
20087b6c:	003f6b06 	br	2008791c <__flash_rwdata_start+0xfffeb798>
20087b70:	01400434 	movhi	r5,16
20087b74:	000d883a 	mov	r6,zero
20087b78:	297fffc4 	addi	r5,r5,-1
20087b7c:	04ffffc4 	movi	r19,-1
20087b80:	0101ffc4 	movi	r4,2047
20087b84:	003fa406 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20087b88:	043f0084 	movi	r16,-1022
20087b8c:	8521c83a 	sub	r16,r16,r20
20087b90:	00800e04 	movi	r2,56
20087b94:	1401200e 	bge	r2,r16,20088018 <__divdf3+0x778>
20087b98:	9180004c 	andi	r6,r18,1
20087b9c:	0009883a 	mov	r4,zero
20087ba0:	000b883a 	mov	r5,zero
20087ba4:	0027883a 	mov	r19,zero
20087ba8:	003f9b06 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20087bac:	8880022c 	andhi	r2,r17,8
20087bb0:	1000c726 	beq	r2,zero,20087ed0 <__divdf3+0x630>
20087bb4:	8080022c 	andhi	r2,r16,8
20087bb8:	1000c51e 	bne	r2,zero,20087ed0 <__divdf3+0x630>
20087bbc:	00800434 	movhi	r2,16
20087bc0:	81400234 	orhi	r5,r16,8
20087bc4:	10bfffc4 	addi	r2,r2,-1
20087bc8:	b80d883a 	mov	r6,r23
20087bcc:	288a703a 	and	r5,r5,r2
20087bd0:	a827883a 	mov	r19,r21
20087bd4:	003fea06 	br	20087b80 <__flash_rwdata_start+0xfffeb9fc>
20087bd8:	8440ea36 	bltu	r16,r17,20087f84 <__divdf3+0x6e4>
20087bdc:	8c00e826 	beq	r17,r16,20087f80 <__divdf3+0x6e0>
20087be0:	a53fffc4 	addi	r20,r20,-1
20087be4:	882d883a 	mov	r22,r17
20087be8:	000d883a 	mov	r6,zero
20087bec:	a804d63a 	srli	r2,r21,24
20087bf0:	8020923a 	slli	r16,r16,8
20087bf4:	b009883a 	mov	r4,r22
20087bf8:	d9800315 	stw	r6,12(sp)
20087bfc:	1420b03a 	or	r16,r2,r16
20087c00:	802ed43a 	srli	r23,r16,16
20087c04:	873fffcc 	andi	fp,r16,65535
20087c08:	a82a923a 	slli	r21,r21,8
20087c0c:	b80b883a 	mov	r5,r23
20087c10:	00866700 	call	20086670 <__udivsi3>
20087c14:	b009883a 	mov	r4,r22
20087c18:	b80b883a 	mov	r5,r23
20087c1c:	1023883a 	mov	r17,r2
20087c20:	00866780 	call	20086678 <__umodsi3>
20087c24:	1004943a 	slli	r2,r2,16
20087c28:	9808d43a 	srli	r4,r19,16
20087c2c:	8f2d383a 	mul	r22,r17,fp
20087c30:	d9800317 	ldw	r6,12(sp)
20087c34:	1106b03a 	or	r3,r2,r4
20087c38:	1d80062e 	bgeu	r3,r22,20087c54 <__divdf3+0x3b4>
20087c3c:	1c07883a 	add	r3,r3,r16
20087c40:	88bfffc4 	addi	r2,r17,-1
20087c44:	1c00dc36 	bltu	r3,r16,20087fb8 <__divdf3+0x718>
20087c48:	1d80db2e 	bgeu	r3,r22,20087fb8 <__divdf3+0x718>
20087c4c:	8c7fff84 	addi	r17,r17,-2
20087c50:	1c07883a 	add	r3,r3,r16
20087c54:	1dadc83a 	sub	r22,r3,r22
20087c58:	b009883a 	mov	r4,r22
20087c5c:	b80b883a 	mov	r5,r23
20087c60:	d9800315 	stw	r6,12(sp)
20087c64:	00866700 	call	20086670 <__udivsi3>
20087c68:	b009883a 	mov	r4,r22
20087c6c:	b80b883a 	mov	r5,r23
20087c70:	d8800015 	stw	r2,0(sp)
20087c74:	00866780 	call	20086678 <__umodsi3>
20087c78:	da400017 	ldw	r9,0(sp)
20087c7c:	1004943a 	slli	r2,r2,16
20087c80:	9cffffcc 	andi	r19,r19,65535
20087c84:	4f07383a 	mul	r3,r9,fp
20087c88:	14c8b03a 	or	r4,r2,r19
20087c8c:	d9800317 	ldw	r6,12(sp)
20087c90:	20c0062e 	bgeu	r4,r3,20087cac <__divdf3+0x40c>
20087c94:	2409883a 	add	r4,r4,r16
20087c98:	48bfffc4 	addi	r2,r9,-1
20087c9c:	2400c436 	bltu	r4,r16,20087fb0 <__divdf3+0x710>
20087ca0:	20c0c32e 	bgeu	r4,r3,20087fb0 <__divdf3+0x710>
20087ca4:	4a7fff84 	addi	r9,r9,-2
20087ca8:	2409883a 	add	r4,r4,r16
20087cac:	8822943a 	slli	r17,r17,16
20087cb0:	a80ed43a 	srli	r7,r21,16
20087cb4:	aa3fffcc 	andi	r8,r21,65535
20087cb8:	4c62b03a 	or	r17,r9,r17
20087cbc:	8816d43a 	srli	r11,r17,16
20087cc0:	897fffcc 	andi	r5,r17,65535
20087cc4:	2a15383a 	mul	r10,r5,r8
20087cc8:	5a19383a 	mul	r12,r11,r8
20087ccc:	29cb383a 	mul	r5,r5,r7
20087cd0:	5012d43a 	srli	r9,r10,16
20087cd4:	20c5c83a 	sub	r2,r4,r3
20087cd8:	614b883a 	add	r5,r12,r5
20087cdc:	2a4b883a 	add	r5,r5,r9
20087ce0:	59c7383a 	mul	r3,r11,r7
20087ce4:	2b00022e 	bgeu	r5,r12,20087cf0 <__divdf3+0x450>
20087ce8:	01000074 	movhi	r4,1
20087cec:	1907883a 	add	r3,r3,r4
20087cf0:	2808d43a 	srli	r4,r5,16
20087cf4:	280a943a 	slli	r5,r5,16
20087cf8:	54ffffcc 	andi	r19,r10,65535
20087cfc:	1907883a 	add	r3,r3,r4
20087d00:	2ccb883a 	add	r5,r5,r19
20087d04:	10c09336 	bltu	r2,r3,20087f54 <__divdf3+0x6b4>
20087d08:	10c0ad26 	beq	r2,r3,20087fc0 <__divdf3+0x720>
20087d0c:	10c7c83a 	sub	r3,r2,r3
20087d10:	3167c83a 	sub	r19,r6,r5
20087d14:	34ed803a 	cmpltu	r22,r6,r19
20087d18:	1dadc83a 	sub	r22,r3,r22
20087d1c:	b400b226 	beq	r22,r16,20087fe8 <__divdf3+0x748>
20087d20:	b009883a 	mov	r4,r22
20087d24:	b80b883a 	mov	r5,r23
20087d28:	d9c00115 	stw	r7,4(sp)
20087d2c:	da000215 	stw	r8,8(sp)
20087d30:	00866700 	call	20086670 <__udivsi3>
20087d34:	b009883a 	mov	r4,r22
20087d38:	b80b883a 	mov	r5,r23
20087d3c:	d8800315 	stw	r2,12(sp)
20087d40:	00866780 	call	20086678 <__umodsi3>
20087d44:	d9800317 	ldw	r6,12(sp)
20087d48:	1004943a 	slli	r2,r2,16
20087d4c:	9808d43a 	srli	r4,r19,16
20087d50:	372d383a 	mul	r22,r6,fp
20087d54:	d9c00117 	ldw	r7,4(sp)
20087d58:	1106b03a 	or	r3,r2,r4
20087d5c:	da000217 	ldw	r8,8(sp)
20087d60:	1d80062e 	bgeu	r3,r22,20087d7c <__divdf3+0x4dc>
20087d64:	1c07883a 	add	r3,r3,r16
20087d68:	30bfffc4 	addi	r2,r6,-1
20087d6c:	1c00a036 	bltu	r3,r16,20087ff0 <__divdf3+0x750>
20087d70:	1d809f2e 	bgeu	r3,r22,20087ff0 <__divdf3+0x750>
20087d74:	31bfff84 	addi	r6,r6,-2
20087d78:	1c07883a 	add	r3,r3,r16
20087d7c:	1dadc83a 	sub	r22,r3,r22
20087d80:	b009883a 	mov	r4,r22
20087d84:	b80b883a 	mov	r5,r23
20087d88:	d9800315 	stw	r6,12(sp)
20087d8c:	d9c00115 	stw	r7,4(sp)
20087d90:	da000215 	stw	r8,8(sp)
20087d94:	00866700 	call	20086670 <__udivsi3>
20087d98:	b009883a 	mov	r4,r22
20087d9c:	b80b883a 	mov	r5,r23
20087da0:	d8800015 	stw	r2,0(sp)
20087da4:	00866780 	call	20086678 <__umodsi3>
20087da8:	da400017 	ldw	r9,0(sp)
20087dac:	1004943a 	slli	r2,r2,16
20087db0:	993fffcc 	andi	r4,r19,65535
20087db4:	4f39383a 	mul	fp,r9,fp
20087db8:	1106b03a 	or	r3,r2,r4
20087dbc:	d9800317 	ldw	r6,12(sp)
20087dc0:	d9c00117 	ldw	r7,4(sp)
20087dc4:	da000217 	ldw	r8,8(sp)
20087dc8:	1f00062e 	bgeu	r3,fp,20087de4 <__divdf3+0x544>
20087dcc:	1c07883a 	add	r3,r3,r16
20087dd0:	48bfffc4 	addi	r2,r9,-1
20087dd4:	1c008836 	bltu	r3,r16,20087ff8 <__divdf3+0x758>
20087dd8:	1f00872e 	bgeu	r3,fp,20087ff8 <__divdf3+0x758>
20087ddc:	4a7fff84 	addi	r9,r9,-2
20087de0:	1c07883a 	add	r3,r3,r16
20087de4:	3008943a 	slli	r4,r6,16
20087de8:	1f07c83a 	sub	r3,r3,fp
20087dec:	4926b03a 	or	r19,r9,r4
20087df0:	993fffcc 	andi	r4,r19,65535
20087df4:	980cd43a 	srli	r6,r19,16
20087df8:	220b383a 	mul	r5,r4,r8
20087dfc:	21c5383a 	mul	r2,r4,r7
20087e00:	3211383a 	mul	r8,r6,r8
20087e04:	2808d43a 	srli	r4,r5,16
20087e08:	31cf383a 	mul	r7,r6,r7
20087e0c:	4085883a 	add	r2,r8,r2
20087e10:	1105883a 	add	r2,r2,r4
20087e14:	1200022e 	bgeu	r2,r8,20087e20 <__divdf3+0x580>
20087e18:	01000074 	movhi	r4,1
20087e1c:	390f883a 	add	r7,r7,r4
20087e20:	1008d43a 	srli	r4,r2,16
20087e24:	1004943a 	slli	r2,r2,16
20087e28:	297fffcc 	andi	r5,r5,65535
20087e2c:	390f883a 	add	r7,r7,r4
20087e30:	1145883a 	add	r2,r2,r5
20087e34:	19c06536 	bltu	r3,r7,20087fcc <__divdf3+0x72c>
20087e38:	19c09f26 	beq	r3,r7,200880b8 <__divdf3+0x818>
20087e3c:	9cc00054 	ori	r19,r19,1
20087e40:	a100ffc4 	addi	r4,r20,1023
20087e44:	013f500e 	bge	zero,r4,20087b88 <__flash_rwdata_start+0xfffeba04>
20087e48:	988001cc 	andi	r2,r19,7
20087e4c:	10000726 	beq	r2,zero,20087e6c <__divdf3+0x5cc>
20087e50:	98c003cc 	andi	r3,r19,15
20087e54:	00800104 	movi	r2,4
20087e58:	18800426 	beq	r3,r2,20087e6c <__divdf3+0x5cc>
20087e5c:	9885883a 	add	r2,r19,r2
20087e60:	14e1803a 	cmpltu	r16,r2,r19
20087e64:	8c23883a 	add	r17,r17,r16
20087e68:	1027883a 	mov	r19,r2
20087e6c:	8880402c 	andhi	r2,r17,256
20087e70:	10000426 	beq	r2,zero,20087e84 <__divdf3+0x5e4>
20087e74:	00bfc034 	movhi	r2,65280
20087e78:	10bfffc4 	addi	r2,r2,-1
20087e7c:	a1010004 	addi	r4,r20,1024
20087e80:	88a2703a 	and	r17,r17,r2
20087e84:	0081ff84 	movi	r2,2046
20087e88:	113edf16 	blt	r2,r4,20087a08 <__flash_rwdata_start+0xfffeb884>
20087e8c:	9826d0fa 	srli	r19,r19,3
20087e90:	8804977a 	slli	r2,r17,29
20087e94:	8820927a 	slli	r16,r17,9
20087e98:	2101ffcc 	andi	r4,r4,2047
20087e9c:	14e6b03a 	or	r19,r2,r19
20087ea0:	800ad33a 	srli	r5,r16,12
20087ea4:	9180004c 	andi	r6,r18,1
20087ea8:	003edb06 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20087eac:	008000c4 	movi	r2,3
20087eb0:	4080a826 	beq	r8,r2,20088154 <__divdf3+0x8b4>
20087eb4:	00800044 	movi	r2,1
20087eb8:	4080551e 	bne	r8,r2,20088010 <__divdf3+0x770>
20087ebc:	e00d883a 	mov	r6,fp
20087ec0:	0009883a 	mov	r4,zero
20087ec4:	000b883a 	mov	r5,zero
20087ec8:	0027883a 	mov	r19,zero
20087ecc:	003ed206 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20087ed0:	00800434 	movhi	r2,16
20087ed4:	89400234 	orhi	r5,r17,8
20087ed8:	10bfffc4 	addi	r2,r2,-1
20087edc:	b00d883a 	mov	r6,r22
20087ee0:	288a703a 	and	r5,r5,r2
20087ee4:	003f2606 	br	20087b80 <__flash_rwdata_start+0xfffeb9fc>
20087ee8:	d9800315 	stw	r6,12(sp)
20087eec:	d9c00115 	stw	r7,4(sp)
20087ef0:	0088ee00 	call	20088ee0 <__clzsi2>
20087ef4:	10c00804 	addi	r3,r2,32
20087ef8:	010009c4 	movi	r4,39
20087efc:	d9800317 	ldw	r6,12(sp)
20087f00:	d9c00117 	ldw	r7,4(sp)
20087f04:	20fee30e 	bge	r4,r3,20087a94 <__flash_rwdata_start+0xfffeb910>
20087f08:	117ffe04 	addi	r5,r2,-8
20087f0c:	9162983a 	sll	r17,r18,r5
20087f10:	0027883a 	mov	r19,zero
20087f14:	003ee606 	br	20087ab0 <__flash_rwdata_start+0xfffeb92c>
20087f18:	3009883a 	mov	r4,r6
20087f1c:	d9800315 	stw	r6,12(sp)
20087f20:	da000215 	stw	r8,8(sp)
20087f24:	da400015 	stw	r9,0(sp)
20087f28:	0088ee00 	call	20088ee0 <__clzsi2>
20087f2c:	10c00804 	addi	r3,r2,32
20087f30:	010009c4 	movi	r4,39
20087f34:	d9800317 	ldw	r6,12(sp)
20087f38:	da000217 	ldw	r8,8(sp)
20087f3c:	da400017 	ldw	r9,0(sp)
20087f40:	20fef20e 	bge	r4,r3,20087b0c <__flash_rwdata_start+0xfffeb988>
20087f44:	10bffe04 	addi	r2,r2,-8
20087f48:	a8a0983a 	sll	r16,r21,r2
20087f4c:	002b883a 	mov	r21,zero
20087f50:	003ef506 	br	20087b28 <__flash_rwdata_start+0xfffeb9a4>
20087f54:	354d883a 	add	r6,r6,r21
20087f58:	3549803a 	cmpltu	r4,r6,r21
20087f5c:	2409883a 	add	r4,r4,r16
20087f60:	2089883a 	add	r4,r4,r2
20087f64:	88bfffc4 	addi	r2,r17,-1
20087f68:	81000c2e 	bgeu	r16,r4,20087f9c <__divdf3+0x6fc>
20087f6c:	20c04436 	bltu	r4,r3,20088080 <__divdf3+0x7e0>
20087f70:	19006f26 	beq	r3,r4,20088130 <__divdf3+0x890>
20087f74:	20c7c83a 	sub	r3,r4,r3
20087f78:	1023883a 	mov	r17,r2
20087f7c:	003f6406 	br	20087d10 <__flash_rwdata_start+0xfffebb8c>
20087f80:	9d7f1736 	bltu	r19,r21,20087be0 <__flash_rwdata_start+0xfffeba5c>
20087f84:	9806d07a 	srli	r3,r19,1
20087f88:	880497fa 	slli	r2,r17,31
20087f8c:	980c97fa 	slli	r6,r19,31
20087f90:	882cd07a 	srli	r22,r17,1
20087f94:	18a6b03a 	or	r19,r3,r2
20087f98:	003f1406 	br	20087bec <__flash_rwdata_start+0xfffeba68>
20087f9c:	243ff51e 	bne	r4,r16,20087f74 <__flash_rwdata_start+0xfffebdf0>
20087fa0:	357ff22e 	bgeu	r6,r21,20087f6c <__flash_rwdata_start+0xfffebde8>
20087fa4:	80c7c83a 	sub	r3,r16,r3
20087fa8:	1023883a 	mov	r17,r2
20087fac:	003f5806 	br	20087d10 <__flash_rwdata_start+0xfffebb8c>
20087fb0:	1013883a 	mov	r9,r2
20087fb4:	003f3d06 	br	20087cac <__flash_rwdata_start+0xfffebb28>
20087fb8:	1023883a 	mov	r17,r2
20087fbc:	003f2506 	br	20087c54 <__flash_rwdata_start+0xfffebad0>
20087fc0:	317fe436 	bltu	r6,r5,20087f54 <__flash_rwdata_start+0xfffebdd0>
20087fc4:	0007883a 	mov	r3,zero
20087fc8:	003f5106 	br	20087d10 <__flash_rwdata_start+0xfffebb8c>
20087fcc:	1c07883a 	add	r3,r3,r16
20087fd0:	993fffc4 	addi	r4,r19,-1
20087fd4:	1c000a2e 	bgeu	r3,r16,20088000 <__divdf3+0x760>
20087fd8:	2027883a 	mov	r19,r4
20087fdc:	19ff971e 	bne	r3,r7,20087e3c <__flash_rwdata_start+0xfffebcb8>
20087fe0:	a8bf961e 	bne	r21,r2,20087e3c <__flash_rwdata_start+0xfffebcb8>
20087fe4:	003f9606 	br	20087e40 <__flash_rwdata_start+0xfffebcbc>
20087fe8:	04ffffc4 	movi	r19,-1
20087fec:	003f9406 	br	20087e40 <__flash_rwdata_start+0xfffebcbc>
20087ff0:	100d883a 	mov	r6,r2
20087ff4:	003f6106 	br	20087d7c <__flash_rwdata_start+0xfffebbf8>
20087ff8:	1013883a 	mov	r9,r2
20087ffc:	003f7906 	br	20087de4 <__flash_rwdata_start+0xfffebc60>
20088000:	19c02636 	bltu	r3,r7,2008809c <__divdf3+0x7fc>
20088004:	38c04d26 	beq	r7,r3,2008813c <__divdf3+0x89c>
20088008:	2027883a 	mov	r19,r4
2008800c:	003f8b06 	br	20087e3c <__flash_rwdata_start+0xfffebcb8>
20088010:	e025883a 	mov	r18,fp
20088014:	003f8a06 	br	20087e40 <__flash_rwdata_start+0xfffebcbc>
20088018:	008007c4 	movi	r2,31
2008801c:	14002a16 	blt	r2,r16,200880c8 <__divdf3+0x828>
20088020:	a5010784 	addi	r20,r20,1054
20088024:	8d04983a 	sll	r2,r17,r20
20088028:	9c06d83a 	srl	r3,r19,r16
2008802c:	9d28983a 	sll	r20,r19,r20
20088030:	8c20d83a 	srl	r16,r17,r16
20088034:	1886b03a 	or	r3,r3,r2
20088038:	a004c03a 	cmpne	r2,r20,zero
2008803c:	1884b03a 	or	r2,r3,r2
20088040:	10c001cc 	andi	r3,r2,7
20088044:	18000726 	beq	r3,zero,20088064 <__divdf3+0x7c4>
20088048:	110003cc 	andi	r4,r2,15
2008804c:	00c00104 	movi	r3,4
20088050:	20c00426 	beq	r4,r3,20088064 <__divdf3+0x7c4>
20088054:	10c00104 	addi	r3,r2,4
20088058:	1885803a 	cmpltu	r2,r3,r2
2008805c:	80a1883a 	add	r16,r16,r2
20088060:	1805883a 	mov	r2,r3
20088064:	80c0202c 	andhi	r3,r16,128
20088068:	18002d26 	beq	r3,zero,20088120 <__divdf3+0x880>
2008806c:	9180004c 	andi	r6,r18,1
20088070:	01000044 	movi	r4,1
20088074:	000b883a 	mov	r5,zero
20088078:	0027883a 	mov	r19,zero
2008807c:	003e6606 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20088080:	354d883a 	add	r6,r6,r21
20088084:	356d803a 	cmpltu	r22,r6,r21
20088088:	b42d883a 	add	r22,r22,r16
2008808c:	b12d883a 	add	r22,r22,r4
20088090:	8c7fff84 	addi	r17,r17,-2
20088094:	b0c7c83a 	sub	r3,r22,r3
20088098:	003f1d06 	br	20087d10 <__flash_rwdata_start+0xfffebb8c>
2008809c:	ad4b883a 	add	r5,r21,r21
200880a0:	2d6b803a 	cmpltu	r21,r5,r21
200880a4:	ac2b883a 	add	r21,r21,r16
200880a8:	1d47883a 	add	r3,r3,r21
200880ac:	993fff84 	addi	r4,r19,-2
200880b0:	282b883a 	mov	r21,r5
200880b4:	003fc806 	br	20087fd8 <__flash_rwdata_start+0xfffebe54>
200880b8:	103fc41e 	bne	r2,zero,20087fcc <__flash_rwdata_start+0xfffebe48>
200880bc:	002b883a 	mov	r21,zero
200880c0:	a8bf5e1e 	bne	r21,r2,20087e3c <__flash_rwdata_start+0xfffebcb8>
200880c4:	003f5e06 	br	20087e40 <__flash_rwdata_start+0xfffebcbc>
200880c8:	00bef884 	movi	r2,-1054
200880cc:	1505c83a 	sub	r2,r2,r20
200880d0:	00c00804 	movi	r3,32
200880d4:	8884d83a 	srl	r2,r17,r2
200880d8:	80c01c26 	beq	r16,r3,2008814c <__divdf3+0x8ac>
200880dc:	a0c10f84 	addi	r3,r20,1086
200880e0:	88c6983a 	sll	r3,r17,r3
200880e4:	1cc6b03a 	or	r3,r3,r19
200880e8:	1806c03a 	cmpne	r3,r3,zero
200880ec:	1884b03a 	or	r2,r3,r2
200880f0:	140001cc 	andi	r16,r2,7
200880f4:	8000061e 	bne	r16,zero,20088110 <__divdf3+0x870>
200880f8:	000b883a 	mov	r5,zero
200880fc:	1004d0fa 	srli	r2,r2,3
20088100:	9180004c 	andi	r6,r18,1
20088104:	0009883a 	mov	r4,zero
20088108:	1426b03a 	or	r19,r2,r16
2008810c:	003e4206 	br	20087a18 <__flash_rwdata_start+0xfffeb894>
20088110:	110003cc 	andi	r4,r2,15
20088114:	00c00104 	movi	r3,4
20088118:	0021883a 	mov	r16,zero
2008811c:	20ffcd1e 	bne	r4,r3,20088054 <__flash_rwdata_start+0xfffebed0>
20088120:	800a927a 	slli	r5,r16,9
20088124:	8020977a 	slli	r16,r16,29
20088128:	280ad33a 	srli	r5,r5,12
2008812c:	003ff306 	br	200880fc <__flash_rwdata_start+0xfffebf78>
20088130:	317fd336 	bltu	r6,r5,20088080 <__flash_rwdata_start+0xfffebefc>
20088134:	1023883a 	mov	r17,r2
20088138:	003fa206 	br	20087fc4 <__flash_rwdata_start+0xfffebe40>
2008813c:	a8bfd736 	bltu	r21,r2,2008809c <__flash_rwdata_start+0xfffebf18>
20088140:	2027883a 	mov	r19,r4
20088144:	a8bf3d1e 	bne	r21,r2,20087e3c <__flash_rwdata_start+0xfffebcb8>
20088148:	003f3d06 	br	20087e40 <__flash_rwdata_start+0xfffebcbc>
2008814c:	0007883a 	mov	r3,zero
20088150:	003fe406 	br	200880e4 <__flash_rwdata_start+0xfffebf60>
20088154:	00800434 	movhi	r2,16
20088158:	89400234 	orhi	r5,r17,8
2008815c:	10bfffc4 	addi	r2,r2,-1
20088160:	e00d883a 	mov	r6,fp
20088164:	288a703a 	and	r5,r5,r2
20088168:	003e8506 	br	20087b80 <__flash_rwdata_start+0xfffeb9fc>

2008816c <__subdf3>:
2008816c:	00c00434 	movhi	r3,16
20088170:	18ffffc4 	addi	r3,r3,-1
20088174:	defffb04 	addi	sp,sp,-20
20088178:	28d2703a 	and	r9,r5,r3
2008817c:	3814d53a 	srli	r10,r7,20
20088180:	38c6703a 	and	r3,r7,r3
20088184:	3004d77a 	srli	r2,r6,29
20088188:	dc800215 	stw	r18,8(sp)
2008818c:	dc000015 	stw	r16,0(sp)
20088190:	2824d7fa 	srli	r18,r5,31
20088194:	2820d53a 	srli	r16,r5,20
20088198:	481290fa 	slli	r9,r9,3
2008819c:	200ad77a 	srli	r5,r4,29
200881a0:	180690fa 	slli	r3,r3,3
200881a4:	dc400115 	stw	r17,4(sp)
200881a8:	dfc00415 	stw	ra,16(sp)
200881ac:	202290fa 	slli	r17,r4,3
200881b0:	dcc00315 	stw	r19,12(sp)
200881b4:	5281ffcc 	andi	r10,r10,2047
200881b8:	0101ffc4 	movi	r4,2047
200881bc:	9011883a 	mov	r8,r18
200881c0:	8401ffcc 	andi	r16,r16,2047
200881c4:	94803fcc 	andi	r18,r18,255
200881c8:	494ab03a 	or	r5,r9,r5
200881cc:	380ed7fa 	srli	r7,r7,31
200881d0:	1886b03a 	or	r3,r3,r2
200881d4:	300c90fa 	slli	r6,r6,3
200881d8:	51009026 	beq	r10,r4,2008841c <__subdf3+0x2b0>
200881dc:	39c0005c 	xori	r7,r7,1
200881e0:	8285c83a 	sub	r2,r16,r10
200881e4:	91c06f26 	beq	r18,r7,200883a4 <__subdf3+0x238>
200881e8:	0080b10e 	bge	zero,r2,200884b0 <__subdf3+0x344>
200881ec:	50002a1e 	bne	r10,zero,20088298 <__subdf3+0x12c>
200881f0:	1988b03a 	or	r4,r3,r6
200881f4:	2000941e 	bne	r4,zero,20088448 <__subdf3+0x2dc>
200881f8:	888001cc 	andi	r2,r17,7
200881fc:	10005b26 	beq	r2,zero,2008836c <__subdf3+0x200>
20088200:	88c003cc 	andi	r3,r17,15
20088204:	00800104 	movi	r2,4
20088208:	18805826 	beq	r3,r2,2008836c <__subdf3+0x200>
2008820c:	88c00104 	addi	r3,r17,4
20088210:	1c63803a 	cmpltu	r17,r3,r17
20088214:	2c4b883a 	add	r5,r5,r17
20088218:	2880202c 	andhi	r2,r5,128
2008821c:	9200004c 	andi	r8,r18,1
20088220:	1823883a 	mov	r17,r3
20088224:	10005426 	beq	r2,zero,20088378 <__subdf3+0x20c>
20088228:	84000044 	addi	r16,r16,1
2008822c:	0081ffc4 	movi	r2,2047
20088230:	8080bf26 	beq	r16,r2,20088530 <__subdf3+0x3c4>
20088234:	013fe034 	movhi	r4,65408
20088238:	213fffc4 	addi	r4,r4,-1
2008823c:	290a703a 	and	r5,r5,r4
20088240:	2804977a 	slli	r2,r5,29
20088244:	280a927a 	slli	r5,r5,9
20088248:	8822d0fa 	srli	r17,r17,3
2008824c:	8401ffcc 	andi	r16,r16,2047
20088250:	2808d33a 	srli	r4,r5,12
20088254:	1444b03a 	or	r2,r2,r17
20088258:	8401ffcc 	andi	r16,r16,2047
2008825c:	800a953a 	slli	r5,r16,20
20088260:	40c03fcc 	andi	r3,r8,255
20088264:	04000434 	movhi	r16,16
20088268:	180697fa 	slli	r3,r3,31
2008826c:	843fffc4 	addi	r16,r16,-1
20088270:	2420703a 	and	r16,r4,r16
20088274:	8160b03a 	or	r16,r16,r5
20088278:	80c6b03a 	or	r3,r16,r3
2008827c:	dfc00417 	ldw	ra,16(sp)
20088280:	dcc00317 	ldw	r19,12(sp)
20088284:	dc800217 	ldw	r18,8(sp)
20088288:	dc400117 	ldw	r17,4(sp)
2008828c:	dc000017 	ldw	r16,0(sp)
20088290:	dec00504 	addi	sp,sp,20
20088294:	f800283a 	ret
20088298:	0101ffc4 	movi	r4,2047
2008829c:	813fd626 	beq	r16,r4,200881f8 <__flash_rwdata_start+0xfffec074>
200882a0:	18c02034 	orhi	r3,r3,128
200882a4:	01000e04 	movi	r4,56
200882a8:	2080a416 	blt	r4,r2,2008853c <__subdf3+0x3d0>
200882ac:	010007c4 	movi	r4,31
200882b0:	2080c716 	blt	r4,r2,200885d0 <__subdf3+0x464>
200882b4:	01000804 	movi	r4,32
200882b8:	2089c83a 	sub	r4,r4,r2
200882bc:	1910983a 	sll	r8,r3,r4
200882c0:	308ed83a 	srl	r7,r6,r2
200882c4:	3108983a 	sll	r4,r6,r4
200882c8:	1884d83a 	srl	r2,r3,r2
200882cc:	41ccb03a 	or	r6,r8,r7
200882d0:	2008c03a 	cmpne	r4,r4,zero
200882d4:	310cb03a 	or	r6,r6,r4
200882d8:	898dc83a 	sub	r6,r17,r6
200882dc:	89a3803a 	cmpltu	r17,r17,r6
200882e0:	288bc83a 	sub	r5,r5,r2
200882e4:	2c4bc83a 	sub	r5,r5,r17
200882e8:	3023883a 	mov	r17,r6
200882ec:	2880202c 	andhi	r2,r5,128
200882f0:	10006b26 	beq	r2,zero,200884a0 <__subdf3+0x334>
200882f4:	04c02034 	movhi	r19,128
200882f8:	9cffffc4 	addi	r19,r19,-1
200882fc:	2ce6703a 	and	r19,r5,r19
20088300:	98007c26 	beq	r19,zero,200884f4 <__subdf3+0x388>
20088304:	9809883a 	mov	r4,r19
20088308:	0088ee00 	call	20088ee0 <__clzsi2>
2008830c:	10fffe04 	addi	r3,r2,-8
20088310:	010007c4 	movi	r4,31
20088314:	20c07d16 	blt	r4,r3,2008850c <__subdf3+0x3a0>
20088318:	01400a04 	movi	r5,40
2008831c:	2885c83a 	sub	r2,r5,r2
20088320:	888ad83a 	srl	r5,r17,r2
20088324:	98e6983a 	sll	r19,r19,r3
20088328:	88e2983a 	sll	r17,r17,r3
2008832c:	2ce6b03a 	or	r19,r5,r19
20088330:	1c007a16 	blt	r3,r16,2008851c <__subdf3+0x3b0>
20088334:	1c21c83a 	sub	r16,r3,r16
20088338:	81400044 	addi	r5,r16,1
2008833c:	00c007c4 	movi	r3,31
20088340:	19409616 	blt	r3,r5,2008859c <__subdf3+0x430>
20088344:	1c21c83a 	sub	r16,r3,r16
20088348:	8c08983a 	sll	r4,r17,r16
2008834c:	8946d83a 	srl	r3,r17,r5
20088350:	9c20983a 	sll	r16,r19,r16
20088354:	2008c03a 	cmpne	r4,r4,zero
20088358:	994ad83a 	srl	r5,r19,r5
2008835c:	1c06b03a 	or	r3,r3,r16
20088360:	1922b03a 	or	r17,r3,r4
20088364:	0021883a 	mov	r16,zero
20088368:	003fa306 	br	200881f8 <__flash_rwdata_start+0xfffec074>
2008836c:	2880202c 	andhi	r2,r5,128
20088370:	9200004c 	andi	r8,r18,1
20088374:	103fac1e 	bne	r2,zero,20088228 <__flash_rwdata_start+0xfffec0a4>
20088378:	2804977a 	slli	r2,r5,29
2008837c:	8822d0fa 	srli	r17,r17,3
20088380:	00c1ffc4 	movi	r3,2047
20088384:	280ad0fa 	srli	r5,r5,3
20088388:	1444b03a 	or	r2,r2,r17
2008838c:	80c02726 	beq	r16,r3,2008842c <__subdf3+0x2c0>
20088390:	01000434 	movhi	r4,16
20088394:	213fffc4 	addi	r4,r4,-1
20088398:	80e0703a 	and	r16,r16,r3
2008839c:	2908703a 	and	r4,r5,r4
200883a0:	003fad06 	br	20088258 <__flash_rwdata_start+0xfffec0d4>
200883a4:	0080690e 	bge	zero,r2,2008854c <__subdf3+0x3e0>
200883a8:	50002f26 	beq	r10,zero,20088468 <__subdf3+0x2fc>
200883ac:	0101ffc4 	movi	r4,2047
200883b0:	813f9126 	beq	r16,r4,200881f8 <__flash_rwdata_start+0xfffec074>
200883b4:	18c02034 	orhi	r3,r3,128
200883b8:	01000e04 	movi	r4,56
200883bc:	2080b00e 	bge	r4,r2,20088680 <__subdf3+0x514>
200883c0:	198cb03a 	or	r6,r3,r6
200883c4:	300ec03a 	cmpne	r7,r6,zero
200883c8:	0005883a 	mov	r2,zero
200883cc:	3c4f883a 	add	r7,r7,r17
200883d0:	3c63803a 	cmpltu	r17,r7,r17
200883d4:	114b883a 	add	r5,r2,r5
200883d8:	2c4b883a 	add	r5,r5,r17
200883dc:	3823883a 	mov	r17,r7
200883e0:	2880202c 	andhi	r2,r5,128
200883e4:	10002e26 	beq	r2,zero,200884a0 <__subdf3+0x334>
200883e8:	84000044 	addi	r16,r16,1
200883ec:	0081ffc4 	movi	r2,2047
200883f0:	8080de26 	beq	r16,r2,2008876c <__subdf3+0x600>
200883f4:	00bfe034 	movhi	r2,65408
200883f8:	10bfffc4 	addi	r2,r2,-1
200883fc:	288a703a 	and	r5,r5,r2
20088400:	880cd07a 	srli	r6,r17,1
20088404:	280897fa 	slli	r4,r5,31
20088408:	88c0004c 	andi	r3,r17,1
2008840c:	30e2b03a 	or	r17,r6,r3
20088410:	280ad07a 	srli	r5,r5,1
20088414:	8922b03a 	or	r17,r17,r4
20088418:	003f7706 	br	200881f8 <__flash_rwdata_start+0xfffec074>
2008841c:	1984b03a 	or	r2,r3,r6
20088420:	103f6e26 	beq	r2,zero,200881dc <__flash_rwdata_start+0xfffec058>
20088424:	39c03fcc 	andi	r7,r7,255
20088428:	003f6d06 	br	200881e0 <__flash_rwdata_start+0xfffec05c>
2008842c:	1146b03a 	or	r3,r2,r5
20088430:	18003f26 	beq	r3,zero,20088530 <__subdf3+0x3c4>
20088434:	00c00434 	movhi	r3,16
20088438:	29000234 	orhi	r4,r5,8
2008843c:	18ffffc4 	addi	r3,r3,-1
20088440:	20c8703a 	and	r4,r4,r3
20088444:	003f8406 	br	20088258 <__flash_rwdata_start+0xfffec0d4>
20088448:	10bfffc4 	addi	r2,r2,-1
2008844c:	1000501e 	bne	r2,zero,20088590 <__subdf3+0x424>
20088450:	898fc83a 	sub	r7,r17,r6
20088454:	89e3803a 	cmpltu	r17,r17,r7
20088458:	28cbc83a 	sub	r5,r5,r3
2008845c:	2c4bc83a 	sub	r5,r5,r17
20088460:	3823883a 	mov	r17,r7
20088464:	003fa106 	br	200882ec <__flash_rwdata_start+0xfffec168>
20088468:	1988b03a 	or	r4,r3,r6
2008846c:	203f6226 	beq	r4,zero,200881f8 <__flash_rwdata_start+0xfffec074>
20088470:	10bfffc4 	addi	r2,r2,-1
20088474:	10009b1e 	bne	r2,zero,200886e4 <__subdf3+0x578>
20088478:	344d883a 	add	r6,r6,r17
2008847c:	3463803a 	cmpltu	r17,r6,r17
20088480:	194b883a 	add	r5,r3,r5
20088484:	2c4b883a 	add	r5,r5,r17
20088488:	3023883a 	mov	r17,r6
2008848c:	003fd406 	br	200883e0 <__flash_rwdata_start+0xfffec25c>
20088490:	1106b03a 	or	r3,r2,r4
20088494:	1800b426 	beq	r3,zero,20088768 <__subdf3+0x5fc>
20088498:	100b883a 	mov	r5,r2
2008849c:	2023883a 	mov	r17,r4
200884a0:	888001cc 	andi	r2,r17,7
200884a4:	103f561e 	bne	r2,zero,20088200 <__flash_rwdata_start+0xfffec07c>
200884a8:	9200004c 	andi	r8,r18,1
200884ac:	003fb206 	br	20088378 <__flash_rwdata_start+0xfffec1f4>
200884b0:	1000531e 	bne	r2,zero,20088600 <__subdf3+0x494>
200884b4:	80800044 	addi	r2,r16,1
200884b8:	1081ffcc 	andi	r2,r2,2047
200884bc:	01000044 	movi	r4,1
200884c0:	2080a00e 	bge	r4,r2,20088744 <__subdf3+0x5d8>
200884c4:	8985c83a 	sub	r2,r17,r6
200884c8:	8889803a 	cmpltu	r4,r17,r2
200884cc:	28e7c83a 	sub	r19,r5,r3
200884d0:	9927c83a 	sub	r19,r19,r4
200884d4:	9900202c 	andhi	r4,r19,128
200884d8:	20006226 	beq	r4,zero,20088664 <__subdf3+0x4f8>
200884dc:	3463c83a 	sub	r17,r6,r17
200884e0:	194bc83a 	sub	r5,r3,r5
200884e4:	344d803a 	cmpltu	r6,r6,r17
200884e8:	29a7c83a 	sub	r19,r5,r6
200884ec:	3825883a 	mov	r18,r7
200884f0:	983f841e 	bne	r19,zero,20088304 <__flash_rwdata_start+0xfffec180>
200884f4:	8809883a 	mov	r4,r17
200884f8:	0088ee00 	call	20088ee0 <__clzsi2>
200884fc:	10800804 	addi	r2,r2,32
20088500:	10fffe04 	addi	r3,r2,-8
20088504:	010007c4 	movi	r4,31
20088508:	20ff830e 	bge	r4,r3,20088318 <__flash_rwdata_start+0xfffec194>
2008850c:	14fff604 	addi	r19,r2,-40
20088510:	8ce6983a 	sll	r19,r17,r19
20088514:	0023883a 	mov	r17,zero
20088518:	1c3f860e 	bge	r3,r16,20088334 <__flash_rwdata_start+0xfffec1b0>
2008851c:	017fe034 	movhi	r5,65408
20088520:	297fffc4 	addi	r5,r5,-1
20088524:	80e1c83a 	sub	r16,r16,r3
20088528:	994a703a 	and	r5,r19,r5
2008852c:	003f3206 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088530:	0009883a 	mov	r4,zero
20088534:	0005883a 	mov	r2,zero
20088538:	003f4706 	br	20088258 <__flash_rwdata_start+0xfffec0d4>
2008853c:	198cb03a 	or	r6,r3,r6
20088540:	300cc03a 	cmpne	r6,r6,zero
20088544:	0005883a 	mov	r2,zero
20088548:	003f6306 	br	200882d8 <__flash_rwdata_start+0xfffec154>
2008854c:	10009d1e 	bne	r2,zero,200887c4 <__subdf3+0x658>
20088550:	81c00044 	addi	r7,r16,1
20088554:	3881ffcc 	andi	r2,r7,2047
20088558:	02400044 	movi	r9,1
2008855c:	4880680e 	bge	r9,r2,20088700 <__subdf3+0x594>
20088560:	0081ffc4 	movi	r2,2047
20088564:	3880ae26 	beq	r7,r2,20088820 <__subdf3+0x6b4>
20088568:	344d883a 	add	r6,r6,r17
2008856c:	3463803a 	cmpltu	r17,r6,r17
20088570:	194b883a 	add	r5,r3,r5
20088574:	2c4b883a 	add	r5,r5,r17
20088578:	282297fa 	slli	r17,r5,31
2008857c:	300cd07a 	srli	r6,r6,1
20088580:	280ad07a 	srli	r5,r5,1
20088584:	3821883a 	mov	r16,r7
20088588:	89a2b03a 	or	r17,r17,r6
2008858c:	003f1a06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088590:	0101ffc4 	movi	r4,2047
20088594:	813f431e 	bne	r16,r4,200882a4 <__flash_rwdata_start+0xfffec120>
20088598:	003f1706 	br	200881f8 <__flash_rwdata_start+0xfffec074>
2008859c:	80bff844 	addi	r2,r16,-31
200885a0:	00c00804 	movi	r3,32
200885a4:	9884d83a 	srl	r2,r19,r2
200885a8:	28c05126 	beq	r5,r3,200886f0 <__subdf3+0x584>
200885ac:	00c00fc4 	movi	r3,63
200885b0:	1c21c83a 	sub	r16,r3,r16
200885b4:	9c26983a 	sll	r19,r19,r16
200885b8:	9c62b03a 	or	r17,r19,r17
200885bc:	8822c03a 	cmpne	r17,r17,zero
200885c0:	88a2b03a 	or	r17,r17,r2
200885c4:	000b883a 	mov	r5,zero
200885c8:	0021883a 	mov	r16,zero
200885cc:	003fb406 	br	200884a0 <__flash_rwdata_start+0xfffec31c>
200885d0:	113ff804 	addi	r4,r2,-32
200885d4:	01c00804 	movi	r7,32
200885d8:	1908d83a 	srl	r4,r3,r4
200885dc:	11c04626 	beq	r2,r7,200886f8 <__subdf3+0x58c>
200885e0:	01c01004 	movi	r7,64
200885e4:	3885c83a 	sub	r2,r7,r2
200885e8:	1884983a 	sll	r2,r3,r2
200885ec:	118cb03a 	or	r6,r2,r6
200885f0:	300cc03a 	cmpne	r6,r6,zero
200885f4:	310cb03a 	or	r6,r6,r4
200885f8:	0005883a 	mov	r2,zero
200885fc:	003f3606 	br	200882d8 <__flash_rwdata_start+0xfffec154>
20088600:	80002b26 	beq	r16,zero,200886b0 <__subdf3+0x544>
20088604:	0101ffc4 	movi	r4,2047
20088608:	51006926 	beq	r10,r4,200887b0 <__subdf3+0x644>
2008860c:	0085c83a 	sub	r2,zero,r2
20088610:	29402034 	orhi	r5,r5,128
20088614:	01000e04 	movi	r4,56
20088618:	20807d16 	blt	r4,r2,20088810 <__subdf3+0x6a4>
2008861c:	010007c4 	movi	r4,31
20088620:	2080d916 	blt	r4,r2,20088988 <__subdf3+0x81c>
20088624:	01000804 	movi	r4,32
20088628:	2089c83a 	sub	r4,r4,r2
2008862c:	2912983a 	sll	r9,r5,r4
20088630:	8890d83a 	srl	r8,r17,r2
20088634:	8908983a 	sll	r4,r17,r4
20088638:	2884d83a 	srl	r2,r5,r2
2008863c:	4a22b03a 	or	r17,r9,r8
20088640:	2008c03a 	cmpne	r4,r4,zero
20088644:	8922b03a 	or	r17,r17,r4
20088648:	3463c83a 	sub	r17,r6,r17
2008864c:	1885c83a 	sub	r2,r3,r2
20088650:	344d803a 	cmpltu	r6,r6,r17
20088654:	118bc83a 	sub	r5,r2,r6
20088658:	5021883a 	mov	r16,r10
2008865c:	3825883a 	mov	r18,r7
20088660:	003f2206 	br	200882ec <__flash_rwdata_start+0xfffec168>
20088664:	9886b03a 	or	r3,r19,r2
20088668:	18001c1e 	bne	r3,zero,200886dc <__subdf3+0x570>
2008866c:	0011883a 	mov	r8,zero
20088670:	000b883a 	mov	r5,zero
20088674:	0023883a 	mov	r17,zero
20088678:	0021883a 	mov	r16,zero
2008867c:	003f3e06 	br	20088378 <__flash_rwdata_start+0xfffec1f4>
20088680:	010007c4 	movi	r4,31
20088684:	20803c16 	blt	r4,r2,20088778 <__subdf3+0x60c>
20088688:	01000804 	movi	r4,32
2008868c:	2089c83a 	sub	r4,r4,r2
20088690:	1912983a 	sll	r9,r3,r4
20088694:	308ed83a 	srl	r7,r6,r2
20088698:	3108983a 	sll	r4,r6,r4
2008869c:	1884d83a 	srl	r2,r3,r2
200886a0:	49ceb03a 	or	r7,r9,r7
200886a4:	2008c03a 	cmpne	r4,r4,zero
200886a8:	390eb03a 	or	r7,r7,r4
200886ac:	003f4706 	br	200883cc <__flash_rwdata_start+0xfffec248>
200886b0:	2c48b03a 	or	r4,r5,r17
200886b4:	20003e26 	beq	r4,zero,200887b0 <__subdf3+0x644>
200886b8:	0084303a 	nor	r2,zero,r2
200886bc:	10003a1e 	bne	r2,zero,200887a8 <__subdf3+0x63c>
200886c0:	3463c83a 	sub	r17,r6,r17
200886c4:	194bc83a 	sub	r5,r3,r5
200886c8:	344d803a 	cmpltu	r6,r6,r17
200886cc:	298bc83a 	sub	r5,r5,r6
200886d0:	5021883a 	mov	r16,r10
200886d4:	3825883a 	mov	r18,r7
200886d8:	003f0406 	br	200882ec <__flash_rwdata_start+0xfffec168>
200886dc:	1023883a 	mov	r17,r2
200886e0:	003f0706 	br	20088300 <__flash_rwdata_start+0xfffec17c>
200886e4:	0101ffc4 	movi	r4,2047
200886e8:	813f331e 	bne	r16,r4,200883b8 <__flash_rwdata_start+0xfffec234>
200886ec:	003ec206 	br	200881f8 <__flash_rwdata_start+0xfffec074>
200886f0:	0027883a 	mov	r19,zero
200886f4:	003fb006 	br	200885b8 <__flash_rwdata_start+0xfffec434>
200886f8:	0005883a 	mov	r2,zero
200886fc:	003fbb06 	br	200885ec <__flash_rwdata_start+0xfffec468>
20088700:	2c44b03a 	or	r2,r5,r17
20088704:	80008b1e 	bne	r16,zero,20088934 <__subdf3+0x7c8>
20088708:	1000b526 	beq	r2,zero,200889e0 <__subdf3+0x874>
2008870c:	1984b03a 	or	r2,r3,r6
20088710:	103eb926 	beq	r2,zero,200881f8 <__flash_rwdata_start+0xfffec074>
20088714:	3449883a 	add	r4,r6,r17
20088718:	2463803a 	cmpltu	r17,r4,r17
2008871c:	194b883a 	add	r5,r3,r5
20088720:	2c4b883a 	add	r5,r5,r17
20088724:	2880202c 	andhi	r2,r5,128
20088728:	2023883a 	mov	r17,r4
2008872c:	103f5c26 	beq	r2,zero,200884a0 <__flash_rwdata_start+0xfffec31c>
20088730:	00bfe034 	movhi	r2,65408
20088734:	10bfffc4 	addi	r2,r2,-1
20088738:	4821883a 	mov	r16,r9
2008873c:	288a703a 	and	r5,r5,r2
20088740:	003ead06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088744:	2c44b03a 	or	r2,r5,r17
20088748:	8000291e 	bne	r16,zero,200887f0 <__subdf3+0x684>
2008874c:	10004f1e 	bne	r2,zero,2008888c <__subdf3+0x720>
20088750:	1984b03a 	or	r2,r3,r6
20088754:	10000426 	beq	r2,zero,20088768 <__subdf3+0x5fc>
20088758:	180b883a 	mov	r5,r3
2008875c:	3023883a 	mov	r17,r6
20088760:	3825883a 	mov	r18,r7
20088764:	003ea406 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088768:	0011883a 	mov	r8,zero
2008876c:	000b883a 	mov	r5,zero
20088770:	0023883a 	mov	r17,zero
20088774:	003f0006 	br	20088378 <__flash_rwdata_start+0xfffec1f4>
20088778:	11fff804 	addi	r7,r2,-32
2008877c:	19c8d83a 	srl	r4,r3,r7
20088780:	01c00804 	movi	r7,32
20088784:	11c07e26 	beq	r2,r7,20088980 <__subdf3+0x814>
20088788:	01c01004 	movi	r7,64
2008878c:	3885c83a 	sub	r2,r7,r2
20088790:	1884983a 	sll	r2,r3,r2
20088794:	118cb03a 	or	r6,r2,r6
20088798:	300ec03a 	cmpne	r7,r6,zero
2008879c:	390eb03a 	or	r7,r7,r4
200887a0:	0005883a 	mov	r2,zero
200887a4:	003f0906 	br	200883cc <__flash_rwdata_start+0xfffec248>
200887a8:	0101ffc4 	movi	r4,2047
200887ac:	513f991e 	bne	r10,r4,20088614 <__flash_rwdata_start+0xfffec490>
200887b0:	180b883a 	mov	r5,r3
200887b4:	3023883a 	mov	r17,r6
200887b8:	5021883a 	mov	r16,r10
200887bc:	3825883a 	mov	r18,r7
200887c0:	003e8d06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
200887c4:	80001a1e 	bne	r16,zero,20088830 <__subdf3+0x6c4>
200887c8:	2c48b03a 	or	r4,r5,r17
200887cc:	20005526 	beq	r4,zero,20088924 <__subdf3+0x7b8>
200887d0:	0084303a 	nor	r2,zero,r2
200887d4:	1000511e 	bne	r2,zero,2008891c <__subdf3+0x7b0>
200887d8:	89a3883a 	add	r17,r17,r6
200887dc:	194b883a 	add	r5,r3,r5
200887e0:	898d803a 	cmpltu	r6,r17,r6
200887e4:	298b883a 	add	r5,r5,r6
200887e8:	5021883a 	mov	r16,r10
200887ec:	003efc06 	br	200883e0 <__flash_rwdata_start+0xfffec25c>
200887f0:	1000341e 	bne	r2,zero,200888c4 <__subdf3+0x758>
200887f4:	1984b03a 	or	r2,r3,r6
200887f8:	10006f26 	beq	r2,zero,200889b8 <__subdf3+0x84c>
200887fc:	180b883a 	mov	r5,r3
20088800:	3023883a 	mov	r17,r6
20088804:	3825883a 	mov	r18,r7
20088808:	0401ffc4 	movi	r16,2047
2008880c:	003e7a06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088810:	2c62b03a 	or	r17,r5,r17
20088814:	8822c03a 	cmpne	r17,r17,zero
20088818:	0005883a 	mov	r2,zero
2008881c:	003f8a06 	br	20088648 <__flash_rwdata_start+0xfffec4c4>
20088820:	3821883a 	mov	r16,r7
20088824:	000b883a 	mov	r5,zero
20088828:	0023883a 	mov	r17,zero
2008882c:	003ed206 	br	20088378 <__flash_rwdata_start+0xfffec1f4>
20088830:	0101ffc4 	movi	r4,2047
20088834:	51003b26 	beq	r10,r4,20088924 <__subdf3+0x7b8>
20088838:	0085c83a 	sub	r2,zero,r2
2008883c:	29402034 	orhi	r5,r5,128
20088840:	01000e04 	movi	r4,56
20088844:	20806216 	blt	r4,r2,200889d0 <__subdf3+0x864>
20088848:	010007c4 	movi	r4,31
2008884c:	20806b16 	blt	r4,r2,200889fc <__subdf3+0x890>
20088850:	01000804 	movi	r4,32
20088854:	2089c83a 	sub	r4,r4,r2
20088858:	2912983a 	sll	r9,r5,r4
2008885c:	888ed83a 	srl	r7,r17,r2
20088860:	8908983a 	sll	r4,r17,r4
20088864:	2884d83a 	srl	r2,r5,r2
20088868:	49e2b03a 	or	r17,r9,r7
2008886c:	2008c03a 	cmpne	r4,r4,zero
20088870:	8922b03a 	or	r17,r17,r4
20088874:	89a3883a 	add	r17,r17,r6
20088878:	10c5883a 	add	r2,r2,r3
2008887c:	898d803a 	cmpltu	r6,r17,r6
20088880:	118b883a 	add	r5,r2,r6
20088884:	5021883a 	mov	r16,r10
20088888:	003ed506 	br	200883e0 <__flash_rwdata_start+0xfffec25c>
2008888c:	1984b03a 	or	r2,r3,r6
20088890:	103e5926 	beq	r2,zero,200881f8 <__flash_rwdata_start+0xfffec074>
20088894:	8989c83a 	sub	r4,r17,r6
20088898:	8911803a 	cmpltu	r8,r17,r4
2008889c:	28c5c83a 	sub	r2,r5,r3
200888a0:	1205c83a 	sub	r2,r2,r8
200888a4:	1200202c 	andhi	r8,r2,128
200888a8:	403ef926 	beq	r8,zero,20088490 <__flash_rwdata_start+0xfffec30c>
200888ac:	3463c83a 	sub	r17,r6,r17
200888b0:	194bc83a 	sub	r5,r3,r5
200888b4:	344d803a 	cmpltu	r6,r6,r17
200888b8:	298bc83a 	sub	r5,r5,r6
200888bc:	3825883a 	mov	r18,r7
200888c0:	003e4d06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
200888c4:	1984b03a 	or	r2,r3,r6
200888c8:	10002b26 	beq	r2,zero,20088978 <__subdf3+0x80c>
200888cc:	2808d0fa 	srli	r4,r5,3
200888d0:	8822d0fa 	srli	r17,r17,3
200888d4:	280a977a 	slli	r5,r5,29
200888d8:	2080022c 	andhi	r2,r4,8
200888dc:	2c62b03a 	or	r17,r5,r17
200888e0:	10000826 	beq	r2,zero,20088904 <__subdf3+0x798>
200888e4:	1810d0fa 	srli	r8,r3,3
200888e8:	4080022c 	andhi	r2,r8,8
200888ec:	1000051e 	bne	r2,zero,20088904 <__subdf3+0x798>
200888f0:	300cd0fa 	srli	r6,r6,3
200888f4:	1804977a 	slli	r2,r3,29
200888f8:	4009883a 	mov	r4,r8
200888fc:	3825883a 	mov	r18,r7
20088900:	11a2b03a 	or	r17,r2,r6
20088904:	880ad77a 	srli	r5,r17,29
20088908:	200890fa 	slli	r4,r4,3
2008890c:	882290fa 	slli	r17,r17,3
20088910:	0401ffc4 	movi	r16,2047
20088914:	290ab03a 	or	r5,r5,r4
20088918:	003e3706 	br	200881f8 <__flash_rwdata_start+0xfffec074>
2008891c:	0101ffc4 	movi	r4,2047
20088920:	513fc71e 	bne	r10,r4,20088840 <__flash_rwdata_start+0xfffec6bc>
20088924:	180b883a 	mov	r5,r3
20088928:	3023883a 	mov	r17,r6
2008892c:	5021883a 	mov	r16,r10
20088930:	003e3106 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088934:	10002d26 	beq	r2,zero,200889ec <__subdf3+0x880>
20088938:	1984b03a 	or	r2,r3,r6
2008893c:	10000e26 	beq	r2,zero,20088978 <__subdf3+0x80c>
20088940:	2808d0fa 	srli	r4,r5,3
20088944:	8822d0fa 	srli	r17,r17,3
20088948:	280a977a 	slli	r5,r5,29
2008894c:	2080022c 	andhi	r2,r4,8
20088950:	2c62b03a 	or	r17,r5,r17
20088954:	103feb26 	beq	r2,zero,20088904 <__flash_rwdata_start+0xfffec780>
20088958:	180ed0fa 	srli	r7,r3,3
2008895c:	3880022c 	andhi	r2,r7,8
20088960:	103fe81e 	bne	r2,zero,20088904 <__flash_rwdata_start+0xfffec780>
20088964:	300cd0fa 	srli	r6,r6,3
20088968:	1804977a 	slli	r2,r3,29
2008896c:	3809883a 	mov	r4,r7
20088970:	11a2b03a 	or	r17,r2,r6
20088974:	003fe306 	br	20088904 <__flash_rwdata_start+0xfffec780>
20088978:	0401ffc4 	movi	r16,2047
2008897c:	003e1e06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
20088980:	0005883a 	mov	r2,zero
20088984:	003f8306 	br	20088794 <__flash_rwdata_start+0xfffec610>
20088988:	113ff804 	addi	r4,r2,-32
2008898c:	02000804 	movi	r8,32
20088990:	2908d83a 	srl	r4,r5,r4
20088994:	12002526 	beq	r2,r8,20088a2c <__subdf3+0x8c0>
20088998:	02001004 	movi	r8,64
2008899c:	4085c83a 	sub	r2,r8,r2
200889a0:	288a983a 	sll	r5,r5,r2
200889a4:	2c62b03a 	or	r17,r5,r17
200889a8:	8822c03a 	cmpne	r17,r17,zero
200889ac:	8922b03a 	or	r17,r17,r4
200889b0:	0005883a 	mov	r2,zero
200889b4:	003f2406 	br	20088648 <__flash_rwdata_start+0xfffec4c4>
200889b8:	01402034 	movhi	r5,128
200889bc:	0011883a 	mov	r8,zero
200889c0:	297fffc4 	addi	r5,r5,-1
200889c4:	047ffe04 	movi	r17,-8
200889c8:	0401ffc4 	movi	r16,2047
200889cc:	003e6a06 	br	20088378 <__flash_rwdata_start+0xfffec1f4>
200889d0:	2c62b03a 	or	r17,r5,r17
200889d4:	8822c03a 	cmpne	r17,r17,zero
200889d8:	0005883a 	mov	r2,zero
200889dc:	003fa506 	br	20088874 <__flash_rwdata_start+0xfffec6f0>
200889e0:	180b883a 	mov	r5,r3
200889e4:	3023883a 	mov	r17,r6
200889e8:	003e0306 	br	200881f8 <__flash_rwdata_start+0xfffec074>
200889ec:	180b883a 	mov	r5,r3
200889f0:	3023883a 	mov	r17,r6
200889f4:	0401ffc4 	movi	r16,2047
200889f8:	003dff06 	br	200881f8 <__flash_rwdata_start+0xfffec074>
200889fc:	113ff804 	addi	r4,r2,-32
20088a00:	01c00804 	movi	r7,32
20088a04:	2908d83a 	srl	r4,r5,r4
20088a08:	11c00a26 	beq	r2,r7,20088a34 <__subdf3+0x8c8>
20088a0c:	01c01004 	movi	r7,64
20088a10:	3885c83a 	sub	r2,r7,r2
20088a14:	288a983a 	sll	r5,r5,r2
20088a18:	2c62b03a 	or	r17,r5,r17
20088a1c:	8822c03a 	cmpne	r17,r17,zero
20088a20:	8922b03a 	or	r17,r17,r4
20088a24:	0005883a 	mov	r2,zero
20088a28:	003f9206 	br	20088874 <__flash_rwdata_start+0xfffec6f0>
20088a2c:	000b883a 	mov	r5,zero
20088a30:	003fdc06 	br	200889a4 <__flash_rwdata_start+0xfffec820>
20088a34:	000b883a 	mov	r5,zero
20088a38:	003ff706 	br	20088a18 <__flash_rwdata_start+0xfffec894>

20088a3c <__fixdfsi>:
20088a3c:	2806d53a 	srli	r3,r5,20
20088a40:	00800434 	movhi	r2,16
20088a44:	10bfffc4 	addi	r2,r2,-1
20088a48:	18c1ffcc 	andi	r3,r3,2047
20088a4c:	0180ff84 	movi	r6,1022
20088a50:	2884703a 	and	r2,r5,r2
20088a54:	280ad7fa 	srli	r5,r5,31
20088a58:	30c0130e 	bge	r6,r3,20088aa8 <__fixdfsi+0x6c>
20088a5c:	01810744 	movi	r6,1053
20088a60:	30c00d16 	blt	r6,r3,20088a98 <__fixdfsi+0x5c>
20088a64:	01810cc4 	movi	r6,1075
20088a68:	30cdc83a 	sub	r6,r6,r3
20088a6c:	01c007c4 	movi	r7,31
20088a70:	10800434 	orhi	r2,r2,16
20088a74:	39800e0e 	bge	r7,r6,20088ab0 <__fixdfsi+0x74>
20088a78:	010104c4 	movi	r4,1043
20088a7c:	20c7c83a 	sub	r3,r4,r3
20088a80:	10c6d83a 	srl	r3,r2,r3
20088a84:	29403fcc 	andi	r5,r5,255
20088a88:	0145c83a 	sub	r2,zero,r5
20088a8c:	1884f03a 	xor	r2,r3,r2
20088a90:	1145883a 	add	r2,r2,r5
20088a94:	f800283a 	ret
20088a98:	00a00034 	movhi	r2,32768
20088a9c:	10bfffc4 	addi	r2,r2,-1
20088aa0:	2885883a 	add	r2,r5,r2
20088aa4:	f800283a 	ret
20088aa8:	0005883a 	mov	r2,zero
20088aac:	f800283a 	ret
20088ab0:	18fefb44 	addi	r3,r3,-1043
20088ab4:	2188d83a 	srl	r4,r4,r6
20088ab8:	10c6983a 	sll	r3,r2,r3
20088abc:	20c6b03a 	or	r3,r4,r3
20088ac0:	003ff006 	br	20088a84 <__flash_rwdata_start+0xfffec900>

20088ac4 <__floatsidf>:
20088ac4:	defffd04 	addi	sp,sp,-12
20088ac8:	dc400115 	stw	r17,4(sp)
20088acc:	dfc00215 	stw	ra,8(sp)
20088ad0:	dc000015 	stw	r16,0(sp)
20088ad4:	2023883a 	mov	r17,r4
20088ad8:	20001426 	beq	r4,zero,20088b2c <__floatsidf+0x68>
20088adc:	2020d7fa 	srli	r16,r4,31
20088ae0:	80000126 	beq	r16,zero,20088ae8 <__floatsidf+0x24>
20088ae4:	0123c83a 	sub	r17,zero,r4
20088ae8:	8809883a 	mov	r4,r17
20088aec:	0088ee00 	call	20088ee0 <__clzsi2>
20088af0:	01410784 	movi	r5,1054
20088af4:	00c00284 	movi	r3,10
20088af8:	288bc83a 	sub	r5,r5,r2
20088afc:	18801c16 	blt	r3,r2,20088b70 <__floatsidf+0xac>
20088b00:	00c002c4 	movi	r3,11
20088b04:	1887c83a 	sub	r3,r3,r2
20088b08:	88c8d83a 	srl	r4,r17,r3
20088b0c:	00c00434 	movhi	r3,16
20088b10:	18ffffc4 	addi	r3,r3,-1
20088b14:	10800544 	addi	r2,r2,21
20088b18:	20c8703a 	and	r4,r4,r3
20088b1c:	8884983a 	sll	r2,r17,r2
20088b20:	28c1ffcc 	andi	r3,r5,2047
20088b24:	800d883a 	mov	r6,r16
20088b28:	00000406 	br	20088b3c <__floatsidf+0x78>
20088b2c:	000d883a 	mov	r6,zero
20088b30:	0007883a 	mov	r3,zero
20088b34:	0009883a 	mov	r4,zero
20088b38:	0005883a 	mov	r2,zero
20088b3c:	180a953a 	slli	r5,r3,20
20088b40:	31803fcc 	andi	r6,r6,255
20088b44:	00c00434 	movhi	r3,16
20088b48:	300c97fa 	slli	r6,r6,31
20088b4c:	18ffffc4 	addi	r3,r3,-1
20088b50:	20c6703a 	and	r3,r4,r3
20088b54:	1946b03a 	or	r3,r3,r5
20088b58:	1986b03a 	or	r3,r3,r6
20088b5c:	dfc00217 	ldw	ra,8(sp)
20088b60:	dc400117 	ldw	r17,4(sp)
20088b64:	dc000017 	ldw	r16,0(sp)
20088b68:	dec00304 	addi	sp,sp,12
20088b6c:	f800283a 	ret
20088b70:	10fffd44 	addi	r3,r2,-11
20088b74:	88c8983a 	sll	r4,r17,r3
20088b78:	00800434 	movhi	r2,16
20088b7c:	10bfffc4 	addi	r2,r2,-1
20088b80:	2088703a 	and	r4,r4,r2
20088b84:	28c1ffcc 	andi	r3,r5,2047
20088b88:	800d883a 	mov	r6,r16
20088b8c:	0005883a 	mov	r2,zero
20088b90:	003fea06 	br	20088b3c <__flash_rwdata_start+0xfffec9b8>

20088b94 <__floatunsidf>:
20088b94:	defffe04 	addi	sp,sp,-8
20088b98:	dc000015 	stw	r16,0(sp)
20088b9c:	dfc00115 	stw	ra,4(sp)
20088ba0:	2021883a 	mov	r16,r4
20088ba4:	20001026 	beq	r4,zero,20088be8 <__floatunsidf+0x54>
20088ba8:	0088ee00 	call	20088ee0 <__clzsi2>
20088bac:	01410784 	movi	r5,1054
20088bb0:	100d883a 	mov	r6,r2
20088bb4:	288bc83a 	sub	r5,r5,r2
20088bb8:	00800284 	movi	r2,10
20088bbc:	11801616 	blt	r2,r6,20088c18 <__floatunsidf+0x84>
20088bc0:	008002c4 	movi	r2,11
20088bc4:	1185c83a 	sub	r2,r2,r6
20088bc8:	8084d83a 	srl	r2,r16,r2
20088bcc:	00c00434 	movhi	r3,16
20088bd0:	31c00544 	addi	r7,r6,21
20088bd4:	18ffffc4 	addi	r3,r3,-1
20088bd8:	81e0983a 	sll	r16,r16,r7
20088bdc:	10cc703a 	and	r6,r2,r3
20088be0:	2941ffcc 	andi	r5,r5,2047
20088be4:	00000206 	br	20088bf0 <__floatunsidf+0x5c>
20088be8:	000b883a 	mov	r5,zero
20088bec:	000d883a 	mov	r6,zero
20088bf0:	280a953a 	slli	r5,r5,20
20088bf4:	00c00434 	movhi	r3,16
20088bf8:	18ffffc4 	addi	r3,r3,-1
20088bfc:	30c6703a 	and	r3,r6,r3
20088c00:	8005883a 	mov	r2,r16
20088c04:	1946b03a 	or	r3,r3,r5
20088c08:	dfc00117 	ldw	ra,4(sp)
20088c0c:	dc000017 	ldw	r16,0(sp)
20088c10:	dec00204 	addi	sp,sp,8
20088c14:	f800283a 	ret
20088c18:	31bffd44 	addi	r6,r6,-11
20088c1c:	818c983a 	sll	r6,r16,r6
20088c20:	00800434 	movhi	r2,16
20088c24:	10bfffc4 	addi	r2,r2,-1
20088c28:	2941ffcc 	andi	r5,r5,2047
20088c2c:	0021883a 	mov	r16,zero
20088c30:	308c703a 	and	r6,r6,r2
20088c34:	003fee06 	br	20088bf0 <__flash_rwdata_start+0xfffeca6c>

20088c38 <__extendsfdf2>:
20088c38:	200ad5fa 	srli	r5,r4,23
20088c3c:	defffd04 	addi	sp,sp,-12
20088c40:	dc400115 	stw	r17,4(sp)
20088c44:	29403fcc 	andi	r5,r5,255
20088c48:	29800044 	addi	r6,r5,1
20088c4c:	04402034 	movhi	r17,128
20088c50:	dc000015 	stw	r16,0(sp)
20088c54:	8c7fffc4 	addi	r17,r17,-1
20088c58:	dfc00215 	stw	ra,8(sp)
20088c5c:	31803fcc 	andi	r6,r6,255
20088c60:	00800044 	movi	r2,1
20088c64:	8922703a 	and	r17,r17,r4
20088c68:	2020d7fa 	srli	r16,r4,31
20088c6c:	1180110e 	bge	r2,r6,20088cb4 <__extendsfdf2+0x7c>
20088c70:	880ed0fa 	srli	r7,r17,3
20088c74:	8822977a 	slli	r17,r17,29
20088c78:	2940e004 	addi	r5,r5,896
20088c7c:	2941ffcc 	andi	r5,r5,2047
20088c80:	280c953a 	slli	r6,r5,20
20088c84:	01400434 	movhi	r5,16
20088c88:	800697fa 	slli	r3,r16,31
20088c8c:	297fffc4 	addi	r5,r5,-1
20088c90:	394a703a 	and	r5,r7,r5
20088c94:	298ab03a 	or	r5,r5,r6
20088c98:	8805883a 	mov	r2,r17
20088c9c:	28c6b03a 	or	r3,r5,r3
20088ca0:	dfc00217 	ldw	ra,8(sp)
20088ca4:	dc400117 	ldw	r17,4(sp)
20088ca8:	dc000017 	ldw	r16,0(sp)
20088cac:	dec00304 	addi	sp,sp,12
20088cb0:	f800283a 	ret
20088cb4:	2800111e 	bne	r5,zero,20088cfc <__extendsfdf2+0xc4>
20088cb8:	88001c26 	beq	r17,zero,20088d2c <__extendsfdf2+0xf4>
20088cbc:	8809883a 	mov	r4,r17
20088cc0:	0088ee00 	call	20088ee0 <__clzsi2>
20088cc4:	00c00284 	movi	r3,10
20088cc8:	18801b16 	blt	r3,r2,20088d38 <__extendsfdf2+0x100>
20088ccc:	01c002c4 	movi	r7,11
20088cd0:	388fc83a 	sub	r7,r7,r2
20088cd4:	10c00544 	addi	r3,r2,21
20088cd8:	89ced83a 	srl	r7,r17,r7
20088cdc:	88e2983a 	sll	r17,r17,r3
20088ce0:	0180e244 	movi	r6,905
20088ce4:	308bc83a 	sub	r5,r6,r2
20088ce8:	01800434 	movhi	r6,16
20088cec:	31bfffc4 	addi	r6,r6,-1
20088cf0:	398e703a 	and	r7,r7,r6
20088cf4:	2941ffcc 	andi	r5,r5,2047
20088cf8:	003fe006 	br	20088c7c <__flash_rwdata_start+0xfffecaf8>
20088cfc:	88000826 	beq	r17,zero,20088d20 <__extendsfdf2+0xe8>
20088d00:	880ed0fa 	srli	r7,r17,3
20088d04:	00800434 	movhi	r2,16
20088d08:	10bfffc4 	addi	r2,r2,-1
20088d0c:	39c00234 	orhi	r7,r7,8
20088d10:	8822977a 	slli	r17,r17,29
20088d14:	388e703a 	and	r7,r7,r2
20088d18:	0141ffc4 	movi	r5,2047
20088d1c:	003fd706 	br	20088c7c <__flash_rwdata_start+0xfffecaf8>
20088d20:	0141ffc4 	movi	r5,2047
20088d24:	000f883a 	mov	r7,zero
20088d28:	003fd406 	br	20088c7c <__flash_rwdata_start+0xfffecaf8>
20088d2c:	000b883a 	mov	r5,zero
20088d30:	000f883a 	mov	r7,zero
20088d34:	003fd106 	br	20088c7c <__flash_rwdata_start+0xfffecaf8>
20088d38:	11fffd44 	addi	r7,r2,-11
20088d3c:	89ce983a 	sll	r7,r17,r7
20088d40:	0023883a 	mov	r17,zero
20088d44:	003fe606 	br	20088ce0 <__flash_rwdata_start+0xfffecb5c>

20088d48 <__truncdfsf2>:
20088d48:	2810d53a 	srli	r8,r5,20
20088d4c:	01c00434 	movhi	r7,16
20088d50:	39ffffc4 	addi	r7,r7,-1
20088d54:	29ce703a 	and	r7,r5,r7
20088d58:	380e90fa 	slli	r7,r7,3
20088d5c:	4201ffcc 	andi	r8,r8,2047
20088d60:	200cd77a 	srli	r6,r4,29
20088d64:	42400044 	addi	r9,r8,1
20088d68:	4a41ffcc 	andi	r9,r9,2047
20088d6c:	00800044 	movi	r2,1
20088d70:	398cb03a 	or	r6,r7,r6
20088d74:	280ad7fa 	srli	r5,r5,31
20088d78:	200e90fa 	slli	r7,r4,3
20088d7c:	1240230e 	bge	r2,r9,20088e0c <__truncdfsf2+0xc4>
20088d80:	40ff2004 	addi	r3,r8,-896
20088d84:	00803f84 	movi	r2,254
20088d88:	10c01516 	blt	r2,r3,20088de0 <__truncdfsf2+0x98>
20088d8c:	00c02d0e 	bge	zero,r3,20088e44 <__truncdfsf2+0xfc>
20088d90:	200891ba 	slli	r4,r4,6
20088d94:	300c90fa 	slli	r6,r6,3
20088d98:	380ed77a 	srli	r7,r7,29
20088d9c:	2008c03a 	cmpne	r4,r4,zero
20088da0:	310cb03a 	or	r6,r6,r4
20088da4:	31ccb03a 	or	r6,r6,r7
20088da8:	308001cc 	andi	r2,r6,7
20088dac:	10000426 	beq	r2,zero,20088dc0 <__truncdfsf2+0x78>
20088db0:	310003cc 	andi	r4,r6,15
20088db4:	00800104 	movi	r2,4
20088db8:	20800126 	beq	r4,r2,20088dc0 <__truncdfsf2+0x78>
20088dbc:	31800104 	addi	r6,r6,4
20088dc0:	3081002c 	andhi	r2,r6,1024
20088dc4:	10002326 	beq	r2,zero,20088e54 <__truncdfsf2+0x10c>
20088dc8:	18c00044 	addi	r3,r3,1
20088dcc:	00803fc4 	movi	r2,255
20088dd0:	18800326 	beq	r3,r2,20088de0 <__truncdfsf2+0x98>
20088dd4:	300c91ba 	slli	r6,r6,6
20088dd8:	300cd27a 	srli	r6,r6,9
20088ddc:	00000206 	br	20088de8 <__truncdfsf2+0xa0>
20088de0:	00ffffc4 	movi	r3,-1
20088de4:	000d883a 	mov	r6,zero
20088de8:	18c03fcc 	andi	r3,r3,255
20088dec:	180895fa 	slli	r4,r3,23
20088df0:	00c02034 	movhi	r3,128
20088df4:	280a97fa 	slli	r5,r5,31
20088df8:	18ffffc4 	addi	r3,r3,-1
20088dfc:	30c6703a 	and	r3,r6,r3
20088e00:	1906b03a 	or	r3,r3,r4
20088e04:	1944b03a 	or	r2,r3,r5
20088e08:	f800283a 	ret
20088e0c:	4000071e 	bne	r8,zero,20088e2c <__truncdfsf2+0xe4>
20088e10:	31ccb03a 	or	r6,r6,r7
20088e14:	30000d1e 	bne	r6,zero,20088e4c <__truncdfsf2+0x104>
20088e18:	0007883a 	mov	r3,zero
20088e1c:	00802034 	movhi	r2,128
20088e20:	10bfffc4 	addi	r2,r2,-1
20088e24:	308c703a 	and	r6,r6,r2
20088e28:	003fef06 	br	20088de8 <__flash_rwdata_start+0xfffecc64>
20088e2c:	31c8b03a 	or	r4,r6,r7
20088e30:	203feb26 	beq	r4,zero,20088de0 <__flash_rwdata_start+0xfffecc5c>
20088e34:	300c90fa 	slli	r6,r6,3
20088e38:	00c03fc4 	movi	r3,255
20088e3c:	31808034 	orhi	r6,r6,512
20088e40:	003fd906 	br	20088da8 <__flash_rwdata_start+0xfffecc24>
20088e44:	00bffa44 	movi	r2,-23
20088e48:	1880090e 	bge	r3,r2,20088e70 <__truncdfsf2+0x128>
20088e4c:	01800144 	movi	r6,5
20088e50:	0007883a 	mov	r3,zero
20088e54:	00803fc4 	movi	r2,255
20088e58:	300cd0fa 	srli	r6,r6,3
20088e5c:	18bfef1e 	bne	r3,r2,20088e1c <__flash_rwdata_start+0xfffecc98>
20088e60:	303fdf26 	beq	r6,zero,20088de0 <__flash_rwdata_start+0xfffecc5c>
20088e64:	31801034 	orhi	r6,r6,64
20088e68:	00ffffc4 	movi	r3,-1
20088e6c:	003feb06 	br	20088e1c <__flash_rwdata_start+0xfffecc98>
20088e70:	0080e784 	movi	r2,926
20088e74:	1205c83a 	sub	r2,r2,r8
20088e78:	00c007c4 	movi	r3,31
20088e7c:	31802034 	orhi	r6,r6,128
20088e80:	18800916 	blt	r3,r2,20088ea8 <__truncdfsf2+0x160>
20088e84:	423f2084 	addi	r8,r8,-894
20088e88:	3a06983a 	sll	r3,r7,r8
20088e8c:	3210983a 	sll	r8,r6,r8
20088e90:	388ed83a 	srl	r7,r7,r2
20088e94:	180cc03a 	cmpne	r6,r3,zero
20088e98:	418cb03a 	or	r6,r8,r6
20088e9c:	31ccb03a 	or	r6,r6,r7
20088ea0:	0007883a 	mov	r3,zero
20088ea4:	003fc006 	br	20088da8 <__flash_rwdata_start+0xfffecc24>
20088ea8:	00c0df84 	movi	r3,894
20088eac:	1a07c83a 	sub	r3,r3,r8
20088eb0:	01000804 	movi	r4,32
20088eb4:	30c6d83a 	srl	r3,r6,r3
20088eb8:	11000726 	beq	r2,r4,20088ed8 <__truncdfsf2+0x190>
20088ebc:	423f2884 	addi	r8,r8,-862
20088ec0:	3210983a 	sll	r8,r6,r8
20088ec4:	41ceb03a 	or	r7,r8,r7
20088ec8:	380ec03a 	cmpne	r7,r7,zero
20088ecc:	38ccb03a 	or	r6,r7,r3
20088ed0:	0007883a 	mov	r3,zero
20088ed4:	003fb406 	br	20088da8 <__flash_rwdata_start+0xfffecc24>
20088ed8:	0011883a 	mov	r8,zero
20088edc:	003ff906 	br	20088ec4 <__flash_rwdata_start+0xfffecd40>

20088ee0 <__clzsi2>:
20088ee0:	00bfffd4 	movui	r2,65535
20088ee4:	11000b36 	bltu	r2,r4,20088f14 <__clzsi2+0x34>
20088ee8:	00803fc4 	movi	r2,255
20088eec:	1100122e 	bgeu	r2,r4,20088f38 <__clzsi2+0x58>
20088ef0:	00c00204 	movi	r3,8
20088ef4:	01400604 	movi	r5,24
20088ef8:	20c8d83a 	srl	r4,r4,r3
20088efc:	00800034 	movhi	r2,0
20088f00:	1080c504 	addi	r2,r2,788
20088f04:	1109883a 	add	r4,r2,r4
20088f08:	20800003 	ldbu	r2,0(r4)
20088f0c:	2885c83a 	sub	r2,r5,r2
20088f10:	f800283a 	ret
20088f14:	00804034 	movhi	r2,256
20088f18:	10bfffc4 	addi	r2,r2,-1
20088f1c:	11000336 	bltu	r2,r4,20088f2c <__clzsi2+0x4c>
20088f20:	00c00404 	movi	r3,16
20088f24:	180b883a 	mov	r5,r3
20088f28:	003ff306 	br	20088ef8 <__flash_rwdata_start+0xfffecd74>
20088f2c:	00c00604 	movi	r3,24
20088f30:	01400204 	movi	r5,8
20088f34:	003ff006 	br	20088ef8 <__flash_rwdata_start+0xfffecd74>
20088f38:	0007883a 	mov	r3,zero
20088f3c:	01400804 	movi	r5,32
20088f40:	003fed06 	br	20088ef8 <__flash_rwdata_start+0xfffecd74>

20088f44 <memalign>:
20088f44:	00c00034 	movhi	r3,0
20088f48:	18c8e004 	addi	r3,r3,9088
20088f4c:	2005883a 	mov	r2,r4
20088f50:	19000017 	ldw	r4,0(r3)
20088f54:	280d883a 	mov	r6,r5
20088f58:	100b883a 	mov	r5,r2
20088f5c:	0088f601 	jmpi	20088f60 <_memalign_r>

20088f60 <_memalign_r>:
20088f60:	defffa04 	addi	sp,sp,-24
20088f64:	dc400115 	stw	r17,4(sp)
20088f68:	dfc00515 	stw	ra,20(sp)
20088f6c:	dd000415 	stw	r20,16(sp)
20088f70:	dcc00315 	stw	r19,12(sp)
20088f74:	dc800215 	stw	r18,8(sp)
20088f78:	dc000015 	stw	r16,0(sp)
20088f7c:	00800204 	movi	r2,8
20088f80:	2823883a 	mov	r17,r5
20088f84:	11404b2e 	bgeu	r2,r5,200890b4 <_memalign_r+0x154>
20088f88:	008003c4 	movi	r2,15
20088f8c:	2029883a 	mov	r20,r4
20088f90:	11400136 	bltu	r2,r5,20088f98 <_memalign_r+0x38>
20088f94:	04400404 	movi	r17,16
20088f98:	308002c4 	addi	r2,r6,11
20088f9c:	00c00584 	movi	r3,22
20088fa0:	18803e2e 	bgeu	r3,r2,2008909c <_memalign_r+0x13c>
20088fa4:	04bffe04 	movi	r18,-8
20088fa8:	14a4703a 	and	r18,r2,r18
20088fac:	90003d16 	blt	r18,zero,200890a4 <_memalign_r+0x144>
20088fb0:	91803c36 	bltu	r18,r6,200890a4 <_memalign_r+0x144>
20088fb4:	89400404 	addi	r5,r17,16
20088fb8:	a009883a 	mov	r4,r20
20088fbc:	2c8b883a 	add	r5,r5,r18
20088fc0:	008913c0 	call	2008913c <_malloc_r>
20088fc4:	1027883a 	mov	r19,r2
20088fc8:	10005026 	beq	r2,zero,2008910c <_memalign_r+0x1ac>
20088fcc:	a009883a 	mov	r4,r20
20088fd0:	009733c0 	call	2009733c <__malloc_lock>
20088fd4:	9809883a 	mov	r4,r19
20088fd8:	880b883a 	mov	r5,r17
20088fdc:	9c3ffe04 	addi	r16,r19,-8
20088fe0:	00866780 	call	20086678 <__umodsi3>
20088fe4:	10001c26 	beq	r2,zero,20089058 <_memalign_r+0xf8>
20088fe8:	88bfffc4 	addi	r2,r17,-1
20088fec:	9887883a 	add	r3,r19,r2
20088ff0:	0445c83a 	sub	r2,zero,r17
20088ff4:	1884703a 	and	r2,r3,r2
20088ff8:	10bffe04 	addi	r2,r2,-8
20088ffc:	1409c83a 	sub	r4,r2,r16
20089000:	014003c4 	movi	r5,15
20089004:	8007883a 	mov	r3,r16
20089008:	2900330e 	bge	r5,r4,200890d8 <_memalign_r+0x178>
2008900c:	1021883a 	mov	r16,r2
20089010:	993fff17 	ldw	r4,-4(r19)
20089014:	00bfff04 	movi	r2,-4
20089018:	80c7c83a 	sub	r3,r16,r3
2008901c:	2084703a 	and	r2,r4,r2
20089020:	10c5c83a 	sub	r2,r2,r3
20089024:	11000054 	ori	r4,r2,1
20089028:	81000115 	stw	r4,4(r16)
2008902c:	8085883a 	add	r2,r16,r2
20089030:	11800117 	ldw	r6,4(r2)
20089034:	a009883a 	mov	r4,r20
20089038:	980b883a 	mov	r5,r19
2008903c:	31800054 	ori	r6,r6,1
20089040:	11800115 	stw	r6,4(r2)
20089044:	98bfff17 	ldw	r2,-4(r19)
20089048:	1080004c 	andi	r2,r2,1
2008904c:	1884b03a 	or	r2,r3,r2
20089050:	98bfff15 	stw	r2,-4(r19)
20089054:	00902600 	call	20090260 <_free_r>
20089058:	80c00117 	ldw	r3,4(r16)
2008905c:	00bfff04 	movi	r2,-4
20089060:	1884703a 	and	r2,r3,r2
20089064:	1485c83a 	sub	r2,r2,r18
20089068:	00c003c4 	movi	r3,15
2008906c:	18801c16 	blt	r3,r2,200890e0 <_memalign_r+0x180>
20089070:	a009883a 	mov	r4,r20
20089074:	009735c0 	call	2009735c <__malloc_unlock>
20089078:	80800204 	addi	r2,r16,8
2008907c:	dfc00517 	ldw	ra,20(sp)
20089080:	dd000417 	ldw	r20,16(sp)
20089084:	dcc00317 	ldw	r19,12(sp)
20089088:	dc800217 	ldw	r18,8(sp)
2008908c:	dc400117 	ldw	r17,4(sp)
20089090:	dc000017 	ldw	r16,0(sp)
20089094:	dec00604 	addi	sp,sp,24
20089098:	f800283a 	ret
2008909c:	04800404 	movi	r18,16
200890a0:	91bfc42e 	bgeu	r18,r6,20088fb4 <__flash_rwdata_start+0xfffece30>
200890a4:	00800304 	movi	r2,12
200890a8:	a0800015 	stw	r2,0(r20)
200890ac:	0005883a 	mov	r2,zero
200890b0:	003ff206 	br	2008907c <__flash_rwdata_start+0xfffecef8>
200890b4:	300b883a 	mov	r5,r6
200890b8:	dfc00517 	ldw	ra,20(sp)
200890bc:	dd000417 	ldw	r20,16(sp)
200890c0:	dcc00317 	ldw	r19,12(sp)
200890c4:	dc800217 	ldw	r18,8(sp)
200890c8:	dc400117 	ldw	r17,4(sp)
200890cc:	dc000017 	ldw	r16,0(sp)
200890d0:	dec00604 	addi	sp,sp,24
200890d4:	008913c1 	jmpi	2008913c <_malloc_r>
200890d8:	1461883a 	add	r16,r2,r17
200890dc:	003fcc06 	br	20089010 <__flash_rwdata_start+0xfffece8c>
200890e0:	848b883a 	add	r5,r16,r18
200890e4:	10800054 	ori	r2,r2,1
200890e8:	28800115 	stw	r2,4(r5)
200890ec:	80800117 	ldw	r2,4(r16)
200890f0:	a009883a 	mov	r4,r20
200890f4:	29400204 	addi	r5,r5,8
200890f8:	1080004c 	andi	r2,r2,1
200890fc:	90a4b03a 	or	r18,r18,r2
20089100:	84800115 	stw	r18,4(r16)
20089104:	00902600 	call	20090260 <_free_r>
20089108:	003fd906 	br	20089070 <__flash_rwdata_start+0xfffeceec>
2008910c:	0005883a 	mov	r2,zero
20089110:	003fda06 	br	2008907c <__flash_rwdata_start+0xfffecef8>

20089114 <malloc>:
20089114:	00800034 	movhi	r2,0
20089118:	1088e004 	addi	r2,r2,9088
2008911c:	200b883a 	mov	r5,r4
20089120:	11000017 	ldw	r4,0(r2)
20089124:	008913c1 	jmpi	2008913c <_malloc_r>

20089128 <free>:
20089128:	00800034 	movhi	r2,0
2008912c:	1088e004 	addi	r2,r2,9088
20089130:	200b883a 	mov	r5,r4
20089134:	11000017 	ldw	r4,0(r2)
20089138:	00902601 	jmpi	20090260 <_free_r>

2008913c <_malloc_r>:
2008913c:	defff504 	addi	sp,sp,-44
20089140:	dc800315 	stw	r18,12(sp)
20089144:	dfc00a15 	stw	ra,40(sp)
20089148:	df000915 	stw	fp,36(sp)
2008914c:	ddc00815 	stw	r23,32(sp)
20089150:	dd800715 	stw	r22,28(sp)
20089154:	dd400615 	stw	r21,24(sp)
20089158:	dd000515 	stw	r20,20(sp)
2008915c:	dcc00415 	stw	r19,16(sp)
20089160:	dc400215 	stw	r17,8(sp)
20089164:	dc000115 	stw	r16,4(sp)
20089168:	288002c4 	addi	r2,r5,11
2008916c:	00c00584 	movi	r3,22
20089170:	2025883a 	mov	r18,r4
20089174:	18802a2e 	bgeu	r3,r2,20089220 <_malloc_r+0xe4>
20089178:	047ffe04 	movi	r17,-8
2008917c:	1462703a 	and	r17,r2,r17
20089180:	88009e16 	blt	r17,zero,200893fc <_malloc_r+0x2c0>
20089184:	89409d36 	bltu	r17,r5,200893fc <_malloc_r+0x2c0>
20089188:	009733c0 	call	2009733c <__malloc_lock>
2008918c:	00807dc4 	movi	r2,503
20089190:	14402736 	bltu	r2,r17,20089230 <_malloc_r+0xf4>
20089194:	8806d0fa 	srli	r3,r17,3
20089198:	04c00034 	movhi	r19,0
2008919c:	9cc21a04 	addi	r19,r19,2152
200891a0:	18c5883a 	add	r2,r3,r3
200891a4:	1085883a 	add	r2,r2,r2
200891a8:	1085883a 	add	r2,r2,r2
200891ac:	9885883a 	add	r2,r19,r2
200891b0:	14000317 	ldw	r16,12(r2)
200891b4:	80814a26 	beq	r16,r2,200896e0 <_malloc_r+0x5a4>
200891b8:	80c00117 	ldw	r3,4(r16)
200891bc:	81000317 	ldw	r4,12(r16)
200891c0:	00bfff04 	movi	r2,-4
200891c4:	1884703a 	and	r2,r3,r2
200891c8:	81400217 	ldw	r5,8(r16)
200891cc:	8085883a 	add	r2,r16,r2
200891d0:	10c00117 	ldw	r3,4(r2)
200891d4:	29000315 	stw	r4,12(r5)
200891d8:	21400215 	stw	r5,8(r4)
200891dc:	18c00054 	ori	r3,r3,1
200891e0:	10c00115 	stw	r3,4(r2)
200891e4:	9009883a 	mov	r4,r18
200891e8:	009735c0 	call	2009735c <__malloc_unlock>
200891ec:	80800204 	addi	r2,r16,8
200891f0:	dfc00a17 	ldw	ra,40(sp)
200891f4:	df000917 	ldw	fp,36(sp)
200891f8:	ddc00817 	ldw	r23,32(sp)
200891fc:	dd800717 	ldw	r22,28(sp)
20089200:	dd400617 	ldw	r21,24(sp)
20089204:	dd000517 	ldw	r20,20(sp)
20089208:	dcc00417 	ldw	r19,16(sp)
2008920c:	dc800317 	ldw	r18,12(sp)
20089210:	dc400217 	ldw	r17,8(sp)
20089214:	dc000117 	ldw	r16,4(sp)
20089218:	dec00b04 	addi	sp,sp,44
2008921c:	f800283a 	ret
20089220:	04400404 	movi	r17,16
20089224:	89407536 	bltu	r17,r5,200893fc <_malloc_r+0x2c0>
20089228:	009733c0 	call	2009733c <__malloc_lock>
2008922c:	003fd906 	br	20089194 <__flash_rwdata_start+0xfffed010>
20089230:	8806d27a 	srli	r3,r17,9
20089234:	18007526 	beq	r3,zero,2008940c <_malloc_r+0x2d0>
20089238:	00800104 	movi	r2,4
2008923c:	10c0ef36 	bltu	r2,r3,200895fc <_malloc_r+0x4c0>
20089240:	8806d1ba 	srli	r3,r17,6
20089244:	19c00e04 	addi	r7,r3,56
20089248:	39cb883a 	add	r5,r7,r7
2008924c:	04c00034 	movhi	r19,0
20089250:	294b883a 	add	r5,r5,r5
20089254:	9cc21a04 	addi	r19,r19,2152
20089258:	294b883a 	add	r5,r5,r5
2008925c:	994b883a 	add	r5,r19,r5
20089260:	2c000317 	ldw	r16,12(r5)
20089264:	2c000e26 	beq	r5,r16,200892a0 <_malloc_r+0x164>
20089268:	80800117 	ldw	r2,4(r16)
2008926c:	01bfff04 	movi	r6,-4
20089270:	010003c4 	movi	r4,15
20089274:	1184703a 	and	r2,r2,r6
20089278:	1447c83a 	sub	r3,r2,r17
2008927c:	20c00716 	blt	r4,r3,2008929c <_malloc_r+0x160>
20089280:	1800650e 	bge	r3,zero,20089418 <_malloc_r+0x2dc>
20089284:	84000317 	ldw	r16,12(r16)
20089288:	2c000526 	beq	r5,r16,200892a0 <_malloc_r+0x164>
2008928c:	80800117 	ldw	r2,4(r16)
20089290:	1184703a 	and	r2,r2,r6
20089294:	1447c83a 	sub	r3,r2,r17
20089298:	20fff90e 	bge	r4,r3,20089280 <__flash_rwdata_start+0xfffed0fc>
2008929c:	39ffffc4 	addi	r7,r7,-1
200892a0:	38c00044 	addi	r3,r7,1
200892a4:	01800034 	movhi	r6,0
200892a8:	9c000417 	ldw	r16,16(r19)
200892ac:	31821a04 	addi	r6,r6,2152
200892b0:	32400204 	addi	r9,r6,8
200892b4:	82410326 	beq	r16,r9,200896c4 <_malloc_r+0x588>
200892b8:	81000117 	ldw	r4,4(r16)
200892bc:	00bfff04 	movi	r2,-4
200892c0:	208e703a 	and	r7,r4,r2
200892c4:	3c45c83a 	sub	r2,r7,r17
200892c8:	010003c4 	movi	r4,15
200892cc:	2080ee16 	blt	r4,r2,20089688 <_malloc_r+0x54c>
200892d0:	32400515 	stw	r9,20(r6)
200892d4:	32400415 	stw	r9,16(r6)
200892d8:	1000510e 	bge	r2,zero,20089420 <_malloc_r+0x2e4>
200892dc:	00807fc4 	movi	r2,511
200892e0:	11c0ce36 	bltu	r2,r7,2008961c <_malloc_r+0x4e0>
200892e4:	3808d0fa 	srli	r4,r7,3
200892e8:	01c00044 	movi	r7,1
200892ec:	30800117 	ldw	r2,4(r6)
200892f0:	210b883a 	add	r5,r4,r4
200892f4:	294b883a 	add	r5,r5,r5
200892f8:	2009d0ba 	srai	r4,r4,2
200892fc:	294b883a 	add	r5,r5,r5
20089300:	298b883a 	add	r5,r5,r6
20089304:	2a000217 	ldw	r8,8(r5)
20089308:	3908983a 	sll	r4,r7,r4
2008930c:	81400315 	stw	r5,12(r16)
20089310:	82000215 	stw	r8,8(r16)
20089314:	2088b03a 	or	r4,r4,r2
20089318:	2c000215 	stw	r16,8(r5)
2008931c:	31000115 	stw	r4,4(r6)
20089320:	44000315 	stw	r16,12(r8)
20089324:	1805d0ba 	srai	r2,r3,2
20089328:	01400044 	movi	r5,1
2008932c:	288a983a 	sll	r5,r5,r2
20089330:	21404336 	bltu	r4,r5,20089440 <_malloc_r+0x304>
20089334:	2144703a 	and	r2,r4,r5
20089338:	10000a1e 	bne	r2,zero,20089364 <_malloc_r+0x228>
2008933c:	00bfff04 	movi	r2,-4
20089340:	294b883a 	add	r5,r5,r5
20089344:	1886703a 	and	r3,r3,r2
20089348:	2144703a 	and	r2,r4,r5
2008934c:	18c00104 	addi	r3,r3,4
20089350:	1000041e 	bne	r2,zero,20089364 <_malloc_r+0x228>
20089354:	294b883a 	add	r5,r5,r5
20089358:	2144703a 	and	r2,r4,r5
2008935c:	18c00104 	addi	r3,r3,4
20089360:	103ffc26 	beq	r2,zero,20089354 <__flash_rwdata_start+0xfffed1d0>
20089364:	023fff04 	movi	r8,-4
20089368:	01c003c4 	movi	r7,15
2008936c:	18c5883a 	add	r2,r3,r3
20089370:	1085883a 	add	r2,r2,r2
20089374:	1085883a 	add	r2,r2,r2
20089378:	9895883a 	add	r10,r19,r2
2008937c:	52c00304 	addi	r11,r10,12
20089380:	1819883a 	mov	r12,r3
20089384:	5c000017 	ldw	r16,0(r11)
20089388:	59bffd04 	addi	r6,r11,-12
2008938c:	8180041e 	bne	r16,r6,200893a0 <_malloc_r+0x264>
20089390:	0000ce06 	br	200896cc <_malloc_r+0x590>
20089394:	2000d70e 	bge	r4,zero,200896f4 <_malloc_r+0x5b8>
20089398:	84000317 	ldw	r16,12(r16)
2008939c:	8180cb26 	beq	r16,r6,200896cc <_malloc_r+0x590>
200893a0:	80800117 	ldw	r2,4(r16)
200893a4:	1204703a 	and	r2,r2,r8
200893a8:	1449c83a 	sub	r4,r2,r17
200893ac:	393ff90e 	bge	r7,r4,20089394 <__flash_rwdata_start+0xfffed210>
200893b0:	80800317 	ldw	r2,12(r16)
200893b4:	80c00217 	ldw	r3,8(r16)
200893b8:	89400054 	ori	r5,r17,1
200893bc:	81400115 	stw	r5,4(r16)
200893c0:	18800315 	stw	r2,12(r3)
200893c4:	10c00215 	stw	r3,8(r2)
200893c8:	8463883a 	add	r17,r16,r17
200893cc:	9c400515 	stw	r17,20(r19)
200893d0:	9c400415 	stw	r17,16(r19)
200893d4:	20800054 	ori	r2,r4,1
200893d8:	88800115 	stw	r2,4(r17)
200893dc:	8a400315 	stw	r9,12(r17)
200893e0:	8a400215 	stw	r9,8(r17)
200893e4:	8923883a 	add	r17,r17,r4
200893e8:	89000015 	stw	r4,0(r17)
200893ec:	9009883a 	mov	r4,r18
200893f0:	009735c0 	call	2009735c <__malloc_unlock>
200893f4:	80800204 	addi	r2,r16,8
200893f8:	003f7d06 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
200893fc:	00800304 	movi	r2,12
20089400:	90800015 	stw	r2,0(r18)
20089404:	0005883a 	mov	r2,zero
20089408:	003f7906 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
2008940c:	01401f84 	movi	r5,126
20089410:	01c00fc4 	movi	r7,63
20089414:	003f8d06 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
20089418:	81000317 	ldw	r4,12(r16)
2008941c:	003f6a06 	br	200891c8 <__flash_rwdata_start+0xfffed044>
20089420:	81c5883a 	add	r2,r16,r7
20089424:	10c00117 	ldw	r3,4(r2)
20089428:	9009883a 	mov	r4,r18
2008942c:	18c00054 	ori	r3,r3,1
20089430:	10c00115 	stw	r3,4(r2)
20089434:	009735c0 	call	2009735c <__malloc_unlock>
20089438:	80800204 	addi	r2,r16,8
2008943c:	003f6c06 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
20089440:	9c000217 	ldw	r16,8(r19)
20089444:	00bfff04 	movi	r2,-4
20089448:	85800117 	ldw	r22,4(r16)
2008944c:	b0ac703a 	and	r22,r22,r2
20089450:	b4400336 	bltu	r22,r17,20089460 <_malloc_r+0x324>
20089454:	b445c83a 	sub	r2,r22,r17
20089458:	00c003c4 	movi	r3,15
2008945c:	18805d16 	blt	r3,r2,200895d4 <_malloc_r+0x498>
20089460:	05c00034 	movhi	r23,0
20089464:	00800034 	movhi	r2,0
20089468:	bdc8dd04 	addi	r23,r23,9076
2008946c:	1088f404 	addi	r2,r2,9168
20089470:	15400017 	ldw	r21,0(r2)
20089474:	b9000017 	ldw	r4,0(r23)
20089478:	00ffffc4 	movi	r3,-1
2008947c:	858d883a 	add	r6,r16,r22
20089480:	8d6b883a 	add	r21,r17,r21
20089484:	20c0e426 	beq	r4,r3,20089818 <_malloc_r+0x6dc>
20089488:	ad4403c4 	addi	r21,r21,4111
2008948c:	00fc0004 	movi	r3,-4096
20089490:	a8ea703a 	and	r21,r21,r3
20089494:	9009883a 	mov	r4,r18
20089498:	a80b883a 	mov	r5,r21
2008949c:	d9800015 	stw	r6,0(sp)
200894a0:	0089ce00 	call	20089ce0 <_sbrk_r>
200894a4:	00ffffc4 	movi	r3,-1
200894a8:	1029883a 	mov	r20,r2
200894ac:	d9800017 	ldw	r6,0(sp)
200894b0:	10c0a426 	beq	r2,r3,20089744 <_malloc_r+0x608>
200894b4:	1180a236 	bltu	r2,r6,20089740 <_malloc_r+0x604>
200894b8:	07000034 	movhi	fp,0
200894bc:	e70a6204 	addi	fp,fp,10632
200894c0:	e0c00017 	ldw	r3,0(fp)
200894c4:	a8c7883a 	add	r3,r21,r3
200894c8:	e0c00015 	stw	r3,0(fp)
200894cc:	3500da26 	beq	r6,r20,20089838 <_malloc_r+0x6fc>
200894d0:	b9000017 	ldw	r4,0(r23)
200894d4:	00bfffc4 	movi	r2,-1
200894d8:	2080e426 	beq	r4,r2,2008986c <_malloc_r+0x730>
200894dc:	a185c83a 	sub	r2,r20,r6
200894e0:	1885883a 	add	r2,r3,r2
200894e4:	e0800015 	stw	r2,0(fp)
200894e8:	a0c001cc 	andi	r3,r20,7
200894ec:	1800b526 	beq	r3,zero,200897c4 <_malloc_r+0x688>
200894f0:	a0e9c83a 	sub	r20,r20,r3
200894f4:	00840204 	movi	r2,4104
200894f8:	a5000204 	addi	r20,r20,8
200894fc:	10c7c83a 	sub	r3,r2,r3
20089500:	a545883a 	add	r2,r20,r21
20089504:	1083ffcc 	andi	r2,r2,4095
20089508:	18abc83a 	sub	r21,r3,r2
2008950c:	9009883a 	mov	r4,r18
20089510:	a80b883a 	mov	r5,r21
20089514:	0089ce00 	call	20089ce0 <_sbrk_r>
20089518:	00ffffc4 	movi	r3,-1
2008951c:	10c0d026 	beq	r2,r3,20089860 <_malloc_r+0x724>
20089520:	1507c83a 	sub	r3,r2,r20
20089524:	a8c7883a 	add	r3,r21,r3
20089528:	18c00054 	ori	r3,r3,1
2008952c:	e0800017 	ldw	r2,0(fp)
20089530:	9d000215 	stw	r20,8(r19)
20089534:	a0c00115 	stw	r3,4(r20)
20089538:	a887883a 	add	r3,r21,r2
2008953c:	e0c00015 	stw	r3,0(fp)
20089540:	84c00e26 	beq	r16,r19,2008957c <_malloc_r+0x440>
20089544:	018003c4 	movi	r6,15
20089548:	3580a02e 	bgeu	r6,r22,200897cc <_malloc_r+0x690>
2008954c:	81400117 	ldw	r5,4(r16)
20089550:	013ffe04 	movi	r4,-8
20089554:	b0bffd04 	addi	r2,r22,-12
20089558:	1104703a 	and	r2,r2,r4
2008955c:	2900004c 	andi	r4,r5,1
20089560:	1108b03a 	or	r4,r2,r4
20089564:	81000115 	stw	r4,4(r16)
20089568:	01400144 	movi	r5,5
2008956c:	8089883a 	add	r4,r16,r2
20089570:	21400115 	stw	r5,4(r4)
20089574:	21400215 	stw	r5,8(r4)
20089578:	3080c036 	bltu	r6,r2,2008987c <_malloc_r+0x740>
2008957c:	00800034 	movhi	r2,0
20089580:	1088f304 	addi	r2,r2,9164
20089584:	11000017 	ldw	r4,0(r2)
20089588:	20c0012e 	bgeu	r4,r3,20089590 <_malloc_r+0x454>
2008958c:	10c00015 	stw	r3,0(r2)
20089590:	00800034 	movhi	r2,0
20089594:	1088f204 	addi	r2,r2,9160
20089598:	11000017 	ldw	r4,0(r2)
2008959c:	9c000217 	ldw	r16,8(r19)
200895a0:	20c0012e 	bgeu	r4,r3,200895a8 <_malloc_r+0x46c>
200895a4:	10c00015 	stw	r3,0(r2)
200895a8:	80c00117 	ldw	r3,4(r16)
200895ac:	00bfff04 	movi	r2,-4
200895b0:	1886703a 	and	r3,r3,r2
200895b4:	1c45c83a 	sub	r2,r3,r17
200895b8:	1c400236 	bltu	r3,r17,200895c4 <_malloc_r+0x488>
200895bc:	00c003c4 	movi	r3,15
200895c0:	18800416 	blt	r3,r2,200895d4 <_malloc_r+0x498>
200895c4:	9009883a 	mov	r4,r18
200895c8:	009735c0 	call	2009735c <__malloc_unlock>
200895cc:	0005883a 	mov	r2,zero
200895d0:	003f0706 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
200895d4:	88c00054 	ori	r3,r17,1
200895d8:	80c00115 	stw	r3,4(r16)
200895dc:	8463883a 	add	r17,r16,r17
200895e0:	10800054 	ori	r2,r2,1
200895e4:	9c400215 	stw	r17,8(r19)
200895e8:	88800115 	stw	r2,4(r17)
200895ec:	9009883a 	mov	r4,r18
200895f0:	009735c0 	call	2009735c <__malloc_unlock>
200895f4:	80800204 	addi	r2,r16,8
200895f8:	003efd06 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
200895fc:	00800504 	movi	r2,20
20089600:	10c0482e 	bgeu	r2,r3,20089724 <_malloc_r+0x5e8>
20089604:	00801504 	movi	r2,84
20089608:	10c06836 	bltu	r2,r3,200897ac <_malloc_r+0x670>
2008960c:	8806d33a 	srli	r3,r17,12
20089610:	19c01b84 	addi	r7,r3,110
20089614:	39cb883a 	add	r5,r7,r7
20089618:	003f0c06 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
2008961c:	3804d27a 	srli	r2,r7,9
20089620:	01000104 	movi	r4,4
20089624:	2080422e 	bgeu	r4,r2,20089730 <_malloc_r+0x5f4>
20089628:	01000504 	movi	r4,20
2008962c:	20807c36 	bltu	r4,r2,20089820 <_malloc_r+0x6e4>
20089630:	110016c4 	addi	r4,r2,91
20089634:	210b883a 	add	r5,r4,r4
20089638:	294b883a 	add	r5,r5,r5
2008963c:	294b883a 	add	r5,r5,r5
20089640:	994b883a 	add	r5,r19,r5
20089644:	28800217 	ldw	r2,8(r5)
20089648:	02000034 	movhi	r8,0
2008964c:	42021a04 	addi	r8,r8,2152
20089650:	11406326 	beq	r2,r5,200897e0 <_malloc_r+0x6a4>
20089654:	01bfff04 	movi	r6,-4
20089658:	11000117 	ldw	r4,4(r2)
2008965c:	2188703a 	and	r4,r4,r6
20089660:	3900022e 	bgeu	r7,r4,2008966c <_malloc_r+0x530>
20089664:	10800217 	ldw	r2,8(r2)
20089668:	28bffb1e 	bne	r5,r2,20089658 <__flash_rwdata_start+0xfffed4d4>
2008966c:	11800317 	ldw	r6,12(r2)
20089670:	99000117 	ldw	r4,4(r19)
20089674:	81800315 	stw	r6,12(r16)
20089678:	80800215 	stw	r2,8(r16)
2008967c:	34000215 	stw	r16,8(r6)
20089680:	14000315 	stw	r16,12(r2)
20089684:	003f2706 	br	20089324 <__flash_rwdata_start+0xfffed1a0>
20089688:	88c00054 	ori	r3,r17,1
2008968c:	80c00115 	stw	r3,4(r16)
20089690:	8463883a 	add	r17,r16,r17
20089694:	34400515 	stw	r17,20(r6)
20089698:	34400415 	stw	r17,16(r6)
2008969c:	10c00054 	ori	r3,r2,1
200896a0:	8a400315 	stw	r9,12(r17)
200896a4:	8a400215 	stw	r9,8(r17)
200896a8:	88c00115 	stw	r3,4(r17)
200896ac:	88a3883a 	add	r17,r17,r2
200896b0:	88800015 	stw	r2,0(r17)
200896b4:	9009883a 	mov	r4,r18
200896b8:	009735c0 	call	2009735c <__malloc_unlock>
200896bc:	80800204 	addi	r2,r16,8
200896c0:	003ecb06 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
200896c4:	31000117 	ldw	r4,4(r6)
200896c8:	003f1606 	br	20089324 <__flash_rwdata_start+0xfffed1a0>
200896cc:	63000044 	addi	r12,r12,1
200896d0:	608000cc 	andi	r2,r12,3
200896d4:	5ac00204 	addi	r11,r11,8
200896d8:	103f2a1e 	bne	r2,zero,20089384 <__flash_rwdata_start+0xfffed200>
200896dc:	00002106 	br	20089764 <_malloc_r+0x628>
200896e0:	80800204 	addi	r2,r16,8
200896e4:	84000517 	ldw	r16,20(r16)
200896e8:	143eb31e 	bne	r2,r16,200891b8 <__flash_rwdata_start+0xfffed034>
200896ec:	18c00084 	addi	r3,r3,2
200896f0:	003eec06 	br	200892a4 <__flash_rwdata_start+0xfffed120>
200896f4:	8085883a 	add	r2,r16,r2
200896f8:	10c00117 	ldw	r3,4(r2)
200896fc:	81000317 	ldw	r4,12(r16)
20089700:	81400217 	ldw	r5,8(r16)
20089704:	18c00054 	ori	r3,r3,1
20089708:	10c00115 	stw	r3,4(r2)
2008970c:	29000315 	stw	r4,12(r5)
20089710:	21400215 	stw	r5,8(r4)
20089714:	9009883a 	mov	r4,r18
20089718:	009735c0 	call	2009735c <__malloc_unlock>
2008971c:	80800204 	addi	r2,r16,8
20089720:	003eb306 	br	200891f0 <__flash_rwdata_start+0xfffed06c>
20089724:	19c016c4 	addi	r7,r3,91
20089728:	39cb883a 	add	r5,r7,r7
2008972c:	003ec706 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
20089730:	3804d1ba 	srli	r2,r7,6
20089734:	11000e04 	addi	r4,r2,56
20089738:	210b883a 	add	r5,r4,r4
2008973c:	003fbe06 	br	20089638 <__flash_rwdata_start+0xfffed4b4>
20089740:	84ff5d26 	beq	r16,r19,200894b8 <__flash_rwdata_start+0xfffed334>
20089744:	9c000217 	ldw	r16,8(r19)
20089748:	00bfff04 	movi	r2,-4
2008974c:	80c00117 	ldw	r3,4(r16)
20089750:	1886703a 	and	r3,r3,r2
20089754:	003f9706 	br	200895b4 <__flash_rwdata_start+0xfffed430>
20089758:	52800017 	ldw	r10,0(r10)
2008975c:	18ffffc4 	addi	r3,r3,-1
20089760:	50805c1e 	bne	r10,r2,200898d4 <_malloc_r+0x798>
20089764:	190000cc 	andi	r4,r3,3
20089768:	50bffe04 	addi	r2,r10,-8
2008976c:	203ffa1e 	bne	r4,zero,20089758 <__flash_rwdata_start+0xfffed5d4>
20089770:	98800117 	ldw	r2,4(r19)
20089774:	0146303a 	nor	r3,zero,r5
20089778:	1884703a 	and	r2,r3,r2
2008977c:	98800115 	stw	r2,4(r19)
20089780:	294b883a 	add	r5,r5,r5
20089784:	117f2e36 	bltu	r2,r5,20089440 <__flash_rwdata_start+0xfffed2bc>
20089788:	283f2d26 	beq	r5,zero,20089440 <__flash_rwdata_start+0xfffed2bc>
2008978c:	1146703a 	and	r3,r2,r5
20089790:	1800521e 	bne	r3,zero,200898dc <_malloc_r+0x7a0>
20089794:	6007883a 	mov	r3,r12
20089798:	294b883a 	add	r5,r5,r5
2008979c:	1148703a 	and	r4,r2,r5
200897a0:	18c00104 	addi	r3,r3,4
200897a4:	203ffc26 	beq	r4,zero,20089798 <__flash_rwdata_start+0xfffed614>
200897a8:	003ef006 	br	2008936c <__flash_rwdata_start+0xfffed1e8>
200897ac:	00805504 	movi	r2,340
200897b0:	10c01336 	bltu	r2,r3,20089800 <_malloc_r+0x6c4>
200897b4:	8806d3fa 	srli	r3,r17,15
200897b8:	19c01dc4 	addi	r7,r3,119
200897bc:	39cb883a 	add	r5,r7,r7
200897c0:	003ea206 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
200897c4:	00c40004 	movi	r3,4096
200897c8:	003f4d06 	br	20089500 <__flash_rwdata_start+0xfffed37c>
200897cc:	00800044 	movi	r2,1
200897d0:	a0800115 	stw	r2,4(r20)
200897d4:	a021883a 	mov	r16,r20
200897d8:	0007883a 	mov	r3,zero
200897dc:	003f7506 	br	200895b4 <__flash_rwdata_start+0xfffed430>
200897e0:	200bd0ba 	srai	r5,r4,2
200897e4:	01800044 	movi	r6,1
200897e8:	41000117 	ldw	r4,4(r8)
200897ec:	314a983a 	sll	r5,r6,r5
200897f0:	100d883a 	mov	r6,r2
200897f4:	2908b03a 	or	r4,r5,r4
200897f8:	41000115 	stw	r4,4(r8)
200897fc:	003f9d06 	br	20089674 <__flash_rwdata_start+0xfffed4f0>
20089800:	00815504 	movi	r2,1364
20089804:	10c01336 	bltu	r2,r3,20089854 <_malloc_r+0x718>
20089808:	8806d4ba 	srli	r3,r17,18
2008980c:	19c01f04 	addi	r7,r3,124
20089810:	39cb883a 	add	r5,r7,r7
20089814:	003e8d06 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
20089818:	ad400404 	addi	r21,r21,16
2008981c:	003f1d06 	br	20089494 <__flash_rwdata_start+0xfffed310>
20089820:	01001504 	movi	r4,84
20089824:	20801c36 	bltu	r4,r2,20089898 <_malloc_r+0x75c>
20089828:	3804d33a 	srli	r2,r7,12
2008982c:	11001b84 	addi	r4,r2,110
20089830:	210b883a 	add	r5,r4,r4
20089834:	003f8006 	br	20089638 <__flash_rwdata_start+0xfffed4b4>
20089838:	3083ffcc 	andi	r2,r6,4095
2008983c:	103f241e 	bne	r2,zero,200894d0 <__flash_rwdata_start+0xfffed34c>
20089840:	99000217 	ldw	r4,8(r19)
20089844:	ad85883a 	add	r2,r21,r22
20089848:	10800054 	ori	r2,r2,1
2008984c:	20800115 	stw	r2,4(r4)
20089850:	003f4a06 	br	2008957c <__flash_rwdata_start+0xfffed3f8>
20089854:	01403f04 	movi	r5,252
20089858:	01c01f84 	movi	r7,126
2008985c:	003e7b06 	br	2008924c <__flash_rwdata_start+0xfffed0c8>
20089860:	00c00044 	movi	r3,1
20089864:	002b883a 	mov	r21,zero
20089868:	003f3006 	br	2008952c <__flash_rwdata_start+0xfffed3a8>
2008986c:	00800034 	movhi	r2,0
20089870:	1088dd04 	addi	r2,r2,9076
20089874:	15000015 	stw	r20,0(r2)
20089878:	003f1b06 	br	200894e8 <__flash_rwdata_start+0xfffed364>
2008987c:	9009883a 	mov	r4,r18
20089880:	81400204 	addi	r5,r16,8
20089884:	00902600 	call	20090260 <_free_r>
20089888:	00800034 	movhi	r2,0
2008988c:	108a6204 	addi	r2,r2,10632
20089890:	10c00017 	ldw	r3,0(r2)
20089894:	003f3906 	br	2008957c <__flash_rwdata_start+0xfffed3f8>
20089898:	01005504 	movi	r4,340
2008989c:	20800436 	bltu	r4,r2,200898b0 <_malloc_r+0x774>
200898a0:	3804d3fa 	srli	r2,r7,15
200898a4:	11001dc4 	addi	r4,r2,119
200898a8:	210b883a 	add	r5,r4,r4
200898ac:	003f6206 	br	20089638 <__flash_rwdata_start+0xfffed4b4>
200898b0:	01015504 	movi	r4,1364
200898b4:	20800436 	bltu	r4,r2,200898c8 <_malloc_r+0x78c>
200898b8:	3804d4ba 	srli	r2,r7,18
200898bc:	11001f04 	addi	r4,r2,124
200898c0:	210b883a 	add	r5,r4,r4
200898c4:	003f5c06 	br	20089638 <__flash_rwdata_start+0xfffed4b4>
200898c8:	01403f04 	movi	r5,252
200898cc:	01001f84 	movi	r4,126
200898d0:	003f5906 	br	20089638 <__flash_rwdata_start+0xfffed4b4>
200898d4:	98800117 	ldw	r2,4(r19)
200898d8:	003fa906 	br	20089780 <__flash_rwdata_start+0xfffed5fc>
200898dc:	6007883a 	mov	r3,r12
200898e0:	003ea206 	br	2008936c <__flash_rwdata_start+0xfffed1e8>

200898e4 <memcmp>:
200898e4:	01c000c4 	movi	r7,3
200898e8:	3980192e 	bgeu	r7,r6,20089950 <memcmp+0x6c>
200898ec:	2144b03a 	or	r2,r4,r5
200898f0:	11c4703a 	and	r2,r2,r7
200898f4:	10000f26 	beq	r2,zero,20089934 <memcmp+0x50>
200898f8:	20800003 	ldbu	r2,0(r4)
200898fc:	28c00003 	ldbu	r3,0(r5)
20089900:	10c0151e 	bne	r2,r3,20089958 <memcmp+0x74>
20089904:	31bfff84 	addi	r6,r6,-2
20089908:	01ffffc4 	movi	r7,-1
2008990c:	00000406 	br	20089920 <memcmp+0x3c>
20089910:	20800003 	ldbu	r2,0(r4)
20089914:	28c00003 	ldbu	r3,0(r5)
20089918:	31bfffc4 	addi	r6,r6,-1
2008991c:	10c00e1e 	bne	r2,r3,20089958 <memcmp+0x74>
20089920:	21000044 	addi	r4,r4,1
20089924:	29400044 	addi	r5,r5,1
20089928:	31fff91e 	bne	r6,r7,20089910 <__flash_rwdata_start+0xfffed78c>
2008992c:	0005883a 	mov	r2,zero
20089930:	f800283a 	ret
20089934:	20c00017 	ldw	r3,0(r4)
20089938:	28800017 	ldw	r2,0(r5)
2008993c:	1880041e 	bne	r3,r2,20089950 <memcmp+0x6c>
20089940:	31bfff04 	addi	r6,r6,-4
20089944:	21000104 	addi	r4,r4,4
20089948:	29400104 	addi	r5,r5,4
2008994c:	39bff936 	bltu	r7,r6,20089934 <__flash_rwdata_start+0xfffed7b0>
20089950:	303fe91e 	bne	r6,zero,200898f8 <__flash_rwdata_start+0xfffed774>
20089954:	003ff506 	br	2008992c <__flash_rwdata_start+0xfffed7a8>
20089958:	10c5c83a 	sub	r2,r2,r3
2008995c:	f800283a 	ret

20089960 <memcpy>:
20089960:	deffff04 	addi	sp,sp,-4
20089964:	dc000015 	stw	r16,0(sp)
20089968:	00c003c4 	movi	r3,15
2008996c:	2005883a 	mov	r2,r4
20089970:	1980432e 	bgeu	r3,r6,20089a80 <memcpy+0x120>
20089974:	2146b03a 	or	r3,r4,r5
20089978:	18c000cc 	andi	r3,r3,3
2008997c:	1800421e 	bne	r3,zero,20089a88 <memcpy+0x128>
20089980:	343ffc04 	addi	r16,r6,-16
20089984:	8020d13a 	srli	r16,r16,4
20089988:	28c00104 	addi	r3,r5,4
2008998c:	23400104 	addi	r13,r4,4
20089990:	801e913a 	slli	r15,r16,4
20089994:	2b000204 	addi	r12,r5,8
20089998:	22c00204 	addi	r11,r4,8
2008999c:	7bc00504 	addi	r15,r15,20
200899a0:	2a800304 	addi	r10,r5,12
200899a4:	22400304 	addi	r9,r4,12
200899a8:	2bdf883a 	add	r15,r5,r15
200899ac:	2811883a 	mov	r8,r5
200899b0:	200f883a 	mov	r7,r4
200899b4:	41000017 	ldw	r4,0(r8)
200899b8:	39c00404 	addi	r7,r7,16
200899bc:	18c00404 	addi	r3,r3,16
200899c0:	393ffc15 	stw	r4,-16(r7)
200899c4:	1bbffc17 	ldw	r14,-16(r3)
200899c8:	6b400404 	addi	r13,r13,16
200899cc:	5ac00404 	addi	r11,r11,16
200899d0:	6bbffc15 	stw	r14,-16(r13)
200899d4:	63800017 	ldw	r14,0(r12)
200899d8:	4a400404 	addi	r9,r9,16
200899dc:	42000404 	addi	r8,r8,16
200899e0:	5bbffc15 	stw	r14,-16(r11)
200899e4:	53800017 	ldw	r14,0(r10)
200899e8:	63000404 	addi	r12,r12,16
200899ec:	52800404 	addi	r10,r10,16
200899f0:	4bbffc15 	stw	r14,-16(r9)
200899f4:	1bffef1e 	bne	r3,r15,200899b4 <__flash_rwdata_start+0xfffed830>
200899f8:	81c00044 	addi	r7,r16,1
200899fc:	380e913a 	slli	r7,r7,4
20089a00:	310003cc 	andi	r4,r6,15
20089a04:	02c000c4 	movi	r11,3
20089a08:	11c7883a 	add	r3,r2,r7
20089a0c:	29cb883a 	add	r5,r5,r7
20089a10:	59001f2e 	bgeu	r11,r4,20089a90 <memcpy+0x130>
20089a14:	1813883a 	mov	r9,r3
20089a18:	2811883a 	mov	r8,r5
20089a1c:	200f883a 	mov	r7,r4
20089a20:	42800017 	ldw	r10,0(r8)
20089a24:	4a400104 	addi	r9,r9,4
20089a28:	39ffff04 	addi	r7,r7,-4
20089a2c:	4abfff15 	stw	r10,-4(r9)
20089a30:	42000104 	addi	r8,r8,4
20089a34:	59fffa36 	bltu	r11,r7,20089a20 <__flash_rwdata_start+0xfffed89c>
20089a38:	213fff04 	addi	r4,r4,-4
20089a3c:	2008d0ba 	srli	r4,r4,2
20089a40:	318000cc 	andi	r6,r6,3
20089a44:	21000044 	addi	r4,r4,1
20089a48:	2109883a 	add	r4,r4,r4
20089a4c:	2109883a 	add	r4,r4,r4
20089a50:	1907883a 	add	r3,r3,r4
20089a54:	290b883a 	add	r5,r5,r4
20089a58:	30000626 	beq	r6,zero,20089a74 <memcpy+0x114>
20089a5c:	198d883a 	add	r6,r3,r6
20089a60:	29c00003 	ldbu	r7,0(r5)
20089a64:	18c00044 	addi	r3,r3,1
20089a68:	29400044 	addi	r5,r5,1
20089a6c:	19ffffc5 	stb	r7,-1(r3)
20089a70:	19bffb1e 	bne	r3,r6,20089a60 <__flash_rwdata_start+0xfffed8dc>
20089a74:	dc000017 	ldw	r16,0(sp)
20089a78:	dec00104 	addi	sp,sp,4
20089a7c:	f800283a 	ret
20089a80:	2007883a 	mov	r3,r4
20089a84:	003ff406 	br	20089a58 <__flash_rwdata_start+0xfffed8d4>
20089a88:	2007883a 	mov	r3,r4
20089a8c:	003ff306 	br	20089a5c <__flash_rwdata_start+0xfffed8d8>
20089a90:	200d883a 	mov	r6,r4
20089a94:	003ff006 	br	20089a58 <__flash_rwdata_start+0xfffed8d4>

20089a98 <memset>:
20089a98:	20c000cc 	andi	r3,r4,3
20089a9c:	2005883a 	mov	r2,r4
20089aa0:	18004326 	beq	r3,zero,20089bb0 <memset+0x118>
20089aa4:	31ffffc4 	addi	r7,r6,-1
20089aa8:	30004026 	beq	r6,zero,20089bac <memset+0x114>
20089aac:	2813883a 	mov	r9,r5
20089ab0:	200d883a 	mov	r6,r4
20089ab4:	2007883a 	mov	r3,r4
20089ab8:	00000406 	br	20089acc <memset+0x34>
20089abc:	3a3fffc4 	addi	r8,r7,-1
20089ac0:	31800044 	addi	r6,r6,1
20089ac4:	38003926 	beq	r7,zero,20089bac <memset+0x114>
20089ac8:	400f883a 	mov	r7,r8
20089acc:	18c00044 	addi	r3,r3,1
20089ad0:	32400005 	stb	r9,0(r6)
20089ad4:	1a0000cc 	andi	r8,r3,3
20089ad8:	403ff81e 	bne	r8,zero,20089abc <__flash_rwdata_start+0xfffed938>
20089adc:	010000c4 	movi	r4,3
20089ae0:	21c02d2e 	bgeu	r4,r7,20089b98 <memset+0x100>
20089ae4:	29803fcc 	andi	r6,r5,255
20089ae8:	3008923a 	slli	r4,r6,8
20089aec:	218cb03a 	or	r6,r4,r6
20089af0:	3008943a 	slli	r4,r6,16
20089af4:	218cb03a 	or	r6,r4,r6
20089af8:	010003c4 	movi	r4,15
20089afc:	21c0182e 	bgeu	r4,r7,20089b60 <memset+0xc8>
20089b00:	3b3ffc04 	addi	r12,r7,-16
20089b04:	6018d13a 	srli	r12,r12,4
20089b08:	1a000104 	addi	r8,r3,4
20089b0c:	1ac00204 	addi	r11,r3,8
20089b10:	6008913a 	slli	r4,r12,4
20089b14:	1a800304 	addi	r10,r3,12
20089b18:	1813883a 	mov	r9,r3
20089b1c:	21000504 	addi	r4,r4,20
20089b20:	1909883a 	add	r4,r3,r4
20089b24:	49800015 	stw	r6,0(r9)
20089b28:	41800015 	stw	r6,0(r8)
20089b2c:	59800015 	stw	r6,0(r11)
20089b30:	51800015 	stw	r6,0(r10)
20089b34:	42000404 	addi	r8,r8,16
20089b38:	4a400404 	addi	r9,r9,16
20089b3c:	5ac00404 	addi	r11,r11,16
20089b40:	52800404 	addi	r10,r10,16
20089b44:	413ff71e 	bne	r8,r4,20089b24 <__flash_rwdata_start+0xfffed9a0>
20089b48:	63000044 	addi	r12,r12,1
20089b4c:	6018913a 	slli	r12,r12,4
20089b50:	39c003cc 	andi	r7,r7,15
20089b54:	010000c4 	movi	r4,3
20089b58:	1b07883a 	add	r3,r3,r12
20089b5c:	21c00e2e 	bgeu	r4,r7,20089b98 <memset+0x100>
20089b60:	1813883a 	mov	r9,r3
20089b64:	3811883a 	mov	r8,r7
20089b68:	010000c4 	movi	r4,3
20089b6c:	49800015 	stw	r6,0(r9)
20089b70:	423fff04 	addi	r8,r8,-4
20089b74:	4a400104 	addi	r9,r9,4
20089b78:	223ffc36 	bltu	r4,r8,20089b6c <__flash_rwdata_start+0xfffed9e8>
20089b7c:	393fff04 	addi	r4,r7,-4
20089b80:	2008d0ba 	srli	r4,r4,2
20089b84:	39c000cc 	andi	r7,r7,3
20089b88:	21000044 	addi	r4,r4,1
20089b8c:	2109883a 	add	r4,r4,r4
20089b90:	2109883a 	add	r4,r4,r4
20089b94:	1907883a 	add	r3,r3,r4
20089b98:	38000426 	beq	r7,zero,20089bac <memset+0x114>
20089b9c:	19cf883a 	add	r7,r3,r7
20089ba0:	19400005 	stb	r5,0(r3)
20089ba4:	18c00044 	addi	r3,r3,1
20089ba8:	19fffd1e 	bne	r3,r7,20089ba0 <__flash_rwdata_start+0xfffeda1c>
20089bac:	f800283a 	ret
20089bb0:	2007883a 	mov	r3,r4
20089bb4:	300f883a 	mov	r7,r6
20089bb8:	003fc806 	br	20089adc <__flash_rwdata_start+0xfffed958>

20089bbc <_printf_r>:
20089bbc:	defffd04 	addi	sp,sp,-12
20089bc0:	dfc00015 	stw	ra,0(sp)
20089bc4:	d9800115 	stw	r6,4(sp)
20089bc8:	d9c00215 	stw	r7,8(sp)
20089bcc:	280d883a 	mov	r6,r5
20089bd0:	21400217 	ldw	r5,8(r4)
20089bd4:	d9c00104 	addi	r7,sp,4
20089bd8:	008bf2c0 	call	2008bf2c <___vfprintf_internal_r>
20089bdc:	dfc00017 	ldw	ra,0(sp)
20089be0:	dec00304 	addi	sp,sp,12
20089be4:	f800283a 	ret

20089be8 <printf>:
20089be8:	defffc04 	addi	sp,sp,-16
20089bec:	dfc00015 	stw	ra,0(sp)
20089bf0:	d9400115 	stw	r5,4(sp)
20089bf4:	d9800215 	stw	r6,8(sp)
20089bf8:	d9c00315 	stw	r7,12(sp)
20089bfc:	00800034 	movhi	r2,0
20089c00:	1088e004 	addi	r2,r2,9088
20089c04:	10800017 	ldw	r2,0(r2)
20089c08:	200b883a 	mov	r5,r4
20089c0c:	d9800104 	addi	r6,sp,4
20089c10:	11000217 	ldw	r4,8(r2)
20089c14:	008de7c0 	call	2008de7c <__vfprintf_internal>
20089c18:	dfc00017 	ldw	ra,0(sp)
20089c1c:	dec00404 	addi	sp,sp,16
20089c20:	f800283a 	ret

20089c24 <_puts_r>:
20089c24:	defff604 	addi	sp,sp,-40
20089c28:	dc000715 	stw	r16,28(sp)
20089c2c:	2021883a 	mov	r16,r4
20089c30:	2809883a 	mov	r4,r5
20089c34:	dc400815 	stw	r17,32(sp)
20089c38:	dfc00915 	stw	ra,36(sp)
20089c3c:	2823883a 	mov	r17,r5
20089c40:	0089e9c0 	call	20089e9c <strlen>
20089c44:	81400217 	ldw	r5,8(r16)
20089c48:	11000044 	addi	r4,r2,1
20089c4c:	d8800115 	stw	r2,4(sp)
20089c50:	00800034 	movhi	r2,0
20089c54:	2980030b 	ldhu	r6,12(r5)
20089c58:	10810504 	addi	r2,r2,1044
20089c5c:	d8800215 	stw	r2,8(sp)
20089c60:	00800044 	movi	r2,1
20089c64:	d8800315 	stw	r2,12(sp)
20089c68:	00800084 	movi	r2,2
20089c6c:	d8800515 	stw	r2,20(sp)
20089c70:	dc400015 	stw	r17,0(sp)
20089c74:	d9000615 	stw	r4,24(sp)
20089c78:	dec00415 	stw	sp,16(sp)
20089c7c:	3088000c 	andi	r2,r6,8192
20089c80:	1000061e 	bne	r2,zero,20089c9c <_puts_r+0x78>
20089c84:	29001917 	ldw	r4,100(r5)
20089c88:	00b7ffc4 	movi	r2,-8193
20089c8c:	31880014 	ori	r6,r6,8192
20089c90:	2084703a 	and	r2,r4,r2
20089c94:	2980030d 	sth	r6,12(r5)
20089c98:	28801915 	stw	r2,100(r5)
20089c9c:	8009883a 	mov	r4,r16
20089ca0:	d9800404 	addi	r6,sp,16
20089ca4:	00905500 	call	20090550 <__sfvwrite_r>
20089ca8:	1000061e 	bne	r2,zero,20089cc4 <_puts_r+0xa0>
20089cac:	00800284 	movi	r2,10
20089cb0:	dfc00917 	ldw	ra,36(sp)
20089cb4:	dc400817 	ldw	r17,32(sp)
20089cb8:	dc000717 	ldw	r16,28(sp)
20089cbc:	dec00a04 	addi	sp,sp,40
20089cc0:	f800283a 	ret
20089cc4:	00bfffc4 	movi	r2,-1
20089cc8:	003ff906 	br	20089cb0 <__flash_rwdata_start+0xfffedb2c>

20089ccc <puts>:
20089ccc:	00800034 	movhi	r2,0
20089cd0:	1088e004 	addi	r2,r2,9088
20089cd4:	200b883a 	mov	r5,r4
20089cd8:	11000017 	ldw	r4,0(r2)
20089cdc:	0089c241 	jmpi	20089c24 <_puts_r>

20089ce0 <_sbrk_r>:
20089ce0:	defffd04 	addi	sp,sp,-12
20089ce4:	dc000015 	stw	r16,0(sp)
20089ce8:	04000034 	movhi	r16,0
20089cec:	dc400115 	stw	r17,4(sp)
20089cf0:	8408f504 	addi	r16,r16,9172
20089cf4:	2023883a 	mov	r17,r4
20089cf8:	2809883a 	mov	r4,r5
20089cfc:	dfc00215 	stw	ra,8(sp)
20089d00:	80000015 	stw	zero,0(r16)
20089d04:	00975280 	call	20097528 <sbrk>
20089d08:	00ffffc4 	movi	r3,-1
20089d0c:	10c00526 	beq	r2,r3,20089d24 <_sbrk_r+0x44>
20089d10:	dfc00217 	ldw	ra,8(sp)
20089d14:	dc400117 	ldw	r17,4(sp)
20089d18:	dc000017 	ldw	r16,0(sp)
20089d1c:	dec00304 	addi	sp,sp,12
20089d20:	f800283a 	ret
20089d24:	80c00017 	ldw	r3,0(r16)
20089d28:	183ff926 	beq	r3,zero,20089d10 <__flash_rwdata_start+0xfffedb8c>
20089d2c:	88c00015 	stw	r3,0(r17)
20089d30:	003ff706 	br	20089d10 <__flash_rwdata_start+0xfffedb8c>

20089d34 <_sprintf_r>:
20089d34:	deffe404 	addi	sp,sp,-112
20089d38:	2807883a 	mov	r3,r5
20089d3c:	dfc01a15 	stw	ra,104(sp)
20089d40:	d9c01b15 	stw	r7,108(sp)
20089d44:	00a00034 	movhi	r2,32768
20089d48:	10bfffc4 	addi	r2,r2,-1
20089d4c:	02008204 	movi	r8,520
20089d50:	d8800215 	stw	r2,8(sp)
20089d54:	d8800515 	stw	r2,20(sp)
20089d58:	d80b883a 	mov	r5,sp
20089d5c:	d9c01b04 	addi	r7,sp,108
20089d60:	00bfffc4 	movi	r2,-1
20089d64:	d8c00015 	stw	r3,0(sp)
20089d68:	d8c00415 	stw	r3,16(sp)
20089d6c:	da00030d 	sth	r8,12(sp)
20089d70:	d880038d 	sth	r2,14(sp)
20089d74:	0089f9c0 	call	20089f9c <___svfprintf_internal_r>
20089d78:	d8c00017 	ldw	r3,0(sp)
20089d7c:	18000005 	stb	zero,0(r3)
20089d80:	dfc01a17 	ldw	ra,104(sp)
20089d84:	dec01c04 	addi	sp,sp,112
20089d88:	f800283a 	ret

20089d8c <sprintf>:
20089d8c:	deffe304 	addi	sp,sp,-116
20089d90:	2007883a 	mov	r3,r4
20089d94:	dfc01a15 	stw	ra,104(sp)
20089d98:	d9801b15 	stw	r6,108(sp)
20089d9c:	d9c01c15 	stw	r7,112(sp)
20089da0:	01000034 	movhi	r4,0
20089da4:	2108e004 	addi	r4,r4,9088
20089da8:	21000017 	ldw	r4,0(r4)
20089dac:	00a00034 	movhi	r2,32768
20089db0:	10bfffc4 	addi	r2,r2,-1
20089db4:	280d883a 	mov	r6,r5
20089db8:	02008204 	movi	r8,520
20089dbc:	d8800215 	stw	r2,8(sp)
20089dc0:	d8800515 	stw	r2,20(sp)
20089dc4:	d80b883a 	mov	r5,sp
20089dc8:	d9c01b04 	addi	r7,sp,108
20089dcc:	00bfffc4 	movi	r2,-1
20089dd0:	d8c00015 	stw	r3,0(sp)
20089dd4:	d8c00415 	stw	r3,16(sp)
20089dd8:	da00030d 	sth	r8,12(sp)
20089ddc:	d880038d 	sth	r2,14(sp)
20089de0:	0089f9c0 	call	20089f9c <___svfprintf_internal_r>
20089de4:	d8c00017 	ldw	r3,0(sp)
20089de8:	18000005 	stb	zero,0(r3)
20089dec:	dfc01a17 	ldw	ra,104(sp)
20089df0:	dec01d04 	addi	sp,sp,116
20089df4:	f800283a 	ret

20089df8 <strcmp>:
20089df8:	2144b03a 	or	r2,r4,r5
20089dfc:	108000cc 	andi	r2,r2,3
20089e00:	1000171e 	bne	r2,zero,20089e60 <strcmp+0x68>
20089e04:	20800017 	ldw	r2,0(r4)
20089e08:	28c00017 	ldw	r3,0(r5)
20089e0c:	10c0141e 	bne	r2,r3,20089e60 <strcmp+0x68>
20089e10:	027fbff4 	movhi	r9,65279
20089e14:	4a7fbfc4 	addi	r9,r9,-257
20089e18:	0086303a 	nor	r3,zero,r2
20089e1c:	02202074 	movhi	r8,32897
20089e20:	1245883a 	add	r2,r2,r9
20089e24:	42202004 	addi	r8,r8,-32640
20089e28:	10c4703a 	and	r2,r2,r3
20089e2c:	1204703a 	and	r2,r2,r8
20089e30:	10000226 	beq	r2,zero,20089e3c <strcmp+0x44>
20089e34:	00001706 	br	20089e94 <strcmp+0x9c>
20089e38:	1000161e 	bne	r2,zero,20089e94 <strcmp+0x9c>
20089e3c:	21000104 	addi	r4,r4,4
20089e40:	20c00017 	ldw	r3,0(r4)
20089e44:	29400104 	addi	r5,r5,4
20089e48:	29800017 	ldw	r6,0(r5)
20089e4c:	1a4f883a 	add	r7,r3,r9
20089e50:	00c4303a 	nor	r2,zero,r3
20089e54:	3884703a 	and	r2,r7,r2
20089e58:	1204703a 	and	r2,r2,r8
20089e5c:	19bff626 	beq	r3,r6,20089e38 <__flash_rwdata_start+0xfffedcb4>
20089e60:	20800007 	ldb	r2,0(r4)
20089e64:	1000051e 	bne	r2,zero,20089e7c <strcmp+0x84>
20089e68:	00000606 	br	20089e84 <strcmp+0x8c>
20089e6c:	21000044 	addi	r4,r4,1
20089e70:	20800007 	ldb	r2,0(r4)
20089e74:	29400044 	addi	r5,r5,1
20089e78:	10000226 	beq	r2,zero,20089e84 <strcmp+0x8c>
20089e7c:	28c00007 	ldb	r3,0(r5)
20089e80:	10fffa26 	beq	r2,r3,20089e6c <__flash_rwdata_start+0xfffedce8>
20089e84:	20800003 	ldbu	r2,0(r4)
20089e88:	28c00003 	ldbu	r3,0(r5)
20089e8c:	10c5c83a 	sub	r2,r2,r3
20089e90:	f800283a 	ret
20089e94:	0005883a 	mov	r2,zero
20089e98:	f800283a 	ret

20089e9c <strlen>:
20089e9c:	208000cc 	andi	r2,r4,3
20089ea0:	10002026 	beq	r2,zero,20089f24 <strlen+0x88>
20089ea4:	20800007 	ldb	r2,0(r4)
20089ea8:	10002026 	beq	r2,zero,20089f2c <strlen+0x90>
20089eac:	2005883a 	mov	r2,r4
20089eb0:	00000206 	br	20089ebc <strlen+0x20>
20089eb4:	10c00007 	ldb	r3,0(r2)
20089eb8:	18001826 	beq	r3,zero,20089f1c <strlen+0x80>
20089ebc:	10800044 	addi	r2,r2,1
20089ec0:	10c000cc 	andi	r3,r2,3
20089ec4:	183ffb1e 	bne	r3,zero,20089eb4 <__flash_rwdata_start+0xfffedd30>
20089ec8:	10c00017 	ldw	r3,0(r2)
20089ecc:	01ffbff4 	movhi	r7,65279
20089ed0:	39ffbfc4 	addi	r7,r7,-257
20089ed4:	00ca303a 	nor	r5,zero,r3
20089ed8:	01a02074 	movhi	r6,32897
20089edc:	19c7883a 	add	r3,r3,r7
20089ee0:	31a02004 	addi	r6,r6,-32640
20089ee4:	1946703a 	and	r3,r3,r5
20089ee8:	1986703a 	and	r3,r3,r6
20089eec:	1800091e 	bne	r3,zero,20089f14 <strlen+0x78>
20089ef0:	10800104 	addi	r2,r2,4
20089ef4:	10c00017 	ldw	r3,0(r2)
20089ef8:	19cb883a 	add	r5,r3,r7
20089efc:	00c6303a 	nor	r3,zero,r3
20089f00:	28c6703a 	and	r3,r5,r3
20089f04:	1986703a 	and	r3,r3,r6
20089f08:	183ff926 	beq	r3,zero,20089ef0 <__flash_rwdata_start+0xfffedd6c>
20089f0c:	00000106 	br	20089f14 <strlen+0x78>
20089f10:	10800044 	addi	r2,r2,1
20089f14:	10c00007 	ldb	r3,0(r2)
20089f18:	183ffd1e 	bne	r3,zero,20089f10 <__flash_rwdata_start+0xfffedd8c>
20089f1c:	1105c83a 	sub	r2,r2,r4
20089f20:	f800283a 	ret
20089f24:	2005883a 	mov	r2,r4
20089f28:	003fe706 	br	20089ec8 <__flash_rwdata_start+0xfffedd44>
20089f2c:	0005883a 	mov	r2,zero
20089f30:	f800283a 	ret

20089f34 <strrchr>:
20089f34:	defffd04 	addi	sp,sp,-12
20089f38:	dc000015 	stw	r16,0(sp)
20089f3c:	dfc00215 	stw	ra,8(sp)
20089f40:	dc400115 	stw	r17,4(sp)
20089f44:	2821883a 	mov	r16,r5
20089f48:	28000f26 	beq	r5,zero,20089f88 <strrchr+0x54>
20089f4c:	2007883a 	mov	r3,r4
20089f50:	0023883a 	mov	r17,zero
20089f54:	00000206 	br	20089f60 <strrchr+0x2c>
20089f58:	10c00044 	addi	r3,r2,1
20089f5c:	1023883a 	mov	r17,r2
20089f60:	1809883a 	mov	r4,r3
20089f64:	800b883a 	mov	r5,r16
20089f68:	009272c0 	call	2009272c <strchr>
20089f6c:	103ffa1e 	bne	r2,zero,20089f58 <__flash_rwdata_start+0xfffeddd4>
20089f70:	8805883a 	mov	r2,r17
20089f74:	dfc00217 	ldw	ra,8(sp)
20089f78:	dc400117 	ldw	r17,4(sp)
20089f7c:	dc000017 	ldw	r16,0(sp)
20089f80:	dec00304 	addi	sp,sp,12
20089f84:	f800283a 	ret
20089f88:	dfc00217 	ldw	ra,8(sp)
20089f8c:	dc400117 	ldw	r17,4(sp)
20089f90:	dc000017 	ldw	r16,0(sp)
20089f94:	dec00304 	addi	sp,sp,12
20089f98:	009272c1 	jmpi	2009272c <strchr>

20089f9c <___svfprintf_internal_r>:
20089f9c:	deffb504 	addi	sp,sp,-300
20089fa0:	dfc04a15 	stw	ra,296(sp)
20089fa4:	ddc04815 	stw	r23,288(sp)
20089fa8:	d9002f15 	stw	r4,188(sp)
20089fac:	282f883a 	mov	r23,r5
20089fb0:	d9802915 	stw	r6,164(sp)
20089fb4:	d9c02d15 	stw	r7,180(sp)
20089fb8:	df004915 	stw	fp,292(sp)
20089fbc:	dd804715 	stw	r22,284(sp)
20089fc0:	dd404615 	stw	r21,280(sp)
20089fc4:	dd004515 	stw	r20,276(sp)
20089fc8:	dcc04415 	stw	r19,272(sp)
20089fcc:	dc804315 	stw	r18,268(sp)
20089fd0:	dc404215 	stw	r17,264(sp)
20089fd4:	dc004115 	stw	r16,260(sp)
20089fd8:	0090c440 	call	20090c44 <_localeconv_r>
20089fdc:	10800017 	ldw	r2,0(r2)
20089fe0:	1009883a 	mov	r4,r2
20089fe4:	d8803515 	stw	r2,212(sp)
20089fe8:	0089e9c0 	call	20089e9c <strlen>
20089fec:	d8803915 	stw	r2,228(sp)
20089ff0:	b880030b 	ldhu	r2,12(r23)
20089ff4:	1080200c 	andi	r2,r2,128
20089ff8:	10000226 	beq	r2,zero,2008a004 <___svfprintf_internal_r+0x68>
20089ffc:	b8800417 	ldw	r2,16(r23)
2008a000:	10065f26 	beq	r2,zero,2008b980 <___svfprintf_internal_r+0x19e4>
2008a004:	db001dc4 	addi	r12,sp,119
2008a008:	dd801e04 	addi	r22,sp,120
2008a00c:	d8800404 	addi	r2,sp,16
2008a010:	05000034 	movhi	r20,0
2008a014:	b317c83a 	sub	r11,r22,r12
2008a018:	a5011684 	addi	r20,r20,1114
2008a01c:	db002815 	stw	r12,160(sp)
2008a020:	d8801e15 	stw	r2,120(sp)
2008a024:	d8002015 	stw	zero,128(sp)
2008a028:	d8001f15 	stw	zero,124(sp)
2008a02c:	d8003315 	stw	zero,204(sp)
2008a030:	d8003715 	stw	zero,220(sp)
2008a034:	d8003815 	stw	zero,224(sp)
2008a038:	1011883a 	mov	r8,r2
2008a03c:	d8003b15 	stw	zero,236(sp)
2008a040:	d8003a15 	stw	zero,232(sp)
2008a044:	d8003015 	stw	zero,192(sp)
2008a048:	dac03d15 	stw	r11,244(sp)
2008a04c:	db002917 	ldw	r12,164(sp)
2008a050:	60800007 	ldb	r2,0(r12)
2008a054:	1000ab26 	beq	r2,zero,2008a304 <___svfprintf_internal_r+0x368>
2008a058:	00c00944 	movi	r3,37
2008a05c:	10c0a926 	beq	r2,r3,2008a304 <___svfprintf_internal_r+0x368>
2008a060:	6021883a 	mov	r16,r12
2008a064:	00000106 	br	2008a06c <___svfprintf_internal_r+0xd0>
2008a068:	10c08426 	beq	r2,r3,2008a27c <___svfprintf_internal_r+0x2e0>
2008a06c:	84000044 	addi	r16,r16,1
2008a070:	80800007 	ldb	r2,0(r16)
2008a074:	103ffc1e 	bne	r2,zero,2008a068 <__flash_rwdata_start+0xfffedee4>
2008a078:	dac02917 	ldw	r11,164(sp)
2008a07c:	82e3c83a 	sub	r17,r16,r11
2008a080:	88000f26 	beq	r17,zero,2008a0c0 <___svfprintf_internal_r+0x124>
2008a084:	d8c02017 	ldw	r3,128(sp)
2008a088:	d8801f17 	ldw	r2,124(sp)
2008a08c:	dac02917 	ldw	r11,164(sp)
2008a090:	1c47883a 	add	r3,r3,r17
2008a094:	10800044 	addi	r2,r2,1
2008a098:	d8c02015 	stw	r3,128(sp)
2008a09c:	42c00015 	stw	r11,0(r8)
2008a0a0:	44400115 	stw	r17,4(r8)
2008a0a4:	d8801f15 	stw	r2,124(sp)
2008a0a8:	00c001c4 	movi	r3,7
2008a0ac:	18807616 	blt	r3,r2,2008a288 <___svfprintf_internal_r+0x2ec>
2008a0b0:	42000204 	addi	r8,r8,8
2008a0b4:	db003017 	ldw	r12,192(sp)
2008a0b8:	6459883a 	add	r12,r12,r17
2008a0bc:	db003015 	stw	r12,192(sp)
2008a0c0:	80800007 	ldb	r2,0(r16)
2008a0c4:	10007726 	beq	r2,zero,2008a2a4 <___svfprintf_internal_r+0x308>
2008a0c8:	80800044 	addi	r2,r16,1
2008a0cc:	84000047 	ldb	r16,1(r16)
2008a0d0:	d8002785 	stb	zero,158(sp)
2008a0d4:	000d883a 	mov	r6,zero
2008a0d8:	027fffc4 	movi	r9,-1
2008a0dc:	d8002e15 	stw	zero,184(sp)
2008a0e0:	0023883a 	mov	r17,zero
2008a0e4:	01001604 	movi	r4,88
2008a0e8:	01400244 	movi	r5,9
2008a0ec:	02800a84 	movi	r10,42
2008a0f0:	01c01b04 	movi	r7,108
2008a0f4:	10c00044 	addi	r3,r2,1
2008a0f8:	80bff804 	addi	r2,r16,-32
2008a0fc:	2082e636 	bltu	r4,r2,2008ac98 <___svfprintf_internal_r+0xcfc>
2008a100:	100490ba 	slli	r2,r2,2
2008a104:	02c80274 	movhi	r11,8201
2008a108:	5ae84604 	addi	r11,r11,-24296
2008a10c:	12c5883a 	add	r2,r2,r11
2008a110:	10800017 	ldw	r2,0(r2)
2008a114:	1000683a 	jmp	r2
2008a118:	2008aa78 	rdprs	zero,r4,8873
2008a11c:	2008ac98 	cmpnei	zero,r4,8882
2008a120:	2008ac98 	cmpnei	zero,r4,8882
2008a124:	2008aa98 	cmpnei	zero,r4,8874
2008a128:	2008ac98 	cmpnei	zero,r4,8882
2008a12c:	2008ac98 	cmpnei	zero,r4,8882
2008a130:	2008ac98 	cmpnei	zero,r4,8882
2008a134:	2008ac98 	cmpnei	zero,r4,8882
2008a138:	2008ac98 	cmpnei	zero,r4,8882
2008a13c:	2008ac98 	cmpnei	zero,r4,8882
2008a140:	2008aaa8 	cmpgeui	zero,r4,8874
2008a144:	2008aad4 	ori	zero,r4,8875
2008a148:	2008ac98 	cmpnei	zero,r4,8882
2008a14c:	2008a30c 	andi	zero,r4,8844
2008a150:	2008a31c 	xori	zero,r4,8844
2008a154:	2008ac98 	cmpnei	zero,r4,8882
2008a158:	2008a35c 	xori	zero,r4,8845
2008a15c:	2008a93c 	xorhi	zero,r4,8868
2008a160:	2008a93c 	xorhi	zero,r4,8868
2008a164:	2008a93c 	xorhi	zero,r4,8868
2008a168:	2008a93c 	xorhi	zero,r4,8868
2008a16c:	2008a93c 	xorhi	zero,r4,8868
2008a170:	2008a93c 	xorhi	zero,r4,8868
2008a174:	2008a93c 	xorhi	zero,r4,8868
2008a178:	2008a93c 	xorhi	zero,r4,8868
2008a17c:	2008a93c 	xorhi	zero,r4,8868
2008a180:	2008ac98 	cmpnei	zero,r4,8882
2008a184:	2008ac98 	cmpnei	zero,r4,8882
2008a188:	2008ac98 	cmpnei	zero,r4,8882
2008a18c:	2008ac98 	cmpnei	zero,r4,8882
2008a190:	2008ac98 	cmpnei	zero,r4,8882
2008a194:	2008ac98 	cmpnei	zero,r4,8882
2008a198:	2008ac98 	cmpnei	zero,r4,8882
2008a19c:	2008ac98 	cmpnei	zero,r4,8882
2008a1a0:	2008ac98 	cmpnei	zero,r4,8882
2008a1a4:	2008ac98 	cmpnei	zero,r4,8882
2008a1a8:	2008a36c 	andhi	zero,r4,8845
2008a1ac:	2008a7ec 	andhi	zero,r4,8863
2008a1b0:	2008ac98 	cmpnei	zero,r4,8882
2008a1b4:	2008a7ec 	andhi	zero,r4,8863
2008a1b8:	2008ac98 	cmpnei	zero,r4,8882
2008a1bc:	2008ac98 	cmpnei	zero,r4,8882
2008a1c0:	2008ac98 	cmpnei	zero,r4,8882
2008a1c4:	2008ac98 	cmpnei	zero,r4,8882
2008a1c8:	2008a890 	cmplti	zero,r4,8866
2008a1cc:	2008ac98 	cmpnei	zero,r4,8882
2008a1d0:	2008ac98 	cmpnei	zero,r4,8882
2008a1d4:	2008ac2c 	andhi	zero,r4,8880
2008a1d8:	2008ac98 	cmpnei	zero,r4,8882
2008a1dc:	2008ac98 	cmpnei	zero,r4,8882
2008a1e0:	2008ac98 	cmpnei	zero,r4,8882
2008a1e4:	2008ac98 	cmpnei	zero,r4,8882
2008a1e8:	2008ac98 	cmpnei	zero,r4,8882
2008a1ec:	2008a8a0 	cmpeqi	zero,r4,8866
2008a1f0:	2008ac98 	cmpnei	zero,r4,8882
2008a1f4:	2008ac98 	cmpnei	zero,r4,8882
2008a1f8:	2008a8e0 	cmpeqi	zero,r4,8867
2008a1fc:	2008ac98 	cmpnei	zero,r4,8882
2008a200:	2008ac98 	cmpnei	zero,r4,8882
2008a204:	2008ac98 	cmpnei	zero,r4,8882
2008a208:	2008ac98 	cmpnei	zero,r4,8882
2008a20c:	2008ac98 	cmpnei	zero,r4,8882
2008a210:	2008ac98 	cmpnei	zero,r4,8882
2008a214:	2008ac98 	cmpnei	zero,r4,8882
2008a218:	2008ac98 	cmpnei	zero,r4,8882
2008a21c:	2008ac98 	cmpnei	zero,r4,8882
2008a220:	2008ac98 	cmpnei	zero,r4,8882
2008a224:	2008ab84 	addi	zero,r4,8878
2008a228:	2008abc4 	addi	zero,r4,8879
2008a22c:	2008a7ec 	andhi	zero,r4,8863
2008a230:	2008a7ec 	andhi	zero,r4,8863
2008a234:	2008a7ec 	andhi	zero,r4,8863
2008a238:	2008aae4 	muli	zero,r4,8875
2008a23c:	2008abc4 	addi	zero,r4,8879
2008a240:	2008ac98 	cmpnei	zero,r4,8882
2008a244:	2008ac98 	cmpnei	zero,r4,8882
2008a248:	2008aaf4 	orhi	zero,r4,8875
2008a24c:	2008ac98 	cmpnei	zero,r4,8882
2008a250:	2008ab08 	cmpgei	zero,r4,8876
2008a254:	2008ac5c 	xori	zero,r4,8881
2008a258:	2008ab3c 	xorhi	zero,r4,8876
2008a25c:	2008a970 	cmpltui	zero,r4,8869
2008a260:	2008ac98 	cmpnei	zero,r4,8882
2008a264:	2008a980 	call	22008a98 <__flash_rwdata_start+0x1f6c914>
2008a268:	2008ac98 	cmpnei	zero,r4,8882
2008a26c:	2008a9f8 	rdprs	zero,r4,8871
2008a270:	2008ac98 	cmpnei	zero,r4,8882
2008a274:	2008ac98 	cmpnei	zero,r4,8882
2008a278:	2008aa38 	rdprs	zero,r4,8872
2008a27c:	db002917 	ldw	r12,164(sp)
2008a280:	8323c83a 	sub	r17,r16,r12
2008a284:	003f7e06 	br	2008a080 <__flash_rwdata_start+0xfffedefc>
2008a288:	d9002f17 	ldw	r4,188(sp)
2008a28c:	b80b883a 	mov	r5,r23
2008a290:	b00d883a 	mov	r6,r22
2008a294:	00928900 	call	20092890 <__ssprint_r>
2008a298:	1000081e 	bne	r2,zero,2008a2bc <___svfprintf_internal_r+0x320>
2008a29c:	da000404 	addi	r8,sp,16
2008a2a0:	003f8406 	br	2008a0b4 <__flash_rwdata_start+0xfffedf30>
2008a2a4:	d8802017 	ldw	r2,128(sp)
2008a2a8:	10000426 	beq	r2,zero,2008a2bc <___svfprintf_internal_r+0x320>
2008a2ac:	d9002f17 	ldw	r4,188(sp)
2008a2b0:	b80b883a 	mov	r5,r23
2008a2b4:	d9801e04 	addi	r6,sp,120
2008a2b8:	00928900 	call	20092890 <__ssprint_r>
2008a2bc:	b880030b 	ldhu	r2,12(r23)
2008a2c0:	1080100c 	andi	r2,r2,64
2008a2c4:	10000d1e 	bne	r2,zero,2008a2fc <___svfprintf_internal_r+0x360>
2008a2c8:	d8803017 	ldw	r2,192(sp)
2008a2cc:	dfc04a17 	ldw	ra,296(sp)
2008a2d0:	df004917 	ldw	fp,292(sp)
2008a2d4:	ddc04817 	ldw	r23,288(sp)
2008a2d8:	dd804717 	ldw	r22,284(sp)
2008a2dc:	dd404617 	ldw	r21,280(sp)
2008a2e0:	dd004517 	ldw	r20,276(sp)
2008a2e4:	dcc04417 	ldw	r19,272(sp)
2008a2e8:	dc804317 	ldw	r18,268(sp)
2008a2ec:	dc404217 	ldw	r17,264(sp)
2008a2f0:	dc004117 	ldw	r16,260(sp)
2008a2f4:	dec04b04 	addi	sp,sp,300
2008a2f8:	f800283a 	ret
2008a2fc:	00bfffc4 	movi	r2,-1
2008a300:	003ff206 	br	2008a2cc <__flash_rwdata_start+0xfffee148>
2008a304:	dc002917 	ldw	r16,164(sp)
2008a308:	003f6d06 	br	2008a0c0 <__flash_rwdata_start+0xfffedf3c>
2008a30c:	1805883a 	mov	r2,r3
2008a310:	8c400114 	ori	r17,r17,4
2008a314:	1c000007 	ldb	r16,0(r3)
2008a318:	003f7606 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008a31c:	1c000007 	ldb	r16,0(r3)
2008a320:	18800044 	addi	r2,r3,1
2008a324:	8286e726 	beq	r16,r10,2008bec4 <___svfprintf_internal_r+0x1f28>
2008a328:	82fff404 	addi	r11,r16,-48
2008a32c:	1007883a 	mov	r3,r2
2008a330:	0013883a 	mov	r9,zero
2008a334:	2aff7036 	bltu	r5,r11,2008a0f8 <__flash_rwdata_start+0xfffedf74>
2008a338:	1c000007 	ldb	r16,0(r3)
2008a33c:	4a4002a4 	muli	r9,r9,10
2008a340:	18c00044 	addi	r3,r3,1
2008a344:	5a53883a 	add	r9,r11,r9
2008a348:	82fff404 	addi	r11,r16,-48
2008a34c:	2afffa2e 	bgeu	r5,r11,2008a338 <__flash_rwdata_start+0xfffee1b4>
2008a350:	483f690e 	bge	r9,zero,2008a0f8 <__flash_rwdata_start+0xfffedf74>
2008a354:	027fffc4 	movi	r9,-1
2008a358:	003f6706 	br	2008a0f8 <__flash_rwdata_start+0xfffedf74>
2008a35c:	8c402014 	ori	r17,r17,128
2008a360:	1805883a 	mov	r2,r3
2008a364:	1c000007 	ldb	r16,0(r3)
2008a368:	003f6206 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008a36c:	8c400414 	ori	r17,r17,16
2008a370:	d8c02915 	stw	r3,164(sp)
2008a374:	d9802785 	stb	r6,158(sp)
2008a378:	8880080c 	andi	r2,r17,32
2008a37c:	d8c02d17 	ldw	r3,180(sp)
2008a380:	10021526 	beq	r2,zero,2008abd8 <___svfprintf_internal_r+0xc3c>
2008a384:	db002d17 	ldw	r12,180(sp)
2008a388:	18800117 	ldw	r2,4(r3)
2008a38c:	1cc00017 	ldw	r19,0(r3)
2008a390:	63000204 	addi	r12,r12,8
2008a394:	db002d15 	stw	r12,180(sp)
2008a398:	1039883a 	mov	fp,r2
2008a39c:	10021916 	blt	r2,zero,2008ac04 <___svfprintf_internal_r+0xc68>
2008a3a0:	dd402783 	ldbu	r21,158(sp)
2008a3a4:	da403215 	stw	r9,200(sp)
2008a3a8:	00800044 	movi	r2,1
2008a3ac:	9f06b03a 	or	r3,r19,fp
2008a3b0:	48000216 	blt	r9,zero,2008a3bc <___svfprintf_internal_r+0x420>
2008a3b4:	013fdfc4 	movi	r4,-129
2008a3b8:	8922703a 	and	r17,r17,r4
2008a3bc:	1802461e 	bne	r3,zero,2008acd8 <___svfprintf_internal_r+0xd3c>
2008a3c0:	48035426 	beq	r9,zero,2008b114 <___svfprintf_internal_r+0x1178>
2008a3c4:	10803fcc 	andi	r2,r2,255
2008a3c8:	00c00044 	movi	r3,1
2008a3cc:	10c26726 	beq	r2,r3,2008ad6c <___svfprintf_internal_r+0xdd0>
2008a3d0:	00c00084 	movi	r3,2
2008a3d4:	10c2ea26 	beq	r2,r3,2008af80 <___svfprintf_internal_r+0xfe4>
2008a3d8:	b007883a 	mov	r3,r22
2008a3dc:	9808d0fa 	srli	r4,r19,3
2008a3e0:	e00a977a 	slli	r5,fp,29
2008a3e4:	e038d0fa 	srli	fp,fp,3
2008a3e8:	9cc001cc 	andi	r19,r19,7
2008a3ec:	98800c04 	addi	r2,r19,48
2008a3f0:	18ffffc4 	addi	r3,r3,-1
2008a3f4:	2926b03a 	or	r19,r5,r4
2008a3f8:	18800005 	stb	r2,0(r3)
2008a3fc:	9f08b03a 	or	r4,r19,fp
2008a400:	203ff61e 	bne	r4,zero,2008a3dc <__flash_rwdata_start+0xfffee258>
2008a404:	8900004c 	andi	r4,r17,1
2008a408:	d8c03115 	stw	r3,196(sp)
2008a40c:	2002ea26 	beq	r4,zero,2008afb8 <___svfprintf_internal_r+0x101c>
2008a410:	10803fcc 	andi	r2,r2,255
2008a414:	1080201c 	xori	r2,r2,128
2008a418:	10bfe004 	addi	r2,r2,-128
2008a41c:	01000c04 	movi	r4,48
2008a420:	11057526 	beq	r2,r4,2008b9f8 <___svfprintf_internal_r+0x1a5c>
2008a424:	dac03117 	ldw	r11,196(sp)
2008a428:	193fffc5 	stb	r4,-1(r3)
2008a42c:	5affffc4 	addi	r11,r11,-1
2008a430:	dac03115 	stw	r11,196(sp)
2008a434:	b2e5c83a 	sub	r18,r22,r11
2008a438:	9005883a 	mov	r2,r18
2008a43c:	9240010e 	bge	r18,r9,2008a444 <___svfprintf_internal_r+0x4a8>
2008a440:	4805883a 	mov	r2,r9
2008a444:	d8802a15 	stw	r2,168(sp)
2008a448:	d8003415 	stw	zero,208(sp)
2008a44c:	a8803fcc 	andi	r2,r21,255
2008a450:	1080201c 	xori	r2,r2,128
2008a454:	10bfe004 	addi	r2,r2,-128
2008a458:	10000326 	beq	r2,zero,2008a468 <___svfprintf_internal_r+0x4cc>
2008a45c:	d8c02a17 	ldw	r3,168(sp)
2008a460:	18c00044 	addi	r3,r3,1
2008a464:	d8c02a15 	stw	r3,168(sp)
2008a468:	8ac0008c 	andi	r11,r17,2
2008a46c:	dac02b15 	stw	r11,172(sp)
2008a470:	58000326 	beq	r11,zero,2008a480 <___svfprintf_internal_r+0x4e4>
2008a474:	db002a17 	ldw	r12,168(sp)
2008a478:	63000084 	addi	r12,r12,2
2008a47c:	db002a15 	stw	r12,168(sp)
2008a480:	88c0210c 	andi	r3,r17,132
2008a484:	d8c02c15 	stw	r3,176(sp)
2008a488:	1802111e 	bne	r3,zero,2008acd0 <___svfprintf_internal_r+0xd34>
2008a48c:	dac02e17 	ldw	r11,184(sp)
2008a490:	db002a17 	ldw	r12,168(sp)
2008a494:	5b39c83a 	sub	fp,r11,r12
2008a498:	07020d0e 	bge	zero,fp,2008acd0 <___svfprintf_internal_r+0xd34>
2008a49c:	02400404 	movi	r9,16
2008a4a0:	d8c02017 	ldw	r3,128(sp)
2008a4a4:	d8801f17 	ldw	r2,124(sp)
2008a4a8:	4f058c0e 	bge	r9,fp,2008badc <___svfprintf_internal_r+0x1b40>
2008a4ac:	01400034 	movhi	r5,0
2008a4b0:	e009883a 	mov	r4,fp
2008a4b4:	29411a84 	addi	r5,r5,1130
2008a4b8:	dc003c15 	stw	r16,240(sp)
2008a4bc:	9039883a 	mov	fp,r18
2008a4c0:	d9403615 	stw	r5,216(sp)
2008a4c4:	8825883a 	mov	r18,r17
2008a4c8:	482b883a 	mov	r21,r9
2008a4cc:	04c001c4 	movi	r19,7
2008a4d0:	dc002f17 	ldw	r16,188(sp)
2008a4d4:	2023883a 	mov	r17,r4
2008a4d8:	00000306 	br	2008a4e8 <___svfprintf_internal_r+0x54c>
2008a4dc:	8c7ffc04 	addi	r17,r17,-16
2008a4e0:	42000204 	addi	r8,r8,8
2008a4e4:	ac40130e 	bge	r21,r17,2008a534 <___svfprintf_internal_r+0x598>
2008a4e8:	02c00034 	movhi	r11,0
2008a4ec:	18c00404 	addi	r3,r3,16
2008a4f0:	10800044 	addi	r2,r2,1
2008a4f4:	5ac11a84 	addi	r11,r11,1130
2008a4f8:	42c00015 	stw	r11,0(r8)
2008a4fc:	45400115 	stw	r21,4(r8)
2008a500:	d8c02015 	stw	r3,128(sp)
2008a504:	d8801f15 	stw	r2,124(sp)
2008a508:	98bff40e 	bge	r19,r2,2008a4dc <__flash_rwdata_start+0xfffee358>
2008a50c:	8009883a 	mov	r4,r16
2008a510:	b80b883a 	mov	r5,r23
2008a514:	b00d883a 	mov	r6,r22
2008a518:	00928900 	call	20092890 <__ssprint_r>
2008a51c:	103f671e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008a520:	8c7ffc04 	addi	r17,r17,-16
2008a524:	d8c02017 	ldw	r3,128(sp)
2008a528:	d8801f17 	ldw	r2,124(sp)
2008a52c:	da000404 	addi	r8,sp,16
2008a530:	ac7fed16 	blt	r21,r17,2008a4e8 <__flash_rwdata_start+0xfffee364>
2008a534:	dc003c17 	ldw	r16,240(sp)
2008a538:	8809883a 	mov	r4,r17
2008a53c:	9023883a 	mov	r17,r18
2008a540:	e025883a 	mov	r18,fp
2008a544:	2039883a 	mov	fp,r4
2008a548:	db003617 	ldw	r12,216(sp)
2008a54c:	e0c7883a 	add	r3,fp,r3
2008a550:	10800044 	addi	r2,r2,1
2008a554:	43000015 	stw	r12,0(r8)
2008a558:	47000115 	stw	fp,4(r8)
2008a55c:	d8c02015 	stw	r3,128(sp)
2008a560:	d8801f15 	stw	r2,124(sp)
2008a564:	010001c4 	movi	r4,7
2008a568:	20834416 	blt	r4,r2,2008b27c <___svfprintf_internal_r+0x12e0>
2008a56c:	d8802787 	ldb	r2,158(sp)
2008a570:	42000204 	addi	r8,r8,8
2008a574:	10000c26 	beq	r2,zero,2008a5a8 <___svfprintf_internal_r+0x60c>
2008a578:	d8801f17 	ldw	r2,124(sp)
2008a57c:	d9002784 	addi	r4,sp,158
2008a580:	18c00044 	addi	r3,r3,1
2008a584:	10800044 	addi	r2,r2,1
2008a588:	41000015 	stw	r4,0(r8)
2008a58c:	01000044 	movi	r4,1
2008a590:	41000115 	stw	r4,4(r8)
2008a594:	d8c02015 	stw	r3,128(sp)
2008a598:	d8801f15 	stw	r2,124(sp)
2008a59c:	010001c4 	movi	r4,7
2008a5a0:	2082f616 	blt	r4,r2,2008b17c <___svfprintf_internal_r+0x11e0>
2008a5a4:	42000204 	addi	r8,r8,8
2008a5a8:	dac02b17 	ldw	r11,172(sp)
2008a5ac:	58000c26 	beq	r11,zero,2008a5e0 <___svfprintf_internal_r+0x644>
2008a5b0:	d8801f17 	ldw	r2,124(sp)
2008a5b4:	d9002704 	addi	r4,sp,156
2008a5b8:	18c00084 	addi	r3,r3,2
2008a5bc:	10800044 	addi	r2,r2,1
2008a5c0:	41000015 	stw	r4,0(r8)
2008a5c4:	01000084 	movi	r4,2
2008a5c8:	41000115 	stw	r4,4(r8)
2008a5cc:	d8c02015 	stw	r3,128(sp)
2008a5d0:	d8801f15 	stw	r2,124(sp)
2008a5d4:	010001c4 	movi	r4,7
2008a5d8:	2082e016 	blt	r4,r2,2008b15c <___svfprintf_internal_r+0x11c0>
2008a5dc:	42000204 	addi	r8,r8,8
2008a5e0:	db002c17 	ldw	r12,176(sp)
2008a5e4:	00802004 	movi	r2,128
2008a5e8:	60822f26 	beq	r12,r2,2008aea8 <___svfprintf_internal_r+0xf0c>
2008a5ec:	db003217 	ldw	r12,200(sp)
2008a5f0:	64abc83a 	sub	r21,r12,r18
2008a5f4:	0540310e 	bge	zero,r21,2008a6bc <___svfprintf_internal_r+0x720>
2008a5f8:	07000404 	movi	fp,16
2008a5fc:	d8801f17 	ldw	r2,124(sp)
2008a600:	e544270e 	bge	fp,r21,2008b6a0 <___svfprintf_internal_r+0x1704>
2008a604:	01400034 	movhi	r5,0
2008a608:	a809883a 	mov	r4,r21
2008a60c:	29411684 	addi	r5,r5,1114
2008a610:	dc002c15 	stw	r16,176(sp)
2008a614:	902b883a 	mov	r21,r18
2008a618:	d9402b15 	stw	r5,172(sp)
2008a61c:	8825883a 	mov	r18,r17
2008a620:	04c001c4 	movi	r19,7
2008a624:	dc002f17 	ldw	r16,188(sp)
2008a628:	2023883a 	mov	r17,r4
2008a62c:	00000306 	br	2008a63c <___svfprintf_internal_r+0x6a0>
2008a630:	8c7ffc04 	addi	r17,r17,-16
2008a634:	42000204 	addi	r8,r8,8
2008a638:	e440110e 	bge	fp,r17,2008a680 <___svfprintf_internal_r+0x6e4>
2008a63c:	18c00404 	addi	r3,r3,16
2008a640:	10800044 	addi	r2,r2,1
2008a644:	45000015 	stw	r20,0(r8)
2008a648:	47000115 	stw	fp,4(r8)
2008a64c:	d8c02015 	stw	r3,128(sp)
2008a650:	d8801f15 	stw	r2,124(sp)
2008a654:	98bff60e 	bge	r19,r2,2008a630 <__flash_rwdata_start+0xfffee4ac>
2008a658:	8009883a 	mov	r4,r16
2008a65c:	b80b883a 	mov	r5,r23
2008a660:	b00d883a 	mov	r6,r22
2008a664:	00928900 	call	20092890 <__ssprint_r>
2008a668:	103f141e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008a66c:	8c7ffc04 	addi	r17,r17,-16
2008a670:	d8c02017 	ldw	r3,128(sp)
2008a674:	d8801f17 	ldw	r2,124(sp)
2008a678:	da000404 	addi	r8,sp,16
2008a67c:	e47fef16 	blt	fp,r17,2008a63c <__flash_rwdata_start+0xfffee4b8>
2008a680:	dc002c17 	ldw	r16,176(sp)
2008a684:	8809883a 	mov	r4,r17
2008a688:	9023883a 	mov	r17,r18
2008a68c:	a825883a 	mov	r18,r21
2008a690:	202b883a 	mov	r21,r4
2008a694:	dac02b17 	ldw	r11,172(sp)
2008a698:	1d47883a 	add	r3,r3,r21
2008a69c:	10800044 	addi	r2,r2,1
2008a6a0:	42c00015 	stw	r11,0(r8)
2008a6a4:	45400115 	stw	r21,4(r8)
2008a6a8:	d8c02015 	stw	r3,128(sp)
2008a6ac:	d8801f15 	stw	r2,124(sp)
2008a6b0:	010001c4 	movi	r4,7
2008a6b4:	2082a116 	blt	r4,r2,2008b13c <___svfprintf_internal_r+0x11a0>
2008a6b8:	42000204 	addi	r8,r8,8
2008a6bc:	8880400c 	andi	r2,r17,256
2008a6c0:	1001b01e 	bne	r2,zero,2008ad84 <___svfprintf_internal_r+0xde8>
2008a6c4:	d8801f17 	ldw	r2,124(sp)
2008a6c8:	db003117 	ldw	r12,196(sp)
2008a6cc:	1c87883a 	add	r3,r3,r18
2008a6d0:	10800044 	addi	r2,r2,1
2008a6d4:	43000015 	stw	r12,0(r8)
2008a6d8:	44800115 	stw	r18,4(r8)
2008a6dc:	d8c02015 	stw	r3,128(sp)
2008a6e0:	d8801f15 	stw	r2,124(sp)
2008a6e4:	010001c4 	movi	r4,7
2008a6e8:	20828216 	blt	r4,r2,2008b0f4 <___svfprintf_internal_r+0x1158>
2008a6ec:	42000204 	addi	r8,r8,8
2008a6f0:	8c40010c 	andi	r17,r17,4
2008a6f4:	88003226 	beq	r17,zero,2008a7c0 <___svfprintf_internal_r+0x824>
2008a6f8:	db002e17 	ldw	r12,184(sp)
2008a6fc:	dac02a17 	ldw	r11,168(sp)
2008a700:	62e1c83a 	sub	r16,r12,r11
2008a704:	04002e0e 	bge	zero,r16,2008a7c0 <___svfprintf_internal_r+0x824>
2008a708:	04400404 	movi	r17,16
2008a70c:	d8801f17 	ldw	r2,124(sp)
2008a710:	8c05330e 	bge	r17,r16,2008bbe0 <___svfprintf_internal_r+0x1c44>
2008a714:	01000034 	movhi	r4,0
2008a718:	21011a84 	addi	r4,r4,1130
2008a71c:	d9003615 	stw	r4,216(sp)
2008a720:	048001c4 	movi	r18,7
2008a724:	dcc02f17 	ldw	r19,188(sp)
2008a728:	00000306 	br	2008a738 <___svfprintf_internal_r+0x79c>
2008a72c:	843ffc04 	addi	r16,r16,-16
2008a730:	42000204 	addi	r8,r8,8
2008a734:	8c00130e 	bge	r17,r16,2008a784 <___svfprintf_internal_r+0x7e8>
2008a738:	01400034 	movhi	r5,0
2008a73c:	18c00404 	addi	r3,r3,16
2008a740:	10800044 	addi	r2,r2,1
2008a744:	29411a84 	addi	r5,r5,1130
2008a748:	41400015 	stw	r5,0(r8)
2008a74c:	44400115 	stw	r17,4(r8)
2008a750:	d8c02015 	stw	r3,128(sp)
2008a754:	d8801f15 	stw	r2,124(sp)
2008a758:	90bff40e 	bge	r18,r2,2008a72c <__flash_rwdata_start+0xfffee5a8>
2008a75c:	9809883a 	mov	r4,r19
2008a760:	b80b883a 	mov	r5,r23
2008a764:	b00d883a 	mov	r6,r22
2008a768:	00928900 	call	20092890 <__ssprint_r>
2008a76c:	103ed31e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008a770:	843ffc04 	addi	r16,r16,-16
2008a774:	d8c02017 	ldw	r3,128(sp)
2008a778:	d8801f17 	ldw	r2,124(sp)
2008a77c:	da000404 	addi	r8,sp,16
2008a780:	8c3fed16 	blt	r17,r16,2008a738 <__flash_rwdata_start+0xfffee5b4>
2008a784:	dac03617 	ldw	r11,216(sp)
2008a788:	1c07883a 	add	r3,r3,r16
2008a78c:	10800044 	addi	r2,r2,1
2008a790:	42c00015 	stw	r11,0(r8)
2008a794:	44000115 	stw	r16,4(r8)
2008a798:	d8c02015 	stw	r3,128(sp)
2008a79c:	d8801f15 	stw	r2,124(sp)
2008a7a0:	010001c4 	movi	r4,7
2008a7a4:	2080060e 	bge	r4,r2,2008a7c0 <___svfprintf_internal_r+0x824>
2008a7a8:	d9002f17 	ldw	r4,188(sp)
2008a7ac:	b80b883a 	mov	r5,r23
2008a7b0:	b00d883a 	mov	r6,r22
2008a7b4:	00928900 	call	20092890 <__ssprint_r>
2008a7b8:	103ec01e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008a7bc:	d8c02017 	ldw	r3,128(sp)
2008a7c0:	d8802a17 	ldw	r2,168(sp)
2008a7c4:	db002e17 	ldw	r12,184(sp)
2008a7c8:	1300010e 	bge	r2,r12,2008a7d0 <___svfprintf_internal_r+0x834>
2008a7cc:	6005883a 	mov	r2,r12
2008a7d0:	dac03017 	ldw	r11,192(sp)
2008a7d4:	5897883a 	add	r11,r11,r2
2008a7d8:	dac03015 	stw	r11,192(sp)
2008a7dc:	1802331e 	bne	r3,zero,2008b0ac <___svfprintf_internal_r+0x1110>
2008a7e0:	d8001f15 	stw	zero,124(sp)
2008a7e4:	da000404 	addi	r8,sp,16
2008a7e8:	003e1806 	br	2008a04c <__flash_rwdata_start+0xfffedec8>
2008a7ec:	db002d17 	ldw	r12,180(sp)
2008a7f0:	dac02d17 	ldw	r11,180(sp)
2008a7f4:	d8c02915 	stw	r3,164(sp)
2008a7f8:	63000017 	ldw	r12,0(r12)
2008a7fc:	5ac00117 	ldw	r11,4(r11)
2008a800:	d9802785 	stb	r6,158(sp)
2008a804:	6009883a 	mov	r4,r12
2008a808:	580b883a 	mov	r5,r11
2008a80c:	db003715 	stw	r12,220(sp)
2008a810:	da004015 	stw	r8,256(sp)
2008a814:	da403f15 	stw	r9,252(sp)
2008a818:	dac03815 	stw	r11,224(sp)
2008a81c:	009257c0 	call	2009257c <__fpclassifyd>
2008a820:	db002d17 	ldw	r12,180(sp)
2008a824:	04800044 	movi	r18,1
2008a828:	da004017 	ldw	r8,256(sp)
2008a82c:	64c00204 	addi	r19,r12,8
2008a830:	da403f17 	ldw	r9,252(sp)
2008a834:	d9003717 	ldw	r4,220(sp)
2008a838:	d9403817 	ldw	r5,224(sp)
2008a83c:	1483561e 	bne	r2,r18,2008b598 <___svfprintf_internal_r+0x15fc>
2008a840:	000d883a 	mov	r6,zero
2008a844:	000f883a 	mov	r7,zero
2008a848:	00965040 	call	20096504 <__ledf2>
2008a84c:	da004017 	ldw	r8,256(sp)
2008a850:	1004ee16 	blt	r2,zero,2008bc0c <___svfprintf_internal_r+0x1c70>
2008a854:	dd402783 	ldbu	r21,158(sp)
2008a858:	008011c4 	movi	r2,71
2008a85c:	1404440e 	bge	r2,r16,2008b970 <___svfprintf_internal_r+0x19d4>
2008a860:	00c00034 	movhi	r3,0
2008a864:	18c10704 	addi	r3,r3,1052
2008a868:	d8c03115 	stw	r3,196(sp)
2008a86c:	02c000c4 	movi	r11,3
2008a870:	00bfdfc4 	movi	r2,-129
2008a874:	dac02a15 	stw	r11,168(sp)
2008a878:	88a2703a 	and	r17,r17,r2
2008a87c:	dcc02d15 	stw	r19,180(sp)
2008a880:	5825883a 	mov	r18,r11
2008a884:	d8003215 	stw	zero,200(sp)
2008a888:	d8003415 	stw	zero,208(sp)
2008a88c:	003eef06 	br	2008a44c <__flash_rwdata_start+0xfffee2c8>
2008a890:	8c400214 	ori	r17,r17,8
2008a894:	1805883a 	mov	r2,r3
2008a898:	1c000007 	ldb	r16,0(r3)
2008a89c:	003e1506 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008a8a0:	8c400414 	ori	r17,r17,16
2008a8a4:	d8c02915 	stw	r3,164(sp)
2008a8a8:	88c0080c 	andi	r3,r17,32
2008a8ac:	d8802d17 	ldw	r2,180(sp)
2008a8b0:	18005526 	beq	r3,zero,2008aa08 <___svfprintf_internal_r+0xa6c>
2008a8b4:	dac02d17 	ldw	r11,180(sp)
2008a8b8:	14c00017 	ldw	r19,0(r2)
2008a8bc:	17000117 	ldw	fp,4(r2)
2008a8c0:	5ac00204 	addi	r11,r11,8
2008a8c4:	dac02d15 	stw	r11,180(sp)
2008a8c8:	00800044 	movi	r2,1
2008a8cc:	9f06b03a 	or	r3,r19,fp
2008a8d0:	d8002785 	stb	zero,158(sp)
2008a8d4:	da403215 	stw	r9,200(sp)
2008a8d8:	002b883a 	mov	r21,zero
2008a8dc:	003eb406 	br	2008a3b0 <__flash_rwdata_start+0xfffee22c>
2008a8e0:	03000034 	movhi	r12,0
2008a8e4:	63010a04 	addi	r12,r12,1064
2008a8e8:	d8c02915 	stw	r3,164(sp)
2008a8ec:	d9802785 	stb	r6,158(sp)
2008a8f0:	db003b15 	stw	r12,236(sp)
2008a8f4:	88c0080c 	andi	r3,r17,32
2008a8f8:	d8802d17 	ldw	r2,180(sp)
2008a8fc:	18005626 	beq	r3,zero,2008aa58 <___svfprintf_internal_r+0xabc>
2008a900:	dac02d17 	ldw	r11,180(sp)
2008a904:	14c00017 	ldw	r19,0(r2)
2008a908:	17000117 	ldw	fp,4(r2)
2008a90c:	5ac00204 	addi	r11,r11,8
2008a910:	dac02d15 	stw	r11,180(sp)
2008a914:	8880004c 	andi	r2,r17,1
2008a918:	10029326 	beq	r2,zero,2008b368 <___svfprintf_internal_r+0x13cc>
2008a91c:	9f06b03a 	or	r3,r19,fp
2008a920:	18033526 	beq	r3,zero,2008b5f8 <___svfprintf_internal_r+0x165c>
2008a924:	00800c04 	movi	r2,48
2008a928:	d8802705 	stb	r2,156(sp)
2008a92c:	dc002745 	stb	r16,157(sp)
2008a930:	8c400094 	ori	r17,r17,2
2008a934:	00800084 	movi	r2,2
2008a938:	003fe506 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008a93c:	1805883a 	mov	r2,r3
2008a940:	d8002e15 	stw	zero,184(sp)
2008a944:	82fff404 	addi	r11,r16,-48
2008a948:	0019883a 	mov	r12,zero
2008a94c:	14000007 	ldb	r16,0(r2)
2008a950:	630002a4 	muli	r12,r12,10
2008a954:	18c00044 	addi	r3,r3,1
2008a958:	1805883a 	mov	r2,r3
2008a95c:	62d9883a 	add	r12,r12,r11
2008a960:	82fff404 	addi	r11,r16,-48
2008a964:	2afff92e 	bgeu	r5,r11,2008a94c <__flash_rwdata_start+0xfffee7c8>
2008a968:	db002e15 	stw	r12,184(sp)
2008a96c:	003de206 	br	2008a0f8 <__flash_rwdata_start+0xfffedf74>
2008a970:	8c400814 	ori	r17,r17,32
2008a974:	1805883a 	mov	r2,r3
2008a978:	1c000007 	ldb	r16,0(r3)
2008a97c:	003ddd06 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008a980:	dac02d17 	ldw	r11,180(sp)
2008a984:	db002d17 	ldw	r12,180(sp)
2008a988:	d8c02915 	stw	r3,164(sp)
2008a98c:	5ac00017 	ldw	r11,0(r11)
2008a990:	d8002785 	stb	zero,158(sp)
2008a994:	64c00104 	addi	r19,r12,4
2008a998:	dac03115 	stw	r11,196(sp)
2008a99c:	58048126 	beq	r11,zero,2008bba4 <___svfprintf_internal_r+0x1c08>
2008a9a0:	d9003117 	ldw	r4,196(sp)
2008a9a4:	48041716 	blt	r9,zero,2008ba04 <___svfprintf_internal_r+0x1a68>
2008a9a8:	480d883a 	mov	r6,r9
2008a9ac:	000b883a 	mov	r5,zero
2008a9b0:	da004015 	stw	r8,256(sp)
2008a9b4:	da403f15 	stw	r9,252(sp)
2008a9b8:	0090e300 	call	20090e30 <memchr>
2008a9bc:	da004017 	ldw	r8,256(sp)
2008a9c0:	da403f17 	ldw	r9,252(sp)
2008a9c4:	1004db26 	beq	r2,zero,2008bd34 <___svfprintf_internal_r+0x1d98>
2008a9c8:	d8c03117 	ldw	r3,196(sp)
2008a9cc:	10e5c83a 	sub	r18,r2,r3
2008a9d0:	4c80010e 	bge	r9,r18,2008a9d8 <___svfprintf_internal_r+0xa3c>
2008a9d4:	4825883a 	mov	r18,r9
2008a9d8:	9005883a 	mov	r2,r18
2008a9dc:	90040e16 	blt	r18,zero,2008ba18 <___svfprintf_internal_r+0x1a7c>
2008a9e0:	dd402783 	ldbu	r21,158(sp)
2008a9e4:	d8802a15 	stw	r2,168(sp)
2008a9e8:	dcc02d15 	stw	r19,180(sp)
2008a9ec:	d8003215 	stw	zero,200(sp)
2008a9f0:	d8003415 	stw	zero,208(sp)
2008a9f4:	003e9506 	br	2008a44c <__flash_rwdata_start+0xfffee2c8>
2008a9f8:	d8c02915 	stw	r3,164(sp)
2008a9fc:	88c0080c 	andi	r3,r17,32
2008aa00:	d8802d17 	ldw	r2,180(sp)
2008aa04:	183fab1e 	bne	r3,zero,2008a8b4 <__flash_rwdata_start+0xfffee730>
2008aa08:	88c0040c 	andi	r3,r17,16
2008aa0c:	1802681e 	bne	r3,zero,2008b3b0 <___svfprintf_internal_r+0x1414>
2008aa10:	88c0100c 	andi	r3,r17,64
2008aa14:	18026626 	beq	r3,zero,2008b3b0 <___svfprintf_internal_r+0x1414>
2008aa18:	dac02d17 	ldw	r11,180(sp)
2008aa1c:	14c0000b 	ldhu	r19,0(r2)
2008aa20:	0039883a 	mov	fp,zero
2008aa24:	5ac00104 	addi	r11,r11,4
2008aa28:	dac02d15 	stw	r11,180(sp)
2008aa2c:	00800044 	movi	r2,1
2008aa30:	9807883a 	mov	r3,r19
2008aa34:	003fa606 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008aa38:	00800034 	movhi	r2,0
2008aa3c:	10810f04 	addi	r2,r2,1084
2008aa40:	d8c02915 	stw	r3,164(sp)
2008aa44:	d8803b15 	stw	r2,236(sp)
2008aa48:	d9802785 	stb	r6,158(sp)
2008aa4c:	88c0080c 	andi	r3,r17,32
2008aa50:	d8802d17 	ldw	r2,180(sp)
2008aa54:	183faa1e 	bne	r3,zero,2008a900 <__flash_rwdata_start+0xfffee77c>
2008aa58:	88c0040c 	andi	r3,r17,16
2008aa5c:	1802e826 	beq	r3,zero,2008b600 <___svfprintf_internal_r+0x1664>
2008aa60:	db002d17 	ldw	r12,180(sp)
2008aa64:	14c00017 	ldw	r19,0(r2)
2008aa68:	0039883a 	mov	fp,zero
2008aa6c:	63000104 	addi	r12,r12,4
2008aa70:	db002d15 	stw	r12,180(sp)
2008aa74:	003fa706 	br	2008a914 <__flash_rwdata_start+0xfffee790>
2008aa78:	30803fcc 	andi	r2,r6,255
2008aa7c:	1080201c 	xori	r2,r2,128
2008aa80:	10bfe004 	addi	r2,r2,-128
2008aa84:	1002d91e 	bne	r2,zero,2008b5ec <___svfprintf_internal_r+0x1650>
2008aa88:	1805883a 	mov	r2,r3
2008aa8c:	01800804 	movi	r6,32
2008aa90:	1c000007 	ldb	r16,0(r3)
2008aa94:	003d9706 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008aa98:	8c400054 	ori	r17,r17,1
2008aa9c:	1805883a 	mov	r2,r3
2008aaa0:	1c000007 	ldb	r16,0(r3)
2008aaa4:	003d9306 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008aaa8:	dac02d17 	ldw	r11,180(sp)
2008aaac:	db002d17 	ldw	r12,180(sp)
2008aab0:	5ac00017 	ldw	r11,0(r11)
2008aab4:	dac02e15 	stw	r11,184(sp)
2008aab8:	62c00104 	addi	r11,r12,4
2008aabc:	db002e17 	ldw	r12,184(sp)
2008aac0:	60033e16 	blt	r12,zero,2008b7bc <___svfprintf_internal_r+0x1820>
2008aac4:	dac02d15 	stw	r11,180(sp)
2008aac8:	1805883a 	mov	r2,r3
2008aacc:	1c000007 	ldb	r16,0(r3)
2008aad0:	003d8806 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008aad4:	1805883a 	mov	r2,r3
2008aad8:	01800ac4 	movi	r6,43
2008aadc:	1c000007 	ldb	r16,0(r3)
2008aae0:	003d8406 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008aae4:	8c401014 	ori	r17,r17,64
2008aae8:	1805883a 	mov	r2,r3
2008aaec:	1c000007 	ldb	r16,0(r3)
2008aaf0:	003d8006 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008aaf4:	1c000007 	ldb	r16,0(r3)
2008aaf8:	81c33626 	beq	r16,r7,2008b7d4 <___svfprintf_internal_r+0x1838>
2008aafc:	8c400414 	ori	r17,r17,16
2008ab00:	1805883a 	mov	r2,r3
2008ab04:	003d7b06 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008ab08:	d8c02915 	stw	r3,164(sp)
2008ab0c:	d9802785 	stb	r6,158(sp)
2008ab10:	8880080c 	andi	r2,r17,32
2008ab14:	1002c226 	beq	r2,zero,2008b620 <___svfprintf_internal_r+0x1684>
2008ab18:	db002d17 	ldw	r12,180(sp)
2008ab1c:	dac03017 	ldw	r11,192(sp)
2008ab20:	60800017 	ldw	r2,0(r12)
2008ab24:	5807d7fa 	srai	r3,r11,31
2008ab28:	63000104 	addi	r12,r12,4
2008ab2c:	db002d15 	stw	r12,180(sp)
2008ab30:	12c00015 	stw	r11,0(r2)
2008ab34:	10c00115 	stw	r3,4(r2)
2008ab38:	003d4406 	br	2008a04c <__flash_rwdata_start+0xfffedec8>
2008ab3c:	db002d17 	ldw	r12,180(sp)
2008ab40:	00800c04 	movi	r2,48
2008ab44:	d8802705 	stb	r2,156(sp)
2008ab48:	64c00017 	ldw	r19,0(r12)
2008ab4c:	00801e04 	movi	r2,120
2008ab50:	d8802745 	stb	r2,157(sp)
2008ab54:	00800034 	movhi	r2,0
2008ab58:	10810f04 	addi	r2,r2,1084
2008ab5c:	63000104 	addi	r12,r12,4
2008ab60:	d8c02915 	stw	r3,164(sp)
2008ab64:	d8803b15 	stw	r2,236(sp)
2008ab68:	0039883a 	mov	fp,zero
2008ab6c:	8c400094 	ori	r17,r17,2
2008ab70:	db002d15 	stw	r12,180(sp)
2008ab74:	00800084 	movi	r2,2
2008ab78:	04001e04 	movi	r16,120
2008ab7c:	9807883a 	mov	r3,r19
2008ab80:	003f5306 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008ab84:	db002d17 	ldw	r12,180(sp)
2008ab88:	d8c02915 	stw	r3,164(sp)
2008ab8c:	dac01404 	addi	r11,sp,80
2008ab90:	60800017 	ldw	r2,0(r12)
2008ab94:	00c00044 	movi	r3,1
2008ab98:	63000104 	addi	r12,r12,4
2008ab9c:	d8801405 	stb	r2,80(sp)
2008aba0:	d8c02a15 	stw	r3,168(sp)
2008aba4:	d8002785 	stb	zero,158(sp)
2008aba8:	db002d15 	stw	r12,180(sp)
2008abac:	1825883a 	mov	r18,r3
2008abb0:	d8003215 	stw	zero,200(sp)
2008abb4:	d8003415 	stw	zero,208(sp)
2008abb8:	dac03115 	stw	r11,196(sp)
2008abbc:	0005883a 	mov	r2,zero
2008abc0:	003e2906 	br	2008a468 <__flash_rwdata_start+0xfffee2e4>
2008abc4:	d8c02915 	stw	r3,164(sp)
2008abc8:	d9802785 	stb	r6,158(sp)
2008abcc:	8880080c 	andi	r2,r17,32
2008abd0:	d8c02d17 	ldw	r3,180(sp)
2008abd4:	103deb1e 	bne	r2,zero,2008a384 <__flash_rwdata_start+0xfffee200>
2008abd8:	8880040c 	andi	r2,r17,16
2008abdc:	1001e51e 	bne	r2,zero,2008b374 <___svfprintf_internal_r+0x13d8>
2008abe0:	8880100c 	andi	r2,r17,64
2008abe4:	1001e326 	beq	r2,zero,2008b374 <___svfprintf_internal_r+0x13d8>
2008abe8:	1cc0000f 	ldh	r19,0(r3)
2008abec:	db002d17 	ldw	r12,180(sp)
2008abf0:	9839d7fa 	srai	fp,r19,31
2008abf4:	63000104 	addi	r12,r12,4
2008abf8:	db002d15 	stw	r12,180(sp)
2008abfc:	e005883a 	mov	r2,fp
2008ac00:	103de70e 	bge	r2,zero,2008a3a0 <__flash_rwdata_start+0xfffee21c>
2008ac04:	04e7c83a 	sub	r19,zero,r19
2008ac08:	9804c03a 	cmpne	r2,r19,zero
2008ac0c:	0739c83a 	sub	fp,zero,fp
2008ac10:	e0b9c83a 	sub	fp,fp,r2
2008ac14:	05400b44 	movi	r21,45
2008ac18:	dd402785 	stb	r21,158(sp)
2008ac1c:	da403215 	stw	r9,200(sp)
2008ac20:	00800044 	movi	r2,1
2008ac24:	9f06b03a 	or	r3,r19,fp
2008ac28:	003de106 	br	2008a3b0 <__flash_rwdata_start+0xfffee22c>
2008ac2c:	8c400414 	ori	r17,r17,16
2008ac30:	d8c02915 	stw	r3,164(sp)
2008ac34:	8880080c 	andi	r2,r17,32
2008ac38:	10000b26 	beq	r2,zero,2008ac68 <___svfprintf_internal_r+0xccc>
2008ac3c:	db002d17 	ldw	r12,180(sp)
2008ac40:	0005883a 	mov	r2,zero
2008ac44:	64c00017 	ldw	r19,0(r12)
2008ac48:	67000117 	ldw	fp,4(r12)
2008ac4c:	63000204 	addi	r12,r12,8
2008ac50:	db002d15 	stw	r12,180(sp)
2008ac54:	9f06b03a 	or	r3,r19,fp
2008ac58:	003f1d06 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008ac5c:	d8c02915 	stw	r3,164(sp)
2008ac60:	8880080c 	andi	r2,r17,32
2008ac64:	103ff51e 	bne	r2,zero,2008ac3c <__flash_rwdata_start+0xfffeeab8>
2008ac68:	8880040c 	andi	r2,r17,16
2008ac6c:	1001c81e 	bne	r2,zero,2008b390 <___svfprintf_internal_r+0x13f4>
2008ac70:	8880100c 	andi	r2,r17,64
2008ac74:	1001c626 	beq	r2,zero,2008b390 <___svfprintf_internal_r+0x13f4>
2008ac78:	db002d17 	ldw	r12,180(sp)
2008ac7c:	0039883a 	mov	fp,zero
2008ac80:	0005883a 	mov	r2,zero
2008ac84:	64c0000b 	ldhu	r19,0(r12)
2008ac88:	63000104 	addi	r12,r12,4
2008ac8c:	db002d15 	stw	r12,180(sp)
2008ac90:	9807883a 	mov	r3,r19
2008ac94:	003f0e06 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008ac98:	d8c02915 	stw	r3,164(sp)
2008ac9c:	d9802785 	stb	r6,158(sp)
2008aca0:	803d8026 	beq	r16,zero,2008a2a4 <__flash_rwdata_start+0xfffee120>
2008aca4:	02c00044 	movi	r11,1
2008aca8:	db001404 	addi	r12,sp,80
2008acac:	dac02a15 	stw	r11,168(sp)
2008acb0:	dc001405 	stb	r16,80(sp)
2008acb4:	d8002785 	stb	zero,158(sp)
2008acb8:	5825883a 	mov	r18,r11
2008acbc:	d8003215 	stw	zero,200(sp)
2008acc0:	d8003415 	stw	zero,208(sp)
2008acc4:	db003115 	stw	r12,196(sp)
2008acc8:	0005883a 	mov	r2,zero
2008accc:	003de606 	br	2008a468 <__flash_rwdata_start+0xfffee2e4>
2008acd0:	d8c02017 	ldw	r3,128(sp)
2008acd4:	003e2706 	br	2008a574 <__flash_rwdata_start+0xfffee3f0>
2008acd8:	10803fcc 	andi	r2,r2,255
2008acdc:	00c00044 	movi	r3,1
2008ace0:	10fdbb1e 	bne	r2,r3,2008a3d0 <__flash_rwdata_start+0xfffee24c>
2008ace4:	e000021e 	bne	fp,zero,2008acf0 <___svfprintf_internal_r+0xd54>
2008ace8:	00800244 	movi	r2,9
2008acec:	14c01f2e 	bgeu	r2,r19,2008ad6c <___svfprintf_internal_r+0xdd0>
2008acf0:	dc002a15 	stw	r16,168(sp)
2008acf4:	dc402b15 	stw	r17,172(sp)
2008acf8:	9821883a 	mov	r16,r19
2008acfc:	e023883a 	mov	r17,fp
2008ad00:	b025883a 	mov	r18,r22
2008ad04:	4827883a 	mov	r19,r9
2008ad08:	4039883a 	mov	fp,r8
2008ad0c:	8009883a 	mov	r4,r16
2008ad10:	880b883a 	mov	r5,r17
2008ad14:	01800284 	movi	r6,10
2008ad18:	000f883a 	mov	r7,zero
2008ad1c:	0095e100 	call	20095e10 <__umoddi3>
2008ad20:	10800c04 	addi	r2,r2,48
2008ad24:	94bfffc4 	addi	r18,r18,-1
2008ad28:	8009883a 	mov	r4,r16
2008ad2c:	880b883a 	mov	r5,r17
2008ad30:	01800284 	movi	r6,10
2008ad34:	000f883a 	mov	r7,zero
2008ad38:	90800005 	stb	r2,0(r18)
2008ad3c:	00958500 	call	20095850 <__udivdi3>
2008ad40:	1021883a 	mov	r16,r2
2008ad44:	10c4b03a 	or	r2,r2,r3
2008ad48:	1823883a 	mov	r17,r3
2008ad4c:	103fef1e 	bne	r2,zero,2008ad0c <__flash_rwdata_start+0xfffeeb88>
2008ad50:	dc803115 	stw	r18,196(sp)
2008ad54:	dc002a17 	ldw	r16,168(sp)
2008ad58:	dc402b17 	ldw	r17,172(sp)
2008ad5c:	9813883a 	mov	r9,r19
2008ad60:	e011883a 	mov	r8,fp
2008ad64:	b4a5c83a 	sub	r18,r22,r18
2008ad68:	003db306 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008ad6c:	9cc00c04 	addi	r19,r19,48
2008ad70:	db001dc4 	addi	r12,sp,119
2008ad74:	dcc01dc5 	stb	r19,119(sp)
2008ad78:	dc803d17 	ldw	r18,244(sp)
2008ad7c:	db003115 	stw	r12,196(sp)
2008ad80:	003dad06 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008ad84:	00801944 	movi	r2,101
2008ad88:	14008d0e 	bge	r2,r16,2008afc0 <___svfprintf_internal_r+0x1024>
2008ad8c:	d9003717 	ldw	r4,220(sp)
2008ad90:	d9403817 	ldw	r5,224(sp)
2008ad94:	000d883a 	mov	r6,zero
2008ad98:	000f883a 	mov	r7,zero
2008ad9c:	d8c03e15 	stw	r3,248(sp)
2008ada0:	da004015 	stw	r8,256(sp)
2008ada4:	00963a00 	call	200963a0 <__eqdf2>
2008ada8:	d8c03e17 	ldw	r3,248(sp)
2008adac:	da004017 	ldw	r8,256(sp)
2008adb0:	1000fd1e 	bne	r2,zero,2008b1a8 <___svfprintf_internal_r+0x120c>
2008adb4:	d8801f17 	ldw	r2,124(sp)
2008adb8:	01000034 	movhi	r4,0
2008adbc:	21011604 	addi	r4,r4,1112
2008adc0:	18c00044 	addi	r3,r3,1
2008adc4:	10800044 	addi	r2,r2,1
2008adc8:	41000015 	stw	r4,0(r8)
2008adcc:	01000044 	movi	r4,1
2008add0:	41000115 	stw	r4,4(r8)
2008add4:	d8c02015 	stw	r3,128(sp)
2008add8:	d8801f15 	stw	r2,124(sp)
2008addc:	010001c4 	movi	r4,7
2008ade0:	20823316 	blt	r4,r2,2008b6b0 <___svfprintf_internal_r+0x1714>
2008ade4:	42000204 	addi	r8,r8,8
2008ade8:	d8802617 	ldw	r2,152(sp)
2008adec:	dac03317 	ldw	r11,204(sp)
2008adf0:	12c00216 	blt	r2,r11,2008adfc <___svfprintf_internal_r+0xe60>
2008adf4:	8880004c 	andi	r2,r17,1
2008adf8:	103e3d26 	beq	r2,zero,2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008adfc:	db003917 	ldw	r12,228(sp)
2008ae00:	d8801f17 	ldw	r2,124(sp)
2008ae04:	dac03517 	ldw	r11,212(sp)
2008ae08:	1b07883a 	add	r3,r3,r12
2008ae0c:	10800044 	addi	r2,r2,1
2008ae10:	42c00015 	stw	r11,0(r8)
2008ae14:	43000115 	stw	r12,4(r8)
2008ae18:	d8c02015 	stw	r3,128(sp)
2008ae1c:	d8801f15 	stw	r2,124(sp)
2008ae20:	010001c4 	movi	r4,7
2008ae24:	20826f16 	blt	r4,r2,2008b7e4 <___svfprintf_internal_r+0x1848>
2008ae28:	42000204 	addi	r8,r8,8
2008ae2c:	db003317 	ldw	r12,204(sp)
2008ae30:	643fffc4 	addi	r16,r12,-1
2008ae34:	043e2e0e 	bge	zero,r16,2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008ae38:	04800404 	movi	r18,16
2008ae3c:	d8801f17 	ldw	r2,124(sp)
2008ae40:	9400a00e 	bge	r18,r16,2008b0c4 <___svfprintf_internal_r+0x1128>
2008ae44:	01400034 	movhi	r5,0
2008ae48:	29411684 	addi	r5,r5,1114
2008ae4c:	d9402b15 	stw	r5,172(sp)
2008ae50:	054001c4 	movi	r21,7
2008ae54:	dcc02f17 	ldw	r19,188(sp)
2008ae58:	00000306 	br	2008ae68 <___svfprintf_internal_r+0xecc>
2008ae5c:	42000204 	addi	r8,r8,8
2008ae60:	843ffc04 	addi	r16,r16,-16
2008ae64:	94009a0e 	bge	r18,r16,2008b0d0 <___svfprintf_internal_r+0x1134>
2008ae68:	18c00404 	addi	r3,r3,16
2008ae6c:	10800044 	addi	r2,r2,1
2008ae70:	45000015 	stw	r20,0(r8)
2008ae74:	44800115 	stw	r18,4(r8)
2008ae78:	d8c02015 	stw	r3,128(sp)
2008ae7c:	d8801f15 	stw	r2,124(sp)
2008ae80:	a8bff60e 	bge	r21,r2,2008ae5c <__flash_rwdata_start+0xfffeecd8>
2008ae84:	9809883a 	mov	r4,r19
2008ae88:	b80b883a 	mov	r5,r23
2008ae8c:	b00d883a 	mov	r6,r22
2008ae90:	00928900 	call	20092890 <__ssprint_r>
2008ae94:	103d091e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008ae98:	d8c02017 	ldw	r3,128(sp)
2008ae9c:	d8801f17 	ldw	r2,124(sp)
2008aea0:	da000404 	addi	r8,sp,16
2008aea4:	003fee06 	br	2008ae60 <__flash_rwdata_start+0xfffeecdc>
2008aea8:	dac02e17 	ldw	r11,184(sp)
2008aeac:	db002a17 	ldw	r12,168(sp)
2008aeb0:	5b2bc83a 	sub	r21,r11,r12
2008aeb4:	057dcd0e 	bge	zero,r21,2008a5ec <__flash_rwdata_start+0xfffee468>
2008aeb8:	07000404 	movi	fp,16
2008aebc:	d8801f17 	ldw	r2,124(sp)
2008aec0:	e5435d0e 	bge	fp,r21,2008bc38 <___svfprintf_internal_r+0x1c9c>
2008aec4:	01400034 	movhi	r5,0
2008aec8:	a809883a 	mov	r4,r21
2008aecc:	29411684 	addi	r5,r5,1114
2008aed0:	dc002c15 	stw	r16,176(sp)
2008aed4:	902b883a 	mov	r21,r18
2008aed8:	d9402b15 	stw	r5,172(sp)
2008aedc:	8825883a 	mov	r18,r17
2008aee0:	04c001c4 	movi	r19,7
2008aee4:	dc002f17 	ldw	r16,188(sp)
2008aee8:	2023883a 	mov	r17,r4
2008aeec:	00000306 	br	2008aefc <___svfprintf_internal_r+0xf60>
2008aef0:	8c7ffc04 	addi	r17,r17,-16
2008aef4:	42000204 	addi	r8,r8,8
2008aef8:	e440110e 	bge	fp,r17,2008af40 <___svfprintf_internal_r+0xfa4>
2008aefc:	18c00404 	addi	r3,r3,16
2008af00:	10800044 	addi	r2,r2,1
2008af04:	45000015 	stw	r20,0(r8)
2008af08:	47000115 	stw	fp,4(r8)
2008af0c:	d8c02015 	stw	r3,128(sp)
2008af10:	d8801f15 	stw	r2,124(sp)
2008af14:	98bff60e 	bge	r19,r2,2008aef0 <__flash_rwdata_start+0xfffeed6c>
2008af18:	8009883a 	mov	r4,r16
2008af1c:	b80b883a 	mov	r5,r23
2008af20:	b00d883a 	mov	r6,r22
2008af24:	00928900 	call	20092890 <__ssprint_r>
2008af28:	103ce41e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008af2c:	8c7ffc04 	addi	r17,r17,-16
2008af30:	d8c02017 	ldw	r3,128(sp)
2008af34:	d8801f17 	ldw	r2,124(sp)
2008af38:	da000404 	addi	r8,sp,16
2008af3c:	e47fef16 	blt	fp,r17,2008aefc <__flash_rwdata_start+0xfffeed78>
2008af40:	dc002c17 	ldw	r16,176(sp)
2008af44:	8809883a 	mov	r4,r17
2008af48:	9023883a 	mov	r17,r18
2008af4c:	a825883a 	mov	r18,r21
2008af50:	202b883a 	mov	r21,r4
2008af54:	dac02b17 	ldw	r11,172(sp)
2008af58:	1d47883a 	add	r3,r3,r21
2008af5c:	10800044 	addi	r2,r2,1
2008af60:	42c00015 	stw	r11,0(r8)
2008af64:	45400115 	stw	r21,4(r8)
2008af68:	d8c02015 	stw	r3,128(sp)
2008af6c:	d8801f15 	stw	r2,124(sp)
2008af70:	010001c4 	movi	r4,7
2008af74:	20818016 	blt	r4,r2,2008b578 <___svfprintf_internal_r+0x15dc>
2008af78:	42000204 	addi	r8,r8,8
2008af7c:	003d9b06 	br	2008a5ec <__flash_rwdata_start+0xfffee468>
2008af80:	d9403b17 	ldw	r5,236(sp)
2008af84:	b007883a 	mov	r3,r22
2008af88:	988003cc 	andi	r2,r19,15
2008af8c:	e008973a 	slli	r4,fp,28
2008af90:	2885883a 	add	r2,r5,r2
2008af94:	9826d13a 	srli	r19,r19,4
2008af98:	10800003 	ldbu	r2,0(r2)
2008af9c:	e038d13a 	srli	fp,fp,4
2008afa0:	18ffffc4 	addi	r3,r3,-1
2008afa4:	24e6b03a 	or	r19,r4,r19
2008afa8:	18800005 	stb	r2,0(r3)
2008afac:	9f04b03a 	or	r2,r19,fp
2008afb0:	103ff51e 	bne	r2,zero,2008af88 <__flash_rwdata_start+0xfffeee04>
2008afb4:	d8c03115 	stw	r3,196(sp)
2008afb8:	b0e5c83a 	sub	r18,r22,r3
2008afbc:	003d1e06 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008afc0:	db003317 	ldw	r12,204(sp)
2008afc4:	00800044 	movi	r2,1
2008afc8:	18c00044 	addi	r3,r3,1
2008afcc:	13014b0e 	bge	r2,r12,2008b4fc <___svfprintf_internal_r+0x1560>
2008afd0:	dc001f17 	ldw	r16,124(sp)
2008afd4:	dac03117 	ldw	r11,196(sp)
2008afd8:	00800044 	movi	r2,1
2008afdc:	84000044 	addi	r16,r16,1
2008afe0:	40800115 	stw	r2,4(r8)
2008afe4:	42c00015 	stw	r11,0(r8)
2008afe8:	d8c02015 	stw	r3,128(sp)
2008afec:	dc001f15 	stw	r16,124(sp)
2008aff0:	008001c4 	movi	r2,7
2008aff4:	14014e16 	blt	r2,r16,2008b530 <___svfprintf_internal_r+0x1594>
2008aff8:	42000204 	addi	r8,r8,8
2008affc:	db003917 	ldw	r12,228(sp)
2008b000:	dac03517 	ldw	r11,212(sp)
2008b004:	84000044 	addi	r16,r16,1
2008b008:	1b07883a 	add	r3,r3,r12
2008b00c:	42c00015 	stw	r11,0(r8)
2008b010:	43000115 	stw	r12,4(r8)
2008b014:	d8c02015 	stw	r3,128(sp)
2008b018:	dc001f15 	stw	r16,124(sp)
2008b01c:	008001c4 	movi	r2,7
2008b020:	14014c16 	blt	r2,r16,2008b554 <___svfprintf_internal_r+0x15b8>
2008b024:	44800204 	addi	r18,r8,8
2008b028:	d9003717 	ldw	r4,220(sp)
2008b02c:	d9403817 	ldw	r5,224(sp)
2008b030:	000d883a 	mov	r6,zero
2008b034:	000f883a 	mov	r7,zero
2008b038:	d8c03e15 	stw	r3,248(sp)
2008b03c:	00963a00 	call	200963a0 <__eqdf2>
2008b040:	d8c03e17 	ldw	r3,248(sp)
2008b044:	db003317 	ldw	r12,204(sp)
2008b048:	10009526 	beq	r2,zero,2008b2a0 <___svfprintf_internal_r+0x1304>
2008b04c:	dac03117 	ldw	r11,196(sp)
2008b050:	60bfffc4 	addi	r2,r12,-1
2008b054:	1887883a 	add	r3,r3,r2
2008b058:	59000044 	addi	r4,r11,1
2008b05c:	84000044 	addi	r16,r16,1
2008b060:	90800115 	stw	r2,4(r18)
2008b064:	91000015 	stw	r4,0(r18)
2008b068:	d8c02015 	stw	r3,128(sp)
2008b06c:	dc001f15 	stw	r16,124(sp)
2008b070:	008001c4 	movi	r2,7
2008b074:	1400b316 	blt	r2,r16,2008b344 <___svfprintf_internal_r+0x13a8>
2008b078:	94800204 	addi	r18,r18,8
2008b07c:	dac03a17 	ldw	r11,232(sp)
2008b080:	dd4022c4 	addi	r21,sp,139
2008b084:	84000044 	addi	r16,r16,1
2008b088:	1ac7883a 	add	r3,r3,r11
2008b08c:	95400015 	stw	r21,0(r18)
2008b090:	92c00115 	stw	r11,4(r18)
2008b094:	d8c02015 	stw	r3,128(sp)
2008b098:	dc001f15 	stw	r16,124(sp)
2008b09c:	008001c4 	movi	r2,7
2008b0a0:	14001416 	blt	r2,r16,2008b0f4 <___svfprintf_internal_r+0x1158>
2008b0a4:	92000204 	addi	r8,r18,8
2008b0a8:	003d9106 	br	2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008b0ac:	d9002f17 	ldw	r4,188(sp)
2008b0b0:	b80b883a 	mov	r5,r23
2008b0b4:	b00d883a 	mov	r6,r22
2008b0b8:	00928900 	call	20092890 <__ssprint_r>
2008b0bc:	103dc826 	beq	r2,zero,2008a7e0 <__flash_rwdata_start+0xfffee65c>
2008b0c0:	003c7e06 	br	2008a2bc <__flash_rwdata_start+0xfffee138>
2008b0c4:	01000034 	movhi	r4,0
2008b0c8:	21011684 	addi	r4,r4,1114
2008b0cc:	d9002b15 	stw	r4,172(sp)
2008b0d0:	dac02b17 	ldw	r11,172(sp)
2008b0d4:	1c07883a 	add	r3,r3,r16
2008b0d8:	44000115 	stw	r16,4(r8)
2008b0dc:	42c00015 	stw	r11,0(r8)
2008b0e0:	10800044 	addi	r2,r2,1
2008b0e4:	d8c02015 	stw	r3,128(sp)
2008b0e8:	d8801f15 	stw	r2,124(sp)
2008b0ec:	010001c4 	movi	r4,7
2008b0f0:	20bd7e0e 	bge	r4,r2,2008a6ec <__flash_rwdata_start+0xfffee568>
2008b0f4:	d9002f17 	ldw	r4,188(sp)
2008b0f8:	b80b883a 	mov	r5,r23
2008b0fc:	b00d883a 	mov	r6,r22
2008b100:	00928900 	call	20092890 <__ssprint_r>
2008b104:	103c6d1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b108:	d8c02017 	ldw	r3,128(sp)
2008b10c:	da000404 	addi	r8,sp,16
2008b110:	003d7706 	br	2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008b114:	10803fcc 	andi	r2,r2,255
2008b118:	1000201e 	bne	r2,zero,2008b19c <___svfprintf_internal_r+0x1200>
2008b11c:	8880004c 	andi	r2,r17,1
2008b120:	10001e26 	beq	r2,zero,2008b19c <___svfprintf_internal_r+0x1200>
2008b124:	00800c04 	movi	r2,48
2008b128:	d8c01dc4 	addi	r3,sp,119
2008b12c:	d8801dc5 	stb	r2,119(sp)
2008b130:	dc803d17 	ldw	r18,244(sp)
2008b134:	d8c03115 	stw	r3,196(sp)
2008b138:	003cbf06 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008b13c:	d9002f17 	ldw	r4,188(sp)
2008b140:	b80b883a 	mov	r5,r23
2008b144:	b00d883a 	mov	r6,r22
2008b148:	00928900 	call	20092890 <__ssprint_r>
2008b14c:	103c5b1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b150:	d8c02017 	ldw	r3,128(sp)
2008b154:	da000404 	addi	r8,sp,16
2008b158:	003d5806 	br	2008a6bc <__flash_rwdata_start+0xfffee538>
2008b15c:	d9002f17 	ldw	r4,188(sp)
2008b160:	b80b883a 	mov	r5,r23
2008b164:	b00d883a 	mov	r6,r22
2008b168:	00928900 	call	20092890 <__ssprint_r>
2008b16c:	103c531e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b170:	d8c02017 	ldw	r3,128(sp)
2008b174:	da000404 	addi	r8,sp,16
2008b178:	003d1906 	br	2008a5e0 <__flash_rwdata_start+0xfffee45c>
2008b17c:	d9002f17 	ldw	r4,188(sp)
2008b180:	b80b883a 	mov	r5,r23
2008b184:	b00d883a 	mov	r6,r22
2008b188:	00928900 	call	20092890 <__ssprint_r>
2008b18c:	103c4b1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b190:	d8c02017 	ldw	r3,128(sp)
2008b194:	da000404 	addi	r8,sp,16
2008b198:	003d0306 	br	2008a5a8 <__flash_rwdata_start+0xfffee424>
2008b19c:	0025883a 	mov	r18,zero
2008b1a0:	dd803115 	stw	r22,196(sp)
2008b1a4:	003ca406 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008b1a8:	dc002617 	ldw	r16,152(sp)
2008b1ac:	0401480e 	bge	zero,r16,2008b6d0 <___svfprintf_internal_r+0x1734>
2008b1b0:	db003117 	ldw	r12,196(sp)
2008b1b4:	dac03317 	ldw	r11,204(sp)
2008b1b8:	62e1883a 	add	r16,r12,r11
2008b1bc:	db003417 	ldw	r12,208(sp)
2008b1c0:	5825883a 	mov	r18,r11
2008b1c4:	62c0010e 	bge	r12,r11,2008b1cc <___svfprintf_internal_r+0x1230>
2008b1c8:	6025883a 	mov	r18,r12
2008b1cc:	04800b0e 	bge	zero,r18,2008b1fc <___svfprintf_internal_r+0x1260>
2008b1d0:	d8801f17 	ldw	r2,124(sp)
2008b1d4:	dac03117 	ldw	r11,196(sp)
2008b1d8:	1c87883a 	add	r3,r3,r18
2008b1dc:	10800044 	addi	r2,r2,1
2008b1e0:	42c00015 	stw	r11,0(r8)
2008b1e4:	44800115 	stw	r18,4(r8)
2008b1e8:	d8c02015 	stw	r3,128(sp)
2008b1ec:	d8801f15 	stw	r2,124(sp)
2008b1f0:	010001c4 	movi	r4,7
2008b1f4:	20823f16 	blt	r4,r2,2008baf4 <___svfprintf_internal_r+0x1b58>
2008b1f8:	42000204 	addi	r8,r8,8
2008b1fc:	90023b16 	blt	r18,zero,2008baec <___svfprintf_internal_r+0x1b50>
2008b200:	db003417 	ldw	r12,208(sp)
2008b204:	64a5c83a 	sub	r18,r12,r18
2008b208:	0480780e 	bge	zero,r18,2008b3ec <___svfprintf_internal_r+0x1450>
2008b20c:	05400404 	movi	r21,16
2008b210:	d8801f17 	ldw	r2,124(sp)
2008b214:	ac81140e 	bge	r21,r18,2008b668 <___svfprintf_internal_r+0x16cc>
2008b218:	01400034 	movhi	r5,0
2008b21c:	29411684 	addi	r5,r5,1114
2008b220:	d9402b15 	stw	r5,172(sp)
2008b224:	070001c4 	movi	fp,7
2008b228:	dcc02f17 	ldw	r19,188(sp)
2008b22c:	00000306 	br	2008b23c <___svfprintf_internal_r+0x12a0>
2008b230:	42000204 	addi	r8,r8,8
2008b234:	94bffc04 	addi	r18,r18,-16
2008b238:	ac810e0e 	bge	r21,r18,2008b674 <___svfprintf_internal_r+0x16d8>
2008b23c:	18c00404 	addi	r3,r3,16
2008b240:	10800044 	addi	r2,r2,1
2008b244:	45000015 	stw	r20,0(r8)
2008b248:	45400115 	stw	r21,4(r8)
2008b24c:	d8c02015 	stw	r3,128(sp)
2008b250:	d8801f15 	stw	r2,124(sp)
2008b254:	e0bff60e 	bge	fp,r2,2008b230 <__flash_rwdata_start+0xfffef0ac>
2008b258:	9809883a 	mov	r4,r19
2008b25c:	b80b883a 	mov	r5,r23
2008b260:	b00d883a 	mov	r6,r22
2008b264:	00928900 	call	20092890 <__ssprint_r>
2008b268:	103c141e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b26c:	d8c02017 	ldw	r3,128(sp)
2008b270:	d8801f17 	ldw	r2,124(sp)
2008b274:	da000404 	addi	r8,sp,16
2008b278:	003fee06 	br	2008b234 <__flash_rwdata_start+0xfffef0b0>
2008b27c:	d9002f17 	ldw	r4,188(sp)
2008b280:	b80b883a 	mov	r5,r23
2008b284:	b00d883a 	mov	r6,r22
2008b288:	00928900 	call	20092890 <__ssprint_r>
2008b28c:	103c0b1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b290:	d8c02017 	ldw	r3,128(sp)
2008b294:	d8802787 	ldb	r2,158(sp)
2008b298:	da000404 	addi	r8,sp,16
2008b29c:	003cb506 	br	2008a574 <__flash_rwdata_start+0xfffee3f0>
2008b2a0:	657fffc4 	addi	r21,r12,-1
2008b2a4:	057f750e 	bge	zero,r21,2008b07c <__flash_rwdata_start+0xfffeeef8>
2008b2a8:	07000404 	movi	fp,16
2008b2ac:	e542ed0e 	bge	fp,r21,2008be64 <___svfprintf_internal_r+0x1ec8>
2008b2b0:	01000034 	movhi	r4,0
2008b2b4:	21011684 	addi	r4,r4,1114
2008b2b8:	d9002b15 	stw	r4,172(sp)
2008b2bc:	01c001c4 	movi	r7,7
2008b2c0:	dcc02f17 	ldw	r19,188(sp)
2008b2c4:	00000306 	br	2008b2d4 <___svfprintf_internal_r+0x1338>
2008b2c8:	ad7ffc04 	addi	r21,r21,-16
2008b2cc:	94800204 	addi	r18,r18,8
2008b2d0:	e540130e 	bge	fp,r21,2008b320 <___svfprintf_internal_r+0x1384>
2008b2d4:	18c00404 	addi	r3,r3,16
2008b2d8:	84000044 	addi	r16,r16,1
2008b2dc:	95000015 	stw	r20,0(r18)
2008b2e0:	97000115 	stw	fp,4(r18)
2008b2e4:	d8c02015 	stw	r3,128(sp)
2008b2e8:	dc001f15 	stw	r16,124(sp)
2008b2ec:	3c3ff60e 	bge	r7,r16,2008b2c8 <__flash_rwdata_start+0xfffef144>
2008b2f0:	9809883a 	mov	r4,r19
2008b2f4:	b80b883a 	mov	r5,r23
2008b2f8:	b00d883a 	mov	r6,r22
2008b2fc:	d9c03e15 	stw	r7,248(sp)
2008b300:	00928900 	call	20092890 <__ssprint_r>
2008b304:	d9c03e17 	ldw	r7,248(sp)
2008b308:	103bec1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b30c:	ad7ffc04 	addi	r21,r21,-16
2008b310:	d8c02017 	ldw	r3,128(sp)
2008b314:	dc001f17 	ldw	r16,124(sp)
2008b318:	dc800404 	addi	r18,sp,16
2008b31c:	e57fed16 	blt	fp,r21,2008b2d4 <__flash_rwdata_start+0xfffef150>
2008b320:	dac02b17 	ldw	r11,172(sp)
2008b324:	1d47883a 	add	r3,r3,r21
2008b328:	84000044 	addi	r16,r16,1
2008b32c:	92c00015 	stw	r11,0(r18)
2008b330:	95400115 	stw	r21,4(r18)
2008b334:	d8c02015 	stw	r3,128(sp)
2008b338:	dc001f15 	stw	r16,124(sp)
2008b33c:	008001c4 	movi	r2,7
2008b340:	143f4d0e 	bge	r2,r16,2008b078 <__flash_rwdata_start+0xfffeeef4>
2008b344:	d9002f17 	ldw	r4,188(sp)
2008b348:	b80b883a 	mov	r5,r23
2008b34c:	b00d883a 	mov	r6,r22
2008b350:	00928900 	call	20092890 <__ssprint_r>
2008b354:	103bd91e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b358:	d8c02017 	ldw	r3,128(sp)
2008b35c:	dc001f17 	ldw	r16,124(sp)
2008b360:	dc800404 	addi	r18,sp,16
2008b364:	003f4506 	br	2008b07c <__flash_rwdata_start+0xfffeeef8>
2008b368:	00800084 	movi	r2,2
2008b36c:	9f06b03a 	or	r3,r19,fp
2008b370:	003d5706 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008b374:	1cc00017 	ldw	r19,0(r3)
2008b378:	dac02d17 	ldw	r11,180(sp)
2008b37c:	9839d7fa 	srai	fp,r19,31
2008b380:	5ac00104 	addi	r11,r11,4
2008b384:	dac02d15 	stw	r11,180(sp)
2008b388:	e005883a 	mov	r2,fp
2008b38c:	003c0306 	br	2008a39c <__flash_rwdata_start+0xfffee218>
2008b390:	dac02d17 	ldw	r11,180(sp)
2008b394:	0039883a 	mov	fp,zero
2008b398:	0005883a 	mov	r2,zero
2008b39c:	5cc00017 	ldw	r19,0(r11)
2008b3a0:	5ac00104 	addi	r11,r11,4
2008b3a4:	dac02d15 	stw	r11,180(sp)
2008b3a8:	9807883a 	mov	r3,r19
2008b3ac:	003d4806 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008b3b0:	db002d17 	ldw	r12,180(sp)
2008b3b4:	14c00017 	ldw	r19,0(r2)
2008b3b8:	0039883a 	mov	fp,zero
2008b3bc:	63000104 	addi	r12,r12,4
2008b3c0:	db002d15 	stw	r12,180(sp)
2008b3c4:	00800044 	movi	r2,1
2008b3c8:	9807883a 	mov	r3,r19
2008b3cc:	003d4006 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008b3d0:	d9002f17 	ldw	r4,188(sp)
2008b3d4:	b80b883a 	mov	r5,r23
2008b3d8:	b00d883a 	mov	r6,r22
2008b3dc:	00928900 	call	20092890 <__ssprint_r>
2008b3e0:	103bb61e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b3e4:	d8c02017 	ldw	r3,128(sp)
2008b3e8:	da000404 	addi	r8,sp,16
2008b3ec:	db003117 	ldw	r12,196(sp)
2008b3f0:	dac03417 	ldw	r11,208(sp)
2008b3f4:	d8802617 	ldw	r2,152(sp)
2008b3f8:	62e5883a 	add	r18,r12,r11
2008b3fc:	db003317 	ldw	r12,204(sp)
2008b400:	13000216 	blt	r2,r12,2008b40c <___svfprintf_internal_r+0x1470>
2008b404:	8900004c 	andi	r4,r17,1
2008b408:	20000c26 	beq	r4,zero,2008b43c <___svfprintf_internal_r+0x14a0>
2008b40c:	dac03917 	ldw	r11,228(sp)
2008b410:	d9001f17 	ldw	r4,124(sp)
2008b414:	db003517 	ldw	r12,212(sp)
2008b418:	1ac7883a 	add	r3,r3,r11
2008b41c:	21000044 	addi	r4,r4,1
2008b420:	43000015 	stw	r12,0(r8)
2008b424:	42c00115 	stw	r11,4(r8)
2008b428:	d8c02015 	stw	r3,128(sp)
2008b42c:	d9001f15 	stw	r4,124(sp)
2008b430:	014001c4 	movi	r5,7
2008b434:	2901b716 	blt	r5,r4,2008bb14 <___svfprintf_internal_r+0x1b78>
2008b438:	42000204 	addi	r8,r8,8
2008b43c:	dac03317 	ldw	r11,204(sp)
2008b440:	8489c83a 	sub	r4,r16,r18
2008b444:	5885c83a 	sub	r2,r11,r2
2008b448:	1021883a 	mov	r16,r2
2008b44c:	2080010e 	bge	r4,r2,2008b454 <___svfprintf_internal_r+0x14b8>
2008b450:	2021883a 	mov	r16,r4
2008b454:	04000a0e 	bge	zero,r16,2008b480 <___svfprintf_internal_r+0x14e4>
2008b458:	d9001f17 	ldw	r4,124(sp)
2008b45c:	1c07883a 	add	r3,r3,r16
2008b460:	44800015 	stw	r18,0(r8)
2008b464:	21000044 	addi	r4,r4,1
2008b468:	44000115 	stw	r16,4(r8)
2008b46c:	d8c02015 	stw	r3,128(sp)
2008b470:	d9001f15 	stw	r4,124(sp)
2008b474:	014001c4 	movi	r5,7
2008b478:	2901bf16 	blt	r5,r4,2008bb78 <___svfprintf_internal_r+0x1bdc>
2008b47c:	42000204 	addi	r8,r8,8
2008b480:	8001bb16 	blt	r16,zero,2008bb70 <___svfprintf_internal_r+0x1bd4>
2008b484:	1421c83a 	sub	r16,r2,r16
2008b488:	043c990e 	bge	zero,r16,2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008b48c:	04800404 	movi	r18,16
2008b490:	d8801f17 	ldw	r2,124(sp)
2008b494:	943f0b0e 	bge	r18,r16,2008b0c4 <__flash_rwdata_start+0xfffeef40>
2008b498:	01400034 	movhi	r5,0
2008b49c:	29411684 	addi	r5,r5,1114
2008b4a0:	d9402b15 	stw	r5,172(sp)
2008b4a4:	054001c4 	movi	r21,7
2008b4a8:	dcc02f17 	ldw	r19,188(sp)
2008b4ac:	00000306 	br	2008b4bc <___svfprintf_internal_r+0x1520>
2008b4b0:	42000204 	addi	r8,r8,8
2008b4b4:	843ffc04 	addi	r16,r16,-16
2008b4b8:	943f050e 	bge	r18,r16,2008b0d0 <__flash_rwdata_start+0xfffeef4c>
2008b4bc:	18c00404 	addi	r3,r3,16
2008b4c0:	10800044 	addi	r2,r2,1
2008b4c4:	45000015 	stw	r20,0(r8)
2008b4c8:	44800115 	stw	r18,4(r8)
2008b4cc:	d8c02015 	stw	r3,128(sp)
2008b4d0:	d8801f15 	stw	r2,124(sp)
2008b4d4:	a8bff60e 	bge	r21,r2,2008b4b0 <__flash_rwdata_start+0xfffef32c>
2008b4d8:	9809883a 	mov	r4,r19
2008b4dc:	b80b883a 	mov	r5,r23
2008b4e0:	b00d883a 	mov	r6,r22
2008b4e4:	00928900 	call	20092890 <__ssprint_r>
2008b4e8:	103b741e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b4ec:	d8c02017 	ldw	r3,128(sp)
2008b4f0:	d8801f17 	ldw	r2,124(sp)
2008b4f4:	da000404 	addi	r8,sp,16
2008b4f8:	003fee06 	br	2008b4b4 <__flash_rwdata_start+0xfffef330>
2008b4fc:	8888703a 	and	r4,r17,r2
2008b500:	203eb31e 	bne	r4,zero,2008afd0 <__flash_rwdata_start+0xfffeee4c>
2008b504:	dc001f17 	ldw	r16,124(sp)
2008b508:	db003117 	ldw	r12,196(sp)
2008b50c:	40800115 	stw	r2,4(r8)
2008b510:	84000044 	addi	r16,r16,1
2008b514:	43000015 	stw	r12,0(r8)
2008b518:	d8c02015 	stw	r3,128(sp)
2008b51c:	dc001f15 	stw	r16,124(sp)
2008b520:	008001c4 	movi	r2,7
2008b524:	143f8716 	blt	r2,r16,2008b344 <__flash_rwdata_start+0xfffef1c0>
2008b528:	44800204 	addi	r18,r8,8
2008b52c:	003ed306 	br	2008b07c <__flash_rwdata_start+0xfffeeef8>
2008b530:	d9002f17 	ldw	r4,188(sp)
2008b534:	b80b883a 	mov	r5,r23
2008b538:	b00d883a 	mov	r6,r22
2008b53c:	00928900 	call	20092890 <__ssprint_r>
2008b540:	103b5e1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b544:	d8c02017 	ldw	r3,128(sp)
2008b548:	dc001f17 	ldw	r16,124(sp)
2008b54c:	da000404 	addi	r8,sp,16
2008b550:	003eaa06 	br	2008affc <__flash_rwdata_start+0xfffeee78>
2008b554:	d9002f17 	ldw	r4,188(sp)
2008b558:	b80b883a 	mov	r5,r23
2008b55c:	b00d883a 	mov	r6,r22
2008b560:	00928900 	call	20092890 <__ssprint_r>
2008b564:	103b551e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b568:	d8c02017 	ldw	r3,128(sp)
2008b56c:	dc001f17 	ldw	r16,124(sp)
2008b570:	dc800404 	addi	r18,sp,16
2008b574:	003eac06 	br	2008b028 <__flash_rwdata_start+0xfffeeea4>
2008b578:	d9002f17 	ldw	r4,188(sp)
2008b57c:	b80b883a 	mov	r5,r23
2008b580:	b00d883a 	mov	r6,r22
2008b584:	00928900 	call	20092890 <__ssprint_r>
2008b588:	103b4c1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b58c:	d8c02017 	ldw	r3,128(sp)
2008b590:	da000404 	addi	r8,sp,16
2008b594:	003c1506 	br	2008a5ec <__flash_rwdata_start+0xfffee468>
2008b598:	da004015 	stw	r8,256(sp)
2008b59c:	da403f15 	stw	r9,252(sp)
2008b5a0:	009257c0 	call	2009257c <__fpclassifyd>
2008b5a4:	da004017 	ldw	r8,256(sp)
2008b5a8:	da403f17 	ldw	r9,252(sp)
2008b5ac:	1000951e 	bne	r2,zero,2008b804 <___svfprintf_internal_r+0x1868>
2008b5b0:	008011c4 	movi	r2,71
2008b5b4:	1400fb16 	blt	r2,r16,2008b9a4 <___svfprintf_internal_r+0x1a08>
2008b5b8:	03000034 	movhi	r12,0
2008b5bc:	63010804 	addi	r12,r12,1056
2008b5c0:	db003115 	stw	r12,196(sp)
2008b5c4:	00c000c4 	movi	r3,3
2008b5c8:	00bfdfc4 	movi	r2,-129
2008b5cc:	d8c02a15 	stw	r3,168(sp)
2008b5d0:	88a2703a 	and	r17,r17,r2
2008b5d4:	dd402783 	ldbu	r21,158(sp)
2008b5d8:	dcc02d15 	stw	r19,180(sp)
2008b5dc:	1825883a 	mov	r18,r3
2008b5e0:	d8003215 	stw	zero,200(sp)
2008b5e4:	d8003415 	stw	zero,208(sp)
2008b5e8:	003b9806 	br	2008a44c <__flash_rwdata_start+0xfffee2c8>
2008b5ec:	1c000007 	ldb	r16,0(r3)
2008b5f0:	1805883a 	mov	r2,r3
2008b5f4:	003abf06 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008b5f8:	00800084 	movi	r2,2
2008b5fc:	003cb406 	br	2008a8d0 <__flash_rwdata_start+0xfffee74c>
2008b600:	88c0100c 	andi	r3,r17,64
2008b604:	1800f626 	beq	r3,zero,2008b9e0 <___svfprintf_internal_r+0x1a44>
2008b608:	dac02d17 	ldw	r11,180(sp)
2008b60c:	14c0000b 	ldhu	r19,0(r2)
2008b610:	0039883a 	mov	fp,zero
2008b614:	5ac00104 	addi	r11,r11,4
2008b618:	dac02d15 	stw	r11,180(sp)
2008b61c:	003cbd06 	br	2008a914 <__flash_rwdata_start+0xfffee790>
2008b620:	8880040c 	andi	r2,r17,16
2008b624:	1000091e 	bne	r2,zero,2008b64c <___svfprintf_internal_r+0x16b0>
2008b628:	8c40100c 	andi	r17,r17,64
2008b62c:	88000726 	beq	r17,zero,2008b64c <___svfprintf_internal_r+0x16b0>
2008b630:	db002d17 	ldw	r12,180(sp)
2008b634:	dac03017 	ldw	r11,192(sp)
2008b638:	60800017 	ldw	r2,0(r12)
2008b63c:	63000104 	addi	r12,r12,4
2008b640:	db002d15 	stw	r12,180(sp)
2008b644:	12c0000d 	sth	r11,0(r2)
2008b648:	003a8006 	br	2008a04c <__flash_rwdata_start+0xfffedec8>
2008b64c:	db002d17 	ldw	r12,180(sp)
2008b650:	dac03017 	ldw	r11,192(sp)
2008b654:	60800017 	ldw	r2,0(r12)
2008b658:	63000104 	addi	r12,r12,4
2008b65c:	db002d15 	stw	r12,180(sp)
2008b660:	12c00015 	stw	r11,0(r2)
2008b664:	003a7906 	br	2008a04c <__flash_rwdata_start+0xfffedec8>
2008b668:	01000034 	movhi	r4,0
2008b66c:	21011684 	addi	r4,r4,1114
2008b670:	d9002b15 	stw	r4,172(sp)
2008b674:	dac02b17 	ldw	r11,172(sp)
2008b678:	1c87883a 	add	r3,r3,r18
2008b67c:	10800044 	addi	r2,r2,1
2008b680:	42c00015 	stw	r11,0(r8)
2008b684:	44800115 	stw	r18,4(r8)
2008b688:	d8c02015 	stw	r3,128(sp)
2008b68c:	d8801f15 	stw	r2,124(sp)
2008b690:	010001c4 	movi	r4,7
2008b694:	20bf4e16 	blt	r4,r2,2008b3d0 <__flash_rwdata_start+0xfffef24c>
2008b698:	42000204 	addi	r8,r8,8
2008b69c:	003f5306 	br	2008b3ec <__flash_rwdata_start+0xfffef268>
2008b6a0:	01000034 	movhi	r4,0
2008b6a4:	21011684 	addi	r4,r4,1114
2008b6a8:	d9002b15 	stw	r4,172(sp)
2008b6ac:	003bf906 	br	2008a694 <__flash_rwdata_start+0xfffee510>
2008b6b0:	d9002f17 	ldw	r4,188(sp)
2008b6b4:	b80b883a 	mov	r5,r23
2008b6b8:	b00d883a 	mov	r6,r22
2008b6bc:	00928900 	call	20092890 <__ssprint_r>
2008b6c0:	103afe1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b6c4:	d8c02017 	ldw	r3,128(sp)
2008b6c8:	da000404 	addi	r8,sp,16
2008b6cc:	003dc606 	br	2008ade8 <__flash_rwdata_start+0xfffeec64>
2008b6d0:	d8801f17 	ldw	r2,124(sp)
2008b6d4:	03000034 	movhi	r12,0
2008b6d8:	01000044 	movi	r4,1
2008b6dc:	18c00044 	addi	r3,r3,1
2008b6e0:	10800044 	addi	r2,r2,1
2008b6e4:	63011604 	addi	r12,r12,1112
2008b6e8:	41000115 	stw	r4,4(r8)
2008b6ec:	43000015 	stw	r12,0(r8)
2008b6f0:	d8c02015 	stw	r3,128(sp)
2008b6f4:	d8801f15 	stw	r2,124(sp)
2008b6f8:	010001c4 	movi	r4,7
2008b6fc:	2080ad16 	blt	r4,r2,2008b9b4 <___svfprintf_internal_r+0x1a18>
2008b700:	42000204 	addi	r8,r8,8
2008b704:	8000041e 	bne	r16,zero,2008b718 <___svfprintf_internal_r+0x177c>
2008b708:	dac03317 	ldw	r11,204(sp)
2008b70c:	5800021e 	bne	r11,zero,2008b718 <___svfprintf_internal_r+0x177c>
2008b710:	8880004c 	andi	r2,r17,1
2008b714:	103bf626 	beq	r2,zero,2008a6f0 <__flash_rwdata_start+0xfffee56c>
2008b718:	db003917 	ldw	r12,228(sp)
2008b71c:	d8801f17 	ldw	r2,124(sp)
2008b720:	dac03517 	ldw	r11,212(sp)
2008b724:	1b07883a 	add	r3,r3,r12
2008b728:	10800044 	addi	r2,r2,1
2008b72c:	42c00015 	stw	r11,0(r8)
2008b730:	43000115 	stw	r12,4(r8)
2008b734:	d8c02015 	stw	r3,128(sp)
2008b738:	d8801f15 	stw	r2,124(sp)
2008b73c:	010001c4 	movi	r4,7
2008b740:	20818616 	blt	r4,r2,2008bd5c <___svfprintf_internal_r+0x1dc0>
2008b744:	42000204 	addi	r8,r8,8
2008b748:	0421c83a 	sub	r16,zero,r16
2008b74c:	0400bc0e 	bge	zero,r16,2008ba40 <___svfprintf_internal_r+0x1aa4>
2008b750:	04800404 	movi	r18,16
2008b754:	9400f80e 	bge	r18,r16,2008bb38 <___svfprintf_internal_r+0x1b9c>
2008b758:	01000034 	movhi	r4,0
2008b75c:	21011684 	addi	r4,r4,1114
2008b760:	d9002b15 	stw	r4,172(sp)
2008b764:	054001c4 	movi	r21,7
2008b768:	dcc02f17 	ldw	r19,188(sp)
2008b76c:	00000306 	br	2008b77c <___svfprintf_internal_r+0x17e0>
2008b770:	42000204 	addi	r8,r8,8
2008b774:	843ffc04 	addi	r16,r16,-16
2008b778:	9400f20e 	bge	r18,r16,2008bb44 <___svfprintf_internal_r+0x1ba8>
2008b77c:	18c00404 	addi	r3,r3,16
2008b780:	10800044 	addi	r2,r2,1
2008b784:	45000015 	stw	r20,0(r8)
2008b788:	44800115 	stw	r18,4(r8)
2008b78c:	d8c02015 	stw	r3,128(sp)
2008b790:	d8801f15 	stw	r2,124(sp)
2008b794:	a8bff60e 	bge	r21,r2,2008b770 <__flash_rwdata_start+0xfffef5ec>
2008b798:	9809883a 	mov	r4,r19
2008b79c:	b80b883a 	mov	r5,r23
2008b7a0:	b00d883a 	mov	r6,r22
2008b7a4:	00928900 	call	20092890 <__ssprint_r>
2008b7a8:	103ac41e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b7ac:	d8c02017 	ldw	r3,128(sp)
2008b7b0:	d8801f17 	ldw	r2,124(sp)
2008b7b4:	da000404 	addi	r8,sp,16
2008b7b8:	003fee06 	br	2008b774 <__flash_rwdata_start+0xfffef5f0>
2008b7bc:	db002e17 	ldw	r12,184(sp)
2008b7c0:	1805883a 	mov	r2,r3
2008b7c4:	dac02d15 	stw	r11,180(sp)
2008b7c8:	0319c83a 	sub	r12,zero,r12
2008b7cc:	db002e15 	stw	r12,184(sp)
2008b7d0:	003acf06 	br	2008a310 <__flash_rwdata_start+0xfffee18c>
2008b7d4:	18800044 	addi	r2,r3,1
2008b7d8:	8c400814 	ori	r17,r17,32
2008b7dc:	1c000047 	ldb	r16,1(r3)
2008b7e0:	003a4406 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008b7e4:	d9002f17 	ldw	r4,188(sp)
2008b7e8:	b80b883a 	mov	r5,r23
2008b7ec:	b00d883a 	mov	r6,r22
2008b7f0:	00928900 	call	20092890 <__ssprint_r>
2008b7f4:	103ab11e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b7f8:	d8c02017 	ldw	r3,128(sp)
2008b7fc:	da000404 	addi	r8,sp,16
2008b800:	003d8a06 	br	2008ae2c <__flash_rwdata_start+0xfffeeca8>
2008b804:	057ff7c4 	movi	r21,-33
2008b808:	00bfffc4 	movi	r2,-1
2008b80c:	856a703a 	and	r21,r16,r21
2008b810:	48807126 	beq	r9,r2,2008b9d8 <___svfprintf_internal_r+0x1a3c>
2008b814:	008011c4 	movi	r2,71
2008b818:	a8814d26 	beq	r21,r2,2008bd50 <___svfprintf_internal_r+0x1db4>
2008b81c:	db003817 	ldw	r12,224(sp)
2008b820:	8ac04014 	ori	r11,r17,256
2008b824:	dac02d15 	stw	r11,180(sp)
2008b828:	60015616 	blt	r12,zero,2008bd84 <___svfprintf_internal_r+0x1de8>
2008b82c:	dc803817 	ldw	r18,224(sp)
2008b830:	d8002a05 	stb	zero,168(sp)
2008b834:	00801984 	movi	r2,102
2008b838:	80808c26 	beq	r16,r2,2008ba6c <___svfprintf_internal_r+0x1ad0>
2008b83c:	00801184 	movi	r2,70
2008b840:	80808a26 	beq	r16,r2,2008ba6c <___svfprintf_internal_r+0x1ad0>
2008b844:	00801144 	movi	r2,69
2008b848:	a8815226 	beq	r21,r2,2008bd94 <___svfprintf_internal_r+0x1df8>
2008b84c:	4839883a 	mov	fp,r9
2008b850:	d8802604 	addi	r2,sp,152
2008b854:	d8800115 	stw	r2,4(sp)
2008b858:	d9002f17 	ldw	r4,188(sp)
2008b85c:	d8802504 	addi	r2,sp,148
2008b860:	d9403717 	ldw	r5,220(sp)
2008b864:	d8800215 	stw	r2,8(sp)
2008b868:	d8802104 	addi	r2,sp,132
2008b86c:	df000015 	stw	fp,0(sp)
2008b870:	d8800315 	stw	r2,12(sp)
2008b874:	900d883a 	mov	r6,r18
2008b878:	01c00084 	movi	r7,2
2008b87c:	da004015 	stw	r8,256(sp)
2008b880:	da403f15 	stw	r9,252(sp)
2008b884:	008e3e00 	call	2008e3e0 <_dtoa_r>
2008b888:	d8803115 	stw	r2,196(sp)
2008b88c:	008019c4 	movi	r2,103
2008b890:	da004017 	ldw	r8,256(sp)
2008b894:	da403f17 	ldw	r9,252(sp)
2008b898:	80800226 	beq	r16,r2,2008b8a4 <___svfprintf_internal_r+0x1908>
2008b89c:	008011c4 	movi	r2,71
2008b8a0:	8080841e 	bne	r16,r2,2008bab4 <___svfprintf_internal_r+0x1b18>
2008b8a4:	8880004c 	andi	r2,r17,1
2008b8a8:	10014f26 	beq	r2,zero,2008bde8 <___svfprintf_internal_r+0x1e4c>
2008b8ac:	db003117 	ldw	r12,196(sp)
2008b8b0:	6715883a 	add	r10,r12,fp
2008b8b4:	d9003717 	ldw	r4,220(sp)
2008b8b8:	900b883a 	mov	r5,r18
2008b8bc:	000d883a 	mov	r6,zero
2008b8c0:	000f883a 	mov	r7,zero
2008b8c4:	da004015 	stw	r8,256(sp)
2008b8c8:	da403f15 	stw	r9,252(sp)
2008b8cc:	da803e15 	stw	r10,248(sp)
2008b8d0:	00963a00 	call	200963a0 <__eqdf2>
2008b8d4:	da004017 	ldw	r8,256(sp)
2008b8d8:	da403f17 	ldw	r9,252(sp)
2008b8dc:	da803e17 	ldw	r10,248(sp)
2008b8e0:	1000d926 	beq	r2,zero,2008bc48 <___svfprintf_internal_r+0x1cac>
2008b8e4:	d8802117 	ldw	r2,132(sp)
2008b8e8:	1280062e 	bgeu	r2,r10,2008b904 <___svfprintf_internal_r+0x1968>
2008b8ec:	01000c04 	movi	r4,48
2008b8f0:	10c00044 	addi	r3,r2,1
2008b8f4:	d8c02115 	stw	r3,132(sp)
2008b8f8:	11000005 	stb	r4,0(r2)
2008b8fc:	d8802117 	ldw	r2,132(sp)
2008b900:	12bffb36 	bltu	r2,r10,2008b8f0 <__flash_rwdata_start+0xfffef76c>
2008b904:	db003117 	ldw	r12,196(sp)
2008b908:	1305c83a 	sub	r2,r2,r12
2008b90c:	d8803315 	stw	r2,204(sp)
2008b910:	008011c4 	movi	r2,71
2008b914:	a880b626 	beq	r21,r2,2008bbf0 <___svfprintf_internal_r+0x1c54>
2008b918:	00801944 	movi	r2,101
2008b91c:	14017c0e 	bge	r2,r16,2008bf10 <___svfprintf_internal_r+0x1f74>
2008b920:	00801984 	movi	r2,102
2008b924:	80812626 	beq	r16,r2,2008bdc0 <___svfprintf_internal_r+0x1e24>
2008b928:	db002617 	ldw	r12,152(sp)
2008b92c:	db003415 	stw	r12,208(sp)
2008b930:	db003417 	ldw	r12,208(sp)
2008b934:	dac03317 	ldw	r11,204(sp)
2008b938:	62c11816 	blt	r12,r11,2008bd9c <___svfprintf_internal_r+0x1e00>
2008b93c:	8c40004c 	andi	r17,r17,1
2008b940:	88013b1e 	bne	r17,zero,2008be30 <___svfprintf_internal_r+0x1e94>
2008b944:	6005883a 	mov	r2,r12
2008b948:	60012516 	blt	r12,zero,2008bde0 <___svfprintf_internal_r+0x1e44>
2008b94c:	dc803417 	ldw	r18,208(sp)
2008b950:	df002a07 	ldb	fp,168(sp)
2008b954:	e000b01e 	bne	fp,zero,2008bc18 <___svfprintf_internal_r+0x1c7c>
2008b958:	dc402d17 	ldw	r17,180(sp)
2008b95c:	dd402783 	ldbu	r21,158(sp)
2008b960:	d8802a15 	stw	r2,168(sp)
2008b964:	dcc02d15 	stw	r19,180(sp)
2008b968:	d8003215 	stw	zero,200(sp)
2008b96c:	003ab706 	br	2008a44c <__flash_rwdata_start+0xfffee2c8>
2008b970:	00800034 	movhi	r2,0
2008b974:	10810604 	addi	r2,r2,1048
2008b978:	d8803115 	stw	r2,196(sp)
2008b97c:	003bbb06 	br	2008a86c <__flash_rwdata_start+0xfffee6e8>
2008b980:	d9002f17 	ldw	r4,188(sp)
2008b984:	04001004 	movi	r16,64
2008b988:	800b883a 	mov	r5,r16
2008b98c:	008913c0 	call	2008913c <_malloc_r>
2008b990:	b8800015 	stw	r2,0(r23)
2008b994:	b8800415 	stw	r2,16(r23)
2008b998:	10015f26 	beq	r2,zero,2008bf18 <___svfprintf_internal_r+0x1f7c>
2008b99c:	bc000515 	stw	r16,20(r23)
2008b9a0:	00399806 	br	2008a004 <__flash_rwdata_start+0xfffede80>
2008b9a4:	00800034 	movhi	r2,0
2008b9a8:	10810904 	addi	r2,r2,1060
2008b9ac:	d8803115 	stw	r2,196(sp)
2008b9b0:	003f0406 	br	2008b5c4 <__flash_rwdata_start+0xfffef440>
2008b9b4:	d9002f17 	ldw	r4,188(sp)
2008b9b8:	b80b883a 	mov	r5,r23
2008b9bc:	b00d883a 	mov	r6,r22
2008b9c0:	00928900 	call	20092890 <__ssprint_r>
2008b9c4:	103a3d1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008b9c8:	dc002617 	ldw	r16,152(sp)
2008b9cc:	d8c02017 	ldw	r3,128(sp)
2008b9d0:	da000404 	addi	r8,sp,16
2008b9d4:	003f4b06 	br	2008b704 <__flash_rwdata_start+0xfffef580>
2008b9d8:	02400184 	movi	r9,6
2008b9dc:	003f8f06 	br	2008b81c <__flash_rwdata_start+0xfffef698>
2008b9e0:	db002d17 	ldw	r12,180(sp)
2008b9e4:	14c00017 	ldw	r19,0(r2)
2008b9e8:	0039883a 	mov	fp,zero
2008b9ec:	63000104 	addi	r12,r12,4
2008b9f0:	db002d15 	stw	r12,180(sp)
2008b9f4:	003bc706 	br	2008a914 <__flash_rwdata_start+0xfffee790>
2008b9f8:	d8c03117 	ldw	r3,196(sp)
2008b9fc:	b0e5c83a 	sub	r18,r22,r3
2008ba00:	003a8d06 	br	2008a438 <__flash_rwdata_start+0xfffee2b4>
2008ba04:	da004015 	stw	r8,256(sp)
2008ba08:	0089e9c0 	call	20089e9c <strlen>
2008ba0c:	1025883a 	mov	r18,r2
2008ba10:	da004017 	ldw	r8,256(sp)
2008ba14:	903bf20e 	bge	r18,zero,2008a9e0 <__flash_rwdata_start+0xfffee85c>
2008ba18:	0005883a 	mov	r2,zero
2008ba1c:	003bf006 	br	2008a9e0 <__flash_rwdata_start+0xfffee85c>
2008ba20:	d9002f17 	ldw	r4,188(sp)
2008ba24:	b80b883a 	mov	r5,r23
2008ba28:	b00d883a 	mov	r6,r22
2008ba2c:	00928900 	call	20092890 <__ssprint_r>
2008ba30:	103a221e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008ba34:	d8c02017 	ldw	r3,128(sp)
2008ba38:	d8801f17 	ldw	r2,124(sp)
2008ba3c:	da000404 	addi	r8,sp,16
2008ba40:	db003317 	ldw	r12,204(sp)
2008ba44:	dac03117 	ldw	r11,196(sp)
2008ba48:	10800044 	addi	r2,r2,1
2008ba4c:	1b07883a 	add	r3,r3,r12
2008ba50:	42c00015 	stw	r11,0(r8)
2008ba54:	43000115 	stw	r12,4(r8)
2008ba58:	d8c02015 	stw	r3,128(sp)
2008ba5c:	d8801f15 	stw	r2,124(sp)
2008ba60:	010001c4 	movi	r4,7
2008ba64:	20bb210e 	bge	r4,r2,2008a6ec <__flash_rwdata_start+0xfffee568>
2008ba68:	003da206 	br	2008b0f4 <__flash_rwdata_start+0xfffeef70>
2008ba6c:	d8802604 	addi	r2,sp,152
2008ba70:	d8800115 	stw	r2,4(sp)
2008ba74:	d9002f17 	ldw	r4,188(sp)
2008ba78:	d8802504 	addi	r2,sp,148
2008ba7c:	d9403717 	ldw	r5,220(sp)
2008ba80:	d8800215 	stw	r2,8(sp)
2008ba84:	d8802104 	addi	r2,sp,132
2008ba88:	da400015 	stw	r9,0(sp)
2008ba8c:	d8800315 	stw	r2,12(sp)
2008ba90:	900d883a 	mov	r6,r18
2008ba94:	01c000c4 	movi	r7,3
2008ba98:	da004015 	stw	r8,256(sp)
2008ba9c:	da403f15 	stw	r9,252(sp)
2008baa0:	008e3e00 	call	2008e3e0 <_dtoa_r>
2008baa4:	da403f17 	ldw	r9,252(sp)
2008baa8:	da004017 	ldw	r8,256(sp)
2008baac:	d8803115 	stw	r2,196(sp)
2008bab0:	4839883a 	mov	fp,r9
2008bab4:	dac03117 	ldw	r11,196(sp)
2008bab8:	00801184 	movi	r2,70
2008babc:	5f15883a 	add	r10,r11,fp
2008bac0:	a8bf7c1e 	bne	r21,r2,2008b8b4 <__flash_rwdata_start+0xfffef730>
2008bac4:	59000007 	ldb	r4,0(r11)
2008bac8:	00800c04 	movi	r2,48
2008bacc:	2080c826 	beq	r4,r2,2008bdf0 <___svfprintf_internal_r+0x1e54>
2008bad0:	d8c02617 	ldw	r3,152(sp)
2008bad4:	50d5883a 	add	r10,r10,r3
2008bad8:	003f7606 	br	2008b8b4 <__flash_rwdata_start+0xfffef730>
2008badc:	01000034 	movhi	r4,0
2008bae0:	21011a84 	addi	r4,r4,1130
2008bae4:	d9003615 	stw	r4,216(sp)
2008bae8:	003a9706 	br	2008a548 <__flash_rwdata_start+0xfffee3c4>
2008baec:	0025883a 	mov	r18,zero
2008baf0:	003dc306 	br	2008b200 <__flash_rwdata_start+0xfffef07c>
2008baf4:	d9002f17 	ldw	r4,188(sp)
2008baf8:	b80b883a 	mov	r5,r23
2008bafc:	b00d883a 	mov	r6,r22
2008bb00:	00928900 	call	20092890 <__ssprint_r>
2008bb04:	1039ed1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008bb08:	d8c02017 	ldw	r3,128(sp)
2008bb0c:	da000404 	addi	r8,sp,16
2008bb10:	003dba06 	br	2008b1fc <__flash_rwdata_start+0xfffef078>
2008bb14:	d9002f17 	ldw	r4,188(sp)
2008bb18:	b80b883a 	mov	r5,r23
2008bb1c:	b00d883a 	mov	r6,r22
2008bb20:	00928900 	call	20092890 <__ssprint_r>
2008bb24:	1039e51e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008bb28:	d8802617 	ldw	r2,152(sp)
2008bb2c:	d8c02017 	ldw	r3,128(sp)
2008bb30:	da000404 	addi	r8,sp,16
2008bb34:	003e4106 	br	2008b43c <__flash_rwdata_start+0xfffef2b8>
2008bb38:	03000034 	movhi	r12,0
2008bb3c:	63011684 	addi	r12,r12,1114
2008bb40:	db002b15 	stw	r12,172(sp)
2008bb44:	dac02b17 	ldw	r11,172(sp)
2008bb48:	1c07883a 	add	r3,r3,r16
2008bb4c:	10800044 	addi	r2,r2,1
2008bb50:	42c00015 	stw	r11,0(r8)
2008bb54:	44000115 	stw	r16,4(r8)
2008bb58:	d8c02015 	stw	r3,128(sp)
2008bb5c:	d8801f15 	stw	r2,124(sp)
2008bb60:	010001c4 	movi	r4,7
2008bb64:	20bfae16 	blt	r4,r2,2008ba20 <__flash_rwdata_start+0xfffef89c>
2008bb68:	42000204 	addi	r8,r8,8
2008bb6c:	003fb406 	br	2008ba40 <__flash_rwdata_start+0xfffef8bc>
2008bb70:	0021883a 	mov	r16,zero
2008bb74:	003e4306 	br	2008b484 <__flash_rwdata_start+0xfffef300>
2008bb78:	d9002f17 	ldw	r4,188(sp)
2008bb7c:	b80b883a 	mov	r5,r23
2008bb80:	b00d883a 	mov	r6,r22
2008bb84:	00928900 	call	20092890 <__ssprint_r>
2008bb88:	1039cc1e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008bb8c:	d8802617 	ldw	r2,152(sp)
2008bb90:	db003317 	ldw	r12,204(sp)
2008bb94:	d8c02017 	ldw	r3,128(sp)
2008bb98:	da000404 	addi	r8,sp,16
2008bb9c:	6085c83a 	sub	r2,r12,r2
2008bba0:	003e3706 	br	2008b480 <__flash_rwdata_start+0xfffef2fc>
2008bba4:	00800184 	movi	r2,6
2008bba8:	1240012e 	bgeu	r2,r9,2008bbb0 <___svfprintf_internal_r+0x1c14>
2008bbac:	1013883a 	mov	r9,r2
2008bbb0:	4825883a 	mov	r18,r9
2008bbb4:	4805883a 	mov	r2,r9
2008bbb8:	4800a216 	blt	r9,zero,2008be44 <___svfprintf_internal_r+0x1ea8>
2008bbbc:	d8802a15 	stw	r2,168(sp)
2008bbc0:	00800034 	movhi	r2,0
2008bbc4:	10811404 	addi	r2,r2,1104
2008bbc8:	d8803115 	stw	r2,196(sp)
2008bbcc:	dcc02d15 	stw	r19,180(sp)
2008bbd0:	d8003215 	stw	zero,200(sp)
2008bbd4:	d8003415 	stw	zero,208(sp)
2008bbd8:	0005883a 	mov	r2,zero
2008bbdc:	003a2206 	br	2008a468 <__flash_rwdata_start+0xfffee2e4>
2008bbe0:	03000034 	movhi	r12,0
2008bbe4:	63011a84 	addi	r12,r12,1130
2008bbe8:	db003615 	stw	r12,216(sp)
2008bbec:	003ae506 	br	2008a784 <__flash_rwdata_start+0xfffee600>
2008bbf0:	d8c02617 	ldw	r3,152(sp)
2008bbf4:	00bfff44 	movi	r2,-3
2008bbf8:	18801516 	blt	r3,r2,2008bc50 <___svfprintf_internal_r+0x1cb4>
2008bbfc:	48c01416 	blt	r9,r3,2008bc50 <___svfprintf_internal_r+0x1cb4>
2008bc00:	d8c03415 	stw	r3,208(sp)
2008bc04:	040019c4 	movi	r16,103
2008bc08:	003f4906 	br	2008b930 <__flash_rwdata_start+0xfffef7ac>
2008bc0c:	05400b44 	movi	r21,45
2008bc10:	dd402785 	stb	r21,158(sp)
2008bc14:	003b1006 	br	2008a858 <__flash_rwdata_start+0xfffee6d4>
2008bc18:	00c00b44 	movi	r3,45
2008bc1c:	d8802a15 	stw	r2,168(sp)
2008bc20:	dc402d17 	ldw	r17,180(sp)
2008bc24:	d8c02785 	stb	r3,158(sp)
2008bc28:	dcc02d15 	stw	r19,180(sp)
2008bc2c:	d8003215 	stw	zero,200(sp)
2008bc30:	00800b44 	movi	r2,45
2008bc34:	003a0906 	br	2008a45c <__flash_rwdata_start+0xfffee2d8>
2008bc38:	01000034 	movhi	r4,0
2008bc3c:	21011684 	addi	r4,r4,1114
2008bc40:	d9002b15 	stw	r4,172(sp)
2008bc44:	003cc306 	br	2008af54 <__flash_rwdata_start+0xfffeedd0>
2008bc48:	5005883a 	mov	r2,r10
2008bc4c:	003f2d06 	br	2008b904 <__flash_rwdata_start+0xfffef780>
2008bc50:	843fff84 	addi	r16,r16,-2
2008bc54:	1f3fffc4 	addi	fp,r3,-1
2008bc58:	df002615 	stw	fp,152(sp)
2008bc5c:	dc0022c5 	stb	r16,139(sp)
2008bc60:	e000a016 	blt	fp,zero,2008bee4 <___svfprintf_internal_r+0x1f48>
2008bc64:	00800ac4 	movi	r2,43
2008bc68:	d8802305 	stb	r2,140(sp)
2008bc6c:	00800244 	movi	r2,9
2008bc70:	1700800e 	bge	r2,fp,2008be74 <___svfprintf_internal_r+0x1ed8>
2008bc74:	dd4022c4 	addi	r21,sp,139
2008bc78:	dc002b15 	stw	r16,172(sp)
2008bc7c:	4025883a 	mov	r18,r8
2008bc80:	a821883a 	mov	r16,r21
2008bc84:	e009883a 	mov	r4,fp
2008bc88:	01400284 	movi	r5,10
2008bc8c:	00866140 	call	20086614 <__modsi3>
2008bc90:	10800c04 	addi	r2,r2,48
2008bc94:	843fffc4 	addi	r16,r16,-1
2008bc98:	e009883a 	mov	r4,fp
2008bc9c:	01400284 	movi	r5,10
2008bca0:	80800005 	stb	r2,0(r16)
2008bca4:	00865c00 	call	200865c0 <__divsi3>
2008bca8:	1039883a 	mov	fp,r2
2008bcac:	00800244 	movi	r2,9
2008bcb0:	173ff416 	blt	r2,fp,2008bc84 <__flash_rwdata_start+0xfffefb00>
2008bcb4:	9011883a 	mov	r8,r18
2008bcb8:	e0800c04 	addi	r2,fp,48
2008bcbc:	8025883a 	mov	r18,r16
2008bcc0:	913fffc4 	addi	r4,r18,-1
2008bcc4:	90bfffc5 	stb	r2,-1(r18)
2008bcc8:	dc002b17 	ldw	r16,172(sp)
2008bccc:	25408e2e 	bgeu	r4,r21,2008bf08 <___svfprintf_internal_r+0x1f6c>
2008bcd0:	d9402384 	addi	r5,sp,142
2008bcd4:	2c8bc83a 	sub	r5,r5,r18
2008bcd8:	d8c02344 	addi	r3,sp,141
2008bcdc:	a94b883a 	add	r5,r21,r5
2008bce0:	00000106 	br	2008bce8 <___svfprintf_internal_r+0x1d4c>
2008bce4:	20800003 	ldbu	r2,0(r4)
2008bce8:	18800005 	stb	r2,0(r3)
2008bcec:	18c00044 	addi	r3,r3,1
2008bcf0:	21000044 	addi	r4,r4,1
2008bcf4:	197ffb1e 	bne	r3,r5,2008bce4 <__flash_rwdata_start+0xfffefb60>
2008bcf8:	d8802304 	addi	r2,sp,140
2008bcfc:	1485c83a 	sub	r2,r2,r18
2008bd00:	d8c02344 	addi	r3,sp,141
2008bd04:	1885883a 	add	r2,r3,r2
2008bd08:	dac03317 	ldw	r11,204(sp)
2008bd0c:	156bc83a 	sub	r21,r2,r21
2008bd10:	dd403a15 	stw	r21,232(sp)
2008bd14:	00800044 	movi	r2,1
2008bd18:	5d65883a 	add	r18,r11,r21
2008bd1c:	12c0770e 	bge	r2,r11,2008befc <___svfprintf_internal_r+0x1f60>
2008bd20:	94800044 	addi	r18,r18,1
2008bd24:	9005883a 	mov	r2,r18
2008bd28:	90007216 	blt	r18,zero,2008bef4 <___svfprintf_internal_r+0x1f58>
2008bd2c:	d8003415 	stw	zero,208(sp)
2008bd30:	003f0706 	br	2008b950 <__flash_rwdata_start+0xfffef7cc>
2008bd34:	da402a15 	stw	r9,168(sp)
2008bd38:	dd402783 	ldbu	r21,158(sp)
2008bd3c:	4825883a 	mov	r18,r9
2008bd40:	dcc02d15 	stw	r19,180(sp)
2008bd44:	d8003215 	stw	zero,200(sp)
2008bd48:	d8003415 	stw	zero,208(sp)
2008bd4c:	0039bf06 	br	2008a44c <__flash_rwdata_start+0xfffee2c8>
2008bd50:	483eb21e 	bne	r9,zero,2008b81c <__flash_rwdata_start+0xfffef698>
2008bd54:	9013883a 	mov	r9,r18
2008bd58:	003eb006 	br	2008b81c <__flash_rwdata_start+0xfffef698>
2008bd5c:	d9002f17 	ldw	r4,188(sp)
2008bd60:	b80b883a 	mov	r5,r23
2008bd64:	b00d883a 	mov	r6,r22
2008bd68:	00928900 	call	20092890 <__ssprint_r>
2008bd6c:	1039531e 	bne	r2,zero,2008a2bc <__flash_rwdata_start+0xfffee138>
2008bd70:	dc002617 	ldw	r16,152(sp)
2008bd74:	d8c02017 	ldw	r3,128(sp)
2008bd78:	d8801f17 	ldw	r2,124(sp)
2008bd7c:	da000404 	addi	r8,sp,16
2008bd80:	003e7106 	br	2008b748 <__flash_rwdata_start+0xfffef5c4>
2008bd84:	00c00b44 	movi	r3,45
2008bd88:	64a0003c 	xorhi	r18,r12,32768
2008bd8c:	d8c02a05 	stb	r3,168(sp)
2008bd90:	003ea806 	br	2008b834 <__flash_rwdata_start+0xfffef6b0>
2008bd94:	4f000044 	addi	fp,r9,1
2008bd98:	003ead06 	br	2008b850 <__flash_rwdata_start+0xfffef6cc>
2008bd9c:	d8c03417 	ldw	r3,208(sp)
2008bda0:	00c0410e 	bge	zero,r3,2008bea8 <___svfprintf_internal_r+0x1f0c>
2008bda4:	04800044 	movi	r18,1
2008bda8:	dac03317 	ldw	r11,204(sp)
2008bdac:	92e5883a 	add	r18,r18,r11
2008bdb0:	9005883a 	mov	r2,r18
2008bdb4:	903ee60e 	bge	r18,zero,2008b950 <__flash_rwdata_start+0xfffef7cc>
2008bdb8:	0005883a 	mov	r2,zero
2008bdbc:	003ee406 	br	2008b950 <__flash_rwdata_start+0xfffef7cc>
2008bdc0:	d8c02617 	ldw	r3,152(sp)
2008bdc4:	d8c03415 	stw	r3,208(sp)
2008bdc8:	00c0310e 	bge	zero,r3,2008be90 <___svfprintf_internal_r+0x1ef4>
2008bdcc:	48001f1e 	bne	r9,zero,2008be4c <___svfprintf_internal_r+0x1eb0>
2008bdd0:	8c40004c 	andi	r17,r17,1
2008bdd4:	88001d1e 	bne	r17,zero,2008be4c <___svfprintf_internal_r+0x1eb0>
2008bdd8:	1805883a 	mov	r2,r3
2008bddc:	183edb0e 	bge	r3,zero,2008b94c <__flash_rwdata_start+0xfffef7c8>
2008bde0:	0005883a 	mov	r2,zero
2008bde4:	003ed906 	br	2008b94c <__flash_rwdata_start+0xfffef7c8>
2008bde8:	d8802117 	ldw	r2,132(sp)
2008bdec:	003ec506 	br	2008b904 <__flash_rwdata_start+0xfffef780>
2008bdf0:	d9003717 	ldw	r4,220(sp)
2008bdf4:	900b883a 	mov	r5,r18
2008bdf8:	000d883a 	mov	r6,zero
2008bdfc:	000f883a 	mov	r7,zero
2008be00:	da004015 	stw	r8,256(sp)
2008be04:	da403f15 	stw	r9,252(sp)
2008be08:	da803e15 	stw	r10,248(sp)
2008be0c:	00963a00 	call	200963a0 <__eqdf2>
2008be10:	da004017 	ldw	r8,256(sp)
2008be14:	da403f17 	ldw	r9,252(sp)
2008be18:	da803e17 	ldw	r10,248(sp)
2008be1c:	103f2c26 	beq	r2,zero,2008bad0 <__flash_rwdata_start+0xfffef94c>
2008be20:	00800044 	movi	r2,1
2008be24:	1707c83a 	sub	r3,r2,fp
2008be28:	d8c02615 	stw	r3,152(sp)
2008be2c:	003f2906 	br	2008bad4 <__flash_rwdata_start+0xfffef950>
2008be30:	db003417 	ldw	r12,208(sp)
2008be34:	64800044 	addi	r18,r12,1
2008be38:	9005883a 	mov	r2,r18
2008be3c:	903ec40e 	bge	r18,zero,2008b950 <__flash_rwdata_start+0xfffef7cc>
2008be40:	003fdd06 	br	2008bdb8 <__flash_rwdata_start+0xfffefc34>
2008be44:	0005883a 	mov	r2,zero
2008be48:	003f5c06 	br	2008bbbc <__flash_rwdata_start+0xfffefa38>
2008be4c:	dac03417 	ldw	r11,208(sp)
2008be50:	4a400044 	addi	r9,r9,1
2008be54:	5a65883a 	add	r18,r11,r9
2008be58:	9005883a 	mov	r2,r18
2008be5c:	903ebc0e 	bge	r18,zero,2008b950 <__flash_rwdata_start+0xfffef7cc>
2008be60:	003fd506 	br	2008bdb8 <__flash_rwdata_start+0xfffefc34>
2008be64:	00800034 	movhi	r2,0
2008be68:	10811684 	addi	r2,r2,1114
2008be6c:	d8802b15 	stw	r2,172(sp)
2008be70:	003d2b06 	br	2008b320 <__flash_rwdata_start+0xfffef19c>
2008be74:	00800c04 	movi	r2,48
2008be78:	e0c00c04 	addi	r3,fp,48
2008be7c:	d8802345 	stb	r2,141(sp)
2008be80:	d8c02385 	stb	r3,142(sp)
2008be84:	d88023c4 	addi	r2,sp,143
2008be88:	dd4022c4 	addi	r21,sp,139
2008be8c:	003f9e06 	br	2008bd08 <__flash_rwdata_start+0xfffefb84>
2008be90:	4800081e 	bne	r9,zero,2008beb4 <___svfprintf_internal_r+0x1f18>
2008be94:	8c40004c 	andi	r17,r17,1
2008be98:	8800061e 	bne	r17,zero,2008beb4 <___svfprintf_internal_r+0x1f18>
2008be9c:	00800044 	movi	r2,1
2008bea0:	1025883a 	mov	r18,r2
2008bea4:	003eaa06 	br	2008b950 <__flash_rwdata_start+0xfffef7cc>
2008bea8:	04800084 	movi	r18,2
2008beac:	90e5c83a 	sub	r18,r18,r3
2008beb0:	003fbd06 	br	2008bda8 <__flash_rwdata_start+0xfffefc24>
2008beb4:	4c800084 	addi	r18,r9,2
2008beb8:	9005883a 	mov	r2,r18
2008bebc:	903ea40e 	bge	r18,zero,2008b950 <__flash_rwdata_start+0xfffef7cc>
2008bec0:	003fbd06 	br	2008bdb8 <__flash_rwdata_start+0xfffefc34>
2008bec4:	dac02d17 	ldw	r11,180(sp)
2008bec8:	5a400017 	ldw	r9,0(r11)
2008becc:	5ac00104 	addi	r11,r11,4
2008bed0:	dac02d15 	stw	r11,180(sp)
2008bed4:	483e410e 	bge	r9,zero,2008b7dc <__flash_rwdata_start+0xfffef658>
2008bed8:	027fffc4 	movi	r9,-1
2008bedc:	1c000047 	ldb	r16,1(r3)
2008bee0:	00388406 	br	2008a0f4 <__flash_rwdata_start+0xfffedf70>
2008bee4:	00800b44 	movi	r2,45
2008bee8:	0739c83a 	sub	fp,zero,fp
2008beec:	d8802305 	stb	r2,140(sp)
2008bef0:	003f5e06 	br	2008bc6c <__flash_rwdata_start+0xfffefae8>
2008bef4:	0005883a 	mov	r2,zero
2008bef8:	003f8c06 	br	2008bd2c <__flash_rwdata_start+0xfffefba8>
2008befc:	88a2703a 	and	r17,r17,r2
2008bf00:	883f8826 	beq	r17,zero,2008bd24 <__flash_rwdata_start+0xfffefba0>
2008bf04:	003f8606 	br	2008bd20 <__flash_rwdata_start+0xfffefb9c>
2008bf08:	d8802344 	addi	r2,sp,141
2008bf0c:	003f7e06 	br	2008bd08 <__flash_rwdata_start+0xfffefb84>
2008bf10:	d8c02617 	ldw	r3,152(sp)
2008bf14:	003f4f06 	br	2008bc54 <__flash_rwdata_start+0xfffefad0>
2008bf18:	dac02f17 	ldw	r11,188(sp)
2008bf1c:	00800304 	movi	r2,12
2008bf20:	58800015 	stw	r2,0(r11)
2008bf24:	00bfffc4 	movi	r2,-1
2008bf28:	0038e806 	br	2008a2cc <__flash_rwdata_start+0xfffee148>

2008bf2c <___vfprintf_internal_r>:
2008bf2c:	deffb604 	addi	sp,sp,-296
2008bf30:	dfc04915 	stw	ra,292(sp)
2008bf34:	ddc04715 	stw	r23,284(sp)
2008bf38:	dd804615 	stw	r22,280(sp)
2008bf3c:	282f883a 	mov	r23,r5
2008bf40:	202d883a 	mov	r22,r4
2008bf44:	d9802a15 	stw	r6,168(sp)
2008bf48:	d9c02d15 	stw	r7,180(sp)
2008bf4c:	df004815 	stw	fp,288(sp)
2008bf50:	dd404515 	stw	r21,276(sp)
2008bf54:	dd004415 	stw	r20,272(sp)
2008bf58:	dcc04315 	stw	r19,268(sp)
2008bf5c:	dc804215 	stw	r18,264(sp)
2008bf60:	dc404115 	stw	r17,260(sp)
2008bf64:	dc004015 	stw	r16,256(sp)
2008bf68:	0090c440 	call	20090c44 <_localeconv_r>
2008bf6c:	10800017 	ldw	r2,0(r2)
2008bf70:	1009883a 	mov	r4,r2
2008bf74:	d8803515 	stw	r2,212(sp)
2008bf78:	0089e9c0 	call	20089e9c <strlen>
2008bf7c:	d8803815 	stw	r2,224(sp)
2008bf80:	b0000226 	beq	r22,zero,2008bf8c <___vfprintf_internal_r+0x60>
2008bf84:	b0800e17 	ldw	r2,56(r22)
2008bf88:	1000e126 	beq	r2,zero,2008c310 <___vfprintf_internal_r+0x3e4>
2008bf8c:	b880030b 	ldhu	r2,12(r23)
2008bf90:	10c8000c 	andi	r3,r2,8192
2008bf94:	1800061e 	bne	r3,zero,2008bfb0 <___vfprintf_internal_r+0x84>
2008bf98:	b9001917 	ldw	r4,100(r23)
2008bf9c:	00f7ffc4 	movi	r3,-8193
2008bfa0:	10880014 	ori	r2,r2,8192
2008bfa4:	20c6703a 	and	r3,r4,r3
2008bfa8:	b880030d 	sth	r2,12(r23)
2008bfac:	b8c01915 	stw	r3,100(r23)
2008bfb0:	10c0020c 	andi	r3,r2,8
2008bfb4:	1800a726 	beq	r3,zero,2008c254 <___vfprintf_internal_r+0x328>
2008bfb8:	b8c00417 	ldw	r3,16(r23)
2008bfbc:	1800a526 	beq	r3,zero,2008c254 <___vfprintf_internal_r+0x328>
2008bfc0:	1080068c 	andi	r2,r2,26
2008bfc4:	00c00284 	movi	r3,10
2008bfc8:	10c0aa26 	beq	r2,r3,2008c274 <___vfprintf_internal_r+0x348>
2008bfcc:	dac01e04 	addi	r11,sp,120
2008bfd0:	db001dc4 	addi	r12,sp,119
2008bfd4:	d8800404 	addi	r2,sp,16
2008bfd8:	05000034 	movhi	r20,0
2008bfdc:	dac02815 	stw	r11,160(sp)
2008bfe0:	5b17c83a 	sub	r11,r11,r12
2008bfe4:	a5011e84 	addi	r20,r20,1146
2008bfe8:	db002915 	stw	r12,164(sp)
2008bfec:	d8801e15 	stw	r2,120(sp)
2008bff0:	d8002015 	stw	zero,128(sp)
2008bff4:	d8001f15 	stw	zero,124(sp)
2008bff8:	d8003315 	stw	zero,204(sp)
2008bffc:	d8003715 	stw	zero,220(sp)
2008c000:	d8003915 	stw	zero,228(sp)
2008c004:	1011883a 	mov	r8,r2
2008c008:	d8003b15 	stw	zero,236(sp)
2008c00c:	d8003a15 	stw	zero,232(sp)
2008c010:	d8002f15 	stw	zero,188(sp)
2008c014:	dac03c15 	stw	r11,240(sp)
2008c018:	db002a17 	ldw	r12,168(sp)
2008c01c:	60800007 	ldb	r2,0(r12)
2008c020:	1000be26 	beq	r2,zero,2008c31c <___vfprintf_internal_r+0x3f0>
2008c024:	00c00944 	movi	r3,37
2008c028:	10c0bc26 	beq	r2,r3,2008c31c <___vfprintf_internal_r+0x3f0>
2008c02c:	6021883a 	mov	r16,r12
2008c030:	00000106 	br	2008c038 <___vfprintf_internal_r+0x10c>
2008c034:	10c08426 	beq	r2,r3,2008c248 <___vfprintf_internal_r+0x31c>
2008c038:	84000044 	addi	r16,r16,1
2008c03c:	80800007 	ldb	r2,0(r16)
2008c040:	103ffc1e 	bne	r2,zero,2008c034 <__flash_rwdata_start+0xfffefeb0>
2008c044:	dac02a17 	ldw	r11,168(sp)
2008c048:	82e3c83a 	sub	r17,r16,r11
2008c04c:	88000f26 	beq	r17,zero,2008c08c <___vfprintf_internal_r+0x160>
2008c050:	d8c02017 	ldw	r3,128(sp)
2008c054:	d8801f17 	ldw	r2,124(sp)
2008c058:	dac02a17 	ldw	r11,168(sp)
2008c05c:	1c47883a 	add	r3,r3,r17
2008c060:	10800044 	addi	r2,r2,1
2008c064:	d8c02015 	stw	r3,128(sp)
2008c068:	42c00015 	stw	r11,0(r8)
2008c06c:	44400115 	stw	r17,4(r8)
2008c070:	d8801f15 	stw	r2,124(sp)
2008c074:	00c001c4 	movi	r3,7
2008c078:	18809316 	blt	r3,r2,2008c2c8 <___vfprintf_internal_r+0x39c>
2008c07c:	42000204 	addi	r8,r8,8
2008c080:	db002f17 	ldw	r12,188(sp)
2008c084:	6459883a 	add	r12,r12,r17
2008c088:	db002f15 	stw	r12,188(sp)
2008c08c:	80800007 	ldb	r2,0(r16)
2008c090:	10009426 	beq	r2,zero,2008c2e4 <___vfprintf_internal_r+0x3b8>
2008c094:	80800044 	addi	r2,r16,1
2008c098:	84000047 	ldb	r16,1(r16)
2008c09c:	d8002785 	stb	zero,158(sp)
2008c0a0:	000d883a 	mov	r6,zero
2008c0a4:	027fffc4 	movi	r9,-1
2008c0a8:	d8002e15 	stw	zero,184(sp)
2008c0ac:	0023883a 	mov	r17,zero
2008c0b0:	01001604 	movi	r4,88
2008c0b4:	01400244 	movi	r5,9
2008c0b8:	02800a84 	movi	r10,42
2008c0bc:	01c01b04 	movi	r7,108
2008c0c0:	10c00044 	addi	r3,r2,1
2008c0c4:	80bff804 	addi	r2,r16,-32
2008c0c8:	2082cd36 	bltu	r4,r2,2008cc00 <___vfprintf_internal_r+0xcd4>
2008c0cc:	100490ba 	slli	r2,r2,2
2008c0d0:	02c80274 	movhi	r11,8201
2008c0d4:	5af03904 	addi	r11,r11,-16156
2008c0d8:	12c5883a 	add	r2,r2,r11
2008c0dc:	10800017 	ldw	r2,0(r2)
2008c0e0:	1000683a 	jmp	r2
2008c0e4:	2008ca18 	cmpnei	zero,r4,9000
2008c0e8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c0ec:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c0f0:	2008cb68 	cmpgeui	zero,r4,9005
2008c0f4:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c0f8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c0fc:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c100:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c104:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c108:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c10c:	2008ca38 	rdprs	zero,r4,9000
2008c110:	2008ca64 	muli	zero,r4,9001
2008c114:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c118:	2008c324 	muli	zero,r4,8972
2008c11c:	2008c334 	orhi	zero,r4,8972
2008c120:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c124:	2008c374 	orhi	zero,r4,8973
2008c128:	2008c384 	addi	zero,r4,8974
2008c12c:	2008c384 	addi	zero,r4,8974
2008c130:	2008c384 	addi	zero,r4,8974
2008c134:	2008c384 	addi	zero,r4,8974
2008c138:	2008c384 	addi	zero,r4,8974
2008c13c:	2008c384 	addi	zero,r4,8974
2008c140:	2008c384 	addi	zero,r4,8974
2008c144:	2008c384 	addi	zero,r4,8974
2008c148:	2008c384 	addi	zero,r4,8974
2008c14c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c150:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c154:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c158:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c15c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c160:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c164:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c168:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c16c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c170:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c174:	2008c3b8 	rdprs	zero,r4,8974
2008c178:	2008c828 	cmpgeui	zero,r4,8992
2008c17c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c180:	2008c828 	cmpgeui	zero,r4,8992
2008c184:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c188:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c18c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c190:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c194:	2008c914 	ori	zero,r4,8996
2008c198:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c19c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1a0:	2008c7bc 	xorhi	zero,r4,8990
2008c1a4:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1a8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1ac:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1b0:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1b4:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1b8:	2008c7f8 	rdprs	zero,r4,8991
2008c1bc:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1c0:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1c4:	2008c9bc 	xorhi	zero,r4,8998
2008c1c8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1cc:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1d0:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1d4:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1d8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1dc:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1e0:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1e4:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1e8:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1ec:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c1f0:	2008ca74 	orhi	zero,r4,9001
2008c1f4:	2008c924 	muli	zero,r4,8996
2008c1f8:	2008c828 	cmpgeui	zero,r4,8992
2008c1fc:	2008c828 	cmpgeui	zero,r4,8992
2008c200:	2008c828 	cmpgeui	zero,r4,8992
2008c204:	2008c964 	muli	zero,r4,8997
2008c208:	2008c924 	muli	zero,r4,8996
2008c20c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c210:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c214:	2008c974 	orhi	zero,r4,8997
2008c218:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c21c:	2008c988 	cmpgei	zero,r4,8998
2008c220:	2008cbc4 	addi	zero,r4,9007
2008c224:	2008c8cc 	andi	zero,r4,8995
2008c228:	2008cb78 	rdprs	zero,r4,9005
2008c22c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c230:	2008cab4 	orhi	zero,r4,9002
2008c234:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c238:	2008cb88 	cmpgei	zero,r4,9006
2008c23c:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c240:	2008cc00 	call	22008cc0 <__flash_rwdata_start+0x1f6cb3c>
2008c244:	2008cb28 	cmpgeui	zero,r4,9004
2008c248:	db002a17 	ldw	r12,168(sp)
2008c24c:	8323c83a 	sub	r17,r16,r12
2008c250:	003f7e06 	br	2008c04c <__flash_rwdata_start+0xfffefec8>
2008c254:	b009883a 	mov	r4,r22
2008c258:	b80b883a 	mov	r5,r23
2008c25c:	008e08c0 	call	2008e08c <__swsetup_r>
2008c260:	10000c1e 	bne	r2,zero,2008c294 <___vfprintf_internal_r+0x368>
2008c264:	b880030b 	ldhu	r2,12(r23)
2008c268:	00c00284 	movi	r3,10
2008c26c:	1080068c 	andi	r2,r2,26
2008c270:	10ff561e 	bne	r2,r3,2008bfcc <__flash_rwdata_start+0xfffefe48>
2008c274:	b880038f 	ldh	r2,14(r23)
2008c278:	103f5416 	blt	r2,zero,2008bfcc <__flash_rwdata_start+0xfffefe48>
2008c27c:	d9802a17 	ldw	r6,168(sp)
2008c280:	d9c02d17 	ldw	r7,180(sp)
2008c284:	b009883a 	mov	r4,r22
2008c288:	b80b883a 	mov	r5,r23
2008c28c:	008dea00 	call	2008dea0 <__sbprintf>
2008c290:	00000106 	br	2008c298 <___vfprintf_internal_r+0x36c>
2008c294:	00bfffc4 	movi	r2,-1
2008c298:	dfc04917 	ldw	ra,292(sp)
2008c29c:	df004817 	ldw	fp,288(sp)
2008c2a0:	ddc04717 	ldw	r23,284(sp)
2008c2a4:	dd804617 	ldw	r22,280(sp)
2008c2a8:	dd404517 	ldw	r21,276(sp)
2008c2ac:	dd004417 	ldw	r20,272(sp)
2008c2b0:	dcc04317 	ldw	r19,268(sp)
2008c2b4:	dc804217 	ldw	r18,264(sp)
2008c2b8:	dc404117 	ldw	r17,260(sp)
2008c2bc:	dc004017 	ldw	r16,256(sp)
2008c2c0:	dec04a04 	addi	sp,sp,296
2008c2c4:	f800283a 	ret
2008c2c8:	b009883a 	mov	r4,r22
2008c2cc:	b80b883a 	mov	r5,r23
2008c2d0:	d9801e04 	addi	r6,sp,120
2008c2d4:	0093b900 	call	20093b90 <__sprint_r>
2008c2d8:	1000081e 	bne	r2,zero,2008c2fc <___vfprintf_internal_r+0x3d0>
2008c2dc:	da000404 	addi	r8,sp,16
2008c2e0:	003f6706 	br	2008c080 <__flash_rwdata_start+0xfffefefc>
2008c2e4:	d8802017 	ldw	r2,128(sp)
2008c2e8:	10000426 	beq	r2,zero,2008c2fc <___vfprintf_internal_r+0x3d0>
2008c2ec:	b009883a 	mov	r4,r22
2008c2f0:	b80b883a 	mov	r5,r23
2008c2f4:	d9801e04 	addi	r6,sp,120
2008c2f8:	0093b900 	call	20093b90 <__sprint_r>
2008c2fc:	b880030b 	ldhu	r2,12(r23)
2008c300:	1080100c 	andi	r2,r2,64
2008c304:	103fe31e 	bne	r2,zero,2008c294 <__flash_rwdata_start+0xffff0110>
2008c308:	d8802f17 	ldw	r2,188(sp)
2008c30c:	003fe206 	br	2008c298 <__flash_rwdata_start+0xffff0114>
2008c310:	b009883a 	mov	r4,r22
2008c314:	00900ec0 	call	200900ec <__sinit>
2008c318:	003f1c06 	br	2008bf8c <__flash_rwdata_start+0xfffefe08>
2008c31c:	dc002a17 	ldw	r16,168(sp)
2008c320:	003f5a06 	br	2008c08c <__flash_rwdata_start+0xfffeff08>
2008c324:	1805883a 	mov	r2,r3
2008c328:	8c400114 	ori	r17,r17,4
2008c32c:	1c000007 	ldb	r16,0(r3)
2008c330:	003f6306 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008c334:	1c000007 	ldb	r16,0(r3)
2008c338:	18800044 	addi	r2,r3,1
2008c33c:	8286ad26 	beq	r16,r10,2008ddf4 <___vfprintf_internal_r+0x1ec8>
2008c340:	82fff404 	addi	r11,r16,-48
2008c344:	1007883a 	mov	r3,r2
2008c348:	0013883a 	mov	r9,zero
2008c34c:	2aff5d36 	bltu	r5,r11,2008c0c4 <__flash_rwdata_start+0xfffeff40>
2008c350:	1c000007 	ldb	r16,0(r3)
2008c354:	4a4002a4 	muli	r9,r9,10
2008c358:	18c00044 	addi	r3,r3,1
2008c35c:	5a53883a 	add	r9,r11,r9
2008c360:	82fff404 	addi	r11,r16,-48
2008c364:	2afffa2e 	bgeu	r5,r11,2008c350 <__flash_rwdata_start+0xffff01cc>
2008c368:	483f560e 	bge	r9,zero,2008c0c4 <__flash_rwdata_start+0xfffeff40>
2008c36c:	027fffc4 	movi	r9,-1
2008c370:	003f5406 	br	2008c0c4 <__flash_rwdata_start+0xfffeff40>
2008c374:	8c402014 	ori	r17,r17,128
2008c378:	1805883a 	mov	r2,r3
2008c37c:	1c000007 	ldb	r16,0(r3)
2008c380:	003f4f06 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008c384:	1805883a 	mov	r2,r3
2008c388:	d8002e15 	stw	zero,184(sp)
2008c38c:	82fff404 	addi	r11,r16,-48
2008c390:	0019883a 	mov	r12,zero
2008c394:	14000007 	ldb	r16,0(r2)
2008c398:	630002a4 	muli	r12,r12,10
2008c39c:	18c00044 	addi	r3,r3,1
2008c3a0:	1805883a 	mov	r2,r3
2008c3a4:	62d9883a 	add	r12,r12,r11
2008c3a8:	82fff404 	addi	r11,r16,-48
2008c3ac:	2afff92e 	bgeu	r5,r11,2008c394 <__flash_rwdata_start+0xffff0210>
2008c3b0:	db002e15 	stw	r12,184(sp)
2008c3b4:	003f4306 	br	2008c0c4 <__flash_rwdata_start+0xfffeff40>
2008c3b8:	8c400414 	ori	r17,r17,16
2008c3bc:	d8c02a15 	stw	r3,168(sp)
2008c3c0:	d9802785 	stb	r6,158(sp)
2008c3c4:	8880080c 	andi	r2,r17,32
2008c3c8:	d8c02d17 	ldw	r3,180(sp)
2008c3cc:	10015a26 	beq	r2,zero,2008c938 <___vfprintf_internal_r+0xa0c>
2008c3d0:	db002d17 	ldw	r12,180(sp)
2008c3d4:	18800117 	ldw	r2,4(r3)
2008c3d8:	1cc00017 	ldw	r19,0(r3)
2008c3dc:	63000204 	addi	r12,r12,8
2008c3e0:	db002d15 	stw	r12,180(sp)
2008c3e4:	1039883a 	mov	fp,r2
2008c3e8:	10044516 	blt	r2,zero,2008d500 <___vfprintf_internal_r+0x15d4>
2008c3ec:	dd402783 	ldbu	r21,158(sp)
2008c3f0:	da403215 	stw	r9,200(sp)
2008c3f4:	00800044 	movi	r2,1
2008c3f8:	9f06b03a 	or	r3,r19,fp
2008c3fc:	48000216 	blt	r9,zero,2008c408 <___vfprintf_internal_r+0x4dc>
2008c400:	013fdfc4 	movi	r4,-129
2008c404:	8922703a 	and	r17,r17,r4
2008c408:	1802071e 	bne	r3,zero,2008cc28 <___vfprintf_internal_r+0xcfc>
2008c40c:	4802fa26 	beq	r9,zero,2008cff8 <___vfprintf_internal_r+0x10cc>
2008c410:	10803fcc 	andi	r2,r2,255
2008c414:	00c00044 	movi	r3,1
2008c418:	10c22926 	beq	r2,r3,2008ccc0 <___vfprintf_internal_r+0xd94>
2008c41c:	00c00084 	movi	r3,2
2008c420:	10c31726 	beq	r2,r3,2008d080 <___vfprintf_internal_r+0x1154>
2008c424:	d8c01e04 	addi	r3,sp,120
2008c428:	9808d0fa 	srli	r4,r19,3
2008c42c:	e00a977a 	slli	r5,fp,29
2008c430:	e038d0fa 	srli	fp,fp,3
2008c434:	9cc001cc 	andi	r19,r19,7
2008c438:	98800c04 	addi	r2,r19,48
2008c43c:	18ffffc4 	addi	r3,r3,-1
2008c440:	2926b03a 	or	r19,r5,r4
2008c444:	18800005 	stb	r2,0(r3)
2008c448:	9f08b03a 	or	r4,r19,fp
2008c44c:	203ff61e 	bne	r4,zero,2008c428 <__flash_rwdata_start+0xffff02a4>
2008c450:	8900004c 	andi	r4,r17,1
2008c454:	d8c03115 	stw	r3,196(sp)
2008c458:	2003931e 	bne	r4,zero,2008d2a8 <___vfprintf_internal_r+0x137c>
2008c45c:	dac02817 	ldw	r11,160(sp)
2008c460:	58e5c83a 	sub	r18,r11,r3
2008c464:	9005883a 	mov	r2,r18
2008c468:	9240010e 	bge	r18,r9,2008c470 <___vfprintf_internal_r+0x544>
2008c46c:	4805883a 	mov	r2,r9
2008c470:	d8802b15 	stw	r2,172(sp)
2008c474:	d8003415 	stw	zero,208(sp)
2008c478:	a8803fcc 	andi	r2,r21,255
2008c47c:	1080201c 	xori	r2,r2,128
2008c480:	10bfe004 	addi	r2,r2,-128
2008c484:	10000326 	beq	r2,zero,2008c494 <___vfprintf_internal_r+0x568>
2008c488:	db002b17 	ldw	r12,172(sp)
2008c48c:	63000044 	addi	r12,r12,1
2008c490:	db002b15 	stw	r12,172(sp)
2008c494:	88c0008c 	andi	r3,r17,2
2008c498:	d8c02c15 	stw	r3,176(sp)
2008c49c:	18000326 	beq	r3,zero,2008c4ac <___vfprintf_internal_r+0x580>
2008c4a0:	dac02b17 	ldw	r11,172(sp)
2008c4a4:	5ac00084 	addi	r11,r11,2
2008c4a8:	dac02b15 	stw	r11,172(sp)
2008c4ac:	8b00210c 	andi	r12,r17,132
2008c4b0:	db003015 	stw	r12,192(sp)
2008c4b4:	6001da1e 	bne	r12,zero,2008cc20 <___vfprintf_internal_r+0xcf4>
2008c4b8:	dac02e17 	ldw	r11,184(sp)
2008c4bc:	db002b17 	ldw	r12,172(sp)
2008c4c0:	5b39c83a 	sub	fp,r11,r12
2008c4c4:	0701d60e 	bge	zero,fp,2008cc20 <___vfprintf_internal_r+0xcf4>
2008c4c8:	02400404 	movi	r9,16
2008c4cc:	d8c02017 	ldw	r3,128(sp)
2008c4d0:	d8801f17 	ldw	r2,124(sp)
2008c4d4:	4f053c0e 	bge	r9,fp,2008d9c8 <___vfprintf_internal_r+0x1a9c>
2008c4d8:	01400034 	movhi	r5,0
2008c4dc:	29412284 	addi	r5,r5,1162
2008c4e0:	d9403615 	stw	r5,216(sp)
2008c4e4:	482b883a 	mov	r21,r9
2008c4e8:	04c001c4 	movi	r19,7
2008c4ec:	00000306 	br	2008c4fc <___vfprintf_internal_r+0x5d0>
2008c4f0:	e73ffc04 	addi	fp,fp,-16
2008c4f4:	42000204 	addi	r8,r8,8
2008c4f8:	af00130e 	bge	r21,fp,2008c548 <___vfprintf_internal_r+0x61c>
2008c4fc:	02c00034 	movhi	r11,0
2008c500:	18c00404 	addi	r3,r3,16
2008c504:	10800044 	addi	r2,r2,1
2008c508:	5ac12284 	addi	r11,r11,1162
2008c50c:	42c00015 	stw	r11,0(r8)
2008c510:	45400115 	stw	r21,4(r8)
2008c514:	d8c02015 	stw	r3,128(sp)
2008c518:	d8801f15 	stw	r2,124(sp)
2008c51c:	98bff40e 	bge	r19,r2,2008c4f0 <__flash_rwdata_start+0xffff036c>
2008c520:	b009883a 	mov	r4,r22
2008c524:	b80b883a 	mov	r5,r23
2008c528:	d9801e04 	addi	r6,sp,120
2008c52c:	0093b900 	call	20093b90 <__sprint_r>
2008c530:	103f721e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008c534:	e73ffc04 	addi	fp,fp,-16
2008c538:	d8c02017 	ldw	r3,128(sp)
2008c53c:	d8801f17 	ldw	r2,124(sp)
2008c540:	da000404 	addi	r8,sp,16
2008c544:	af3fed16 	blt	r21,fp,2008c4fc <__flash_rwdata_start+0xffff0378>
2008c548:	db003617 	ldw	r12,216(sp)
2008c54c:	e0c7883a 	add	r3,fp,r3
2008c550:	10800044 	addi	r2,r2,1
2008c554:	43000015 	stw	r12,0(r8)
2008c558:	47000115 	stw	fp,4(r8)
2008c55c:	d8c02015 	stw	r3,128(sp)
2008c560:	d8801f15 	stw	r2,124(sp)
2008c564:	010001c4 	movi	r4,7
2008c568:	20830e16 	blt	r4,r2,2008d1a4 <___vfprintf_internal_r+0x1278>
2008c56c:	d8802787 	ldb	r2,158(sp)
2008c570:	42000204 	addi	r8,r8,8
2008c574:	10000c26 	beq	r2,zero,2008c5a8 <___vfprintf_internal_r+0x67c>
2008c578:	d8801f17 	ldw	r2,124(sp)
2008c57c:	d9002784 	addi	r4,sp,158
2008c580:	18c00044 	addi	r3,r3,1
2008c584:	10800044 	addi	r2,r2,1
2008c588:	41000015 	stw	r4,0(r8)
2008c58c:	01000044 	movi	r4,1
2008c590:	41000115 	stw	r4,4(r8)
2008c594:	d8c02015 	stw	r3,128(sp)
2008c598:	d8801f15 	stw	r2,124(sp)
2008c59c:	010001c4 	movi	r4,7
2008c5a0:	2082a716 	blt	r4,r2,2008d040 <___vfprintf_internal_r+0x1114>
2008c5a4:	42000204 	addi	r8,r8,8
2008c5a8:	dac02c17 	ldw	r11,176(sp)
2008c5ac:	58000c26 	beq	r11,zero,2008c5e0 <___vfprintf_internal_r+0x6b4>
2008c5b0:	d8801f17 	ldw	r2,124(sp)
2008c5b4:	d9002704 	addi	r4,sp,156
2008c5b8:	18c00084 	addi	r3,r3,2
2008c5bc:	10800044 	addi	r2,r2,1
2008c5c0:	41000015 	stw	r4,0(r8)
2008c5c4:	01000084 	movi	r4,2
2008c5c8:	41000115 	stw	r4,4(r8)
2008c5cc:	d8c02015 	stw	r3,128(sp)
2008c5d0:	d8801f15 	stw	r2,124(sp)
2008c5d4:	010001c4 	movi	r4,7
2008c5d8:	2082a116 	blt	r4,r2,2008d060 <___vfprintf_internal_r+0x1134>
2008c5dc:	42000204 	addi	r8,r8,8
2008c5e0:	db003017 	ldw	r12,192(sp)
2008c5e4:	00802004 	movi	r2,128
2008c5e8:	60820326 	beq	r12,r2,2008cdf8 <___vfprintf_internal_r+0xecc>
2008c5ec:	db003217 	ldw	r12,200(sp)
2008c5f0:	64abc83a 	sub	r21,r12,r18
2008c5f4:	0540260e 	bge	zero,r21,2008c690 <___vfprintf_internal_r+0x764>
2008c5f8:	07000404 	movi	fp,16
2008c5fc:	d8801f17 	ldw	r2,124(sp)
2008c600:	e544570e 	bge	fp,r21,2008d760 <___vfprintf_internal_r+0x1834>
2008c604:	01400034 	movhi	r5,0
2008c608:	29411e84 	addi	r5,r5,1146
2008c60c:	d9402c15 	stw	r5,176(sp)
2008c610:	04c001c4 	movi	r19,7
2008c614:	00000306 	br	2008c624 <___vfprintf_internal_r+0x6f8>
2008c618:	ad7ffc04 	addi	r21,r21,-16
2008c61c:	42000204 	addi	r8,r8,8
2008c620:	e540110e 	bge	fp,r21,2008c668 <___vfprintf_internal_r+0x73c>
2008c624:	18c00404 	addi	r3,r3,16
2008c628:	10800044 	addi	r2,r2,1
2008c62c:	45000015 	stw	r20,0(r8)
2008c630:	47000115 	stw	fp,4(r8)
2008c634:	d8c02015 	stw	r3,128(sp)
2008c638:	d8801f15 	stw	r2,124(sp)
2008c63c:	98bff60e 	bge	r19,r2,2008c618 <__flash_rwdata_start+0xffff0494>
2008c640:	b009883a 	mov	r4,r22
2008c644:	b80b883a 	mov	r5,r23
2008c648:	d9801e04 	addi	r6,sp,120
2008c64c:	0093b900 	call	20093b90 <__sprint_r>
2008c650:	103f2a1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008c654:	ad7ffc04 	addi	r21,r21,-16
2008c658:	d8c02017 	ldw	r3,128(sp)
2008c65c:	d8801f17 	ldw	r2,124(sp)
2008c660:	da000404 	addi	r8,sp,16
2008c664:	e57fef16 	blt	fp,r21,2008c624 <__flash_rwdata_start+0xffff04a0>
2008c668:	dac02c17 	ldw	r11,176(sp)
2008c66c:	1d47883a 	add	r3,r3,r21
2008c670:	10800044 	addi	r2,r2,1
2008c674:	42c00015 	stw	r11,0(r8)
2008c678:	45400115 	stw	r21,4(r8)
2008c67c:	d8c02015 	stw	r3,128(sp)
2008c680:	d8801f15 	stw	r2,124(sp)
2008c684:	010001c4 	movi	r4,7
2008c688:	20826516 	blt	r4,r2,2008d020 <___vfprintf_internal_r+0x10f4>
2008c68c:	42000204 	addi	r8,r8,8
2008c690:	8880400c 	andi	r2,r17,256
2008c694:	1001901e 	bne	r2,zero,2008ccd8 <___vfprintf_internal_r+0xdac>
2008c698:	d8801f17 	ldw	r2,124(sp)
2008c69c:	db003117 	ldw	r12,196(sp)
2008c6a0:	1c87883a 	add	r3,r3,r18
2008c6a4:	10800044 	addi	r2,r2,1
2008c6a8:	43000015 	stw	r12,0(r8)
2008c6ac:	44800115 	stw	r18,4(r8)
2008c6b0:	d8c02015 	stw	r3,128(sp)
2008c6b4:	d8801f15 	stw	r2,124(sp)
2008c6b8:	010001c4 	movi	r4,7
2008c6bc:	20824016 	blt	r4,r2,2008cfc0 <___vfprintf_internal_r+0x1094>
2008c6c0:	42000204 	addi	r8,r8,8
2008c6c4:	8c40010c 	andi	r17,r17,4
2008c6c8:	88003126 	beq	r17,zero,2008c790 <___vfprintf_internal_r+0x864>
2008c6cc:	db002e17 	ldw	r12,184(sp)
2008c6d0:	dac02b17 	ldw	r11,172(sp)
2008c6d4:	62e1c83a 	sub	r16,r12,r11
2008c6d8:	04002d0e 	bge	zero,r16,2008c790 <___vfprintf_internal_r+0x864>
2008c6dc:	04400404 	movi	r17,16
2008c6e0:	d8801f17 	ldw	r2,124(sp)
2008c6e4:	8c05150e 	bge	r17,r16,2008db3c <___vfprintf_internal_r+0x1c10>
2008c6e8:	01000034 	movhi	r4,0
2008c6ec:	21012284 	addi	r4,r4,1162
2008c6f0:	d9003615 	stw	r4,216(sp)
2008c6f4:	048001c4 	movi	r18,7
2008c6f8:	00000306 	br	2008c708 <___vfprintf_internal_r+0x7dc>
2008c6fc:	843ffc04 	addi	r16,r16,-16
2008c700:	42000204 	addi	r8,r8,8
2008c704:	8c00130e 	bge	r17,r16,2008c754 <___vfprintf_internal_r+0x828>
2008c708:	01400034 	movhi	r5,0
2008c70c:	18c00404 	addi	r3,r3,16
2008c710:	10800044 	addi	r2,r2,1
2008c714:	29412284 	addi	r5,r5,1162
2008c718:	41400015 	stw	r5,0(r8)
2008c71c:	44400115 	stw	r17,4(r8)
2008c720:	d8c02015 	stw	r3,128(sp)
2008c724:	d8801f15 	stw	r2,124(sp)
2008c728:	90bff40e 	bge	r18,r2,2008c6fc <__flash_rwdata_start+0xffff0578>
2008c72c:	b009883a 	mov	r4,r22
2008c730:	b80b883a 	mov	r5,r23
2008c734:	d9801e04 	addi	r6,sp,120
2008c738:	0093b900 	call	20093b90 <__sprint_r>
2008c73c:	103eef1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008c740:	843ffc04 	addi	r16,r16,-16
2008c744:	d8c02017 	ldw	r3,128(sp)
2008c748:	d8801f17 	ldw	r2,124(sp)
2008c74c:	da000404 	addi	r8,sp,16
2008c750:	8c3fed16 	blt	r17,r16,2008c708 <__flash_rwdata_start+0xffff0584>
2008c754:	dac03617 	ldw	r11,216(sp)
2008c758:	1c07883a 	add	r3,r3,r16
2008c75c:	10800044 	addi	r2,r2,1
2008c760:	42c00015 	stw	r11,0(r8)
2008c764:	44000115 	stw	r16,4(r8)
2008c768:	d8c02015 	stw	r3,128(sp)
2008c76c:	d8801f15 	stw	r2,124(sp)
2008c770:	010001c4 	movi	r4,7
2008c774:	2080060e 	bge	r4,r2,2008c790 <___vfprintf_internal_r+0x864>
2008c778:	b009883a 	mov	r4,r22
2008c77c:	b80b883a 	mov	r5,r23
2008c780:	d9801e04 	addi	r6,sp,120
2008c784:	0093b900 	call	20093b90 <__sprint_r>
2008c788:	103edc1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008c78c:	d8c02017 	ldw	r3,128(sp)
2008c790:	d8802b17 	ldw	r2,172(sp)
2008c794:	db002e17 	ldw	r12,184(sp)
2008c798:	1300010e 	bge	r2,r12,2008c7a0 <___vfprintf_internal_r+0x874>
2008c79c:	6005883a 	mov	r2,r12
2008c7a0:	dac02f17 	ldw	r11,188(sp)
2008c7a4:	5897883a 	add	r11,r11,r2
2008c7a8:	dac02f15 	stw	r11,188(sp)
2008c7ac:	18020c1e 	bne	r3,zero,2008cfe0 <___vfprintf_internal_r+0x10b4>
2008c7b0:	d8001f15 	stw	zero,124(sp)
2008c7b4:	da000404 	addi	r8,sp,16
2008c7b8:	003e1706 	br	2008c018 <__flash_rwdata_start+0xfffefe94>
2008c7bc:	8c400414 	ori	r17,r17,16
2008c7c0:	d8c02a15 	stw	r3,168(sp)
2008c7c4:	8880080c 	andi	r2,r17,32
2008c7c8:	10010126 	beq	r2,zero,2008cbd0 <___vfprintf_internal_r+0xca4>
2008c7cc:	db002d17 	ldw	r12,180(sp)
2008c7d0:	0005883a 	mov	r2,zero
2008c7d4:	64c00017 	ldw	r19,0(r12)
2008c7d8:	67000117 	ldw	fp,4(r12)
2008c7dc:	63000204 	addi	r12,r12,8
2008c7e0:	db002d15 	stw	r12,180(sp)
2008c7e4:	9f06b03a 	or	r3,r19,fp
2008c7e8:	d8002785 	stb	zero,158(sp)
2008c7ec:	da403215 	stw	r9,200(sp)
2008c7f0:	002b883a 	mov	r21,zero
2008c7f4:	003f0106 	br	2008c3fc <__flash_rwdata_start+0xffff0278>
2008c7f8:	8c400414 	ori	r17,r17,16
2008c7fc:	d8c02a15 	stw	r3,168(sp)
2008c800:	8880080c 	andi	r2,r17,32
2008c804:	1000e326 	beq	r2,zero,2008cb94 <___vfprintf_internal_r+0xc68>
2008c808:	dac02d17 	ldw	r11,180(sp)
2008c80c:	00800044 	movi	r2,1
2008c810:	5cc00017 	ldw	r19,0(r11)
2008c814:	5f000117 	ldw	fp,4(r11)
2008c818:	5ac00204 	addi	r11,r11,8
2008c81c:	dac02d15 	stw	r11,180(sp)
2008c820:	9f06b03a 	or	r3,r19,fp
2008c824:	003ff006 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008c828:	db002d17 	ldw	r12,180(sp)
2008c82c:	dac02d17 	ldw	r11,180(sp)
2008c830:	d8c02a15 	stw	r3,168(sp)
2008c834:	63000017 	ldw	r12,0(r12)
2008c838:	5ac00117 	ldw	r11,4(r11)
2008c83c:	d9802785 	stb	r6,158(sp)
2008c840:	6009883a 	mov	r4,r12
2008c844:	580b883a 	mov	r5,r11
2008c848:	db003715 	stw	r12,220(sp)
2008c84c:	da003f15 	stw	r8,252(sp)
2008c850:	da403e15 	stw	r9,248(sp)
2008c854:	dac03915 	stw	r11,228(sp)
2008c858:	009257c0 	call	2009257c <__fpclassifyd>
2008c85c:	db002d17 	ldw	r12,180(sp)
2008c860:	04800044 	movi	r18,1
2008c864:	da003f17 	ldw	r8,252(sp)
2008c868:	64c00204 	addi	r19,r12,8
2008c86c:	da403e17 	ldw	r9,248(sp)
2008c870:	d9003717 	ldw	r4,220(sp)
2008c874:	d9403917 	ldw	r5,228(sp)
2008c878:	14832b1e 	bne	r2,r18,2008d528 <___vfprintf_internal_r+0x15fc>
2008c87c:	000d883a 	mov	r6,zero
2008c880:	000f883a 	mov	r7,zero
2008c884:	00965040 	call	20096504 <__ledf2>
2008c888:	da003f17 	ldw	r8,252(sp)
2008c88c:	1004b716 	blt	r2,zero,2008db6c <___vfprintf_internal_r+0x1c40>
2008c890:	dd402783 	ldbu	r21,158(sp)
2008c894:	008011c4 	movi	r2,71
2008c898:	14040e0e 	bge	r2,r16,2008d8d4 <___vfprintf_internal_r+0x19a8>
2008c89c:	00c00034 	movhi	r3,0
2008c8a0:	18c10704 	addi	r3,r3,1052
2008c8a4:	d8c03115 	stw	r3,196(sp)
2008c8a8:	02c000c4 	movi	r11,3
2008c8ac:	00bfdfc4 	movi	r2,-129
2008c8b0:	dac02b15 	stw	r11,172(sp)
2008c8b4:	88a2703a 	and	r17,r17,r2
2008c8b8:	dcc02d15 	stw	r19,180(sp)
2008c8bc:	5825883a 	mov	r18,r11
2008c8c0:	d8003215 	stw	zero,200(sp)
2008c8c4:	d8003415 	stw	zero,208(sp)
2008c8c8:	003eeb06 	br	2008c478 <__flash_rwdata_start+0xffff02f4>
2008c8cc:	db002d17 	ldw	r12,180(sp)
2008c8d0:	00800c04 	movi	r2,48
2008c8d4:	d8802705 	stb	r2,156(sp)
2008c8d8:	64c00017 	ldw	r19,0(r12)
2008c8dc:	00801e04 	movi	r2,120
2008c8e0:	d8802745 	stb	r2,157(sp)
2008c8e4:	00800034 	movhi	r2,0
2008c8e8:	10810f04 	addi	r2,r2,1084
2008c8ec:	63000104 	addi	r12,r12,4
2008c8f0:	d8c02a15 	stw	r3,168(sp)
2008c8f4:	d8803b15 	stw	r2,236(sp)
2008c8f8:	0039883a 	mov	fp,zero
2008c8fc:	8c400094 	ori	r17,r17,2
2008c900:	db002d15 	stw	r12,180(sp)
2008c904:	00800084 	movi	r2,2
2008c908:	04001e04 	movi	r16,120
2008c90c:	9807883a 	mov	r3,r19
2008c910:	003fb506 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008c914:	8c400214 	ori	r17,r17,8
2008c918:	1805883a 	mov	r2,r3
2008c91c:	1c000007 	ldb	r16,0(r3)
2008c920:	003de706 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008c924:	d8c02a15 	stw	r3,168(sp)
2008c928:	d9802785 	stb	r6,158(sp)
2008c92c:	8880080c 	andi	r2,r17,32
2008c930:	d8c02d17 	ldw	r3,180(sp)
2008c934:	103ea61e 	bne	r2,zero,2008c3d0 <__flash_rwdata_start+0xffff024c>
2008c938:	8880040c 	andi	r2,r17,16
2008c93c:	1002221e 	bne	r2,zero,2008d1c8 <___vfprintf_internal_r+0x129c>
2008c940:	8880100c 	andi	r2,r17,64
2008c944:	10022026 	beq	r2,zero,2008d1c8 <___vfprintf_internal_r+0x129c>
2008c948:	1cc0000f 	ldh	r19,0(r3)
2008c94c:	db002d17 	ldw	r12,180(sp)
2008c950:	9839d7fa 	srai	fp,r19,31
2008c954:	63000104 	addi	r12,r12,4
2008c958:	db002d15 	stw	r12,180(sp)
2008c95c:	e005883a 	mov	r2,fp
2008c960:	003ea106 	br	2008c3e8 <__flash_rwdata_start+0xffff0264>
2008c964:	8c401014 	ori	r17,r17,64
2008c968:	1805883a 	mov	r2,r3
2008c96c:	1c000007 	ldb	r16,0(r3)
2008c970:	003dd306 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008c974:	1c000007 	ldb	r16,0(r3)
2008c978:	81c3e926 	beq	r16,r7,2008d920 <___vfprintf_internal_r+0x19f4>
2008c97c:	8c400414 	ori	r17,r17,16
2008c980:	1805883a 	mov	r2,r3
2008c984:	003dce06 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008c988:	d8c02a15 	stw	r3,168(sp)
2008c98c:	d9802785 	stb	r6,158(sp)
2008c990:	8880080c 	andi	r2,r17,32
2008c994:	10034726 	beq	r2,zero,2008d6b4 <___vfprintf_internal_r+0x1788>
2008c998:	db002d17 	ldw	r12,180(sp)
2008c99c:	dac02f17 	ldw	r11,188(sp)
2008c9a0:	60800017 	ldw	r2,0(r12)
2008c9a4:	5807d7fa 	srai	r3,r11,31
2008c9a8:	63000104 	addi	r12,r12,4
2008c9ac:	db002d15 	stw	r12,180(sp)
2008c9b0:	12c00015 	stw	r11,0(r2)
2008c9b4:	10c00115 	stw	r3,4(r2)
2008c9b8:	003d9706 	br	2008c018 <__flash_rwdata_start+0xfffefe94>
2008c9bc:	03000034 	movhi	r12,0
2008c9c0:	63010a04 	addi	r12,r12,1064
2008c9c4:	d8c02a15 	stw	r3,168(sp)
2008c9c8:	d9802785 	stb	r6,158(sp)
2008c9cc:	db003b15 	stw	r12,236(sp)
2008c9d0:	88c0080c 	andi	r3,r17,32
2008c9d4:	d8802d17 	ldw	r2,180(sp)
2008c9d8:	18005b26 	beq	r3,zero,2008cb48 <___vfprintf_internal_r+0xc1c>
2008c9dc:	dac02d17 	ldw	r11,180(sp)
2008c9e0:	14c00017 	ldw	r19,0(r2)
2008c9e4:	17000117 	ldw	fp,4(r2)
2008c9e8:	5ac00204 	addi	r11,r11,8
2008c9ec:	dac02d15 	stw	r11,180(sp)
2008c9f0:	8880004c 	andi	r2,r17,1
2008c9f4:	10022926 	beq	r2,zero,2008d29c <___vfprintf_internal_r+0x1370>
2008c9f8:	9f06b03a 	or	r3,r19,fp
2008c9fc:	18032b26 	beq	r3,zero,2008d6ac <___vfprintf_internal_r+0x1780>
2008ca00:	00800c04 	movi	r2,48
2008ca04:	d8802705 	stb	r2,156(sp)
2008ca08:	dc002745 	stb	r16,157(sp)
2008ca0c:	8c400094 	ori	r17,r17,2
2008ca10:	00800084 	movi	r2,2
2008ca14:	003f7406 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008ca18:	30803fcc 	andi	r2,r6,255
2008ca1c:	1080201c 	xori	r2,r2,128
2008ca20:	10bfe004 	addi	r2,r2,-128
2008ca24:	1003351e 	bne	r2,zero,2008d6fc <___vfprintf_internal_r+0x17d0>
2008ca28:	1805883a 	mov	r2,r3
2008ca2c:	01800804 	movi	r6,32
2008ca30:	1c000007 	ldb	r16,0(r3)
2008ca34:	003da206 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008ca38:	dac02d17 	ldw	r11,180(sp)
2008ca3c:	db002d17 	ldw	r12,180(sp)
2008ca40:	5ac00017 	ldw	r11,0(r11)
2008ca44:	dac02e15 	stw	r11,184(sp)
2008ca48:	62c00104 	addi	r11,r12,4
2008ca4c:	db002e17 	ldw	r12,184(sp)
2008ca50:	6003ad16 	blt	r12,zero,2008d908 <___vfprintf_internal_r+0x19dc>
2008ca54:	dac02d15 	stw	r11,180(sp)
2008ca58:	1805883a 	mov	r2,r3
2008ca5c:	1c000007 	ldb	r16,0(r3)
2008ca60:	003d9706 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008ca64:	1805883a 	mov	r2,r3
2008ca68:	01800ac4 	movi	r6,43
2008ca6c:	1c000007 	ldb	r16,0(r3)
2008ca70:	003d9306 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008ca74:	db002d17 	ldw	r12,180(sp)
2008ca78:	d8c02a15 	stw	r3,168(sp)
2008ca7c:	00c00044 	movi	r3,1
2008ca80:	60800017 	ldw	r2,0(r12)
2008ca84:	63000104 	addi	r12,r12,4
2008ca88:	d8c02b15 	stw	r3,172(sp)
2008ca8c:	d8002785 	stb	zero,158(sp)
2008ca90:	d8801405 	stb	r2,80(sp)
2008ca94:	db002d15 	stw	r12,180(sp)
2008ca98:	dac01404 	addi	r11,sp,80
2008ca9c:	1825883a 	mov	r18,r3
2008caa0:	d8003215 	stw	zero,200(sp)
2008caa4:	d8003415 	stw	zero,208(sp)
2008caa8:	dac03115 	stw	r11,196(sp)
2008caac:	0005883a 	mov	r2,zero
2008cab0:	003e7806 	br	2008c494 <__flash_rwdata_start+0xffff0310>
2008cab4:	dac02d17 	ldw	r11,180(sp)
2008cab8:	db002d17 	ldw	r12,180(sp)
2008cabc:	d8c02a15 	stw	r3,168(sp)
2008cac0:	5ac00017 	ldw	r11,0(r11)
2008cac4:	d8002785 	stb	zero,158(sp)
2008cac8:	64c00104 	addi	r19,r12,4
2008cacc:	dac03115 	stw	r11,196(sp)
2008cad0:	5803fe26 	beq	r11,zero,2008dacc <___vfprintf_internal_r+0x1ba0>
2008cad4:	d9003117 	ldw	r4,196(sp)
2008cad8:	4803b416 	blt	r9,zero,2008d9ac <___vfprintf_internal_r+0x1a80>
2008cadc:	480d883a 	mov	r6,r9
2008cae0:	000b883a 	mov	r5,zero
2008cae4:	da003f15 	stw	r8,252(sp)
2008cae8:	da403e15 	stw	r9,248(sp)
2008caec:	0090e300 	call	20090e30 <memchr>
2008caf0:	da003f17 	ldw	r8,252(sp)
2008caf4:	da403e17 	ldw	r9,248(sp)
2008caf8:	10043026 	beq	r2,zero,2008dbbc <___vfprintf_internal_r+0x1c90>
2008cafc:	d8c03117 	ldw	r3,196(sp)
2008cb00:	10e5c83a 	sub	r18,r2,r3
2008cb04:	4c836b16 	blt	r9,r18,2008d8b4 <___vfprintf_internal_r+0x1988>
2008cb08:	9005883a 	mov	r2,r18
2008cb0c:	9003ac16 	blt	r18,zero,2008d9c0 <___vfprintf_internal_r+0x1a94>
2008cb10:	dd402783 	ldbu	r21,158(sp)
2008cb14:	d8802b15 	stw	r2,172(sp)
2008cb18:	dcc02d15 	stw	r19,180(sp)
2008cb1c:	d8003215 	stw	zero,200(sp)
2008cb20:	d8003415 	stw	zero,208(sp)
2008cb24:	003e5406 	br	2008c478 <__flash_rwdata_start+0xffff02f4>
2008cb28:	00800034 	movhi	r2,0
2008cb2c:	10810f04 	addi	r2,r2,1084
2008cb30:	d8c02a15 	stw	r3,168(sp)
2008cb34:	d8803b15 	stw	r2,236(sp)
2008cb38:	d9802785 	stb	r6,158(sp)
2008cb3c:	88c0080c 	andi	r3,r17,32
2008cb40:	d8802d17 	ldw	r2,180(sp)
2008cb44:	183fa51e 	bne	r3,zero,2008c9dc <__flash_rwdata_start+0xffff0858>
2008cb48:	88c0040c 	andi	r3,r17,16
2008cb4c:	1802ee26 	beq	r3,zero,2008d708 <___vfprintf_internal_r+0x17dc>
2008cb50:	db002d17 	ldw	r12,180(sp)
2008cb54:	14c00017 	ldw	r19,0(r2)
2008cb58:	0039883a 	mov	fp,zero
2008cb5c:	63000104 	addi	r12,r12,4
2008cb60:	db002d15 	stw	r12,180(sp)
2008cb64:	003fa206 	br	2008c9f0 <__flash_rwdata_start+0xffff086c>
2008cb68:	8c400054 	ori	r17,r17,1
2008cb6c:	1805883a 	mov	r2,r3
2008cb70:	1c000007 	ldb	r16,0(r3)
2008cb74:	003d5206 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008cb78:	8c400814 	ori	r17,r17,32
2008cb7c:	1805883a 	mov	r2,r3
2008cb80:	1c000007 	ldb	r16,0(r3)
2008cb84:	003d4e06 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008cb88:	d8c02a15 	stw	r3,168(sp)
2008cb8c:	8880080c 	andi	r2,r17,32
2008cb90:	103f1d1e 	bne	r2,zero,2008c808 <__flash_rwdata_start+0xffff0684>
2008cb94:	8880040c 	andi	r2,r17,16
2008cb98:	1001b81e 	bne	r2,zero,2008d27c <___vfprintf_internal_r+0x1350>
2008cb9c:	8880100c 	andi	r2,r17,64
2008cba0:	1001b626 	beq	r2,zero,2008d27c <___vfprintf_internal_r+0x1350>
2008cba4:	dac02d17 	ldw	r11,180(sp)
2008cba8:	0039883a 	mov	fp,zero
2008cbac:	00800044 	movi	r2,1
2008cbb0:	5cc0000b 	ldhu	r19,0(r11)
2008cbb4:	5ac00104 	addi	r11,r11,4
2008cbb8:	dac02d15 	stw	r11,180(sp)
2008cbbc:	9807883a 	mov	r3,r19
2008cbc0:	003f0906 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008cbc4:	d8c02a15 	stw	r3,168(sp)
2008cbc8:	8880080c 	andi	r2,r17,32
2008cbcc:	103eff1e 	bne	r2,zero,2008c7cc <__flash_rwdata_start+0xffff0648>
2008cbd0:	8880040c 	andi	r2,r17,16
2008cbd4:	1001a11e 	bne	r2,zero,2008d25c <___vfprintf_internal_r+0x1330>
2008cbd8:	8880100c 	andi	r2,r17,64
2008cbdc:	10019f26 	beq	r2,zero,2008d25c <___vfprintf_internal_r+0x1330>
2008cbe0:	db002d17 	ldw	r12,180(sp)
2008cbe4:	0039883a 	mov	fp,zero
2008cbe8:	0005883a 	mov	r2,zero
2008cbec:	64c0000b 	ldhu	r19,0(r12)
2008cbf0:	63000104 	addi	r12,r12,4
2008cbf4:	db002d15 	stw	r12,180(sp)
2008cbf8:	9807883a 	mov	r3,r19
2008cbfc:	003efa06 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008cc00:	d8c02a15 	stw	r3,168(sp)
2008cc04:	d9802785 	stb	r6,158(sp)
2008cc08:	803db626 	beq	r16,zero,2008c2e4 <__flash_rwdata_start+0xffff0160>
2008cc0c:	00c00044 	movi	r3,1
2008cc10:	d8c02b15 	stw	r3,172(sp)
2008cc14:	dc001405 	stb	r16,80(sp)
2008cc18:	d8002785 	stb	zero,158(sp)
2008cc1c:	003f9e06 	br	2008ca98 <__flash_rwdata_start+0xffff0914>
2008cc20:	d8c02017 	ldw	r3,128(sp)
2008cc24:	003e5306 	br	2008c574 <__flash_rwdata_start+0xffff03f0>
2008cc28:	10803fcc 	andi	r2,r2,255
2008cc2c:	00c00044 	movi	r3,1
2008cc30:	10fdfa1e 	bne	r2,r3,2008c41c <__flash_rwdata_start+0xffff0298>
2008cc34:	e000021e 	bne	fp,zero,2008cc40 <___vfprintf_internal_r+0xd14>
2008cc38:	00800244 	movi	r2,9
2008cc3c:	14c0202e 	bgeu	r2,r19,2008ccc0 <___vfprintf_internal_r+0xd94>
2008cc40:	dc002b15 	stw	r16,172(sp)
2008cc44:	dc402c15 	stw	r17,176(sp)
2008cc48:	9821883a 	mov	r16,r19
2008cc4c:	e023883a 	mov	r17,fp
2008cc50:	dc801e04 	addi	r18,sp,120
2008cc54:	4827883a 	mov	r19,r9
2008cc58:	4039883a 	mov	fp,r8
2008cc5c:	8009883a 	mov	r4,r16
2008cc60:	880b883a 	mov	r5,r17
2008cc64:	01800284 	movi	r6,10
2008cc68:	000f883a 	mov	r7,zero
2008cc6c:	0095e100 	call	20095e10 <__umoddi3>
2008cc70:	10800c04 	addi	r2,r2,48
2008cc74:	94bfffc4 	addi	r18,r18,-1
2008cc78:	8009883a 	mov	r4,r16
2008cc7c:	880b883a 	mov	r5,r17
2008cc80:	01800284 	movi	r6,10
2008cc84:	000f883a 	mov	r7,zero
2008cc88:	90800005 	stb	r2,0(r18)
2008cc8c:	00958500 	call	20095850 <__udivdi3>
2008cc90:	1021883a 	mov	r16,r2
2008cc94:	10c4b03a 	or	r2,r2,r3
2008cc98:	1823883a 	mov	r17,r3
2008cc9c:	103fef1e 	bne	r2,zero,2008cc5c <__flash_rwdata_start+0xffff0ad8>
2008cca0:	dac02817 	ldw	r11,160(sp)
2008cca4:	dc803115 	stw	r18,196(sp)
2008cca8:	dc002b17 	ldw	r16,172(sp)
2008ccac:	dc402c17 	ldw	r17,176(sp)
2008ccb0:	9813883a 	mov	r9,r19
2008ccb4:	e011883a 	mov	r8,fp
2008ccb8:	5ca5c83a 	sub	r18,r11,r18
2008ccbc:	003de906 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008ccc0:	9cc00c04 	addi	r19,r19,48
2008ccc4:	d8c01dc4 	addi	r3,sp,119
2008ccc8:	dcc01dc5 	stb	r19,119(sp)
2008cccc:	dc803c17 	ldw	r18,240(sp)
2008ccd0:	d8c03115 	stw	r3,196(sp)
2008ccd4:	003de306 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008ccd8:	00801944 	movi	r2,101
2008ccdc:	1400710e 	bge	r2,r16,2008cea4 <___vfprintf_internal_r+0xf78>
2008cce0:	d9003717 	ldw	r4,220(sp)
2008cce4:	d9403917 	ldw	r5,228(sp)
2008cce8:	000d883a 	mov	r6,zero
2008ccec:	000f883a 	mov	r7,zero
2008ccf0:	d8c03d15 	stw	r3,244(sp)
2008ccf4:	da003f15 	stw	r8,252(sp)
2008ccf8:	00963a00 	call	200963a0 <__eqdf2>
2008ccfc:	d8c03d17 	ldw	r3,244(sp)
2008cd00:	da003f17 	ldw	r8,252(sp)
2008cd04:	1000ef1e 	bne	r2,zero,2008d0c4 <___vfprintf_internal_r+0x1198>
2008cd08:	d8801f17 	ldw	r2,124(sp)
2008cd0c:	01000034 	movhi	r4,0
2008cd10:	21011604 	addi	r4,r4,1112
2008cd14:	18c00044 	addi	r3,r3,1
2008cd18:	10800044 	addi	r2,r2,1
2008cd1c:	41000015 	stw	r4,0(r8)
2008cd20:	01000044 	movi	r4,1
2008cd24:	41000115 	stw	r4,4(r8)
2008cd28:	d8c02015 	stw	r3,128(sp)
2008cd2c:	d8801f15 	stw	r2,124(sp)
2008cd30:	010001c4 	movi	r4,7
2008cd34:	20828e16 	blt	r4,r2,2008d770 <___vfprintf_internal_r+0x1844>
2008cd38:	42000204 	addi	r8,r8,8
2008cd3c:	d8802617 	ldw	r2,152(sp)
2008cd40:	dac03317 	ldw	r11,204(sp)
2008cd44:	12c00216 	blt	r2,r11,2008cd50 <___vfprintf_internal_r+0xe24>
2008cd48:	8880004c 	andi	r2,r17,1
2008cd4c:	103e5d26 	beq	r2,zero,2008c6c4 <__flash_rwdata_start+0xffff0540>
2008cd50:	db003817 	ldw	r12,224(sp)
2008cd54:	d8801f17 	ldw	r2,124(sp)
2008cd58:	dac03517 	ldw	r11,212(sp)
2008cd5c:	1b07883a 	add	r3,r3,r12
2008cd60:	10800044 	addi	r2,r2,1
2008cd64:	42c00015 	stw	r11,0(r8)
2008cd68:	43000115 	stw	r12,4(r8)
2008cd6c:	d8c02015 	stw	r3,128(sp)
2008cd70:	d8801f15 	stw	r2,124(sp)
2008cd74:	010001c4 	movi	r4,7
2008cd78:	2082ed16 	blt	r4,r2,2008d930 <___vfprintf_internal_r+0x1a04>
2008cd7c:	42000204 	addi	r8,r8,8
2008cd80:	db003317 	ldw	r12,204(sp)
2008cd84:	643fffc4 	addi	r16,r12,-1
2008cd88:	043e4e0e 	bge	zero,r16,2008c6c4 <__flash_rwdata_start+0xffff0540>
2008cd8c:	04800404 	movi	r18,16
2008cd90:	d8801f17 	ldw	r2,124(sp)
2008cd94:	94007e0e 	bge	r18,r16,2008cf90 <___vfprintf_internal_r+0x1064>
2008cd98:	01400034 	movhi	r5,0
2008cd9c:	29411e84 	addi	r5,r5,1146
2008cda0:	d9402c15 	stw	r5,176(sp)
2008cda4:	054001c4 	movi	r21,7
2008cda8:	00000306 	br	2008cdb8 <___vfprintf_internal_r+0xe8c>
2008cdac:	42000204 	addi	r8,r8,8
2008cdb0:	843ffc04 	addi	r16,r16,-16
2008cdb4:	9400790e 	bge	r18,r16,2008cf9c <___vfprintf_internal_r+0x1070>
2008cdb8:	18c00404 	addi	r3,r3,16
2008cdbc:	10800044 	addi	r2,r2,1
2008cdc0:	45000015 	stw	r20,0(r8)
2008cdc4:	44800115 	stw	r18,4(r8)
2008cdc8:	d8c02015 	stw	r3,128(sp)
2008cdcc:	d8801f15 	stw	r2,124(sp)
2008cdd0:	a8bff60e 	bge	r21,r2,2008cdac <__flash_rwdata_start+0xffff0c28>
2008cdd4:	b009883a 	mov	r4,r22
2008cdd8:	b80b883a 	mov	r5,r23
2008cddc:	d9801e04 	addi	r6,sp,120
2008cde0:	0093b900 	call	20093b90 <__sprint_r>
2008cde4:	103d451e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008cde8:	d8c02017 	ldw	r3,128(sp)
2008cdec:	d8801f17 	ldw	r2,124(sp)
2008cdf0:	da000404 	addi	r8,sp,16
2008cdf4:	003fee06 	br	2008cdb0 <__flash_rwdata_start+0xffff0c2c>
2008cdf8:	dac02e17 	ldw	r11,184(sp)
2008cdfc:	db002b17 	ldw	r12,172(sp)
2008ce00:	5b2bc83a 	sub	r21,r11,r12
2008ce04:	057df90e 	bge	zero,r21,2008c5ec <__flash_rwdata_start+0xffff0468>
2008ce08:	07000404 	movi	fp,16
2008ce0c:	d8801f17 	ldw	r2,124(sp)
2008ce10:	e543640e 	bge	fp,r21,2008dba4 <___vfprintf_internal_r+0x1c78>
2008ce14:	01400034 	movhi	r5,0
2008ce18:	29411e84 	addi	r5,r5,1146
2008ce1c:	d9402c15 	stw	r5,176(sp)
2008ce20:	04c001c4 	movi	r19,7
2008ce24:	00000306 	br	2008ce34 <___vfprintf_internal_r+0xf08>
2008ce28:	ad7ffc04 	addi	r21,r21,-16
2008ce2c:	42000204 	addi	r8,r8,8
2008ce30:	e540110e 	bge	fp,r21,2008ce78 <___vfprintf_internal_r+0xf4c>
2008ce34:	18c00404 	addi	r3,r3,16
2008ce38:	10800044 	addi	r2,r2,1
2008ce3c:	45000015 	stw	r20,0(r8)
2008ce40:	47000115 	stw	fp,4(r8)
2008ce44:	d8c02015 	stw	r3,128(sp)
2008ce48:	d8801f15 	stw	r2,124(sp)
2008ce4c:	98bff60e 	bge	r19,r2,2008ce28 <__flash_rwdata_start+0xffff0ca4>
2008ce50:	b009883a 	mov	r4,r22
2008ce54:	b80b883a 	mov	r5,r23
2008ce58:	d9801e04 	addi	r6,sp,120
2008ce5c:	0093b900 	call	20093b90 <__sprint_r>
2008ce60:	103d261e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008ce64:	ad7ffc04 	addi	r21,r21,-16
2008ce68:	d8c02017 	ldw	r3,128(sp)
2008ce6c:	d8801f17 	ldw	r2,124(sp)
2008ce70:	da000404 	addi	r8,sp,16
2008ce74:	e57fef16 	blt	fp,r21,2008ce34 <__flash_rwdata_start+0xffff0cb0>
2008ce78:	dac02c17 	ldw	r11,176(sp)
2008ce7c:	1d47883a 	add	r3,r3,r21
2008ce80:	10800044 	addi	r2,r2,1
2008ce84:	42c00015 	stw	r11,0(r8)
2008ce88:	45400115 	stw	r21,4(r8)
2008ce8c:	d8c02015 	stw	r3,128(sp)
2008ce90:	d8801f15 	stw	r2,124(sp)
2008ce94:	010001c4 	movi	r4,7
2008ce98:	20819116 	blt	r4,r2,2008d4e0 <___vfprintf_internal_r+0x15b4>
2008ce9c:	42000204 	addi	r8,r8,8
2008cea0:	003dd206 	br	2008c5ec <__flash_rwdata_start+0xffff0468>
2008cea4:	db003317 	ldw	r12,204(sp)
2008cea8:	00800044 	movi	r2,1
2008ceac:	18c00044 	addi	r3,r3,1
2008ceb0:	1301530e 	bge	r2,r12,2008d400 <___vfprintf_internal_r+0x14d4>
2008ceb4:	dc001f17 	ldw	r16,124(sp)
2008ceb8:	dac03117 	ldw	r11,196(sp)
2008cebc:	00800044 	movi	r2,1
2008cec0:	84000044 	addi	r16,r16,1
2008cec4:	40800115 	stw	r2,4(r8)
2008cec8:	42c00015 	stw	r11,0(r8)
2008cecc:	d8c02015 	stw	r3,128(sp)
2008ced0:	dc001f15 	stw	r16,124(sp)
2008ced4:	008001c4 	movi	r2,7
2008ced8:	14016b16 	blt	r2,r16,2008d488 <___vfprintf_internal_r+0x155c>
2008cedc:	42000204 	addi	r8,r8,8
2008cee0:	db003817 	ldw	r12,224(sp)
2008cee4:	dac03517 	ldw	r11,212(sp)
2008cee8:	84000044 	addi	r16,r16,1
2008ceec:	1b07883a 	add	r3,r3,r12
2008cef0:	42c00015 	stw	r11,0(r8)
2008cef4:	43000115 	stw	r12,4(r8)
2008cef8:	d8c02015 	stw	r3,128(sp)
2008cefc:	dc001f15 	stw	r16,124(sp)
2008cf00:	008001c4 	movi	r2,7
2008cf04:	14016916 	blt	r2,r16,2008d4ac <___vfprintf_internal_r+0x1580>
2008cf08:	44800204 	addi	r18,r8,8
2008cf0c:	d9003717 	ldw	r4,220(sp)
2008cf10:	d9403917 	ldw	r5,228(sp)
2008cf14:	000d883a 	mov	r6,zero
2008cf18:	000f883a 	mov	r7,zero
2008cf1c:	d8c03d15 	stw	r3,244(sp)
2008cf20:	00963a00 	call	200963a0 <__eqdf2>
2008cf24:	d8c03d17 	ldw	r3,244(sp)
2008cf28:	db003317 	ldw	r12,204(sp)
2008cf2c:	1000ad26 	beq	r2,zero,2008d1e4 <___vfprintf_internal_r+0x12b8>
2008cf30:	dac03117 	ldw	r11,196(sp)
2008cf34:	60bfffc4 	addi	r2,r12,-1
2008cf38:	1887883a 	add	r3,r3,r2
2008cf3c:	59000044 	addi	r4,r11,1
2008cf40:	84000044 	addi	r16,r16,1
2008cf44:	90800115 	stw	r2,4(r18)
2008cf48:	91000015 	stw	r4,0(r18)
2008cf4c:	d8c02015 	stw	r3,128(sp)
2008cf50:	dc001f15 	stw	r16,124(sp)
2008cf54:	008001c4 	movi	r2,7
2008cf58:	14014216 	blt	r2,r16,2008d464 <___vfprintf_internal_r+0x1538>
2008cf5c:	94800204 	addi	r18,r18,8
2008cf60:	dac03a17 	ldw	r11,232(sp)
2008cf64:	dd4022c4 	addi	r21,sp,139
2008cf68:	84000044 	addi	r16,r16,1
2008cf6c:	1ac7883a 	add	r3,r3,r11
2008cf70:	95400015 	stw	r21,0(r18)
2008cf74:	92c00115 	stw	r11,4(r18)
2008cf78:	d8c02015 	stw	r3,128(sp)
2008cf7c:	dc001f15 	stw	r16,124(sp)
2008cf80:	008001c4 	movi	r2,7
2008cf84:	14000e16 	blt	r2,r16,2008cfc0 <___vfprintf_internal_r+0x1094>
2008cf88:	92000204 	addi	r8,r18,8
2008cf8c:	003dcd06 	br	2008c6c4 <__flash_rwdata_start+0xffff0540>
2008cf90:	01000034 	movhi	r4,0
2008cf94:	21011e84 	addi	r4,r4,1146
2008cf98:	d9002c15 	stw	r4,176(sp)
2008cf9c:	dac02c17 	ldw	r11,176(sp)
2008cfa0:	1c07883a 	add	r3,r3,r16
2008cfa4:	44000115 	stw	r16,4(r8)
2008cfa8:	42c00015 	stw	r11,0(r8)
2008cfac:	10800044 	addi	r2,r2,1
2008cfb0:	d8c02015 	stw	r3,128(sp)
2008cfb4:	d8801f15 	stw	r2,124(sp)
2008cfb8:	010001c4 	movi	r4,7
2008cfbc:	20bdc00e 	bge	r4,r2,2008c6c0 <__flash_rwdata_start+0xffff053c>
2008cfc0:	b009883a 	mov	r4,r22
2008cfc4:	b80b883a 	mov	r5,r23
2008cfc8:	d9801e04 	addi	r6,sp,120
2008cfcc:	0093b900 	call	20093b90 <__sprint_r>
2008cfd0:	103cca1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008cfd4:	d8c02017 	ldw	r3,128(sp)
2008cfd8:	da000404 	addi	r8,sp,16
2008cfdc:	003db906 	br	2008c6c4 <__flash_rwdata_start+0xffff0540>
2008cfe0:	b009883a 	mov	r4,r22
2008cfe4:	b80b883a 	mov	r5,r23
2008cfe8:	d9801e04 	addi	r6,sp,120
2008cfec:	0093b900 	call	20093b90 <__sprint_r>
2008cff0:	103def26 	beq	r2,zero,2008c7b0 <__flash_rwdata_start+0xffff062c>
2008cff4:	003cc106 	br	2008c2fc <__flash_rwdata_start+0xffff0178>
2008cff8:	10803fcc 	andi	r2,r2,255
2008cffc:	1000651e 	bne	r2,zero,2008d194 <___vfprintf_internal_r+0x1268>
2008d000:	8880004c 	andi	r2,r17,1
2008d004:	10013226 	beq	r2,zero,2008d4d0 <___vfprintf_internal_r+0x15a4>
2008d008:	00800c04 	movi	r2,48
2008d00c:	d8c01dc4 	addi	r3,sp,119
2008d010:	d8801dc5 	stb	r2,119(sp)
2008d014:	dc803c17 	ldw	r18,240(sp)
2008d018:	d8c03115 	stw	r3,196(sp)
2008d01c:	003d1106 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d020:	b009883a 	mov	r4,r22
2008d024:	b80b883a 	mov	r5,r23
2008d028:	d9801e04 	addi	r6,sp,120
2008d02c:	0093b900 	call	20093b90 <__sprint_r>
2008d030:	103cb21e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d034:	d8c02017 	ldw	r3,128(sp)
2008d038:	da000404 	addi	r8,sp,16
2008d03c:	003d9406 	br	2008c690 <__flash_rwdata_start+0xffff050c>
2008d040:	b009883a 	mov	r4,r22
2008d044:	b80b883a 	mov	r5,r23
2008d048:	d9801e04 	addi	r6,sp,120
2008d04c:	0093b900 	call	20093b90 <__sprint_r>
2008d050:	103caa1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d054:	d8c02017 	ldw	r3,128(sp)
2008d058:	da000404 	addi	r8,sp,16
2008d05c:	003d5206 	br	2008c5a8 <__flash_rwdata_start+0xffff0424>
2008d060:	b009883a 	mov	r4,r22
2008d064:	b80b883a 	mov	r5,r23
2008d068:	d9801e04 	addi	r6,sp,120
2008d06c:	0093b900 	call	20093b90 <__sprint_r>
2008d070:	103ca21e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d074:	d8c02017 	ldw	r3,128(sp)
2008d078:	da000404 	addi	r8,sp,16
2008d07c:	003d5806 	br	2008c5e0 <__flash_rwdata_start+0xffff045c>
2008d080:	d9403b17 	ldw	r5,236(sp)
2008d084:	d8c01e04 	addi	r3,sp,120
2008d088:	988003cc 	andi	r2,r19,15
2008d08c:	e008973a 	slli	r4,fp,28
2008d090:	2885883a 	add	r2,r5,r2
2008d094:	9826d13a 	srli	r19,r19,4
2008d098:	10800003 	ldbu	r2,0(r2)
2008d09c:	e038d13a 	srli	fp,fp,4
2008d0a0:	18ffffc4 	addi	r3,r3,-1
2008d0a4:	24e6b03a 	or	r19,r4,r19
2008d0a8:	18800005 	stb	r2,0(r3)
2008d0ac:	9f04b03a 	or	r2,r19,fp
2008d0b0:	103ff51e 	bne	r2,zero,2008d088 <__flash_rwdata_start+0xffff0f04>
2008d0b4:	db002817 	ldw	r12,160(sp)
2008d0b8:	d8c03115 	stw	r3,196(sp)
2008d0bc:	60e5c83a 	sub	r18,r12,r3
2008d0c0:	003ce806 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d0c4:	dc002617 	ldw	r16,152(sp)
2008d0c8:	0401b10e 	bge	zero,r16,2008d790 <___vfprintf_internal_r+0x1864>
2008d0cc:	db003117 	ldw	r12,196(sp)
2008d0d0:	dac03317 	ldw	r11,204(sp)
2008d0d4:	62e1883a 	add	r16,r12,r11
2008d0d8:	db003417 	ldw	r12,208(sp)
2008d0dc:	5825883a 	mov	r18,r11
2008d0e0:	62c0010e 	bge	r12,r11,2008d0e8 <___vfprintf_internal_r+0x11bc>
2008d0e4:	6025883a 	mov	r18,r12
2008d0e8:	04800b0e 	bge	zero,r18,2008d118 <___vfprintf_internal_r+0x11ec>
2008d0ec:	d8801f17 	ldw	r2,124(sp)
2008d0f0:	dac03117 	ldw	r11,196(sp)
2008d0f4:	1c87883a 	add	r3,r3,r18
2008d0f8:	10800044 	addi	r2,r2,1
2008d0fc:	42c00015 	stw	r11,0(r8)
2008d100:	44800115 	stw	r18,4(r8)
2008d104:	d8c02015 	stw	r3,128(sp)
2008d108:	d8801f15 	stw	r2,124(sp)
2008d10c:	010001c4 	movi	r4,7
2008d110:	20824f16 	blt	r4,r2,2008da50 <___vfprintf_internal_r+0x1b24>
2008d114:	42000204 	addi	r8,r8,8
2008d118:	90024b16 	blt	r18,zero,2008da48 <___vfprintf_internal_r+0x1b1c>
2008d11c:	db003417 	ldw	r12,208(sp)
2008d120:	64a5c83a 	sub	r18,r12,r18
2008d124:	0480730e 	bge	zero,r18,2008d2f4 <___vfprintf_internal_r+0x13c8>
2008d128:	05400404 	movi	r21,16
2008d12c:	d8801f17 	ldw	r2,124(sp)
2008d130:	ac817d0e 	bge	r21,r18,2008d728 <___vfprintf_internal_r+0x17fc>
2008d134:	01400034 	movhi	r5,0
2008d138:	29411e84 	addi	r5,r5,1146
2008d13c:	d9402c15 	stw	r5,176(sp)
2008d140:	070001c4 	movi	fp,7
2008d144:	00000306 	br	2008d154 <___vfprintf_internal_r+0x1228>
2008d148:	42000204 	addi	r8,r8,8
2008d14c:	94bffc04 	addi	r18,r18,-16
2008d150:	ac81780e 	bge	r21,r18,2008d734 <___vfprintf_internal_r+0x1808>
2008d154:	18c00404 	addi	r3,r3,16
2008d158:	10800044 	addi	r2,r2,1
2008d15c:	45000015 	stw	r20,0(r8)
2008d160:	45400115 	stw	r21,4(r8)
2008d164:	d8c02015 	stw	r3,128(sp)
2008d168:	d8801f15 	stw	r2,124(sp)
2008d16c:	e0bff60e 	bge	fp,r2,2008d148 <__flash_rwdata_start+0xffff0fc4>
2008d170:	b009883a 	mov	r4,r22
2008d174:	b80b883a 	mov	r5,r23
2008d178:	d9801e04 	addi	r6,sp,120
2008d17c:	0093b900 	call	20093b90 <__sprint_r>
2008d180:	103c5e1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d184:	d8c02017 	ldw	r3,128(sp)
2008d188:	d8801f17 	ldw	r2,124(sp)
2008d18c:	da000404 	addi	r8,sp,16
2008d190:	003fee06 	br	2008d14c <__flash_rwdata_start+0xffff0fc8>
2008d194:	dac01e04 	addi	r11,sp,120
2008d198:	0025883a 	mov	r18,zero
2008d19c:	dac03115 	stw	r11,196(sp)
2008d1a0:	003cb006 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d1a4:	b009883a 	mov	r4,r22
2008d1a8:	b80b883a 	mov	r5,r23
2008d1ac:	d9801e04 	addi	r6,sp,120
2008d1b0:	0093b900 	call	20093b90 <__sprint_r>
2008d1b4:	103c511e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d1b8:	d8c02017 	ldw	r3,128(sp)
2008d1bc:	d8802787 	ldb	r2,158(sp)
2008d1c0:	da000404 	addi	r8,sp,16
2008d1c4:	003ceb06 	br	2008c574 <__flash_rwdata_start+0xffff03f0>
2008d1c8:	1cc00017 	ldw	r19,0(r3)
2008d1cc:	dac02d17 	ldw	r11,180(sp)
2008d1d0:	9839d7fa 	srai	fp,r19,31
2008d1d4:	5ac00104 	addi	r11,r11,4
2008d1d8:	dac02d15 	stw	r11,180(sp)
2008d1dc:	e005883a 	mov	r2,fp
2008d1e0:	003c8106 	br	2008c3e8 <__flash_rwdata_start+0xffff0264>
2008d1e4:	657fffc4 	addi	r21,r12,-1
2008d1e8:	057f5d0e 	bge	zero,r21,2008cf60 <__flash_rwdata_start+0xffff0ddc>
2008d1ec:	07000404 	movi	fp,16
2008d1f0:	e540900e 	bge	fp,r21,2008d434 <___vfprintf_internal_r+0x1508>
2008d1f4:	01000034 	movhi	r4,0
2008d1f8:	21011e84 	addi	r4,r4,1146
2008d1fc:	d9002c15 	stw	r4,176(sp)
2008d200:	01c001c4 	movi	r7,7
2008d204:	00000306 	br	2008d214 <___vfprintf_internal_r+0x12e8>
2008d208:	94800204 	addi	r18,r18,8
2008d20c:	ad7ffc04 	addi	r21,r21,-16
2008d210:	e5408b0e 	bge	fp,r21,2008d440 <___vfprintf_internal_r+0x1514>
2008d214:	18c00404 	addi	r3,r3,16
2008d218:	84000044 	addi	r16,r16,1
2008d21c:	95000015 	stw	r20,0(r18)
2008d220:	97000115 	stw	fp,4(r18)
2008d224:	d8c02015 	stw	r3,128(sp)
2008d228:	dc001f15 	stw	r16,124(sp)
2008d22c:	3c3ff60e 	bge	r7,r16,2008d208 <__flash_rwdata_start+0xffff1084>
2008d230:	b009883a 	mov	r4,r22
2008d234:	b80b883a 	mov	r5,r23
2008d238:	d9801e04 	addi	r6,sp,120
2008d23c:	d9c03d15 	stw	r7,244(sp)
2008d240:	0093b900 	call	20093b90 <__sprint_r>
2008d244:	d9c03d17 	ldw	r7,244(sp)
2008d248:	103c2c1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d24c:	d8c02017 	ldw	r3,128(sp)
2008d250:	dc001f17 	ldw	r16,124(sp)
2008d254:	dc800404 	addi	r18,sp,16
2008d258:	003fec06 	br	2008d20c <__flash_rwdata_start+0xffff1088>
2008d25c:	dac02d17 	ldw	r11,180(sp)
2008d260:	0039883a 	mov	fp,zero
2008d264:	0005883a 	mov	r2,zero
2008d268:	5cc00017 	ldw	r19,0(r11)
2008d26c:	5ac00104 	addi	r11,r11,4
2008d270:	dac02d15 	stw	r11,180(sp)
2008d274:	9807883a 	mov	r3,r19
2008d278:	003d5b06 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008d27c:	db002d17 	ldw	r12,180(sp)
2008d280:	0039883a 	mov	fp,zero
2008d284:	00800044 	movi	r2,1
2008d288:	64c00017 	ldw	r19,0(r12)
2008d28c:	63000104 	addi	r12,r12,4
2008d290:	db002d15 	stw	r12,180(sp)
2008d294:	9807883a 	mov	r3,r19
2008d298:	003d5306 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008d29c:	00800084 	movi	r2,2
2008d2a0:	9f06b03a 	or	r3,r19,fp
2008d2a4:	003d5006 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008d2a8:	10803fcc 	andi	r2,r2,255
2008d2ac:	1080201c 	xori	r2,r2,128
2008d2b0:	10bfe004 	addi	r2,r2,-128
2008d2b4:	01000c04 	movi	r4,48
2008d2b8:	1101a526 	beq	r2,r4,2008d950 <___vfprintf_internal_r+0x1a24>
2008d2bc:	dac03117 	ldw	r11,196(sp)
2008d2c0:	db002817 	ldw	r12,160(sp)
2008d2c4:	193fffc5 	stb	r4,-1(r3)
2008d2c8:	5affffc4 	addi	r11,r11,-1
2008d2cc:	dac03115 	stw	r11,196(sp)
2008d2d0:	62e5c83a 	sub	r18,r12,r11
2008d2d4:	003c6306 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d2d8:	b009883a 	mov	r4,r22
2008d2dc:	b80b883a 	mov	r5,r23
2008d2e0:	d9801e04 	addi	r6,sp,120
2008d2e4:	0093b900 	call	20093b90 <__sprint_r>
2008d2e8:	103c041e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d2ec:	d8c02017 	ldw	r3,128(sp)
2008d2f0:	da000404 	addi	r8,sp,16
2008d2f4:	db003117 	ldw	r12,196(sp)
2008d2f8:	dac03417 	ldw	r11,208(sp)
2008d2fc:	d8802617 	ldw	r2,152(sp)
2008d300:	62e5883a 	add	r18,r12,r11
2008d304:	db003317 	ldw	r12,204(sp)
2008d308:	13000216 	blt	r2,r12,2008d314 <___vfprintf_internal_r+0x13e8>
2008d30c:	8900004c 	andi	r4,r17,1
2008d310:	20000c26 	beq	r4,zero,2008d344 <___vfprintf_internal_r+0x1418>
2008d314:	dac03817 	ldw	r11,224(sp)
2008d318:	d9001f17 	ldw	r4,124(sp)
2008d31c:	db003517 	ldw	r12,212(sp)
2008d320:	1ac7883a 	add	r3,r3,r11
2008d324:	21000044 	addi	r4,r4,1
2008d328:	43000015 	stw	r12,0(r8)
2008d32c:	42c00115 	stw	r11,4(r8)
2008d330:	d8c02015 	stw	r3,128(sp)
2008d334:	d9001f15 	stw	r4,124(sp)
2008d338:	014001c4 	movi	r5,7
2008d33c:	2901cc16 	blt	r5,r4,2008da70 <___vfprintf_internal_r+0x1b44>
2008d340:	42000204 	addi	r8,r8,8
2008d344:	dac03317 	ldw	r11,204(sp)
2008d348:	8489c83a 	sub	r4,r16,r18
2008d34c:	5885c83a 	sub	r2,r11,r2
2008d350:	1021883a 	mov	r16,r2
2008d354:	2080010e 	bge	r4,r2,2008d35c <___vfprintf_internal_r+0x1430>
2008d358:	2021883a 	mov	r16,r4
2008d35c:	04000a0e 	bge	zero,r16,2008d388 <___vfprintf_internal_r+0x145c>
2008d360:	d9001f17 	ldw	r4,124(sp)
2008d364:	1c07883a 	add	r3,r3,r16
2008d368:	44800015 	stw	r18,0(r8)
2008d36c:	21000044 	addi	r4,r4,1
2008d370:	44000115 	stw	r16,4(r8)
2008d374:	d8c02015 	stw	r3,128(sp)
2008d378:	d9001f15 	stw	r4,124(sp)
2008d37c:	014001c4 	movi	r5,7
2008d380:	2901e316 	blt	r5,r4,2008db10 <___vfprintf_internal_r+0x1be4>
2008d384:	42000204 	addi	r8,r8,8
2008d388:	8001df16 	blt	r16,zero,2008db08 <___vfprintf_internal_r+0x1bdc>
2008d38c:	1421c83a 	sub	r16,r2,r16
2008d390:	043ccc0e 	bge	zero,r16,2008c6c4 <__flash_rwdata_start+0xffff0540>
2008d394:	04800404 	movi	r18,16
2008d398:	d8801f17 	ldw	r2,124(sp)
2008d39c:	943efc0e 	bge	r18,r16,2008cf90 <__flash_rwdata_start+0xffff0e0c>
2008d3a0:	01400034 	movhi	r5,0
2008d3a4:	29411e84 	addi	r5,r5,1146
2008d3a8:	d9402c15 	stw	r5,176(sp)
2008d3ac:	054001c4 	movi	r21,7
2008d3b0:	00000306 	br	2008d3c0 <___vfprintf_internal_r+0x1494>
2008d3b4:	42000204 	addi	r8,r8,8
2008d3b8:	843ffc04 	addi	r16,r16,-16
2008d3bc:	943ef70e 	bge	r18,r16,2008cf9c <__flash_rwdata_start+0xffff0e18>
2008d3c0:	18c00404 	addi	r3,r3,16
2008d3c4:	10800044 	addi	r2,r2,1
2008d3c8:	45000015 	stw	r20,0(r8)
2008d3cc:	44800115 	stw	r18,4(r8)
2008d3d0:	d8c02015 	stw	r3,128(sp)
2008d3d4:	d8801f15 	stw	r2,124(sp)
2008d3d8:	a8bff60e 	bge	r21,r2,2008d3b4 <__flash_rwdata_start+0xffff1230>
2008d3dc:	b009883a 	mov	r4,r22
2008d3e0:	b80b883a 	mov	r5,r23
2008d3e4:	d9801e04 	addi	r6,sp,120
2008d3e8:	0093b900 	call	20093b90 <__sprint_r>
2008d3ec:	103bc31e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d3f0:	d8c02017 	ldw	r3,128(sp)
2008d3f4:	d8801f17 	ldw	r2,124(sp)
2008d3f8:	da000404 	addi	r8,sp,16
2008d3fc:	003fee06 	br	2008d3b8 <__flash_rwdata_start+0xffff1234>
2008d400:	8888703a 	and	r4,r17,r2
2008d404:	203eab1e 	bne	r4,zero,2008ceb4 <__flash_rwdata_start+0xffff0d30>
2008d408:	dc001f17 	ldw	r16,124(sp)
2008d40c:	db003117 	ldw	r12,196(sp)
2008d410:	40800115 	stw	r2,4(r8)
2008d414:	84000044 	addi	r16,r16,1
2008d418:	43000015 	stw	r12,0(r8)
2008d41c:	d8c02015 	stw	r3,128(sp)
2008d420:	dc001f15 	stw	r16,124(sp)
2008d424:	008001c4 	movi	r2,7
2008d428:	14000e16 	blt	r2,r16,2008d464 <___vfprintf_internal_r+0x1538>
2008d42c:	44800204 	addi	r18,r8,8
2008d430:	003ecb06 	br	2008cf60 <__flash_rwdata_start+0xffff0ddc>
2008d434:	00800034 	movhi	r2,0
2008d438:	10811e84 	addi	r2,r2,1146
2008d43c:	d8802c15 	stw	r2,176(sp)
2008d440:	dac02c17 	ldw	r11,176(sp)
2008d444:	1d47883a 	add	r3,r3,r21
2008d448:	84000044 	addi	r16,r16,1
2008d44c:	92c00015 	stw	r11,0(r18)
2008d450:	95400115 	stw	r21,4(r18)
2008d454:	d8c02015 	stw	r3,128(sp)
2008d458:	dc001f15 	stw	r16,124(sp)
2008d45c:	008001c4 	movi	r2,7
2008d460:	143ebe0e 	bge	r2,r16,2008cf5c <__flash_rwdata_start+0xffff0dd8>
2008d464:	b009883a 	mov	r4,r22
2008d468:	b80b883a 	mov	r5,r23
2008d46c:	d9801e04 	addi	r6,sp,120
2008d470:	0093b900 	call	20093b90 <__sprint_r>
2008d474:	103ba11e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d478:	d8c02017 	ldw	r3,128(sp)
2008d47c:	dc001f17 	ldw	r16,124(sp)
2008d480:	dc800404 	addi	r18,sp,16
2008d484:	003eb606 	br	2008cf60 <__flash_rwdata_start+0xffff0ddc>
2008d488:	b009883a 	mov	r4,r22
2008d48c:	b80b883a 	mov	r5,r23
2008d490:	d9801e04 	addi	r6,sp,120
2008d494:	0093b900 	call	20093b90 <__sprint_r>
2008d498:	103b981e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d49c:	d8c02017 	ldw	r3,128(sp)
2008d4a0:	dc001f17 	ldw	r16,124(sp)
2008d4a4:	da000404 	addi	r8,sp,16
2008d4a8:	003e8d06 	br	2008cee0 <__flash_rwdata_start+0xffff0d5c>
2008d4ac:	b009883a 	mov	r4,r22
2008d4b0:	b80b883a 	mov	r5,r23
2008d4b4:	d9801e04 	addi	r6,sp,120
2008d4b8:	0093b900 	call	20093b90 <__sprint_r>
2008d4bc:	103b8f1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d4c0:	d8c02017 	ldw	r3,128(sp)
2008d4c4:	dc001f17 	ldw	r16,124(sp)
2008d4c8:	dc800404 	addi	r18,sp,16
2008d4cc:	003e8f06 	br	2008cf0c <__flash_rwdata_start+0xffff0d88>
2008d4d0:	db001e04 	addi	r12,sp,120
2008d4d4:	0025883a 	mov	r18,zero
2008d4d8:	db003115 	stw	r12,196(sp)
2008d4dc:	003be106 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d4e0:	b009883a 	mov	r4,r22
2008d4e4:	b80b883a 	mov	r5,r23
2008d4e8:	d9801e04 	addi	r6,sp,120
2008d4ec:	0093b900 	call	20093b90 <__sprint_r>
2008d4f0:	103b821e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d4f4:	d8c02017 	ldw	r3,128(sp)
2008d4f8:	da000404 	addi	r8,sp,16
2008d4fc:	003c3b06 	br	2008c5ec <__flash_rwdata_start+0xffff0468>
2008d500:	04e7c83a 	sub	r19,zero,r19
2008d504:	9804c03a 	cmpne	r2,r19,zero
2008d508:	0739c83a 	sub	fp,zero,fp
2008d50c:	e0b9c83a 	sub	fp,fp,r2
2008d510:	05400b44 	movi	r21,45
2008d514:	dd402785 	stb	r21,158(sp)
2008d518:	da403215 	stw	r9,200(sp)
2008d51c:	00800044 	movi	r2,1
2008d520:	9f06b03a 	or	r3,r19,fp
2008d524:	003bb506 	br	2008c3fc <__flash_rwdata_start+0xffff0278>
2008d528:	da003f15 	stw	r8,252(sp)
2008d52c:	da403e15 	stw	r9,248(sp)
2008d530:	009257c0 	call	2009257c <__fpclassifyd>
2008d534:	da003f17 	ldw	r8,252(sp)
2008d538:	da403e17 	ldw	r9,248(sp)
2008d53c:	1000ce26 	beq	r2,zero,2008d878 <___vfprintf_internal_r+0x194c>
2008d540:	057ff7c4 	movi	r21,-33
2008d544:	00bfffc4 	movi	r2,-1
2008d548:	856a703a 	and	r21,r16,r21
2008d54c:	4881e826 	beq	r9,r2,2008dcf0 <___vfprintf_internal_r+0x1dc4>
2008d550:	008011c4 	movi	r2,71
2008d554:	a881e326 	beq	r21,r2,2008dce4 <___vfprintf_internal_r+0x1db8>
2008d558:	db003917 	ldw	r12,228(sp)
2008d55c:	8ac04014 	ori	r11,r17,256
2008d560:	dac02d15 	stw	r11,180(sp)
2008d564:	6001ed16 	blt	r12,zero,2008dd1c <___vfprintf_internal_r+0x1df0>
2008d568:	dc803917 	ldw	r18,228(sp)
2008d56c:	d8002b05 	stb	zero,172(sp)
2008d570:	00801984 	movi	r2,102
2008d574:	80811826 	beq	r16,r2,2008d9d8 <___vfprintf_internal_r+0x1aac>
2008d578:	00801184 	movi	r2,70
2008d57c:	80811626 	beq	r16,r2,2008d9d8 <___vfprintf_internal_r+0x1aac>
2008d580:	00801144 	movi	r2,69
2008d584:	a881e926 	beq	r21,r2,2008dd2c <___vfprintf_internal_r+0x1e00>
2008d588:	4839883a 	mov	fp,r9
2008d58c:	d8802604 	addi	r2,sp,152
2008d590:	d8800115 	stw	r2,4(sp)
2008d594:	d9403717 	ldw	r5,220(sp)
2008d598:	d8802504 	addi	r2,sp,148
2008d59c:	d8800215 	stw	r2,8(sp)
2008d5a0:	d8802104 	addi	r2,sp,132
2008d5a4:	df000015 	stw	fp,0(sp)
2008d5a8:	d8800315 	stw	r2,12(sp)
2008d5ac:	b009883a 	mov	r4,r22
2008d5b0:	900d883a 	mov	r6,r18
2008d5b4:	01c00084 	movi	r7,2
2008d5b8:	da003f15 	stw	r8,252(sp)
2008d5bc:	da403e15 	stw	r9,248(sp)
2008d5c0:	008e3e00 	call	2008e3e0 <_dtoa_r>
2008d5c4:	d8803115 	stw	r2,196(sp)
2008d5c8:	008019c4 	movi	r2,103
2008d5cc:	da003f17 	ldw	r8,252(sp)
2008d5d0:	da403e17 	ldw	r9,248(sp)
2008d5d4:	80800226 	beq	r16,r2,2008d5e0 <___vfprintf_internal_r+0x16b4>
2008d5d8:	008011c4 	movi	r2,71
2008d5dc:	8081101e 	bne	r16,r2,2008da20 <___vfprintf_internal_r+0x1af4>
2008d5e0:	8880004c 	andi	r2,r17,1
2008d5e4:	1001dd26 	beq	r2,zero,2008dd5c <___vfprintf_internal_r+0x1e30>
2008d5e8:	db003117 	ldw	r12,196(sp)
2008d5ec:	6715883a 	add	r10,r12,fp
2008d5f0:	d9003717 	ldw	r4,220(sp)
2008d5f4:	900b883a 	mov	r5,r18
2008d5f8:	000d883a 	mov	r6,zero
2008d5fc:	000f883a 	mov	r7,zero
2008d600:	da003f15 	stw	r8,252(sp)
2008d604:	da403e15 	stw	r9,248(sp)
2008d608:	da803d15 	stw	r10,244(sp)
2008d60c:	00963a00 	call	200963a0 <__eqdf2>
2008d610:	da003f17 	ldw	r8,252(sp)
2008d614:	da403e17 	ldw	r9,248(sp)
2008d618:	da803d17 	ldw	r10,244(sp)
2008d61c:	10016526 	beq	r2,zero,2008dbb4 <___vfprintf_internal_r+0x1c88>
2008d620:	d8802117 	ldw	r2,132(sp)
2008d624:	1280062e 	bgeu	r2,r10,2008d640 <___vfprintf_internal_r+0x1714>
2008d628:	01000c04 	movi	r4,48
2008d62c:	10c00044 	addi	r3,r2,1
2008d630:	d8c02115 	stw	r3,132(sp)
2008d634:	11000005 	stb	r4,0(r2)
2008d638:	d8802117 	ldw	r2,132(sp)
2008d63c:	12bffb36 	bltu	r2,r10,2008d62c <__flash_rwdata_start+0xffff14a8>
2008d640:	db003117 	ldw	r12,196(sp)
2008d644:	1305c83a 	sub	r2,r2,r12
2008d648:	d8803315 	stw	r2,204(sp)
2008d64c:	008011c4 	movi	r2,71
2008d650:	a8814d26 	beq	r21,r2,2008db88 <___vfprintf_internal_r+0x1c5c>
2008d654:	00801944 	movi	r2,101
2008d658:	1402060e 	bge	r2,r16,2008de74 <___vfprintf_internal_r+0x1f48>
2008d65c:	00801984 	movi	r2,102
2008d660:	8081b426 	beq	r16,r2,2008dd34 <___vfprintf_internal_r+0x1e08>
2008d664:	db002617 	ldw	r12,152(sp)
2008d668:	db003415 	stw	r12,208(sp)
2008d66c:	db003417 	ldw	r12,208(sp)
2008d670:	dac03317 	ldw	r11,204(sp)
2008d674:	62c1a016 	blt	r12,r11,2008dcf8 <___vfprintf_internal_r+0x1dcc>
2008d678:	8c40004c 	andi	r17,r17,1
2008d67c:	8801bf1e 	bne	r17,zero,2008dd7c <___vfprintf_internal_r+0x1e50>
2008d680:	6005883a 	mov	r2,r12
2008d684:	6001b316 	blt	r12,zero,2008dd54 <___vfprintf_internal_r+0x1e28>
2008d688:	dc803417 	ldw	r18,208(sp)
2008d68c:	df002b07 	ldb	fp,172(sp)
2008d690:	e0012e1e 	bne	fp,zero,2008db4c <___vfprintf_internal_r+0x1c20>
2008d694:	dc402d17 	ldw	r17,180(sp)
2008d698:	dd402783 	ldbu	r21,158(sp)
2008d69c:	d8802b15 	stw	r2,172(sp)
2008d6a0:	dcc02d15 	stw	r19,180(sp)
2008d6a4:	d8003215 	stw	zero,200(sp)
2008d6a8:	003b7306 	br	2008c478 <__flash_rwdata_start+0xffff02f4>
2008d6ac:	00800084 	movi	r2,2
2008d6b0:	003c4d06 	br	2008c7e8 <__flash_rwdata_start+0xffff0664>
2008d6b4:	8880040c 	andi	r2,r17,16
2008d6b8:	1000091e 	bne	r2,zero,2008d6e0 <___vfprintf_internal_r+0x17b4>
2008d6bc:	8c40100c 	andi	r17,r17,64
2008d6c0:	88000726 	beq	r17,zero,2008d6e0 <___vfprintf_internal_r+0x17b4>
2008d6c4:	db002d17 	ldw	r12,180(sp)
2008d6c8:	dac02f17 	ldw	r11,188(sp)
2008d6cc:	60800017 	ldw	r2,0(r12)
2008d6d0:	63000104 	addi	r12,r12,4
2008d6d4:	db002d15 	stw	r12,180(sp)
2008d6d8:	12c0000d 	sth	r11,0(r2)
2008d6dc:	003a4e06 	br	2008c018 <__flash_rwdata_start+0xfffefe94>
2008d6e0:	db002d17 	ldw	r12,180(sp)
2008d6e4:	dac02f17 	ldw	r11,188(sp)
2008d6e8:	60800017 	ldw	r2,0(r12)
2008d6ec:	63000104 	addi	r12,r12,4
2008d6f0:	db002d15 	stw	r12,180(sp)
2008d6f4:	12c00015 	stw	r11,0(r2)
2008d6f8:	003a4706 	br	2008c018 <__flash_rwdata_start+0xfffefe94>
2008d6fc:	1c000007 	ldb	r16,0(r3)
2008d700:	1805883a 	mov	r2,r3
2008d704:	003a6e06 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008d708:	88c0100c 	andi	r3,r17,64
2008d70c:	18006b26 	beq	r3,zero,2008d8bc <___vfprintf_internal_r+0x1990>
2008d710:	dac02d17 	ldw	r11,180(sp)
2008d714:	14c0000b 	ldhu	r19,0(r2)
2008d718:	0039883a 	mov	fp,zero
2008d71c:	5ac00104 	addi	r11,r11,4
2008d720:	dac02d15 	stw	r11,180(sp)
2008d724:	003cb206 	br	2008c9f0 <__flash_rwdata_start+0xffff086c>
2008d728:	01000034 	movhi	r4,0
2008d72c:	21011e84 	addi	r4,r4,1146
2008d730:	d9002c15 	stw	r4,176(sp)
2008d734:	dac02c17 	ldw	r11,176(sp)
2008d738:	1c87883a 	add	r3,r3,r18
2008d73c:	10800044 	addi	r2,r2,1
2008d740:	42c00015 	stw	r11,0(r8)
2008d744:	44800115 	stw	r18,4(r8)
2008d748:	d8c02015 	stw	r3,128(sp)
2008d74c:	d8801f15 	stw	r2,124(sp)
2008d750:	010001c4 	movi	r4,7
2008d754:	20bee016 	blt	r4,r2,2008d2d8 <__flash_rwdata_start+0xffff1154>
2008d758:	42000204 	addi	r8,r8,8
2008d75c:	003ee506 	br	2008d2f4 <__flash_rwdata_start+0xffff1170>
2008d760:	01000034 	movhi	r4,0
2008d764:	21011e84 	addi	r4,r4,1146
2008d768:	d9002c15 	stw	r4,176(sp)
2008d76c:	003bbe06 	br	2008c668 <__flash_rwdata_start+0xffff04e4>
2008d770:	b009883a 	mov	r4,r22
2008d774:	b80b883a 	mov	r5,r23
2008d778:	d9801e04 	addi	r6,sp,120
2008d77c:	0093b900 	call	20093b90 <__sprint_r>
2008d780:	103ade1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d784:	d8c02017 	ldw	r3,128(sp)
2008d788:	da000404 	addi	r8,sp,16
2008d78c:	003d6b06 	br	2008cd3c <__flash_rwdata_start+0xffff0bb8>
2008d790:	d8801f17 	ldw	r2,124(sp)
2008d794:	03000034 	movhi	r12,0
2008d798:	01000044 	movi	r4,1
2008d79c:	18c00044 	addi	r3,r3,1
2008d7a0:	10800044 	addi	r2,r2,1
2008d7a4:	63011604 	addi	r12,r12,1112
2008d7a8:	41000115 	stw	r4,4(r8)
2008d7ac:	43000015 	stw	r12,0(r8)
2008d7b0:	d8c02015 	stw	r3,128(sp)
2008d7b4:	d8801f15 	stw	r2,124(sp)
2008d7b8:	010001c4 	movi	r4,7
2008d7bc:	20804916 	blt	r4,r2,2008d8e4 <___vfprintf_internal_r+0x19b8>
2008d7c0:	42000204 	addi	r8,r8,8
2008d7c4:	8000041e 	bne	r16,zero,2008d7d8 <___vfprintf_internal_r+0x18ac>
2008d7c8:	dac03317 	ldw	r11,204(sp)
2008d7cc:	5800021e 	bne	r11,zero,2008d7d8 <___vfprintf_internal_r+0x18ac>
2008d7d0:	8880004c 	andi	r2,r17,1
2008d7d4:	103bbb26 	beq	r2,zero,2008c6c4 <__flash_rwdata_start+0xffff0540>
2008d7d8:	db003817 	ldw	r12,224(sp)
2008d7dc:	d8801f17 	ldw	r2,124(sp)
2008d7e0:	dac03517 	ldw	r11,212(sp)
2008d7e4:	1b07883a 	add	r3,r3,r12
2008d7e8:	10800044 	addi	r2,r2,1
2008d7ec:	42c00015 	stw	r11,0(r8)
2008d7f0:	43000115 	stw	r12,4(r8)
2008d7f4:	d8c02015 	stw	r3,128(sp)
2008d7f8:	d8801f15 	stw	r2,124(sp)
2008d7fc:	010001c4 	movi	r4,7
2008d800:	20812e16 	blt	r4,r2,2008dcbc <___vfprintf_internal_r+0x1d90>
2008d804:	42000204 	addi	r8,r8,8
2008d808:	0421c83a 	sub	r16,zero,r16
2008d80c:	04005c0e 	bge	zero,r16,2008d980 <___vfprintf_internal_r+0x1a54>
2008d810:	04800404 	movi	r18,16
2008d814:	94009f0e 	bge	r18,r16,2008da94 <___vfprintf_internal_r+0x1b68>
2008d818:	01000034 	movhi	r4,0
2008d81c:	21011e84 	addi	r4,r4,1146
2008d820:	d9002c15 	stw	r4,176(sp)
2008d824:	054001c4 	movi	r21,7
2008d828:	00000306 	br	2008d838 <___vfprintf_internal_r+0x190c>
2008d82c:	42000204 	addi	r8,r8,8
2008d830:	843ffc04 	addi	r16,r16,-16
2008d834:	94009a0e 	bge	r18,r16,2008daa0 <___vfprintf_internal_r+0x1b74>
2008d838:	18c00404 	addi	r3,r3,16
2008d83c:	10800044 	addi	r2,r2,1
2008d840:	45000015 	stw	r20,0(r8)
2008d844:	44800115 	stw	r18,4(r8)
2008d848:	d8c02015 	stw	r3,128(sp)
2008d84c:	d8801f15 	stw	r2,124(sp)
2008d850:	a8bff60e 	bge	r21,r2,2008d82c <__flash_rwdata_start+0xffff16a8>
2008d854:	b009883a 	mov	r4,r22
2008d858:	b80b883a 	mov	r5,r23
2008d85c:	d9801e04 	addi	r6,sp,120
2008d860:	0093b900 	call	20093b90 <__sprint_r>
2008d864:	103aa51e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d868:	d8c02017 	ldw	r3,128(sp)
2008d86c:	d8801f17 	ldw	r2,124(sp)
2008d870:	da000404 	addi	r8,sp,16
2008d874:	003fee06 	br	2008d830 <__flash_rwdata_start+0xffff16ac>
2008d878:	008011c4 	movi	r2,71
2008d87c:	1400be16 	blt	r2,r16,2008db78 <___vfprintf_internal_r+0x1c4c>
2008d880:	03000034 	movhi	r12,0
2008d884:	63010804 	addi	r12,r12,1056
2008d888:	db003115 	stw	r12,196(sp)
2008d88c:	00c000c4 	movi	r3,3
2008d890:	00bfdfc4 	movi	r2,-129
2008d894:	d8c02b15 	stw	r3,172(sp)
2008d898:	88a2703a 	and	r17,r17,r2
2008d89c:	dd402783 	ldbu	r21,158(sp)
2008d8a0:	dcc02d15 	stw	r19,180(sp)
2008d8a4:	1825883a 	mov	r18,r3
2008d8a8:	d8003215 	stw	zero,200(sp)
2008d8ac:	d8003415 	stw	zero,208(sp)
2008d8b0:	003af106 	br	2008c478 <__flash_rwdata_start+0xffff02f4>
2008d8b4:	4825883a 	mov	r18,r9
2008d8b8:	003c9306 	br	2008cb08 <__flash_rwdata_start+0xffff0984>
2008d8bc:	db002d17 	ldw	r12,180(sp)
2008d8c0:	14c00017 	ldw	r19,0(r2)
2008d8c4:	0039883a 	mov	fp,zero
2008d8c8:	63000104 	addi	r12,r12,4
2008d8cc:	db002d15 	stw	r12,180(sp)
2008d8d0:	003c4706 	br	2008c9f0 <__flash_rwdata_start+0xffff086c>
2008d8d4:	00800034 	movhi	r2,0
2008d8d8:	10810604 	addi	r2,r2,1048
2008d8dc:	d8803115 	stw	r2,196(sp)
2008d8e0:	003bf106 	br	2008c8a8 <__flash_rwdata_start+0xffff0724>
2008d8e4:	b009883a 	mov	r4,r22
2008d8e8:	b80b883a 	mov	r5,r23
2008d8ec:	d9801e04 	addi	r6,sp,120
2008d8f0:	0093b900 	call	20093b90 <__sprint_r>
2008d8f4:	103a811e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d8f8:	dc002617 	ldw	r16,152(sp)
2008d8fc:	d8c02017 	ldw	r3,128(sp)
2008d900:	da000404 	addi	r8,sp,16
2008d904:	003faf06 	br	2008d7c4 <__flash_rwdata_start+0xffff1640>
2008d908:	db002e17 	ldw	r12,184(sp)
2008d90c:	1805883a 	mov	r2,r3
2008d910:	dac02d15 	stw	r11,180(sp)
2008d914:	0319c83a 	sub	r12,zero,r12
2008d918:	db002e15 	stw	r12,184(sp)
2008d91c:	003a8206 	br	2008c328 <__flash_rwdata_start+0xffff01a4>
2008d920:	18800044 	addi	r2,r3,1
2008d924:	8c400814 	ori	r17,r17,32
2008d928:	1c000047 	ldb	r16,1(r3)
2008d92c:	0039e406 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008d930:	b009883a 	mov	r4,r22
2008d934:	b80b883a 	mov	r5,r23
2008d938:	d9801e04 	addi	r6,sp,120
2008d93c:	0093b900 	call	20093b90 <__sprint_r>
2008d940:	103a6e1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d944:	d8c02017 	ldw	r3,128(sp)
2008d948:	da000404 	addi	r8,sp,16
2008d94c:	003d0c06 	br	2008cd80 <__flash_rwdata_start+0xffff0bfc>
2008d950:	db002817 	ldw	r12,160(sp)
2008d954:	d8c03117 	ldw	r3,196(sp)
2008d958:	60e5c83a 	sub	r18,r12,r3
2008d95c:	003ac106 	br	2008c464 <__flash_rwdata_start+0xffff02e0>
2008d960:	b009883a 	mov	r4,r22
2008d964:	b80b883a 	mov	r5,r23
2008d968:	d9801e04 	addi	r6,sp,120
2008d96c:	0093b900 	call	20093b90 <__sprint_r>
2008d970:	103a621e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008d974:	d8c02017 	ldw	r3,128(sp)
2008d978:	d8801f17 	ldw	r2,124(sp)
2008d97c:	da000404 	addi	r8,sp,16
2008d980:	db003317 	ldw	r12,204(sp)
2008d984:	dac03117 	ldw	r11,196(sp)
2008d988:	10800044 	addi	r2,r2,1
2008d98c:	1b07883a 	add	r3,r3,r12
2008d990:	42c00015 	stw	r11,0(r8)
2008d994:	43000115 	stw	r12,4(r8)
2008d998:	d8c02015 	stw	r3,128(sp)
2008d99c:	d8801f15 	stw	r2,124(sp)
2008d9a0:	010001c4 	movi	r4,7
2008d9a4:	20bb460e 	bge	r4,r2,2008c6c0 <__flash_rwdata_start+0xffff053c>
2008d9a8:	003d8506 	br	2008cfc0 <__flash_rwdata_start+0xffff0e3c>
2008d9ac:	da003f15 	stw	r8,252(sp)
2008d9b0:	0089e9c0 	call	20089e9c <strlen>
2008d9b4:	1025883a 	mov	r18,r2
2008d9b8:	da003f17 	ldw	r8,252(sp)
2008d9bc:	903c540e 	bge	r18,zero,2008cb10 <__flash_rwdata_start+0xffff098c>
2008d9c0:	0005883a 	mov	r2,zero
2008d9c4:	003c5206 	br	2008cb10 <__flash_rwdata_start+0xffff098c>
2008d9c8:	01000034 	movhi	r4,0
2008d9cc:	21012284 	addi	r4,r4,1162
2008d9d0:	d9003615 	stw	r4,216(sp)
2008d9d4:	003adc06 	br	2008c548 <__flash_rwdata_start+0xffff03c4>
2008d9d8:	d8802604 	addi	r2,sp,152
2008d9dc:	d8800115 	stw	r2,4(sp)
2008d9e0:	d9403717 	ldw	r5,220(sp)
2008d9e4:	d8802504 	addi	r2,sp,148
2008d9e8:	d8800215 	stw	r2,8(sp)
2008d9ec:	d8802104 	addi	r2,sp,132
2008d9f0:	da400015 	stw	r9,0(sp)
2008d9f4:	d8800315 	stw	r2,12(sp)
2008d9f8:	b009883a 	mov	r4,r22
2008d9fc:	900d883a 	mov	r6,r18
2008da00:	01c000c4 	movi	r7,3
2008da04:	da003f15 	stw	r8,252(sp)
2008da08:	da403e15 	stw	r9,248(sp)
2008da0c:	008e3e00 	call	2008e3e0 <_dtoa_r>
2008da10:	da403e17 	ldw	r9,248(sp)
2008da14:	da003f17 	ldw	r8,252(sp)
2008da18:	d8803115 	stw	r2,196(sp)
2008da1c:	4839883a 	mov	fp,r9
2008da20:	dac03117 	ldw	r11,196(sp)
2008da24:	00801184 	movi	r2,70
2008da28:	5f15883a 	add	r10,r11,fp
2008da2c:	a8bef01e 	bne	r21,r2,2008d5f0 <__flash_rwdata_start+0xffff146c>
2008da30:	59000007 	ldb	r4,0(r11)
2008da34:	00800c04 	movi	r2,48
2008da38:	2080d526 	beq	r4,r2,2008dd90 <___vfprintf_internal_r+0x1e64>
2008da3c:	d8c02617 	ldw	r3,152(sp)
2008da40:	50d5883a 	add	r10,r10,r3
2008da44:	003eea06 	br	2008d5f0 <__flash_rwdata_start+0xffff146c>
2008da48:	0025883a 	mov	r18,zero
2008da4c:	003db306 	br	2008d11c <__flash_rwdata_start+0xffff0f98>
2008da50:	b009883a 	mov	r4,r22
2008da54:	b80b883a 	mov	r5,r23
2008da58:	d9801e04 	addi	r6,sp,120
2008da5c:	0093b900 	call	20093b90 <__sprint_r>
2008da60:	103a261e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008da64:	d8c02017 	ldw	r3,128(sp)
2008da68:	da000404 	addi	r8,sp,16
2008da6c:	003daa06 	br	2008d118 <__flash_rwdata_start+0xffff0f94>
2008da70:	b009883a 	mov	r4,r22
2008da74:	b80b883a 	mov	r5,r23
2008da78:	d9801e04 	addi	r6,sp,120
2008da7c:	0093b900 	call	20093b90 <__sprint_r>
2008da80:	103a1e1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008da84:	d8802617 	ldw	r2,152(sp)
2008da88:	d8c02017 	ldw	r3,128(sp)
2008da8c:	da000404 	addi	r8,sp,16
2008da90:	003e2c06 	br	2008d344 <__flash_rwdata_start+0xffff11c0>
2008da94:	03000034 	movhi	r12,0
2008da98:	63011e84 	addi	r12,r12,1146
2008da9c:	db002c15 	stw	r12,176(sp)
2008daa0:	dac02c17 	ldw	r11,176(sp)
2008daa4:	1c07883a 	add	r3,r3,r16
2008daa8:	10800044 	addi	r2,r2,1
2008daac:	42c00015 	stw	r11,0(r8)
2008dab0:	44000115 	stw	r16,4(r8)
2008dab4:	d8c02015 	stw	r3,128(sp)
2008dab8:	d8801f15 	stw	r2,124(sp)
2008dabc:	010001c4 	movi	r4,7
2008dac0:	20bfa716 	blt	r4,r2,2008d960 <__flash_rwdata_start+0xffff17dc>
2008dac4:	42000204 	addi	r8,r8,8
2008dac8:	003fad06 	br	2008d980 <__flash_rwdata_start+0xffff17fc>
2008dacc:	00800184 	movi	r2,6
2008dad0:	1240012e 	bgeu	r2,r9,2008dad8 <___vfprintf_internal_r+0x1bac>
2008dad4:	1013883a 	mov	r9,r2
2008dad8:	4825883a 	mov	r18,r9
2008dadc:	4805883a 	mov	r2,r9
2008dae0:	4800c216 	blt	r9,zero,2008ddec <___vfprintf_internal_r+0x1ec0>
2008dae4:	d8802b15 	stw	r2,172(sp)
2008dae8:	00800034 	movhi	r2,0
2008daec:	10811404 	addi	r2,r2,1104
2008daf0:	d8803115 	stw	r2,196(sp)
2008daf4:	dcc02d15 	stw	r19,180(sp)
2008daf8:	d8003215 	stw	zero,200(sp)
2008dafc:	d8003415 	stw	zero,208(sp)
2008db00:	0005883a 	mov	r2,zero
2008db04:	003a6306 	br	2008c494 <__flash_rwdata_start+0xffff0310>
2008db08:	0021883a 	mov	r16,zero
2008db0c:	003e1f06 	br	2008d38c <__flash_rwdata_start+0xffff1208>
2008db10:	b009883a 	mov	r4,r22
2008db14:	b80b883a 	mov	r5,r23
2008db18:	d9801e04 	addi	r6,sp,120
2008db1c:	0093b900 	call	20093b90 <__sprint_r>
2008db20:	1039f61e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008db24:	d8802617 	ldw	r2,152(sp)
2008db28:	db003317 	ldw	r12,204(sp)
2008db2c:	d8c02017 	ldw	r3,128(sp)
2008db30:	da000404 	addi	r8,sp,16
2008db34:	6085c83a 	sub	r2,r12,r2
2008db38:	003e1306 	br	2008d388 <__flash_rwdata_start+0xffff1204>
2008db3c:	03000034 	movhi	r12,0
2008db40:	63012284 	addi	r12,r12,1162
2008db44:	db003615 	stw	r12,216(sp)
2008db48:	003b0206 	br	2008c754 <__flash_rwdata_start+0xffff05d0>
2008db4c:	00c00b44 	movi	r3,45
2008db50:	d8802b15 	stw	r2,172(sp)
2008db54:	dc402d17 	ldw	r17,180(sp)
2008db58:	d8c02785 	stb	r3,158(sp)
2008db5c:	dcc02d15 	stw	r19,180(sp)
2008db60:	d8003215 	stw	zero,200(sp)
2008db64:	00800b44 	movi	r2,45
2008db68:	003a4706 	br	2008c488 <__flash_rwdata_start+0xffff0304>
2008db6c:	05400b44 	movi	r21,45
2008db70:	dd402785 	stb	r21,158(sp)
2008db74:	003b4706 	br	2008c894 <__flash_rwdata_start+0xffff0710>
2008db78:	00800034 	movhi	r2,0
2008db7c:	10810904 	addi	r2,r2,1060
2008db80:	d8803115 	stw	r2,196(sp)
2008db84:	003f4106 	br	2008d88c <__flash_rwdata_start+0xffff1708>
2008db88:	d8c02617 	ldw	r3,152(sp)
2008db8c:	00bfff44 	movi	r2,-3
2008db90:	18801116 	blt	r3,r2,2008dbd8 <___vfprintf_internal_r+0x1cac>
2008db94:	48c01016 	blt	r9,r3,2008dbd8 <___vfprintf_internal_r+0x1cac>
2008db98:	d8c03415 	stw	r3,208(sp)
2008db9c:	040019c4 	movi	r16,103
2008dba0:	003eb206 	br	2008d66c <__flash_rwdata_start+0xffff14e8>
2008dba4:	01000034 	movhi	r4,0
2008dba8:	21011e84 	addi	r4,r4,1146
2008dbac:	d9002c15 	stw	r4,176(sp)
2008dbb0:	003cb106 	br	2008ce78 <__flash_rwdata_start+0xffff0cf4>
2008dbb4:	5005883a 	mov	r2,r10
2008dbb8:	003ea106 	br	2008d640 <__flash_rwdata_start+0xffff14bc>
2008dbbc:	da402b15 	stw	r9,172(sp)
2008dbc0:	dd402783 	ldbu	r21,158(sp)
2008dbc4:	4825883a 	mov	r18,r9
2008dbc8:	dcc02d15 	stw	r19,180(sp)
2008dbcc:	d8003215 	stw	zero,200(sp)
2008dbd0:	d8003415 	stw	zero,208(sp)
2008dbd4:	003a2806 	br	2008c478 <__flash_rwdata_start+0xffff02f4>
2008dbd8:	843fff84 	addi	r16,r16,-2
2008dbdc:	1f3fffc4 	addi	fp,r3,-1
2008dbe0:	df002615 	stw	fp,152(sp)
2008dbe4:	dc0022c5 	stb	r16,139(sp)
2008dbe8:	e0009816 	blt	fp,zero,2008de4c <___vfprintf_internal_r+0x1f20>
2008dbec:	00800ac4 	movi	r2,43
2008dbf0:	d8802305 	stb	r2,140(sp)
2008dbf4:	00800244 	movi	r2,9
2008dbf8:	1700750e 	bge	r2,fp,2008ddd0 <___vfprintf_internal_r+0x1ea4>
2008dbfc:	dd4022c4 	addi	r21,sp,139
2008dc00:	dc002c15 	stw	r16,176(sp)
2008dc04:	4025883a 	mov	r18,r8
2008dc08:	a821883a 	mov	r16,r21
2008dc0c:	e009883a 	mov	r4,fp
2008dc10:	01400284 	movi	r5,10
2008dc14:	00866140 	call	20086614 <__modsi3>
2008dc18:	10800c04 	addi	r2,r2,48
2008dc1c:	843fffc4 	addi	r16,r16,-1
2008dc20:	e009883a 	mov	r4,fp
2008dc24:	01400284 	movi	r5,10
2008dc28:	80800005 	stb	r2,0(r16)
2008dc2c:	00865c00 	call	200865c0 <__divsi3>
2008dc30:	1039883a 	mov	fp,r2
2008dc34:	00800244 	movi	r2,9
2008dc38:	173ff416 	blt	r2,fp,2008dc0c <__flash_rwdata_start+0xffff1a88>
2008dc3c:	9011883a 	mov	r8,r18
2008dc40:	e0800c04 	addi	r2,fp,48
2008dc44:	8025883a 	mov	r18,r16
2008dc48:	913fffc4 	addi	r4,r18,-1
2008dc4c:	90bfffc5 	stb	r2,-1(r18)
2008dc50:	dc002c17 	ldw	r16,176(sp)
2008dc54:	2540852e 	bgeu	r4,r21,2008de6c <___vfprintf_internal_r+0x1f40>
2008dc58:	d9402384 	addi	r5,sp,142
2008dc5c:	2c8bc83a 	sub	r5,r5,r18
2008dc60:	d8c02344 	addi	r3,sp,141
2008dc64:	a94b883a 	add	r5,r21,r5
2008dc68:	00000106 	br	2008dc70 <___vfprintf_internal_r+0x1d44>
2008dc6c:	20800003 	ldbu	r2,0(r4)
2008dc70:	18800005 	stb	r2,0(r3)
2008dc74:	18c00044 	addi	r3,r3,1
2008dc78:	21000044 	addi	r4,r4,1
2008dc7c:	197ffb1e 	bne	r3,r5,2008dc6c <__flash_rwdata_start+0xffff1ae8>
2008dc80:	d8802304 	addi	r2,sp,140
2008dc84:	1485c83a 	sub	r2,r2,r18
2008dc88:	d8c02344 	addi	r3,sp,141
2008dc8c:	1885883a 	add	r2,r3,r2
2008dc90:	dac03317 	ldw	r11,204(sp)
2008dc94:	156bc83a 	sub	r21,r2,r21
2008dc98:	dd403a15 	stw	r21,232(sp)
2008dc9c:	00800044 	movi	r2,1
2008dca0:	5d65883a 	add	r18,r11,r21
2008dca4:	12c0660e 	bge	r2,r11,2008de40 <___vfprintf_internal_r+0x1f14>
2008dca8:	94800044 	addi	r18,r18,1
2008dcac:	9005883a 	mov	r2,r18
2008dcb0:	90006116 	blt	r18,zero,2008de38 <___vfprintf_internal_r+0x1f0c>
2008dcb4:	d8003415 	stw	zero,208(sp)
2008dcb8:	003e7406 	br	2008d68c <__flash_rwdata_start+0xffff1508>
2008dcbc:	b009883a 	mov	r4,r22
2008dcc0:	b80b883a 	mov	r5,r23
2008dcc4:	d9801e04 	addi	r6,sp,120
2008dcc8:	0093b900 	call	20093b90 <__sprint_r>
2008dccc:	10398b1e 	bne	r2,zero,2008c2fc <__flash_rwdata_start+0xffff0178>
2008dcd0:	dc002617 	ldw	r16,152(sp)
2008dcd4:	d8c02017 	ldw	r3,128(sp)
2008dcd8:	d8801f17 	ldw	r2,124(sp)
2008dcdc:	da000404 	addi	r8,sp,16
2008dce0:	003ec906 	br	2008d808 <__flash_rwdata_start+0xffff1684>
2008dce4:	483e1c1e 	bne	r9,zero,2008d558 <__flash_rwdata_start+0xffff13d4>
2008dce8:	9013883a 	mov	r9,r18
2008dcec:	003e1a06 	br	2008d558 <__flash_rwdata_start+0xffff13d4>
2008dcf0:	02400184 	movi	r9,6
2008dcf4:	003e1806 	br	2008d558 <__flash_rwdata_start+0xffff13d4>
2008dcf8:	d8c03417 	ldw	r3,208(sp)
2008dcfc:	00c04b0e 	bge	zero,r3,2008de2c <___vfprintf_internal_r+0x1f00>
2008dd00:	04800044 	movi	r18,1
2008dd04:	dac03317 	ldw	r11,204(sp)
2008dd08:	92e5883a 	add	r18,r18,r11
2008dd0c:	9005883a 	mov	r2,r18
2008dd10:	903e5e0e 	bge	r18,zero,2008d68c <__flash_rwdata_start+0xffff1508>
2008dd14:	0005883a 	mov	r2,zero
2008dd18:	003e5c06 	br	2008d68c <__flash_rwdata_start+0xffff1508>
2008dd1c:	00c00b44 	movi	r3,45
2008dd20:	64a0003c 	xorhi	r18,r12,32768
2008dd24:	d8c02b05 	stb	r3,172(sp)
2008dd28:	003e1106 	br	2008d570 <__flash_rwdata_start+0xffff13ec>
2008dd2c:	4f000044 	addi	fp,r9,1
2008dd30:	003e1606 	br	2008d58c <__flash_rwdata_start+0xffff1408>
2008dd34:	d8c02617 	ldw	r3,152(sp)
2008dd38:	d8c03415 	stw	r3,208(sp)
2008dd3c:	00c0350e 	bge	zero,r3,2008de14 <___vfprintf_internal_r+0x1ee8>
2008dd40:	4800081e 	bne	r9,zero,2008dd64 <___vfprintf_internal_r+0x1e38>
2008dd44:	8c40004c 	andi	r17,r17,1
2008dd48:	8800061e 	bne	r17,zero,2008dd64 <___vfprintf_internal_r+0x1e38>
2008dd4c:	1805883a 	mov	r2,r3
2008dd50:	183e4d0e 	bge	r3,zero,2008d688 <__flash_rwdata_start+0xffff1504>
2008dd54:	0005883a 	mov	r2,zero
2008dd58:	003e4b06 	br	2008d688 <__flash_rwdata_start+0xffff1504>
2008dd5c:	d8802117 	ldw	r2,132(sp)
2008dd60:	003e3706 	br	2008d640 <__flash_rwdata_start+0xffff14bc>
2008dd64:	dac03417 	ldw	r11,208(sp)
2008dd68:	4a400044 	addi	r9,r9,1
2008dd6c:	5a65883a 	add	r18,r11,r9
2008dd70:	9005883a 	mov	r2,r18
2008dd74:	903e450e 	bge	r18,zero,2008d68c <__flash_rwdata_start+0xffff1508>
2008dd78:	003fe606 	br	2008dd14 <__flash_rwdata_start+0xffff1b90>
2008dd7c:	db003417 	ldw	r12,208(sp)
2008dd80:	64800044 	addi	r18,r12,1
2008dd84:	9005883a 	mov	r2,r18
2008dd88:	903e400e 	bge	r18,zero,2008d68c <__flash_rwdata_start+0xffff1508>
2008dd8c:	003fe106 	br	2008dd14 <__flash_rwdata_start+0xffff1b90>
2008dd90:	d9003717 	ldw	r4,220(sp)
2008dd94:	900b883a 	mov	r5,r18
2008dd98:	000d883a 	mov	r6,zero
2008dd9c:	000f883a 	mov	r7,zero
2008dda0:	da003f15 	stw	r8,252(sp)
2008dda4:	da403e15 	stw	r9,248(sp)
2008dda8:	da803d15 	stw	r10,244(sp)
2008ddac:	00963a00 	call	200963a0 <__eqdf2>
2008ddb0:	da003f17 	ldw	r8,252(sp)
2008ddb4:	da403e17 	ldw	r9,248(sp)
2008ddb8:	da803d17 	ldw	r10,244(sp)
2008ddbc:	103f1f26 	beq	r2,zero,2008da3c <__flash_rwdata_start+0xffff18b8>
2008ddc0:	00800044 	movi	r2,1
2008ddc4:	1707c83a 	sub	r3,r2,fp
2008ddc8:	d8c02615 	stw	r3,152(sp)
2008ddcc:	003f1c06 	br	2008da40 <__flash_rwdata_start+0xffff18bc>
2008ddd0:	00800c04 	movi	r2,48
2008ddd4:	e0c00c04 	addi	r3,fp,48
2008ddd8:	d8802345 	stb	r2,141(sp)
2008dddc:	d8c02385 	stb	r3,142(sp)
2008dde0:	d88023c4 	addi	r2,sp,143
2008dde4:	dd4022c4 	addi	r21,sp,139
2008dde8:	003fa906 	br	2008dc90 <__flash_rwdata_start+0xffff1b0c>
2008ddec:	0005883a 	mov	r2,zero
2008ddf0:	003f3c06 	br	2008dae4 <__flash_rwdata_start+0xffff1960>
2008ddf4:	dac02d17 	ldw	r11,180(sp)
2008ddf8:	5a400017 	ldw	r9,0(r11)
2008ddfc:	5ac00104 	addi	r11,r11,4
2008de00:	dac02d15 	stw	r11,180(sp)
2008de04:	483ec80e 	bge	r9,zero,2008d928 <__flash_rwdata_start+0xffff17a4>
2008de08:	027fffc4 	movi	r9,-1
2008de0c:	1c000047 	ldb	r16,1(r3)
2008de10:	0038ab06 	br	2008c0c0 <__flash_rwdata_start+0xfffeff3c>
2008de14:	4800111e 	bne	r9,zero,2008de5c <___vfprintf_internal_r+0x1f30>
2008de18:	8c40004c 	andi	r17,r17,1
2008de1c:	88000f1e 	bne	r17,zero,2008de5c <___vfprintf_internal_r+0x1f30>
2008de20:	00800044 	movi	r2,1
2008de24:	1025883a 	mov	r18,r2
2008de28:	003e1806 	br	2008d68c <__flash_rwdata_start+0xffff1508>
2008de2c:	04800084 	movi	r18,2
2008de30:	90e5c83a 	sub	r18,r18,r3
2008de34:	003fb306 	br	2008dd04 <__flash_rwdata_start+0xffff1b80>
2008de38:	0005883a 	mov	r2,zero
2008de3c:	003f9d06 	br	2008dcb4 <__flash_rwdata_start+0xffff1b30>
2008de40:	88a2703a 	and	r17,r17,r2
2008de44:	883f9926 	beq	r17,zero,2008dcac <__flash_rwdata_start+0xffff1b28>
2008de48:	003f9706 	br	2008dca8 <__flash_rwdata_start+0xffff1b24>
2008de4c:	00800b44 	movi	r2,45
2008de50:	0739c83a 	sub	fp,zero,fp
2008de54:	d8802305 	stb	r2,140(sp)
2008de58:	003f6606 	br	2008dbf4 <__flash_rwdata_start+0xffff1a70>
2008de5c:	4c800084 	addi	r18,r9,2
2008de60:	9005883a 	mov	r2,r18
2008de64:	903e090e 	bge	r18,zero,2008d68c <__flash_rwdata_start+0xffff1508>
2008de68:	003faa06 	br	2008dd14 <__flash_rwdata_start+0xffff1b90>
2008de6c:	d8802344 	addi	r2,sp,141
2008de70:	003f8706 	br	2008dc90 <__flash_rwdata_start+0xffff1b0c>
2008de74:	d8c02617 	ldw	r3,152(sp)
2008de78:	003f5806 	br	2008dbdc <__flash_rwdata_start+0xffff1a58>

2008de7c <__vfprintf_internal>:
2008de7c:	2007883a 	mov	r3,r4
2008de80:	01000034 	movhi	r4,0
2008de84:	2108e004 	addi	r4,r4,9088
2008de88:	21000017 	ldw	r4,0(r4)
2008de8c:	2805883a 	mov	r2,r5
2008de90:	300f883a 	mov	r7,r6
2008de94:	180b883a 	mov	r5,r3
2008de98:	100d883a 	mov	r6,r2
2008de9c:	008bf2c1 	jmpi	2008bf2c <___vfprintf_internal_r>

2008dea0 <__sbprintf>:
2008dea0:	2880030b 	ldhu	r2,12(r5)
2008dea4:	2ac01917 	ldw	r11,100(r5)
2008dea8:	2a80038b 	ldhu	r10,14(r5)
2008deac:	2a400717 	ldw	r9,28(r5)
2008deb0:	2a000917 	ldw	r8,36(r5)
2008deb4:	defee204 	addi	sp,sp,-1144
2008deb8:	00c10004 	movi	r3,1024
2008debc:	dc011a15 	stw	r16,1128(sp)
2008dec0:	10bfff4c 	andi	r2,r2,65533
2008dec4:	2821883a 	mov	r16,r5
2008dec8:	d8cb883a 	add	r5,sp,r3
2008decc:	dc811c15 	stw	r18,1136(sp)
2008ded0:	dc411b15 	stw	r17,1132(sp)
2008ded4:	dfc11d15 	stw	ra,1140(sp)
2008ded8:	2025883a 	mov	r18,r4
2008dedc:	d881030d 	sth	r2,1036(sp)
2008dee0:	dac11915 	stw	r11,1124(sp)
2008dee4:	da81038d 	sth	r10,1038(sp)
2008dee8:	da410715 	stw	r9,1052(sp)
2008deec:	da010915 	stw	r8,1060(sp)
2008def0:	dec10015 	stw	sp,1024(sp)
2008def4:	dec10415 	stw	sp,1040(sp)
2008def8:	d8c10215 	stw	r3,1032(sp)
2008defc:	d8c10515 	stw	r3,1044(sp)
2008df00:	d8010615 	stw	zero,1048(sp)
2008df04:	008bf2c0 	call	2008bf2c <___vfprintf_internal_r>
2008df08:	1023883a 	mov	r17,r2
2008df0c:	10000416 	blt	r2,zero,2008df20 <__sbprintf+0x80>
2008df10:	9009883a 	mov	r4,r18
2008df14:	d9410004 	addi	r5,sp,1024
2008df18:	008fd100 	call	2008fd10 <_fflush_r>
2008df1c:	10000d1e 	bne	r2,zero,2008df54 <__sbprintf+0xb4>
2008df20:	d8c1030b 	ldhu	r3,1036(sp)
2008df24:	18c0100c 	andi	r3,r3,64
2008df28:	18000326 	beq	r3,zero,2008df38 <__sbprintf+0x98>
2008df2c:	8080030b 	ldhu	r2,12(r16)
2008df30:	10801014 	ori	r2,r2,64
2008df34:	8080030d 	sth	r2,12(r16)
2008df38:	8805883a 	mov	r2,r17
2008df3c:	dfc11d17 	ldw	ra,1140(sp)
2008df40:	dc811c17 	ldw	r18,1136(sp)
2008df44:	dc411b17 	ldw	r17,1132(sp)
2008df48:	dc011a17 	ldw	r16,1128(sp)
2008df4c:	dec11e04 	addi	sp,sp,1144
2008df50:	f800283a 	ret
2008df54:	047fffc4 	movi	r17,-1
2008df58:	003ff106 	br	2008df20 <__flash_rwdata_start+0xffff1d9c>

2008df5c <_vsnprintf_r>:
2008df5c:	3005883a 	mov	r2,r6
2008df60:	30003616 	blt	r6,zero,2008e03c <_vsnprintf_r+0xe0>
2008df64:	deffe404 	addi	sp,sp,-112
2008df68:	00c08204 	movi	r3,520
2008df6c:	dc001a15 	stw	r16,104(sp)
2008df70:	dfc01b15 	stw	ra,108(sp)
2008df74:	d8c0030d 	sth	r3,12(sp)
2008df78:	d9400015 	stw	r5,0(sp)
2008df7c:	d9400415 	stw	r5,16(sp)
2008df80:	380d883a 	mov	r6,r7
2008df84:	2021883a 	mov	r16,r4
2008df88:	10001326 	beq	r2,zero,2008dfd8 <_vsnprintf_r+0x7c>
2008df8c:	00c00034 	movhi	r3,0
2008df90:	18c8e004 	addi	r3,r3,9088
2008df94:	19000017 	ldw	r4,0(r3)
2008df98:	d9c01c17 	ldw	r7,112(sp)
2008df9c:	10bfffc4 	addi	r2,r2,-1
2008dfa0:	d8800215 	stw	r2,8(sp)
2008dfa4:	d8800515 	stw	r2,20(sp)
2008dfa8:	d80b883a 	mov	r5,sp
2008dfac:	00bfffc4 	movi	r2,-1
2008dfb0:	d880038d 	sth	r2,14(sp)
2008dfb4:	0089f9c0 	call	20089f9c <___svfprintf_internal_r>
2008dfb8:	00ffffc4 	movi	r3,-1
2008dfbc:	10c01c16 	blt	r2,r3,2008e030 <_vsnprintf_r+0xd4>
2008dfc0:	d8c00017 	ldw	r3,0(sp)
2008dfc4:	18000005 	stb	zero,0(r3)
2008dfc8:	dfc01b17 	ldw	ra,108(sp)
2008dfcc:	dc001a17 	ldw	r16,104(sp)
2008dfd0:	dec01c04 	addi	sp,sp,112
2008dfd4:	f800283a 	ret
2008dfd8:	00800034 	movhi	r2,0
2008dfdc:	1088e004 	addi	r2,r2,9088
2008dfe0:	11000017 	ldw	r4,0(r2)
2008dfe4:	d9c01c17 	ldw	r7,112(sp)
2008dfe8:	00bfffc4 	movi	r2,-1
2008dfec:	d80b883a 	mov	r5,sp
2008dff0:	d8000215 	stw	zero,8(sp)
2008dff4:	d8000515 	stw	zero,20(sp)
2008dff8:	d880038d 	sth	r2,14(sp)
2008dffc:	0089f9c0 	call	20089f9c <___svfprintf_internal_r>
2008e000:	00ffffc4 	movi	r3,-1
2008e004:	10c00416 	blt	r2,r3,2008e018 <_vsnprintf_r+0xbc>
2008e008:	dfc01b17 	ldw	ra,108(sp)
2008e00c:	dc001a17 	ldw	r16,104(sp)
2008e010:	dec01c04 	addi	sp,sp,112
2008e014:	f800283a 	ret
2008e018:	00c022c4 	movi	r3,139
2008e01c:	80c00015 	stw	r3,0(r16)
2008e020:	dfc01b17 	ldw	ra,108(sp)
2008e024:	dc001a17 	ldw	r16,104(sp)
2008e028:	dec01c04 	addi	sp,sp,112
2008e02c:	f800283a 	ret
2008e030:	00c022c4 	movi	r3,139
2008e034:	80c00015 	stw	r3,0(r16)
2008e038:	003fe106 	br	2008dfc0 <__flash_rwdata_start+0xffff1e3c>
2008e03c:	008022c4 	movi	r2,139
2008e040:	20800015 	stw	r2,0(r4)
2008e044:	00bfffc4 	movi	r2,-1
2008e048:	f800283a 	ret

2008e04c <vsnprintf>:
2008e04c:	00800034 	movhi	r2,0
2008e050:	1088e004 	addi	r2,r2,9088
2008e054:	2011883a 	mov	r8,r4
2008e058:	11000017 	ldw	r4,0(r2)
2008e05c:	defffe04 	addi	sp,sp,-8
2008e060:	2807883a 	mov	r3,r5
2008e064:	3005883a 	mov	r2,r6
2008e068:	d9c00015 	stw	r7,0(sp)
2008e06c:	400b883a 	mov	r5,r8
2008e070:	180d883a 	mov	r6,r3
2008e074:	100f883a 	mov	r7,r2
2008e078:	dfc00115 	stw	ra,4(sp)
2008e07c:	008df5c0 	call	2008df5c <_vsnprintf_r>
2008e080:	dfc00117 	ldw	ra,4(sp)
2008e084:	dec00204 	addi	sp,sp,8
2008e088:	f800283a 	ret

2008e08c <__swsetup_r>:
2008e08c:	00800034 	movhi	r2,0
2008e090:	defffd04 	addi	sp,sp,-12
2008e094:	1088e004 	addi	r2,r2,9088
2008e098:	dc400115 	stw	r17,4(sp)
2008e09c:	2023883a 	mov	r17,r4
2008e0a0:	11000017 	ldw	r4,0(r2)
2008e0a4:	dc000015 	stw	r16,0(sp)
2008e0a8:	dfc00215 	stw	ra,8(sp)
2008e0ac:	2821883a 	mov	r16,r5
2008e0b0:	20000226 	beq	r4,zero,2008e0bc <__swsetup_r+0x30>
2008e0b4:	20c00e17 	ldw	r3,56(r4)
2008e0b8:	18003126 	beq	r3,zero,2008e180 <__swsetup_r+0xf4>
2008e0bc:	8080030b 	ldhu	r2,12(r16)
2008e0c0:	10c0020c 	andi	r3,r2,8
2008e0c4:	100d883a 	mov	r6,r2
2008e0c8:	18000f26 	beq	r3,zero,2008e108 <__swsetup_r+0x7c>
2008e0cc:	80c00417 	ldw	r3,16(r16)
2008e0d0:	18001526 	beq	r3,zero,2008e128 <__swsetup_r+0x9c>
2008e0d4:	1100004c 	andi	r4,r2,1
2008e0d8:	20001c1e 	bne	r4,zero,2008e14c <__swsetup_r+0xc0>
2008e0dc:	1080008c 	andi	r2,r2,2
2008e0e0:	1000291e 	bne	r2,zero,2008e188 <__swsetup_r+0xfc>
2008e0e4:	80800517 	ldw	r2,20(r16)
2008e0e8:	80800215 	stw	r2,8(r16)
2008e0ec:	18001c26 	beq	r3,zero,2008e160 <__swsetup_r+0xd4>
2008e0f0:	0005883a 	mov	r2,zero
2008e0f4:	dfc00217 	ldw	ra,8(sp)
2008e0f8:	dc400117 	ldw	r17,4(sp)
2008e0fc:	dc000017 	ldw	r16,0(sp)
2008e100:	dec00304 	addi	sp,sp,12
2008e104:	f800283a 	ret
2008e108:	3080040c 	andi	r2,r6,16
2008e10c:	10002e26 	beq	r2,zero,2008e1c8 <__swsetup_r+0x13c>
2008e110:	3080010c 	andi	r2,r6,4
2008e114:	10001e1e 	bne	r2,zero,2008e190 <__swsetup_r+0x104>
2008e118:	80c00417 	ldw	r3,16(r16)
2008e11c:	30800214 	ori	r2,r6,8
2008e120:	8080030d 	sth	r2,12(r16)
2008e124:	183feb1e 	bne	r3,zero,2008e0d4 <__flash_rwdata_start+0xffff1f50>
2008e128:	1140a00c 	andi	r5,r2,640
2008e12c:	01008004 	movi	r4,512
2008e130:	293fe826 	beq	r5,r4,2008e0d4 <__flash_rwdata_start+0xffff1f50>
2008e134:	8809883a 	mov	r4,r17
2008e138:	800b883a 	mov	r5,r16
2008e13c:	0090c780 	call	20090c78 <__smakebuf_r>
2008e140:	8080030b 	ldhu	r2,12(r16)
2008e144:	80c00417 	ldw	r3,16(r16)
2008e148:	003fe206 	br	2008e0d4 <__flash_rwdata_start+0xffff1f50>
2008e14c:	80800517 	ldw	r2,20(r16)
2008e150:	80000215 	stw	zero,8(r16)
2008e154:	0085c83a 	sub	r2,zero,r2
2008e158:	80800615 	stw	r2,24(r16)
2008e15c:	183fe41e 	bne	r3,zero,2008e0f0 <__flash_rwdata_start+0xffff1f6c>
2008e160:	80c0030b 	ldhu	r3,12(r16)
2008e164:	0005883a 	mov	r2,zero
2008e168:	1900200c 	andi	r4,r3,128
2008e16c:	203fe126 	beq	r4,zero,2008e0f4 <__flash_rwdata_start+0xffff1f70>
2008e170:	18c01014 	ori	r3,r3,64
2008e174:	80c0030d 	sth	r3,12(r16)
2008e178:	00bfffc4 	movi	r2,-1
2008e17c:	003fdd06 	br	2008e0f4 <__flash_rwdata_start+0xffff1f70>
2008e180:	00900ec0 	call	200900ec <__sinit>
2008e184:	003fcd06 	br	2008e0bc <__flash_rwdata_start+0xffff1f38>
2008e188:	0005883a 	mov	r2,zero
2008e18c:	003fd606 	br	2008e0e8 <__flash_rwdata_start+0xffff1f64>
2008e190:	81400c17 	ldw	r5,48(r16)
2008e194:	28000626 	beq	r5,zero,2008e1b0 <__swsetup_r+0x124>
2008e198:	80801004 	addi	r2,r16,64
2008e19c:	28800326 	beq	r5,r2,2008e1ac <__swsetup_r+0x120>
2008e1a0:	8809883a 	mov	r4,r17
2008e1a4:	00902600 	call	20090260 <_free_r>
2008e1a8:	8180030b 	ldhu	r6,12(r16)
2008e1ac:	80000c15 	stw	zero,48(r16)
2008e1b0:	80c00417 	ldw	r3,16(r16)
2008e1b4:	00bff6c4 	movi	r2,-37
2008e1b8:	118c703a 	and	r6,r2,r6
2008e1bc:	80000115 	stw	zero,4(r16)
2008e1c0:	80c00015 	stw	r3,0(r16)
2008e1c4:	003fd506 	br	2008e11c <__flash_rwdata_start+0xffff1f98>
2008e1c8:	00800244 	movi	r2,9
2008e1cc:	88800015 	stw	r2,0(r17)
2008e1d0:	30801014 	ori	r2,r6,64
2008e1d4:	8080030d 	sth	r2,12(r16)
2008e1d8:	00bfffc4 	movi	r2,-1
2008e1dc:	003fc506 	br	2008e0f4 <__flash_rwdata_start+0xffff1f70>

2008e1e0 <quorem>:
2008e1e0:	defff704 	addi	sp,sp,-36
2008e1e4:	dc800215 	stw	r18,8(sp)
2008e1e8:	20800417 	ldw	r2,16(r4)
2008e1ec:	2c800417 	ldw	r18,16(r5)
2008e1f0:	dfc00815 	stw	ra,32(sp)
2008e1f4:	ddc00715 	stw	r23,28(sp)
2008e1f8:	dd800615 	stw	r22,24(sp)
2008e1fc:	dd400515 	stw	r21,20(sp)
2008e200:	dd000415 	stw	r20,16(sp)
2008e204:	dcc00315 	stw	r19,12(sp)
2008e208:	dc400115 	stw	r17,4(sp)
2008e20c:	dc000015 	stw	r16,0(sp)
2008e210:	14807116 	blt	r2,r18,2008e3d8 <quorem+0x1f8>
2008e214:	94bfffc4 	addi	r18,r18,-1
2008e218:	94ad883a 	add	r22,r18,r18
2008e21c:	b5ad883a 	add	r22,r22,r22
2008e220:	2c400504 	addi	r17,r5,20
2008e224:	8da9883a 	add	r20,r17,r22
2008e228:	25400504 	addi	r21,r4,20
2008e22c:	282f883a 	mov	r23,r5
2008e230:	adad883a 	add	r22,r21,r22
2008e234:	a1400017 	ldw	r5,0(r20)
2008e238:	2021883a 	mov	r16,r4
2008e23c:	b1000017 	ldw	r4,0(r22)
2008e240:	29400044 	addi	r5,r5,1
2008e244:	00866700 	call	20086670 <__udivsi3>
2008e248:	1027883a 	mov	r19,r2
2008e24c:	10002c26 	beq	r2,zero,2008e300 <quorem+0x120>
2008e250:	a813883a 	mov	r9,r21
2008e254:	8811883a 	mov	r8,r17
2008e258:	0009883a 	mov	r4,zero
2008e25c:	000d883a 	mov	r6,zero
2008e260:	41c00017 	ldw	r7,0(r8)
2008e264:	49400017 	ldw	r5,0(r9)
2008e268:	42000104 	addi	r8,r8,4
2008e26c:	38bfffcc 	andi	r2,r7,65535
2008e270:	14c5383a 	mul	r2,r2,r19
2008e274:	380ed43a 	srli	r7,r7,16
2008e278:	28ffffcc 	andi	r3,r5,65535
2008e27c:	2085883a 	add	r2,r4,r2
2008e280:	1008d43a 	srli	r4,r2,16
2008e284:	3ccf383a 	mul	r7,r7,r19
2008e288:	198d883a 	add	r6,r3,r6
2008e28c:	10ffffcc 	andi	r3,r2,65535
2008e290:	30c7c83a 	sub	r3,r6,r3
2008e294:	280ad43a 	srli	r5,r5,16
2008e298:	21c9883a 	add	r4,r4,r7
2008e29c:	180dd43a 	srai	r6,r3,16
2008e2a0:	20bfffcc 	andi	r2,r4,65535
2008e2a4:	288bc83a 	sub	r5,r5,r2
2008e2a8:	298b883a 	add	r5,r5,r6
2008e2ac:	280e943a 	slli	r7,r5,16
2008e2b0:	18ffffcc 	andi	r3,r3,65535
2008e2b4:	2008d43a 	srli	r4,r4,16
2008e2b8:	38ceb03a 	or	r7,r7,r3
2008e2bc:	49c00015 	stw	r7,0(r9)
2008e2c0:	280dd43a 	srai	r6,r5,16
2008e2c4:	4a400104 	addi	r9,r9,4
2008e2c8:	a23fe52e 	bgeu	r20,r8,2008e260 <__flash_rwdata_start+0xffff20dc>
2008e2cc:	b0800017 	ldw	r2,0(r22)
2008e2d0:	10000b1e 	bne	r2,zero,2008e300 <quorem+0x120>
2008e2d4:	b0bfff04 	addi	r2,r22,-4
2008e2d8:	a880082e 	bgeu	r21,r2,2008e2fc <quorem+0x11c>
2008e2dc:	b0ffff17 	ldw	r3,-4(r22)
2008e2e0:	18000326 	beq	r3,zero,2008e2f0 <quorem+0x110>
2008e2e4:	00000506 	br	2008e2fc <quorem+0x11c>
2008e2e8:	10c00017 	ldw	r3,0(r2)
2008e2ec:	1800031e 	bne	r3,zero,2008e2fc <quorem+0x11c>
2008e2f0:	10bfff04 	addi	r2,r2,-4
2008e2f4:	94bfffc4 	addi	r18,r18,-1
2008e2f8:	a8bffb36 	bltu	r21,r2,2008e2e8 <__flash_rwdata_start+0xffff2164>
2008e2fc:	84800415 	stw	r18,16(r16)
2008e300:	8009883a 	mov	r4,r16
2008e304:	b80b883a 	mov	r5,r23
2008e308:	00919480 	call	20091948 <__mcmp>
2008e30c:	10002616 	blt	r2,zero,2008e3a8 <quorem+0x1c8>
2008e310:	9cc00044 	addi	r19,r19,1
2008e314:	a80d883a 	mov	r6,r21
2008e318:	000b883a 	mov	r5,zero
2008e31c:	31000017 	ldw	r4,0(r6)
2008e320:	88800017 	ldw	r2,0(r17)
2008e324:	31800104 	addi	r6,r6,4
2008e328:	20ffffcc 	andi	r3,r4,65535
2008e32c:	194b883a 	add	r5,r3,r5
2008e330:	10ffffcc 	andi	r3,r2,65535
2008e334:	28c7c83a 	sub	r3,r5,r3
2008e338:	1004d43a 	srli	r2,r2,16
2008e33c:	2008d43a 	srli	r4,r4,16
2008e340:	180bd43a 	srai	r5,r3,16
2008e344:	18ffffcc 	andi	r3,r3,65535
2008e348:	2089c83a 	sub	r4,r4,r2
2008e34c:	2149883a 	add	r4,r4,r5
2008e350:	2004943a 	slli	r2,r4,16
2008e354:	8c400104 	addi	r17,r17,4
2008e358:	200bd43a 	srai	r5,r4,16
2008e35c:	10c6b03a 	or	r3,r2,r3
2008e360:	30ffff15 	stw	r3,-4(r6)
2008e364:	a47fed2e 	bgeu	r20,r17,2008e31c <__flash_rwdata_start+0xffff2198>
2008e368:	9485883a 	add	r2,r18,r18
2008e36c:	1085883a 	add	r2,r2,r2
2008e370:	a887883a 	add	r3,r21,r2
2008e374:	18800017 	ldw	r2,0(r3)
2008e378:	10000b1e 	bne	r2,zero,2008e3a8 <quorem+0x1c8>
2008e37c:	18bfff04 	addi	r2,r3,-4
2008e380:	a880082e 	bgeu	r21,r2,2008e3a4 <quorem+0x1c4>
2008e384:	18ffff17 	ldw	r3,-4(r3)
2008e388:	18000326 	beq	r3,zero,2008e398 <quorem+0x1b8>
2008e38c:	00000506 	br	2008e3a4 <quorem+0x1c4>
2008e390:	10c00017 	ldw	r3,0(r2)
2008e394:	1800031e 	bne	r3,zero,2008e3a4 <quorem+0x1c4>
2008e398:	10bfff04 	addi	r2,r2,-4
2008e39c:	94bfffc4 	addi	r18,r18,-1
2008e3a0:	a8bffb36 	bltu	r21,r2,2008e390 <__flash_rwdata_start+0xffff220c>
2008e3a4:	84800415 	stw	r18,16(r16)
2008e3a8:	9805883a 	mov	r2,r19
2008e3ac:	dfc00817 	ldw	ra,32(sp)
2008e3b0:	ddc00717 	ldw	r23,28(sp)
2008e3b4:	dd800617 	ldw	r22,24(sp)
2008e3b8:	dd400517 	ldw	r21,20(sp)
2008e3bc:	dd000417 	ldw	r20,16(sp)
2008e3c0:	dcc00317 	ldw	r19,12(sp)
2008e3c4:	dc800217 	ldw	r18,8(sp)
2008e3c8:	dc400117 	ldw	r17,4(sp)
2008e3cc:	dc000017 	ldw	r16,0(sp)
2008e3d0:	dec00904 	addi	sp,sp,36
2008e3d4:	f800283a 	ret
2008e3d8:	0005883a 	mov	r2,zero
2008e3dc:	003ff306 	br	2008e3ac <__flash_rwdata_start+0xffff2228>

2008e3e0 <_dtoa_r>:
2008e3e0:	20801017 	ldw	r2,64(r4)
2008e3e4:	deffde04 	addi	sp,sp,-136
2008e3e8:	dd401d15 	stw	r21,116(sp)
2008e3ec:	dcc01b15 	stw	r19,108(sp)
2008e3f0:	dc801a15 	stw	r18,104(sp)
2008e3f4:	dc401915 	stw	r17,100(sp)
2008e3f8:	dc001815 	stw	r16,96(sp)
2008e3fc:	dfc02115 	stw	ra,132(sp)
2008e400:	df002015 	stw	fp,128(sp)
2008e404:	ddc01f15 	stw	r23,124(sp)
2008e408:	dd801e15 	stw	r22,120(sp)
2008e40c:	dd001c15 	stw	r20,112(sp)
2008e410:	d9c00315 	stw	r7,12(sp)
2008e414:	2021883a 	mov	r16,r4
2008e418:	302b883a 	mov	r21,r6
2008e41c:	2825883a 	mov	r18,r5
2008e420:	dc402417 	ldw	r17,144(sp)
2008e424:	3027883a 	mov	r19,r6
2008e428:	10000826 	beq	r2,zero,2008e44c <_dtoa_r+0x6c>
2008e42c:	21801117 	ldw	r6,68(r4)
2008e430:	00c00044 	movi	r3,1
2008e434:	100b883a 	mov	r5,r2
2008e438:	1986983a 	sll	r3,r3,r6
2008e43c:	11800115 	stw	r6,4(r2)
2008e440:	10c00215 	stw	r3,8(r2)
2008e444:	009111c0 	call	2009111c <_Bfree>
2008e448:	80001015 	stw	zero,64(r16)
2008e44c:	a8002d16 	blt	r21,zero,2008e504 <_dtoa_r+0x124>
2008e450:	88000015 	stw	zero,0(r17)
2008e454:	a8dffc2c 	andhi	r3,r21,32752
2008e458:	009ffc34 	movhi	r2,32752
2008e45c:	18801b26 	beq	r3,r2,2008e4cc <_dtoa_r+0xec>
2008e460:	9009883a 	mov	r4,r18
2008e464:	980b883a 	mov	r5,r19
2008e468:	000d883a 	mov	r6,zero
2008e46c:	000f883a 	mov	r7,zero
2008e470:	00963a00 	call	200963a0 <__eqdf2>
2008e474:	10002a1e 	bne	r2,zero,2008e520 <_dtoa_r+0x140>
2008e478:	d8c02317 	ldw	r3,140(sp)
2008e47c:	d9002517 	ldw	r4,148(sp)
2008e480:	00800044 	movi	r2,1
2008e484:	18800015 	stw	r2,0(r3)
2008e488:	2001a226 	beq	r4,zero,2008eb14 <_dtoa_r+0x734>
2008e48c:	00800034 	movhi	r2,0
2008e490:	10811644 	addi	r2,r2,1113
2008e494:	20800015 	stw	r2,0(r4)
2008e498:	10bfffc4 	addi	r2,r2,-1
2008e49c:	dfc02117 	ldw	ra,132(sp)
2008e4a0:	df002017 	ldw	fp,128(sp)
2008e4a4:	ddc01f17 	ldw	r23,124(sp)
2008e4a8:	dd801e17 	ldw	r22,120(sp)
2008e4ac:	dd401d17 	ldw	r21,116(sp)
2008e4b0:	dd001c17 	ldw	r20,112(sp)
2008e4b4:	dcc01b17 	ldw	r19,108(sp)
2008e4b8:	dc801a17 	ldw	r18,104(sp)
2008e4bc:	dc401917 	ldw	r17,100(sp)
2008e4c0:	dc001817 	ldw	r16,96(sp)
2008e4c4:	dec02204 	addi	sp,sp,136
2008e4c8:	f800283a 	ret
2008e4cc:	d8c02317 	ldw	r3,140(sp)
2008e4d0:	0089c3c4 	movi	r2,9999
2008e4d4:	18800015 	stw	r2,0(r3)
2008e4d8:	90017c26 	beq	r18,zero,2008eacc <_dtoa_r+0x6ec>
2008e4dc:	00800034 	movhi	r2,0
2008e4e0:	10812a04 	addi	r2,r2,1192
2008e4e4:	d9002517 	ldw	r4,148(sp)
2008e4e8:	203fec26 	beq	r4,zero,2008e49c <__flash_rwdata_start+0xffff2318>
2008e4ec:	10c000c7 	ldb	r3,3(r2)
2008e4f0:	18017d1e 	bne	r3,zero,2008eae8 <_dtoa_r+0x708>
2008e4f4:	10c000c4 	addi	r3,r2,3
2008e4f8:	d9802517 	ldw	r6,148(sp)
2008e4fc:	30c00015 	stw	r3,0(r6)
2008e500:	003fe606 	br	2008e49c <__flash_rwdata_start+0xffff2318>
2008e504:	04e00034 	movhi	r19,32768
2008e508:	9cffffc4 	addi	r19,r19,-1
2008e50c:	00800044 	movi	r2,1
2008e510:	ace6703a 	and	r19,r21,r19
2008e514:	88800015 	stw	r2,0(r17)
2008e518:	982b883a 	mov	r21,r19
2008e51c:	003fcd06 	br	2008e454 <__flash_rwdata_start+0xffff22d0>
2008e520:	d8800204 	addi	r2,sp,8
2008e524:	a822d53a 	srli	r17,r21,20
2008e528:	d8800015 	stw	r2,0(sp)
2008e52c:	8009883a 	mov	r4,r16
2008e530:	900b883a 	mov	r5,r18
2008e534:	980d883a 	mov	r6,r19
2008e538:	d9c00104 	addi	r7,sp,4
2008e53c:	0091cbc0 	call	20091cbc <__d2b>
2008e540:	1039883a 	mov	fp,r2
2008e544:	88016a1e 	bne	r17,zero,2008eaf0 <_dtoa_r+0x710>
2008e548:	dd000217 	ldw	r20,8(sp)
2008e54c:	dc400117 	ldw	r17,4(sp)
2008e550:	00befbc4 	movi	r2,-1041
2008e554:	a463883a 	add	r17,r20,r17
2008e558:	8882ea16 	blt	r17,r2,2008f104 <_dtoa_r+0xd24>
2008e55c:	00bf0384 	movi	r2,-1010
2008e560:	1445c83a 	sub	r2,r2,r17
2008e564:	89010484 	addi	r4,r17,1042
2008e568:	a8aa983a 	sll	r21,r21,r2
2008e56c:	9108d83a 	srl	r4,r18,r4
2008e570:	a908b03a 	or	r4,r21,r4
2008e574:	0088b940 	call	20088b94 <__floatunsidf>
2008e578:	017f8434 	movhi	r5,65040
2008e57c:	01800044 	movi	r6,1
2008e580:	1009883a 	mov	r4,r2
2008e584:	194b883a 	add	r5,r3,r5
2008e588:	8c7fffc4 	addi	r17,r17,-1
2008e58c:	d9800f15 	stw	r6,60(sp)
2008e590:	000d883a 	mov	r6,zero
2008e594:	01cffe34 	movhi	r7,16376
2008e598:	008816c0 	call	2008816c <__subdf3>
2008e59c:	0198dbf4 	movhi	r6,25455
2008e5a0:	01cff4f4 	movhi	r7,16339
2008e5a4:	1009883a 	mov	r4,r2
2008e5a8:	180b883a 	mov	r5,r3
2008e5ac:	3190d844 	addi	r6,r6,17249
2008e5b0:	39e1e9c4 	addi	r7,r7,-30809
2008e5b4:	00965e40 	call	200965e4 <__muldf3>
2008e5b8:	01a2d874 	movhi	r6,35681
2008e5bc:	01cff1f4 	movhi	r7,16327
2008e5c0:	180b883a 	mov	r5,r3
2008e5c4:	31b22cc4 	addi	r6,r6,-14157
2008e5c8:	39e28a04 	addi	r7,r7,-30168
2008e5cc:	1009883a 	mov	r4,r2
2008e5d0:	00870040 	call	20087004 <__adddf3>
2008e5d4:	8809883a 	mov	r4,r17
2008e5d8:	102d883a 	mov	r22,r2
2008e5dc:	182b883a 	mov	r21,r3
2008e5e0:	0088ac40 	call	20088ac4 <__floatsidf>
2008e5e4:	019427f4 	movhi	r6,20639
2008e5e8:	01cff4f4 	movhi	r7,16339
2008e5ec:	1009883a 	mov	r4,r2
2008e5f0:	180b883a 	mov	r5,r3
2008e5f4:	319e7ec4 	addi	r6,r6,31227
2008e5f8:	39d104c4 	addi	r7,r7,17427
2008e5fc:	00965e40 	call	200965e4 <__muldf3>
2008e600:	b009883a 	mov	r4,r22
2008e604:	a80b883a 	mov	r5,r21
2008e608:	100d883a 	mov	r6,r2
2008e60c:	180f883a 	mov	r7,r3
2008e610:	00870040 	call	20087004 <__adddf3>
2008e614:	1009883a 	mov	r4,r2
2008e618:	180b883a 	mov	r5,r3
2008e61c:	102d883a 	mov	r22,r2
2008e620:	182b883a 	mov	r21,r3
2008e624:	0088a3c0 	call	20088a3c <__fixdfsi>
2008e628:	b009883a 	mov	r4,r22
2008e62c:	a80b883a 	mov	r5,r21
2008e630:	000d883a 	mov	r6,zero
2008e634:	000f883a 	mov	r7,zero
2008e638:	d8800515 	stw	r2,20(sp)
2008e63c:	00965040 	call	20096504 <__ledf2>
2008e640:	10023116 	blt	r2,zero,2008ef08 <_dtoa_r+0xb28>
2008e644:	d8c00517 	ldw	r3,20(sp)
2008e648:	00800584 	movi	r2,22
2008e64c:	10c21f36 	bltu	r2,r3,2008eecc <_dtoa_r+0xaec>
2008e650:	180490fa 	slli	r2,r3,3
2008e654:	00c00034 	movhi	r3,0
2008e658:	18c14604 	addi	r3,r3,1304
2008e65c:	1885883a 	add	r2,r3,r2
2008e660:	11000017 	ldw	r4,0(r2)
2008e664:	11400117 	ldw	r5,4(r2)
2008e668:	900d883a 	mov	r6,r18
2008e66c:	980f883a 	mov	r7,r19
2008e670:	00964240 	call	20096424 <__gedf2>
2008e674:	0082a70e 	bge	zero,r2,2008f114 <_dtoa_r+0xd34>
2008e678:	d9000517 	ldw	r4,20(sp)
2008e67c:	d8000d15 	stw	zero,52(sp)
2008e680:	213fffc4 	addi	r4,r4,-1
2008e684:	d9000515 	stw	r4,20(sp)
2008e688:	a463c83a 	sub	r17,r20,r17
2008e68c:	8dbfffc4 	addi	r22,r17,-1
2008e690:	b0021916 	blt	r22,zero,2008eef8 <_dtoa_r+0xb18>
2008e694:	d8000815 	stw	zero,32(sp)
2008e698:	d8800517 	ldw	r2,20(sp)
2008e69c:	10020e16 	blt	r2,zero,2008eed8 <_dtoa_r+0xaf8>
2008e6a0:	b0ad883a 	add	r22,r22,r2
2008e6a4:	d8800a15 	stw	r2,40(sp)
2008e6a8:	d8000915 	stw	zero,36(sp)
2008e6ac:	d8c00317 	ldw	r3,12(sp)
2008e6b0:	00800244 	movi	r2,9
2008e6b4:	10c11a36 	bltu	r2,r3,2008eb20 <_dtoa_r+0x740>
2008e6b8:	00800144 	movi	r2,5
2008e6bc:	10c4fc0e 	bge	r2,r3,2008fab0 <_dtoa_r+0x16d0>
2008e6c0:	18ffff04 	addi	r3,r3,-4
2008e6c4:	d8c00315 	stw	r3,12(sp)
2008e6c8:	0029883a 	mov	r20,zero
2008e6cc:	d9800317 	ldw	r6,12(sp)
2008e6d0:	008000c4 	movi	r2,3
2008e6d4:	3083bd26 	beq	r6,r2,2008f5cc <_dtoa_r+0x11ec>
2008e6d8:	1183670e 	bge	r2,r6,2008f478 <_dtoa_r+0x1098>
2008e6dc:	d8c00317 	ldw	r3,12(sp)
2008e6e0:	00800104 	movi	r2,4
2008e6e4:	1882e726 	beq	r3,r2,2008f284 <_dtoa_r+0xea4>
2008e6e8:	00800144 	movi	r2,5
2008e6ec:	1884f21e 	bne	r3,r2,2008fab8 <_dtoa_r+0x16d8>
2008e6f0:	00800044 	movi	r2,1
2008e6f4:	d8800b15 	stw	r2,44(sp)
2008e6f8:	d8c02217 	ldw	r3,136(sp)
2008e6fc:	d9000517 	ldw	r4,20(sp)
2008e700:	1907883a 	add	r3,r3,r4
2008e704:	19800044 	addi	r6,r3,1
2008e708:	d8c00c15 	stw	r3,48(sp)
2008e70c:	d9800615 	stw	r6,24(sp)
2008e710:	0183c30e 	bge	zero,r6,2008f620 <_dtoa_r+0x1240>
2008e714:	d9800617 	ldw	r6,24(sp)
2008e718:	3023883a 	mov	r17,r6
2008e71c:	80001115 	stw	zero,68(r16)
2008e720:	008005c4 	movi	r2,23
2008e724:	1184f62e 	bgeu	r2,r6,2008fb00 <_dtoa_r+0x1720>
2008e728:	00c00044 	movi	r3,1
2008e72c:	00800104 	movi	r2,4
2008e730:	1085883a 	add	r2,r2,r2
2008e734:	11000504 	addi	r4,r2,20
2008e738:	180b883a 	mov	r5,r3
2008e73c:	18c00044 	addi	r3,r3,1
2008e740:	313ffb2e 	bgeu	r6,r4,2008e730 <__flash_rwdata_start+0xffff25ac>
2008e744:	81401115 	stw	r5,68(r16)
2008e748:	8009883a 	mov	r4,r16
2008e74c:	00910740 	call	20091074 <_Balloc>
2008e750:	d8800715 	stw	r2,28(sp)
2008e754:	80801015 	stw	r2,64(r16)
2008e758:	00800384 	movi	r2,14
2008e75c:	1440fd36 	bltu	r2,r17,2008eb54 <_dtoa_r+0x774>
2008e760:	a000fc26 	beq	r20,zero,2008eb54 <_dtoa_r+0x774>
2008e764:	d8800517 	ldw	r2,20(sp)
2008e768:	0083b90e 	bge	zero,r2,2008f650 <_dtoa_r+0x1270>
2008e76c:	d8c00517 	ldw	r3,20(sp)
2008e770:	108003cc 	andi	r2,r2,15
2008e774:	100490fa 	slli	r2,r2,3
2008e778:	182fd13a 	srai	r23,r3,4
2008e77c:	00c00034 	movhi	r3,0
2008e780:	18c14604 	addi	r3,r3,1304
2008e784:	1885883a 	add	r2,r3,r2
2008e788:	b8c0040c 	andi	r3,r23,16
2008e78c:	12c00017 	ldw	r11,0(r2)
2008e790:	12800117 	ldw	r10,4(r2)
2008e794:	18039726 	beq	r3,zero,2008f5f4 <_dtoa_r+0x1214>
2008e798:	00800034 	movhi	r2,0
2008e79c:	10813c04 	addi	r2,r2,1264
2008e7a0:	11800817 	ldw	r6,32(r2)
2008e7a4:	11c00917 	ldw	r7,36(r2)
2008e7a8:	9009883a 	mov	r4,r18
2008e7ac:	980b883a 	mov	r5,r19
2008e7b0:	da801615 	stw	r10,88(sp)
2008e7b4:	dac01515 	stw	r11,84(sp)
2008e7b8:	00878a00 	call	200878a0 <__divdf3>
2008e7bc:	da801617 	ldw	r10,88(sp)
2008e7c0:	dac01517 	ldw	r11,84(sp)
2008e7c4:	bdc003cc 	andi	r23,r23,15
2008e7c8:	044000c4 	movi	r17,3
2008e7cc:	d8800e15 	stw	r2,56(sp)
2008e7d0:	182b883a 	mov	r21,r3
2008e7d4:	b8001126 	beq	r23,zero,2008e81c <_dtoa_r+0x43c>
2008e7d8:	05000034 	movhi	r20,0
2008e7dc:	a5013c04 	addi	r20,r20,1264
2008e7e0:	5805883a 	mov	r2,r11
2008e7e4:	5007883a 	mov	r3,r10
2008e7e8:	b980004c 	andi	r6,r23,1
2008e7ec:	1009883a 	mov	r4,r2
2008e7f0:	b82fd07a 	srai	r23,r23,1
2008e7f4:	180b883a 	mov	r5,r3
2008e7f8:	30000426 	beq	r6,zero,2008e80c <_dtoa_r+0x42c>
2008e7fc:	a1800017 	ldw	r6,0(r20)
2008e800:	a1c00117 	ldw	r7,4(r20)
2008e804:	8c400044 	addi	r17,r17,1
2008e808:	00965e40 	call	200965e4 <__muldf3>
2008e80c:	a5000204 	addi	r20,r20,8
2008e810:	b83ff51e 	bne	r23,zero,2008e7e8 <__flash_rwdata_start+0xffff2664>
2008e814:	1017883a 	mov	r11,r2
2008e818:	1815883a 	mov	r10,r3
2008e81c:	d9000e17 	ldw	r4,56(sp)
2008e820:	a80b883a 	mov	r5,r21
2008e824:	580d883a 	mov	r6,r11
2008e828:	500f883a 	mov	r7,r10
2008e82c:	00878a00 	call	200878a0 <__divdf3>
2008e830:	1029883a 	mov	r20,r2
2008e834:	182b883a 	mov	r21,r3
2008e838:	d9800d17 	ldw	r6,52(sp)
2008e83c:	30000626 	beq	r6,zero,2008e858 <_dtoa_r+0x478>
2008e840:	a009883a 	mov	r4,r20
2008e844:	a80b883a 	mov	r5,r21
2008e848:	000d883a 	mov	r6,zero
2008e84c:	01cffc34 	movhi	r7,16368
2008e850:	00965040 	call	20096504 <__ledf2>
2008e854:	10043216 	blt	r2,zero,2008f920 <_dtoa_r+0x1540>
2008e858:	8809883a 	mov	r4,r17
2008e85c:	0088ac40 	call	20088ac4 <__floatsidf>
2008e860:	1009883a 	mov	r4,r2
2008e864:	180b883a 	mov	r5,r3
2008e868:	a00d883a 	mov	r6,r20
2008e86c:	a80f883a 	mov	r7,r21
2008e870:	00965e40 	call	200965e4 <__muldf3>
2008e874:	000d883a 	mov	r6,zero
2008e878:	1009883a 	mov	r4,r2
2008e87c:	180b883a 	mov	r5,r3
2008e880:	01d00734 	movhi	r7,16412
2008e884:	00870040 	call	20087004 <__adddf3>
2008e888:	1023883a 	mov	r17,r2
2008e88c:	d9800617 	ldw	r6,24(sp)
2008e890:	00bf3034 	movhi	r2,64704
2008e894:	1885883a 	add	r2,r3,r2
2008e898:	d8800e15 	stw	r2,56(sp)
2008e89c:	30032e26 	beq	r6,zero,2008f558 <_dtoa_r+0x1178>
2008e8a0:	d8c00517 	ldw	r3,20(sp)
2008e8a4:	da800617 	ldw	r10,24(sp)
2008e8a8:	d8c01215 	stw	r3,72(sp)
2008e8ac:	d9000b17 	ldw	r4,44(sp)
2008e8b0:	2003b026 	beq	r4,zero,2008f774 <_dtoa_r+0x1394>
2008e8b4:	50bfffc4 	addi	r2,r10,-1
2008e8b8:	100490fa 	slli	r2,r2,3
2008e8bc:	00c00034 	movhi	r3,0
2008e8c0:	18c14604 	addi	r3,r3,1304
2008e8c4:	1885883a 	add	r2,r3,r2
2008e8c8:	11800017 	ldw	r6,0(r2)
2008e8cc:	11c00117 	ldw	r7,4(r2)
2008e8d0:	d8800717 	ldw	r2,28(sp)
2008e8d4:	0009883a 	mov	r4,zero
2008e8d8:	014ff834 	movhi	r5,16352
2008e8dc:	da801615 	stw	r10,88(sp)
2008e8e0:	15c00044 	addi	r23,r2,1
2008e8e4:	00878a00 	call	200878a0 <__divdf3>
2008e8e8:	d9c00e17 	ldw	r7,56(sp)
2008e8ec:	880d883a 	mov	r6,r17
2008e8f0:	1009883a 	mov	r4,r2
2008e8f4:	180b883a 	mov	r5,r3
2008e8f8:	008816c0 	call	2008816c <__subdf3>
2008e8fc:	a80b883a 	mov	r5,r21
2008e900:	a009883a 	mov	r4,r20
2008e904:	d8c01015 	stw	r3,64(sp)
2008e908:	d8800e15 	stw	r2,56(sp)
2008e90c:	0088a3c0 	call	20088a3c <__fixdfsi>
2008e910:	1009883a 	mov	r4,r2
2008e914:	d8801715 	stw	r2,92(sp)
2008e918:	0088ac40 	call	20088ac4 <__floatsidf>
2008e91c:	a009883a 	mov	r4,r20
2008e920:	a80b883a 	mov	r5,r21
2008e924:	100d883a 	mov	r6,r2
2008e928:	180f883a 	mov	r7,r3
2008e92c:	008816c0 	call	2008816c <__subdf3>
2008e930:	da001717 	ldw	r8,92(sp)
2008e934:	1829883a 	mov	r20,r3
2008e938:	d8c00717 	ldw	r3,28(sp)
2008e93c:	d9000e17 	ldw	r4,56(sp)
2008e940:	d9401017 	ldw	r5,64(sp)
2008e944:	42000c04 	addi	r8,r8,48
2008e948:	1023883a 	mov	r17,r2
2008e94c:	1a000005 	stb	r8,0(r3)
2008e950:	880d883a 	mov	r6,r17
2008e954:	a00f883a 	mov	r7,r20
2008e958:	402b883a 	mov	r21,r8
2008e95c:	00964240 	call	20096424 <__gedf2>
2008e960:	00844516 	blt	zero,r2,2008fa78 <_dtoa_r+0x1698>
2008e964:	0009883a 	mov	r4,zero
2008e968:	014ffc34 	movhi	r5,16368
2008e96c:	880d883a 	mov	r6,r17
2008e970:	a00f883a 	mov	r7,r20
2008e974:	008816c0 	call	2008816c <__subdf3>
2008e978:	d9000e17 	ldw	r4,56(sp)
2008e97c:	d9401017 	ldw	r5,64(sp)
2008e980:	100d883a 	mov	r6,r2
2008e984:	180f883a 	mov	r7,r3
2008e988:	00964240 	call	20096424 <__gedf2>
2008e98c:	da801617 	ldw	r10,88(sp)
2008e990:	00843616 	blt	zero,r2,2008fa6c <_dtoa_r+0x168c>
2008e994:	00800044 	movi	r2,1
2008e998:	12806e0e 	bge	r2,r10,2008eb54 <_dtoa_r+0x774>
2008e99c:	d9000717 	ldw	r4,28(sp)
2008e9a0:	dd801315 	stw	r22,76(sp)
2008e9a4:	dc001115 	stw	r16,68(sp)
2008e9a8:	2295883a 	add	r10,r4,r10
2008e9ac:	dcc01415 	stw	r19,80(sp)
2008e9b0:	502d883a 	mov	r22,r10
2008e9b4:	dcc01017 	ldw	r19,64(sp)
2008e9b8:	b821883a 	mov	r16,r23
2008e9bc:	dc801015 	stw	r18,64(sp)
2008e9c0:	dc800e17 	ldw	r18,56(sp)
2008e9c4:	00000906 	br	2008e9ec <_dtoa_r+0x60c>
2008e9c8:	008816c0 	call	2008816c <__subdf3>
2008e9cc:	1009883a 	mov	r4,r2
2008e9d0:	180b883a 	mov	r5,r3
2008e9d4:	900d883a 	mov	r6,r18
2008e9d8:	980f883a 	mov	r7,r19
2008e9dc:	00965040 	call	20096504 <__ledf2>
2008e9e0:	10040e16 	blt	r2,zero,2008fa1c <_dtoa_r+0x163c>
2008e9e4:	b821883a 	mov	r16,r23
2008e9e8:	bd841026 	beq	r23,r22,2008fa2c <_dtoa_r+0x164c>
2008e9ec:	9009883a 	mov	r4,r18
2008e9f0:	980b883a 	mov	r5,r19
2008e9f4:	000d883a 	mov	r6,zero
2008e9f8:	01d00934 	movhi	r7,16420
2008e9fc:	00965e40 	call	200965e4 <__muldf3>
2008ea00:	000d883a 	mov	r6,zero
2008ea04:	01d00934 	movhi	r7,16420
2008ea08:	8809883a 	mov	r4,r17
2008ea0c:	a00b883a 	mov	r5,r20
2008ea10:	1025883a 	mov	r18,r2
2008ea14:	1827883a 	mov	r19,r3
2008ea18:	00965e40 	call	200965e4 <__muldf3>
2008ea1c:	180b883a 	mov	r5,r3
2008ea20:	1009883a 	mov	r4,r2
2008ea24:	1823883a 	mov	r17,r3
2008ea28:	1029883a 	mov	r20,r2
2008ea2c:	0088a3c0 	call	20088a3c <__fixdfsi>
2008ea30:	1009883a 	mov	r4,r2
2008ea34:	102b883a 	mov	r21,r2
2008ea38:	0088ac40 	call	20088ac4 <__floatsidf>
2008ea3c:	a009883a 	mov	r4,r20
2008ea40:	880b883a 	mov	r5,r17
2008ea44:	100d883a 	mov	r6,r2
2008ea48:	180f883a 	mov	r7,r3
2008ea4c:	008816c0 	call	2008816c <__subdf3>
2008ea50:	ad400c04 	addi	r21,r21,48
2008ea54:	1009883a 	mov	r4,r2
2008ea58:	180b883a 	mov	r5,r3
2008ea5c:	900d883a 	mov	r6,r18
2008ea60:	980f883a 	mov	r7,r19
2008ea64:	85400005 	stb	r21,0(r16)
2008ea68:	1023883a 	mov	r17,r2
2008ea6c:	1829883a 	mov	r20,r3
2008ea70:	00965040 	call	20096504 <__ledf2>
2008ea74:	bdc00044 	addi	r23,r23,1
2008ea78:	0009883a 	mov	r4,zero
2008ea7c:	014ffc34 	movhi	r5,16368
2008ea80:	880d883a 	mov	r6,r17
2008ea84:	a00f883a 	mov	r7,r20
2008ea88:	103fcf0e 	bge	r2,zero,2008e9c8 <__flash_rwdata_start+0xffff2844>
2008ea8c:	d9801217 	ldw	r6,72(sp)
2008ea90:	dc001117 	ldw	r16,68(sp)
2008ea94:	d9800515 	stw	r6,20(sp)
2008ea98:	8009883a 	mov	r4,r16
2008ea9c:	e00b883a 	mov	r5,fp
2008eaa0:	009111c0 	call	2009111c <_Bfree>
2008eaa4:	d8c00517 	ldw	r3,20(sp)
2008eaa8:	d9002317 	ldw	r4,140(sp)
2008eaac:	d9802517 	ldw	r6,148(sp)
2008eab0:	b8000005 	stb	zero,0(r23)
2008eab4:	18800044 	addi	r2,r3,1
2008eab8:	20800015 	stw	r2,0(r4)
2008eabc:	30027226 	beq	r6,zero,2008f488 <_dtoa_r+0x10a8>
2008eac0:	35c00015 	stw	r23,0(r6)
2008eac4:	d8800717 	ldw	r2,28(sp)
2008eac8:	003e7406 	br	2008e49c <__flash_rwdata_start+0xffff2318>
2008eacc:	00800434 	movhi	r2,16
2008ead0:	10bfffc4 	addi	r2,r2,-1
2008ead4:	a8aa703a 	and	r21,r21,r2
2008ead8:	a83e801e 	bne	r21,zero,2008e4dc <__flash_rwdata_start+0xffff2358>
2008eadc:	00800034 	movhi	r2,0
2008eae0:	10812704 	addi	r2,r2,1180
2008eae4:	003e7f06 	br	2008e4e4 <__flash_rwdata_start+0xffff2360>
2008eae8:	10c00204 	addi	r3,r2,8
2008eaec:	003e8206 	br	2008e4f8 <__flash_rwdata_start+0xffff2374>
2008eaf0:	01400434 	movhi	r5,16
2008eaf4:	297fffc4 	addi	r5,r5,-1
2008eaf8:	994a703a 	and	r5,r19,r5
2008eafc:	9009883a 	mov	r4,r18
2008eb00:	8c7f0044 	addi	r17,r17,-1023
2008eb04:	294ffc34 	orhi	r5,r5,16368
2008eb08:	dd000217 	ldw	r20,8(sp)
2008eb0c:	d8000f15 	stw	zero,60(sp)
2008eb10:	003e9f06 	br	2008e590 <__flash_rwdata_start+0xffff240c>
2008eb14:	00800034 	movhi	r2,0
2008eb18:	10811604 	addi	r2,r2,1112
2008eb1c:	003e5f06 	br	2008e49c <__flash_rwdata_start+0xffff2318>
2008eb20:	80001115 	stw	zero,68(r16)
2008eb24:	8009883a 	mov	r4,r16
2008eb28:	000b883a 	mov	r5,zero
2008eb2c:	00910740 	call	20091074 <_Balloc>
2008eb30:	01bfffc4 	movi	r6,-1
2008eb34:	d8800715 	stw	r2,28(sp)
2008eb38:	80801015 	stw	r2,64(r16)
2008eb3c:	00800044 	movi	r2,1
2008eb40:	d9800c15 	stw	r6,48(sp)
2008eb44:	d8800b15 	stw	r2,44(sp)
2008eb48:	d9800615 	stw	r6,24(sp)
2008eb4c:	d8002215 	stw	zero,136(sp)
2008eb50:	d8000315 	stw	zero,12(sp)
2008eb54:	d8800117 	ldw	r2,4(sp)
2008eb58:	10008e16 	blt	r2,zero,2008ed94 <_dtoa_r+0x9b4>
2008eb5c:	d9000517 	ldw	r4,20(sp)
2008eb60:	00c00384 	movi	r3,14
2008eb64:	19008b16 	blt	r3,r4,2008ed94 <_dtoa_r+0x9b4>
2008eb68:	200490fa 	slli	r2,r4,3
2008eb6c:	00c00034 	movhi	r3,0
2008eb70:	d9802217 	ldw	r6,136(sp)
2008eb74:	18c14604 	addi	r3,r3,1304
2008eb78:	1885883a 	add	r2,r3,r2
2008eb7c:	14400017 	ldw	r17,0(r2)
2008eb80:	15000117 	ldw	r20,4(r2)
2008eb84:	3001c716 	blt	r6,zero,2008f2a4 <_dtoa_r+0xec4>
2008eb88:	880d883a 	mov	r6,r17
2008eb8c:	a00f883a 	mov	r7,r20
2008eb90:	9009883a 	mov	r4,r18
2008eb94:	980b883a 	mov	r5,r19
2008eb98:	00878a00 	call	200878a0 <__divdf3>
2008eb9c:	180b883a 	mov	r5,r3
2008eba0:	1009883a 	mov	r4,r2
2008eba4:	0088a3c0 	call	20088a3c <__fixdfsi>
2008eba8:	1009883a 	mov	r4,r2
2008ebac:	102d883a 	mov	r22,r2
2008ebb0:	0088ac40 	call	20088ac4 <__floatsidf>
2008ebb4:	1009883a 	mov	r4,r2
2008ebb8:	180b883a 	mov	r5,r3
2008ebbc:	880d883a 	mov	r6,r17
2008ebc0:	a00f883a 	mov	r7,r20
2008ebc4:	00965e40 	call	200965e4 <__muldf3>
2008ebc8:	9009883a 	mov	r4,r18
2008ebcc:	980b883a 	mov	r5,r19
2008ebd0:	100d883a 	mov	r6,r2
2008ebd4:	180f883a 	mov	r7,r3
2008ebd8:	008816c0 	call	2008816c <__subdf3>
2008ebdc:	d9000717 	ldw	r4,28(sp)
2008ebe0:	d9800617 	ldw	r6,24(sp)
2008ebe4:	180b883a 	mov	r5,r3
2008ebe8:	b0c00c04 	addi	r3,r22,48
2008ebec:	20c00005 	stb	r3,0(r4)
2008ebf0:	25c00044 	addi	r23,r4,1
2008ebf4:	01000044 	movi	r4,1
2008ebf8:	1011883a 	mov	r8,r2
2008ebfc:	2807883a 	mov	r3,r5
2008ec00:	31003d26 	beq	r6,r4,2008ecf8 <_dtoa_r+0x918>
2008ec04:	000d883a 	mov	r6,zero
2008ec08:	01d00934 	movhi	r7,16420
2008ec0c:	1009883a 	mov	r4,r2
2008ec10:	00965e40 	call	200965e4 <__muldf3>
2008ec14:	1009883a 	mov	r4,r2
2008ec18:	180b883a 	mov	r5,r3
2008ec1c:	000d883a 	mov	r6,zero
2008ec20:	000f883a 	mov	r7,zero
2008ec24:	1027883a 	mov	r19,r2
2008ec28:	182b883a 	mov	r21,r3
2008ec2c:	00963a00 	call	200963a0 <__eqdf2>
2008ec30:	103f9926 	beq	r2,zero,2008ea98 <__flash_rwdata_start+0xffff2914>
2008ec34:	d8c00617 	ldw	r3,24(sp)
2008ec38:	d9000717 	ldw	r4,28(sp)
2008ec3c:	b825883a 	mov	r18,r23
2008ec40:	18bfffc4 	addi	r2,r3,-1
2008ec44:	20ad883a 	add	r22,r4,r2
2008ec48:	dc000315 	stw	r16,12(sp)
2008ec4c:	00000a06 	br	2008ec78 <_dtoa_r+0x898>
2008ec50:	00965e40 	call	200965e4 <__muldf3>
2008ec54:	1009883a 	mov	r4,r2
2008ec58:	180b883a 	mov	r5,r3
2008ec5c:	000d883a 	mov	r6,zero
2008ec60:	000f883a 	mov	r7,zero
2008ec64:	1027883a 	mov	r19,r2
2008ec68:	182b883a 	mov	r21,r3
2008ec6c:	b825883a 	mov	r18,r23
2008ec70:	00963a00 	call	200963a0 <__eqdf2>
2008ec74:	10022626 	beq	r2,zero,2008f510 <_dtoa_r+0x1130>
2008ec78:	880d883a 	mov	r6,r17
2008ec7c:	a00f883a 	mov	r7,r20
2008ec80:	9809883a 	mov	r4,r19
2008ec84:	a80b883a 	mov	r5,r21
2008ec88:	00878a00 	call	200878a0 <__divdf3>
2008ec8c:	180b883a 	mov	r5,r3
2008ec90:	1009883a 	mov	r4,r2
2008ec94:	0088a3c0 	call	20088a3c <__fixdfsi>
2008ec98:	1009883a 	mov	r4,r2
2008ec9c:	1021883a 	mov	r16,r2
2008eca0:	0088ac40 	call	20088ac4 <__floatsidf>
2008eca4:	1009883a 	mov	r4,r2
2008eca8:	180b883a 	mov	r5,r3
2008ecac:	880d883a 	mov	r6,r17
2008ecb0:	a00f883a 	mov	r7,r20
2008ecb4:	00965e40 	call	200965e4 <__muldf3>
2008ecb8:	9809883a 	mov	r4,r19
2008ecbc:	a80b883a 	mov	r5,r21
2008ecc0:	100d883a 	mov	r6,r2
2008ecc4:	180f883a 	mov	r7,r3
2008ecc8:	008816c0 	call	2008816c <__subdf3>
2008eccc:	82000c04 	addi	r8,r16,48
2008ecd0:	92000005 	stb	r8,0(r18)
2008ecd4:	1009883a 	mov	r4,r2
2008ecd8:	180b883a 	mov	r5,r3
2008ecdc:	000d883a 	mov	r6,zero
2008ece0:	01d00934 	movhi	r7,16420
2008ece4:	1011883a 	mov	r8,r2
2008ece8:	bdc00044 	addi	r23,r23,1
2008ecec:	95bfd81e 	bne	r18,r22,2008ec50 <__flash_rwdata_start+0xffff2acc>
2008ecf0:	802d883a 	mov	r22,r16
2008ecf4:	dc000317 	ldw	r16,12(sp)
2008ecf8:	4009883a 	mov	r4,r8
2008ecfc:	180b883a 	mov	r5,r3
2008ed00:	400d883a 	mov	r6,r8
2008ed04:	180f883a 	mov	r7,r3
2008ed08:	00870040 	call	20087004 <__adddf3>
2008ed0c:	8809883a 	mov	r4,r17
2008ed10:	a00b883a 	mov	r5,r20
2008ed14:	100d883a 	mov	r6,r2
2008ed18:	180f883a 	mov	r7,r3
2008ed1c:	1027883a 	mov	r19,r2
2008ed20:	1825883a 	mov	r18,r3
2008ed24:	00965040 	call	20096504 <__ledf2>
2008ed28:	10000816 	blt	r2,zero,2008ed4c <_dtoa_r+0x96c>
2008ed2c:	8809883a 	mov	r4,r17
2008ed30:	a00b883a 	mov	r5,r20
2008ed34:	980d883a 	mov	r6,r19
2008ed38:	900f883a 	mov	r7,r18
2008ed3c:	00963a00 	call	200963a0 <__eqdf2>
2008ed40:	103f551e 	bne	r2,zero,2008ea98 <__flash_rwdata_start+0xffff2914>
2008ed44:	b580004c 	andi	r22,r22,1
2008ed48:	b03f5326 	beq	r22,zero,2008ea98 <__flash_rwdata_start+0xffff2914>
2008ed4c:	bd7fffc3 	ldbu	r21,-1(r23)
2008ed50:	b8bfffc4 	addi	r2,r23,-1
2008ed54:	1007883a 	mov	r3,r2
2008ed58:	01400e44 	movi	r5,57
2008ed5c:	d9800717 	ldw	r6,28(sp)
2008ed60:	00000506 	br	2008ed78 <_dtoa_r+0x998>
2008ed64:	18ffffc4 	addi	r3,r3,-1
2008ed68:	30825e26 	beq	r6,r2,2008f6e4 <_dtoa_r+0x1304>
2008ed6c:	1d400003 	ldbu	r21,0(r3)
2008ed70:	102f883a 	mov	r23,r2
2008ed74:	10bfffc4 	addi	r2,r2,-1
2008ed78:	a9003fcc 	andi	r4,r21,255
2008ed7c:	2100201c 	xori	r4,r4,128
2008ed80:	213fe004 	addi	r4,r4,-128
2008ed84:	217ff726 	beq	r4,r5,2008ed64 <__flash_rwdata_start+0xffff2be0>
2008ed88:	aa000044 	addi	r8,r21,1
2008ed8c:	12000005 	stb	r8,0(r2)
2008ed90:	003f4106 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008ed94:	d8c00b17 	ldw	r3,44(sp)
2008ed98:	18006726 	beq	r3,zero,2008ef38 <_dtoa_r+0xb58>
2008ed9c:	d9000317 	ldw	r4,12(sp)
2008eda0:	00c00044 	movi	r3,1
2008eda4:	19016a0e 	bge	r3,r4,2008f350 <_dtoa_r+0xf70>
2008eda8:	d8800617 	ldw	r2,24(sp)
2008edac:	d8c00917 	ldw	r3,36(sp)
2008edb0:	157fffc4 	addi	r21,r2,-1
2008edb4:	1d420716 	blt	r3,r21,2008f5d4 <_dtoa_r+0x11f4>
2008edb8:	1d6bc83a 	sub	r21,r3,r21
2008edbc:	d8800617 	ldw	r2,24(sp)
2008edc0:	1002c716 	blt	r2,zero,2008f8e0 <_dtoa_r+0x1500>
2008edc4:	dd000817 	ldw	r20,32(sp)
2008edc8:	d8800617 	ldw	r2,24(sp)
2008edcc:	d9800817 	ldw	r6,32(sp)
2008edd0:	8009883a 	mov	r4,r16
2008edd4:	01400044 	movi	r5,1
2008edd8:	308d883a 	add	r6,r6,r2
2008eddc:	d9800815 	stw	r6,32(sp)
2008ede0:	b0ad883a 	add	r22,r22,r2
2008ede4:	00914800 	call	20091480 <__i2b>
2008ede8:	1023883a 	mov	r17,r2
2008edec:	a0000826 	beq	r20,zero,2008ee10 <_dtoa_r+0xa30>
2008edf0:	0580070e 	bge	zero,r22,2008ee10 <_dtoa_r+0xa30>
2008edf4:	b005883a 	mov	r2,r22
2008edf8:	a5812016 	blt	r20,r22,2008f27c <_dtoa_r+0xe9c>
2008edfc:	d8c00817 	ldw	r3,32(sp)
2008ee00:	a0a9c83a 	sub	r20,r20,r2
2008ee04:	b0adc83a 	sub	r22,r22,r2
2008ee08:	1887c83a 	sub	r3,r3,r2
2008ee0c:	d8c00815 	stw	r3,32(sp)
2008ee10:	d9000917 	ldw	r4,36(sp)
2008ee14:	0100140e 	bge	zero,r4,2008ee68 <_dtoa_r+0xa88>
2008ee18:	d9800b17 	ldw	r6,44(sp)
2008ee1c:	3001e526 	beq	r6,zero,2008f5b4 <_dtoa_r+0x11d4>
2008ee20:	05400e0e 	bge	zero,r21,2008ee5c <_dtoa_r+0xa7c>
2008ee24:	880b883a 	mov	r5,r17
2008ee28:	8009883a 	mov	r4,r16
2008ee2c:	a80d883a 	mov	r6,r21
2008ee30:	00916b80 	call	200916b8 <__pow5mult>
2008ee34:	e00d883a 	mov	r6,fp
2008ee38:	8009883a 	mov	r4,r16
2008ee3c:	100b883a 	mov	r5,r2
2008ee40:	1023883a 	mov	r17,r2
2008ee44:	00914bc0 	call	200914bc <__multiply>
2008ee48:	102f883a 	mov	r23,r2
2008ee4c:	e00b883a 	mov	r5,fp
2008ee50:	8009883a 	mov	r4,r16
2008ee54:	009111c0 	call	2009111c <_Bfree>
2008ee58:	b839883a 	mov	fp,r23
2008ee5c:	d8800917 	ldw	r2,36(sp)
2008ee60:	154dc83a 	sub	r6,r2,r21
2008ee64:	3001281e 	bne	r6,zero,2008f308 <_dtoa_r+0xf28>
2008ee68:	05c00044 	movi	r23,1
2008ee6c:	8009883a 	mov	r4,r16
2008ee70:	b80b883a 	mov	r5,r23
2008ee74:	00914800 	call	20091480 <__i2b>
2008ee78:	d8c00a17 	ldw	r3,40(sp)
2008ee7c:	102b883a 	mov	r21,r2
2008ee80:	00c0310e 	bge	zero,r3,2008ef48 <_dtoa_r+0xb68>
2008ee84:	8009883a 	mov	r4,r16
2008ee88:	100b883a 	mov	r5,r2
2008ee8c:	180d883a 	mov	r6,r3
2008ee90:	00916b80 	call	200916b8 <__pow5mult>
2008ee94:	d9000317 	ldw	r4,12(sp)
2008ee98:	102b883a 	mov	r21,r2
2008ee9c:	b9011f0e 	bge	r23,r4,2008f31c <_dtoa_r+0xf3c>
2008eea0:	0027883a 	mov	r19,zero
2008eea4:	a8800417 	ldw	r2,16(r21)
2008eea8:	10800104 	addi	r2,r2,4
2008eeac:	1085883a 	add	r2,r2,r2
2008eeb0:	1085883a 	add	r2,r2,r2
2008eeb4:	a885883a 	add	r2,r21,r2
2008eeb8:	11000017 	ldw	r4,0(r2)
2008eebc:	00913680 	call	20091368 <__hi0bits>
2008eec0:	00c00804 	movi	r3,32
2008eec4:	1885c83a 	sub	r2,r3,r2
2008eec8:	00002506 	br	2008ef60 <_dtoa_r+0xb80>
2008eecc:	01800044 	movi	r6,1
2008eed0:	d9800d15 	stw	r6,52(sp)
2008eed4:	003dec06 	br	2008e688 <__flash_rwdata_start+0xffff2504>
2008eed8:	d8c00817 	ldw	r3,32(sp)
2008eedc:	d9000517 	ldw	r4,20(sp)
2008eee0:	d8000a15 	stw	zero,40(sp)
2008eee4:	1907c83a 	sub	r3,r3,r4
2008eee8:	010dc83a 	sub	r6,zero,r4
2008eeec:	d8c00815 	stw	r3,32(sp)
2008eef0:	d9800915 	stw	r6,36(sp)
2008eef4:	003ded06 	br	2008e6ac <__flash_rwdata_start+0xffff2528>
2008eef8:	05adc83a 	sub	r22,zero,r22
2008eefc:	dd800815 	stw	r22,32(sp)
2008ef00:	002d883a 	mov	r22,zero
2008ef04:	003de406 	br	2008e698 <__flash_rwdata_start+0xffff2514>
2008ef08:	d9000517 	ldw	r4,20(sp)
2008ef0c:	0088ac40 	call	20088ac4 <__floatsidf>
2008ef10:	1009883a 	mov	r4,r2
2008ef14:	180b883a 	mov	r5,r3
2008ef18:	b00d883a 	mov	r6,r22
2008ef1c:	a80f883a 	mov	r7,r21
2008ef20:	00963a00 	call	200963a0 <__eqdf2>
2008ef24:	103dc726 	beq	r2,zero,2008e644 <__flash_rwdata_start+0xffff24c0>
2008ef28:	d8800517 	ldw	r2,20(sp)
2008ef2c:	10bfffc4 	addi	r2,r2,-1
2008ef30:	d8800515 	stw	r2,20(sp)
2008ef34:	003dc306 	br	2008e644 <__flash_rwdata_start+0xffff24c0>
2008ef38:	dd400917 	ldw	r21,36(sp)
2008ef3c:	dd000817 	ldw	r20,32(sp)
2008ef40:	0023883a 	mov	r17,zero
2008ef44:	003fa906 	br	2008edec <__flash_rwdata_start+0xffff2c68>
2008ef48:	d9800317 	ldw	r6,12(sp)
2008ef4c:	b981670e 	bge	r23,r6,2008f4ec <_dtoa_r+0x110c>
2008ef50:	0027883a 	mov	r19,zero
2008ef54:	d8c00a17 	ldw	r3,40(sp)
2008ef58:	183fd21e 	bne	r3,zero,2008eea4 <__flash_rwdata_start+0xffff2d20>
2008ef5c:	00800044 	movi	r2,1
2008ef60:	1585883a 	add	r2,r2,r22
2008ef64:	108007cc 	andi	r2,r2,31
2008ef68:	10005f26 	beq	r2,zero,2008f0e8 <_dtoa_r+0xd08>
2008ef6c:	00c00804 	movi	r3,32
2008ef70:	1887c83a 	sub	r3,r3,r2
2008ef74:	01000104 	movi	r4,4
2008ef78:	20c2dd0e 	bge	r4,r3,2008faf0 <_dtoa_r+0x1710>
2008ef7c:	d9000817 	ldw	r4,32(sp)
2008ef80:	00c00704 	movi	r3,28
2008ef84:	1885c83a 	sub	r2,r3,r2
2008ef88:	2089883a 	add	r4,r4,r2
2008ef8c:	d9000815 	stw	r4,32(sp)
2008ef90:	a0a9883a 	add	r20,r20,r2
2008ef94:	b0ad883a 	add	r22,r22,r2
2008ef98:	d8800817 	ldw	r2,32(sp)
2008ef9c:	0080050e 	bge	zero,r2,2008efb4 <_dtoa_r+0xbd4>
2008efa0:	e00b883a 	mov	r5,fp
2008efa4:	8009883a 	mov	r4,r16
2008efa8:	100d883a 	mov	r6,r2
2008efac:	00917f80 	call	200917f8 <__lshift>
2008efb0:	1039883a 	mov	fp,r2
2008efb4:	0580050e 	bge	zero,r22,2008efcc <_dtoa_r+0xbec>
2008efb8:	a80b883a 	mov	r5,r21
2008efbc:	8009883a 	mov	r4,r16
2008efc0:	b00d883a 	mov	r6,r22
2008efc4:	00917f80 	call	200917f8 <__lshift>
2008efc8:	102b883a 	mov	r21,r2
2008efcc:	d8c00d17 	ldw	r3,52(sp)
2008efd0:	1801161e 	bne	r3,zero,2008f42c <_dtoa_r+0x104c>
2008efd4:	d8c00617 	ldw	r3,24(sp)
2008efd8:	00c12d0e 	bge	zero,r3,2008f490 <_dtoa_r+0x10b0>
2008efdc:	d8c00b17 	ldw	r3,44(sp)
2008efe0:	1800571e 	bne	r3,zero,2008f140 <_dtoa_r+0xd60>
2008efe4:	dc800717 	ldw	r18,28(sp)
2008efe8:	dcc00617 	ldw	r19,24(sp)
2008efec:	9029883a 	mov	r20,r18
2008eff0:	00000206 	br	2008effc <_dtoa_r+0xc1c>
2008eff4:	00911440 	call	20091144 <__multadd>
2008eff8:	1039883a 	mov	fp,r2
2008effc:	e009883a 	mov	r4,fp
2008f000:	a80b883a 	mov	r5,r21
2008f004:	008e1e00 	call	2008e1e0 <quorem>
2008f008:	10800c04 	addi	r2,r2,48
2008f00c:	90800005 	stb	r2,0(r18)
2008f010:	94800044 	addi	r18,r18,1
2008f014:	9507c83a 	sub	r3,r18,r20
2008f018:	8009883a 	mov	r4,r16
2008f01c:	e00b883a 	mov	r5,fp
2008f020:	01800284 	movi	r6,10
2008f024:	000f883a 	mov	r7,zero
2008f028:	1cfff216 	blt	r3,r19,2008eff4 <__flash_rwdata_start+0xffff2e70>
2008f02c:	1011883a 	mov	r8,r2
2008f030:	d8800617 	ldw	r2,24(sp)
2008f034:	00822e0e 	bge	zero,r2,2008f8f0 <_dtoa_r+0x1510>
2008f038:	d9000717 	ldw	r4,28(sp)
2008f03c:	0025883a 	mov	r18,zero
2008f040:	20af883a 	add	r23,r4,r2
2008f044:	e00b883a 	mov	r5,fp
2008f048:	01800044 	movi	r6,1
2008f04c:	8009883a 	mov	r4,r16
2008f050:	da001715 	stw	r8,92(sp)
2008f054:	00917f80 	call	200917f8 <__lshift>
2008f058:	1009883a 	mov	r4,r2
2008f05c:	a80b883a 	mov	r5,r21
2008f060:	1039883a 	mov	fp,r2
2008f064:	00919480 	call	20091948 <__mcmp>
2008f068:	da001717 	ldw	r8,92(sp)
2008f06c:	00816e0e 	bge	zero,r2,2008f628 <_dtoa_r+0x1248>
2008f070:	b93fffc3 	ldbu	r4,-1(r23)
2008f074:	b8bfffc4 	addi	r2,r23,-1
2008f078:	1007883a 	mov	r3,r2
2008f07c:	01800e44 	movi	r6,57
2008f080:	d9c00717 	ldw	r7,28(sp)
2008f084:	00000506 	br	2008f09c <_dtoa_r+0xcbc>
2008f088:	18ffffc4 	addi	r3,r3,-1
2008f08c:	38811926 	beq	r7,r2,2008f4f4 <_dtoa_r+0x1114>
2008f090:	19000003 	ldbu	r4,0(r3)
2008f094:	102f883a 	mov	r23,r2
2008f098:	10bfffc4 	addi	r2,r2,-1
2008f09c:	21403fcc 	andi	r5,r4,255
2008f0a0:	2940201c 	xori	r5,r5,128
2008f0a4:	297fe004 	addi	r5,r5,-128
2008f0a8:	29bff726 	beq	r5,r6,2008f088 <__flash_rwdata_start+0xffff2f04>
2008f0ac:	21000044 	addi	r4,r4,1
2008f0b0:	11000005 	stb	r4,0(r2)
2008f0b4:	8009883a 	mov	r4,r16
2008f0b8:	a80b883a 	mov	r5,r21
2008f0bc:	009111c0 	call	2009111c <_Bfree>
2008f0c0:	883e7526 	beq	r17,zero,2008ea98 <__flash_rwdata_start+0xffff2914>
2008f0c4:	90000426 	beq	r18,zero,2008f0d8 <_dtoa_r+0xcf8>
2008f0c8:	94400326 	beq	r18,r17,2008f0d8 <_dtoa_r+0xcf8>
2008f0cc:	8009883a 	mov	r4,r16
2008f0d0:	900b883a 	mov	r5,r18
2008f0d4:	009111c0 	call	2009111c <_Bfree>
2008f0d8:	8009883a 	mov	r4,r16
2008f0dc:	880b883a 	mov	r5,r17
2008f0e0:	009111c0 	call	2009111c <_Bfree>
2008f0e4:	003e6c06 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008f0e8:	00800704 	movi	r2,28
2008f0ec:	d9800817 	ldw	r6,32(sp)
2008f0f0:	a0a9883a 	add	r20,r20,r2
2008f0f4:	b0ad883a 	add	r22,r22,r2
2008f0f8:	308d883a 	add	r6,r6,r2
2008f0fc:	d9800815 	stw	r6,32(sp)
2008f100:	003fa506 	br	2008ef98 <__flash_rwdata_start+0xffff2e14>
2008f104:	013efb84 	movi	r4,-1042
2008f108:	246bc83a 	sub	r21,r4,r17
2008f10c:	9548983a 	sll	r4,r18,r21
2008f110:	003d1806 	br	2008e574 <__flash_rwdata_start+0xffff23f0>
2008f114:	d8000d15 	stw	zero,52(sp)
2008f118:	003d5b06 	br	2008e688 <__flash_rwdata_start+0xffff2504>
2008f11c:	880b883a 	mov	r5,r17
2008f120:	8009883a 	mov	r4,r16
2008f124:	01800284 	movi	r6,10
2008f128:	000f883a 	mov	r7,zero
2008f12c:	00911440 	call	20091144 <__multadd>
2008f130:	1023883a 	mov	r17,r2
2008f134:	d8800c17 	ldw	r2,48(sp)
2008f138:	0082550e 	bge	zero,r2,2008fa90 <_dtoa_r+0x16b0>
2008f13c:	d8800615 	stw	r2,24(sp)
2008f140:	0500050e 	bge	zero,r20,2008f158 <_dtoa_r+0xd78>
2008f144:	880b883a 	mov	r5,r17
2008f148:	8009883a 	mov	r4,r16
2008f14c:	a00d883a 	mov	r6,r20
2008f150:	00917f80 	call	200917f8 <__lshift>
2008f154:	1023883a 	mov	r17,r2
2008f158:	98016a1e 	bne	r19,zero,2008f704 <_dtoa_r+0x1324>
2008f15c:	8829883a 	mov	r20,r17
2008f160:	d9000617 	ldw	r4,24(sp)
2008f164:	dcc00717 	ldw	r19,28(sp)
2008f168:	9480004c 	andi	r18,r18,1
2008f16c:	20bfffc4 	addi	r2,r4,-1
2008f170:	9885883a 	add	r2,r19,r2
2008f174:	d8800415 	stw	r2,16(sp)
2008f178:	dc800615 	stw	r18,24(sp)
2008f17c:	e009883a 	mov	r4,fp
2008f180:	a80b883a 	mov	r5,r21
2008f184:	008e1e00 	call	2008e1e0 <quorem>
2008f188:	e009883a 	mov	r4,fp
2008f18c:	880b883a 	mov	r5,r17
2008f190:	102f883a 	mov	r23,r2
2008f194:	00919480 	call	20091948 <__mcmp>
2008f198:	8009883a 	mov	r4,r16
2008f19c:	a80b883a 	mov	r5,r21
2008f1a0:	a00d883a 	mov	r6,r20
2008f1a4:	102d883a 	mov	r22,r2
2008f1a8:	00919a80 	call	200919a8 <__mdiff>
2008f1ac:	1007883a 	mov	r3,r2
2008f1b0:	10800317 	ldw	r2,12(r2)
2008f1b4:	bc800c04 	addi	r18,r23,48
2008f1b8:	1000971e 	bne	r2,zero,2008f418 <_dtoa_r+0x1038>
2008f1bc:	180b883a 	mov	r5,r3
2008f1c0:	e009883a 	mov	r4,fp
2008f1c4:	d8c01515 	stw	r3,84(sp)
2008f1c8:	00919480 	call	20091948 <__mcmp>
2008f1cc:	d8c01517 	ldw	r3,84(sp)
2008f1d0:	8009883a 	mov	r4,r16
2008f1d4:	d8801515 	stw	r2,84(sp)
2008f1d8:	180b883a 	mov	r5,r3
2008f1dc:	009111c0 	call	2009111c <_Bfree>
2008f1e0:	d8801517 	ldw	r2,84(sp)
2008f1e4:	1000041e 	bne	r2,zero,2008f1f8 <_dtoa_r+0xe18>
2008f1e8:	d9800317 	ldw	r6,12(sp)
2008f1ec:	3000021e 	bne	r6,zero,2008f1f8 <_dtoa_r+0xe18>
2008f1f0:	d8c00617 	ldw	r3,24(sp)
2008f1f4:	18007626 	beq	r3,zero,2008f3d0 <_dtoa_r+0xff0>
2008f1f8:	b0005b16 	blt	r22,zero,2008f368 <_dtoa_r+0xf88>
2008f1fc:	b000041e 	bne	r22,zero,2008f210 <_dtoa_r+0xe30>
2008f200:	d9000317 	ldw	r4,12(sp)
2008f204:	2000021e 	bne	r4,zero,2008f210 <_dtoa_r+0xe30>
2008f208:	d8c00617 	ldw	r3,24(sp)
2008f20c:	18005626 	beq	r3,zero,2008f368 <_dtoa_r+0xf88>
2008f210:	00814d16 	blt	zero,r2,2008f748 <_dtoa_r+0x1368>
2008f214:	d8c00417 	ldw	r3,16(sp)
2008f218:	9d800044 	addi	r22,r19,1
2008f21c:	9c800005 	stb	r18,0(r19)
2008f220:	b02f883a 	mov	r23,r22
2008f224:	98c14c26 	beq	r19,r3,2008f758 <_dtoa_r+0x1378>
2008f228:	e00b883a 	mov	r5,fp
2008f22c:	8009883a 	mov	r4,r16
2008f230:	01800284 	movi	r6,10
2008f234:	000f883a 	mov	r7,zero
2008f238:	00911440 	call	20091144 <__multadd>
2008f23c:	1039883a 	mov	fp,r2
2008f240:	8d006d26 	beq	r17,r20,2008f3f8 <_dtoa_r+0x1018>
2008f244:	880b883a 	mov	r5,r17
2008f248:	01800284 	movi	r6,10
2008f24c:	000f883a 	mov	r7,zero
2008f250:	8009883a 	mov	r4,r16
2008f254:	00911440 	call	20091144 <__multadd>
2008f258:	a00b883a 	mov	r5,r20
2008f25c:	8009883a 	mov	r4,r16
2008f260:	01800284 	movi	r6,10
2008f264:	000f883a 	mov	r7,zero
2008f268:	1023883a 	mov	r17,r2
2008f26c:	00911440 	call	20091144 <__multadd>
2008f270:	1029883a 	mov	r20,r2
2008f274:	b027883a 	mov	r19,r22
2008f278:	003fc006 	br	2008f17c <__flash_rwdata_start+0xffff2ff8>
2008f27c:	a005883a 	mov	r2,r20
2008f280:	003ede06 	br	2008edfc <__flash_rwdata_start+0xffff2c78>
2008f284:	01000044 	movi	r4,1
2008f288:	d9000b15 	stw	r4,44(sp)
2008f28c:	d9802217 	ldw	r6,136(sp)
2008f290:	0180dc0e 	bge	zero,r6,2008f604 <_dtoa_r+0x1224>
2008f294:	3023883a 	mov	r17,r6
2008f298:	d9800c15 	stw	r6,48(sp)
2008f29c:	d9800615 	stw	r6,24(sp)
2008f2a0:	003d1e06 	br	2008e71c <__flash_rwdata_start+0xffff2598>
2008f2a4:	d8800617 	ldw	r2,24(sp)
2008f2a8:	00be3716 	blt	zero,r2,2008eb88 <__flash_rwdata_start+0xffff2a04>
2008f2ac:	1000be1e 	bne	r2,zero,2008f5a8 <_dtoa_r+0x11c8>
2008f2b0:	8809883a 	mov	r4,r17
2008f2b4:	a00b883a 	mov	r5,r20
2008f2b8:	000d883a 	mov	r6,zero
2008f2bc:	01d00534 	movhi	r7,16404
2008f2c0:	00965e40 	call	200965e4 <__muldf3>
2008f2c4:	1009883a 	mov	r4,r2
2008f2c8:	180b883a 	mov	r5,r3
2008f2cc:	900d883a 	mov	r6,r18
2008f2d0:	980f883a 	mov	r7,r19
2008f2d4:	00964240 	call	20096424 <__gedf2>
2008f2d8:	002b883a 	mov	r21,zero
2008f2dc:	0023883a 	mov	r17,zero
2008f2e0:	10007a16 	blt	r2,zero,2008f4cc <_dtoa_r+0x10ec>
2008f2e4:	d9002217 	ldw	r4,136(sp)
2008f2e8:	ddc00717 	ldw	r23,28(sp)
2008f2ec:	0108303a 	nor	r4,zero,r4
2008f2f0:	d9000515 	stw	r4,20(sp)
2008f2f4:	8009883a 	mov	r4,r16
2008f2f8:	a80b883a 	mov	r5,r21
2008f2fc:	009111c0 	call	2009111c <_Bfree>
2008f300:	883f751e 	bne	r17,zero,2008f0d8 <__flash_rwdata_start+0xffff2f54>
2008f304:	003de406 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008f308:	e00b883a 	mov	r5,fp
2008f30c:	8009883a 	mov	r4,r16
2008f310:	00916b80 	call	200916b8 <__pow5mult>
2008f314:	1039883a 	mov	fp,r2
2008f318:	003ed306 	br	2008ee68 <__flash_rwdata_start+0xffff2ce4>
2008f31c:	903ee01e 	bne	r18,zero,2008eea0 <__flash_rwdata_start+0xffff2d1c>
2008f320:	00800434 	movhi	r2,16
2008f324:	10bfffc4 	addi	r2,r2,-1
2008f328:	9884703a 	and	r2,r19,r2
2008f32c:	103f081e 	bne	r2,zero,2008ef50 <__flash_rwdata_start+0xffff2dcc>
2008f330:	9cdffc2c 	andhi	r19,r19,32752
2008f334:	983f0626 	beq	r19,zero,2008ef50 <__flash_rwdata_start+0xffff2dcc>
2008f338:	d8800817 	ldw	r2,32(sp)
2008f33c:	b5800044 	addi	r22,r22,1
2008f340:	04c00044 	movi	r19,1
2008f344:	10800044 	addi	r2,r2,1
2008f348:	d8800815 	stw	r2,32(sp)
2008f34c:	003f0106 	br	2008ef54 <__flash_rwdata_start+0xffff2dd0>
2008f350:	d9800f17 	ldw	r6,60(sp)
2008f354:	30016826 	beq	r6,zero,2008f8f8 <_dtoa_r+0x1518>
2008f358:	10810cc4 	addi	r2,r2,1075
2008f35c:	dd400917 	ldw	r21,36(sp)
2008f360:	dd000817 	ldw	r20,32(sp)
2008f364:	003e9906 	br	2008edcc <__flash_rwdata_start+0xffff2c48>
2008f368:	9011883a 	mov	r8,r18
2008f36c:	4007883a 	mov	r3,r8
2008f370:	e02d883a 	mov	r22,fp
2008f374:	0080100e 	bge	zero,r2,2008f3b8 <_dtoa_r+0xfd8>
2008f378:	01800044 	movi	r6,1
2008f37c:	8009883a 	mov	r4,r16
2008f380:	e00b883a 	mov	r5,fp
2008f384:	da001515 	stw	r8,84(sp)
2008f388:	da001715 	stw	r8,92(sp)
2008f38c:	00917f80 	call	200917f8 <__lshift>
2008f390:	1009883a 	mov	r4,r2
2008f394:	a80b883a 	mov	r5,r21
2008f398:	102d883a 	mov	r22,r2
2008f39c:	00919480 	call	20091948 <__mcmp>
2008f3a0:	d8c01517 	ldw	r3,84(sp)
2008f3a4:	da001717 	ldw	r8,92(sp)
2008f3a8:	0081a50e 	bge	zero,r2,2008fa40 <_dtoa_r+0x1660>
2008f3ac:	00800e44 	movi	r2,57
2008f3b0:	40817b26 	beq	r8,r2,2008f9a0 <_dtoa_r+0x15c0>
2008f3b4:	40c00044 	addi	r3,r8,1
2008f3b8:	8825883a 	mov	r18,r17
2008f3bc:	9dc00044 	addi	r23,r19,1
2008f3c0:	98c00005 	stb	r3,0(r19)
2008f3c4:	a023883a 	mov	r17,r20
2008f3c8:	b039883a 	mov	fp,r22
2008f3cc:	003f3906 	br	2008f0b4 <__flash_rwdata_start+0xffff2f30>
2008f3d0:	00800e44 	movi	r2,57
2008f3d4:	9011883a 	mov	r8,r18
2008f3d8:	90817226 	beq	r18,r2,2008f9a4 <_dtoa_r+0x15c4>
2008f3dc:	0580010e 	bge	zero,r22,2008f3e4 <_dtoa_r+0x1004>
2008f3e0:	ba000c44 	addi	r8,r23,49
2008f3e4:	8825883a 	mov	r18,r17
2008f3e8:	9dc00044 	addi	r23,r19,1
2008f3ec:	9a000005 	stb	r8,0(r19)
2008f3f0:	a023883a 	mov	r17,r20
2008f3f4:	003f2f06 	br	2008f0b4 <__flash_rwdata_start+0xffff2f30>
2008f3f8:	880b883a 	mov	r5,r17
2008f3fc:	8009883a 	mov	r4,r16
2008f400:	01800284 	movi	r6,10
2008f404:	000f883a 	mov	r7,zero
2008f408:	00911440 	call	20091144 <__multadd>
2008f40c:	1023883a 	mov	r17,r2
2008f410:	1029883a 	mov	r20,r2
2008f414:	003f9706 	br	2008f274 <__flash_rwdata_start+0xffff30f0>
2008f418:	8009883a 	mov	r4,r16
2008f41c:	180b883a 	mov	r5,r3
2008f420:	009111c0 	call	2009111c <_Bfree>
2008f424:	00800044 	movi	r2,1
2008f428:	003f7306 	br	2008f1f8 <__flash_rwdata_start+0xffff3074>
2008f42c:	e009883a 	mov	r4,fp
2008f430:	a80b883a 	mov	r5,r21
2008f434:	00919480 	call	20091948 <__mcmp>
2008f438:	103ee60e 	bge	r2,zero,2008efd4 <__flash_rwdata_start+0xffff2e50>
2008f43c:	8009883a 	mov	r4,r16
2008f440:	e00b883a 	mov	r5,fp
2008f444:	01800284 	movi	r6,10
2008f448:	000f883a 	mov	r7,zero
2008f44c:	00911440 	call	20091144 <__multadd>
2008f450:	d9000517 	ldw	r4,20(sp)
2008f454:	d9800b17 	ldw	r6,44(sp)
2008f458:	1039883a 	mov	fp,r2
2008f45c:	213fffc4 	addi	r4,r4,-1
2008f460:	d9000515 	stw	r4,20(sp)
2008f464:	303f2d1e 	bne	r6,zero,2008f11c <__flash_rwdata_start+0xffff2f98>
2008f468:	d9000c17 	ldw	r4,48(sp)
2008f46c:	0101780e 	bge	zero,r4,2008fa50 <_dtoa_r+0x1670>
2008f470:	d9000615 	stw	r4,24(sp)
2008f474:	003edb06 	br	2008efe4 <__flash_rwdata_start+0xffff2e60>
2008f478:	00800084 	movi	r2,2
2008f47c:	30818e1e 	bne	r6,r2,2008fab8 <_dtoa_r+0x16d8>
2008f480:	d8000b15 	stw	zero,44(sp)
2008f484:	003f8106 	br	2008f28c <__flash_rwdata_start+0xffff3108>
2008f488:	d8800717 	ldw	r2,28(sp)
2008f48c:	003c0306 	br	2008e49c <__flash_rwdata_start+0xffff2318>
2008f490:	d9000317 	ldw	r4,12(sp)
2008f494:	00800084 	movi	r2,2
2008f498:	113ed00e 	bge	r2,r4,2008efdc <__flash_rwdata_start+0xffff2e58>
2008f49c:	d8c00617 	ldw	r3,24(sp)
2008f4a0:	183f901e 	bne	r3,zero,2008f2e4 <__flash_rwdata_start+0xffff3160>
2008f4a4:	a80b883a 	mov	r5,r21
2008f4a8:	8009883a 	mov	r4,r16
2008f4ac:	01800144 	movi	r6,5
2008f4b0:	000f883a 	mov	r7,zero
2008f4b4:	00911440 	call	20091144 <__multadd>
2008f4b8:	e009883a 	mov	r4,fp
2008f4bc:	100b883a 	mov	r5,r2
2008f4c0:	102b883a 	mov	r21,r2
2008f4c4:	00919480 	call	20091948 <__mcmp>
2008f4c8:	00bf860e 	bge	zero,r2,2008f2e4 <__flash_rwdata_start+0xffff3160>
2008f4cc:	d9800717 	ldw	r6,28(sp)
2008f4d0:	00800c44 	movi	r2,49
2008f4d4:	30800005 	stb	r2,0(r6)
2008f4d8:	d8800517 	ldw	r2,20(sp)
2008f4dc:	35c00044 	addi	r23,r6,1
2008f4e0:	10800044 	addi	r2,r2,1
2008f4e4:	d8800515 	stw	r2,20(sp)
2008f4e8:	003f8206 	br	2008f2f4 <__flash_rwdata_start+0xffff3170>
2008f4ec:	903e981e 	bne	r18,zero,2008ef50 <__flash_rwdata_start+0xffff2dcc>
2008f4f0:	003f8b06 	br	2008f320 <__flash_rwdata_start+0xffff319c>
2008f4f4:	d9800517 	ldw	r6,20(sp)
2008f4f8:	d8c00717 	ldw	r3,28(sp)
2008f4fc:	00800c44 	movi	r2,49
2008f500:	31800044 	addi	r6,r6,1
2008f504:	d9800515 	stw	r6,20(sp)
2008f508:	18800005 	stb	r2,0(r3)
2008f50c:	003ee906 	br	2008f0b4 <__flash_rwdata_start+0xffff2f30>
2008f510:	dc000317 	ldw	r16,12(sp)
2008f514:	003d6006 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008f518:	8809883a 	mov	r4,r17
2008f51c:	0088ac40 	call	20088ac4 <__floatsidf>
2008f520:	a009883a 	mov	r4,r20
2008f524:	a80b883a 	mov	r5,r21
2008f528:	100d883a 	mov	r6,r2
2008f52c:	180f883a 	mov	r7,r3
2008f530:	00965e40 	call	200965e4 <__muldf3>
2008f534:	1009883a 	mov	r4,r2
2008f538:	180b883a 	mov	r5,r3
2008f53c:	000d883a 	mov	r6,zero
2008f540:	01d00734 	movhi	r7,16412
2008f544:	00870040 	call	20087004 <__adddf3>
2008f548:	1023883a 	mov	r17,r2
2008f54c:	00bf3034 	movhi	r2,64704
2008f550:	1885883a 	add	r2,r3,r2
2008f554:	d8800e15 	stw	r2,56(sp)
2008f558:	a009883a 	mov	r4,r20
2008f55c:	a80b883a 	mov	r5,r21
2008f560:	000d883a 	mov	r6,zero
2008f564:	01d00534 	movhi	r7,16404
2008f568:	008816c0 	call	2008816c <__subdf3>
2008f56c:	d9c00e17 	ldw	r7,56(sp)
2008f570:	1009883a 	mov	r4,r2
2008f574:	180b883a 	mov	r5,r3
2008f578:	880d883a 	mov	r6,r17
2008f57c:	102b883a 	mov	r21,r2
2008f580:	1829883a 	mov	r20,r3
2008f584:	00964240 	call	20096424 <__gedf2>
2008f588:	00807716 	blt	zero,r2,2008f768 <_dtoa_r+0x1388>
2008f58c:	d8800e17 	ldw	r2,56(sp)
2008f590:	a809883a 	mov	r4,r21
2008f594:	a00b883a 	mov	r5,r20
2008f598:	11e0003c 	xorhi	r7,r2,32768
2008f59c:	880d883a 	mov	r6,r17
2008f5a0:	00965040 	call	20096504 <__ledf2>
2008f5a4:	103d6b0e 	bge	r2,zero,2008eb54 <__flash_rwdata_start+0xffff29d0>
2008f5a8:	002b883a 	mov	r21,zero
2008f5ac:	0023883a 	mov	r17,zero
2008f5b0:	003f4c06 	br	2008f2e4 <__flash_rwdata_start+0xffff3160>
2008f5b4:	d9800917 	ldw	r6,36(sp)
2008f5b8:	e00b883a 	mov	r5,fp
2008f5bc:	8009883a 	mov	r4,r16
2008f5c0:	00916b80 	call	200916b8 <__pow5mult>
2008f5c4:	1039883a 	mov	fp,r2
2008f5c8:	003e2706 	br	2008ee68 <__flash_rwdata_start+0xffff2ce4>
2008f5cc:	d8000b15 	stw	zero,44(sp)
2008f5d0:	003c4906 	br	2008e6f8 <__flash_rwdata_start+0xffff2574>
2008f5d4:	d9000917 	ldw	r4,36(sp)
2008f5d8:	d9800a17 	ldw	r6,40(sp)
2008f5dc:	dd400915 	stw	r21,36(sp)
2008f5e0:	a905c83a 	sub	r2,r21,r4
2008f5e4:	308d883a 	add	r6,r6,r2
2008f5e8:	d9800a15 	stw	r6,40(sp)
2008f5ec:	002b883a 	mov	r21,zero
2008f5f0:	003df206 	br	2008edbc <__flash_rwdata_start+0xffff2c38>
2008f5f4:	dc800e15 	stw	r18,56(sp)
2008f5f8:	982b883a 	mov	r21,r19
2008f5fc:	04400084 	movi	r17,2
2008f600:	003c7406 	br	2008e7d4 <__flash_rwdata_start+0xffff2650>
2008f604:	04400044 	movi	r17,1
2008f608:	dc400c15 	stw	r17,48(sp)
2008f60c:	dc400615 	stw	r17,24(sp)
2008f610:	dc402215 	stw	r17,136(sp)
2008f614:	80001115 	stw	zero,68(r16)
2008f618:	000b883a 	mov	r5,zero
2008f61c:	003c4a06 	br	2008e748 <__flash_rwdata_start+0xffff25c4>
2008f620:	3023883a 	mov	r17,r6
2008f624:	003ffb06 	br	2008f614 <__flash_rwdata_start+0xffff3490>
2008f628:	1000021e 	bne	r2,zero,2008f634 <_dtoa_r+0x1254>
2008f62c:	4200004c 	andi	r8,r8,1
2008f630:	403e8f1e 	bne	r8,zero,2008f070 <__flash_rwdata_start+0xffff2eec>
2008f634:	01000c04 	movi	r4,48
2008f638:	00000106 	br	2008f640 <_dtoa_r+0x1260>
2008f63c:	102f883a 	mov	r23,r2
2008f640:	b8bfffc4 	addi	r2,r23,-1
2008f644:	10c00007 	ldb	r3,0(r2)
2008f648:	193ffc26 	beq	r3,r4,2008f63c <__flash_rwdata_start+0xffff34b8>
2008f64c:	003e9906 	br	2008f0b4 <__flash_rwdata_start+0xffff2f30>
2008f650:	d9000517 	ldw	r4,20(sp)
2008f654:	012fc83a 	sub	r23,zero,r4
2008f658:	b800ad26 	beq	r23,zero,2008f910 <_dtoa_r+0x1530>
2008f65c:	b88003cc 	andi	r2,r23,15
2008f660:	100490fa 	slli	r2,r2,3
2008f664:	00c00034 	movhi	r3,0
2008f668:	18c14604 	addi	r3,r3,1304
2008f66c:	1885883a 	add	r2,r3,r2
2008f670:	11800017 	ldw	r6,0(r2)
2008f674:	11c00117 	ldw	r7,4(r2)
2008f678:	b82fd13a 	srai	r23,r23,4
2008f67c:	9009883a 	mov	r4,r18
2008f680:	980b883a 	mov	r5,r19
2008f684:	00965e40 	call	200965e4 <__muldf3>
2008f688:	1029883a 	mov	r20,r2
2008f68c:	182b883a 	mov	r21,r3
2008f690:	b800f426 	beq	r23,zero,2008fa64 <_dtoa_r+0x1684>
2008f694:	02000034 	movhi	r8,0
2008f698:	42013c04 	addi	r8,r8,1264
2008f69c:	8029883a 	mov	r20,r16
2008f6a0:	04400084 	movi	r17,2
2008f6a4:	4021883a 	mov	r16,r8
2008f6a8:	b980004c 	andi	r6,r23,1
2008f6ac:	1009883a 	mov	r4,r2
2008f6b0:	b82fd07a 	srai	r23,r23,1
2008f6b4:	180b883a 	mov	r5,r3
2008f6b8:	30000426 	beq	r6,zero,2008f6cc <_dtoa_r+0x12ec>
2008f6bc:	81800017 	ldw	r6,0(r16)
2008f6c0:	81c00117 	ldw	r7,4(r16)
2008f6c4:	8c400044 	addi	r17,r17,1
2008f6c8:	00965e40 	call	200965e4 <__muldf3>
2008f6cc:	84000204 	addi	r16,r16,8
2008f6d0:	b83ff51e 	bne	r23,zero,2008f6a8 <__flash_rwdata_start+0xffff3524>
2008f6d4:	a021883a 	mov	r16,r20
2008f6d8:	182b883a 	mov	r21,r3
2008f6dc:	1029883a 	mov	r20,r2
2008f6e0:	003c5506 	br	2008e838 <__flash_rwdata_start+0xffff26b4>
2008f6e4:	d9800517 	ldw	r6,20(sp)
2008f6e8:	d9000717 	ldw	r4,28(sp)
2008f6ec:	00c00c04 	movi	r3,48
2008f6f0:	31800044 	addi	r6,r6,1
2008f6f4:	d9800515 	stw	r6,20(sp)
2008f6f8:	20c00005 	stb	r3,0(r4)
2008f6fc:	02000c44 	movi	r8,49
2008f700:	003da206 	br	2008ed8c <__flash_rwdata_start+0xffff2c08>
2008f704:	89400117 	ldw	r5,4(r17)
2008f708:	8009883a 	mov	r4,r16
2008f70c:	00910740 	call	20091074 <_Balloc>
2008f710:	89800417 	ldw	r6,16(r17)
2008f714:	11000304 	addi	r4,r2,12
2008f718:	89400304 	addi	r5,r17,12
2008f71c:	31800084 	addi	r6,r6,2
2008f720:	318d883a 	add	r6,r6,r6
2008f724:	318d883a 	add	r6,r6,r6
2008f728:	1027883a 	mov	r19,r2
2008f72c:	00899600 	call	20089960 <memcpy>
2008f730:	8009883a 	mov	r4,r16
2008f734:	980b883a 	mov	r5,r19
2008f738:	01800044 	movi	r6,1
2008f73c:	00917f80 	call	200917f8 <__lshift>
2008f740:	1029883a 	mov	r20,r2
2008f744:	003e8606 	br	2008f160 <__flash_rwdata_start+0xffff2fdc>
2008f748:	00800e44 	movi	r2,57
2008f74c:	90809526 	beq	r18,r2,2008f9a4 <_dtoa_r+0x15c4>
2008f750:	92000044 	addi	r8,r18,1
2008f754:	003f2306 	br	2008f3e4 <__flash_rwdata_start+0xffff3260>
2008f758:	9011883a 	mov	r8,r18
2008f75c:	8825883a 	mov	r18,r17
2008f760:	a023883a 	mov	r17,r20
2008f764:	003e3706 	br	2008f044 <__flash_rwdata_start+0xffff2ec0>
2008f768:	002b883a 	mov	r21,zero
2008f76c:	0023883a 	mov	r17,zero
2008f770:	003f5606 	br	2008f4cc <__flash_rwdata_start+0xffff3348>
2008f774:	51bfffc4 	addi	r6,r10,-1
2008f778:	300490fa 	slli	r2,r6,3
2008f77c:	00c00034 	movhi	r3,0
2008f780:	18c14604 	addi	r3,r3,1304
2008f784:	1885883a 	add	r2,r3,r2
2008f788:	d9c00e17 	ldw	r7,56(sp)
2008f78c:	11000017 	ldw	r4,0(r2)
2008f790:	11400117 	ldw	r5,4(r2)
2008f794:	d8800717 	ldw	r2,28(sp)
2008f798:	d9801015 	stw	r6,64(sp)
2008f79c:	880d883a 	mov	r6,r17
2008f7a0:	da801615 	stw	r10,88(sp)
2008f7a4:	15c00044 	addi	r23,r2,1
2008f7a8:	00965e40 	call	200965e4 <__muldf3>
2008f7ac:	a80b883a 	mov	r5,r21
2008f7b0:	a009883a 	mov	r4,r20
2008f7b4:	d8c01115 	stw	r3,68(sp)
2008f7b8:	d8800e15 	stw	r2,56(sp)
2008f7bc:	0088a3c0 	call	20088a3c <__fixdfsi>
2008f7c0:	1009883a 	mov	r4,r2
2008f7c4:	1023883a 	mov	r17,r2
2008f7c8:	0088ac40 	call	20088ac4 <__floatsidf>
2008f7cc:	a009883a 	mov	r4,r20
2008f7d0:	a80b883a 	mov	r5,r21
2008f7d4:	100d883a 	mov	r6,r2
2008f7d8:	180f883a 	mov	r7,r3
2008f7dc:	008816c0 	call	2008816c <__subdf3>
2008f7e0:	1813883a 	mov	r9,r3
2008f7e4:	d8c00717 	ldw	r3,28(sp)
2008f7e8:	8c400c04 	addi	r17,r17,48
2008f7ec:	1011883a 	mov	r8,r2
2008f7f0:	1c400005 	stb	r17,0(r3)
2008f7f4:	da801617 	ldw	r10,88(sp)
2008f7f8:	00800044 	movi	r2,1
2008f7fc:	50802326 	beq	r10,r2,2008f88c <_dtoa_r+0x14ac>
2008f800:	d8800717 	ldw	r2,28(sp)
2008f804:	b82b883a 	mov	r21,r23
2008f808:	dc001315 	stw	r16,76(sp)
2008f80c:	12a9883a 	add	r20,r2,r10
2008f810:	4807883a 	mov	r3,r9
2008f814:	4005883a 	mov	r2,r8
2008f818:	dc801415 	stw	r18,80(sp)
2008f81c:	000d883a 	mov	r6,zero
2008f820:	01d00934 	movhi	r7,16420
2008f824:	1009883a 	mov	r4,r2
2008f828:	180b883a 	mov	r5,r3
2008f82c:	00965e40 	call	200965e4 <__muldf3>
2008f830:	180b883a 	mov	r5,r3
2008f834:	1009883a 	mov	r4,r2
2008f838:	1821883a 	mov	r16,r3
2008f83c:	1025883a 	mov	r18,r2
2008f840:	0088a3c0 	call	20088a3c <__fixdfsi>
2008f844:	1009883a 	mov	r4,r2
2008f848:	1023883a 	mov	r17,r2
2008f84c:	0088ac40 	call	20088ac4 <__floatsidf>
2008f850:	9009883a 	mov	r4,r18
2008f854:	800b883a 	mov	r5,r16
2008f858:	100d883a 	mov	r6,r2
2008f85c:	180f883a 	mov	r7,r3
2008f860:	8c400c04 	addi	r17,r17,48
2008f864:	008816c0 	call	2008816c <__subdf3>
2008f868:	ad400044 	addi	r21,r21,1
2008f86c:	ac7fffc5 	stb	r17,-1(r21)
2008f870:	ad3fea1e 	bne	r21,r20,2008f81c <__flash_rwdata_start+0xffff3698>
2008f874:	1813883a 	mov	r9,r3
2008f878:	d8c01017 	ldw	r3,64(sp)
2008f87c:	dc001317 	ldw	r16,76(sp)
2008f880:	dc801417 	ldw	r18,80(sp)
2008f884:	1011883a 	mov	r8,r2
2008f888:	b8ef883a 	add	r23,r23,r3
2008f88c:	d9000e17 	ldw	r4,56(sp)
2008f890:	d9401117 	ldw	r5,68(sp)
2008f894:	000d883a 	mov	r6,zero
2008f898:	01cff834 	movhi	r7,16352
2008f89c:	da001715 	stw	r8,92(sp)
2008f8a0:	da401515 	stw	r9,84(sp)
2008f8a4:	00870040 	call	20087004 <__adddf3>
2008f8a8:	da001717 	ldw	r8,92(sp)
2008f8ac:	da401517 	ldw	r9,84(sp)
2008f8b0:	1009883a 	mov	r4,r2
2008f8b4:	400d883a 	mov	r6,r8
2008f8b8:	480f883a 	mov	r7,r9
2008f8bc:	180b883a 	mov	r5,r3
2008f8c0:	00965040 	call	20096504 <__ledf2>
2008f8c4:	da001717 	ldw	r8,92(sp)
2008f8c8:	da401517 	ldw	r9,84(sp)
2008f8cc:	10003b0e 	bge	r2,zero,2008f9bc <_dtoa_r+0x15dc>
2008f8d0:	d9001217 	ldw	r4,72(sp)
2008f8d4:	bd7fffc3 	ldbu	r21,-1(r23)
2008f8d8:	d9000515 	stw	r4,20(sp)
2008f8dc:	003d1c06 	br	2008ed50 <__flash_rwdata_start+0xffff2bcc>
2008f8e0:	d8c00817 	ldw	r3,32(sp)
2008f8e4:	18a9c83a 	sub	r20,r3,r2
2008f8e8:	0005883a 	mov	r2,zero
2008f8ec:	003d3706 	br	2008edcc <__flash_rwdata_start+0xffff2c48>
2008f8f0:	00800044 	movi	r2,1
2008f8f4:	003dd006 	br	2008f038 <__flash_rwdata_start+0xffff2eb4>
2008f8f8:	d8c00217 	ldw	r3,8(sp)
2008f8fc:	00800d84 	movi	r2,54
2008f900:	dd400917 	ldw	r21,36(sp)
2008f904:	10c5c83a 	sub	r2,r2,r3
2008f908:	dd000817 	ldw	r20,32(sp)
2008f90c:	003d2f06 	br	2008edcc <__flash_rwdata_start+0xffff2c48>
2008f910:	9029883a 	mov	r20,r18
2008f914:	982b883a 	mov	r21,r19
2008f918:	04400084 	movi	r17,2
2008f91c:	003bc606 	br	2008e838 <__flash_rwdata_start+0xffff26b4>
2008f920:	d8800617 	ldw	r2,24(sp)
2008f924:	103efc26 	beq	r2,zero,2008f518 <__flash_rwdata_start+0xffff3394>
2008f928:	d8c00c17 	ldw	r3,48(sp)
2008f92c:	00fc890e 	bge	zero,r3,2008eb54 <__flash_rwdata_start+0xffff29d0>
2008f930:	a80b883a 	mov	r5,r21
2008f934:	a009883a 	mov	r4,r20
2008f938:	000d883a 	mov	r6,zero
2008f93c:	01d00934 	movhi	r7,16420
2008f940:	00965e40 	call	200965e4 <__muldf3>
2008f944:	89000044 	addi	r4,r17,1
2008f948:	1029883a 	mov	r20,r2
2008f94c:	182b883a 	mov	r21,r3
2008f950:	0088ac40 	call	20088ac4 <__floatsidf>
2008f954:	a009883a 	mov	r4,r20
2008f958:	a80b883a 	mov	r5,r21
2008f95c:	100d883a 	mov	r6,r2
2008f960:	180f883a 	mov	r7,r3
2008f964:	00965e40 	call	200965e4 <__muldf3>
2008f968:	1009883a 	mov	r4,r2
2008f96c:	180b883a 	mov	r5,r3
2008f970:	000d883a 	mov	r6,zero
2008f974:	01d00734 	movhi	r7,16412
2008f978:	00870040 	call	20087004 <__adddf3>
2008f97c:	d9000517 	ldw	r4,20(sp)
2008f980:	1023883a 	mov	r17,r2
2008f984:	00bf3034 	movhi	r2,64704
2008f988:	213fffc4 	addi	r4,r4,-1
2008f98c:	1885883a 	add	r2,r3,r2
2008f990:	d9001215 	stw	r4,72(sp)
2008f994:	d8800e15 	stw	r2,56(sp)
2008f998:	da800c17 	ldw	r10,48(sp)
2008f99c:	003bc306 	br	2008e8ac <__flash_rwdata_start+0xffff2728>
2008f9a0:	b039883a 	mov	fp,r22
2008f9a4:	01000e44 	movi	r4,57
2008f9a8:	8825883a 	mov	r18,r17
2008f9ac:	9dc00044 	addi	r23,r19,1
2008f9b0:	99000005 	stb	r4,0(r19)
2008f9b4:	a023883a 	mov	r17,r20
2008f9b8:	003dae06 	br	2008f074 <__flash_rwdata_start+0xffff2ef0>
2008f9bc:	d9800e17 	ldw	r6,56(sp)
2008f9c0:	d9c01117 	ldw	r7,68(sp)
2008f9c4:	0009883a 	mov	r4,zero
2008f9c8:	014ff834 	movhi	r5,16352
2008f9cc:	da001715 	stw	r8,92(sp)
2008f9d0:	da401515 	stw	r9,84(sp)
2008f9d4:	008816c0 	call	2008816c <__subdf3>
2008f9d8:	da001717 	ldw	r8,92(sp)
2008f9dc:	da401517 	ldw	r9,84(sp)
2008f9e0:	1009883a 	mov	r4,r2
2008f9e4:	180b883a 	mov	r5,r3
2008f9e8:	400d883a 	mov	r6,r8
2008f9ec:	480f883a 	mov	r7,r9
2008f9f0:	00964240 	call	20096424 <__gedf2>
2008f9f4:	00bc570e 	bge	zero,r2,2008eb54 <__flash_rwdata_start+0xffff29d0>
2008f9f8:	01000c04 	movi	r4,48
2008f9fc:	00000106 	br	2008fa04 <_dtoa_r+0x1624>
2008fa00:	102f883a 	mov	r23,r2
2008fa04:	b8bfffc4 	addi	r2,r23,-1
2008fa08:	10c00007 	ldb	r3,0(r2)
2008fa0c:	193ffc26 	beq	r3,r4,2008fa00 <__flash_rwdata_start+0xffff387c>
2008fa10:	d9801217 	ldw	r6,72(sp)
2008fa14:	d9800515 	stw	r6,20(sp)
2008fa18:	003c1f06 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008fa1c:	d8801217 	ldw	r2,72(sp)
2008fa20:	dc001117 	ldw	r16,68(sp)
2008fa24:	d8800515 	stw	r2,20(sp)
2008fa28:	003cc906 	br	2008ed50 <__flash_rwdata_start+0xffff2bcc>
2008fa2c:	dd801317 	ldw	r22,76(sp)
2008fa30:	dc001117 	ldw	r16,68(sp)
2008fa34:	dcc01417 	ldw	r19,80(sp)
2008fa38:	dc801017 	ldw	r18,64(sp)
2008fa3c:	003c4506 	br	2008eb54 <__flash_rwdata_start+0xffff29d0>
2008fa40:	103e5d1e 	bne	r2,zero,2008f3b8 <__flash_rwdata_start+0xffff3234>
2008fa44:	4080004c 	andi	r2,r8,1
2008fa48:	103e5b26 	beq	r2,zero,2008f3b8 <__flash_rwdata_start+0xffff3234>
2008fa4c:	003e5706 	br	2008f3ac <__flash_rwdata_start+0xffff3228>
2008fa50:	d8c00317 	ldw	r3,12(sp)
2008fa54:	00800084 	movi	r2,2
2008fa58:	10c00a16 	blt	r2,r3,2008fa84 <_dtoa_r+0x16a4>
2008fa5c:	d9000c17 	ldw	r4,48(sp)
2008fa60:	003e8306 	br	2008f470 <__flash_rwdata_start+0xffff32ec>
2008fa64:	04400084 	movi	r17,2
2008fa68:	003b7306 	br	2008e838 <__flash_rwdata_start+0xffff26b4>
2008fa6c:	d9801217 	ldw	r6,72(sp)
2008fa70:	d9800515 	stw	r6,20(sp)
2008fa74:	003cb606 	br	2008ed50 <__flash_rwdata_start+0xffff2bcc>
2008fa78:	d9001217 	ldw	r4,72(sp)
2008fa7c:	d9000515 	stw	r4,20(sp)
2008fa80:	003c0506 	br	2008ea98 <__flash_rwdata_start+0xffff2914>
2008fa84:	d9800c17 	ldw	r6,48(sp)
2008fa88:	d9800615 	stw	r6,24(sp)
2008fa8c:	003e8306 	br	2008f49c <__flash_rwdata_start+0xffff3318>
2008fa90:	d9800317 	ldw	r6,12(sp)
2008fa94:	00800084 	movi	r2,2
2008fa98:	11800216 	blt	r2,r6,2008faa4 <_dtoa_r+0x16c4>
2008fa9c:	d8800c17 	ldw	r2,48(sp)
2008faa0:	003da606 	br	2008f13c <__flash_rwdata_start+0xffff2fb8>
2008faa4:	d8800c17 	ldw	r2,48(sp)
2008faa8:	d8800615 	stw	r2,24(sp)
2008faac:	003e7b06 	br	2008f49c <__flash_rwdata_start+0xffff3318>
2008fab0:	05000044 	movi	r20,1
2008fab4:	003b0506 	br	2008e6cc <__flash_rwdata_start+0xffff2548>
2008fab8:	8009883a 	mov	r4,r16
2008fabc:	80001115 	stw	zero,68(r16)
2008fac0:	000b883a 	mov	r5,zero
2008fac4:	00910740 	call	20091074 <_Balloc>
2008fac8:	d8800715 	stw	r2,28(sp)
2008facc:	d8c00717 	ldw	r3,28(sp)
2008fad0:	00bfffc4 	movi	r2,-1
2008fad4:	01000044 	movi	r4,1
2008fad8:	d8800c15 	stw	r2,48(sp)
2008fadc:	80c01015 	stw	r3,64(r16)
2008fae0:	d9000b15 	stw	r4,44(sp)
2008fae4:	d8800615 	stw	r2,24(sp)
2008fae8:	d8002215 	stw	zero,136(sp)
2008faec:	003c1906 	br	2008eb54 <__flash_rwdata_start+0xffff29d0>
2008faf0:	193d2926 	beq	r3,r4,2008ef98 <__flash_rwdata_start+0xffff2e14>
2008faf4:	00c00f04 	movi	r3,60
2008faf8:	1885c83a 	sub	r2,r3,r2
2008fafc:	003d7b06 	br	2008f0ec <__flash_rwdata_start+0xffff2f68>
2008fb00:	000b883a 	mov	r5,zero
2008fb04:	003b1006 	br	2008e748 <__flash_rwdata_start+0xffff25c4>

2008fb08 <__sflush_r>:
2008fb08:	2880030b 	ldhu	r2,12(r5)
2008fb0c:	defffb04 	addi	sp,sp,-20
2008fb10:	dcc00315 	stw	r19,12(sp)
2008fb14:	dc400115 	stw	r17,4(sp)
2008fb18:	dfc00415 	stw	ra,16(sp)
2008fb1c:	dc800215 	stw	r18,8(sp)
2008fb20:	dc000015 	stw	r16,0(sp)
2008fb24:	10c0020c 	andi	r3,r2,8
2008fb28:	2823883a 	mov	r17,r5
2008fb2c:	2027883a 	mov	r19,r4
2008fb30:	1800311e 	bne	r3,zero,2008fbf8 <__sflush_r+0xf0>
2008fb34:	28c00117 	ldw	r3,4(r5)
2008fb38:	10820014 	ori	r2,r2,2048
2008fb3c:	2880030d 	sth	r2,12(r5)
2008fb40:	00c04b0e 	bge	zero,r3,2008fc70 <__sflush_r+0x168>
2008fb44:	8a000a17 	ldw	r8,40(r17)
2008fb48:	40002326 	beq	r8,zero,2008fbd8 <__sflush_r+0xd0>
2008fb4c:	9c000017 	ldw	r16,0(r19)
2008fb50:	10c4000c 	andi	r3,r2,4096
2008fb54:	98000015 	stw	zero,0(r19)
2008fb58:	18004826 	beq	r3,zero,2008fc7c <__sflush_r+0x174>
2008fb5c:	89801417 	ldw	r6,80(r17)
2008fb60:	10c0010c 	andi	r3,r2,4
2008fb64:	18000626 	beq	r3,zero,2008fb80 <__sflush_r+0x78>
2008fb68:	88c00117 	ldw	r3,4(r17)
2008fb6c:	88800c17 	ldw	r2,48(r17)
2008fb70:	30cdc83a 	sub	r6,r6,r3
2008fb74:	10000226 	beq	r2,zero,2008fb80 <__sflush_r+0x78>
2008fb78:	88800f17 	ldw	r2,60(r17)
2008fb7c:	308dc83a 	sub	r6,r6,r2
2008fb80:	89400717 	ldw	r5,28(r17)
2008fb84:	9809883a 	mov	r4,r19
2008fb88:	000f883a 	mov	r7,zero
2008fb8c:	403ee83a 	callr	r8
2008fb90:	00ffffc4 	movi	r3,-1
2008fb94:	10c04426 	beq	r2,r3,2008fca8 <__sflush_r+0x1a0>
2008fb98:	88c0030b 	ldhu	r3,12(r17)
2008fb9c:	89000417 	ldw	r4,16(r17)
2008fba0:	88000115 	stw	zero,4(r17)
2008fba4:	197dffcc 	andi	r5,r3,63487
2008fba8:	8940030d 	sth	r5,12(r17)
2008fbac:	89000015 	stw	r4,0(r17)
2008fbb0:	18c4000c 	andi	r3,r3,4096
2008fbb4:	18002c1e 	bne	r3,zero,2008fc68 <__sflush_r+0x160>
2008fbb8:	89400c17 	ldw	r5,48(r17)
2008fbbc:	9c000015 	stw	r16,0(r19)
2008fbc0:	28000526 	beq	r5,zero,2008fbd8 <__sflush_r+0xd0>
2008fbc4:	88801004 	addi	r2,r17,64
2008fbc8:	28800226 	beq	r5,r2,2008fbd4 <__sflush_r+0xcc>
2008fbcc:	9809883a 	mov	r4,r19
2008fbd0:	00902600 	call	20090260 <_free_r>
2008fbd4:	88000c15 	stw	zero,48(r17)
2008fbd8:	0005883a 	mov	r2,zero
2008fbdc:	dfc00417 	ldw	ra,16(sp)
2008fbe0:	dcc00317 	ldw	r19,12(sp)
2008fbe4:	dc800217 	ldw	r18,8(sp)
2008fbe8:	dc400117 	ldw	r17,4(sp)
2008fbec:	dc000017 	ldw	r16,0(sp)
2008fbf0:	dec00504 	addi	sp,sp,20
2008fbf4:	f800283a 	ret
2008fbf8:	2c800417 	ldw	r18,16(r5)
2008fbfc:	903ff626 	beq	r18,zero,2008fbd8 <__flash_rwdata_start+0xffff3a54>
2008fc00:	2c000017 	ldw	r16,0(r5)
2008fc04:	108000cc 	andi	r2,r2,3
2008fc08:	2c800015 	stw	r18,0(r5)
2008fc0c:	84a1c83a 	sub	r16,r16,r18
2008fc10:	1000131e 	bne	r2,zero,2008fc60 <__sflush_r+0x158>
2008fc14:	28800517 	ldw	r2,20(r5)
2008fc18:	88800215 	stw	r2,8(r17)
2008fc1c:	04000316 	blt	zero,r16,2008fc2c <__sflush_r+0x124>
2008fc20:	003fed06 	br	2008fbd8 <__flash_rwdata_start+0xffff3a54>
2008fc24:	90a5883a 	add	r18,r18,r2
2008fc28:	043feb0e 	bge	zero,r16,2008fbd8 <__flash_rwdata_start+0xffff3a54>
2008fc2c:	88800917 	ldw	r2,36(r17)
2008fc30:	89400717 	ldw	r5,28(r17)
2008fc34:	800f883a 	mov	r7,r16
2008fc38:	900d883a 	mov	r6,r18
2008fc3c:	9809883a 	mov	r4,r19
2008fc40:	103ee83a 	callr	r2
2008fc44:	80a1c83a 	sub	r16,r16,r2
2008fc48:	00bff616 	blt	zero,r2,2008fc24 <__flash_rwdata_start+0xffff3aa0>
2008fc4c:	88c0030b 	ldhu	r3,12(r17)
2008fc50:	00bfffc4 	movi	r2,-1
2008fc54:	18c01014 	ori	r3,r3,64
2008fc58:	88c0030d 	sth	r3,12(r17)
2008fc5c:	003fdf06 	br	2008fbdc <__flash_rwdata_start+0xffff3a58>
2008fc60:	0005883a 	mov	r2,zero
2008fc64:	003fec06 	br	2008fc18 <__flash_rwdata_start+0xffff3a94>
2008fc68:	88801415 	stw	r2,80(r17)
2008fc6c:	003fd206 	br	2008fbb8 <__flash_rwdata_start+0xffff3a34>
2008fc70:	28c00f17 	ldw	r3,60(r5)
2008fc74:	00ffb316 	blt	zero,r3,2008fb44 <__flash_rwdata_start+0xffff39c0>
2008fc78:	003fd706 	br	2008fbd8 <__flash_rwdata_start+0xffff3a54>
2008fc7c:	89400717 	ldw	r5,28(r17)
2008fc80:	000d883a 	mov	r6,zero
2008fc84:	9809883a 	mov	r4,r19
2008fc88:	01c00044 	movi	r7,1
2008fc8c:	403ee83a 	callr	r8
2008fc90:	100d883a 	mov	r6,r2
2008fc94:	00bfffc4 	movi	r2,-1
2008fc98:	30801426 	beq	r6,r2,2008fcec <__sflush_r+0x1e4>
2008fc9c:	8880030b 	ldhu	r2,12(r17)
2008fca0:	8a000a17 	ldw	r8,40(r17)
2008fca4:	003fae06 	br	2008fb60 <__flash_rwdata_start+0xffff39dc>
2008fca8:	98c00017 	ldw	r3,0(r19)
2008fcac:	183fba26 	beq	r3,zero,2008fb98 <__flash_rwdata_start+0xffff3a14>
2008fcb0:	01000744 	movi	r4,29
2008fcb4:	19000626 	beq	r3,r4,2008fcd0 <__sflush_r+0x1c8>
2008fcb8:	01000584 	movi	r4,22
2008fcbc:	19000426 	beq	r3,r4,2008fcd0 <__sflush_r+0x1c8>
2008fcc0:	88c0030b 	ldhu	r3,12(r17)
2008fcc4:	18c01014 	ori	r3,r3,64
2008fcc8:	88c0030d 	sth	r3,12(r17)
2008fccc:	003fc306 	br	2008fbdc <__flash_rwdata_start+0xffff3a58>
2008fcd0:	8880030b 	ldhu	r2,12(r17)
2008fcd4:	88c00417 	ldw	r3,16(r17)
2008fcd8:	88000115 	stw	zero,4(r17)
2008fcdc:	10bdffcc 	andi	r2,r2,63487
2008fce0:	8880030d 	sth	r2,12(r17)
2008fce4:	88c00015 	stw	r3,0(r17)
2008fce8:	003fb306 	br	2008fbb8 <__flash_rwdata_start+0xffff3a34>
2008fcec:	98800017 	ldw	r2,0(r19)
2008fcf0:	103fea26 	beq	r2,zero,2008fc9c <__flash_rwdata_start+0xffff3b18>
2008fcf4:	00c00744 	movi	r3,29
2008fcf8:	10c00226 	beq	r2,r3,2008fd04 <__sflush_r+0x1fc>
2008fcfc:	00c00584 	movi	r3,22
2008fd00:	10ffd21e 	bne	r2,r3,2008fc4c <__flash_rwdata_start+0xffff3ac8>
2008fd04:	9c000015 	stw	r16,0(r19)
2008fd08:	0005883a 	mov	r2,zero
2008fd0c:	003fb306 	br	2008fbdc <__flash_rwdata_start+0xffff3a58>

2008fd10 <_fflush_r>:
2008fd10:	defffd04 	addi	sp,sp,-12
2008fd14:	dc000115 	stw	r16,4(sp)
2008fd18:	dfc00215 	stw	ra,8(sp)
2008fd1c:	2021883a 	mov	r16,r4
2008fd20:	20000226 	beq	r4,zero,2008fd2c <_fflush_r+0x1c>
2008fd24:	20800e17 	ldw	r2,56(r4)
2008fd28:	10000c26 	beq	r2,zero,2008fd5c <_fflush_r+0x4c>
2008fd2c:	2880030f 	ldh	r2,12(r5)
2008fd30:	1000051e 	bne	r2,zero,2008fd48 <_fflush_r+0x38>
2008fd34:	0005883a 	mov	r2,zero
2008fd38:	dfc00217 	ldw	ra,8(sp)
2008fd3c:	dc000117 	ldw	r16,4(sp)
2008fd40:	dec00304 	addi	sp,sp,12
2008fd44:	f800283a 	ret
2008fd48:	8009883a 	mov	r4,r16
2008fd4c:	dfc00217 	ldw	ra,8(sp)
2008fd50:	dc000117 	ldw	r16,4(sp)
2008fd54:	dec00304 	addi	sp,sp,12
2008fd58:	008fb081 	jmpi	2008fb08 <__sflush_r>
2008fd5c:	d9400015 	stw	r5,0(sp)
2008fd60:	00900ec0 	call	200900ec <__sinit>
2008fd64:	d9400017 	ldw	r5,0(sp)
2008fd68:	003ff006 	br	2008fd2c <__flash_rwdata_start+0xffff3ba8>

2008fd6c <fflush>:
2008fd6c:	20000526 	beq	r4,zero,2008fd84 <fflush+0x18>
2008fd70:	00800034 	movhi	r2,0
2008fd74:	1088e004 	addi	r2,r2,9088
2008fd78:	200b883a 	mov	r5,r4
2008fd7c:	11000017 	ldw	r4,0(r2)
2008fd80:	008fd101 	jmpi	2008fd10 <_fflush_r>
2008fd84:	00800034 	movhi	r2,0
2008fd88:	1088df04 	addi	r2,r2,9084
2008fd8c:	11000017 	ldw	r4,0(r2)
2008fd90:	01480274 	movhi	r5,8201
2008fd94:	297f4404 	addi	r5,r5,-752
2008fd98:	0090ad41 	jmpi	20090ad4 <_fwalk_reent>

2008fd9c <__fp_lock>:
2008fd9c:	0005883a 	mov	r2,zero
2008fda0:	f800283a 	ret

2008fda4 <__fp_unlock>:
2008fda4:	0005883a 	mov	r2,zero
2008fda8:	f800283a 	ret

2008fdac <_cleanup_r>:
2008fdac:	01480274 	movhi	r5,8201
2008fdb0:	29543304 	addi	r5,r5,20684
2008fdb4:	0090ad41 	jmpi	20090ad4 <_fwalk_reent>

2008fdb8 <__sinit.part.1>:
2008fdb8:	defff704 	addi	sp,sp,-36
2008fdbc:	00c80274 	movhi	r3,8201
2008fdc0:	dfc00815 	stw	ra,32(sp)
2008fdc4:	ddc00715 	stw	r23,28(sp)
2008fdc8:	dd800615 	stw	r22,24(sp)
2008fdcc:	dd400515 	stw	r21,20(sp)
2008fdd0:	dd000415 	stw	r20,16(sp)
2008fdd4:	dcc00315 	stw	r19,12(sp)
2008fdd8:	dc800215 	stw	r18,8(sp)
2008fddc:	dc400115 	stw	r17,4(sp)
2008fde0:	dc000015 	stw	r16,0(sp)
2008fde4:	18ff6b04 	addi	r3,r3,-596
2008fde8:	24000117 	ldw	r16,4(r4)
2008fdec:	20c00f15 	stw	r3,60(r4)
2008fdf0:	2080bb04 	addi	r2,r4,748
2008fdf4:	00c000c4 	movi	r3,3
2008fdf8:	20c0b915 	stw	r3,740(r4)
2008fdfc:	2080ba15 	stw	r2,744(r4)
2008fe00:	2000b815 	stw	zero,736(r4)
2008fe04:	05c00204 	movi	r23,8
2008fe08:	00800104 	movi	r2,4
2008fe0c:	2025883a 	mov	r18,r4
2008fe10:	b80d883a 	mov	r6,r23
2008fe14:	81001704 	addi	r4,r16,92
2008fe18:	000b883a 	mov	r5,zero
2008fe1c:	80000015 	stw	zero,0(r16)
2008fe20:	80000115 	stw	zero,4(r16)
2008fe24:	80000215 	stw	zero,8(r16)
2008fe28:	8080030d 	sth	r2,12(r16)
2008fe2c:	80001915 	stw	zero,100(r16)
2008fe30:	8000038d 	sth	zero,14(r16)
2008fe34:	80000415 	stw	zero,16(r16)
2008fe38:	80000515 	stw	zero,20(r16)
2008fe3c:	80000615 	stw	zero,24(r16)
2008fe40:	0089a980 	call	20089a98 <memset>
2008fe44:	05880274 	movhi	r22,8201
2008fe48:	94400217 	ldw	r17,8(r18)
2008fe4c:	05480274 	movhi	r21,8201
2008fe50:	05080274 	movhi	r20,8201
2008fe54:	04c80274 	movhi	r19,8201
2008fe58:	b5897c04 	addi	r22,r22,9712
2008fe5c:	ad499304 	addi	r21,r21,9804
2008fe60:	a509b204 	addi	r20,r20,9928
2008fe64:	9cc9c904 	addi	r19,r19,10020
2008fe68:	85800815 	stw	r22,32(r16)
2008fe6c:	85400915 	stw	r21,36(r16)
2008fe70:	85000a15 	stw	r20,40(r16)
2008fe74:	84c00b15 	stw	r19,44(r16)
2008fe78:	84000715 	stw	r16,28(r16)
2008fe7c:	00800284 	movi	r2,10
2008fe80:	8880030d 	sth	r2,12(r17)
2008fe84:	00800044 	movi	r2,1
2008fe88:	89001704 	addi	r4,r17,92
2008fe8c:	b80d883a 	mov	r6,r23
2008fe90:	000b883a 	mov	r5,zero
2008fe94:	88000015 	stw	zero,0(r17)
2008fe98:	88000115 	stw	zero,4(r17)
2008fe9c:	88000215 	stw	zero,8(r17)
2008fea0:	88001915 	stw	zero,100(r17)
2008fea4:	8880038d 	sth	r2,14(r17)
2008fea8:	88000415 	stw	zero,16(r17)
2008feac:	88000515 	stw	zero,20(r17)
2008feb0:	88000615 	stw	zero,24(r17)
2008feb4:	0089a980 	call	20089a98 <memset>
2008feb8:	94000317 	ldw	r16,12(r18)
2008febc:	00800484 	movi	r2,18
2008fec0:	8c400715 	stw	r17,28(r17)
2008fec4:	8d800815 	stw	r22,32(r17)
2008fec8:	8d400915 	stw	r21,36(r17)
2008fecc:	8d000a15 	stw	r20,40(r17)
2008fed0:	8cc00b15 	stw	r19,44(r17)
2008fed4:	8080030d 	sth	r2,12(r16)
2008fed8:	00800084 	movi	r2,2
2008fedc:	80000015 	stw	zero,0(r16)
2008fee0:	80000115 	stw	zero,4(r16)
2008fee4:	80000215 	stw	zero,8(r16)
2008fee8:	80001915 	stw	zero,100(r16)
2008feec:	8080038d 	sth	r2,14(r16)
2008fef0:	80000415 	stw	zero,16(r16)
2008fef4:	80000515 	stw	zero,20(r16)
2008fef8:	80000615 	stw	zero,24(r16)
2008fefc:	81001704 	addi	r4,r16,92
2008ff00:	000b883a 	mov	r5,zero
2008ff04:	b80d883a 	mov	r6,r23
2008ff08:	0089a980 	call	20089a98 <memset>
2008ff0c:	00800044 	movi	r2,1
2008ff10:	84000715 	stw	r16,28(r16)
2008ff14:	85800815 	stw	r22,32(r16)
2008ff18:	85400915 	stw	r21,36(r16)
2008ff1c:	85000a15 	stw	r20,40(r16)
2008ff20:	84c00b15 	stw	r19,44(r16)
2008ff24:	90800e15 	stw	r2,56(r18)
2008ff28:	dfc00817 	ldw	ra,32(sp)
2008ff2c:	ddc00717 	ldw	r23,28(sp)
2008ff30:	dd800617 	ldw	r22,24(sp)
2008ff34:	dd400517 	ldw	r21,20(sp)
2008ff38:	dd000417 	ldw	r20,16(sp)
2008ff3c:	dcc00317 	ldw	r19,12(sp)
2008ff40:	dc800217 	ldw	r18,8(sp)
2008ff44:	dc400117 	ldw	r17,4(sp)
2008ff48:	dc000017 	ldw	r16,0(sp)
2008ff4c:	dec00904 	addi	sp,sp,36
2008ff50:	f800283a 	ret

2008ff54 <__sfmoreglue>:
2008ff54:	defffc04 	addi	sp,sp,-16
2008ff58:	dc400115 	stw	r17,4(sp)
2008ff5c:	2c7fffc4 	addi	r17,r5,-1
2008ff60:	8c401a24 	muli	r17,r17,104
2008ff64:	dc800215 	stw	r18,8(sp)
2008ff68:	2825883a 	mov	r18,r5
2008ff6c:	89401d04 	addi	r5,r17,116
2008ff70:	dc000015 	stw	r16,0(sp)
2008ff74:	dfc00315 	stw	ra,12(sp)
2008ff78:	008913c0 	call	2008913c <_malloc_r>
2008ff7c:	1021883a 	mov	r16,r2
2008ff80:	10000726 	beq	r2,zero,2008ffa0 <__sfmoreglue+0x4c>
2008ff84:	11000304 	addi	r4,r2,12
2008ff88:	10000015 	stw	zero,0(r2)
2008ff8c:	14800115 	stw	r18,4(r2)
2008ff90:	11000215 	stw	r4,8(r2)
2008ff94:	000b883a 	mov	r5,zero
2008ff98:	89801a04 	addi	r6,r17,104
2008ff9c:	0089a980 	call	20089a98 <memset>
2008ffa0:	8005883a 	mov	r2,r16
2008ffa4:	dfc00317 	ldw	ra,12(sp)
2008ffa8:	dc800217 	ldw	r18,8(sp)
2008ffac:	dc400117 	ldw	r17,4(sp)
2008ffb0:	dc000017 	ldw	r16,0(sp)
2008ffb4:	dec00404 	addi	sp,sp,16
2008ffb8:	f800283a 	ret

2008ffbc <__sfp>:
2008ffbc:	00800034 	movhi	r2,0
2008ffc0:	defffb04 	addi	sp,sp,-20
2008ffc4:	1088df04 	addi	r2,r2,9084
2008ffc8:	dc800215 	stw	r18,8(sp)
2008ffcc:	14800017 	ldw	r18,0(r2)
2008ffd0:	dcc00315 	stw	r19,12(sp)
2008ffd4:	dfc00415 	stw	ra,16(sp)
2008ffd8:	90800e17 	ldw	r2,56(r18)
2008ffdc:	dc400115 	stw	r17,4(sp)
2008ffe0:	dc000015 	stw	r16,0(sp)
2008ffe4:	2027883a 	mov	r19,r4
2008ffe8:	1000021e 	bne	r2,zero,2008fff4 <__sfp+0x38>
2008ffec:	9009883a 	mov	r4,r18
2008fff0:	008fdb80 	call	2008fdb8 <__sinit.part.1>
2008fff4:	9480b804 	addi	r18,r18,736
2008fff8:	047fffc4 	movi	r17,-1
2008fffc:	91400117 	ldw	r5,4(r18)
20090000:	94000217 	ldw	r16,8(r18)
20090004:	297fffc4 	addi	r5,r5,-1
20090008:	28000a16 	blt	r5,zero,20090034 <__sfp+0x78>
2009000c:	8080030f 	ldh	r2,12(r16)
20090010:	10000c26 	beq	r2,zero,20090044 <__sfp+0x88>
20090014:	80c01d04 	addi	r3,r16,116
20090018:	00000206 	br	20090024 <__sfp+0x68>
2009001c:	18bfe60f 	ldh	r2,-104(r3)
20090020:	10000826 	beq	r2,zero,20090044 <__sfp+0x88>
20090024:	297fffc4 	addi	r5,r5,-1
20090028:	1c3ffd04 	addi	r16,r3,-12
2009002c:	18c01a04 	addi	r3,r3,104
20090030:	2c7ffa1e 	bne	r5,r17,2009001c <__flash_rwdata_start+0xffff3e98>
20090034:	90800017 	ldw	r2,0(r18)
20090038:	10001d26 	beq	r2,zero,200900b0 <__sfp+0xf4>
2009003c:	1025883a 	mov	r18,r2
20090040:	003fee06 	br	2008fffc <__flash_rwdata_start+0xffff3e78>
20090044:	00bfffc4 	movi	r2,-1
20090048:	8080038d 	sth	r2,14(r16)
2009004c:	00800044 	movi	r2,1
20090050:	8080030d 	sth	r2,12(r16)
20090054:	80001915 	stw	zero,100(r16)
20090058:	80000015 	stw	zero,0(r16)
2009005c:	80000215 	stw	zero,8(r16)
20090060:	80000115 	stw	zero,4(r16)
20090064:	80000415 	stw	zero,16(r16)
20090068:	80000515 	stw	zero,20(r16)
2009006c:	80000615 	stw	zero,24(r16)
20090070:	81001704 	addi	r4,r16,92
20090074:	000b883a 	mov	r5,zero
20090078:	01800204 	movi	r6,8
2009007c:	0089a980 	call	20089a98 <memset>
20090080:	8005883a 	mov	r2,r16
20090084:	80000c15 	stw	zero,48(r16)
20090088:	80000d15 	stw	zero,52(r16)
2009008c:	80001115 	stw	zero,68(r16)
20090090:	80001215 	stw	zero,72(r16)
20090094:	dfc00417 	ldw	ra,16(sp)
20090098:	dcc00317 	ldw	r19,12(sp)
2009009c:	dc800217 	ldw	r18,8(sp)
200900a0:	dc400117 	ldw	r17,4(sp)
200900a4:	dc000017 	ldw	r16,0(sp)
200900a8:	dec00504 	addi	sp,sp,20
200900ac:	f800283a 	ret
200900b0:	9809883a 	mov	r4,r19
200900b4:	01400104 	movi	r5,4
200900b8:	008ff540 	call	2008ff54 <__sfmoreglue>
200900bc:	90800015 	stw	r2,0(r18)
200900c0:	103fde1e 	bne	r2,zero,2009003c <__flash_rwdata_start+0xffff3eb8>
200900c4:	00800304 	movi	r2,12
200900c8:	98800015 	stw	r2,0(r19)
200900cc:	0005883a 	mov	r2,zero
200900d0:	003ff006 	br	20090094 <__flash_rwdata_start+0xffff3f10>

200900d4 <_cleanup>:
200900d4:	00800034 	movhi	r2,0
200900d8:	1088df04 	addi	r2,r2,9084
200900dc:	11000017 	ldw	r4,0(r2)
200900e0:	01480274 	movhi	r5,8201
200900e4:	29543304 	addi	r5,r5,20684
200900e8:	0090ad41 	jmpi	20090ad4 <_fwalk_reent>

200900ec <__sinit>:
200900ec:	20800e17 	ldw	r2,56(r4)
200900f0:	10000126 	beq	r2,zero,200900f8 <__sinit+0xc>
200900f4:	f800283a 	ret
200900f8:	008fdb81 	jmpi	2008fdb8 <__sinit.part.1>

200900fc <__sfp_lock_acquire>:
200900fc:	f800283a 	ret

20090100 <__sfp_lock_release>:
20090100:	f800283a 	ret

20090104 <__sinit_lock_acquire>:
20090104:	f800283a 	ret

20090108 <__sinit_lock_release>:
20090108:	f800283a 	ret

2009010c <__fp_lock_all>:
2009010c:	00800034 	movhi	r2,0
20090110:	1088e004 	addi	r2,r2,9088
20090114:	11000017 	ldw	r4,0(r2)
20090118:	01480274 	movhi	r5,8201
2009011c:	297f6704 	addi	r5,r5,-612
20090120:	0090a101 	jmpi	20090a10 <_fwalk>

20090124 <__fp_unlock_all>:
20090124:	00800034 	movhi	r2,0
20090128:	1088e004 	addi	r2,r2,9088
2009012c:	11000017 	ldw	r4,0(r2)
20090130:	01480274 	movhi	r5,8201
20090134:	297f6904 	addi	r5,r5,-604
20090138:	0090a101 	jmpi	20090a10 <_fwalk>

2009013c <_malloc_trim_r>:
2009013c:	defffb04 	addi	sp,sp,-20
20090140:	dcc00315 	stw	r19,12(sp)
20090144:	04c00034 	movhi	r19,0
20090148:	dc800215 	stw	r18,8(sp)
2009014c:	dc400115 	stw	r17,4(sp)
20090150:	dc000015 	stw	r16,0(sp)
20090154:	dfc00415 	stw	ra,16(sp)
20090158:	2821883a 	mov	r16,r5
2009015c:	9cc21a04 	addi	r19,r19,2152
20090160:	2025883a 	mov	r18,r4
20090164:	009733c0 	call	2009733c <__malloc_lock>
20090168:	98800217 	ldw	r2,8(r19)
2009016c:	14400117 	ldw	r17,4(r2)
20090170:	00bfff04 	movi	r2,-4
20090174:	88a2703a 	and	r17,r17,r2
20090178:	8c21c83a 	sub	r16,r17,r16
2009017c:	8403fbc4 	addi	r16,r16,4079
20090180:	8020d33a 	srli	r16,r16,12
20090184:	0083ffc4 	movi	r2,4095
20090188:	843fffc4 	addi	r16,r16,-1
2009018c:	8020933a 	slli	r16,r16,12
20090190:	1400060e 	bge	r2,r16,200901ac <_malloc_trim_r+0x70>
20090194:	9009883a 	mov	r4,r18
20090198:	000b883a 	mov	r5,zero
2009019c:	0089ce00 	call	20089ce0 <_sbrk_r>
200901a0:	98c00217 	ldw	r3,8(r19)
200901a4:	1c47883a 	add	r3,r3,r17
200901a8:	10c00a26 	beq	r2,r3,200901d4 <_malloc_trim_r+0x98>
200901ac:	9009883a 	mov	r4,r18
200901b0:	009735c0 	call	2009735c <__malloc_unlock>
200901b4:	0005883a 	mov	r2,zero
200901b8:	dfc00417 	ldw	ra,16(sp)
200901bc:	dcc00317 	ldw	r19,12(sp)
200901c0:	dc800217 	ldw	r18,8(sp)
200901c4:	dc400117 	ldw	r17,4(sp)
200901c8:	dc000017 	ldw	r16,0(sp)
200901cc:	dec00504 	addi	sp,sp,20
200901d0:	f800283a 	ret
200901d4:	9009883a 	mov	r4,r18
200901d8:	040bc83a 	sub	r5,zero,r16
200901dc:	0089ce00 	call	20089ce0 <_sbrk_r>
200901e0:	00ffffc4 	movi	r3,-1
200901e4:	10c00d26 	beq	r2,r3,2009021c <_malloc_trim_r+0xe0>
200901e8:	00c00034 	movhi	r3,0
200901ec:	18ca6204 	addi	r3,r3,10632
200901f0:	18800017 	ldw	r2,0(r3)
200901f4:	99000217 	ldw	r4,8(r19)
200901f8:	8c23c83a 	sub	r17,r17,r16
200901fc:	8c400054 	ori	r17,r17,1
20090200:	1421c83a 	sub	r16,r2,r16
20090204:	24400115 	stw	r17,4(r4)
20090208:	9009883a 	mov	r4,r18
2009020c:	1c000015 	stw	r16,0(r3)
20090210:	009735c0 	call	2009735c <__malloc_unlock>
20090214:	00800044 	movi	r2,1
20090218:	003fe706 	br	200901b8 <__flash_rwdata_start+0xffff4034>
2009021c:	9009883a 	mov	r4,r18
20090220:	000b883a 	mov	r5,zero
20090224:	0089ce00 	call	20089ce0 <_sbrk_r>
20090228:	99000217 	ldw	r4,8(r19)
2009022c:	014003c4 	movi	r5,15
20090230:	1107c83a 	sub	r3,r2,r4
20090234:	28ffdd0e 	bge	r5,r3,200901ac <__flash_rwdata_start+0xffff4028>
20090238:	01400034 	movhi	r5,0
2009023c:	2948dd04 	addi	r5,r5,9076
20090240:	29400017 	ldw	r5,0(r5)
20090244:	18c00054 	ori	r3,r3,1
20090248:	20c00115 	stw	r3,4(r4)
2009024c:	00c00034 	movhi	r3,0
20090250:	1145c83a 	sub	r2,r2,r5
20090254:	18ca6204 	addi	r3,r3,10632
20090258:	18800015 	stw	r2,0(r3)
2009025c:	003fd306 	br	200901ac <__flash_rwdata_start+0xffff4028>

20090260 <_free_r>:
20090260:	28004c26 	beq	r5,zero,20090394 <_free_r+0x134>
20090264:	defffd04 	addi	sp,sp,-12
20090268:	dc400115 	stw	r17,4(sp)
2009026c:	dc000015 	stw	r16,0(sp)
20090270:	2023883a 	mov	r17,r4
20090274:	2821883a 	mov	r16,r5
20090278:	dfc00215 	stw	ra,8(sp)
2009027c:	009733c0 	call	2009733c <__malloc_lock>
20090280:	813fff17 	ldw	r4,-4(r16)
20090284:	00bfff84 	movi	r2,-2
20090288:	02400034 	movhi	r9,0
2009028c:	81bffe04 	addi	r6,r16,-8
20090290:	2084703a 	and	r2,r4,r2
20090294:	4a421a04 	addi	r9,r9,2152
20090298:	308b883a 	add	r5,r6,r2
2009029c:	2a000117 	ldw	r8,4(r5)
200902a0:	49c00217 	ldw	r7,8(r9)
200902a4:	00ffff04 	movi	r3,-4
200902a8:	40c6703a 	and	r3,r8,r3
200902ac:	39405326 	beq	r7,r5,200903fc <_free_r+0x19c>
200902b0:	28c00115 	stw	r3,4(r5)
200902b4:	2100004c 	andi	r4,r4,1
200902b8:	2000091e 	bne	r4,zero,200902e0 <_free_r+0x80>
200902bc:	81fffe17 	ldw	r7,-8(r16)
200902c0:	4a000204 	addi	r8,r9,8
200902c4:	31cdc83a 	sub	r6,r6,r7
200902c8:	31000217 	ldw	r4,8(r6)
200902cc:	11c5883a 	add	r2,r2,r7
200902d0:	22006126 	beq	r4,r8,20090458 <_free_r+0x1f8>
200902d4:	31c00317 	ldw	r7,12(r6)
200902d8:	21c00315 	stw	r7,12(r4)
200902dc:	39000215 	stw	r4,8(r7)
200902e0:	28c9883a 	add	r4,r5,r3
200902e4:	21c00117 	ldw	r7,4(r4)
200902e8:	39c0004c 	andi	r7,r7,1
200902ec:	38000d1e 	bne	r7,zero,20090324 <_free_r+0xc4>
200902f0:	29000217 	ldw	r4,8(r5)
200902f4:	10c5883a 	add	r2,r2,r3
200902f8:	00c00034 	movhi	r3,0
200902fc:	18c21c04 	addi	r3,r3,2160
20090300:	20c07526 	beq	r4,r3,200904d8 <_free_r+0x278>
20090304:	29c00317 	ldw	r7,12(r5)
20090308:	11400054 	ori	r5,r2,1
2009030c:	3087883a 	add	r3,r6,r2
20090310:	21c00315 	stw	r7,12(r4)
20090314:	39000215 	stw	r4,8(r7)
20090318:	31400115 	stw	r5,4(r6)
2009031c:	18800015 	stw	r2,0(r3)
20090320:	00000406 	br	20090334 <_free_r+0xd4>
20090324:	10c00054 	ori	r3,r2,1
20090328:	30c00115 	stw	r3,4(r6)
2009032c:	3087883a 	add	r3,r6,r2
20090330:	18800015 	stw	r2,0(r3)
20090334:	00c07fc4 	movi	r3,511
20090338:	18801736 	bltu	r3,r2,20090398 <_free_r+0x138>
2009033c:	1004d0fa 	srli	r2,r2,3
20090340:	01400044 	movi	r5,1
20090344:	49000117 	ldw	r4,4(r9)
20090348:	1087883a 	add	r3,r2,r2
2009034c:	18c7883a 	add	r3,r3,r3
20090350:	1005d0ba 	srai	r2,r2,2
20090354:	18c7883a 	add	r3,r3,r3
20090358:	1a47883a 	add	r3,r3,r9
2009035c:	19c00217 	ldw	r7,8(r3)
20090360:	2884983a 	sll	r2,r5,r2
20090364:	30c00315 	stw	r3,12(r6)
20090368:	31c00215 	stw	r7,8(r6)
2009036c:	1104b03a 	or	r2,r2,r4
20090370:	19800215 	stw	r6,8(r3)
20090374:	48800115 	stw	r2,4(r9)
20090378:	39800315 	stw	r6,12(r7)
2009037c:	8809883a 	mov	r4,r17
20090380:	dfc00217 	ldw	ra,8(sp)
20090384:	dc400117 	ldw	r17,4(sp)
20090388:	dc000017 	ldw	r16,0(sp)
2009038c:	dec00304 	addi	sp,sp,12
20090390:	009735c1 	jmpi	2009735c <__malloc_unlock>
20090394:	f800283a 	ret
20090398:	1006d27a 	srli	r3,r2,9
2009039c:	01000104 	movi	r4,4
200903a0:	20c04036 	bltu	r4,r3,200904a4 <_free_r+0x244>
200903a4:	1006d1ba 	srli	r3,r2,6
200903a8:	19400e04 	addi	r5,r3,56
200903ac:	2947883a 	add	r3,r5,r5
200903b0:	18c7883a 	add	r3,r3,r3
200903b4:	18c7883a 	add	r3,r3,r3
200903b8:	1a49883a 	add	r4,r3,r9
200903bc:	20c00217 	ldw	r3,8(r4)
200903c0:	01c00034 	movhi	r7,0
200903c4:	39c21a04 	addi	r7,r7,2152
200903c8:	19003b26 	beq	r3,r4,200904b8 <_free_r+0x258>
200903cc:	01ffff04 	movi	r7,-4
200903d0:	19400117 	ldw	r5,4(r3)
200903d4:	29ca703a 	and	r5,r5,r7
200903d8:	1140022e 	bgeu	r2,r5,200903e4 <_free_r+0x184>
200903dc:	18c00217 	ldw	r3,8(r3)
200903e0:	20fffb1e 	bne	r4,r3,200903d0 <__flash_rwdata_start+0xffff424c>
200903e4:	18800317 	ldw	r2,12(r3)
200903e8:	30800315 	stw	r2,12(r6)
200903ec:	30c00215 	stw	r3,8(r6)
200903f0:	11800215 	stw	r6,8(r2)
200903f4:	19800315 	stw	r6,12(r3)
200903f8:	003fe006 	br	2009037c <__flash_rwdata_start+0xffff41f8>
200903fc:	2100004c 	andi	r4,r4,1
20090400:	1885883a 	add	r2,r3,r2
20090404:	2000071e 	bne	r4,zero,20090424 <_free_r+0x1c4>
20090408:	817ffe17 	ldw	r5,-8(r16)
2009040c:	314dc83a 	sub	r6,r6,r5
20090410:	30c00317 	ldw	r3,12(r6)
20090414:	31000217 	ldw	r4,8(r6)
20090418:	1145883a 	add	r2,r2,r5
2009041c:	20c00315 	stw	r3,12(r4)
20090420:	19000215 	stw	r4,8(r3)
20090424:	10c00054 	ori	r3,r2,1
20090428:	30c00115 	stw	r3,4(r6)
2009042c:	00c00034 	movhi	r3,0
20090430:	18c8de04 	addi	r3,r3,9080
20090434:	18c00017 	ldw	r3,0(r3)
20090438:	49800215 	stw	r6,8(r9)
2009043c:	10ffcf36 	bltu	r2,r3,2009037c <__flash_rwdata_start+0xffff41f8>
20090440:	00800034 	movhi	r2,0
20090444:	1088f404 	addi	r2,r2,9168
20090448:	11400017 	ldw	r5,0(r2)
2009044c:	8809883a 	mov	r4,r17
20090450:	009013c0 	call	2009013c <_malloc_trim_r>
20090454:	003fc906 	br	2009037c <__flash_rwdata_start+0xffff41f8>
20090458:	28c9883a 	add	r4,r5,r3
2009045c:	21000117 	ldw	r4,4(r4)
20090460:	2100004c 	andi	r4,r4,1
20090464:	20000a1e 	bne	r4,zero,20090490 <_free_r+0x230>
20090468:	29000317 	ldw	r4,12(r5)
2009046c:	29400217 	ldw	r5,8(r5)
20090470:	10c5883a 	add	r2,r2,r3
20090474:	10c00054 	ori	r3,r2,1
20090478:	29000315 	stw	r4,12(r5)
2009047c:	21400215 	stw	r5,8(r4)
20090480:	30c00115 	stw	r3,4(r6)
20090484:	308d883a 	add	r6,r6,r2
20090488:	30800015 	stw	r2,0(r6)
2009048c:	003fbb06 	br	2009037c <__flash_rwdata_start+0xffff41f8>
20090490:	10c00054 	ori	r3,r2,1
20090494:	30c00115 	stw	r3,4(r6)
20090498:	308d883a 	add	r6,r6,r2
2009049c:	30800015 	stw	r2,0(r6)
200904a0:	003fb606 	br	2009037c <__flash_rwdata_start+0xffff41f8>
200904a4:	01000504 	movi	r4,20
200904a8:	20c01436 	bltu	r4,r3,200904fc <_free_r+0x29c>
200904ac:	194016c4 	addi	r5,r3,91
200904b0:	2947883a 	add	r3,r5,r5
200904b4:	003fbe06 	br	200903b0 <__flash_rwdata_start+0xffff422c>
200904b8:	280bd0ba 	srai	r5,r5,2
200904bc:	00800044 	movi	r2,1
200904c0:	39000117 	ldw	r4,4(r7)
200904c4:	114a983a 	sll	r5,r2,r5
200904c8:	1805883a 	mov	r2,r3
200904cc:	2908b03a 	or	r4,r5,r4
200904d0:	39000115 	stw	r4,4(r7)
200904d4:	003fc406 	br	200903e8 <__flash_rwdata_start+0xffff4264>
200904d8:	49800515 	stw	r6,20(r9)
200904dc:	49800415 	stw	r6,16(r9)
200904e0:	10c00054 	ori	r3,r2,1
200904e4:	31000315 	stw	r4,12(r6)
200904e8:	31000215 	stw	r4,8(r6)
200904ec:	30c00115 	stw	r3,4(r6)
200904f0:	308d883a 	add	r6,r6,r2
200904f4:	30800015 	stw	r2,0(r6)
200904f8:	003fa006 	br	2009037c <__flash_rwdata_start+0xffff41f8>
200904fc:	01001504 	movi	r4,84
20090500:	20c00436 	bltu	r4,r3,20090514 <_free_r+0x2b4>
20090504:	1006d33a 	srli	r3,r2,12
20090508:	19401b84 	addi	r5,r3,110
2009050c:	2947883a 	add	r3,r5,r5
20090510:	003fa706 	br	200903b0 <__flash_rwdata_start+0xffff422c>
20090514:	01005504 	movi	r4,340
20090518:	20c00436 	bltu	r4,r3,2009052c <_free_r+0x2cc>
2009051c:	1006d3fa 	srli	r3,r2,15
20090520:	19401dc4 	addi	r5,r3,119
20090524:	2947883a 	add	r3,r5,r5
20090528:	003fa106 	br	200903b0 <__flash_rwdata_start+0xffff422c>
2009052c:	01015504 	movi	r4,1364
20090530:	20c00436 	bltu	r4,r3,20090544 <_free_r+0x2e4>
20090534:	1006d4ba 	srli	r3,r2,18
20090538:	19401f04 	addi	r5,r3,124
2009053c:	2947883a 	add	r3,r5,r5
20090540:	003f9b06 	br	200903b0 <__flash_rwdata_start+0xffff422c>
20090544:	00c03f04 	movi	r3,252
20090548:	01401f84 	movi	r5,126
2009054c:	003f9806 	br	200903b0 <__flash_rwdata_start+0xffff422c>

20090550 <__sfvwrite_r>:
20090550:	30800217 	ldw	r2,8(r6)
20090554:	10006726 	beq	r2,zero,200906f4 <__sfvwrite_r+0x1a4>
20090558:	defff404 	addi	sp,sp,-48
2009055c:	dd000615 	stw	r20,24(sp)
20090560:	2029883a 	mov	r20,r4
20090564:	2900030b 	ldhu	r4,12(r5)
20090568:	ddc00915 	stw	r23,36(sp)
2009056c:	dc000215 	stw	r16,8(sp)
20090570:	dfc00b15 	stw	ra,44(sp)
20090574:	df000a15 	stw	fp,40(sp)
20090578:	dd800815 	stw	r22,32(sp)
2009057c:	dd400715 	stw	r21,28(sp)
20090580:	dcc00515 	stw	r19,20(sp)
20090584:	dc800415 	stw	r18,16(sp)
20090588:	dc400315 	stw	r17,12(sp)
2009058c:	2080020c 	andi	r2,r4,8
20090590:	2821883a 	mov	r16,r5
20090594:	302f883a 	mov	r23,r6
20090598:	10002726 	beq	r2,zero,20090638 <__sfvwrite_r+0xe8>
2009059c:	28800417 	ldw	r2,16(r5)
200905a0:	10002526 	beq	r2,zero,20090638 <__sfvwrite_r+0xe8>
200905a4:	2080008c 	andi	r2,r4,2
200905a8:	bc400017 	ldw	r17,0(r23)
200905ac:	10002a26 	beq	r2,zero,20090658 <__sfvwrite_r+0x108>
200905b0:	05600034 	movhi	r21,32768
200905b4:	0027883a 	mov	r19,zero
200905b8:	0025883a 	mov	r18,zero
200905bc:	ad7f0004 	addi	r21,r21,-1024
200905c0:	980d883a 	mov	r6,r19
200905c4:	a009883a 	mov	r4,r20
200905c8:	90004626 	beq	r18,zero,200906e4 <__sfvwrite_r+0x194>
200905cc:	900f883a 	mov	r7,r18
200905d0:	81400717 	ldw	r5,28(r16)
200905d4:	ac80022e 	bgeu	r21,r18,200905e0 <__sfvwrite_r+0x90>
200905d8:	01e00034 	movhi	r7,32768
200905dc:	39ff0004 	addi	r7,r7,-1024
200905e0:	80800917 	ldw	r2,36(r16)
200905e4:	103ee83a 	callr	r2
200905e8:	0080520e 	bge	zero,r2,20090734 <__sfvwrite_r+0x1e4>
200905ec:	b8c00217 	ldw	r3,8(r23)
200905f0:	98a7883a 	add	r19,r19,r2
200905f4:	90a5c83a 	sub	r18,r18,r2
200905f8:	1885c83a 	sub	r2,r3,r2
200905fc:	b8800215 	stw	r2,8(r23)
20090600:	103fef1e 	bne	r2,zero,200905c0 <__flash_rwdata_start+0xffff443c>
20090604:	0005883a 	mov	r2,zero
20090608:	dfc00b17 	ldw	ra,44(sp)
2009060c:	df000a17 	ldw	fp,40(sp)
20090610:	ddc00917 	ldw	r23,36(sp)
20090614:	dd800817 	ldw	r22,32(sp)
20090618:	dd400717 	ldw	r21,28(sp)
2009061c:	dd000617 	ldw	r20,24(sp)
20090620:	dcc00517 	ldw	r19,20(sp)
20090624:	dc800417 	ldw	r18,16(sp)
20090628:	dc400317 	ldw	r17,12(sp)
2009062c:	dc000217 	ldw	r16,8(sp)
20090630:	dec00c04 	addi	sp,sp,48
20090634:	f800283a 	ret
20090638:	a009883a 	mov	r4,r20
2009063c:	800b883a 	mov	r5,r16
20090640:	008e08c0 	call	2008e08c <__swsetup_r>
20090644:	1000ec1e 	bne	r2,zero,200909f8 <__sfvwrite_r+0x4a8>
20090648:	8100030b 	ldhu	r4,12(r16)
2009064c:	bc400017 	ldw	r17,0(r23)
20090650:	2080008c 	andi	r2,r4,2
20090654:	103fd61e 	bne	r2,zero,200905b0 <__flash_rwdata_start+0xffff442c>
20090658:	2080004c 	andi	r2,r4,1
2009065c:	10003a1e 	bne	r2,zero,20090748 <__sfvwrite_r+0x1f8>
20090660:	0039883a 	mov	fp,zero
20090664:	0025883a 	mov	r18,zero
20090668:	90001a26 	beq	r18,zero,200906d4 <__sfvwrite_r+0x184>
2009066c:	2080800c 	andi	r2,r4,512
20090670:	85800217 	ldw	r22,8(r16)
20090674:	10007626 	beq	r2,zero,20090850 <__sfvwrite_r+0x300>
20090678:	b027883a 	mov	r19,r22
2009067c:	95809436 	bltu	r18,r22,200908d0 <__sfvwrite_r+0x380>
20090680:	2081200c 	andi	r2,r4,1152
20090684:	10009f1e 	bne	r2,zero,20090904 <__sfvwrite_r+0x3b4>
20090688:	81000017 	ldw	r4,0(r16)
2009068c:	e00b883a 	mov	r5,fp
20090690:	980d883a 	mov	r6,r19
20090694:	0090f180 	call	20090f18 <memmove>
20090698:	81000217 	ldw	r4,8(r16)
2009069c:	81400017 	ldw	r5,0(r16)
200906a0:	9005883a 	mov	r2,r18
200906a4:	2587c83a 	sub	r3,r4,r22
200906a8:	2ce7883a 	add	r19,r5,r19
200906ac:	80c00215 	stw	r3,8(r16)
200906b0:	84c00015 	stw	r19,0(r16)
200906b4:	b8c00217 	ldw	r3,8(r23)
200906b8:	e0b9883a 	add	fp,fp,r2
200906bc:	90a5c83a 	sub	r18,r18,r2
200906c0:	1885c83a 	sub	r2,r3,r2
200906c4:	b8800215 	stw	r2,8(r23)
200906c8:	103fce26 	beq	r2,zero,20090604 <__flash_rwdata_start+0xffff4480>
200906cc:	8100030b 	ldhu	r4,12(r16)
200906d0:	903fe61e 	bne	r18,zero,2009066c <__flash_rwdata_start+0xffff44e8>
200906d4:	8f000017 	ldw	fp,0(r17)
200906d8:	8c800117 	ldw	r18,4(r17)
200906dc:	8c400204 	addi	r17,r17,8
200906e0:	003fe106 	br	20090668 <__flash_rwdata_start+0xffff44e4>
200906e4:	8cc00017 	ldw	r19,0(r17)
200906e8:	8c800117 	ldw	r18,4(r17)
200906ec:	8c400204 	addi	r17,r17,8
200906f0:	003fb306 	br	200905c0 <__flash_rwdata_start+0xffff443c>
200906f4:	0005883a 	mov	r2,zero
200906f8:	f800283a 	ret
200906fc:	00a00034 	movhi	r2,32768
20090700:	10bfffc4 	addi	r2,r2,-1
20090704:	9009883a 	mov	r4,r18
20090708:	1480012e 	bgeu	r2,r18,20090710 <__sfvwrite_r+0x1c0>
2009070c:	1009883a 	mov	r4,r2
20090710:	980b883a 	mov	r5,r19
20090714:	00865c00 	call	200865c0 <__divsi3>
20090718:	81400717 	ldw	r5,28(r16)
2009071c:	80c00917 	ldw	r3,36(r16)
20090720:	988f383a 	mul	r7,r19,r2
20090724:	a009883a 	mov	r4,r20
20090728:	e00d883a 	mov	r6,fp
2009072c:	183ee83a 	callr	r3
20090730:	00bfe016 	blt	zero,r2,200906b4 <__flash_rwdata_start+0xffff4530>
20090734:	8080030b 	ldhu	r2,12(r16)
20090738:	10801014 	ori	r2,r2,64
2009073c:	8080030d 	sth	r2,12(r16)
20090740:	00bfffc4 	movi	r2,-1
20090744:	003fb006 	br	20090608 <__flash_rwdata_start+0xffff4484>
20090748:	0027883a 	mov	r19,zero
2009074c:	0011883a 	mov	r8,zero
20090750:	0039883a 	mov	fp,zero
20090754:	0025883a 	mov	r18,zero
20090758:	90001f26 	beq	r18,zero,200907d8 <__sfvwrite_r+0x288>
2009075c:	40006026 	beq	r8,zero,200908e0 <__sfvwrite_r+0x390>
20090760:	982b883a 	mov	r21,r19
20090764:	94c0012e 	bgeu	r18,r19,2009076c <__sfvwrite_r+0x21c>
20090768:	902b883a 	mov	r21,r18
2009076c:	81000017 	ldw	r4,0(r16)
20090770:	80800417 	ldw	r2,16(r16)
20090774:	a82d883a 	mov	r22,r21
20090778:	81800217 	ldw	r6,8(r16)
2009077c:	81c00517 	ldw	r7,20(r16)
20090780:	1100022e 	bgeu	r2,r4,2009078c <__sfvwrite_r+0x23c>
20090784:	31c7883a 	add	r3,r6,r7
20090788:	1d401816 	blt	r3,r21,200907ec <__sfvwrite_r+0x29c>
2009078c:	a9c04416 	blt	r21,r7,200908a0 <__sfvwrite_r+0x350>
20090790:	80800917 	ldw	r2,36(r16)
20090794:	81400717 	ldw	r5,28(r16)
20090798:	a009883a 	mov	r4,r20
2009079c:	da000115 	stw	r8,4(sp)
200907a0:	e00d883a 	mov	r6,fp
200907a4:	103ee83a 	callr	r2
200907a8:	102d883a 	mov	r22,r2
200907ac:	da000117 	ldw	r8,4(sp)
200907b0:	00bfe00e 	bge	zero,r2,20090734 <__flash_rwdata_start+0xffff45b0>
200907b4:	9da7c83a 	sub	r19,r19,r22
200907b8:	98001f26 	beq	r19,zero,20090838 <__sfvwrite_r+0x2e8>
200907bc:	b8800217 	ldw	r2,8(r23)
200907c0:	e5b9883a 	add	fp,fp,r22
200907c4:	95a5c83a 	sub	r18,r18,r22
200907c8:	15adc83a 	sub	r22,r2,r22
200907cc:	bd800215 	stw	r22,8(r23)
200907d0:	b03f8c26 	beq	r22,zero,20090604 <__flash_rwdata_start+0xffff4480>
200907d4:	903fe11e 	bne	r18,zero,2009075c <__flash_rwdata_start+0xffff45d8>
200907d8:	8f000017 	ldw	fp,0(r17)
200907dc:	8c800117 	ldw	r18,4(r17)
200907e0:	0011883a 	mov	r8,zero
200907e4:	8c400204 	addi	r17,r17,8
200907e8:	003fdb06 	br	20090758 <__flash_rwdata_start+0xffff45d4>
200907ec:	180d883a 	mov	r6,r3
200907f0:	e00b883a 	mov	r5,fp
200907f4:	da000115 	stw	r8,4(sp)
200907f8:	d8c00015 	stw	r3,0(sp)
200907fc:	0090f180 	call	20090f18 <memmove>
20090800:	d8c00017 	ldw	r3,0(sp)
20090804:	80800017 	ldw	r2,0(r16)
20090808:	a009883a 	mov	r4,r20
2009080c:	800b883a 	mov	r5,r16
20090810:	10c5883a 	add	r2,r2,r3
20090814:	80800015 	stw	r2,0(r16)
20090818:	d8c00015 	stw	r3,0(sp)
2009081c:	008fd100 	call	2008fd10 <_fflush_r>
20090820:	d8c00017 	ldw	r3,0(sp)
20090824:	da000117 	ldw	r8,4(sp)
20090828:	103fc21e 	bne	r2,zero,20090734 <__flash_rwdata_start+0xffff45b0>
2009082c:	182d883a 	mov	r22,r3
20090830:	9da7c83a 	sub	r19,r19,r22
20090834:	983fe11e 	bne	r19,zero,200907bc <__flash_rwdata_start+0xffff4638>
20090838:	a009883a 	mov	r4,r20
2009083c:	800b883a 	mov	r5,r16
20090840:	008fd100 	call	2008fd10 <_fflush_r>
20090844:	103fbb1e 	bne	r2,zero,20090734 <__flash_rwdata_start+0xffff45b0>
20090848:	0011883a 	mov	r8,zero
2009084c:	003fdb06 	br	200907bc <__flash_rwdata_start+0xffff4638>
20090850:	81000017 	ldw	r4,0(r16)
20090854:	80800417 	ldw	r2,16(r16)
20090858:	11000236 	bltu	r2,r4,20090864 <__sfvwrite_r+0x314>
2009085c:	84c00517 	ldw	r19,20(r16)
20090860:	94ffa62e 	bgeu	r18,r19,200906fc <__flash_rwdata_start+0xffff4578>
20090864:	9027883a 	mov	r19,r18
20090868:	b480012e 	bgeu	r22,r18,20090870 <__sfvwrite_r+0x320>
2009086c:	b027883a 	mov	r19,r22
20090870:	e00b883a 	mov	r5,fp
20090874:	980d883a 	mov	r6,r19
20090878:	0090f180 	call	20090f18 <memmove>
2009087c:	80800217 	ldw	r2,8(r16)
20090880:	80c00017 	ldw	r3,0(r16)
20090884:	14c5c83a 	sub	r2,r2,r19
20090888:	1cc7883a 	add	r3,r3,r19
2009088c:	80800215 	stw	r2,8(r16)
20090890:	80c00015 	stw	r3,0(r16)
20090894:	10004326 	beq	r2,zero,200909a4 <__sfvwrite_r+0x454>
20090898:	9805883a 	mov	r2,r19
2009089c:	003f8506 	br	200906b4 <__flash_rwdata_start+0xffff4530>
200908a0:	a80d883a 	mov	r6,r21
200908a4:	e00b883a 	mov	r5,fp
200908a8:	da000115 	stw	r8,4(sp)
200908ac:	0090f180 	call	20090f18 <memmove>
200908b0:	80800217 	ldw	r2,8(r16)
200908b4:	80c00017 	ldw	r3,0(r16)
200908b8:	da000117 	ldw	r8,4(sp)
200908bc:	1545c83a 	sub	r2,r2,r21
200908c0:	1d6b883a 	add	r21,r3,r21
200908c4:	80800215 	stw	r2,8(r16)
200908c8:	85400015 	stw	r21,0(r16)
200908cc:	003fb906 	br	200907b4 <__flash_rwdata_start+0xffff4630>
200908d0:	81000017 	ldw	r4,0(r16)
200908d4:	902d883a 	mov	r22,r18
200908d8:	9027883a 	mov	r19,r18
200908dc:	003f6b06 	br	2009068c <__flash_rwdata_start+0xffff4508>
200908e0:	e009883a 	mov	r4,fp
200908e4:	01400284 	movi	r5,10
200908e8:	900d883a 	mov	r6,r18
200908ec:	0090e300 	call	20090e30 <memchr>
200908f0:	10003e26 	beq	r2,zero,200909ec <__sfvwrite_r+0x49c>
200908f4:	10800044 	addi	r2,r2,1
200908f8:	1727c83a 	sub	r19,r2,fp
200908fc:	02000044 	movi	r8,1
20090900:	003f9706 	br	20090760 <__flash_rwdata_start+0xffff45dc>
20090904:	80800517 	ldw	r2,20(r16)
20090908:	81400417 	ldw	r5,16(r16)
2009090c:	80c00017 	ldw	r3,0(r16)
20090910:	10a7883a 	add	r19,r2,r2
20090914:	9885883a 	add	r2,r19,r2
20090918:	1026d7fa 	srli	r19,r2,31
2009091c:	196bc83a 	sub	r21,r3,r5
20090920:	a9800044 	addi	r6,r21,1
20090924:	9885883a 	add	r2,r19,r2
20090928:	1027d07a 	srai	r19,r2,1
2009092c:	3485883a 	add	r2,r6,r18
20090930:	980d883a 	mov	r6,r19
20090934:	9880022e 	bgeu	r19,r2,20090940 <__sfvwrite_r+0x3f0>
20090938:	1027883a 	mov	r19,r2
2009093c:	100d883a 	mov	r6,r2
20090940:	2101000c 	andi	r4,r4,1024
20090944:	20001c26 	beq	r4,zero,200909b8 <__sfvwrite_r+0x468>
20090948:	a009883a 	mov	r4,r20
2009094c:	300b883a 	mov	r5,r6
20090950:	008913c0 	call	2008913c <_malloc_r>
20090954:	102d883a 	mov	r22,r2
20090958:	10002926 	beq	r2,zero,20090a00 <__sfvwrite_r+0x4b0>
2009095c:	81400417 	ldw	r5,16(r16)
20090960:	1009883a 	mov	r4,r2
20090964:	a80d883a 	mov	r6,r21
20090968:	00899600 	call	20089960 <memcpy>
2009096c:	8080030b 	ldhu	r2,12(r16)
20090970:	00fedfc4 	movi	r3,-1153
20090974:	10c4703a 	and	r2,r2,r3
20090978:	10802014 	ori	r2,r2,128
2009097c:	8080030d 	sth	r2,12(r16)
20090980:	b549883a 	add	r4,r22,r21
20090984:	9d4bc83a 	sub	r5,r19,r21
20090988:	85800415 	stw	r22,16(r16)
2009098c:	84c00515 	stw	r19,20(r16)
20090990:	81000015 	stw	r4,0(r16)
20090994:	902d883a 	mov	r22,r18
20090998:	81400215 	stw	r5,8(r16)
2009099c:	9027883a 	mov	r19,r18
200909a0:	003f3a06 	br	2009068c <__flash_rwdata_start+0xffff4508>
200909a4:	a009883a 	mov	r4,r20
200909a8:	800b883a 	mov	r5,r16
200909ac:	008fd100 	call	2008fd10 <_fflush_r>
200909b0:	103fb926 	beq	r2,zero,20090898 <__flash_rwdata_start+0xffff4714>
200909b4:	003f5f06 	br	20090734 <__flash_rwdata_start+0xffff45b0>
200909b8:	a009883a 	mov	r4,r20
200909bc:	00920140 	call	20092014 <_realloc_r>
200909c0:	102d883a 	mov	r22,r2
200909c4:	103fee1e 	bne	r2,zero,20090980 <__flash_rwdata_start+0xffff47fc>
200909c8:	81400417 	ldw	r5,16(r16)
200909cc:	a009883a 	mov	r4,r20
200909d0:	00902600 	call	20090260 <_free_r>
200909d4:	8080030b 	ldhu	r2,12(r16)
200909d8:	00ffdfc4 	movi	r3,-129
200909dc:	1884703a 	and	r2,r3,r2
200909e0:	00c00304 	movi	r3,12
200909e4:	a0c00015 	stw	r3,0(r20)
200909e8:	003f5306 	br	20090738 <__flash_rwdata_start+0xffff45b4>
200909ec:	94c00044 	addi	r19,r18,1
200909f0:	02000044 	movi	r8,1
200909f4:	003f5a06 	br	20090760 <__flash_rwdata_start+0xffff45dc>
200909f8:	00bfffc4 	movi	r2,-1
200909fc:	003f0206 	br	20090608 <__flash_rwdata_start+0xffff4484>
20090a00:	00800304 	movi	r2,12
20090a04:	a0800015 	stw	r2,0(r20)
20090a08:	8080030b 	ldhu	r2,12(r16)
20090a0c:	003f4a06 	br	20090738 <__flash_rwdata_start+0xffff45b4>

20090a10 <_fwalk>:
20090a10:	defff704 	addi	sp,sp,-36
20090a14:	dd000415 	stw	r20,16(sp)
20090a18:	dfc00815 	stw	ra,32(sp)
20090a1c:	ddc00715 	stw	r23,28(sp)
20090a20:	dd800615 	stw	r22,24(sp)
20090a24:	dd400515 	stw	r21,20(sp)
20090a28:	dcc00315 	stw	r19,12(sp)
20090a2c:	dc800215 	stw	r18,8(sp)
20090a30:	dc400115 	stw	r17,4(sp)
20090a34:	dc000015 	stw	r16,0(sp)
20090a38:	2500b804 	addi	r20,r4,736
20090a3c:	a0002326 	beq	r20,zero,20090acc <_fwalk+0xbc>
20090a40:	282b883a 	mov	r21,r5
20090a44:	002f883a 	mov	r23,zero
20090a48:	05800044 	movi	r22,1
20090a4c:	04ffffc4 	movi	r19,-1
20090a50:	a4400117 	ldw	r17,4(r20)
20090a54:	a4800217 	ldw	r18,8(r20)
20090a58:	8c7fffc4 	addi	r17,r17,-1
20090a5c:	88000d16 	blt	r17,zero,20090a94 <_fwalk+0x84>
20090a60:	94000304 	addi	r16,r18,12
20090a64:	94800384 	addi	r18,r18,14
20090a68:	80c0000b 	ldhu	r3,0(r16)
20090a6c:	8c7fffc4 	addi	r17,r17,-1
20090a70:	813ffd04 	addi	r4,r16,-12
20090a74:	b0c0042e 	bgeu	r22,r3,20090a88 <_fwalk+0x78>
20090a78:	90c0000f 	ldh	r3,0(r18)
20090a7c:	1cc00226 	beq	r3,r19,20090a88 <_fwalk+0x78>
20090a80:	a83ee83a 	callr	r21
20090a84:	b8aeb03a 	or	r23,r23,r2
20090a88:	84001a04 	addi	r16,r16,104
20090a8c:	94801a04 	addi	r18,r18,104
20090a90:	8cfff51e 	bne	r17,r19,20090a68 <__flash_rwdata_start+0xffff48e4>
20090a94:	a5000017 	ldw	r20,0(r20)
20090a98:	a03fed1e 	bne	r20,zero,20090a50 <__flash_rwdata_start+0xffff48cc>
20090a9c:	b805883a 	mov	r2,r23
20090aa0:	dfc00817 	ldw	ra,32(sp)
20090aa4:	ddc00717 	ldw	r23,28(sp)
20090aa8:	dd800617 	ldw	r22,24(sp)
20090aac:	dd400517 	ldw	r21,20(sp)
20090ab0:	dd000417 	ldw	r20,16(sp)
20090ab4:	dcc00317 	ldw	r19,12(sp)
20090ab8:	dc800217 	ldw	r18,8(sp)
20090abc:	dc400117 	ldw	r17,4(sp)
20090ac0:	dc000017 	ldw	r16,0(sp)
20090ac4:	dec00904 	addi	sp,sp,36
20090ac8:	f800283a 	ret
20090acc:	002f883a 	mov	r23,zero
20090ad0:	003ff206 	br	20090a9c <__flash_rwdata_start+0xffff4918>

20090ad4 <_fwalk_reent>:
20090ad4:	defff704 	addi	sp,sp,-36
20090ad8:	dd400515 	stw	r21,20(sp)
20090adc:	dfc00815 	stw	ra,32(sp)
20090ae0:	ddc00715 	stw	r23,28(sp)
20090ae4:	dd800615 	stw	r22,24(sp)
20090ae8:	dd000415 	stw	r20,16(sp)
20090aec:	dcc00315 	stw	r19,12(sp)
20090af0:	dc800215 	stw	r18,8(sp)
20090af4:	dc400115 	stw	r17,4(sp)
20090af8:	dc000015 	stw	r16,0(sp)
20090afc:	2540b804 	addi	r21,r4,736
20090b00:	a8002326 	beq	r21,zero,20090b90 <_fwalk_reent+0xbc>
20090b04:	2829883a 	mov	r20,r5
20090b08:	202d883a 	mov	r22,r4
20090b0c:	002f883a 	mov	r23,zero
20090b10:	04c00044 	movi	r19,1
20090b14:	04bfffc4 	movi	r18,-1
20090b18:	ac400117 	ldw	r17,4(r21)
20090b1c:	ac000217 	ldw	r16,8(r21)
20090b20:	8c7fffc4 	addi	r17,r17,-1
20090b24:	88000c16 	blt	r17,zero,20090b58 <_fwalk_reent+0x84>
20090b28:	84000304 	addi	r16,r16,12
20090b2c:	80c0000b 	ldhu	r3,0(r16)
20090b30:	8c7fffc4 	addi	r17,r17,-1
20090b34:	817ffd04 	addi	r5,r16,-12
20090b38:	98c0052e 	bgeu	r19,r3,20090b50 <_fwalk_reent+0x7c>
20090b3c:	80c0008f 	ldh	r3,2(r16)
20090b40:	b009883a 	mov	r4,r22
20090b44:	1c800226 	beq	r3,r18,20090b50 <_fwalk_reent+0x7c>
20090b48:	a03ee83a 	callr	r20
20090b4c:	b8aeb03a 	or	r23,r23,r2
20090b50:	84001a04 	addi	r16,r16,104
20090b54:	8cbff51e 	bne	r17,r18,20090b2c <__flash_rwdata_start+0xffff49a8>
20090b58:	ad400017 	ldw	r21,0(r21)
20090b5c:	a83fee1e 	bne	r21,zero,20090b18 <__flash_rwdata_start+0xffff4994>
20090b60:	b805883a 	mov	r2,r23
20090b64:	dfc00817 	ldw	ra,32(sp)
20090b68:	ddc00717 	ldw	r23,28(sp)
20090b6c:	dd800617 	ldw	r22,24(sp)
20090b70:	dd400517 	ldw	r21,20(sp)
20090b74:	dd000417 	ldw	r20,16(sp)
20090b78:	dcc00317 	ldw	r19,12(sp)
20090b7c:	dc800217 	ldw	r18,8(sp)
20090b80:	dc400117 	ldw	r17,4(sp)
20090b84:	dc000017 	ldw	r16,0(sp)
20090b88:	dec00904 	addi	sp,sp,36
20090b8c:	f800283a 	ret
20090b90:	002f883a 	mov	r23,zero
20090b94:	003ff206 	br	20090b60 <__flash_rwdata_start+0xffff49dc>

20090b98 <_setlocale_r>:
20090b98:	30001b26 	beq	r6,zero,20090c08 <_setlocale_r+0x70>
20090b9c:	01400034 	movhi	r5,0
20090ba0:	defffe04 	addi	sp,sp,-8
20090ba4:	29412c04 	addi	r5,r5,1200
20090ba8:	3009883a 	mov	r4,r6
20090bac:	dc000015 	stw	r16,0(sp)
20090bb0:	dfc00115 	stw	ra,4(sp)
20090bb4:	3021883a 	mov	r16,r6
20090bb8:	0089df80 	call	20089df8 <strcmp>
20090bbc:	1000061e 	bne	r2,zero,20090bd8 <_setlocale_r+0x40>
20090bc0:	00800034 	movhi	r2,0
20090bc4:	10812b04 	addi	r2,r2,1196
20090bc8:	dfc00117 	ldw	ra,4(sp)
20090bcc:	dc000017 	ldw	r16,0(sp)
20090bd0:	dec00204 	addi	sp,sp,8
20090bd4:	f800283a 	ret
20090bd8:	01400034 	movhi	r5,0
20090bdc:	29412b04 	addi	r5,r5,1196
20090be0:	8009883a 	mov	r4,r16
20090be4:	0089df80 	call	20089df8 <strcmp>
20090be8:	103ff526 	beq	r2,zero,20090bc0 <__flash_rwdata_start+0xffff4a3c>
20090bec:	01400034 	movhi	r5,0
20090bf0:	29410e04 	addi	r5,r5,1080
20090bf4:	8009883a 	mov	r4,r16
20090bf8:	0089df80 	call	20089df8 <strcmp>
20090bfc:	103ff026 	beq	r2,zero,20090bc0 <__flash_rwdata_start+0xffff4a3c>
20090c00:	0005883a 	mov	r2,zero
20090c04:	003ff006 	br	20090bc8 <__flash_rwdata_start+0xffff4a44>
20090c08:	00800034 	movhi	r2,0
20090c0c:	10812b04 	addi	r2,r2,1196
20090c10:	f800283a 	ret

20090c14 <__locale_charset>:
20090c14:	00800034 	movhi	r2,0
20090c18:	10842d04 	addi	r2,r2,4276
20090c1c:	f800283a 	ret

20090c20 <__locale_mb_cur_max>:
20090c20:	00800034 	movhi	r2,0
20090c24:	1088e104 	addi	r2,r2,9092
20090c28:	10800017 	ldw	r2,0(r2)
20090c2c:	f800283a 	ret

20090c30 <__locale_msgcharset>:
20090c30:	00800034 	movhi	r2,0
20090c34:	10842504 	addi	r2,r2,4244
20090c38:	f800283a 	ret

20090c3c <__locale_cjk_lang>:
20090c3c:	0005883a 	mov	r2,zero
20090c40:	f800283a 	ret

20090c44 <_localeconv_r>:
20090c44:	00800034 	movhi	r2,0
20090c48:	10843504 	addi	r2,r2,4308
20090c4c:	f800283a 	ret

20090c50 <setlocale>:
20090c50:	00c00034 	movhi	r3,0
20090c54:	18c8e004 	addi	r3,r3,9088
20090c58:	2005883a 	mov	r2,r4
20090c5c:	19000017 	ldw	r4,0(r3)
20090c60:	280d883a 	mov	r6,r5
20090c64:	100b883a 	mov	r5,r2
20090c68:	0090b981 	jmpi	20090b98 <_setlocale_r>

20090c6c <localeconv>:
20090c6c:	00800034 	movhi	r2,0
20090c70:	10843504 	addi	r2,r2,4308
20090c74:	f800283a 	ret

20090c78 <__smakebuf_r>:
20090c78:	2880030b 	ldhu	r2,12(r5)
20090c7c:	10c0008c 	andi	r3,r2,2
20090c80:	1800401e 	bne	r3,zero,20090d84 <__smakebuf_r+0x10c>
20090c84:	deffec04 	addi	sp,sp,-80
20090c88:	dc000f15 	stw	r16,60(sp)
20090c8c:	2821883a 	mov	r16,r5
20090c90:	2940038f 	ldh	r5,14(r5)
20090c94:	dc401015 	stw	r17,64(sp)
20090c98:	dfc01315 	stw	ra,76(sp)
20090c9c:	dcc01215 	stw	r19,72(sp)
20090ca0:	dc801115 	stw	r18,68(sp)
20090ca4:	2023883a 	mov	r17,r4
20090ca8:	28001b16 	blt	r5,zero,20090d18 <__smakebuf_r+0xa0>
20090cac:	d80d883a 	mov	r6,sp
20090cb0:	00953b00 	call	200953b0 <_fstat_r>
20090cb4:	10001716 	blt	r2,zero,20090d14 <__smakebuf_r+0x9c>
20090cb8:	d8800117 	ldw	r2,4(sp)
20090cbc:	00e00014 	movui	r3,32768
20090cc0:	10bc000c 	andi	r2,r2,61440
20090cc4:	10c03726 	beq	r2,r3,20090da4 <__smakebuf_r+0x12c>
20090cc8:	80c0030b 	ldhu	r3,12(r16)
20090ccc:	18c20014 	ori	r3,r3,2048
20090cd0:	80c0030d 	sth	r3,12(r16)
20090cd4:	00c80004 	movi	r3,8192
20090cd8:	10c03c1e 	bne	r2,r3,20090dcc <__smakebuf_r+0x154>
20090cdc:	8140038f 	ldh	r5,14(r16)
20090ce0:	8809883a 	mov	r4,r17
20090ce4:	00954080 	call	20095408 <_isatty_r>
20090ce8:	10004e26 	beq	r2,zero,20090e24 <__smakebuf_r+0x1ac>
20090cec:	8080030b 	ldhu	r2,12(r16)
20090cf0:	04c00044 	movi	r19,1
20090cf4:	80c010c4 	addi	r3,r16,67
20090cf8:	14c4b03a 	or	r2,r2,r19
20090cfc:	8080030d 	sth	r2,12(r16)
20090d00:	80c00015 	stw	r3,0(r16)
20090d04:	80c00415 	stw	r3,16(r16)
20090d08:	84c00515 	stw	r19,20(r16)
20090d0c:	04810004 	movi	r18,1024
20090d10:	00000706 	br	20090d30 <__smakebuf_r+0xb8>
20090d14:	8080030b 	ldhu	r2,12(r16)
20090d18:	10c0200c 	andi	r3,r2,128
20090d1c:	18001f1e 	bne	r3,zero,20090d9c <__smakebuf_r+0x124>
20090d20:	04810004 	movi	r18,1024
20090d24:	10820014 	ori	r2,r2,2048
20090d28:	8080030d 	sth	r2,12(r16)
20090d2c:	0027883a 	mov	r19,zero
20090d30:	8809883a 	mov	r4,r17
20090d34:	900b883a 	mov	r5,r18
20090d38:	008913c0 	call	2008913c <_malloc_r>
20090d3c:	10002e26 	beq	r2,zero,20090df8 <__smakebuf_r+0x180>
20090d40:	80c0030b 	ldhu	r3,12(r16)
20090d44:	01080274 	movhi	r4,8201
20090d48:	213f6b04 	addi	r4,r4,-596
20090d4c:	89000f15 	stw	r4,60(r17)
20090d50:	18c02014 	ori	r3,r3,128
20090d54:	80c0030d 	sth	r3,12(r16)
20090d58:	80800015 	stw	r2,0(r16)
20090d5c:	80800415 	stw	r2,16(r16)
20090d60:	84800515 	stw	r18,20(r16)
20090d64:	98001c1e 	bne	r19,zero,20090dd8 <__smakebuf_r+0x160>
20090d68:	dfc01317 	ldw	ra,76(sp)
20090d6c:	dcc01217 	ldw	r19,72(sp)
20090d70:	dc801117 	ldw	r18,68(sp)
20090d74:	dc401017 	ldw	r17,64(sp)
20090d78:	dc000f17 	ldw	r16,60(sp)
20090d7c:	dec01404 	addi	sp,sp,80
20090d80:	f800283a 	ret
20090d84:	288010c4 	addi	r2,r5,67
20090d88:	28800015 	stw	r2,0(r5)
20090d8c:	28800415 	stw	r2,16(r5)
20090d90:	00800044 	movi	r2,1
20090d94:	28800515 	stw	r2,20(r5)
20090d98:	f800283a 	ret
20090d9c:	04801004 	movi	r18,64
20090da0:	003fe006 	br	20090d24 <__flash_rwdata_start+0xffff4ba0>
20090da4:	81000a17 	ldw	r4,40(r16)
20090da8:	00c80274 	movhi	r3,8201
20090dac:	18c9b204 	addi	r3,r3,9928
20090db0:	20ffc51e 	bne	r4,r3,20090cc8 <__flash_rwdata_start+0xffff4b44>
20090db4:	80c0030b 	ldhu	r3,12(r16)
20090db8:	01010004 	movi	r4,1024
20090dbc:	81001315 	stw	r4,76(r16)
20090dc0:	1906b03a 	or	r3,r3,r4
20090dc4:	80c0030d 	sth	r3,12(r16)
20090dc8:	003fc206 	br	20090cd4 <__flash_rwdata_start+0xffff4b50>
20090dcc:	0027883a 	mov	r19,zero
20090dd0:	04810004 	movi	r18,1024
20090dd4:	003fd606 	br	20090d30 <__flash_rwdata_start+0xffff4bac>
20090dd8:	8140038f 	ldh	r5,14(r16)
20090ddc:	8809883a 	mov	r4,r17
20090de0:	00954080 	call	20095408 <_isatty_r>
20090de4:	103fe026 	beq	r2,zero,20090d68 <__flash_rwdata_start+0xffff4be4>
20090de8:	8080030b 	ldhu	r2,12(r16)
20090dec:	10800054 	ori	r2,r2,1
20090df0:	8080030d 	sth	r2,12(r16)
20090df4:	003fdc06 	br	20090d68 <__flash_rwdata_start+0xffff4be4>
20090df8:	8080030b 	ldhu	r2,12(r16)
20090dfc:	10c0800c 	andi	r3,r2,512
20090e00:	183fd91e 	bne	r3,zero,20090d68 <__flash_rwdata_start+0xffff4be4>
20090e04:	10800094 	ori	r2,r2,2
20090e08:	80c010c4 	addi	r3,r16,67
20090e0c:	8080030d 	sth	r2,12(r16)
20090e10:	00800044 	movi	r2,1
20090e14:	80c00015 	stw	r3,0(r16)
20090e18:	80c00415 	stw	r3,16(r16)
20090e1c:	80800515 	stw	r2,20(r16)
20090e20:	003fd106 	br	20090d68 <__flash_rwdata_start+0xffff4be4>
20090e24:	04c00044 	movi	r19,1
20090e28:	04810004 	movi	r18,1024
20090e2c:	003fc006 	br	20090d30 <__flash_rwdata_start+0xffff4bac>

20090e30 <memchr>:
20090e30:	208000cc 	andi	r2,r4,3
20090e34:	280f883a 	mov	r7,r5
20090e38:	10003526 	beq	r2,zero,20090f10 <memchr+0xe0>
20090e3c:	30bfffc4 	addi	r2,r6,-1
20090e40:	30001b26 	beq	r6,zero,20090eb0 <memchr+0x80>
20090e44:	21800003 	ldbu	r6,0(r4)
20090e48:	28c03fcc 	andi	r3,r5,255
20090e4c:	30c01a26 	beq	r6,r3,20090eb8 <memchr+0x88>
20090e50:	180d883a 	mov	r6,r3
20090e54:	00000406 	br	20090e68 <memchr+0x38>
20090e58:	10001526 	beq	r2,zero,20090eb0 <memchr+0x80>
20090e5c:	20c00003 	ldbu	r3,0(r4)
20090e60:	10bfffc4 	addi	r2,r2,-1
20090e64:	19801426 	beq	r3,r6,20090eb8 <memchr+0x88>
20090e68:	21000044 	addi	r4,r4,1
20090e6c:	20c000cc 	andi	r3,r4,3
20090e70:	183ff91e 	bne	r3,zero,20090e58 <__flash_rwdata_start+0xffff4cd4>
20090e74:	024000c4 	movi	r9,3
20090e78:	48801136 	bltu	r9,r2,20090ec0 <memchr+0x90>
20090e7c:	10000c26 	beq	r2,zero,20090eb0 <memchr+0x80>
20090e80:	20c00003 	ldbu	r3,0(r4)
20090e84:	29403fcc 	andi	r5,r5,255
20090e88:	19400b26 	beq	r3,r5,20090eb8 <memchr+0x88>
20090e8c:	20c00044 	addi	r3,r4,1
20090e90:	2085883a 	add	r2,r4,r2
20090e94:	39803fcc 	andi	r6,r7,255
20090e98:	00000306 	br	20090ea8 <memchr+0x78>
20090e9c:	18c00044 	addi	r3,r3,1
20090ea0:	197fffc3 	ldbu	r5,-1(r3)
20090ea4:	29800426 	beq	r5,r6,20090eb8 <memchr+0x88>
20090ea8:	1809883a 	mov	r4,r3
20090eac:	18bffb1e 	bne	r3,r2,20090e9c <__flash_rwdata_start+0xffff4d18>
20090eb0:	0005883a 	mov	r2,zero
20090eb4:	f800283a 	ret
20090eb8:	2005883a 	mov	r2,r4
20090ebc:	f800283a 	ret
20090ec0:	28c03fcc 	andi	r3,r5,255
20090ec4:	1810923a 	slli	r8,r3,8
20090ec8:	02ffbff4 	movhi	r11,65279
20090ecc:	02a02074 	movhi	r10,32897
20090ed0:	40c6b03a 	or	r3,r8,r3
20090ed4:	1810943a 	slli	r8,r3,16
20090ed8:	5affbfc4 	addi	r11,r11,-257
20090edc:	52a02004 	addi	r10,r10,-32640
20090ee0:	40d0b03a 	or	r8,r8,r3
20090ee4:	20c00017 	ldw	r3,0(r4)
20090ee8:	40c6f03a 	xor	r3,r8,r3
20090eec:	1acd883a 	add	r6,r3,r11
20090ef0:	00c6303a 	nor	r3,zero,r3
20090ef4:	30c6703a 	and	r3,r6,r3
20090ef8:	1a86703a 	and	r3,r3,r10
20090efc:	183fdf1e 	bne	r3,zero,20090e7c <__flash_rwdata_start+0xffff4cf8>
20090f00:	10bfff04 	addi	r2,r2,-4
20090f04:	21000104 	addi	r4,r4,4
20090f08:	48bff636 	bltu	r9,r2,20090ee4 <__flash_rwdata_start+0xffff4d60>
20090f0c:	003fdb06 	br	20090e7c <__flash_rwdata_start+0xffff4cf8>
20090f10:	3005883a 	mov	r2,r6
20090f14:	003fd706 	br	20090e74 <__flash_rwdata_start+0xffff4cf0>

20090f18 <memmove>:
20090f18:	2005883a 	mov	r2,r4
20090f1c:	29000b2e 	bgeu	r5,r4,20090f4c <memmove+0x34>
20090f20:	298f883a 	add	r7,r5,r6
20090f24:	21c0092e 	bgeu	r4,r7,20090f4c <memmove+0x34>
20090f28:	2187883a 	add	r3,r4,r6
20090f2c:	198bc83a 	sub	r5,r3,r6
20090f30:	30004b26 	beq	r6,zero,20091060 <memmove+0x148>
20090f34:	39ffffc4 	addi	r7,r7,-1
20090f38:	39000003 	ldbu	r4,0(r7)
20090f3c:	18ffffc4 	addi	r3,r3,-1
20090f40:	19000005 	stb	r4,0(r3)
20090f44:	197ffb1e 	bne	r3,r5,20090f34 <__flash_rwdata_start+0xffff4db0>
20090f48:	f800283a 	ret
20090f4c:	00c003c4 	movi	r3,15
20090f50:	1980412e 	bgeu	r3,r6,20091058 <memmove+0x140>
20090f54:	1146b03a 	or	r3,r2,r5
20090f58:	18c000cc 	andi	r3,r3,3
20090f5c:	1800411e 	bne	r3,zero,20091064 <memmove+0x14c>
20090f60:	33fffc04 	addi	r15,r6,-16
20090f64:	781ed13a 	srli	r15,r15,4
20090f68:	28c00104 	addi	r3,r5,4
20090f6c:	13400104 	addi	r13,r2,4
20090f70:	781c913a 	slli	r14,r15,4
20090f74:	2b000204 	addi	r12,r5,8
20090f78:	12c00204 	addi	r11,r2,8
20090f7c:	73800504 	addi	r14,r14,20
20090f80:	2a800304 	addi	r10,r5,12
20090f84:	12400304 	addi	r9,r2,12
20090f88:	2b9d883a 	add	r14,r5,r14
20090f8c:	2811883a 	mov	r8,r5
20090f90:	100f883a 	mov	r7,r2
20090f94:	41000017 	ldw	r4,0(r8)
20090f98:	39c00404 	addi	r7,r7,16
20090f9c:	18c00404 	addi	r3,r3,16
20090fa0:	393ffc15 	stw	r4,-16(r7)
20090fa4:	193ffc17 	ldw	r4,-16(r3)
20090fa8:	6b400404 	addi	r13,r13,16
20090fac:	5ac00404 	addi	r11,r11,16
20090fb0:	693ffc15 	stw	r4,-16(r13)
20090fb4:	61000017 	ldw	r4,0(r12)
20090fb8:	4a400404 	addi	r9,r9,16
20090fbc:	42000404 	addi	r8,r8,16
20090fc0:	593ffc15 	stw	r4,-16(r11)
20090fc4:	51000017 	ldw	r4,0(r10)
20090fc8:	63000404 	addi	r12,r12,16
20090fcc:	52800404 	addi	r10,r10,16
20090fd0:	493ffc15 	stw	r4,-16(r9)
20090fd4:	1bbfef1e 	bne	r3,r14,20090f94 <__flash_rwdata_start+0xffff4e10>
20090fd8:	79000044 	addi	r4,r15,1
20090fdc:	2008913a 	slli	r4,r4,4
20090fe0:	328003cc 	andi	r10,r6,15
20090fe4:	02c000c4 	movi	r11,3
20090fe8:	1107883a 	add	r3,r2,r4
20090fec:	290b883a 	add	r5,r5,r4
20090ff0:	5a801e2e 	bgeu	r11,r10,2009106c <memmove+0x154>
20090ff4:	1813883a 	mov	r9,r3
20090ff8:	2811883a 	mov	r8,r5
20090ffc:	500f883a 	mov	r7,r10
20091000:	41000017 	ldw	r4,0(r8)
20091004:	4a400104 	addi	r9,r9,4
20091008:	39ffff04 	addi	r7,r7,-4
2009100c:	493fff15 	stw	r4,-4(r9)
20091010:	42000104 	addi	r8,r8,4
20091014:	59fffa36 	bltu	r11,r7,20091000 <__flash_rwdata_start+0xffff4e7c>
20091018:	513fff04 	addi	r4,r10,-4
2009101c:	2008d0ba 	srli	r4,r4,2
20091020:	318000cc 	andi	r6,r6,3
20091024:	21000044 	addi	r4,r4,1
20091028:	2109883a 	add	r4,r4,r4
2009102c:	2109883a 	add	r4,r4,r4
20091030:	1907883a 	add	r3,r3,r4
20091034:	290b883a 	add	r5,r5,r4
20091038:	30000926 	beq	r6,zero,20091060 <memmove+0x148>
2009103c:	198d883a 	add	r6,r3,r6
20091040:	29c00003 	ldbu	r7,0(r5)
20091044:	18c00044 	addi	r3,r3,1
20091048:	29400044 	addi	r5,r5,1
2009104c:	19ffffc5 	stb	r7,-1(r3)
20091050:	19bffb1e 	bne	r3,r6,20091040 <__flash_rwdata_start+0xffff4ebc>
20091054:	f800283a 	ret
20091058:	1007883a 	mov	r3,r2
2009105c:	003ff606 	br	20091038 <__flash_rwdata_start+0xffff4eb4>
20091060:	f800283a 	ret
20091064:	1007883a 	mov	r3,r2
20091068:	003ff406 	br	2009103c <__flash_rwdata_start+0xffff4eb8>
2009106c:	500d883a 	mov	r6,r10
20091070:	003ff106 	br	20091038 <__flash_rwdata_start+0xffff4eb4>

20091074 <_Balloc>:
20091074:	20801317 	ldw	r2,76(r4)
20091078:	defffc04 	addi	sp,sp,-16
2009107c:	dc400115 	stw	r17,4(sp)
20091080:	dc000015 	stw	r16,0(sp)
20091084:	dfc00315 	stw	ra,12(sp)
20091088:	dc800215 	stw	r18,8(sp)
2009108c:	2023883a 	mov	r17,r4
20091090:	2821883a 	mov	r16,r5
20091094:	10000f26 	beq	r2,zero,200910d4 <_Balloc+0x60>
20091098:	8407883a 	add	r3,r16,r16
2009109c:	18c7883a 	add	r3,r3,r3
200910a0:	10c7883a 	add	r3,r2,r3
200910a4:	18800017 	ldw	r2,0(r3)
200910a8:	10001126 	beq	r2,zero,200910f0 <_Balloc+0x7c>
200910ac:	11000017 	ldw	r4,0(r2)
200910b0:	19000015 	stw	r4,0(r3)
200910b4:	10000415 	stw	zero,16(r2)
200910b8:	10000315 	stw	zero,12(r2)
200910bc:	dfc00317 	ldw	ra,12(sp)
200910c0:	dc800217 	ldw	r18,8(sp)
200910c4:	dc400117 	ldw	r17,4(sp)
200910c8:	dc000017 	ldw	r16,0(sp)
200910cc:	dec00404 	addi	sp,sp,16
200910d0:	f800283a 	ret
200910d4:	01400104 	movi	r5,4
200910d8:	01800844 	movi	r6,33
200910dc:	00950080 	call	20095008 <_calloc_r>
200910e0:	88801315 	stw	r2,76(r17)
200910e4:	103fec1e 	bne	r2,zero,20091098 <__flash_rwdata_start+0xffff4f14>
200910e8:	0005883a 	mov	r2,zero
200910ec:	003ff306 	br	200910bc <__flash_rwdata_start+0xffff4f38>
200910f0:	01400044 	movi	r5,1
200910f4:	2c24983a 	sll	r18,r5,r16
200910f8:	8809883a 	mov	r4,r17
200910fc:	91800144 	addi	r6,r18,5
20091100:	318d883a 	add	r6,r6,r6
20091104:	318d883a 	add	r6,r6,r6
20091108:	00950080 	call	20095008 <_calloc_r>
2009110c:	103ff626 	beq	r2,zero,200910e8 <__flash_rwdata_start+0xffff4f64>
20091110:	14000115 	stw	r16,4(r2)
20091114:	14800215 	stw	r18,8(r2)
20091118:	003fe606 	br	200910b4 <__flash_rwdata_start+0xffff4f30>

2009111c <_Bfree>:
2009111c:	28000826 	beq	r5,zero,20091140 <_Bfree+0x24>
20091120:	28c00117 	ldw	r3,4(r5)
20091124:	20801317 	ldw	r2,76(r4)
20091128:	18c7883a 	add	r3,r3,r3
2009112c:	18c7883a 	add	r3,r3,r3
20091130:	10c5883a 	add	r2,r2,r3
20091134:	10c00017 	ldw	r3,0(r2)
20091138:	28c00015 	stw	r3,0(r5)
2009113c:	11400015 	stw	r5,0(r2)
20091140:	f800283a 	ret

20091144 <__multadd>:
20091144:	defffa04 	addi	sp,sp,-24
20091148:	dc000115 	stw	r16,4(sp)
2009114c:	2c000417 	ldw	r16,16(r5)
20091150:	dc800315 	stw	r18,12(sp)
20091154:	dc400215 	stw	r17,8(sp)
20091158:	dfc00515 	stw	ra,20(sp)
2009115c:	dcc00415 	stw	r19,16(sp)
20091160:	2823883a 	mov	r17,r5
20091164:	2025883a 	mov	r18,r4
20091168:	2a400504 	addi	r9,r5,20
2009116c:	0015883a 	mov	r10,zero
20091170:	4a000017 	ldw	r8,0(r9)
20091174:	4a400104 	addi	r9,r9,4
20091178:	52800044 	addi	r10,r10,1
2009117c:	40ffffcc 	andi	r3,r8,65535
20091180:	1987383a 	mul	r3,r3,r6
20091184:	4010d43a 	srli	r8,r8,16
20091188:	19cf883a 	add	r7,r3,r7
2009118c:	4191383a 	mul	r8,r8,r6
20091190:	3816d43a 	srli	r11,r7,16
20091194:	38ffffcc 	andi	r3,r7,65535
20091198:	5a0f883a 	add	r7,r11,r8
2009119c:	3810943a 	slli	r8,r7,16
200911a0:	380ed43a 	srli	r7,r7,16
200911a4:	40c7883a 	add	r3,r8,r3
200911a8:	48ffff15 	stw	r3,-4(r9)
200911ac:	543ff016 	blt	r10,r16,20091170 <__flash_rwdata_start+0xffff4fec>
200911b0:	38000926 	beq	r7,zero,200911d8 <__multadd+0x94>
200911b4:	88800217 	ldw	r2,8(r17)
200911b8:	80800f0e 	bge	r16,r2,200911f8 <__multadd+0xb4>
200911bc:	80800144 	addi	r2,r16,5
200911c0:	1085883a 	add	r2,r2,r2
200911c4:	1085883a 	add	r2,r2,r2
200911c8:	8885883a 	add	r2,r17,r2
200911cc:	11c00015 	stw	r7,0(r2)
200911d0:	84000044 	addi	r16,r16,1
200911d4:	8c000415 	stw	r16,16(r17)
200911d8:	8805883a 	mov	r2,r17
200911dc:	dfc00517 	ldw	ra,20(sp)
200911e0:	dcc00417 	ldw	r19,16(sp)
200911e4:	dc800317 	ldw	r18,12(sp)
200911e8:	dc400217 	ldw	r17,8(sp)
200911ec:	dc000117 	ldw	r16,4(sp)
200911f0:	dec00604 	addi	sp,sp,24
200911f4:	f800283a 	ret
200911f8:	89400117 	ldw	r5,4(r17)
200911fc:	9009883a 	mov	r4,r18
20091200:	d9c00015 	stw	r7,0(sp)
20091204:	29400044 	addi	r5,r5,1
20091208:	00910740 	call	20091074 <_Balloc>
2009120c:	89800417 	ldw	r6,16(r17)
20091210:	11000304 	addi	r4,r2,12
20091214:	89400304 	addi	r5,r17,12
20091218:	31800084 	addi	r6,r6,2
2009121c:	318d883a 	add	r6,r6,r6
20091220:	318d883a 	add	r6,r6,r6
20091224:	1027883a 	mov	r19,r2
20091228:	00899600 	call	20089960 <memcpy>
2009122c:	d9c00017 	ldw	r7,0(sp)
20091230:	88000a26 	beq	r17,zero,2009125c <__multadd+0x118>
20091234:	89000117 	ldw	r4,4(r17)
20091238:	90c01317 	ldw	r3,76(r18)
2009123c:	2109883a 	add	r4,r4,r4
20091240:	2109883a 	add	r4,r4,r4
20091244:	1907883a 	add	r3,r3,r4
20091248:	18800017 	ldw	r2,0(r3)
2009124c:	88800015 	stw	r2,0(r17)
20091250:	1c400015 	stw	r17,0(r3)
20091254:	9823883a 	mov	r17,r19
20091258:	003fd806 	br	200911bc <__flash_rwdata_start+0xffff5038>
2009125c:	9823883a 	mov	r17,r19
20091260:	003fd606 	br	200911bc <__flash_rwdata_start+0xffff5038>

20091264 <__s2b>:
20091264:	defff904 	addi	sp,sp,-28
20091268:	dc400115 	stw	r17,4(sp)
2009126c:	dc000015 	stw	r16,0(sp)
20091270:	2023883a 	mov	r17,r4
20091274:	2821883a 	mov	r16,r5
20091278:	39000204 	addi	r4,r7,8
2009127c:	01400244 	movi	r5,9
20091280:	dcc00315 	stw	r19,12(sp)
20091284:	dc800215 	stw	r18,8(sp)
20091288:	dfc00615 	stw	ra,24(sp)
2009128c:	dd400515 	stw	r21,20(sp)
20091290:	dd000415 	stw	r20,16(sp)
20091294:	3825883a 	mov	r18,r7
20091298:	3027883a 	mov	r19,r6
2009129c:	00865c00 	call	200865c0 <__divsi3>
200912a0:	00c00044 	movi	r3,1
200912a4:	000b883a 	mov	r5,zero
200912a8:	1880030e 	bge	r3,r2,200912b8 <__s2b+0x54>
200912ac:	18c7883a 	add	r3,r3,r3
200912b0:	29400044 	addi	r5,r5,1
200912b4:	18bffd16 	blt	r3,r2,200912ac <__flash_rwdata_start+0xffff5128>
200912b8:	8809883a 	mov	r4,r17
200912bc:	00910740 	call	20091074 <_Balloc>
200912c0:	d8c00717 	ldw	r3,28(sp)
200912c4:	10c00515 	stw	r3,20(r2)
200912c8:	00c00044 	movi	r3,1
200912cc:	10c00415 	stw	r3,16(r2)
200912d0:	00c00244 	movi	r3,9
200912d4:	1cc0210e 	bge	r3,r19,2009135c <__s2b+0xf8>
200912d8:	80eb883a 	add	r21,r16,r3
200912dc:	a829883a 	mov	r20,r21
200912e0:	84e1883a 	add	r16,r16,r19
200912e4:	a1c00007 	ldb	r7,0(r20)
200912e8:	8809883a 	mov	r4,r17
200912ec:	a5000044 	addi	r20,r20,1
200912f0:	100b883a 	mov	r5,r2
200912f4:	01800284 	movi	r6,10
200912f8:	39fff404 	addi	r7,r7,-48
200912fc:	00911440 	call	20091144 <__multadd>
20091300:	a43ff81e 	bne	r20,r16,200912e4 <__flash_rwdata_start+0xffff5160>
20091304:	ace1883a 	add	r16,r21,r19
20091308:	843ffe04 	addi	r16,r16,-8
2009130c:	9c800a0e 	bge	r19,r18,20091338 <__s2b+0xd4>
20091310:	94e5c83a 	sub	r18,r18,r19
20091314:	84a5883a 	add	r18,r16,r18
20091318:	81c00007 	ldb	r7,0(r16)
2009131c:	8809883a 	mov	r4,r17
20091320:	84000044 	addi	r16,r16,1
20091324:	100b883a 	mov	r5,r2
20091328:	01800284 	movi	r6,10
2009132c:	39fff404 	addi	r7,r7,-48
20091330:	00911440 	call	20091144 <__multadd>
20091334:	84bff81e 	bne	r16,r18,20091318 <__flash_rwdata_start+0xffff5194>
20091338:	dfc00617 	ldw	ra,24(sp)
2009133c:	dd400517 	ldw	r21,20(sp)
20091340:	dd000417 	ldw	r20,16(sp)
20091344:	dcc00317 	ldw	r19,12(sp)
20091348:	dc800217 	ldw	r18,8(sp)
2009134c:	dc400117 	ldw	r17,4(sp)
20091350:	dc000017 	ldw	r16,0(sp)
20091354:	dec00704 	addi	sp,sp,28
20091358:	f800283a 	ret
2009135c:	84000284 	addi	r16,r16,10
20091360:	1827883a 	mov	r19,r3
20091364:	003fe906 	br	2009130c <__flash_rwdata_start+0xffff5188>

20091368 <__hi0bits>:
20091368:	20bfffec 	andhi	r2,r4,65535
2009136c:	1000141e 	bne	r2,zero,200913c0 <__hi0bits+0x58>
20091370:	2008943a 	slli	r4,r4,16
20091374:	00800404 	movi	r2,16
20091378:	20ffc02c 	andhi	r3,r4,65280
2009137c:	1800021e 	bne	r3,zero,20091388 <__hi0bits+0x20>
20091380:	2008923a 	slli	r4,r4,8
20091384:	10800204 	addi	r2,r2,8
20091388:	20fc002c 	andhi	r3,r4,61440
2009138c:	1800021e 	bne	r3,zero,20091398 <__hi0bits+0x30>
20091390:	2008913a 	slli	r4,r4,4
20091394:	10800104 	addi	r2,r2,4
20091398:	20f0002c 	andhi	r3,r4,49152
2009139c:	1800031e 	bne	r3,zero,200913ac <__hi0bits+0x44>
200913a0:	2109883a 	add	r4,r4,r4
200913a4:	10800084 	addi	r2,r2,2
200913a8:	2109883a 	add	r4,r4,r4
200913ac:	20000316 	blt	r4,zero,200913bc <__hi0bits+0x54>
200913b0:	2110002c 	andhi	r4,r4,16384
200913b4:	2000041e 	bne	r4,zero,200913c8 <__hi0bits+0x60>
200913b8:	00800804 	movi	r2,32
200913bc:	f800283a 	ret
200913c0:	0005883a 	mov	r2,zero
200913c4:	003fec06 	br	20091378 <__flash_rwdata_start+0xffff51f4>
200913c8:	10800044 	addi	r2,r2,1
200913cc:	f800283a 	ret

200913d0 <__lo0bits>:
200913d0:	20c00017 	ldw	r3,0(r4)
200913d4:	188001cc 	andi	r2,r3,7
200913d8:	10000826 	beq	r2,zero,200913fc <__lo0bits+0x2c>
200913dc:	1880004c 	andi	r2,r3,1
200913e0:	1000211e 	bne	r2,zero,20091468 <__lo0bits+0x98>
200913e4:	1880008c 	andi	r2,r3,2
200913e8:	1000211e 	bne	r2,zero,20091470 <__lo0bits+0xa0>
200913ec:	1806d0ba 	srli	r3,r3,2
200913f0:	00800084 	movi	r2,2
200913f4:	20c00015 	stw	r3,0(r4)
200913f8:	f800283a 	ret
200913fc:	18bfffcc 	andi	r2,r3,65535
20091400:	10001326 	beq	r2,zero,20091450 <__lo0bits+0x80>
20091404:	0005883a 	mov	r2,zero
20091408:	19403fcc 	andi	r5,r3,255
2009140c:	2800021e 	bne	r5,zero,20091418 <__lo0bits+0x48>
20091410:	1806d23a 	srli	r3,r3,8
20091414:	10800204 	addi	r2,r2,8
20091418:	194003cc 	andi	r5,r3,15
2009141c:	2800021e 	bne	r5,zero,20091428 <__lo0bits+0x58>
20091420:	1806d13a 	srli	r3,r3,4
20091424:	10800104 	addi	r2,r2,4
20091428:	194000cc 	andi	r5,r3,3
2009142c:	2800021e 	bne	r5,zero,20091438 <__lo0bits+0x68>
20091430:	1806d0ba 	srli	r3,r3,2
20091434:	10800084 	addi	r2,r2,2
20091438:	1940004c 	andi	r5,r3,1
2009143c:	2800081e 	bne	r5,zero,20091460 <__lo0bits+0x90>
20091440:	1806d07a 	srli	r3,r3,1
20091444:	1800051e 	bne	r3,zero,2009145c <__lo0bits+0x8c>
20091448:	00800804 	movi	r2,32
2009144c:	f800283a 	ret
20091450:	1806d43a 	srli	r3,r3,16
20091454:	00800404 	movi	r2,16
20091458:	003feb06 	br	20091408 <__flash_rwdata_start+0xffff5284>
2009145c:	10800044 	addi	r2,r2,1
20091460:	20c00015 	stw	r3,0(r4)
20091464:	f800283a 	ret
20091468:	0005883a 	mov	r2,zero
2009146c:	f800283a 	ret
20091470:	1806d07a 	srli	r3,r3,1
20091474:	00800044 	movi	r2,1
20091478:	20c00015 	stw	r3,0(r4)
2009147c:	f800283a 	ret

20091480 <__i2b>:
20091480:	defffd04 	addi	sp,sp,-12
20091484:	dc000015 	stw	r16,0(sp)
20091488:	04000044 	movi	r16,1
2009148c:	dc400115 	stw	r17,4(sp)
20091490:	2823883a 	mov	r17,r5
20091494:	800b883a 	mov	r5,r16
20091498:	dfc00215 	stw	ra,8(sp)
2009149c:	00910740 	call	20091074 <_Balloc>
200914a0:	14400515 	stw	r17,20(r2)
200914a4:	14000415 	stw	r16,16(r2)
200914a8:	dfc00217 	ldw	ra,8(sp)
200914ac:	dc400117 	ldw	r17,4(sp)
200914b0:	dc000017 	ldw	r16,0(sp)
200914b4:	dec00304 	addi	sp,sp,12
200914b8:	f800283a 	ret

200914bc <__multiply>:
200914bc:	defffa04 	addi	sp,sp,-24
200914c0:	dcc00315 	stw	r19,12(sp)
200914c4:	dc800215 	stw	r18,8(sp)
200914c8:	2cc00417 	ldw	r19,16(r5)
200914cc:	34800417 	ldw	r18,16(r6)
200914d0:	dd000415 	stw	r20,16(sp)
200914d4:	dc400115 	stw	r17,4(sp)
200914d8:	dfc00515 	stw	ra,20(sp)
200914dc:	dc000015 	stw	r16,0(sp)
200914e0:	2829883a 	mov	r20,r5
200914e4:	3023883a 	mov	r17,r6
200914e8:	9c807016 	blt	r19,r18,200916ac <__multiply+0x1f0>
200914ec:	9005883a 	mov	r2,r18
200914f0:	9825883a 	mov	r18,r19
200914f4:	1027883a 	mov	r19,r2
200914f8:	a0800217 	ldw	r2,8(r20)
200914fc:	94e1883a 	add	r16,r18,r19
20091500:	a1400117 	ldw	r5,4(r20)
20091504:	1400010e 	bge	r2,r16,2009150c <__multiply+0x50>
20091508:	29400044 	addi	r5,r5,1
2009150c:	00910740 	call	20091074 <_Balloc>
20091510:	8417883a 	add	r11,r16,r16
20091514:	13000504 	addi	r12,r2,20
20091518:	5ad7883a 	add	r11,r11,r11
2009151c:	62d7883a 	add	r11,r12,r11
20091520:	6007883a 	mov	r3,r12
20091524:	62c0032e 	bgeu	r12,r11,20091534 <__multiply+0x78>
20091528:	18000015 	stw	zero,0(r3)
2009152c:	18c00104 	addi	r3,r3,4
20091530:	1afffd36 	bltu	r3,r11,20091528 <__flash_rwdata_start+0xffff53a4>
20091534:	9ce7883a 	add	r19,r19,r19
20091538:	94a5883a 	add	r18,r18,r18
2009153c:	89800504 	addi	r6,r17,20
20091540:	9ce7883a 	add	r19,r19,r19
20091544:	a3800504 	addi	r14,r20,20
20091548:	94a5883a 	add	r18,r18,r18
2009154c:	34db883a 	add	r13,r6,r19
20091550:	7495883a 	add	r10,r14,r18
20091554:	3340422e 	bgeu	r6,r13,20091660 <__multiply+0x1a4>
20091558:	34400017 	ldw	r17,0(r6)
2009155c:	8cbfffcc 	andi	r18,r17,65535
20091560:	90001b26 	beq	r18,zero,200915d0 <__multiply+0x114>
20091564:	6013883a 	mov	r9,r12
20091568:	7023883a 	mov	r17,r14
2009156c:	0011883a 	mov	r8,zero
20091570:	88c00017 	ldw	r3,0(r17)
20091574:	4bc00017 	ldw	r15,0(r9)
20091578:	8c400104 	addi	r17,r17,4
2009157c:	19ffffcc 	andi	r7,r3,65535
20091580:	3c8f383a 	mul	r7,r7,r18
20091584:	1808d43a 	srli	r4,r3,16
20091588:	797fffcc 	andi	r5,r15,65535
2009158c:	29cb883a 	add	r5,r5,r7
20091590:	2a0b883a 	add	r5,r5,r8
20091594:	2489383a 	mul	r4,r4,r18
20091598:	7806d43a 	srli	r3,r15,16
2009159c:	2810d43a 	srli	r8,r5,16
200915a0:	297fffcc 	andi	r5,r5,65535
200915a4:	1907883a 	add	r3,r3,r4
200915a8:	1a07883a 	add	r3,r3,r8
200915ac:	1808943a 	slli	r4,r3,16
200915b0:	480f883a 	mov	r7,r9
200915b4:	1810d43a 	srli	r8,r3,16
200915b8:	214ab03a 	or	r5,r4,r5
200915bc:	49400015 	stw	r5,0(r9)
200915c0:	4a400104 	addi	r9,r9,4
200915c4:	8abfea36 	bltu	r17,r10,20091570 <__flash_rwdata_start+0xffff53ec>
200915c8:	3a000115 	stw	r8,4(r7)
200915cc:	34400017 	ldw	r17,0(r6)
200915d0:	8822d43a 	srli	r17,r17,16
200915d4:	88001f26 	beq	r17,zero,20091654 <__multiply+0x198>
200915d8:	60c00017 	ldw	r3,0(r12)
200915dc:	7013883a 	mov	r9,r14
200915e0:	601f883a 	mov	r15,r12
200915e4:	1811883a 	mov	r8,r3
200915e8:	6027883a 	mov	r19,r12
200915ec:	000f883a 	mov	r7,zero
200915f0:	00000106 	br	200915f8 <__multiply+0x13c>
200915f4:	9027883a 	mov	r19,r18
200915f8:	4940000b 	ldhu	r5,0(r9)
200915fc:	4010d43a 	srli	r8,r8,16
20091600:	193fffcc 	andi	r4,r3,65535
20091604:	2c4b383a 	mul	r5,r5,r17
20091608:	7bc00104 	addi	r15,r15,4
2009160c:	4a400104 	addi	r9,r9,4
20091610:	2a0b883a 	add	r5,r5,r8
20091614:	29cb883a 	add	r5,r5,r7
20091618:	2806943a 	slli	r3,r5,16
2009161c:	9c800104 	addi	r18,r19,4
20091620:	280ad43a 	srli	r5,r5,16
20091624:	1908b03a 	or	r4,r3,r4
20091628:	793fff15 	stw	r4,-4(r15)
2009162c:	48ffff17 	ldw	r3,-4(r9)
20091630:	92000017 	ldw	r8,0(r18)
20091634:	1806d43a 	srli	r3,r3,16
20091638:	413fffcc 	andi	r4,r8,65535
2009163c:	1c47383a 	mul	r3,r3,r17
20091640:	1907883a 	add	r3,r3,r4
20091644:	1947883a 	add	r3,r3,r5
20091648:	180ed43a 	srli	r7,r3,16
2009164c:	4abfe936 	bltu	r9,r10,200915f4 <__flash_rwdata_start+0xffff5470>
20091650:	98c00115 	stw	r3,4(r19)
20091654:	31800104 	addi	r6,r6,4
20091658:	63000104 	addi	r12,r12,4
2009165c:	337fbe36 	bltu	r6,r13,20091558 <__flash_rwdata_start+0xffff53d4>
20091660:	0400090e 	bge	zero,r16,20091688 <__multiply+0x1cc>
20091664:	58ffff17 	ldw	r3,-4(r11)
20091668:	5affff04 	addi	r11,r11,-4
2009166c:	18000326 	beq	r3,zero,2009167c <__multiply+0x1c0>
20091670:	00000506 	br	20091688 <__multiply+0x1cc>
20091674:	58c00017 	ldw	r3,0(r11)
20091678:	1800031e 	bne	r3,zero,20091688 <__multiply+0x1cc>
2009167c:	843fffc4 	addi	r16,r16,-1
20091680:	5affff04 	addi	r11,r11,-4
20091684:	803ffb1e 	bne	r16,zero,20091674 <__flash_rwdata_start+0xffff54f0>
20091688:	14000415 	stw	r16,16(r2)
2009168c:	dfc00517 	ldw	ra,20(sp)
20091690:	dd000417 	ldw	r20,16(sp)
20091694:	dcc00317 	ldw	r19,12(sp)
20091698:	dc800217 	ldw	r18,8(sp)
2009169c:	dc400117 	ldw	r17,4(sp)
200916a0:	dc000017 	ldw	r16,0(sp)
200916a4:	dec00604 	addi	sp,sp,24
200916a8:	f800283a 	ret
200916ac:	3029883a 	mov	r20,r6
200916b0:	2823883a 	mov	r17,r5
200916b4:	003f9006 	br	200914f8 <__flash_rwdata_start+0xffff5374>

200916b8 <__pow5mult>:
200916b8:	defffa04 	addi	sp,sp,-24
200916bc:	dcc00315 	stw	r19,12(sp)
200916c0:	dc800215 	stw	r18,8(sp)
200916c4:	dc000015 	stw	r16,0(sp)
200916c8:	dfc00515 	stw	ra,20(sp)
200916cc:	dd000415 	stw	r20,16(sp)
200916d0:	dc400115 	stw	r17,4(sp)
200916d4:	308000cc 	andi	r2,r6,3
200916d8:	3021883a 	mov	r16,r6
200916dc:	2027883a 	mov	r19,r4
200916e0:	2825883a 	mov	r18,r5
200916e4:	10002e1e 	bne	r2,zero,200917a0 <__pow5mult+0xe8>
200916e8:	8021d0ba 	srai	r16,r16,2
200916ec:	80001a26 	beq	r16,zero,20091758 <__pow5mult+0xa0>
200916f0:	9c401217 	ldw	r17,72(r19)
200916f4:	8800061e 	bne	r17,zero,20091710 <__pow5mult+0x58>
200916f8:	00003406 	br	200917cc <__pow5mult+0x114>
200916fc:	8021d07a 	srai	r16,r16,1
20091700:	80001526 	beq	r16,zero,20091758 <__pow5mult+0xa0>
20091704:	88800017 	ldw	r2,0(r17)
20091708:	10001c26 	beq	r2,zero,2009177c <__pow5mult+0xc4>
2009170c:	1023883a 	mov	r17,r2
20091710:	80c0004c 	andi	r3,r16,1
20091714:	183ff926 	beq	r3,zero,200916fc <__flash_rwdata_start+0xffff5578>
20091718:	900b883a 	mov	r5,r18
2009171c:	880d883a 	mov	r6,r17
20091720:	9809883a 	mov	r4,r19
20091724:	00914bc0 	call	200914bc <__multiply>
20091728:	90001b26 	beq	r18,zero,20091798 <__pow5mult+0xe0>
2009172c:	91c00117 	ldw	r7,4(r18)
20091730:	98c01317 	ldw	r3,76(r19)
20091734:	8021d07a 	srai	r16,r16,1
20091738:	39cf883a 	add	r7,r7,r7
2009173c:	39cf883a 	add	r7,r7,r7
20091740:	19c7883a 	add	r3,r3,r7
20091744:	19000017 	ldw	r4,0(r3)
20091748:	91000015 	stw	r4,0(r18)
2009174c:	1c800015 	stw	r18,0(r3)
20091750:	1025883a 	mov	r18,r2
20091754:	803feb1e 	bne	r16,zero,20091704 <__flash_rwdata_start+0xffff5580>
20091758:	9005883a 	mov	r2,r18
2009175c:	dfc00517 	ldw	ra,20(sp)
20091760:	dd000417 	ldw	r20,16(sp)
20091764:	dcc00317 	ldw	r19,12(sp)
20091768:	dc800217 	ldw	r18,8(sp)
2009176c:	dc400117 	ldw	r17,4(sp)
20091770:	dc000017 	ldw	r16,0(sp)
20091774:	dec00604 	addi	sp,sp,24
20091778:	f800283a 	ret
2009177c:	9809883a 	mov	r4,r19
20091780:	880b883a 	mov	r5,r17
20091784:	880d883a 	mov	r6,r17
20091788:	00914bc0 	call	200914bc <__multiply>
2009178c:	88800015 	stw	r2,0(r17)
20091790:	10000015 	stw	zero,0(r2)
20091794:	003fdd06 	br	2009170c <__flash_rwdata_start+0xffff5588>
20091798:	1025883a 	mov	r18,r2
2009179c:	003fd706 	br	200916fc <__flash_rwdata_start+0xffff5578>
200917a0:	10bfffc4 	addi	r2,r2,-1
200917a4:	1085883a 	add	r2,r2,r2
200917a8:	00c00034 	movhi	r3,0
200917ac:	18c12f04 	addi	r3,r3,1212
200917b0:	1085883a 	add	r2,r2,r2
200917b4:	1885883a 	add	r2,r3,r2
200917b8:	11800017 	ldw	r6,0(r2)
200917bc:	000f883a 	mov	r7,zero
200917c0:	00911440 	call	20091144 <__multadd>
200917c4:	1025883a 	mov	r18,r2
200917c8:	003fc706 	br	200916e8 <__flash_rwdata_start+0xffff5564>
200917cc:	05000044 	movi	r20,1
200917d0:	9809883a 	mov	r4,r19
200917d4:	a00b883a 	mov	r5,r20
200917d8:	00910740 	call	20091074 <_Balloc>
200917dc:	1023883a 	mov	r17,r2
200917e0:	00809c44 	movi	r2,625
200917e4:	88800515 	stw	r2,20(r17)
200917e8:	8d000415 	stw	r20,16(r17)
200917ec:	9c401215 	stw	r17,72(r19)
200917f0:	88000015 	stw	zero,0(r17)
200917f4:	003fc606 	br	20091710 <__flash_rwdata_start+0xffff558c>

200917f8 <__lshift>:
200917f8:	defff904 	addi	sp,sp,-28
200917fc:	dd000415 	stw	r20,16(sp)
20091800:	dcc00315 	stw	r19,12(sp)
20091804:	3029d17a 	srai	r20,r6,5
20091808:	2cc00417 	ldw	r19,16(r5)
2009180c:	28800217 	ldw	r2,8(r5)
20091810:	dd400515 	stw	r21,20(sp)
20091814:	a4e7883a 	add	r19,r20,r19
20091818:	dc800215 	stw	r18,8(sp)
2009181c:	dc400115 	stw	r17,4(sp)
20091820:	dc000015 	stw	r16,0(sp)
20091824:	dfc00615 	stw	ra,24(sp)
20091828:	9c000044 	addi	r16,r19,1
2009182c:	2823883a 	mov	r17,r5
20091830:	302b883a 	mov	r21,r6
20091834:	2025883a 	mov	r18,r4
20091838:	29400117 	ldw	r5,4(r5)
2009183c:	1400030e 	bge	r2,r16,2009184c <__lshift+0x54>
20091840:	1085883a 	add	r2,r2,r2
20091844:	29400044 	addi	r5,r5,1
20091848:	143ffd16 	blt	r2,r16,20091840 <__flash_rwdata_start+0xffff56bc>
2009184c:	9009883a 	mov	r4,r18
20091850:	00910740 	call	20091074 <_Balloc>
20091854:	11c00504 	addi	r7,r2,20
20091858:	0500090e 	bge	zero,r20,20091880 <__lshift+0x88>
2009185c:	3811883a 	mov	r8,r7
20091860:	0007883a 	mov	r3,zero
20091864:	40000015 	stw	zero,0(r8)
20091868:	18c00044 	addi	r3,r3,1
2009186c:	42000104 	addi	r8,r8,4
20091870:	1d3ffc1e 	bne	r3,r20,20091864 <__flash_rwdata_start+0xffff56e0>
20091874:	18c7883a 	add	r3,r3,r3
20091878:	18c7883a 	add	r3,r3,r3
2009187c:	38cf883a 	add	r7,r7,r3
20091880:	89000417 	ldw	r4,16(r17)
20091884:	88c00504 	addi	r3,r17,20
20091888:	a98007cc 	andi	r6,r21,31
2009188c:	2109883a 	add	r4,r4,r4
20091890:	2109883a 	add	r4,r4,r4
20091894:	1909883a 	add	r4,r3,r4
20091898:	30002326 	beq	r6,zero,20091928 <__lshift+0x130>
2009189c:	01400804 	movi	r5,32
200918a0:	298bc83a 	sub	r5,r5,r6
200918a4:	0013883a 	mov	r9,zero
200918a8:	1a000017 	ldw	r8,0(r3)
200918ac:	3815883a 	mov	r10,r7
200918b0:	39c00104 	addi	r7,r7,4
200918b4:	4190983a 	sll	r8,r8,r6
200918b8:	18c00104 	addi	r3,r3,4
200918bc:	4a10b03a 	or	r8,r9,r8
200918c0:	3a3fff15 	stw	r8,-4(r7)
200918c4:	1a3fff17 	ldw	r8,-4(r3)
200918c8:	4152d83a 	srl	r9,r8,r5
200918cc:	193ff636 	bltu	r3,r4,200918a8 <__flash_rwdata_start+0xffff5724>
200918d0:	52400115 	stw	r9,4(r10)
200918d4:	48001a1e 	bne	r9,zero,20091940 <__lshift+0x148>
200918d8:	843fffc4 	addi	r16,r16,-1
200918dc:	14000415 	stw	r16,16(r2)
200918e0:	88000826 	beq	r17,zero,20091904 <__lshift+0x10c>
200918e4:	89000117 	ldw	r4,4(r17)
200918e8:	90c01317 	ldw	r3,76(r18)
200918ec:	2109883a 	add	r4,r4,r4
200918f0:	2109883a 	add	r4,r4,r4
200918f4:	1907883a 	add	r3,r3,r4
200918f8:	19000017 	ldw	r4,0(r3)
200918fc:	89000015 	stw	r4,0(r17)
20091900:	1c400015 	stw	r17,0(r3)
20091904:	dfc00617 	ldw	ra,24(sp)
20091908:	dd400517 	ldw	r21,20(sp)
2009190c:	dd000417 	ldw	r20,16(sp)
20091910:	dcc00317 	ldw	r19,12(sp)
20091914:	dc800217 	ldw	r18,8(sp)
20091918:	dc400117 	ldw	r17,4(sp)
2009191c:	dc000017 	ldw	r16,0(sp)
20091920:	dec00704 	addi	sp,sp,28
20091924:	f800283a 	ret
20091928:	19400017 	ldw	r5,0(r3)
2009192c:	39c00104 	addi	r7,r7,4
20091930:	18c00104 	addi	r3,r3,4
20091934:	397fff15 	stw	r5,-4(r7)
20091938:	193ffb36 	bltu	r3,r4,20091928 <__flash_rwdata_start+0xffff57a4>
2009193c:	003fe606 	br	200918d8 <__flash_rwdata_start+0xffff5754>
20091940:	9c000084 	addi	r16,r19,2
20091944:	003fe406 	br	200918d8 <__flash_rwdata_start+0xffff5754>

20091948 <__mcmp>:
20091948:	20800417 	ldw	r2,16(r4)
2009194c:	28c00417 	ldw	r3,16(r5)
20091950:	10c5c83a 	sub	r2,r2,r3
20091954:	1000111e 	bne	r2,zero,2009199c <__mcmp+0x54>
20091958:	18c7883a 	add	r3,r3,r3
2009195c:	18c7883a 	add	r3,r3,r3
20091960:	21000504 	addi	r4,r4,20
20091964:	29400504 	addi	r5,r5,20
20091968:	20c5883a 	add	r2,r4,r3
2009196c:	28cb883a 	add	r5,r5,r3
20091970:	00000106 	br	20091978 <__mcmp+0x30>
20091974:	20800a2e 	bgeu	r4,r2,200919a0 <__mcmp+0x58>
20091978:	10bfff04 	addi	r2,r2,-4
2009197c:	297fff04 	addi	r5,r5,-4
20091980:	11800017 	ldw	r6,0(r2)
20091984:	28c00017 	ldw	r3,0(r5)
20091988:	30fffa26 	beq	r6,r3,20091974 <__flash_rwdata_start+0xffff57f0>
2009198c:	30c00236 	bltu	r6,r3,20091998 <__mcmp+0x50>
20091990:	00800044 	movi	r2,1
20091994:	f800283a 	ret
20091998:	00bfffc4 	movi	r2,-1
2009199c:	f800283a 	ret
200919a0:	0005883a 	mov	r2,zero
200919a4:	f800283a 	ret

200919a8 <__mdiff>:
200919a8:	defffb04 	addi	sp,sp,-20
200919ac:	dc000015 	stw	r16,0(sp)
200919b0:	2821883a 	mov	r16,r5
200919b4:	dcc00315 	stw	r19,12(sp)
200919b8:	300b883a 	mov	r5,r6
200919bc:	2027883a 	mov	r19,r4
200919c0:	8009883a 	mov	r4,r16
200919c4:	dc800215 	stw	r18,8(sp)
200919c8:	dfc00415 	stw	ra,16(sp)
200919cc:	dc400115 	stw	r17,4(sp)
200919d0:	3025883a 	mov	r18,r6
200919d4:	00919480 	call	20091948 <__mcmp>
200919d8:	10005226 	beq	r2,zero,20091b24 <__mdiff+0x17c>
200919dc:	10004c16 	blt	r2,zero,20091b10 <__mdiff+0x168>
200919e0:	0023883a 	mov	r17,zero
200919e4:	81400117 	ldw	r5,4(r16)
200919e8:	9809883a 	mov	r4,r19
200919ec:	00910740 	call	20091074 <_Balloc>
200919f0:	83400417 	ldw	r13,16(r16)
200919f4:	93800417 	ldw	r14,16(r18)
200919f8:	81000504 	addi	r4,r16,20
200919fc:	6b59883a 	add	r12,r13,r13
20091a00:	739d883a 	add	r14,r14,r14
20091a04:	6319883a 	add	r12,r12,r12
20091a08:	91800504 	addi	r6,r18,20
20091a0c:	739d883a 	add	r14,r14,r14
20091a10:	14400315 	stw	r17,12(r2)
20091a14:	2319883a 	add	r12,r4,r12
20091a18:	339d883a 	add	r14,r6,r14
20091a1c:	12400504 	addi	r9,r2,20
20091a20:	0007883a 	mov	r3,zero
20091a24:	22000017 	ldw	r8,0(r4)
20091a28:	32800017 	ldw	r10,0(r6)
20091a2c:	4ac00104 	addi	r11,r9,4
20091a30:	41ffffcc 	andi	r7,r8,65535
20091a34:	38c7883a 	add	r3,r7,r3
20091a38:	51ffffcc 	andi	r7,r10,65535
20091a3c:	19cfc83a 	sub	r7,r3,r7
20091a40:	4010d43a 	srli	r8,r8,16
20091a44:	5014d43a 	srli	r10,r10,16
20091a48:	3807d43a 	srai	r3,r7,16
20091a4c:	39ffffcc 	andi	r7,r7,65535
20091a50:	4291c83a 	sub	r8,r8,r10
20091a54:	40c7883a 	add	r3,r8,r3
20091a58:	1810943a 	slli	r8,r3,16
20091a5c:	31800104 	addi	r6,r6,4
20091a60:	21000104 	addi	r4,r4,4
20091a64:	41ceb03a 	or	r7,r8,r7
20091a68:	49c00015 	stw	r7,0(r9)
20091a6c:	1807d43a 	srai	r3,r3,16
20091a70:	580b883a 	mov	r5,r11
20091a74:	5813883a 	mov	r9,r11
20091a78:	33bfea36 	bltu	r6,r14,20091a24 <__flash_rwdata_start+0xffff58a0>
20091a7c:	2011883a 	mov	r8,r4
20091a80:	2300152e 	bgeu	r4,r12,20091ad8 <__mdiff+0x130>
20091a84:	21400017 	ldw	r5,0(r4)
20091a88:	4a400104 	addi	r9,r9,4
20091a8c:	21000104 	addi	r4,r4,4
20091a90:	29ffffcc 	andi	r7,r5,65535
20091a94:	38c7883a 	add	r3,r7,r3
20091a98:	280ad43a 	srli	r5,r5,16
20091a9c:	180dd43a 	srai	r6,r3,16
20091aa0:	19ffffcc 	andi	r7,r3,65535
20091aa4:	3147883a 	add	r3,r6,r5
20091aa8:	180a943a 	slli	r5,r3,16
20091aac:	1807d43a 	srai	r3,r3,16
20091ab0:	29ceb03a 	or	r7,r5,r7
20091ab4:	49ffff15 	stw	r7,-4(r9)
20091ab8:	233ff236 	bltu	r4,r12,20091a84 <__flash_rwdata_start+0xffff5900>
20091abc:	0206303a 	nor	r3,zero,r8
20091ac0:	1b07883a 	add	r3,r3,r12
20091ac4:	1806d0ba 	srli	r3,r3,2
20091ac8:	18c00044 	addi	r3,r3,1
20091acc:	18c7883a 	add	r3,r3,r3
20091ad0:	18c7883a 	add	r3,r3,r3
20091ad4:	58cb883a 	add	r5,r11,r3
20091ad8:	28ffff04 	addi	r3,r5,-4
20091adc:	3800041e 	bne	r7,zero,20091af0 <__mdiff+0x148>
20091ae0:	18ffff04 	addi	r3,r3,-4
20091ae4:	19000017 	ldw	r4,0(r3)
20091ae8:	6b7fffc4 	addi	r13,r13,-1
20091aec:	203ffc26 	beq	r4,zero,20091ae0 <__flash_rwdata_start+0xffff595c>
20091af0:	13400415 	stw	r13,16(r2)
20091af4:	dfc00417 	ldw	ra,16(sp)
20091af8:	dcc00317 	ldw	r19,12(sp)
20091afc:	dc800217 	ldw	r18,8(sp)
20091b00:	dc400117 	ldw	r17,4(sp)
20091b04:	dc000017 	ldw	r16,0(sp)
20091b08:	dec00504 	addi	sp,sp,20
20091b0c:	f800283a 	ret
20091b10:	8005883a 	mov	r2,r16
20091b14:	04400044 	movi	r17,1
20091b18:	9021883a 	mov	r16,r18
20091b1c:	1025883a 	mov	r18,r2
20091b20:	003fb006 	br	200919e4 <__flash_rwdata_start+0xffff5860>
20091b24:	9809883a 	mov	r4,r19
20091b28:	000b883a 	mov	r5,zero
20091b2c:	00910740 	call	20091074 <_Balloc>
20091b30:	00c00044 	movi	r3,1
20091b34:	10c00415 	stw	r3,16(r2)
20091b38:	10000515 	stw	zero,20(r2)
20091b3c:	003fed06 	br	20091af4 <__flash_rwdata_start+0xffff5970>

20091b40 <__ulp>:
20091b40:	295ffc2c 	andhi	r5,r5,32752
20091b44:	00bf3034 	movhi	r2,64704
20091b48:	2887883a 	add	r3,r5,r2
20091b4c:	00c0020e 	bge	zero,r3,20091b58 <__ulp+0x18>
20091b50:	0005883a 	mov	r2,zero
20091b54:	f800283a 	ret
20091b58:	00c7c83a 	sub	r3,zero,r3
20091b5c:	180bd53a 	srai	r5,r3,20
20091b60:	008004c4 	movi	r2,19
20091b64:	11400a0e 	bge	r2,r5,20091b90 <__ulp+0x50>
20091b68:	00800c84 	movi	r2,50
20091b6c:	0007883a 	mov	r3,zero
20091b70:	11400516 	blt	r2,r5,20091b88 <__ulp+0x48>
20091b74:	00800cc4 	movi	r2,51
20091b78:	114bc83a 	sub	r5,r2,r5
20091b7c:	00800044 	movi	r2,1
20091b80:	1144983a 	sll	r2,r2,r5
20091b84:	f800283a 	ret
20091b88:	00800044 	movi	r2,1
20091b8c:	f800283a 	ret
20091b90:	00800234 	movhi	r2,8
20091b94:	1147d83a 	sra	r3,r2,r5
20091b98:	0005883a 	mov	r2,zero
20091b9c:	f800283a 	ret

20091ba0 <__b2d>:
20091ba0:	defffa04 	addi	sp,sp,-24
20091ba4:	dc000015 	stw	r16,0(sp)
20091ba8:	24000417 	ldw	r16,16(r4)
20091bac:	dc400115 	stw	r17,4(sp)
20091bb0:	24400504 	addi	r17,r4,20
20091bb4:	8421883a 	add	r16,r16,r16
20091bb8:	8421883a 	add	r16,r16,r16
20091bbc:	8c21883a 	add	r16,r17,r16
20091bc0:	dc800215 	stw	r18,8(sp)
20091bc4:	84bfff17 	ldw	r18,-4(r16)
20091bc8:	dd000415 	stw	r20,16(sp)
20091bcc:	dcc00315 	stw	r19,12(sp)
20091bd0:	9009883a 	mov	r4,r18
20091bd4:	2829883a 	mov	r20,r5
20091bd8:	dfc00515 	stw	ra,20(sp)
20091bdc:	00913680 	call	20091368 <__hi0bits>
20091be0:	00c00804 	movi	r3,32
20091be4:	1887c83a 	sub	r3,r3,r2
20091be8:	a0c00015 	stw	r3,0(r20)
20091bec:	00c00284 	movi	r3,10
20091bf0:	84ffff04 	addi	r19,r16,-4
20091bf4:	18801216 	blt	r3,r2,20091c40 <__b2d+0xa0>
20091bf8:	014002c4 	movi	r5,11
20091bfc:	2889c83a 	sub	r4,r5,r2
20091c00:	9106d83a 	srl	r3,r18,r4
20091c04:	18cffc34 	orhi	r3,r3,16368
20091c08:	8cc0282e 	bgeu	r17,r19,20091cac <__b2d+0x10c>
20091c0c:	817ffe17 	ldw	r5,-8(r16)
20091c10:	290ad83a 	srl	r5,r5,r4
20091c14:	10800544 	addi	r2,r2,21
20091c18:	9084983a 	sll	r2,r18,r2
20091c1c:	2884b03a 	or	r2,r5,r2
20091c20:	dfc00517 	ldw	ra,20(sp)
20091c24:	dd000417 	ldw	r20,16(sp)
20091c28:	dcc00317 	ldw	r19,12(sp)
20091c2c:	dc800217 	ldw	r18,8(sp)
20091c30:	dc400117 	ldw	r17,4(sp)
20091c34:	dc000017 	ldw	r16,0(sp)
20091c38:	dec00604 	addi	sp,sp,24
20091c3c:	f800283a 	ret
20091c40:	113ffd44 	addi	r4,r2,-11
20091c44:	8cc00f2e 	bgeu	r17,r19,20091c84 <__b2d+0xe4>
20091c48:	81bffe04 	addi	r6,r16,-8
20091c4c:	817ffe17 	ldw	r5,-8(r16)
20091c50:	20001326 	beq	r4,zero,20091ca0 <__b2d+0x100>
20091c54:	00c00ac4 	movi	r3,43
20091c58:	1885c83a 	sub	r2,r3,r2
20091c5c:	2886d83a 	srl	r3,r5,r2
20091c60:	9124983a 	sll	r18,r18,r4
20091c64:	90e4b03a 	or	r18,r18,r3
20091c68:	90cffc34 	orhi	r3,r18,16368
20091c6c:	8980112e 	bgeu	r17,r6,20091cb4 <__b2d+0x114>
20091c70:	81bffd17 	ldw	r6,-12(r16)
20091c74:	308cd83a 	srl	r6,r6,r2
20091c78:	2904983a 	sll	r2,r5,r4
20091c7c:	1184b03a 	or	r2,r2,r6
20091c80:	003fe706 	br	20091c20 <__flash_rwdata_start+0xffff5a9c>
20091c84:	20000526 	beq	r4,zero,20091c9c <__b2d+0xfc>
20091c88:	9124983a 	sll	r18,r18,r4
20091c8c:	000d883a 	mov	r6,zero
20091c90:	000b883a 	mov	r5,zero
20091c94:	90cffc34 	orhi	r3,r18,16368
20091c98:	003ff706 	br	20091c78 <__flash_rwdata_start+0xffff5af4>
20091c9c:	000b883a 	mov	r5,zero
20091ca0:	90cffc34 	orhi	r3,r18,16368
20091ca4:	2805883a 	mov	r2,r5
20091ca8:	003fdd06 	br	20091c20 <__flash_rwdata_start+0xffff5a9c>
20091cac:	000b883a 	mov	r5,zero
20091cb0:	003fd806 	br	20091c14 <__flash_rwdata_start+0xffff5a90>
20091cb4:	000d883a 	mov	r6,zero
20091cb8:	003fef06 	br	20091c78 <__flash_rwdata_start+0xffff5af4>

20091cbc <__d2b>:
20091cbc:	defff704 	addi	sp,sp,-36
20091cc0:	dc000215 	stw	r16,8(sp)
20091cc4:	3021883a 	mov	r16,r6
20091cc8:	dc400315 	stw	r17,12(sp)
20091ccc:	8022907a 	slli	r17,r16,1
20091cd0:	dd400715 	stw	r21,28(sp)
20091cd4:	282b883a 	mov	r21,r5
20091cd8:	01400044 	movi	r5,1
20091cdc:	dd000615 	stw	r20,24(sp)
20091ce0:	dcc00515 	stw	r19,20(sp)
20091ce4:	dc800415 	stw	r18,16(sp)
20091ce8:	dfc00815 	stw	ra,32(sp)
20091cec:	3829883a 	mov	r20,r7
20091cf0:	dc800917 	ldw	r18,36(sp)
20091cf4:	8822d57a 	srli	r17,r17,21
20091cf8:	00910740 	call	20091074 <_Balloc>
20091cfc:	1027883a 	mov	r19,r2
20091d00:	00800434 	movhi	r2,16
20091d04:	10bfffc4 	addi	r2,r2,-1
20091d08:	808c703a 	and	r6,r16,r2
20091d0c:	88000126 	beq	r17,zero,20091d14 <__d2b+0x58>
20091d10:	31800434 	orhi	r6,r6,16
20091d14:	d9800015 	stw	r6,0(sp)
20091d18:	a8001f26 	beq	r21,zero,20091d98 <__d2b+0xdc>
20091d1c:	d9000104 	addi	r4,sp,4
20091d20:	dd400115 	stw	r21,4(sp)
20091d24:	00913d00 	call	200913d0 <__lo0bits>
20091d28:	d8c00017 	ldw	r3,0(sp)
20091d2c:	1000291e 	bne	r2,zero,20091dd4 <__d2b+0x118>
20091d30:	d9000117 	ldw	r4,4(sp)
20091d34:	99000515 	stw	r4,20(r19)
20091d38:	1820c03a 	cmpne	r16,r3,zero
20091d3c:	84000044 	addi	r16,r16,1
20091d40:	98c00615 	stw	r3,24(r19)
20091d44:	9c000415 	stw	r16,16(r19)
20091d48:	88001b1e 	bne	r17,zero,20091db8 <__d2b+0xfc>
20091d4c:	800690ba 	slli	r3,r16,2
20091d50:	10bef384 	addi	r2,r2,-1074
20091d54:	a0800015 	stw	r2,0(r20)
20091d58:	98c5883a 	add	r2,r19,r3
20091d5c:	11000417 	ldw	r4,16(r2)
20091d60:	8020917a 	slli	r16,r16,5
20091d64:	00913680 	call	20091368 <__hi0bits>
20091d68:	8085c83a 	sub	r2,r16,r2
20091d6c:	90800015 	stw	r2,0(r18)
20091d70:	9805883a 	mov	r2,r19
20091d74:	dfc00817 	ldw	ra,32(sp)
20091d78:	dd400717 	ldw	r21,28(sp)
20091d7c:	dd000617 	ldw	r20,24(sp)
20091d80:	dcc00517 	ldw	r19,20(sp)
20091d84:	dc800417 	ldw	r18,16(sp)
20091d88:	dc400317 	ldw	r17,12(sp)
20091d8c:	dc000217 	ldw	r16,8(sp)
20091d90:	dec00904 	addi	sp,sp,36
20091d94:	f800283a 	ret
20091d98:	d809883a 	mov	r4,sp
20091d9c:	00913d00 	call	200913d0 <__lo0bits>
20091da0:	d8c00017 	ldw	r3,0(sp)
20091da4:	04000044 	movi	r16,1
20091da8:	9c000415 	stw	r16,16(r19)
20091dac:	98c00515 	stw	r3,20(r19)
20091db0:	10800804 	addi	r2,r2,32
20091db4:	883fe526 	beq	r17,zero,20091d4c <__flash_rwdata_start+0xffff5bc8>
20091db8:	8c7ef344 	addi	r17,r17,-1075
20091dbc:	88a3883a 	add	r17,r17,r2
20091dc0:	00c00d44 	movi	r3,53
20091dc4:	a4400015 	stw	r17,0(r20)
20091dc8:	1885c83a 	sub	r2,r3,r2
20091dcc:	90800015 	stw	r2,0(r18)
20091dd0:	003fe706 	br	20091d70 <__flash_rwdata_start+0xffff5bec>
20091dd4:	01000804 	movi	r4,32
20091dd8:	2089c83a 	sub	r4,r4,r2
20091ddc:	1908983a 	sll	r4,r3,r4
20091de0:	d9400117 	ldw	r5,4(sp)
20091de4:	1886d83a 	srl	r3,r3,r2
20091de8:	2148b03a 	or	r4,r4,r5
20091dec:	99000515 	stw	r4,20(r19)
20091df0:	d8c00015 	stw	r3,0(sp)
20091df4:	003fd006 	br	20091d38 <__flash_rwdata_start+0xffff5bb4>

20091df8 <__ratio>:
20091df8:	defff904 	addi	sp,sp,-28
20091dfc:	dc400315 	stw	r17,12(sp)
20091e00:	2823883a 	mov	r17,r5
20091e04:	d9400104 	addi	r5,sp,4
20091e08:	dfc00615 	stw	ra,24(sp)
20091e0c:	dcc00515 	stw	r19,20(sp)
20091e10:	dc800415 	stw	r18,16(sp)
20091e14:	2027883a 	mov	r19,r4
20091e18:	dc000215 	stw	r16,8(sp)
20091e1c:	0091ba00 	call	20091ba0 <__b2d>
20091e20:	8809883a 	mov	r4,r17
20091e24:	d80b883a 	mov	r5,sp
20091e28:	1025883a 	mov	r18,r2
20091e2c:	1821883a 	mov	r16,r3
20091e30:	0091ba00 	call	20091ba0 <__b2d>
20091e34:	8a400417 	ldw	r9,16(r17)
20091e38:	9a000417 	ldw	r8,16(r19)
20091e3c:	100d883a 	mov	r6,r2
20091e40:	d8800017 	ldw	r2,0(sp)
20091e44:	4251c83a 	sub	r8,r8,r9
20091e48:	4012917a 	slli	r9,r8,5
20091e4c:	da000117 	ldw	r8,4(sp)
20091e50:	4091c83a 	sub	r8,r8,r2
20091e54:	4251883a 	add	r8,r8,r9
20091e58:	02000d0e 	bge	zero,r8,20091e90 <__ratio+0x98>
20091e5c:	4010953a 	slli	r8,r8,20
20091e60:	4421883a 	add	r16,r8,r16
20091e64:	9009883a 	mov	r4,r18
20091e68:	800b883a 	mov	r5,r16
20091e6c:	180f883a 	mov	r7,r3
20091e70:	00878a00 	call	200878a0 <__divdf3>
20091e74:	dfc00617 	ldw	ra,24(sp)
20091e78:	dcc00517 	ldw	r19,20(sp)
20091e7c:	dc800417 	ldw	r18,16(sp)
20091e80:	dc400317 	ldw	r17,12(sp)
20091e84:	dc000217 	ldw	r16,8(sp)
20091e88:	dec00704 	addi	sp,sp,28
20091e8c:	f800283a 	ret
20091e90:	4010953a 	slli	r8,r8,20
20091e94:	1a07c83a 	sub	r3,r3,r8
20091e98:	003ff206 	br	20091e64 <__flash_rwdata_start+0xffff5ce0>

20091e9c <_mprec_log10>:
20091e9c:	defffe04 	addi	sp,sp,-8
20091ea0:	dc000015 	stw	r16,0(sp)
20091ea4:	dfc00115 	stw	ra,4(sp)
20091ea8:	008005c4 	movi	r2,23
20091eac:	2021883a 	mov	r16,r4
20091eb0:	11000d0e 	bge	r2,r4,20091ee8 <_mprec_log10+0x4c>
20091eb4:	0005883a 	mov	r2,zero
20091eb8:	00cffc34 	movhi	r3,16368
20091ebc:	843fffc4 	addi	r16,r16,-1
20091ec0:	1009883a 	mov	r4,r2
20091ec4:	180b883a 	mov	r5,r3
20091ec8:	000d883a 	mov	r6,zero
20091ecc:	01d00934 	movhi	r7,16420
20091ed0:	00965e40 	call	200965e4 <__muldf3>
20091ed4:	803ff91e 	bne	r16,zero,20091ebc <__flash_rwdata_start+0xffff5d38>
20091ed8:	dfc00117 	ldw	ra,4(sp)
20091edc:	dc000017 	ldw	r16,0(sp)
20091ee0:	dec00204 	addi	sp,sp,8
20091ee4:	f800283a 	ret
20091ee8:	202090fa 	slli	r16,r4,3
20091eec:	00800034 	movhi	r2,0
20091ef0:	10814604 	addi	r2,r2,1304
20091ef4:	1421883a 	add	r16,r2,r16
20091ef8:	80800017 	ldw	r2,0(r16)
20091efc:	80c00117 	ldw	r3,4(r16)
20091f00:	dfc00117 	ldw	ra,4(sp)
20091f04:	dc000017 	ldw	r16,0(sp)
20091f08:	dec00204 	addi	sp,sp,8
20091f0c:	f800283a 	ret

20091f10 <__copybits>:
20091f10:	297fffc4 	addi	r5,r5,-1
20091f14:	280fd17a 	srai	r7,r5,5
20091f18:	30c00417 	ldw	r3,16(r6)
20091f1c:	30800504 	addi	r2,r6,20
20091f20:	39c00044 	addi	r7,r7,1
20091f24:	18c7883a 	add	r3,r3,r3
20091f28:	39cf883a 	add	r7,r7,r7
20091f2c:	18c7883a 	add	r3,r3,r3
20091f30:	39cf883a 	add	r7,r7,r7
20091f34:	10c7883a 	add	r3,r2,r3
20091f38:	21cf883a 	add	r7,r4,r7
20091f3c:	10c00d2e 	bgeu	r2,r3,20091f74 <__copybits+0x64>
20091f40:	200b883a 	mov	r5,r4
20091f44:	12000017 	ldw	r8,0(r2)
20091f48:	29400104 	addi	r5,r5,4
20091f4c:	10800104 	addi	r2,r2,4
20091f50:	2a3fff15 	stw	r8,-4(r5)
20091f54:	10fffb36 	bltu	r2,r3,20091f44 <__flash_rwdata_start+0xffff5dc0>
20091f58:	1985c83a 	sub	r2,r3,r6
20091f5c:	10bffac4 	addi	r2,r2,-21
20091f60:	1004d0ba 	srli	r2,r2,2
20091f64:	10800044 	addi	r2,r2,1
20091f68:	1085883a 	add	r2,r2,r2
20091f6c:	1085883a 	add	r2,r2,r2
20091f70:	2089883a 	add	r4,r4,r2
20091f74:	21c0032e 	bgeu	r4,r7,20091f84 <__copybits+0x74>
20091f78:	20000015 	stw	zero,0(r4)
20091f7c:	21000104 	addi	r4,r4,4
20091f80:	21fffd36 	bltu	r4,r7,20091f78 <__flash_rwdata_start+0xffff5df4>
20091f84:	f800283a 	ret

20091f88 <__any_on>:
20091f88:	20c00417 	ldw	r3,16(r4)
20091f8c:	2805d17a 	srai	r2,r5,5
20091f90:	21000504 	addi	r4,r4,20
20091f94:	18800d0e 	bge	r3,r2,20091fcc <__any_on+0x44>
20091f98:	18c7883a 	add	r3,r3,r3
20091f9c:	18c7883a 	add	r3,r3,r3
20091fa0:	20c7883a 	add	r3,r4,r3
20091fa4:	20c0192e 	bgeu	r4,r3,2009200c <__any_on+0x84>
20091fa8:	18bfff17 	ldw	r2,-4(r3)
20091fac:	18ffff04 	addi	r3,r3,-4
20091fb0:	1000041e 	bne	r2,zero,20091fc4 <__any_on+0x3c>
20091fb4:	20c0142e 	bgeu	r4,r3,20092008 <__any_on+0x80>
20091fb8:	18ffff04 	addi	r3,r3,-4
20091fbc:	19400017 	ldw	r5,0(r3)
20091fc0:	283ffc26 	beq	r5,zero,20091fb4 <__flash_rwdata_start+0xffff5e30>
20091fc4:	00800044 	movi	r2,1
20091fc8:	f800283a 	ret
20091fcc:	10c00a0e 	bge	r2,r3,20091ff8 <__any_on+0x70>
20091fd0:	1085883a 	add	r2,r2,r2
20091fd4:	1085883a 	add	r2,r2,r2
20091fd8:	294007cc 	andi	r5,r5,31
20091fdc:	2087883a 	add	r3,r4,r2
20091fe0:	283ff026 	beq	r5,zero,20091fa4 <__flash_rwdata_start+0xffff5e20>
20091fe4:	19800017 	ldw	r6,0(r3)
20091fe8:	3144d83a 	srl	r2,r6,r5
20091fec:	114a983a 	sll	r5,r2,r5
20091ff0:	29bff41e 	bne	r5,r6,20091fc4 <__flash_rwdata_start+0xffff5e40>
20091ff4:	003feb06 	br	20091fa4 <__flash_rwdata_start+0xffff5e20>
20091ff8:	1085883a 	add	r2,r2,r2
20091ffc:	1085883a 	add	r2,r2,r2
20092000:	2087883a 	add	r3,r4,r2
20092004:	003fe706 	br	20091fa4 <__flash_rwdata_start+0xffff5e20>
20092008:	f800283a 	ret
2009200c:	0005883a 	mov	r2,zero
20092010:	f800283a 	ret

20092014 <_realloc_r>:
20092014:	defff604 	addi	sp,sp,-40
20092018:	dd000415 	stw	r20,16(sp)
2009201c:	dc400115 	stw	r17,4(sp)
20092020:	dfc00915 	stw	ra,36(sp)
20092024:	df000815 	stw	fp,32(sp)
20092028:	ddc00715 	stw	r23,28(sp)
2009202c:	dd800615 	stw	r22,24(sp)
20092030:	dd400515 	stw	r21,20(sp)
20092034:	dcc00315 	stw	r19,12(sp)
20092038:	dc800215 	stw	r18,8(sp)
2009203c:	dc000015 	stw	r16,0(sp)
20092040:	2829883a 	mov	r20,r5
20092044:	3023883a 	mov	r17,r6
20092048:	2800ad26 	beq	r5,zero,20092300 <_realloc_r+0x2ec>
2009204c:	2025883a 	mov	r18,r4
20092050:	009733c0 	call	2009733c <__malloc_lock>
20092054:	a0ffff17 	ldw	r3,-4(r20)
20092058:	043fff04 	movi	r16,-4
2009205c:	890002c4 	addi	r4,r17,11
20092060:	01c00584 	movi	r7,22
20092064:	a57ffe04 	addi	r21,r20,-8
20092068:	1c20703a 	and	r16,r3,r16
2009206c:	39001d2e 	bgeu	r7,r4,200920e4 <_realloc_r+0xd0>
20092070:	05bffe04 	movi	r22,-8
20092074:	25ac703a 	and	r22,r4,r22
20092078:	b00f883a 	mov	r7,r22
2009207c:	b0006516 	blt	r22,zero,20092214 <_realloc_r+0x200>
20092080:	b4406436 	bltu	r22,r17,20092214 <_realloc_r+0x200>
20092084:	81c01a0e 	bge	r16,r7,200920f0 <_realloc_r+0xdc>
20092088:	07000034 	movhi	fp,0
2009208c:	e7021a04 	addi	fp,fp,2152
20092090:	e1400217 	ldw	r5,8(fp)
20092094:	ac11883a 	add	r8,r21,r16
20092098:	2a006226 	beq	r5,r8,20092224 <_realloc_r+0x210>
2009209c:	41800117 	ldw	r6,4(r8)
200920a0:	027fff84 	movi	r9,-2
200920a4:	3252703a 	and	r9,r6,r9
200920a8:	4253883a 	add	r9,r8,r9
200920ac:	49000117 	ldw	r4,4(r9)
200920b0:	2100004c 	andi	r4,r4,1
200920b4:	2000281e 	bne	r4,zero,20092158 <_realloc_r+0x144>
200920b8:	00bfff04 	movi	r2,-4
200920bc:	3084703a 	and	r2,r6,r2
200920c0:	1409883a 	add	r4,r2,r16
200920c4:	21c05e16 	blt	r4,r7,20092240 <_realloc_r+0x22c>
200920c8:	40800317 	ldw	r2,12(r8)
200920cc:	41400217 	ldw	r5,8(r8)
200920d0:	a023883a 	mov	r17,r20
200920d4:	2021883a 	mov	r16,r4
200920d8:	28800315 	stw	r2,12(r5)
200920dc:	11400215 	stw	r5,8(r2)
200920e0:	00000406 	br	200920f4 <_realloc_r+0xe0>
200920e4:	01c00404 	movi	r7,16
200920e8:	382d883a 	mov	r22,r7
200920ec:	003fe406 	br	20092080 <__flash_rwdata_start+0xffff5efc>
200920f0:	a023883a 	mov	r17,r20
200920f4:	858fc83a 	sub	r7,r16,r22
200920f8:	008003c4 	movi	r2,15
200920fc:	18c0004c 	andi	r3,r3,1
20092100:	11c07236 	bltu	r2,r7,200922cc <_realloc_r+0x2b8>
20092104:	1c06b03a 	or	r3,r3,r16
20092108:	a8c00115 	stw	r3,4(r21)
2009210c:	ac21883a 	add	r16,r21,r16
20092110:	80800117 	ldw	r2,4(r16)
20092114:	10800054 	ori	r2,r2,1
20092118:	80800115 	stw	r2,4(r16)
2009211c:	9009883a 	mov	r4,r18
20092120:	009735c0 	call	2009735c <__malloc_unlock>
20092124:	8805883a 	mov	r2,r17
20092128:	dfc00917 	ldw	ra,36(sp)
2009212c:	df000817 	ldw	fp,32(sp)
20092130:	ddc00717 	ldw	r23,28(sp)
20092134:	dd800617 	ldw	r22,24(sp)
20092138:	dd400517 	ldw	r21,20(sp)
2009213c:	dd000417 	ldw	r20,16(sp)
20092140:	dcc00317 	ldw	r19,12(sp)
20092144:	dc800217 	ldw	r18,8(sp)
20092148:	dc400117 	ldw	r17,4(sp)
2009214c:	dc000017 	ldw	r16,0(sp)
20092150:	dec00a04 	addi	sp,sp,40
20092154:	f800283a 	ret
20092158:	18c0004c 	andi	r3,r3,1
2009215c:	1800081e 	bne	r3,zero,20092180 <_realloc_r+0x16c>
20092160:	a4fffe17 	ldw	r19,-8(r20)
20092164:	00bfff04 	movi	r2,-4
20092168:	ace7c83a 	sub	r19,r21,r19
2009216c:	98c00117 	ldw	r3,4(r19)
20092170:	1886703a 	and	r3,r3,r2
20092174:	98000226 	beq	r19,zero,20092180 <_realloc_r+0x16c>
20092178:	1c2f883a 	add	r23,r3,r16
2009217c:	b9c06d0e 	bge	r23,r7,20092334 <_realloc_r+0x320>
20092180:	880b883a 	mov	r5,r17
20092184:	9009883a 	mov	r4,r18
20092188:	008913c0 	call	2008913c <_malloc_r>
2009218c:	1023883a 	mov	r17,r2
20092190:	1000ef26 	beq	r2,zero,20092550 <_realloc_r+0x53c>
20092194:	a0ffff17 	ldw	r3,-4(r20)
20092198:	113ffe04 	addi	r4,r2,-8
2009219c:	00bfff84 	movi	r2,-2
200921a0:	1884703a 	and	r2,r3,r2
200921a4:	a885883a 	add	r2,r21,r2
200921a8:	2080bf26 	beq	r4,r2,200924a8 <_realloc_r+0x494>
200921ac:	81bfff04 	addi	r6,r16,-4
200921b0:	00800904 	movi	r2,36
200921b4:	11808936 	bltu	r2,r6,200923dc <_realloc_r+0x3c8>
200921b8:	00c004c4 	movi	r3,19
200921bc:	19806c2e 	bgeu	r3,r6,20092370 <_realloc_r+0x35c>
200921c0:	a0c00017 	ldw	r3,0(r20)
200921c4:	88c00015 	stw	r3,0(r17)
200921c8:	a0c00117 	ldw	r3,4(r20)
200921cc:	88c00115 	stw	r3,4(r17)
200921d0:	00c006c4 	movi	r3,27
200921d4:	1980ac36 	bltu	r3,r6,20092488 <_realloc_r+0x474>
200921d8:	88800204 	addi	r2,r17,8
200921dc:	a0c00204 	addi	r3,r20,8
200921e0:	19000017 	ldw	r4,0(r3)
200921e4:	11000015 	stw	r4,0(r2)
200921e8:	19000117 	ldw	r4,4(r3)
200921ec:	11000115 	stw	r4,4(r2)
200921f0:	18c00217 	ldw	r3,8(r3)
200921f4:	10c00215 	stw	r3,8(r2)
200921f8:	a00b883a 	mov	r5,r20
200921fc:	9009883a 	mov	r4,r18
20092200:	00902600 	call	20090260 <_free_r>
20092204:	9009883a 	mov	r4,r18
20092208:	009735c0 	call	2009735c <__malloc_unlock>
2009220c:	8805883a 	mov	r2,r17
20092210:	003fc506 	br	20092128 <__flash_rwdata_start+0xffff5fa4>
20092214:	00800304 	movi	r2,12
20092218:	90800015 	stw	r2,0(r18)
2009221c:	0005883a 	mov	r2,zero
20092220:	003fc106 	br	20092128 <__flash_rwdata_start+0xffff5fa4>
20092224:	29800117 	ldw	r6,4(r5)
20092228:	00bfff04 	movi	r2,-4
2009222c:	b1000404 	addi	r4,r22,16
20092230:	3084703a 	and	r2,r6,r2
20092234:	140d883a 	add	r6,r2,r16
20092238:	31005b0e 	bge	r6,r4,200923a8 <_realloc_r+0x394>
2009223c:	2811883a 	mov	r8,r5
20092240:	18c0004c 	andi	r3,r3,1
20092244:	183fce1e 	bne	r3,zero,20092180 <__flash_rwdata_start+0xffff5ffc>
20092248:	a4fffe17 	ldw	r19,-8(r20)
2009224c:	00ffff04 	movi	r3,-4
20092250:	ace7c83a 	sub	r19,r21,r19
20092254:	99000117 	ldw	r4,4(r19)
20092258:	20c6703a 	and	r3,r4,r3
2009225c:	403fc526 	beq	r8,zero,20092174 <__flash_rwdata_start+0xffff5ff0>
20092260:	1c2f883a 	add	r23,r3,r16
20092264:	b8af883a 	add	r23,r23,r2
20092268:	41406026 	beq	r8,r5,200923ec <_realloc_r+0x3d8>
2009226c:	b9ffc116 	blt	r23,r7,20092174 <__flash_rwdata_start+0xffff5ff0>
20092270:	40c00217 	ldw	r3,8(r8)
20092274:	40800317 	ldw	r2,12(r8)
20092278:	81bfff04 	addi	r6,r16,-4
2009227c:	01000904 	movi	r4,36
20092280:	18800315 	stw	r2,12(r3)
20092284:	10c00215 	stw	r3,8(r2)
20092288:	99400217 	ldw	r5,8(r19)
2009228c:	98c00317 	ldw	r3,12(r19)
20092290:	9c400204 	addi	r17,r19,8
20092294:	28c00315 	stw	r3,12(r5)
20092298:	19400215 	stw	r5,8(r3)
2009229c:	21802d36 	bltu	r4,r6,20092354 <_realloc_r+0x340>
200922a0:	008004c4 	movi	r2,19
200922a4:	1180352e 	bgeu	r2,r6,2009237c <_realloc_r+0x368>
200922a8:	a0800017 	ldw	r2,0(r20)
200922ac:	98800215 	stw	r2,8(r19)
200922b0:	a0800117 	ldw	r2,4(r20)
200922b4:	98800315 	stw	r2,12(r19)
200922b8:	008006c4 	movi	r2,27
200922bc:	11808036 	bltu	r2,r6,200924c0 <_realloc_r+0x4ac>
200922c0:	98c00404 	addi	r3,r19,16
200922c4:	a5000204 	addi	r20,r20,8
200922c8:	00002d06 	br	20092380 <_realloc_r+0x36c>
200922cc:	1d86b03a 	or	r3,r3,r22
200922d0:	ad8b883a 	add	r5,r21,r22
200922d4:	a8c00115 	stw	r3,4(r21)
200922d8:	38800054 	ori	r2,r7,1
200922dc:	28800115 	stw	r2,4(r5)
200922e0:	29cf883a 	add	r7,r5,r7
200922e4:	38800117 	ldw	r2,4(r7)
200922e8:	9009883a 	mov	r4,r18
200922ec:	29400204 	addi	r5,r5,8
200922f0:	10800054 	ori	r2,r2,1
200922f4:	38800115 	stw	r2,4(r7)
200922f8:	00902600 	call	20090260 <_free_r>
200922fc:	003f8706 	br	2009211c <__flash_rwdata_start+0xffff5f98>
20092300:	300b883a 	mov	r5,r6
20092304:	dfc00917 	ldw	ra,36(sp)
20092308:	df000817 	ldw	fp,32(sp)
2009230c:	ddc00717 	ldw	r23,28(sp)
20092310:	dd800617 	ldw	r22,24(sp)
20092314:	dd400517 	ldw	r21,20(sp)
20092318:	dd000417 	ldw	r20,16(sp)
2009231c:	dcc00317 	ldw	r19,12(sp)
20092320:	dc800217 	ldw	r18,8(sp)
20092324:	dc400117 	ldw	r17,4(sp)
20092328:	dc000017 	ldw	r16,0(sp)
2009232c:	dec00a04 	addi	sp,sp,40
20092330:	008913c1 	jmpi	2008913c <_malloc_r>
20092334:	98800317 	ldw	r2,12(r19)
20092338:	98c00217 	ldw	r3,8(r19)
2009233c:	81bfff04 	addi	r6,r16,-4
20092340:	01000904 	movi	r4,36
20092344:	18800315 	stw	r2,12(r3)
20092348:	10c00215 	stw	r3,8(r2)
2009234c:	9c400204 	addi	r17,r19,8
20092350:	21bfd32e 	bgeu	r4,r6,200922a0 <__flash_rwdata_start+0xffff611c>
20092354:	8809883a 	mov	r4,r17
20092358:	a00b883a 	mov	r5,r20
2009235c:	0090f180 	call	20090f18 <memmove>
20092360:	98c00117 	ldw	r3,4(r19)
20092364:	b821883a 	mov	r16,r23
20092368:	982b883a 	mov	r21,r19
2009236c:	003f6106 	br	200920f4 <__flash_rwdata_start+0xffff5f70>
20092370:	8805883a 	mov	r2,r17
20092374:	a007883a 	mov	r3,r20
20092378:	003f9906 	br	200921e0 <__flash_rwdata_start+0xffff605c>
2009237c:	8807883a 	mov	r3,r17
20092380:	a0800017 	ldw	r2,0(r20)
20092384:	b821883a 	mov	r16,r23
20092388:	982b883a 	mov	r21,r19
2009238c:	18800015 	stw	r2,0(r3)
20092390:	a0800117 	ldw	r2,4(r20)
20092394:	18800115 	stw	r2,4(r3)
20092398:	a0800217 	ldw	r2,8(r20)
2009239c:	18800215 	stw	r2,8(r3)
200923a0:	98c00117 	ldw	r3,4(r19)
200923a4:	003f5306 	br	200920f4 <__flash_rwdata_start+0xffff5f70>
200923a8:	adab883a 	add	r21,r21,r22
200923ac:	3585c83a 	sub	r2,r6,r22
200923b0:	e5400215 	stw	r21,8(fp)
200923b4:	10800054 	ori	r2,r2,1
200923b8:	a8800115 	stw	r2,4(r21)
200923bc:	a0bfff17 	ldw	r2,-4(r20)
200923c0:	9009883a 	mov	r4,r18
200923c4:	1080004c 	andi	r2,r2,1
200923c8:	b0acb03a 	or	r22,r22,r2
200923cc:	a5bfff15 	stw	r22,-4(r20)
200923d0:	009735c0 	call	2009735c <__malloc_unlock>
200923d4:	a005883a 	mov	r2,r20
200923d8:	003f5306 	br	20092128 <__flash_rwdata_start+0xffff5fa4>
200923dc:	8809883a 	mov	r4,r17
200923e0:	a00b883a 	mov	r5,r20
200923e4:	0090f180 	call	20090f18 <memmove>
200923e8:	003f8306 	br	200921f8 <__flash_rwdata_start+0xffff6074>
200923ec:	b0800404 	addi	r2,r22,16
200923f0:	b8bf6016 	blt	r23,r2,20092174 <__flash_rwdata_start+0xffff5ff0>
200923f4:	98800317 	ldw	r2,12(r19)
200923f8:	98c00217 	ldw	r3,8(r19)
200923fc:	81bfff04 	addi	r6,r16,-4
20092400:	01000904 	movi	r4,36
20092404:	18800315 	stw	r2,12(r3)
20092408:	10c00215 	stw	r3,8(r2)
2009240c:	9c400204 	addi	r17,r19,8
20092410:	21804336 	bltu	r4,r6,20092520 <_realloc_r+0x50c>
20092414:	008004c4 	movi	r2,19
20092418:	11803f2e 	bgeu	r2,r6,20092518 <_realloc_r+0x504>
2009241c:	a0800017 	ldw	r2,0(r20)
20092420:	98800215 	stw	r2,8(r19)
20092424:	a0800117 	ldw	r2,4(r20)
20092428:	98800315 	stw	r2,12(r19)
2009242c:	008006c4 	movi	r2,27
20092430:	11803f36 	bltu	r2,r6,20092530 <_realloc_r+0x51c>
20092434:	98800404 	addi	r2,r19,16
20092438:	a5000204 	addi	r20,r20,8
2009243c:	a0c00017 	ldw	r3,0(r20)
20092440:	10c00015 	stw	r3,0(r2)
20092444:	a0c00117 	ldw	r3,4(r20)
20092448:	10c00115 	stw	r3,4(r2)
2009244c:	a0c00217 	ldw	r3,8(r20)
20092450:	10c00215 	stw	r3,8(r2)
20092454:	9d87883a 	add	r3,r19,r22
20092458:	bd85c83a 	sub	r2,r23,r22
2009245c:	e0c00215 	stw	r3,8(fp)
20092460:	10800054 	ori	r2,r2,1
20092464:	18800115 	stw	r2,4(r3)
20092468:	98800117 	ldw	r2,4(r19)
2009246c:	9009883a 	mov	r4,r18
20092470:	1080004c 	andi	r2,r2,1
20092474:	b0acb03a 	or	r22,r22,r2
20092478:	9d800115 	stw	r22,4(r19)
2009247c:	009735c0 	call	2009735c <__malloc_unlock>
20092480:	8805883a 	mov	r2,r17
20092484:	003f2806 	br	20092128 <__flash_rwdata_start+0xffff5fa4>
20092488:	a0c00217 	ldw	r3,8(r20)
2009248c:	88c00215 	stw	r3,8(r17)
20092490:	a0c00317 	ldw	r3,12(r20)
20092494:	88c00315 	stw	r3,12(r17)
20092498:	30801126 	beq	r6,r2,200924e0 <_realloc_r+0x4cc>
2009249c:	88800404 	addi	r2,r17,16
200924a0:	a0c00404 	addi	r3,r20,16
200924a4:	003f4e06 	br	200921e0 <__flash_rwdata_start+0xffff605c>
200924a8:	893fff17 	ldw	r4,-4(r17)
200924ac:	00bfff04 	movi	r2,-4
200924b0:	a023883a 	mov	r17,r20
200924b4:	2084703a 	and	r2,r4,r2
200924b8:	80a1883a 	add	r16,r16,r2
200924bc:	003f0d06 	br	200920f4 <__flash_rwdata_start+0xffff5f70>
200924c0:	a0800217 	ldw	r2,8(r20)
200924c4:	98800415 	stw	r2,16(r19)
200924c8:	a0800317 	ldw	r2,12(r20)
200924cc:	98800515 	stw	r2,20(r19)
200924d0:	31000a26 	beq	r6,r4,200924fc <_realloc_r+0x4e8>
200924d4:	98c00604 	addi	r3,r19,24
200924d8:	a5000404 	addi	r20,r20,16
200924dc:	003fa806 	br	20092380 <__flash_rwdata_start+0xffff61fc>
200924e0:	a1000417 	ldw	r4,16(r20)
200924e4:	88800604 	addi	r2,r17,24
200924e8:	a0c00604 	addi	r3,r20,24
200924ec:	89000415 	stw	r4,16(r17)
200924f0:	a1000517 	ldw	r4,20(r20)
200924f4:	89000515 	stw	r4,20(r17)
200924f8:	003f3906 	br	200921e0 <__flash_rwdata_start+0xffff605c>
200924fc:	a0800417 	ldw	r2,16(r20)
20092500:	a5000604 	addi	r20,r20,24
20092504:	98c00804 	addi	r3,r19,32
20092508:	98800615 	stw	r2,24(r19)
2009250c:	a0bfff17 	ldw	r2,-4(r20)
20092510:	98800715 	stw	r2,28(r19)
20092514:	003f9a06 	br	20092380 <__flash_rwdata_start+0xffff61fc>
20092518:	8805883a 	mov	r2,r17
2009251c:	003fc706 	br	2009243c <__flash_rwdata_start+0xffff62b8>
20092520:	8809883a 	mov	r4,r17
20092524:	a00b883a 	mov	r5,r20
20092528:	0090f180 	call	20090f18 <memmove>
2009252c:	003fc906 	br	20092454 <__flash_rwdata_start+0xffff62d0>
20092530:	a0800217 	ldw	r2,8(r20)
20092534:	98800415 	stw	r2,16(r19)
20092538:	a0800317 	ldw	r2,12(r20)
2009253c:	98800515 	stw	r2,20(r19)
20092540:	31000726 	beq	r6,r4,20092560 <_realloc_r+0x54c>
20092544:	98800604 	addi	r2,r19,24
20092548:	a5000404 	addi	r20,r20,16
2009254c:	003fbb06 	br	2009243c <__flash_rwdata_start+0xffff62b8>
20092550:	9009883a 	mov	r4,r18
20092554:	009735c0 	call	2009735c <__malloc_unlock>
20092558:	0005883a 	mov	r2,zero
2009255c:	003ef206 	br	20092128 <__flash_rwdata_start+0xffff5fa4>
20092560:	a0c00417 	ldw	r3,16(r20)
20092564:	a5000604 	addi	r20,r20,24
20092568:	98800804 	addi	r2,r19,32
2009256c:	98c00615 	stw	r3,24(r19)
20092570:	a0ffff17 	ldw	r3,-4(r20)
20092574:	98c00715 	stw	r3,28(r19)
20092578:	003fb006 	br	2009243c <__flash_rwdata_start+0xffff62b8>

2009257c <__fpclassifyd>:
2009257c:	00a00034 	movhi	r2,32768
20092580:	10bfffc4 	addi	r2,r2,-1
20092584:	2884703a 	and	r2,r5,r2
20092588:	10000726 	beq	r2,zero,200925a8 <__fpclassifyd+0x2c>
2009258c:	00fffc34 	movhi	r3,65520
20092590:	019ff834 	movhi	r6,32736
20092594:	28c7883a 	add	r3,r5,r3
20092598:	31bfffc4 	addi	r6,r6,-1
2009259c:	30c00536 	bltu	r6,r3,200925b4 <__fpclassifyd+0x38>
200925a0:	00800104 	movi	r2,4
200925a4:	f800283a 	ret
200925a8:	2000021e 	bne	r4,zero,200925b4 <__fpclassifyd+0x38>
200925ac:	00800084 	movi	r2,2
200925b0:	f800283a 	ret
200925b4:	00dffc34 	movhi	r3,32752
200925b8:	019ff834 	movhi	r6,32736
200925bc:	28cb883a 	add	r5,r5,r3
200925c0:	31bfffc4 	addi	r6,r6,-1
200925c4:	317ff62e 	bgeu	r6,r5,200925a0 <__flash_rwdata_start+0xffff641c>
200925c8:	01400434 	movhi	r5,16
200925cc:	297fffc4 	addi	r5,r5,-1
200925d0:	28800236 	bltu	r5,r2,200925dc <__fpclassifyd+0x60>
200925d4:	008000c4 	movi	r2,3
200925d8:	f800283a 	ret
200925dc:	10c00226 	beq	r2,r3,200925e8 <__fpclassifyd+0x6c>
200925e0:	0005883a 	mov	r2,zero
200925e4:	f800283a 	ret
200925e8:	2005003a 	cmpeq	r2,r4,zero
200925ec:	f800283a 	ret

200925f0 <__sread>:
200925f0:	defffe04 	addi	sp,sp,-8
200925f4:	dc000015 	stw	r16,0(sp)
200925f8:	2821883a 	mov	r16,r5
200925fc:	2940038f 	ldh	r5,14(r5)
20092600:	dfc00115 	stw	ra,4(sp)
20092604:	00954b80 	call	200954b8 <_read_r>
20092608:	10000716 	blt	r2,zero,20092628 <__sread+0x38>
2009260c:	80c01417 	ldw	r3,80(r16)
20092610:	1887883a 	add	r3,r3,r2
20092614:	80c01415 	stw	r3,80(r16)
20092618:	dfc00117 	ldw	ra,4(sp)
2009261c:	dc000017 	ldw	r16,0(sp)
20092620:	dec00204 	addi	sp,sp,8
20092624:	f800283a 	ret
20092628:	80c0030b 	ldhu	r3,12(r16)
2009262c:	18fbffcc 	andi	r3,r3,61439
20092630:	80c0030d 	sth	r3,12(r16)
20092634:	dfc00117 	ldw	ra,4(sp)
20092638:	dc000017 	ldw	r16,0(sp)
2009263c:	dec00204 	addi	sp,sp,8
20092640:	f800283a 	ret

20092644 <__seofread>:
20092644:	0005883a 	mov	r2,zero
20092648:	f800283a 	ret

2009264c <__swrite>:
2009264c:	2880030b 	ldhu	r2,12(r5)
20092650:	defffb04 	addi	sp,sp,-20
20092654:	dcc00315 	stw	r19,12(sp)
20092658:	dc800215 	stw	r18,8(sp)
2009265c:	dc400115 	stw	r17,4(sp)
20092660:	dc000015 	stw	r16,0(sp)
20092664:	dfc00415 	stw	ra,16(sp)
20092668:	10c0400c 	andi	r3,r2,256
2009266c:	2821883a 	mov	r16,r5
20092670:	2027883a 	mov	r19,r4
20092674:	3025883a 	mov	r18,r6
20092678:	3823883a 	mov	r17,r7
2009267c:	18000526 	beq	r3,zero,20092694 <__swrite+0x48>
20092680:	2940038f 	ldh	r5,14(r5)
20092684:	000d883a 	mov	r6,zero
20092688:	01c00084 	movi	r7,2
2009268c:	009545c0 	call	2009545c <_lseek_r>
20092690:	8080030b 	ldhu	r2,12(r16)
20092694:	8140038f 	ldh	r5,14(r16)
20092698:	10bbffcc 	andi	r2,r2,61439
2009269c:	9809883a 	mov	r4,r19
200926a0:	900d883a 	mov	r6,r18
200926a4:	880f883a 	mov	r7,r17
200926a8:	8080030d 	sth	r2,12(r16)
200926ac:	dfc00417 	ldw	ra,16(sp)
200926b0:	dcc00317 	ldw	r19,12(sp)
200926b4:	dc800217 	ldw	r18,8(sp)
200926b8:	dc400117 	ldw	r17,4(sp)
200926bc:	dc000017 	ldw	r16,0(sp)
200926c0:	dec00504 	addi	sp,sp,20
200926c4:	0094f581 	jmpi	20094f58 <_write_r>

200926c8 <__sseek>:
200926c8:	defffe04 	addi	sp,sp,-8
200926cc:	dc000015 	stw	r16,0(sp)
200926d0:	2821883a 	mov	r16,r5
200926d4:	2940038f 	ldh	r5,14(r5)
200926d8:	dfc00115 	stw	ra,4(sp)
200926dc:	009545c0 	call	2009545c <_lseek_r>
200926e0:	00ffffc4 	movi	r3,-1
200926e4:	10c00826 	beq	r2,r3,20092708 <__sseek+0x40>
200926e8:	80c0030b 	ldhu	r3,12(r16)
200926ec:	80801415 	stw	r2,80(r16)
200926f0:	18c40014 	ori	r3,r3,4096
200926f4:	80c0030d 	sth	r3,12(r16)
200926f8:	dfc00117 	ldw	ra,4(sp)
200926fc:	dc000017 	ldw	r16,0(sp)
20092700:	dec00204 	addi	sp,sp,8
20092704:	f800283a 	ret
20092708:	80c0030b 	ldhu	r3,12(r16)
2009270c:	18fbffcc 	andi	r3,r3,61439
20092710:	80c0030d 	sth	r3,12(r16)
20092714:	dfc00117 	ldw	ra,4(sp)
20092718:	dc000017 	ldw	r16,0(sp)
2009271c:	dec00204 	addi	sp,sp,8
20092720:	f800283a 	ret

20092724 <__sclose>:
20092724:	2940038f 	ldh	r5,14(r5)
20092728:	0094fb41 	jmpi	20094fb4 <_close_r>

2009272c <strchr>:
2009272c:	2ac03fcc 	andi	r11,r5,255
20092730:	2815883a 	mov	r10,r5
20092734:	208000cc 	andi	r2,r4,3
20092738:	58003726 	beq	r11,zero,20092818 <strchr+0xec>
2009273c:	10000b26 	beq	r2,zero,2009276c <strchr+0x40>
20092740:	20800003 	ldbu	r2,0(r4)
20092744:	10003226 	beq	r2,zero,20092810 <strchr+0xe4>
20092748:	28c03fcc 	andi	r3,r5,255
2009274c:	5880041e 	bne	r11,r2,20092760 <strchr+0x34>
20092750:	00004d06 	br	20092888 <strchr+0x15c>
20092754:	20800003 	ldbu	r2,0(r4)
20092758:	10002d26 	beq	r2,zero,20092810 <strchr+0xe4>
2009275c:	18804a26 	beq	r3,r2,20092888 <strchr+0x15c>
20092760:	21000044 	addi	r4,r4,1
20092764:	208000cc 	andi	r2,r4,3
20092768:	103ffa1e 	bne	r2,zero,20092754 <__flash_rwdata_start+0xffff65d0>
2009276c:	29403fcc 	andi	r5,r5,255
20092770:	280e923a 	slli	r7,r5,8
20092774:	20800017 	ldw	r2,0(r4)
20092778:	01bfbff4 	movhi	r6,65279
2009277c:	394ab03a 	or	r5,r7,r5
20092780:	280e943a 	slli	r7,r5,16
20092784:	31bfbfc4 	addi	r6,r6,-257
20092788:	0090303a 	nor	r8,zero,r2
2009278c:	394eb03a 	or	r7,r7,r5
20092790:	1187883a 	add	r3,r2,r6
20092794:	11c4f03a 	xor	r2,r2,r7
20092798:	008a303a 	nor	r5,zero,r2
2009279c:	1185883a 	add	r2,r2,r6
200927a0:	03202074 	movhi	r12,32897
200927a4:	2884703a 	and	r2,r5,r2
200927a8:	40c6703a 	and	r3,r8,r3
200927ac:	63202004 	addi	r12,r12,-32640
200927b0:	10c4b03a 	or	r2,r2,r3
200927b4:	1304703a 	and	r2,r2,r12
200927b8:	10000c1e 	bne	r2,zero,200927ec <strchr+0xc0>
200927bc:	21000104 	addi	r4,r4,4
200927c0:	20800017 	ldw	r2,0(r4)
200927c4:	3886f03a 	xor	r3,r7,r2
200927c8:	00d2303a 	nor	r9,zero,r3
200927cc:	198b883a 	add	r5,r3,r6
200927d0:	0090303a 	nor	r8,zero,r2
200927d4:	1187883a 	add	r3,r2,r6
200927d8:	494a703a 	and	r5,r9,r5
200927dc:	40c4703a 	and	r2,r8,r3
200927e0:	2884b03a 	or	r2,r5,r2
200927e4:	1304703a 	and	r2,r2,r12
200927e8:	103ff426 	beq	r2,zero,200927bc <__flash_rwdata_start+0xffff6638>
200927ec:	20800003 	ldbu	r2,0(r4)
200927f0:	10000726 	beq	r2,zero,20092810 <strchr+0xe4>
200927f4:	58802426 	beq	r11,r2,20092888 <strchr+0x15c>
200927f8:	50c03fcc 	andi	r3,r10,255
200927fc:	00000106 	br	20092804 <strchr+0xd8>
20092800:	18802126 	beq	r3,r2,20092888 <strchr+0x15c>
20092804:	21000044 	addi	r4,r4,1
20092808:	20800003 	ldbu	r2,0(r4)
2009280c:	103ffc1e 	bne	r2,zero,20092800 <__flash_rwdata_start+0xffff667c>
20092810:	0005883a 	mov	r2,zero
20092814:	f800283a 	ret
20092818:	10000526 	beq	r2,zero,20092830 <strchr+0x104>
2009281c:	20800003 	ldbu	r2,0(r4)
20092820:	10001926 	beq	r2,zero,20092888 <strchr+0x15c>
20092824:	21000044 	addi	r4,r4,1
20092828:	208000cc 	andi	r2,r4,3
2009282c:	103ffb1e 	bne	r2,zero,2009281c <__flash_rwdata_start+0xffff6698>
20092830:	20800017 	ldw	r2,0(r4)
20092834:	01bfbff4 	movhi	r6,65279
20092838:	31bfbfc4 	addi	r6,r6,-257
2009283c:	0086303a 	nor	r3,zero,r2
20092840:	01602074 	movhi	r5,32897
20092844:	1185883a 	add	r2,r2,r6
20092848:	29602004 	addi	r5,r5,-32640
2009284c:	10c4703a 	and	r2,r2,r3
20092850:	1144703a 	and	r2,r2,r5
20092854:	10000a1e 	bne	r2,zero,20092880 <strchr+0x154>
20092858:	21000104 	addi	r4,r4,4
2009285c:	20800017 	ldw	r2,0(r4)
20092860:	1187883a 	add	r3,r2,r6
20092864:	0084303a 	nor	r2,zero,r2
20092868:	1884703a 	and	r2,r3,r2
2009286c:	1144703a 	and	r2,r2,r5
20092870:	103ff926 	beq	r2,zero,20092858 <__flash_rwdata_start+0xffff66d4>
20092874:	20800003 	ldbu	r2,0(r4)
20092878:	10000326 	beq	r2,zero,20092888 <strchr+0x15c>
2009287c:	21000044 	addi	r4,r4,1
20092880:	20800003 	ldbu	r2,0(r4)
20092884:	103ffd1e 	bne	r2,zero,2009287c <__flash_rwdata_start+0xffff66f8>
20092888:	2005883a 	mov	r2,r4
2009288c:	f800283a 	ret

20092890 <__ssprint_r>:
20092890:	30800217 	ldw	r2,8(r6)
20092894:	defff604 	addi	sp,sp,-40
20092898:	ddc00715 	stw	r23,28(sp)
2009289c:	dc800215 	stw	r18,8(sp)
200928a0:	dfc00915 	stw	ra,36(sp)
200928a4:	df000815 	stw	fp,32(sp)
200928a8:	dd800615 	stw	r22,24(sp)
200928ac:	dd400515 	stw	r21,20(sp)
200928b0:	dd000415 	stw	r20,16(sp)
200928b4:	dcc00315 	stw	r19,12(sp)
200928b8:	dc400115 	stw	r17,4(sp)
200928bc:	dc000015 	stw	r16,0(sp)
200928c0:	3025883a 	mov	r18,r6
200928c4:	35c00017 	ldw	r23,0(r6)
200928c8:	10005626 	beq	r2,zero,20092a24 <__ssprint_r+0x194>
200928cc:	2027883a 	mov	r19,r4
200928d0:	28800217 	ldw	r2,8(r5)
200928d4:	29000017 	ldw	r4,0(r5)
200928d8:	2823883a 	mov	r17,r5
200928dc:	0039883a 	mov	fp,zero
200928e0:	0021883a 	mov	r16,zero
200928e4:	80003926 	beq	r16,zero,200929cc <__ssprint_r+0x13c>
200928e8:	102b883a 	mov	r21,r2
200928ec:	102d883a 	mov	r22,r2
200928f0:	80803a36 	bltu	r16,r2,200929dc <__ssprint_r+0x14c>
200928f4:	88c0030b 	ldhu	r3,12(r17)
200928f8:	1881200c 	andi	r2,r3,1152
200928fc:	10002626 	beq	r2,zero,20092998 <__ssprint_r+0x108>
20092900:	88800517 	ldw	r2,20(r17)
20092904:	89400417 	ldw	r5,16(r17)
20092908:	81c00044 	addi	r7,r16,1
2009290c:	108d883a 	add	r6,r2,r2
20092910:	3085883a 	add	r2,r6,r2
20092914:	100cd7fa 	srli	r6,r2,31
20092918:	216dc83a 	sub	r22,r4,r5
2009291c:	3d89883a 	add	r4,r7,r22
20092920:	3085883a 	add	r2,r6,r2
20092924:	102bd07a 	srai	r21,r2,1
20092928:	a80d883a 	mov	r6,r21
2009292c:	a900022e 	bgeu	r21,r4,20092938 <__ssprint_r+0xa8>
20092930:	202b883a 	mov	r21,r4
20092934:	200d883a 	mov	r6,r4
20092938:	18c1000c 	andi	r3,r3,1024
2009293c:	9809883a 	mov	r4,r19
20092940:	18002926 	beq	r3,zero,200929e8 <__ssprint_r+0x158>
20092944:	300b883a 	mov	r5,r6
20092948:	008913c0 	call	2008913c <_malloc_r>
2009294c:	1029883a 	mov	r20,r2
20092950:	10002b26 	beq	r2,zero,20092a00 <__ssprint_r+0x170>
20092954:	89400417 	ldw	r5,16(r17)
20092958:	1009883a 	mov	r4,r2
2009295c:	b00d883a 	mov	r6,r22
20092960:	00899600 	call	20089960 <memcpy>
20092964:	8880030b 	ldhu	r2,12(r17)
20092968:	00fedfc4 	movi	r3,-1153
2009296c:	10c4703a 	and	r2,r2,r3
20092970:	10802014 	ori	r2,r2,128
20092974:	8880030d 	sth	r2,12(r17)
20092978:	a589883a 	add	r4,r20,r22
2009297c:	adadc83a 	sub	r22,r21,r22
20092980:	8d400515 	stw	r21,20(r17)
20092984:	8d800215 	stw	r22,8(r17)
20092988:	8d000415 	stw	r20,16(r17)
2009298c:	89000015 	stw	r4,0(r17)
20092990:	802b883a 	mov	r21,r16
20092994:	802d883a 	mov	r22,r16
20092998:	e00b883a 	mov	r5,fp
2009299c:	b00d883a 	mov	r6,r22
200929a0:	0090f180 	call	20090f18 <memmove>
200929a4:	88800217 	ldw	r2,8(r17)
200929a8:	89000017 	ldw	r4,0(r17)
200929ac:	90c00217 	ldw	r3,8(r18)
200929b0:	1545c83a 	sub	r2,r2,r21
200929b4:	2589883a 	add	r4,r4,r22
200929b8:	88800215 	stw	r2,8(r17)
200929bc:	89000015 	stw	r4,0(r17)
200929c0:	1c21c83a 	sub	r16,r3,r16
200929c4:	94000215 	stw	r16,8(r18)
200929c8:	80001626 	beq	r16,zero,20092a24 <__ssprint_r+0x194>
200929cc:	bf000017 	ldw	fp,0(r23)
200929d0:	bc000117 	ldw	r16,4(r23)
200929d4:	bdc00204 	addi	r23,r23,8
200929d8:	003fc206 	br	200928e4 <__flash_rwdata_start+0xffff6760>
200929dc:	802b883a 	mov	r21,r16
200929e0:	802d883a 	mov	r22,r16
200929e4:	003fec06 	br	20092998 <__flash_rwdata_start+0xffff6814>
200929e8:	00920140 	call	20092014 <_realloc_r>
200929ec:	1029883a 	mov	r20,r2
200929f0:	103fe11e 	bne	r2,zero,20092978 <__flash_rwdata_start+0xffff67f4>
200929f4:	89400417 	ldw	r5,16(r17)
200929f8:	9809883a 	mov	r4,r19
200929fc:	00902600 	call	20090260 <_free_r>
20092a00:	88c0030b 	ldhu	r3,12(r17)
20092a04:	00800304 	movi	r2,12
20092a08:	98800015 	stw	r2,0(r19)
20092a0c:	18c01014 	ori	r3,r3,64
20092a10:	88c0030d 	sth	r3,12(r17)
20092a14:	00bfffc4 	movi	r2,-1
20092a18:	90000215 	stw	zero,8(r18)
20092a1c:	90000115 	stw	zero,4(r18)
20092a20:	00000206 	br	20092a2c <__ssprint_r+0x19c>
20092a24:	90000115 	stw	zero,4(r18)
20092a28:	0005883a 	mov	r2,zero
20092a2c:	dfc00917 	ldw	ra,36(sp)
20092a30:	df000817 	ldw	fp,32(sp)
20092a34:	ddc00717 	ldw	r23,28(sp)
20092a38:	dd800617 	ldw	r22,24(sp)
20092a3c:	dd400517 	ldw	r21,20(sp)
20092a40:	dd000417 	ldw	r20,16(sp)
20092a44:	dcc00317 	ldw	r19,12(sp)
20092a48:	dc800217 	ldw	r18,8(sp)
20092a4c:	dc400117 	ldw	r17,4(sp)
20092a50:	dc000017 	ldw	r16,0(sp)
20092a54:	dec00a04 	addi	sp,sp,40
20092a58:	f800283a 	ret

20092a5c <___svfiprintf_internal_r>:
20092a5c:	2880030b 	ldhu	r2,12(r5)
20092a60:	deffc904 	addi	sp,sp,-220
20092a64:	dd403215 	stw	r21,200(sp)
20092a68:	dfc03615 	stw	ra,216(sp)
20092a6c:	df003515 	stw	fp,212(sp)
20092a70:	ddc03415 	stw	r23,208(sp)
20092a74:	dd803315 	stw	r22,204(sp)
20092a78:	dd003115 	stw	r20,196(sp)
20092a7c:	dcc03015 	stw	r19,192(sp)
20092a80:	dc802f15 	stw	r18,188(sp)
20092a84:	dc402e15 	stw	r17,184(sp)
20092a88:	dc002d15 	stw	r16,180(sp)
20092a8c:	d9402715 	stw	r5,156(sp)
20092a90:	d9002915 	stw	r4,164(sp)
20092a94:	1080200c 	andi	r2,r2,128
20092a98:	d9c02315 	stw	r7,140(sp)
20092a9c:	302b883a 	mov	r21,r6
20092aa0:	10000226 	beq	r2,zero,20092aac <___svfiprintf_internal_r+0x50>
20092aa4:	28800417 	ldw	r2,16(r5)
20092aa8:	1003ce26 	beq	r2,zero,200939e4 <___svfiprintf_internal_r+0xf88>
20092aac:	dac01a04 	addi	r11,sp,104
20092ab0:	da8019c4 	addi	r10,sp,103
20092ab4:	dc802917 	ldw	r18,164(sp)
20092ab8:	dd002717 	ldw	r20,156(sp)
20092abc:	04c00034 	movhi	r19,0
20092ac0:	dac01e15 	stw	r11,120(sp)
20092ac4:	5a97c83a 	sub	r11,r11,r10
20092ac8:	9cc17804 	addi	r19,r19,1504
20092acc:	da801f15 	stw	r10,124(sp)
20092ad0:	dec01a15 	stw	sp,104(sp)
20092ad4:	d8001c15 	stw	zero,112(sp)
20092ad8:	d8001b15 	stw	zero,108(sp)
20092adc:	d811883a 	mov	r8,sp
20092ae0:	d8002a15 	stw	zero,168(sp)
20092ae4:	d8002415 	stw	zero,144(sp)
20092ae8:	dac02b15 	stw	r11,172(sp)
20092aec:	a8800007 	ldb	r2,0(r21)
20092af0:	10026a26 	beq	r2,zero,2009349c <___svfiprintf_internal_r+0xa40>
20092af4:	01000944 	movi	r4,37
20092af8:	11026826 	beq	r2,r4,2009349c <___svfiprintf_internal_r+0xa40>
20092afc:	a805883a 	mov	r2,r21
20092b00:	00000106 	br	20092b08 <___svfiprintf_internal_r+0xac>
20092b04:	19000326 	beq	r3,r4,20092b14 <___svfiprintf_internal_r+0xb8>
20092b08:	10800044 	addi	r2,r2,1
20092b0c:	10c00007 	ldb	r3,0(r2)
20092b10:	183ffc1e 	bne	r3,zero,20092b04 <__flash_rwdata_start+0xffff6980>
20092b14:	1561c83a 	sub	r16,r2,r21
20092b18:	102d883a 	mov	r22,r2
20092b1c:	80000e26 	beq	r16,zero,20092b58 <___svfiprintf_internal_r+0xfc>
20092b20:	d8c01c17 	ldw	r3,112(sp)
20092b24:	d8801b17 	ldw	r2,108(sp)
20092b28:	45400015 	stw	r21,0(r8)
20092b2c:	1c07883a 	add	r3,r3,r16
20092b30:	10800044 	addi	r2,r2,1
20092b34:	d8c01c15 	stw	r3,112(sp)
20092b38:	44000115 	stw	r16,4(r8)
20092b3c:	d8801b15 	stw	r2,108(sp)
20092b40:	00c001c4 	movi	r3,7
20092b44:	1882d816 	blt	r3,r2,200936a8 <___svfiprintf_internal_r+0xc4c>
20092b48:	42000204 	addi	r8,r8,8
20092b4c:	da802417 	ldw	r10,144(sp)
20092b50:	5415883a 	add	r10,r10,r16
20092b54:	da802415 	stw	r10,144(sp)
20092b58:	b0800007 	ldb	r2,0(r22)
20092b5c:	10027526 	beq	r2,zero,20093534 <___svfiprintf_internal_r+0xad8>
20092b60:	b1000047 	ldb	r4,1(r22)
20092b64:	b5400044 	addi	r21,r22,1
20092b68:	d8001d85 	stb	zero,118(sp)
20092b6c:	000d883a 	mov	r6,zero
20092b70:	043fffc4 	movi	r16,-1
20092b74:	d8002115 	stw	zero,132(sp)
20092b78:	0023883a 	mov	r17,zero
20092b7c:	00c01604 	movi	r3,88
20092b80:	01400244 	movi	r5,9
20092b84:	02400a84 	movi	r9,42
20092b88:	01c01b04 	movi	r7,108
20092b8c:	ad400044 	addi	r21,r21,1
20092b90:	20bff804 	addi	r2,r4,-32
20092b94:	18819736 	bltu	r3,r2,200931f4 <___svfiprintf_internal_r+0x798>
20092b98:	100490ba 	slli	r2,r2,2
20092b9c:	02c80274 	movhi	r11,8201
20092ba0:	5acaec04 	addi	r11,r11,11184
20092ba4:	12c5883a 	add	r2,r2,r11
20092ba8:	10800017 	ldw	r2,0(r2)
20092bac:	1000683a 	jmp	r2
20092bb0:	200930ec 	andhi	zero,r4,9411
20092bb4:	200931f4 	orhi	zero,r4,9415
20092bb8:	200931f4 	orhi	zero,r4,9415
20092bbc:	200930e0 	cmpeqi	zero,r4,9411
20092bc0:	200931f4 	orhi	zero,r4,9415
20092bc4:	200931f4 	orhi	zero,r4,9415
20092bc8:	200931f4 	orhi	zero,r4,9415
20092bcc:	200931f4 	orhi	zero,r4,9415
20092bd0:	200931f4 	orhi	zero,r4,9415
20092bd4:	200931f4 	orhi	zero,r4,9415
20092bd8:	20092e0c 	andi	zero,r4,9400
20092bdc:	20093228 	cmpgeui	zero,r4,9416
20092be0:	200931f4 	orhi	zero,r4,9415
20092be4:	20092e34 	orhi	zero,r4,9400
20092be8:	20093234 	orhi	zero,r4,9416
20092bec:	200931f4 	orhi	zero,r4,9415
20092bf0:	2009321c 	xori	zero,r4,9416
20092bf4:	200931bc 	xorhi	zero,r4,9414
20092bf8:	200931bc 	xorhi	zero,r4,9414
20092bfc:	200931bc 	xorhi	zero,r4,9414
20092c00:	200931bc 	xorhi	zero,r4,9414
20092c04:	200931bc 	xorhi	zero,r4,9414
20092c08:	200931bc 	xorhi	zero,r4,9414
20092c0c:	200931bc 	xorhi	zero,r4,9414
20092c10:	200931bc 	xorhi	zero,r4,9414
20092c14:	200931bc 	xorhi	zero,r4,9414
20092c18:	200931f4 	orhi	zero,r4,9415
20092c1c:	200931f4 	orhi	zero,r4,9415
20092c20:	200931f4 	orhi	zero,r4,9415
20092c24:	200931f4 	orhi	zero,r4,9415
20092c28:	200931f4 	orhi	zero,r4,9415
20092c2c:	200931f4 	orhi	zero,r4,9415
20092c30:	200931f4 	orhi	zero,r4,9415
20092c34:	200931f4 	orhi	zero,r4,9415
20092c38:	200931f4 	orhi	zero,r4,9415
20092c3c:	200931f4 	orhi	zero,r4,9415
20092c40:	20093154 	ori	zero,r4,9413
20092c44:	200931f4 	orhi	zero,r4,9415
20092c48:	200931f4 	orhi	zero,r4,9415
20092c4c:	200931f4 	orhi	zero,r4,9415
20092c50:	200931f4 	orhi	zero,r4,9415
20092c54:	200931f4 	orhi	zero,r4,9415
20092c58:	200931f4 	orhi	zero,r4,9415
20092c5c:	200931f4 	orhi	zero,r4,9415
20092c60:	200931f4 	orhi	zero,r4,9415
20092c64:	200931f4 	orhi	zero,r4,9415
20092c68:	200931f4 	orhi	zero,r4,9415
20092c6c:	20092de0 	cmpeqi	zero,r4,9399
20092c70:	200931f4 	orhi	zero,r4,9415
20092c74:	200931f4 	orhi	zero,r4,9415
20092c78:	200931f4 	orhi	zero,r4,9415
20092c7c:	200931f4 	orhi	zero,r4,9415
20092c80:	200931f4 	orhi	zero,r4,9415
20092c84:	20092d14 	ori	zero,r4,9396
20092c88:	200931f4 	orhi	zero,r4,9415
20092c8c:	200931f4 	orhi	zero,r4,9415
20092c90:	20093040 	call	22009304 <__flash_rwdata_start+0x1f6d180>
20092c94:	200931f4 	orhi	zero,r4,9415
20092c98:	200931f4 	orhi	zero,r4,9415
20092c9c:	200931f4 	orhi	zero,r4,9415
20092ca0:	200931f4 	orhi	zero,r4,9415
20092ca4:	200931f4 	orhi	zero,r4,9415
20092ca8:	200931f4 	orhi	zero,r4,9415
20092cac:	200931f4 	orhi	zero,r4,9415
20092cb0:	200931f4 	orhi	zero,r4,9415
20092cb4:	200931f4 	orhi	zero,r4,9415
20092cb8:	200931f4 	orhi	zero,r4,9415
20092cbc:	20092f2c 	andhi	zero,r4,9404
20092cc0:	20092eec 	andhi	zero,r4,9403
20092cc4:	200931f4 	orhi	zero,r4,9415
20092cc8:	200931f4 	orhi	zero,r4,9415
20092ccc:	200931f4 	orhi	zero,r4,9415
20092cd0:	2009309c 	xori	zero,r4,9410
20092cd4:	20092eec 	andhi	zero,r4,9403
20092cd8:	200931f4 	orhi	zero,r4,9415
20092cdc:	200931f4 	orhi	zero,r4,9415
20092ce0:	20093088 	cmpgei	zero,r4,9410
20092ce4:	200931f4 	orhi	zero,r4,9415
20092ce8:	200930a8 	cmpgeui	zero,r4,9410
20092cec:	20092de4 	muli	zero,r4,9399
20092cf0:	20092ea8 	cmpgeui	zero,r4,9402
20092cf4:	20092e9c 	xori	zero,r4,9402
20092cf8:	200931f4 	orhi	zero,r4,9415
20092cfc:	20092e40 	call	220092e4 <__flash_rwdata_start+0x1f6d160>
20092d00:	200931f4 	orhi	zero,r4,9415
20092d04:	20092d18 	cmpnei	zero,r4,9396
20092d08:	200931f4 	orhi	zero,r4,9415
20092d0c:	200931f4 	orhi	zero,r4,9415
20092d10:	20093108 	cmpgei	zero,r4,9412
20092d14:	8c400414 	ori	r17,r17,16
20092d18:	8880080c 	andi	r2,r17,32
20092d1c:	10029626 	beq	r2,zero,20093778 <___svfiprintf_internal_r+0xd1c>
20092d20:	da802317 	ldw	r10,140(sp)
20092d24:	dac02317 	ldw	r11,140(sp)
20092d28:	00800044 	movi	r2,1
20092d2c:	52400017 	ldw	r9,0(r10)
20092d30:	52800117 	ldw	r10,4(r10)
20092d34:	5ac00204 	addi	r11,r11,8
20092d38:	dac02315 	stw	r11,140(sp)
20092d3c:	4a86b03a 	or	r3,r9,r10
20092d40:	d8001d85 	stb	zero,118(sp)
20092d44:	8039883a 	mov	fp,r16
20092d48:	0017883a 	mov	r11,zero
20092d4c:	80000216 	blt	r16,zero,20092d58 <___svfiprintf_internal_r+0x2fc>
20092d50:	013fdfc4 	movi	r4,-129
20092d54:	8922703a 	and	r17,r17,r4
20092d58:	1801d21e 	bne	r3,zero,200934a4 <___svfiprintf_internal_r+0xa48>
20092d5c:	80024626 	beq	r16,zero,20093678 <___svfiprintf_internal_r+0xc1c>
20092d60:	10803fcc 	andi	r2,r2,255
20092d64:	00c00044 	movi	r3,1
20092d68:	10c2b426 	beq	r2,r3,2009383c <___svfiprintf_internal_r+0xde0>
20092d6c:	00c00084 	movi	r3,2
20092d70:	10c25d26 	beq	r2,r3,200936e8 <___svfiprintf_internal_r+0xc8c>
20092d74:	d8c01a04 	addi	r3,sp,104
20092d78:	4808d0fa 	srli	r4,r9,3
20092d7c:	500a977a 	slli	r5,r10,29
20092d80:	5014d0fa 	srli	r10,r10,3
20092d84:	4a4001cc 	andi	r9,r9,7
20092d88:	48800c04 	addi	r2,r9,48
20092d8c:	18ffffc4 	addi	r3,r3,-1
20092d90:	2912b03a 	or	r9,r5,r4
20092d94:	18800005 	stb	r2,0(r3)
20092d98:	4a88b03a 	or	r4,r9,r10
20092d9c:	203ff61e 	bne	r4,zero,20092d78 <__flash_rwdata_start+0xffff6bf4>
20092da0:	8900004c 	andi	r4,r17,1
20092da4:	d8c02615 	stw	r3,152(sp)
20092da8:	2002961e 	bne	r4,zero,20093804 <___svfiprintf_internal_r+0xda8>
20092dac:	da801e17 	ldw	r10,120(sp)
20092db0:	50f9c83a 	sub	fp,r10,r3
20092db4:	df002015 	stw	fp,128(sp)
20092db8:	e400010e 	bge	fp,r16,20092dc0 <___svfiprintf_internal_r+0x364>
20092dbc:	dc002015 	stw	r16,128(sp)
20092dc0:	5ac03fcc 	andi	r11,r11,255
20092dc4:	5ac0201c 	xori	r11,r11,128
20092dc8:	5affe004 	addi	r11,r11,-128
20092dcc:	58006326 	beq	r11,zero,20092f5c <___svfiprintf_internal_r+0x500>
20092dd0:	d8c02017 	ldw	r3,128(sp)
20092dd4:	18c00044 	addi	r3,r3,1
20092dd8:	d8c02015 	stw	r3,128(sp)
20092ddc:	00005f06 	br	20092f5c <___svfiprintf_internal_r+0x500>
20092de0:	8c400414 	ori	r17,r17,16
20092de4:	8880080c 	andi	r2,r17,32
20092de8:	10027926 	beq	r2,zero,200937d0 <___svfiprintf_internal_r+0xd74>
20092dec:	dac02317 	ldw	r11,140(sp)
20092df0:	0005883a 	mov	r2,zero
20092df4:	5a400017 	ldw	r9,0(r11)
20092df8:	5a800117 	ldw	r10,4(r11)
20092dfc:	5ac00204 	addi	r11,r11,8
20092e00:	dac02315 	stw	r11,140(sp)
20092e04:	4a86b03a 	or	r3,r9,r10
20092e08:	003fcd06 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20092e0c:	da802317 	ldw	r10,140(sp)
20092e10:	dac02317 	ldw	r11,140(sp)
20092e14:	52800017 	ldw	r10,0(r10)
20092e18:	58800104 	addi	r2,r11,4
20092e1c:	da802115 	stw	r10,132(sp)
20092e20:	50028c0e 	bge	r10,zero,20093854 <___svfiprintf_internal_r+0xdf8>
20092e24:	da802117 	ldw	r10,132(sp)
20092e28:	d8802315 	stw	r2,140(sp)
20092e2c:	0295c83a 	sub	r10,zero,r10
20092e30:	da802115 	stw	r10,132(sp)
20092e34:	8c400114 	ori	r17,r17,4
20092e38:	a9000007 	ldb	r4,0(r21)
20092e3c:	003f5306 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20092e40:	da802317 	ldw	r10,140(sp)
20092e44:	dac02317 	ldw	r11,140(sp)
20092e48:	d8001d85 	stb	zero,118(sp)
20092e4c:	52800017 	ldw	r10,0(r10)
20092e50:	5dc00104 	addi	r23,r11,4
20092e54:	da802615 	stw	r10,152(sp)
20092e58:	5002d626 	beq	r10,zero,200939b4 <___svfiprintf_internal_r+0xf58>
20092e5c:	d9002617 	ldw	r4,152(sp)
20092e60:	8002cc16 	blt	r16,zero,20093994 <___svfiprintf_internal_r+0xf38>
20092e64:	000b883a 	mov	r5,zero
20092e68:	800d883a 	mov	r6,r16
20092e6c:	da002c15 	stw	r8,176(sp)
20092e70:	0090e300 	call	20090e30 <memchr>
20092e74:	da002c17 	ldw	r8,176(sp)
20092e78:	1002f026 	beq	r2,zero,20093a3c <___svfiprintf_internal_r+0xfe0>
20092e7c:	d8c02617 	ldw	r3,152(sp)
20092e80:	10f9c83a 	sub	fp,r2,r3
20092e84:	8700010e 	bge	r16,fp,20092e8c <___svfiprintf_internal_r+0x430>
20092e88:	8039883a 	mov	fp,r16
20092e8c:	dac01d83 	ldbu	r11,118(sp)
20092e90:	ddc02315 	stw	r23,140(sp)
20092e94:	0021883a 	mov	r16,zero
20092e98:	003fc606 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20092e9c:	8c400814 	ori	r17,r17,32
20092ea0:	a9000007 	ldb	r4,0(r21)
20092ea4:	003f3906 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20092ea8:	da802317 	ldw	r10,140(sp)
20092eac:	00800c04 	movi	r2,48
20092eb0:	dac02317 	ldw	r11,140(sp)
20092eb4:	52400017 	ldw	r9,0(r10)
20092eb8:	d8801d05 	stb	r2,116(sp)
20092ebc:	00801e04 	movi	r2,120
20092ec0:	d8801d45 	stb	r2,117(sp)
20092ec4:	00800034 	movhi	r2,0
20092ec8:	10810f04 	addi	r2,r2,1084
20092ecc:	5ac00104 	addi	r11,r11,4
20092ed0:	d8802a15 	stw	r2,168(sp)
20092ed4:	0015883a 	mov	r10,zero
20092ed8:	8c400094 	ori	r17,r17,2
20092edc:	dac02315 	stw	r11,140(sp)
20092ee0:	00800084 	movi	r2,2
20092ee4:	4807883a 	mov	r3,r9
20092ee8:	003f9506 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20092eec:	d9801d85 	stb	r6,118(sp)
20092ef0:	8880080c 	andi	r2,r17,32
20092ef4:	d8c02317 	ldw	r3,140(sp)
20092ef8:	10009b26 	beq	r2,zero,20093168 <___svfiprintf_internal_r+0x70c>
20092efc:	dac02317 	ldw	r11,140(sp)
20092f00:	18800117 	ldw	r2,4(r3)
20092f04:	1a400017 	ldw	r9,0(r3)
20092f08:	5ac00204 	addi	r11,r11,8
20092f0c:	dac02315 	stw	r11,140(sp)
20092f10:	1015883a 	mov	r10,r2
20092f14:	10009f16 	blt	r2,zero,20093194 <___svfiprintf_internal_r+0x738>
20092f18:	dac01d83 	ldbu	r11,118(sp)
20092f1c:	8039883a 	mov	fp,r16
20092f20:	00800044 	movi	r2,1
20092f24:	4a86b03a 	or	r3,r9,r10
20092f28:	003f8806 	br	20092d4c <__flash_rwdata_start+0xffff6bc8>
20092f2c:	dac02317 	ldw	r11,140(sp)
20092f30:	00c00044 	movi	r3,1
20092f34:	da801004 	addi	r10,sp,64
20092f38:	58800017 	ldw	r2,0(r11)
20092f3c:	5ac00104 	addi	r11,r11,4
20092f40:	d8c02015 	stw	r3,128(sp)
20092f44:	d8001d85 	stb	zero,118(sp)
20092f48:	d8801005 	stb	r2,64(sp)
20092f4c:	dac02315 	stw	r11,140(sp)
20092f50:	1839883a 	mov	fp,r3
20092f54:	da802615 	stw	r10,152(sp)
20092f58:	0021883a 	mov	r16,zero
20092f5c:	8a80008c 	andi	r10,r17,2
20092f60:	da802215 	stw	r10,136(sp)
20092f64:	50000326 	beq	r10,zero,20092f74 <___svfiprintf_internal_r+0x518>
20092f68:	dac02017 	ldw	r11,128(sp)
20092f6c:	5ac00084 	addi	r11,r11,2
20092f70:	dac02015 	stw	r11,128(sp)
20092f74:	88c0210c 	andi	r3,r17,132
20092f78:	d8c02515 	stw	r3,148(sp)
20092f7c:	1800bd1e 	bne	r3,zero,20093274 <___svfiprintf_internal_r+0x818>
20092f80:	da802117 	ldw	r10,132(sp)
20092f84:	dac02017 	ldw	r11,128(sp)
20092f88:	52edc83a 	sub	r22,r10,r11
20092f8c:	0580b90e 	bge	zero,r22,20093274 <___svfiprintf_internal_r+0x818>
20092f90:	02400404 	movi	r9,16
20092f94:	d8c01c17 	ldw	r3,112(sp)
20092f98:	d8801b17 	ldw	r2,108(sp)
20092f9c:	4d829b0e 	bge	r9,r22,20093a0c <___svfiprintf_internal_r+0xfb0>
20092fa0:	01400034 	movhi	r5,0
20092fa4:	29417c04 	addi	r5,r5,1520
20092fa8:	d9402815 	stw	r5,160(sp)
20092fac:	05c001c4 	movi	r23,7
20092fb0:	00000306 	br	20092fc0 <___svfiprintf_internal_r+0x564>
20092fb4:	b5bffc04 	addi	r22,r22,-16
20092fb8:	42000204 	addi	r8,r8,8
20092fbc:	4d80150e 	bge	r9,r22,20093014 <___svfiprintf_internal_r+0x5b8>
20092fc0:	02800034 	movhi	r10,0
20092fc4:	18c00404 	addi	r3,r3,16
20092fc8:	10800044 	addi	r2,r2,1
20092fcc:	52817c04 	addi	r10,r10,1520
20092fd0:	42800015 	stw	r10,0(r8)
20092fd4:	42400115 	stw	r9,4(r8)
20092fd8:	d8c01c15 	stw	r3,112(sp)
20092fdc:	d8801b15 	stw	r2,108(sp)
20092fe0:	b8bff40e 	bge	r23,r2,20092fb4 <__flash_rwdata_start+0xffff6e30>
20092fe4:	9009883a 	mov	r4,r18
20092fe8:	a00b883a 	mov	r5,r20
20092fec:	d9801a04 	addi	r6,sp,104
20092ff0:	da402c15 	stw	r9,176(sp)
20092ff4:	00928900 	call	20092890 <__ssprint_r>
20092ff8:	da402c17 	ldw	r9,176(sp)
20092ffc:	1001531e 	bne	r2,zero,2009354c <___svfiprintf_internal_r+0xaf0>
20093000:	b5bffc04 	addi	r22,r22,-16
20093004:	d8c01c17 	ldw	r3,112(sp)
20093008:	d8801b17 	ldw	r2,108(sp)
2009300c:	d811883a 	mov	r8,sp
20093010:	4dbfeb16 	blt	r9,r22,20092fc0 <__flash_rwdata_start+0xffff6e3c>
20093014:	dac02817 	ldw	r11,160(sp)
20093018:	b0c7883a 	add	r3,r22,r3
2009301c:	10800044 	addi	r2,r2,1
20093020:	42c00015 	stw	r11,0(r8)
20093024:	45800115 	stw	r22,4(r8)
20093028:	d8c01c15 	stw	r3,112(sp)
2009302c:	d8801b15 	stw	r2,108(sp)
20093030:	010001c4 	movi	r4,7
20093034:	2081dd16 	blt	r4,r2,200937ac <___svfiprintf_internal_r+0xd50>
20093038:	42000204 	addi	r8,r8,8
2009303c:	00008f06 	br	2009327c <___svfiprintf_internal_r+0x820>
20093040:	00800034 	movhi	r2,0
20093044:	10810a04 	addi	r2,r2,1064
20093048:	d8802a15 	stw	r2,168(sp)
2009304c:	d9801d85 	stb	r6,118(sp)
20093050:	8880080c 	andi	r2,r17,32
20093054:	10003226 	beq	r2,zero,20093120 <___svfiprintf_internal_r+0x6c4>
20093058:	da802317 	ldw	r10,140(sp)
2009305c:	dac02317 	ldw	r11,140(sp)
20093060:	52400017 	ldw	r9,0(r10)
20093064:	52800117 	ldw	r10,4(r10)
20093068:	5ac00204 	addi	r11,r11,8
2009306c:	dac02315 	stw	r11,140(sp)
20093070:	8880004c 	andi	r2,r17,1
20093074:	10003426 	beq	r2,zero,20093148 <___svfiprintf_internal_r+0x6ec>
20093078:	4a86b03a 	or	r3,r9,r10
2009307c:	1802231e 	bne	r3,zero,2009390c <___svfiprintf_internal_r+0xeb0>
20093080:	00800084 	movi	r2,2
20093084:	003f2e06 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20093088:	a9000007 	ldb	r4,0(r21)
2009308c:	a805883a 	mov	r2,r21
20093090:	21c22426 	beq	r4,r7,20093924 <___svfiprintf_internal_r+0xec8>
20093094:	8c400414 	ori	r17,r17,16
20093098:	003ebc06 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
2009309c:	8c401014 	ori	r17,r17,64
200930a0:	a9000007 	ldb	r4,0(r21)
200930a4:	003eb906 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
200930a8:	d9801d85 	stb	r6,118(sp)
200930ac:	8880080c 	andi	r2,r17,32
200930b0:	10020d1e 	bne	r2,zero,200938e8 <___svfiprintf_internal_r+0xe8c>
200930b4:	8880040c 	andi	r2,r17,16
200930b8:	10021e1e 	bne	r2,zero,20093934 <___svfiprintf_internal_r+0xed8>
200930bc:	8c40100c 	andi	r17,r17,64
200930c0:	88021c26 	beq	r17,zero,20093934 <___svfiprintf_internal_r+0xed8>
200930c4:	dac02317 	ldw	r11,140(sp)
200930c8:	da802417 	ldw	r10,144(sp)
200930cc:	58800017 	ldw	r2,0(r11)
200930d0:	5ac00104 	addi	r11,r11,4
200930d4:	dac02315 	stw	r11,140(sp)
200930d8:	1280000d 	sth	r10,0(r2)
200930dc:	003e8306 	br	20092aec <__flash_rwdata_start+0xffff6968>
200930e0:	8c400054 	ori	r17,r17,1
200930e4:	a9000007 	ldb	r4,0(r21)
200930e8:	003ea806 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
200930ec:	30803fcc 	andi	r2,r6,255
200930f0:	1080201c 	xori	r2,r2,128
200930f4:	10bfe004 	addi	r2,r2,-128
200930f8:	1001f91e 	bne	r2,zero,200938e0 <___svfiprintf_internal_r+0xe84>
200930fc:	01800804 	movi	r6,32
20093100:	a9000007 	ldb	r4,0(r21)
20093104:	003ea106 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093108:	00800034 	movhi	r2,0
2009310c:	10810f04 	addi	r2,r2,1084
20093110:	d8802a15 	stw	r2,168(sp)
20093114:	d9801d85 	stb	r6,118(sp)
20093118:	8880080c 	andi	r2,r17,32
2009311c:	103fce1e 	bne	r2,zero,20093058 <__flash_rwdata_start+0xffff6ed4>
20093120:	8880040c 	andi	r2,r17,16
20093124:	1001e526 	beq	r2,zero,200938bc <___svfiprintf_internal_r+0xe60>
20093128:	da802317 	ldw	r10,140(sp)
2009312c:	dac02317 	ldw	r11,140(sp)
20093130:	52400017 	ldw	r9,0(r10)
20093134:	8880004c 	andi	r2,r17,1
20093138:	5ac00104 	addi	r11,r11,4
2009313c:	dac02315 	stw	r11,140(sp)
20093140:	0015883a 	mov	r10,zero
20093144:	103fcc1e 	bne	r2,zero,20093078 <__flash_rwdata_start+0xffff6ef4>
20093148:	00800084 	movi	r2,2
2009314c:	4a86b03a 	or	r3,r9,r10
20093150:	003efb06 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20093154:	8c400414 	ori	r17,r17,16
20093158:	d9801d85 	stb	r6,118(sp)
2009315c:	8880080c 	andi	r2,r17,32
20093160:	d8c02317 	ldw	r3,140(sp)
20093164:	103f651e 	bne	r2,zero,20092efc <__flash_rwdata_start+0xffff6d78>
20093168:	8880040c 	andi	r2,r17,16
2009316c:	1001c61e 	bne	r2,zero,20093888 <___svfiprintf_internal_r+0xe2c>
20093170:	8880100c 	andi	r2,r17,64
20093174:	1001c426 	beq	r2,zero,20093888 <___svfiprintf_internal_r+0xe2c>
20093178:	1a40000f 	ldh	r9,0(r3)
2009317c:	dac02317 	ldw	r11,140(sp)
20093180:	4815d7fa 	srai	r10,r9,31
20093184:	5ac00104 	addi	r11,r11,4
20093188:	dac02315 	stw	r11,140(sp)
2009318c:	5005883a 	mov	r2,r10
20093190:	103f610e 	bge	r2,zero,20092f18 <__flash_rwdata_start+0xffff6d94>
20093194:	0253c83a 	sub	r9,zero,r9
20093198:	4804c03a 	cmpne	r2,r9,zero
2009319c:	0295c83a 	sub	r10,zero,r10
200931a0:	5095c83a 	sub	r10,r10,r2
200931a4:	02c00b44 	movi	r11,45
200931a8:	dac01d85 	stb	r11,118(sp)
200931ac:	8039883a 	mov	fp,r16
200931b0:	00800044 	movi	r2,1
200931b4:	4a86b03a 	or	r3,r9,r10
200931b8:	003ee406 	br	20092d4c <__flash_rwdata_start+0xffff6bc8>
200931bc:	a815883a 	mov	r10,r21
200931c0:	d8002115 	stw	zero,132(sp)
200931c4:	20bff404 	addi	r2,r4,-48
200931c8:	51000007 	ldb	r4,0(r10)
200931cc:	da802117 	ldw	r10,132(sp)
200931d0:	ad400044 	addi	r21,r21,1
200931d4:	52c002a4 	muli	r11,r10,10
200931d8:	a815883a 	mov	r10,r21
200931dc:	5885883a 	add	r2,r11,r2
200931e0:	d8802115 	stw	r2,132(sp)
200931e4:	20bff404 	addi	r2,r4,-48
200931e8:	28bff72e 	bgeu	r5,r2,200931c8 <__flash_rwdata_start+0xffff7044>
200931ec:	20bff804 	addi	r2,r4,-32
200931f0:	18be692e 	bgeu	r3,r2,20092b98 <__flash_rwdata_start+0xffff6a14>
200931f4:	d9801d85 	stb	r6,118(sp)
200931f8:	2000ce26 	beq	r4,zero,20093534 <___svfiprintf_internal_r+0xad8>
200931fc:	02800044 	movi	r10,1
20093200:	dac01004 	addi	r11,sp,64
20093204:	da802015 	stw	r10,128(sp)
20093208:	d9001005 	stb	r4,64(sp)
2009320c:	d8001d85 	stb	zero,118(sp)
20093210:	5039883a 	mov	fp,r10
20093214:	dac02615 	stw	r11,152(sp)
20093218:	003f4f06 	br	20092f58 <__flash_rwdata_start+0xffff6dd4>
2009321c:	8c402014 	ori	r17,r17,128
20093220:	a9000007 	ldb	r4,0(r21)
20093224:	003e5906 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093228:	01800ac4 	movi	r6,43
2009322c:	a9000007 	ldb	r4,0(r21)
20093230:	003e5606 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093234:	a9000007 	ldb	r4,0(r21)
20093238:	aa800044 	addi	r10,r21,1
2009323c:	22420626 	beq	r4,r9,20093a58 <___svfiprintf_internal_r+0xffc>
20093240:	20bff404 	addi	r2,r4,-48
20093244:	502b883a 	mov	r21,r10
20093248:	0021883a 	mov	r16,zero
2009324c:	28be5036 	bltu	r5,r2,20092b90 <__flash_rwdata_start+0xffff6a0c>
20093250:	a9000007 	ldb	r4,0(r21)
20093254:	840002a4 	muli	r16,r16,10
20093258:	ad400044 	addi	r21,r21,1
2009325c:	1421883a 	add	r16,r2,r16
20093260:	20bff404 	addi	r2,r4,-48
20093264:	28bffa2e 	bgeu	r5,r2,20093250 <__flash_rwdata_start+0xffff70cc>
20093268:	803e490e 	bge	r16,zero,20092b90 <__flash_rwdata_start+0xffff6a0c>
2009326c:	043fffc4 	movi	r16,-1
20093270:	003e4706 	br	20092b90 <__flash_rwdata_start+0xffff6a0c>
20093274:	d8c01c17 	ldw	r3,112(sp)
20093278:	d8801b17 	ldw	r2,108(sp)
2009327c:	d9001d87 	ldb	r4,118(sp)
20093280:	20000b26 	beq	r4,zero,200932b0 <___svfiprintf_internal_r+0x854>
20093284:	d9001d84 	addi	r4,sp,118
20093288:	18c00044 	addi	r3,r3,1
2009328c:	10800044 	addi	r2,r2,1
20093290:	41000015 	stw	r4,0(r8)
20093294:	01000044 	movi	r4,1
20093298:	41000115 	stw	r4,4(r8)
2009329c:	d8c01c15 	stw	r3,112(sp)
200932a0:	d8801b15 	stw	r2,108(sp)
200932a4:	010001c4 	movi	r4,7
200932a8:	20811e16 	blt	r4,r2,20093724 <___svfiprintf_internal_r+0xcc8>
200932ac:	42000204 	addi	r8,r8,8
200932b0:	da802217 	ldw	r10,136(sp)
200932b4:	50000b26 	beq	r10,zero,200932e4 <___svfiprintf_internal_r+0x888>
200932b8:	d9001d04 	addi	r4,sp,116
200932bc:	18c00084 	addi	r3,r3,2
200932c0:	10800044 	addi	r2,r2,1
200932c4:	41000015 	stw	r4,0(r8)
200932c8:	01000084 	movi	r4,2
200932cc:	41000115 	stw	r4,4(r8)
200932d0:	d8c01c15 	stw	r3,112(sp)
200932d4:	d8801b15 	stw	r2,108(sp)
200932d8:	010001c4 	movi	r4,7
200932dc:	20811a16 	blt	r4,r2,20093748 <___svfiprintf_internal_r+0xcec>
200932e0:	42000204 	addi	r8,r8,8
200932e4:	dac02517 	ldw	r11,148(sp)
200932e8:	01002004 	movi	r4,128
200932ec:	5900a826 	beq	r11,r4,20093590 <___svfiprintf_internal_r+0xb34>
200932f0:	8721c83a 	sub	r16,r16,fp
200932f4:	0400260e 	bge	zero,r16,20093390 <___svfiprintf_internal_r+0x934>
200932f8:	01c00404 	movi	r7,16
200932fc:	3c019d0e 	bge	r7,r16,20093974 <___svfiprintf_internal_r+0xf18>
20093300:	01000034 	movhi	r4,0
20093304:	21017804 	addi	r4,r4,1504
20093308:	d9002215 	stw	r4,136(sp)
2009330c:	382f883a 	mov	r23,r7
20093310:	058001c4 	movi	r22,7
20093314:	00000306 	br	20093324 <___svfiprintf_internal_r+0x8c8>
20093318:	843ffc04 	addi	r16,r16,-16
2009331c:	42000204 	addi	r8,r8,8
20093320:	bc00110e 	bge	r23,r16,20093368 <___svfiprintf_internal_r+0x90c>
20093324:	18c00404 	addi	r3,r3,16
20093328:	10800044 	addi	r2,r2,1
2009332c:	44c00015 	stw	r19,0(r8)
20093330:	45c00115 	stw	r23,4(r8)
20093334:	d8c01c15 	stw	r3,112(sp)
20093338:	d8801b15 	stw	r2,108(sp)
2009333c:	b0bff60e 	bge	r22,r2,20093318 <__flash_rwdata_start+0xffff7194>
20093340:	9009883a 	mov	r4,r18
20093344:	a00b883a 	mov	r5,r20
20093348:	d9801a04 	addi	r6,sp,104
2009334c:	00928900 	call	20092890 <__ssprint_r>
20093350:	10007e1e 	bne	r2,zero,2009354c <___svfiprintf_internal_r+0xaf0>
20093354:	843ffc04 	addi	r16,r16,-16
20093358:	d8c01c17 	ldw	r3,112(sp)
2009335c:	d8801b17 	ldw	r2,108(sp)
20093360:	d811883a 	mov	r8,sp
20093364:	bc3fef16 	blt	r23,r16,20093324 <__flash_rwdata_start+0xffff71a0>
20093368:	da802217 	ldw	r10,136(sp)
2009336c:	1c07883a 	add	r3,r3,r16
20093370:	10800044 	addi	r2,r2,1
20093374:	42800015 	stw	r10,0(r8)
20093378:	44000115 	stw	r16,4(r8)
2009337c:	d8c01c15 	stw	r3,112(sp)
20093380:	d8801b15 	stw	r2,108(sp)
20093384:	010001c4 	movi	r4,7
20093388:	2080ce16 	blt	r4,r2,200936c4 <___svfiprintf_internal_r+0xc68>
2009338c:	42000204 	addi	r8,r8,8
20093390:	dac02617 	ldw	r11,152(sp)
20093394:	1f07883a 	add	r3,r3,fp
20093398:	10800044 	addi	r2,r2,1
2009339c:	42c00015 	stw	r11,0(r8)
200933a0:	47000115 	stw	fp,4(r8)
200933a4:	d8c01c15 	stw	r3,112(sp)
200933a8:	d8801b15 	stw	r2,108(sp)
200933ac:	010001c4 	movi	r4,7
200933b0:	2080a316 	blt	r4,r2,20093640 <___svfiprintf_internal_r+0xbe4>
200933b4:	42000204 	addi	r8,r8,8
200933b8:	8c40010c 	andi	r17,r17,4
200933bc:	88002b26 	beq	r17,zero,2009346c <___svfiprintf_internal_r+0xa10>
200933c0:	da802117 	ldw	r10,132(sp)
200933c4:	dac02017 	ldw	r11,128(sp)
200933c8:	52e1c83a 	sub	r16,r10,r11
200933cc:	0400270e 	bge	zero,r16,2009346c <___svfiprintf_internal_r+0xa10>
200933d0:	04400404 	movi	r17,16
200933d4:	d8801b17 	ldw	r2,108(sp)
200933d8:	8c01900e 	bge	r17,r16,20093a1c <___svfiprintf_internal_r+0xfc0>
200933dc:	01400034 	movhi	r5,0
200933e0:	29417c04 	addi	r5,r5,1520
200933e4:	d9402815 	stw	r5,160(sp)
200933e8:	070001c4 	movi	fp,7
200933ec:	00000306 	br	200933fc <___svfiprintf_internal_r+0x9a0>
200933f0:	843ffc04 	addi	r16,r16,-16
200933f4:	42000204 	addi	r8,r8,8
200933f8:	8c00130e 	bge	r17,r16,20093448 <___svfiprintf_internal_r+0x9ec>
200933fc:	02800034 	movhi	r10,0
20093400:	18c00404 	addi	r3,r3,16
20093404:	10800044 	addi	r2,r2,1
20093408:	52817c04 	addi	r10,r10,1520
2009340c:	42800015 	stw	r10,0(r8)
20093410:	44400115 	stw	r17,4(r8)
20093414:	d8c01c15 	stw	r3,112(sp)
20093418:	d8801b15 	stw	r2,108(sp)
2009341c:	e0bff40e 	bge	fp,r2,200933f0 <__flash_rwdata_start+0xffff726c>
20093420:	9009883a 	mov	r4,r18
20093424:	a00b883a 	mov	r5,r20
20093428:	d9801a04 	addi	r6,sp,104
2009342c:	00928900 	call	20092890 <__ssprint_r>
20093430:	1000461e 	bne	r2,zero,2009354c <___svfiprintf_internal_r+0xaf0>
20093434:	843ffc04 	addi	r16,r16,-16
20093438:	d8c01c17 	ldw	r3,112(sp)
2009343c:	d8801b17 	ldw	r2,108(sp)
20093440:	d811883a 	mov	r8,sp
20093444:	8c3fed16 	blt	r17,r16,200933fc <__flash_rwdata_start+0xffff7278>
20093448:	dac02817 	ldw	r11,160(sp)
2009344c:	1c07883a 	add	r3,r3,r16
20093450:	10800044 	addi	r2,r2,1
20093454:	42c00015 	stw	r11,0(r8)
20093458:	44000115 	stw	r16,4(r8)
2009345c:	d8c01c15 	stw	r3,112(sp)
20093460:	d8801b15 	stw	r2,108(sp)
20093464:	010001c4 	movi	r4,7
20093468:	2080fd16 	blt	r4,r2,20093860 <___svfiprintf_internal_r+0xe04>
2009346c:	dd802017 	ldw	r22,128(sp)
20093470:	da802117 	ldw	r10,132(sp)
20093474:	b280010e 	bge	r22,r10,2009347c <___svfiprintf_internal_r+0xa20>
20093478:	502d883a 	mov	r22,r10
2009347c:	dac02417 	ldw	r11,144(sp)
20093480:	5d97883a 	add	r11,r11,r22
20093484:	dac02415 	stw	r11,144(sp)
20093488:	1800751e 	bne	r3,zero,20093660 <___svfiprintf_internal_r+0xc04>
2009348c:	a8800007 	ldb	r2,0(r21)
20093490:	d8001b15 	stw	zero,108(sp)
20093494:	d811883a 	mov	r8,sp
20093498:	103d961e 	bne	r2,zero,20092af4 <__flash_rwdata_start+0xffff6970>
2009349c:	a82d883a 	mov	r22,r21
200934a0:	003dad06 	br	20092b58 <__flash_rwdata_start+0xffff69d4>
200934a4:	10803fcc 	andi	r2,r2,255
200934a8:	00c00044 	movi	r3,1
200934ac:	10fe2f1e 	bne	r2,r3,20092d6c <__flash_rwdata_start+0xffff6be8>
200934b0:	5000e026 	beq	r10,zero,20093834 <___svfiprintf_internal_r+0xdd8>
200934b4:	dc002015 	stw	r16,128(sp)
200934b8:	dc402215 	stw	r17,136(sp)
200934bc:	dd801a04 	addi	r22,sp,104
200934c0:	402f883a 	mov	r23,r8
200934c4:	5839883a 	mov	fp,r11
200934c8:	4821883a 	mov	r16,r9
200934cc:	5023883a 	mov	r17,r10
200934d0:	8009883a 	mov	r4,r16
200934d4:	880b883a 	mov	r5,r17
200934d8:	01800284 	movi	r6,10
200934dc:	000f883a 	mov	r7,zero
200934e0:	0095e100 	call	20095e10 <__umoddi3>
200934e4:	10800c04 	addi	r2,r2,48
200934e8:	b5bfffc4 	addi	r22,r22,-1
200934ec:	8009883a 	mov	r4,r16
200934f0:	880b883a 	mov	r5,r17
200934f4:	01800284 	movi	r6,10
200934f8:	000f883a 	mov	r7,zero
200934fc:	b0800005 	stb	r2,0(r22)
20093500:	00958500 	call	20095850 <__udivdi3>
20093504:	1021883a 	mov	r16,r2
20093508:	10c4b03a 	or	r2,r2,r3
2009350c:	1823883a 	mov	r17,r3
20093510:	103fef1e 	bne	r2,zero,200934d0 <__flash_rwdata_start+0xffff734c>
20093514:	da801e17 	ldw	r10,120(sp)
20093518:	e017883a 	mov	r11,fp
2009351c:	dc002017 	ldw	r16,128(sp)
20093520:	dc402217 	ldw	r17,136(sp)
20093524:	b811883a 	mov	r8,r23
20093528:	dd802615 	stw	r22,152(sp)
2009352c:	55b9c83a 	sub	fp,r10,r22
20093530:	003e2006 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093534:	d8801c17 	ldw	r2,112(sp)
20093538:	10000426 	beq	r2,zero,2009354c <___svfiprintf_internal_r+0xaf0>
2009353c:	d9002917 	ldw	r4,164(sp)
20093540:	d9402717 	ldw	r5,156(sp)
20093544:	d9801a04 	addi	r6,sp,104
20093548:	00928900 	call	20092890 <__ssprint_r>
2009354c:	da802717 	ldw	r10,156(sp)
20093550:	5080030b 	ldhu	r2,12(r10)
20093554:	1080100c 	andi	r2,r2,64
20093558:	1000511e 	bne	r2,zero,200936a0 <___svfiprintf_internal_r+0xc44>
2009355c:	d8802417 	ldw	r2,144(sp)
20093560:	dfc03617 	ldw	ra,216(sp)
20093564:	df003517 	ldw	fp,212(sp)
20093568:	ddc03417 	ldw	r23,208(sp)
2009356c:	dd803317 	ldw	r22,204(sp)
20093570:	dd403217 	ldw	r21,200(sp)
20093574:	dd003117 	ldw	r20,196(sp)
20093578:	dcc03017 	ldw	r19,192(sp)
2009357c:	dc802f17 	ldw	r18,188(sp)
20093580:	dc402e17 	ldw	r17,184(sp)
20093584:	dc002d17 	ldw	r16,180(sp)
20093588:	dec03704 	addi	sp,sp,220
2009358c:	f800283a 	ret
20093590:	da802117 	ldw	r10,132(sp)
20093594:	dac02017 	ldw	r11,128(sp)
20093598:	52edc83a 	sub	r22,r10,r11
2009359c:	05bf540e 	bge	zero,r22,200932f0 <__flash_rwdata_start+0xffff716c>
200935a0:	02400404 	movi	r9,16
200935a4:	4d81210e 	bge	r9,r22,20093a2c <___svfiprintf_internal_r+0xfd0>
200935a8:	01400034 	movhi	r5,0
200935ac:	29417804 	addi	r5,r5,1504
200935b0:	d9402215 	stw	r5,136(sp)
200935b4:	05c001c4 	movi	r23,7
200935b8:	00000306 	br	200935c8 <___svfiprintf_internal_r+0xb6c>
200935bc:	b5bffc04 	addi	r22,r22,-16
200935c0:	42000204 	addi	r8,r8,8
200935c4:	4d80130e 	bge	r9,r22,20093614 <___svfiprintf_internal_r+0xbb8>
200935c8:	18c00404 	addi	r3,r3,16
200935cc:	10800044 	addi	r2,r2,1
200935d0:	44c00015 	stw	r19,0(r8)
200935d4:	42400115 	stw	r9,4(r8)
200935d8:	d8c01c15 	stw	r3,112(sp)
200935dc:	d8801b15 	stw	r2,108(sp)
200935e0:	b8bff60e 	bge	r23,r2,200935bc <__flash_rwdata_start+0xffff7438>
200935e4:	9009883a 	mov	r4,r18
200935e8:	a00b883a 	mov	r5,r20
200935ec:	d9801a04 	addi	r6,sp,104
200935f0:	da402c15 	stw	r9,176(sp)
200935f4:	00928900 	call	20092890 <__ssprint_r>
200935f8:	da402c17 	ldw	r9,176(sp)
200935fc:	103fd31e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
20093600:	b5bffc04 	addi	r22,r22,-16
20093604:	d8c01c17 	ldw	r3,112(sp)
20093608:	d8801b17 	ldw	r2,108(sp)
2009360c:	d811883a 	mov	r8,sp
20093610:	4dbfed16 	blt	r9,r22,200935c8 <__flash_rwdata_start+0xffff7444>
20093614:	da802217 	ldw	r10,136(sp)
20093618:	1d87883a 	add	r3,r3,r22
2009361c:	10800044 	addi	r2,r2,1
20093620:	42800015 	stw	r10,0(r8)
20093624:	45800115 	stw	r22,4(r8)
20093628:	d8c01c15 	stw	r3,112(sp)
2009362c:	d8801b15 	stw	r2,108(sp)
20093630:	010001c4 	movi	r4,7
20093634:	2080c616 	blt	r4,r2,20093950 <___svfiprintf_internal_r+0xef4>
20093638:	42000204 	addi	r8,r8,8
2009363c:	003f2c06 	br	200932f0 <__flash_rwdata_start+0xffff716c>
20093640:	9009883a 	mov	r4,r18
20093644:	a00b883a 	mov	r5,r20
20093648:	d9801a04 	addi	r6,sp,104
2009364c:	00928900 	call	20092890 <__ssprint_r>
20093650:	103fbe1e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
20093654:	d8c01c17 	ldw	r3,112(sp)
20093658:	d811883a 	mov	r8,sp
2009365c:	003f5606 	br	200933b8 <__flash_rwdata_start+0xffff7234>
20093660:	9009883a 	mov	r4,r18
20093664:	a00b883a 	mov	r5,r20
20093668:	d9801a04 	addi	r6,sp,104
2009366c:	00928900 	call	20092890 <__ssprint_r>
20093670:	103f8626 	beq	r2,zero,2009348c <__flash_rwdata_start+0xffff7308>
20093674:	003fb506 	br	2009354c <__flash_rwdata_start+0xffff73c8>
20093678:	10803fcc 	andi	r2,r2,255
2009367c:	10003b1e 	bne	r2,zero,2009376c <___svfiprintf_internal_r+0xd10>
20093680:	8880004c 	andi	r2,r17,1
20093684:	10007d26 	beq	r2,zero,2009387c <___svfiprintf_internal_r+0xe20>
20093688:	00800c04 	movi	r2,48
2009368c:	d8c019c4 	addi	r3,sp,103
20093690:	d88019c5 	stb	r2,103(sp)
20093694:	df002b17 	ldw	fp,172(sp)
20093698:	d8c02615 	stw	r3,152(sp)
2009369c:	003dc506 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
200936a0:	00bfffc4 	movi	r2,-1
200936a4:	003fae06 	br	20093560 <__flash_rwdata_start+0xffff73dc>
200936a8:	9009883a 	mov	r4,r18
200936ac:	a00b883a 	mov	r5,r20
200936b0:	d9801a04 	addi	r6,sp,104
200936b4:	00928900 	call	20092890 <__ssprint_r>
200936b8:	103fa41e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
200936bc:	d811883a 	mov	r8,sp
200936c0:	003d2206 	br	20092b4c <__flash_rwdata_start+0xffff69c8>
200936c4:	9009883a 	mov	r4,r18
200936c8:	a00b883a 	mov	r5,r20
200936cc:	d9801a04 	addi	r6,sp,104
200936d0:	00928900 	call	20092890 <__ssprint_r>
200936d4:	103f9d1e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
200936d8:	d8c01c17 	ldw	r3,112(sp)
200936dc:	d8801b17 	ldw	r2,108(sp)
200936e0:	d811883a 	mov	r8,sp
200936e4:	003f2a06 	br	20093390 <__flash_rwdata_start+0xffff720c>
200936e8:	d9402a17 	ldw	r5,168(sp)
200936ec:	d8c01a04 	addi	r3,sp,104
200936f0:	488003cc 	andi	r2,r9,15
200936f4:	5008973a 	slli	r4,r10,28
200936f8:	2885883a 	add	r2,r5,r2
200936fc:	4812d13a 	srli	r9,r9,4
20093700:	10800003 	ldbu	r2,0(r2)
20093704:	5014d13a 	srli	r10,r10,4
20093708:	18ffffc4 	addi	r3,r3,-1
2009370c:	2252b03a 	or	r9,r4,r9
20093710:	18800005 	stb	r2,0(r3)
20093714:	4a84b03a 	or	r2,r9,r10
20093718:	103ff51e 	bne	r2,zero,200936f0 <__flash_rwdata_start+0xffff756c>
2009371c:	d8c02615 	stw	r3,152(sp)
20093720:	003da206 	br	20092dac <__flash_rwdata_start+0xffff6c28>
20093724:	9009883a 	mov	r4,r18
20093728:	a00b883a 	mov	r5,r20
2009372c:	d9801a04 	addi	r6,sp,104
20093730:	00928900 	call	20092890 <__ssprint_r>
20093734:	103f851e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
20093738:	d8c01c17 	ldw	r3,112(sp)
2009373c:	d8801b17 	ldw	r2,108(sp)
20093740:	d811883a 	mov	r8,sp
20093744:	003eda06 	br	200932b0 <__flash_rwdata_start+0xffff712c>
20093748:	9009883a 	mov	r4,r18
2009374c:	a00b883a 	mov	r5,r20
20093750:	d9801a04 	addi	r6,sp,104
20093754:	00928900 	call	20092890 <__ssprint_r>
20093758:	103f7c1e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
2009375c:	d8c01c17 	ldw	r3,112(sp)
20093760:	d8801b17 	ldw	r2,108(sp)
20093764:	d811883a 	mov	r8,sp
20093768:	003ede06 	br	200932e4 <__flash_rwdata_start+0xffff7160>
2009376c:	da801a04 	addi	r10,sp,104
20093770:	da802615 	stw	r10,152(sp)
20093774:	003d8f06 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093778:	8880040c 	andi	r2,r17,16
2009377c:	10004c1e 	bne	r2,zero,200938b0 <___svfiprintf_internal_r+0xe54>
20093780:	8880100c 	andi	r2,r17,64
20093784:	da802317 	ldw	r10,140(sp)
20093788:	10004a26 	beq	r2,zero,200938b4 <___svfiprintf_internal_r+0xe58>
2009378c:	5240000b 	ldhu	r9,0(r10)
20093790:	dac02317 	ldw	r11,140(sp)
20093794:	0015883a 	mov	r10,zero
20093798:	00800044 	movi	r2,1
2009379c:	5ac00104 	addi	r11,r11,4
200937a0:	dac02315 	stw	r11,140(sp)
200937a4:	4807883a 	mov	r3,r9
200937a8:	003d6506 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
200937ac:	9009883a 	mov	r4,r18
200937b0:	a00b883a 	mov	r5,r20
200937b4:	d9801a04 	addi	r6,sp,104
200937b8:	00928900 	call	20092890 <__ssprint_r>
200937bc:	103f631e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
200937c0:	d8c01c17 	ldw	r3,112(sp)
200937c4:	d8801b17 	ldw	r2,108(sp)
200937c8:	d811883a 	mov	r8,sp
200937cc:	003eab06 	br	2009327c <__flash_rwdata_start+0xffff70f8>
200937d0:	8880040c 	andi	r2,r17,16
200937d4:	1000331e 	bne	r2,zero,200938a4 <___svfiprintf_internal_r+0xe48>
200937d8:	8880100c 	andi	r2,r17,64
200937dc:	da802317 	ldw	r10,140(sp)
200937e0:	10003126 	beq	r2,zero,200938a8 <___svfiprintf_internal_r+0xe4c>
200937e4:	5240000b 	ldhu	r9,0(r10)
200937e8:	dac02317 	ldw	r11,140(sp)
200937ec:	0015883a 	mov	r10,zero
200937f0:	0005883a 	mov	r2,zero
200937f4:	5ac00104 	addi	r11,r11,4
200937f8:	dac02315 	stw	r11,140(sp)
200937fc:	4807883a 	mov	r3,r9
20093800:	003d4f06 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20093804:	10803fcc 	andi	r2,r2,255
20093808:	1080201c 	xori	r2,r2,128
2009380c:	10bfe004 	addi	r2,r2,-128
20093810:	01000c04 	movi	r4,48
20093814:	11005b26 	beq	r2,r4,20093984 <___svfiprintf_internal_r+0xf28>
20093818:	da802617 	ldw	r10,152(sp)
2009381c:	d8801e17 	ldw	r2,120(sp)
20093820:	193fffc5 	stb	r4,-1(r3)
20093824:	52bfffc4 	addi	r10,r10,-1
20093828:	da802615 	stw	r10,152(sp)
2009382c:	12b9c83a 	sub	fp,r2,r10
20093830:	003d6006 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093834:	00800244 	movi	r2,9
20093838:	127f1e36 	bltu	r2,r9,200934b4 <__flash_rwdata_start+0xffff7330>
2009383c:	4a400c04 	addi	r9,r9,48
20093840:	d8c019c4 	addi	r3,sp,103
20093844:	da4019c5 	stb	r9,103(sp)
20093848:	df002b17 	ldw	fp,172(sp)
2009384c:	d8c02615 	stw	r3,152(sp)
20093850:	003d5806 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093854:	d8802315 	stw	r2,140(sp)
20093858:	a9000007 	ldb	r4,0(r21)
2009385c:	003ccb06 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093860:	9009883a 	mov	r4,r18
20093864:	a00b883a 	mov	r5,r20
20093868:	d9801a04 	addi	r6,sp,104
2009386c:	00928900 	call	20092890 <__ssprint_r>
20093870:	103f361e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
20093874:	d8c01c17 	ldw	r3,112(sp)
20093878:	003efc06 	br	2009346c <__flash_rwdata_start+0xffff72e8>
2009387c:	d8c01a04 	addi	r3,sp,104
20093880:	d8c02615 	stw	r3,152(sp)
20093884:	003d4b06 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093888:	da802317 	ldw	r10,140(sp)
2009388c:	1a400017 	ldw	r9,0(r3)
20093890:	52800104 	addi	r10,r10,4
20093894:	da802315 	stw	r10,140(sp)
20093898:	4815d7fa 	srai	r10,r9,31
2009389c:	5005883a 	mov	r2,r10
200938a0:	003d9c06 	br	20092f14 <__flash_rwdata_start+0xffff6d90>
200938a4:	da802317 	ldw	r10,140(sp)
200938a8:	52400017 	ldw	r9,0(r10)
200938ac:	003fce06 	br	200937e8 <__flash_rwdata_start+0xffff7664>
200938b0:	da802317 	ldw	r10,140(sp)
200938b4:	52400017 	ldw	r9,0(r10)
200938b8:	003fb506 	br	20093790 <__flash_rwdata_start+0xffff760c>
200938bc:	8880100c 	andi	r2,r17,64
200938c0:	da802317 	ldw	r10,140(sp)
200938c4:	103e1926 	beq	r2,zero,2009312c <__flash_rwdata_start+0xffff6fa8>
200938c8:	dac02317 	ldw	r11,140(sp)
200938cc:	5240000b 	ldhu	r9,0(r10)
200938d0:	0015883a 	mov	r10,zero
200938d4:	5ac00104 	addi	r11,r11,4
200938d8:	dac02315 	stw	r11,140(sp)
200938dc:	003de406 	br	20093070 <__flash_rwdata_start+0xffff6eec>
200938e0:	a9000007 	ldb	r4,0(r21)
200938e4:	003ca906 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
200938e8:	dac02317 	ldw	r11,140(sp)
200938ec:	da802417 	ldw	r10,144(sp)
200938f0:	58800017 	ldw	r2,0(r11)
200938f4:	5007d7fa 	srai	r3,r10,31
200938f8:	5ac00104 	addi	r11,r11,4
200938fc:	dac02315 	stw	r11,140(sp)
20093900:	12800015 	stw	r10,0(r2)
20093904:	10c00115 	stw	r3,4(r2)
20093908:	003c7806 	br	20092aec <__flash_rwdata_start+0xffff6968>
2009390c:	00800c04 	movi	r2,48
20093910:	d8801d05 	stb	r2,116(sp)
20093914:	d9001d45 	stb	r4,117(sp)
20093918:	8c400094 	ori	r17,r17,2
2009391c:	00800084 	movi	r2,2
20093920:	003d0706 	br	20092d40 <__flash_rwdata_start+0xffff6bbc>
20093924:	ad400044 	addi	r21,r21,1
20093928:	8c400814 	ori	r17,r17,32
2009392c:	11000047 	ldb	r4,1(r2)
20093930:	003c9606 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093934:	dac02317 	ldw	r11,140(sp)
20093938:	da802417 	ldw	r10,144(sp)
2009393c:	58800017 	ldw	r2,0(r11)
20093940:	5ac00104 	addi	r11,r11,4
20093944:	dac02315 	stw	r11,140(sp)
20093948:	12800015 	stw	r10,0(r2)
2009394c:	003c6706 	br	20092aec <__flash_rwdata_start+0xffff6968>
20093950:	9009883a 	mov	r4,r18
20093954:	a00b883a 	mov	r5,r20
20093958:	d9801a04 	addi	r6,sp,104
2009395c:	00928900 	call	20092890 <__ssprint_r>
20093960:	103efa1e 	bne	r2,zero,2009354c <__flash_rwdata_start+0xffff73c8>
20093964:	d8c01c17 	ldw	r3,112(sp)
20093968:	d8801b17 	ldw	r2,108(sp)
2009396c:	d811883a 	mov	r8,sp
20093970:	003e5f06 	br	200932f0 <__flash_rwdata_start+0xffff716c>
20093974:	02c00034 	movhi	r11,0
20093978:	5ac17804 	addi	r11,r11,1504
2009397c:	dac02215 	stw	r11,136(sp)
20093980:	003e7906 	br	20093368 <__flash_rwdata_start+0xffff71e4>
20093984:	da801e17 	ldw	r10,120(sp)
20093988:	d8c02617 	ldw	r3,152(sp)
2009398c:	50f9c83a 	sub	fp,r10,r3
20093990:	003d0806 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093994:	da002c15 	stw	r8,176(sp)
20093998:	0089e9c0 	call	20089e9c <strlen>
2009399c:	1039883a 	mov	fp,r2
200939a0:	dac01d83 	ldbu	r11,118(sp)
200939a4:	ddc02315 	stw	r23,140(sp)
200939a8:	0021883a 	mov	r16,zero
200939ac:	da002c17 	ldw	r8,176(sp)
200939b0:	003d0006 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
200939b4:	00800184 	movi	r2,6
200939b8:	1400012e 	bgeu	r2,r16,200939c0 <___svfiprintf_internal_r+0xf64>
200939bc:	1021883a 	mov	r16,r2
200939c0:	8039883a 	mov	fp,r16
200939c4:	802d883a 	mov	r22,r16
200939c8:	80002116 	blt	r16,zero,20093a50 <___svfiprintf_internal_r+0xff4>
200939cc:	00800034 	movhi	r2,0
200939d0:	10811404 	addi	r2,r2,1104
200939d4:	dd802015 	stw	r22,128(sp)
200939d8:	ddc02315 	stw	r23,140(sp)
200939dc:	d8802615 	stw	r2,152(sp)
200939e0:	003d5d06 	br	20092f58 <__flash_rwdata_start+0xffff6dd4>
200939e4:	04001004 	movi	r16,64
200939e8:	800b883a 	mov	r5,r16
200939ec:	008913c0 	call	2008913c <_malloc_r>
200939f0:	da802717 	ldw	r10,156(sp)
200939f4:	50800015 	stw	r2,0(r10)
200939f8:	50800415 	stw	r2,16(r10)
200939fc:	10002026 	beq	r2,zero,20093a80 <___svfiprintf_internal_r+0x1024>
20093a00:	da802717 	ldw	r10,156(sp)
20093a04:	54000515 	stw	r16,20(r10)
20093a08:	003c2806 	br	20092aac <__flash_rwdata_start+0xffff6928>
20093a0c:	01000034 	movhi	r4,0
20093a10:	21017c04 	addi	r4,r4,1520
20093a14:	d9002815 	stw	r4,160(sp)
20093a18:	003d7e06 	br	20093014 <__flash_rwdata_start+0xffff6e90>
20093a1c:	01000034 	movhi	r4,0
20093a20:	21017c04 	addi	r4,r4,1520
20093a24:	d9002815 	stw	r4,160(sp)
20093a28:	003e8706 	br	20093448 <__flash_rwdata_start+0xffff72c4>
20093a2c:	01000034 	movhi	r4,0
20093a30:	21017804 	addi	r4,r4,1504
20093a34:	d9002215 	stw	r4,136(sp)
20093a38:	003ef606 	br	20093614 <__flash_rwdata_start+0xffff7490>
20093a3c:	8039883a 	mov	fp,r16
20093a40:	dac01d83 	ldbu	r11,118(sp)
20093a44:	ddc02315 	stw	r23,140(sp)
20093a48:	0021883a 	mov	r16,zero
20093a4c:	003cd906 	br	20092db4 <__flash_rwdata_start+0xffff6c30>
20093a50:	002d883a 	mov	r22,zero
20093a54:	003fdd06 	br	200939cc <__flash_rwdata_start+0xffff7848>
20093a58:	dac02317 	ldw	r11,140(sp)
20093a5c:	a805883a 	mov	r2,r21
20093a60:	502b883a 	mov	r21,r10
20093a64:	5c000017 	ldw	r16,0(r11)
20093a68:	59000104 	addi	r4,r11,4
20093a6c:	d9002315 	stw	r4,140(sp)
20093a70:	803fae0e 	bge	r16,zero,2009392c <__flash_rwdata_start+0xffff77a8>
20093a74:	043fffc4 	movi	r16,-1
20093a78:	11000047 	ldb	r4,1(r2)
20093a7c:	003c4306 	br	20092b8c <__flash_rwdata_start+0xffff6a08>
20093a80:	dac02917 	ldw	r11,164(sp)
20093a84:	00800304 	movi	r2,12
20093a88:	58800015 	stw	r2,0(r11)
20093a8c:	00bfffc4 	movi	r2,-1
20093a90:	003eb306 	br	20093560 <__flash_rwdata_start+0xffff73dc>

20093a94 <__sprint_r.part.0>:
20093a94:	28801917 	ldw	r2,100(r5)
20093a98:	defff604 	addi	sp,sp,-40
20093a9c:	dd400515 	stw	r21,20(sp)
20093aa0:	dcc00315 	stw	r19,12(sp)
20093aa4:	dfc00915 	stw	ra,36(sp)
20093aa8:	df000815 	stw	fp,32(sp)
20093aac:	ddc00715 	stw	r23,28(sp)
20093ab0:	dd800615 	stw	r22,24(sp)
20093ab4:	dd000415 	stw	r20,16(sp)
20093ab8:	dc800215 	stw	r18,8(sp)
20093abc:	dc400115 	stw	r17,4(sp)
20093ac0:	dc000015 	stw	r16,0(sp)
20093ac4:	1088000c 	andi	r2,r2,8192
20093ac8:	2827883a 	mov	r19,r5
20093acc:	302b883a 	mov	r21,r6
20093ad0:	10002d26 	beq	r2,zero,20093b88 <__sprint_r.part.0+0xf4>
20093ad4:	30800217 	ldw	r2,8(r6)
20093ad8:	35800017 	ldw	r22,0(r6)
20093adc:	10002826 	beq	r2,zero,20093b80 <__sprint_r.part.0+0xec>
20093ae0:	2029883a 	mov	r20,r4
20093ae4:	b5c00104 	addi	r23,r22,4
20093ae8:	04bfffc4 	movi	r18,-1
20093aec:	bc400017 	ldw	r17,0(r23)
20093af0:	b4000017 	ldw	r16,0(r22)
20093af4:	0039883a 	mov	fp,zero
20093af8:	8822d0ba 	srli	r17,r17,2
20093afc:	04400316 	blt	zero,r17,20093b0c <__sprint_r.part.0+0x78>
20093b00:	00001806 	br	20093b64 <__sprint_r.part.0+0xd0>
20093b04:	84000104 	addi	r16,r16,4
20093b08:	8f001526 	beq	r17,fp,20093b60 <__sprint_r.part.0+0xcc>
20093b0c:	81400017 	ldw	r5,0(r16)
20093b10:	a009883a 	mov	r4,r20
20093b14:	980d883a 	mov	r6,r19
20093b18:	00951d00 	call	200951d0 <_fputwc_r>
20093b1c:	e7000044 	addi	fp,fp,1
20093b20:	14bff81e 	bne	r2,r18,20093b04 <__flash_rwdata_start+0xffff7980>
20093b24:	9005883a 	mov	r2,r18
20093b28:	a8000215 	stw	zero,8(r21)
20093b2c:	a8000115 	stw	zero,4(r21)
20093b30:	dfc00917 	ldw	ra,36(sp)
20093b34:	df000817 	ldw	fp,32(sp)
20093b38:	ddc00717 	ldw	r23,28(sp)
20093b3c:	dd800617 	ldw	r22,24(sp)
20093b40:	dd400517 	ldw	r21,20(sp)
20093b44:	dd000417 	ldw	r20,16(sp)
20093b48:	dcc00317 	ldw	r19,12(sp)
20093b4c:	dc800217 	ldw	r18,8(sp)
20093b50:	dc400117 	ldw	r17,4(sp)
20093b54:	dc000017 	ldw	r16,0(sp)
20093b58:	dec00a04 	addi	sp,sp,40
20093b5c:	f800283a 	ret
20093b60:	a8800217 	ldw	r2,8(r21)
20093b64:	8c63883a 	add	r17,r17,r17
20093b68:	8c63883a 	add	r17,r17,r17
20093b6c:	1445c83a 	sub	r2,r2,r17
20093b70:	a8800215 	stw	r2,8(r21)
20093b74:	b5800204 	addi	r22,r22,8
20093b78:	bdc00204 	addi	r23,r23,8
20093b7c:	103fdb1e 	bne	r2,zero,20093aec <__flash_rwdata_start+0xffff7968>
20093b80:	0005883a 	mov	r2,zero
20093b84:	003fe806 	br	20093b28 <__flash_rwdata_start+0xffff79a4>
20093b88:	00905500 	call	20090550 <__sfvwrite_r>
20093b8c:	003fe606 	br	20093b28 <__flash_rwdata_start+0xffff79a4>

20093b90 <__sprint_r>:
20093b90:	30c00217 	ldw	r3,8(r6)
20093b94:	18000126 	beq	r3,zero,20093b9c <__sprint_r+0xc>
20093b98:	0093a941 	jmpi	20093a94 <__sprint_r.part.0>
20093b9c:	30000115 	stw	zero,4(r6)
20093ba0:	0005883a 	mov	r2,zero
20093ba4:	f800283a 	ret

20093ba8 <___vfiprintf_internal_r>:
20093ba8:	deffca04 	addi	sp,sp,-216
20093bac:	dd803215 	stw	r22,200(sp)
20093bb0:	dd403115 	stw	r21,196(sp)
20093bb4:	dfc03515 	stw	ra,212(sp)
20093bb8:	df003415 	stw	fp,208(sp)
20093bbc:	ddc03315 	stw	r23,204(sp)
20093bc0:	dd003015 	stw	r20,192(sp)
20093bc4:	dcc02f15 	stw	r19,188(sp)
20093bc8:	dc802e15 	stw	r18,184(sp)
20093bcc:	dc402d15 	stw	r17,180(sp)
20093bd0:	dc002c15 	stw	r16,176(sp)
20093bd4:	d9002015 	stw	r4,128(sp)
20093bd8:	d9c02215 	stw	r7,136(sp)
20093bdc:	282b883a 	mov	r21,r5
20093be0:	302d883a 	mov	r22,r6
20093be4:	20000226 	beq	r4,zero,20093bf0 <___vfiprintf_internal_r+0x48>
20093be8:	20800e17 	ldw	r2,56(r4)
20093bec:	1001b126 	beq	r2,zero,200942b4 <___vfiprintf_internal_r+0x70c>
20093bf0:	a880030b 	ldhu	r2,12(r21)
20093bf4:	10c8000c 	andi	r3,r2,8192
20093bf8:	1800061e 	bne	r3,zero,20093c14 <___vfiprintf_internal_r+0x6c>
20093bfc:	a9001917 	ldw	r4,100(r21)
20093c00:	00f7ffc4 	movi	r3,-8193
20093c04:	10880014 	ori	r2,r2,8192
20093c08:	20c6703a 	and	r3,r4,r3
20093c0c:	a880030d 	sth	r2,12(r21)
20093c10:	a8c01915 	stw	r3,100(r21)
20093c14:	10c0020c 	andi	r3,r2,8
20093c18:	18018926 	beq	r3,zero,20094240 <___vfiprintf_internal_r+0x698>
20093c1c:	a8c00417 	ldw	r3,16(r21)
20093c20:	18018726 	beq	r3,zero,20094240 <___vfiprintf_internal_r+0x698>
20093c24:	1080068c 	andi	r2,r2,26
20093c28:	00c00284 	movi	r3,10
20093c2c:	10c18c26 	beq	r2,r3,20094260 <___vfiprintf_internal_r+0x6b8>
20093c30:	d8801a04 	addi	r2,sp,104
20093c34:	d8c019c4 	addi	r3,sp,103
20093c38:	07000034 	movhi	fp,0
20093c3c:	05c00034 	movhi	r23,0
20093c40:	10c9c83a 	sub	r4,r2,r3
20093c44:	e7018404 	addi	fp,fp,1552
20093c48:	bdc18004 	addi	r23,r23,1536
20093c4c:	d8801e15 	stw	r2,120(sp)
20093c50:	d8c01f15 	stw	r3,124(sp)
20093c54:	dec01a15 	stw	sp,104(sp)
20093c58:	d8001c15 	stw	zero,112(sp)
20093c5c:	d8001b15 	stw	zero,108(sp)
20093c60:	d8002615 	stw	zero,152(sp)
20093c64:	d8002315 	stw	zero,140(sp)
20093c68:	d9002715 	stw	r4,156(sp)
20093c6c:	d811883a 	mov	r8,sp
20093c70:	dd402115 	stw	r21,132(sp)
20093c74:	b021883a 	mov	r16,r22
20093c78:	80800007 	ldb	r2,0(r16)
20093c7c:	10037226 	beq	r2,zero,20094a48 <___vfiprintf_internal_r+0xea0>
20093c80:	01000944 	movi	r4,37
20093c84:	11037026 	beq	r2,r4,20094a48 <___vfiprintf_internal_r+0xea0>
20093c88:	8005883a 	mov	r2,r16
20093c8c:	00000106 	br	20093c94 <___vfiprintf_internal_r+0xec>
20093c90:	19000326 	beq	r3,r4,20093ca0 <___vfiprintf_internal_r+0xf8>
20093c94:	10800044 	addi	r2,r2,1
20093c98:	10c00007 	ldb	r3,0(r2)
20093c9c:	183ffc1e 	bne	r3,zero,20093c90 <__flash_rwdata_start+0xffff7b0c>
20093ca0:	1425c83a 	sub	r18,r2,r16
20093ca4:	1023883a 	mov	r17,r2
20093ca8:	90001026 	beq	r18,zero,20093cec <___vfiprintf_internal_r+0x144>
20093cac:	d8c01c17 	ldw	r3,112(sp)
20093cb0:	d8801b17 	ldw	r2,108(sp)
20093cb4:	44000015 	stw	r16,0(r8)
20093cb8:	90c7883a 	add	r3,r18,r3
20093cbc:	10800044 	addi	r2,r2,1
20093cc0:	44800115 	stw	r18,4(r8)
20093cc4:	d8c01c15 	stw	r3,112(sp)
20093cc8:	d8801b15 	stw	r2,108(sp)
20093ccc:	010001c4 	movi	r4,7
20093cd0:	2080750e 	bge	r4,r2,20093ea8 <___vfiprintf_internal_r+0x300>
20093cd4:	18036f1e 	bne	r3,zero,20094a94 <___vfiprintf_internal_r+0xeec>
20093cd8:	d8802317 	ldw	r2,140(sp)
20093cdc:	d8001b15 	stw	zero,108(sp)
20093ce0:	d811883a 	mov	r8,sp
20093ce4:	1485883a 	add	r2,r2,r18
20093ce8:	d8802315 	stw	r2,140(sp)
20093cec:	88800007 	ldb	r2,0(r17)
20093cf0:	10041026 	beq	r2,zero,20094d34 <___vfiprintf_internal_r+0x118c>
20093cf4:	88c00047 	ldb	r3,1(r17)
20093cf8:	88800044 	addi	r2,r17,1
20093cfc:	d8001d85 	stb	zero,118(sp)
20093d00:	000f883a 	mov	r7,zero
20093d04:	027fffc4 	movi	r9,-1
20093d08:	0025883a 	mov	r18,zero
20093d0c:	002b883a 	mov	r21,zero
20093d10:	01401604 	movi	r5,88
20093d14:	01800244 	movi	r6,9
20093d18:	03400a84 	movi	r13,42
20093d1c:	03001b04 	movi	r12,108
20093d20:	14000044 	addi	r16,r2,1
20093d24:	18bff804 	addi	r2,r3,-32
20093d28:	28825536 	bltu	r5,r2,20094680 <___vfiprintf_internal_r+0xad8>
20093d2c:	100490ba 	slli	r2,r2,2
20093d30:	01080274 	movhi	r4,8201
20093d34:	210f5104 	addi	r4,r4,15684
20093d38:	1105883a 	add	r2,r2,r4
20093d3c:	10800017 	ldw	r2,0(r2)
20093d40:	1000683a 	jmp	r2
20093d44:	20094444 	addi	zero,r4,9489
20093d48:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d4c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d50:	20094464 	muli	zero,r4,9489
20093d54:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d58:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d5c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d60:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d64:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d68:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d6c:	20094474 	orhi	zero,r4,9489
20093d70:	20094494 	ori	zero,r4,9490
20093d74:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d78:	200942bc 	xorhi	zero,r4,9482
20093d7c:	200943a8 	cmpgeui	zero,r4,9486
20093d80:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093d84:	20094328 	cmpgeui	zero,r4,9484
20093d88:	20094338 	rdprs	zero,r4,9484
20093d8c:	20094338 	rdprs	zero,r4,9484
20093d90:	20094338 	rdprs	zero,r4,9484
20093d94:	20094338 	rdprs	zero,r4,9484
20093d98:	20094338 	rdprs	zero,r4,9484
20093d9c:	20094338 	rdprs	zero,r4,9484
20093da0:	20094338 	rdprs	zero,r4,9484
20093da4:	20094338 	rdprs	zero,r4,9484
20093da8:	20094338 	rdprs	zero,r4,9484
20093dac:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093db0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093db4:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093db8:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dbc:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dc0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dc4:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dc8:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dcc:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dd0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dd4:	20094364 	muli	zero,r4,9485
20093dd8:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093ddc:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093de0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093de4:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093de8:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dec:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093df0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093df4:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093df8:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093dfc:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e00:	20093ef0 	cmpltui	zero,r4,9467
20093e04:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e08:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e0c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e10:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e14:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e18:	20093ebc 	xorhi	zero,r4,9466
20093e1c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e20:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e24:	20094504 	addi	zero,r4,9492
20093e28:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e2c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e30:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e34:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e38:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e3c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e40:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e44:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e48:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e4c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e50:	200944a4 	muli	zero,r4,9490
20093e54:	200944d0 	cmplti	zero,r4,9491
20093e58:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e5c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e60:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e64:	200945ac 	andhi	zero,r4,9494
20093e68:	200944d0 	cmplti	zero,r4,9491
20093e6c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e70:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e74:	200945bc 	xorhi	zero,r4,9494
20093e78:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e7c:	200943e8 	cmpgeui	zero,r4,9487
20093e80:	20093ef4 	orhi	zero,r4,9467
20093e84:	200945d0 	cmplti	zero,r4,9495
20093e88:	20094610 	cmplti	zero,r4,9496
20093e8c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e90:	20094558 	cmpnei	zero,r4,9493
20093e94:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093e98:	20093ec0 	call	220093ec <__flash_rwdata_start+0x1f6d268>
20093e9c:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093ea0:	20094680 	call	22009468 <__flash_rwdata_start+0x1f6d2e4>
20093ea4:	20094620 	cmpeqi	zero,r4,9496
20093ea8:	42000204 	addi	r8,r8,8
20093eac:	d8802317 	ldw	r2,140(sp)
20093eb0:	1485883a 	add	r2,r2,r18
20093eb4:	d8802315 	stw	r2,140(sp)
20093eb8:	003f8c06 	br	20093cec <__flash_rwdata_start+0xffff7b68>
20093ebc:	ad400414 	ori	r21,r21,16
20093ec0:	a880080c 	andi	r2,r21,32
20093ec4:	1001e61e 	bne	r2,zero,20094660 <___vfiprintf_internal_r+0xab8>
20093ec8:	a880040c 	andi	r2,r21,16
20093ecc:	10034726 	beq	r2,zero,20094bec <___vfiprintf_internal_r+0x1044>
20093ed0:	d8802217 	ldw	r2,136(sp)
20093ed4:	001b883a 	mov	r13,zero
20093ed8:	15800017 	ldw	r22,0(r2)
20093edc:	10800104 	addi	r2,r2,4
20093ee0:	d8802215 	stw	r2,136(sp)
20093ee4:	b009883a 	mov	r4,r22
20093ee8:	00800044 	movi	r2,1
20093eec:	00000c06 	br	20093f20 <___vfiprintf_internal_r+0x378>
20093ef0:	ad400414 	ori	r21,r21,16
20093ef4:	a880080c 	andi	r2,r21,32
20093ef8:	1001491e 	bne	r2,zero,20094420 <___vfiprintf_internal_r+0x878>
20093efc:	a880040c 	andi	r2,r21,16
20093f00:	10032d26 	beq	r2,zero,20094bb8 <___vfiprintf_internal_r+0x1010>
20093f04:	d9002217 	ldw	r4,136(sp)
20093f08:	001b883a 	mov	r13,zero
20093f0c:	0005883a 	mov	r2,zero
20093f10:	25800017 	ldw	r22,0(r4)
20093f14:	21000104 	addi	r4,r4,4
20093f18:	d9002215 	stw	r4,136(sp)
20093f1c:	b009883a 	mov	r4,r22
20093f20:	d8001d85 	stb	zero,118(sp)
20093f24:	4827883a 	mov	r19,r9
20093f28:	001d883a 	mov	r14,zero
20093f2c:	48000216 	blt	r9,zero,20093f38 <___vfiprintf_internal_r+0x390>
20093f30:	00ffdfc4 	movi	r3,-129
20093f34:	a8ea703a 	and	r21,r21,r3
20093f38:	2002071e 	bne	r4,zero,20094758 <___vfiprintf_internal_r+0xbb0>
20093f3c:	4802ad26 	beq	r9,zero,200949f4 <___vfiprintf_internal_r+0xe4c>
20093f40:	10803fcc 	andi	r2,r2,255
20093f44:	00c00044 	movi	r3,1
20093f48:	10c22b26 	beq	r2,r3,200947f8 <___vfiprintf_internal_r+0xc50>
20093f4c:	00c00084 	movi	r3,2
20093f50:	dd001a04 	addi	r20,sp,104
20093f54:	10c0dd1e 	bne	r2,r3,200942cc <___vfiprintf_internal_r+0x724>
20093f58:	d9002617 	ldw	r4,152(sp)
20093f5c:	b08003cc 	andi	r2,r22,15
20093f60:	6806973a 	slli	r3,r13,28
20093f64:	2085883a 	add	r2,r4,r2
20093f68:	b02cd13a 	srli	r22,r22,4
20093f6c:	10800003 	ldbu	r2,0(r2)
20093f70:	681ad13a 	srli	r13,r13,4
20093f74:	a53fffc4 	addi	r20,r20,-1
20093f78:	1dacb03a 	or	r22,r3,r22
20093f7c:	a0800005 	stb	r2,0(r20)
20093f80:	b344b03a 	or	r2,r22,r13
20093f84:	103ff51e 	bne	r2,zero,20093f5c <__flash_rwdata_start+0xffff7dd8>
20093f88:	d9001e17 	ldw	r4,120(sp)
20093f8c:	2527c83a 	sub	r19,r4,r20
20093f90:	9823883a 	mov	r17,r19
20093f94:	9a40010e 	bge	r19,r9,20093f9c <___vfiprintf_internal_r+0x3f4>
20093f98:	4823883a 	mov	r17,r9
20093f9c:	73803fcc 	andi	r14,r14,255
20093fa0:	7380201c 	xori	r14,r14,128
20093fa4:	73bfe004 	addi	r14,r14,-128
20093fa8:	70000126 	beq	r14,zero,20093fb0 <___vfiprintf_internal_r+0x408>
20093fac:	8c400044 	addi	r17,r17,1
20093fb0:	ab40008c 	andi	r13,r21,2
20093fb4:	68000126 	beq	r13,zero,20093fbc <___vfiprintf_internal_r+0x414>
20093fb8:	8c400084 	addi	r17,r17,2
20093fbc:	ad80210c 	andi	r22,r21,132
20093fc0:	b001c51e 	bne	r22,zero,200946d8 <___vfiprintf_internal_r+0xb30>
20093fc4:	9447c83a 	sub	r3,r18,r17
20093fc8:	00c1c30e 	bge	zero,r3,200946d8 <___vfiprintf_internal_r+0xb30>
20093fcc:	01c00404 	movi	r7,16
20093fd0:	d8801c17 	ldw	r2,112(sp)
20093fd4:	38c37b0e 	bge	r7,r3,20094dc4 <___vfiprintf_internal_r+0x121c>
20093fd8:	01000034 	movhi	r4,0
20093fdc:	21018404 	addi	r4,r4,1552
20093fe0:	dc002915 	stw	r16,164(sp)
20093fe4:	d9801b17 	ldw	r6,108(sp)
20093fe8:	d9002415 	stw	r4,144(sp)
20093fec:	03c001c4 	movi	r15,7
20093ff0:	da402515 	stw	r9,148(sp)
20093ff4:	db402815 	stw	r13,160(sp)
20093ff8:	1821883a 	mov	r16,r3
20093ffc:	00000506 	br	20094014 <___vfiprintf_internal_r+0x46c>
20094000:	31400084 	addi	r5,r6,2
20094004:	42000204 	addi	r8,r8,8
20094008:	200d883a 	mov	r6,r4
2009400c:	843ffc04 	addi	r16,r16,-16
20094010:	3c000d0e 	bge	r7,r16,20094048 <___vfiprintf_internal_r+0x4a0>
20094014:	10800404 	addi	r2,r2,16
20094018:	31000044 	addi	r4,r6,1
2009401c:	47000015 	stw	fp,0(r8)
20094020:	41c00115 	stw	r7,4(r8)
20094024:	d8801c15 	stw	r2,112(sp)
20094028:	d9001b15 	stw	r4,108(sp)
2009402c:	793ff40e 	bge	r15,r4,20094000 <__flash_rwdata_start+0xffff7e7c>
20094030:	10019b1e 	bne	r2,zero,200946a0 <___vfiprintf_internal_r+0xaf8>
20094034:	843ffc04 	addi	r16,r16,-16
20094038:	000d883a 	mov	r6,zero
2009403c:	01400044 	movi	r5,1
20094040:	d811883a 	mov	r8,sp
20094044:	3c3ff316 	blt	r7,r16,20094014 <__flash_rwdata_start+0xffff7e90>
20094048:	8007883a 	mov	r3,r16
2009404c:	da402517 	ldw	r9,148(sp)
20094050:	db402817 	ldw	r13,160(sp)
20094054:	dc002917 	ldw	r16,164(sp)
20094058:	d9002417 	ldw	r4,144(sp)
2009405c:	1885883a 	add	r2,r3,r2
20094060:	40c00115 	stw	r3,4(r8)
20094064:	41000015 	stw	r4,0(r8)
20094068:	d8801c15 	stw	r2,112(sp)
2009406c:	d9401b15 	stw	r5,108(sp)
20094070:	00c001c4 	movi	r3,7
20094074:	19426a16 	blt	r3,r5,20094a20 <___vfiprintf_internal_r+0xe78>
20094078:	d8c01d87 	ldb	r3,118(sp)
2009407c:	42000204 	addi	r8,r8,8
20094080:	29000044 	addi	r4,r5,1
20094084:	1801991e 	bne	r3,zero,200946ec <___vfiprintf_internal_r+0xb44>
20094088:	68000c26 	beq	r13,zero,200940bc <___vfiprintf_internal_r+0x514>
2009408c:	d8c01d04 	addi	r3,sp,116
20094090:	10800084 	addi	r2,r2,2
20094094:	40c00015 	stw	r3,0(r8)
20094098:	00c00084 	movi	r3,2
2009409c:	40c00115 	stw	r3,4(r8)
200940a0:	d8801c15 	stw	r2,112(sp)
200940a4:	d9001b15 	stw	r4,108(sp)
200940a8:	00c001c4 	movi	r3,7
200940ac:	19024c16 	blt	r3,r4,200949e0 <___vfiprintf_internal_r+0xe38>
200940b0:	200b883a 	mov	r5,r4
200940b4:	42000204 	addi	r8,r8,8
200940b8:	21000044 	addi	r4,r4,1
200940bc:	00c02004 	movi	r3,128
200940c0:	b0c20126 	beq	r22,r3,200948c8 <___vfiprintf_internal_r+0xd20>
200940c4:	4cedc83a 	sub	r22,r9,r19
200940c8:	0580230e 	bge	zero,r22,20094158 <___vfiprintf_internal_r+0x5b0>
200940cc:	01c00404 	movi	r7,16
200940d0:	3d83140e 	bge	r7,r22,20094d24 <___vfiprintf_internal_r+0x117c>
200940d4:	01000034 	movhi	r4,0
200940d8:	21018004 	addi	r4,r4,1536
200940dc:	d9002415 	stw	r4,144(sp)
200940e0:	034001c4 	movi	r13,7
200940e4:	00000506 	br	200940fc <___vfiprintf_internal_r+0x554>
200940e8:	29000084 	addi	r4,r5,2
200940ec:	42000204 	addi	r8,r8,8
200940f0:	180b883a 	mov	r5,r3
200940f4:	b5bffc04 	addi	r22,r22,-16
200940f8:	3d800d0e 	bge	r7,r22,20094130 <___vfiprintf_internal_r+0x588>
200940fc:	10800404 	addi	r2,r2,16
20094100:	28c00044 	addi	r3,r5,1
20094104:	45c00015 	stw	r23,0(r8)
20094108:	41c00115 	stw	r7,4(r8)
2009410c:	d8801c15 	stw	r2,112(sp)
20094110:	d8c01b15 	stw	r3,108(sp)
20094114:	68fff40e 	bge	r13,r3,200940e8 <__flash_rwdata_start+0xffff7f64>
20094118:	1001811e 	bne	r2,zero,20094720 <___vfiprintf_internal_r+0xb78>
2009411c:	b5bffc04 	addi	r22,r22,-16
20094120:	01000044 	movi	r4,1
20094124:	000b883a 	mov	r5,zero
20094128:	d811883a 	mov	r8,sp
2009412c:	3dbff316 	blt	r7,r22,200940fc <__flash_rwdata_start+0xffff7f78>
20094130:	d8c02417 	ldw	r3,144(sp)
20094134:	1585883a 	add	r2,r2,r22
20094138:	45800115 	stw	r22,4(r8)
2009413c:	40c00015 	stw	r3,0(r8)
20094140:	d8801c15 	stw	r2,112(sp)
20094144:	d9001b15 	stw	r4,108(sp)
20094148:	00c001c4 	movi	r3,7
2009414c:	1901d016 	blt	r3,r4,20094890 <___vfiprintf_internal_r+0xce8>
20094150:	42000204 	addi	r8,r8,8
20094154:	21000044 	addi	r4,r4,1
20094158:	14c5883a 	add	r2,r2,r19
2009415c:	45000015 	stw	r20,0(r8)
20094160:	44c00115 	stw	r19,4(r8)
20094164:	d8801c15 	stw	r2,112(sp)
20094168:	d9001b15 	stw	r4,108(sp)
2009416c:	00c001c4 	movi	r3,7
20094170:	1901cf0e 	bge	r3,r4,200948b0 <___vfiprintf_internal_r+0xd08>
20094174:	1002361e 	bne	r2,zero,20094a50 <___vfiprintf_internal_r+0xea8>
20094178:	d8001b15 	stw	zero,108(sp)
2009417c:	aac0010c 	andi	r11,r21,4
20094180:	58002826 	beq	r11,zero,20094224 <___vfiprintf_internal_r+0x67c>
20094184:	9467c83a 	sub	r19,r18,r17
20094188:	d811883a 	mov	r8,sp
2009418c:	04c3340e 	bge	zero,r19,20094e60 <___vfiprintf_internal_r+0x12b8>
20094190:	01c00404 	movi	r7,16
20094194:	3cc31b0e 	bge	r7,r19,20094e04 <___vfiprintf_internal_r+0x125c>
20094198:	00c00034 	movhi	r3,0
2009419c:	18c18404 	addi	r3,r3,1552
200941a0:	d9001b17 	ldw	r4,108(sp)
200941a4:	d8c02415 	stw	r3,144(sp)
200941a8:	382b883a 	mov	r21,r7
200941ac:	050001c4 	movi	r20,7
200941b0:	dd802017 	ldw	r22,128(sp)
200941b4:	00000506 	br	200941cc <___vfiprintf_internal_r+0x624>
200941b8:	21400084 	addi	r5,r4,2
200941bc:	42000204 	addi	r8,r8,8
200941c0:	1809883a 	mov	r4,r3
200941c4:	9cfffc04 	addi	r19,r19,-16
200941c8:	acc00d0e 	bge	r21,r19,20094200 <___vfiprintf_internal_r+0x658>
200941cc:	10800404 	addi	r2,r2,16
200941d0:	20c00044 	addi	r3,r4,1
200941d4:	47000015 	stw	fp,0(r8)
200941d8:	45400115 	stw	r21,4(r8)
200941dc:	d8801c15 	stw	r2,112(sp)
200941e0:	d8c01b15 	stw	r3,108(sp)
200941e4:	a0fff40e 	bge	r20,r3,200941b8 <__flash_rwdata_start+0xffff8034>
200941e8:	10019f1e 	bne	r2,zero,20094868 <___vfiprintf_internal_r+0xcc0>
200941ec:	9cfffc04 	addi	r19,r19,-16
200941f0:	01400044 	movi	r5,1
200941f4:	0009883a 	mov	r4,zero
200941f8:	d811883a 	mov	r8,sp
200941fc:	acfff316 	blt	r21,r19,200941cc <__flash_rwdata_start+0xffff8048>
20094200:	d8c02417 	ldw	r3,144(sp)
20094204:	14c5883a 	add	r2,r2,r19
20094208:	44c00115 	stw	r19,4(r8)
2009420c:	40c00015 	stw	r3,0(r8)
20094210:	d8801c15 	stw	r2,112(sp)
20094214:	d9401b15 	stw	r5,108(sp)
20094218:	00c001c4 	movi	r3,7
2009421c:	1941810e 	bge	r3,r5,20094824 <___vfiprintf_internal_r+0xc7c>
20094220:	10017a1e 	bne	r2,zero,2009480c <___vfiprintf_internal_r+0xc64>
20094224:	8c82a416 	blt	r17,r18,20094cb8 <___vfiprintf_internal_r+0x1110>
20094228:	d9002317 	ldw	r4,140(sp)
2009422c:	2449883a 	add	r4,r4,r17
20094230:	d9002315 	stw	r4,140(sp)
20094234:	d8001b15 	stw	zero,108(sp)
20094238:	d811883a 	mov	r8,sp
2009423c:	003e8e06 	br	20093c78 <__flash_rwdata_start+0xffff7af4>
20094240:	d9002017 	ldw	r4,128(sp)
20094244:	a80b883a 	mov	r5,r21
20094248:	008e08c0 	call	2008e08c <__swsetup_r>
2009424c:	10000c1e 	bne	r2,zero,20094280 <___vfiprintf_internal_r+0x6d8>
20094250:	a880030b 	ldhu	r2,12(r21)
20094254:	00c00284 	movi	r3,10
20094258:	1080068c 	andi	r2,r2,26
2009425c:	10fe741e 	bne	r2,r3,20093c30 <__flash_rwdata_start+0xffff7aac>
20094260:	a880038f 	ldh	r2,14(r21)
20094264:	103e7216 	blt	r2,zero,20093c30 <__flash_rwdata_start+0xffff7aac>
20094268:	d9002017 	ldw	r4,128(sp)
2009426c:	d9c02217 	ldw	r7,136(sp)
20094270:	a80b883a 	mov	r5,r21
20094274:	b00d883a 	mov	r6,r22
20094278:	0094e9c0 	call	20094e9c <__sbprintf>
2009427c:	00000106 	br	20094284 <___vfiprintf_internal_r+0x6dc>
20094280:	00bfffc4 	movi	r2,-1
20094284:	dfc03517 	ldw	ra,212(sp)
20094288:	df003417 	ldw	fp,208(sp)
2009428c:	ddc03317 	ldw	r23,204(sp)
20094290:	dd803217 	ldw	r22,200(sp)
20094294:	dd403117 	ldw	r21,196(sp)
20094298:	dd003017 	ldw	r20,192(sp)
2009429c:	dcc02f17 	ldw	r19,188(sp)
200942a0:	dc802e17 	ldw	r18,184(sp)
200942a4:	dc402d17 	ldw	r17,180(sp)
200942a8:	dc002c17 	ldw	r16,176(sp)
200942ac:	dec03604 	addi	sp,sp,216
200942b0:	f800283a 	ret
200942b4:	00900ec0 	call	200900ec <__sinit>
200942b8:	003e4d06 	br	20093bf0 <__flash_rwdata_start+0xffff7a6c>
200942bc:	8005883a 	mov	r2,r16
200942c0:	ad400114 	ori	r21,r21,4
200942c4:	80c00007 	ldb	r3,0(r16)
200942c8:	003e9506 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
200942cc:	b006d0fa 	srli	r3,r22,3
200942d0:	6808977a 	slli	r4,r13,29
200942d4:	681ad0fa 	srli	r13,r13,3
200942d8:	b58001cc 	andi	r22,r22,7
200942dc:	b0800c04 	addi	r2,r22,48
200942e0:	a53fffc4 	addi	r20,r20,-1
200942e4:	20ecb03a 	or	r22,r4,r3
200942e8:	a0800005 	stb	r2,0(r20)
200942ec:	b346b03a 	or	r3,r22,r13
200942f0:	183ff61e 	bne	r3,zero,200942cc <__flash_rwdata_start+0xffff8148>
200942f4:	a8c0004c 	andi	r3,r21,1
200942f8:	a009883a 	mov	r4,r20
200942fc:	18013b26 	beq	r3,zero,200947ec <___vfiprintf_internal_r+0xc44>
20094300:	10803fcc 	andi	r2,r2,255
20094304:	1080201c 	xori	r2,r2,128
20094308:	10bfe004 	addi	r2,r2,-128
2009430c:	00c00c04 	movi	r3,48
20094310:	10ff1d26 	beq	r2,r3,20093f88 <__flash_rwdata_start+0xffff7e04>
20094314:	d8801e17 	ldw	r2,120(sp)
20094318:	a53fffc4 	addi	r20,r20,-1
2009431c:	20ffffc5 	stb	r3,-1(r4)
20094320:	1527c83a 	sub	r19,r2,r20
20094324:	003f1a06 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
20094328:	ad402014 	ori	r21,r21,128
2009432c:	8005883a 	mov	r2,r16
20094330:	80c00007 	ldb	r3,0(r16)
20094334:	003e7a06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094338:	8005883a 	mov	r2,r16
2009433c:	0025883a 	mov	r18,zero
20094340:	193ff404 	addi	r4,r3,-48
20094344:	10c00007 	ldb	r3,0(r2)
20094348:	948002a4 	muli	r18,r18,10
2009434c:	84000044 	addi	r16,r16,1
20094350:	8005883a 	mov	r2,r16
20094354:	9125883a 	add	r18,r18,r4
20094358:	193ff404 	addi	r4,r3,-48
2009435c:	313ff92e 	bgeu	r6,r4,20094344 <__flash_rwdata_start+0xffff81c0>
20094360:	003e7006 	br	20093d24 <__flash_rwdata_start+0xffff7ba0>
20094364:	ad400414 	ori	r21,r21,16
20094368:	d9c01d85 	stb	r7,118(sp)
2009436c:	a880080c 	andi	r2,r21,32
20094370:	d8c02217 	ldw	r3,136(sp)
20094374:	10005a26 	beq	r2,zero,200944e0 <___vfiprintf_internal_r+0x938>
20094378:	d9002217 	ldw	r4,136(sp)
2009437c:	18800117 	ldw	r2,4(r3)
20094380:	1d800017 	ldw	r22,0(r3)
20094384:	21000204 	addi	r4,r4,8
20094388:	d9002215 	stw	r4,136(sp)
2009438c:	101b883a 	mov	r13,r2
20094390:	1001f416 	blt	r2,zero,20094b64 <___vfiprintf_internal_r+0xfbc>
20094394:	db801d83 	ldbu	r14,118(sp)
20094398:	4827883a 	mov	r19,r9
2009439c:	00800044 	movi	r2,1
200943a0:	b348b03a 	or	r4,r22,r13
200943a4:	003ee106 	br	20093f2c <__flash_rwdata_start+0xffff7da8>
200943a8:	80c00007 	ldb	r3,0(r16)
200943ac:	80800044 	addi	r2,r16,1
200943b0:	1b42a326 	beq	r3,r13,20094e40 <___vfiprintf_internal_r+0x1298>
200943b4:	193ff404 	addi	r4,r3,-48
200943b8:	1021883a 	mov	r16,r2
200943bc:	0013883a 	mov	r9,zero
200943c0:	313e5836 	bltu	r6,r4,20093d24 <__flash_rwdata_start+0xffff7ba0>
200943c4:	80c00007 	ldb	r3,0(r16)
200943c8:	4a4002a4 	muli	r9,r9,10
200943cc:	84000044 	addi	r16,r16,1
200943d0:	2253883a 	add	r9,r4,r9
200943d4:	193ff404 	addi	r4,r3,-48
200943d8:	313ffa2e 	bgeu	r6,r4,200943c4 <__flash_rwdata_start+0xffff8240>
200943dc:	483e510e 	bge	r9,zero,20093d24 <__flash_rwdata_start+0xffff7ba0>
200943e0:	027fffc4 	movi	r9,-1
200943e4:	003e4f06 	br	20093d24 <__flash_rwdata_start+0xffff7ba0>
200943e8:	d9c01d85 	stb	r7,118(sp)
200943ec:	a880080c 	andi	r2,r21,32
200943f0:	10020826 	beq	r2,zero,20094c14 <___vfiprintf_internal_r+0x106c>
200943f4:	d8c02217 	ldw	r3,136(sp)
200943f8:	d9002317 	ldw	r4,140(sp)
200943fc:	18800017 	ldw	r2,0(r3)
20094400:	2007d7fa 	srai	r3,r4,31
20094404:	d9002217 	ldw	r4,136(sp)
20094408:	10c00115 	stw	r3,4(r2)
2009440c:	21000104 	addi	r4,r4,4
20094410:	d9002215 	stw	r4,136(sp)
20094414:	d9002317 	ldw	r4,140(sp)
20094418:	11000015 	stw	r4,0(r2)
2009441c:	003e1606 	br	20093c78 <__flash_rwdata_start+0xffff7af4>
20094420:	d8802217 	ldw	r2,136(sp)
20094424:	d8c02217 	ldw	r3,136(sp)
20094428:	15800017 	ldw	r22,0(r2)
2009442c:	13400117 	ldw	r13,4(r2)
20094430:	18c00204 	addi	r3,r3,8
20094434:	0005883a 	mov	r2,zero
20094438:	d8c02215 	stw	r3,136(sp)
2009443c:	b348b03a 	or	r4,r22,r13
20094440:	003eb706 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094444:	38803fcc 	andi	r2,r7,255
20094448:	1080201c 	xori	r2,r2,128
2009444c:	10bfe004 	addi	r2,r2,-128
20094450:	1001e31e 	bne	r2,zero,20094be0 <___vfiprintf_internal_r+0x1038>
20094454:	8005883a 	mov	r2,r16
20094458:	01c00804 	movi	r7,32
2009445c:	80c00007 	ldb	r3,0(r16)
20094460:	003e2f06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094464:	ad400054 	ori	r21,r21,1
20094468:	8005883a 	mov	r2,r16
2009446c:	80c00007 	ldb	r3,0(r16)
20094470:	003e2b06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094474:	d8c02217 	ldw	r3,136(sp)
20094478:	1c800017 	ldw	r18,0(r3)
2009447c:	18c00104 	addi	r3,r3,4
20094480:	90023816 	blt	r18,zero,20094d64 <___vfiprintf_internal_r+0x11bc>
20094484:	d8c02215 	stw	r3,136(sp)
20094488:	8005883a 	mov	r2,r16
2009448c:	80c00007 	ldb	r3,0(r16)
20094490:	003e2306 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094494:	8005883a 	mov	r2,r16
20094498:	01c00ac4 	movi	r7,43
2009449c:	80c00007 	ldb	r3,0(r16)
200944a0:	003e1f06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
200944a4:	d8c02217 	ldw	r3,136(sp)
200944a8:	04400044 	movi	r17,1
200944ac:	d8001d85 	stb	zero,118(sp)
200944b0:	18800017 	ldw	r2,0(r3)
200944b4:	18c00104 	addi	r3,r3,4
200944b8:	d8c02215 	stw	r3,136(sp)
200944bc:	d8801005 	stb	r2,64(sp)
200944c0:	8827883a 	mov	r19,r17
200944c4:	dd001004 	addi	r20,sp,64
200944c8:	0013883a 	mov	r9,zero
200944cc:	003eb806 	br	20093fb0 <__flash_rwdata_start+0xffff7e2c>
200944d0:	d9c01d85 	stb	r7,118(sp)
200944d4:	a880080c 	andi	r2,r21,32
200944d8:	d8c02217 	ldw	r3,136(sp)
200944dc:	103fa61e 	bne	r2,zero,20094378 <__flash_rwdata_start+0xffff81f4>
200944e0:	a880040c 	andi	r2,r21,16
200944e4:	1001dd26 	beq	r2,zero,20094c5c <___vfiprintf_internal_r+0x10b4>
200944e8:	1d800017 	ldw	r22,0(r3)
200944ec:	d8802217 	ldw	r2,136(sp)
200944f0:	b01bd7fa 	srai	r13,r22,31
200944f4:	10800104 	addi	r2,r2,4
200944f8:	d8802215 	stw	r2,136(sp)
200944fc:	6805883a 	mov	r2,r13
20094500:	003fa306 	br	20094390 <__flash_rwdata_start+0xffff820c>
20094504:	00800034 	movhi	r2,0
20094508:	10810a04 	addi	r2,r2,1064
2009450c:	d8802615 	stw	r2,152(sp)
20094510:	d9c01d85 	stb	r7,118(sp)
20094514:	a880080c 	andi	r2,r21,32
20094518:	10004726 	beq	r2,zero,20094638 <___vfiprintf_internal_r+0xa90>
2009451c:	d9002217 	ldw	r4,136(sp)
20094520:	25800017 	ldw	r22,0(r4)
20094524:	23400117 	ldw	r13,4(r4)
20094528:	21000204 	addi	r4,r4,8
2009452c:	d9002215 	stw	r4,136(sp)
20094530:	a880004c 	andi	r2,r21,1
20094534:	10014e26 	beq	r2,zero,20094a70 <___vfiprintf_internal_r+0xec8>
20094538:	b348b03a 	or	r4,r22,r13
2009453c:	20019c26 	beq	r4,zero,20094bb0 <___vfiprintf_internal_r+0x1008>
20094540:	00800c04 	movi	r2,48
20094544:	d8801d05 	stb	r2,116(sp)
20094548:	d8c01d45 	stb	r3,117(sp)
2009454c:	ad400094 	ori	r21,r21,2
20094550:	00800084 	movi	r2,2
20094554:	003e7206 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094558:	d8c02217 	ldw	r3,136(sp)
2009455c:	d8001d85 	stb	zero,118(sp)
20094560:	1d000017 	ldw	r20,0(r3)
20094564:	1d800104 	addi	r22,r3,4
20094568:	a0021c26 	beq	r20,zero,20094ddc <___vfiprintf_internal_r+0x1234>
2009456c:	a009883a 	mov	r4,r20
20094570:	48020016 	blt	r9,zero,20094d74 <___vfiprintf_internal_r+0x11cc>
20094574:	480d883a 	mov	r6,r9
20094578:	000b883a 	mov	r5,zero
2009457c:	da002a15 	stw	r8,168(sp)
20094580:	da402b15 	stw	r9,172(sp)
20094584:	0090e300 	call	20090e30 <memchr>
20094588:	da002a17 	ldw	r8,168(sp)
2009458c:	da402b17 	ldw	r9,172(sp)
20094590:	10022226 	beq	r2,zero,20094e1c <___vfiprintf_internal_r+0x1274>
20094594:	1527c83a 	sub	r19,r2,r20
20094598:	4cc1c916 	blt	r9,r19,20094cc0 <___vfiprintf_internal_r+0x1118>
2009459c:	db801d83 	ldbu	r14,118(sp)
200945a0:	dd802215 	stw	r22,136(sp)
200945a4:	0013883a 	mov	r9,zero
200945a8:	003e7906 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
200945ac:	ad401014 	ori	r21,r21,64
200945b0:	8005883a 	mov	r2,r16
200945b4:	80c00007 	ldb	r3,0(r16)
200945b8:	003dd906 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
200945bc:	80c00007 	ldb	r3,0(r16)
200945c0:	8005883a 	mov	r2,r16
200945c4:	1b01e326 	beq	r3,r12,20094d54 <___vfiprintf_internal_r+0x11ac>
200945c8:	ad400414 	ori	r21,r21,16
200945cc:	003dd406 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
200945d0:	d9002217 	ldw	r4,136(sp)
200945d4:	00800c04 	movi	r2,48
200945d8:	d8801d05 	stb	r2,116(sp)
200945dc:	25800017 	ldw	r22,0(r4)
200945e0:	00801e04 	movi	r2,120
200945e4:	d8801d45 	stb	r2,117(sp)
200945e8:	00800034 	movhi	r2,0
200945ec:	21000104 	addi	r4,r4,4
200945f0:	10810f04 	addi	r2,r2,1084
200945f4:	d9002215 	stw	r4,136(sp)
200945f8:	d8802615 	stw	r2,152(sp)
200945fc:	001b883a 	mov	r13,zero
20094600:	ad400094 	ori	r21,r21,2
20094604:	00800084 	movi	r2,2
20094608:	b009883a 	mov	r4,r22
2009460c:	003e4406 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094610:	ad400814 	ori	r21,r21,32
20094614:	8005883a 	mov	r2,r16
20094618:	80c00007 	ldb	r3,0(r16)
2009461c:	003dc006 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094620:	00800034 	movhi	r2,0
20094624:	10810f04 	addi	r2,r2,1084
20094628:	d8802615 	stw	r2,152(sp)
2009462c:	d9c01d85 	stb	r7,118(sp)
20094630:	a880080c 	andi	r2,r21,32
20094634:	103fb91e 	bne	r2,zero,2009451c <__flash_rwdata_start+0xffff8398>
20094638:	a880040c 	andi	r2,r21,16
2009463c:	10010f1e 	bne	r2,zero,20094a7c <___vfiprintf_internal_r+0xed4>
20094640:	a880100c 	andi	r2,r21,64
20094644:	10010d26 	beq	r2,zero,20094a7c <___vfiprintf_internal_r+0xed4>
20094648:	d9002217 	ldw	r4,136(sp)
2009464c:	001b883a 	mov	r13,zero
20094650:	2580000b 	ldhu	r22,0(r4)
20094654:	21000104 	addi	r4,r4,4
20094658:	d9002215 	stw	r4,136(sp)
2009465c:	003fb406 	br	20094530 <__flash_rwdata_start+0xffff83ac>
20094660:	d9002217 	ldw	r4,136(sp)
20094664:	00800044 	movi	r2,1
20094668:	25800017 	ldw	r22,0(r4)
2009466c:	23400117 	ldw	r13,4(r4)
20094670:	21000204 	addi	r4,r4,8
20094674:	d9002215 	stw	r4,136(sp)
20094678:	b348b03a 	or	r4,r22,r13
2009467c:	003e2806 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094680:	d9c01d85 	stb	r7,118(sp)
20094684:	1801ab26 	beq	r3,zero,20094d34 <___vfiprintf_internal_r+0x118c>
20094688:	04400044 	movi	r17,1
2009468c:	d8c01005 	stb	r3,64(sp)
20094690:	d8001d85 	stb	zero,118(sp)
20094694:	8827883a 	mov	r19,r17
20094698:	dd001004 	addi	r20,sp,64
2009469c:	003f8a06 	br	200944c8 <__flash_rwdata_start+0xffff8344>
200946a0:	d9002017 	ldw	r4,128(sp)
200946a4:	d9402117 	ldw	r5,132(sp)
200946a8:	d9801a04 	addi	r6,sp,104
200946ac:	d9c02b15 	stw	r7,172(sp)
200946b0:	dbc02a15 	stw	r15,168(sp)
200946b4:	0093a940 	call	20093a94 <__sprint_r.part.0>
200946b8:	d9c02b17 	ldw	r7,172(sp)
200946bc:	dbc02a17 	ldw	r15,168(sp)
200946c0:	1000631e 	bne	r2,zero,20094850 <___vfiprintf_internal_r+0xca8>
200946c4:	d9801b17 	ldw	r6,108(sp)
200946c8:	d8801c17 	ldw	r2,112(sp)
200946cc:	d811883a 	mov	r8,sp
200946d0:	31400044 	addi	r5,r6,1
200946d4:	003e4d06 	br	2009400c <__flash_rwdata_start+0xffff7e88>
200946d8:	d9401b17 	ldw	r5,108(sp)
200946dc:	d8801c17 	ldw	r2,112(sp)
200946e0:	29000044 	addi	r4,r5,1
200946e4:	d8c01d87 	ldb	r3,118(sp)
200946e8:	183e6726 	beq	r3,zero,20094088 <__flash_rwdata_start+0xffff7f04>
200946ec:	00c00044 	movi	r3,1
200946f0:	d9401d84 	addi	r5,sp,118
200946f4:	10c5883a 	add	r2,r2,r3
200946f8:	41400015 	stw	r5,0(r8)
200946fc:	40c00115 	stw	r3,4(r8)
20094700:	d8801c15 	stw	r2,112(sp)
20094704:	d9001b15 	stw	r4,108(sp)
20094708:	014001c4 	movi	r5,7
2009470c:	2900ab16 	blt	r5,r4,200949bc <___vfiprintf_internal_r+0xe14>
20094710:	200b883a 	mov	r5,r4
20094714:	42000204 	addi	r8,r8,8
20094718:	21000044 	addi	r4,r4,1
2009471c:	003e5a06 	br	20094088 <__flash_rwdata_start+0xffff7f04>
20094720:	d9002017 	ldw	r4,128(sp)
20094724:	d9402117 	ldw	r5,132(sp)
20094728:	d9801a04 	addi	r6,sp,104
2009472c:	d9c02b15 	stw	r7,172(sp)
20094730:	db402a15 	stw	r13,168(sp)
20094734:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094738:	d9c02b17 	ldw	r7,172(sp)
2009473c:	db402a17 	ldw	r13,168(sp)
20094740:	1000431e 	bne	r2,zero,20094850 <___vfiprintf_internal_r+0xca8>
20094744:	d9401b17 	ldw	r5,108(sp)
20094748:	d8801c17 	ldw	r2,112(sp)
2009474c:	d811883a 	mov	r8,sp
20094750:	29000044 	addi	r4,r5,1
20094754:	003e6706 	br	200940f4 <__flash_rwdata_start+0xffff7f70>
20094758:	10803fcc 	andi	r2,r2,255
2009475c:	00c00044 	movi	r3,1
20094760:	10fdfa1e 	bne	r2,r3,20093f4c <__flash_rwdata_start+0xffff7dc8>
20094764:	6800021e 	bne	r13,zero,20094770 <___vfiprintf_internal_r+0xbc8>
20094768:	00800244 	movi	r2,9
2009476c:	1580222e 	bgeu	r2,r22,200947f8 <___vfiprintf_internal_r+0xc50>
20094770:	dc802415 	stw	r18,144(sp)
20094774:	dc002515 	stw	r16,148(sp)
20094778:	dc401a04 	addi	r17,sp,104
2009477c:	b021883a 	mov	r16,r22
20094780:	4827883a 	mov	r19,r9
20094784:	4029883a 	mov	r20,r8
20094788:	702d883a 	mov	r22,r14
2009478c:	6825883a 	mov	r18,r13
20094790:	8009883a 	mov	r4,r16
20094794:	900b883a 	mov	r5,r18
20094798:	01800284 	movi	r6,10
2009479c:	000f883a 	mov	r7,zero
200947a0:	0095e100 	call	20095e10 <__umoddi3>
200947a4:	10800c04 	addi	r2,r2,48
200947a8:	8c7fffc4 	addi	r17,r17,-1
200947ac:	8009883a 	mov	r4,r16
200947b0:	900b883a 	mov	r5,r18
200947b4:	01800284 	movi	r6,10
200947b8:	000f883a 	mov	r7,zero
200947bc:	88800005 	stb	r2,0(r17)
200947c0:	00958500 	call	20095850 <__udivdi3>
200947c4:	1021883a 	mov	r16,r2
200947c8:	10c4b03a 	or	r2,r2,r3
200947cc:	1825883a 	mov	r18,r3
200947d0:	103fef1e 	bne	r2,zero,20094790 <__flash_rwdata_start+0xffff860c>
200947d4:	dc802417 	ldw	r18,144(sp)
200947d8:	dc002517 	ldw	r16,148(sp)
200947dc:	a011883a 	mov	r8,r20
200947e0:	9813883a 	mov	r9,r19
200947e4:	b01d883a 	mov	r14,r22
200947e8:	8829883a 	mov	r20,r17
200947ec:	d8c01e17 	ldw	r3,120(sp)
200947f0:	1d27c83a 	sub	r19,r3,r20
200947f4:	003de606 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
200947f8:	b5800c04 	addi	r22,r22,48
200947fc:	dd8019c5 	stb	r22,103(sp)
20094800:	dcc02717 	ldw	r19,156(sp)
20094804:	dd0019c4 	addi	r20,sp,103
20094808:	003de106 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
2009480c:	d9002017 	ldw	r4,128(sp)
20094810:	d9402117 	ldw	r5,132(sp)
20094814:	d9801a04 	addi	r6,sp,104
20094818:	0093a940 	call	20093a94 <__sprint_r.part.0>
2009481c:	10000c1e 	bne	r2,zero,20094850 <___vfiprintf_internal_r+0xca8>
20094820:	d8801c17 	ldw	r2,112(sp)
20094824:	8c80010e 	bge	r17,r18,2009482c <___vfiprintf_internal_r+0xc84>
20094828:	9023883a 	mov	r17,r18
2009482c:	d8c02317 	ldw	r3,140(sp)
20094830:	1c47883a 	add	r3,r3,r17
20094834:	d8c02315 	stw	r3,140(sp)
20094838:	103e7e26 	beq	r2,zero,20094234 <__flash_rwdata_start+0xffff80b0>
2009483c:	d9002017 	ldw	r4,128(sp)
20094840:	d9402117 	ldw	r5,132(sp)
20094844:	d9801a04 	addi	r6,sp,104
20094848:	0093a940 	call	20093a94 <__sprint_r.part.0>
2009484c:	103e7926 	beq	r2,zero,20094234 <__flash_rwdata_start+0xffff80b0>
20094850:	dd402117 	ldw	r21,132(sp)
20094854:	a880030b 	ldhu	r2,12(r21)
20094858:	1080100c 	andi	r2,r2,64
2009485c:	103e881e 	bne	r2,zero,20094280 <__flash_rwdata_start+0xffff80fc>
20094860:	d8802317 	ldw	r2,140(sp)
20094864:	003e8706 	br	20094284 <__flash_rwdata_start+0xffff8100>
20094868:	d9402117 	ldw	r5,132(sp)
2009486c:	b009883a 	mov	r4,r22
20094870:	d9801a04 	addi	r6,sp,104
20094874:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094878:	103ff51e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
2009487c:	d9001b17 	ldw	r4,108(sp)
20094880:	d8801c17 	ldw	r2,112(sp)
20094884:	d811883a 	mov	r8,sp
20094888:	21400044 	addi	r5,r4,1
2009488c:	003e4d06 	br	200941c4 <__flash_rwdata_start+0xffff8040>
20094890:	1000aa1e 	bne	r2,zero,20094b3c <___vfiprintf_internal_r+0xf94>
20094894:	00c00044 	movi	r3,1
20094898:	9805883a 	mov	r2,r19
2009489c:	dd000015 	stw	r20,0(sp)
200948a0:	dcc00115 	stw	r19,4(sp)
200948a4:	dcc01c15 	stw	r19,112(sp)
200948a8:	d8c01b15 	stw	r3,108(sp)
200948ac:	d811883a 	mov	r8,sp
200948b0:	42000204 	addi	r8,r8,8
200948b4:	aac0010c 	andi	r11,r21,4
200948b8:	583fda26 	beq	r11,zero,20094824 <__flash_rwdata_start+0xffff86a0>
200948bc:	9467c83a 	sub	r19,r18,r17
200948c0:	04fe3316 	blt	zero,r19,20094190 <__flash_rwdata_start+0xffff800c>
200948c4:	003fd706 	br	20094824 <__flash_rwdata_start+0xffff86a0>
200948c8:	946dc83a 	sub	r22,r18,r17
200948cc:	05bdfd0e 	bge	zero,r22,200940c4 <__flash_rwdata_start+0xffff7f40>
200948d0:	00c00034 	movhi	r3,0
200948d4:	18c18004 	addi	r3,r3,1536
200948d8:	01c00404 	movi	r7,16
200948dc:	d8c02415 	stw	r3,144(sp)
200948e0:	3d81530e 	bge	r7,r22,20094e30 <___vfiprintf_internal_r+0x1288>
200948e4:	8007883a 	mov	r3,r16
200948e8:	034001c4 	movi	r13,7
200948ec:	b021883a 	mov	r16,r22
200948f0:	da402515 	stw	r9,148(sp)
200948f4:	182d883a 	mov	r22,r3
200948f8:	00000506 	br	20094910 <___vfiprintf_internal_r+0xd68>
200948fc:	29800084 	addi	r6,r5,2
20094900:	42000204 	addi	r8,r8,8
20094904:	180b883a 	mov	r5,r3
20094908:	843ffc04 	addi	r16,r16,-16
2009490c:	3c000d0e 	bge	r7,r16,20094944 <___vfiprintf_internal_r+0xd9c>
20094910:	10800404 	addi	r2,r2,16
20094914:	28c00044 	addi	r3,r5,1
20094918:	45c00015 	stw	r23,0(r8)
2009491c:	41c00115 	stw	r7,4(r8)
20094920:	d8801c15 	stw	r2,112(sp)
20094924:	d8c01b15 	stw	r3,108(sp)
20094928:	68fff40e 	bge	r13,r3,200948fc <__flash_rwdata_start+0xffff8778>
2009492c:	1000151e 	bne	r2,zero,20094984 <___vfiprintf_internal_r+0xddc>
20094930:	843ffc04 	addi	r16,r16,-16
20094934:	01800044 	movi	r6,1
20094938:	000b883a 	mov	r5,zero
2009493c:	d811883a 	mov	r8,sp
20094940:	3c3ff316 	blt	r7,r16,20094910 <__flash_rwdata_start+0xffff878c>
20094944:	da402517 	ldw	r9,148(sp)
20094948:	b007883a 	mov	r3,r22
2009494c:	802d883a 	mov	r22,r16
20094950:	1821883a 	mov	r16,r3
20094954:	d8c02417 	ldw	r3,144(sp)
20094958:	1585883a 	add	r2,r2,r22
2009495c:	45800115 	stw	r22,4(r8)
20094960:	40c00015 	stw	r3,0(r8)
20094964:	d8801c15 	stw	r2,112(sp)
20094968:	d9801b15 	stw	r6,108(sp)
2009496c:	00c001c4 	movi	r3,7
20094970:	19806d16 	blt	r3,r6,20094b28 <___vfiprintf_internal_r+0xf80>
20094974:	42000204 	addi	r8,r8,8
20094978:	31000044 	addi	r4,r6,1
2009497c:	300b883a 	mov	r5,r6
20094980:	003dd006 	br	200940c4 <__flash_rwdata_start+0xffff7f40>
20094984:	d9002017 	ldw	r4,128(sp)
20094988:	d9402117 	ldw	r5,132(sp)
2009498c:	d9801a04 	addi	r6,sp,104
20094990:	d9c02b15 	stw	r7,172(sp)
20094994:	db402a15 	stw	r13,168(sp)
20094998:	0093a940 	call	20093a94 <__sprint_r.part.0>
2009499c:	d9c02b17 	ldw	r7,172(sp)
200949a0:	db402a17 	ldw	r13,168(sp)
200949a4:	103faa1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
200949a8:	d9401b17 	ldw	r5,108(sp)
200949ac:	d8801c17 	ldw	r2,112(sp)
200949b0:	d811883a 	mov	r8,sp
200949b4:	29800044 	addi	r6,r5,1
200949b8:	003fd306 	br	20094908 <__flash_rwdata_start+0xffff8784>
200949bc:	1000401e 	bne	r2,zero,20094ac0 <___vfiprintf_internal_r+0xf18>
200949c0:	68003b26 	beq	r13,zero,20094ab0 <___vfiprintf_internal_r+0xf08>
200949c4:	d9001d04 	addi	r4,sp,116
200949c8:	00800084 	movi	r2,2
200949cc:	d9000015 	stw	r4,0(sp)
200949d0:	d8800115 	stw	r2,4(sp)
200949d4:	1809883a 	mov	r4,r3
200949d8:	d811883a 	mov	r8,sp
200949dc:	003db406 	br	200940b0 <__flash_rwdata_start+0xffff7f2c>
200949e0:	1000451e 	bne	r2,zero,20094af8 <___vfiprintf_internal_r+0xf50>
200949e4:	01000044 	movi	r4,1
200949e8:	000b883a 	mov	r5,zero
200949ec:	d811883a 	mov	r8,sp
200949f0:	003db206 	br	200940bc <__flash_rwdata_start+0xffff7f38>
200949f4:	10803fcc 	andi	r2,r2,255
200949f8:	1000071e 	bne	r2,zero,20094a18 <___vfiprintf_internal_r+0xe70>
200949fc:	a880004c 	andi	r2,r21,1
20094a00:	10000526 	beq	r2,zero,20094a18 <___vfiprintf_internal_r+0xe70>
20094a04:	00800c04 	movi	r2,48
20094a08:	d88019c5 	stb	r2,103(sp)
20094a0c:	dcc02717 	ldw	r19,156(sp)
20094a10:	dd0019c4 	addi	r20,sp,103
20094a14:	003d5e06 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
20094a18:	dd001a04 	addi	r20,sp,104
20094a1c:	003d5c06 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
20094a20:	1000971e 	bne	r2,zero,20094c80 <___vfiprintf_internal_r+0x10d8>
20094a24:	d8c01d87 	ldb	r3,118(sp)
20094a28:	18005826 	beq	r3,zero,20094b8c <___vfiprintf_internal_r+0xfe4>
20094a2c:	00800044 	movi	r2,1
20094a30:	d8c01d84 	addi	r3,sp,118
20094a34:	1009883a 	mov	r4,r2
20094a38:	d8c00015 	stw	r3,0(sp)
20094a3c:	d8800115 	stw	r2,4(sp)
20094a40:	d811883a 	mov	r8,sp
20094a44:	003f3206 	br	20094710 <__flash_rwdata_start+0xffff858c>
20094a48:	8023883a 	mov	r17,r16
20094a4c:	003ca706 	br	20093cec <__flash_rwdata_start+0xffff7b68>
20094a50:	d9002017 	ldw	r4,128(sp)
20094a54:	d9402117 	ldw	r5,132(sp)
20094a58:	d9801a04 	addi	r6,sp,104
20094a5c:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094a60:	103f7b1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094a64:	d8801c17 	ldw	r2,112(sp)
20094a68:	d811883a 	mov	r8,sp
20094a6c:	003f9106 	br	200948b4 <__flash_rwdata_start+0xffff8730>
20094a70:	00800084 	movi	r2,2
20094a74:	b348b03a 	or	r4,r22,r13
20094a78:	003d2906 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094a7c:	d8802217 	ldw	r2,136(sp)
20094a80:	001b883a 	mov	r13,zero
20094a84:	15800017 	ldw	r22,0(r2)
20094a88:	10800104 	addi	r2,r2,4
20094a8c:	d8802215 	stw	r2,136(sp)
20094a90:	003ea706 	br	20094530 <__flash_rwdata_start+0xffff83ac>
20094a94:	d9002017 	ldw	r4,128(sp)
20094a98:	d9402117 	ldw	r5,132(sp)
20094a9c:	d9801a04 	addi	r6,sp,104
20094aa0:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094aa4:	103f6a1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094aa8:	d811883a 	mov	r8,sp
20094aac:	003cff06 	br	20093eac <__flash_rwdata_start+0xffff7d28>
20094ab0:	000b883a 	mov	r5,zero
20094ab4:	1809883a 	mov	r4,r3
20094ab8:	d811883a 	mov	r8,sp
20094abc:	003d7f06 	br	200940bc <__flash_rwdata_start+0xffff7f38>
20094ac0:	d9002017 	ldw	r4,128(sp)
20094ac4:	d9402117 	ldw	r5,132(sp)
20094ac8:	d9801a04 	addi	r6,sp,104
20094acc:	da402b15 	stw	r9,172(sp)
20094ad0:	db402a15 	stw	r13,168(sp)
20094ad4:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094ad8:	da402b17 	ldw	r9,172(sp)
20094adc:	db402a17 	ldw	r13,168(sp)
20094ae0:	103f5b1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094ae4:	d9401b17 	ldw	r5,108(sp)
20094ae8:	d8801c17 	ldw	r2,112(sp)
20094aec:	d811883a 	mov	r8,sp
20094af0:	29000044 	addi	r4,r5,1
20094af4:	003d6406 	br	20094088 <__flash_rwdata_start+0xffff7f04>
20094af8:	d9002017 	ldw	r4,128(sp)
20094afc:	d9402117 	ldw	r5,132(sp)
20094b00:	d9801a04 	addi	r6,sp,104
20094b04:	da402b15 	stw	r9,172(sp)
20094b08:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094b0c:	da402b17 	ldw	r9,172(sp)
20094b10:	103f4f1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094b14:	d9401b17 	ldw	r5,108(sp)
20094b18:	d8801c17 	ldw	r2,112(sp)
20094b1c:	d811883a 	mov	r8,sp
20094b20:	29000044 	addi	r4,r5,1
20094b24:	003d6506 	br	200940bc <__flash_rwdata_start+0xffff7f38>
20094b28:	10009a1e 	bne	r2,zero,20094d94 <___vfiprintf_internal_r+0x11ec>
20094b2c:	01000044 	movi	r4,1
20094b30:	000b883a 	mov	r5,zero
20094b34:	d811883a 	mov	r8,sp
20094b38:	003d6206 	br	200940c4 <__flash_rwdata_start+0xffff7f40>
20094b3c:	d9002017 	ldw	r4,128(sp)
20094b40:	d9402117 	ldw	r5,132(sp)
20094b44:	d9801a04 	addi	r6,sp,104
20094b48:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094b4c:	103f401e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094b50:	d9001b17 	ldw	r4,108(sp)
20094b54:	d8801c17 	ldw	r2,112(sp)
20094b58:	d811883a 	mov	r8,sp
20094b5c:	21000044 	addi	r4,r4,1
20094b60:	003d7d06 	br	20094158 <__flash_rwdata_start+0xffff7fd4>
20094b64:	05adc83a 	sub	r22,zero,r22
20094b68:	b004c03a 	cmpne	r2,r22,zero
20094b6c:	035bc83a 	sub	r13,zero,r13
20094b70:	689bc83a 	sub	r13,r13,r2
20094b74:	03800b44 	movi	r14,45
20094b78:	db801d85 	stb	r14,118(sp)
20094b7c:	4827883a 	mov	r19,r9
20094b80:	00800044 	movi	r2,1
20094b84:	b348b03a 	or	r4,r22,r13
20094b88:	003ce806 	br	20093f2c <__flash_rwdata_start+0xffff7da8>
20094b8c:	000b883a 	mov	r5,zero
20094b90:	01000044 	movi	r4,1
20094b94:	d811883a 	mov	r8,sp
20094b98:	683d4826 	beq	r13,zero,200940bc <__flash_rwdata_start+0xffff7f38>
20094b9c:	00800084 	movi	r2,2
20094ba0:	d8c01d04 	addi	r3,sp,116
20094ba4:	d8c00015 	stw	r3,0(sp)
20094ba8:	d8800115 	stw	r2,4(sp)
20094bac:	003d4006 	br	200940b0 <__flash_rwdata_start+0xffff7f2c>
20094bb0:	00800084 	movi	r2,2
20094bb4:	003cda06 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094bb8:	a880100c 	andi	r2,r21,64
20094bbc:	10004226 	beq	r2,zero,20094cc8 <___vfiprintf_internal_r+0x1120>
20094bc0:	d8802217 	ldw	r2,136(sp)
20094bc4:	001b883a 	mov	r13,zero
20094bc8:	1580000b 	ldhu	r22,0(r2)
20094bcc:	10800104 	addi	r2,r2,4
20094bd0:	d8802215 	stw	r2,136(sp)
20094bd4:	b009883a 	mov	r4,r22
20094bd8:	0005883a 	mov	r2,zero
20094bdc:	003cd006 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094be0:	80c00007 	ldb	r3,0(r16)
20094be4:	8005883a 	mov	r2,r16
20094be8:	003c4d06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094bec:	a880100c 	andi	r2,r21,64
20094bf0:	10004426 	beq	r2,zero,20094d04 <___vfiprintf_internal_r+0x115c>
20094bf4:	d8c02217 	ldw	r3,136(sp)
20094bf8:	001b883a 	mov	r13,zero
20094bfc:	00800044 	movi	r2,1
20094c00:	1d80000b 	ldhu	r22,0(r3)
20094c04:	18c00104 	addi	r3,r3,4
20094c08:	d8c02215 	stw	r3,136(sp)
20094c0c:	b009883a 	mov	r4,r22
20094c10:	003cc306 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094c14:	a880040c 	andi	r2,r21,16
20094c18:	1000091e 	bne	r2,zero,20094c40 <___vfiprintf_internal_r+0x1098>
20094c1c:	aac0100c 	andi	r11,r21,64
20094c20:	58000726 	beq	r11,zero,20094c40 <___vfiprintf_internal_r+0x1098>
20094c24:	d8c02217 	ldw	r3,136(sp)
20094c28:	d9002317 	ldw	r4,140(sp)
20094c2c:	18800017 	ldw	r2,0(r3)
20094c30:	18c00104 	addi	r3,r3,4
20094c34:	d8c02215 	stw	r3,136(sp)
20094c38:	1100000d 	sth	r4,0(r2)
20094c3c:	003c0e06 	br	20093c78 <__flash_rwdata_start+0xffff7af4>
20094c40:	d8c02217 	ldw	r3,136(sp)
20094c44:	d9002317 	ldw	r4,140(sp)
20094c48:	18800017 	ldw	r2,0(r3)
20094c4c:	18c00104 	addi	r3,r3,4
20094c50:	d8c02215 	stw	r3,136(sp)
20094c54:	11000015 	stw	r4,0(r2)
20094c58:	003c0706 	br	20093c78 <__flash_rwdata_start+0xffff7af4>
20094c5c:	a880100c 	andi	r2,r21,64
20094c60:	10002126 	beq	r2,zero,20094ce8 <___vfiprintf_internal_r+0x1140>
20094c64:	1d80000f 	ldh	r22,0(r3)
20094c68:	d8c02217 	ldw	r3,136(sp)
20094c6c:	b01bd7fa 	srai	r13,r22,31
20094c70:	18c00104 	addi	r3,r3,4
20094c74:	d8c02215 	stw	r3,136(sp)
20094c78:	6805883a 	mov	r2,r13
20094c7c:	003dc406 	br	20094390 <__flash_rwdata_start+0xffff820c>
20094c80:	d9002017 	ldw	r4,128(sp)
20094c84:	d9402117 	ldw	r5,132(sp)
20094c88:	d9801a04 	addi	r6,sp,104
20094c8c:	da402b15 	stw	r9,172(sp)
20094c90:	db402a15 	stw	r13,168(sp)
20094c94:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094c98:	da402b17 	ldw	r9,172(sp)
20094c9c:	db402a17 	ldw	r13,168(sp)
20094ca0:	103eeb1e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094ca4:	d9401b17 	ldw	r5,108(sp)
20094ca8:	d8801c17 	ldw	r2,112(sp)
20094cac:	d811883a 	mov	r8,sp
20094cb0:	29000044 	addi	r4,r5,1
20094cb4:	003e8b06 	br	200946e4 <__flash_rwdata_start+0xffff8560>
20094cb8:	9023883a 	mov	r17,r18
20094cbc:	003d5a06 	br	20094228 <__flash_rwdata_start+0xffff80a4>
20094cc0:	4827883a 	mov	r19,r9
20094cc4:	003e3506 	br	2009459c <__flash_rwdata_start+0xffff8418>
20094cc8:	d8c02217 	ldw	r3,136(sp)
20094ccc:	001b883a 	mov	r13,zero
20094cd0:	0005883a 	mov	r2,zero
20094cd4:	1d800017 	ldw	r22,0(r3)
20094cd8:	18c00104 	addi	r3,r3,4
20094cdc:	d8c02215 	stw	r3,136(sp)
20094ce0:	b009883a 	mov	r4,r22
20094ce4:	003c8e06 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094ce8:	1d800017 	ldw	r22,0(r3)
20094cec:	d9002217 	ldw	r4,136(sp)
20094cf0:	b01bd7fa 	srai	r13,r22,31
20094cf4:	21000104 	addi	r4,r4,4
20094cf8:	d9002215 	stw	r4,136(sp)
20094cfc:	6805883a 	mov	r2,r13
20094d00:	003da306 	br	20094390 <__flash_rwdata_start+0xffff820c>
20094d04:	d9002217 	ldw	r4,136(sp)
20094d08:	001b883a 	mov	r13,zero
20094d0c:	00800044 	movi	r2,1
20094d10:	25800017 	ldw	r22,0(r4)
20094d14:	21000104 	addi	r4,r4,4
20094d18:	d9002215 	stw	r4,136(sp)
20094d1c:	b009883a 	mov	r4,r22
20094d20:	003c7f06 	br	20093f20 <__flash_rwdata_start+0xffff7d9c>
20094d24:	00c00034 	movhi	r3,0
20094d28:	18c18004 	addi	r3,r3,1536
20094d2c:	d8c02415 	stw	r3,144(sp)
20094d30:	003cff06 	br	20094130 <__flash_rwdata_start+0xffff7fac>
20094d34:	d8801c17 	ldw	r2,112(sp)
20094d38:	dd402117 	ldw	r21,132(sp)
20094d3c:	103ec526 	beq	r2,zero,20094854 <__flash_rwdata_start+0xffff86d0>
20094d40:	d9002017 	ldw	r4,128(sp)
20094d44:	a80b883a 	mov	r5,r21
20094d48:	d9801a04 	addi	r6,sp,104
20094d4c:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094d50:	003ec006 	br	20094854 <__flash_rwdata_start+0xffff86d0>
20094d54:	80800044 	addi	r2,r16,1
20094d58:	ad400814 	ori	r21,r21,32
20094d5c:	80c00047 	ldb	r3,1(r16)
20094d60:	003bef06 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094d64:	04a5c83a 	sub	r18,zero,r18
20094d68:	8005883a 	mov	r2,r16
20094d6c:	d8c02215 	stw	r3,136(sp)
20094d70:	003d5306 	br	200942c0 <__flash_rwdata_start+0xffff813c>
20094d74:	da002a15 	stw	r8,168(sp)
20094d78:	0089e9c0 	call	20089e9c <strlen>
20094d7c:	1027883a 	mov	r19,r2
20094d80:	db801d83 	ldbu	r14,118(sp)
20094d84:	dd802215 	stw	r22,136(sp)
20094d88:	0013883a 	mov	r9,zero
20094d8c:	da002a17 	ldw	r8,168(sp)
20094d90:	003c7f06 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
20094d94:	d9002017 	ldw	r4,128(sp)
20094d98:	d9402117 	ldw	r5,132(sp)
20094d9c:	d9801a04 	addi	r6,sp,104
20094da0:	da402b15 	stw	r9,172(sp)
20094da4:	0093a940 	call	20093a94 <__sprint_r.part.0>
20094da8:	da402b17 	ldw	r9,172(sp)
20094dac:	103ea81e 	bne	r2,zero,20094850 <__flash_rwdata_start+0xffff86cc>
20094db0:	d9401b17 	ldw	r5,108(sp)
20094db4:	d8801c17 	ldw	r2,112(sp)
20094db8:	d811883a 	mov	r8,sp
20094dbc:	29000044 	addi	r4,r5,1
20094dc0:	003cc006 	br	200940c4 <__flash_rwdata_start+0xffff7f40>
20094dc4:	d9401b17 	ldw	r5,108(sp)
20094dc8:	01000034 	movhi	r4,0
20094dcc:	21018404 	addi	r4,r4,1552
20094dd0:	d9002415 	stw	r4,144(sp)
20094dd4:	29400044 	addi	r5,r5,1
20094dd8:	003c9f06 	br	20094058 <__flash_rwdata_start+0xffff7ed4>
20094ddc:	00800184 	movi	r2,6
20094de0:	1240012e 	bgeu	r2,r9,20094de8 <___vfiprintf_internal_r+0x1240>
20094de4:	1013883a 	mov	r9,r2
20094de8:	4827883a 	mov	r19,r9
20094dec:	4823883a 	mov	r17,r9
20094df0:	48001116 	blt	r9,zero,20094e38 <___vfiprintf_internal_r+0x1290>
20094df4:	05000034 	movhi	r20,0
20094df8:	dd802215 	stw	r22,136(sp)
20094dfc:	a5011404 	addi	r20,r20,1104
20094e00:	003db106 	br	200944c8 <__flash_rwdata_start+0xffff8344>
20094e04:	d9401b17 	ldw	r5,108(sp)
20094e08:	01000034 	movhi	r4,0
20094e0c:	21018404 	addi	r4,r4,1552
20094e10:	d9002415 	stw	r4,144(sp)
20094e14:	29400044 	addi	r5,r5,1
20094e18:	003cf906 	br	20094200 <__flash_rwdata_start+0xffff807c>
20094e1c:	4827883a 	mov	r19,r9
20094e20:	db801d83 	ldbu	r14,118(sp)
20094e24:	dd802215 	stw	r22,136(sp)
20094e28:	0013883a 	mov	r9,zero
20094e2c:	003c5806 	br	20093f90 <__flash_rwdata_start+0xffff7e0c>
20094e30:	200d883a 	mov	r6,r4
20094e34:	003ec706 	br	20094954 <__flash_rwdata_start+0xffff87d0>
20094e38:	0023883a 	mov	r17,zero
20094e3c:	003fed06 	br	20094df4 <__flash_rwdata_start+0xffff8c70>
20094e40:	d9002217 	ldw	r4,136(sp)
20094e44:	22400017 	ldw	r9,0(r4)
20094e48:	20c00104 	addi	r3,r4,4
20094e4c:	d8c02215 	stw	r3,136(sp)
20094e50:	483fc20e 	bge	r9,zero,20094d5c <__flash_rwdata_start+0xffff8bd8>
20094e54:	027fffc4 	movi	r9,-1
20094e58:	80c00047 	ldb	r3,1(r16)
20094e5c:	003bb006 	br	20093d20 <__flash_rwdata_start+0xffff7b9c>
20094e60:	8c80010e 	bge	r17,r18,20094e68 <___vfiprintf_internal_r+0x12c0>
20094e64:	9023883a 	mov	r17,r18
20094e68:	d8802317 	ldw	r2,140(sp)
20094e6c:	1445883a 	add	r2,r2,r17
20094e70:	d8802315 	stw	r2,140(sp)
20094e74:	003cef06 	br	20094234 <__flash_rwdata_start+0xffff80b0>

20094e78 <__vfiprintf_internal>:
20094e78:	2007883a 	mov	r3,r4
20094e7c:	01000034 	movhi	r4,0
20094e80:	2108e004 	addi	r4,r4,9088
20094e84:	21000017 	ldw	r4,0(r4)
20094e88:	2805883a 	mov	r2,r5
20094e8c:	300f883a 	mov	r7,r6
20094e90:	180b883a 	mov	r5,r3
20094e94:	100d883a 	mov	r6,r2
20094e98:	0093ba81 	jmpi	20093ba8 <___vfiprintf_internal_r>

20094e9c <__sbprintf>:
20094e9c:	2880030b 	ldhu	r2,12(r5)
20094ea0:	2ac01917 	ldw	r11,100(r5)
20094ea4:	2a80038b 	ldhu	r10,14(r5)
20094ea8:	2a400717 	ldw	r9,28(r5)
20094eac:	2a000917 	ldw	r8,36(r5)
20094eb0:	defee204 	addi	sp,sp,-1144
20094eb4:	00c10004 	movi	r3,1024
20094eb8:	dc011a15 	stw	r16,1128(sp)
20094ebc:	10bfff4c 	andi	r2,r2,65533
20094ec0:	2821883a 	mov	r16,r5
20094ec4:	d8cb883a 	add	r5,sp,r3
20094ec8:	dc811c15 	stw	r18,1136(sp)
20094ecc:	dc411b15 	stw	r17,1132(sp)
20094ed0:	dfc11d15 	stw	ra,1140(sp)
20094ed4:	2025883a 	mov	r18,r4
20094ed8:	d881030d 	sth	r2,1036(sp)
20094edc:	dac11915 	stw	r11,1124(sp)
20094ee0:	da81038d 	sth	r10,1038(sp)
20094ee4:	da410715 	stw	r9,1052(sp)
20094ee8:	da010915 	stw	r8,1060(sp)
20094eec:	dec10015 	stw	sp,1024(sp)
20094ef0:	dec10415 	stw	sp,1040(sp)
20094ef4:	d8c10215 	stw	r3,1032(sp)
20094ef8:	d8c10515 	stw	r3,1044(sp)
20094efc:	d8010615 	stw	zero,1048(sp)
20094f00:	0093ba80 	call	20093ba8 <___vfiprintf_internal_r>
20094f04:	1023883a 	mov	r17,r2
20094f08:	10000416 	blt	r2,zero,20094f1c <__sbprintf+0x80>
20094f0c:	9009883a 	mov	r4,r18
20094f10:	d9410004 	addi	r5,sp,1024
20094f14:	008fd100 	call	2008fd10 <_fflush_r>
20094f18:	10000d1e 	bne	r2,zero,20094f50 <__sbprintf+0xb4>
20094f1c:	d8c1030b 	ldhu	r3,1036(sp)
20094f20:	18c0100c 	andi	r3,r3,64
20094f24:	18000326 	beq	r3,zero,20094f34 <__sbprintf+0x98>
20094f28:	8080030b 	ldhu	r2,12(r16)
20094f2c:	10801014 	ori	r2,r2,64
20094f30:	8080030d 	sth	r2,12(r16)
20094f34:	8805883a 	mov	r2,r17
20094f38:	dfc11d17 	ldw	ra,1140(sp)
20094f3c:	dc811c17 	ldw	r18,1136(sp)
20094f40:	dc411b17 	ldw	r17,1132(sp)
20094f44:	dc011a17 	ldw	r16,1128(sp)
20094f48:	dec11e04 	addi	sp,sp,1144
20094f4c:	f800283a 	ret
20094f50:	047fffc4 	movi	r17,-1
20094f54:	003ff106 	br	20094f1c <__flash_rwdata_start+0xffff8d98>

20094f58 <_write_r>:
20094f58:	defffd04 	addi	sp,sp,-12
20094f5c:	dc000015 	stw	r16,0(sp)
20094f60:	04000034 	movhi	r16,0
20094f64:	dc400115 	stw	r17,4(sp)
20094f68:	8408f504 	addi	r16,r16,9172
20094f6c:	2023883a 	mov	r17,r4
20094f70:	2809883a 	mov	r4,r5
20094f74:	300b883a 	mov	r5,r6
20094f78:	380d883a 	mov	r6,r7
20094f7c:	dfc00215 	stw	ra,8(sp)
20094f80:	80000015 	stw	zero,0(r16)
20094f84:	009786c0 	call	2009786c <write>
20094f88:	00ffffc4 	movi	r3,-1
20094f8c:	10c00526 	beq	r2,r3,20094fa4 <_write_r+0x4c>
20094f90:	dfc00217 	ldw	ra,8(sp)
20094f94:	dc400117 	ldw	r17,4(sp)
20094f98:	dc000017 	ldw	r16,0(sp)
20094f9c:	dec00304 	addi	sp,sp,12
20094fa0:	f800283a 	ret
20094fa4:	80c00017 	ldw	r3,0(r16)
20094fa8:	183ff926 	beq	r3,zero,20094f90 <__flash_rwdata_start+0xffff8e0c>
20094fac:	88c00015 	stw	r3,0(r17)
20094fb0:	003ff706 	br	20094f90 <__flash_rwdata_start+0xffff8e0c>

20094fb4 <_close_r>:
20094fb4:	defffd04 	addi	sp,sp,-12
20094fb8:	dc000015 	stw	r16,0(sp)
20094fbc:	04000034 	movhi	r16,0
20094fc0:	dc400115 	stw	r17,4(sp)
20094fc4:	8408f504 	addi	r16,r16,9172
20094fc8:	2023883a 	mov	r17,r4
20094fcc:	2809883a 	mov	r4,r5
20094fd0:	dfc00215 	stw	ra,8(sp)
20094fd4:	80000015 	stw	zero,0(r16)
20094fd8:	0096d580 	call	20096d58 <close>
20094fdc:	00ffffc4 	movi	r3,-1
20094fe0:	10c00526 	beq	r2,r3,20094ff8 <_close_r+0x44>
20094fe4:	dfc00217 	ldw	ra,8(sp)
20094fe8:	dc400117 	ldw	r17,4(sp)
20094fec:	dc000017 	ldw	r16,0(sp)
20094ff0:	dec00304 	addi	sp,sp,12
20094ff4:	f800283a 	ret
20094ff8:	80c00017 	ldw	r3,0(r16)
20094ffc:	183ff926 	beq	r3,zero,20094fe4 <__flash_rwdata_start+0xffff8e60>
20095000:	88c00015 	stw	r3,0(r17)
20095004:	003ff706 	br	20094fe4 <__flash_rwdata_start+0xffff8e60>

20095008 <_calloc_r>:
20095008:	298b383a 	mul	r5,r5,r6
2009500c:	defffe04 	addi	sp,sp,-8
20095010:	dc000015 	stw	r16,0(sp)
20095014:	dfc00115 	stw	ra,4(sp)
20095018:	008913c0 	call	2008913c <_malloc_r>
2009501c:	1021883a 	mov	r16,r2
20095020:	10002826 	beq	r2,zero,200950c4 <_calloc_r+0xbc>
20095024:	11bfff17 	ldw	r6,-4(r2)
20095028:	00bfff04 	movi	r2,-4
2009502c:	00c00904 	movi	r3,36
20095030:	308c703a 	and	r6,r6,r2
20095034:	308d883a 	add	r6,r6,r2
20095038:	19801436 	bltu	r3,r6,2009508c <_calloc_r+0x84>
2009503c:	008004c4 	movi	r2,19
20095040:	11800936 	bltu	r2,r6,20095068 <_calloc_r+0x60>
20095044:	8005883a 	mov	r2,r16
20095048:	10000015 	stw	zero,0(r2)
2009504c:	10000115 	stw	zero,4(r2)
20095050:	10000215 	stw	zero,8(r2)
20095054:	8005883a 	mov	r2,r16
20095058:	dfc00117 	ldw	ra,4(sp)
2009505c:	dc000017 	ldw	r16,0(sp)
20095060:	dec00204 	addi	sp,sp,8
20095064:	f800283a 	ret
20095068:	80000015 	stw	zero,0(r16)
2009506c:	80000115 	stw	zero,4(r16)
20095070:	008006c4 	movi	r2,27
20095074:	11800d2e 	bgeu	r2,r6,200950ac <_calloc_r+0xa4>
20095078:	80000215 	stw	zero,8(r16)
2009507c:	80000315 	stw	zero,12(r16)
20095080:	30c00c26 	beq	r6,r3,200950b4 <_calloc_r+0xac>
20095084:	80800404 	addi	r2,r16,16
20095088:	003fef06 	br	20095048 <__flash_rwdata_start+0xffff8ec4>
2009508c:	8009883a 	mov	r4,r16
20095090:	000b883a 	mov	r5,zero
20095094:	0089a980 	call	20089a98 <memset>
20095098:	8005883a 	mov	r2,r16
2009509c:	dfc00117 	ldw	ra,4(sp)
200950a0:	dc000017 	ldw	r16,0(sp)
200950a4:	dec00204 	addi	sp,sp,8
200950a8:	f800283a 	ret
200950ac:	80800204 	addi	r2,r16,8
200950b0:	003fe506 	br	20095048 <__flash_rwdata_start+0xffff8ec4>
200950b4:	80000415 	stw	zero,16(r16)
200950b8:	80800604 	addi	r2,r16,24
200950bc:	80000515 	stw	zero,20(r16)
200950c0:	003fe106 	br	20095048 <__flash_rwdata_start+0xffff8ec4>
200950c4:	0005883a 	mov	r2,zero
200950c8:	003fe306 	br	20095058 <__flash_rwdata_start+0xffff8ed4>

200950cc <_fclose_r>:
200950cc:	28003926 	beq	r5,zero,200951b4 <_fclose_r+0xe8>
200950d0:	defffc04 	addi	sp,sp,-16
200950d4:	dc400115 	stw	r17,4(sp)
200950d8:	dc000015 	stw	r16,0(sp)
200950dc:	dfc00315 	stw	ra,12(sp)
200950e0:	dc800215 	stw	r18,8(sp)
200950e4:	2023883a 	mov	r17,r4
200950e8:	2821883a 	mov	r16,r5
200950ec:	20000226 	beq	r4,zero,200950f8 <_fclose_r+0x2c>
200950f0:	20800e17 	ldw	r2,56(r4)
200950f4:	10002726 	beq	r2,zero,20095194 <_fclose_r+0xc8>
200950f8:	8080030f 	ldh	r2,12(r16)
200950fc:	1000071e 	bne	r2,zero,2009511c <_fclose_r+0x50>
20095100:	0005883a 	mov	r2,zero
20095104:	dfc00317 	ldw	ra,12(sp)
20095108:	dc800217 	ldw	r18,8(sp)
2009510c:	dc400117 	ldw	r17,4(sp)
20095110:	dc000017 	ldw	r16,0(sp)
20095114:	dec00404 	addi	sp,sp,16
20095118:	f800283a 	ret
2009511c:	8809883a 	mov	r4,r17
20095120:	800b883a 	mov	r5,r16
20095124:	008fb080 	call	2008fb08 <__sflush_r>
20095128:	1025883a 	mov	r18,r2
2009512c:	80800b17 	ldw	r2,44(r16)
20095130:	10000426 	beq	r2,zero,20095144 <_fclose_r+0x78>
20095134:	81400717 	ldw	r5,28(r16)
20095138:	8809883a 	mov	r4,r17
2009513c:	103ee83a 	callr	r2
20095140:	10001616 	blt	r2,zero,2009519c <_fclose_r+0xd0>
20095144:	8080030b 	ldhu	r2,12(r16)
20095148:	1080200c 	andi	r2,r2,128
2009514c:	1000151e 	bne	r2,zero,200951a4 <_fclose_r+0xd8>
20095150:	81400c17 	ldw	r5,48(r16)
20095154:	28000526 	beq	r5,zero,2009516c <_fclose_r+0xa0>
20095158:	80801004 	addi	r2,r16,64
2009515c:	28800226 	beq	r5,r2,20095168 <_fclose_r+0x9c>
20095160:	8809883a 	mov	r4,r17
20095164:	00902600 	call	20090260 <_free_r>
20095168:	80000c15 	stw	zero,48(r16)
2009516c:	81401117 	ldw	r5,68(r16)
20095170:	28000326 	beq	r5,zero,20095180 <_fclose_r+0xb4>
20095174:	8809883a 	mov	r4,r17
20095178:	00902600 	call	20090260 <_free_r>
2009517c:	80001115 	stw	zero,68(r16)
20095180:	00900fc0 	call	200900fc <__sfp_lock_acquire>
20095184:	8000030d 	sth	zero,12(r16)
20095188:	00901000 	call	20090100 <__sfp_lock_release>
2009518c:	9005883a 	mov	r2,r18
20095190:	003fdc06 	br	20095104 <__flash_rwdata_start+0xffff8f80>
20095194:	00900ec0 	call	200900ec <__sinit>
20095198:	003fd706 	br	200950f8 <__flash_rwdata_start+0xffff8f74>
2009519c:	04bfffc4 	movi	r18,-1
200951a0:	003fe806 	br	20095144 <__flash_rwdata_start+0xffff8fc0>
200951a4:	81400417 	ldw	r5,16(r16)
200951a8:	8809883a 	mov	r4,r17
200951ac:	00902600 	call	20090260 <_free_r>
200951b0:	003fe706 	br	20095150 <__flash_rwdata_start+0xffff8fcc>
200951b4:	0005883a 	mov	r2,zero
200951b8:	f800283a 	ret

200951bc <fclose>:
200951bc:	00800034 	movhi	r2,0
200951c0:	1088e004 	addi	r2,r2,9088
200951c4:	200b883a 	mov	r5,r4
200951c8:	11000017 	ldw	r4,0(r2)
200951cc:	00950cc1 	jmpi	200950cc <_fclose_r>

200951d0 <_fputwc_r>:
200951d0:	3080030b 	ldhu	r2,12(r6)
200951d4:	defff804 	addi	sp,sp,-32
200951d8:	dcc00415 	stw	r19,16(sp)
200951dc:	dc800315 	stw	r18,12(sp)
200951e0:	dc000115 	stw	r16,4(sp)
200951e4:	dfc00715 	stw	ra,28(sp)
200951e8:	dd400615 	stw	r21,24(sp)
200951ec:	dd000515 	stw	r20,20(sp)
200951f0:	dc400215 	stw	r17,8(sp)
200951f4:	10c8000c 	andi	r3,r2,8192
200951f8:	3021883a 	mov	r16,r6
200951fc:	2027883a 	mov	r19,r4
20095200:	2825883a 	mov	r18,r5
20095204:	1800051e 	bne	r3,zero,2009521c <_fputwc_r+0x4c>
20095208:	30c01917 	ldw	r3,100(r6)
2009520c:	10880014 	ori	r2,r2,8192
20095210:	3080030d 	sth	r2,12(r6)
20095214:	18880014 	ori	r2,r3,8192
20095218:	30801915 	stw	r2,100(r6)
2009521c:	0090c200 	call	20090c20 <__locale_mb_cur_max>
20095220:	00c00044 	movi	r3,1
20095224:	10c03e26 	beq	r2,r3,20095320 <_fputwc_r+0x150>
20095228:	9809883a 	mov	r4,r19
2009522c:	d80b883a 	mov	r5,sp
20095230:	900d883a 	mov	r6,r18
20095234:	81c01704 	addi	r7,r16,92
20095238:	00956680 	call	20095668 <_wcrtomb_r>
2009523c:	1029883a 	mov	r20,r2
20095240:	00bfffc4 	movi	r2,-1
20095244:	a0802026 	beq	r20,r2,200952c8 <_fputwc_r+0xf8>
20095248:	d9400003 	ldbu	r5,0(sp)
2009524c:	a0001c26 	beq	r20,zero,200952c0 <_fputwc_r+0xf0>
20095250:	0023883a 	mov	r17,zero
20095254:	05400284 	movi	r21,10
20095258:	00000906 	br	20095280 <_fputwc_r+0xb0>
2009525c:	80800017 	ldw	r2,0(r16)
20095260:	11400005 	stb	r5,0(r2)
20095264:	80c00017 	ldw	r3,0(r16)
20095268:	18c00044 	addi	r3,r3,1
2009526c:	80c00015 	stw	r3,0(r16)
20095270:	8c400044 	addi	r17,r17,1
20095274:	dc45883a 	add	r2,sp,r17
20095278:	8d00112e 	bgeu	r17,r20,200952c0 <_fputwc_r+0xf0>
2009527c:	11400003 	ldbu	r5,0(r2)
20095280:	80c00217 	ldw	r3,8(r16)
20095284:	18ffffc4 	addi	r3,r3,-1
20095288:	80c00215 	stw	r3,8(r16)
2009528c:	183ff30e 	bge	r3,zero,2009525c <__flash_rwdata_start+0xffff90d8>
20095290:	80800617 	ldw	r2,24(r16)
20095294:	18801916 	blt	r3,r2,200952fc <_fputwc_r+0x12c>
20095298:	80800017 	ldw	r2,0(r16)
2009529c:	11400005 	stb	r5,0(r2)
200952a0:	80800017 	ldw	r2,0(r16)
200952a4:	10c00003 	ldbu	r3,0(r2)
200952a8:	10800044 	addi	r2,r2,1
200952ac:	1d402326 	beq	r3,r21,2009533c <_fputwc_r+0x16c>
200952b0:	80800015 	stw	r2,0(r16)
200952b4:	8c400044 	addi	r17,r17,1
200952b8:	dc45883a 	add	r2,sp,r17
200952bc:	8d3fef36 	bltu	r17,r20,2009527c <__flash_rwdata_start+0xffff90f8>
200952c0:	9005883a 	mov	r2,r18
200952c4:	00000406 	br	200952d8 <_fputwc_r+0x108>
200952c8:	80c0030b 	ldhu	r3,12(r16)
200952cc:	a005883a 	mov	r2,r20
200952d0:	18c01014 	ori	r3,r3,64
200952d4:	80c0030d 	sth	r3,12(r16)
200952d8:	dfc00717 	ldw	ra,28(sp)
200952dc:	dd400617 	ldw	r21,24(sp)
200952e0:	dd000517 	ldw	r20,20(sp)
200952e4:	dcc00417 	ldw	r19,16(sp)
200952e8:	dc800317 	ldw	r18,12(sp)
200952ec:	dc400217 	ldw	r17,8(sp)
200952f0:	dc000117 	ldw	r16,4(sp)
200952f4:	dec00804 	addi	sp,sp,32
200952f8:	f800283a 	ret
200952fc:	9809883a 	mov	r4,r19
20095300:	29403fcc 	andi	r5,r5,255
20095304:	800d883a 	mov	r6,r16
20095308:	00955140 	call	20095514 <__swbuf_r>
2009530c:	10bfffe0 	cmpeqi	r2,r2,-1
20095310:	10803fcc 	andi	r2,r2,255
20095314:	103fd626 	beq	r2,zero,20095270 <__flash_rwdata_start+0xffff90ec>
20095318:	00bfffc4 	movi	r2,-1
2009531c:	003fee06 	br	200952d8 <__flash_rwdata_start+0xffff9154>
20095320:	90ffffc4 	addi	r3,r18,-1
20095324:	01003f84 	movi	r4,254
20095328:	20ffbf36 	bltu	r4,r3,20095228 <__flash_rwdata_start+0xffff90a4>
2009532c:	900b883a 	mov	r5,r18
20095330:	dc800005 	stb	r18,0(sp)
20095334:	1029883a 	mov	r20,r2
20095338:	003fc506 	br	20095250 <__flash_rwdata_start+0xffff90cc>
2009533c:	9809883a 	mov	r4,r19
20095340:	a80b883a 	mov	r5,r21
20095344:	800d883a 	mov	r6,r16
20095348:	00955140 	call	20095514 <__swbuf_r>
2009534c:	10bfffe0 	cmpeqi	r2,r2,-1
20095350:	003fef06 	br	20095310 <__flash_rwdata_start+0xffff918c>

20095354 <fputwc>:
20095354:	00800034 	movhi	r2,0
20095358:	defffc04 	addi	sp,sp,-16
2009535c:	1088e004 	addi	r2,r2,9088
20095360:	dc000115 	stw	r16,4(sp)
20095364:	14000017 	ldw	r16,0(r2)
20095368:	dc400215 	stw	r17,8(sp)
2009536c:	dfc00315 	stw	ra,12(sp)
20095370:	2023883a 	mov	r17,r4
20095374:	280d883a 	mov	r6,r5
20095378:	80000626 	beq	r16,zero,20095394 <fputwc+0x40>
2009537c:	80800e17 	ldw	r2,56(r16)
20095380:	1000041e 	bne	r2,zero,20095394 <fputwc+0x40>
20095384:	8009883a 	mov	r4,r16
20095388:	d9400015 	stw	r5,0(sp)
2009538c:	00900ec0 	call	200900ec <__sinit>
20095390:	d9800017 	ldw	r6,0(sp)
20095394:	8009883a 	mov	r4,r16
20095398:	880b883a 	mov	r5,r17
2009539c:	dfc00317 	ldw	ra,12(sp)
200953a0:	dc400217 	ldw	r17,8(sp)
200953a4:	dc000117 	ldw	r16,4(sp)
200953a8:	dec00404 	addi	sp,sp,16
200953ac:	00951d01 	jmpi	200951d0 <_fputwc_r>

200953b0 <_fstat_r>:
200953b0:	defffd04 	addi	sp,sp,-12
200953b4:	dc000015 	stw	r16,0(sp)
200953b8:	04000034 	movhi	r16,0
200953bc:	dc400115 	stw	r17,4(sp)
200953c0:	8408f504 	addi	r16,r16,9172
200953c4:	2023883a 	mov	r17,r4
200953c8:	2809883a 	mov	r4,r5
200953cc:	300b883a 	mov	r5,r6
200953d0:	dfc00215 	stw	ra,8(sp)
200953d4:	80000015 	stw	zero,0(r16)
200953d8:	0096f180 	call	20096f18 <fstat>
200953dc:	00ffffc4 	movi	r3,-1
200953e0:	10c00526 	beq	r2,r3,200953f8 <_fstat_r+0x48>
200953e4:	dfc00217 	ldw	ra,8(sp)
200953e8:	dc400117 	ldw	r17,4(sp)
200953ec:	dc000017 	ldw	r16,0(sp)
200953f0:	dec00304 	addi	sp,sp,12
200953f4:	f800283a 	ret
200953f8:	80c00017 	ldw	r3,0(r16)
200953fc:	183ff926 	beq	r3,zero,200953e4 <__flash_rwdata_start+0xffff9260>
20095400:	88c00015 	stw	r3,0(r17)
20095404:	003ff706 	br	200953e4 <__flash_rwdata_start+0xffff9260>

20095408 <_isatty_r>:
20095408:	defffd04 	addi	sp,sp,-12
2009540c:	dc000015 	stw	r16,0(sp)
20095410:	04000034 	movhi	r16,0
20095414:	dc400115 	stw	r17,4(sp)
20095418:	8408f504 	addi	r16,r16,9172
2009541c:	2023883a 	mov	r17,r4
20095420:	2809883a 	mov	r4,r5
20095424:	dfc00215 	stw	ra,8(sp)
20095428:	80000015 	stw	zero,0(r16)
2009542c:	00970180 	call	20097018 <isatty>
20095430:	00ffffc4 	movi	r3,-1
20095434:	10c00526 	beq	r2,r3,2009544c <_isatty_r+0x44>
20095438:	dfc00217 	ldw	ra,8(sp)
2009543c:	dc400117 	ldw	r17,4(sp)
20095440:	dc000017 	ldw	r16,0(sp)
20095444:	dec00304 	addi	sp,sp,12
20095448:	f800283a 	ret
2009544c:	80c00017 	ldw	r3,0(r16)
20095450:	183ff926 	beq	r3,zero,20095438 <__flash_rwdata_start+0xffff92b4>
20095454:	88c00015 	stw	r3,0(r17)
20095458:	003ff706 	br	20095438 <__flash_rwdata_start+0xffff92b4>

2009545c <_lseek_r>:
2009545c:	defffd04 	addi	sp,sp,-12
20095460:	dc000015 	stw	r16,0(sp)
20095464:	04000034 	movhi	r16,0
20095468:	dc400115 	stw	r17,4(sp)
2009546c:	8408f504 	addi	r16,r16,9172
20095470:	2023883a 	mov	r17,r4
20095474:	2809883a 	mov	r4,r5
20095478:	300b883a 	mov	r5,r6
2009547c:	380d883a 	mov	r6,r7
20095480:	dfc00215 	stw	ra,8(sp)
20095484:	80000015 	stw	zero,0(r16)
20095488:	00971f00 	call	200971f0 <lseek>
2009548c:	00ffffc4 	movi	r3,-1
20095490:	10c00526 	beq	r2,r3,200954a8 <_lseek_r+0x4c>
20095494:	dfc00217 	ldw	ra,8(sp)
20095498:	dc400117 	ldw	r17,4(sp)
2009549c:	dc000017 	ldw	r16,0(sp)
200954a0:	dec00304 	addi	sp,sp,12
200954a4:	f800283a 	ret
200954a8:	80c00017 	ldw	r3,0(r16)
200954ac:	183ff926 	beq	r3,zero,20095494 <__flash_rwdata_start+0xffff9310>
200954b0:	88c00015 	stw	r3,0(r17)
200954b4:	003ff706 	br	20095494 <__flash_rwdata_start+0xffff9310>

200954b8 <_read_r>:
200954b8:	defffd04 	addi	sp,sp,-12
200954bc:	dc000015 	stw	r16,0(sp)
200954c0:	04000034 	movhi	r16,0
200954c4:	dc400115 	stw	r17,4(sp)
200954c8:	8408f504 	addi	r16,r16,9172
200954cc:	2023883a 	mov	r17,r4
200954d0:	2809883a 	mov	r4,r5
200954d4:	300b883a 	mov	r5,r6
200954d8:	380d883a 	mov	r6,r7
200954dc:	dfc00215 	stw	ra,8(sp)
200954e0:	80000015 	stw	zero,0(r16)
200954e4:	00973cc0 	call	200973cc <read>
200954e8:	00ffffc4 	movi	r3,-1
200954ec:	10c00526 	beq	r2,r3,20095504 <_read_r+0x4c>
200954f0:	dfc00217 	ldw	ra,8(sp)
200954f4:	dc400117 	ldw	r17,4(sp)
200954f8:	dc000017 	ldw	r16,0(sp)
200954fc:	dec00304 	addi	sp,sp,12
20095500:	f800283a 	ret
20095504:	80c00017 	ldw	r3,0(r16)
20095508:	183ff926 	beq	r3,zero,200954f0 <__flash_rwdata_start+0xffff936c>
2009550c:	88c00015 	stw	r3,0(r17)
20095510:	003ff706 	br	200954f0 <__flash_rwdata_start+0xffff936c>

20095514 <__swbuf_r>:
20095514:	defffc04 	addi	sp,sp,-16
20095518:	dc800215 	stw	r18,8(sp)
2009551c:	dc400115 	stw	r17,4(sp)
20095520:	dc000015 	stw	r16,0(sp)
20095524:	dfc00315 	stw	ra,12(sp)
20095528:	2025883a 	mov	r18,r4
2009552c:	2823883a 	mov	r17,r5
20095530:	3021883a 	mov	r16,r6
20095534:	20000226 	beq	r4,zero,20095540 <__swbuf_r+0x2c>
20095538:	20800e17 	ldw	r2,56(r4)
2009553c:	10004126 	beq	r2,zero,20095644 <__swbuf_r+0x130>
20095540:	80c00617 	ldw	r3,24(r16)
20095544:	8180030b 	ldhu	r6,12(r16)
20095548:	80c00215 	stw	r3,8(r16)
2009554c:	30c0020c 	andi	r3,r6,8
20095550:	18003526 	beq	r3,zero,20095628 <__swbuf_r+0x114>
20095554:	80c00417 	ldw	r3,16(r16)
20095558:	18003326 	beq	r3,zero,20095628 <__swbuf_r+0x114>
2009555c:	3088000c 	andi	r2,r6,8192
20095560:	8c403fcc 	andi	r17,r17,255
20095564:	10001726 	beq	r2,zero,200955c4 <__swbuf_r+0xb0>
20095568:	80800017 	ldw	r2,0(r16)
2009556c:	81000517 	ldw	r4,20(r16)
20095570:	10c7c83a 	sub	r3,r2,r3
20095574:	19001d0e 	bge	r3,r4,200955ec <__swbuf_r+0xd8>
20095578:	18c00044 	addi	r3,r3,1
2009557c:	81400217 	ldw	r5,8(r16)
20095580:	11000044 	addi	r4,r2,1
20095584:	81000015 	stw	r4,0(r16)
20095588:	297fffc4 	addi	r5,r5,-1
2009558c:	81400215 	stw	r5,8(r16)
20095590:	14400005 	stb	r17,0(r2)
20095594:	80800517 	ldw	r2,20(r16)
20095598:	10c01d26 	beq	r2,r3,20095610 <__swbuf_r+0xfc>
2009559c:	8080030b 	ldhu	r2,12(r16)
200955a0:	1080004c 	andi	r2,r2,1
200955a4:	1000181e 	bne	r2,zero,20095608 <__swbuf_r+0xf4>
200955a8:	8805883a 	mov	r2,r17
200955ac:	dfc00317 	ldw	ra,12(sp)
200955b0:	dc800217 	ldw	r18,8(sp)
200955b4:	dc400117 	ldw	r17,4(sp)
200955b8:	dc000017 	ldw	r16,0(sp)
200955bc:	dec00404 	addi	sp,sp,16
200955c0:	f800283a 	ret
200955c4:	81001917 	ldw	r4,100(r16)
200955c8:	00b7ffc4 	movi	r2,-8193
200955cc:	31880014 	ori	r6,r6,8192
200955d0:	2084703a 	and	r2,r4,r2
200955d4:	80801915 	stw	r2,100(r16)
200955d8:	80800017 	ldw	r2,0(r16)
200955dc:	81000517 	ldw	r4,20(r16)
200955e0:	8180030d 	sth	r6,12(r16)
200955e4:	10c7c83a 	sub	r3,r2,r3
200955e8:	193fe316 	blt	r3,r4,20095578 <__flash_rwdata_start+0xffff93f4>
200955ec:	9009883a 	mov	r4,r18
200955f0:	800b883a 	mov	r5,r16
200955f4:	008fd100 	call	2008fd10 <_fflush_r>
200955f8:	1000091e 	bne	r2,zero,20095620 <__swbuf_r+0x10c>
200955fc:	80800017 	ldw	r2,0(r16)
20095600:	00c00044 	movi	r3,1
20095604:	003fdd06 	br	2009557c <__flash_rwdata_start+0xffff93f8>
20095608:	00800284 	movi	r2,10
2009560c:	88bfe61e 	bne	r17,r2,200955a8 <__flash_rwdata_start+0xffff9424>
20095610:	9009883a 	mov	r4,r18
20095614:	800b883a 	mov	r5,r16
20095618:	008fd100 	call	2008fd10 <_fflush_r>
2009561c:	103fe226 	beq	r2,zero,200955a8 <__flash_rwdata_start+0xffff9424>
20095620:	00bfffc4 	movi	r2,-1
20095624:	003fe106 	br	200955ac <__flash_rwdata_start+0xffff9428>
20095628:	9009883a 	mov	r4,r18
2009562c:	800b883a 	mov	r5,r16
20095630:	008e08c0 	call	2008e08c <__swsetup_r>
20095634:	103ffa1e 	bne	r2,zero,20095620 <__flash_rwdata_start+0xffff949c>
20095638:	8180030b 	ldhu	r6,12(r16)
2009563c:	80c00417 	ldw	r3,16(r16)
20095640:	003fc606 	br	2009555c <__flash_rwdata_start+0xffff93d8>
20095644:	00900ec0 	call	200900ec <__sinit>
20095648:	003fbd06 	br	20095540 <__flash_rwdata_start+0xffff93bc>

2009564c <__swbuf>:
2009564c:	00c00034 	movhi	r3,0
20095650:	18c8e004 	addi	r3,r3,9088
20095654:	2005883a 	mov	r2,r4
20095658:	19000017 	ldw	r4,0(r3)
2009565c:	280d883a 	mov	r6,r5
20095660:	100b883a 	mov	r5,r2
20095664:	00955141 	jmpi	20095514 <__swbuf_r>

20095668 <_wcrtomb_r>:
20095668:	defff604 	addi	sp,sp,-40
2009566c:	00800034 	movhi	r2,0
20095670:	dc800815 	stw	r18,32(sp)
20095674:	dc400715 	stw	r17,28(sp)
20095678:	dc000615 	stw	r16,24(sp)
2009567c:	1088e204 	addi	r2,r2,9096
20095680:	dfc00915 	stw	ra,36(sp)
20095684:	2021883a 	mov	r16,r4
20095688:	3823883a 	mov	r17,r7
2009568c:	14800017 	ldw	r18,0(r2)
20095690:	28001426 	beq	r5,zero,200956e4 <_wcrtomb_r+0x7c>
20095694:	d9400415 	stw	r5,16(sp)
20095698:	d9800515 	stw	r6,20(sp)
2009569c:	0090c140 	call	20090c14 <__locale_charset>
200956a0:	d9400417 	ldw	r5,16(sp)
200956a4:	d9800517 	ldw	r6,20(sp)
200956a8:	8009883a 	mov	r4,r16
200956ac:	dc400015 	stw	r17,0(sp)
200956b0:	100f883a 	mov	r7,r2
200956b4:	903ee83a 	callr	r18
200956b8:	00ffffc4 	movi	r3,-1
200956bc:	10c0031e 	bne	r2,r3,200956cc <_wcrtomb_r+0x64>
200956c0:	88000015 	stw	zero,0(r17)
200956c4:	00c02284 	movi	r3,138
200956c8:	80c00015 	stw	r3,0(r16)
200956cc:	dfc00917 	ldw	ra,36(sp)
200956d0:	dc800817 	ldw	r18,32(sp)
200956d4:	dc400717 	ldw	r17,28(sp)
200956d8:	dc000617 	ldw	r16,24(sp)
200956dc:	dec00a04 	addi	sp,sp,40
200956e0:	f800283a 	ret
200956e4:	0090c140 	call	20090c14 <__locale_charset>
200956e8:	8009883a 	mov	r4,r16
200956ec:	dc400015 	stw	r17,0(sp)
200956f0:	d9400104 	addi	r5,sp,4
200956f4:	000d883a 	mov	r6,zero
200956f8:	100f883a 	mov	r7,r2
200956fc:	903ee83a 	callr	r18
20095700:	003fed06 	br	200956b8 <__flash_rwdata_start+0xffff9534>

20095704 <wcrtomb>:
20095704:	defff604 	addi	sp,sp,-40
20095708:	00800034 	movhi	r2,0
2009570c:	dc800615 	stw	r18,24(sp)
20095710:	dc400515 	stw	r17,20(sp)
20095714:	dc000415 	stw	r16,16(sp)
20095718:	1088e004 	addi	r2,r2,9088
2009571c:	dfc00915 	stw	ra,36(sp)
20095720:	dd000815 	stw	r20,32(sp)
20095724:	dcc00715 	stw	r19,28(sp)
20095728:	2021883a 	mov	r16,r4
2009572c:	3025883a 	mov	r18,r6
20095730:	14400017 	ldw	r17,0(r2)
20095734:	20001826 	beq	r4,zero,20095798 <wcrtomb+0x94>
20095738:	00800034 	movhi	r2,0
2009573c:	1088e204 	addi	r2,r2,9096
20095740:	15000017 	ldw	r20,0(r2)
20095744:	2827883a 	mov	r19,r5
20095748:	0090c140 	call	20090c14 <__locale_charset>
2009574c:	8809883a 	mov	r4,r17
20095750:	dc800015 	stw	r18,0(sp)
20095754:	800b883a 	mov	r5,r16
20095758:	980d883a 	mov	r6,r19
2009575c:	100f883a 	mov	r7,r2
20095760:	a03ee83a 	callr	r20
20095764:	00ffffc4 	movi	r3,-1
20095768:	10c0031e 	bne	r2,r3,20095778 <wcrtomb+0x74>
2009576c:	90000015 	stw	zero,0(r18)
20095770:	00c02284 	movi	r3,138
20095774:	88c00015 	stw	r3,0(r17)
20095778:	dfc00917 	ldw	ra,36(sp)
2009577c:	dd000817 	ldw	r20,32(sp)
20095780:	dcc00717 	ldw	r19,28(sp)
20095784:	dc800617 	ldw	r18,24(sp)
20095788:	dc400517 	ldw	r17,20(sp)
2009578c:	dc000417 	ldw	r16,16(sp)
20095790:	dec00a04 	addi	sp,sp,40
20095794:	f800283a 	ret
20095798:	00800034 	movhi	r2,0
2009579c:	1088e204 	addi	r2,r2,9096
200957a0:	14000017 	ldw	r16,0(r2)
200957a4:	0090c140 	call	20090c14 <__locale_charset>
200957a8:	8809883a 	mov	r4,r17
200957ac:	dc800015 	stw	r18,0(sp)
200957b0:	d9400104 	addi	r5,sp,4
200957b4:	000d883a 	mov	r6,zero
200957b8:	100f883a 	mov	r7,r2
200957bc:	803ee83a 	callr	r16
200957c0:	003fe806 	br	20095764 <__flash_rwdata_start+0xffff95e0>

200957c4 <__ascii_wctomb>:
200957c4:	28000526 	beq	r5,zero,200957dc <__ascii_wctomb+0x18>
200957c8:	00803fc4 	movi	r2,255
200957cc:	11800536 	bltu	r2,r6,200957e4 <__ascii_wctomb+0x20>
200957d0:	29800005 	stb	r6,0(r5)
200957d4:	00800044 	movi	r2,1
200957d8:	f800283a 	ret
200957dc:	0005883a 	mov	r2,zero
200957e0:	f800283a 	ret
200957e4:	00802284 	movi	r2,138
200957e8:	20800015 	stw	r2,0(r4)
200957ec:	00bfffc4 	movi	r2,-1
200957f0:	f800283a 	ret

200957f4 <_wctomb_r>:
200957f4:	00800034 	movhi	r2,0
200957f8:	defff904 	addi	sp,sp,-28
200957fc:	1088e204 	addi	r2,r2,9096
20095800:	dfc00615 	stw	ra,24(sp)
20095804:	dc400515 	stw	r17,20(sp)
20095808:	dc000415 	stw	r16,16(sp)
2009580c:	3823883a 	mov	r17,r7
20095810:	14000017 	ldw	r16,0(r2)
20095814:	d9000115 	stw	r4,4(sp)
20095818:	d9400215 	stw	r5,8(sp)
2009581c:	d9800315 	stw	r6,12(sp)
20095820:	0090c140 	call	20090c14 <__locale_charset>
20095824:	d9000117 	ldw	r4,4(sp)
20095828:	d9400217 	ldw	r5,8(sp)
2009582c:	d9800317 	ldw	r6,12(sp)
20095830:	dc400015 	stw	r17,0(sp)
20095834:	100f883a 	mov	r7,r2
20095838:	803ee83a 	callr	r16
2009583c:	dfc00617 	ldw	ra,24(sp)
20095840:	dc400517 	ldw	r17,20(sp)
20095844:	dc000417 	ldw	r16,16(sp)
20095848:	dec00704 	addi	sp,sp,28
2009584c:	f800283a 	ret

20095850 <__udivdi3>:
20095850:	defff504 	addi	sp,sp,-44
20095854:	dcc00415 	stw	r19,16(sp)
20095858:	dc000115 	stw	r16,4(sp)
2009585c:	dfc00a15 	stw	ra,40(sp)
20095860:	df000915 	stw	fp,36(sp)
20095864:	ddc00815 	stw	r23,32(sp)
20095868:	dd800715 	stw	r22,28(sp)
2009586c:	dd400615 	stw	r21,24(sp)
20095870:	dd000515 	stw	r20,20(sp)
20095874:	dc800315 	stw	r18,12(sp)
20095878:	dc400215 	stw	r17,8(sp)
2009587c:	2027883a 	mov	r19,r4
20095880:	2821883a 	mov	r16,r5
20095884:	3800421e 	bne	r7,zero,20095990 <__udivdi3+0x140>
20095888:	3025883a 	mov	r18,r6
2009588c:	2023883a 	mov	r17,r4
20095890:	2980542e 	bgeu	r5,r6,200959e4 <__udivdi3+0x194>
20095894:	00bfffd4 	movui	r2,65535
20095898:	282d883a 	mov	r22,r5
2009589c:	1180a836 	bltu	r2,r6,20095b40 <__udivdi3+0x2f0>
200958a0:	00803fc4 	movi	r2,255
200958a4:	1181422e 	bgeu	r2,r6,20095db0 <__udivdi3+0x560>
200958a8:	00800204 	movi	r2,8
200958ac:	1007883a 	mov	r3,r2
200958b0:	3084d83a 	srl	r2,r6,r2
200958b4:	01000034 	movhi	r4,0
200958b8:	2100c504 	addi	r4,r4,788
200958bc:	2085883a 	add	r2,r4,r2
200958c0:	10800003 	ldbu	r2,0(r2)
200958c4:	10c7883a 	add	r3,r2,r3
200958c8:	00800804 	movi	r2,32
200958cc:	10c5c83a 	sub	r2,r2,r3
200958d0:	10000526 	beq	r2,zero,200958e8 <__udivdi3+0x98>
200958d4:	80a0983a 	sll	r16,r16,r2
200958d8:	98c6d83a 	srl	r3,r19,r3
200958dc:	30a4983a 	sll	r18,r6,r2
200958e0:	98a2983a 	sll	r17,r19,r2
200958e4:	80ecb03a 	or	r22,r16,r3
200958e8:	902ad43a 	srli	r21,r18,16
200958ec:	b009883a 	mov	r4,r22
200958f0:	953fffcc 	andi	r20,r18,65535
200958f4:	a80b883a 	mov	r5,r21
200958f8:	00866780 	call	20086678 <__umodsi3>
200958fc:	b009883a 	mov	r4,r22
20095900:	a80b883a 	mov	r5,r21
20095904:	1027883a 	mov	r19,r2
20095908:	00866700 	call	20086670 <__udivsi3>
2009590c:	1021883a 	mov	r16,r2
20095910:	8806d43a 	srli	r3,r17,16
20095914:	9804943a 	slli	r2,r19,16
20095918:	8527383a 	mul	r19,r16,r20
2009591c:	10c4b03a 	or	r2,r2,r3
20095920:	14c0052e 	bgeu	r2,r19,20095938 <__udivdi3+0xe8>
20095924:	1485883a 	add	r2,r2,r18
20095928:	80ffffc4 	addi	r3,r16,-1
2009592c:	14800136 	bltu	r2,r18,20095934 <__udivdi3+0xe4>
20095930:	14c13436 	bltu	r2,r19,20095e04 <__udivdi3+0x5b4>
20095934:	1821883a 	mov	r16,r3
20095938:	14e7c83a 	sub	r19,r2,r19
2009593c:	9809883a 	mov	r4,r19
20095940:	a80b883a 	mov	r5,r21
20095944:	00866780 	call	20086678 <__umodsi3>
20095948:	102d883a 	mov	r22,r2
2009594c:	9809883a 	mov	r4,r19
20095950:	a80b883a 	mov	r5,r21
20095954:	00866700 	call	20086670 <__udivsi3>
20095958:	b02c943a 	slli	r22,r22,16
2009595c:	1529383a 	mul	r20,r2,r20
20095960:	8c7fffcc 	andi	r17,r17,65535
20095964:	b462b03a 	or	r17,r22,r17
20095968:	8d00052e 	bgeu	r17,r20,20095980 <__udivdi3+0x130>
2009596c:	8ca3883a 	add	r17,r17,r18
20095970:	10ffffc4 	addi	r3,r2,-1
20095974:	8c80f636 	bltu	r17,r18,20095d50 <__udivdi3+0x500>
20095978:	8d00f52e 	bgeu	r17,r20,20095d50 <__udivdi3+0x500>
2009597c:	10bfff84 	addi	r2,r2,-2
20095980:	8020943a 	slli	r16,r16,16
20095984:	0007883a 	mov	r3,zero
20095988:	1404b03a 	or	r2,r2,r16
2009598c:	00005b06 	br	20095afc <__udivdi3+0x2ac>
20095990:	29c05836 	bltu	r5,r7,20095af4 <__udivdi3+0x2a4>
20095994:	00bfffd4 	movui	r2,65535
20095998:	11c0642e 	bgeu	r2,r7,20095b2c <__udivdi3+0x2dc>
2009599c:	00804034 	movhi	r2,256
200959a0:	10bfffc4 	addi	r2,r2,-1
200959a4:	11c0f32e 	bgeu	r2,r7,20095d74 <__udivdi3+0x524>
200959a8:	00c00604 	movi	r3,24
200959ac:	180b883a 	mov	r5,r3
200959b0:	38c6d83a 	srl	r3,r7,r3
200959b4:	00800034 	movhi	r2,0
200959b8:	1080c504 	addi	r2,r2,788
200959bc:	10c7883a 	add	r3,r2,r3
200959c0:	18c00003 	ldbu	r3,0(r3)
200959c4:	01000804 	movi	r4,32
200959c8:	1947883a 	add	r3,r3,r5
200959cc:	20e5c83a 	sub	r18,r4,r3
200959d0:	9000661e 	bne	r18,zero,20095b6c <__udivdi3+0x31c>
200959d4:	3c00f936 	bltu	r7,r16,20095dbc <__udivdi3+0x56c>
200959d8:	9985403a 	cmpgeu	r2,r19,r6
200959dc:	0007883a 	mov	r3,zero
200959e0:	00004606 	br	20095afc <__udivdi3+0x2ac>
200959e4:	3000041e 	bne	r6,zero,200959f8 <__udivdi3+0x1a8>
200959e8:	01000044 	movi	r4,1
200959ec:	000b883a 	mov	r5,zero
200959f0:	00866700 	call	20086670 <__udivsi3>
200959f4:	1025883a 	mov	r18,r2
200959f8:	00bfffd4 	movui	r2,65535
200959fc:	1480562e 	bgeu	r2,r18,20095b58 <__udivdi3+0x308>
20095a00:	00804034 	movhi	r2,256
20095a04:	10bfffc4 	addi	r2,r2,-1
20095a08:	1480e32e 	bgeu	r2,r18,20095d98 <__udivdi3+0x548>
20095a0c:	00800604 	movi	r2,24
20095a10:	1007883a 	mov	r3,r2
20095a14:	9084d83a 	srl	r2,r18,r2
20095a18:	01000034 	movhi	r4,0
20095a1c:	2100c504 	addi	r4,r4,788
20095a20:	2085883a 	add	r2,r4,r2
20095a24:	10800003 	ldbu	r2,0(r2)
20095a28:	10c5883a 	add	r2,r2,r3
20095a2c:	00c00804 	movi	r3,32
20095a30:	1887c83a 	sub	r3,r3,r2
20095a34:	1800911e 	bne	r3,zero,20095c7c <__udivdi3+0x42c>
20095a38:	9028d43a 	srli	r20,r18,16
20095a3c:	84a1c83a 	sub	r16,r16,r18
20095a40:	957fffcc 	andi	r21,r18,65535
20095a44:	00c00044 	movi	r3,1
20095a48:	8009883a 	mov	r4,r16
20095a4c:	a00b883a 	mov	r5,r20
20095a50:	d8c00015 	stw	r3,0(sp)
20095a54:	00866780 	call	20086678 <__umodsi3>
20095a58:	8009883a 	mov	r4,r16
20095a5c:	a00b883a 	mov	r5,r20
20095a60:	1027883a 	mov	r19,r2
20095a64:	00866700 	call	20086670 <__udivsi3>
20095a68:	1021883a 	mov	r16,r2
20095a6c:	880cd43a 	srli	r6,r17,16
20095a70:	9804943a 	slli	r2,r19,16
20095a74:	8567383a 	mul	r19,r16,r21
20095a78:	d8c00017 	ldw	r3,0(sp)
20095a7c:	1188b03a 	or	r4,r2,r6
20095a80:	24c0052e 	bgeu	r4,r19,20095a98 <__udivdi3+0x248>
20095a84:	2489883a 	add	r4,r4,r18
20095a88:	80bfffc4 	addi	r2,r16,-1
20095a8c:	24800136 	bltu	r4,r18,20095a94 <__udivdi3+0x244>
20095a90:	24c0d936 	bltu	r4,r19,20095df8 <__udivdi3+0x5a8>
20095a94:	1021883a 	mov	r16,r2
20095a98:	24e7c83a 	sub	r19,r4,r19
20095a9c:	9809883a 	mov	r4,r19
20095aa0:	a00b883a 	mov	r5,r20
20095aa4:	d8c00015 	stw	r3,0(sp)
20095aa8:	00866780 	call	20086678 <__umodsi3>
20095aac:	102d883a 	mov	r22,r2
20095ab0:	9809883a 	mov	r4,r19
20095ab4:	a00b883a 	mov	r5,r20
20095ab8:	00866700 	call	20086670 <__udivsi3>
20095abc:	b02c943a 	slli	r22,r22,16
20095ac0:	156b383a 	mul	r21,r2,r21
20095ac4:	8c7fffcc 	andi	r17,r17,65535
20095ac8:	b462b03a 	or	r17,r22,r17
20095acc:	d8c00017 	ldw	r3,0(sp)
20095ad0:	8d40052e 	bgeu	r17,r21,20095ae8 <__udivdi3+0x298>
20095ad4:	8ca3883a 	add	r17,r17,r18
20095ad8:	113fffc4 	addi	r4,r2,-1
20095adc:	8c809a36 	bltu	r17,r18,20095d48 <__udivdi3+0x4f8>
20095ae0:	8d40992e 	bgeu	r17,r21,20095d48 <__udivdi3+0x4f8>
20095ae4:	10bfff84 	addi	r2,r2,-2
20095ae8:	8020943a 	slli	r16,r16,16
20095aec:	1404b03a 	or	r2,r2,r16
20095af0:	00000206 	br	20095afc <__udivdi3+0x2ac>
20095af4:	0007883a 	mov	r3,zero
20095af8:	0005883a 	mov	r2,zero
20095afc:	dfc00a17 	ldw	ra,40(sp)
20095b00:	df000917 	ldw	fp,36(sp)
20095b04:	ddc00817 	ldw	r23,32(sp)
20095b08:	dd800717 	ldw	r22,28(sp)
20095b0c:	dd400617 	ldw	r21,24(sp)
20095b10:	dd000517 	ldw	r20,20(sp)
20095b14:	dcc00417 	ldw	r19,16(sp)
20095b18:	dc800317 	ldw	r18,12(sp)
20095b1c:	dc400217 	ldw	r17,8(sp)
20095b20:	dc000117 	ldw	r16,4(sp)
20095b24:	dec00b04 	addi	sp,sp,44
20095b28:	f800283a 	ret
20095b2c:	00803fc4 	movi	r2,255
20095b30:	11c0932e 	bgeu	r2,r7,20095d80 <__udivdi3+0x530>
20095b34:	00c00204 	movi	r3,8
20095b38:	180b883a 	mov	r5,r3
20095b3c:	003f9c06 	br	200959b0 <__flash_rwdata_start+0xffff982c>
20095b40:	00804034 	movhi	r2,256
20095b44:	10bfffc4 	addi	r2,r2,-1
20095b48:	1180902e 	bgeu	r2,r6,20095d8c <__udivdi3+0x53c>
20095b4c:	00800604 	movi	r2,24
20095b50:	1007883a 	mov	r3,r2
20095b54:	003f5606 	br	200958b0 <__flash_rwdata_start+0xffff972c>
20095b58:	00803fc4 	movi	r2,255
20095b5c:	1480912e 	bgeu	r2,r18,20095da4 <__udivdi3+0x554>
20095b60:	00800204 	movi	r2,8
20095b64:	1007883a 	mov	r3,r2
20095b68:	003faa06 	br	20095a14 <__flash_rwdata_start+0xffff9890>
20095b6c:	30eed83a 	srl	r23,r6,r3
20095b70:	3c8e983a 	sll	r7,r7,r18
20095b74:	80f8d83a 	srl	fp,r16,r3
20095b78:	98c6d83a 	srl	r3,r19,r3
20095b7c:	3deeb03a 	or	r23,r7,r23
20095b80:	b828d43a 	srli	r20,r23,16
20095b84:	84a0983a 	sll	r16,r16,r18
20095b88:	e009883a 	mov	r4,fp
20095b8c:	a00b883a 	mov	r5,r20
20095b90:	80e2b03a 	or	r17,r16,r3
20095b94:	34aa983a 	sll	r21,r6,r18
20095b98:	00866780 	call	20086678 <__umodsi3>
20095b9c:	e009883a 	mov	r4,fp
20095ba0:	a00b883a 	mov	r5,r20
20095ba4:	102d883a 	mov	r22,r2
20095ba8:	00866700 	call	20086670 <__udivsi3>
20095bac:	1021883a 	mov	r16,r2
20095bb0:	bf3fffcc 	andi	fp,r23,65535
20095bb4:	b004943a 	slli	r2,r22,16
20095bb8:	8808d43a 	srli	r4,r17,16
20095bbc:	872d383a 	mul	r22,r16,fp
20095bc0:	1104b03a 	or	r2,r2,r4
20095bc4:	1580042e 	bgeu	r2,r22,20095bd8 <__udivdi3+0x388>
20095bc8:	15c5883a 	add	r2,r2,r23
20095bcc:	80ffffc4 	addi	r3,r16,-1
20095bd0:	15c0812e 	bgeu	r2,r23,20095dd8 <__udivdi3+0x588>
20095bd4:	1821883a 	mov	r16,r3
20095bd8:	15adc83a 	sub	r22,r2,r22
20095bdc:	b009883a 	mov	r4,r22
20095be0:	a00b883a 	mov	r5,r20
20095be4:	00866780 	call	20086678 <__umodsi3>
20095be8:	a00b883a 	mov	r5,r20
20095bec:	b009883a 	mov	r4,r22
20095bf0:	d8800015 	stw	r2,0(sp)
20095bf4:	00866700 	call	20086670 <__udivsi3>
20095bf8:	d8c00017 	ldw	r3,0(sp)
20095bfc:	170b383a 	mul	r5,r2,fp
20095c00:	8c7fffcc 	andi	r17,r17,65535
20095c04:	1806943a 	slli	r3,r3,16
20095c08:	1c46b03a 	or	r3,r3,r17
20095c0c:	1940042e 	bgeu	r3,r5,20095c20 <__udivdi3+0x3d0>
20095c10:	1dc7883a 	add	r3,r3,r23
20095c14:	113fffc4 	addi	r4,r2,-1
20095c18:	1dc06b2e 	bgeu	r3,r23,20095dc8 <__udivdi3+0x578>
20095c1c:	2005883a 	mov	r2,r4
20095c20:	8020943a 	slli	r16,r16,16
20095c24:	a9ffffcc 	andi	r7,r21,65535
20095c28:	a82ad43a 	srli	r21,r21,16
20095c2c:	1404b03a 	or	r2,r2,r16
20095c30:	113fffcc 	andi	r4,r2,65535
20095c34:	100cd43a 	srli	r6,r2,16
20095c38:	21d3383a 	mul	r9,r4,r7
20095c3c:	2549383a 	mul	r4,r4,r21
20095c40:	31cf383a 	mul	r7,r6,r7
20095c44:	4810d43a 	srli	r8,r9,16
20095c48:	1947c83a 	sub	r3,r3,r5
20095c4c:	3909883a 	add	r4,r7,r4
20095c50:	2209883a 	add	r4,r4,r8
20095c54:	354d383a 	mul	r6,r6,r21
20095c58:	21c0022e 	bgeu	r4,r7,20095c64 <__udivdi3+0x414>
20095c5c:	01400074 	movhi	r5,1
20095c60:	314d883a 	add	r6,r6,r5
20095c64:	202ad43a 	srli	r21,r4,16
20095c68:	354d883a 	add	r6,r6,r21
20095c6c:	19803f36 	bltu	r3,r6,20095d6c <__udivdi3+0x51c>
20095c70:	19803926 	beq	r3,r6,20095d58 <__udivdi3+0x508>
20095c74:	0007883a 	mov	r3,zero
20095c78:	003fa006 	br	20095afc <__flash_rwdata_start+0xffff9978>
20095c7c:	90e4983a 	sll	r18,r18,r3
20095c80:	80aad83a 	srl	r21,r16,r2
20095c84:	80e0983a 	sll	r16,r16,r3
20095c88:	9028d43a 	srli	r20,r18,16
20095c8c:	9884d83a 	srl	r2,r19,r2
20095c90:	a809883a 	mov	r4,r21
20095c94:	a00b883a 	mov	r5,r20
20095c98:	80acb03a 	or	r22,r16,r2
20095c9c:	98e2983a 	sll	r17,r19,r3
20095ca0:	00866780 	call	20086678 <__umodsi3>
20095ca4:	a809883a 	mov	r4,r21
20095ca8:	a00b883a 	mov	r5,r20
20095cac:	1021883a 	mov	r16,r2
20095cb0:	00866700 	call	20086670 <__udivsi3>
20095cb4:	957fffcc 	andi	r21,r18,65535
20095cb8:	8020943a 	slli	r16,r16,16
20095cbc:	b00ad43a 	srli	r5,r22,16
20095cc0:	1567383a 	mul	r19,r2,r21
20095cc4:	102f883a 	mov	r23,r2
20095cc8:	8148b03a 	or	r4,r16,r5
20095ccc:	24c0062e 	bgeu	r4,r19,20095ce8 <__udivdi3+0x498>
20095cd0:	2489883a 	add	r4,r4,r18
20095cd4:	10bfffc4 	addi	r2,r2,-1
20095cd8:	24804536 	bltu	r4,r18,20095df0 <__udivdi3+0x5a0>
20095cdc:	24c0442e 	bgeu	r4,r19,20095df0 <__udivdi3+0x5a0>
20095ce0:	bdffff84 	addi	r23,r23,-2
20095ce4:	2489883a 	add	r4,r4,r18
20095ce8:	24e7c83a 	sub	r19,r4,r19
20095cec:	9809883a 	mov	r4,r19
20095cf0:	a00b883a 	mov	r5,r20
20095cf4:	00866780 	call	20086678 <__umodsi3>
20095cf8:	1021883a 	mov	r16,r2
20095cfc:	9809883a 	mov	r4,r19
20095d00:	a00b883a 	mov	r5,r20
20095d04:	00866700 	call	20086670 <__udivsi3>
20095d08:	8020943a 	slli	r16,r16,16
20095d0c:	1007883a 	mov	r3,r2
20095d10:	1545383a 	mul	r2,r2,r21
20095d14:	b13fffcc 	andi	r4,r22,65535
20095d18:	8108b03a 	or	r4,r16,r4
20095d1c:	2080062e 	bgeu	r4,r2,20095d38 <__udivdi3+0x4e8>
20095d20:	2489883a 	add	r4,r4,r18
20095d24:	197fffc4 	addi	r5,r3,-1
20095d28:	24802f36 	bltu	r4,r18,20095de8 <__udivdi3+0x598>
20095d2c:	20802e2e 	bgeu	r4,r2,20095de8 <__udivdi3+0x598>
20095d30:	18ffff84 	addi	r3,r3,-2
20095d34:	2489883a 	add	r4,r4,r18
20095d38:	b82e943a 	slli	r23,r23,16
20095d3c:	20a1c83a 	sub	r16,r4,r2
20095d40:	1dc6b03a 	or	r3,r3,r23
20095d44:	003f4006 	br	20095a48 <__flash_rwdata_start+0xffff98c4>
20095d48:	2005883a 	mov	r2,r4
20095d4c:	003f6606 	br	20095ae8 <__flash_rwdata_start+0xffff9964>
20095d50:	1805883a 	mov	r2,r3
20095d54:	003f0a06 	br	20095980 <__flash_rwdata_start+0xffff97fc>
20095d58:	2006943a 	slli	r3,r4,16
20095d5c:	9c88983a 	sll	r4,r19,r18
20095d60:	4a7fffcc 	andi	r9,r9,65535
20095d64:	1a47883a 	add	r3,r3,r9
20095d68:	20ffc22e 	bgeu	r4,r3,20095c74 <__flash_rwdata_start+0xffff9af0>
20095d6c:	10bfffc4 	addi	r2,r2,-1
20095d70:	003fc006 	br	20095c74 <__flash_rwdata_start+0xffff9af0>
20095d74:	00c00404 	movi	r3,16
20095d78:	180b883a 	mov	r5,r3
20095d7c:	003f0c06 	br	200959b0 <__flash_rwdata_start+0xffff982c>
20095d80:	0007883a 	mov	r3,zero
20095d84:	000b883a 	mov	r5,zero
20095d88:	003f0906 	br	200959b0 <__flash_rwdata_start+0xffff982c>
20095d8c:	00800404 	movi	r2,16
20095d90:	1007883a 	mov	r3,r2
20095d94:	003ec606 	br	200958b0 <__flash_rwdata_start+0xffff972c>
20095d98:	00800404 	movi	r2,16
20095d9c:	1007883a 	mov	r3,r2
20095da0:	003f1c06 	br	20095a14 <__flash_rwdata_start+0xffff9890>
20095da4:	0005883a 	mov	r2,zero
20095da8:	0007883a 	mov	r3,zero
20095dac:	003f1906 	br	20095a14 <__flash_rwdata_start+0xffff9890>
20095db0:	0005883a 	mov	r2,zero
20095db4:	0007883a 	mov	r3,zero
20095db8:	003ebd06 	br	200958b0 <__flash_rwdata_start+0xffff972c>
20095dbc:	0007883a 	mov	r3,zero
20095dc0:	00800044 	movi	r2,1
20095dc4:	003f4d06 	br	20095afc <__flash_rwdata_start+0xffff9978>
20095dc8:	197f942e 	bgeu	r3,r5,20095c1c <__flash_rwdata_start+0xffff9a98>
20095dcc:	10bfff84 	addi	r2,r2,-2
20095dd0:	1dc7883a 	add	r3,r3,r23
20095dd4:	003f9206 	br	20095c20 <__flash_rwdata_start+0xffff9a9c>
20095dd8:	15bf7e2e 	bgeu	r2,r22,20095bd4 <__flash_rwdata_start+0xffff9a50>
20095ddc:	843fff84 	addi	r16,r16,-2
20095de0:	15c5883a 	add	r2,r2,r23
20095de4:	003f7c06 	br	20095bd8 <__flash_rwdata_start+0xffff9a54>
20095de8:	2807883a 	mov	r3,r5
20095dec:	003fd206 	br	20095d38 <__flash_rwdata_start+0xffff9bb4>
20095df0:	102f883a 	mov	r23,r2
20095df4:	003fbc06 	br	20095ce8 <__flash_rwdata_start+0xffff9b64>
20095df8:	843fff84 	addi	r16,r16,-2
20095dfc:	2489883a 	add	r4,r4,r18
20095e00:	003f2506 	br	20095a98 <__flash_rwdata_start+0xffff9914>
20095e04:	843fff84 	addi	r16,r16,-2
20095e08:	1485883a 	add	r2,r2,r18
20095e0c:	003eca06 	br	20095938 <__flash_rwdata_start+0xffff97b4>

20095e10 <__umoddi3>:
20095e10:	defff404 	addi	sp,sp,-48
20095e14:	ddc00915 	stw	r23,36(sp)
20095e18:	dc400315 	stw	r17,12(sp)
20095e1c:	dc000215 	stw	r16,8(sp)
20095e20:	dfc00b15 	stw	ra,44(sp)
20095e24:	df000a15 	stw	fp,40(sp)
20095e28:	dd800815 	stw	r22,32(sp)
20095e2c:	dd400715 	stw	r21,28(sp)
20095e30:	dd000615 	stw	r20,24(sp)
20095e34:	dcc00515 	stw	r19,20(sp)
20095e38:	dc800415 	stw	r18,16(sp)
20095e3c:	2021883a 	mov	r16,r4
20095e40:	2823883a 	mov	r17,r5
20095e44:	282f883a 	mov	r23,r5
20095e48:	3800381e 	bne	r7,zero,20095f2c <__umoddi3+0x11c>
20095e4c:	3027883a 	mov	r19,r6
20095e50:	2029883a 	mov	r20,r4
20095e54:	29804e2e 	bgeu	r5,r6,20095f90 <__umoddi3+0x180>
20095e58:	00bfffd4 	movui	r2,65535
20095e5c:	11809c36 	bltu	r2,r6,200960d0 <__umoddi3+0x2c0>
20095e60:	00803fc4 	movi	r2,255
20095e64:	11813b2e 	bgeu	r2,r6,20096354 <__umoddi3+0x544>
20095e68:	01400204 	movi	r5,8
20095e6c:	2805883a 	mov	r2,r5
20095e70:	314ad83a 	srl	r5,r6,r5
20095e74:	00c00034 	movhi	r3,0
20095e78:	18c0c504 	addi	r3,r3,788
20095e7c:	194b883a 	add	r5,r3,r5
20095e80:	29000003 	ldbu	r4,0(r5)
20095e84:	2089883a 	add	r4,r4,r2
20095e88:	00800804 	movi	r2,32
20095e8c:	1105c83a 	sub	r2,r2,r4
20095e90:	1000ec26 	beq	r2,zero,20096244 <__umoddi3+0x434>
20095e94:	88a2983a 	sll	r17,r17,r2
20095e98:	8108d83a 	srl	r4,r16,r4
20095e9c:	30a6983a 	sll	r19,r6,r2
20095ea0:	80a8983a 	sll	r20,r16,r2
20095ea4:	1025883a 	mov	r18,r2
20095ea8:	892eb03a 	or	r23,r17,r4
20095eac:	982cd43a 	srli	r22,r19,16
20095eb0:	b809883a 	mov	r4,r23
20095eb4:	9d7fffcc 	andi	r21,r19,65535
20095eb8:	b00b883a 	mov	r5,r22
20095ebc:	00866780 	call	20086678 <__umodsi3>
20095ec0:	b809883a 	mov	r4,r23
20095ec4:	b00b883a 	mov	r5,r22
20095ec8:	1021883a 	mov	r16,r2
20095ecc:	00866700 	call	20086670 <__udivsi3>
20095ed0:	8020943a 	slli	r16,r16,16
20095ed4:	a00cd43a 	srli	r6,r20,16
20095ed8:	1545383a 	mul	r2,r2,r21
20095edc:	8188b03a 	or	r4,r16,r6
20095ee0:	2080042e 	bgeu	r4,r2,20095ef4 <__umoddi3+0xe4>
20095ee4:	24c9883a 	add	r4,r4,r19
20095ee8:	24c00236 	bltu	r4,r19,20095ef4 <__umoddi3+0xe4>
20095eec:	2080012e 	bgeu	r4,r2,20095ef4 <__umoddi3+0xe4>
20095ef0:	24c9883a 	add	r4,r4,r19
20095ef4:	20a3c83a 	sub	r17,r4,r2
20095ef8:	8809883a 	mov	r4,r17
20095efc:	b00b883a 	mov	r5,r22
20095f00:	00866780 	call	20086678 <__umodsi3>
20095f04:	8809883a 	mov	r4,r17
20095f08:	b00b883a 	mov	r5,r22
20095f0c:	1021883a 	mov	r16,r2
20095f10:	00866700 	call	20086670 <__udivsi3>
20095f14:	8006943a 	slli	r3,r16,16
20095f18:	1545383a 	mul	r2,r2,r21
20095f1c:	a13fffcc 	andi	r4,r20,65535
20095f20:	1906b03a 	or	r3,r3,r4
20095f24:	1880532e 	bgeu	r3,r2,20096074 <__umoddi3+0x264>
20095f28:	00004e06 	br	20096064 <__umoddi3+0x254>
20095f2c:	29c05536 	bltu	r5,r7,20096084 <__umoddi3+0x274>
20095f30:	00bfffd4 	movui	r2,65535
20095f34:	11c0612e 	bgeu	r2,r7,200960bc <__umoddi3+0x2ac>
20095f38:	00804034 	movhi	r2,256
20095f3c:	10bfffc4 	addi	r2,r2,-1
20095f40:	11c0f82e 	bgeu	r2,r7,20096324 <__umoddi3+0x514>
20095f44:	01400604 	movi	r5,24
20095f48:	282b883a 	mov	r21,r5
20095f4c:	394ad83a 	srl	r5,r7,r5
20095f50:	00c00034 	movhi	r3,0
20095f54:	18c0c504 	addi	r3,r3,788
20095f58:	194b883a 	add	r5,r3,r5
20095f5c:	28800003 	ldbu	r2,0(r5)
20095f60:	00c00804 	movi	r3,32
20095f64:	156b883a 	add	r21,r2,r21
20095f68:	1d69c83a 	sub	r20,r3,r21
20095f6c:	a000631e 	bne	r20,zero,200960fc <__umoddi3+0x2ec>
20095f70:	3c400136 	bltu	r7,r17,20095f78 <__umoddi3+0x168>
20095f74:	81810436 	bltu	r16,r6,20096388 <__umoddi3+0x578>
20095f78:	8185c83a 	sub	r2,r16,r6
20095f7c:	89e3c83a 	sub	r17,r17,r7
20095f80:	8087803a 	cmpltu	r3,r16,r2
20095f84:	88efc83a 	sub	r23,r17,r3
20095f88:	b807883a 	mov	r3,r23
20095f8c:	00003f06 	br	2009608c <__umoddi3+0x27c>
20095f90:	3000041e 	bne	r6,zero,20095fa4 <__umoddi3+0x194>
20095f94:	01000044 	movi	r4,1
20095f98:	000b883a 	mov	r5,zero
20095f9c:	00866700 	call	20086670 <__udivsi3>
20095fa0:	1027883a 	mov	r19,r2
20095fa4:	00bfffd4 	movui	r2,65535
20095fa8:	14c04f2e 	bgeu	r2,r19,200960e8 <__umoddi3+0x2d8>
20095fac:	00804034 	movhi	r2,256
20095fb0:	10bfffc4 	addi	r2,r2,-1
20095fb4:	14c0e42e 	bgeu	r2,r19,20096348 <__umoddi3+0x538>
20095fb8:	00800604 	movi	r2,24
20095fbc:	1007883a 	mov	r3,r2
20095fc0:	9884d83a 	srl	r2,r19,r2
20095fc4:	01000034 	movhi	r4,0
20095fc8:	2100c504 	addi	r4,r4,788
20095fcc:	2085883a 	add	r2,r4,r2
20095fd0:	11000003 	ldbu	r4,0(r2)
20095fd4:	00800804 	movi	r2,32
20095fd8:	20c7883a 	add	r3,r4,r3
20095fdc:	10c5c83a 	sub	r2,r2,r3
20095fe0:	10009a1e 	bne	r2,zero,2009624c <__umoddi3+0x43c>
20095fe4:	982cd43a 	srli	r22,r19,16
20095fe8:	8ce3c83a 	sub	r17,r17,r19
20095fec:	9c3fffcc 	andi	r16,r19,65535
20095ff0:	0025883a 	mov	r18,zero
20095ff4:	8809883a 	mov	r4,r17
20095ff8:	b00b883a 	mov	r5,r22
20095ffc:	00866780 	call	20086678 <__umodsi3>
20096000:	8809883a 	mov	r4,r17
20096004:	b00b883a 	mov	r5,r22
20096008:	102b883a 	mov	r21,r2
2009600c:	00866700 	call	20086670 <__udivsi3>
20096010:	a806943a 	slli	r3,r21,16
20096014:	a008d43a 	srli	r4,r20,16
20096018:	1405383a 	mul	r2,r2,r16
2009601c:	190cb03a 	or	r6,r3,r4
20096020:	3080032e 	bgeu	r6,r2,20096030 <__umoddi3+0x220>
20096024:	34cd883a 	add	r6,r6,r19
20096028:	34c00136 	bltu	r6,r19,20096030 <__umoddi3+0x220>
2009602c:	3080d436 	bltu	r6,r2,20096380 <__umoddi3+0x570>
20096030:	30abc83a 	sub	r21,r6,r2
20096034:	a809883a 	mov	r4,r21
20096038:	b00b883a 	mov	r5,r22
2009603c:	00866780 	call	20086678 <__umodsi3>
20096040:	1023883a 	mov	r17,r2
20096044:	a809883a 	mov	r4,r21
20096048:	b00b883a 	mov	r5,r22
2009604c:	00866700 	call	20086670 <__udivsi3>
20096050:	8822943a 	slli	r17,r17,16
20096054:	1405383a 	mul	r2,r2,r16
20096058:	a13fffcc 	andi	r4,r20,65535
2009605c:	8906b03a 	or	r3,r17,r4
20096060:	1880042e 	bgeu	r3,r2,20096074 <__umoddi3+0x264>
20096064:	1cc7883a 	add	r3,r3,r19
20096068:	1cc00236 	bltu	r3,r19,20096074 <__umoddi3+0x264>
2009606c:	1880012e 	bgeu	r3,r2,20096074 <__umoddi3+0x264>
20096070:	1cc7883a 	add	r3,r3,r19
20096074:	1887c83a 	sub	r3,r3,r2
20096078:	1c84d83a 	srl	r2,r3,r18
2009607c:	0007883a 	mov	r3,zero
20096080:	00000206 	br	2009608c <__umoddi3+0x27c>
20096084:	2005883a 	mov	r2,r4
20096088:	2807883a 	mov	r3,r5
2009608c:	dfc00b17 	ldw	ra,44(sp)
20096090:	df000a17 	ldw	fp,40(sp)
20096094:	ddc00917 	ldw	r23,36(sp)
20096098:	dd800817 	ldw	r22,32(sp)
2009609c:	dd400717 	ldw	r21,28(sp)
200960a0:	dd000617 	ldw	r20,24(sp)
200960a4:	dcc00517 	ldw	r19,20(sp)
200960a8:	dc800417 	ldw	r18,16(sp)
200960ac:	dc400317 	ldw	r17,12(sp)
200960b0:	dc000217 	ldw	r16,8(sp)
200960b4:	dec00c04 	addi	sp,sp,48
200960b8:	f800283a 	ret
200960bc:	00803fc4 	movi	r2,255
200960c0:	11c0952e 	bgeu	r2,r7,20096318 <__umoddi3+0x508>
200960c4:	01400204 	movi	r5,8
200960c8:	282b883a 	mov	r21,r5
200960cc:	003f9f06 	br	20095f4c <__flash_rwdata_start+0xffff9dc8>
200960d0:	00804034 	movhi	r2,256
200960d4:	10bfffc4 	addi	r2,r2,-1
200960d8:	1180952e 	bgeu	r2,r6,20096330 <__umoddi3+0x520>
200960dc:	01400604 	movi	r5,24
200960e0:	2805883a 	mov	r2,r5
200960e4:	003f6206 	br	20095e70 <__flash_rwdata_start+0xffff9cec>
200960e8:	00803fc4 	movi	r2,255
200960ec:	14c0932e 	bgeu	r2,r19,2009633c <__umoddi3+0x52c>
200960f0:	00800204 	movi	r2,8
200960f4:	1007883a 	mov	r3,r2
200960f8:	003fb106 	br	20095fc0 <__flash_rwdata_start+0xffff9e3c>
200960fc:	3548d83a 	srl	r4,r6,r21
20096100:	3d0e983a 	sll	r7,r7,r20
20096104:	8d10983a 	sll	r8,r17,r20
20096108:	8d6cd83a 	srl	r22,r17,r21
2009610c:	3922b03a 	or	r17,r7,r4
20096110:	882ed43a 	srli	r23,r17,16
20096114:	8564d83a 	srl	r18,r16,r21
20096118:	b009883a 	mov	r4,r22
2009611c:	b80b883a 	mov	r5,r23
20096120:	44a4b03a 	or	r18,r8,r18
20096124:	3526983a 	sll	r19,r6,r20
20096128:	00866780 	call	20086678 <__umodsi3>
2009612c:	b009883a 	mov	r4,r22
20096130:	b80b883a 	mov	r5,r23
20096134:	1039883a 	mov	fp,r2
20096138:	00866700 	call	20086670 <__udivsi3>
2009613c:	102d883a 	mov	r22,r2
20096140:	8a3fffcc 	andi	r8,r17,65535
20096144:	e004943a 	slli	r2,fp,16
20096148:	900cd43a 	srli	r6,r18,16
2009614c:	b239383a 	mul	fp,r22,r8
20096150:	8520983a 	sll	r16,r16,r20
20096154:	118ab03a 	or	r5,r2,r6
20096158:	2f00042e 	bgeu	r5,fp,2009616c <__umoddi3+0x35c>
2009615c:	2c4b883a 	add	r5,r5,r17
20096160:	b0bfffc4 	addi	r2,r22,-1
20096164:	2c40822e 	bgeu	r5,r17,20096370 <__umoddi3+0x560>
20096168:	102d883a 	mov	r22,r2
2009616c:	2f39c83a 	sub	fp,r5,fp
20096170:	e009883a 	mov	r4,fp
20096174:	b80b883a 	mov	r5,r23
20096178:	da000115 	stw	r8,4(sp)
2009617c:	00866780 	call	20086678 <__umodsi3>
20096180:	e009883a 	mov	r4,fp
20096184:	b80b883a 	mov	r5,r23
20096188:	d8800015 	stw	r2,0(sp)
2009618c:	00866700 	call	20086670 <__udivsi3>
20096190:	d9800017 	ldw	r6,0(sp)
20096194:	da000117 	ldw	r8,4(sp)
20096198:	94bfffcc 	andi	r18,r18,65535
2009619c:	300c943a 	slli	r6,r6,16
200961a0:	1209383a 	mul	r4,r2,r8
200961a4:	3490b03a 	or	r8,r6,r18
200961a8:	4100042e 	bgeu	r8,r4,200961bc <__umoddi3+0x3ac>
200961ac:	4451883a 	add	r8,r8,r17
200961b0:	10ffffc4 	addi	r3,r2,-1
200961b4:	44406a2e 	bgeu	r8,r17,20096360 <__umoddi3+0x550>
200961b8:	1805883a 	mov	r2,r3
200961bc:	b012943a 	slli	r9,r22,16
200961c0:	9abfffcc 	andi	r10,r19,65535
200961c4:	980ed43a 	srli	r7,r19,16
200961c8:	124ab03a 	or	r5,r2,r9
200961cc:	2a7fffcc 	andi	r9,r5,65535
200961d0:	280ad43a 	srli	r5,r5,16
200961d4:	4a8d383a 	mul	r6,r9,r10
200961d8:	49d3383a 	mul	r9,r9,r7
200961dc:	2a95383a 	mul	r10,r5,r10
200961e0:	3004d43a 	srli	r2,r6,16
200961e4:	4111c83a 	sub	r8,r8,r4
200961e8:	5253883a 	add	r9,r10,r9
200961ec:	4893883a 	add	r9,r9,r2
200961f0:	29cb383a 	mul	r5,r5,r7
200961f4:	4a80022e 	bgeu	r9,r10,20096200 <__umoddi3+0x3f0>
200961f8:	00800074 	movhi	r2,1
200961fc:	288b883a 	add	r5,r5,r2
20096200:	4808d43a 	srli	r4,r9,16
20096204:	4812943a 	slli	r9,r9,16
20096208:	31bfffcc 	andi	r6,r6,65535
2009620c:	290b883a 	add	r5,r5,r4
20096210:	498d883a 	add	r6,r9,r6
20096214:	41403a36 	bltu	r8,r5,20096300 <__umoddi3+0x4f0>
20096218:	41405d26 	beq	r8,r5,20096390 <__umoddi3+0x580>
2009621c:	4149c83a 	sub	r4,r8,r5
20096220:	300f883a 	mov	r7,r6
20096224:	81cfc83a 	sub	r7,r16,r7
20096228:	81c7803a 	cmpltu	r3,r16,r7
2009622c:	20c7c83a 	sub	r3,r4,r3
20096230:	1d44983a 	sll	r2,r3,r21
20096234:	3d0ed83a 	srl	r7,r7,r20
20096238:	1d06d83a 	srl	r3,r3,r20
2009623c:	11c4b03a 	or	r2,r2,r7
20096240:	003f9206 	br	2009608c <__flash_rwdata_start+0xffff9f08>
20096244:	0025883a 	mov	r18,zero
20096248:	003f1806 	br	20095eac <__flash_rwdata_start+0xffff9d28>
2009624c:	98a6983a 	sll	r19,r19,r2
20096250:	88e8d83a 	srl	r20,r17,r3
20096254:	80c6d83a 	srl	r3,r16,r3
20096258:	982cd43a 	srli	r22,r19,16
2009625c:	88a2983a 	sll	r17,r17,r2
20096260:	a009883a 	mov	r4,r20
20096264:	b00b883a 	mov	r5,r22
20096268:	88eab03a 	or	r21,r17,r3
2009626c:	1025883a 	mov	r18,r2
20096270:	00866780 	call	20086678 <__umodsi3>
20096274:	a009883a 	mov	r4,r20
20096278:	b00b883a 	mov	r5,r22
2009627c:	1023883a 	mov	r17,r2
20096280:	00866700 	call	20086670 <__udivsi3>
20096284:	9f3fffcc 	andi	fp,r19,65535
20096288:	8822943a 	slli	r17,r17,16
2009628c:	a80ad43a 	srli	r5,r21,16
20096290:	1705383a 	mul	r2,r2,fp
20096294:	84a8983a 	sll	r20,r16,r18
20096298:	8948b03a 	or	r4,r17,r5
2009629c:	2080042e 	bgeu	r4,r2,200962b0 <__umoddi3+0x4a0>
200962a0:	24c9883a 	add	r4,r4,r19
200962a4:	24c00236 	bltu	r4,r19,200962b0 <__umoddi3+0x4a0>
200962a8:	2080012e 	bgeu	r4,r2,200962b0 <__umoddi3+0x4a0>
200962ac:	24c9883a 	add	r4,r4,r19
200962b0:	20afc83a 	sub	r23,r4,r2
200962b4:	b809883a 	mov	r4,r23
200962b8:	b00b883a 	mov	r5,r22
200962bc:	00866780 	call	20086678 <__umodsi3>
200962c0:	1023883a 	mov	r17,r2
200962c4:	b809883a 	mov	r4,r23
200962c8:	b00b883a 	mov	r5,r22
200962cc:	00866700 	call	20086670 <__udivsi3>
200962d0:	8822943a 	slli	r17,r17,16
200962d4:	1705383a 	mul	r2,r2,fp
200962d8:	a93fffcc 	andi	r4,r21,65535
200962dc:	8908b03a 	or	r4,r17,r4
200962e0:	2080042e 	bgeu	r4,r2,200962f4 <__umoddi3+0x4e4>
200962e4:	24c9883a 	add	r4,r4,r19
200962e8:	24c00236 	bltu	r4,r19,200962f4 <__umoddi3+0x4e4>
200962ec:	2080012e 	bgeu	r4,r2,200962f4 <__umoddi3+0x4e4>
200962f0:	24c9883a 	add	r4,r4,r19
200962f4:	20a3c83a 	sub	r17,r4,r2
200962f8:	e021883a 	mov	r16,fp
200962fc:	003f3d06 	br	20095ff4 <__flash_rwdata_start+0xffff9e70>
20096300:	34cfc83a 	sub	r7,r6,r19
20096304:	2c4bc83a 	sub	r5,r5,r17
20096308:	31cd803a 	cmpltu	r6,r6,r7
2009630c:	298dc83a 	sub	r6,r5,r6
20096310:	4189c83a 	sub	r4,r8,r6
20096314:	003fc306 	br	20096224 <__flash_rwdata_start+0xffffa0a0>
20096318:	000b883a 	mov	r5,zero
2009631c:	002b883a 	mov	r21,zero
20096320:	003f0a06 	br	20095f4c <__flash_rwdata_start+0xffff9dc8>
20096324:	01400404 	movi	r5,16
20096328:	282b883a 	mov	r21,r5
2009632c:	003f0706 	br	20095f4c <__flash_rwdata_start+0xffff9dc8>
20096330:	01400404 	movi	r5,16
20096334:	2805883a 	mov	r2,r5
20096338:	003ecd06 	br	20095e70 <__flash_rwdata_start+0xffff9cec>
2009633c:	0005883a 	mov	r2,zero
20096340:	0007883a 	mov	r3,zero
20096344:	003f1e06 	br	20095fc0 <__flash_rwdata_start+0xffff9e3c>
20096348:	00800404 	movi	r2,16
2009634c:	1007883a 	mov	r3,r2
20096350:	003f1b06 	br	20095fc0 <__flash_rwdata_start+0xffff9e3c>
20096354:	000b883a 	mov	r5,zero
20096358:	0005883a 	mov	r2,zero
2009635c:	003ec406 	br	20095e70 <__flash_rwdata_start+0xffff9cec>
20096360:	413f952e 	bgeu	r8,r4,200961b8 <__flash_rwdata_start+0xffffa034>
20096364:	10bfff84 	addi	r2,r2,-2
20096368:	4451883a 	add	r8,r8,r17
2009636c:	003f9306 	br	200961bc <__flash_rwdata_start+0xffffa038>
20096370:	2f3f7d2e 	bgeu	r5,fp,20096168 <__flash_rwdata_start+0xffff9fe4>
20096374:	b5bfff84 	addi	r22,r22,-2
20096378:	2c4b883a 	add	r5,r5,r17
2009637c:	003f7b06 	br	2009616c <__flash_rwdata_start+0xffff9fe8>
20096380:	34cd883a 	add	r6,r6,r19
20096384:	003f2a06 	br	20096030 <__flash_rwdata_start+0xffff9eac>
20096388:	8005883a 	mov	r2,r16
2009638c:	003efe06 	br	20095f88 <__flash_rwdata_start+0xffff9e04>
20096390:	81bfdb36 	bltu	r16,r6,20096300 <__flash_rwdata_start+0xffffa17c>
20096394:	300f883a 	mov	r7,r6
20096398:	0009883a 	mov	r4,zero
2009639c:	003fa106 	br	20096224 <__flash_rwdata_start+0xffffa0a0>

200963a0 <__eqdf2>:
200963a0:	2804d53a 	srli	r2,r5,20
200963a4:	3806d53a 	srli	r3,r7,20
200963a8:	02000434 	movhi	r8,16
200963ac:	423fffc4 	addi	r8,r8,-1
200963b0:	1081ffcc 	andi	r2,r2,2047
200963b4:	0241ffc4 	movi	r9,2047
200963b8:	2a14703a 	and	r10,r5,r8
200963bc:	18c1ffcc 	andi	r3,r3,2047
200963c0:	3a10703a 	and	r8,r7,r8
200963c4:	280ad7fa 	srli	r5,r5,31
200963c8:	380ed7fa 	srli	r7,r7,31
200963cc:	12400f26 	beq	r2,r9,2009640c <__eqdf2+0x6c>
200963d0:	0241ffc4 	movi	r9,2047
200963d4:	1a400326 	beq	r3,r9,200963e4 <__eqdf2+0x44>
200963d8:	10c00526 	beq	r2,r3,200963f0 <__eqdf2+0x50>
200963dc:	00800044 	movi	r2,1
200963e0:	f800283a 	ret
200963e4:	4192b03a 	or	r9,r8,r6
200963e8:	483ffc1e 	bne	r9,zero,200963dc <__flash_rwdata_start+0xffffa258>
200963ec:	10fffb1e 	bne	r2,r3,200963dc <__flash_rwdata_start+0xffffa258>
200963f0:	523ffa1e 	bne	r10,r8,200963dc <__flash_rwdata_start+0xffffa258>
200963f4:	21bff91e 	bne	r4,r6,200963dc <__flash_rwdata_start+0xffffa258>
200963f8:	29c00826 	beq	r5,r7,2009641c <__eqdf2+0x7c>
200963fc:	103ff71e 	bne	r2,zero,200963dc <__flash_rwdata_start+0xffffa258>
20096400:	5104b03a 	or	r2,r10,r4
20096404:	1004c03a 	cmpne	r2,r2,zero
20096408:	f800283a 	ret
2009640c:	5112b03a 	or	r9,r10,r4
20096410:	483fef26 	beq	r9,zero,200963d0 <__flash_rwdata_start+0xffffa24c>
20096414:	00800044 	movi	r2,1
20096418:	f800283a 	ret
2009641c:	0005883a 	mov	r2,zero
20096420:	f800283a 	ret

20096424 <__gedf2>:
20096424:	2804d53a 	srli	r2,r5,20
20096428:	3806d53a 	srli	r3,r7,20
2009642c:	02000434 	movhi	r8,16
20096430:	423fffc4 	addi	r8,r8,-1
20096434:	0241ffc4 	movi	r9,2047
20096438:	1081ffcc 	andi	r2,r2,2047
2009643c:	2a14703a 	and	r10,r5,r8
20096440:	1a46703a 	and	r3,r3,r9
20096444:	3a10703a 	and	r8,r7,r8
20096448:	280ad7fa 	srli	r5,r5,31
2009644c:	380ed7fa 	srli	r7,r7,31
20096450:	12400b26 	beq	r2,r9,20096480 <__gedf2+0x5c>
20096454:	1a401626 	beq	r3,r9,200964b0 <__gedf2+0x8c>
20096458:	10000c1e 	bne	r2,zero,2009648c <__gedf2+0x68>
2009645c:	5112b03a 	or	r9,r10,r4
20096460:	4813003a 	cmpeq	r9,r9,zero
20096464:	4817883a 	mov	r11,r9
20096468:	18000c1e 	bne	r3,zero,2009649c <__gedf2+0x78>
2009646c:	4198b03a 	or	r12,r8,r6
20096470:	60000a1e 	bne	r12,zero,2009649c <__gedf2+0x78>
20096474:	48001326 	beq	r9,zero,200964c4 <__gedf2+0xa0>
20096478:	0005883a 	mov	r2,zero
2009647c:	f800283a 	ret
20096480:	5112b03a 	or	r9,r10,r4
20096484:	4800191e 	bne	r9,zero,200964ec <__gedf2+0xc8>
20096488:	18800926 	beq	r3,r2,200964b0 <__gedf2+0x8c>
2009648c:	18000b1e 	bne	r3,zero,200964bc <__gedf2+0x98>
20096490:	4192b03a 	or	r9,r8,r6
20096494:	0017883a 	mov	r11,zero
20096498:	48000a26 	beq	r9,zero,200964c4 <__gedf2+0xa0>
2009649c:	39c03fcc 	andi	r7,r7,255
200964a0:	58000726 	beq	r11,zero,200964c0 <__gedf2+0x9c>
200964a4:	3800081e 	bne	r7,zero,200964c8 <__gedf2+0xa4>
200964a8:	00bfffc4 	movi	r2,-1
200964ac:	f800283a 	ret
200964b0:	4192b03a 	or	r9,r8,r6
200964b4:	48000d1e 	bne	r9,zero,200964ec <__gedf2+0xc8>
200964b8:	103fe826 	beq	r2,zero,2009645c <__flash_rwdata_start+0xffffa2d8>
200964bc:	39c03fcc 	andi	r7,r7,255
200964c0:	29c00326 	beq	r5,r7,200964d0 <__gedf2+0xac>
200964c4:	283ff81e 	bne	r5,zero,200964a8 <__flash_rwdata_start+0xffffa324>
200964c8:	00800044 	movi	r2,1
200964cc:	f800283a 	ret
200964d0:	18bffc16 	blt	r3,r2,200964c4 <__flash_rwdata_start+0xffffa340>
200964d4:	10c00316 	blt	r2,r3,200964e4 <__gedf2+0xc0>
200964d8:	42bffa36 	bltu	r8,r10,200964c4 <__flash_rwdata_start+0xffffa340>
200964dc:	52000526 	beq	r10,r8,200964f4 <__gedf2+0xd0>
200964e0:	523fe52e 	bgeu	r10,r8,20096478 <__flash_rwdata_start+0xffffa2f4>
200964e4:	283ff026 	beq	r5,zero,200964a8 <__flash_rwdata_start+0xffffa324>
200964e8:	003ff706 	br	200964c8 <__flash_rwdata_start+0xffffa344>
200964ec:	00bfff84 	movi	r2,-2
200964f0:	f800283a 	ret
200964f4:	313ff336 	bltu	r6,r4,200964c4 <__flash_rwdata_start+0xffffa340>
200964f8:	21bfdf2e 	bgeu	r4,r6,20096478 <__flash_rwdata_start+0xffffa2f4>
200964fc:	283fea26 	beq	r5,zero,200964a8 <__flash_rwdata_start+0xffffa324>
20096500:	003ff106 	br	200964c8 <__flash_rwdata_start+0xffffa344>

20096504 <__ledf2>:
20096504:	2804d53a 	srli	r2,r5,20
20096508:	3810d53a 	srli	r8,r7,20
2009650c:	00c00434 	movhi	r3,16
20096510:	18ffffc4 	addi	r3,r3,-1
20096514:	0241ffc4 	movi	r9,2047
20096518:	1081ffcc 	andi	r2,r2,2047
2009651c:	28d4703a 	and	r10,r5,r3
20096520:	4250703a 	and	r8,r8,r9
20096524:	38c6703a 	and	r3,r7,r3
20096528:	280ad7fa 	srli	r5,r5,31
2009652c:	380ed7fa 	srli	r7,r7,31
20096530:	12400b26 	beq	r2,r9,20096560 <__ledf2+0x5c>
20096534:	42401926 	beq	r8,r9,2009659c <__ledf2+0x98>
20096538:	10000c1e 	bne	r2,zero,2009656c <__ledf2+0x68>
2009653c:	5112b03a 	or	r9,r10,r4
20096540:	4813003a 	cmpeq	r9,r9,zero
20096544:	4817883a 	mov	r11,r9
20096548:	40000f26 	beq	r8,zero,20096588 <__ledf2+0x84>
2009654c:	39c03fcc 	andi	r7,r7,255
20096550:	58001826 	beq	r11,zero,200965b4 <__ledf2+0xb0>
20096554:	38000a1e 	bne	r7,zero,20096580 <__ledf2+0x7c>
20096558:	00bfffc4 	movi	r2,-1
2009655c:	f800283a 	ret
20096560:	5112b03a 	or	r9,r10,r4
20096564:	48000f1e 	bne	r9,zero,200965a4 <__ledf2+0xa0>
20096568:	40800c26 	beq	r8,r2,2009659c <__ledf2+0x98>
2009656c:	4000101e 	bne	r8,zero,200965b0 <__ledf2+0xac>
20096570:	1992b03a 	or	r9,r3,r6
20096574:	0017883a 	mov	r11,zero
20096578:	483ff41e 	bne	r9,zero,2009654c <__flash_rwdata_start+0xffffa3c8>
2009657c:	283ff61e 	bne	r5,zero,20096558 <__flash_rwdata_start+0xffffa3d4>
20096580:	00800044 	movi	r2,1
20096584:	f800283a 	ret
20096588:	1998b03a 	or	r12,r3,r6
2009658c:	603fef1e 	bne	r12,zero,2009654c <__flash_rwdata_start+0xffffa3c8>
20096590:	483ffa26 	beq	r9,zero,2009657c <__flash_rwdata_start+0xffffa3f8>
20096594:	0005883a 	mov	r2,zero
20096598:	f800283a 	ret
2009659c:	1992b03a 	or	r9,r3,r6
200965a0:	48000226 	beq	r9,zero,200965ac <__ledf2+0xa8>
200965a4:	00800084 	movi	r2,2
200965a8:	f800283a 	ret
200965ac:	103fe326 	beq	r2,zero,2009653c <__flash_rwdata_start+0xffffa3b8>
200965b0:	39c03fcc 	andi	r7,r7,255
200965b4:	29fff11e 	bne	r5,r7,2009657c <__flash_rwdata_start+0xffffa3f8>
200965b8:	40bff016 	blt	r8,r2,2009657c <__flash_rwdata_start+0xffffa3f8>
200965bc:	12000316 	blt	r2,r8,200965cc <__ledf2+0xc8>
200965c0:	1abfee36 	bltu	r3,r10,2009657c <__flash_rwdata_start+0xffffa3f8>
200965c4:	50c00326 	beq	r10,r3,200965d4 <__ledf2+0xd0>
200965c8:	50fff22e 	bgeu	r10,r3,20096594 <__flash_rwdata_start+0xffffa410>
200965cc:	283fe226 	beq	r5,zero,20096558 <__flash_rwdata_start+0xffffa3d4>
200965d0:	003feb06 	br	20096580 <__flash_rwdata_start+0xffffa3fc>
200965d4:	313fe936 	bltu	r6,r4,2009657c <__flash_rwdata_start+0xffffa3f8>
200965d8:	21bfee2e 	bgeu	r4,r6,20096594 <__flash_rwdata_start+0xffffa410>
200965dc:	283fde26 	beq	r5,zero,20096558 <__flash_rwdata_start+0xffffa3d4>
200965e0:	003fe706 	br	20096580 <__flash_rwdata_start+0xffffa3fc>

200965e4 <__muldf3>:
200965e4:	defff204 	addi	sp,sp,-56
200965e8:	2804d53a 	srli	r2,r5,20
200965ec:	dd800a15 	stw	r22,40(sp)
200965f0:	282cd7fa 	srli	r22,r5,31
200965f4:	dc000415 	stw	r16,16(sp)
200965f8:	04000434 	movhi	r16,16
200965fc:	df000c15 	stw	fp,48(sp)
20096600:	dd000815 	stw	r20,32(sp)
20096604:	dcc00715 	stw	r19,28(sp)
20096608:	dc800615 	stw	r18,24(sp)
2009660c:	dc400515 	stw	r17,20(sp)
20096610:	843fffc4 	addi	r16,r16,-1
20096614:	dfc00d15 	stw	ra,52(sp)
20096618:	ddc00b15 	stw	r23,44(sp)
2009661c:	dd400915 	stw	r21,36(sp)
20096620:	1501ffcc 	andi	r20,r2,2047
20096624:	2023883a 	mov	r17,r4
20096628:	2025883a 	mov	r18,r4
2009662c:	2c20703a 	and	r16,r5,r16
20096630:	b027883a 	mov	r19,r22
20096634:	b7003fcc 	andi	fp,r22,255
20096638:	a0005926 	beq	r20,zero,200967a0 <__muldf3+0x1bc>
2009663c:	0081ffc4 	movi	r2,2047
20096640:	a0803426 	beq	r20,r2,20096714 <__muldf3+0x130>
20096644:	84000434 	orhi	r16,r16,16
20096648:	2004d77a 	srli	r2,r4,29
2009664c:	802090fa 	slli	r16,r16,3
20096650:	202490fa 	slli	r18,r4,3
20096654:	a53f0044 	addi	r20,r20,-1023
20096658:	80a0b03a 	or	r16,r16,r2
2009665c:	002b883a 	mov	r21,zero
20096660:	0015883a 	mov	r10,zero
20096664:	3812d53a 	srli	r9,r7,20
20096668:	3806d7fa 	srli	r3,r7,31
2009666c:	02000434 	movhi	r8,16
20096670:	423fffc4 	addi	r8,r8,-1
20096674:	4941ffcc 	andi	r5,r9,2047
20096678:	302f883a 	mov	r23,r6
2009667c:	3a22703a 	and	r17,r7,r8
20096680:	1ac03fcc 	andi	r11,r3,255
20096684:	28006226 	beq	r5,zero,20096810 <__muldf3+0x22c>
20096688:	0081ffc4 	movi	r2,2047
2009668c:	28805a26 	beq	r5,r2,200967f8 <__muldf3+0x214>
20096690:	8a000434 	orhi	r8,r17,16
20096694:	3004d77a 	srli	r2,r6,29
20096698:	401090fa 	slli	r8,r8,3
2009669c:	302e90fa 	slli	r23,r6,3
200966a0:	297f0044 	addi	r5,r5,-1023
200966a4:	40a2b03a 	or	r17,r8,r2
200966a8:	0013883a 	mov	r9,zero
200966ac:	4d4cb03a 	or	r6,r9,r21
200966b0:	300c90ba 	slli	r6,r6,2
200966b4:	02080274 	movhi	r8,8201
200966b8:	4219b504 	addi	r8,r8,26324
200966bc:	320d883a 	add	r6,r6,r8
200966c0:	31800017 	ldw	r6,0(r6)
200966c4:	a14b883a 	add	r5,r20,r5
200966c8:	1dacf03a 	xor	r22,r3,r22
200966cc:	2b000044 	addi	r12,r5,1
200966d0:	3000683a 	jmp	r6
200966d4:	20096910 	cmplti	zero,r4,9636
200966d8:	200968fc 	xorhi	zero,r4,9635
200966dc:	200968fc 	xorhi	zero,r4,9635
200966e0:	200968e8 	cmpgeui	zero,r4,9635
200966e4:	20096730 	cmpltui	zero,r4,9628
200966e8:	20096730 	cmpltui	zero,r4,9628
200966ec:	200968d0 	cmplti	zero,r4,9635
200966f0:	200968e8 	cmpgeui	zero,r4,9635
200966f4:	20096730 	cmpltui	zero,r4,9628
200966f8:	200968d0 	cmplti	zero,r4,9635
200966fc:	20096730 	cmpltui	zero,r4,9628
20096700:	200968e8 	cmpgeui	zero,r4,9635
20096704:	20096734 	orhi	zero,r4,9628
20096708:	20096734 	orhi	zero,r4,9628
2009670c:	20096734 	orhi	zero,r4,9628
20096710:	20096b0c 	andi	zero,r4,9644
20096714:	8104b03a 	or	r2,r16,r4
20096718:	10006a1e 	bne	r2,zero,200968c4 <__muldf3+0x2e0>
2009671c:	05400204 	movi	r21,8
20096720:	0021883a 	mov	r16,zero
20096724:	0025883a 	mov	r18,zero
20096728:	02800084 	movi	r10,2
2009672c:	003fcd06 	br	20096664 <__flash_rwdata_start+0xffffa4e0>
20096730:	b039883a 	mov	fp,r22
20096734:	00800084 	movi	r2,2
20096738:	50804e1e 	bne	r10,r2,20096874 <__muldf3+0x290>
2009673c:	e4c0004c 	andi	r19,fp,1
20096740:	0101ffc4 	movi	r4,2047
20096744:	0021883a 	mov	r16,zero
20096748:	0025883a 	mov	r18,zero
2009674c:	2008953a 	slli	r4,r4,20
20096750:	98c03fcc 	andi	r3,r19,255
20096754:	01400434 	movhi	r5,16
20096758:	297fffc4 	addi	r5,r5,-1
2009675c:	180697fa 	slli	r3,r3,31
20096760:	8160703a 	and	r16,r16,r5
20096764:	8120b03a 	or	r16,r16,r4
20096768:	80c6b03a 	or	r3,r16,r3
2009676c:	9005883a 	mov	r2,r18
20096770:	dfc00d17 	ldw	ra,52(sp)
20096774:	df000c17 	ldw	fp,48(sp)
20096778:	ddc00b17 	ldw	r23,44(sp)
2009677c:	dd800a17 	ldw	r22,40(sp)
20096780:	dd400917 	ldw	r21,36(sp)
20096784:	dd000817 	ldw	r20,32(sp)
20096788:	dcc00717 	ldw	r19,28(sp)
2009678c:	dc800617 	ldw	r18,24(sp)
20096790:	dc400517 	ldw	r17,20(sp)
20096794:	dc000417 	ldw	r16,16(sp)
20096798:	dec00e04 	addi	sp,sp,56
2009679c:	f800283a 	ret
200967a0:	8104b03a 	or	r2,r16,r4
200967a4:	10004226 	beq	r2,zero,200968b0 <__muldf3+0x2cc>
200967a8:	8000f926 	beq	r16,zero,20096b90 <__muldf3+0x5ac>
200967ac:	8009883a 	mov	r4,r16
200967b0:	d9800315 	stw	r6,12(sp)
200967b4:	d9c00015 	stw	r7,0(sp)
200967b8:	0088ee00 	call	20088ee0 <__clzsi2>
200967bc:	d9800317 	ldw	r6,12(sp)
200967c0:	d9c00017 	ldw	r7,0(sp)
200967c4:	1007883a 	mov	r3,r2
200967c8:	01000a04 	movi	r4,40
200967cc:	18bffe04 	addi	r2,r3,-8
200967d0:	20c9c83a 	sub	r4,r4,r3
200967d4:	80a0983a 	sll	r16,r16,r2
200967d8:	8908d83a 	srl	r4,r17,r4
200967dc:	88a4983a 	sll	r18,r17,r2
200967e0:	2420b03a 	or	r16,r4,r16
200967e4:	017f0344 	movi	r5,-1011
200967e8:	28e9c83a 	sub	r20,r5,r3
200967ec:	002b883a 	mov	r21,zero
200967f0:	0015883a 	mov	r10,zero
200967f4:	003f9b06 	br	20096664 <__flash_rwdata_start+0xffffa4e0>
200967f8:	8984b03a 	or	r2,r17,r6
200967fc:	10002a1e 	bne	r2,zero,200968a8 <__muldf3+0x2c4>
20096800:	0023883a 	mov	r17,zero
20096804:	002f883a 	mov	r23,zero
20096808:	02400084 	movi	r9,2
2009680c:	003fa706 	br	200966ac <__flash_rwdata_start+0xffffa528>
20096810:	8984b03a 	or	r2,r17,r6
20096814:	10002026 	beq	r2,zero,20096898 <__muldf3+0x2b4>
20096818:	8800cc26 	beq	r17,zero,20096b4c <__muldf3+0x568>
2009681c:	8809883a 	mov	r4,r17
20096820:	d8c00215 	stw	r3,8(sp)
20096824:	d9800315 	stw	r6,12(sp)
20096828:	da800015 	stw	r10,0(sp)
2009682c:	dac00115 	stw	r11,4(sp)
20096830:	0088ee00 	call	20088ee0 <__clzsi2>
20096834:	d8c00217 	ldw	r3,8(sp)
20096838:	d9800317 	ldw	r6,12(sp)
2009683c:	da800017 	ldw	r10,0(sp)
20096840:	dac00117 	ldw	r11,4(sp)
20096844:	1009883a 	mov	r4,r2
20096848:	01400a04 	movi	r5,40
2009684c:	25fffe04 	addi	r23,r4,-8
20096850:	290bc83a 	sub	r5,r5,r4
20096854:	8dd0983a 	sll	r8,r17,r23
20096858:	314ad83a 	srl	r5,r6,r5
2009685c:	35ee983a 	sll	r23,r6,r23
20096860:	2a22b03a 	or	r17,r5,r8
20096864:	017f0344 	movi	r5,-1011
20096868:	290bc83a 	sub	r5,r5,r4
2009686c:	0013883a 	mov	r9,zero
20096870:	003f8e06 	br	200966ac <__flash_rwdata_start+0xffffa528>
20096874:	008000c4 	movi	r2,3
20096878:	50811d26 	beq	r10,r2,20096cf0 <__muldf3+0x70c>
2009687c:	00800044 	movi	r2,1
20096880:	5080e01e 	bne	r10,r2,20096c04 <__muldf3+0x620>
20096884:	e0a6703a 	and	r19,fp,r2
20096888:	0009883a 	mov	r4,zero
2009688c:	0021883a 	mov	r16,zero
20096890:	0025883a 	mov	r18,zero
20096894:	003fad06 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096898:	0023883a 	mov	r17,zero
2009689c:	002f883a 	mov	r23,zero
200968a0:	02400044 	movi	r9,1
200968a4:	003f8106 	br	200966ac <__flash_rwdata_start+0xffffa528>
200968a8:	024000c4 	movi	r9,3
200968ac:	003f7f06 	br	200966ac <__flash_rwdata_start+0xffffa528>
200968b0:	05400104 	movi	r21,4
200968b4:	0021883a 	mov	r16,zero
200968b8:	0025883a 	mov	r18,zero
200968bc:	02800044 	movi	r10,1
200968c0:	003f6806 	br	20096664 <__flash_rwdata_start+0xffffa4e0>
200968c4:	05400304 	movi	r21,12
200968c8:	028000c4 	movi	r10,3
200968cc:	003f6506 	br	20096664 <__flash_rwdata_start+0xffffa4e0>
200968d0:	04000434 	movhi	r16,16
200968d4:	0027883a 	mov	r19,zero
200968d8:	843fffc4 	addi	r16,r16,-1
200968dc:	04bfffc4 	movi	r18,-1
200968e0:	0101ffc4 	movi	r4,2047
200968e4:	003f9906 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
200968e8:	8821883a 	mov	r16,r17
200968ec:	b825883a 	mov	r18,r23
200968f0:	5839883a 	mov	fp,r11
200968f4:	4815883a 	mov	r10,r9
200968f8:	003f8e06 	br	20096734 <__flash_rwdata_start+0xffffa5b0>
200968fc:	8821883a 	mov	r16,r17
20096900:	b825883a 	mov	r18,r23
20096904:	b039883a 	mov	fp,r22
20096908:	4815883a 	mov	r10,r9
2009690c:	003f8906 	br	20096734 <__flash_rwdata_start+0xffffa5b0>
20096910:	b80cd43a 	srli	r6,r23,16
20096914:	9006d43a 	srli	r3,r18,16
20096918:	90bfffcc 	andi	r2,r18,65535
2009691c:	bdffffcc 	andi	r23,r23,65535
20096920:	b891383a 	mul	r8,r23,r2
20096924:	b8c9383a 	mul	r4,r23,r3
20096928:	309b383a 	mul	r13,r6,r2
2009692c:	400ed43a 	srli	r7,r8,16
20096930:	30df383a 	mul	r15,r6,r3
20096934:	235b883a 	add	r13,r4,r13
20096938:	69db883a 	add	r13,r13,r7
2009693c:	6900022e 	bgeu	r13,r4,20096948 <__muldf3+0x364>
20096940:	01000074 	movhi	r4,1
20096944:	791f883a 	add	r15,r15,r4
20096948:	8828d43a 	srli	r20,r17,16
2009694c:	8c7fffcc 	andi	r17,r17,65535
20096950:	888f383a 	mul	r7,r17,r2
20096954:	88d3383a 	mul	r9,r17,r3
20096958:	a0a5383a 	mul	r18,r20,r2
2009695c:	3816d43a 	srli	r11,r7,16
20096960:	6814943a 	slli	r10,r13,16
20096964:	4ca5883a 	add	r18,r9,r18
20096968:	423fffcc 	andi	r8,r8,65535
2009696c:	92e5883a 	add	r18,r18,r11
20096970:	6808d43a 	srli	r4,r13,16
20096974:	5215883a 	add	r10,r10,r8
20096978:	a0c7383a 	mul	r3,r20,r3
2009697c:	9240022e 	bgeu	r18,r9,20096988 <__muldf3+0x3a4>
20096980:	00800074 	movhi	r2,1
20096984:	1887883a 	add	r3,r3,r2
20096988:	802ad43a 	srli	r21,r16,16
2009698c:	80bfffcc 	andi	r2,r16,65535
20096990:	b893383a 	mul	r9,r23,r2
20096994:	3091383a 	mul	r8,r6,r2
20096998:	bd6f383a 	mul	r23,r23,r21
2009699c:	9026943a 	slli	r19,r18,16
200969a0:	481ad43a 	srli	r13,r9,16
200969a4:	9024d43a 	srli	r18,r18,16
200969a8:	39ffffcc 	andi	r7,r7,65535
200969ac:	ba11883a 	add	r8,r23,r8
200969b0:	99e7883a 	add	r19,r19,r7
200969b4:	4351883a 	add	r8,r8,r13
200969b8:	1c97883a 	add	r11,r3,r18
200969bc:	354d383a 	mul	r6,r6,r21
200969c0:	9925883a 	add	r18,r19,r4
200969c4:	45c0022e 	bgeu	r8,r23,200969d0 <__muldf3+0x3ec>
200969c8:	00c00074 	movhi	r3,1
200969cc:	30cd883a 	add	r6,r6,r3
200969d0:	8889383a 	mul	r4,r17,r2
200969d4:	8d63383a 	mul	r17,r17,r21
200969d8:	a085383a 	mul	r2,r20,r2
200969dc:	200ed43a 	srli	r7,r4,16
200969e0:	401cd43a 	srli	r14,r8,16
200969e4:	401a943a 	slli	r13,r8,16
200969e8:	8885883a 	add	r2,r17,r2
200969ec:	4a3fffcc 	andi	r8,r9,65535
200969f0:	11c5883a 	add	r2,r2,r7
200969f4:	339d883a 	add	r14,r6,r14
200969f8:	6a11883a 	add	r8,r13,r8
200969fc:	a561383a 	mul	r16,r20,r21
20096a00:	1440022e 	bgeu	r2,r17,20096a0c <__muldf3+0x428>
20096a04:	00c00074 	movhi	r3,1
20096a08:	80e1883a 	add	r16,r16,r3
20096a0c:	1006943a 	slli	r3,r2,16
20096a10:	213fffcc 	andi	r4,r4,65535
20096a14:	93db883a 	add	r13,r18,r15
20096a18:	1909883a 	add	r4,r3,r4
20096a1c:	22c7883a 	add	r3,r4,r11
20096a20:	6cd3803a 	cmpltu	r9,r13,r19
20096a24:	6a09883a 	add	r4,r13,r8
20096a28:	1a5b883a 	add	r13,r3,r9
20096a2c:	2211803a 	cmpltu	r8,r4,r8
20096a30:	734d883a 	add	r6,r14,r13
20096a34:	100ed43a 	srli	r7,r2,16
20096a38:	6a53803a 	cmpltu	r9,r13,r9
20096a3c:	3205883a 	add	r2,r6,r8
20096a40:	1ac7803a 	cmpltu	r3,r3,r11
20096a44:	1211803a 	cmpltu	r8,r2,r8
20096a48:	48c6b03a 	or	r3,r9,r3
20096a4c:	338d803a 	cmpltu	r6,r6,r14
20096a50:	19c7883a 	add	r3,r3,r7
20096a54:	418cb03a 	or	r6,r8,r6
20096a58:	1987883a 	add	r3,r3,r6
20096a5c:	2024927a 	slli	r18,r4,9
20096a60:	1c07883a 	add	r3,r3,r16
20096a64:	1806927a 	slli	r3,r3,9
20096a68:	1020d5fa 	srli	r16,r2,23
20096a6c:	2008d5fa 	srli	r4,r4,23
20096a70:	9294b03a 	or	r10,r18,r10
20096a74:	1004927a 	slli	r2,r2,9
20096a78:	5024c03a 	cmpne	r18,r10,zero
20096a7c:	1c20b03a 	or	r16,r3,r16
20096a80:	9108b03a 	or	r4,r18,r4
20096a84:	80c0402c 	andhi	r3,r16,256
20096a88:	20a4b03a 	or	r18,r4,r2
20096a8c:	18000726 	beq	r3,zero,20096aac <__muldf3+0x4c8>
20096a90:	9006d07a 	srli	r3,r18,1
20096a94:	800897fa 	slli	r4,r16,31
20096a98:	9080004c 	andi	r2,r18,1
20096a9c:	8020d07a 	srli	r16,r16,1
20096aa0:	10c4b03a 	or	r2,r2,r3
20096aa4:	1124b03a 	or	r18,r2,r4
20096aa8:	600b883a 	mov	r5,r12
20096aac:	2900ffc4 	addi	r4,r5,1023
20096ab0:	01004b0e 	bge	zero,r4,20096be0 <__muldf3+0x5fc>
20096ab4:	908001cc 	andi	r2,r18,7
20096ab8:	10000726 	beq	r2,zero,20096ad8 <__muldf3+0x4f4>
20096abc:	90c003cc 	andi	r3,r18,15
20096ac0:	00800104 	movi	r2,4
20096ac4:	18800426 	beq	r3,r2,20096ad8 <__muldf3+0x4f4>
20096ac8:	9087883a 	add	r3,r18,r2
20096acc:	1c85803a 	cmpltu	r2,r3,r18
20096ad0:	80a1883a 	add	r16,r16,r2
20096ad4:	1825883a 	mov	r18,r3
20096ad8:	8080402c 	andhi	r2,r16,256
20096adc:	10000426 	beq	r2,zero,20096af0 <__muldf3+0x50c>
20096ae0:	00bfc034 	movhi	r2,65280
20096ae4:	10bfffc4 	addi	r2,r2,-1
20096ae8:	29010004 	addi	r4,r5,1024
20096aec:	80a0703a 	and	r16,r16,r2
20096af0:	0081ff84 	movi	r2,2046
20096af4:	1100320e 	bge	r2,r4,20096bc0 <__muldf3+0x5dc>
20096af8:	b4c0004c 	andi	r19,r22,1
20096afc:	0101ffc4 	movi	r4,2047
20096b00:	0021883a 	mov	r16,zero
20096b04:	0025883a 	mov	r18,zero
20096b08:	003f1006 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096b0c:	8080022c 	andhi	r2,r16,8
20096b10:	10000926 	beq	r2,zero,20096b38 <__muldf3+0x554>
20096b14:	8880022c 	andhi	r2,r17,8
20096b18:	1000071e 	bne	r2,zero,20096b38 <__muldf3+0x554>
20096b1c:	00800434 	movhi	r2,16
20096b20:	8c000234 	orhi	r16,r17,8
20096b24:	10bfffc4 	addi	r2,r2,-1
20096b28:	1827883a 	mov	r19,r3
20096b2c:	80a0703a 	and	r16,r16,r2
20096b30:	b825883a 	mov	r18,r23
20096b34:	003f6a06 	br	200968e0 <__flash_rwdata_start+0xffffa75c>
20096b38:	00800434 	movhi	r2,16
20096b3c:	84000234 	orhi	r16,r16,8
20096b40:	10bfffc4 	addi	r2,r2,-1
20096b44:	80a0703a 	and	r16,r16,r2
20096b48:	003f6506 	br	200968e0 <__flash_rwdata_start+0xffffa75c>
20096b4c:	3009883a 	mov	r4,r6
20096b50:	d8c00215 	stw	r3,8(sp)
20096b54:	d9800315 	stw	r6,12(sp)
20096b58:	da800015 	stw	r10,0(sp)
20096b5c:	dac00115 	stw	r11,4(sp)
20096b60:	0088ee00 	call	20088ee0 <__clzsi2>
20096b64:	11000804 	addi	r4,r2,32
20096b68:	014009c4 	movi	r5,39
20096b6c:	d8c00217 	ldw	r3,8(sp)
20096b70:	d9800317 	ldw	r6,12(sp)
20096b74:	da800017 	ldw	r10,0(sp)
20096b78:	dac00117 	ldw	r11,4(sp)
20096b7c:	293f320e 	bge	r5,r4,20096848 <__flash_rwdata_start+0xffffa6c4>
20096b80:	10bffe04 	addi	r2,r2,-8
20096b84:	b8a2983a 	sll	r17,r23,r2
20096b88:	002f883a 	mov	r23,zero
20096b8c:	003f3506 	br	20096864 <__flash_rwdata_start+0xffffa6e0>
20096b90:	d9800315 	stw	r6,12(sp)
20096b94:	d9c00015 	stw	r7,0(sp)
20096b98:	0088ee00 	call	20088ee0 <__clzsi2>
20096b9c:	10c00804 	addi	r3,r2,32
20096ba0:	010009c4 	movi	r4,39
20096ba4:	d9800317 	ldw	r6,12(sp)
20096ba8:	d9c00017 	ldw	r7,0(sp)
20096bac:	20ff060e 	bge	r4,r3,200967c8 <__flash_rwdata_start+0xffffa644>
20096bb0:	10bffe04 	addi	r2,r2,-8
20096bb4:	88a0983a 	sll	r16,r17,r2
20096bb8:	0025883a 	mov	r18,zero
20096bbc:	003f0906 	br	200967e4 <__flash_rwdata_start+0xffffa660>
20096bc0:	9004d0fa 	srli	r2,r18,3
20096bc4:	8024977a 	slli	r18,r16,29
20096bc8:	8020927a 	slli	r16,r16,9
20096bcc:	2101ffcc 	andi	r4,r4,2047
20096bd0:	90a4b03a 	or	r18,r18,r2
20096bd4:	8020d33a 	srli	r16,r16,12
20096bd8:	b4c0004c 	andi	r19,r22,1
20096bdc:	003edb06 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096be0:	00ff0084 	movi	r3,-1022
20096be4:	1947c83a 	sub	r3,r3,r5
20096be8:	00800e04 	movi	r2,56
20096bec:	10c0080e 	bge	r2,r3,20096c10 <__muldf3+0x62c>
20096bf0:	b4c0004c 	andi	r19,r22,1
20096bf4:	0009883a 	mov	r4,zero
20096bf8:	0021883a 	mov	r16,zero
20096bfc:	0025883a 	mov	r18,zero
20096c00:	003ed206 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096c04:	600b883a 	mov	r5,r12
20096c08:	e02d883a 	mov	r22,fp
20096c0c:	003fa706 	br	20096aac <__flash_rwdata_start+0xffffa928>
20096c10:	008007c4 	movi	r2,31
20096c14:	10c01816 	blt	r2,r3,20096c78 <__muldf3+0x694>
20096c18:	29410784 	addi	r5,r5,1054
20096c1c:	8144983a 	sll	r2,r16,r5
20096c20:	90c8d83a 	srl	r4,r18,r3
20096c24:	914a983a 	sll	r5,r18,r5
20096c28:	80c6d83a 	srl	r3,r16,r3
20096c2c:	2088b03a 	or	r4,r4,r2
20096c30:	2804c03a 	cmpne	r2,r5,zero
20096c34:	2084b03a 	or	r2,r4,r2
20096c38:	110001cc 	andi	r4,r2,7
20096c3c:	20000726 	beq	r4,zero,20096c5c <__muldf3+0x678>
20096c40:	114003cc 	andi	r5,r2,15
20096c44:	01000104 	movi	r4,4
20096c48:	29000426 	beq	r5,r4,20096c5c <__muldf3+0x678>
20096c4c:	11000104 	addi	r4,r2,4
20096c50:	2085803a 	cmpltu	r2,r4,r2
20096c54:	1887883a 	add	r3,r3,r2
20096c58:	2005883a 	mov	r2,r4
20096c5c:	1900202c 	andhi	r4,r3,128
20096c60:	20001826 	beq	r4,zero,20096cc4 <__muldf3+0x6e0>
20096c64:	b4c0004c 	andi	r19,r22,1
20096c68:	01000044 	movi	r4,1
20096c6c:	0021883a 	mov	r16,zero
20096c70:	0025883a 	mov	r18,zero
20096c74:	003eb506 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096c78:	00bef884 	movi	r2,-1054
20096c7c:	1145c83a 	sub	r2,r2,r5
20096c80:	8088d83a 	srl	r4,r16,r2
20096c84:	00800804 	movi	r2,32
20096c88:	18801726 	beq	r3,r2,20096ce8 <__muldf3+0x704>
20096c8c:	28810f84 	addi	r2,r5,1086
20096c90:	8084983a 	sll	r2,r16,r2
20096c94:	1484b03a 	or	r2,r2,r18
20096c98:	1004c03a 	cmpne	r2,r2,zero
20096c9c:	1104b03a 	or	r2,r2,r4
20096ca0:	10c001cc 	andi	r3,r2,7
20096ca4:	18000b1e 	bne	r3,zero,20096cd4 <__muldf3+0x6f0>
20096ca8:	0021883a 	mov	r16,zero
20096cac:	1004d0fa 	srli	r2,r2,3
20096cb0:	b4c0004c 	andi	r19,r22,1
20096cb4:	0009883a 	mov	r4,zero
20096cb8:	10e4b03a 	or	r18,r2,r3
20096cbc:	003ea306 	br	2009674c <__flash_rwdata_start+0xffffa5c8>
20096cc0:	0007883a 	mov	r3,zero
20096cc4:	1820927a 	slli	r16,r3,9
20096cc8:	1806977a 	slli	r3,r3,29
20096ccc:	8020d33a 	srli	r16,r16,12
20096cd0:	003ff606 	br	20096cac <__flash_rwdata_start+0xffffab28>
20096cd4:	110003cc 	andi	r4,r2,15
20096cd8:	00c00104 	movi	r3,4
20096cdc:	20fff826 	beq	r4,r3,20096cc0 <__flash_rwdata_start+0xffffab3c>
20096ce0:	0007883a 	mov	r3,zero
20096ce4:	003fd906 	br	20096c4c <__flash_rwdata_start+0xffffaac8>
20096ce8:	0005883a 	mov	r2,zero
20096cec:	003fe906 	br	20096c94 <__flash_rwdata_start+0xffffab10>
20096cf0:	00800434 	movhi	r2,16
20096cf4:	84000234 	orhi	r16,r16,8
20096cf8:	10bfffc4 	addi	r2,r2,-1
20096cfc:	e4c0004c 	andi	r19,fp,1
20096d00:	80a0703a 	and	r16,r16,r2
20096d04:	003ef606 	br	200968e0 <__flash_rwdata_start+0xffffa75c>

20096d08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20096d08:	defffe04 	addi	sp,sp,-8
20096d0c:	dfc00115 	stw	ra,4(sp)
20096d10:	df000015 	stw	fp,0(sp)
20096d14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20096d18:	00800034 	movhi	r2,0
20096d1c:	1088e804 	addi	r2,r2,9120
20096d20:	10800017 	ldw	r2,0(r2)
20096d24:	10000526 	beq	r2,zero,20096d3c <alt_get_errno+0x34>
20096d28:	00800034 	movhi	r2,0
20096d2c:	1088e804 	addi	r2,r2,9120
20096d30:	10800017 	ldw	r2,0(r2)
20096d34:	103ee83a 	callr	r2
20096d38:	00000206 	br	20096d44 <alt_get_errno+0x3c>
20096d3c:	00800034 	movhi	r2,0
20096d40:	1088f504 	addi	r2,r2,9172
}
20096d44:	e037883a 	mov	sp,fp
20096d48:	dfc00117 	ldw	ra,4(sp)
20096d4c:	df000017 	ldw	fp,0(sp)
20096d50:	dec00204 	addi	sp,sp,8
20096d54:	f800283a 	ret

20096d58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
20096d58:	defffb04 	addi	sp,sp,-20
20096d5c:	dfc00415 	stw	ra,16(sp)
20096d60:	df000315 	stw	fp,12(sp)
20096d64:	df000304 	addi	fp,sp,12
20096d68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
20096d6c:	e0bfff17 	ldw	r2,-4(fp)
20096d70:	10000616 	blt	r2,zero,20096d8c <close+0x34>
20096d74:	e0bfff17 	ldw	r2,-4(fp)
20096d78:	10c00324 	muli	r3,r2,12
20096d7c:	00800034 	movhi	r2,0
20096d80:	10844d04 	addi	r2,r2,4404
20096d84:	1885883a 	add	r2,r3,r2
20096d88:	00000106 	br	20096d90 <close+0x38>
20096d8c:	0005883a 	mov	r2,zero
20096d90:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
20096d94:	e0bffd17 	ldw	r2,-12(fp)
20096d98:	10001926 	beq	r2,zero,20096e00 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
20096d9c:	e0bffd17 	ldw	r2,-12(fp)
20096da0:	10800017 	ldw	r2,0(r2)
20096da4:	10800417 	ldw	r2,16(r2)
20096da8:	10000626 	beq	r2,zero,20096dc4 <close+0x6c>
20096dac:	e0bffd17 	ldw	r2,-12(fp)
20096db0:	10800017 	ldw	r2,0(r2)
20096db4:	10800417 	ldw	r2,16(r2)
20096db8:	e13ffd17 	ldw	r4,-12(fp)
20096dbc:	103ee83a 	callr	r2
20096dc0:	00000106 	br	20096dc8 <close+0x70>
20096dc4:	0005883a 	mov	r2,zero
20096dc8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20096dcc:	e13fff17 	ldw	r4,-4(fp)
20096dd0:	00974c80 	call	200974c8 <alt_release_fd>
    if (rval < 0)
20096dd4:	e0bffe17 	ldw	r2,-8(fp)
20096dd8:	1000070e 	bge	r2,zero,20096df8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
20096ddc:	0096d080 	call	20096d08 <alt_get_errno>
20096de0:	1007883a 	mov	r3,r2
20096de4:	e0bffe17 	ldw	r2,-8(fp)
20096de8:	0085c83a 	sub	r2,zero,r2
20096dec:	18800015 	stw	r2,0(r3)
      return -1;
20096df0:	00bfffc4 	movi	r2,-1
20096df4:	00000706 	br	20096e14 <close+0xbc>
    }
    return 0;
20096df8:	0005883a 	mov	r2,zero
20096dfc:	00000506 	br	20096e14 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
20096e00:	0096d080 	call	20096d08 <alt_get_errno>
20096e04:	1007883a 	mov	r3,r2
20096e08:	00801444 	movi	r2,81
20096e0c:	18800015 	stw	r2,0(r3)
    return -1;
20096e10:	00bfffc4 	movi	r2,-1
  }
}
20096e14:	e037883a 	mov	sp,fp
20096e18:	dfc00117 	ldw	ra,4(sp)
20096e1c:	df000017 	ldw	fp,0(sp)
20096e20:	dec00204 	addi	sp,sp,8
20096e24:	f800283a 	ret

20096e28 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
20096e28:	defffb04 	addi	sp,sp,-20
20096e2c:	df000415 	stw	fp,16(sp)
20096e30:	df000404 	addi	fp,sp,16
20096e34:	e13ffe15 	stw	r4,-8(fp)
20096e38:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
20096e3c:	e0fffe17 	ldw	r3,-8(fp)
20096e40:	e0bfff17 	ldw	r2,-4(fp)
20096e44:	1885883a 	add	r2,r3,r2
20096e48:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
20096e4c:	e0bffe17 	ldw	r2,-8(fp)
20096e50:	e0bffc15 	stw	r2,-16(fp)
20096e54:	00000506 	br	20096e6c <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
20096e58:	e0bffc17 	ldw	r2,-16(fp)
20096e5c:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
20096e60:	e0bffc17 	ldw	r2,-16(fp)
20096e64:	10800804 	addi	r2,r2,32
20096e68:	e0bffc15 	stw	r2,-16(fp)
20096e6c:	e0fffc17 	ldw	r3,-16(fp)
20096e70:	e0bffd17 	ldw	r2,-12(fp)
20096e74:	18bff836 	bltu	r3,r2,20096e58 <__flash_rwdata_start+0xffffacd4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
20096e78:	e0bffe17 	ldw	r2,-8(fp)
20096e7c:	108007cc 	andi	r2,r2,31
20096e80:	10000226 	beq	r2,zero,20096e8c <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
20096e84:	e0bffc17 	ldw	r2,-16(fp)
20096e88:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
20096e8c:	e037883a 	mov	sp,fp
20096e90:	df000017 	ldw	fp,0(sp)
20096e94:	dec00104 	addi	sp,sp,4
20096e98:	f800283a 	ret

20096e9c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
20096e9c:	defffc04 	addi	sp,sp,-16
20096ea0:	df000315 	stw	fp,12(sp)
20096ea4:	df000304 	addi	fp,sp,12
20096ea8:	e13ffd15 	stw	r4,-12(fp)
20096eac:	e17ffe15 	stw	r5,-8(fp)
20096eb0:	e1bfff15 	stw	r6,-4(fp)
  return len;
20096eb4:	e0bfff17 	ldw	r2,-4(fp)
}
20096eb8:	e037883a 	mov	sp,fp
20096ebc:	df000017 	ldw	fp,0(sp)
20096ec0:	dec00104 	addi	sp,sp,4
20096ec4:	f800283a 	ret

20096ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20096ec8:	defffe04 	addi	sp,sp,-8
20096ecc:	dfc00115 	stw	ra,4(sp)
20096ed0:	df000015 	stw	fp,0(sp)
20096ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20096ed8:	00800034 	movhi	r2,0
20096edc:	1088e804 	addi	r2,r2,9120
20096ee0:	10800017 	ldw	r2,0(r2)
20096ee4:	10000526 	beq	r2,zero,20096efc <alt_get_errno+0x34>
20096ee8:	00800034 	movhi	r2,0
20096eec:	1088e804 	addi	r2,r2,9120
20096ef0:	10800017 	ldw	r2,0(r2)
20096ef4:	103ee83a 	callr	r2
20096ef8:	00000206 	br	20096f04 <alt_get_errno+0x3c>
20096efc:	00800034 	movhi	r2,0
20096f00:	1088f504 	addi	r2,r2,9172
}
20096f04:	e037883a 	mov	sp,fp
20096f08:	dfc00117 	ldw	ra,4(sp)
20096f0c:	df000017 	ldw	fp,0(sp)
20096f10:	dec00204 	addi	sp,sp,8
20096f14:	f800283a 	ret

20096f18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
20096f18:	defffb04 	addi	sp,sp,-20
20096f1c:	dfc00415 	stw	ra,16(sp)
20096f20:	df000315 	stw	fp,12(sp)
20096f24:	df000304 	addi	fp,sp,12
20096f28:	e13ffe15 	stw	r4,-8(fp)
20096f2c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20096f30:	e0bffe17 	ldw	r2,-8(fp)
20096f34:	10000616 	blt	r2,zero,20096f50 <fstat+0x38>
20096f38:	e0bffe17 	ldw	r2,-8(fp)
20096f3c:	10c00324 	muli	r3,r2,12
20096f40:	00800034 	movhi	r2,0
20096f44:	10844d04 	addi	r2,r2,4404
20096f48:	1885883a 	add	r2,r3,r2
20096f4c:	00000106 	br	20096f54 <fstat+0x3c>
20096f50:	0005883a 	mov	r2,zero
20096f54:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
20096f58:	e0bffd17 	ldw	r2,-12(fp)
20096f5c:	10001026 	beq	r2,zero,20096fa0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20096f60:	e0bffd17 	ldw	r2,-12(fp)
20096f64:	10800017 	ldw	r2,0(r2)
20096f68:	10800817 	ldw	r2,32(r2)
20096f6c:	10000726 	beq	r2,zero,20096f8c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
20096f70:	e0bffd17 	ldw	r2,-12(fp)
20096f74:	10800017 	ldw	r2,0(r2)
20096f78:	10800817 	ldw	r2,32(r2)
20096f7c:	e13ffd17 	ldw	r4,-12(fp)
20096f80:	e17fff17 	ldw	r5,-4(fp)
20096f84:	103ee83a 	callr	r2
20096f88:	00000a06 	br	20096fb4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
20096f8c:	e0bfff17 	ldw	r2,-4(fp)
20096f90:	00c80004 	movi	r3,8192
20096f94:	10c00115 	stw	r3,4(r2)
      return 0;
20096f98:	0005883a 	mov	r2,zero
20096f9c:	00000506 	br	20096fb4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20096fa0:	0096ec80 	call	20096ec8 <alt_get_errno>
20096fa4:	1007883a 	mov	r3,r2
20096fa8:	00801444 	movi	r2,81
20096fac:	18800015 	stw	r2,0(r3)
    return -1;
20096fb0:	00bfffc4 	movi	r2,-1
  }
}
20096fb4:	e037883a 	mov	sp,fp
20096fb8:	dfc00117 	ldw	ra,4(sp)
20096fbc:	df000017 	ldw	fp,0(sp)
20096fc0:	dec00204 	addi	sp,sp,8
20096fc4:	f800283a 	ret

20096fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
20096fc8:	defffe04 	addi	sp,sp,-8
20096fcc:	dfc00115 	stw	ra,4(sp)
20096fd0:	df000015 	stw	fp,0(sp)
20096fd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
20096fd8:	00800034 	movhi	r2,0
20096fdc:	1088e804 	addi	r2,r2,9120
20096fe0:	10800017 	ldw	r2,0(r2)
20096fe4:	10000526 	beq	r2,zero,20096ffc <alt_get_errno+0x34>
20096fe8:	00800034 	movhi	r2,0
20096fec:	1088e804 	addi	r2,r2,9120
20096ff0:	10800017 	ldw	r2,0(r2)
20096ff4:	103ee83a 	callr	r2
20096ff8:	00000206 	br	20097004 <alt_get_errno+0x3c>
20096ffc:	00800034 	movhi	r2,0
20097000:	1088f504 	addi	r2,r2,9172
}
20097004:	e037883a 	mov	sp,fp
20097008:	dfc00117 	ldw	ra,4(sp)
2009700c:	df000017 	ldw	fp,0(sp)
20097010:	dec00204 	addi	sp,sp,8
20097014:	f800283a 	ret

20097018 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
20097018:	deffed04 	addi	sp,sp,-76
2009701c:	dfc01215 	stw	ra,72(sp)
20097020:	df001115 	stw	fp,68(sp)
20097024:	df001104 	addi	fp,sp,68
20097028:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
2009702c:	e0bfff17 	ldw	r2,-4(fp)
20097030:	10000616 	blt	r2,zero,2009704c <isatty+0x34>
20097034:	e0bfff17 	ldw	r2,-4(fp)
20097038:	10c00324 	muli	r3,r2,12
2009703c:	00800034 	movhi	r2,0
20097040:	10844d04 	addi	r2,r2,4404
20097044:	1885883a 	add	r2,r3,r2
20097048:	00000106 	br	20097050 <isatty+0x38>
2009704c:	0005883a 	mov	r2,zero
20097050:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
20097054:	e0bfef17 	ldw	r2,-68(fp)
20097058:	10000e26 	beq	r2,zero,20097094 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
2009705c:	e0bfef17 	ldw	r2,-68(fp)
20097060:	10800017 	ldw	r2,0(r2)
20097064:	10800817 	ldw	r2,32(r2)
20097068:	1000021e 	bne	r2,zero,20097074 <isatty+0x5c>
    {
      return 1;
2009706c:	00800044 	movi	r2,1
20097070:	00000d06 	br	200970a8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
20097074:	e0bff004 	addi	r2,fp,-64
20097078:	e13fff17 	ldw	r4,-4(fp)
2009707c:	100b883a 	mov	r5,r2
20097080:	0096f180 	call	20096f18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
20097084:	e0bff117 	ldw	r2,-60(fp)
20097088:	10880020 	cmpeqi	r2,r2,8192
2009708c:	10803fcc 	andi	r2,r2,255
20097090:	00000506 	br	200970a8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
20097094:	0096fc80 	call	20096fc8 <alt_get_errno>
20097098:	1007883a 	mov	r3,r2
2009709c:	00801444 	movi	r2,81
200970a0:	18800015 	stw	r2,0(r3)
    return 0;
200970a4:	0005883a 	mov	r2,zero
  }
}
200970a8:	e037883a 	mov	sp,fp
200970ac:	dfc00117 	ldw	ra,4(sp)
200970b0:	df000017 	ldw	fp,0(sp)
200970b4:	dec00204 	addi	sp,sp,8
200970b8:	f800283a 	ret

200970bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
200970bc:	defffc04 	addi	sp,sp,-16
200970c0:	df000315 	stw	fp,12(sp)
200970c4:	df000304 	addi	fp,sp,12
200970c8:	e13ffd15 	stw	r4,-12(fp)
200970cc:	e17ffe15 	stw	r5,-8(fp)
200970d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
200970d4:	e0fffe17 	ldw	r3,-8(fp)
200970d8:	e0bffd17 	ldw	r2,-12(fp)
200970dc:	18800c26 	beq	r3,r2,20097110 <alt_load_section+0x54>
  {
    while( to != end )
200970e0:	00000806 	br	20097104 <alt_load_section+0x48>
    {
      *to++ = *from++;
200970e4:	e0bffe17 	ldw	r2,-8(fp)
200970e8:	10c00104 	addi	r3,r2,4
200970ec:	e0fffe15 	stw	r3,-8(fp)
200970f0:	e0fffd17 	ldw	r3,-12(fp)
200970f4:	19000104 	addi	r4,r3,4
200970f8:	e13ffd15 	stw	r4,-12(fp)
200970fc:	18c00017 	ldw	r3,0(r3)
20097100:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
20097104:	e0fffe17 	ldw	r3,-8(fp)
20097108:	e0bfff17 	ldw	r2,-4(fp)
2009710c:	18bff51e 	bne	r3,r2,200970e4 <__flash_rwdata_start+0xffffaf60>
    {
      *to++ = *from++;
    }
  }
}
20097110:	e037883a 	mov	sp,fp
20097114:	df000017 	ldw	fp,0(sp)
20097118:	dec00104 	addi	sp,sp,4
2009711c:	f800283a 	ret

20097120 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20097120:	defffe04 	addi	sp,sp,-8
20097124:	dfc00115 	stw	ra,4(sp)
20097128:	df000015 	stw	fp,0(sp)
2009712c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
20097130:	010802b4 	movhi	r4,8202
20097134:	21306104 	addi	r4,r4,-15996
20097138:	01400034 	movhi	r5,0
2009713c:	29421a04 	addi	r5,r5,2152
20097140:	01800034 	movhi	r6,0
20097144:	3188ef04 	addi	r6,r6,9148
20097148:	00970bc0 	call	200970bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
2009714c:	01080234 	movhi	r4,8200
20097150:	21000804 	addi	r4,r4,32
20097154:	01480234 	movhi	r5,8200
20097158:	29400804 	addi	r5,r5,32
2009715c:	01880234 	movhi	r6,8200
20097160:	31809004 	addi	r6,r6,576
20097164:	00970bc0 	call	200970bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
20097168:	010802b4 	movhi	r4,8202
2009716c:	212e4704 	addi	r4,r4,-18148
20097170:	01400034 	movhi	r5,0
20097174:	29400004 	addi	r5,r5,0
20097178:	01800034 	movhi	r6,0
2009717c:	31821a04 	addi	r6,r6,2152
20097180:	00970bc0 	call	200970bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
20097184:	009a5e00 	call	2009a5e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
20097188:	009a8600 	call	2009a860 <alt_icache_flush_all>
}
2009718c:	e037883a 	mov	sp,fp
20097190:	dfc00117 	ldw	ra,4(sp)
20097194:	df000017 	ldw	fp,0(sp)
20097198:	dec00204 	addi	sp,sp,8
2009719c:	f800283a 	ret

200971a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200971a0:	defffe04 	addi	sp,sp,-8
200971a4:	dfc00115 	stw	ra,4(sp)
200971a8:	df000015 	stw	fp,0(sp)
200971ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200971b0:	00800034 	movhi	r2,0
200971b4:	1088e804 	addi	r2,r2,9120
200971b8:	10800017 	ldw	r2,0(r2)
200971bc:	10000526 	beq	r2,zero,200971d4 <alt_get_errno+0x34>
200971c0:	00800034 	movhi	r2,0
200971c4:	1088e804 	addi	r2,r2,9120
200971c8:	10800017 	ldw	r2,0(r2)
200971cc:	103ee83a 	callr	r2
200971d0:	00000206 	br	200971dc <alt_get_errno+0x3c>
200971d4:	00800034 	movhi	r2,0
200971d8:	1088f504 	addi	r2,r2,9172
}
200971dc:	e037883a 	mov	sp,fp
200971e0:	dfc00117 	ldw	ra,4(sp)
200971e4:	df000017 	ldw	fp,0(sp)
200971e8:	dec00204 	addi	sp,sp,8
200971ec:	f800283a 	ret

200971f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
200971f0:	defff904 	addi	sp,sp,-28
200971f4:	dfc00615 	stw	ra,24(sp)
200971f8:	df000515 	stw	fp,20(sp)
200971fc:	df000504 	addi	fp,sp,20
20097200:	e13ffd15 	stw	r4,-12(fp)
20097204:	e17ffe15 	stw	r5,-8(fp)
20097208:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
2009720c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097210:	e0bffd17 	ldw	r2,-12(fp)
20097214:	10000616 	blt	r2,zero,20097230 <lseek+0x40>
20097218:	e0bffd17 	ldw	r2,-12(fp)
2009721c:	10c00324 	muli	r3,r2,12
20097220:	00800034 	movhi	r2,0
20097224:	10844d04 	addi	r2,r2,4404
20097228:	1885883a 	add	r2,r3,r2
2009722c:	00000106 	br	20097234 <lseek+0x44>
20097230:	0005883a 	mov	r2,zero
20097234:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
20097238:	e0bffc17 	ldw	r2,-16(fp)
2009723c:	10001026 	beq	r2,zero,20097280 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
20097240:	e0bffc17 	ldw	r2,-16(fp)
20097244:	10800017 	ldw	r2,0(r2)
20097248:	10800717 	ldw	r2,28(r2)
2009724c:	10000926 	beq	r2,zero,20097274 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
20097250:	e0bffc17 	ldw	r2,-16(fp)
20097254:	10800017 	ldw	r2,0(r2)
20097258:	10800717 	ldw	r2,28(r2)
2009725c:	e13ffc17 	ldw	r4,-16(fp)
20097260:	e17ffe17 	ldw	r5,-8(fp)
20097264:	e1bfff17 	ldw	r6,-4(fp)
20097268:	103ee83a 	callr	r2
2009726c:	e0bffb15 	stw	r2,-20(fp)
20097270:	00000506 	br	20097288 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
20097274:	00bfde84 	movi	r2,-134
20097278:	e0bffb15 	stw	r2,-20(fp)
2009727c:	00000206 	br	20097288 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
20097280:	00bfebc4 	movi	r2,-81
20097284:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
20097288:	e0bffb17 	ldw	r2,-20(fp)
2009728c:	1000070e 	bge	r2,zero,200972ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
20097290:	00971a00 	call	200971a0 <alt_get_errno>
20097294:	1007883a 	mov	r3,r2
20097298:	e0bffb17 	ldw	r2,-20(fp)
2009729c:	0085c83a 	sub	r2,zero,r2
200972a0:	18800015 	stw	r2,0(r3)
    rc = -1;
200972a4:	00bfffc4 	movi	r2,-1
200972a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
200972ac:	e0bffb17 	ldw	r2,-20(fp)
}
200972b0:	e037883a 	mov	sp,fp
200972b4:	dfc00117 	ldw	ra,4(sp)
200972b8:	df000017 	ldw	fp,0(sp)
200972bc:	dec00204 	addi	sp,sp,8
200972c0:	f800283a 	ret

200972c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
200972c4:	defffd04 	addi	sp,sp,-12
200972c8:	dfc00215 	stw	ra,8(sp)
200972cc:	df000115 	stw	fp,4(sp)
200972d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
200972d4:	0009883a 	mov	r4,zero
200972d8:	009799c0 	call	2009799c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
200972dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
200972e0:	00979d00 	call	200979d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
200972e4:	01000034 	movhi	r4,0
200972e8:	21018b04 	addi	r4,r4,1580
200972ec:	01400034 	movhi	r5,0
200972f0:	29418b04 	addi	r5,r5,1580
200972f4:	01800034 	movhi	r6,0
200972f8:	31818b04 	addi	r6,r6,1580
200972fc:	009ac200 	call	2009ac20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
20097300:	009a7180 	call	2009a718 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20097304:	010802b4 	movhi	r4,8202
20097308:	2129dd04 	addi	r4,r4,-22668
2009730c:	009b4880 	call	2009b488 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20097310:	d1201c17 	ldw	r4,-32656(gp)
20097314:	d0e01d17 	ldw	r3,-32652(gp)
20097318:	d0a01e17 	ldw	r2,-32648(gp)
2009731c:	180b883a 	mov	r5,r3
20097320:	100d883a 	mov	r6,r2
20097324:	00864d00 	call	200864d0 <main>
20097328:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
2009732c:	01000044 	movi	r4,1
20097330:	0096d580 	call	20096d58 <close>
  exit (result);
20097334:	e13fff17 	ldw	r4,-4(fp)
20097338:	009b49c0 	call	2009b49c <exit>

2009733c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
2009733c:	defffe04 	addi	sp,sp,-8
20097340:	df000115 	stw	fp,4(sp)
20097344:	df000104 	addi	fp,sp,4
20097348:	e13fff15 	stw	r4,-4(fp)
}
2009734c:	e037883a 	mov	sp,fp
20097350:	df000017 	ldw	fp,0(sp)
20097354:	dec00104 	addi	sp,sp,4
20097358:	f800283a 	ret

2009735c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
2009735c:	defffe04 	addi	sp,sp,-8
20097360:	df000115 	stw	fp,4(sp)
20097364:	df000104 	addi	fp,sp,4
20097368:	e13fff15 	stw	r4,-4(fp)
}
2009736c:	e037883a 	mov	sp,fp
20097370:	df000017 	ldw	fp,0(sp)
20097374:	dec00104 	addi	sp,sp,4
20097378:	f800283a 	ret

2009737c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009737c:	defffe04 	addi	sp,sp,-8
20097380:	dfc00115 	stw	ra,4(sp)
20097384:	df000015 	stw	fp,0(sp)
20097388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009738c:	00800034 	movhi	r2,0
20097390:	1088e804 	addi	r2,r2,9120
20097394:	10800017 	ldw	r2,0(r2)
20097398:	10000526 	beq	r2,zero,200973b0 <alt_get_errno+0x34>
2009739c:	00800034 	movhi	r2,0
200973a0:	1088e804 	addi	r2,r2,9120
200973a4:	10800017 	ldw	r2,0(r2)
200973a8:	103ee83a 	callr	r2
200973ac:	00000206 	br	200973b8 <alt_get_errno+0x3c>
200973b0:	00800034 	movhi	r2,0
200973b4:	1088f504 	addi	r2,r2,9172
}
200973b8:	e037883a 	mov	sp,fp
200973bc:	dfc00117 	ldw	ra,4(sp)
200973c0:	df000017 	ldw	fp,0(sp)
200973c4:	dec00204 	addi	sp,sp,8
200973c8:	f800283a 	ret

200973cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
200973cc:	defff904 	addi	sp,sp,-28
200973d0:	dfc00615 	stw	ra,24(sp)
200973d4:	df000515 	stw	fp,20(sp)
200973d8:	df000504 	addi	fp,sp,20
200973dc:	e13ffd15 	stw	r4,-12(fp)
200973e0:	e17ffe15 	stw	r5,-8(fp)
200973e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200973e8:	e0bffd17 	ldw	r2,-12(fp)
200973ec:	10000616 	blt	r2,zero,20097408 <read+0x3c>
200973f0:	e0bffd17 	ldw	r2,-12(fp)
200973f4:	10c00324 	muli	r3,r2,12
200973f8:	00800034 	movhi	r2,0
200973fc:	10844d04 	addi	r2,r2,4404
20097400:	1885883a 	add	r2,r3,r2
20097404:	00000106 	br	2009740c <read+0x40>
20097408:	0005883a 	mov	r2,zero
2009740c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
20097410:	e0bffb17 	ldw	r2,-20(fp)
20097414:	10002226 	beq	r2,zero,200974a0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097418:	e0bffb17 	ldw	r2,-20(fp)
2009741c:	10800217 	ldw	r2,8(r2)
20097420:	108000cc 	andi	r2,r2,3
20097424:	10800060 	cmpeqi	r2,r2,1
20097428:	1000181e 	bne	r2,zero,2009748c <read+0xc0>
        (fd->dev->read))
2009742c:	e0bffb17 	ldw	r2,-20(fp)
20097430:	10800017 	ldw	r2,0(r2)
20097434:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097438:	10001426 	beq	r2,zero,2009748c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
2009743c:	e0bffb17 	ldw	r2,-20(fp)
20097440:	10800017 	ldw	r2,0(r2)
20097444:	10800517 	ldw	r2,20(r2)
20097448:	e0ffff17 	ldw	r3,-4(fp)
2009744c:	e13ffb17 	ldw	r4,-20(fp)
20097450:	e17ffe17 	ldw	r5,-8(fp)
20097454:	180d883a 	mov	r6,r3
20097458:	103ee83a 	callr	r2
2009745c:	e0bffc15 	stw	r2,-16(fp)
20097460:	e0bffc17 	ldw	r2,-16(fp)
20097464:	1000070e 	bge	r2,zero,20097484 <read+0xb8>
        {
          ALT_ERRNO = -rval;
20097468:	009737c0 	call	2009737c <alt_get_errno>
2009746c:	1007883a 	mov	r3,r2
20097470:	e0bffc17 	ldw	r2,-16(fp)
20097474:	0085c83a 	sub	r2,zero,r2
20097478:	18800015 	stw	r2,0(r3)
          return -1;
2009747c:	00bfffc4 	movi	r2,-1
20097480:	00000c06 	br	200974b4 <read+0xe8>
        }
        return rval;
20097484:	e0bffc17 	ldw	r2,-16(fp)
20097488:	00000a06 	br	200974b4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
2009748c:	009737c0 	call	2009737c <alt_get_errno>
20097490:	1007883a 	mov	r3,r2
20097494:	00800344 	movi	r2,13
20097498:	18800015 	stw	r2,0(r3)
2009749c:	00000406 	br	200974b0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
200974a0:	009737c0 	call	2009737c <alt_get_errno>
200974a4:	1007883a 	mov	r3,r2
200974a8:	00801444 	movi	r2,81
200974ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
200974b0:	00bfffc4 	movi	r2,-1
}
200974b4:	e037883a 	mov	sp,fp
200974b8:	dfc00117 	ldw	ra,4(sp)
200974bc:	df000017 	ldw	fp,0(sp)
200974c0:	dec00204 	addi	sp,sp,8
200974c4:	f800283a 	ret

200974c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
200974c8:	defffe04 	addi	sp,sp,-8
200974cc:	df000115 	stw	fp,4(sp)
200974d0:	df000104 	addi	fp,sp,4
200974d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
200974d8:	e0bfff17 	ldw	r2,-4(fp)
200974dc:	108000d0 	cmplti	r2,r2,3
200974e0:	10000d1e 	bne	r2,zero,20097518 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
200974e4:	00800034 	movhi	r2,0
200974e8:	10844d04 	addi	r2,r2,4404
200974ec:	e0ffff17 	ldw	r3,-4(fp)
200974f0:	18c00324 	muli	r3,r3,12
200974f4:	18c00204 	addi	r3,r3,8
200974f8:	10c5883a 	add	r2,r2,r3
200974fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
20097500:	00800034 	movhi	r2,0
20097504:	10844d04 	addi	r2,r2,4404
20097508:	e0ffff17 	ldw	r3,-4(fp)
2009750c:	18c00324 	muli	r3,r3,12
20097510:	10c5883a 	add	r2,r2,r3
20097514:	10000015 	stw	zero,0(r2)
  }
}
20097518:	e037883a 	mov	sp,fp
2009751c:	df000017 	ldw	fp,0(sp)
20097520:	dec00104 	addi	sp,sp,4
20097524:	f800283a 	ret

20097528 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
20097528:	defff904 	addi	sp,sp,-28
2009752c:	df000615 	stw	fp,24(sp)
20097530:	df000604 	addi	fp,sp,24
20097534:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097538:	0005303a 	rdctl	r2,status
2009753c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097540:	e0fffc17 	ldw	r3,-16(fp)
20097544:	00bfff84 	movi	r2,-2
20097548:	1884703a 	and	r2,r3,r2
2009754c:	1001703a 	wrctl	status,r2
  
  return context;
20097550:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
20097554:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20097558:	d0a00c17 	ldw	r2,-32720(gp)
2009755c:	10c000c4 	addi	r3,r2,3
20097560:	00bfff04 	movi	r2,-4
20097564:	1884703a 	and	r2,r3,r2
20097568:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
2009756c:	d0e00c17 	ldw	r3,-32720(gp)
20097570:	e0bfff17 	ldw	r2,-4(fp)
20097574:	1887883a 	add	r3,r3,r2
20097578:	00880034 	movhi	r2,8192
2009757c:	10800004 	addi	r2,r2,0
20097580:	10c0062e 	bgeu	r2,r3,2009759c <sbrk+0x74>
20097584:	e0bffa17 	ldw	r2,-24(fp)
20097588:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009758c:	e0bffd17 	ldw	r2,-12(fp)
20097590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20097594:	00bfffc4 	movi	r2,-1
20097598:	00000b06 	br	200975c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
2009759c:	d0a00c17 	ldw	r2,-32720(gp)
200975a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
200975a4:	d0e00c17 	ldw	r3,-32720(gp)
200975a8:	e0bfff17 	ldw	r2,-4(fp)
200975ac:	1885883a 	add	r2,r3,r2
200975b0:	d0a00c15 	stw	r2,-32720(gp)
200975b4:	e0bffa17 	ldw	r2,-24(fp)
200975b8:	e0bffe15 	stw	r2,-8(fp)
200975bc:	e0bffe17 	ldw	r2,-8(fp)
200975c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
200975c4:	e0bffb17 	ldw	r2,-20(fp)
} 
200975c8:	e037883a 	mov	sp,fp
200975cc:	df000017 	ldw	fp,0(sp)
200975d0:	dec00104 	addi	sp,sp,4
200975d4:	f800283a 	ret

200975d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
200975d8:	defffa04 	addi	sp,sp,-24
200975dc:	df000515 	stw	fp,20(sp)
200975e0:	df000504 	addi	fp,sp,20
200975e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200975e8:	0005303a 	rdctl	r2,status
200975ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200975f0:	e0fffc17 	ldw	r3,-16(fp)
200975f4:	00bfff84 	movi	r2,-2
200975f8:	1884703a 	and	r2,r3,r2
200975fc:	1001703a 	wrctl	status,r2
  
  return context;
20097600:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
20097604:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
20097608:	e0bfff17 	ldw	r2,-4(fp)
2009760c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20097610:	e0bffd17 	ldw	r2,-12(fp)
20097614:	10800017 	ldw	r2,0(r2)
20097618:	e0fffd17 	ldw	r3,-12(fp)
2009761c:	18c00117 	ldw	r3,4(r3)
20097620:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
20097624:	e0bffd17 	ldw	r2,-12(fp)
20097628:	10800117 	ldw	r2,4(r2)
2009762c:	e0fffd17 	ldw	r3,-12(fp)
20097630:	18c00017 	ldw	r3,0(r3)
20097634:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20097638:	e0bffd17 	ldw	r2,-12(fp)
2009763c:	e0fffd17 	ldw	r3,-12(fp)
20097640:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
20097644:	e0bffd17 	ldw	r2,-12(fp)
20097648:	e0fffd17 	ldw	r3,-12(fp)
2009764c:	10c00015 	stw	r3,0(r2)
20097650:	e0bffb17 	ldw	r2,-20(fp)
20097654:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097658:	e0bffe17 	ldw	r2,-8(fp)
2009765c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
20097660:	e037883a 	mov	sp,fp
20097664:	df000017 	ldw	fp,0(sp)
20097668:	dec00104 	addi	sp,sp,4
2009766c:	f800283a 	ret

20097670 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20097670:	defffb04 	addi	sp,sp,-20
20097674:	dfc00415 	stw	ra,16(sp)
20097678:	df000315 	stw	fp,12(sp)
2009767c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20097680:	d0a00d17 	ldw	r2,-32716(gp)
20097684:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20097688:	d0a02017 	ldw	r2,-32640(gp)
2009768c:	10800044 	addi	r2,r2,1
20097690:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097694:	00002e06 	br	20097750 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
20097698:	e0bffd17 	ldw	r2,-12(fp)
2009769c:	10800017 	ldw	r2,0(r2)
200976a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
200976a4:	e0bffd17 	ldw	r2,-12(fp)
200976a8:	10800403 	ldbu	r2,16(r2)
200976ac:	10803fcc 	andi	r2,r2,255
200976b0:	10000426 	beq	r2,zero,200976c4 <alt_tick+0x54>
200976b4:	d0a02017 	ldw	r2,-32640(gp)
200976b8:	1000021e 	bne	r2,zero,200976c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
200976bc:	e0bffd17 	ldw	r2,-12(fp)
200976c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
200976c4:	e0bffd17 	ldw	r2,-12(fp)
200976c8:	10800217 	ldw	r2,8(r2)
200976cc:	d0e02017 	ldw	r3,-32640(gp)
200976d0:	18801d36 	bltu	r3,r2,20097748 <alt_tick+0xd8>
200976d4:	e0bffd17 	ldw	r2,-12(fp)
200976d8:	10800403 	ldbu	r2,16(r2)
200976dc:	10803fcc 	andi	r2,r2,255
200976e0:	1000191e 	bne	r2,zero,20097748 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
200976e4:	e0bffd17 	ldw	r2,-12(fp)
200976e8:	10800317 	ldw	r2,12(r2)
200976ec:	e0fffd17 	ldw	r3,-12(fp)
200976f0:	18c00517 	ldw	r3,20(r3)
200976f4:	1809883a 	mov	r4,r3
200976f8:	103ee83a 	callr	r2
200976fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20097700:	e0bfff17 	ldw	r2,-4(fp)
20097704:	1000031e 	bne	r2,zero,20097714 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
20097708:	e13ffd17 	ldw	r4,-12(fp)
2009770c:	00975d80 	call	200975d8 <alt_alarm_stop>
20097710:	00000d06 	br	20097748 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
20097714:	e0bffd17 	ldw	r2,-12(fp)
20097718:	10c00217 	ldw	r3,8(r2)
2009771c:	e0bfff17 	ldw	r2,-4(fp)
20097720:	1887883a 	add	r3,r3,r2
20097724:	e0bffd17 	ldw	r2,-12(fp)
20097728:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
2009772c:	e0bffd17 	ldw	r2,-12(fp)
20097730:	10c00217 	ldw	r3,8(r2)
20097734:	d0a02017 	ldw	r2,-32640(gp)
20097738:	1880032e 	bgeu	r3,r2,20097748 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
2009773c:	e0bffd17 	ldw	r2,-12(fp)
20097740:	00c00044 	movi	r3,1
20097744:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
20097748:	e0bffe17 	ldw	r2,-8(fp)
2009774c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097750:	e0fffd17 	ldw	r3,-12(fp)
20097754:	d0a00d04 	addi	r2,gp,-32716
20097758:	18bfcf1e 	bne	r3,r2,20097698 <__flash_rwdata_start+0xffffb514>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
2009775c:	0001883a 	nop
}
20097760:	e037883a 	mov	sp,fp
20097764:	dfc00117 	ldw	ra,4(sp)
20097768:	df000017 	ldw	fp,0(sp)
2009776c:	dec00204 	addi	sp,sp,8
20097770:	f800283a 	ret

20097774 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097774:	defffa04 	addi	sp,sp,-24
20097778:	dfc00515 	stw	ra,20(sp)
2009777c:	df000415 	stw	fp,16(sp)
20097780:	df000404 	addi	fp,sp,16
20097784:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
20097788:	e0bfff17 	ldw	r2,-4(fp)
2009778c:	108007c4 	addi	r2,r2,31
20097790:	1004d17a 	srli	r2,r2,5
20097794:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
20097798:	e0bffc17 	ldw	r2,-16(fp)
2009779c:	1004917a 	slli	r2,r2,5
200977a0:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
200977a4:	01000804 	movi	r4,32
200977a8:	e17ffd17 	ldw	r5,-12(fp)
200977ac:	0088f440 	call	20088f44 <memalign>
200977b0:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
200977b4:	e0bffe17 	ldw	r2,-8(fp)
200977b8:	1000021e 	bne	r2,zero,200977c4 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
200977bc:	0005883a 	mov	r2,zero
200977c0:	00000506 	br	200977d8 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
200977c4:	e13ffe17 	ldw	r4,-8(fp)
200977c8:	e17ffd17 	ldw	r5,-12(fp)
200977cc:	0096e280 	call	20096e28 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
200977d0:	e0bffe17 	ldw	r2,-8(fp)
200977d4:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
200977d8:	e037883a 	mov	sp,fp
200977dc:	dfc00117 	ldw	ra,4(sp)
200977e0:	df000017 	ldw	fp,0(sp)
200977e4:	dec00204 	addi	sp,sp,8
200977e8:	f800283a 	ret

200977ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
200977ec:	defffd04 	addi	sp,sp,-12
200977f0:	dfc00215 	stw	ra,8(sp)
200977f4:	df000115 	stw	fp,4(sp)
200977f8:	df000104 	addi	fp,sp,4
200977fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
20097800:	e13fff17 	ldw	r4,-4(fp)
20097804:	009a4880 	call	2009a488 <alt_busy_sleep>
}
20097808:	e037883a 	mov	sp,fp
2009780c:	dfc00117 	ldw	ra,4(sp)
20097810:	df000017 	ldw	fp,0(sp)
20097814:	dec00204 	addi	sp,sp,8
20097818:	f800283a 	ret

2009781c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009781c:	defffe04 	addi	sp,sp,-8
20097820:	dfc00115 	stw	ra,4(sp)
20097824:	df000015 	stw	fp,0(sp)
20097828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009782c:	00800034 	movhi	r2,0
20097830:	1088e804 	addi	r2,r2,9120
20097834:	10800017 	ldw	r2,0(r2)
20097838:	10000526 	beq	r2,zero,20097850 <alt_get_errno+0x34>
2009783c:	00800034 	movhi	r2,0
20097840:	1088e804 	addi	r2,r2,9120
20097844:	10800017 	ldw	r2,0(r2)
20097848:	103ee83a 	callr	r2
2009784c:	00000206 	br	20097858 <alt_get_errno+0x3c>
20097850:	00800034 	movhi	r2,0
20097854:	1088f504 	addi	r2,r2,9172
}
20097858:	e037883a 	mov	sp,fp
2009785c:	dfc00117 	ldw	ra,4(sp)
20097860:	df000017 	ldw	fp,0(sp)
20097864:	dec00204 	addi	sp,sp,8
20097868:	f800283a 	ret

2009786c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
2009786c:	defff904 	addi	sp,sp,-28
20097870:	dfc00615 	stw	ra,24(sp)
20097874:	df000515 	stw	fp,20(sp)
20097878:	df000504 	addi	fp,sp,20
2009787c:	e13ffd15 	stw	r4,-12(fp)
20097880:	e17ffe15 	stw	r5,-8(fp)
20097884:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097888:	e0bffd17 	ldw	r2,-12(fp)
2009788c:	10000616 	blt	r2,zero,200978a8 <write+0x3c>
20097890:	e0bffd17 	ldw	r2,-12(fp)
20097894:	10c00324 	muli	r3,r2,12
20097898:	00800034 	movhi	r2,0
2009789c:	10844d04 	addi	r2,r2,4404
200978a0:	1885883a 	add	r2,r3,r2
200978a4:	00000106 	br	200978ac <write+0x40>
200978a8:	0005883a 	mov	r2,zero
200978ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
200978b0:	e0bffb17 	ldw	r2,-20(fp)
200978b4:	10002126 	beq	r2,zero,2009793c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
200978b8:	e0bffb17 	ldw	r2,-20(fp)
200978bc:	10800217 	ldw	r2,8(r2)
200978c0:	108000cc 	andi	r2,r2,3
200978c4:	10001826 	beq	r2,zero,20097928 <write+0xbc>
200978c8:	e0bffb17 	ldw	r2,-20(fp)
200978cc:	10800017 	ldw	r2,0(r2)
200978d0:	10800617 	ldw	r2,24(r2)
200978d4:	10001426 	beq	r2,zero,20097928 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
200978d8:	e0bffb17 	ldw	r2,-20(fp)
200978dc:	10800017 	ldw	r2,0(r2)
200978e0:	10800617 	ldw	r2,24(r2)
200978e4:	e0ffff17 	ldw	r3,-4(fp)
200978e8:	e13ffb17 	ldw	r4,-20(fp)
200978ec:	e17ffe17 	ldw	r5,-8(fp)
200978f0:	180d883a 	mov	r6,r3
200978f4:	103ee83a 	callr	r2
200978f8:	e0bffc15 	stw	r2,-16(fp)
200978fc:	e0bffc17 	ldw	r2,-16(fp)
20097900:	1000070e 	bge	r2,zero,20097920 <write+0xb4>
      {
        ALT_ERRNO = -rval;
20097904:	009781c0 	call	2009781c <alt_get_errno>
20097908:	1007883a 	mov	r3,r2
2009790c:	e0bffc17 	ldw	r2,-16(fp)
20097910:	0085c83a 	sub	r2,zero,r2
20097914:	18800015 	stw	r2,0(r3)
        return -1;
20097918:	00bfffc4 	movi	r2,-1
2009791c:	00000c06 	br	20097950 <write+0xe4>
      }
      return rval;
20097920:	e0bffc17 	ldw	r2,-16(fp)
20097924:	00000a06 	br	20097950 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
20097928:	009781c0 	call	2009781c <alt_get_errno>
2009792c:	1007883a 	mov	r3,r2
20097930:	00800344 	movi	r2,13
20097934:	18800015 	stw	r2,0(r3)
20097938:	00000406 	br	2009794c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
2009793c:	009781c0 	call	2009781c <alt_get_errno>
20097940:	1007883a 	mov	r3,r2
20097944:	00801444 	movi	r2,81
20097948:	18800015 	stw	r2,0(r3)
  }
  return -1;
2009794c:	00bfffc4 	movi	r2,-1
}
20097950:	e037883a 	mov	sp,fp
20097954:	dfc00117 	ldw	ra,4(sp)
20097958:	df000017 	ldw	fp,0(sp)
2009795c:	dec00204 	addi	sp,sp,8
20097960:	f800283a 	ret

20097964 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
20097964:	defffd04 	addi	sp,sp,-12
20097968:	dfc00215 	stw	ra,8(sp)
2009796c:	df000115 	stw	fp,4(sp)
20097970:	df000104 	addi	fp,sp,4
20097974:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
20097978:	e13fff17 	ldw	r4,-4(fp)
2009797c:	01400034 	movhi	r5,0
20097980:	2948e504 	addi	r5,r5,9108
20097984:	009a6740 	call	2009a674 <alt_dev_llist_insert>
}
20097988:	e037883a 	mov	sp,fp
2009798c:	dfc00117 	ldw	ra,4(sp)
20097990:	df000017 	ldw	fp,0(sp)
20097994:	dec00204 	addi	sp,sp,8
20097998:	f800283a 	ret

2009799c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
2009799c:	defffd04 	addi	sp,sp,-12
200979a0:	dfc00215 	stw	ra,8(sp)
200979a4:	df000115 	stw	fp,4(sp)
200979a8:	df000104 	addi	fp,sp,4
200979ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
200979b0:	009b1780 	call	2009b178 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
200979b4:	00800044 	movi	r2,1
200979b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
200979bc:	e037883a 	mov	sp,fp
200979c0:	dfc00117 	ldw	ra,4(sp)
200979c4:	df000017 	ldw	fp,0(sp)
200979c8:	dec00204 	addi	sp,sp,8
200979cc:	f800283a 	ret

200979d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
200979d0:	defffe04 	addi	sp,sp,-8
200979d4:	dfc00115 	stw	ra,4(sp)
200979d8:	df000015 	stw	fp,0(sp)
200979dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
200979e0:	00800034 	movhi	r2,0
200979e4:	1088fe04 	addi	r2,r2,9208
200979e8:	00c80434 	movhi	r3,8208
200979ec:	18c52804 	addi	r3,r3,5280
200979f0:	10c00015 	stw	r3,0(r2)
200979f4:	00800034 	movhi	r2,0
200979f8:	1088ff04 	addi	r2,r2,9212
200979fc:	00c1dcf4 	movhi	r3,1907
20097a00:	18d65004 	addi	r3,r3,22848
20097a04:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097a08:	01000034 	movhi	r4,0
20097a0c:	2104b704 	addi	r4,r4,4828
20097a10:	000b883a 	mov	r5,zero
20097a14:	01800044 	movi	r6,1
20097a18:	0097bd00 	call	20097bd0 <altera_avalon_jtag_uart_init>
20097a1c:	01000034 	movhi	r4,0
20097a20:	2104ad04 	addi	r4,r4,4788
20097a24:	00979640 	call	20097964 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
20097a28:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
20097a2c:	00800034 	movhi	r2,0
20097a30:	1088c504 	addi	r2,r2,8980
20097a34:	10c00717 	ldw	r3,28(r2)
20097a38:	00800034 	movhi	r2,0
20097a3c:	1088c504 	addi	r2,r2,8980
20097a40:	10800817 	ldw	r2,32(r2)
20097a44:	01000034 	movhi	r4,0
20097a48:	2108c504 	addi	r4,r4,8980
20097a4c:	180b883a 	mov	r5,r3
20097a50:	100d883a 	mov	r6,r2
20097a54:	009a0980 	call	2009a098 <alt_msgdma_init>
}
20097a58:	e037883a 	mov	sp,fp
20097a5c:	dfc00117 	ldw	ra,4(sp)
20097a60:	df000017 	ldw	fp,0(sp)
20097a64:	dec00204 	addi	sp,sp,8
20097a68:	f800283a 	ret

20097a6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
20097a6c:	defffa04 	addi	sp,sp,-24
20097a70:	dfc00515 	stw	ra,20(sp)
20097a74:	df000415 	stw	fp,16(sp)
20097a78:	df000404 	addi	fp,sp,16
20097a7c:	e13ffd15 	stw	r4,-12(fp)
20097a80:	e17ffe15 	stw	r5,-8(fp)
20097a84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20097a88:	e0bffd17 	ldw	r2,-12(fp)
20097a8c:	10800017 	ldw	r2,0(r2)
20097a90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20097a94:	e0bffc17 	ldw	r2,-16(fp)
20097a98:	10c00a04 	addi	r3,r2,40
20097a9c:	e0bffd17 	ldw	r2,-12(fp)
20097aa0:	10800217 	ldw	r2,8(r2)
20097aa4:	1809883a 	mov	r4,r3
20097aa8:	e17ffe17 	ldw	r5,-8(fp)
20097aac:	e1bfff17 	ldw	r6,-4(fp)
20097ab0:	100f883a 	mov	r7,r2
20097ab4:	00980940 	call	20098094 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
20097ab8:	e037883a 	mov	sp,fp
20097abc:	dfc00117 	ldw	ra,4(sp)
20097ac0:	df000017 	ldw	fp,0(sp)
20097ac4:	dec00204 	addi	sp,sp,8
20097ac8:	f800283a 	ret

20097acc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
20097acc:	defffa04 	addi	sp,sp,-24
20097ad0:	dfc00515 	stw	ra,20(sp)
20097ad4:	df000415 	stw	fp,16(sp)
20097ad8:	df000404 	addi	fp,sp,16
20097adc:	e13ffd15 	stw	r4,-12(fp)
20097ae0:	e17ffe15 	stw	r5,-8(fp)
20097ae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20097ae8:	e0bffd17 	ldw	r2,-12(fp)
20097aec:	10800017 	ldw	r2,0(r2)
20097af0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20097af4:	e0bffc17 	ldw	r2,-16(fp)
20097af8:	10c00a04 	addi	r3,r2,40
20097afc:	e0bffd17 	ldw	r2,-12(fp)
20097b00:	10800217 	ldw	r2,8(r2)
20097b04:	1809883a 	mov	r4,r3
20097b08:	e17ffe17 	ldw	r5,-8(fp)
20097b0c:	e1bfff17 	ldw	r6,-4(fp)
20097b10:	100f883a 	mov	r7,r2
20097b14:	00982a00 	call	200982a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
20097b18:	e037883a 	mov	sp,fp
20097b1c:	dfc00117 	ldw	ra,4(sp)
20097b20:	df000017 	ldw	fp,0(sp)
20097b24:	dec00204 	addi	sp,sp,8
20097b28:	f800283a 	ret

20097b2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
20097b2c:	defffc04 	addi	sp,sp,-16
20097b30:	dfc00315 	stw	ra,12(sp)
20097b34:	df000215 	stw	fp,8(sp)
20097b38:	df000204 	addi	fp,sp,8
20097b3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
20097b40:	e0bfff17 	ldw	r2,-4(fp)
20097b44:	10800017 	ldw	r2,0(r2)
20097b48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20097b4c:	e0bffe17 	ldw	r2,-8(fp)
20097b50:	10c00a04 	addi	r3,r2,40
20097b54:	e0bfff17 	ldw	r2,-4(fp)
20097b58:	10800217 	ldw	r2,8(r2)
20097b5c:	1809883a 	mov	r4,r3
20097b60:	100b883a 	mov	r5,r2
20097b64:	0097f400 	call	20097f40 <altera_avalon_jtag_uart_close>
}
20097b68:	e037883a 	mov	sp,fp
20097b6c:	dfc00117 	ldw	ra,4(sp)
20097b70:	df000017 	ldw	fp,0(sp)
20097b74:	dec00204 	addi	sp,sp,8
20097b78:	f800283a 	ret

20097b7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
20097b7c:	defffa04 	addi	sp,sp,-24
20097b80:	dfc00515 	stw	ra,20(sp)
20097b84:	df000415 	stw	fp,16(sp)
20097b88:	df000404 	addi	fp,sp,16
20097b8c:	e13ffd15 	stw	r4,-12(fp)
20097b90:	e17ffe15 	stw	r5,-8(fp)
20097b94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
20097b98:	e0bffd17 	ldw	r2,-12(fp)
20097b9c:	10800017 	ldw	r2,0(r2)
20097ba0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
20097ba4:	e0bffc17 	ldw	r2,-16(fp)
20097ba8:	10800a04 	addi	r2,r2,40
20097bac:	1009883a 	mov	r4,r2
20097bb0:	e17ffe17 	ldw	r5,-8(fp)
20097bb4:	e1bfff17 	ldw	r6,-4(fp)
20097bb8:	0097fa80 	call	20097fa8 <altera_avalon_jtag_uart_ioctl>
}
20097bbc:	e037883a 	mov	sp,fp
20097bc0:	dfc00117 	ldw	ra,4(sp)
20097bc4:	df000017 	ldw	fp,0(sp)
20097bc8:	dec00204 	addi	sp,sp,8
20097bcc:	f800283a 	ret

20097bd0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20097bd0:	defffa04 	addi	sp,sp,-24
20097bd4:	dfc00515 	stw	ra,20(sp)
20097bd8:	df000415 	stw	fp,16(sp)
20097bdc:	df000404 	addi	fp,sp,16
20097be0:	e13ffd15 	stw	r4,-12(fp)
20097be4:	e17ffe15 	stw	r5,-8(fp)
20097be8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20097bec:	e0bffd17 	ldw	r2,-12(fp)
20097bf0:	00c00044 	movi	r3,1
20097bf4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20097bf8:	e0bffd17 	ldw	r2,-12(fp)
20097bfc:	10800017 	ldw	r2,0(r2)
20097c00:	10800104 	addi	r2,r2,4
20097c04:	1007883a 	mov	r3,r2
20097c08:	e0bffd17 	ldw	r2,-12(fp)
20097c0c:	10800817 	ldw	r2,32(r2)
20097c10:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
20097c14:	e0fffe17 	ldw	r3,-8(fp)
20097c18:	e0bfff17 	ldw	r2,-4(fp)
20097c1c:	d8000015 	stw	zero,0(sp)
20097c20:	1809883a 	mov	r4,r3
20097c24:	100b883a 	mov	r5,r2
20097c28:	01880274 	movhi	r6,8201
20097c2c:	319f2504 	addi	r6,r6,31892
20097c30:	e1fffd17 	ldw	r7,-12(fp)
20097c34:	009a8900 	call	2009a890 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
20097c38:	e0bffd17 	ldw	r2,-12(fp)
20097c3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
20097c40:	e0bffd17 	ldw	r2,-12(fp)
20097c44:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20097c48:	00800034 	movhi	r2,0
20097c4c:	1088fc04 	addi	r2,r2,9200
20097c50:	10800017 	ldw	r2,0(r2)
20097c54:	1809883a 	mov	r4,r3
20097c58:	100b883a 	mov	r5,r2
20097c5c:	01880274 	movhi	r6,8201
20097c60:	319fa604 	addi	r6,r6,32408
20097c64:	e1fffd17 	ldw	r7,-12(fp)
20097c68:	009a3480 	call	2009a348 <alt_alarm_start>
20097c6c:	1000040e 	bge	r2,zero,20097c80 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
20097c70:	e0fffd17 	ldw	r3,-12(fp)
20097c74:	00a00034 	movhi	r2,32768
20097c78:	10bfffc4 	addi	r2,r2,-1
20097c7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
20097c80:	e037883a 	mov	sp,fp
20097c84:	dfc00117 	ldw	ra,4(sp)
20097c88:	df000017 	ldw	fp,0(sp)
20097c8c:	dec00204 	addi	sp,sp,8
20097c90:	f800283a 	ret

20097c94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
20097c94:	defff804 	addi	sp,sp,-32
20097c98:	df000715 	stw	fp,28(sp)
20097c9c:	df000704 	addi	fp,sp,28
20097ca0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
20097ca4:	e0bfff17 	ldw	r2,-4(fp)
20097ca8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
20097cac:	e0bffb17 	ldw	r2,-20(fp)
20097cb0:	10800017 	ldw	r2,0(r2)
20097cb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20097cb8:	e0bffc17 	ldw	r2,-16(fp)
20097cbc:	10800104 	addi	r2,r2,4
20097cc0:	10800037 	ldwio	r2,0(r2)
20097cc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
20097cc8:	e0bffd17 	ldw	r2,-12(fp)
20097ccc:	1080c00c 	andi	r2,r2,768
20097cd0:	1000011e 	bne	r2,zero,20097cd8 <altera_avalon_jtag_uart_irq+0x44>
      break;
20097cd4:	00006c06 	br	20097e88 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20097cd8:	e0bffd17 	ldw	r2,-12(fp)
20097cdc:	1080400c 	andi	r2,r2,256
20097ce0:	10003426 	beq	r2,zero,20097db4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
20097ce4:	00800074 	movhi	r2,1
20097ce8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20097cec:	e0bffb17 	ldw	r2,-20(fp)
20097cf0:	10800a17 	ldw	r2,40(r2)
20097cf4:	10800044 	addi	r2,r2,1
20097cf8:	1081ffcc 	andi	r2,r2,2047
20097cfc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
20097d00:	e0bffb17 	ldw	r2,-20(fp)
20097d04:	10c00b17 	ldw	r3,44(r2)
20097d08:	e0bffe17 	ldw	r2,-8(fp)
20097d0c:	1880011e 	bne	r3,r2,20097d14 <altera_avalon_jtag_uart_irq+0x80>
          break;
20097d10:	00001606 	br	20097d6c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20097d14:	e0bffc17 	ldw	r2,-16(fp)
20097d18:	10800037 	ldwio	r2,0(r2)
20097d1c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20097d20:	e0bff917 	ldw	r2,-28(fp)
20097d24:	10a0000c 	andi	r2,r2,32768
20097d28:	1000011e 	bne	r2,zero,20097d30 <altera_avalon_jtag_uart_irq+0x9c>
          break;
20097d2c:	00000f06 	br	20097d6c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20097d30:	e0bffb17 	ldw	r2,-20(fp)
20097d34:	10800a17 	ldw	r2,40(r2)
20097d38:	e0fff917 	ldw	r3,-28(fp)
20097d3c:	1809883a 	mov	r4,r3
20097d40:	e0fffb17 	ldw	r3,-20(fp)
20097d44:	1885883a 	add	r2,r3,r2
20097d48:	10800e04 	addi	r2,r2,56
20097d4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20097d50:	e0bffb17 	ldw	r2,-20(fp)
20097d54:	10800a17 	ldw	r2,40(r2)
20097d58:	10800044 	addi	r2,r2,1
20097d5c:	10c1ffcc 	andi	r3,r2,2047
20097d60:	e0bffb17 	ldw	r2,-20(fp)
20097d64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
20097d68:	003fe006 	br	20097cec <__flash_rwdata_start+0xffffbb68>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
20097d6c:	e0bff917 	ldw	r2,-28(fp)
20097d70:	10bfffec 	andhi	r2,r2,65535
20097d74:	10000f26 	beq	r2,zero,20097db4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20097d78:	e0bffb17 	ldw	r2,-20(fp)
20097d7c:	10c00817 	ldw	r3,32(r2)
20097d80:	00bfff84 	movi	r2,-2
20097d84:	1886703a 	and	r3,r3,r2
20097d88:	e0bffb17 	ldw	r2,-20(fp)
20097d8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20097d90:	e0bffc17 	ldw	r2,-16(fp)
20097d94:	10800104 	addi	r2,r2,4
20097d98:	1007883a 	mov	r3,r2
20097d9c:	e0bffb17 	ldw	r2,-20(fp)
20097da0:	10800817 	ldw	r2,32(r2)
20097da4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20097da8:	e0bffc17 	ldw	r2,-16(fp)
20097dac:	10800104 	addi	r2,r2,4
20097db0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20097db4:	e0bffd17 	ldw	r2,-12(fp)
20097db8:	1080800c 	andi	r2,r2,512
20097dbc:	10003126 	beq	r2,zero,20097e84 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
20097dc0:	e0bffd17 	ldw	r2,-12(fp)
20097dc4:	1004d43a 	srli	r2,r2,16
20097dc8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
20097dcc:	00001406 	br	20097e20 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
20097dd0:	e0bffc17 	ldw	r2,-16(fp)
20097dd4:	e0fffb17 	ldw	r3,-20(fp)
20097dd8:	18c00d17 	ldw	r3,52(r3)
20097ddc:	e13ffb17 	ldw	r4,-20(fp)
20097de0:	20c7883a 	add	r3,r4,r3
20097de4:	18c20e04 	addi	r3,r3,2104
20097de8:	18c00003 	ldbu	r3,0(r3)
20097dec:	18c03fcc 	andi	r3,r3,255
20097df0:	18c0201c 	xori	r3,r3,128
20097df4:	18ffe004 	addi	r3,r3,-128
20097df8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20097dfc:	e0bffb17 	ldw	r2,-20(fp)
20097e00:	10800d17 	ldw	r2,52(r2)
20097e04:	10800044 	addi	r2,r2,1
20097e08:	10c1ffcc 	andi	r3,r2,2047
20097e0c:	e0bffb17 	ldw	r2,-20(fp)
20097e10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
20097e14:	e0bffa17 	ldw	r2,-24(fp)
20097e18:	10bfffc4 	addi	r2,r2,-1
20097e1c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
20097e20:	e0bffa17 	ldw	r2,-24(fp)
20097e24:	10000526 	beq	r2,zero,20097e3c <altera_avalon_jtag_uart_irq+0x1a8>
20097e28:	e0bffb17 	ldw	r2,-20(fp)
20097e2c:	10c00d17 	ldw	r3,52(r2)
20097e30:	e0bffb17 	ldw	r2,-20(fp)
20097e34:	10800c17 	ldw	r2,48(r2)
20097e38:	18bfe51e 	bne	r3,r2,20097dd0 <__flash_rwdata_start+0xffffbc4c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
20097e3c:	e0bffa17 	ldw	r2,-24(fp)
20097e40:	10001026 	beq	r2,zero,20097e84 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20097e44:	e0bffb17 	ldw	r2,-20(fp)
20097e48:	10c00817 	ldw	r3,32(r2)
20097e4c:	00bfff44 	movi	r2,-3
20097e50:	1886703a 	and	r3,r3,r2
20097e54:	e0bffb17 	ldw	r2,-20(fp)
20097e58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20097e5c:	e0bffb17 	ldw	r2,-20(fp)
20097e60:	10800017 	ldw	r2,0(r2)
20097e64:	10800104 	addi	r2,r2,4
20097e68:	1007883a 	mov	r3,r2
20097e6c:	e0bffb17 	ldw	r2,-20(fp)
20097e70:	10800817 	ldw	r2,32(r2)
20097e74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20097e78:	e0bffc17 	ldw	r2,-16(fp)
20097e7c:	10800104 	addi	r2,r2,4
20097e80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
20097e84:	003f8c06 	br	20097cb8 <__flash_rwdata_start+0xffffbb34>
}
20097e88:	e037883a 	mov	sp,fp
20097e8c:	df000017 	ldw	fp,0(sp)
20097e90:	dec00104 	addi	sp,sp,4
20097e94:	f800283a 	ret

20097e98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
20097e98:	defff804 	addi	sp,sp,-32
20097e9c:	df000715 	stw	fp,28(sp)
20097ea0:	df000704 	addi	fp,sp,28
20097ea4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
20097ea8:	e0bffb17 	ldw	r2,-20(fp)
20097eac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20097eb0:	e0bff917 	ldw	r2,-28(fp)
20097eb4:	10800017 	ldw	r2,0(r2)
20097eb8:	10800104 	addi	r2,r2,4
20097ebc:	10800037 	ldwio	r2,0(r2)
20097ec0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20097ec4:	e0bffa17 	ldw	r2,-24(fp)
20097ec8:	1081000c 	andi	r2,r2,1024
20097ecc:	10000b26 	beq	r2,zero,20097efc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20097ed0:	e0bff917 	ldw	r2,-28(fp)
20097ed4:	10800017 	ldw	r2,0(r2)
20097ed8:	10800104 	addi	r2,r2,4
20097edc:	1007883a 	mov	r3,r2
20097ee0:	e0bff917 	ldw	r2,-28(fp)
20097ee4:	10800817 	ldw	r2,32(r2)
20097ee8:	10810014 	ori	r2,r2,1024
20097eec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
20097ef0:	e0bff917 	ldw	r2,-28(fp)
20097ef4:	10000915 	stw	zero,36(r2)
20097ef8:	00000a06 	br	20097f24 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20097efc:	e0bff917 	ldw	r2,-28(fp)
20097f00:	10c00917 	ldw	r3,36(r2)
20097f04:	00a00034 	movhi	r2,32768
20097f08:	10bfff04 	addi	r2,r2,-4
20097f0c:	10c00536 	bltu	r2,r3,20097f24 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
20097f10:	e0bff917 	ldw	r2,-28(fp)
20097f14:	10800917 	ldw	r2,36(r2)
20097f18:	10c00044 	addi	r3,r2,1
20097f1c:	e0bff917 	ldw	r2,-28(fp)
20097f20:	10c00915 	stw	r3,36(r2)
20097f24:	00800034 	movhi	r2,0
20097f28:	1088fc04 	addi	r2,r2,9200
20097f2c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20097f30:	e037883a 	mov	sp,fp
20097f34:	df000017 	ldw	fp,0(sp)
20097f38:	dec00104 	addi	sp,sp,4
20097f3c:	f800283a 	ret

20097f40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
20097f40:	defffd04 	addi	sp,sp,-12
20097f44:	df000215 	stw	fp,8(sp)
20097f48:	df000204 	addi	fp,sp,8
20097f4c:	e13ffe15 	stw	r4,-8(fp)
20097f50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20097f54:	00000506 	br	20097f6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
20097f58:	e0bfff17 	ldw	r2,-4(fp)
20097f5c:	1090000c 	andi	r2,r2,16384
20097f60:	10000226 	beq	r2,zero,20097f6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
20097f64:	00bffd44 	movi	r2,-11
20097f68:	00000b06 	br	20097f98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
20097f6c:	e0bffe17 	ldw	r2,-8(fp)
20097f70:	10c00d17 	ldw	r3,52(r2)
20097f74:	e0bffe17 	ldw	r2,-8(fp)
20097f78:	10800c17 	ldw	r2,48(r2)
20097f7c:	18800526 	beq	r3,r2,20097f94 <altera_avalon_jtag_uart_close+0x54>
20097f80:	e0bffe17 	ldw	r2,-8(fp)
20097f84:	10c00917 	ldw	r3,36(r2)
20097f88:	e0bffe17 	ldw	r2,-8(fp)
20097f8c:	10800117 	ldw	r2,4(r2)
20097f90:	18bff136 	bltu	r3,r2,20097f58 <__flash_rwdata_start+0xffffbdd4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
20097f94:	0005883a 	mov	r2,zero
}
20097f98:	e037883a 	mov	sp,fp
20097f9c:	df000017 	ldw	fp,0(sp)
20097fa0:	dec00104 	addi	sp,sp,4
20097fa4:	f800283a 	ret

20097fa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
20097fa8:	defffa04 	addi	sp,sp,-24
20097fac:	df000515 	stw	fp,20(sp)
20097fb0:	df000504 	addi	fp,sp,20
20097fb4:	e13ffd15 	stw	r4,-12(fp)
20097fb8:	e17ffe15 	stw	r5,-8(fp)
20097fbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
20097fc0:	00bff9c4 	movi	r2,-25
20097fc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
20097fc8:	e0bffe17 	ldw	r2,-8(fp)
20097fcc:	10da8060 	cmpeqi	r3,r2,27137
20097fd0:	1800031e 	bne	r3,zero,20097fe0 <altera_avalon_jtag_uart_ioctl+0x38>
20097fd4:	109a80a0 	cmpeqi	r2,r2,27138
20097fd8:	1000191e 	bne	r2,zero,20098040 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
20097fdc:	00002806 	br	20098080 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20097fe0:	e0bffd17 	ldw	r2,-12(fp)
20097fe4:	10c00117 	ldw	r3,4(r2)
20097fe8:	00a00034 	movhi	r2,32768
20097fec:	10bfffc4 	addi	r2,r2,-1
20097ff0:	18801226 	beq	r3,r2,2009803c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
20097ff4:	e0bfff17 	ldw	r2,-4(fp)
20097ff8:	10800017 	ldw	r2,0(r2)
20097ffc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20098000:	e0bffc17 	ldw	r2,-16(fp)
20098004:	10800090 	cmplti	r2,r2,2
20098008:	1000061e 	bne	r2,zero,20098024 <altera_avalon_jtag_uart_ioctl+0x7c>
2009800c:	e0fffc17 	ldw	r3,-16(fp)
20098010:	00a00034 	movhi	r2,32768
20098014:	10bfffc4 	addi	r2,r2,-1
20098018:	18800226 	beq	r3,r2,20098024 <altera_avalon_jtag_uart_ioctl+0x7c>
2009801c:	e0bffc17 	ldw	r2,-16(fp)
20098020:	00000206 	br	2009802c <altera_avalon_jtag_uart_ioctl+0x84>
20098024:	00a00034 	movhi	r2,32768
20098028:	10bfff84 	addi	r2,r2,-2
2009802c:	e0fffd17 	ldw	r3,-12(fp)
20098030:	18800115 	stw	r2,4(r3)
      rc = 0;
20098034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20098038:	00001106 	br	20098080 <altera_avalon_jtag_uart_ioctl+0xd8>
2009803c:	00001006 	br	20098080 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
20098040:	e0bffd17 	ldw	r2,-12(fp)
20098044:	10c00117 	ldw	r3,4(r2)
20098048:	00a00034 	movhi	r2,32768
2009804c:	10bfffc4 	addi	r2,r2,-1
20098050:	18800a26 	beq	r3,r2,2009807c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20098054:	e0bffd17 	ldw	r2,-12(fp)
20098058:	10c00917 	ldw	r3,36(r2)
2009805c:	e0bffd17 	ldw	r2,-12(fp)
20098060:	10800117 	ldw	r2,4(r2)
20098064:	1885803a 	cmpltu	r2,r3,r2
20098068:	10c03fcc 	andi	r3,r2,255
2009806c:	e0bfff17 	ldw	r2,-4(fp)
20098070:	10c00015 	stw	r3,0(r2)
      rc = 0;
20098074:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
20098078:	00000006 	br	2009807c <altera_avalon_jtag_uart_ioctl+0xd4>
2009807c:	0001883a 	nop

  default:
    break;
  }

  return rc;
20098080:	e0bffb17 	ldw	r2,-20(fp)
}
20098084:	e037883a 	mov	sp,fp
20098088:	df000017 	ldw	fp,0(sp)
2009808c:	dec00104 	addi	sp,sp,4
20098090:	f800283a 	ret

20098094 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20098094:	defff304 	addi	sp,sp,-52
20098098:	dfc00c15 	stw	ra,48(sp)
2009809c:	df000b15 	stw	fp,44(sp)
200980a0:	df000b04 	addi	fp,sp,44
200980a4:	e13ffc15 	stw	r4,-16(fp)
200980a8:	e17ffd15 	stw	r5,-12(fp)
200980ac:	e1bffe15 	stw	r6,-8(fp)
200980b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
200980b4:	e0bffd17 	ldw	r2,-12(fp)
200980b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
200980bc:	00004906 	br	200981e4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
200980c0:	e0bffc17 	ldw	r2,-16(fp)
200980c4:	10800a17 	ldw	r2,40(r2)
200980c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
200980cc:	e0bffc17 	ldw	r2,-16(fp)
200980d0:	10800b17 	ldw	r2,44(r2)
200980d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
200980d8:	e0fff717 	ldw	r3,-36(fp)
200980dc:	e0bff817 	ldw	r2,-32(fp)
200980e0:	18800536 	bltu	r3,r2,200980f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
200980e4:	e0fff717 	ldw	r3,-36(fp)
200980e8:	e0bff817 	ldw	r2,-32(fp)
200980ec:	1885c83a 	sub	r2,r3,r2
200980f0:	e0bff615 	stw	r2,-40(fp)
200980f4:	00000406 	br	20098108 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
200980f8:	00c20004 	movi	r3,2048
200980fc:	e0bff817 	ldw	r2,-32(fp)
20098100:	1885c83a 	sub	r2,r3,r2
20098104:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
20098108:	e0bff617 	ldw	r2,-40(fp)
2009810c:	1000011e 	bne	r2,zero,20098114 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
20098110:	00001d06 	br	20098188 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
20098114:	e0fffe17 	ldw	r3,-8(fp)
20098118:	e0bff617 	ldw	r2,-40(fp)
2009811c:	1880022e 	bgeu	r3,r2,20098128 <altera_avalon_jtag_uart_read+0x94>
        n = space;
20098120:	e0bffe17 	ldw	r2,-8(fp)
20098124:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
20098128:	e0bff817 	ldw	r2,-32(fp)
2009812c:	10800e04 	addi	r2,r2,56
20098130:	e0fffc17 	ldw	r3,-16(fp)
20098134:	1885883a 	add	r2,r3,r2
20098138:	e13ff517 	ldw	r4,-44(fp)
2009813c:	100b883a 	mov	r5,r2
20098140:	e1bff617 	ldw	r6,-40(fp)
20098144:	00899600 	call	20089960 <memcpy>
      ptr   += n;
20098148:	e0fff517 	ldw	r3,-44(fp)
2009814c:	e0bff617 	ldw	r2,-40(fp)
20098150:	1885883a 	add	r2,r3,r2
20098154:	e0bff515 	stw	r2,-44(fp)
      space -= n;
20098158:	e0fffe17 	ldw	r3,-8(fp)
2009815c:	e0bff617 	ldw	r2,-40(fp)
20098160:	1885c83a 	sub	r2,r3,r2
20098164:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098168:	e0fff817 	ldw	r3,-32(fp)
2009816c:	e0bff617 	ldw	r2,-40(fp)
20098170:	1885883a 	add	r2,r3,r2
20098174:	10c1ffcc 	andi	r3,r2,2047
20098178:	e0bffc17 	ldw	r2,-16(fp)
2009817c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
20098180:	e0bffe17 	ldw	r2,-8(fp)
20098184:	00bfce16 	blt	zero,r2,200980c0 <__flash_rwdata_start+0xffffbf3c>

    /* If we read any data then return it */
    if (ptr != buffer)
20098188:	e0fff517 	ldw	r3,-44(fp)
2009818c:	e0bffd17 	ldw	r2,-12(fp)
20098190:	18800126 	beq	r3,r2,20098198 <altera_avalon_jtag_uart_read+0x104>
      break;
20098194:	00001506 	br	200981ec <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20098198:	e0bfff17 	ldw	r2,-4(fp)
2009819c:	1090000c 	andi	r2,r2,16384
200981a0:	10000126 	beq	r2,zero,200981a8 <altera_avalon_jtag_uart_read+0x114>
      break;
200981a4:	00001106 	br	200981ec <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
200981a8:	0001883a 	nop
200981ac:	e0bffc17 	ldw	r2,-16(fp)
200981b0:	10c00a17 	ldw	r3,40(r2)
200981b4:	e0bff717 	ldw	r2,-36(fp)
200981b8:	1880051e 	bne	r3,r2,200981d0 <altera_avalon_jtag_uart_read+0x13c>
200981bc:	e0bffc17 	ldw	r2,-16(fp)
200981c0:	10c00917 	ldw	r3,36(r2)
200981c4:	e0bffc17 	ldw	r2,-16(fp)
200981c8:	10800117 	ldw	r2,4(r2)
200981cc:	18bff736 	bltu	r3,r2,200981ac <__flash_rwdata_start+0xffffc028>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
200981d0:	e0bffc17 	ldw	r2,-16(fp)
200981d4:	10c00a17 	ldw	r3,40(r2)
200981d8:	e0bff717 	ldw	r2,-36(fp)
200981dc:	1880011e 	bne	r3,r2,200981e4 <altera_avalon_jtag_uart_read+0x150>
      break;
200981e0:	00000206 	br	200981ec <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
200981e4:	e0bffe17 	ldw	r2,-8(fp)
200981e8:	00bfb516 	blt	zero,r2,200980c0 <__flash_rwdata_start+0xffffbf3c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
200981ec:	e0fff517 	ldw	r3,-44(fp)
200981f0:	e0bffd17 	ldw	r2,-12(fp)
200981f4:	18801826 	beq	r3,r2,20098258 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200981f8:	0005303a 	rdctl	r2,status
200981fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098200:	e0fffa17 	ldw	r3,-24(fp)
20098204:	00bfff84 	movi	r2,-2
20098208:	1884703a 	and	r2,r3,r2
2009820c:	1001703a 	wrctl	status,r2
  
  return context;
20098210:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
20098214:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20098218:	e0bffc17 	ldw	r2,-16(fp)
2009821c:	10800817 	ldw	r2,32(r2)
20098220:	10c00054 	ori	r3,r2,1
20098224:	e0bffc17 	ldw	r2,-16(fp)
20098228:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009822c:	e0bffc17 	ldw	r2,-16(fp)
20098230:	10800017 	ldw	r2,0(r2)
20098234:	10800104 	addi	r2,r2,4
20098238:	1007883a 	mov	r3,r2
2009823c:	e0bffc17 	ldw	r2,-16(fp)
20098240:	10800817 	ldw	r2,32(r2)
20098244:	18800035 	stwio	r2,0(r3)
20098248:	e0bff917 	ldw	r2,-28(fp)
2009824c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098250:	e0bffb17 	ldw	r2,-20(fp)
20098254:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
20098258:	e0fff517 	ldw	r3,-44(fp)
2009825c:	e0bffd17 	ldw	r2,-12(fp)
20098260:	18800426 	beq	r3,r2,20098274 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
20098264:	e0fff517 	ldw	r3,-44(fp)
20098268:	e0bffd17 	ldw	r2,-12(fp)
2009826c:	1885c83a 	sub	r2,r3,r2
20098270:	00000606 	br	2009828c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
20098274:	e0bfff17 	ldw	r2,-4(fp)
20098278:	1090000c 	andi	r2,r2,16384
2009827c:	10000226 	beq	r2,zero,20098288 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
20098280:	00bffd44 	movi	r2,-11
20098284:	00000106 	br	2009828c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
20098288:	00bffec4 	movi	r2,-5
}
2009828c:	e037883a 	mov	sp,fp
20098290:	dfc00117 	ldw	ra,4(sp)
20098294:	df000017 	ldw	fp,0(sp)
20098298:	dec00204 	addi	sp,sp,8
2009829c:	f800283a 	ret

200982a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
200982a0:	defff304 	addi	sp,sp,-52
200982a4:	dfc00c15 	stw	ra,48(sp)
200982a8:	df000b15 	stw	fp,44(sp)
200982ac:	df000b04 	addi	fp,sp,44
200982b0:	e13ffc15 	stw	r4,-16(fp)
200982b4:	e17ffd15 	stw	r5,-12(fp)
200982b8:	e1bffe15 	stw	r6,-8(fp)
200982bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
200982c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
200982c4:	e0bffd17 	ldw	r2,-12(fp)
200982c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
200982cc:	00003806 	br	200983b0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
200982d0:	e0bffc17 	ldw	r2,-16(fp)
200982d4:	10800c17 	ldw	r2,48(r2)
200982d8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
200982dc:	e0bffc17 	ldw	r2,-16(fp)
200982e0:	10800d17 	ldw	r2,52(r2)
200982e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
200982e8:	e0fff817 	ldw	r3,-32(fp)
200982ec:	e0bff517 	ldw	r2,-44(fp)
200982f0:	1880062e 	bgeu	r3,r2,2009830c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
200982f4:	e0fff517 	ldw	r3,-44(fp)
200982f8:	e0bff817 	ldw	r2,-32(fp)
200982fc:	1885c83a 	sub	r2,r3,r2
20098300:	10bfffc4 	addi	r2,r2,-1
20098304:	e0bff615 	stw	r2,-40(fp)
20098308:	00000b06 	br	20098338 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
2009830c:	e0bff517 	ldw	r2,-44(fp)
20098310:	10000526 	beq	r2,zero,20098328 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
20098314:	00c20004 	movi	r3,2048
20098318:	e0bff817 	ldw	r2,-32(fp)
2009831c:	1885c83a 	sub	r2,r3,r2
20098320:	e0bff615 	stw	r2,-40(fp)
20098324:	00000406 	br	20098338 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
20098328:	00c1ffc4 	movi	r3,2047
2009832c:	e0bff817 	ldw	r2,-32(fp)
20098330:	1885c83a 	sub	r2,r3,r2
20098334:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
20098338:	e0bff617 	ldw	r2,-40(fp)
2009833c:	1000011e 	bne	r2,zero,20098344 <altera_avalon_jtag_uart_write+0xa4>
        break;
20098340:	00001d06 	br	200983b8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
20098344:	e0fffe17 	ldw	r3,-8(fp)
20098348:	e0bff617 	ldw	r2,-40(fp)
2009834c:	1880022e 	bgeu	r3,r2,20098358 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
20098350:	e0bffe17 	ldw	r2,-8(fp)
20098354:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
20098358:	e0bff817 	ldw	r2,-32(fp)
2009835c:	10820e04 	addi	r2,r2,2104
20098360:	e0fffc17 	ldw	r3,-16(fp)
20098364:	1885883a 	add	r2,r3,r2
20098368:	1009883a 	mov	r4,r2
2009836c:	e17ffd17 	ldw	r5,-12(fp)
20098370:	e1bff617 	ldw	r6,-40(fp)
20098374:	00899600 	call	20089960 <memcpy>
      ptr   += n;
20098378:	e0fffd17 	ldw	r3,-12(fp)
2009837c:	e0bff617 	ldw	r2,-40(fp)
20098380:	1885883a 	add	r2,r3,r2
20098384:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
20098388:	e0fffe17 	ldw	r3,-8(fp)
2009838c:	e0bff617 	ldw	r2,-40(fp)
20098390:	1885c83a 	sub	r2,r3,r2
20098394:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098398:	e0fff817 	ldw	r3,-32(fp)
2009839c:	e0bff617 	ldw	r2,-40(fp)
200983a0:	1885883a 	add	r2,r3,r2
200983a4:	10c1ffcc 	andi	r3,r2,2047
200983a8:	e0bffc17 	ldw	r2,-16(fp)
200983ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
200983b0:	e0bffe17 	ldw	r2,-8(fp)
200983b4:	00bfc616 	blt	zero,r2,200982d0 <__flash_rwdata_start+0xffffc14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200983b8:	0005303a 	rdctl	r2,status
200983bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200983c0:	e0fffa17 	ldw	r3,-24(fp)
200983c4:	00bfff84 	movi	r2,-2
200983c8:	1884703a 	and	r2,r3,r2
200983cc:	1001703a 	wrctl	status,r2
  
  return context;
200983d0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
200983d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
200983d8:	e0bffc17 	ldw	r2,-16(fp)
200983dc:	10800817 	ldw	r2,32(r2)
200983e0:	10c00094 	ori	r3,r2,2
200983e4:	e0bffc17 	ldw	r2,-16(fp)
200983e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200983ec:	e0bffc17 	ldw	r2,-16(fp)
200983f0:	10800017 	ldw	r2,0(r2)
200983f4:	10800104 	addi	r2,r2,4
200983f8:	1007883a 	mov	r3,r2
200983fc:	e0bffc17 	ldw	r2,-16(fp)
20098400:	10800817 	ldw	r2,32(r2)
20098404:	18800035 	stwio	r2,0(r3)
20098408:	e0bff917 	ldw	r2,-28(fp)
2009840c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098410:	e0bffb17 	ldw	r2,-20(fp)
20098414:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
20098418:	e0bffe17 	ldw	r2,-8(fp)
2009841c:	0080120e 	bge	zero,r2,20098468 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
20098420:	e0bfff17 	ldw	r2,-4(fp)
20098424:	1090000c 	andi	r2,r2,16384
20098428:	10000126 	beq	r2,zero,20098430 <altera_avalon_jtag_uart_write+0x190>
        break;
2009842c:	00001006 	br	20098470 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
20098430:	0001883a 	nop
20098434:	e0bffc17 	ldw	r2,-16(fp)
20098438:	10c00d17 	ldw	r3,52(r2)
2009843c:	e0bff517 	ldw	r2,-44(fp)
20098440:	1880051e 	bne	r3,r2,20098458 <altera_avalon_jtag_uart_write+0x1b8>
20098444:	e0bffc17 	ldw	r2,-16(fp)
20098448:	10c00917 	ldw	r3,36(r2)
2009844c:	e0bffc17 	ldw	r2,-16(fp)
20098450:	10800117 	ldw	r2,4(r2)
20098454:	18bff736 	bltu	r3,r2,20098434 <__flash_rwdata_start+0xffffc2b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
20098458:	e0bffc17 	ldw	r2,-16(fp)
2009845c:	10800917 	ldw	r2,36(r2)
20098460:	10000126 	beq	r2,zero,20098468 <altera_avalon_jtag_uart_write+0x1c8>
         break;
20098464:	00000206 	br	20098470 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
20098468:	e0bffe17 	ldw	r2,-8(fp)
2009846c:	00bf9716 	blt	zero,r2,200982cc <__flash_rwdata_start+0xffffc148>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
20098470:	e0fffd17 	ldw	r3,-12(fp)
20098474:	e0bff717 	ldw	r2,-36(fp)
20098478:	18800426 	beq	r3,r2,2009848c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
2009847c:	e0fffd17 	ldw	r3,-12(fp)
20098480:	e0bff717 	ldw	r2,-36(fp)
20098484:	1885c83a 	sub	r2,r3,r2
20098488:	00000606 	br	200984a4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
2009848c:	e0bfff17 	ldw	r2,-4(fp)
20098490:	1090000c 	andi	r2,r2,16384
20098494:	10000226 	beq	r2,zero,200984a0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
20098498:	00bffd44 	movi	r2,-11
2009849c:	00000106 	br	200984a4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
200984a0:	00bffec4 	movi	r2,-5
}
200984a4:	e037883a 	mov	sp,fp
200984a8:	dfc00117 	ldw	ra,4(sp)
200984ac:	df000017 	ldw	fp,0(sp)
200984b0:	dec00204 	addi	sp,sp,8
200984b4:	f800283a 	ret

200984b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
200984b8:	defffe04 	addi	sp,sp,-8
200984bc:	dfc00115 	stw	ra,4(sp)
200984c0:	df000015 	stw	fp,0(sp)
200984c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
200984c8:	00800034 	movhi	r2,0
200984cc:	1088e804 	addi	r2,r2,9120
200984d0:	10800017 	ldw	r2,0(r2)
200984d4:	10000526 	beq	r2,zero,200984ec <alt_get_errno+0x34>
200984d8:	00800034 	movhi	r2,0
200984dc:	1088e804 	addi	r2,r2,9120
200984e0:	10800017 	ldw	r2,0(r2)
200984e4:	103ee83a 	callr	r2
200984e8:	00000206 	br	200984f4 <alt_get_errno+0x3c>
200984ec:	00800034 	movhi	r2,0
200984f0:	1088f504 	addi	r2,r2,9172
}
200984f4:	e037883a 	mov	sp,fp
200984f8:	dfc00117 	ldw	ra,4(sp)
200984fc:	df000017 	ldw	fp,0(sp)
20098500:	dec00204 	addi	sp,sp,8
20098504:	f800283a 	ret

20098508 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
20098508:	defffc04 	addi	sp,sp,-16
2009850c:	df000315 	stw	fp,12(sp)
20098510:	df000304 	addi	fp,sp,12
20098514:	e13ffd15 	stw	r4,-12(fp)
20098518:	e17ffe15 	stw	r5,-8(fp)
2009851c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
20098520:	e0bffd17 	ldw	r2,-12(fp)
20098524:	10800037 	ldwio	r2,0(r2)
20098528:	1080010c 	andi	r2,r2,4
2009852c:	10000226 	beq	r2,zero,20098538 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
20098530:	00bff904 	movi	r2,-28
20098534:	00001506 	br	2009858c <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
20098538:	e0bfff17 	ldw	r2,-4(fp)
2009853c:	10800017 	ldw	r2,0(r2)
20098540:	1007883a 	mov	r3,r2
20098544:	e0bffe17 	ldw	r2,-8(fp)
20098548:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
2009854c:	e0bffe17 	ldw	r2,-8(fp)
20098550:	10800104 	addi	r2,r2,4
20098554:	e0ffff17 	ldw	r3,-4(fp)
20098558:	18c00117 	ldw	r3,4(r3)
2009855c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
20098560:	e0bffe17 	ldw	r2,-8(fp)
20098564:	10800204 	addi	r2,r2,8
20098568:	e0ffff17 	ldw	r3,-4(fp)
2009856c:	18c00217 	ldw	r3,8(r3)
20098570:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
20098574:	e0bffe17 	ldw	r2,-8(fp)
20098578:	10800304 	addi	r2,r2,12
2009857c:	e0ffff17 	ldw	r3,-4(fp)
20098580:	18c00317 	ldw	r3,12(r3)
20098584:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
20098588:	0005883a 	mov	r2,zero
}
2009858c:	e037883a 	mov	sp,fp
20098590:	df000017 	ldw	fp,0(sp)
20098594:	dec00104 	addi	sp,sp,4
20098598:	f800283a 	ret

2009859c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
2009859c:	defffc04 	addi	sp,sp,-16
200985a0:	df000315 	stw	fp,12(sp)
200985a4:	df000304 	addi	fp,sp,12
200985a8:	e13ffd15 	stw	r4,-12(fp)
200985ac:	e17ffe15 	stw	r5,-8(fp)
200985b0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
200985b4:	e0bffd17 	ldw	r2,-12(fp)
200985b8:	10800037 	ldwio	r2,0(r2)
200985bc:	1080010c 	andi	r2,r2,4
200985c0:	10000226 	beq	r2,zero,200985cc <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
200985c4:	00bff904 	movi	r2,-28
200985c8:	00003b06 	br	200986b8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
200985cc:	e0bfff17 	ldw	r2,-4(fp)
200985d0:	10800017 	ldw	r2,0(r2)
200985d4:	1007883a 	mov	r3,r2
200985d8:	e0bffe17 	ldw	r2,-8(fp)
200985dc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
200985e0:	e0bffe17 	ldw	r2,-8(fp)
200985e4:	10800104 	addi	r2,r2,4
200985e8:	e0ffff17 	ldw	r3,-4(fp)
200985ec:	18c00117 	ldw	r3,4(r3)
200985f0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
200985f4:	e0bffe17 	ldw	r2,-8(fp)
200985f8:	10800204 	addi	r2,r2,8
200985fc:	e0ffff17 	ldw	r3,-4(fp)
20098600:	18c00217 	ldw	r3,8(r3)
20098604:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
20098608:	e0bffe17 	ldw	r2,-8(fp)
2009860c:	10800304 	addi	r2,r2,12
20098610:	e0ffff17 	ldw	r3,-4(fp)
20098614:	18c0030b 	ldhu	r3,12(r3)
20098618:	18ffffcc 	andi	r3,r3,65535
2009861c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
20098620:	e0bffe17 	ldw	r2,-8(fp)
20098624:	10800384 	addi	r2,r2,14
20098628:	e0ffff17 	ldw	r3,-4(fp)
2009862c:	18c00383 	ldbu	r3,14(r3)
20098630:	18c03fcc 	andi	r3,r3,255
20098634:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
20098638:	e0bffe17 	ldw	r2,-8(fp)
2009863c:	108003c4 	addi	r2,r2,15
20098640:	e0ffff17 	ldw	r3,-4(fp)
20098644:	18c003c3 	ldbu	r3,15(r3)
20098648:	18c03fcc 	andi	r3,r3,255
2009864c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
20098650:	e0bffe17 	ldw	r2,-8(fp)
20098654:	10800404 	addi	r2,r2,16
20098658:	e0ffff17 	ldw	r3,-4(fp)
2009865c:	18c0040b 	ldhu	r3,16(r3)
20098660:	18ffffcc 	andi	r3,r3,65535
20098664:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
20098668:	e0bffe17 	ldw	r2,-8(fp)
2009866c:	10800484 	addi	r2,r2,18
20098670:	e0ffff17 	ldw	r3,-4(fp)
20098674:	18c0048b 	ldhu	r3,18(r3)
20098678:	18ffffcc 	andi	r3,r3,65535
2009867c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
20098680:	e0bffe17 	ldw	r2,-8(fp)
20098684:	10800504 	addi	r2,r2,20
20098688:	0007883a 	mov	r3,zero
2009868c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
20098690:	e0bffe17 	ldw	r2,-8(fp)
20098694:	10800604 	addi	r2,r2,24
20098698:	0007883a 	mov	r3,zero
2009869c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
200986a0:	e0bffe17 	ldw	r2,-8(fp)
200986a4:	10800704 	addi	r2,r2,28
200986a8:	e0ffff17 	ldw	r3,-4(fp)
200986ac:	18c00717 	ldw	r3,28(r3)
200986b0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
200986b4:	0005883a 	mov	r2,zero
}
200986b8:	e037883a 	mov	sp,fp
200986bc:	df000017 	ldw	fp,0(sp)
200986c0:	dec00104 	addi	sp,sp,4
200986c4:	f800283a 	ret

200986c8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
200986c8:	defff804 	addi	sp,sp,-32
200986cc:	dfc00715 	stw	ra,28(sp)
200986d0:	df000615 	stw	fp,24(sp)
200986d4:	df000604 	addi	fp,sp,24
200986d8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
200986dc:	e0bfff17 	ldw	r2,-4(fp)
200986e0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
200986e4:	e0bffa17 	ldw	r2,-24(fp)
200986e8:	10801783 	ldbu	r2,94(r2)
200986ec:	10803fcc 	andi	r2,r2,255
200986f0:	10001126 	beq	r2,zero,20098738 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
200986f4:	e0bffa17 	ldw	r2,-24(fp)
200986f8:	10800617 	ldw	r2,24(r2)
200986fc:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
20098700:	1007883a 	mov	r3,r2
20098704:	00bffdc4 	movi	r2,-9
20098708:	1884703a 	and	r2,r3,r2
2009870c:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
20098710:	e0bffa17 	ldw	r2,-24(fp)
20098714:	10800617 	ldw	r2,24(r2)
20098718:	e0fffb17 	ldw	r3,-20(fp)
2009871c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
20098720:	e0bffa17 	ldw	r2,-24(fp)
20098724:	10800617 	ldw	r2,24(r2)
20098728:	10800404 	addi	r2,r2,16
2009872c:	00c00044 	movi	r3,1
20098730:	10c00035 	stwio	r3,0(r2)
20098734:	00001106 	br	2009877c <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
20098738:	e0bffa17 	ldw	r2,-24(fp)
2009873c:	10800317 	ldw	r2,12(r2)
20098740:	10800104 	addi	r2,r2,4
20098744:	10800037 	ldwio	r2,0(r2)
20098748:	1007883a 	mov	r3,r2
2009874c:	00bffbc4 	movi	r2,-17
20098750:	1884703a 	and	r2,r3,r2
20098754:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20098758:	e0bffa17 	ldw	r2,-24(fp)
2009875c:	10800317 	ldw	r2,12(r2)
20098760:	10800104 	addi	r2,r2,4
20098764:	e0fffb17 	ldw	r3,-20(fp)
20098768:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2009876c:	e0bffa17 	ldw	r2,-24(fp)
20098770:	10800317 	ldw	r2,12(r2)
20098774:	00c08004 	movi	r3,512
20098778:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
2009877c:	e0bffa17 	ldw	r2,-24(fp)
20098780:	10800b17 	ldw	r2,44(r2)
20098784:	10001226 	beq	r2,zero,200987d0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098788:	0005303a 	rdctl	r2,status
2009878c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098790:	e0fffd17 	ldw	r3,-12(fp)
20098794:	00bfff84 	movi	r2,-2
20098798:	1884703a 	and	r2,r3,r2
2009879c:	1001703a 	wrctl	status,r2
  
  return context;
200987a0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
200987a4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
200987a8:	e0bffa17 	ldw	r2,-24(fp)
200987ac:	10800b17 	ldw	r2,44(r2)
200987b0:	e0fffa17 	ldw	r3,-24(fp)
200987b4:	18c00c17 	ldw	r3,48(r3)
200987b8:	1809883a 	mov	r4,r3
200987bc:	103ee83a 	callr	r2
200987c0:	e0bffc17 	ldw	r2,-16(fp)
200987c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200987c8:	e0bffe17 	ldw	r2,-8(fp)
200987cc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
200987d0:	e0bffa17 	ldw	r2,-24(fp)
200987d4:	10801783 	ldbu	r2,94(r2)
200987d8:	10803fcc 	andi	r2,r2,255
200987dc:	10000a26 	beq	r2,zero,20098808 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
200987e0:	e0bffa17 	ldw	r2,-24(fp)
200987e4:	10800617 	ldw	r2,24(r2)
200987e8:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
200987ec:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
200987f0:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
200987f4:	e0bffa17 	ldw	r2,-24(fp)
200987f8:	10800617 	ldw	r2,24(r2)
200987fc:	e0fffb17 	ldw	r3,-20(fp)
20098800:	10c00035 	stwio	r3,0(r2)
20098804:	00000b06 	br	20098834 <alt_msgdma_irq+0x16c>
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
20098808:	e0bffa17 	ldw	r2,-24(fp)
2009880c:	10800317 	ldw	r2,12(r2)
20098810:	10800104 	addi	r2,r2,4
20098814:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
20098818:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009881c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20098820:	e0bffa17 	ldw	r2,-24(fp)
20098824:	10800317 	ldw	r2,12(r2)
20098828:	10800104 	addi	r2,r2,4
2009882c:	e0fffb17 	ldw	r3,-20(fp)
20098830:	10c00035 	stwio	r3,0(r2)
    }

    return;
20098834:	0001883a 	nop
}
20098838:	e037883a 	mov	sp,fp
2009883c:	dfc00117 	ldw	ra,4(sp)
20098840:	df000017 	ldw	fp,0(sp)
20098844:	dec00204 	addi	sp,sp,8
20098848:	f800283a 	ret

2009884c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009884c:	defffb04 	addi	sp,sp,-20
20098850:	df000415 	stw	fp,16(sp)
20098854:	df000404 	addi	fp,sp,16
20098858:	e13ffc15 	stw	r4,-16(fp)
2009885c:	e17ffd15 	stw	r5,-12(fp)
20098860:	e1bffe15 	stw	r6,-8(fp)
20098864:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
20098868:	e0bffc17 	ldw	r2,-16(fp)
2009886c:	10c01217 	ldw	r3,72(r2)
20098870:	e0800117 	ldw	r2,4(fp)
20098874:	18800436 	bltu	r3,r2,20098888 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
20098878:	e0bffc17 	ldw	r2,-16(fp)
2009887c:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20098880:	10803fcc 	andi	r2,r2,255
20098884:	10000226 	beq	r2,zero,20098890 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20098888:	00bffa84 	movi	r2,-22
2009888c:	00000e06 	br	200988c8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
20098890:	e0bffd17 	ldw	r2,-12(fp)
20098894:	e0fffe17 	ldw	r3,-8(fp)
20098898:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
2009889c:	e0bffd17 	ldw	r2,-12(fp)
200988a0:	e0ffff17 	ldw	r3,-4(fp)
200988a4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
200988a8:	e0bffd17 	ldw	r2,-12(fp)
200988ac:	e0c00117 	ldw	r3,4(fp)
200988b0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200988b4:	e0800217 	ldw	r2,8(fp)
200988b8:	10e00034 	orhi	r3,r2,32768
200988bc:	e0bffd17 	ldw	r2,-12(fp)
200988c0:	10c00315 	stw	r3,12(r2)
    
    return 0;
200988c4:	0005883a 	mov	r2,zero
}
200988c8:	e037883a 	mov	sp,fp
200988cc:	df000017 	ldw	fp,0(sp)
200988d0:	dec00104 	addi	sp,sp,4
200988d4:	f800283a 	ret

200988d8 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
200988d8:	defff604 	addi	sp,sp,-40
200988dc:	df000915 	stw	fp,36(sp)
200988e0:	df000904 	addi	fp,sp,36
200988e4:	e13ff715 	stw	r4,-36(fp)
200988e8:	e17ff815 	stw	r5,-32(fp)
200988ec:	e1bff915 	stw	r6,-28(fp)
200988f0:	e1fffa15 	stw	r7,-24(fp)
200988f4:	e1800317 	ldw	r6,12(fp)
200988f8:	e1400417 	ldw	r5,16(fp)
200988fc:	e1000517 	ldw	r4,20(fp)
20098900:	e0c00617 	ldw	r3,24(fp)
20098904:	e0800717 	ldw	r2,28(fp)
20098908:	e1bffb0d 	sth	r6,-20(fp)
2009890c:	e17ffc05 	stb	r5,-16(fp)
20098910:	e13ffd05 	stb	r4,-12(fp)
20098914:	e0fffe0d 	sth	r3,-8(fp)
20098918:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
2009891c:	e0bff717 	ldw	r2,-36(fp)
20098920:	10c01217 	ldw	r3,72(r2)
20098924:	e0800117 	ldw	r2,4(fp)
20098928:	18801936 	bltu	r3,r2,20098990 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009892c:	e13ff717 	ldw	r4,-36(fp)
20098930:	20801317 	ldw	r2,76(r4)
20098934:	20c01417 	ldw	r3,80(r4)
20098938:	e13ffe0b 	ldhu	r4,-8(fp)
2009893c:	213fffcc 	andi	r4,r4,65535
20098940:	2015883a 	mov	r10,r4
20098944:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20098948:	1ac01136 	bltu	r3,r11,20098990 <alt_msgdma_construct_extended_descriptor+0xb8>
2009894c:	58c0011e 	bne	r11,r3,20098954 <alt_msgdma_construct_extended_descriptor+0x7c>
20098950:	12800f36 	bltu	r2,r10,20098990 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098954:	e13ff717 	ldw	r4,-36(fp)
20098958:	20801317 	ldw	r2,76(r4)
2009895c:	20c01417 	ldw	r3,80(r4)
20098960:	e13fff0b 	ldhu	r4,-4(fp)
20098964:	213fffcc 	andi	r4,r4,65535
20098968:	2011883a 	mov	r8,r4
2009896c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098970:	1a400736 	bltu	r3,r9,20098990 <alt_msgdma_construct_extended_descriptor+0xb8>
20098974:	48c0011e 	bne	r9,r3,2009897c <alt_msgdma_construct_extended_descriptor+0xa4>
20098978:	12000536 	bltu	r2,r8,20098990 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009897c:	e0bff717 	ldw	r2,-36(fp)
20098980:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098984:	10803fcc 	andi	r2,r2,255
20098988:	10800060 	cmpeqi	r2,r2,1
2009898c:	1000021e 	bne	r2,zero,20098998 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098990:	00bffa84 	movi	r2,-22
20098994:	00002106 	br	20098a1c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
20098998:	e0bff817 	ldw	r2,-32(fp)
2009899c:	e0fff917 	ldw	r3,-28(fp)
200989a0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
200989a4:	e0bff817 	ldw	r2,-32(fp)
200989a8:	e0fffa17 	ldw	r3,-24(fp)
200989ac:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
200989b0:	e0bff817 	ldw	r2,-32(fp)
200989b4:	e0c00117 	ldw	r3,4(fp)
200989b8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
200989bc:	e0bff817 	ldw	r2,-32(fp)
200989c0:	e0fffb0b 	ldhu	r3,-20(fp)
200989c4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
200989c8:	e0bff817 	ldw	r2,-32(fp)
200989cc:	e0fffc03 	ldbu	r3,-16(fp)
200989d0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
200989d4:	e0bff817 	ldw	r2,-32(fp)
200989d8:	e0fffd03 	ldbu	r3,-12(fp)
200989dc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
200989e0:	e0bff817 	ldw	r2,-32(fp)
200989e4:	e0fffe0b 	ldhu	r3,-8(fp)
200989e8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
200989ec:	e0bff817 	ldw	r2,-32(fp)
200989f0:	e0ffff0b 	ldhu	r3,-4(fp)
200989f4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
200989f8:	e0bff817 	ldw	r2,-32(fp)
200989fc:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
20098a00:	e0bff817 	ldw	r2,-32(fp)
20098a04:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098a08:	e0800217 	ldw	r2,8(fp)
20098a0c:	10e00034 	orhi	r3,r2,32768
20098a10:	e0bff817 	ldw	r2,-32(fp)
20098a14:	10c00715 	stw	r3,28(r2)

  return 0 ;
20098a18:	0005883a 	mov	r2,zero

}
20098a1c:	e037883a 	mov	sp,fp
20098a20:	df000017 	ldw	fp,0(sp)
20098a24:	dec00104 	addi	sp,sp,4
20098a28:	f800283a 	ret

20098a2c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
20098a2c:	defff004 	addi	sp,sp,-64
20098a30:	dfc00f15 	stw	ra,60(sp)
20098a34:	df000e15 	stw	fp,56(sp)
20098a38:	df000e04 	addi	fp,sp,56
20098a3c:	e13ffd15 	stw	r4,-12(fp)
20098a40:	e17ffe15 	stw	r5,-8(fp)
20098a44:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
20098a48:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
20098a4c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
20098a50:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098a54:	e0bffd17 	ldw	r2,-12(fp)
20098a58:	10800317 	ldw	r2,12(r2)
20098a5c:	10800204 	addi	r2,r2,8
20098a60:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20098a64:	10bfffcc 	andi	r2,r2,65535
20098a68:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098a6c:	e0bffd17 	ldw	r2,-12(fp)
20098a70:	10800317 	ldw	r2,12(r2)
20098a74:	10800204 	addi	r2,r2,8
20098a78:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20098a7c:	1004d43a 	srli	r2,r2,16
20098a80:	e0bff615 	stw	r2,-40(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20098a84:	e0bffd17 	ldw	r2,-12(fp)
20098a88:	10800917 	ldw	r2,36(r2)
20098a8c:	e0fff617 	ldw	r3,-40(fp)
20098a90:	1880042e 	bgeu	r3,r2,20098aa4 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
20098a94:	e0bffd17 	ldw	r2,-12(fp)
20098a98:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20098a9c:	e0fff517 	ldw	r3,-44(fp)
20098aa0:	18800236 	bltu	r3,r2,20098aac <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
20098aa4:	00bff904 	movi	r2,-28
20098aa8:	00008f06 	br	20098ce8 <alt_msgdma_descriptor_async_transfer+0x2bc>
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
20098aac:	00800804 	movi	r2,32
20098ab0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098ab4:	0005303a 	rdctl	r2,status
20098ab8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098abc:	e0fff717 	ldw	r3,-36(fp)
20098ac0:	00bfff84 	movi	r2,-2
20098ac4:	1884703a 	and	r2,r3,r2
20098ac8:	1001703a 	wrctl	status,r2
  
  return context;
20098acc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
20098ad0:	e0bff415 	stw	r2,-48(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20098ad4:	e0bffd17 	ldw	r2,-12(fp)
20098ad8:	10800317 	ldw	r2,12(r2)
20098adc:	10800104 	addi	r2,r2,4
20098ae0:	e0fff317 	ldw	r3,-52(fp)
20098ae4:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
20098ae8:	e0bffd17 	ldw	r2,-12(fp)
20098aec:	10800317 	ldw	r2,12(r2)
20098af0:	e0fffd17 	ldw	r3,-12(fp)
20098af4:	18c00317 	ldw	r3,12(r3)
20098af8:	18c00037 	ldwio	r3,0(r3)
20098afc:	10c00035 	stwio	r3,0(r2)
20098b00:	e0bff417 	ldw	r2,-48(fp)
20098b04:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098b08:	e0bff817 	ldw	r2,-32(fp)
20098b0c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20098b10:	e0bffe17 	ldw	r2,-8(fp)
20098b14:	10001a26 	beq	r2,zero,20098b80 <alt_msgdma_descriptor_async_transfer+0x154>
20098b18:	e0bfff17 	ldw	r2,-4(fp)
20098b1c:	1000181e 	bne	r2,zero,20098b80 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20098b20:	00000d06 	br	20098b58 <alt_msgdma_descriptor_async_transfer+0x12c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20098b24:	01000044 	movi	r4,1
20098b28:	009a4880 	call	2009a488 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098b2c:	e0bff20b 	ldhu	r2,-56(fp)
20098b30:	1084e230 	cmpltui	r2,r2,5000
20098b34:	1000051e 	bne	r2,zero,20098b4c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
20098b38:	01000034 	movhi	r4,0
20098b3c:	21019e04 	addi	r4,r4,1656
20098b40:	009af0c0 	call	2009af0c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20098b44:	00bff084 	movi	r2,-62
20098b48:	00006706 	br	20098ce8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
20098b4c:	e0bff20b 	ldhu	r2,-56(fp)
20098b50:	10800044 	addi	r2,r2,1
20098b54:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20098b58:	e0bffd17 	ldw	r2,-12(fp)
20098b5c:	10c00317 	ldw	r3,12(r2)
20098b60:	e0bffd17 	ldw	r2,-12(fp)
20098b64:	10800417 	ldw	r2,16(r2)
20098b68:	1809883a 	mov	r4,r3
20098b6c:	100b883a 	mov	r5,r2
20098b70:	e1bffe17 	ldw	r6,-8(fp)
20098b74:	00985080 	call	20098508 <alt_msgdma_write_standard_descriptor>
20098b78:	103fea1e 	bne	r2,zero,20098b24 <__flash_rwdata_start+0xffffc9a0>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20098b7c:	00001f06 	br	20098bfc <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20098b80:	e0bffe17 	ldw	r2,-8(fp)
20098b84:	10001b1e 	bne	r2,zero,20098bf4 <alt_msgdma_descriptor_async_transfer+0x1c8>
20098b88:	e0bfff17 	ldw	r2,-4(fp)
20098b8c:	10001926 	beq	r2,zero,20098bf4 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
20098b90:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20098b94:	00000d06 	br	20098bcc <alt_msgdma_descriptor_async_transfer+0x1a0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20098b98:	01000044 	movi	r4,1
20098b9c:	009a4880 	call	2009a488 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098ba0:	e0bff20b 	ldhu	r2,-56(fp)
20098ba4:	1084e230 	cmpltui	r2,r2,5000
20098ba8:	1000051e 	bne	r2,zero,20098bc0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
20098bac:	01000034 	movhi	r4,0
20098bb0:	2101b404 	addi	r4,r4,1744
20098bb4:	009af0c0 	call	2009af0c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20098bb8:	00bff084 	movi	r2,-62
20098bbc:	00004a06 	br	20098ce8 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
20098bc0:	e0bff20b 	ldhu	r2,-56(fp)
20098bc4:	10800044 	addi	r2,r2,1
20098bc8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20098bcc:	e0bffd17 	ldw	r2,-12(fp)
20098bd0:	10c00317 	ldw	r3,12(r2)
20098bd4:	e0bffd17 	ldw	r2,-12(fp)
20098bd8:	10800417 	ldw	r2,16(r2)
20098bdc:	1809883a 	mov	r4,r3
20098be0:	100b883a 	mov	r5,r2
20098be4:	e1bfff17 	ldw	r6,-4(fp)
20098be8:	009859c0 	call	2009859c <alt_msgdma_write_extended_descriptor>
20098bec:	103fea1e 	bne	r2,zero,20098b98 <__flash_rwdata_start+0xffffca14>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20098bf0:	00000206 	br	20098bfc <alt_msgdma_descriptor_async_transfer+0x1d0>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20098bf4:	00bfffc4 	movi	r2,-1
20098bf8:	00003b06 	br	20098ce8 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
20098bfc:	e0bffd17 	ldw	r2,-12(fp)
20098c00:	10800b17 	ldw	r2,44(r2)
20098c04:	10001c26 	beq	r2,zero,20098c78 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
20098c08:	e0bffd17 	ldw	r2,-12(fp)
20098c0c:	10c00d17 	ldw	r3,52(r2)
20098c10:	e0bff317 	ldw	r2,-52(fp)
20098c14:	1884b03a 	or	r2,r3,r2
20098c18:	10800514 	ori	r2,r2,20
20098c1c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098c20:	e0fff317 	ldw	r3,-52(fp)
20098c24:	00bff7c4 	movi	r2,-33
20098c28:	1884703a 	and	r2,r3,r2
20098c2c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098c30:	0005303a 	rdctl	r2,status
20098c34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098c38:	e0fff917 	ldw	r3,-28(fp)
20098c3c:	00bfff84 	movi	r2,-2
20098c40:	1884703a 	and	r2,r3,r2
20098c44:	1001703a 	wrctl	status,r2
  
  return context;
20098c48:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
20098c4c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20098c50:	e0bffd17 	ldw	r2,-12(fp)
20098c54:	10800317 	ldw	r2,12(r2)
20098c58:	10800104 	addi	r2,r2,4
20098c5c:	e0fff317 	ldw	r3,-52(fp)
20098c60:	10c00035 	stwio	r3,0(r2)
20098c64:	e0bff417 	ldw	r2,-48(fp)
20098c68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098c6c:	e0bffa17 	ldw	r2,-24(fp)
20098c70:	1001703a 	wrctl	status,r2
20098c74:	00001b06 	br	20098ce4 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
20098c78:	e0bffd17 	ldw	r2,-12(fp)
20098c7c:	10c00d17 	ldw	r3,52(r2)
20098c80:	e0bff317 	ldw	r2,-52(fp)
20098c84:	1884b03a 	or	r2,r3,r2
20098c88:	10800114 	ori	r2,r2,4
20098c8c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
20098c90:	e0fff317 	ldw	r3,-52(fp)
20098c94:	00bff3c4 	movi	r2,-49
20098c98:	1884703a 	and	r2,r3,r2
20098c9c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098ca0:	0005303a 	rdctl	r2,status
20098ca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098ca8:	e0fffb17 	ldw	r3,-20(fp)
20098cac:	00bfff84 	movi	r2,-2
20098cb0:	1884703a 	and	r2,r3,r2
20098cb4:	1001703a 	wrctl	status,r2
  
  return context;
20098cb8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
20098cbc:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20098cc0:	e0bffd17 	ldw	r2,-12(fp)
20098cc4:	10800317 	ldw	r2,12(r2)
20098cc8:	10800104 	addi	r2,r2,4
20098ccc:	e0fff317 	ldw	r3,-52(fp)
20098cd0:	10c00035 	stwio	r3,0(r2)
20098cd4:	e0bff417 	ldw	r2,-48(fp)
20098cd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098cdc:	e0bffc17 	ldw	r2,-16(fp)
20098ce0:	1001703a 	wrctl	status,r2
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
20098ce4:	0005883a 	mov	r2,zero
}
20098ce8:	e037883a 	mov	sp,fp
20098cec:	dfc00117 	ldw	ra,4(sp)
20098cf0:	df000017 	ldw	fp,0(sp)
20098cf4:	dec00204 	addi	sp,sp,8
20098cf8:	f800283a 	ret

20098cfc <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
20098cfc:	defff004 	addi	sp,sp,-64
20098d00:	dfc00f15 	stw	ra,60(sp)
20098d04:	df000e15 	stw	fp,56(sp)
20098d08:	df000e04 	addi	fp,sp,56
20098d0c:	e13ffd15 	stw	r4,-12(fp)
20098d10:	e17ffe15 	stw	r5,-8(fp)
20098d14:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
20098d18:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
20098d1c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
20098d20:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
20098d24:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098d28:	e0bffd17 	ldw	r2,-12(fp)
20098d2c:	10800317 	ldw	r2,12(r2)
20098d30:	10800204 	addi	r2,r2,8
20098d34:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20098d38:	10bfffcc 	andi	r2,r2,65535
20098d3c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098d40:	e0bffd17 	ldw	r2,-12(fp)
20098d44:	10800317 	ldw	r2,12(r2)
20098d48:	10800204 	addi	r2,r2,8
20098d4c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20098d50:	1004d43a 	srli	r2,r2,16
20098d54:	e0bff515 	stw	r2,-44(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
20098d58:	00807804 	movi	r2,480
20098d5c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20098d60:	00001906 	br	20098dc8 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20098d64:	01000044 	movi	r4,1
20098d68:	009a4880 	call	2009a488 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098d6c:	e0bff30b 	ldhu	r2,-52(fp)
20098d70:	1084e230 	cmpltui	r2,r2,5000
20098d74:	1000051e 	bne	r2,zero,20098d8c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
20098d78:	01000034 	movhi	r4,0
20098d7c:	2101ca04 	addi	r4,r4,1832
20098d80:	009af0c0 	call	2009af0c <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
20098d84:	00bff084 	movi	r2,-62
20098d88:	0000b506 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
20098d8c:	e0bff30b 	ldhu	r2,-52(fp)
20098d90:	10800044 	addi	r2,r2,1
20098d94:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098d98:	e0bffd17 	ldw	r2,-12(fp)
20098d9c:	10800317 	ldw	r2,12(r2)
20098da0:	10800204 	addi	r2,r2,8
20098da4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
20098da8:	10bfffcc 	andi	r2,r2,65535
20098dac:	e0bff415 	stw	r2,-48(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20098db0:	e0bffd17 	ldw	r2,-12(fp)
20098db4:	10800317 	ldw	r2,12(r2)
20098db8:	10800204 	addi	r2,r2,8
20098dbc:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
20098dc0:	1004d43a 	srli	r2,r2,16
20098dc4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20098dc8:	e0bffd17 	ldw	r2,-12(fp)
20098dcc:	10800917 	ldw	r2,36(r2)
20098dd0:	e0fff517 	ldw	r3,-44(fp)
20098dd4:	18bfe32e 	bgeu	r3,r2,20098d64 <__flash_rwdata_start+0xffffcbe0>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
20098dd8:	e0bffd17 	ldw	r2,-12(fp)
20098ddc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20098de0:	e0fff417 	ldw	r3,-48(fp)
20098de4:	18bfdf2e 	bgeu	r3,r2,20098d64 <__flash_rwdata_start+0xffffcbe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098de8:	0005303a 	rdctl	r2,status
20098dec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098df0:	e0fff917 	ldw	r3,-28(fp)
20098df4:	00bfff84 	movi	r2,-2
20098df8:	1884703a 	and	r2,r3,r2
20098dfc:	1001703a 	wrctl	status,r2
  
  return context;
20098e00:	e0bff917 	ldw	r2,-28(fp)
	ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
20098e04:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20098e08:	e0bffd17 	ldw	r2,-12(fp)
20098e0c:	10800317 	ldw	r2,12(r2)
20098e10:	10800104 	addi	r2,r2,4
20098e14:	00c00804 	movi	r3,32
20098e18:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
20098e1c:	e0bffd17 	ldw	r2,-12(fp)
20098e20:	10800317 	ldw	r2,12(r2)
20098e24:	e0fffd17 	ldw	r3,-12(fp)
20098e28:	18c00317 	ldw	r3,12(r3)
20098e2c:	18c00037 	ldwio	r3,0(r3)
20098e30:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20098e34:	e0bffe17 	ldw	r2,-8(fp)
20098e38:	10001b26 	beq	r2,zero,20098ea8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
20098e3c:	e0bfff17 	ldw	r2,-4(fp)
20098e40:	1000191e 	bne	r2,zero,20098ea8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
20098e44:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20098e48:	00000d06 	br	20098e80 <alt_msgdma_descriptor_sync_transfer+0x184>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
20098e4c:	01000044 	movi	r4,1
20098e50:	009a4880 	call	2009a488 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098e54:	e0bff30b 	ldhu	r2,-52(fp)
20098e58:	1084e230 	cmpltui	r2,r2,5000
20098e5c:	1000051e 	bne	r2,zero,20098e74 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
20098e60:	01000034 	movhi	r4,0
20098e64:	2101de04 	addi	r4,r4,1912
20098e68:	009af0c0 	call	2009af0c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20098e6c:	00bff084 	movi	r2,-62
20098e70:	00007b06 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
20098e74:	e0bff30b 	ldhu	r2,-52(fp)
20098e78:	10800044 	addi	r2,r2,1
20098e7c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20098e80:	e0bffd17 	ldw	r2,-12(fp)
20098e84:	10c00317 	ldw	r3,12(r2)
20098e88:	e0bffd17 	ldw	r2,-12(fp)
20098e8c:	10800417 	ldw	r2,16(r2)
20098e90:	1809883a 	mov	r4,r3
20098e94:	100b883a 	mov	r5,r2
20098e98:	e1bffe17 	ldw	r6,-8(fp)
20098e9c:	00985080 	call	20098508 <alt_msgdma_write_standard_descriptor>
20098ea0:	103fea1e 	bne	r2,zero,20098e4c <__flash_rwdata_start+0xffffccc8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20098ea4:	00001f06 	br	20098f24 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20098ea8:	e0bffe17 	ldw	r2,-8(fp)
20098eac:	10001b1e 	bne	r2,zero,20098f1c <alt_msgdma_descriptor_sync_transfer+0x220>
20098eb0:	e0bfff17 	ldw	r2,-4(fp)
20098eb4:	10001926 	beq	r2,zero,20098f1c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
20098eb8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20098ebc:	00000d06 	br	20098ef4 <alt_msgdma_descriptor_sync_transfer+0x1f8>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20098ec0:	01000044 	movi	r4,1
20098ec4:	009a4880 	call	2009a488 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098ec8:	e0bff30b 	ldhu	r2,-52(fp)
20098ecc:	1084e230 	cmpltui	r2,r2,5000
20098ed0:	1000051e 	bne	r2,zero,20098ee8 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
20098ed4:	01000034 	movhi	r4,0
20098ed8:	2101ef04 	addi	r4,r4,1980
20098edc:	009af0c0 	call	2009af0c <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
20098ee0:	00bff084 	movi	r2,-62
20098ee4:	00005e06 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
20098ee8:	e0bff30b 	ldhu	r2,-52(fp)
20098eec:	10800044 	addi	r2,r2,1
20098ef0:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20098ef4:	e0bffd17 	ldw	r2,-12(fp)
20098ef8:	10c00317 	ldw	r3,12(r2)
20098efc:	e0bffd17 	ldw	r2,-12(fp)
20098f00:	10800417 	ldw	r2,16(r2)
20098f04:	1809883a 	mov	r4,r3
20098f08:	100b883a 	mov	r5,r2
20098f0c:	e1bfff17 	ldw	r6,-4(fp)
20098f10:	009859c0 	call	2009859c <alt_msgdma_write_extended_descriptor>
20098f14:	103fea1e 	bne	r2,zero,20098ec0 <__flash_rwdata_start+0xffffcd3c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20098f18:	00000206 	br	20098f24 <alt_msgdma_descriptor_sync_transfer+0x228>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20098f1c:	00bfffc4 	movi	r2,-1
20098f20:	00004f06 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20098f24:	e0bffd17 	ldw	r2,-12(fp)
20098f28:	10800317 	ldw	r2,12(r2)
20098f2c:	10800104 	addi	r2,r2,4
20098f30:	e0fffd17 	ldw	r3,-12(fp)
20098f34:	19000d17 	ldw	r4,52(r3)
20098f38:	00fff2c4 	movi	r3,-53
20098f3c:	20c6703a 	and	r3,r4,r3
20098f40:	18c00114 	ori	r3,r3,4
20098f44:	10c00035 	stwio	r3,0(r2)
20098f48:	e0bff717 	ldw	r2,-36(fp)
20098f4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098f50:	e0bffa17 	ldw	r2,-24(fp)
20098f54:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
20098f58:	e03ff30d 	sth	zero,-52(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20098f5c:	e0bffd17 	ldw	r2,-12(fp)
20098f60:	10800317 	ldw	r2,12(r2)
20098f64:	10800037 	ldwio	r2,0(r2)
20098f68:	e0bff215 	stw	r2,-56(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20098f6c:	00001106 	br	20098fb4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
20098f70:	01000044 	movi	r4,1
20098f74:	009a4880 	call	2009a488 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20098f78:	e0bff30b 	ldhu	r2,-52(fp)
20098f7c:	1084e230 	cmpltui	r2,r2,5000
20098f80:	1000051e 	bne	r2,zero,20098f98 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
20098f84:	01000034 	movhi	r4,0
20098f88:	21020004 	addi	r4,r4,2048
20098f8c:	009af0c0 	call	2009af0c <alt_printf>
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
20098f90:	00bff084 	movi	r2,-62
20098f94:	00003206 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
20098f98:	e0bff30b 	ldhu	r2,-52(fp)
20098f9c:	10800044 	addi	r2,r2,1
20098fa0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20098fa4:	e0bffd17 	ldw	r2,-12(fp)
20098fa8:	10800317 	ldw	r2,12(r2)
20098fac:	10800037 	ldwio	r2,0(r2)
20098fb0:	e0bff215 	stw	r2,-56(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20098fb4:	e0fff217 	ldw	r3,-56(fp)
20098fb8:	e0bff817 	ldw	r2,-32(fp)
20098fbc:	1884703a 	and	r2,r3,r2
20098fc0:	1000031e 	bne	r2,zero,20098fd0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
20098fc4:	e0bff217 	ldw	r2,-56(fp)
20098fc8:	1080004c 	andi	r2,r2,1
20098fcc:	103fe81e 	bne	r2,zero,20098f70 <__flash_rwdata_start+0xffffcdec>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
20098fd0:	e0fff217 	ldw	r3,-56(fp)
20098fd4:	e0bff817 	ldw	r2,-32(fp)
20098fd8:	1884703a 	and	r2,r3,r2
20098fdc:	10000226 	beq	r2,zero,20098fe8 <alt_msgdma_descriptor_sync_transfer+0x2ec>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
20098fe0:	e0bff817 	ldw	r2,-32(fp)
20098fe4:	00001e06 	br	20099060 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
20098fe8:	e0bffd17 	ldw	r2,-12(fp)
20098fec:	10800317 	ldw	r2,12(r2)
20098ff0:	10800104 	addi	r2,r2,4
20098ff4:	10800037 	ldwio	r2,0(r2)
20098ff8:	10800814 	ori	r2,r2,32
20098ffc:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099000:	0005303a 	rdctl	r2,status
20099004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099008:	e0fffb17 	ldw	r3,-20(fp)
2009900c:	00bfff84 	movi	r2,-2
20099010:	1884703a 	and	r2,r3,r2
20099014:	1001703a 	wrctl	status,r2
  
  return context;
20099018:	e0bffb17 	ldw	r2,-20(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
2009901c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099020:	e0bffd17 	ldw	r2,-12(fp)
20099024:	10800317 	ldw	r2,12(r2)
20099028:	10800104 	addi	r2,r2,4
2009902c:	e0fff617 	ldw	r3,-40(fp)
20099030:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
20099034:	e0bffd17 	ldw	r2,-12(fp)
20099038:	10800317 	ldw	r2,12(r2)
2009903c:	e0fffd17 	ldw	r3,-12(fp)
20099040:	18c00317 	ldw	r3,12(r3)
20099044:	18c00037 	ldwio	r3,0(r3)
20099048:	10c00035 	stwio	r3,0(r2)
2009904c:	e0bff717 	ldw	r2,-36(fp)
20099050:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099054:	e0bffc17 	ldw	r2,-16(fp)
20099058:	1001703a 	wrctl	status,r2
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
2009905c:	0005883a 	mov	r2,zero

}
20099060:	e037883a 	mov	sp,fp
20099064:	dfc00117 	ldw	ra,4(sp)
20099068:	df000017 	ldw	fp,0(sp)
2009906c:	dec00204 	addi	sp,sp,8
20099070:	f800283a 	ret

20099074 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
20099074:	defff804 	addi	sp,sp,-32
20099078:	dfc00715 	stw	ra,28(sp)
2009907c:	df000615 	stw	fp,24(sp)
20099080:	df000604 	addi	fp,sp,24
20099084:	e13ffc15 	stw	r4,-16(fp)
20099088:	e17ffd15 	stw	r5,-12(fp)
2009908c:	e1bffe15 	stw	r6,-8(fp)
20099090:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
20099094:	e0bfff17 	ldw	r2,-4(fp)
20099098:	d8800015 	stw	r2,0(sp)
2009909c:	e0800217 	ldw	r2,8(fp)
200990a0:	d8800115 	stw	r2,4(sp)
200990a4:	e13ffc17 	ldw	r4,-16(fp)
200990a8:	e17ffd17 	ldw	r5,-12(fp)
200990ac:	000d883a 	mov	r6,zero
200990b0:	e1fffe17 	ldw	r7,-8(fp)
200990b4:	009884c0 	call	2009884c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
200990b8:	e037883a 	mov	sp,fp
200990bc:	dfc00117 	ldw	ra,4(sp)
200990c0:	df000017 	ldw	fp,0(sp)
200990c4:	dec00204 	addi	sp,sp,8
200990c8:	f800283a 	ret

200990cc <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
200990cc:	defff804 	addi	sp,sp,-32
200990d0:	dfc00715 	stw	ra,28(sp)
200990d4:	df000615 	stw	fp,24(sp)
200990d8:	df000604 	addi	fp,sp,24
200990dc:	e13ffc15 	stw	r4,-16(fp)
200990e0:	e17ffd15 	stw	r5,-12(fp)
200990e4:	e1bffe15 	stw	r6,-8(fp)
200990e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
200990ec:	e0bfff17 	ldw	r2,-4(fp)
200990f0:	d8800015 	stw	r2,0(sp)
200990f4:	e0800217 	ldw	r2,8(fp)
200990f8:	d8800115 	stw	r2,4(sp)
200990fc:	e13ffc17 	ldw	r4,-16(fp)
20099100:	e17ffd17 	ldw	r5,-12(fp)
20099104:	e1bffe17 	ldw	r6,-8(fp)
20099108:	000f883a 	mov	r7,zero
2009910c:	009884c0 	call	2009884c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
20099110:	e037883a 	mov	sp,fp
20099114:	dfc00117 	ldw	ra,4(sp)
20099118:	df000017 	ldw	fp,0(sp)
2009911c:	dec00204 	addi	sp,sp,8
20099120:	f800283a 	ret

20099124 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20099124:	defff804 	addi	sp,sp,-32
20099128:	dfc00715 	stw	ra,28(sp)
2009912c:	df000615 	stw	fp,24(sp)
20099130:	df000604 	addi	fp,sp,24
20099134:	e13ffc15 	stw	r4,-16(fp)
20099138:	e17ffd15 	stw	r5,-12(fp)
2009913c:	e1bffe15 	stw	r6,-8(fp)
20099140:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
20099144:	e0800217 	ldw	r2,8(fp)
20099148:	d8800015 	stw	r2,0(sp)
2009914c:	e0800317 	ldw	r2,12(fp)
20099150:	d8800115 	stw	r2,4(sp)
20099154:	e13ffc17 	ldw	r4,-16(fp)
20099158:	e17ffd17 	ldw	r5,-12(fp)
2009915c:	e1bffe17 	ldw	r6,-8(fp)
20099160:	e1ffff17 	ldw	r7,-4(fp)
20099164:	009884c0 	call	2009884c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
20099168:	e037883a 	mov	sp,fp
2009916c:	dfc00117 	ldw	ra,4(sp)
20099170:	df000017 	ldw	fp,0(sp)
20099174:	dec00204 	addi	sp,sp,8
20099178:	f800283a 	ret

2009917c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
2009917c:	defff004 	addi	sp,sp,-64
20099180:	dfc00f15 	stw	ra,60(sp)
20099184:	df000e15 	stw	fp,56(sp)
20099188:	df000e04 	addi	fp,sp,56
2009918c:	e13ff915 	stw	r4,-28(fp)
20099190:	e17ffa15 	stw	r5,-24(fp)
20099194:	e1bffb15 	stw	r6,-20(fp)
20099198:	e1fffc15 	stw	r7,-16(fp)
2009919c:	e1000317 	ldw	r4,12(fp)
200991a0:	e0c00417 	ldw	r3,16(fp)
200991a4:	e0800517 	ldw	r2,20(fp)
200991a8:	e13ffd0d 	sth	r4,-12(fp)
200991ac:	e0fffe05 	stb	r3,-8(fp)
200991b0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
200991b4:	e13ffd0b 	ldhu	r4,-12(fp)
200991b8:	e0fffe03 	ldbu	r3,-8(fp)
200991bc:	e0bfff0b 	ldhu	r2,-4(fp)
200991c0:	e17ffc17 	ldw	r5,-16(fp)
200991c4:	d9400015 	stw	r5,0(sp)
200991c8:	e1400217 	ldw	r5,8(fp)
200991cc:	d9400115 	stw	r5,4(sp)
200991d0:	d9000215 	stw	r4,8(sp)
200991d4:	d8000315 	stw	zero,12(sp)
200991d8:	d8c00415 	stw	r3,16(sp)
200991dc:	d8000515 	stw	zero,20(sp)
200991e0:	d8800615 	stw	r2,24(sp)
200991e4:	e13ff917 	ldw	r4,-28(fp)
200991e8:	e17ffa17 	ldw	r5,-24(fp)
200991ec:	000d883a 	mov	r6,zero
200991f0:	e1fffb17 	ldw	r7,-20(fp)
200991f4:	00988d80 	call	200988d8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
200991f8:	e037883a 	mov	sp,fp
200991fc:	dfc00117 	ldw	ra,4(sp)
20099200:	df000017 	ldw	fp,0(sp)
20099204:	dec00204 	addi	sp,sp,8
20099208:	f800283a 	ret

2009920c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
2009920c:	defff004 	addi	sp,sp,-64
20099210:	dfc00f15 	stw	ra,60(sp)
20099214:	df000e15 	stw	fp,56(sp)
20099218:	df000e04 	addi	fp,sp,56
2009921c:	e13ff915 	stw	r4,-28(fp)
20099220:	e17ffa15 	stw	r5,-24(fp)
20099224:	e1bffb15 	stw	r6,-20(fp)
20099228:	e1fffc15 	stw	r7,-16(fp)
2009922c:	e1000317 	ldw	r4,12(fp)
20099230:	e0c00417 	ldw	r3,16(fp)
20099234:	e0800517 	ldw	r2,20(fp)
20099238:	e13ffd0d 	sth	r4,-12(fp)
2009923c:	e0fffe05 	stb	r3,-8(fp)
20099240:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
20099244:	e13ffd0b 	ldhu	r4,-12(fp)
20099248:	e0fffe03 	ldbu	r3,-8(fp)
2009924c:	e0bfff0b 	ldhu	r2,-4(fp)
20099250:	e17ffc17 	ldw	r5,-16(fp)
20099254:	d9400015 	stw	r5,0(sp)
20099258:	e1400217 	ldw	r5,8(fp)
2009925c:	d9400115 	stw	r5,4(sp)
20099260:	d9000215 	stw	r4,8(sp)
20099264:	d8c00315 	stw	r3,12(sp)
20099268:	d8000415 	stw	zero,16(sp)
2009926c:	d8800515 	stw	r2,20(sp)
20099270:	d8000615 	stw	zero,24(sp)
20099274:	e13ff917 	ldw	r4,-28(fp)
20099278:	e17ffa17 	ldw	r5,-24(fp)
2009927c:	e1bffb17 	ldw	r6,-20(fp)
20099280:	000f883a 	mov	r7,zero
20099284:	00988d80 	call	200988d8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
20099288:	e037883a 	mov	sp,fp
2009928c:	dfc00117 	ldw	ra,4(sp)
20099290:	df000017 	ldw	fp,0(sp)
20099294:	dec00204 	addi	sp,sp,8
20099298:	f800283a 	ret

2009929c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2009929c:	deffee04 	addi	sp,sp,-72
200992a0:	dfc01115 	stw	ra,68(sp)
200992a4:	df001015 	stw	fp,64(sp)
200992a8:	df001004 	addi	fp,sp,64
200992ac:	e13ff715 	stw	r4,-36(fp)
200992b0:	e17ff815 	stw	r5,-32(fp)
200992b4:	e1bff915 	stw	r6,-28(fp)
200992b8:	e1fffa15 	stw	r7,-24(fp)
200992bc:	e1800417 	ldw	r6,16(fp)
200992c0:	e1400517 	ldw	r5,20(fp)
200992c4:	e1000617 	ldw	r4,24(fp)
200992c8:	e0c00717 	ldw	r3,28(fp)
200992cc:	e0800817 	ldw	r2,32(fp)
200992d0:	e1bffb0d 	sth	r6,-20(fp)
200992d4:	e17ffc05 	stb	r5,-16(fp)
200992d8:	e13ffd05 	stb	r4,-12(fp)
200992dc:	e0fffe0d 	sth	r3,-8(fp)
200992e0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
200992e4:	e1bffb0b 	ldhu	r6,-20(fp)
200992e8:	e17ffc03 	ldbu	r5,-16(fp)
200992ec:	e13ffd03 	ldbu	r4,-12(fp)
200992f0:	e0fffe0b 	ldhu	r3,-8(fp)
200992f4:	e0bfff0b 	ldhu	r2,-4(fp)
200992f8:	e1c00217 	ldw	r7,8(fp)
200992fc:	d9c00015 	stw	r7,0(sp)
20099300:	e1c00317 	ldw	r7,12(fp)
20099304:	d9c00115 	stw	r7,4(sp)
20099308:	d9800215 	stw	r6,8(sp)
2009930c:	d9400315 	stw	r5,12(sp)
20099310:	d9000415 	stw	r4,16(sp)
20099314:	d8c00515 	stw	r3,20(sp)
20099318:	d8800615 	stw	r2,24(sp)
2009931c:	e13ff717 	ldw	r4,-36(fp)
20099320:	e17ff817 	ldw	r5,-32(fp)
20099324:	e1bff917 	ldw	r6,-28(fp)
20099328:	e1fffa17 	ldw	r7,-24(fp)
2009932c:	00988d80 	call	200988d8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
20099330:	e037883a 	mov	sp,fp
20099334:	dfc00117 	ldw	ra,4(sp)
20099338:	df000017 	ldw	fp,0(sp)
2009933c:	dec00204 	addi	sp,sp,8
20099340:	f800283a 	ret

20099344 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20099344:	defffb04 	addi	sp,sp,-20
20099348:	df000415 	stw	fp,16(sp)
2009934c:	df000404 	addi	fp,sp,16
20099350:	e13ffc15 	stw	r4,-16(fp)
20099354:	e17ffd15 	stw	r5,-12(fp)
20099358:	e1bffe15 	stw	r6,-8(fp)
2009935c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
20099360:	e0bffc17 	ldw	r2,-16(fp)
20099364:	10c01217 	ldw	r3,72(r2)
20099368:	e0800117 	ldw	r2,4(fp)
2009936c:	18800436 	bltu	r3,r2,20099380 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
20099370:	e0bffc17 	ldw	r2,-16(fp)
20099374:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20099378:	10803fcc 	andi	r2,r2,255
2009937c:	10000226 	beq	r2,zero,20099388 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20099380:	00bffa84 	movi	r2,-22
20099384:	00001406 	br	200993d8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
20099388:	e0bffd17 	ldw	r2,-12(fp)
2009938c:	e0fffe17 	ldw	r3,-8(fp)
20099390:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
20099394:	e0bffd17 	ldw	r2,-12(fp)
20099398:	e0ffff17 	ldw	r3,-4(fp)
2009939c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
200993a0:	e0bffd17 	ldw	r2,-12(fp)
200993a4:	e0c00117 	ldw	r3,4(fp)
200993a8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
200993ac:	e0fffd17 	ldw	r3,-12(fp)
200993b0:	e0bffd17 	ldw	r2,-12(fp)
200993b4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200993b8:	e0c00217 	ldw	r3,8(fp)
200993bc:	00900034 	movhi	r2,16384
200993c0:	10bfffc4 	addi	r2,r2,-1
200993c4:	1884703a 	and	r2,r3,r2
200993c8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
200993cc:	e0bffd17 	ldw	r2,-12(fp)
200993d0:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
200993d4:	0005883a 	mov	r2,zero
}
200993d8:	e037883a 	mov	sp,fp
200993dc:	df000017 	ldw	fp,0(sp)
200993e0:	dec00104 	addi	sp,sp,4
200993e4:	f800283a 	ret

200993e8 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
200993e8:	defff404 	addi	sp,sp,-48
200993ec:	df000b15 	stw	fp,44(sp)
200993f0:	df000b04 	addi	fp,sp,44
200993f4:	e13ff715 	stw	r4,-36(fp)
200993f8:	e17ff815 	stw	r5,-32(fp)
200993fc:	e1bff915 	stw	r6,-28(fp)
20099400:	e1fffa15 	stw	r7,-24(fp)
20099404:	e1800517 	ldw	r6,20(fp)
20099408:	e1400617 	ldw	r5,24(fp)
2009940c:	e1000717 	ldw	r4,28(fp)
20099410:	e0c00817 	ldw	r3,32(fp)
20099414:	e0800917 	ldw	r2,36(fp)
20099418:	e1bffb0d 	sth	r6,-20(fp)
2009941c:	e17ffc05 	stb	r5,-16(fp)
20099420:	e13ffd05 	stb	r4,-12(fp)
20099424:	e0fffe0d 	sth	r3,-8(fp)
20099428:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
2009942c:	e0bff717 	ldw	r2,-36(fp)
20099430:	10c01217 	ldw	r3,72(r2)
20099434:	e0800317 	ldw	r2,12(fp)
20099438:	18801936 	bltu	r3,r2,200994a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
2009943c:	e13ff717 	ldw	r4,-36(fp)
20099440:	20801317 	ldw	r2,76(r4)
20099444:	20c01417 	ldw	r3,80(r4)
20099448:	e13ffe0b 	ldhu	r4,-8(fp)
2009944c:	213fffcc 	andi	r4,r4,65535
20099450:	2015883a 	mov	r10,r4
20099454:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20099458:	1ac01136 	bltu	r3,r11,200994a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
2009945c:	58c0011e 	bne	r11,r3,20099464 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
20099460:	12800f36 	bltu	r2,r10,200994a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20099464:	e13ff717 	ldw	r4,-36(fp)
20099468:	20801317 	ldw	r2,76(r4)
2009946c:	20c01417 	ldw	r3,80(r4)
20099470:	e13fff0b 	ldhu	r4,-4(fp)
20099474:	213fffcc 	andi	r4,r4,65535
20099478:	2011883a 	mov	r8,r4
2009947c:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20099480:	1a400736 	bltu	r3,r9,200994a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
20099484:	48c0011e 	bne	r9,r3,2009948c <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
20099488:	12000536 	bltu	r2,r8,200994a0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
2009948c:	e0bff717 	ldw	r2,-36(fp)
20099490:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20099494:	10803fcc 	andi	r2,r2,255
20099498:	10800060 	cmpeqi	r2,r2,1
2009949c:	1000021e 	bne	r2,zero,200994a8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
200994a0:	00bffa84 	movi	r2,-22
200994a4:	00003106 	br	2009956c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
200994a8:	e0bff817 	ldw	r2,-32(fp)
200994ac:	e0fff917 	ldw	r3,-28(fp)
200994b0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
200994b4:	e0bff817 	ldw	r2,-32(fp)
200994b8:	e0fffa17 	ldw	r3,-24(fp)
200994bc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
200994c0:	e0bff817 	ldw	r2,-32(fp)
200994c4:	e0c00117 	ldw	r3,4(fp)
200994c8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
200994cc:	e0bff817 	ldw	r2,-32(fp)
200994d0:	e0c00217 	ldw	r3,8(fp)
200994d4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
200994d8:	e0bff817 	ldw	r2,-32(fp)
200994dc:	e0c00317 	ldw	r3,12(fp)
200994e0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
200994e4:	e0bff817 	ldw	r2,-32(fp)
200994e8:	e0fffb0b 	ldhu	r3,-20(fp)
200994ec:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
200994f0:	e0bff817 	ldw	r2,-32(fp)
200994f4:	e0fffc03 	ldbu	r3,-16(fp)
200994f8:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
200994fc:	e0bff817 	ldw	r2,-32(fp)
20099500:	e0fffd03 	ldbu	r3,-12(fp)
20099504:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
20099508:	e0bff817 	ldw	r2,-32(fp)
2009950c:	e0fffe0b 	ldhu	r3,-8(fp)
20099510:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
20099514:	e0bff817 	ldw	r2,-32(fp)
20099518:	e0ffff0b 	ldhu	r3,-4(fp)
2009951c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
20099520:	e0bff817 	ldw	r2,-32(fp)
20099524:	1019883a 	mov	r12,r2
20099528:	001b883a 	mov	r13,zero
2009952c:	e33ff515 	stw	r12,-44(fp)
20099530:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
20099534:	e0fff517 	ldw	r3,-44(fp)
20099538:	e0bff817 	ldw	r2,-32(fp)
2009953c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
20099540:	e0fff617 	ldw	r3,-40(fp)
20099544:	e0bff817 	ldw	r2,-32(fp)
20099548:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009954c:	e0c00417 	ldw	r3,16(fp)
20099550:	00900034 	movhi	r2,16384
20099554:	10bfffc4 	addi	r2,r2,-1
20099558:	1884703a 	and	r2,r3,r2
2009955c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
20099560:	e0bff817 	ldw	r2,-32(fp)
20099564:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20099568:	0005883a 	mov	r2,zero
}
2009956c:	e037883a 	mov	sp,fp
20099570:	df000017 	ldw	fp,0(sp)
20099574:	dec00104 	addi	sp,sp,4
20099578:	f800283a 	ret

2009957c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
2009957c:	defff804 	addi	sp,sp,-32
20099580:	dfc00715 	stw	ra,28(sp)
20099584:	df000615 	stw	fp,24(sp)
20099588:	df000604 	addi	fp,sp,24
2009958c:	e13ffc15 	stw	r4,-16(fp)
20099590:	e17ffd15 	stw	r5,-12(fp)
20099594:	e1bffe15 	stw	r6,-8(fp)
20099598:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009959c:	e0800217 	ldw	r2,8(fp)
200995a0:	d8800015 	stw	r2,0(sp)
200995a4:	e0800317 	ldw	r2,12(fp)
200995a8:	d8800115 	stw	r2,4(sp)
200995ac:	e13ffc17 	ldw	r4,-16(fp)
200995b0:	e17ffd17 	ldw	r5,-12(fp)
200995b4:	e1bffe17 	ldw	r6,-8(fp)
200995b8:	e1ffff17 	ldw	r7,-4(fp)
200995bc:	00993440 	call	20099344 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
200995c0:	e037883a 	mov	sp,fp
200995c4:	dfc00117 	ldw	ra,4(sp)
200995c8:	df000017 	ldw	fp,0(sp)
200995cc:	dec00204 	addi	sp,sp,8
200995d0:	f800283a 	ret

200995d4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
200995d4:	defff804 	addi	sp,sp,-32
200995d8:	dfc00715 	stw	ra,28(sp)
200995dc:	df000615 	stw	fp,24(sp)
200995e0:	df000604 	addi	fp,sp,24
200995e4:	e13ffc15 	stw	r4,-16(fp)
200995e8:	e17ffd15 	stw	r5,-12(fp)
200995ec:	e1bffe15 	stw	r6,-8(fp)
200995f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
200995f4:	e0bfff17 	ldw	r2,-4(fp)
200995f8:	d8800015 	stw	r2,0(sp)
200995fc:	e0800217 	ldw	r2,8(fp)
20099600:	d8800115 	stw	r2,4(sp)
20099604:	e13ffc17 	ldw	r4,-16(fp)
20099608:	e17ffd17 	ldw	r5,-12(fp)
2009960c:	000d883a 	mov	r6,zero
20099610:	e1fffe17 	ldw	r7,-8(fp)
20099614:	00993440 	call	20099344 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
20099618:	e037883a 	mov	sp,fp
2009961c:	dfc00117 	ldw	ra,4(sp)
20099620:	df000017 	ldw	fp,0(sp)
20099624:	dec00204 	addi	sp,sp,8
20099628:	f800283a 	ret

2009962c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
2009962c:	defff804 	addi	sp,sp,-32
20099630:	dfc00715 	stw	ra,28(sp)
20099634:	df000615 	stw	fp,24(sp)
20099638:	df000604 	addi	fp,sp,24
2009963c:	e13ffc15 	stw	r4,-16(fp)
20099640:	e17ffd15 	stw	r5,-12(fp)
20099644:	e1bffe15 	stw	r6,-8(fp)
20099648:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
2009964c:	e0bfff17 	ldw	r2,-4(fp)
20099650:	d8800015 	stw	r2,0(sp)
20099654:	e0800217 	ldw	r2,8(fp)
20099658:	d8800115 	stw	r2,4(sp)
2009965c:	e13ffc17 	ldw	r4,-16(fp)
20099660:	e17ffd17 	ldw	r5,-12(fp)
20099664:	e1bffe17 	ldw	r6,-8(fp)
20099668:	000f883a 	mov	r7,zero
2009966c:	00993440 	call	20099344 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
20099670:	e037883a 	mov	sp,fp
20099674:	dfc00117 	ldw	ra,4(sp)
20099678:	df000017 	ldw	fp,0(sp)
2009967c:	dec00204 	addi	sp,sp,8
20099680:	f800283a 	ret

20099684 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
20099684:	deffee04 	addi	sp,sp,-72
20099688:	dfc01115 	stw	ra,68(sp)
2009968c:	df001015 	stw	fp,64(sp)
20099690:	df001004 	addi	fp,sp,64
20099694:	e13ff915 	stw	r4,-28(fp)
20099698:	e17ffa15 	stw	r5,-24(fp)
2009969c:	e1bffb15 	stw	r6,-20(fp)
200996a0:	e1fffc15 	stw	r7,-16(fp)
200996a4:	e1000417 	ldw	r4,16(fp)
200996a8:	e0c00517 	ldw	r3,20(fp)
200996ac:	e0800617 	ldw	r2,24(fp)
200996b0:	e13ffd0d 	sth	r4,-12(fp)
200996b4:	e0fffe05 	stb	r3,-8(fp)
200996b8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
200996bc:	e13ffd0b 	ldhu	r4,-12(fp)
200996c0:	e0fffe03 	ldbu	r3,-8(fp)
200996c4:	e0bfff0b 	ldhu	r2,-4(fp)
200996c8:	e17ffb17 	ldw	r5,-20(fp)
200996cc:	d9400015 	stw	r5,0(sp)
200996d0:	e17ffc17 	ldw	r5,-16(fp)
200996d4:	d9400115 	stw	r5,4(sp)
200996d8:	e1400217 	ldw	r5,8(fp)
200996dc:	d9400215 	stw	r5,8(sp)
200996e0:	e1400317 	ldw	r5,12(fp)
200996e4:	d9400315 	stw	r5,12(sp)
200996e8:	d9000415 	stw	r4,16(sp)
200996ec:	d8000515 	stw	zero,20(sp)
200996f0:	d8c00615 	stw	r3,24(sp)
200996f4:	d8000715 	stw	zero,28(sp)
200996f8:	d8800815 	stw	r2,32(sp)
200996fc:	e13ff917 	ldw	r4,-28(fp)
20099700:	e17ffa17 	ldw	r5,-24(fp)
20099704:	000d883a 	mov	r6,zero
20099708:	000f883a 	mov	r7,zero
2009970c:	00993e80 	call	200993e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
20099710:	e037883a 	mov	sp,fp
20099714:	dfc00117 	ldw	ra,4(sp)
20099718:	df000017 	ldw	fp,0(sp)
2009971c:	dec00204 	addi	sp,sp,8
20099720:	f800283a 	ret

20099724 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
20099724:	deffee04 	addi	sp,sp,-72
20099728:	dfc01115 	stw	ra,68(sp)
2009972c:	df001015 	stw	fp,64(sp)
20099730:	df001004 	addi	fp,sp,64
20099734:	e13ff915 	stw	r4,-28(fp)
20099738:	e17ffa15 	stw	r5,-24(fp)
2009973c:	e1bffb15 	stw	r6,-20(fp)
20099740:	e1fffc15 	stw	r7,-16(fp)
20099744:	e1000417 	ldw	r4,16(fp)
20099748:	e0c00517 	ldw	r3,20(fp)
2009974c:	e0800617 	ldw	r2,24(fp)
20099750:	e13ffd0d 	sth	r4,-12(fp)
20099754:	e0fffe05 	stb	r3,-8(fp)
20099758:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
2009975c:	e13ffd0b 	ldhu	r4,-12(fp)
20099760:	e0fffe03 	ldbu	r3,-8(fp)
20099764:	e0bfff0b 	ldhu	r2,-4(fp)
20099768:	d8000015 	stw	zero,0(sp)
2009976c:	d8000115 	stw	zero,4(sp)
20099770:	e1400217 	ldw	r5,8(fp)
20099774:	d9400215 	stw	r5,8(sp)
20099778:	e1400317 	ldw	r5,12(fp)
2009977c:	d9400315 	stw	r5,12(sp)
20099780:	d9000415 	stw	r4,16(sp)
20099784:	d8c00515 	stw	r3,20(sp)
20099788:	d8000615 	stw	zero,24(sp)
2009978c:	d8800715 	stw	r2,28(sp)
20099790:	d8000815 	stw	zero,32(sp)
20099794:	e13ff917 	ldw	r4,-28(fp)
20099798:	e17ffa17 	ldw	r5,-24(fp)
2009979c:	e1bffb17 	ldw	r6,-20(fp)
200997a0:	e1fffc17 	ldw	r7,-16(fp)
200997a4:	00993e80 	call	200993e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
200997a8:	e037883a 	mov	sp,fp
200997ac:	dfc00117 	ldw	ra,4(sp)
200997b0:	df000017 	ldw	fp,0(sp)
200997b4:	dec00204 	addi	sp,sp,8
200997b8:	f800283a 	ret

200997bc <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
200997bc:	deffec04 	addi	sp,sp,-80
200997c0:	dfc01315 	stw	ra,76(sp)
200997c4:	df001215 	stw	fp,72(sp)
200997c8:	df001204 	addi	fp,sp,72
200997cc:	e13ff715 	stw	r4,-36(fp)
200997d0:	e17ff815 	stw	r5,-32(fp)
200997d4:	e1bff915 	stw	r6,-28(fp)
200997d8:	e1fffa15 	stw	r7,-24(fp)
200997dc:	e1800617 	ldw	r6,24(fp)
200997e0:	e1400717 	ldw	r5,28(fp)
200997e4:	e1000817 	ldw	r4,32(fp)
200997e8:	e0c00917 	ldw	r3,36(fp)
200997ec:	e0800a17 	ldw	r2,40(fp)
200997f0:	e1bffb0d 	sth	r6,-20(fp)
200997f4:	e17ffc05 	stb	r5,-16(fp)
200997f8:	e13ffd05 	stb	r4,-12(fp)
200997fc:	e0fffe0d 	sth	r3,-8(fp)
20099800:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
20099804:	e1bffb0b 	ldhu	r6,-20(fp)
20099808:	e17ffc03 	ldbu	r5,-16(fp)
2009980c:	e13ffd03 	ldbu	r4,-12(fp)
20099810:	e0fffe0b 	ldhu	r3,-8(fp)
20099814:	e0bfff0b 	ldhu	r2,-4(fp)
20099818:	e1c00217 	ldw	r7,8(fp)
2009981c:	d9c00015 	stw	r7,0(sp)
20099820:	e1c00317 	ldw	r7,12(fp)
20099824:	d9c00115 	stw	r7,4(sp)
20099828:	e1c00417 	ldw	r7,16(fp)
2009982c:	d9c00215 	stw	r7,8(sp)
20099830:	e1c00517 	ldw	r7,20(fp)
20099834:	d9c00315 	stw	r7,12(sp)
20099838:	d9800415 	stw	r6,16(sp)
2009983c:	d9400515 	stw	r5,20(sp)
20099840:	d9000615 	stw	r4,24(sp)
20099844:	d8c00715 	stw	r3,28(sp)
20099848:	d8800815 	stw	r2,32(sp)
2009984c:	e13ff717 	ldw	r4,-36(fp)
20099850:	e17ff817 	ldw	r5,-32(fp)
20099854:	e1bff917 	ldw	r6,-28(fp)
20099858:	e1fffa17 	ldw	r7,-24(fp)
2009985c:	00993e80 	call	200993e8 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
20099860:	e037883a 	mov	sp,fp
20099864:	dfc00117 	ldw	ra,4(sp)
20099868:	df000017 	ldw	fp,0(sp)
2009986c:	dec00204 	addi	sp,sp,8
20099870:	f800283a 	ret

20099874 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
20099874:	defffc04 	addi	sp,sp,-16
20099878:	df000315 	stw	fp,12(sp)
2009987c:	df000304 	addi	fp,sp,12
20099880:	e13ffe15 	stw	r4,-8(fp)
20099884:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
20099888:	e0bfff17 	ldw	r2,-4(fp)
2009988c:	1000021e 	bne	r2,zero,20099898 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20099890:	00bffa84 	movi	r2,-22
20099894:	00002f06 	br	20099954 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
20099898:	e0bfff17 	ldw	r2,-4(fp)
2009989c:	10c00317 	ldw	r3,12(r2)
200998a0:	e0bfff17 	ldw	r2,-4(fp)
200998a4:	18800226 	beq	r3,r2,200998b0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
200998a8:	00bffa84 	movi	r2,-22
200998ac:	00002906 	br	20099954 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
200998b0:	e0bffe17 	ldw	r2,-8(fp)
200998b4:	10800017 	ldw	r2,0(r2)
200998b8:	1000051e 	bne	r2,zero,200998d0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
200998bc:	e0bffe17 	ldw	r2,-8(fp)
200998c0:	e0ffff17 	ldw	r3,-4(fp)
200998c4:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
200998c8:	0005883a 	mov	r2,zero
200998cc:	00002106 	br	20099954 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
200998d0:	e0bffe17 	ldw	r2,-8(fp)
200998d4:	10c00017 	ldw	r3,0(r2)
200998d8:	e0bfff17 	ldw	r2,-4(fp)
200998dc:	1880021e 	bne	r3,r2,200998e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
200998e0:	00bffa84 	movi	r2,-22
200998e4:	00001b06 	br	20099954 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
200998e8:	e0bffe17 	ldw	r2,-8(fp)
200998ec:	10800017 	ldw	r2,0(r2)
200998f0:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
200998f4:	00000906 	br	2009991c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
200998f8:	e0bffd17 	ldw	r2,-12(fp)
200998fc:	10c00317 	ldw	r3,12(r2)
20099900:	e0bfff17 	ldw	r2,-4(fp)
20099904:	1880021e 	bne	r3,r2,20099910 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
20099908:	00bffa84 	movi	r2,-22
2009990c:	00001106 	br	20099954 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
20099910:	e0bffd17 	ldw	r2,-12(fp)
20099914:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
20099918:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
2009991c:	e0bffd17 	ldw	r2,-12(fp)
20099920:	10800317 	ldw	r2,12(r2)
20099924:	e0fffe17 	ldw	r3,-8(fp)
20099928:	18c00017 	ldw	r3,0(r3)
2009992c:	10fff21e 	bne	r2,r3,200998f8 <__flash_rwdata_start+0xffffd774>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
20099930:	e0ffff17 	ldw	r3,-4(fp)
20099934:	e0bffd17 	ldw	r2,-12(fp)
20099938:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
2009993c:	e0bffe17 	ldw	r2,-8(fp)
20099940:	10800017 	ldw	r2,0(r2)
20099944:	1007883a 	mov	r3,r2
20099948:	e0bfff17 	ldw	r2,-4(fp)
2009994c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
20099950:	0005883a 	mov	r2,zero
}
20099954:	e037883a 	mov	sp,fp
20099958:	df000017 	ldw	fp,0(sp)
2009995c:	dec00104 	addi	sp,sp,4
20099960:	f800283a 	ret

20099964 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
20099964:	defff804 	addi	sp,sp,-32
20099968:	df000715 	stw	fp,28(sp)
2009996c:	df000704 	addi	fp,sp,28
20099970:	e13ffe15 	stw	r4,-8(fp)
20099974:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
20099978:	e13fff17 	ldw	r4,-4(fp)
2009997c:	2000021e 	bne	r4,zero,20099988 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20099980:	00bffa84 	movi	r2,-22
20099984:	00005906 	br	20099aec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
20099988:	e13fff17 	ldw	r4,-4(fp)
2009998c:	2015883a 	mov	r10,r4
20099990:	0017883a 	mov	r11,zero
20099994:	e2bffc15 	stw	r10,-16(fp)
20099998:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
2009999c:	e13fff17 	ldw	r4,-4(fp)
200999a0:	21400317 	ldw	r5,12(r4)
200999a4:	e13ffc17 	ldw	r4,-16(fp)
200999a8:	29000626 	beq	r5,r4,200999c4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
200999ac:	e13fff17 	ldw	r4,-4(fp)
200999b0:	21400b17 	ldw	r5,44(r4)
200999b4:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
200999b8:	29000226 	beq	r5,r4,200999c4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
200999bc:	00bffa84 	movi	r2,-22
200999c0:	00004a06 	br	20099aec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
200999c4:	e13ffe17 	ldw	r4,-8(fp)
200999c8:	21000017 	ldw	r4,0(r4)
200999cc:	2000051e 	bne	r4,zero,200999e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
200999d0:	e0bffe17 	ldw	r2,-8(fp)
200999d4:	e0ffff17 	ldw	r3,-4(fp)
200999d8:	10c00015 	stw	r3,0(r2)
		return 0;
200999dc:	0005883a 	mov	r2,zero
200999e0:	00004206 	br	20099aec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
200999e4:	e13ffe17 	ldw	r4,-8(fp)
200999e8:	21400017 	ldw	r5,0(r4)
200999ec:	e13fff17 	ldw	r4,-4(fp)
200999f0:	2900021e 	bne	r5,r4,200999fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
200999f4:	00bffa84 	movi	r2,-22
200999f8:	00003c06 	br	20099aec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
200999fc:	e13ffe17 	ldw	r4,-8(fp)
20099a00:	21000017 	ldw	r4,0(r4)
20099a04:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
20099a08:	e13ffe17 	ldw	r4,-8(fp)
20099a0c:	21000017 	ldw	r4,0(r4)
20099a10:	2011883a 	mov	r8,r4
20099a14:	0013883a 	mov	r9,zero
20099a18:	e23ffa15 	stw	r8,-24(fp)
20099a1c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20099a20:	00001806 	br	20099a84 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
20099a24:	e13fff17 	ldw	r4,-4(fp)
20099a28:	200d883a 	mov	r6,r4
20099a2c:	000f883a 	mov	r7,zero
20099a30:	e1bffc15 	stw	r6,-16(fp)
20099a34:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
20099a38:	e13ff917 	ldw	r4,-28(fp)
20099a3c:	21400317 	ldw	r5,12(r4)
20099a40:	e13ffc17 	ldw	r4,-16(fp)
20099a44:	2900061e 	bne	r5,r4,20099a60 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
20099a48:	e13ff917 	ldw	r4,-28(fp)
20099a4c:	21400b17 	ldw	r5,44(r4)
20099a50:	e13ffd17 	ldw	r4,-12(fp)
20099a54:	2900021e 	bne	r5,r4,20099a60 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
20099a58:	00bffa84 	movi	r2,-22
20099a5c:	00002306 	br	20099aec <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20099a60:	e13ff917 	ldw	r4,-28(fp)
20099a64:	21000317 	ldw	r4,12(r4)
20099a68:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
20099a6c:	e13ff917 	ldw	r4,-28(fp)
20099a70:	21000b17 	ldw	r4,44(r4)
20099a74:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20099a78:	e13ffc17 	ldw	r4,-16(fp)
20099a7c:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
20099a80:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20099a84:	e13ff917 	ldw	r4,-28(fp)
20099a88:	21400317 	ldw	r5,12(r4)
20099a8c:	e13ffa17 	ldw	r4,-24(fp)
20099a90:	29000426 	beq	r5,r4,20099aa4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20099a94:	e13ff917 	ldw	r4,-28(fp)
20099a98:	21400b17 	ldw	r5,44(r4)
20099a9c:	e13ffb17 	ldw	r4,-20(fp)
20099aa0:	293fe01e 	bne	r5,r4,20099a24 <__flash_rwdata_start+0xffffd8a0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
20099aa4:	e13fff17 	ldw	r4,-4(fp)
20099aa8:	2005883a 	mov	r2,r4
20099aac:	0007883a 	mov	r3,zero
20099ab0:	e0bffc15 	stw	r2,-16(fp)
20099ab4:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
20099ab8:	e0fffc17 	ldw	r3,-16(fp)
20099abc:	e0bff917 	ldw	r2,-28(fp)
20099ac0:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
20099ac4:	e0fffd17 	ldw	r3,-12(fp)
20099ac8:	e0bff917 	ldw	r2,-28(fp)
20099acc:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
20099ad0:	e0fffa17 	ldw	r3,-24(fp)
20099ad4:	e0bfff17 	ldw	r2,-4(fp)
20099ad8:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
20099adc:	e0fffb17 	ldw	r3,-20(fp)
20099ae0:	e0bfff17 	ldw	r2,-4(fp)
20099ae4:	10c00b15 	stw	r3,44(r2)
	return 0;
20099ae8:	0005883a 	mov	r2,zero
}
20099aec:	e037883a 	mov	sp,fp
20099af0:	df000017 	ldw	fp,0(sp)
20099af4:	dec00104 	addi	sp,sp,4
20099af8:	f800283a 	ret

20099afc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
20099afc:	defffc04 	addi	sp,sp,-16
20099b00:	df000315 	stw	fp,12(sp)
20099b04:	df000304 	addi	fp,sp,12
20099b08:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
20099b0c:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
20099b10:	e0bfff17 	ldw	r2,-4(fp)
20099b14:	1000021e 	bne	r2,zero,20099b20 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
20099b18:	00bffa84 	movi	r2,-22
20099b1c:	00001906 	br	20099b84 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
20099b20:	e0bfff17 	ldw	r2,-4(fp)
20099b24:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20099b28:	00000a06 	br	20099b54 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
20099b2c:	e0bffd17 	ldw	r2,-12(fp)
20099b30:	10800717 	ldw	r2,28(r2)
20099b34:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20099b38:	e0bffe17 	ldw	r2,-8(fp)
20099b3c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20099b40:	e0bffd17 	ldw	r2,-12(fp)
20099b44:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
20099b48:	e0bffd17 	ldw	r2,-12(fp)
20099b4c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
20099b50:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20099b54:	e0bffd17 	ldw	r2,-12(fp)
20099b58:	10c00317 	ldw	r3,12(r2)
20099b5c:	e0bfff17 	ldw	r2,-4(fp)
20099b60:	18bff21e 	bne	r3,r2,20099b2c <__flash_rwdata_start+0xffffd9a8>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
20099b64:	e0bffd17 	ldw	r2,-12(fp)
20099b68:	10800717 	ldw	r2,28(r2)
20099b6c:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20099b70:	e0bffe17 	ldw	r2,-8(fp)
20099b74:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20099b78:	e0bffd17 	ldw	r2,-12(fp)
20099b7c:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
20099b80:	0005883a 	mov	r2,zero
}
20099b84:	e037883a 	mov	sp,fp
20099b88:	df000017 	ldw	fp,0(sp)
20099b8c:	dec00104 	addi	sp,sp,4
20099b90:	f800283a 	ret

20099b94 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
20099b94:	defff804 	addi	sp,sp,-32
20099b98:	df000715 	stw	fp,28(sp)
20099b9c:	df000704 	addi	fp,sp,28
20099ba0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
20099ba4:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
20099ba8:	e13fff17 	ldw	r4,-4(fp)
20099bac:	2000021e 	bne	r4,zero,20099bb8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
20099bb0:	00bffa84 	movi	r2,-22
20099bb4:	00002806 	br	20099c58 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
20099bb8:	e13fff17 	ldw	r4,-4(fp)
20099bbc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
20099bc0:	e13fff17 	ldw	r4,-4(fp)
20099bc4:	2005883a 	mov	r2,r4
20099bc8:	0007883a 	mov	r3,zero
20099bcc:	e0bffb15 	stw	r2,-20(fp)
20099bd0:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20099bd4:	00001006 	br	20099c18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
20099bd8:	e0bff917 	ldw	r2,-28(fp)
20099bdc:	10800f17 	ldw	r2,60(r2)
20099be0:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20099be4:	e0bffa17 	ldw	r2,-24(fp)
20099be8:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20099bec:	e0bff917 	ldw	r2,-28(fp)
20099bf0:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20099bf4:	e0bff917 	ldw	r2,-28(fp)
20099bf8:	10800317 	ldw	r2,12(r2)
20099bfc:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
20099c00:	e0bff917 	ldw	r2,-28(fp)
20099c04:	10800b17 	ldw	r2,44(r2)
20099c08:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20099c0c:	e0bffd17 	ldw	r2,-12(fp)
20099c10:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
20099c14:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20099c18:	e0bff917 	ldw	r2,-28(fp)
20099c1c:	10c00317 	ldw	r3,12(r2)
20099c20:	e0bffb17 	ldw	r2,-20(fp)
20099c24:	18800426 	beq	r3,r2,20099c38 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20099c28:	e0bff917 	ldw	r2,-28(fp)
20099c2c:	10c00b17 	ldw	r3,44(r2)
20099c30:	e0bffc17 	ldw	r2,-16(fp)
20099c34:	18bfe81e 	bne	r3,r2,20099bd8 <__flash_rwdata_start+0xffffda54>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
20099c38:	e0bff917 	ldw	r2,-28(fp)
20099c3c:	10800f17 	ldw	r2,60(r2)
20099c40:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20099c44:	e0bffa17 	ldw	r2,-24(fp)
20099c48:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20099c4c:	e0bff917 	ldw	r2,-28(fp)
20099c50:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
20099c54:	0005883a 	mov	r2,zero
}
20099c58:	e037883a 	mov	sp,fp
20099c5c:	df000017 	ldw	fp,0(sp)
20099c60:	dec00104 	addi	sp,sp,4
20099c64:	f800283a 	ret

20099c68 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
20099c68:	deffef04 	addi	sp,sp,-68
20099c6c:	df001015 	stw	fp,64(sp)
20099c70:	df001004 	addi	fp,sp,64
20099c74:	e13ffb15 	stw	r4,-20(fp)
20099c78:	e17ffc15 	stw	r5,-16(fp)
20099c7c:	e1bffd15 	stw	r6,-12(fp)
20099c80:	3807883a 	mov	r3,r7
20099c84:	e0800117 	ldw	r2,4(fp)
20099c88:	e0fffe05 	stb	r3,-8(fp)
20099c8c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
20099c90:	e03ff015 	stw	zero,-64(fp)
	alt_u32 dispatcher_ctl = 0;
20099c94:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
20099c98:	e03ff215 	stw	zero,-56(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
20099c9c:	e0bffc17 	ldw	r2,-16(fp)
20099ca0:	e0bff915 	stw	r2,-28(fp)
20099ca4:	e0bffd17 	ldw	r2,-12(fp)
20099ca8:	e0bffa15 	stw	r2,-24(fp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
20099cac:	e0bffb17 	ldw	r2,-20(fp)
20099cb0:	10800617 	ldw	r2,24(r2)
20099cb4:	10800037 	ldwio	r2,0(r2)
20099cb8:	e0bff015 	stw	r2,-64(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
20099cbc:	e0bff017 	ldw	r2,-64(fp)
20099cc0:	1080004c 	andi	r2,r2,1
20099cc4:	10000226 	beq	r2,zero,20099cd0 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
20099cc8:	00bffc04 	movi	r2,-16
20099ccc:	00009206 	br	20099f18 <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
20099cd0:	00800804 	movi	r2,32
20099cd4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099cd8:	0005303a 	rdctl	r2,status
20099cdc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099ce0:	e0fff317 	ldw	r3,-52(fp)
20099ce4:	00bfff84 	movi	r2,-2
20099ce8:	1884703a 	and	r2,r3,r2
20099cec:	1001703a 	wrctl	status,r2
  
  return context;
20099cf0:	e0bff317 	ldw	r2,-52(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
20099cf4:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20099cf8:	e0bffb17 	ldw	r2,-20(fp)
20099cfc:	10800317 	ldw	r2,12(r2)
20099d00:	10800104 	addi	r2,r2,4
20099d04:	e0fff117 	ldw	r3,-60(fp)
20099d08:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
20099d0c:	e0bffb17 	ldw	r2,-20(fp)
20099d10:	10800317 	ldw	r2,12(r2)
20099d14:	e0fffb17 	ldw	r3,-20(fp)
20099d18:	18c00317 	ldw	r3,12(r3)
20099d1c:	18c00037 	ldwio	r3,0(r3)
20099d20:	10c00035 	stwio	r3,0(r2)
20099d24:	e0bff217 	ldw	r2,-56(fp)
20099d28:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099d2c:	e0bff417 	ldw	r2,-48(fp)
20099d30:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20099d34:	e0bffb17 	ldw	r2,-20(fp)
20099d38:	10800b17 	ldw	r2,44(r2)
20099d3c:	10002326 	beq	r2,zero,20099dcc <alt_msgdma_start_prefetcher_with_list_addr+0x164>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
20099d40:	e0bffb17 	ldw	r2,-20(fp)
20099d44:	10c00d17 	ldw	r3,52(r2)
20099d48:	e0bff117 	ldw	r2,-60(fp)
20099d4c:	1884b03a 	or	r2,r3,r2
20099d50:	10800514 	ori	r2,r2,20
20099d54:	e0bff115 	stw	r2,-60(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099d58:	e0fff117 	ldw	r3,-60(fp)
20099d5c:	00bff7c4 	movi	r2,-33
20099d60:	1884703a 	and	r2,r3,r2
20099d64:	e0bff115 	stw	r2,-60(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20099d68:	e0bff017 	ldw	r2,-64(fp)
20099d6c:	10800214 	ori	r2,r2,8
20099d70:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099d74:	0005303a 	rdctl	r2,status
20099d78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099d7c:	e0fff517 	ldw	r3,-44(fp)
20099d80:	00bfff84 	movi	r2,-2
20099d84:	1884703a 	and	r2,r3,r2
20099d88:	1001703a 	wrctl	status,r2
  
  return context;
20099d8c:	e0bff517 	ldw	r2,-44(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
20099d90:	e0bff215 	stw	r2,-56(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20099d94:	e0bffb17 	ldw	r2,-20(fp)
20099d98:	10800317 	ldw	r2,12(r2)
20099d9c:	10800104 	addi	r2,r2,4
20099da0:	e0fff117 	ldw	r3,-60(fp)
20099da4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20099da8:	e0bffb17 	ldw	r2,-20(fp)
20099dac:	10800617 	ldw	r2,24(r2)
20099db0:	e0fff017 	ldw	r3,-64(fp)
20099db4:	10c00035 	stwio	r3,0(r2)
20099db8:	e0bff217 	ldw	r2,-56(fp)
20099dbc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099dc0:	e0bff617 	ldw	r2,-40(fp)
20099dc4:	1001703a 	wrctl	status,r2
20099dc8:	00002306 	br	20099e58 <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
20099dcc:	e0bffb17 	ldw	r2,-20(fp)
20099dd0:	10c00d17 	ldw	r3,52(r2)
20099dd4:	e0bff117 	ldw	r2,-60(fp)
20099dd8:	1884b03a 	or	r2,r3,r2
20099ddc:	10800114 	ori	r2,r2,4
20099de0:	e0bff115 	stw	r2,-60(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20099de4:	e0fff117 	ldw	r3,-60(fp)
20099de8:	00bff3c4 	movi	r2,-49
20099dec:	1884703a 	and	r2,r3,r2
20099df0:	e0bff115 	stw	r2,-60(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20099df4:	e0fff017 	ldw	r3,-64(fp)
20099df8:	00bffdc4 	movi	r2,-9
20099dfc:	1884703a 	and	r2,r3,r2
20099e00:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099e04:	0005303a 	rdctl	r2,status
20099e08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099e0c:	e0fff717 	ldw	r3,-36(fp)
20099e10:	00bfff84 	movi	r2,-2
20099e14:	1884703a 	and	r2,r3,r2
20099e18:	1001703a 	wrctl	status,r2
  
  return context;
20099e1c:	e0bff717 	ldw	r2,-36(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
20099e20:	e0bff215 	stw	r2,-56(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20099e24:	e0bffb17 	ldw	r2,-20(fp)
20099e28:	10800317 	ldw	r2,12(r2)
20099e2c:	10800104 	addi	r2,r2,4
20099e30:	e0fff117 	ldw	r3,-60(fp)
20099e34:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20099e38:	e0bffb17 	ldw	r2,-20(fp)
20099e3c:	10800617 	ldw	r2,24(r2)
20099e40:	e0fff017 	ldw	r3,-64(fp)
20099e44:	10c00035 	stwio	r3,0(r2)
20099e48:	e0bff217 	ldw	r2,-56(fp)
20099e4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099e50:	e0bff817 	ldw	r2,-32(fp)
20099e54:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
20099e58:	e0bffb17 	ldw	r2,-20(fp)
20099e5c:	10800617 	ldw	r2,24(r2)
20099e60:	10800104 	addi	r2,r2,4
20099e64:	e0fff917 	ldw	r3,-28(fp)
20099e68:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
20099e6c:	e0bffb17 	ldw	r2,-20(fp)
20099e70:	10800617 	ldw	r2,24(r2)
20099e74:	10800204 	addi	r2,r2,8
20099e78:	e0fffa17 	ldw	r3,-24(fp)
20099e7c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
20099e80:	e0bffe03 	ldbu	r2,-8(fp)
20099e84:	10000426 	beq	r2,zero,20099e98 <alt_msgdma_start_prefetcher_with_list_addr+0x230>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
20099e88:	e0bff017 	ldw	r2,-64(fp)
20099e8c:	10800414 	ori	r2,r2,16
20099e90:	e0bff015 	stw	r2,-64(fp)
20099e94:	00000406 	br	20099ea8 <alt_msgdma_start_prefetcher_with_list_addr+0x240>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
20099e98:	e0fff017 	ldw	r3,-64(fp)
20099e9c:	00bffbc4 	movi	r2,-17
20099ea0:	1884703a 	and	r2,r3,r2
20099ea4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20099ea8:	e0bfff03 	ldbu	r2,-4(fp)
20099eac:	10000e26 	beq	r2,zero,20099ee8 <alt_msgdma_start_prefetcher_with_list_addr+0x280>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
20099eb0:	e0bff017 	ldw	r2,-64(fp)
20099eb4:	10800094 	ori	r2,r2,2
20099eb8:	e0bff015 	stw	r2,-64(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20099ebc:	e0bffb17 	ldw	r2,-20(fp)
20099ec0:	10800617 	ldw	r2,24(r2)
20099ec4:	10800304 	addi	r2,r2,12
20099ec8:	10800037 	ldwio	r2,0(r2)
20099ecc:	10000a1e 	bne	r2,zero,20099ef8 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20099ed0:	e0bffb17 	ldw	r2,-20(fp)
20099ed4:	10800617 	ldw	r2,24(r2)
20099ed8:	10800304 	addi	r2,r2,12
20099edc:	00c03fc4 	movi	r3,255
20099ee0:	10c00035 	stwio	r3,0(r2)
20099ee4:	00000406 	br	20099ef8 <alt_msgdma_start_prefetcher_with_list_addr+0x290>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
20099ee8:	e0fff017 	ldw	r3,-64(fp)
20099eec:	00bfff44 	movi	r2,-3
20099ef0:	1884703a 	and	r2,r3,r2
20099ef4:	e0bff015 	stw	r2,-64(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
20099ef8:	e0bff017 	ldw	r2,-64(fp)
20099efc:	10800054 	ori	r2,r2,1
20099f00:	e0bff015 	stw	r2,-64(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20099f04:	e0bffb17 	ldw	r2,-20(fp)
20099f08:	10800617 	ldw	r2,24(r2)
20099f0c:	e0fff017 	ldw	r3,-64(fp)
20099f10:	10c00035 	stwio	r3,0(r2)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
20099f14:	0005883a 	mov	r2,zero
}
20099f18:	e037883a 	mov	sp,fp
20099f1c:	df000017 	ldw	fp,0(sp)
20099f20:	dec00104 	addi	sp,sp,4
20099f24:	f800283a 	ret

20099f28 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
20099f28:	defff704 	addi	sp,sp,-36
20099f2c:	dfc00815 	stw	ra,32(sp)
20099f30:	df000715 	stw	fp,28(sp)
20099f34:	dc400615 	stw	r17,24(sp)
20099f38:	dc000515 	stw	r16,20(sp)
20099f3c:	df000704 	addi	fp,sp,28
20099f40:	e13ffa15 	stw	r4,-24(fp)
20099f44:	e17ffb15 	stw	r5,-20(fp)
20099f48:	3007883a 	mov	r3,r6
20099f4c:	3805883a 	mov	r2,r7
20099f50:	e0fffc05 	stb	r3,-16(fp)
20099f54:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
20099f58:	e13ffb17 	ldw	r4,-20(fp)
20099f5c:	0099afc0 	call	20099afc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
20099f60:	10000226 	beq	r2,zero,20099f6c <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
20099f64:	00bffa84 	movi	r2,-22
20099f68:	00000b06 	br	20099f98 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
20099f6c:	e0bffb17 	ldw	r2,-20(fp)
20099f70:	1021883a 	mov	r16,r2
20099f74:	0023883a 	mov	r17,zero
20099f78:	e0fffc03 	ldbu	r3,-16(fp)
20099f7c:	e0bffd03 	ldbu	r2,-12(fp)
20099f80:	d8800015 	stw	r2,0(sp)
20099f84:	e13ffa17 	ldw	r4,-24(fp)
20099f88:	800b883a 	mov	r5,r16
20099f8c:	880d883a 	mov	r6,r17
20099f90:	180f883a 	mov	r7,r3
20099f94:	0099c680 	call	20099c68 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
20099f98:	e6fffe04 	addi	sp,fp,-8
20099f9c:	dfc00317 	ldw	ra,12(sp)
20099fa0:	df000217 	ldw	fp,8(sp)
20099fa4:	dc400117 	ldw	r17,4(sp)
20099fa8:	dc000017 	ldw	r16,0(sp)
20099fac:	dec00404 	addi	sp,sp,16
20099fb0:	f800283a 	ret

20099fb4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
20099fb4:	defff704 	addi	sp,sp,-36
20099fb8:	dfc00815 	stw	ra,32(sp)
20099fbc:	df000715 	stw	fp,28(sp)
20099fc0:	dc400615 	stw	r17,24(sp)
20099fc4:	dc000515 	stw	r16,20(sp)
20099fc8:	df000704 	addi	fp,sp,28
20099fcc:	e13ffa15 	stw	r4,-24(fp)
20099fd0:	e17ffb15 	stw	r5,-20(fp)
20099fd4:	3007883a 	mov	r3,r6
20099fd8:	3805883a 	mov	r2,r7
20099fdc:	e0fffc05 	stb	r3,-16(fp)
20099fe0:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
20099fe4:	e13ffb17 	ldw	r4,-20(fp)
20099fe8:	0099b940 	call	20099b94 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
20099fec:	10000226 	beq	r2,zero,20099ff8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
20099ff0:	00bffa84 	movi	r2,-22
20099ff4:	00000b06 	br	2009a024 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
20099ff8:	e0bffb17 	ldw	r2,-20(fp)
20099ffc:	1021883a 	mov	r16,r2
2009a000:	0023883a 	mov	r17,zero
2009a004:	e0fffc03 	ldbu	r3,-16(fp)
2009a008:	e0bffd03 	ldbu	r2,-12(fp)
2009a00c:	d8800015 	stw	r2,0(sp)
2009a010:	e13ffa17 	ldw	r4,-24(fp)
2009a014:	800b883a 	mov	r5,r16
2009a018:	880d883a 	mov	r6,r17
2009a01c:	180f883a 	mov	r7,r3
2009a020:	0099c680 	call	20099c68 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
2009a024:	e6fffe04 	addi	sp,fp,-8
2009a028:	dfc00317 	ldw	ra,12(sp)
2009a02c:	df000217 	ldw	fp,8(sp)
2009a030:	dc400117 	ldw	r17,4(sp)
2009a034:	dc000017 	ldw	r16,0(sp)
2009a038:	dec00404 	addi	sp,sp,16
2009a03c:	f800283a 	ret

2009a040 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
2009a040:	defffc04 	addi	sp,sp,-16
2009a044:	dfc00315 	stw	ra,12(sp)
2009a048:	df000215 	stw	fp,8(sp)
2009a04c:	df000204 	addi	fp,sp,8
2009a050:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
2009a054:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
2009a058:	e13fff17 	ldw	r4,-4(fp)
2009a05c:	d1600f04 	addi	r5,gp,-32708
2009a060:	009a7d00 	call	2009a7d0 <alt_find_dev>
2009a064:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
2009a068:	e0bffe17 	ldw	r2,-8(fp)
2009a06c:	1000041e 	bne	r2,zero,2009a080 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
2009a070:	00984b80 	call	200984b8 <alt_get_errno>
2009a074:	1007883a 	mov	r3,r2
2009a078:	008004c4 	movi	r2,19
2009a07c:	18800015 	stw	r2,0(r3)
    }

    return dev;
2009a080:	e0bffe17 	ldw	r2,-8(fp)
}
2009a084:	e037883a 	mov	sp,fp
2009a088:	dfc00117 	ldw	ra,4(sp)
2009a08c:	df000017 	ldw	fp,0(sp)
2009a090:	dec00204 	addi	sp,sp,8
2009a094:	f800283a 	ret

2009a098 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2009a098:	defff804 	addi	sp,sp,-32
2009a09c:	dfc00715 	stw	ra,28(sp)
2009a0a0:	df000615 	stw	fp,24(sp)
2009a0a4:	df000604 	addi	fp,sp,24
2009a0a8:	e13ffd15 	stw	r4,-12(fp)
2009a0ac:	e17ffe15 	stw	r5,-8(fp)
2009a0b0:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
2009a0b4:	e0bffd17 	ldw	r2,-12(fp)
2009a0b8:	10801783 	ldbu	r2,94(r2)
2009a0bc:	10803fcc 	andi	r2,r2,255
2009a0c0:	10000b26 	beq	r2,zero,2009a0f0 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
2009a0c4:	e0bffd17 	ldw	r2,-12(fp)
2009a0c8:	10800617 	ldw	r2,24(r2)
2009a0cc:	00c00104 	movi	r3,4
2009a0d0:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009a0d4:	0001883a 	nop
2009a0d8:	e0bffd17 	ldw	r2,-12(fp)
2009a0dc:	10800617 	ldw	r2,24(r2)
2009a0e0:	10800037 	ldwio	r2,0(r2)
2009a0e4:	1080010c 	andi	r2,r2,4
2009a0e8:	1005d0ba 	srai	r2,r2,2
2009a0ec:	103ffa1e 	bne	r2,zero,2009a0d8 <__flash_rwdata_start+0xffffdf54>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
2009a0f0:	e0bffd17 	ldw	r2,-12(fp)
2009a0f4:	10800317 	ldw	r2,12(r2)
2009a0f8:	10800104 	addi	r2,r2,4
2009a0fc:	00c00084 	movi	r3,2
2009a100:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009a104:	0001883a 	nop
2009a108:	e0bffd17 	ldw	r2,-12(fp)
2009a10c:	10800317 	ldw	r2,12(r2)
2009a110:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
2009a114:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009a118:	103ffb1e 	bne	r2,zero,2009a108 <__flash_rwdata_start+0xffffdf84>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
2009a11c:	e0bffd17 	ldw	r2,-12(fp)
2009a120:	10800317 	ldw	r2,12(r2)
2009a124:	10800104 	addi	r2,r2,4
2009a128:	10800037 	ldwio	r2,0(r2)
2009a12c:	1007883a 	mov	r3,r2
2009a130:	00bffbc4 	movi	r2,-17
2009a134:	1884703a 	and	r2,r3,r2
2009a138:	e0bffb15 	stw	r2,-20(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
2009a13c:	e0bffb17 	ldw	r2,-20(fp)
2009a140:	10800814 	ori	r2,r2,32
2009a144:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009a148:	e0bffd17 	ldw	r2,-12(fp)
2009a14c:	10800317 	ldw	r2,12(r2)
2009a150:	10800104 	addi	r2,r2,4
2009a154:	e0fffb17 	ldw	r3,-20(fp)
2009a158:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
2009a15c:	e0bffd17 	ldw	r2,-12(fp)
2009a160:	10800317 	ldw	r2,12(r2)
2009a164:	e0fffd17 	ldw	r3,-12(fp)
2009a168:	18c00317 	ldw	r3,12(r3)
2009a16c:	18c00037 	ldwio	r3,0(r3)
2009a170:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
2009a174:	e0bffd17 	ldw	r2,-12(fp)
2009a178:	10801783 	ldbu	r2,94(r2)
2009a17c:	10803fcc 	andi	r2,r2,255
2009a180:	10000826 	beq	r2,zero,2009a1a4 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
2009a184:	e0bffd17 	ldw	r2,-12(fp)
2009a188:	10800617 	ldw	r2,24(r2)
2009a18c:	10800404 	addi	r2,r2,16
2009a190:	e0fffd17 	ldw	r3,-12(fp)
2009a194:	18c00617 	ldw	r3,24(r3)
2009a198:	18c00404 	addi	r3,r3,16
2009a19c:	18c00037 	ldwio	r3,0(r3)
2009a1a0:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
2009a1a4:	e13ffd17 	ldw	r4,-12(fp)
2009a1a8:	d1600f04 	addi	r5,gp,-32708
2009a1ac:	009a6740 	call	2009a674 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
2009a1b0:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
2009a1b4:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
2009a1b8:	e0bffc17 	ldw	r2,-16(fp)
2009a1bc:	1000081e 	bne	r2,zero,2009a1e0 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
2009a1c0:	d8000015 	stw	zero,0(sp)
2009a1c4:	e13ffe17 	ldw	r4,-8(fp)
2009a1c8:	e17fff17 	ldw	r5,-4(fp)
2009a1cc:	018802b4 	movhi	r6,8202
2009a1d0:	31a1b204 	addi	r6,r6,-31032
2009a1d4:	e1fffd17 	ldw	r7,-12(fp)
2009a1d8:	009a8900 	call	2009a890 <alt_ic_isr_register>
2009a1dc:	00000306 	br	2009a1ec <alt_msgdma_init+0x154>
    }
    else
    {
        alt_printf("failed to create semaphores\n");
2009a1e0:	01000034 	movhi	r4,0
2009a1e4:	21021204 	addi	r4,r4,2120
2009a1e8:	009af0c0 	call	2009af0c <alt_printf>
    }
    
    return;
2009a1ec:	0001883a 	nop

}
2009a1f0:	e037883a 	mov	sp,fp
2009a1f4:	dfc00117 	ldw	ra,4(sp)
2009a1f8:	df000017 	ldw	fp,0(sp)
2009a1fc:	dec00204 	addi	sp,sp,8
2009a200:	f800283a 	ret

2009a204 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
2009a204:	defffb04 	addi	sp,sp,-20
2009a208:	df000415 	stw	fp,16(sp)
2009a20c:	df000404 	addi	fp,sp,16
2009a210:	e13ffc15 	stw	r4,-16(fp)
2009a214:	e17ffd15 	stw	r5,-12(fp)
2009a218:	e1bffe15 	stw	r6,-8(fp)
2009a21c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
2009a220:	e0bffc17 	ldw	r2,-16(fp)
2009a224:	e0fffd17 	ldw	r3,-12(fp)
2009a228:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
2009a22c:	e0bffc17 	ldw	r2,-16(fp)
2009a230:	e0ffff17 	ldw	r3,-4(fp)
2009a234:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
2009a238:	e0bffc17 	ldw	r2,-16(fp)
2009a23c:	e0fffe17 	ldw	r3,-8(fp)
2009a240:	10c00d15 	stw	r3,52(r2)

    return ;
2009a244:	0001883a 	nop
}
2009a248:	e037883a 	mov	sp,fp
2009a24c:	df000017 	ldw	fp,0(sp)
2009a250:	dec00104 	addi	sp,sp,4
2009a254:	f800283a 	ret

2009a258 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009a258:	defffc04 	addi	sp,sp,-16
2009a25c:	dfc00315 	stw	ra,12(sp)
2009a260:	df000215 	stw	fp,8(sp)
2009a264:	df000204 	addi	fp,sp,8
2009a268:	e13ffe15 	stw	r4,-8(fp)
2009a26c:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
2009a270:	e13ffe17 	ldw	r4,-8(fp)
2009a274:	e17fff17 	ldw	r5,-4(fp)
2009a278:	000d883a 	mov	r6,zero
2009a27c:	0098a2c0 	call	20098a2c <alt_msgdma_descriptor_async_transfer>

}
2009a280:	e037883a 	mov	sp,fp
2009a284:	dfc00117 	ldw	ra,4(sp)
2009a288:	df000017 	ldw	fp,0(sp)
2009a28c:	dec00204 	addi	sp,sp,8
2009a290:	f800283a 	ret

2009a294 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009a294:	defffc04 	addi	sp,sp,-16
2009a298:	dfc00315 	stw	ra,12(sp)
2009a29c:	df000215 	stw	fp,8(sp)
2009a2a0:	df000204 	addi	fp,sp,8
2009a2a4:	e13ffe15 	stw	r4,-8(fp)
2009a2a8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
2009a2ac:	e13ffe17 	ldw	r4,-8(fp)
2009a2b0:	000b883a 	mov	r5,zero
2009a2b4:	e1bfff17 	ldw	r6,-4(fp)
2009a2b8:	0098a2c0 	call	20098a2c <alt_msgdma_descriptor_async_transfer>
}
2009a2bc:	e037883a 	mov	sp,fp
2009a2c0:	dfc00117 	ldw	ra,4(sp)
2009a2c4:	df000017 	ldw	fp,0(sp)
2009a2c8:	dec00204 	addi	sp,sp,8
2009a2cc:	f800283a 	ret

2009a2d0 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009a2d0:	defffc04 	addi	sp,sp,-16
2009a2d4:	dfc00315 	stw	ra,12(sp)
2009a2d8:	df000215 	stw	fp,8(sp)
2009a2dc:	df000204 	addi	fp,sp,8
2009a2e0:	e13ffe15 	stw	r4,-8(fp)
2009a2e4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
2009a2e8:	e13ffe17 	ldw	r4,-8(fp)
2009a2ec:	e17fff17 	ldw	r5,-4(fp)
2009a2f0:	000d883a 	mov	r6,zero
2009a2f4:	0098cfc0 	call	20098cfc <alt_msgdma_descriptor_sync_transfer>
}
2009a2f8:	e037883a 	mov	sp,fp
2009a2fc:	dfc00117 	ldw	ra,4(sp)
2009a300:	df000017 	ldw	fp,0(sp)
2009a304:	dec00204 	addi	sp,sp,8
2009a308:	f800283a 	ret

2009a30c <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
2009a30c:	defffc04 	addi	sp,sp,-16
2009a310:	dfc00315 	stw	ra,12(sp)
2009a314:	df000215 	stw	fp,8(sp)
2009a318:	df000204 	addi	fp,sp,8
2009a31c:	e13ffe15 	stw	r4,-8(fp)
2009a320:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
2009a324:	e13ffe17 	ldw	r4,-8(fp)
2009a328:	000b883a 	mov	r5,zero
2009a32c:	e1bfff17 	ldw	r6,-4(fp)
2009a330:	0098cfc0 	call	20098cfc <alt_msgdma_descriptor_sync_transfer>
}
2009a334:	e037883a 	mov	sp,fp
2009a338:	dfc00117 	ldw	ra,4(sp)
2009a33c:	df000017 	ldw	fp,0(sp)
2009a340:	dec00204 	addi	sp,sp,8
2009a344:	f800283a 	ret

2009a348 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
2009a348:	defff504 	addi	sp,sp,-44
2009a34c:	df000a15 	stw	fp,40(sp)
2009a350:	df000a04 	addi	fp,sp,40
2009a354:	e13ffc15 	stw	r4,-16(fp)
2009a358:	e17ffd15 	stw	r5,-12(fp)
2009a35c:	e1bffe15 	stw	r6,-8(fp)
2009a360:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
2009a364:	e03ff615 	stw	zero,-40(fp)
2009a368:	00800034 	movhi	r2,0
2009a36c:	1088fc04 	addi	r2,r2,9200
2009a370:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
2009a374:	10003f26 	beq	r2,zero,2009a474 <alt_alarm_start+0x12c>
  {
    if (alarm)
2009a378:	e0bffc17 	ldw	r2,-16(fp)
2009a37c:	10003b26 	beq	r2,zero,2009a46c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
2009a380:	e0bffc17 	ldw	r2,-16(fp)
2009a384:	e0fffe17 	ldw	r3,-8(fp)
2009a388:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
2009a38c:	e0bffc17 	ldw	r2,-16(fp)
2009a390:	e0ffff17 	ldw	r3,-4(fp)
2009a394:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a398:	0005303a 	rdctl	r2,status
2009a39c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a3a0:	e0fff817 	ldw	r3,-32(fp)
2009a3a4:	00bfff84 	movi	r2,-2
2009a3a8:	1884703a 	and	r2,r3,r2
2009a3ac:	1001703a 	wrctl	status,r2
  
  return context;
2009a3b0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
2009a3b4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2009a3b8:	00800034 	movhi	r2,0
2009a3bc:	1088fd04 	addi	r2,r2,9204
2009a3c0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
2009a3c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
2009a3c8:	e0fffd17 	ldw	r3,-12(fp)
2009a3cc:	e0bff617 	ldw	r2,-40(fp)
2009a3d0:	1885883a 	add	r2,r3,r2
2009a3d4:	10c00044 	addi	r3,r2,1
2009a3d8:	e0bffc17 	ldw	r2,-16(fp)
2009a3dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
2009a3e0:	e0bffc17 	ldw	r2,-16(fp)
2009a3e4:	10c00217 	ldw	r3,8(r2)
2009a3e8:	e0bff617 	ldw	r2,-40(fp)
2009a3ec:	1880042e 	bgeu	r3,r2,2009a400 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
2009a3f0:	e0bffc17 	ldw	r2,-16(fp)
2009a3f4:	00c00044 	movi	r3,1
2009a3f8:	10c00405 	stb	r3,16(r2)
2009a3fc:	00000206 	br	2009a408 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
2009a400:	e0bffc17 	ldw	r2,-16(fp)
2009a404:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
2009a408:	e0fffc17 	ldw	r3,-16(fp)
2009a40c:	00800034 	movhi	r2,0
2009a410:	1088ea04 	addi	r2,r2,9128
2009a414:	e0bff915 	stw	r2,-28(fp)
2009a418:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009a41c:	e0bffa17 	ldw	r2,-24(fp)
2009a420:	e0fff917 	ldw	r3,-28(fp)
2009a424:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009a428:	e0bff917 	ldw	r2,-28(fp)
2009a42c:	10c00017 	ldw	r3,0(r2)
2009a430:	e0bffa17 	ldw	r2,-24(fp)
2009a434:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009a438:	e0bff917 	ldw	r2,-28(fp)
2009a43c:	10800017 	ldw	r2,0(r2)
2009a440:	e0fffa17 	ldw	r3,-24(fp)
2009a444:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009a448:	e0bff917 	ldw	r2,-28(fp)
2009a44c:	e0fffa17 	ldw	r3,-24(fp)
2009a450:	10c00015 	stw	r3,0(r2)
2009a454:	e0bff717 	ldw	r2,-36(fp)
2009a458:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a45c:	e0bffb17 	ldw	r2,-20(fp)
2009a460:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
2009a464:	0005883a 	mov	r2,zero
2009a468:	00000306 	br	2009a478 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
2009a46c:	00bffa84 	movi	r2,-22
2009a470:	00000106 	br	2009a478 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
2009a474:	00bfde84 	movi	r2,-134
  }
}
2009a478:	e037883a 	mov	sp,fp
2009a47c:	df000017 	ldw	fp,0(sp)
2009a480:	dec00104 	addi	sp,sp,4
2009a484:	f800283a 	ret

2009a488 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
2009a488:	defffa04 	addi	sp,sp,-24
2009a48c:	dfc00515 	stw	ra,20(sp)
2009a490:	df000415 	stw	fp,16(sp)
2009a494:	df000404 	addi	fp,sp,16
2009a498:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
2009a49c:	008000c4 	movi	r2,3
2009a4a0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
2009a4a4:	e0fffd17 	ldw	r3,-12(fp)
2009a4a8:	008003f4 	movhi	r2,15
2009a4ac:	10909004 	addi	r2,r2,16960
2009a4b0:	1885383a 	mul	r2,r3,r2
2009a4b4:	0101dcf4 	movhi	r4,1907
2009a4b8:	21165004 	addi	r4,r4,22848
2009a4bc:	100b883a 	mov	r5,r2
2009a4c0:	00866700 	call	20086670 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
2009a4c4:	01200034 	movhi	r4,32768
2009a4c8:	213fffc4 	addi	r4,r4,-1
2009a4cc:	100b883a 	mov	r5,r2
2009a4d0:	00866700 	call	20086670 <__udivsi3>
2009a4d4:	e13fff17 	ldw	r4,-4(fp)
2009a4d8:	100b883a 	mov	r5,r2
2009a4dc:	00866700 	call	20086670 <__udivsi3>
2009a4e0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
2009a4e4:	e0bffe17 	ldw	r2,-8(fp)
2009a4e8:	10002a26 	beq	r2,zero,2009a594 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
2009a4ec:	e03ffc15 	stw	zero,-16(fp)
2009a4f0:	00001706 	br	2009a550 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
2009a4f4:	00a00034 	movhi	r2,32768
2009a4f8:	10bfffc4 	addi	r2,r2,-1
2009a4fc:	10bfffc4 	addi	r2,r2,-1
2009a500:	103ffe1e 	bne	r2,zero,2009a4fc <__flash_rwdata_start+0xffffe378>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
2009a504:	e0fffd17 	ldw	r3,-12(fp)
2009a508:	008003f4 	movhi	r2,15
2009a50c:	10909004 	addi	r2,r2,16960
2009a510:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
2009a514:	0101dcf4 	movhi	r4,1907
2009a518:	21165004 	addi	r4,r4,22848
2009a51c:	100b883a 	mov	r5,r2
2009a520:	00866700 	call	20086670 <__udivsi3>
2009a524:	01200034 	movhi	r4,32768
2009a528:	213fffc4 	addi	r4,r4,-1
2009a52c:	100b883a 	mov	r5,r2
2009a530:	00866700 	call	20086670 <__udivsi3>
2009a534:	1007883a 	mov	r3,r2
2009a538:	e0bfff17 	ldw	r2,-4(fp)
2009a53c:	10c5c83a 	sub	r2,r2,r3
2009a540:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
2009a544:	e0bffc17 	ldw	r2,-16(fp)
2009a548:	10800044 	addi	r2,r2,1
2009a54c:	e0bffc15 	stw	r2,-16(fp)
2009a550:	e0fffc17 	ldw	r3,-16(fp)
2009a554:	e0bffe17 	ldw	r2,-8(fp)
2009a558:	18bfe616 	blt	r3,r2,2009a4f4 <__flash_rwdata_start+0xffffe370>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009a55c:	e0fffd17 	ldw	r3,-12(fp)
2009a560:	008003f4 	movhi	r2,15
2009a564:	10909004 	addi	r2,r2,16960
2009a568:	1885383a 	mul	r2,r3,r2
2009a56c:	0101dcf4 	movhi	r4,1907
2009a570:	21165004 	addi	r4,r4,22848
2009a574:	100b883a 	mov	r5,r2
2009a578:	00866700 	call	20086670 <__udivsi3>
2009a57c:	1007883a 	mov	r3,r2
2009a580:	e0bfff17 	ldw	r2,-4(fp)
2009a584:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009a588:	10bfffc4 	addi	r2,r2,-1
2009a58c:	103ffe1e 	bne	r2,zero,2009a588 <__flash_rwdata_start+0xffffe404>
2009a590:	00000d06 	br	2009a5c8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009a594:	e0fffd17 	ldw	r3,-12(fp)
2009a598:	008003f4 	movhi	r2,15
2009a59c:	10909004 	addi	r2,r2,16960
2009a5a0:	1885383a 	mul	r2,r3,r2
2009a5a4:	0101dcf4 	movhi	r4,1907
2009a5a8:	21165004 	addi	r4,r4,22848
2009a5ac:	100b883a 	mov	r5,r2
2009a5b0:	00866700 	call	20086670 <__udivsi3>
2009a5b4:	1007883a 	mov	r3,r2
2009a5b8:	e0bfff17 	ldw	r2,-4(fp)
2009a5bc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
2009a5c0:	10bfffc4 	addi	r2,r2,-1
2009a5c4:	00bffe16 	blt	zero,r2,2009a5c0 <__flash_rwdata_start+0xffffe43c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
2009a5c8:	0005883a 	mov	r2,zero
}
2009a5cc:	e037883a 	mov	sp,fp
2009a5d0:	dfc00117 	ldw	ra,4(sp)
2009a5d4:	df000017 	ldw	fp,0(sp)
2009a5d8:	dec00204 	addi	sp,sp,8
2009a5dc:	f800283a 	ret

2009a5e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
2009a5e0:	defffe04 	addi	sp,sp,-8
2009a5e4:	df000115 	stw	fp,4(sp)
2009a5e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2009a5ec:	e03fff15 	stw	zero,-4(fp)
2009a5f0:	00000506 	br	2009a608 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
2009a5f4:	e0bfff17 	ldw	r2,-4(fp)
2009a5f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2009a5fc:	e0bfff17 	ldw	r2,-4(fp)
2009a600:	10800804 	addi	r2,r2,32
2009a604:	e0bfff15 	stw	r2,-4(fp)
2009a608:	e0bfff17 	ldw	r2,-4(fp)
2009a60c:	10900030 	cmpltui	r2,r2,16384
2009a610:	103ff81e 	bne	r2,zero,2009a5f4 <__flash_rwdata_start+0xffffe470>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
2009a614:	e037883a 	mov	sp,fp
2009a618:	df000017 	ldw	fp,0(sp)
2009a61c:	dec00104 	addi	sp,sp,4
2009a620:	f800283a 	ret

2009a624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009a624:	defffe04 	addi	sp,sp,-8
2009a628:	dfc00115 	stw	ra,4(sp)
2009a62c:	df000015 	stw	fp,0(sp)
2009a630:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009a634:	00800034 	movhi	r2,0
2009a638:	1088e804 	addi	r2,r2,9120
2009a63c:	10800017 	ldw	r2,0(r2)
2009a640:	10000526 	beq	r2,zero,2009a658 <alt_get_errno+0x34>
2009a644:	00800034 	movhi	r2,0
2009a648:	1088e804 	addi	r2,r2,9120
2009a64c:	10800017 	ldw	r2,0(r2)
2009a650:	103ee83a 	callr	r2
2009a654:	00000206 	br	2009a660 <alt_get_errno+0x3c>
2009a658:	00800034 	movhi	r2,0
2009a65c:	1088f504 	addi	r2,r2,9172
}
2009a660:	e037883a 	mov	sp,fp
2009a664:	dfc00117 	ldw	ra,4(sp)
2009a668:	df000017 	ldw	fp,0(sp)
2009a66c:	dec00204 	addi	sp,sp,8
2009a670:	f800283a 	ret

2009a674 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
2009a674:	defffa04 	addi	sp,sp,-24
2009a678:	dfc00515 	stw	ra,20(sp)
2009a67c:	df000415 	stw	fp,16(sp)
2009a680:	df000404 	addi	fp,sp,16
2009a684:	e13ffe15 	stw	r4,-8(fp)
2009a688:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2009a68c:	e0bffe17 	ldw	r2,-8(fp)
2009a690:	10000326 	beq	r2,zero,2009a6a0 <alt_dev_llist_insert+0x2c>
2009a694:	e0bffe17 	ldw	r2,-8(fp)
2009a698:	10800217 	ldw	r2,8(r2)
2009a69c:	1000061e 	bne	r2,zero,2009a6b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
2009a6a0:	009a6240 	call	2009a624 <alt_get_errno>
2009a6a4:	1007883a 	mov	r3,r2
2009a6a8:	00800584 	movi	r2,22
2009a6ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
2009a6b0:	00bffa84 	movi	r2,-22
2009a6b4:	00001306 	br	2009a704 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
2009a6b8:	e0bffe17 	ldw	r2,-8(fp)
2009a6bc:	e0ffff17 	ldw	r3,-4(fp)
2009a6c0:	e0fffc15 	stw	r3,-16(fp)
2009a6c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009a6c8:	e0bffd17 	ldw	r2,-12(fp)
2009a6cc:	e0fffc17 	ldw	r3,-16(fp)
2009a6d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
2009a6d4:	e0bffc17 	ldw	r2,-16(fp)
2009a6d8:	10c00017 	ldw	r3,0(r2)
2009a6dc:	e0bffd17 	ldw	r2,-12(fp)
2009a6e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
2009a6e4:	e0bffc17 	ldw	r2,-16(fp)
2009a6e8:	10800017 	ldw	r2,0(r2)
2009a6ec:	e0fffd17 	ldw	r3,-12(fp)
2009a6f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
2009a6f4:	e0bffc17 	ldw	r2,-16(fp)
2009a6f8:	e0fffd17 	ldw	r3,-12(fp)
2009a6fc:	10c00015 	stw	r3,0(r2)

  return 0;  
2009a700:	0005883a 	mov	r2,zero
}
2009a704:	e037883a 	mov	sp,fp
2009a708:	dfc00117 	ldw	ra,4(sp)
2009a70c:	df000017 	ldw	fp,0(sp)
2009a710:	dec00204 	addi	sp,sp,8
2009a714:	f800283a 	ret

2009a718 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
2009a718:	defffd04 	addi	sp,sp,-12
2009a71c:	dfc00215 	stw	ra,8(sp)
2009a720:	df000115 	stw	fp,4(sp)
2009a724:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009a728:	008802b4 	movhi	r2,8202
2009a72c:	10ae4604 	addi	r2,r2,-18152
2009a730:	e0bfff15 	stw	r2,-4(fp)
2009a734:	00000606 	br	2009a750 <_do_ctors+0x38>
        (*ctor) (); 
2009a738:	e0bfff17 	ldw	r2,-4(fp)
2009a73c:	10800017 	ldw	r2,0(r2)
2009a740:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
2009a744:	e0bfff17 	ldw	r2,-4(fp)
2009a748:	10bfff04 	addi	r2,r2,-4
2009a74c:	e0bfff15 	stw	r2,-4(fp)
2009a750:	e0ffff17 	ldw	r3,-4(fp)
2009a754:	008802b4 	movhi	r2,8202
2009a758:	10ae4704 	addi	r2,r2,-18148
2009a75c:	18bff62e 	bgeu	r3,r2,2009a738 <__flash_rwdata_start+0xffffe5b4>
        (*ctor) (); 
}
2009a760:	e037883a 	mov	sp,fp
2009a764:	dfc00117 	ldw	ra,4(sp)
2009a768:	df000017 	ldw	fp,0(sp)
2009a76c:	dec00204 	addi	sp,sp,8
2009a770:	f800283a 	ret

2009a774 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
2009a774:	defffd04 	addi	sp,sp,-12
2009a778:	dfc00215 	stw	ra,8(sp)
2009a77c:	df000115 	stw	fp,4(sp)
2009a780:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009a784:	008802b4 	movhi	r2,8202
2009a788:	10ae4604 	addi	r2,r2,-18152
2009a78c:	e0bfff15 	stw	r2,-4(fp)
2009a790:	00000606 	br	2009a7ac <_do_dtors+0x38>
        (*dtor) (); 
2009a794:	e0bfff17 	ldw	r2,-4(fp)
2009a798:	10800017 	ldw	r2,0(r2)
2009a79c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
2009a7a0:	e0bfff17 	ldw	r2,-4(fp)
2009a7a4:	10bfff04 	addi	r2,r2,-4
2009a7a8:	e0bfff15 	stw	r2,-4(fp)
2009a7ac:	e0ffff17 	ldw	r3,-4(fp)
2009a7b0:	008802b4 	movhi	r2,8202
2009a7b4:	10ae4704 	addi	r2,r2,-18148
2009a7b8:	18bff62e 	bgeu	r3,r2,2009a794 <__flash_rwdata_start+0xffffe610>
        (*dtor) (); 
}
2009a7bc:	e037883a 	mov	sp,fp
2009a7c0:	dfc00117 	ldw	ra,4(sp)
2009a7c4:	df000017 	ldw	fp,0(sp)
2009a7c8:	dec00204 	addi	sp,sp,8
2009a7cc:	f800283a 	ret

2009a7d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
2009a7d0:	defffa04 	addi	sp,sp,-24
2009a7d4:	dfc00515 	stw	ra,20(sp)
2009a7d8:	df000415 	stw	fp,16(sp)
2009a7dc:	df000404 	addi	fp,sp,16
2009a7e0:	e13ffe15 	stw	r4,-8(fp)
2009a7e4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
2009a7e8:	e0bfff17 	ldw	r2,-4(fp)
2009a7ec:	10800017 	ldw	r2,0(r2)
2009a7f0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
2009a7f4:	e13ffe17 	ldw	r4,-8(fp)
2009a7f8:	0089e9c0 	call	20089e9c <strlen>
2009a7fc:	10800044 	addi	r2,r2,1
2009a800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009a804:	00000d06 	br	2009a83c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
2009a808:	e0bffc17 	ldw	r2,-16(fp)
2009a80c:	10c00217 	ldw	r3,8(r2)
2009a810:	e0bffd17 	ldw	r2,-12(fp)
2009a814:	1809883a 	mov	r4,r3
2009a818:	e17ffe17 	ldw	r5,-8(fp)
2009a81c:	100d883a 	mov	r6,r2
2009a820:	00898e40 	call	200898e4 <memcmp>
2009a824:	1000021e 	bne	r2,zero,2009a830 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
2009a828:	e0bffc17 	ldw	r2,-16(fp)
2009a82c:	00000706 	br	2009a84c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
2009a830:	e0bffc17 	ldw	r2,-16(fp)
2009a834:	10800017 	ldw	r2,0(r2)
2009a838:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
2009a83c:	e0fffc17 	ldw	r3,-16(fp)
2009a840:	e0bfff17 	ldw	r2,-4(fp)
2009a844:	18bff01e 	bne	r3,r2,2009a808 <__flash_rwdata_start+0xffffe684>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
2009a848:	0005883a 	mov	r2,zero
}
2009a84c:	e037883a 	mov	sp,fp
2009a850:	dfc00117 	ldw	ra,4(sp)
2009a854:	df000017 	ldw	fp,0(sp)
2009a858:	dec00204 	addi	sp,sp,8
2009a85c:	f800283a 	ret

2009a860 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
2009a860:	defffe04 	addi	sp,sp,-8
2009a864:	dfc00115 	stw	ra,4(sp)
2009a868:	df000015 	stw	fp,0(sp)
2009a86c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
2009a870:	0009883a 	mov	r4,zero
2009a874:	01440004 	movi	r5,4096
2009a878:	009b3600 	call	2009b360 <alt_icache_flush>
#endif
}
2009a87c:	e037883a 	mov	sp,fp
2009a880:	dfc00117 	ldw	ra,4(sp)
2009a884:	df000017 	ldw	fp,0(sp)
2009a888:	dec00204 	addi	sp,sp,8
2009a88c:	f800283a 	ret

2009a890 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009a890:	defff904 	addi	sp,sp,-28
2009a894:	dfc00615 	stw	ra,24(sp)
2009a898:	df000515 	stw	fp,20(sp)
2009a89c:	df000504 	addi	fp,sp,20
2009a8a0:	e13ffc15 	stw	r4,-16(fp)
2009a8a4:	e17ffd15 	stw	r5,-12(fp)
2009a8a8:	e1bffe15 	stw	r6,-8(fp)
2009a8ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
2009a8b0:	e0800217 	ldw	r2,8(fp)
2009a8b4:	d8800015 	stw	r2,0(sp)
2009a8b8:	e13ffc17 	ldw	r4,-16(fp)
2009a8bc:	e17ffd17 	ldw	r5,-12(fp)
2009a8c0:	e1bffe17 	ldw	r6,-8(fp)
2009a8c4:	e1ffff17 	ldw	r7,-4(fp)
2009a8c8:	009aa700 	call	2009aa70 <alt_iic_isr_register>
}  
2009a8cc:	e037883a 	mov	sp,fp
2009a8d0:	dfc00117 	ldw	ra,4(sp)
2009a8d4:	df000017 	ldw	fp,0(sp)
2009a8d8:	dec00204 	addi	sp,sp,8
2009a8dc:	f800283a 	ret

2009a8e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
2009a8e0:	defff904 	addi	sp,sp,-28
2009a8e4:	df000615 	stw	fp,24(sp)
2009a8e8:	df000604 	addi	fp,sp,24
2009a8ec:	e13ffe15 	stw	r4,-8(fp)
2009a8f0:	e17fff15 	stw	r5,-4(fp)
2009a8f4:	e0bfff17 	ldw	r2,-4(fp)
2009a8f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a8fc:	0005303a 	rdctl	r2,status
2009a900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a904:	e0fffb17 	ldw	r3,-20(fp)
2009a908:	00bfff84 	movi	r2,-2
2009a90c:	1884703a 	and	r2,r3,r2
2009a910:	1001703a 	wrctl	status,r2
  
  return context;
2009a914:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009a918:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
2009a91c:	e0bffa17 	ldw	r2,-24(fp)
2009a920:	00c00044 	movi	r3,1
2009a924:	1884983a 	sll	r2,r3,r2
2009a928:	1007883a 	mov	r3,r2
2009a92c:	00800034 	movhi	r2,0
2009a930:	10890004 	addi	r2,r2,9216
2009a934:	10800017 	ldw	r2,0(r2)
2009a938:	1886b03a 	or	r3,r3,r2
2009a93c:	00800034 	movhi	r2,0
2009a940:	10890004 	addi	r2,r2,9216
2009a944:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009a948:	00800034 	movhi	r2,0
2009a94c:	10890004 	addi	r2,r2,9216
2009a950:	10800017 	ldw	r2,0(r2)
2009a954:	100170fa 	wrctl	ienable,r2
2009a958:	e0bffc17 	ldw	r2,-16(fp)
2009a95c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009a960:	e0bffd17 	ldw	r2,-12(fp)
2009a964:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009a968:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
2009a96c:	0001883a 	nop
}
2009a970:	e037883a 	mov	sp,fp
2009a974:	df000017 	ldw	fp,0(sp)
2009a978:	dec00104 	addi	sp,sp,4
2009a97c:	f800283a 	ret

2009a980 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
2009a980:	defff904 	addi	sp,sp,-28
2009a984:	df000615 	stw	fp,24(sp)
2009a988:	df000604 	addi	fp,sp,24
2009a98c:	e13ffe15 	stw	r4,-8(fp)
2009a990:	e17fff15 	stw	r5,-4(fp)
2009a994:	e0bfff17 	ldw	r2,-4(fp)
2009a998:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009a99c:	0005303a 	rdctl	r2,status
2009a9a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009a9a4:	e0fffb17 	ldw	r3,-20(fp)
2009a9a8:	00bfff84 	movi	r2,-2
2009a9ac:	1884703a 	and	r2,r3,r2
2009a9b0:	1001703a 	wrctl	status,r2
  
  return context;
2009a9b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
2009a9b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
2009a9bc:	e0bffa17 	ldw	r2,-24(fp)
2009a9c0:	00c00044 	movi	r3,1
2009a9c4:	1884983a 	sll	r2,r3,r2
2009a9c8:	0084303a 	nor	r2,zero,r2
2009a9cc:	1007883a 	mov	r3,r2
2009a9d0:	00800034 	movhi	r2,0
2009a9d4:	10890004 	addi	r2,r2,9216
2009a9d8:	10800017 	ldw	r2,0(r2)
2009a9dc:	1886703a 	and	r3,r3,r2
2009a9e0:	00800034 	movhi	r2,0
2009a9e4:	10890004 	addi	r2,r2,9216
2009a9e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
2009a9ec:	00800034 	movhi	r2,0
2009a9f0:	10890004 	addi	r2,r2,9216
2009a9f4:	10800017 	ldw	r2,0(r2)
2009a9f8:	100170fa 	wrctl	ienable,r2
2009a9fc:	e0bffc17 	ldw	r2,-16(fp)
2009aa00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009aa04:	e0bffd17 	ldw	r2,-12(fp)
2009aa08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
2009aa0c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
2009aa10:	0001883a 	nop
}
2009aa14:	e037883a 	mov	sp,fp
2009aa18:	df000017 	ldw	fp,0(sp)
2009aa1c:	dec00104 	addi	sp,sp,4
2009aa20:	f800283a 	ret

2009aa24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
2009aa24:	defffc04 	addi	sp,sp,-16
2009aa28:	df000315 	stw	fp,12(sp)
2009aa2c:	df000304 	addi	fp,sp,12
2009aa30:	e13ffe15 	stw	r4,-8(fp)
2009aa34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
2009aa38:	000530fa 	rdctl	r2,ienable
2009aa3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
2009aa40:	e0bfff17 	ldw	r2,-4(fp)
2009aa44:	00c00044 	movi	r3,1
2009aa48:	1884983a 	sll	r2,r3,r2
2009aa4c:	1007883a 	mov	r3,r2
2009aa50:	e0bffd17 	ldw	r2,-12(fp)
2009aa54:	1884703a 	and	r2,r3,r2
2009aa58:	1004c03a 	cmpne	r2,r2,zero
2009aa5c:	10803fcc 	andi	r2,r2,255
}
2009aa60:	e037883a 	mov	sp,fp
2009aa64:	df000017 	ldw	fp,0(sp)
2009aa68:	dec00104 	addi	sp,sp,4
2009aa6c:	f800283a 	ret

2009aa70 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
2009aa70:	defff504 	addi	sp,sp,-44
2009aa74:	dfc00a15 	stw	ra,40(sp)
2009aa78:	df000915 	stw	fp,36(sp)
2009aa7c:	df000904 	addi	fp,sp,36
2009aa80:	e13ffc15 	stw	r4,-16(fp)
2009aa84:	e17ffd15 	stw	r5,-12(fp)
2009aa88:	e1bffe15 	stw	r6,-8(fp)
2009aa8c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
2009aa90:	00bffa84 	movi	r2,-22
2009aa94:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
2009aa98:	e0bffd17 	ldw	r2,-12(fp)
2009aa9c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
2009aaa0:	e0bff817 	ldw	r2,-32(fp)
2009aaa4:	10800808 	cmpgei	r2,r2,32
2009aaa8:	1000271e 	bne	r2,zero,2009ab48 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009aaac:	0005303a 	rdctl	r2,status
2009aab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009aab4:	e0fffa17 	ldw	r3,-24(fp)
2009aab8:	00bfff84 	movi	r2,-2
2009aabc:	1884703a 	and	r2,r3,r2
2009aac0:	1001703a 	wrctl	status,r2
  
  return context;
2009aac4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
2009aac8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
2009aacc:	00800034 	movhi	r2,0
2009aad0:	108afe04 	addi	r2,r2,11256
2009aad4:	e0fff817 	ldw	r3,-32(fp)
2009aad8:	180690fa 	slli	r3,r3,3
2009aadc:	10c5883a 	add	r2,r2,r3
2009aae0:	e0fffe17 	ldw	r3,-8(fp)
2009aae4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
2009aae8:	00800034 	movhi	r2,0
2009aaec:	108afe04 	addi	r2,r2,11256
2009aaf0:	e0fff817 	ldw	r3,-32(fp)
2009aaf4:	180690fa 	slli	r3,r3,3
2009aaf8:	18c00104 	addi	r3,r3,4
2009aafc:	10c5883a 	add	r2,r2,r3
2009ab00:	e0ffff17 	ldw	r3,-4(fp)
2009ab04:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
2009ab08:	e0bffe17 	ldw	r2,-8(fp)
2009ab0c:	10000526 	beq	r2,zero,2009ab24 <alt_iic_isr_register+0xb4>
2009ab10:	e0bff817 	ldw	r2,-32(fp)
2009ab14:	e13ffc17 	ldw	r4,-16(fp)
2009ab18:	100b883a 	mov	r5,r2
2009ab1c:	009a8e00 	call	2009a8e0 <alt_ic_irq_enable>
2009ab20:	00000406 	br	2009ab34 <alt_iic_isr_register+0xc4>
2009ab24:	e0bff817 	ldw	r2,-32(fp)
2009ab28:	e13ffc17 	ldw	r4,-16(fp)
2009ab2c:	100b883a 	mov	r5,r2
2009ab30:	009a9800 	call	2009a980 <alt_ic_irq_disable>
2009ab34:	e0bff715 	stw	r2,-36(fp)
2009ab38:	e0bff917 	ldw	r2,-28(fp)
2009ab3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009ab40:	e0bffb17 	ldw	r2,-20(fp)
2009ab44:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
2009ab48:	e0bff717 	ldw	r2,-36(fp)
}
2009ab4c:	e037883a 	mov	sp,fp
2009ab50:	dfc00117 	ldw	ra,4(sp)
2009ab54:	df000017 	ldw	fp,0(sp)
2009ab58:	dec00204 	addi	sp,sp,8
2009ab5c:	f800283a 	ret

2009ab60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
2009ab60:	defff904 	addi	sp,sp,-28
2009ab64:	dfc00615 	stw	ra,24(sp)
2009ab68:	df000515 	stw	fp,20(sp)
2009ab6c:	df000504 	addi	fp,sp,20
2009ab70:	e13ffc15 	stw	r4,-16(fp)
2009ab74:	e17ffd15 	stw	r5,-12(fp)
2009ab78:	e1bffe15 	stw	r6,-8(fp)
2009ab7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
2009ab80:	e13ffd17 	ldw	r4,-12(fp)
2009ab84:	e17ffe17 	ldw	r5,-8(fp)
2009ab88:	e1bfff17 	ldw	r6,-4(fp)
2009ab8c:	009adb40 	call	2009adb4 <open>
2009ab90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
2009ab94:	e0bffb17 	ldw	r2,-20(fp)
2009ab98:	10001c16 	blt	r2,zero,2009ac0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
2009ab9c:	00800034 	movhi	r2,0
2009aba0:	10844d04 	addi	r2,r2,4404
2009aba4:	e0fffb17 	ldw	r3,-20(fp)
2009aba8:	18c00324 	muli	r3,r3,12
2009abac:	10c5883a 	add	r2,r2,r3
2009abb0:	10c00017 	ldw	r3,0(r2)
2009abb4:	e0bffc17 	ldw	r2,-16(fp)
2009abb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
2009abbc:	00800034 	movhi	r2,0
2009abc0:	10844d04 	addi	r2,r2,4404
2009abc4:	e0fffb17 	ldw	r3,-20(fp)
2009abc8:	18c00324 	muli	r3,r3,12
2009abcc:	18c00104 	addi	r3,r3,4
2009abd0:	10c5883a 	add	r2,r2,r3
2009abd4:	10c00017 	ldw	r3,0(r2)
2009abd8:	e0bffc17 	ldw	r2,-16(fp)
2009abdc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
2009abe0:	00800034 	movhi	r2,0
2009abe4:	10844d04 	addi	r2,r2,4404
2009abe8:	e0fffb17 	ldw	r3,-20(fp)
2009abec:	18c00324 	muli	r3,r3,12
2009abf0:	18c00204 	addi	r3,r3,8
2009abf4:	10c5883a 	add	r2,r2,r3
2009abf8:	10c00017 	ldw	r3,0(r2)
2009abfc:	e0bffc17 	ldw	r2,-16(fp)
2009ac00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
2009ac04:	e13ffb17 	ldw	r4,-20(fp)
2009ac08:	00974c80 	call	200974c8 <alt_release_fd>
  }
} 
2009ac0c:	e037883a 	mov	sp,fp
2009ac10:	dfc00117 	ldw	ra,4(sp)
2009ac14:	df000017 	ldw	fp,0(sp)
2009ac18:	dec00204 	addi	sp,sp,8
2009ac1c:	f800283a 	ret

2009ac20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
2009ac20:	defffb04 	addi	sp,sp,-20
2009ac24:	dfc00415 	stw	ra,16(sp)
2009ac28:	df000315 	stw	fp,12(sp)
2009ac2c:	df000304 	addi	fp,sp,12
2009ac30:	e13ffd15 	stw	r4,-12(fp)
2009ac34:	e17ffe15 	stw	r5,-8(fp)
2009ac38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
2009ac3c:	01000034 	movhi	r4,0
2009ac40:	21045004 	addi	r4,r4,4416
2009ac44:	e17ffd17 	ldw	r5,-12(fp)
2009ac48:	01800044 	movi	r6,1
2009ac4c:	01c07fc4 	movi	r7,511
2009ac50:	009ab600 	call	2009ab60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
2009ac54:	01000034 	movhi	r4,0
2009ac58:	21044d04 	addi	r4,r4,4404
2009ac5c:	e17ffe17 	ldw	r5,-8(fp)
2009ac60:	000d883a 	mov	r6,zero
2009ac64:	01c07fc4 	movi	r7,511
2009ac68:	009ab600 	call	2009ab60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
2009ac6c:	01000034 	movhi	r4,0
2009ac70:	21045304 	addi	r4,r4,4428
2009ac74:	e17fff17 	ldw	r5,-4(fp)
2009ac78:	01800044 	movi	r6,1
2009ac7c:	01c07fc4 	movi	r7,511
2009ac80:	009ab600 	call	2009ab60 <alt_open_fd>
}  
2009ac84:	e037883a 	mov	sp,fp
2009ac88:	dfc00117 	ldw	ra,4(sp)
2009ac8c:	df000017 	ldw	fp,0(sp)
2009ac90:	dec00204 	addi	sp,sp,8
2009ac94:	f800283a 	ret

2009ac98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
2009ac98:	defffe04 	addi	sp,sp,-8
2009ac9c:	dfc00115 	stw	ra,4(sp)
2009aca0:	df000015 	stw	fp,0(sp)
2009aca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
2009aca8:	00800034 	movhi	r2,0
2009acac:	1088e804 	addi	r2,r2,9120
2009acb0:	10800017 	ldw	r2,0(r2)
2009acb4:	10000526 	beq	r2,zero,2009accc <alt_get_errno+0x34>
2009acb8:	00800034 	movhi	r2,0
2009acbc:	1088e804 	addi	r2,r2,9120
2009acc0:	10800017 	ldw	r2,0(r2)
2009acc4:	103ee83a 	callr	r2
2009acc8:	00000206 	br	2009acd4 <alt_get_errno+0x3c>
2009accc:	00800034 	movhi	r2,0
2009acd0:	1088f504 	addi	r2,r2,9172
}
2009acd4:	e037883a 	mov	sp,fp
2009acd8:	dfc00117 	ldw	ra,4(sp)
2009acdc:	df000017 	ldw	fp,0(sp)
2009ace0:	dec00204 	addi	sp,sp,8
2009ace4:	f800283a 	ret

2009ace8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
2009ace8:	defffd04 	addi	sp,sp,-12
2009acec:	df000215 	stw	fp,8(sp)
2009acf0:	df000204 	addi	fp,sp,8
2009acf4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
2009acf8:	e0bfff17 	ldw	r2,-4(fp)
2009acfc:	10800217 	ldw	r2,8(r2)
2009ad00:	10d00034 	orhi	r3,r2,16384
2009ad04:	e0bfff17 	ldw	r2,-4(fp)
2009ad08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009ad0c:	e03ffe15 	stw	zero,-8(fp)
2009ad10:	00001d06 	br	2009ad88 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009ad14:	00800034 	movhi	r2,0
2009ad18:	10844d04 	addi	r2,r2,4404
2009ad1c:	e0fffe17 	ldw	r3,-8(fp)
2009ad20:	18c00324 	muli	r3,r3,12
2009ad24:	10c5883a 	add	r2,r2,r3
2009ad28:	10c00017 	ldw	r3,0(r2)
2009ad2c:	e0bfff17 	ldw	r2,-4(fp)
2009ad30:	10800017 	ldw	r2,0(r2)
2009ad34:	1880111e 	bne	r3,r2,2009ad7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009ad38:	00800034 	movhi	r2,0
2009ad3c:	10844d04 	addi	r2,r2,4404
2009ad40:	e0fffe17 	ldw	r3,-8(fp)
2009ad44:	18c00324 	muli	r3,r3,12
2009ad48:	18c00204 	addi	r3,r3,8
2009ad4c:	10c5883a 	add	r2,r2,r3
2009ad50:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
2009ad54:	1000090e 	bge	r2,zero,2009ad7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
2009ad58:	e0bffe17 	ldw	r2,-8(fp)
2009ad5c:	10c00324 	muli	r3,r2,12
2009ad60:	00800034 	movhi	r2,0
2009ad64:	10844d04 	addi	r2,r2,4404
2009ad68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
2009ad6c:	e0bfff17 	ldw	r2,-4(fp)
2009ad70:	18800226 	beq	r3,r2,2009ad7c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
2009ad74:	00bffcc4 	movi	r2,-13
2009ad78:	00000a06 	br	2009ada4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
2009ad7c:	e0bffe17 	ldw	r2,-8(fp)
2009ad80:	10800044 	addi	r2,r2,1
2009ad84:	e0bffe15 	stw	r2,-8(fp)
2009ad88:	00800034 	movhi	r2,0
2009ad8c:	1088e704 	addi	r2,r2,9116
2009ad90:	10800017 	ldw	r2,0(r2)
2009ad94:	1007883a 	mov	r3,r2
2009ad98:	e0bffe17 	ldw	r2,-8(fp)
2009ad9c:	18bfdd2e 	bgeu	r3,r2,2009ad14 <__flash_rwdata_start+0xffffeb90>
    }
  }
  
  /* The device is not locked */
 
  return 0;
2009ada0:	0005883a 	mov	r2,zero
}
2009ada4:	e037883a 	mov	sp,fp
2009ada8:	df000017 	ldw	fp,0(sp)
2009adac:	dec00104 	addi	sp,sp,4
2009adb0:	f800283a 	ret

2009adb4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
2009adb4:	defff604 	addi	sp,sp,-40
2009adb8:	dfc00915 	stw	ra,36(sp)
2009adbc:	df000815 	stw	fp,32(sp)
2009adc0:	df000804 	addi	fp,sp,32
2009adc4:	e13ffd15 	stw	r4,-12(fp)
2009adc8:	e17ffe15 	stw	r5,-8(fp)
2009adcc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
2009add0:	00bfffc4 	movi	r2,-1
2009add4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
2009add8:	00bffb44 	movi	r2,-19
2009addc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
2009ade0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
2009ade4:	e13ffd17 	ldw	r4,-12(fp)
2009ade8:	01400034 	movhi	r5,0
2009adec:	2948e504 	addi	r5,r5,9108
2009adf0:	009a7d00 	call	2009a7d0 <alt_find_dev>
2009adf4:	e0bff815 	stw	r2,-32(fp)
2009adf8:	e0bff817 	ldw	r2,-32(fp)
2009adfc:	1000051e 	bne	r2,zero,2009ae14 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
2009ae00:	e13ffd17 	ldw	r4,-12(fp)
2009ae04:	009b1980 	call	2009b198 <alt_find_file>
2009ae08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
2009ae0c:	00800044 	movi	r2,1
2009ae10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
2009ae14:	e0bff817 	ldw	r2,-32(fp)
2009ae18:	10002926 	beq	r2,zero,2009aec0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
2009ae1c:	e13ff817 	ldw	r4,-32(fp)
2009ae20:	009b2ac0 	call	2009b2ac <alt_get_fd>
2009ae24:	e0bff915 	stw	r2,-28(fp)
2009ae28:	e0bff917 	ldw	r2,-28(fp)
2009ae2c:	1000030e 	bge	r2,zero,2009ae3c <open+0x88>
    {
      status = index;
2009ae30:	e0bff917 	ldw	r2,-28(fp)
2009ae34:	e0bffa15 	stw	r2,-24(fp)
2009ae38:	00002306 	br	2009aec8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
2009ae3c:	e0bff917 	ldw	r2,-28(fp)
2009ae40:	10c00324 	muli	r3,r2,12
2009ae44:	00800034 	movhi	r2,0
2009ae48:	10844d04 	addi	r2,r2,4404
2009ae4c:	1885883a 	add	r2,r3,r2
2009ae50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
2009ae54:	e0fffe17 	ldw	r3,-8(fp)
2009ae58:	00900034 	movhi	r2,16384
2009ae5c:	10bfffc4 	addi	r2,r2,-1
2009ae60:	1886703a 	and	r3,r3,r2
2009ae64:	e0bffc17 	ldw	r2,-16(fp)
2009ae68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
2009ae6c:	e0bffb17 	ldw	r2,-20(fp)
2009ae70:	1000051e 	bne	r2,zero,2009ae88 <open+0xd4>
2009ae74:	e13ffc17 	ldw	r4,-16(fp)
2009ae78:	009ace80 	call	2009ace8 <alt_file_locked>
2009ae7c:	e0bffa15 	stw	r2,-24(fp)
2009ae80:	e0bffa17 	ldw	r2,-24(fp)
2009ae84:	10001016 	blt	r2,zero,2009aec8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
2009ae88:	e0bff817 	ldw	r2,-32(fp)
2009ae8c:	10800317 	ldw	r2,12(r2)
2009ae90:	10000826 	beq	r2,zero,2009aeb4 <open+0x100>
2009ae94:	e0bff817 	ldw	r2,-32(fp)
2009ae98:	10800317 	ldw	r2,12(r2)
2009ae9c:	e13ffc17 	ldw	r4,-16(fp)
2009aea0:	e17ffd17 	ldw	r5,-12(fp)
2009aea4:	e1bffe17 	ldw	r6,-8(fp)
2009aea8:	e1ffff17 	ldw	r7,-4(fp)
2009aeac:	103ee83a 	callr	r2
2009aeb0:	00000106 	br	2009aeb8 <open+0x104>
2009aeb4:	0005883a 	mov	r2,zero
2009aeb8:	e0bffa15 	stw	r2,-24(fp)
2009aebc:	00000206 	br	2009aec8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
2009aec0:	00bffb44 	movi	r2,-19
2009aec4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
2009aec8:	e0bffa17 	ldw	r2,-24(fp)
2009aecc:	1000090e 	bge	r2,zero,2009aef4 <open+0x140>
  {
    alt_release_fd (index);  
2009aed0:	e13ff917 	ldw	r4,-28(fp)
2009aed4:	00974c80 	call	200974c8 <alt_release_fd>
    ALT_ERRNO = -status;
2009aed8:	009ac980 	call	2009ac98 <alt_get_errno>
2009aedc:	1007883a 	mov	r3,r2
2009aee0:	e0bffa17 	ldw	r2,-24(fp)
2009aee4:	0085c83a 	sub	r2,zero,r2
2009aee8:	18800015 	stw	r2,0(r3)
    return -1;
2009aeec:	00bfffc4 	movi	r2,-1
2009aef0:	00000106 	br	2009aef8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
2009aef4:	e0bff917 	ldw	r2,-28(fp)
}
2009aef8:	e037883a 	mov	sp,fp
2009aefc:	dfc00117 	ldw	ra,4(sp)
2009af00:	df000017 	ldw	fp,0(sp)
2009af04:	dec00204 	addi	sp,sp,8
2009af08:	f800283a 	ret

2009af0c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
2009af0c:	defff204 	addi	sp,sp,-56
2009af10:	dfc00a15 	stw	ra,40(sp)
2009af14:	df000915 	stw	fp,36(sp)
2009af18:	df000904 	addi	fp,sp,36
2009af1c:	e1400215 	stw	r5,8(fp)
2009af20:	e1800315 	stw	r6,12(fp)
2009af24:	e1c00415 	stw	r7,16(fp)
2009af28:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
2009af2c:	e0800204 	addi	r2,fp,8
2009af30:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
2009af34:	e0bfff17 	ldw	r2,-4(fp)
2009af38:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
2009af3c:	00007106 	br	2009b104 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
2009af40:	e0bff807 	ldb	r2,-32(fp)
2009af44:	10800960 	cmpeqi	r2,r2,37
2009af48:	1000041e 	bne	r2,zero,2009af5c <alt_printf+0x50>
        {
            alt_putchar(c);
2009af4c:	e0bff807 	ldb	r2,-32(fp)
2009af50:	1009883a 	mov	r4,r2
2009af54:	009b1340 	call	2009b134 <alt_putchar>
2009af58:	00006a06 	br	2009b104 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
2009af5c:	e0bff717 	ldw	r2,-36(fp)
2009af60:	10c00044 	addi	r3,r2,1
2009af64:	e0fff715 	stw	r3,-36(fp)
2009af68:	10800003 	ldbu	r2,0(r2)
2009af6c:	e0bff805 	stb	r2,-32(fp)
2009af70:	e0bff807 	ldb	r2,-32(fp)
2009af74:	10006226 	beq	r2,zero,2009b100 <alt_printf+0x1f4>
            {
                if (c == '%')
2009af78:	e0bff807 	ldb	r2,-32(fp)
2009af7c:	10800958 	cmpnei	r2,r2,37
2009af80:	1000041e 	bne	r2,zero,2009af94 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
2009af84:	e0bff807 	ldb	r2,-32(fp)
2009af88:	1009883a 	mov	r4,r2
2009af8c:	009b1340 	call	2009b134 <alt_putchar>
2009af90:	00005c06 	br	2009b104 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
2009af94:	e0bff807 	ldb	r2,-32(fp)
2009af98:	108018d8 	cmpnei	r2,r2,99
2009af9c:	1000081e 	bne	r2,zero,2009afc0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
2009afa0:	e0bffe17 	ldw	r2,-8(fp)
2009afa4:	10c00104 	addi	r3,r2,4
2009afa8:	e0fffe15 	stw	r3,-8(fp)
2009afac:	10800017 	ldw	r2,0(r2)
2009afb0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
2009afb4:	e13ffd17 	ldw	r4,-12(fp)
2009afb8:	009b1340 	call	2009b134 <alt_putchar>
2009afbc:	00005106 	br	2009b104 <alt_printf+0x1f8>
                }
                else if (c == 'x')
2009afc0:	e0bff807 	ldb	r2,-32(fp)
2009afc4:	10801e18 	cmpnei	r2,r2,120
2009afc8:	1000341e 	bne	r2,zero,2009b09c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
2009afcc:	e0bffe17 	ldw	r2,-8(fp)
2009afd0:	10c00104 	addi	r3,r2,4
2009afd4:	e0fffe15 	stw	r3,-8(fp)
2009afd8:	10800017 	ldw	r2,0(r2)
2009afdc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
2009afe0:	e0bffb17 	ldw	r2,-20(fp)
2009afe4:	1000031e 	bne	r2,zero,2009aff4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
2009afe8:	01000c04 	movi	r4,48
2009afec:	009b1340 	call	2009b134 <alt_putchar>
                        continue;
2009aff0:	00004406 	br	2009b104 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
2009aff4:	00800704 	movi	r2,28
2009aff8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
2009affc:	00000306 	br	2009b00c <alt_printf+0x100>
                        digit_shift -= 4;
2009b000:	e0bff917 	ldw	r2,-28(fp)
2009b004:	10bfff04 	addi	r2,r2,-4
2009b008:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
2009b00c:	00c003c4 	movi	r3,15
2009b010:	e0bff917 	ldw	r2,-28(fp)
2009b014:	1884983a 	sll	r2,r3,r2
2009b018:	1007883a 	mov	r3,r2
2009b01c:	e0bffb17 	ldw	r2,-20(fp)
2009b020:	1884703a 	and	r2,r3,r2
2009b024:	103ff626 	beq	r2,zero,2009b000 <__flash_rwdata_start+0xffffee7c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009b028:	00001906 	br	2009b090 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
2009b02c:	00c003c4 	movi	r3,15
2009b030:	e0bff917 	ldw	r2,-28(fp)
2009b034:	1884983a 	sll	r2,r3,r2
2009b038:	1007883a 	mov	r3,r2
2009b03c:	e0bffb17 	ldw	r2,-20(fp)
2009b040:	1886703a 	and	r3,r3,r2
2009b044:	e0bff917 	ldw	r2,-28(fp)
2009b048:	1884d83a 	srl	r2,r3,r2
2009b04c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
2009b050:	e0bffc17 	ldw	r2,-16(fp)
2009b054:	108002a8 	cmpgeui	r2,r2,10
2009b058:	1000041e 	bne	r2,zero,2009b06c <alt_printf+0x160>
                            c = '0' + digit;
2009b05c:	e0bffc17 	ldw	r2,-16(fp)
2009b060:	10800c04 	addi	r2,r2,48
2009b064:	e0bff805 	stb	r2,-32(fp)
2009b068:	00000306 	br	2009b078 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
2009b06c:	e0bffc17 	ldw	r2,-16(fp)
2009b070:	108015c4 	addi	r2,r2,87
2009b074:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
2009b078:	e0bff807 	ldb	r2,-32(fp)
2009b07c:	1009883a 	mov	r4,r2
2009b080:	009b1340 	call	2009b134 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
2009b084:	e0bff917 	ldw	r2,-28(fp)
2009b088:	10bfff04 	addi	r2,r2,-4
2009b08c:	e0bff915 	stw	r2,-28(fp)
2009b090:	e0bff917 	ldw	r2,-28(fp)
2009b094:	103fe50e 	bge	r2,zero,2009b02c <__flash_rwdata_start+0xffffeea8>
2009b098:	00001a06 	br	2009b104 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
2009b09c:	e0bff807 	ldb	r2,-32(fp)
2009b0a0:	10801cd8 	cmpnei	r2,r2,115
2009b0a4:	1000151e 	bne	r2,zero,2009b0fc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
2009b0a8:	e0bffe17 	ldw	r2,-8(fp)
2009b0ac:	10c00104 	addi	r3,r2,4
2009b0b0:	e0fffe15 	stw	r3,-8(fp)
2009b0b4:	10800017 	ldw	r2,0(r2)
2009b0b8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
2009b0bc:	00000906 	br	2009b0e4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
2009b0c0:	e0bffa17 	ldw	r2,-24(fp)
2009b0c4:	10c00044 	addi	r3,r2,1
2009b0c8:	e0fffa15 	stw	r3,-24(fp)
2009b0cc:	10800003 	ldbu	r2,0(r2)
2009b0d0:	10803fcc 	andi	r2,r2,255
2009b0d4:	1080201c 	xori	r2,r2,128
2009b0d8:	10bfe004 	addi	r2,r2,-128
2009b0dc:	1009883a 	mov	r4,r2
2009b0e0:	009b1340 	call	2009b134 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
2009b0e4:	e0bffa17 	ldw	r2,-24(fp)
2009b0e8:	10800003 	ldbu	r2,0(r2)
2009b0ec:	10803fcc 	andi	r2,r2,255
2009b0f0:	1080201c 	xori	r2,r2,128
2009b0f4:	10bfe004 	addi	r2,r2,-128
2009b0f8:	103ff11e 	bne	r2,zero,2009b0c0 <__flash_rwdata_start+0xffffef3c>
2009b0fc:	00000106 	br	2009b104 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
2009b100:	00000706 	br	2009b120 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
2009b104:	e0bff717 	ldw	r2,-36(fp)
2009b108:	10c00044 	addi	r3,r2,1
2009b10c:	e0fff715 	stw	r3,-36(fp)
2009b110:	10800003 	ldbu	r2,0(r2)
2009b114:	e0bff805 	stb	r2,-32(fp)
2009b118:	e0bff807 	ldb	r2,-32(fp)
2009b11c:	103f881e 	bne	r2,zero,2009af40 <__flash_rwdata_start+0xffffedbc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
2009b120:	e037883a 	mov	sp,fp
2009b124:	dfc00117 	ldw	ra,4(sp)
2009b128:	df000017 	ldw	fp,0(sp)
2009b12c:	dec00504 	addi	sp,sp,20
2009b130:	f800283a 	ret

2009b134 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
2009b134:	defffd04 	addi	sp,sp,-12
2009b138:	dfc00215 	stw	ra,8(sp)
2009b13c:	df000115 	stw	fp,4(sp)
2009b140:	df000104 	addi	fp,sp,4
2009b144:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009b148:	00800034 	movhi	r2,0
2009b14c:	1088e004 	addi	r2,r2,9088
2009b150:	10800017 	ldw	r2,0(r2)
2009b154:	10800217 	ldw	r2,8(r2)
2009b158:	e13fff17 	ldw	r4,-4(fp)
2009b15c:	100b883a 	mov	r5,r2
2009b160:	009b5740 	call	2009b574 <putc>
#endif
#endif
}
2009b164:	e037883a 	mov	sp,fp
2009b168:	dfc00117 	ldw	ra,4(sp)
2009b16c:	df000017 	ldw	fp,0(sp)
2009b170:	dec00204 	addi	sp,sp,8
2009b174:	f800283a 	ret

2009b178 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
2009b178:	deffff04 	addi	sp,sp,-4
2009b17c:	df000015 	stw	fp,0(sp)
2009b180:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
2009b184:	000170fa 	wrctl	ienable,zero
}
2009b188:	e037883a 	mov	sp,fp
2009b18c:	df000017 	ldw	fp,0(sp)
2009b190:	dec00104 	addi	sp,sp,4
2009b194:	f800283a 	ret

2009b198 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009b198:	defffb04 	addi	sp,sp,-20
2009b19c:	dfc00415 	stw	ra,16(sp)
2009b1a0:	df000315 	stw	fp,12(sp)
2009b1a4:	df000304 	addi	fp,sp,12
2009b1a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009b1ac:	00800034 	movhi	r2,0
2009b1b0:	1088e304 	addi	r2,r2,9100
2009b1b4:	10800017 	ldw	r2,0(r2)
2009b1b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009b1bc:	00003106 	br	2009b284 <alt_find_file+0xec>
  {
    len = strlen(next->name);
2009b1c0:	e0bffd17 	ldw	r2,-12(fp)
2009b1c4:	10800217 	ldw	r2,8(r2)
2009b1c8:	1009883a 	mov	r4,r2
2009b1cc:	0089e9c0 	call	20089e9c <strlen>
2009b1d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
2009b1d4:	e0bffd17 	ldw	r2,-12(fp)
2009b1d8:	10c00217 	ldw	r3,8(r2)
2009b1dc:	e0bffe17 	ldw	r2,-8(fp)
2009b1e0:	10bfffc4 	addi	r2,r2,-1
2009b1e4:	1885883a 	add	r2,r3,r2
2009b1e8:	10800003 	ldbu	r2,0(r2)
2009b1ec:	10803fcc 	andi	r2,r2,255
2009b1f0:	1080201c 	xori	r2,r2,128
2009b1f4:	10bfe004 	addi	r2,r2,-128
2009b1f8:	10800bd8 	cmpnei	r2,r2,47
2009b1fc:	1000031e 	bne	r2,zero,2009b20c <alt_find_file+0x74>
    {
      len -= 1;
2009b200:	e0bffe17 	ldw	r2,-8(fp)
2009b204:	10bfffc4 	addi	r2,r2,-1
2009b208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009b20c:	e0bffe17 	ldw	r2,-8(fp)
2009b210:	e0ffff17 	ldw	r3,-4(fp)
2009b214:	1885883a 	add	r2,r3,r2
2009b218:	10800003 	ldbu	r2,0(r2)
2009b21c:	10803fcc 	andi	r2,r2,255
2009b220:	1080201c 	xori	r2,r2,128
2009b224:	10bfe004 	addi	r2,r2,-128
2009b228:	10800be0 	cmpeqi	r2,r2,47
2009b22c:	1000081e 	bne	r2,zero,2009b250 <alt_find_file+0xb8>
2009b230:	e0bffe17 	ldw	r2,-8(fp)
2009b234:	e0ffff17 	ldw	r3,-4(fp)
2009b238:	1885883a 	add	r2,r3,r2
2009b23c:	10800003 	ldbu	r2,0(r2)
2009b240:	10803fcc 	andi	r2,r2,255
2009b244:	1080201c 	xori	r2,r2,128
2009b248:	10bfe004 	addi	r2,r2,-128
2009b24c:	10000a1e 	bne	r2,zero,2009b278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
2009b250:	e0bffd17 	ldw	r2,-12(fp)
2009b254:	10c00217 	ldw	r3,8(r2)
2009b258:	e0bffe17 	ldw	r2,-8(fp)
2009b25c:	1809883a 	mov	r4,r3
2009b260:	e17fff17 	ldw	r5,-4(fp)
2009b264:	100d883a 	mov	r6,r2
2009b268:	00898e40 	call	200898e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009b26c:	1000021e 	bne	r2,zero,2009b278 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2009b270:	e0bffd17 	ldw	r2,-12(fp)
2009b274:	00000806 	br	2009b298 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
2009b278:	e0bffd17 	ldw	r2,-12(fp)
2009b27c:	10800017 	ldw	r2,0(r2)
2009b280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009b284:	e0fffd17 	ldw	r3,-12(fp)
2009b288:	00800034 	movhi	r2,0
2009b28c:	1088e304 	addi	r2,r2,9100
2009b290:	18bfcb1e 	bne	r3,r2,2009b1c0 <__flash_rwdata_start+0xfffff03c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2009b294:	0005883a 	mov	r2,zero
}
2009b298:	e037883a 	mov	sp,fp
2009b29c:	dfc00117 	ldw	ra,4(sp)
2009b2a0:	df000017 	ldw	fp,0(sp)
2009b2a4:	dec00204 	addi	sp,sp,8
2009b2a8:	f800283a 	ret

2009b2ac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009b2ac:	defffc04 	addi	sp,sp,-16
2009b2b0:	df000315 	stw	fp,12(sp)
2009b2b4:	df000304 	addi	fp,sp,12
2009b2b8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
2009b2bc:	00bffa04 	movi	r2,-24
2009b2c0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009b2c4:	e03ffd15 	stw	zero,-12(fp)
2009b2c8:	00001d06 	br	2009b340 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
2009b2cc:	00800034 	movhi	r2,0
2009b2d0:	10844d04 	addi	r2,r2,4404
2009b2d4:	e0fffd17 	ldw	r3,-12(fp)
2009b2d8:	18c00324 	muli	r3,r3,12
2009b2dc:	10c5883a 	add	r2,r2,r3
2009b2e0:	10800017 	ldw	r2,0(r2)
2009b2e4:	1000131e 	bne	r2,zero,2009b334 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
2009b2e8:	00800034 	movhi	r2,0
2009b2ec:	10844d04 	addi	r2,r2,4404
2009b2f0:	e0fffd17 	ldw	r3,-12(fp)
2009b2f4:	18c00324 	muli	r3,r3,12
2009b2f8:	10c5883a 	add	r2,r2,r3
2009b2fc:	e0ffff17 	ldw	r3,-4(fp)
2009b300:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
2009b304:	00800034 	movhi	r2,0
2009b308:	1088e704 	addi	r2,r2,9116
2009b30c:	10c00017 	ldw	r3,0(r2)
2009b310:	e0bffd17 	ldw	r2,-12(fp)
2009b314:	1880040e 	bge	r3,r2,2009b328 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
2009b318:	00800034 	movhi	r2,0
2009b31c:	1088e704 	addi	r2,r2,9116
2009b320:	e0fffd17 	ldw	r3,-12(fp)
2009b324:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
2009b328:	e0bffd17 	ldw	r2,-12(fp)
2009b32c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
2009b330:	00000606 	br	2009b34c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009b334:	e0bffd17 	ldw	r2,-12(fp)
2009b338:	10800044 	addi	r2,r2,1
2009b33c:	e0bffd15 	stw	r2,-12(fp)
2009b340:	e0bffd17 	ldw	r2,-12(fp)
2009b344:	10800810 	cmplti	r2,r2,32
2009b348:	103fe01e 	bne	r2,zero,2009b2cc <__flash_rwdata_start+0xfffff148>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
2009b34c:	e0bffe17 	ldw	r2,-8(fp)
}
2009b350:	e037883a 	mov	sp,fp
2009b354:	df000017 	ldw	fp,0(sp)
2009b358:	dec00104 	addi	sp,sp,4
2009b35c:	f800283a 	ret

2009b360 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2009b360:	defffb04 	addi	sp,sp,-20
2009b364:	df000415 	stw	fp,16(sp)
2009b368:	df000404 	addi	fp,sp,16
2009b36c:	e13ffe15 	stw	r4,-8(fp)
2009b370:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
2009b374:	e0bfff17 	ldw	r2,-4(fp)
2009b378:	10840070 	cmpltui	r2,r2,4097
2009b37c:	1000021e 	bne	r2,zero,2009b388 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
2009b380:	00840004 	movi	r2,4096
2009b384:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
2009b388:	e0fffe17 	ldw	r3,-8(fp)
2009b38c:	e0bfff17 	ldw	r2,-4(fp)
2009b390:	1885883a 	add	r2,r3,r2
2009b394:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009b398:	e0bffe17 	ldw	r2,-8(fp)
2009b39c:	e0bffc15 	stw	r2,-16(fp)
2009b3a0:	00000506 	br	2009b3b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2009b3a4:	e0bffc17 	ldw	r2,-16(fp)
2009b3a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009b3ac:	e0bffc17 	ldw	r2,-16(fp)
2009b3b0:	10800804 	addi	r2,r2,32
2009b3b4:	e0bffc15 	stw	r2,-16(fp)
2009b3b8:	e0fffc17 	ldw	r3,-16(fp)
2009b3bc:	e0bffd17 	ldw	r2,-12(fp)
2009b3c0:	18bff836 	bltu	r3,r2,2009b3a4 <__flash_rwdata_start+0xfffff220>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2009b3c4:	e0bffe17 	ldw	r2,-8(fp)
2009b3c8:	108007cc 	andi	r2,r2,31
2009b3cc:	10000226 	beq	r2,zero,2009b3d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2009b3d0:	e0bffc17 	ldw	r2,-16(fp)
2009b3d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2009b3d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
2009b3dc:	e037883a 	mov	sp,fp
2009b3e0:	df000017 	ldw	fp,0(sp)
2009b3e4:	dec00104 	addi	sp,sp,4
2009b3e8:	f800283a 	ret

2009b3ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
2009b3ec:	defffe04 	addi	sp,sp,-8
2009b3f0:	df000115 	stw	fp,4(sp)
2009b3f4:	df000104 	addi	fp,sp,4
2009b3f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
2009b3fc:	e0bfff17 	ldw	r2,-4(fp)
2009b400:	10bffe84 	addi	r2,r2,-6
2009b404:	10c00428 	cmpgeui	r3,r2,16
2009b408:	18001a1e 	bne	r3,zero,2009b474 <alt_exception_cause_generated_bad_addr+0x88>
2009b40c:	100690ba 	slli	r3,r2,2
2009b410:	008802b4 	movhi	r2,8202
2009b414:	10ad0904 	addi	r2,r2,-19420
2009b418:	1885883a 	add	r2,r3,r2
2009b41c:	10800017 	ldw	r2,0(r2)
2009b420:	1000683a 	jmp	r2
2009b424:	2009b464 	muli	zero,r4,9937
2009b428:	2009b464 	muli	zero,r4,9937
2009b42c:	2009b474 	orhi	zero,r4,9937
2009b430:	2009b474 	orhi	zero,r4,9937
2009b434:	2009b474 	orhi	zero,r4,9937
2009b438:	2009b464 	muli	zero,r4,9937
2009b43c:	2009b46c 	andhi	zero,r4,9937
2009b440:	2009b474 	orhi	zero,r4,9937
2009b444:	2009b464 	muli	zero,r4,9937
2009b448:	2009b464 	muli	zero,r4,9937
2009b44c:	2009b474 	orhi	zero,r4,9937
2009b450:	2009b464 	muli	zero,r4,9937
2009b454:	2009b46c 	andhi	zero,r4,9937
2009b458:	2009b474 	orhi	zero,r4,9937
2009b45c:	2009b474 	orhi	zero,r4,9937
2009b460:	2009b464 	muli	zero,r4,9937
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2009b464:	00800044 	movi	r2,1
2009b468:	00000306 	br	2009b478 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009b46c:	0005883a 	mov	r2,zero
2009b470:	00000106 	br	2009b478 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
2009b474:	0005883a 	mov	r2,zero
  }
}
2009b478:	e037883a 	mov	sp,fp
2009b47c:	df000017 	ldw	fp,0(sp)
2009b480:	dec00104 	addi	sp,sp,4
2009b484:	f800283a 	ret

2009b488 <atexit>:
2009b488:	200b883a 	mov	r5,r4
2009b48c:	000d883a 	mov	r6,zero
2009b490:	0009883a 	mov	r4,zero
2009b494:	000f883a 	mov	r7,zero
2009b498:	009b6401 	jmpi	2009b640 <__register_exitproc>

2009b49c <exit>:
2009b49c:	defffe04 	addi	sp,sp,-8
2009b4a0:	000b883a 	mov	r5,zero
2009b4a4:	dc000015 	stw	r16,0(sp)
2009b4a8:	dfc00115 	stw	ra,4(sp)
2009b4ac:	2021883a 	mov	r16,r4
2009b4b0:	009b7540 	call	2009b754 <__call_exitprocs>
2009b4b4:	00800034 	movhi	r2,0
2009b4b8:	1088df04 	addi	r2,r2,9084
2009b4bc:	11000017 	ldw	r4,0(r2)
2009b4c0:	20800f17 	ldw	r2,60(r4)
2009b4c4:	10000126 	beq	r2,zero,2009b4cc <exit+0x30>
2009b4c8:	103ee83a 	callr	r2
2009b4cc:	8009883a 	mov	r4,r16
2009b4d0:	009b8e80 	call	2009b8e8 <_exit>

2009b4d4 <_putc_r>:
2009b4d4:	defffc04 	addi	sp,sp,-16
2009b4d8:	dc000215 	stw	r16,8(sp)
2009b4dc:	dfc00315 	stw	ra,12(sp)
2009b4e0:	2021883a 	mov	r16,r4
2009b4e4:	20000226 	beq	r4,zero,2009b4f0 <_putc_r+0x1c>
2009b4e8:	20800e17 	ldw	r2,56(r4)
2009b4ec:	10001b26 	beq	r2,zero,2009b55c <_putc_r+0x88>
2009b4f0:	30800217 	ldw	r2,8(r6)
2009b4f4:	10bfffc4 	addi	r2,r2,-1
2009b4f8:	30800215 	stw	r2,8(r6)
2009b4fc:	10000a16 	blt	r2,zero,2009b528 <_putc_r+0x54>
2009b500:	30800017 	ldw	r2,0(r6)
2009b504:	11400005 	stb	r5,0(r2)
2009b508:	30800017 	ldw	r2,0(r6)
2009b50c:	10c00044 	addi	r3,r2,1
2009b510:	30c00015 	stw	r3,0(r6)
2009b514:	10800003 	ldbu	r2,0(r2)
2009b518:	dfc00317 	ldw	ra,12(sp)
2009b51c:	dc000217 	ldw	r16,8(sp)
2009b520:	dec00404 	addi	sp,sp,16
2009b524:	f800283a 	ret
2009b528:	30c00617 	ldw	r3,24(r6)
2009b52c:	10c00616 	blt	r2,r3,2009b548 <_putc_r+0x74>
2009b530:	30800017 	ldw	r2,0(r6)
2009b534:	00c00284 	movi	r3,10
2009b538:	11400005 	stb	r5,0(r2)
2009b53c:	30800017 	ldw	r2,0(r6)
2009b540:	11400003 	ldbu	r5,0(r2)
2009b544:	28fff11e 	bne	r5,r3,2009b50c <__flash_rwdata_start+0xfffff388>
2009b548:	8009883a 	mov	r4,r16
2009b54c:	dfc00317 	ldw	ra,12(sp)
2009b550:	dc000217 	ldw	r16,8(sp)
2009b554:	dec00404 	addi	sp,sp,16
2009b558:	00955141 	jmpi	20095514 <__swbuf_r>
2009b55c:	d9400015 	stw	r5,0(sp)
2009b560:	d9800115 	stw	r6,4(sp)
2009b564:	00900ec0 	call	200900ec <__sinit>
2009b568:	d9800117 	ldw	r6,4(sp)
2009b56c:	d9400017 	ldw	r5,0(sp)
2009b570:	003fdf06 	br	2009b4f0 <__flash_rwdata_start+0xfffff36c>

2009b574 <putc>:
2009b574:	00800034 	movhi	r2,0
2009b578:	defffc04 	addi	sp,sp,-16
2009b57c:	1088e004 	addi	r2,r2,9088
2009b580:	dc400115 	stw	r17,4(sp)
2009b584:	14400017 	ldw	r17,0(r2)
2009b588:	dc800215 	stw	r18,8(sp)
2009b58c:	dc000015 	stw	r16,0(sp)
2009b590:	dfc00315 	stw	ra,12(sp)
2009b594:	2025883a 	mov	r18,r4
2009b598:	2821883a 	mov	r16,r5
2009b59c:	88000226 	beq	r17,zero,2009b5a8 <putc+0x34>
2009b5a0:	88800e17 	ldw	r2,56(r17)
2009b5a4:	10001a26 	beq	r2,zero,2009b610 <putc+0x9c>
2009b5a8:	80800217 	ldw	r2,8(r16)
2009b5ac:	10bfffc4 	addi	r2,r2,-1
2009b5b0:	80800215 	stw	r2,8(r16)
2009b5b4:	10000c16 	blt	r2,zero,2009b5e8 <putc+0x74>
2009b5b8:	80800017 	ldw	r2,0(r16)
2009b5bc:	14800005 	stb	r18,0(r2)
2009b5c0:	80800017 	ldw	r2,0(r16)
2009b5c4:	10c00044 	addi	r3,r2,1
2009b5c8:	80c00015 	stw	r3,0(r16)
2009b5cc:	10800003 	ldbu	r2,0(r2)
2009b5d0:	dfc00317 	ldw	ra,12(sp)
2009b5d4:	dc800217 	ldw	r18,8(sp)
2009b5d8:	dc400117 	ldw	r17,4(sp)
2009b5dc:	dc000017 	ldw	r16,0(sp)
2009b5e0:	dec00404 	addi	sp,sp,16
2009b5e4:	f800283a 	ret
2009b5e8:	80c00617 	ldw	r3,24(r16)
2009b5ec:	10c00b16 	blt	r2,r3,2009b61c <putc+0xa8>
2009b5f0:	80800017 	ldw	r2,0(r16)
2009b5f4:	00c00284 	movi	r3,10
2009b5f8:	14800005 	stb	r18,0(r2)
2009b5fc:	80800017 	ldw	r2,0(r16)
2009b600:	11400003 	ldbu	r5,0(r2)
2009b604:	28ffef1e 	bne	r5,r3,2009b5c4 <__flash_rwdata_start+0xfffff440>
2009b608:	8809883a 	mov	r4,r17
2009b60c:	00000506 	br	2009b624 <putc+0xb0>
2009b610:	8809883a 	mov	r4,r17
2009b614:	00900ec0 	call	200900ec <__sinit>
2009b618:	003fe306 	br	2009b5a8 <__flash_rwdata_start+0xfffff424>
2009b61c:	8809883a 	mov	r4,r17
2009b620:	900b883a 	mov	r5,r18
2009b624:	800d883a 	mov	r6,r16
2009b628:	dfc00317 	ldw	ra,12(sp)
2009b62c:	dc800217 	ldw	r18,8(sp)
2009b630:	dc400117 	ldw	r17,4(sp)
2009b634:	dc000017 	ldw	r16,0(sp)
2009b638:	dec00404 	addi	sp,sp,16
2009b63c:	00955141 	jmpi	20095514 <__swbuf_r>

2009b640 <__register_exitproc>:
2009b640:	00800034 	movhi	r2,0
2009b644:	defffa04 	addi	sp,sp,-24
2009b648:	1088df04 	addi	r2,r2,9084
2009b64c:	dc000315 	stw	r16,12(sp)
2009b650:	14000017 	ldw	r16,0(r2)
2009b654:	dc400415 	stw	r17,16(sp)
2009b658:	dfc00515 	stw	ra,20(sp)
2009b65c:	80805217 	ldw	r2,328(r16)
2009b660:	2023883a 	mov	r17,r4
2009b664:	10003626 	beq	r2,zero,2009b740 <__register_exitproc+0x100>
2009b668:	10c00117 	ldw	r3,4(r2)
2009b66c:	010007c4 	movi	r4,31
2009b670:	20c00e16 	blt	r4,r3,2009b6ac <__register_exitproc+0x6c>
2009b674:	1a400044 	addi	r9,r3,1
2009b678:	8800211e 	bne	r17,zero,2009b700 <__register_exitproc+0xc0>
2009b67c:	18c00084 	addi	r3,r3,2
2009b680:	18c7883a 	add	r3,r3,r3
2009b684:	18c7883a 	add	r3,r3,r3
2009b688:	12400115 	stw	r9,4(r2)
2009b68c:	10c7883a 	add	r3,r2,r3
2009b690:	19400015 	stw	r5,0(r3)
2009b694:	0005883a 	mov	r2,zero
2009b698:	dfc00517 	ldw	ra,20(sp)
2009b69c:	dc400417 	ldw	r17,16(sp)
2009b6a0:	dc000317 	ldw	r16,12(sp)
2009b6a4:	dec00604 	addi	sp,sp,24
2009b6a8:	f800283a 	ret
2009b6ac:	00880274 	movhi	r2,8201
2009b6b0:	10a44504 	addi	r2,r2,-28396
2009b6b4:	10002526 	beq	r2,zero,2009b74c <__register_exitproc+0x10c>
2009b6b8:	01006404 	movi	r4,400
2009b6bc:	d9400015 	stw	r5,0(sp)
2009b6c0:	d9800115 	stw	r6,4(sp)
2009b6c4:	d9c00215 	stw	r7,8(sp)
2009b6c8:	00891140 	call	20089114 <malloc>
2009b6cc:	d9400017 	ldw	r5,0(sp)
2009b6d0:	d9800117 	ldw	r6,4(sp)
2009b6d4:	d9c00217 	ldw	r7,8(sp)
2009b6d8:	10001c26 	beq	r2,zero,2009b74c <__register_exitproc+0x10c>
2009b6dc:	80c05217 	ldw	r3,328(r16)
2009b6e0:	10000115 	stw	zero,4(r2)
2009b6e4:	02400044 	movi	r9,1
2009b6e8:	10c00015 	stw	r3,0(r2)
2009b6ec:	80805215 	stw	r2,328(r16)
2009b6f0:	10006215 	stw	zero,392(r2)
2009b6f4:	10006315 	stw	zero,396(r2)
2009b6f8:	0007883a 	mov	r3,zero
2009b6fc:	883fdf26 	beq	r17,zero,2009b67c <__flash_rwdata_start+0xfffff4f8>
2009b700:	18d1883a 	add	r8,r3,r3
2009b704:	4211883a 	add	r8,r8,r8
2009b708:	1211883a 	add	r8,r2,r8
2009b70c:	41802215 	stw	r6,136(r8)
2009b710:	01000044 	movi	r4,1
2009b714:	11806217 	ldw	r6,392(r2)
2009b718:	20c8983a 	sll	r4,r4,r3
2009b71c:	310cb03a 	or	r6,r6,r4
2009b720:	11806215 	stw	r6,392(r2)
2009b724:	41c04215 	stw	r7,264(r8)
2009b728:	01800084 	movi	r6,2
2009b72c:	89bfd31e 	bne	r17,r6,2009b67c <__flash_rwdata_start+0xfffff4f8>
2009b730:	11806317 	ldw	r6,396(r2)
2009b734:	3108b03a 	or	r4,r6,r4
2009b738:	11006315 	stw	r4,396(r2)
2009b73c:	003fcf06 	br	2009b67c <__flash_rwdata_start+0xfffff4f8>
2009b740:	80805304 	addi	r2,r16,332
2009b744:	80805215 	stw	r2,328(r16)
2009b748:	003fc706 	br	2009b668 <__flash_rwdata_start+0xfffff4e4>
2009b74c:	00bfffc4 	movi	r2,-1
2009b750:	003fd106 	br	2009b698 <__flash_rwdata_start+0xfffff514>

2009b754 <__call_exitprocs>:
2009b754:	00800034 	movhi	r2,0
2009b758:	1088df04 	addi	r2,r2,9084
2009b75c:	10800017 	ldw	r2,0(r2)
2009b760:	defff404 	addi	sp,sp,-48
2009b764:	dd800815 	stw	r22,32(sp)
2009b768:	d8800015 	stw	r2,0(sp)
2009b76c:	10805204 	addi	r2,r2,328
2009b770:	dd000615 	stw	r20,24(sp)
2009b774:	dc800415 	stw	r18,16(sp)
2009b778:	dfc00b15 	stw	ra,44(sp)
2009b77c:	df000a15 	stw	fp,40(sp)
2009b780:	ddc00915 	stw	r23,36(sp)
2009b784:	dd400715 	stw	r21,28(sp)
2009b788:	dcc00515 	stw	r19,20(sp)
2009b78c:	dc400315 	stw	r17,12(sp)
2009b790:	dc000215 	stw	r16,8(sp)
2009b794:	2025883a 	mov	r18,r4
2009b798:	2829883a 	mov	r20,r5
2009b79c:	d8800115 	stw	r2,4(sp)
2009b7a0:	05bfffc4 	movi	r22,-1
2009b7a4:	d8800017 	ldw	r2,0(sp)
2009b7a8:	14c05217 	ldw	r19,328(r2)
2009b7ac:	98001d26 	beq	r19,zero,2009b824 <__call_exitprocs+0xd0>
2009b7b0:	dd400117 	ldw	r21,4(sp)
2009b7b4:	98800117 	ldw	r2,4(r19)
2009b7b8:	173fffc4 	addi	fp,r2,-1
2009b7bc:	e0000d16 	blt	fp,zero,2009b7f4 <__call_exitprocs+0xa0>
2009b7c0:	14000044 	addi	r16,r2,1
2009b7c4:	8421883a 	add	r16,r16,r16
2009b7c8:	8421883a 	add	r16,r16,r16
2009b7cc:	84402004 	addi	r17,r16,128
2009b7d0:	9c63883a 	add	r17,r19,r17
2009b7d4:	9c21883a 	add	r16,r19,r16
2009b7d8:	a0001e26 	beq	r20,zero,2009b854 <__call_exitprocs+0x100>
2009b7dc:	80804017 	ldw	r2,256(r16)
2009b7e0:	15001c26 	beq	r2,r20,2009b854 <__call_exitprocs+0x100>
2009b7e4:	e73fffc4 	addi	fp,fp,-1
2009b7e8:	843fff04 	addi	r16,r16,-4
2009b7ec:	8c7fff04 	addi	r17,r17,-4
2009b7f0:	e5bff91e 	bne	fp,r22,2009b7d8 <__flash_rwdata_start+0xfffff654>
2009b7f4:	00880274 	movhi	r2,8201
2009b7f8:	10a44a04 	addi	r2,r2,-28376
2009b7fc:	10000926 	beq	r2,zero,2009b824 <__call_exitprocs+0xd0>
2009b800:	98800117 	ldw	r2,4(r19)
2009b804:	1000311e 	bne	r2,zero,2009b8cc <__call_exitprocs+0x178>
2009b808:	98800017 	ldw	r2,0(r19)
2009b80c:	10003426 	beq	r2,zero,2009b8e0 <__call_exitprocs+0x18c>
2009b810:	9809883a 	mov	r4,r19
2009b814:	a8800015 	stw	r2,0(r21)
2009b818:	00891280 	call	20089128 <free>
2009b81c:	acc00017 	ldw	r19,0(r21)
2009b820:	983fe41e 	bne	r19,zero,2009b7b4 <__flash_rwdata_start+0xfffff630>
2009b824:	dfc00b17 	ldw	ra,44(sp)
2009b828:	df000a17 	ldw	fp,40(sp)
2009b82c:	ddc00917 	ldw	r23,36(sp)
2009b830:	dd800817 	ldw	r22,32(sp)
2009b834:	dd400717 	ldw	r21,28(sp)
2009b838:	dd000617 	ldw	r20,24(sp)
2009b83c:	dcc00517 	ldw	r19,20(sp)
2009b840:	dc800417 	ldw	r18,16(sp)
2009b844:	dc400317 	ldw	r17,12(sp)
2009b848:	dc000217 	ldw	r16,8(sp)
2009b84c:	dec00c04 	addi	sp,sp,48
2009b850:	f800283a 	ret
2009b854:	98800117 	ldw	r2,4(r19)
2009b858:	80c00017 	ldw	r3,0(r16)
2009b85c:	10bfffc4 	addi	r2,r2,-1
2009b860:	17001526 	beq	r2,fp,2009b8b8 <__call_exitprocs+0x164>
2009b864:	80000015 	stw	zero,0(r16)
2009b868:	183fde26 	beq	r3,zero,2009b7e4 <__flash_rwdata_start+0xfffff660>
2009b86c:	00800044 	movi	r2,1
2009b870:	1708983a 	sll	r4,r2,fp
2009b874:	98806217 	ldw	r2,392(r19)
2009b878:	9dc00117 	ldw	r23,4(r19)
2009b87c:	2084703a 	and	r2,r4,r2
2009b880:	1000061e 	bne	r2,zero,2009b89c <__call_exitprocs+0x148>
2009b884:	183ee83a 	callr	r3
2009b888:	98800117 	ldw	r2,4(r19)
2009b88c:	15ffc51e 	bne	r2,r23,2009b7a4 <__flash_rwdata_start+0xfffff620>
2009b890:	a8800017 	ldw	r2,0(r21)
2009b894:	14ffd326 	beq	r2,r19,2009b7e4 <__flash_rwdata_start+0xfffff660>
2009b898:	003fc206 	br	2009b7a4 <__flash_rwdata_start+0xfffff620>
2009b89c:	98806317 	ldw	r2,396(r19)
2009b8a0:	2084703a 	and	r2,r4,r2
2009b8a4:	1000061e 	bne	r2,zero,2009b8c0 <__call_exitprocs+0x16c>
2009b8a8:	89400017 	ldw	r5,0(r17)
2009b8ac:	9009883a 	mov	r4,r18
2009b8b0:	183ee83a 	callr	r3
2009b8b4:	003ff406 	br	2009b888 <__flash_rwdata_start+0xfffff704>
2009b8b8:	9f000115 	stw	fp,4(r19)
2009b8bc:	003fea06 	br	2009b868 <__flash_rwdata_start+0xfffff6e4>
2009b8c0:	89000017 	ldw	r4,0(r17)
2009b8c4:	183ee83a 	callr	r3
2009b8c8:	003fef06 	br	2009b888 <__flash_rwdata_start+0xfffff704>
2009b8cc:	98800017 	ldw	r2,0(r19)
2009b8d0:	982b883a 	mov	r21,r19
2009b8d4:	1027883a 	mov	r19,r2
2009b8d8:	983fb61e 	bne	r19,zero,2009b7b4 <__flash_rwdata_start+0xfffff630>
2009b8dc:	003fd106 	br	2009b824 <__flash_rwdata_start+0xfffff6a0>
2009b8e0:	0005883a 	mov	r2,zero
2009b8e4:	003ffa06 	br	2009b8d0 <__flash_rwdata_start+0xfffff74c>

2009b8e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
2009b8e8:	defffd04 	addi	sp,sp,-12
2009b8ec:	df000215 	stw	fp,8(sp)
2009b8f0:	df000204 	addi	fp,sp,8
2009b8f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
2009b8f8:	0001883a 	nop
2009b8fc:	e0bfff17 	ldw	r2,-4(fp)
2009b900:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
2009b904:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2009b908:	10000226 	beq	r2,zero,2009b914 <_exit+0x2c>
    ALT_SIM_FAIL();
2009b90c:	002af070 	cmpltui	zero,zero,43969
2009b910:	00000106 	br	2009b918 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
2009b914:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
2009b918:	003fff06 	br	2009b918 <__flash_rwdata_start+0xfffff794>
