
MAR5_01.elf:     file format elf32-littlenios2
MAR5_01.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20080190

Program Header:
    LOAD off    0x00001000 vaddr 0x20080000 paddr 0x20080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x20080020 paddr 0x20080020 align 2**12
         filesz 0x0001a2fc memsz 0x0001a2fc flags r-x
    LOAD off    0x0001c000 vaddr 0x00000000 paddr 0x2009a31c align 2**12
         filesz 0x00002a74 memsz 0x000031e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  20080000  20080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000170  20080020  20080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a18c  20080190  20080190  00001190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b50  00000000  2009a31c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f24  00000b50  2009ae6c  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000770  00002a74  2009cd90  0001ea74  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  000031e4  000031e4  0001ea74  2**0
                  CONTENTS
  7 .sram         00000000  2009cd90  2009cd90  0001ea74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ea74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013f0  00000000  00000000  0001ea98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00039fa1  00000000  00000000  0001fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000e132  00000000  00000000  00059e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011fdc  00000000  00000000  00067f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003404  00000000  00000000  00079f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005d99  00000000  00000000  0007d33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002a0da  00000000  00000000  000830d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  000ad1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002d00  00000000  00000000  000ad210  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b4caf  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000b4cb2  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b4cb5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b4cb6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b4cb7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b4cbb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b4cbf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000b4cc3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000b4ccc  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000b4cd5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000b4cde  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003a  00000000  00000000  000b4ce9  2**0
                  CONTENTS, READONLY
 30 .jdi          00005847  00000000  00000000  000b4d23  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0012d0f8  00000000  00000000  000ba56a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
20080000 l    d  .entry	00000000 .entry
20080020 l    d  .exceptions	00000000 .exceptions
20080190 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000b50 l    d  .rwdata	00000000 .rwdata
00002a74 l    d  .bss	00000000 .bss
000031e4 l    d  .lpddr2	00000000 .lpddr2
2009cd90 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MAR5_01_bsp//obj/HAL/src/crt0.o
200801d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
20080da4 l     F .text	00000004 write_dma_isr
00002a24 l     O .rwdata	00000004 count22
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 FatFileSystem.c
00002af4 l     O .bss	00000140 fInfo.3428
00000000 l    df *ABS*	00000000 FatInternal.c
00002c34 l     O .bss	00000200 szBlock.3473
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 mmc.c
20083c68 l     F .text	00000124 mmc_send_status.constprop.4
20083d8c l     F .text	00000a64 mmc_startup
00000448 l     O .rodata	00000040 multipliers
00000488 l     O .rodata	00000010 fbase
00002a74 l     O .bss	00000008 scr.3318
00002e34 l     O .bss	00000040 switch_status.3319
00000000 l    df *ABS*	00000000 ocsdc.c
20084f84 l     F .text	00000100 ocsdc_set_ios
20085084 l     F .text	000001e0 ocsdc_send_cmd
20085264 l     F .text	000000fc ocsdc_init
00000000 l    df *ABS*	00000000 sd_lib.c
00000000 l    df *ABS*	00000000 hw_vid_ctl.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
200866e8 l     F .text	00000078 timer_isr
20086760 l     F .text	000000b4 pio_isr
00000000 l    df *ABS*	00000000 lib2-divmod.c
20086b0c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00000e50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000078a l     O .rodata	00000010 zeroes.4240
0000079a l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
000007aa l     O .rodata	00000010 zeroes.4255
2008ebd4 l     F .text	000000bc __sbprintf
000007ba l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
2008f0a8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
20090c64 l     F .text	00000008 __fp_lock
20090c6c l     F .text	00000008 __fp_unlock
20090c80 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000169c l     O .rwdata	00000020 lc_ctype_charset
0000167c l     O .rwdata	00000020 lc_message_charset
000016bc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000007e8 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000090c l     O .rodata	00000010 zeroes.4184
0000091c l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
20094ac8 l     F .text	000000fc __sprint_r.part.0
0000093c l     O .rodata	00000010 blanks.4199
0000092c l     O .rodata	00000010 zeroes.4200
20095ed0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
20097744 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002a60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000019bc l     O .rwdata	00001060 jtag_uart
0000195c l     O .rwdata	00000060 read_dma_0
000018fc l     O .rwdata	00000060 video_dma
0000189c l     O .rwdata	00000060 write_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
20097fbc l     F .text	0000005c altera_avalon_jtag_uart_timeout
20098018 l     F .text	000000fc altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_msgdma.c
200985d4 l     F .text	000000cc alt_msgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 __atexit.c
00002af0 g     O .bss	00000004 alt_instruction_exception_handler
2009912c g     F .text	0000013c alt_msgdma_standard_descriptor_async_transfer
2008a940 g     F .text	00000018 putchar
20092d64 g     F .text	00000074 _mprec_log10
20086110 g     F .text	00000338 I2C_Read
00002a20 g     O .rwdata	00000004 read_dma_name
20092e50 g     F .text	0000008c __any_on
20096590 g     F .text	00000054 _isatty_r
000007f4 g     O .rodata	00000028 __mprec_tinytens
20097a84 g     F .text	00000060 alt_main
2008a958 g     F .text	000000a8 _puts_r
20081d98 g     F .text	00000028 Fat_FileBrowseBegin
000030e4 g     O .bss	00000100 alt_irq
200965e4 g     F .text	0000005c _lseek_r
20081b2c g     F .text	00000230 ycbcr_to_rgb
2009ae6c g       *ABS*	00000000 __flash_rwdata_start
200973d4 g     F .text	00000084 .hidden __eqdf2
20098710 g     F .text	0000003c alt_msgdma_construct_standard_mm_to_mm_descriptor
000031e4 g       *ABS*	00000000 __alt_heap_start
2008a8fc g     F .text	0000003c printf
2009669c g     F .text	0000009c _wcrtomb_r
00000cd0 g     O .rwdata	00000080 Yquant
20080000 g       *ABS*	00000000 __alt_mem_sram
200936fc g     F .text	0000005c __sseek
20090fb4 g     F .text	00000010 __sinit
20095f8c g     F .text	00000138 __swbuf_r
20091a60 g     F .text	0000007c _setlocale_r
20090e1c g     F .text	00000068 __sfmoreglue
20097ae8 g     F .text	00000004 __malloc_unlock
20081dc0 g     F .text	000005a0 Fat_FileBrowseNext
20086c38 g     F .text	00000450 .hidden __divsf3
00002a80 g     O .bss	00000004 exit_flag
00002ae8 g     O .bss	00000004 altera_avalon_timer_ts_freq
200833e8 g     F .text	000000d4 fatIsValidDir
20091de0 g     F .text	0000015c memmove
20090f9c g     F .text	00000018 _cleanup
20091f3c g     F .text	000000a8 _Balloc
200986a0 g     F .text	00000038 alt_msgdma_construct_standard_st_to_mm_descriptor
20097458 g     F .text	000000e0 .hidden __gtdf2
2009a028 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00002a1c g     O .rwdata	00000004 write_dma_name
200864fc g     F .text	000000e4 i2c_write
20080000 g     F .entry	0000001c __reset
20080020 g       *ABS*	00000000 __flash_exceptions_start
20096538 g     F .text	00000058 _fstat_r
00002ac0 g     O .bss	00000004 errno
20093678 g     F .text	00000008 __seofread
20093a90 g     F .text	00001038 ___svfiprintf_internal_r
20082e88 g     F .text	00000198 fatNextCluster
00002ad8 g     O .bss	00000004 alt_argv
0000aa1c g       *ABS*	00000000 _gp
20097dd0 g     F .text	00000004 usleep
20097d74 g     F .text	0000005c alt_uncached_malloc
20098ca4 g     F .text	0000005c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
000016f4 g     O .rwdata	00000180 alt_fd_list
2008a938 g     F .text	00000008 _putchar_r
20099a5c g     F .text	00000078 alt_find_dev
2008a674 g     F .text	00000138 memcpy
20090c74 g     F .text	0000000c _cleanup_r
200897a0 g     F .text	000000d0 .hidden __floatsidf
20099be4 g     F .text	00000110 alt_io_redirect
20097538 g     F .text	000000e0 .hidden __ltdf2
2009a31c g       *ABS*	00000000 __DTOR_END__
20098f58 g     F .text	00000088 alt_msgdma_start_prefetcher_with_extd_desc_list
20099268 g     F .text	0000016c alt_msgdma_extended_descriptor_async_transfer
2009911c g     F .text	00000010 alt_msgdma_register_callback
20082620 g     F .text	000000bc Fat_FileExist
2008aa00 g     F .text	00000014 puts
2009a180 g     F .text	00000074 alt_exception_cause_generated_bad_addr
200935b0 g     F .text	00000074 __fpclassifyd
20092cc0 g     F .text	000000a4 __ratio
00002a84 g     O .bss	00000004 skip_fw_flag
20095eac g     F .text	00000024 __vfiprintf_internal
20098258 g     F .text	0000013c altera_avalon_jtag_uart_read
20089e28 g     F .text	00000014 malloc
20098b7c g     F .text	00000060 alt_msgdma_prefetcher_add_standard_desc_to_list
2008a8d0 g     F .text	0000002c _printf_r
20080920 g     F .text	000002f4 lossless_decode
20086c28 g     F .text	00000008 .hidden __udivsi3
200978a0 g     F .text	00000090 isatty
00000844 g     O .rodata	000000c8 __mprec_tens
20091adc g     F .text	0000000c __locale_charset
2008ed80 g     F .text	00000040 vsnprintf
2009a130 g     F .text	00000050 alt_icache_flush
00002abc g     O .bss	00000004 __malloc_top_pad
00002a3c g     O .rwdata	00000004 __mb_cur_max
20091b0c g     F .text	0000000c _localeconv_r
20092348 g     F .text	0000003c __i2b
20091418 g     F .text	000004c0 __sfvwrite_r
2008aa14 g     F .text	00000054 _sbrk_r
20096640 g     F .text	0000005c _read_r
200976ec g     F .text	00000040 alt_dcache_flush
00002a88 g     O .bss	00000004 video_play_flag
00002a44 g     O .rwdata	00000004 alt_max_fd
2008585c g     F .text	00000410 hw_init_hdmi
00002a8c g     O .bss	00000004 skip_rv_flag
2008373c g     F .text	000001e0 fatMount
20096254 g     F .text	000000f0 _fclose_r
20090c34 g     F .text	00000030 fflush
00002ab8 g     O .bss	00000004 __malloc_max_sbrked_mem
200977e4 g     F .text	000000bc alt_irq_register
20089914 g     F .text	00000110 .hidden __extendsfdf2
200875bc g     F .text	0000089c .hidden __adddf3
200834bc g     F .text	0000000c fatIsUnusedDir
20092a68 g     F .text	0000011c __b2d
2009891c g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
20096e44 g     F .text	00000590 .hidden __umoddi3
20085c6c g     F .text	00000250 hw_video_display_init
200979fc g     F .text	00000088 lseek
20080264 g     F .text	00000068 print_dct
00002a2c g     O .rwdata	00000004 _global_impure_ptr
20093048 g     F .text	00000568 _realloc_r
000031e4 g       *ABS*	00000000 __bss_end
20099b7c g     F .text	00000068 alt_iic_isr_register
00002a90 g     O .bss	00000004 display
00002a94 g     O .bss	00000004 show_buffers_flag
20097c7c g     F .text	000000f8 alt_tick
2009903c g     F .text	000000e0 alt_msgdma_init
20096884 g     F .text	000005c0 .hidden __udivdi3
20096358 g     F .text	00000184 _fputwc_r
0000081c g     O .rodata	00000028 __mprec_bigtens
2009212c g     F .text	00000104 __s2b
20089870 g     F .text	000000a4 .hidden __floatunsidf
20082da8 g     F .text	00000010 SD_ReadBlocks
20092810 g     F .text	00000060 __mcmp
00002a98 g     O .bss	00000008 null_execution
200995dc g     F .text	00000234 alt_msgdma_extended_descriptor_sync_transfer
20082d9c g     F .text	0000000c SD_ReadBlock512
20090fd4 g     F .text	00000018 __fp_lock_all
20099b64 g     F .text	00000018 alt_ic_irq_enabled
20085ebc g     F .text	00000254 I2C_Write
200826dc g     F .text	00000158 Fat_FileOpen
20097c48 g     F .text	00000034 alt_alarm_stop
20080d34 g     F .text	00000070 input_AC
00002ad0 g     O .bss	00000004 alt_irq_active
200831c4 g     F .text	00000210 fatDelClusterList
20080da8 g     F .text	00000944 mjpeg423_decode
200800fc g     F .exceptions	00000068 alt_irq_handler
00001874 g     O .rwdata	00000028 alt_dev_null
200987c4 g     F .text	00000078 alt_msgdma_construct_extended_mm_to_st_descriptor
200819e0 g     F .text	0000014c idct_test
20086448 g     F .text	0000006c i2c_start
200816ec g     F .text	000001fc idct_hw
20098e10 g     F .text	00000148 alt_msgdma_start_prefetcher_with_std_desc_list
2008ac68 g     F .text	00000068 strrchr
2009772c g     F .text	00000018 alt_dcache_flush_all
20092230 g     F .text	00000068 __hi0bits
20089718 g     F .text	00000088 .hidden __fixdfsi
20085360 g     F .text	00000008 flush_dcache_range
00002a74 g       *ABS*	00000000 __ram_rwdata_end
00002a48 g     O .rwdata	00000008 alt_dev_list
20081d5c g     F .text	00000004 Fat_Mount
20097dd4 g     F .text	000000e8 write
20092edc g     F .text	000000a0 _putc_r
200985c4 g     F .text	00000010 alt_timestamp_freq
00000b50 g       *ABS*	00000000 __ram_rodata_end
20097760 g     F .text	00000084 fstat
20097538 g     F .text	000000e0 .hidden __ledf2
20083b50 g     F .text	0000004c myprintf
20092580 g     F .text	00000140 __pow5mult
20094bdc g     F .text	000012d0 ___vfiprintf_internal_r
00002acc g     O .bss	00000004 __nlocale_changed
20086c30 g     F .text	00000008 .hidden __umodsi3
20098964 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
000031e4 g       *ABS*	00000000 end
2008482c g     F .text	00000468 mmc_init
20098114 g     F .text	00000080 altera_avalon_jtag_uart_init
20080164 g     F .exceptions	0000002c alt_instruction_exception_entry
2009a31c g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
20089bbc g     F .text	00000064 .hidden __clzsi2
20098394 g     F .text	000001a0 altera_avalon_jtag_uart_write
20082c28 g     F .text	00000004 Fat_FileClose
20090fc4 g     F .text	00000004 __sfp_lock_acquire
20082360 g     F .text	0000005c Fat_FileCount
20091cf8 g     F .text	000000e8 memchr
2008cc60 g     F .text	00001f50 ___vfprintf_internal_r
2008aa68 g     F .text	00000058 _sprintf_r
20091128 g     F .text	000002f0 _free_r
20099e98 g     F .text	0000017c alt_printf
20091ae8 g     F .text	00000010 __locale_mb_cur_max
2008ef14 g     F .text	00000194 __call_exitprocs
00002ac8 g     O .bss	00000004 __mlocale_changed
00002a34 g     O .rwdata	00000004 __malloc_sbrk_base
20080190 g     F .text	0000004c _start
00002ae4 g     O .bss	00000004 _alt_tick_rate
200801fc g     F .text	00000068 print_block
200802cc g     F .text	00000080 print_bitstream
200926c0 g     F .text	00000150 __lshift
00002ae0 g     O .bss	00000004 _alt_nticks
200986d8 g     F .text	00000038 alt_msgdma_construct_standard_mm_to_st_descriptor
20097aec g     F .text	000000ec read
20097edc g     F .text	000000a4 alt_sys_init
200938c4 g     F .text	000001cc __ssprint_r
20085558 g     F .text	0000007c hw_video_display_register_written_buffer
2009a208 g     F .text	00000114 __register_exitproc
20082834 g     F .text	00000018 Fat_FileSize
20092384 g     F .text	000001fc __multiply
20098194 g     F .text	00000050 altera_avalon_jtag_uart_close
00002aa0 g     O .bss	00000008 time1
00000b50 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
200847f0 g     F .text	0000003c udelay
00002e74 g     O .bss	00000028 __malloc_current_mallinfo
20092b84 g     F .text	0000013c __d2b
20097f80 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
2009a0e0 g     F .text	00000050 alt_get_fd
200998a4 g     F .text	00000078 alt_busy_sleep
20085368 g     F .text	0000011c ocsdc_mmc_init
2009613c g     F .text	00000054 _close_r
200988d0 g     F .text	0000004c alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
2008284c g     F .text	0000035c Fat_FileRead
2008a5f8 g     F .text	0000007c memcmp
20097fa0 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
000031e4 g       *ABS*	00000000 __alt_stack_base
20097fb0 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
2008034c g     F .text	000005d4 idct
20083644 g     F .text	000000f8 fatFindUnusedDirectory
200989ac g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
2008edc0 g     F .text	00000154 __swsetup_r
20087e58 g     F .text	000008cc .hidden __divdf3
20090e84 g     F .text	00000118 __sfp
20092dd8 g     F .text	00000078 __copybits
00001274 g     O .rwdata	00000408 __malloc_av_
20090fd0 g     F .text	00000004 __sinit_lock_release
20085708 g     F .text	00000030 hw_video_display_clear_screen
2008ec90 g     F .text	000000f0 _vsnprintf_r
200864b4 g     F .text	00000048 i2c_stop
20088724 g     F .text	00000724 .hidden __muldf3
20093624 g     F .text	00000054 __sread
20082c2c g     F .text	00000170 Fat_SpeedTest
2009a030 g     F .text	000000b0 alt_find_file
2009991c g     F .text	00000078 alt_dev_llist_insert
20097ae4 g     F .text	00000004 __malloc_lock
20097bfc g     F .text	0000004c sbrk
2008acd0 g     F .text	00001f90 ___svfprintf_internal_r
20090bd8 g     F .text	0000005c _fflush_r
20096190 g     F .text	000000c4 _calloc_r
200825bc g     F .text	0000005c Fat_CheckExtension
200835a4 g     F .text	000000a0 fatFindDirectory
20080ccc g     F .text	00000068 input_DC
00000d50 g     O .rwdata	00000100 .hidden __divsi3_table
00002a74 g       *ABS*	00000000 __bss_start
2008a7ac g     F .text	00000124 memset
20098fe0 g     F .text	0000005c alt_msgdma_open
20086814 g     F .text	000002f8 main
20083518 g     F .text	00000068 fatReadSecter
00002ad4 g     O .bss	00000004 alt_envp
00002ab4 g     O .bss	00000004 __malloc_max_total_mem
20098bdc g     F .text	00000084 alt_msgdma_prefetcher_add_extended_desc_to_list
20083b9c g     F .text	00000064 myprintf_hexarray
20097f90 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
200865e0 g     F .text	00000108 i2c_read
200960c4 g     F .text	0000001c __swbuf
20093758 g     F .text	00000008 __sclose
200834c8 g     F .text	00000028 fatDump
20000000 g       *ABS*	00000000 __alt_heap_limit
20096344 g     F .text	00000014 fclose
20089a24 g     F .text	00000198 .hidden __truncdfsf2
20098534 g     F .text	0000004c alt_timestamp_start
2008f2a8 g     F .text	00001728 _dtoa_r
20098d00 g     F .text	00000110 alt_msgdma_start_prefetcher_with_list_addr
20089e50 g     F .text	000007a8 _malloc_r
200967f8 g     F .text	00000030 __ascii_wctomb
00002a58 g     O .rwdata	00000004 alt_errno
20098acc g     F .text	000000b0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
200918d8 g     F .text	000000c4 _fwalk
200833d4 g     F .text	00000004 fatDumpDate
20092f7c g     F .text	000000cc putc
20082ba8 g     F .text	00000080 Fat_FileSeek
20086b78 g     F .text	00000054 .hidden __divsi3
20091004 g     F .text	00000124 _malloc_trim_r
2009a31c g       *ABS*	00000000 __CTOR_END__
20087088 g     F .text	00000424 .hidden __mulsf3
2008ab2c g     F .text	000000a4 strcmp
2009a31c g       *ABS*	00000000 __flash_rodata_start
2009a31c g       *ABS*	00000000 __DTOR_LIST__
200834f0 g     F .text	00000028 fatArray2Value
20084e58 g     F .text	0000012c print_mmcinfo
200973d4 g     F .text	00000084 .hidden __nedf2
20082e18 g     F .text	00000070 fat32ClusterType
00002aa8 g     O .bss	00000004 push_button_flag
20097ebc g     F .text	00000020 alt_irq_init
20097bd8 g     F .text	00000024 alt_release_fd
200993d4 g     F .text	00000208 alt_msgdma_standard_descriptor_sync_transfer
20089c58 g     F .text	0000001c memalign
2008aac0 g     F .text	0000006c sprintf
00000647 g     O .rodata	00000100 .hidden __clz_tab
20083b4c g     F .text	00000004 debug_output
00002ac4 g     O .bss	00000004 _PathLocale
2009a1f4 g     F .text	00000014 atexit
200818e8 g     F .text	000000f8 idct_hw_frame
200960e0 g     F .text	0000005c _write_r
200823ec g     F .text	000001d0 fatComposeShortFilename
20091b18 g     F .text	0000001c setlocale
20098a3c g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00002a30 g     O .rwdata	00000004 _impure_ptr
00002adc g     O .bss	00000004 alt_argc
200909d0 g     F .text	00000208 __sflush_r
00002aec g     O .bss	00000004 altera_avalon_timer_ts_base
200999f8 g     F .text	00000064 _do_dtors
20091b04 g     F .text	00000008 __locale_cjk_lang
20081d6c g     F .text	0000002c Fat_Type
20083c00 g     F .text	00000068 myprintf_dwordarray
20084c94 g     F .text	000001c4 mmc_bread
00000b50 g     O .rwdata	00000100 zigzag_table
20080020 g       .exceptions	00000000 alt_irq_entry
200801dc g     F .text	00000020 error_and_exit
20092a08 g     F .text	00000060 __ulp
20090fec g     F .text	00000018 __fp_unlock_all
20082db8 g     F .text	00000060 fat16ClusterType
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
00002a50 g     O .rwdata	00000008 alt_fs_list
2008583c g     F .text	00000020 hw_video_display_get_buffer
20085738 g     F .text	00000010 hw_video_display_get_descriptor_span
20083580 g     F .text	00000024 fatReadMultiSecter
20080020 g       *ABS*	00000000 __ram_exceptions_start
20091b34 g     F .text	0000000c localeconv
20098580 g     F .text	00000044 alt_timestamp
200823bc g     F .text	00000030 fatSameLongFilename
20099ae0 g     F .text	00000004 alt_ic_isr_register
00002a74 g       *ABS*	00000000 _edata
200833d8 g     F .text	00000004 fatDumpTime
20080c14 g     F .text	000000b8 update_buffer
000031e4 g       *ABS*	00000000 _end
20080190 g       *ABS*	00000000 __ram_exceptions_end
200981e4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
200855d4 g     F .text	00000028 hw_video_display_buffer_is_available
20099b24 g     F .text	00000040 alt_ic_irq_disable
20093680 g     F .text	0000007c __swrite
00002a38 g     O .rwdata	00000004 __malloc_trim_threshold
20091af8 g     F .text	0000000c __locale_msgcharset
20089c20 g     F .text	00000038 exit
2008391c g     F .text	00000230 fatMountSdcard
2009199c g     F .text	000000c4 _fwalk_reent
20098c60 g     F .text	00000044 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
200874ac g     F .text	00000110 .hidden __floatunsisf
20092870 g     F .text	00000198 __mdiff
20086bcc g     F .text	0000005c .hidden __modsi3
20089c74 g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
20080020 g     F .exceptions	00000000 alt_exception
20090fc8 g     F .text	00000004 __sfp_lock_release
2009883c g     F .text	00000094 alt_msgdma_construct_extended_mm_to_mm_descriptor
20085524 g     F .text	00000034 SDLIB_ReadBlocks
20085484 g     F .text	00000070 SDLIB_Init
2009874c g     F .text	00000078 alt_msgdma_construct_extended_st_to_mm_descriptor
2009774c g     F .text	00000014 _exit
20099810 g     F .text	00000094 alt_alarm_start
00002a28 g     O .rwdata	00000004 fps
20091b40 g     F .text	000001b8 __smakebuf_r
00002a6c g     O .rwdata	00000008 alt_msgdma_list
2008abd0 g     F .text	00000098 strlen
200855fc g     F .text	0000010c hw_video_display_switch_frames
00002aac g     O .bss	00000008 time2
20085748 g     F .text	000000f4 hw_video_display_allocate_buffers
20099cf4 g     F .text	000001a4 open
20097458 g     F .text	000000e0 .hidden __gedf2
2009a014 g     F .text	00000014 alt_putchar
00002a40 g     O .rwdata	00000004 __wctomb
20082618 g     F .text	00000008 Fat_GetFileName
20094bc4 g     F .text	00000018 __sprint_r
20099ad4 g     F .text	0000000c alt_icache_flush_all
20093760 g     F .text	00000164 strchr
00002a5c g     O .rwdata	00000004 alt_priority_mask
00000c50 g     O .rwdata	00000080 Cquant
20099ae4 g     F .text	00000040 alt_ic_irq_enable
2008ebb0 g     F .text	00000024 __vfprintf_internal
20083020 g     F .text	000001a4 fatFindUnusedCluster
20096828 g     F .text	0000005c _wctomb_r
20088e48 g     F .text	000008d0 .hidden __subdf3
00002a7c g     O .bss	00000004 sd_drv
20092298 g     F .text	000000b0 __lo0bits
00002a64 g     O .rwdata	00000008 alt_alarm_list
20099994 g     F .text	00000064 _do_ctors
20096738 g     F .text	000000c0 wcrtomb
20097618 g     F .text	000000d4 close
20081d60 g     F .text	0000000c Fat_Unmount
20097930 g     F .text	000000cc alt_load
00002e9c g     O .bss	00000248 vInfo
200964dc g     F .text	0000005c fputwc
20089e3c g     F .text	00000014 free
20090fcc g     F .text	00000004 __sinit_lock_acquire
2009200c g     F .text	00000120 __multadd
200833dc g     F .text	0000000c fatIsLastDir
20091fe4 g     F .text	00000028 _Bfree
200854f4 g     F .text	00000030 SDLIB_ReadBlock512



Disassembly of section .entry:

20080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
20080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
20080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
20080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
2008000c:	00bffd16 	blt	zero,r2,20080004 <__flash_rwdata_start+0xfffe5198>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
20080010:	00480234 	movhi	at,8200
    ori r1, r1, %lo(_start)
20080014:	08406414 	ori	at,at,400
    jmp r1
20080018:	0800683a 	jmp	at
2008001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

20080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
20080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
20080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
20080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
2008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
20080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
20080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
20080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
2008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
20080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
20080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
20080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
2008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
20080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
20080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
20080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
2008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
20080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
20080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
20080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
2008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
20080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
20080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
20080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
2008007c:	10000326 	beq	r2,zero,2008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
20080080:	20000226 	beq	r4,zero,2008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
20080084:	00800fc0 	call	200800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
20080088:	00000706 	br	200800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
2008008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
20080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
20080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
20080098:	00801640 	call	20080164 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
2008009c:	1000021e 	bne	r2,zero,200800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
200800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
200800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
200800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
200800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
200800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
200800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
200800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
200800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
200800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
200800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
200800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
200800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
200800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
200800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
200800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
200800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
200800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
200800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
200800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
200800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
200800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
200800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
200800f8:	ef80083a 	eret

200800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
200800fc:	defffe04 	addi	sp,sp,-8
20080100:	dfc00115 	stw	ra,4(sp)
20080104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
20080108:	000b313a 	rdctl	r5,ipending
2008010c:	04000034 	movhi	r16,0
20080110:	840c3904 	addi	r16,r16,12516
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
20080114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
20080118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
2008011c:	1000051e 	bne	r2,zero,20080134 <alt_irq_handler+0x38>
20080120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
20080124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
20080128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
2008012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
20080130:	203ffc26 	beq	r4,zero,20080124 <__flash_rwdata_start+0xfffe52b8>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
20080134:	180690fa 	slli	r3,r3,3
20080138:	80c5883a 	add	r2,r16,r3
2008013c:	1007883a 	mov	r3,r2
20080140:	19000117 	ldw	r4,4(r3)
20080144:	10800017 	ldw	r2,0(r2)
20080148:	103ee83a 	callr	r2
2008014c:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
20080150:	283ff01e 	bne	r5,zero,20080114 <__flash_rwdata_start+0xfffe52a8>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
20080154:	dfc00117 	ldw	ra,4(sp)
20080158:	dc000017 	ldw	r16,0(sp)
2008015c:	dec00204 	addi	sp,sp,8
20080160:	f800283a 	ret

20080164 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
20080164:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
20080168:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
2008016c:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
20080170:	d0e03517 	ldw	r3,-32556(gp)
20080174:	18000326 	beq	r3,zero,20080184 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
20080178:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
2008017c:	2008d0ba 	srli	r4,r4,2
20080180:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
20080184:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
20080188:	0005883a 	mov	r2,zero
2008018c:	f800283a 	ret

Disassembly of section .text:

20080190 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
20080190:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
20080194:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
20080198:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
2008019c:	00bffd16 	blt	zero,r2,20080194 <__flash_rwdata_start+0xfffe5328>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
200801a0:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
200801a4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
200801a8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
200801ac:	d6aa8714 	ori	gp,gp,43548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
200801b0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
200801b4:	108a9d14 	ori	r2,r2,10868

    movhi r3, %hi(__bss_end)
200801b8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
200801bc:	18cc7914 	ori	r3,r3,12772

    beq r2, r3, 1f
200801c0:	10c00326 	beq	r2,r3,200801d0 <_start+0x40>

0:
    stw zero, (r2)
200801c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
200801c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
200801cc:	10fffd36 	bltu	r2,r3,200801c4 <__flash_rwdata_start+0xfffe5358>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
200801d0:	00979300 	call	20097930 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
200801d4:	0097a840 	call	20097a84 <alt_main>

200801d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
200801d8:	003fff06 	br	200801d8 <__flash_rwdata_start+0xfffe536c>

200801dc <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
200801dc:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
200801e0:	01000034 	movhi	r4,0

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
200801e4:	deffff04 	addi	sp,sp,-4
    printf("Error: %s\n", str);
200801e8:	21000004 	addi	r4,r4,0

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
200801ec:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
200801f0:	008a8fc0 	call	2008a8fc <printf>
    exit(-1);
200801f4:	013fffc4 	movi	r4,-1
200801f8:	0089c200 	call	20089c20 <exit>

200801fc <print_block>:
}

void print_block(pcolor_block_t b)
{
200801fc:	defffc04 	addi	sp,sp,-16
20080200:	dc800215 	stw	r18,8(sp)
20080204:	dc400115 	stw	r17,4(sp)
20080208:	dfc00315 	stw	ra,12(sp)
2008020c:	dc000015 	stw	r16,0(sp)
20080210:	244001c4 	addi	r17,r4,7
20080214:	248011c4 	addi	r18,r4,71
20080218:	8c3ffe44 	addi	r16,r17,-7
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
2008021c:	81400003 	ldbu	r5,0(r16)
20080220:	01000034 	movhi	r4,0
20080224:	84000044 	addi	r16,r16,1
20080228:	21000304 	addi	r4,r4,12
2008022c:	008a8fc0 	call	2008a8fc <printf>
20080230:	8c3ffa1e 	bne	r17,r16,2008021c <__flash_rwdata_start+0xfffe53b0>
            else printf("%u\n", b[row][column]);
20080234:	89400003 	ldbu	r5,0(r17)
20080238:	01000034 	movhi	r4,0
2008023c:	8c400204 	addi	r17,r17,8
20080240:	21000404 	addi	r4,r4,16
20080244:	008a8fc0 	call	2008a8fc <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
20080248:	8cbff31e 	bne	r17,r18,20080218 <__flash_rwdata_start+0xfffe53ac>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
2008024c:	dfc00317 	ldw	ra,12(sp)
20080250:	dc800217 	ldw	r18,8(sp)
20080254:	dc400117 	ldw	r17,4(sp)
20080258:	dc000017 	ldw	r16,0(sp)
2008025c:	dec00404 	addi	sp,sp,16
20080260:	f800283a 	ret

20080264 <print_dct>:

void print_dct(pdct_block_t b)
{
20080264:	defffc04 	addi	sp,sp,-16
20080268:	dc800215 	stw	r18,8(sp)
2008026c:	dc400115 	stw	r17,4(sp)
20080270:	dfc00315 	stw	ra,12(sp)
20080274:	dc000015 	stw	r16,0(sp)
20080278:	24400384 	addi	r17,r4,14
2008027c:	24802384 	addi	r18,r4,142
20080280:	8c3ffc84 	addi	r16,r17,-14
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
20080284:	8140000f 	ldh	r5,0(r16)
20080288:	01000034 	movhi	r4,0
2008028c:	84000084 	addi	r16,r16,2
20080290:	21000304 	addi	r4,r4,12
20080294:	008a8fc0 	call	2008a8fc <printf>
20080298:	8c3ffa1e 	bne	r17,r16,20080284 <__flash_rwdata_start+0xfffe5418>
            else printf("%d\n", b[row][column]);
2008029c:	8940000f 	ldh	r5,0(r17)
200802a0:	01000034 	movhi	r4,0
200802a4:	8c400404 	addi	r17,r17,16
200802a8:	21018a04 	addi	r4,r4,1576
200802ac:	008a8fc0 	call	2008a8fc <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
200802b0:	8cbff31e 	bne	r17,r18,20080280 <__flash_rwdata_start+0xfffe5414>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
200802b4:	dfc00317 	ldw	ra,12(sp)
200802b8:	dc800217 	ldw	r18,8(sp)
200802bc:	dc400117 	ldw	r17,4(sp)
200802c0:	dc000017 	ldw	r16,0(sp)
200802c4:	dec00404 	addi	sp,sp,16
200802c8:	f800283a 	ret

200802cc <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
200802cc:	01001d0e 	bge	zero,r4,20080344 <print_bitstream+0x78>
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
200802d0:	defffb04 	addi	sp,sp,-20
200802d4:	dcc00315 	stw	r19,12(sp)
200802d8:	dc800215 	stw	r18,8(sp)
200802dc:	dc400115 	stw	r17,4(sp)
200802e0:	dfc00415 	stw	ra,16(sp)
200802e4:	dc000015 	stw	r16,0(sp)
200802e8:	2823883a 	mov	r17,r5
200802ec:	2927883a 	add	r19,r5,r4
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
200802f0:	04800204 	movi	r18,8
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
200802f4:	0021883a 	mov	r16,zero
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
200802f8:	89400003 	ldbu	r5,0(r17)
200802fc:	01000034 	movhi	r4,0
20080300:	21000504 	addi	r4,r4,20
20080304:	2c0a983a 	sll	r5,r5,r16
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
20080308:	84000044 	addi	r16,r16,1
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
2008030c:	29403fcc 	andi	r5,r5,255
20080310:	280ad1fa 	srli	r5,r5,7
20080314:	008a8fc0 	call	2008a8fc <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
20080318:	84bff71e 	bne	r16,r18,200802f8 <__flash_rwdata_start+0xfffe548c>
2008031c:	8c400044 	addi	r17,r17,1
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
20080320:	8cfff41e 	bne	r17,r19,200802f4 <__flash_rwdata_start+0xfffe5488>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
20080324:	01000284 	movi	r4,10
}
20080328:	dfc00417 	ldw	ra,16(sp)
2008032c:	dcc00317 	ldw	r19,12(sp)
20080330:	dc800217 	ldw	r18,8(sp)
20080334:	dc400117 	ldw	r17,4(sp)
20080338:	dc000017 	ldw	r16,0(sp)
2008033c:	dec00504 	addi	sp,sp,20
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
20080340:	008a9401 	jmpi	2008a940 <putchar>
20080344:	01000284 	movi	r4,10
20080348:	008a9401 	jmpi	2008a940 <putchar>

2008034c <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
2008034c:	deffa904 	addi	sp,sp,-348
20080350:	20800404 	addi	r2,r4,16
20080354:	d8c03804 	addi	r3,sp,224
20080358:	dc804f15 	stw	r18,316(sp)
2008035c:	d8804815 	stw	r2,288(sp)
20080360:	1025883a 	mov	r18,r2
20080364:	d8c04715 	stw	r3,284(sp)
20080368:	d9c00804 	addi	r7,sp,32
2008036c:	da003004 	addi	r8,sp,192
20080370:	dac01004 	addi	r11,sp,64
20080374:	dbc02804 	addi	r15,sp,160
20080378:	d8801804 	addi	r2,sp,96
2008037c:	d8c02004 	addi	r3,sp,128
20080380:	df005515 	stw	fp,340(sp)
20080384:	ddc05415 	stw	r23,336(sp)
20080388:	dd805315 	stw	r22,332(sp)
2008038c:	dd405215 	stw	r21,328(sp)
20080390:	dd005115 	stw	r20,324(sp)
20080394:	dcc05015 	stw	r19,320(sp)
20080398:	dfc05615 	stw	ra,344(sp)
2008039c:	dc404e15 	stw	r17,312(sp)
200803a0:	dc004d15 	stw	r16,308(sp)
200803a4:	d9404915 	stw	r5,292(sp)
200803a8:	27000804 	addi	fp,r4,32
200803ac:	25c01804 	addi	r23,r4,96
200803b0:	25801004 	addi	r22,r4,64
200803b4:	25401c04 	addi	r21,r4,112
200803b8:	25001404 	addi	r20,r4,80
200803bc:	24c00c04 	addi	r19,r4,48
200803c0:	d9c04615 	stw	r7,280(sp)
200803c4:	da004515 	stw	r8,276(sp)
200803c8:	dac04415 	stw	r11,272(sp)
200803cc:	dbc04315 	stw	r15,268(sp)
200803d0:	d8804215 	stw	r2,264(sp)
200803d4:	d8c04115 	stw	r3,260(sp)
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
200803d8:	dec04015 	stw	sp,256(sp)
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
200803dc:	a300000f 	ldh	r12,0(r20)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
200803e0:	aac0000f 	ldh	r11,0(r21)
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
200803e4:	9b80000f 	ldh	r14,0(r19)
        tmp3 = inptr[DCTSIZE*1];
200803e8:	90c0000f 	ldh	r3,0(r18)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
200803ec:	e240000f 	ldh	r9,0(fp)
        z3 = inptr[DCTSIZE*6];
200803f0:	ba80000f 	ldh	r10,0(r23)
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
200803f4:	5b8d883a 	add	r6,r11,r14
        z4 = tmp1 + tmp3;
200803f8:	60c5883a 	add	r2,r12,r3
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
200803fc:	2440000f 	ldh	r17,0(r4)
        z3 = inptr[DCTSIZE*4];
20080400:	b200000f 	ldh	r8,0(r22)
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
20080404:	309b883a 	add	r13,r6,r2
20080408:	6b496864 	muli	r13,r13,9633
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
2008040c:	58df883a 	add	r15,r11,r3
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
20080410:	10bce124 	muli	r2,r2,-3196
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080414:	4abf883a 	add	ra,r9,r10
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
20080418:	7bf8cce4 	muli	r15,r15,-7373
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
2008041c:	63a1883a 	add	r16,r12,r14
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
20080420:	31b04ee4 	muli	r6,r6,-16069
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080424:	ffc45464 	muli	ra,ra,4433
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
20080428:	8a0b883a 	add	r5,r17,r8
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
2008042c:	842b7f64 	muli	r16,r16,-20995
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
20080430:	8a11c83a 	sub	r8,r17,r8
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
20080434:	4a461fa4 	muli	r9,r9,6270
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080438:	18cc02e4 	muli	r3,r3,12299
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
2008043c:	52b137e4 	muli	r10,r10,-15137
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
20080440:	1345883a 	add	r2,r2,r13
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
20080444:	4010937a 	slli	r8,r8,13
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
20080448:	280a937a 	slli	r5,r5,13
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
2008044c:	73989524 	muli	r14,r14,25172
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
20080450:	788f883a 	add	r7,r15,r2
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
20080454:	334d883a 	add	r6,r6,r13
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
20080458:	4fd3883a 	add	r9,r9,ra
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
2008045c:	38c7883a 	add	r3,r7,r3
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
20080460:	57d5883a 	add	r10,r10,ra
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
20080464:	818f883a 	add	r7,r16,r6
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
20080468:	42bf883a 	add	ra,r8,r10
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
2008046c:	2a63883a 	add	r17,r5,r9
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
20080470:	3b8f883a 	add	r7,r7,r14
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080474:	63506ce4 	muli	r13,r12,16819
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080478:	f9dd883a 	add	r14,ra,r7
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
2008047c:	88d9883a 	add	r12,r17,r3
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
20080480:	4295c83a 	sub	r10,r8,r10
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080484:	63010004 	addi	r12,r12,1024
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080488:	72010004 	addi	r8,r14,1024
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008048c:	88c7c83a 	sub	r3,r17,r3
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
20080490:	401dd2fa 	srai	r14,r8,11
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
20080494:	6019d2fa 	srai	r12,r12,11
20080498:	da004017 	ldw	r8,256(sp)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
2008049c:	18c10004 	addi	r3,r3,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
200804a0:	798d883a 	add	r6,r15,r6
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
200804a4:	1807d2fa 	srai	r3,r3,11
200804a8:	dbc04717 	ldw	r15,284(sp)
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
200804ac:	5ac263a4 	muli	r11,r11,2446
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
200804b0:	8085883a 	add	r2,r16,r2
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
200804b4:	43000015 	stw	r12,0(r8)
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
200804b8:	1345883a 	add	r2,r2,r13
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
200804bc:	f9cfc83a 	sub	r7,ra,r7
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
200804c0:	78c00015 	stw	r3,0(r15)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200804c4:	509b883a 	add	r13,r10,r2
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
200804c8:	d8c04617 	ldw	r3,280(sp)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
200804cc:	39c10004 	addi	r7,r7,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
200804d0:	32d7883a 	add	r11,r6,r11
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
200804d4:	da004517 	ldw	r8,276(sp)
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
200804d8:	2a4bc83a 	sub	r5,r5,r9
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
200804dc:	380fd2fa 	srai	r7,r7,11
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200804e0:	5095c83a 	sub	r10,r10,r2
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200804e4:	69810004 	addi	r6,r13,1024
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
200804e8:	2ac5883a 	add	r2,r5,r11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200804ec:	301bd2fa 	srai	r13,r6,11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
200804f0:	2acbc83a 	sub	r5,r5,r11
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
200804f4:	52810004 	addi	r10,r10,1024
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
200804f8:	dac04417 	ldw	r11,272(sp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
200804fc:	1b800015 	stw	r14,0(r3)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
20080500:	dbc04317 	ldw	r15,268(sp)
20080504:	5015d2fa 	srai	r10,r10,11
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
20080508:	10810004 	addi	r2,r2,1024
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
2008050c:	41c00015 	stw	r7,0(r8)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
20080510:	d8c04217 	ldw	r3,264(sp)
20080514:	1005d2fa 	srai	r2,r2,11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
20080518:	5b400015 	stw	r13,0(r11)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
2008051c:	7a800015 	stw	r10,0(r15)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
20080520:	18800015 	stw	r2,0(r3)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
20080524:	da004017 	ldw	r8,256(sp)
20080528:	dac04717 	ldw	r11,284(sp)
2008052c:	dbc04617 	ldw	r15,280(sp)
20080530:	d8804517 	ldw	r2,276(sp)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
20080534:	29410004 	addi	r5,r5,1024
20080538:	d9c04117 	ldw	r7,260(sp)
2008053c:	d8c04417 	ldw	r3,272(sp)
20080540:	280bd2fa 	srai	r5,r5,11
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
20080544:	42000104 	addi	r8,r8,4
20080548:	5ac00104 	addi	r11,r11,4
2008054c:	7bc00104 	addi	r15,r15,4
20080550:	10800104 	addi	r2,r2,4
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
20080554:	39400015 	stw	r5,0(r7)
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
20080558:	da004015 	stw	r8,256(sp)
2008055c:	dac04715 	stw	r11,284(sp)
20080560:	dbc04615 	stw	r15,280(sp)
20080564:	d8804515 	stw	r2,276(sp)
20080568:	18c00104 	addi	r3,r3,4
2008056c:	d8c04415 	stw	r3,272(sp)
20080570:	d9c04317 	ldw	r7,268(sp)
20080574:	da004217 	ldw	r8,264(sp)
20080578:	dac04117 	ldw	r11,260(sp)
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
2008057c:	dbc04817 	ldw	r15,288(sp)
20080580:	39c00104 	addi	r7,r7,4
20080584:	42000104 	addi	r8,r8,4
20080588:	5ac00104 	addi	r11,r11,4
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
2008058c:	21000084 	addi	r4,r4,2
20080590:	d9c04315 	stw	r7,268(sp)
20080594:	da004215 	stw	r8,264(sp)
20080598:	dac04115 	stw	r11,260(sp)
2008059c:	e7000084 	addi	fp,fp,2
200805a0:	bdc00084 	addi	r23,r23,2
200805a4:	b5800084 	addi	r22,r22,2
200805a8:	ad400084 	addi	r21,r21,2
200805ac:	a5000084 	addi	r20,r20,2
200805b0:	9cc00084 	addi	r19,r19,2
200805b4:	94800084 	addi	r18,r18,2
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
200805b8:	23ff881e 	bne	r4,r15,200803dc <__flash_rwdata_start+0xfffe5570>
200805bc:	dc404917 	ldw	r17,292(sp)
200805c0:	d8800304 	addi	r2,sp,12
200805c4:	d8c00104 	addi	r3,sp,4
200805c8:	dfc00204 	addi	ra,sp,8
200805cc:	d8804815 	stw	r2,288(sp)
200805d0:	d8c04715 	stw	r3,284(sp)
200805d4:	89000044 	addi	r4,r17,1
200805d8:	89c00184 	addi	r7,r17,6
200805dc:	8a000084 	addi	r8,r17,2
200805e0:	8ac00144 	addi	r11,r17,5
200805e4:	8bc000c4 	addi	r15,r17,3
200805e8:	88800104 	addi	r2,r17,4
200805ec:	88c011c4 	addi	r3,r17,71
200805f0:	df000604 	addi	fp,sp,24
200805f4:	ddc00404 	addi	r23,sp,16
200805f8:	dd800704 	addi	r22,sp,28
200805fc:	dd400504 	addi	r21,sp,20
20080600:	8a4001c4 	addi	r9,r17,7
20080604:	d9004615 	stw	r4,280(sp)
20080608:	d9c04515 	stw	r7,276(sp)
2008060c:	da004415 	stw	r8,272(sp)
20080610:	dac04315 	stw	r11,268(sp)
20080614:	dbc04215 	stw	r15,264(sp)
20080618:	d8804115 	stw	r2,260(sp)
2008061c:	d8c04a15 	stw	r3,296(sp)
20080620:	d80d883a 	mov	r6,sp
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080624:	04c000b4 	movhi	r19,2
20080628:	05003fc4 	movi	r20,255
2008062c:	f815883a 	mov	r10,ra
20080630:	00005f06 	br	200807b0 <idct+0x464>
20080634:	a1c0010e 	bge	r20,r7,2008063c <idct+0x2f0>
20080638:	01c03fc4 	movi	r7,255
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
2008063c:	2309c83a 	sub	r4,r4,r12
20080640:	24c9883a 	add	r4,r4,r19
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080644:	dbc04917 	ldw	r15,292(sp)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080648:	2009d4ba 	srai	r4,r4,18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
2008064c:	79c00005 	stb	r7,0(r15)
20080650:	2000a316 	blt	r4,zero,200808e0 <idct+0x594>
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080654:	a100010e 	bge	r20,r4,2008065c <idct+0x310>
20080658:	01003fc4 	movi	r4,255
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
2008065c:	6947883a 	add	r3,r13,r5
20080660:	1cc7883a 	add	r3,r3,r19
20080664:	1807d4ba 	srai	r3,r3,18
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
20080668:	49000005 	stb	r4,0(r9)
2008066c:	18009e16 	blt	r3,zero,200808e8 <idct+0x59c>
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080670:	a0c0010e 	bge	r20,r3,20080678 <idct+0x32c>
20080674:	00c03fc4 	movi	r3,255
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080678:	694bc83a 	sub	r5,r13,r5
2008067c:	2ccb883a 	add	r5,r5,r19
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080680:	d9004617 	ldw	r4,280(sp)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080684:	280bd4ba 	srai	r5,r5,18
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
20080688:	20c00005 	stb	r3,0(r4)
2008068c:	28009216 	blt	r5,zero,200808d8 <idct+0x58c>
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
20080690:	a140010e 	bge	r20,r5,20080698 <idct+0x34c>
20080694:	01403fc4 	movi	r5,255
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
20080698:	8207883a 	add	r3,r16,r8
2008069c:	1cc7883a 	add	r3,r3,r19
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
200806a0:	d9c04517 	ldw	r7,276(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
200806a4:	1807d4ba 	srai	r3,r3,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
200806a8:	39400005 	stb	r5,0(r7)
200806ac:	18008816 	blt	r3,zero,200808d0 <idct+0x584>
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
200806b0:	a0c0010e 	bge	r20,r3,200806b8 <idct+0x36c>
200806b4:	00c03fc4 	movi	r3,255
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
200806b8:	8221c83a 	sub	r16,r16,r8
200806bc:	84e1883a 	add	r16,r16,r19
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
200806c0:	da004417 	ldw	r8,272(sp)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
200806c4:	8021d4ba 	srai	r16,r16,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
200806c8:	40c00005 	stb	r3,0(r8)
200806cc:	80007e16 	blt	r16,zero,200808c8 <idct+0x57c>
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
200806d0:	a400010e 	bge	r20,r16,200806d8 <idct+0x38c>
200806d4:	04003fc4 	movi	r16,255
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200806d8:	1387883a 	add	r3,r2,r14
200806dc:	1cc7883a 	add	r3,r3,r19
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
200806e0:	dac04317 	ldw	r11,268(sp)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200806e4:	1807d4ba 	srai	r3,r3,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
200806e8:	5c000005 	stb	r16,0(r11)
200806ec:	18007416 	blt	r3,zero,200808c0 <idct+0x574>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
200806f0:	a0c0010e 	bge	r20,r3,200806f8 <idct+0x3ac>
200806f4:	00c03fc4 	movi	r3,255
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
200806f8:	1385c83a 	sub	r2,r2,r14
200806fc:	14c5883a 	add	r2,r2,r19
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080700:	dbc04217 	ldw	r15,264(sp)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
20080704:	1005d4ba 	srai	r2,r2,18
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
20080708:	78c00005 	stb	r3,0(r15)
2008070c:	10006a16 	blt	r2,zero,200808b8 <idct+0x56c>
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
20080710:	a080010e 	bge	r20,r2,20080718 <idct+0x3cc>
20080714:	00803fc4 	movi	r2,255
20080718:	d9004817 	ldw	r4,288(sp)
2008071c:	d9c04717 	ldw	r7,284(sp)
20080720:	d8c04117 	ldw	r3,260(sp)
20080724:	da004917 	ldw	r8,292(sp)
20080728:	21000804 	addi	r4,r4,32
2008072c:	39c00804 	addi	r7,r7,32
20080730:	18800005 	stb	r2,0(r3)
20080734:	dac04617 	ldw	r11,280(sp)
20080738:	dbc04517 	ldw	r15,276(sp)
2008073c:	d8804417 	ldw	r2,272(sp)
20080740:	d8c04317 	ldw	r3,268(sp)
20080744:	d9004815 	stw	r4,288(sp)
20080748:	d9c04715 	stw	r7,284(sp)
2008074c:	d9004217 	ldw	r4,264(sp)
20080750:	d9c04117 	ldw	r7,260(sp)
20080754:	42000204 	addi	r8,r8,8
20080758:	da004915 	stw	r8,292(sp)
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
2008075c:	da004a17 	ldw	r8,296(sp)
20080760:	5ac00204 	addi	r11,r11,8
20080764:	7bc00204 	addi	r15,r15,8
20080768:	10800204 	addi	r2,r2,8
2008076c:	18c00204 	addi	r3,r3,8
20080770:	21000204 	addi	r4,r4,8
20080774:	39c00204 	addi	r7,r7,8
20080778:	4a400204 	addi	r9,r9,8
2008077c:	dac04615 	stw	r11,280(sp)
20080780:	dbc04515 	stw	r15,276(sp)
20080784:	d8804415 	stw	r2,272(sp)
20080788:	d8c04315 	stw	r3,268(sp)
2008078c:	d9004215 	stw	r4,264(sp)
20080790:	d9c04115 	stw	r7,260(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
20080794:	31800804 	addi	r6,r6,32
20080798:	52800804 	addi	r10,r10,32
2008079c:	e7000804 	addi	fp,fp,32
200807a0:	bdc00804 	addi	r23,r23,32
200807a4:	b5800804 	addi	r22,r22,32
200807a8:	ad400804 	addi	r21,r21,32
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
200807ac:	4a005026 	beq	r9,r8,200808f0 <idct+0x5a4>
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
200807b0:	d9c04717 	ldw	r7,284(sp)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
200807b4:	d9004817 	ldw	r4,288(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
200807b8:	aac00017 	ldw	r11,0(r21)
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
200807bc:	3b000017 	ldw	r12,0(r7)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
200807c0:	21000017 	ldw	r4,0(r4)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
200807c4:	b2000017 	ldw	r8,0(r22)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
200807c8:	b3c00017 	ldw	r15,0(r22)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
200807cc:	d9004b15 	stw	r4,300(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
200807d0:	413f883a 	add	ra,r8,r4
        z4 = tmp1 + tmp3;
200807d4:	5b11883a 	add	r8,r11,r12
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
200807d8:	fa0b883a 	add	r5,ra,r8
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200807dc:	30c00017 	ldw	r3,0(r6)
200807e0:	b9000017 	ldw	r4,0(r23)
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
200807e4:	d9c04b17 	ldw	r7,300(sp)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
200807e8:	7b1d883a 	add	r14,r15,r12
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
200807ec:	29496864 	muli	r5,r5,9633
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
200807f0:	423ce124 	muli	r8,r8,-3196
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
200807f4:	73b8cce4 	muli	r14,r14,-7373
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
200807f8:	1905883a 	add	r2,r3,r4
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
200807fc:	59e3883a 	add	r17,r11,r7
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
20080800:	60cc02e4 	muli	r3,r12,12299
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
20080804:	32c00017 	ldw	r11,0(r6)
20080808:	bbc00017 	ldw	r15,0(r23)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
2008080c:	4151883a 	add	r8,r8,r5
        outptr = block[ctr];
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
20080810:	53400017 	ldw	r13,0(r10)
        z3 = (int32_t) wsptr[6];
20080814:	e4000017 	ldw	r16,0(fp)
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
20080818:	7219883a 	add	r12,r14,r8
2008081c:	60d9883a 	add	r12,r12,r3
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
20080820:	5bc7c83a 	sub	r3,r11,r15
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080824:	b2c00017 	ldw	r11,0(r22)
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
20080828:	6c25883a 	add	r18,r13,r16
2008082c:	94845464 	muli	r18,r18,4433
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
20080830:	6b461fa4 	muli	r13,r13,6270
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080834:	abc00017 	ldw	r15,0(r21)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
20080838:	1004937a 	slli	r2,r2,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
2008083c:	5ac263a4 	muli	r11,r11,2446
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
20080840:	6c9b883a 	add	r13,r13,r18
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080844:	7bd06ce4 	muli	r15,r15,16819
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
20080848:	843137e4 	muli	r16,r16,-15137
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
2008084c:	1349883a 	add	r4,r2,r13
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
20080850:	1806937a 	slli	r3,r3,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
20080854:	dac04015 	stw	r11,256(sp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080858:	dac04b17 	ldw	r11,300(sp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
2008085c:	fff04ee4 	muli	ra,ra,-16069
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080860:	230f883a 	add	r7,r4,r12
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
20080864:	8c6b7f64 	muli	r17,r17,-20995
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
20080868:	dbc04c15 	stw	r15,304(sp)
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
2008086c:	84a1883a 	add	r16,r16,r18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080870:	3ccf883a 	add	r7,r7,r19
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
20080874:	5bd89524 	muli	r15,r11,25172
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
20080878:	1345c83a 	sub	r2,r2,r13
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
2008087c:	dac04c17 	ldw	r11,304(sp)
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
20080880:	1c1b883a 	add	r13,r3,r16
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
20080884:	380fd4ba 	srai	r7,r7,18
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
20080888:	1c21c83a 	sub	r16,r3,r16
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
2008088c:	d8c04017 	ldw	r3,256(sp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
20080890:	f94b883a 	add	r5,ra,r5
        z4 += z5;
        
        tmp0 += z1 + z3;
20080894:	715d883a 	add	r14,r14,r5
        tmp1 += z2 + z4;
20080898:	8a11883a 	add	r8,r17,r8
        tmp2 += z2 + z3;
2008089c:	894b883a 	add	r5,r17,r5
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
200808a0:	70dd883a 	add	r14,r14,r3
        tmp1 += z2 + z4;
200808a4:	42d1883a 	add	r8,r8,r11
        tmp2 += z2 + z3;
200808a8:	2bcb883a 	add	r5,r5,r15
200808ac:	383f610e 	bge	r7,zero,20080634 <__flash_rwdata_start+0xfffe57c8>
200808b0:	000f883a 	mov	r7,zero
200808b4:	003f6106 	br	2008063c <__flash_rwdata_start+0xfffe57d0>
200808b8:	0005883a 	mov	r2,zero
200808bc:	003f9606 	br	20080718 <__flash_rwdata_start+0xfffe58ac>
200808c0:	0007883a 	mov	r3,zero
200808c4:	003f8c06 	br	200806f8 <__flash_rwdata_start+0xfffe588c>
200808c8:	0021883a 	mov	r16,zero
200808cc:	003f8206 	br	200806d8 <__flash_rwdata_start+0xfffe586c>
200808d0:	0007883a 	mov	r3,zero
200808d4:	003f7806 	br	200806b8 <__flash_rwdata_start+0xfffe584c>
200808d8:	000b883a 	mov	r5,zero
200808dc:	003f6e06 	br	20080698 <__flash_rwdata_start+0xfffe582c>
200808e0:	0009883a 	mov	r4,zero
200808e4:	003f5d06 	br	2008065c <__flash_rwdata_start+0xfffe57f0>
200808e8:	0007883a 	mov	r3,zero
200808ec:	003f6206 	br	20080678 <__flash_rwdata_start+0xfffe580c>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
200808f0:	dfc05617 	ldw	ra,344(sp)
200808f4:	df005517 	ldw	fp,340(sp)
200808f8:	ddc05417 	ldw	r23,336(sp)
200808fc:	dd805317 	ldw	r22,332(sp)
20080900:	dd405217 	ldw	r21,328(sp)
20080904:	dd005117 	ldw	r20,324(sp)
20080908:	dcc05017 	ldw	r19,320(sp)
2008090c:	dc804f17 	ldw	r18,316(sp)
20080910:	dc404e17 	ldw	r17,312(sp)
20080914:	dc004d17 	ldw	r16,308(sp)
20080918:	dec05704 	addi	sp,sp,348
2008091c:	f800283a 	ret

20080920 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080920:	defff604 	addi	sp,sp,-40
20080924:	dd000515 	stw	r20,20(sp)
20080928:	dcc00415 	stw	r19,16(sp)
2008092c:	dc800315 	stw	r18,12(sp)
20080930:	dc400215 	stw	r17,8(sp)
20080934:	dfc00915 	stw	ra,36(sp)
20080938:	ddc00815 	stw	r23,32(sp)
2008093c:	dd800715 	stw	r22,28(sp)
20080940:	dd400615 	stw	r21,24(sp)
20080944:	dc000115 	stw	r16,4(sp)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080948:	2a000003 	ldbu	r8,0(r5)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
2008094c:	28c00043 	ldbu	r3,1(r5)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080950:	28800083 	ldbu	r2,2(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080954:	4010963a 	slli	r8,r8,24
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080958:	1806943a 	slli	r3,r3,16
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
2008095c:	2c0000c3 	ldbu	r16,3(r5)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080960:	1004923a 	slli	r2,r2,8
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080964:	dc800a17 	ldw	r18,40(sp)
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080968:	40c6b03a 	or	r3,r8,r3
2008096c:	1c06b03a 	or	r3,r3,r16
 To perform the update, the bitstream pointer is incremented every
 time bits from a new byte in the bistream are shifted in.

******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, bool P)
{
20080970:	2027883a 	mov	r19,r4
20080974:	3029883a 	mov	r20,r6
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080978:	18a0b03a 	or	r16,r3,r2
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
2008097c:	2c400104 	addi	r17,r5,4

    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;

    if(P == 0)
20080980:	90009d26 	beq	r18,zero,20080bf8 <lossless_decode+0x2d8>
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
20080984:	04c07e0e 	bge	zero,r19,20080b80 <lossless_decode+0x260>
20080988:	982691fa 	slli	r19,r19,7
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
2008098c:	03400034 	movhi	r13,0
20080990:	a00d883a 	mov	r6,r20
20080994:	a4e7883a 	add	r19,r20,r19
20080998:	6b42d404 	addi	r13,r13,2896
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
2008099c:	0009883a 	mov	r4,zero
200809a0:	002b883a 	mov	r21,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
200809a4:	02c00804 	movi	r11,32
200809a8:	03ffffc4 	movi	r15,-1
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
200809ac:	050001c4 	movi	r20,7
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
200809b0:	028003c4 	movi	r10,15
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
200809b4:	038005c4 	movi	r14,23
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
200809b8:	03000f84 	movi	r12,62

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
200809bc:	8006d73a 	srli	r3,r16,28
    if(size == 0){
200809c0:	18008226 	beq	r3,zero,20080bcc <lossless_decode+0x2ac>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
200809c4:	8004913a 	slli	r2,r16,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
200809c8:	58d3c83a 	sub	r9,r11,r3
200809cc:	1a3fffc4 	addi	r8,r3,-1
200809d0:	100b883a 	mov	r5,r2
200809d4:	2a44d83a 	srl	r2,r5,r9
200809d8:	120ad83a 	srl	r5,r2,r8
200809dc:	2800031e 	bne	r5,zero,200809ec <lossless_decode+0xcc>
200809e0:	78ca983a 	sll	r5,r15,r3
200809e4:	29400044 	addi	r5,r5,1
200809e8:	2885883a 	add	r2,r5,r2
200809ec:	18c00104 	addi	r3,r3,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
200809f0:	20c9883a 	add	r4,r4,r3

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
200809f4:	80e0983a 	sll	r16,r16,r3
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
200809f8:	a100100e 	bge	r20,r4,20080a3c <lossless_decode+0x11c>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
200809fc:	88c00003 	ldbu	r3,0(r17)
20080a00:	217ffe04 	addi	r5,r4,-8
20080a04:	1946983a 	sll	r3,r3,r5
20080a08:	80e0b03a 	or	r16,r16,r3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
20080a0c:	5100720e 	bge	r10,r4,20080bd8 <lossless_decode+0x2b8>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080a10:	88c00043 	ldbu	r3,1(r17)
20080a14:	217ffc04 	addi	r5,r4,-16
20080a18:	1946983a 	sll	r3,r3,r5
20080a1c:	80e0b03a 	or	r16,r16,r3
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
20080a20:	71006f0e 	bge	r14,r4,20080be0 <lossless_decode+0x2c0>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080a24:	88c00083 	ldbu	r3,2(r17)
20080a28:	217ffa04 	addi	r5,r4,-24
20080a2c:	1946983a 	sll	r3,r3,r5
20080a30:	80e0b03a 	or	r16,r16,r3
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
20080a34:	22c06c26 	beq	r4,r11,20080be8 <lossless_decode+0x2c8>
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080a38:	8c4000c4 	addi	r17,r17,3
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080a3c:	210001cc 	andi	r4,r4,7

        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
20080a40:	90005c26 	beq	r18,zero,20080bb4 <lossless_decode+0x294>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
20080a44:	3940000b 	ldhu	r5,0(r7)
20080a48:	30c0000b 	ldhu	r3,0(r6)
20080a4c:	1145383a 	mul	r2,r2,r5
20080a50:	10c5883a 	add	r2,r2,r3
20080a54:	3080000d 	sth	r2,0(r6)
        }
#else   //null dequantization, no differential
        pe[0] = ib.e;
#endif

        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
20080a58:	02000044 	movi	r8,1
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080a5c:	8004913a 	slli	r2,r16,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080a60:	8012d73a 	srli	r9,r16,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080a64:	1004d73a 	srli	r2,r2,28
    if(size == 0) {
20080a68:	10002726 	beq	r2,zero,20080b08 <lossless_decode+0x1e8>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
20080a6c:	8006923a 	slli	r3,r16,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080a70:	58afc83a 	sub	r23,r11,r2
20080a74:	15bfffc4 	addi	r22,r2,-1
20080a78:	180b883a 	mov	r5,r3
20080a7c:	2dc6d83a 	srl	r3,r5,r23
20080a80:	1d8ad83a 	srl	r5,r3,r22
20080a84:	2800031e 	bne	r5,zero,20080a94 <lossless_decode+0x174>
20080a88:	788a983a 	sll	r5,r15,r2
20080a8c:	29400044 	addi	r5,r5,1
20080a90:	28c7883a 	add	r3,r5,r3
20080a94:	10800204 	addi	r2,r2,8
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080a98:	89400003 	ldbu	r5,0(r17)
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
20080a9c:	2089883a 	add	r4,r4,r2
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080aa0:	25bffe04 	addi	r22,r4,-8

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080aa4:	8084983a 	sll	r2,r16,r2
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080aa8:	2da0983a 	sll	r16,r5,r22
20080aac:	80a0b03a 	or	r16,r16,r2
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
20080ab0:	51002a0e 	bge	r10,r4,20080b5c <lossless_decode+0x23c>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080ab4:	88800043 	ldbu	r2,1(r17)
20080ab8:	217ffc04 	addi	r5,r4,-16
20080abc:	1144983a 	sll	r2,r2,r5
20080ac0:	80a0b03a 	or	r16,r16,r2
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
20080ac4:	7100390e 	bge	r14,r4,20080bac <lossless_decode+0x28c>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080ac8:	89400083 	ldbu	r5,2(r17)
20080acc:	20bffa04 	addi	r2,r4,-24
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080ad0:	8c4000c4 	addi	r17,r17,3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080ad4:	2884983a 	sll	r2,r5,r2
20080ad8:	80a0b03a 	or	r16,r16,r2
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
20080adc:	18bfffcc 	andi	r2,r3,65535
20080ae0:	10a0001c 	xori	r2,r2,32768
20080ae4:	10a00004 	addi	r2,r2,-32768
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080ae8:	210001cc 	andi	r4,r4,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
20080aec:	1000091e 	bne	r2,zero,20080b14 <lossless_decode+0x1f4>
                if(ib.runlength == 15){
20080af0:	4a80211e 	bne	r9,r10,20080b78 <lossless_decode+0x258>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080af4:	8004913a 	slli	r2,r16,4
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    index += 16;
20080af8:	42000404 	addi	r8,r8,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080afc:	8012d73a 	srli	r9,r16,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080b00:	1004d73a 	srli	r2,r2,28
    if(size == 0) {
20080b04:	103fd91e 	bne	r2,zero,20080a6c <__flash_rwdata_start+0xfffe5c00>
20080b08:	00800204 	movi	r2,8
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20080b0c:	0007883a 	mov	r3,zero
20080b10:	003fe106 	br	20080a98 <__flash_rwdata_start+0xfffe5c2c>
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0

                index += ib.runlength;
20080b14:	4a11883a 	add	r8,r9,r8
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080b18:	41403fcc 	andi	r5,r8,255
20080b1c:	2945883a 	add	r2,r5,r5
20080b20:	1085883a 	add	r2,r2,r2
20080b24:	6885883a 	add	r2,r13,r2
20080b28:	10800017 	ldw	r2,0(r2)
20080b2c:	1085883a 	add	r2,r2,r2
20080b30:	3893883a 	add	r9,r7,r2
            else{ //ib.e != 0

                index += ib.runlength;
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
20080b34:	90000b26 	beq	r18,zero,20080b64 <lossless_decode+0x244>
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080b38:	4d80000b 	ldhu	r22,0(r9)
20080b3c:	3085883a 	add	r2,r6,r2
20080b40:	1240000b 	ldhu	r9,0(r2)
20080b44:	1d87383a 	mul	r3,r3,r22
20080b48:	1a47883a 	add	r3,r3,r9
20080b4c:	10c0000d 	sth	r3,0(r2)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
20080b50:	61400936 	bltu	r12,r5,20080b78 <lossless_decode+0x258>
                index++;
20080b54:	42000044 	addi	r8,r8,1
20080b58:	003fc006 	br	20080a5c <__flash_rwdata_start+0xfffe5bf0>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080b5c:	8c400044 	addi	r17,r17,1
20080b60:	003fde06 	br	20080adc <__flash_rwdata_start+0xfffe5c70>
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
20080b64:	4a40000b 	ldhu	r9,0(r9)
20080b68:	3085883a 	add	r2,r6,r2
20080b6c:	1a47383a 	mul	r3,r3,r9
20080b70:	10c0000d 	sth	r3,0(r2)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
20080b74:	617ff72e 	bgeu	r12,r5,20080b54 <__flash_rwdata_start+0xfffe5ce8>
20080b78:	31802004 	addi	r6,r6,128
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));

    for(int count = 0; count < num_blocks; count ++){
20080b7c:	34ff8f1e 	bne	r6,r19,200809bc <__flash_rwdata_start+0xfffe5b50>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
20080b80:	dfc00917 	ldw	ra,36(sp)
20080b84:	ddc00817 	ldw	r23,32(sp)
20080b88:	dd800717 	ldw	r22,28(sp)
20080b8c:	dd400617 	ldw	r21,24(sp)
20080b90:	dd000517 	ldw	r20,20(sp)
20080b94:	dcc00417 	ldw	r19,16(sp)
20080b98:	dc800317 	ldw	r18,12(sp)
20080b9c:	dc400217 	ldw	r17,8(sp)
20080ba0:	dc000117 	ldw	r16,4(sp)
20080ba4:	dec00a04 	addi	sp,sp,40
20080ba8:	f800283a 	ret
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080bac:	8c400084 	addi	r17,r17,2
20080bb0:	003fca06 	br	20080adc <__flash_rwdata_start+0xfffe5c70>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080bb4:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
20080bb8:	1545883a 	add	r2,r2,r21
20080bbc:	102b883a 	mov	r21,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
20080bc0:	10c5383a 	mul	r2,r2,r3
20080bc4:	3080000d 	sth	r2,0(r6)
20080bc8:	003fa306 	br	20080a58 <__flash_rwdata_start+0xfffe5bec>
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
20080bcc:	00c00104 	movi	r3,4
20080bd0:	0005883a 	mov	r2,zero
20080bd4:	003f8606 	br	200809f0 <__flash_rwdata_start+0xfffe5b84>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080bd8:	8c400044 	addi	r17,r17,1
20080bdc:	003f9706 	br	20080a3c <__flash_rwdata_start+0xfffe5bd0>
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080be0:	8c400084 	addi	r17,r17,2
20080be4:	003f9506 	br	20080a3c <__flash_rwdata_start+0xfffe5bd0>
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080be8:	88c000c3 	ldbu	r3,3(r17)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080bec:	8c400104 	addi	r17,r17,4
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080bf0:	80e0b03a 	or	r16,r16,r3
20080bf4:	003f9106 	br	20080a3c <__flash_rwdata_start+0xfffe5bd0>
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;

    if(P == 0)
        memset(DCACq, 0, num_blocks*64*sizeof(DCTELEM));
20080bf8:	200c91fa 	slli	r6,r4,7
20080bfc:	000b883a 	mov	r5,zero
20080c00:	a009883a 	mov	r4,r20
20080c04:	d9c00015 	stw	r7,0(sp)
20080c08:	008a7ac0 	call	2008a7ac <memset>
20080c0c:	d9c00017 	ldw	r7,0(sp)
20080c10:	003f5c06 	br	20080984 <__flash_rwdata_start+0xfffe5b18>

20080c14 <update_buffer>:

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080c14:	20800017 	ldw	r2,0(r4)
20080c18:	39c03fcc 	andi	r7,r7,255
    //total number of bits to be shifted in
    *pbitcount += size;
20080c1c:	30c00017 	ldw	r3,0(r6)

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080c20:	11c4983a 	sll	r2,r2,r7
    //total number of bits to be shifted in
    *pbitcount += size;
20080c24:	38cf883a 	add	r7,r7,r3

//update buffer
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount,
        uint8_t size) {
    //remove decoded bits
    (*pbitbuffer) <<= size;
20080c28:	20800015 	stw	r2,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
20080c2c:	31c00015 	stw	r7,0(r6)
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
20080c30:	00c001c4 	movi	r3,7
20080c34:	19c01c0e 	bge	r3,r7,20080ca8 <update_buffer+0x94>
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080c38:	28c00017 	ldw	r3,0(r5)
20080c3c:	3a3ffe04 	addi	r8,r7,-8
20080c40:	1a400003 	ldbu	r9,0(r3)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c44:	1a800044 	addi	r10,r3,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
20080c48:	4a10983a 	sll	r8,r9,r8
20080c4c:	4084b03a 	or	r2,r8,r2
20080c50:	20800015 	stw	r2,0(r4)
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c54:	2a800015 	stw	r10,0(r5)
        if (*pbitcount >= 16) { //at least 2 bytes
20080c58:	020003c4 	movi	r8,15
20080c5c:	41c0120e 	bge	r8,r7,20080ca8 <update_buffer+0x94>
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080c60:	1a400043 	ldbu	r9,1(r3)
20080c64:	3a3ffc04 	addi	r8,r7,-16
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c68:	1a800084 	addi	r10,r3,2
    *pbitcount += size;
    if (*pbitcount >= 8) { //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
20080c6c:	4a10983a 	sll	r8,r9,r8
20080c70:	1204b03a 	or	r2,r2,r8
20080c74:	20800015 	stw	r2,0(r4)
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c78:	2a800015 	stw	r10,0(r5)
            if (*pbitcount >= 24) { //at least 3 bytes
20080c7c:	020005c4 	movi	r8,23
20080c80:	41c0090e 	bge	r8,r7,20080ca8 <update_buffer+0x94>
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080c84:	1a400083 	ldbu	r9,2(r3)
20080c88:	3a3ffa04 	addi	r8,r7,-24
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c8c:	1a8000c4 	addi	r10,r3,3
        *pbitstream = ((uint8_t*) *pbitstream) + 1;
        if (*pbitcount >= 16) { //at least 2 bytes
            *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
20080c90:	4a10983a 	sll	r8,r9,r8
20080c94:	1204b03a 	or	r2,r2,r8
20080c98:	20800015 	stw	r2,0(r4)
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080c9c:	2a800015 	stw	r10,0(r5)
                if (*pbitcount == 32) { //all 4 bytes shifted in
20080ca0:	02000804 	movi	r8,32
20080ca4:	3a000326 	beq	r7,r8,20080cb4 <update_buffer+0xa0>
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
20080ca8:	39c001cc 	andi	r7,r7,7
20080cac:	31c00015 	stw	r7,0(r6)
20080cb0:	f800283a 	ret
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080cb4:	1a0000c3 	ldbu	r8,3(r3)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080cb8:	18c00104 	addi	r3,r3,4
            *pbitstream = ((uint8_t*) *pbitstream) + 1;
            if (*pbitcount >= 24) { //at least 3 bytes
                *pbitbuffer |= *((uint8_t*) (*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*) *pbitstream) + 1;
                if (*pbitcount == 32) { //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*) (*pbitstream));
20080cbc:	1204b03a 	or	r2,r2,r8
20080cc0:	20800015 	stw	r2,0(r4)
                    *pbitstream = ((uint8_t*) *pbitstream) + 1;
20080cc4:	28c00015 	stw	r3,0(r5)
20080cc8:	003ff706 	br	20080ca8 <__flash_rwdata_start+0xfffe5e3c>

20080ccc <input_DC>:

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
20080ccc:	2006d73a 	srli	r3,r4,28
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
20080cd0:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
20080cd4:	18001426 	beq	r3,zero,20080d28 <input_DC+0x5c>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
20080cd8:	2008913a 	slli	r4,r4,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080cdc:	00800804 	movi	r2,32
20080ce0:	10c5c83a 	sub	r2,r2,r3
20080ce4:	2088d83a 	srl	r4,r4,r2
20080ce8:	18bfffc4 	addi	r2,r3,-1
20080cec:	2084d83a 	srl	r2,r4,r2
20080cf0:	10000826 	beq	r2,zero,20080d14 <input_DC+0x48>
        ib.bits = size + 4;
20080cf4:	18c00104 	addi	r3,r3,4
    }
    return ib;
20080cf8:	d8c00005 	stb	r3,0(sp)
20080cfc:	d8000045 	stb	zero,1(sp)
20080d00:	d880000b 	ldhu	r2,0(sp)
20080d04:	2008943a 	slli	r4,r4,16
}
20080d08:	1104b03a 	or	r2,r2,r4
20080d0c:	dec00104 	addi	sp,sp,4
20080d10:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080d14:	00bfffc4 	movi	r2,-1
20080d18:	10c4983a 	sll	r2,r2,r3
20080d1c:	10800044 	addi	r2,r2,1
20080d20:	1109883a 	add	r4,r2,r4
20080d24:	003ff306 	br	20080cf4 <__flash_rwdata_start+0xfffe5e88>
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
        ib.e = 0;
20080d28:	0009883a 	mov	r4,zero
        ib.bits = 4;
20080d2c:	00c00104 	movi	r3,4
20080d30:	003ff106 	br	20080cf8 <__flash_rwdata_start+0xfffe5e8c>

20080d34 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
20080d34:	2006913a 	slli	r3,r4,4
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
20080d38:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
20080d3c:	200ad73a 	srli	r5,r4,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
20080d40:	1806d73a 	srli	r3,r3,28
    if(size == 0) {
20080d44:	18001426 	beq	r3,zero,20080d98 <input_AC+0x64>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
20080d48:	2008923a 	slli	r4,r4,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080d4c:	00800804 	movi	r2,32
20080d50:	10c5c83a 	sub	r2,r2,r3
20080d54:	2088d83a 	srl	r4,r4,r2
20080d58:	18bfffc4 	addi	r2,r3,-1
20080d5c:	2084d83a 	srl	r2,r4,r2
20080d60:	10000826 	beq	r2,zero,20080d84 <input_AC+0x50>
        ib.bits = size + 8;
20080d64:	18c00204 	addi	r3,r3,8
    }
    return ib;
20080d68:	d8c00005 	stb	r3,0(sp)
20080d6c:	d9400045 	stb	r5,1(sp)
20080d70:	d880000b 	ldhu	r2,0(sp)
20080d74:	2008943a 	slli	r4,r4,16
}
20080d78:	1104b03a 	or	r2,r2,r4
20080d7c:	dec00104 	addi	sp,sp,4
20080d80:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
20080d84:	00bfffc4 	movi	r2,-1
20080d88:	10c4983a 	sll	r2,r2,r3
20080d8c:	10800044 	addi	r2,r2,1
20080d90:	1109883a 	add	r4,r2,r4
20080d94:	003ff306 	br	20080d64 <__flash_rwdata_start+0xfffe5ef8>
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
20080d98:	0009883a 	mov	r4,zero
        ib.bits = 8;
20080d9c:	00c00204 	movi	r3,8
20080da0:	003ff106 	br	20080d68 <__flash_rwdata_start+0xfffe5efc>

20080da4 <write_dma_isr>:
	printf("\n");

	return 0;
}

static void write_dma_isr(void* context) {
20080da4:	f800283a 	ret

20080da8 <mjpeg423_decode>:

//Interrupt related function prototypes
static void write_dma_isr(void* context);

void mjpeg423_decode(FAT_FILE_HANDLE file_handle,
		hw_video_display* display, int* skip_fw_flag, int* skip_rv_flag, int* exit_flag) {
20080da8:	deffcb04 	addi	sp,sp,-212
20080dac:	dfc03415 	stw	ra,208(sp)
20080db0:	df003315 	stw	fp,204(sp)
20080db4:	ddc03215 	stw	r23,200(sp)
20080db8:	df003304 	addi	fp,sp,204
20080dbc:	dd803115 	stw	r22,196(sp)
20080dc0:	dd403015 	stw	r21,192(sp)
20080dc4:	dd002f15 	stw	r20,188(sp)
20080dc8:	dcc02e15 	stw	r19,184(sp)
20080dcc:	dc802d15 	stw	r18,180(sp)
20080dd0:	dc402c15 	stw	r17,176(sp)
20080dd4:	dc002b15 	stw	r16,172(sp)
20080dd8:	deffe404 	addi	sp,sp,-112
20080ddc:	d88006c4 	addi	r2,sp,27
20080de0:	1004d13a 	srli	r2,r2,4
20080de4:	e13fe515 	stw	r4,-108(fp)
	uint32_t Ysize, Cbsize, frame_size, frame_type;
	uint32_t file_header[5], frame_header[4];

	//IDCT hardware setup
	//open dma streams
	alt_msgdma_dev *read_device_ptr = alt_msgdma_open(read_dma_name);
20080de8:	d1200117 	ldw	r4,-32764(gp)

//Interrupt related function prototypes
static void write_dma_isr(void* context);

void mjpeg423_decode(FAT_FILE_HANDLE file_handle,
		hw_video_display* display, int* skip_fw_flag, int* skip_rv_flag, int* exit_flag) {
20080dec:	1004913a 	slli	r2,r2,4
20080df0:	e17fe615 	stw	r5,-104(fp)
20080df4:	e1bfec15 	stw	r6,-80(fp)
20080df8:	e1ffed15 	stw	r7,-76(fp)
20080dfc:	e0bfea15 	stw	r2,-88(fp)
	uint32_t Ysize, Cbsize, frame_size, frame_type;
	uint32_t file_header[5], frame_header[4];

	//IDCT hardware setup
	//open dma streams
	alt_msgdma_dev *read_device_ptr = alt_msgdma_open(read_dma_name);
20080e00:	0098fe00 	call	20098fe0 <alt_msgdma_open>
	alt_msgdma_dev *write_device_ptr = alt_msgdma_open(write_dma_name);
20080e04:	d1200017 	ldw	r4,-32768(gp)
	uint32_t Ysize, Cbsize, frame_size, frame_type;
	uint32_t file_header[5], frame_header[4];

	//IDCT hardware setup
	//open dma streams
	alt_msgdma_dev *read_device_ptr = alt_msgdma_open(read_dma_name);
20080e08:	e0bfe115 	stw	r2,-124(fp)
	alt_msgdma_dev *write_device_ptr = alt_msgdma_open(write_dma_name);
20080e0c:	0098fe00 	call	20098fe0 <alt_msgdma_open>
	//register callback
	alt_msgdma_register_callback(read_device_ptr, write_dma_isr,
20080e10:	e13fe117 	ldw	r4,-124(fp)
20080e14:	01480234 	movhi	r5,8200
20080e18:	29436904 	addi	r5,r5,3492
20080e1c:	01800404 	movi	r6,16
20080e20:	000f883a 	mov	r7,zero
	uint32_t file_header[5], frame_header[4];

	//IDCT hardware setup
	//open dma streams
	alt_msgdma_dev *read_device_ptr = alt_msgdma_open(read_dma_name);
	alt_msgdma_dev *write_device_ptr = alt_msgdma_open(write_dma_name);
20080e24:	e0bfe215 	stw	r2,-120(fp)
	//register callback
	alt_msgdma_register_callback(read_device_ptr, write_dma_isr,
20080e28:	009911c0 	call	2009911c <alt_msgdma_register_callback>
			ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, NULL);
	alt_msgdma_register_callback(write_device_ptr, write_dma_isr,
20080e2c:	e13fe217 	ldw	r4,-120(fp)
20080e30:	01480234 	movhi	r5,8200
20080e34:	29436904 	addi	r5,r5,3492
20080e38:	01800404 	movi	r6,16
20080e3c:	000f883a 	mov	r7,zero
20080e40:	009911c0 	call	2009911c <alt_msgdma_register_callback>
			ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK, NULL);

	//idct_test(read_device_ptr, write_device_ptr);

	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
20080e44:	e13fe517 	ldw	r4,-108(fp)
20080e48:	e17fd004 	addi	r5,fp,-192
20080e4c:	01800504 	movi	r6,20
20080e50:	008284c0 	call	2008284c <Fat_FileRead>
20080e54:	00c00044 	movi	r3,1
20080e58:	10c00326 	beq	r2,r3,20080e68 <mjpeg423_decode+0xc0>
		printf("cannot read input file");
20080e5c:	01000034 	movhi	r4,0
20080e60:	21000604 	addi	r4,r4,24
20080e64:	008a8fc0 	call	2008a8fc <printf>
	num_frames = file_header[0];
	w_size = file_header[1];
	h_size = file_header[2];
	num_iframes = file_header[3];
20080e68:	e0ffd317 	ldw	r3,-180(fp)
	//idct_test(read_device_ptr, write_device_ptr);

	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
		printf("cannot read input file");
	num_frames = file_header[0];
	w_size = file_header[1];
20080e6c:	e5bfd117 	ldw	r22,-188(fp)
	h_size = file_header[2];
20080e70:	e47fd217 	ldw	r17,-184(fp)
	int wCb_size = w_size / 8;
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
20080e74:	180890fa 	slli	r4,r3,3
	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
		printf("cannot read input file");
	num_frames = file_header[0];
	w_size = file_header[1];
	h_size = file_header[2];
	num_iframes = file_header[3];
20080e78:	e0ffe815 	stw	r3,-96(fp)

	//idct_test(read_device_ptr, write_device_ptr);

	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
		printf("cannot read input file");
	num_frames = file_header[0];
20080e7c:	e0ffd017 	ldw	r3,-192(fp)
	w_size = file_header[1];
	h_size = file_header[2];
	num_iframes = file_header[3];
	payload_size = file_header[4];
20080e80:	e43fd417 	ldw	r16,-176(fp)
	printf("Height %u\n", h_size);
	printf("Num i frames %u\n", num_iframes);
#endif

	int hCb_size = h_size / 8;           //number of chrominance blocks
	int wCb_size = w_size / 8;
20080e84:	b02ed0fa 	srli	r23,r22,3

	//idct_test(read_device_ptr, write_device_ptr);

	if (Fat_FileRead(file_handle, file_header, 5 * sizeof(uint32_t)) != 1)
		printf("cannot read input file");
	num_frames = file_header[0];
20080e88:	e0ffeb15 	stw	r3,-84(fp)
	int wCb_size = w_size / 8;
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
20080e8c:	0089e280 	call	20089e28 <malloc>

	//main data structures. See lab manual for explanation
	rgb_pixel_t* rgbblock;
	if ((rgbblock = malloc(w_size * h_size * sizeof(rgb_pixel_t))) == NULL)
20080e90:	b449383a 	mul	r4,r22,r17
	printf("Width %u\n", w_size);
	printf("Height %u\n", h_size);
	printf("Num i frames %u\n", num_iframes);
#endif

	int hCb_size = h_size / 8;           //number of chrominance blocks
20080e94:	8822d0fa 	srli	r17,r17,3
	int wCb_size = w_size / 8;
	int hYb_size = h_size / 8; //number of luminance blocks. Same as chrominance in the sample app
	int wYb_size = w_size / 8;

	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);
20080e98:	e0bfe915 	stw	r2,-92(fp)

	//main data structures. See lab manual for explanation
	rgb_pixel_t* rgbblock;
	if ((rgbblock = malloc(w_size * h_size * sizeof(rgb_pixel_t))) == NULL)
20080e9c:	2109883a 	add	r4,r4,r4
20080ea0:	2109883a 	add	r4,r4,r4
	printf("Width %u\n", w_size);
	printf("Height %u\n", h_size);
	printf("Num i frames %u\n", num_iframes);
#endif

	int hCb_size = h_size / 8;           //number of chrominance blocks
20080ea4:	e47fdb15 	stw	r17,-148(fp)
	//trailer structure
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);

	//main data structures. See lab manual for explanation
	rgb_pixel_t* rgbblock;
	if ((rgbblock = malloc(w_size * h_size * sizeof(rgb_pixel_t))) == NULL)
20080ea8:	0089e280 	call	20089e28 <malloc>
20080eac:	e0bff715 	stw	r2,-36(fp)
20080eb0:	1001e626 	beq	r2,zero,2008164c <mjpeg423_decode+0x8a4>
		printf("cannot allocate rgbblock");
	color_block_t* Yblock;
	if ((Yblock = malloc(hYb_size * wYb_size * 64)) == NULL)
20080eb4:	e0ffdb17 	ldw	r3,-148(fp)
20080eb8:	1dc7383a 	mul	r3,r3,r23
20080ebc:	182491ba 	slli	r18,r3,6
20080ec0:	e0ffe315 	stw	r3,-116(fp)
20080ec4:	9009883a 	mov	r4,r18
20080ec8:	0089e280 	call	20089e28 <malloc>
20080ecc:	e0bfdd15 	stw	r2,-140(fp)
20080ed0:	1001e226 	beq	r2,zero,2008165c <mjpeg423_decode+0x8b4>
		printf("cannot allocate Yblock");
	color_block_t* Cbblock;
	if ((Cbblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20080ed4:	9009883a 	mov	r4,r18
20080ed8:	0089e280 	call	20089e28 <malloc>
20080edc:	e0bfde15 	stw	r2,-136(fp)
20080ee0:	1001e526 	beq	r2,zero,20081678 <mjpeg423_decode+0x8d0>
		printf("cannot allocate Cbblock");
	color_block_t* Crblock;
	if ((Crblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20080ee4:	9009883a 	mov	r4,r18
20080ee8:	0089e280 	call	20089e28 <malloc>
20080eec:	e0bfdf15 	stw	r2,-132(fp)
20080ef0:	1001e826 	beq	r2,zero,20081694 <mjpeg423_decode+0x8ec>
		printf("cannot allocate Crblock");
	;
	dct_block_t* YDCAC;
	if ((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM))) == NULL)
20080ef4:	e0ffe317 	ldw	r3,-116(fp)
20080ef8:	182691fa 	slli	r19,r3,7
20080efc:	9809883a 	mov	r4,r19
20080f00:	0089e280 	call	20089e28 <malloc>
20080f04:	e0bfee15 	stw	r2,-72(fp)
20080f08:	1001e626 	beq	r2,zero,200816a4 <mjpeg423_decode+0x8fc>
		printf("cannot allocate YDCAC");
	dct_block_t* CbDCAC;
	if ((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
20080f0c:	9809883a 	mov	r4,r19
20080f10:	0089e280 	call	20089e28 <malloc>
20080f14:	e0bfef15 	stw	r2,-68(fp)
20080f18:	1001e926 	beq	r2,zero,200816c0 <mjpeg423_decode+0x918>
		printf("cannot allocate CbDCAC");
	dct_block_t* CrDCAC;
	if ((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
20080f1c:	9809883a 	mov	r4,r19
20080f20:	0089e280 	call	20089e28 <malloc>
20080f24:	e0bff015 	stw	r2,-64(fp)
20080f28:	1001ec26 	beq	r2,zero,200816dc <mjpeg423_decode+0x934>
	//the bitstream is then read from the file into Ybitstream
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(
			hYb_size * wYb_size * 64 * sizeof(DCTELEM)
					+ 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
20080f2c:	e0ffdb17 	ldw	r3,-148(fp)
20080f30:	180891fa 	slli	r4,r3,7
20080f34:	25c9383a 	mul	r4,r4,r23
20080f38:	2489883a 	add	r4,r4,r18
		printf("cannot allocate CrDCAC");
	//Ybitstream is assigned a size sufficient to hold all bistreams
	//the bitstream is then read from the file into Ybitstream
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(
20080f3c:	2109883a 	add	r4,r4,r4
20080f40:	0089e280 	call	20089e28 <malloc>
20080f44:	e0bfe415 	stw	r2,-112(fp)
20080f48:	1001bc26 	beq	r2,zero,2008163c <mjpeg423_decode+0x894>
	uint8_t* Crbitstream;

	//read trailer. Note: the trailer information is not used in the sample decoder app
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
20080f4c:	e13fe517 	ldw	r4,-108(fp)
20080f50:	000b883a 	mov	r5,zero
20080f54:	81800504 	addi	r6,r16,20
20080f58:	0082ba80 	call	20082ba8 <Fat_FileSeek>
20080f5c:	1000031e 	bne	r2,zero,20080f6c <mjpeg423_decode+0x1c4>
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
20080f60:	01000034 	movhi	r4,0
20080f64:	21003e04 	addi	r4,r4,248
20080f68:	008a8fc0 	call	2008a8fc <printf>
	for (int count = 0; count < num_iframes; count++) {
20080f6c:	e0ffe817 	ldw	r3,-96(fp)
20080f70:	18001b26 	beq	r3,zero,20080fe0 <mjpeg423_decode+0x238>
20080f74:	182b883a 	mov	r21,r3
20080f78:	e43fe917 	ldw	r16,-92(fp)
20080f7c:	0023883a 	mov	r17,zero
20080f80:	e53fe517 	ldw	r20,-108(fp)
20080f84:	00000706 	br	20080fa4 <mjpeg423_decode+0x1fc>
		if (Fat_FileRead(file_handle, &(trailer[count].frame_index),
				sizeof(uint32_t)) == 0)
			printf("cannot read iframe");
		//if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		//if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		if (Fat_FileRead(file_handle, &(trailer[count].frame_position),
20080f88:	81400104 	addi	r5,r16,4
20080f8c:	a009883a 	mov	r4,r20
20080f90:	01800104 	movi	r6,4
20080f94:	008284c0 	call	2008284c <Fat_FileRead>
20080f98:	10000c26 	beq	r2,zero,20080fcc <mjpeg423_decode+0x224>
20080f9c:	84000204 	addi	r16,r16,8
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
	for (int count = 0; count < num_iframes; count++) {
20080fa0:	8d400f26 	beq	r17,r21,20080fe0 <mjpeg423_decode+0x238>
		if (Fat_FileRead(file_handle, &(trailer[count].frame_index),
20080fa4:	800b883a 	mov	r5,r16
20080fa8:	a009883a 	mov	r4,r20
20080fac:	01800104 	movi	r6,4
20080fb0:	008284c0 	call	2008284c <Fat_FileRead>
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
	for (int count = 0; count < num_iframes; count++) {
20080fb4:	8c400044 	addi	r17,r17,1
		if (Fat_FileRead(file_handle, &(trailer[count].frame_index),
20080fb8:	103ff31e 	bne	r2,zero,20080f88 <__flash_rwdata_start+0xfffe611c>
				sizeof(uint32_t)) == 0)
			printf("cannot read iframe");
20080fbc:	01000034 	movhi	r4,0
20080fc0:	21004404 	addi	r4,r4,272
20080fc4:	008a8fc0 	call	2008a8fc <printf>
20080fc8:	003fef06 	br	20080f88 <__flash_rwdata_start+0xfffe611c>
		//if(fread(&(trailer[count].frame_index), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		//if(fread(&(trailer[count].frame_position), sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		if (Fat_FileRead(file_handle, &(trailer[count].frame_position),
				sizeof(uint32_t)) == 0)
			printf("cannot read iframe");
20080fcc:	01000034 	movhi	r4,0
20080fd0:	21004404 	addi	r4,r4,272
20080fd4:	008a8fc0 	call	2008a8fc <printf>
20080fd8:	84000204 	addi	r16,r16,8
	//set file to beginning of trailer
	//Fat_FileSeek(file_handle, 5 * sizeof(uint32_t) + payload_size, 0)
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN,
			5 * sizeof(uint32_t) + payload_size) == 0)
		printf("cannot seek into file");
	for (int count = 0; count < num_iframes; count++) {
20080fdc:	8d7ff11e 	bne	r17,r21,20080fa4 <__flash_rwdata_start+0xfffe6138>
		printf("I frame index %u, ", trailer[count].frame_index);
		printf("position %u\n", trailer[count].frame_position);
#endif
	}
	//set it back to beginning of payload
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, 5 * sizeof(uint32_t)) == 0)
20080fe0:	e13fe517 	ldw	r4,-108(fp)
20080fe4:	000b883a 	mov	r5,zero
20080fe8:	01800504 	movi	r6,20
20080fec:	0082ba80 	call	20082ba8 <Fat_FileSeek>
20080ff0:	10017826 	beq	r2,zero,200815d4 <mjpeg423_decode+0x82c>
	alt_msgdma_standard_descriptor mm_to_st_dma_struct_Cb;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct_Cb;
	alt_msgdma_standard_descriptor mm_to_st_dma_struct_Cr;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct_Cr;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20080ff4:	e0ffea17 	ldw	r3,-88(fp)
20080ff8:	e13fe117 	ldw	r4,-124(fp)
20080ffc:	e1bfee17 	ldw	r6,-72(fp)
20081000:	18c01404 	addi	r3,r3,80
20081004:	00900004 	movi	r2,16384
20081008:	d8800015 	stw	r2,0(sp)
2008100c:	180b883a 	mov	r5,r3
20081010:	980f883a 	mov	r7,r19
20081014:	e0fff515 	stw	r3,-44(fp)
20081018:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
2008101c:	10000326 	beq	r2,zero,2008102c <mjpeg423_decode+0x284>
					read_device_ptr, &mm_to_st_dma_struct_Y, YDCAC,
					hYb_size * wYb_size * 64 * 2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20081020:	01000034 	movhi	r4,0
20081024:	21004904 	addi	r4,r4,292
20081028:	008aa000 	call	2008aa00 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
2008102c:	e0ffea17 	ldw	r3,-88(fp)
20081030:	e13fe217 	ldw	r4,-120(fp)
20081034:	e1bfdd17 	ldw	r6,-140(fp)
20081038:	18c01004 	addi	r3,r3,64
2008103c:	00900004 	movi	r2,16384
20081040:	d8800015 	stw	r2,0(sp)
20081044:	180b883a 	mov	r5,r3
20081048:	900f883a 	mov	r7,r18
2008104c:	e0fff415 	stw	r3,-48(fp)
20081050:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081054:	10000326 	beq	r2,zero,20081064 <mjpeg423_decode+0x2bc>
					write_device_ptr, &st_to_mm_dma_struct_Y, Yblock,
					hYb_size * wYb_size * 64,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
20081058:	01000034 	movhi	r4,0
2008105c:	21005304 	addi	r4,r4,332
20081060:	008aa000 	call	2008aa00 <puts>
	}
	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20081064:	e0ffea17 	ldw	r3,-88(fp)
20081068:	e13fe117 	ldw	r4,-124(fp)
2008106c:	e1bfef17 	ldw	r6,-68(fp)
20081070:	18c00c04 	addi	r3,r3,48
20081074:	00900004 	movi	r2,16384
20081078:	d8800015 	stw	r2,0(sp)
2008107c:	180b883a 	mov	r5,r3
20081080:	980f883a 	mov	r7,r19
20081084:	e0fff315 	stw	r3,-52(fp)
20081088:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
2008108c:	10000326 	beq	r2,zero,2008109c <mjpeg423_decode+0x2f4>
					read_device_ptr, &mm_to_st_dma_struct_Cb, CbDCAC,
					hCb_size * wCb_size * 64 * 2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20081090:	01000034 	movhi	r4,0
20081094:	21004904 	addi	r4,r4,292
20081098:	008aa000 	call	2008aa00 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
2008109c:	e0ffea17 	ldw	r3,-88(fp)
200810a0:	e13fe217 	ldw	r4,-120(fp)
200810a4:	e1bfde17 	ldw	r6,-136(fp)
200810a8:	18c00804 	addi	r3,r3,32
200810ac:	00900004 	movi	r2,16384
200810b0:	d8800015 	stw	r2,0(sp)
200810b4:	180b883a 	mov	r5,r3
200810b8:	900f883a 	mov	r7,r18
200810bc:	e0fff215 	stw	r3,-56(fp)
200810c0:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
200810c4:	10000326 	beq	r2,zero,200810d4 <mjpeg423_decode+0x32c>
					write_device_ptr, &st_to_mm_dma_struct_Cb, Cbblock,
					hCb_size * wCb_size * 64,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
200810c8:	01000034 	movhi	r4,0
200810cc:	21005304 	addi	r4,r4,332
200810d0:	008aa000 	call	2008aa00 <puts>
	}
	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
200810d4:	e0ffea17 	ldw	r3,-88(fp)
200810d8:	e13fe117 	ldw	r4,-124(fp)
200810dc:	e1bff017 	ldw	r6,-64(fp)
200810e0:	18c00404 	addi	r3,r3,16
200810e4:	00900004 	movi	r2,16384
200810e8:	d8800015 	stw	r2,0(sp)
200810ec:	180b883a 	mov	r5,r3
200810f0:	980f883a 	mov	r7,r19
200810f4:	e0fff115 	stw	r3,-60(fp)
200810f8:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
200810fc:	10000326 	beq	r2,zero,2008110c <mjpeg423_decode+0x364>
					read_device_ptr, &mm_to_st_dma_struct_Cr, CrDCAC,
					hCb_size * wCb_size * 64 * 2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20081100:	01000034 	movhi	r4,0
20081104:	21004904 	addi	r4,r4,292
20081108:	008aa000 	call	2008aa00 <puts>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
2008110c:	e13fe217 	ldw	r4,-120(fp)
20081110:	e17fea17 	ldw	r5,-88(fp)
20081114:	e1bfdf17 	ldw	r6,-132(fp)
20081118:	00900004 	movi	r2,16384
2008111c:	d8800015 	stw	r2,0(sp)
20081120:	900f883a 	mov	r7,r18
20081124:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081128:	10000326 	beq	r2,zero,20081138 <mjpeg423_decode+0x390>
					write_device_ptr, &st_to_mm_dma_struct_Cr, Crblock,
					hCb_size * wCb_size * 64,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
2008112c:	01000034 	movhi	r4,0
20081130:	21005304 	addi	r4,r4,332
20081134:	008aa000 	call	2008aa00 <puts>
	}

	//encode and write frames
	for (int frame_index = 0; frame_index < num_frames; frame_index++) {
20081138:	e0ffeb17 	ldw	r3,-84(fp)
2008113c:	1800b526 	beq	r3,zero,20081414 <mjpeg423_decode+0x66c>
20081140:	b80691ba 	slli	r3,r23,6

		//read frame payload
		//if(fread(frame_header, 4*sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		alt_timestamp_start();
		file_start_t = alt_timestamp();
		if (Fat_FileRead(file_handle, frame_header, 4 * sizeof(uint32_t)) != 1)
20081144:	b805883a 	mov	r2,r23
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
	}

	//encode and write frames
	for (int frame_index = 0; frame_index < num_frames; frame_index++) {
20081148:	e03fe015 	stw	zero,-128(fp)
2008114c:	e0ffdc15 	stw	r3,-144(fp)
20081150:	e0ffe917 	ldw	r3,-92(fp)

		//read frame payload
		//if(fread(frame_header, 4*sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		alt_timestamp_start();
		file_start_t = alt_timestamp();
		if (Fat_FileRead(file_handle, frame_header, 4 * sizeof(uint32_t)) != 1)
20081154:	b02f883a 	mov	r23,r22
20081158:	102d883a 	mov	r22,r2
2008115c:	18c00204 	addi	r3,r3,8
20081160:	e0fff615 	stw	r3,-40(fp)
		//if(*start_decode_flag == 0 && frame_index != 0){
		//	frame_index--;
		//	continue;
		//}

		if(*skip_fw_flag != 0){
20081164:	e0ffec17 	ldw	r3,-80(fp)
20081168:	18800017 	ldw	r2,0(r3)
2008116c:	10001926 	beq	r2,zero,200811d4 <mjpeg423_decode+0x42c>
			*skip_fw_flag = 0;
20081170:	18000015 	stw	zero,0(r3)
			if(frame_index + 120 >= num_frames){
20081174:	e0ffe017 	ldw	r3,-128(fp)
20081178:	18801e04 	addi	r2,r3,120
2008117c:	e0ffeb17 	ldw	r3,-84(fp)
20081180:	10c11a2e 	bgeu	r2,r3,200815ec <mjpeg423_decode+0x844>
				printf("\n skipped to end of file \n");
				return;
			} else{
				frame_index = frame_index + 110;
20081184:	e0ffe017 	ldw	r3,-128(fp)
20081188:	18c01b84 	addi	r3,r3,110
2008118c:	e0ffe015 	stw	r3,-128(fp)
			}
			for (int count = 0; count < num_iframes; count++) {
20081190:	e0ffe817 	ldw	r3,-96(fp)
20081194:	18000f26 	beq	r3,zero,200811d4 <mjpeg423_decode+0x42c>
				if( trailer[count].frame_index >= frame_index){
20081198:	e0ffe917 	ldw	r3,-92(fp)
2008119c:	19c00017 	ldw	r7,0(r3)
200811a0:	e0ffe017 	ldw	r3,-128(fp)
200811a4:	38c0fc2e 	bgeu	r7,r3,20081598 <mjpeg423_decode+0x7f0>
200811a8:	180d883a 	mov	r6,r3
200811ac:	e0bff617 	ldw	r2,-40(fp)
200811b0:	0007883a 	mov	r3,zero
200811b4:	e17fe817 	ldw	r5,-96(fp)
200811b8:	00000206 	br	200811c4 <mjpeg423_decode+0x41c>
200811bc:	11fffe17 	ldw	r7,-8(r2)
200811c0:	3980f62e 	bgeu	r7,r6,2008159c <mjpeg423_decode+0x7f4>
				printf("\n skipped to end of file \n");
				return;
			} else{
				frame_index = frame_index + 110;
			}
			for (int count = 0; count < num_iframes; count++) {
200811c4:	18c00044 	addi	r3,r3,1
				if( trailer[count].frame_index >= frame_index){
200811c8:	1009883a 	mov	r4,r2
200811cc:	10800204 	addi	r2,r2,8
				printf("\n skipped to end of file \n");
				return;
			} else{
				frame_index = frame_index + 110;
			}
			for (int count = 0; count < num_iframes; count++) {
200811d0:	197ffa1e 	bne	r3,r5,200811bc <__flash_rwdata_start+0xfffe6350>
					}
					break;
				}
			}
		}
		if(*skip_rv_flag != 0){
200811d4:	e0ffed17 	ldw	r3,-76(fp)
200811d8:	18800017 	ldw	r2,0(r3)
200811dc:	1000ad1e 	bne	r2,zero,20081494 <mjpeg423_decode+0x6ec>
200811e0:	e0ffe017 	ldw	r3,-128(fp)
200811e4:	18c00044 	addi	r3,r3,1
200811e8:	e0ffe015 	stw	r3,-128(fp)
200811ec:	e0ffe715 	stw	r3,-100(fp)
		printf("\nFrame #%u\n",frame_index);
		#endif

		//read frame payload
		//if(fread(frame_header, 4*sizeof(uint32_t), 1, file_in) != 1) error_and_exit("cannot read input file");
		alt_timestamp_start();
200811f0:	00985340 	call	20098534 <alt_timestamp_start>
		file_start_t = alt_timestamp();
200811f4:	00985800 	call	20098580 <alt_timestamp>
		if (Fat_FileRead(file_handle, frame_header, 4 * sizeof(uint32_t)) != 1)
200811f8:	e13fe517 	ldw	r4,-108(fp)
200811fc:	e17fd504 	addi	r5,fp,-172
20081200:	01800404 	movi	r6,16
20081204:	008284c0 	call	2008284c <Fat_FileRead>
20081208:	00c00044 	movi	r3,1
2008120c:	10c00326 	beq	r2,r3,2008121c <mjpeg423_decode+0x474>
			printf("cannot read input file");
20081210:	01000034 	movhi	r4,0
20081214:	21000604 	addi	r4,r4,24
20081218:	008a8fc0 	call	2008a8fc <printf>
		printf("Frame_size %u\n",frame_size);
		printf("Frame_type %u\n",frame_type);
#endif

		//if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t)))
		if (Fat_FileRead(file_handle, Ybitstream,
2008121c:	e1bfd517 	ldw	r6,-172(fp)
20081220:	e13fe517 	ldw	r4,-108(fp)
20081224:	e17fe417 	ldw	r5,-112(fp)
20081228:	31bffc04 	addi	r6,r6,-16
		alt_timestamp_start();
		file_start_t = alt_timestamp();
		if (Fat_FileRead(file_handle, frame_header, 4 * sizeof(uint32_t)) != 1)
			printf("cannot read input file");
		frame_size = frame_header[0];
		frame_type = frame_header[1];
2008122c:	e47fd617 	ldw	r17,-168(fp)
		Ysize = frame_header[2];
20081230:	e43fd717 	ldw	r16,-164(fp)
		Cbsize = frame_header[3];
20081234:	e4bfd817 	ldw	r18,-160(fp)
		printf("Frame_size %u\n",frame_size);
		printf("Frame_type %u\n",frame_type);
#endif

		//if(fread(Ybitstream, 1, frame_size - 4 * sizeof(uint32_t), file_in) != (frame_size - 4 * sizeof(uint32_t)))
		if (Fat_FileRead(file_handle, Ybitstream,
20081238:	008284c0 	call	2008284c <Fat_FileRead>
2008123c:	00c00044 	movi	r3,1
20081240:	10c00326 	beq	r2,r3,20081250 <mjpeg423_decode+0x4a8>
				frame_size - 4 * sizeof(uint32_t)) != 1)
			printf("cannot read input file");
20081244:	01000034 	movhi	r4,0
20081248:	21000604 	addi	r4,r4,24
2008124c:	008a8fc0 	call	2008a8fc <printf>
		file_end_t = alt_timestamp();
20081250:	00985800 	call	20098580 <alt_timestamp>
		//error_and_exit("cannot read input file");
		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
		Crbitstream = Cbbitstream + Cbsize;

		loss_dec_y_t = alt_timestamp();
20081254:	00985800 	call	20098580 <alt_timestamp>
		//lossless decoding
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC, Yquant,
20081258:	e13fe317 	ldw	r4,-116(fp)
2008125c:	e17fe417 	ldw	r5,-112(fp)
20081260:	e1bfee17 	ldw	r6,-72(fp)
20081264:	01c00034 	movhi	r7,0
20081268:	39c33404 	addi	r7,r7,3280
2008126c:	dc400015 	stw	r17,0(sp)
20081270:	00809200 	call	20080920 <lossless_decode>
				frame_size - 4 * sizeof(uint32_t)) != 1)
			printf("cannot read input file");
		file_end_t = alt_timestamp();
		//error_and_exit("cannot read input file");
		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
20081274:	e0ffe417 	ldw	r3,-112(fp)
20081278:	1c21883a 	add	r16,r3,r16
		loss_dec_y_t = alt_timestamp();
		//lossless decoding
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC, Yquant,
				frame_type);

		alt_dcache_flush_all();
2008127c:	009772c0 	call	2009772c <alt_dcache_flush_all>
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
20081280:	e13fe217 	ldw	r4,-120(fp)
20081284:	e17ff417 	ldw	r5,-48(fp)
			printf("cannot read input file");
		file_end_t = alt_timestamp();
		//error_and_exit("cannot read input file");
		//set the Cb and Cr bitstreams to point to the right location
		Cbbitstream = Ybitstream + Ysize;
		Crbitstream = Cbbitstream + Cbsize;
20081288:	84a5883a 	add	r18,r16,r18
		//lossless decoding
		lossless_decode(hYb_size * wYb_size, Ybitstream, YDCAC, Yquant,
				frame_type);

		alt_dcache_flush_all();
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
2008128c:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
20081290:	1000b01e 	bne	r2,zero,20081554 <mjpeg423_decode+0x7ac>
						&st_to_mm_dma_struct_Y)) {
			printf("failed starting transfer st to mm\n");
		}

		if (0 != alt_msgdma_standard_descriptor_async_transfer(read_device_ptr,
20081294:	e13fe117 	ldw	r4,-124(fp)
20081298:	e17ff517 	ldw	r5,-44(fp)
2008129c:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
200812a0:	1000a81e 	bne	r2,zero,20081544 <mjpeg423_decode+0x79c>
			printf("failed starting transfer mm to st\n");
		}

		//idct_hw_frame_async(YDCAC, Yblock, hYb_size * wYb_size, read_device_ptr, write_device_ptr);

		loss_dec_cb_t = alt_timestamp();
200812a4:	00985800 	call	20098580 <alt_timestamp>
		lossless_decode(hCb_size * wCb_size, Cbbitstream, CbDCAC, Cquant,
200812a8:	e13fe317 	ldw	r4,-116(fp)
200812ac:	e1bfef17 	ldw	r6,-68(fp)
200812b0:	01c00034 	movhi	r7,0
200812b4:	800b883a 	mov	r5,r16
200812b8:	39c31404 	addi	r7,r7,3152
200812bc:	dc400015 	stw	r17,0(sp)
200812c0:	00809200 	call	20080920 <lossless_decode>
				frame_type);

		alt_dcache_flush_all();
200812c4:	009772c0 	call	2009772c <alt_dcache_flush_all>
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
200812c8:	e13fe217 	ldw	r4,-120(fp)
200812cc:	e17ff217 	ldw	r5,-56(fp)
200812d0:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
200812d4:	1000971e 	bne	r2,zero,20081534 <mjpeg423_decode+0x78c>
						&st_to_mm_dma_struct_Cb)) {
			printf("failed starting transfer st to mm\n");
		}

		if (0 != alt_msgdma_standard_descriptor_async_transfer(read_device_ptr,
200812d8:	e13fe117 	ldw	r4,-124(fp)
200812dc:	e17ff317 	ldw	r5,-52(fp)
200812e0:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
200812e4:	10008f1e 	bne	r2,zero,20081524 <mjpeg423_decode+0x77c>
			printf("failed starting transfer mm to st\n");
		}

		//idct_hw_frame(CbDCAC, Cbblock, hCb_size * wCb_size, read_device_ptr, write_device_ptr);

		loss_dec_cr_t = alt_timestamp();
200812e8:	00985800 	call	20098580 <alt_timestamp>
		lossless_decode(hCb_size * wCb_size, Crbitstream, CrDCAC, Cquant,
200812ec:	e13fe317 	ldw	r4,-116(fp)
200812f0:	e1bff017 	ldw	r6,-64(fp)
200812f4:	01c00034 	movhi	r7,0
200812f8:	900b883a 	mov	r5,r18
200812fc:	39c31404 	addi	r7,r7,3152
20081300:	dc400015 	stw	r17,0(sp)
20081304:	00809200 	call	20080920 <lossless_decode>
				frame_type);
		//idct_hw_frame(CrDCAC, Crblock, hCb_size * wCb_size, read_device_ptr, write_device_ptr);
		//printf("Decoded IDCT for one frame.\n");
		alt_dcache_flush_all();
20081308:	009772c0 	call	2009772c <alt_dcache_flush_all>
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
2008130c:	e13fe217 	ldw	r4,-120(fp)
20081310:	e17fea17 	ldw	r5,-88(fp)
20081314:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
20081318:	1000771e 	bne	r2,zero,200814f8 <mjpeg423_decode+0x750>
						&st_to_mm_dma_struct_Cr)) {
			printf("failed starting transfer st to mm\n");
		}

		if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_device_ptr,
2008131c:	e13fe117 	ldw	r4,-124(fp)
20081320:	e17ff117 	ldw	r5,-60(fp)
20081324:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
20081328:	10007a1e 	bne	r2,zero,20081514 <mjpeg423_decode+0x76c>
						&mm_to_st_dma_struct_Cr)) {
			printf("failed starting transfer mm to st\n");
		}
		alt_dcache_flush_all();
2008132c:	009772c0 	call	2009772c <alt_dcache_flush_all>
		idct_start_t = alt_timestamp();
20081330:	00985800 	call	20098580 <alt_timestamp>
*/




		idct_end_t = alt_timestamp();
20081334:	00985800 	call	20098580 <alt_timestamp>
20081338:	e43fe617 	ldw	r16,-104(fp)

		alt_u32* current_buffer; //size = 4*width*height;
		while (hw_video_display_buffer_is_available(display) != 0) {
2008133c:	8009883a 	mov	r4,r16
20081340:	00855d40 	call	200855d4 <hw_video_display_buffer_is_available>
20081344:	103ffd1e 	bne	r2,zero,2008133c <__flash_rwdata_start+0xfffe64d0>
		//Add code to update buffer here.

		//Register updated buffer
		//hw_video_display_register_written_buffer(display);
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);
20081348:	e13fe617 	ldw	r4,-104(fp)
2008134c:	008583c0 	call	2008583c <hw_video_display_get_buffer>
20081350:	102b883a 	mov	r21,r2

		ycbcr_start_t = alt_timestamp();
20081354:	00985800 	call	20098580 <alt_timestamp>
		for (int h = 0; h < hCb_size; h++)
20081358:	e0ffdb17 	ldw	r3,-148(fp)
2008135c:	00c0260e 	bge	zero,r3,200813f8 <mjpeg423_decode+0x650>
20081360:	e03fd915 	stw	zero,-156(fp)
20081364:	e03fda15 	stw	zero,-152(fp)
			for (int w = 0; w < wCb_size; w++) {
20081368:	0580190e 	bge	zero,r22,200813d0 <mjpeg423_decode+0x628>
2008136c:	e0ffda17 	ldw	r3,-152(fp)
20081370:	e0bfd917 	ldw	r2,-156(fp)
20081374:	0021883a 	mov	r16,zero
20081378:	182890fa 	slli	r20,r3,3
2008137c:	e0ffdd17 	ldw	r3,-140(fp)
20081380:	18a7883a 	add	r19,r3,r2
20081384:	e0ffde17 	ldw	r3,-136(fp)
20081388:	18a5883a 	add	r18,r3,r2
2008138c:	e0ffdf17 	ldw	r3,-132(fp)
20081390:	18a3883a 	add	r17,r3,r2
				int b = h * wCb_size + w;
				ycbcr_block_start_t = alt_timestamp();
20081394:	00985800 	call	20098580 <alt_timestamp>
				ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b],
20081398:	800a90fa 	slli	r5,r16,3
2008139c:	980f883a 	mov	r7,r19
200813a0:	dc800015 	stw	r18,0(sp)
200813a4:	dc400115 	stw	r17,4(sp)
200813a8:	a009883a 	mov	r4,r20
200813ac:	b80d883a 	mov	r6,r23
200813b0:	dd400215 	stw	r21,8(sp)
200813b4:	0081b2c0 	call	20081b2c <ycbcr_to_rgb>
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);

		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
			for (int w = 0; w < wCb_size; w++) {
200813b8:	84000044 	addi	r16,r16,1
				int b = h * wCb_size + w;
				ycbcr_block_start_t = alt_timestamp();
				ycbcr_to_rgb(h << 3, w << 3, w_size, Yblock[b], Cbblock[b],
						Crblock[b], current_buffer);
				ycbcr_block_end_t = alt_timestamp();
200813bc:	00985800 	call	20098580 <alt_timestamp>
200813c0:	9cc01004 	addi	r19,r19,64
200813c4:	94801004 	addi	r18,r18,64
200813c8:	8c401004 	addi	r17,r17,64
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);

		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
			for (int w = 0; w < wCb_size; w++) {
200813cc:	b43ff11e 	bne	r22,r16,20081394 <__flash_rwdata_start+0xfffe6528>
		//hw_video_display_register_written_buffer(display);
		//ybcbr to rgb conversion
		current_buffer = hw_video_display_get_buffer(display);

		ycbcr_start_t = alt_timestamp();
		for (int h = 0; h < hCb_size; h++)
200813d0:	e0ffda17 	ldw	r3,-152(fp)
200813d4:	e0bfdc17 	ldw	r2,-144(fp)
200813d8:	18c00044 	addi	r3,r3,1
200813dc:	e0ffda15 	stw	r3,-152(fp)
200813e0:	e0ffd917 	ldw	r3,-156(fp)
200813e4:	1887883a 	add	r3,r3,r2
200813e8:	e0ffd915 	stw	r3,-156(fp)
200813ec:	e0bfda17 	ldw	r2,-152(fp)
200813f0:	e0ffdb17 	ldw	r3,-148(fp)
200813f4:	18bfdc1e 	bne	r3,r2,20081368 <__flash_rwdata_start+0xfffe64fc>

//		for(int i = 0; i < 640*480; i++)
//			printf("%X - ", current_buffer[i]);
		//printf("Current buffer: %X\n", current_buffer);
		//memcpy(current_buffer, rgbblock, 480*640*4);
		display_start_t = alt_timestamp();
200813f8:	00985800 	call	20098580 <alt_timestamp>
		hw_video_display_register_written_buffer(display);
200813fc:	e13fe617 	ldw	r4,-104(fp)
20081400:	00855580 	call	20085558 <hw_video_display_register_written_buffer>
		//switch frames
		//hw_video_display_switch_frames(display);
		display_end_t = alt_timestamp();
20081404:	00985800 	call	20098580 <alt_timestamp>
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
	}

	//encode and write frames
	for (int frame_index = 0; frame_index < num_frames; frame_index++) {
20081408:	e0ffe717 	ldw	r3,-100(fp)
2008140c:	e0bfeb17 	ldw	r2,-84(fp)
20081410:	18bf5436 	bltu	r3,r2,20081164 <__flash_rwdata_start+0xfffe62f8>
	printf("\nDecoder done.\n");
#endif

	//close down
	//fclose(file_in);
	Fat_FileClose(file_handle);
20081414:	e13fe517 	ldw	r4,-108(fp)
20081418:	0082c280 	call	20082c28 <Fat_FileClose>
	free(rgbblock);
2008141c:	e13ff717 	ldw	r4,-36(fp)
20081420:	0089e3c0 	call	20089e3c <free>
	free(Yblock);
20081424:	e13fdd17 	ldw	r4,-140(fp)
20081428:	0089e3c0 	call	20089e3c <free>
	free(Cbblock);
2008142c:	e13fde17 	ldw	r4,-136(fp)
20081430:	0089e3c0 	call	20089e3c <free>
	free(Crblock);
20081434:	e13fdf17 	ldw	r4,-132(fp)
20081438:	0089e3c0 	call	20089e3c <free>
	free(YDCAC);
2008143c:	e13fee17 	ldw	r4,-72(fp)
20081440:	0089e3c0 	call	20089e3c <free>
	free(CbDCAC);
20081444:	e13fef17 	ldw	r4,-68(fp)
20081448:	0089e3c0 	call	20089e3c <free>
	free(CrDCAC);
2008144c:	e13ff017 	ldw	r4,-64(fp)
20081450:	0089e3c0 	call	20089e3c <free>
	free(Ybitstream);
20081454:	e13fe417 	ldw	r4,-112(fp)
20081458:	0089e3c0 	call	20089e3c <free>
	free(trailer);
2008145c:	e13fe917 	ldw	r4,-92(fp)

#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}
20081460:	e6fff804 	addi	sp,fp,-32
20081464:	dfc00917 	ldw	ra,36(sp)
20081468:	df000817 	ldw	fp,32(sp)
2008146c:	ddc00717 	ldw	r23,28(sp)
20081470:	dd800617 	ldw	r22,24(sp)
20081474:	dd400517 	ldw	r21,20(sp)
20081478:	dd000417 	ldw	r20,16(sp)
2008147c:	dcc00317 	ldw	r19,12(sp)
20081480:	dc800217 	ldw	r18,8(sp)
20081484:	dc400117 	ldw	r17,4(sp)
20081488:	dc000017 	ldw	r16,0(sp)
2008148c:	dec00a04 	addi	sp,sp,40
	free(Crblock);
	free(YDCAC);
	free(CbDCAC);
	free(CrDCAC);
	free(Ybitstream);
	free(trailer);
20081490:	0089e3c1 	jmpi	20089e3c <free>
					break;
				}
			}
		}
		if(*skip_rv_flag != 0){
			*skip_rv_flag = 0;
20081494:	18000015 	stw	zero,0(r3)
			if(frame_index - 120 > 0){
20081498:	e0ffe017 	ldw	r3,-128(fp)
2008149c:	00801e04 	movi	r2,120
200814a0:	10c0300e 	bge	r2,r3,20081564 <mjpeg423_decode+0x7bc>
				frame_index = frame_index - 120;
200814a4:	197fe204 	addi	r5,r3,-120
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
200814a8:	e0ffe817 	ldw	r3,-96(fp)
200814ac:	18000d26 	beq	r3,zero,200814e4 <mjpeg423_decode+0x73c>
				if( trailer[count].frame_index >= frame_index){
200814b0:	e0ffe917 	ldw	r3,-92(fp)
200814b4:	18800017 	ldw	r2,0(r3)
200814b8:	11404a2e 	bgeu	r2,r5,200815e4 <mjpeg423_decode+0x83c>
200814bc:	e0bff617 	ldw	r2,-40(fp)
200814c0:	0007883a 	mov	r3,zero
200814c4:	e1bfe817 	ldw	r6,-96(fp)
200814c8:	00000206 	br	200814d4 <mjpeg423_decode+0x72c>
200814cc:	113ffe17 	ldw	r4,-8(r2)
200814d0:	2140272e 	bgeu	r4,r5,20081570 <mjpeg423_decode+0x7c8>
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
200814d4:	18c00044 	addi	r3,r3,1
				if( trailer[count].frame_index >= frame_index){
200814d8:	1021883a 	mov	r16,r2
200814dc:	10800204 	addi	r2,r2,8
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
200814e0:	19bffa1e 	bne	r3,r6,200814cc <__flash_rwdata_start+0xfffe6660>
200814e4:	e0ffe017 	ldw	r3,-128(fp)
200814e8:	18ffe244 	addi	r3,r3,-119
200814ec:	e0ffe015 	stw	r3,-128(fp)
200814f0:	e0ffe715 	stw	r3,-100(fp)
200814f4:	003f3e06 	br	200811f0 <__flash_rwdata_start+0xfffe6384>
		//idct_hw_frame(CrDCAC, Crblock, hCb_size * wCb_size, read_device_ptr, write_device_ptr);
		//printf("Decoded IDCT for one frame.\n");
		alt_dcache_flush_all();
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
						&st_to_mm_dma_struct_Cr)) {
			printf("failed starting transfer st to mm\n");
200814f8:	01000034 	movhi	r4,0
200814fc:	21006a04 	addi	r4,r4,424
20081500:	008aa000 	call	2008aa00 <puts>
		}

		if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_device_ptr,
20081504:	e13fe117 	ldw	r4,-124(fp)
20081508:	e17ff117 	ldw	r5,-60(fp)
2008150c:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
20081510:	103f8626 	beq	r2,zero,2008132c <__flash_rwdata_start+0xfffe64c0>
						&mm_to_st_dma_struct_Cr)) {
			printf("failed starting transfer mm to st\n");
20081514:	01000034 	movhi	r4,0
20081518:	21007304 	addi	r4,r4,460
2008151c:	008aa000 	call	2008aa00 <puts>
20081520:	003f8206 	br	2008132c <__flash_rwdata_start+0xfffe64c0>
			printf("failed starting transfer st to mm\n");
		}

		if (0 != alt_msgdma_standard_descriptor_async_transfer(read_device_ptr,
						&mm_to_st_dma_struct_Cb)) {
			printf("failed starting transfer mm to st\n");
20081524:	01000034 	movhi	r4,0
20081528:	21007304 	addi	r4,r4,460
2008152c:	008aa000 	call	2008aa00 <puts>
20081530:	003f6d06 	br	200812e8 <__flash_rwdata_start+0xfffe647c>
				frame_type);

		alt_dcache_flush_all();
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
						&st_to_mm_dma_struct_Cb)) {
			printf("failed starting transfer st to mm\n");
20081534:	01000034 	movhi	r4,0
20081538:	21006a04 	addi	r4,r4,424
2008153c:	008aa000 	call	2008aa00 <puts>
20081540:	003f6506 	br	200812d8 <__flash_rwdata_start+0xfffe646c>
			printf("failed starting transfer st to mm\n");
		}

		if (0 != alt_msgdma_standard_descriptor_async_transfer(read_device_ptr,
						&mm_to_st_dma_struct_Y)) {
			printf("failed starting transfer mm to st\n");
20081544:	01000034 	movhi	r4,0
20081548:	21007304 	addi	r4,r4,460
2008154c:	008aa000 	call	2008aa00 <puts>
20081550:	003f5406 	br	200812a4 <__flash_rwdata_start+0xfffe6438>
				frame_type);

		alt_dcache_flush_all();
		if (0 != alt_msgdma_standard_descriptor_async_transfer(write_device_ptr,
						&st_to_mm_dma_struct_Y)) {
			printf("failed starting transfer st to mm\n");
20081554:	01000034 	movhi	r4,0
20081558:	21006a04 	addi	r4,r4,424
2008155c:	008aa000 	call	2008aa00 <puts>
20081560:	003f4c06 	br	20081294 <__flash_rwdata_start+0xfffe6428>
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
20081564:	e0ffe817 	ldw	r3,-96(fp)
				if( trailer[count].frame_index >= frame_index){
20081568:	e43fe917 	ldw	r16,-92(fp)
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
2008156c:	18002f26 	beq	r3,zero,2008162c <mjpeg423_decode+0x884>
				if( trailer[count].frame_index >= frame_index){
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
20081570:	81800117 	ldw	r6,4(r16)
20081574:	e13fe517 	ldw	r4,-108(fp)
20081578:	000b883a 	mov	r5,zero
2008157c:	0082ba80 	call	20082ba8 <Fat_FileSeek>
20081580:	10001026 	beq	r2,zero,200815c4 <mjpeg423_decode+0x81c>
20081584:	80800017 	ldw	r2,0(r16)
20081588:	10800044 	addi	r2,r2,1
2008158c:	e0bfe715 	stw	r2,-100(fp)
						printf("cannot seek to i frame");
					}
					frame_index = trailer[count].frame_index;
					break;
20081590:	e0bfe015 	stw	r2,-128(fp)
20081594:	003f1606 	br	200811f0 <__flash_rwdata_start+0xfffe6384>
				return;
			} else{
				frame_index = frame_index + 110;
			}
			for (int count = 0; count < num_iframes; count++) {
				if( trailer[count].frame_index >= frame_index){
20081598:	e13fe917 	ldw	r4,-92(fp)
					frame_index = trailer[count].frame_index;
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
2008159c:	21800117 	ldw	r6,4(r4)
200815a0:	e13fe517 	ldw	r4,-108(fp)
200815a4:	000b883a 	mov	r5,zero
			} else{
				frame_index = frame_index + 110;
			}
			for (int count = 0; count < num_iframes; count++) {
				if( trailer[count].frame_index >= frame_index){
					frame_index = trailer[count].frame_index;
200815a8:	e1ffe015 	stw	r7,-128(fp)
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
200815ac:	0082ba80 	call	20082ba8 <Fat_FileSeek>
200815b0:	103f081e 	bne	r2,zero,200811d4 <__flash_rwdata_start+0xfffe6368>
						printf("cannot seek to i frame");
200815b4:	01000034 	movhi	r4,0
200815b8:	21006404 	addi	r4,r4,400
200815bc:	008a8fc0 	call	2008a8fc <printf>
200815c0:	003f0406 	br	200811d4 <__flash_rwdata_start+0xfffe6368>
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
				if( trailer[count].frame_index >= frame_index){
					if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, trailer[count].frame_position) == 0){
						printf("cannot seek to i frame");
200815c4:	01000034 	movhi	r4,0
200815c8:	21006404 	addi	r4,r4,400
200815cc:	008a8fc0 	call	2008a8fc <printf>
200815d0:	003fec06 	br	20081584 <__flash_rwdata_start+0xfffe6718>
		printf("position %u\n", trailer[count].frame_position);
#endif
	}
	//set it back to beginning of payload
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, 5 * sizeof(uint32_t)) == 0)
		printf("cannot seek into file");
200815d4:	01000034 	movhi	r4,0
200815d8:	21003e04 	addi	r4,r4,248
200815dc:	008a8fc0 	call	2008a8fc <printf>
200815e0:	003e8406 	br	20080ff4 <__flash_rwdata_start+0xfffe6188>
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
				if( trailer[count].frame_index >= frame_index){
200815e4:	e43fe917 	ldw	r16,-92(fp)
200815e8:	003fe106 	br	20081570 <__flash_rwdata_start+0xfffe6704>
		//}

		if(*skip_fw_flag != 0){
			*skip_fw_flag = 0;
			if(frame_index + 120 >= num_frames){
				printf("\n skipped to end of file \n");
200815ec:	01000034 	movhi	r4,0
200815f0:	21005d04 	addi	r4,r4,372
200815f4:	008aa000 	call	2008aa00 <puts>
	free(trailer);

#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}
200815f8:	e6fff804 	addi	sp,fp,-32
200815fc:	dfc00917 	ldw	ra,36(sp)
20081600:	df000817 	ldw	fp,32(sp)
20081604:	ddc00717 	ldw	r23,28(sp)
20081608:	dd800617 	ldw	r22,24(sp)
2008160c:	dd400517 	ldw	r21,20(sp)
20081610:	dd000417 	ldw	r20,16(sp)
20081614:	dcc00317 	ldw	r19,12(sp)
20081618:	dc800217 	ldw	r18,8(sp)
2008161c:	dc400117 	ldw	r17,4(sp)
20081620:	dc000017 	ldw	r16,0(sp)
20081624:	dec00a04 	addi	sp,sp,40
20081628:	f800283a 	ret
			if(frame_index - 120 > 0){
				frame_index = frame_index - 120;
			} else{
				frame_index = 0;
			}
			for (int count = 0; count < num_iframes; count++) {
2008162c:	00c00044 	movi	r3,1
20081630:	e0ffe015 	stw	r3,-128(fp)
20081634:	e0ffe715 	stw	r3,-100(fp)
20081638:	003eed06 	br	200811f0 <__flash_rwdata_start+0xfffe6384>
	//the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
	uint8_t* Ybitstream;
	if ((Ybitstream = malloc(
			hYb_size * wYb_size * 64 * sizeof(DCTELEM)
					+ 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
		printf("cannot allocate bitstream");
2008163c:	01000034 	movhi	r4,0
20081640:	21003704 	addi	r4,r4,220
20081644:	008a8fc0 	call	2008a8fc <printf>
20081648:	003e4006 	br	20080f4c <__flash_rwdata_start+0xfffe60e0>
	iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t) * num_iframes);

	//main data structures. See lab manual for explanation
	rgb_pixel_t* rgbblock;
	if ((rgbblock = malloc(w_size * h_size * sizeof(rgb_pixel_t))) == NULL)
		printf("cannot allocate rgbblock");
2008164c:	01000034 	movhi	r4,0
20081650:	21000c04 	addi	r4,r4,48
20081654:	008a8fc0 	call	2008a8fc <printf>
20081658:	003e1606 	br	20080eb4 <__flash_rwdata_start+0xfffe6048>
	color_block_t* Yblock;
	if ((Yblock = malloc(hYb_size * wYb_size * 64)) == NULL)
		printf("cannot allocate Yblock");
2008165c:	01000034 	movhi	r4,0
20081660:	21001304 	addi	r4,r4,76
20081664:	008a8fc0 	call	2008a8fc <printf>
	color_block_t* Cbblock;
	if ((Cbblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20081668:	9009883a 	mov	r4,r18
2008166c:	0089e280 	call	20089e28 <malloc>
20081670:	e0bfde15 	stw	r2,-136(fp)
20081674:	103e1b1e 	bne	r2,zero,20080ee4 <__flash_rwdata_start+0xfffe6078>
		printf("cannot allocate Cbblock");
20081678:	01000034 	movhi	r4,0
2008167c:	21001904 	addi	r4,r4,100
20081680:	008a8fc0 	call	2008a8fc <printf>
	color_block_t* Crblock;
	if ((Crblock = malloc(hCb_size * wCb_size * 64)) == NULL)
20081684:	9009883a 	mov	r4,r18
20081688:	0089e280 	call	20089e28 <malloc>
2008168c:	e0bfdf15 	stw	r2,-132(fp)
20081690:	103e181e 	bne	r2,zero,20080ef4 <__flash_rwdata_start+0xfffe6088>
		printf("cannot allocate Crblock");
20081694:	01000034 	movhi	r4,0
20081698:	21001f04 	addi	r4,r4,124
2008169c:	008a8fc0 	call	2008a8fc <printf>
200816a0:	003e1406 	br	20080ef4 <__flash_rwdata_start+0xfffe6088>
	;
	dct_block_t* YDCAC;
	if ((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM))) == NULL)
		printf("cannot allocate YDCAC");
200816a4:	01000034 	movhi	r4,0
200816a8:	21002504 	addi	r4,r4,148
200816ac:	008a8fc0 	call	2008a8fc <printf>
	dct_block_t* CbDCAC;
	if ((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
200816b0:	9809883a 	mov	r4,r19
200816b4:	0089e280 	call	20089e28 <malloc>
200816b8:	e0bfef15 	stw	r2,-68(fp)
200816bc:	103e171e 	bne	r2,zero,20080f1c <__flash_rwdata_start+0xfffe60b0>
		printf("cannot allocate CbDCAC");
200816c0:	01000034 	movhi	r4,0
200816c4:	21002b04 	addi	r4,r4,172
200816c8:	008a8fc0 	call	2008a8fc <printf>
	dct_block_t* CrDCAC;
	if ((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM))) == NULL)
200816cc:	9809883a 	mov	r4,r19
200816d0:	0089e280 	call	20089e28 <malloc>
200816d4:	e0bff015 	stw	r2,-64(fp)
200816d8:	103e141e 	bne	r2,zero,20080f2c <__flash_rwdata_start+0xfffe60c0>
		printf("cannot allocate CrDCAC");
200816dc:	01000034 	movhi	r4,0
200816e0:	21003104 	addi	r4,r4,196
200816e4:	008a8fc0 	call	2008a8fc <printf>
200816e8:	003e1006 	br	20080f2c <__flash_rwdata_start+0xfffe60c0>

200816ec <idct_hw>:
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
200816ec:	deffd304 	addi	sp,sp,-180
200816f0:	df002b15 	stw	fp,172(sp)
200816f4:	df002b04 	addi	fp,sp,172
200816f8:	dfc02c15 	stw	ra,176(sp)
200816fc:	dd002915 	stw	r20,164(sp)
20081700:	dcc02815 	stw	r19,160(sp)
20081704:	dc802715 	stw	r18,156(sp)
20081708:	dc402615 	stw	r17,152(sp)
2008170c:	dc002515 	stw	r16,148(sp)
20081710:	dd402a15 	stw	r21,168(sp)
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081714:	e13fda04 	addi	r4,fp,-152
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081718:	defff404 	addi	sp,sp,-48
2008171c:	3029883a 	mov	r20,r6
20081720:	2823883a 	mov	r17,r5
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081724:	01802004 	movi	r6,128
20081728:	000b883a 	mov	r5,zero
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
2008172c:	3825883a 	mov	r18,r7
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081730:	008a7ac0 	call	2008a7ac <memset>
20081734:	00813604 	movi	r2,1240
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081738:	dc0008c4 	addi	r16,sp,35
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
2008173c:	e0bfda0d 	sth	r2,-152(fp)
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081740:	8020d13a 	srli	r16,r16,4
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081744:	00bffd84 	movi	r2,-10
20081748:	e0bfdb0d 	sth	r2,-148(fp)
2008174c:	00bffa04 	movi	r2,-24
20081750:	e0bfde0d 	sth	r2,-136(fp)
20081754:	00bffd04 	movi	r2,-12
20081758:	e0bfde8d 	sth	r2,-134(fp)
#ifdef PRINT_TO_CONSOLE
	printf("exit decode");
#endif
}

int idct_hw(pdct_block_t DCAC, pcolor_block_t block, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
2008175c:	8020913a 	slli	r16,r16,4
	for(int blk = 0; blk < block_count; blk++)
		for(int row = 0 ; row < 8; row++)
			for(int column = 0; column < 8; column++)
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/
	alt_u16 test[8][8]=   {{1240,0,-10,0,0,0,0,0} ,   /*  initializers for row indexed by 0 */
20081760:	00bffc84 	movi	r2,-14
20081764:	e0bfe20d 	sth	r2,-120(fp)
20081768:	00bffcc4 	movi	r2,-13
2008176c:	e0bfe28d 	sth	r2,-118(fp)
		for( i = 0; i < 8; i++){
			test[i][i] = 100;
		}
		count22++;*/

	alt_dcache_flush_all();
20081770:	009772c0 	call	2009772c <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20081774:	84c00404 	addi	r19,r16,16
20081778:	00900004 	movi	r2,16384
2008177c:	d8800015 	stw	r2,0(sp)
20081780:	a009883a 	mov	r4,r20
20081784:	980b883a 	mov	r5,r19
20081788:	e1bfda04 	addi	r6,fp,-152
2008178c:	01c02004 	movi	r7,128
20081790:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081794:	1000411e 	bne	r2,zero,2008189c <idct_hw+0x1b0>
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
20081798:	00900004 	movi	r2,16384
2008179c:	d8800015 	stw	r2,0(sp)
200817a0:	9009883a 	mov	r4,r18
200817a4:	800b883a 	mov	r5,r16
200817a8:	880d883a 	mov	r6,r17
200817ac:	01c01004 	movi	r7,64
200817b0:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
200817b4:	1000451e 	bne	r2,zero,200818cc <idct_hw+0x1e0>
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
200817b8:	a009883a 	mov	r4,r20
200817bc:	980b883a 	mov	r5,r19
200817c0:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
200817c4:	10003d1e 	bne	r2,zero,200818bc <idct_hw+0x1d0>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
200817c8:	9009883a 	mov	r4,r18
200817cc:	800b883a 	mov	r5,r16
200817d0:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
200817d4:	1000351e 	bne	r2,zero,200818ac <idct_hw+0x1c0>
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
	}

	alt_dcache_flush_all();
200817d8:	009772c0 	call	2009772c <alt_dcache_flush_all>

	printf("DMA TEST: %d\n", count22);
200817dc:	d1600217 	ldw	r5,-32760(gp)
200817e0:	01000034 	movhi	r4,0
200817e4:	21007c04 	addi	r4,r4,496
200817e8:	008a8fc0 	call	2008a8fc <printf>
	if (count22==300){
200817ec:	d0e00217 	ldw	r3,-32760(gp)
200817f0:	00804b04 	movi	r2,300
200817f4:	18803926 	beq	r3,r2,200818dc <idct_hw+0x1f0>
200817f8:	8c000044 	addi	r16,r17,1
200817fc:	8d000084 	addi	r20,r17,2
20081800:	8cc000c4 	addi	r19,r17,3
20081804:	8c800104 	addi	r18,r17,4
20081808:	8d401044 	addi	r21,r17,65
		count22 = 100;
	}

	for( i = 0; i < 8; i++){

		printf("%d %d %d %d %d %d %d %d \n",block[i][0],block[i][1],block[i][2],block[i][3],block[i][4],block[i][5],block[i][6],block[i][7]);
2008180c:	98800003 	ldbu	r2,0(r19)
20081810:	81800003 	ldbu	r6,0(r16)
20081814:	a1c00003 	ldbu	r7,0(r20)
20081818:	d8800015 	stw	r2,0(sp)
2008181c:	90800003 	ldbu	r2,0(r18)
20081820:	89400003 	ldbu	r5,0(r17)
20081824:	84000204 	addi	r16,r16,8
20081828:	d8800115 	stw	r2,4(sp)
2008182c:	80bfff03 	ldbu	r2,-4(r16)
20081830:	01000034 	movhi	r4,0
20081834:	21008004 	addi	r4,r4,512
20081838:	d8800215 	stw	r2,8(sp)
2008183c:	80bfff43 	ldbu	r2,-3(r16)
20081840:	8c400204 	addi	r17,r17,8
20081844:	a5000204 	addi	r20,r20,8
20081848:	d8800315 	stw	r2,12(sp)
2008184c:	80bfff83 	ldbu	r2,-2(r16)
20081850:	9cc00204 	addi	r19,r19,8
20081854:	94800204 	addi	r18,r18,8
20081858:	d8800415 	stw	r2,16(sp)
2008185c:	008a8fc0 	call	2008a8fc <printf>
	printf("DMA TEST: %d\n", count22);
	if (count22==300){
		count22 = 100;
	}

	for( i = 0; i < 8; i++){
20081860:	857fea1e 	bne	r16,r21,2008180c <__flash_rwdata_start+0xfffe69a0>

		printf("%d %d %d %d %d %d %d %d \n",block[i][0],block[i][1],block[i][2],block[i][3],block[i][4],block[i][5],block[i][6],block[i][7]);
	}

	printf("\n");
20081864:	01000284 	movi	r4,10
20081868:	008a9400 	call	2008a940 <putchar>

	return 0;
}
2008186c:	0005883a 	mov	r2,zero
20081870:	e6fffa04 	addi	sp,fp,-24
20081874:	dfc00717 	ldw	ra,28(sp)
20081878:	df000617 	ldw	fp,24(sp)
2008187c:	dd400517 	ldw	r21,20(sp)
20081880:	dd000417 	ldw	r20,16(sp)
20081884:	dcc00317 	ldw	r19,12(sp)
20081888:	dc800217 	ldw	r18,8(sp)
2008188c:	dc400117 	ldw	r17,4(sp)
20081890:	dc000017 	ldw	r16,0(sp)
20081894:	dec00804 	addi	sp,sp,32
20081898:	f800283a 	ret

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
2008189c:	01000034 	movhi	r4,0
200818a0:	21004904 	addi	r4,r4,292
200818a4:	008aa000 	call	2008aa00 <puts>
200818a8:	003fbb06 	br	20081798 <__flash_rwdata_start+0xfffe692c>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
200818ac:	01000034 	movhi	r4,0
200818b0:	21006a04 	addi	r4,r4,424
200818b4:	008aa000 	call	2008aa00 <puts>
200818b8:	003fc706 	br	200817d8 <__flash_rwdata_start+0xfffe696c>
		printf("failed construct descriptor st to mm\n");
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
200818bc:	01000034 	movhi	r4,0
200818c0:	21007304 	addi	r4,r4,460
200818c4:	008aa000 	call	2008aa00 <puts>
200818c8:	003fbf06 	br	200817c8 <__flash_rwdata_start+0xfffe695c>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
					write_pointer, &st_to_mm_dma_struct, out_data_ptr,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
200818cc:	01000034 	movhi	r4,0
200818d0:	21005304 	addi	r4,r4,332
200818d4:	008aa000 	call	2008aa00 <puts>
200818d8:	003fb706 	br	200817b8 <__flash_rwdata_start+0xfffe694c>

	alt_dcache_flush_all();

	printf("DMA TEST: %d\n", count22);
	if (count22==300){
		count22 = 100;
200818dc:	00801904 	movi	r2,100
200818e0:	d0a00215 	stw	r2,-32760(gp)
200818e4:	003fc406 	br	200817f8 <__flash_rwdata_start+0xfffe698c>

200818e8 <idct_hw_frame>:
	printf("\n");

	return 0;
}

int idct_hw_frame(pdct_block_t* DCAC, pcolor_block_t* block, int block_count, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
200818e8:	defff704 	addi	sp,sp,-36
200818ec:	df000715 	stw	fp,28(sp)
200818f0:	dd400615 	stw	r21,24(sp)
200818f4:	dd000515 	stw	r20,20(sp)
200818f8:	dcc00415 	stw	r19,16(sp)
200818fc:	dc800315 	stw	r18,12(sp)
20081900:	dc400215 	stw	r17,8(sp)
20081904:	dc000115 	stw	r16,4(sp)
20081908:	dfc00815 	stw	ra,32(sp)
2008190c:	df000704 	addi	fp,sp,28
20081910:	defff404 	addi	sp,sp,-48
20081914:	dc0004c4 	addi	r16,sp,19
20081918:	8020d13a 	srli	r16,r16,4
				in_8bit[blk][row][column] = DCAC[blk][row][column];
				*/


	alt_u32 *in_data_ptr = DCAC;
	alt_u32 block_length = 64*block_count;
2008191c:	302291ba 	slli	r17,r6,6
	printf("\n");

	return 0;
}

int idct_hw_frame(pdct_block_t* DCAC, pcolor_block_t* block, int block_count, alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081920:	202b883a 	mov	r21,r4
20081924:	8020913a 	slli	r16,r16,4
20081928:	3827883a 	mov	r19,r7
2008192c:	2829883a 	mov	r20,r5
	alt_u32 *in_data_ptr = DCAC;
	alt_u32 block_length = 64*block_count;
	alt_u32 *out_data_ptr = block;


	alt_dcache_flush_all();
20081930:	009772c0 	call	2009772c <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20081934:	84800404 	addi	r18,r16,16
20081938:	00900004 	movi	r2,16384
2008193c:	d8800015 	stw	r2,0(sp)
20081940:	9809883a 	mov	r4,r19
20081944:	900b883a 	mov	r5,r18
20081948:	a80d883a 	mov	r6,r21
2008194c:	8c4f883a 	add	r7,r17,r17
20081950:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081954:	10001e1e 	bne	r2,zero,200819d0 <idct_hw_frame+0xe8>
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
20081958:	e1000217 	ldw	r4,8(fp)
2008195c:	00900004 	movi	r2,16384
20081960:	d8800015 	stw	r2,0(sp)
20081964:	800b883a 	mov	r5,r16
20081968:	a00d883a 	mov	r6,r20
2008196c:	880f883a 	mov	r7,r17
20081970:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081974:	10000326 	beq	r2,zero,20081984 <idct_hw_frame+0x9c>
					write_pointer, &st_to_mm_dma_struct, out_data_ptr,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
20081978:	01000034 	movhi	r4,0
2008197c:	21005304 	addi	r4,r4,332
20081980:	008aa000 	call	2008aa00 <puts>
	}

	if (0 != alt_msgdma_standard_descriptor_async_transfer(write_pointer,
20081984:	e1000217 	ldw	r4,8(fp)
20081988:	800b883a 	mov	r5,r16
2008198c:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
					&st_to_mm_dma_struct)) {
		//printf("failed starting transfer st to mm\n");
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
20081990:	9809883a 	mov	r4,r19
20081994:	900b883a 	mov	r5,r18
20081998:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
					&mm_to_st_dma_struct)) {
		//printf("failed starting transfer mm to st\n");
	}

	alt_dcache_flush_all();
2008199c:	009772c0 	call	2009772c <alt_dcache_flush_all>
		//printf("%d ",(int)destination[i]);
	//}
	//printf("\n");

	return 0;
}
200819a0:	0005883a 	mov	r2,zero
200819a4:	e6fffa04 	addi	sp,fp,-24
200819a8:	dfc00717 	ldw	ra,28(sp)
200819ac:	df000617 	ldw	fp,24(sp)
200819b0:	dd400517 	ldw	r21,20(sp)
200819b4:	dd000417 	ldw	r20,16(sp)
200819b8:	dcc00317 	ldw	r19,12(sp)
200819bc:	dc800217 	ldw	r18,8(sp)
200819c0:	dc400117 	ldw	r17,4(sp)
200819c4:	dc000017 	ldw	r16,0(sp)
200819c8:	dec00804 	addi	sp,sp,32
200819cc:	f800283a 	ret

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
					read_pointer, &mm_to_st_dma_struct, in_data_ptr,
					block_length*2,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
200819d0:	01000034 	movhi	r4,0
200819d4:	21004904 	addi	r4,r4,292
200819d8:	008aa000 	call	2008aa00 <puts>
200819dc:	003fde06 	br	20081958 <__flash_rwdata_start+0xfffe6aec>

200819e0 <idct_test>:
	//printf("\n");

	return 0;
}*/

int idct_test(alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
200819e0:	deffb904 	addi	sp,sp,-284
200819e4:	df004515 	stw	fp,276(sp)
200819e8:	dcc04415 	stw	r19,272(sp)
200819ec:	df004504 	addi	fp,sp,276
200819f0:	dc804315 	stw	r18,268(sp)
200819f4:	dc404215 	stw	r17,264(sp)
200819f8:	dc004115 	stw	r16,260(sp)
200819fc:	dfc04615 	stw	ra,280(sp)
20081a00:	defff404 	addi	sp,sp,-48
20081a04:	dc0004c4 	addi	r16,sp,19
20081a08:	8020d13a 	srli	r16,r16,4
	alt_u32 block_length = 32*sizeof(alt_u32);
	alt_u32 data[32];
	data[0] = 15;
20081a0c:	008003c4 	movi	r2,15
	//printf("\n");

	return 0;
}*/

int idct_test(alt_msgdma_dev *read_pointer, alt_msgdma_dev *write_pointer){
20081a10:	2027883a 	mov	r19,r4
20081a14:	8020913a 	slli	r16,r16,4
20081a18:	2823883a 	mov	r17,r5
	alt_u32 block_length = 32*sizeof(alt_u32);
	alt_u32 data[32];
	data[0] = 15;
20081a1c:	e0bfdc15 	stw	r2,-144(fp)
	alt_u32 *data_block = data;
	alt_u32 destination[32];
	destination[0] = 0;
20081a20:	e03fbc15 	stw	zero,-272(fp)

	alt_dcache_flush_all();
20081a24:	009772c0 	call	2009772c <alt_dcache_flush_all>

	alt_msgdma_standard_descriptor mm_to_st_dma_struct;
	alt_msgdma_standard_descriptor st_to_mm_dma_struct;

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
20081a28:	84800404 	addi	r18,r16,16
20081a2c:	00900004 	movi	r2,16384
20081a30:	d8800015 	stw	r2,0(sp)
20081a34:	9809883a 	mov	r4,r19
20081a38:	900b883a 	mov	r5,r18
20081a3c:	e1bfdc04 	addi	r6,fp,-144
20081a40:	01c02004 	movi	r7,128
20081a44:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
20081a48:	1000281e 	bne	r2,zero,20081aec <idct_test+0x10c>
					read_pointer, &mm_to_st_dma_struct, data_block,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
20081a4c:	00900004 	movi	r2,16384
20081a50:	d8800015 	stw	r2,0(sp)
20081a54:	8809883a 	mov	r4,r17
20081a58:	800b883a 	mov	r5,r16
20081a5c:	e1bfbc04 	addi	r6,fp,-272
20081a60:	01c02004 	movi	r7,128
20081a64:	00986a00 	call	200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>
20081a68:	10002c1e 	bne	r2,zero,20081b1c <idct_test+0x13c>
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
20081a6c:	9809883a 	mov	r4,r19
20081a70:	900b883a 	mov	r5,r18
20081a74:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
20081a78:	1000241e 	bne	r2,zero,20081b0c <idct_test+0x12c>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
20081a7c:	8809883a 	mov	r4,r17
20081a80:	800b883a 	mov	r5,r16
20081a84:	00993d40 	call	200993d4 <alt_msgdma_standard_descriptor_sync_transfer>
20081a88:	10001c1e 	bne	r2,zero,20081afc <idct_test+0x11c>
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
	}

	alt_dcache_flush_all();
20081a8c:	009772c0 	call	2009772c <alt_dcache_flush_all>

	int i;
	printf("DMA TEST: ");
20081a90:	01000034 	movhi	r4,0
20081a94:	21008704 	addi	r4,r4,540
20081a98:	e47fc404 	addi	r17,fp,-240
20081a9c:	008a8fc0 	call	2008a8fc <printf>
20081aa0:	e43fbc04 	addi	r16,fp,-272
	for( i = 0; i < 8; i++){
		printf("%d ",(int)destination[i]);
20081aa4:	81400017 	ldw	r5,0(r16)
20081aa8:	01000034 	movhi	r4,0
20081aac:	84000104 	addi	r16,r16,4
20081ab0:	21008a04 	addi	r4,r4,552
20081ab4:	008a8fc0 	call	2008a8fc <printf>

	alt_dcache_flush_all();

	int i;
	printf("DMA TEST: ");
	for( i = 0; i < 8; i++){
20081ab8:	847ffa1e 	bne	r16,r17,20081aa4 <__flash_rwdata_start+0xfffe6c38>
		printf("%d ",(int)destination[i]);
	}
	printf("\n");
20081abc:	01000284 	movi	r4,10
20081ac0:	008a9400 	call	2008a940 <putchar>

	return 0;
}
20081ac4:	0005883a 	mov	r2,zero
20081ac8:	e6fffc04 	addi	sp,fp,-16
20081acc:	dfc00517 	ldw	ra,20(sp)
20081ad0:	df000417 	ldw	fp,16(sp)
20081ad4:	dcc00317 	ldw	r19,12(sp)
20081ad8:	dc800217 	ldw	r18,8(sp)
20081adc:	dc400117 	ldw	r17,4(sp)
20081ae0:	dc000017 	ldw	r16,0(sp)
20081ae4:	dec00604 	addi	sp,sp,24
20081ae8:	f800283a 	ret

	if (0 != alt_msgdma_construct_standard_mm_to_st_descriptor(
					read_pointer, &mm_to_st_dma_struct, data_block,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor mm to st\n");
20081aec:	01000034 	movhi	r4,0
20081af0:	21004904 	addi	r4,r4,292
20081af4:	008aa000 	call	2008aa00 <puts>
20081af8:	003fd406 	br	20081a4c <__flash_rwdata_start+0xfffe6be0>
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
	}
	if (0 != alt_msgdma_standard_descriptor_sync_transfer(write_pointer,
					&st_to_mm_dma_struct)) {
		printf("failed starting transfer st to mm\n");
20081afc:	01000034 	movhi	r4,0
20081b00:	21006a04 	addi	r4,r4,424
20081b04:	008aa000 	call	2008aa00 <puts>
20081b08:	003fe006 	br	20081a8c <__flash_rwdata_start+0xfffe6c20>
		printf("failed construct descriptor st to mm\n");
	}

	if (0 != alt_msgdma_standard_descriptor_sync_transfer(read_pointer,
					&mm_to_st_dma_struct)) {
		printf("failed starting transfer mm to st\n");
20081b0c:	01000034 	movhi	r4,0
20081b10:	21007304 	addi	r4,r4,460
20081b14:	008aa000 	call	2008aa00 <puts>
20081b18:	003fd806 	br	20081a7c <__flash_rwdata_start+0xfffe6c10>
	}
	if (0 != alt_msgdma_construct_standard_st_to_mm_descriptor(
					write_pointer, &st_to_mm_dma_struct, destination,
					block_length,
					ALTERA_MSGDMA_DESCRIPTOR_CONTROL_TRANSFER_COMPLETE_IRQ_MASK)) {
		printf("failed construct descriptor st to mm\n");
20081b1c:	01000034 	movhi	r4,0
20081b20:	21005304 	addi	r4,r4,332
20081b24:	008aa000 	call	2008aa00 <puts>
20081b28:	003fd006 	br	20081a6c <__flash_rwdata_start+0xfffe6c00>

20081b2c <ycbcr_to_rgb>:

#else

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, alt_u32* rgbblock)
{
20081b2c:	2189383a 	mul	r4,r4,r6
20081b30:	3185883a 	add	r2,r6,r6
20081b34:	defff404 	addi	sp,sp,-48
20081b38:	1085883a 	add	r2,r2,r2
20081b3c:	da800d17 	ldw	r10,52(sp)
20081b40:	da400c17 	ldw	r9,48(sp)
20081b44:	290b883a 	add	r5,r5,r4
20081b48:	d8800015 	stw	r2,0(sp)
20081b4c:	d8800e17 	ldw	r2,56(sp)
20081b50:	2957883a 	add	r11,r5,r5
20081b54:	5ad7883a 	add	r11,r11,r11
20081b58:	dfc00b15 	stw	ra,44(sp)
20081b5c:	df000a15 	stw	fp,40(sp)
20081b60:	ddc00915 	stw	r23,36(sp)
20081b64:	dd800815 	stw	r22,32(sp)
20081b68:	dd400715 	stw	r21,28(sp)
20081b6c:	dd000615 	stw	r20,24(sp)
20081b70:	dcc00515 	stw	r19,20(sp)
20081b74:	dc800415 	stw	r18,16(sp)
20081b78:	dc400315 	stw	r17,12(sp)
20081b7c:	dc000215 	stw	r16,8(sp)
20081b80:	12d7883a 	add	r11,r2,r11
20081b84:	57c00044 	addi	ra,r10,1
20081b88:	3f000044 	addi	fp,r7,1
20081b8c:	4dc00044 	addi	r23,r9,1
20081b90:	55800084 	addi	r22,r10,2
20081b94:	3d400084 	addi	r21,r7,2
20081b98:	4d000084 	addi	r20,r9,2
20081b9c:	54c000c4 	addi	r19,r10,3
20081ba0:	3c8000c4 	addi	r18,r7,3
20081ba4:	4c4000c4 	addi	r17,r9,3
20081ba8:	54000104 	addi	r16,r10,4
20081bac:	3bc00104 	addi	r15,r7,4
20081bb0:	4b800104 	addi	r14,r9,4
20081bb4:	53400144 	addi	r13,r10,5
20081bb8:	03000204 	movi	r12,8
20081bbc:	d9800115 	stw	r6,4(sp)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            rgbblock[index] = Cr[y][x] << 16 | Y[y][x] << 8 | Cb[y][x]; //= pixel;
20081bc0:	38c00003 	ldbu	r3,0(r7)
20081bc4:	52000003 	ldbu	r8,0(r10)
20081bc8:	49000003 	ldbu	r4,0(r9)
20081bcc:	1806923a 	slli	r3,r3,8
20081bd0:	4010943a 	slli	r8,r8,16
20081bd4:	d9800e17 	ldw	r6,56(sp)
            index++;
20081bd8:	28800044 	addi	r2,r5,1
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++){
            rgb_pixel_t pixel;
            pixel.alpha = 0;
            rgbblock[index] = Cr[y][x] << 16 | Y[y][x] << 8 | Cb[y][x]; //= pixel;
20081bdc:	40c6b03a 	or	r3,r8,r3
20081be0:	1906b03a 	or	r3,r3,r4
20081be4:	58c00015 	stw	r3,0(r11)
20081be8:	fa000003 	ldbu	r8,0(ra)
20081bec:	e0c00003 	ldbu	r3,0(fp)
20081bf0:	b9000003 	ldbu	r4,0(r23)
20081bf4:	4010943a 	slli	r8,r8,16
20081bf8:	1806923a 	slli	r3,r3,8
20081bfc:	1085883a 	add	r2,r2,r2
20081c00:	1085883a 	add	r2,r2,r2
20081c04:	40c6b03a 	or	r3,r8,r3
20081c08:	3085883a 	add	r2,r6,r2
20081c0c:	1906b03a 	or	r3,r3,r4
20081c10:	10c00015 	stw	r3,0(r2)
20081c14:	b2000003 	ldbu	r8,0(r22)
20081c18:	a8c00003 	ldbu	r3,0(r21)
20081c1c:	a1000003 	ldbu	r4,0(r20)
20081c20:	4010943a 	slli	r8,r8,16
20081c24:	1806923a 	slli	r3,r3,8
20081c28:	39c00204 	addi	r7,r7,8
20081c2c:	4a400204 	addi	r9,r9,8
20081c30:	40c6b03a 	or	r3,r8,r3
20081c34:	1906b03a 	or	r3,r3,r4
20081c38:	10c00115 	stw	r3,4(r2)
20081c3c:	9a000003 	ldbu	r8,0(r19)
20081c40:	90c00003 	ldbu	r3,0(r18)
20081c44:	89000003 	ldbu	r4,0(r17)
20081c48:	4010943a 	slli	r8,r8,16
20081c4c:	1806923a 	slli	r3,r3,8
20081c50:	52800204 	addi	r10,r10,8
20081c54:	d9800017 	ldw	r6,0(sp)
20081c58:	40c6b03a 	or	r3,r8,r3
20081c5c:	1906b03a 	or	r3,r3,r4
20081c60:	10c00215 	stw	r3,8(r2)
20081c64:	82000003 	ldbu	r8,0(r16)
20081c68:	78c00003 	ldbu	r3,0(r15)
20081c6c:	71000003 	ldbu	r4,0(r14)
20081c70:	4010943a 	slli	r8,r8,16
20081c74:	1806923a 	slli	r3,r3,8
20081c78:	5997883a 	add	r11,r11,r6
20081c7c:	d9800117 	ldw	r6,4(sp)
20081c80:	40c6b03a 	or	r3,r8,r3
20081c84:	1906b03a 	or	r3,r3,r4
20081c88:	10c00315 	stw	r3,12(r2)
20081c8c:	6a000003 	ldbu	r8,0(r13)
20081c90:	38ffff43 	ldbu	r3,-3(r7)
20081c94:	493fff43 	ldbu	r4,-3(r9)
20081c98:	4010943a 	slli	r8,r8,16
20081c9c:	1806923a 	slli	r3,r3,8
20081ca0:	633fffc4 	addi	r12,r12,-1
20081ca4:	298b883a 	add	r5,r5,r6
20081ca8:	40c6b03a 	or	r3,r8,r3
20081cac:	1906b03a 	or	r3,r3,r4
20081cb0:	10c00415 	stw	r3,16(r2)
20081cb4:	523fff83 	ldbu	r8,-2(r10)
20081cb8:	38ffff83 	ldbu	r3,-2(r7)
20081cbc:	493fff83 	ldbu	r4,-2(r9)
20081cc0:	4010943a 	slli	r8,r8,16
20081cc4:	1806923a 	slli	r3,r3,8
20081cc8:	ffc00204 	addi	ra,ra,8
20081ccc:	e7000204 	addi	fp,fp,8
20081cd0:	40c6b03a 	or	r3,r8,r3
20081cd4:	1906b03a 	or	r3,r3,r4
20081cd8:	10c00515 	stw	r3,20(r2)
20081cdc:	523fffc3 	ldbu	r8,-1(r10)
20081ce0:	38ffffc3 	ldbu	r3,-1(r7)
20081ce4:	493fffc3 	ldbu	r4,-1(r9)
20081ce8:	4010943a 	slli	r8,r8,16
20081cec:	1806923a 	slli	r3,r3,8
20081cf0:	bdc00204 	addi	r23,r23,8
20081cf4:	b5800204 	addi	r22,r22,8
20081cf8:	40c6b03a 	or	r3,r8,r3
20081cfc:	1906b03a 	or	r3,r3,r4
20081d00:	10c00615 	stw	r3,24(r2)
20081d04:	ad400204 	addi	r21,r21,8
20081d08:	a5000204 	addi	r20,r20,8
20081d0c:	9cc00204 	addi	r19,r19,8
20081d10:	94800204 	addi	r18,r18,8
20081d14:	8c400204 	addi	r17,r17,8
20081d18:	84000204 	addi	r16,r16,8
20081d1c:	7bc00204 	addi	r15,r15,8
20081d20:	73800204 	addi	r14,r14,8
20081d24:	6b400204 	addi	r13,r13,8

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, alt_u32* rgbblock)
{
    int index;
    for (int y = 0; y < 8; y++){
20081d28:	603fa51e 	bne	r12,zero,20081bc0 <__flash_rwdata_start+0xfffe6d54>
            pixel.alpha = 0;
            rgbblock[index] = Cr[y][x] << 16 | Y[y][x] << 8 | Cb[y][x]; //= pixel;
            index++;
        }
    }
}
20081d2c:	dfc00b17 	ldw	ra,44(sp)
20081d30:	df000a17 	ldw	fp,40(sp)
20081d34:	ddc00917 	ldw	r23,36(sp)
20081d38:	dd800817 	ldw	r22,32(sp)
20081d3c:	dd400717 	ldw	r21,28(sp)
20081d40:	dd000617 	ldw	r20,24(sp)
20081d44:	dcc00517 	ldw	r19,20(sp)
20081d48:	dc800417 	ldw	r18,16(sp)
20081d4c:	dc400317 	ldw	r17,12(sp)
20081d50:	dc000217 	ldw	r16,8(sp)
20081d54:	dec00c04 	addi	sp,sp,48
20081d58:	f800283a 	ret

20081d5c <Fat_Mount>:


FAT_HANDLE Fat_Mount(){
    
    FAT_HANDLE hFat = 0;
    hFat = fatMountSdcard();
20081d5c:	008391c1 	jmpi	2008391c <fatMountSdcard>

20081d60 <Fat_Unmount>:
    return hFat;      
}

void Fat_Unmount(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    if (!pVol)
20081d60:	20000126 	beq	r4,zero,20081d68 <Fat_Unmount+0x8>
    if (pVol->szFatTable){
        free(pVol->szFatTable);
        pVol->szFatTable = 0;
    }        
#endif //#ifdef FAT_READONLY
    pVol->bMount = FALSE;
20081d64:	20000515 	stw	zero,20(r4)
20081d68:	f800283a 	ret

20081d6c <Fat_Type>:
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    if (pVol){
20081d6c:	20000826 	beq	r4,zero,20081d90 <Fat_Type+0x24>
        if (pVol->Partition_Type == PARTITION_FAT16)
20081d70:	20800417 	ldw	r2,16(r4)
20081d74:	00c00184 	movi	r3,6
20081d78:	10c00326 	beq	r2,r3,20081d88 <Fat_Type+0x1c>
            Type = FAT_FAT16;
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
20081d7c:	108002e0 	cmpeqi	r2,r2,11
20081d80:	1004907a 	slli	r2,r2,1
20081d84:	f800283a 	ret
FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
    if (pVol){
        if (pVol->Partition_Type == PARTITION_FAT16)
            Type = FAT_FAT16;
20081d88:	00800044 	movi	r2,1
        else if (pVol->Partition_Type == PARTITION_FAT32)
            Type = FAT_FAT32;
    }
    return Type;        
}
20081d8c:	f800283a 	ret
    //free(pVol);
}   

FAT_TYPE Fat_Type(FAT_HANDLE Fat){
    VOLUME_INFO *pVol = (VOLUME_INFO *)Fat;
    FAT_TYPE Type = FAT_UNKNOWN;
20081d90:	0005883a 	mov	r2,zero
20081d94:	f800283a 	ret

20081d98 <Fat_FileBrowseBegin>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
20081d98:	20000726 	beq	r4,zero,20081db8 <Fat_FileBrowseBegin+0x20>
        return FALSE;
    if (!pVol->bMount)
20081d9c:	20800517 	ldw	r2,20(r4)
20081da0:	10000626 	beq	r2,zero,20081dbc <Fat_FileBrowseBegin+0x24>
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20081da4:	00bfffc4 	movi	r2,-1
20081da8:	28800015 	stw	r2,0(r5)
    pFatBrowseHandle->hFat = hFat;
20081dac:	29000115 	stw	r4,4(r5)
    return TRUE;
20081db0:	00800044 	movi	r2,1
20081db4:	f800283a 	ret
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
20081db8:	0005883a 	mov	r2,zero
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}
20081dbc:	f800283a 	ret

20081dc0 <Fat_FileBrowseNext>:

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20081dc0:	defff804 	addi	sp,sp,-32
20081dc4:	dc800215 	stw	r18,8(sp)
    bool bFind = FALSE, bError=FALSE, bLongFilename = FALSE;
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
20081dc8:	24800117 	ldw	r18,4(r4)
    pFatBrowseHandle->DirectoryIndex = -1;
    pFatBrowseHandle->hFat = hFat;
    return TRUE;
}

bool Fat_FileBrowseNext(FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext){
20081dcc:	dfc00715 	stw	ra,28(sp)
20081dd0:	dd800615 	stw	r22,24(sp)
20081dd4:	dd400515 	stw	r21,20(sp)
20081dd8:	dd000415 	stw	r20,16(sp)
20081ddc:	dcc00315 	stw	r19,12(sp)
20081de0:	dc400115 	stw	r17,4(sp)
20081de4:	dc000015 	stw	r16,0(sp)
    int OrderValue = 0;
    FAT_DIRECTORY *pDir;
    //unsigned int nSecter, nSecterOffset,nByteOffset;
    VOLUME_INFO *pVol = (VOLUME_INFO *)pFatBrowseHandle->hFat;
    
    if (!pVol)
20081de8:	90001426 	beq	r18,zero,20081e3c <Fat_FileBrowseNext+0x7c>
        return FALSE;    
    
    if (!pVol->bMount)
20081dec:	90800517 	ldw	r2,20(r18)
20081df0:	10001a26 	beq	r2,zero,20081e5c <Fat_FileBrowseNext+0x9c>
20081df4:	2827883a 	mov	r19,r5
20081df8:	2023883a 	mov	r17,r4
20081dfc:	002d883a 	mov	r22,zero
20081e00:	0029883a 	mov	r20,zero
        if (!pDir)
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20081e04:	054003c4 	movi	r21,15
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
20081e08:	89400017 	ldw	r5,0(r17)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20081e0c:	9009883a 	mov	r4,r18
    if (!pVol->bMount)
        return FALSE;
    
    
    do{  // search Directory Table
        pFatBrowseHandle->DirectoryIndex++;        
20081e10:	29400044 	addi	r5,r5,1
20081e14:	89400015 	stw	r5,0(r17)
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
20081e18:	00835a40 	call	200835a4 <fatFindDirectory>
20081e1c:	1021883a 	mov	r16,r2
        if (!pDir)
20081e20:	10000b26 	beq	r2,zero,20081e50 <Fat_FileBrowseNext+0x90>
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
20081e24:	1009883a 	mov	r4,r2
20081e28:	00833e80 	call	200833e8 <fatIsValidDir>
20081e2c:	1000151e 	bne	r2,zero,20081e84 <Fat_FileBrowseNext+0xc4>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20081e30:	8009883a 	mov	r4,r16
20081e34:	00833dc0 	call	200833dc <fatIsLastDir>
20081e38:	103ff326 	beq	r2,zero,20081e08 <__flash_rwdata_start+0xfffe6f9c>
20081e3c:	0005883a 	mov	r2,zero
20081e40:	00000606 	br	20081e5c <Fat_FileBrowseNext+0x9c>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
                        }else{
                            if ((pLDIR->LDIR_Ord & 0x3F) != OrderValue)
20081e44:	80800003 	ldbu	r2,0(r16)
20081e48:	10800fcc 	andi	r2,r2,63
20081e4c:	1580bf26 	beq	r2,r22,2008214c <Fat_FileBrowseNext+0x38c>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20081e50:	8009883a 	mov	r4,r16
20081e54:	00833dc0 	call	200833dc <fatIsLastDir>
20081e58:	0005883a 	mov	r2,zero
    
    return bFind;
    
}
20081e5c:	dfc00717 	ldw	ra,28(sp)
20081e60:	dd800617 	ldw	r22,24(sp)
20081e64:	dd400517 	ldw	r21,20(sp)
20081e68:	dd000417 	ldw	r20,16(sp)
20081e6c:	dcc00317 	ldw	r19,12(sp)
20081e70:	dc800217 	ldw	r18,8(sp)
20081e74:	dc400117 	ldw	r17,4(sp)
20081e78:	dc000017 	ldw	r16,0(sp)
20081e7c:	dec00804 	addi	sp,sp,32
20081e80:	f800283a 	ret
        pDir = fatFindDirectory(pVol,pFatBrowseHandle->DirectoryIndex);
        if (!pDir)
            bError = TRUE;
            
        if (!bError){                        
            if (fatIsValidDir(pDir) && !fatIsUnusedDir(pDir)){
20081e84:	8009883a 	mov	r4,r16
20081e88:	00834bc0 	call	200834bc <fatIsUnusedDir>
20081e8c:	103fe81e 	bne	r2,zero,20081e30 <__flash_rwdata_start+0xfffe6fc4>
                if ((pDir->Attribute & ATTR_LONG_NAME) == ATTR_LONG_NAME){
20081e90:	808002c3 	ldbu	r2,11(r16)
20081e94:	10c003cc 	andi	r3,r2,15
20081e98:	1d40a426 	beq	r3,r21,2008212c <Fat_FileBrowseNext+0x36c>
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
                    }                        
                }else{
                    if (bLongFilename){
20081e9c:	a0004126 	beq	r20,zero,20081fa4 <Fat_FileBrowseNext+0x1e4>
                        pFileContext->Attribute = ATTR_LONG_NAME;
20081ea0:	008003c4 	movi	r2,15
20081ea4:	98804505 	stb	r2,276(r19)
                        if ((pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)) == 0)
20081ea8:	808002c3 	ldbu	r2,11(r16)
20081eac:	10800c0c 	andi	r2,r2,48
20081eb0:	103fe726 	beq	r2,zero,20081e50 <__flash_rwdata_start+0xfffe6fe4>
                        bFind = TRUE;
                    }
                    
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
20081eb4:	9d004015 	stw	r20,256(r19)
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20081eb8:	80c002c3 	ldbu	r3,11(r16)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
                        pFileContext->FileSize = pDir->FileSize;
20081ebc:	00800044 	movi	r2,1
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20081ec0:	89000017 	ldw	r4,0(r17)
                    }
                    
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
20081ec4:	1806d17a 	srli	r3,r3,5
20081ec8:	1886703a 	and	r3,r3,r2
20081ecc:	98c04115 	stw	r3,260(r19)
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
20081ed0:	80c002c3 	ldbu	r3,11(r16)
20081ed4:	1806d13a 	srli	r3,r3,4
20081ed8:	1886703a 	and	r3,r3,r2
20081edc:	98c04215 	stw	r3,264(r19)
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20081ee0:	80c002c3 	ldbu	r3,11(r16)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
20081ee4:	99004415 	stw	r4,272(r19)
                    if (bFind){
                        // my ext
                        pFileContext->bLongFilename = bLongFilename;
                        pFileContext->bFile = (pDir->Attribute & ATTR_ARCHIVE)?TRUE:FALSE;
                        pFileContext->bDirectory = (pDir->Attribute & ATTR_DIRECTORY)?TRUE:FALSE;
                        pFileContext->bVolume = (pDir->Attribute & ATTR_VOLUME_ID)?TRUE:FALSE;
20081ee8:	1806d0fa 	srli	r3,r3,3
20081eec:	1886703a 	and	r3,r3,r2
20081ef0:	98c04315 	stw	r3,268(r19)
                        pFileContext->DirEntryIndex = pFatBrowseHandle->DirectoryIndex; // add in v2.0.0
                        
                        //
                        pFileContext->Attribute = pDir->Attribute;
20081ef4:	80c002c3 	ldbu	r3,11(r16)
20081ef8:	98c04505 	stb	r3,276(r19)
                        pFileContext->CreateTime = pDir->CreateTime;
20081efc:	80c003c3 	ldbu	r3,15(r16)
20081f00:	81000383 	ldbu	r4,14(r16)
20081f04:	1806923a 	slli	r3,r3,8
20081f08:	1906b03a 	or	r3,r3,r4
20081f0c:	98c0458d 	sth	r3,278(r19)
                        pFileContext->LastAccessDate = pDir->LastAccessDate;
20081f10:	80c004c3 	ldbu	r3,19(r16)
20081f14:	81000483 	ldbu	r4,18(r16)
20081f18:	1806923a 	slli	r3,r3,8
20081f1c:	1906b03a 	or	r3,r3,r4
20081f20:	98c0468d 	sth	r3,282(r19)
                        pFileContext->FirstLogicalClusterHi = pDir->FirstLogicalClusterHi;
20081f24:	80c00543 	ldbu	r3,21(r16)
20081f28:	81000503 	ldbu	r4,20(r16)
20081f2c:	1806923a 	slli	r3,r3,8
20081f30:	1906b03a 	or	r3,r3,r4
20081f34:	98c0470d 	sth	r3,284(r19)
                        pFileContext->LastWriteTime = pDir->LastWriteTime;
20081f38:	80c005c3 	ldbu	r3,23(r16)
20081f3c:	81000583 	ldbu	r4,22(r16)
20081f40:	1806923a 	slli	r3,r3,8
20081f44:	1906b03a 	or	r3,r3,r4
20081f48:	98c0478d 	sth	r3,286(r19)
                        pFileContext->LastWriteDate = pDir->LastWriteDate;
20081f4c:	80c00643 	ldbu	r3,25(r16)
20081f50:	81000603 	ldbu	r4,24(r16)
20081f54:	1806923a 	slli	r3,r3,8
20081f58:	1906b03a 	or	r3,r3,r4
20081f5c:	98c0480d 	sth	r3,288(r19)
                        pFileContext->FirstLogicalCluster = pDir->FirstLogicalCluster;
20081f60:	80c006c3 	ldbu	r3,27(r16)
20081f64:	81000683 	ldbu	r4,26(r16)
20081f68:	1806923a 	slli	r3,r3,8
20081f6c:	1906b03a 	or	r3,r3,r4
20081f70:	98c0488d 	sth	r3,290(r19)
                        pFileContext->FileSize = pDir->FileSize;
20081f74:	81000743 	ldbu	r4,29(r16)
20081f78:	80c00783 	ldbu	r3,30(r16)
20081f7c:	818007c3 	ldbu	r6,31(r16)
20081f80:	81400703 	ldbu	r5,28(r16)
20081f84:	2008923a 	slli	r4,r4,8
20081f88:	1806943a 	slli	r3,r3,16
20081f8c:	300c963a 	slli	r6,r6,24
20081f90:	2148b03a 	or	r4,r4,r5
20081f94:	1906b03a 	or	r3,r3,r4
20081f98:	30c6b03a 	or	r3,r6,r3
20081f9c:	98c04915 	stw	r3,292(r19)
20081fa0:	003fae06 	br	20081e5c <__flash_rwdata_start+0xfffe6ff0>

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081fa4:	81400003 	ldbu	r5,0(r16)
20081fa8:	00fff7c4 	movi	r3,-33
20081fac:	28c8703a 	and	r4,r5,r3
20081fb0:	21003fcc 	andi	r4,r4,255
20081fb4:	2100201c 	xori	r4,r4,128
20081fb8:	213fe004 	addi	r4,r4,-128
20081fbc:	2000b226 	beq	r4,zero,20082288 <Fat_FileBrowseNext+0x4c8>
        szFilename[nPos++] = pDir->Name[i++];
20081fc0:	99400005 	stb	r5,0(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081fc4:	81000043 	ldbu	r4,1(r16)
20081fc8:	20c4703a 	and	r2,r4,r3
20081fcc:	10803fcc 	andi	r2,r2,255
20081fd0:	1080201c 	xori	r2,r2,128
20081fd4:	10bfe004 	addi	r2,r2,-128
20081fd8:	1000b126 	beq	r2,zero,200822a0 <Fat_FileBrowseNext+0x4e0>
        szFilename[nPos++] = pDir->Name[i++];
20081fdc:	99000045 	stb	r4,1(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081fe0:	81000083 	ldbu	r4,2(r16)
20081fe4:	20c4703a 	and	r2,r4,r3
20081fe8:	10803fcc 	andi	r2,r2,255
20081fec:	1080201c 	xori	r2,r2,128
20081ff0:	10bfe004 	addi	r2,r2,-128
20081ff4:	10009526 	beq	r2,zero,2008224c <Fat_FileBrowseNext+0x48c>
        szFilename[nPos++] = pDir->Name[i++];
20081ff8:	99000085 	stb	r4,2(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20081ffc:	810000c3 	ldbu	r4,3(r16)
20082000:	20c4703a 	and	r2,r4,r3
20082004:	10803fcc 	andi	r2,r2,255
20082008:	1080201c 	xori	r2,r2,128
2008200c:	10bfe004 	addi	r2,r2,-128
20082010:	1000bf26 	beq	r2,zero,20082310 <Fat_FileBrowseNext+0x550>
        szFilename[nPos++] = pDir->Name[i++];
20082014:	990000c5 	stb	r4,3(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082018:	81000103 	ldbu	r4,4(r16)
2008201c:	20c4703a 	and	r2,r4,r3
20082020:	10803fcc 	andi	r2,r2,255
20082024:	1080201c 	xori	r2,r2,128
20082028:	10bfe004 	addi	r2,r2,-128
2008202c:	1000b126 	beq	r2,zero,200822f4 <Fat_FileBrowseNext+0x534>
        szFilename[nPos++] = pDir->Name[i++];
20082030:	99000105 	stb	r4,4(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082034:	81000143 	ldbu	r4,5(r16)
20082038:	00bff7c4 	movi	r2,-33
2008203c:	2086703a 	and	r3,r4,r2
20082040:	18c03fcc 	andi	r3,r3,255
20082044:	18c0201c 	xori	r3,r3,128
20082048:	18ffe004 	addi	r3,r3,-128
2008204c:	1800a226 	beq	r3,zero,200822d8 <Fat_FileBrowseNext+0x518>
        szFilename[nPos++] = pDir->Name[i++];
20082050:	99000145 	stb	r4,5(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082054:	81000183 	ldbu	r4,6(r16)
20082058:	2086703a 	and	r3,r4,r2
2008205c:	18c03fcc 	andi	r3,r3,255
20082060:	18c0201c 	xori	r3,r3,128
20082064:	18ffe004 	addi	r3,r3,-128
20082068:	18009426 	beq	r3,zero,200822bc <Fat_FileBrowseNext+0x4fc>
        szFilename[nPos++] = pDir->Name[i++];
2008206c:	99000185 	stb	r4,6(r19)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082070:	80c001c3 	ldbu	r3,7(r16)
20082074:	1884703a 	and	r2,r3,r2
20082078:	10803fcc 	andi	r2,r2,255
2008207c:	1080201c 	xori	r2,r2,128
20082080:	10bfe004 	addi	r2,r2,-128
20082084:	1000a926 	beq	r2,zero,2008232c <Fat_FileBrowseNext+0x56c>
        szFilename[nPos++] = pDir->Name[i++];
20082088:	98c001c5 	stb	r3,7(r19)
2008208c:	808002c3 	ldbu	r2,11(r16)
20082090:	01c00304 	movi	r7,12
20082094:	018002c4 	movi	r6,11
20082098:	01400284 	movi	r5,10
2008209c:	01000244 	movi	r4,9
200820a0:	00c00204 	movi	r3,8
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
200820a4:	10800c0c 	andi	r2,r2,48
200820a8:	10001d26 	beq	r2,zero,20082120 <Fat_FileBrowseNext+0x360>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
200820ac:	98c7883a 	add	r3,r19,r3
200820b0:	00800b84 	movi	r2,46
200820b4:	18800005 	stb	r2,0(r3)
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200820b8:	80c00203 	ldbu	r3,8(r16)
200820bc:	00bff7c4 	movi	r2,-33
200820c0:	1890703a 	and	r8,r3,r2
200820c4:	42003fcc 	andi	r8,r8,255
200820c8:	4200201c 	xori	r8,r8,128
200820cc:	423fe004 	addi	r8,r8,-128
200820d0:	4000a126 	beq	r8,zero,20082358 <Fat_FileBrowseNext+0x598>
            szFilename[nPos++] = pDir->Extension[i++];
200820d4:	9909883a 	add	r4,r19,r4
200820d8:	20c00005 	stb	r3,0(r4)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200820dc:	81000243 	ldbu	r4,9(r16)
200820e0:	2086703a 	and	r3,r4,r2
200820e4:	18c03fcc 	andi	r3,r3,255
200820e8:	18c0201c 	xori	r3,r3,128
200820ec:	18ffe004 	addi	r3,r3,-128
200820f0:	18009526 	beq	r3,zero,20082348 <Fat_FileBrowseNext+0x588>
            szFilename[nPos++] = pDir->Extension[i++];
200820f4:	994b883a 	add	r5,r19,r5
200820f8:	29000005 	stb	r4,0(r5)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200820fc:	80c00283 	ldbu	r3,10(r16)
20082100:	1884703a 	and	r2,r3,r2
20082104:	10803fcc 	andi	r2,r2,255
20082108:	1080201c 	xori	r2,r2,128
2008210c:	10bfe004 	addi	r2,r2,-128
20082110:	10008f26 	beq	r2,zero,20082350 <Fat_FileBrowseNext+0x590>
            szFilename[nPos++] = pDir->Extension[i++];
20082114:	998d883a 	add	r6,r19,r6
20082118:	30c00005 	stb	r3,0(r6)
2008211c:	3807883a 	mov	r3,r7
    }            
    szFilename[nPos++] = 0;
20082120:	98c7883a 	add	r3,r19,r3
20082124:	18000005 	stb	zero,0(r3)
20082128:	003f6206 	br	20081eb4 <__flash_rwdata_start+0xfffe7048>
                    // check attribute
                    if ((pLDIR->LDIR_Attr & ATTR_LONG_NAME) != ATTR_LONG_NAME){
                        bError = TRUE;
                    }else{                        
                        // check order
                        if (OrderValue == 0){
2008212c:	b03f451e 	bne	r22,zero,20081e44 <__flash_rwdata_start+0xfffe6fd8>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
20082130:	a0004d1e 	bne	r20,zero,20082268 <Fat_FileBrowseNext+0x4a8>
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
20082134:	85800003 	ldbu	r22,0(r16)
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20082138:	9809883a 	mov	r4,r19
2008213c:	000b883a 	mov	r5,zero
20082140:	01804004 	movi	r6,256
                        if (OrderValue == 0){
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
20082144:	b5800fcc 	andi	r22,r22,63
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20082148:	008a7ac0 	call	2008a7ac <memset>
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
2008214c:	b5bfffc4 	addi	r22,r22,-1
                        BaseOffset = OrderValue * 26;
20082150:	b10006a4 	muli	r4,r22,26
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082154:	81800044 	addi	r6,r16,1
20082158:	30800003 	ldbu	r2,0(r6)
2008215c:	990b883a 	add	r5,r19,r4
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
20082160:	80c00384 	addi	r3,r16,14
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082164:	28800005 	stb	r2,0(r5)
20082168:	81c00083 	ldbu	r7,2(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
2008216c:	20800284 	addi	r2,r4,10
20082170:	9885883a 	add	r2,r19,r2
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082174:	29c00045 	stb	r7,1(r5)
20082178:	820000c3 	ldbu	r8,3(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
2008217c:	81c00704 	addi	r7,r16,28
20082180:	21000584 	addi	r4,r4,22
                        int BaseOffset;
                        bLongFilename = TRUE;
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082184:	2a000085 	stb	r8,2(r5)
20082188:	82000103 	ldbu	r8,4(r16)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
2008218c:	9909883a 	add	r4,r19,r4
                    }
                    
                    //                        
                    if (!bError){
                        int BaseOffset;
                        bLongFilename = TRUE;
20082190:	05000044 	movi	r20,1
                        OrderValue--;
                        BaseOffset = OrderValue * 26;
                        // cast filename
                        memcpy(pFileContext->szName+BaseOffset, pLDIR->LDIR_Name1, 10);
20082194:	2a0000c5 	stb	r8,3(r5)
20082198:	82000143 	ldbu	r8,5(r16)
2008219c:	2a000105 	stb	r8,4(r5)
200821a0:	82000183 	ldbu	r8,6(r16)
200821a4:	2a000145 	stb	r8,5(r5)
200821a8:	820001c3 	ldbu	r8,7(r16)
200821ac:	2a000185 	stb	r8,6(r5)
200821b0:	82000203 	ldbu	r8,8(r16)
200821b4:	2a0001c5 	stb	r8,7(r5)
200821b8:	82000243 	ldbu	r8,9(r16)
200821bc:	2a000205 	stb	r8,8(r5)
200821c0:	81800283 	ldbu	r6,10(r16)
200821c4:	29800245 	stb	r6,9(r5)
                        memcpy(pFileContext->szName+BaseOffset+10, pLDIR->LDIR_Name2, 12);
200821c8:	19400003 	ldbu	r5,0(r3)
200821cc:	11400005 	stb	r5,0(r2)
200821d0:	814003c3 	ldbu	r5,15(r16)
200821d4:	11400045 	stb	r5,1(r2)
200821d8:	81400403 	ldbu	r5,16(r16)
200821dc:	11400085 	stb	r5,2(r2)
200821e0:	81400443 	ldbu	r5,17(r16)
200821e4:	114000c5 	stb	r5,3(r2)
200821e8:	81400483 	ldbu	r5,18(r16)
200821ec:	11400105 	stb	r5,4(r2)
200821f0:	814004c3 	ldbu	r5,19(r16)
200821f4:	11400145 	stb	r5,5(r2)
200821f8:	81400503 	ldbu	r5,20(r16)
200821fc:	11400185 	stb	r5,6(r2)
20082200:	81400543 	ldbu	r5,21(r16)
20082204:	114001c5 	stb	r5,7(r2)
20082208:	81400583 	ldbu	r5,22(r16)
2008220c:	11400205 	stb	r5,8(r2)
20082210:	814005c3 	ldbu	r5,23(r16)
20082214:	11400245 	stb	r5,9(r2)
20082218:	81400603 	ldbu	r5,24(r16)
2008221c:	11400285 	stb	r5,10(r2)
20082220:	80c00643 	ldbu	r3,25(r16)
20082224:	10c002c5 	stb	r3,11(r2)
                        memcpy(pFileContext->szName+BaseOffset+22, pLDIR->LDIR_Name3, 4);
20082228:	38800003 	ldbu	r2,0(r7)
2008222c:	20800005 	stb	r2,0(r4)
20082230:	80800743 	ldbu	r2,29(r16)
20082234:	20800045 	stb	r2,1(r4)
20082238:	80800783 	ldbu	r2,30(r16)
2008223c:	20800085 	stb	r2,2(r4)
20082240:	808007c3 	ldbu	r2,31(r16)
20082244:	208000c5 	stb	r2,3(r4)
20082248:	003ef906 	br	20081e30 <__flash_rwdata_start+0xfffe6fc4>
2008224c:	808002c3 	ldbu	r2,11(r16)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082250:	01c00184 	movi	r7,6
20082254:	01800144 	movi	r6,5
20082258:	01400104 	movi	r5,4
2008225c:	010000c4 	movi	r4,3
20082260:	00c00084 	movi	r3,2
20082264:	003f8f06 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
                            // last entry
                            if (bLongFilename || ((OrderValue & LAST_LONG_ENTRY) != OrderValue))
                                bError = TRUE;
                            else
                                OrderValue = pLDIR->LDIR_Ord & 0x3F;
                            memset(pFileContext->szName, 0, sizeof(pFileContext->szName));        
20082268:	000b883a 	mov	r5,zero
2008226c:	01804004 	movi	r6,256
20082270:	9809883a 	mov	r4,r19
20082274:	008a7ac0 	call	2008a7ac <memset>
                        pFileContext->FileSize = pDir->FileSize;
                    }                        
                }                    
            }                
        }            
    }while (!bFind && !fatIsLastDir(pDir) && !bError);
20082278:	8009883a 	mov	r4,r16
2008227c:	00833dc0 	call	200833dc <fatIsLastDir>
20082280:	0005883a 	mov	r2,zero
20082284:	003ef506 	br	20081e5c <__flash_rwdata_start+0xfffe6ff0>

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082288:	01c00104 	movi	r7,4
2008228c:	018000c4 	movi	r6,3
20082290:	01400084 	movi	r5,2
20082294:	01000044 	movi	r4,1
20082298:	0007883a 	mov	r3,zero
2008229c:	003f8106 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
200822a0:	808002c3 	ldbu	r2,11(r16)
200822a4:	01c00144 	movi	r7,5
200822a8:	01800104 	movi	r6,4
200822ac:	014000c4 	movi	r5,3
200822b0:	01000084 	movi	r4,2
200822b4:	00c00044 	movi	r3,1
200822b8:	003f7a06 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
200822bc:	808002c3 	ldbu	r2,11(r16)
200822c0:	01c00284 	movi	r7,10
200822c4:	01800244 	movi	r6,9
200822c8:	01400204 	movi	r5,8
200822cc:	010001c4 	movi	r4,7
200822d0:	00c00184 	movi	r3,6
200822d4:	003f7306 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
200822d8:	808002c3 	ldbu	r2,11(r16)
200822dc:	01c00244 	movi	r7,9
200822e0:	01800204 	movi	r6,8
200822e4:	014001c4 	movi	r5,7
200822e8:	01000184 	movi	r4,6
200822ec:	00c00144 	movi	r3,5
200822f0:	003f6c06 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
200822f4:	808002c3 	ldbu	r2,11(r16)
200822f8:	01c00204 	movi	r7,8
200822fc:	018001c4 	movi	r6,7
20082300:	01400184 	movi	r5,6
20082304:	01000144 	movi	r4,5
20082308:	00c00104 	movi	r3,4
2008230c:	003f6506 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
20082310:	808002c3 	ldbu	r2,11(r16)
20082314:	01c001c4 	movi	r7,7
20082318:	01800184 	movi	r6,6
2008231c:	01400144 	movi	r5,5
20082320:	01000104 	movi	r4,4
20082324:	00c000c4 	movi	r3,3
20082328:	003f5e06 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
2008232c:	808002c3 	ldbu	r2,11(r16)
20082330:	01c002c4 	movi	r7,11
20082334:	01800284 	movi	r6,10
20082338:	01400244 	movi	r5,9
2008233c:	01000204 	movi	r4,8
20082340:	00c001c4 	movi	r3,7
20082344:	003f5706 	br	200820a4 <__flash_rwdata_start+0xfffe7238>
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082348:	2807883a 	mov	r3,r5
2008234c:	003f7406 	br	20082120 <__flash_rwdata_start+0xfffe72b4>
20082350:	3007883a 	mov	r3,r6
20082354:	003f7206 	br	20082120 <__flash_rwdata_start+0xfffe72b4>
20082358:	2007883a 	mov	r3,r4
2008235c:	003f7006 	br	20082120 <__flash_rwdata_start+0xfffe72b4>

20082360 <Fat_FileCount>:
    return bFind;
    
}


unsigned int Fat_FileCount(FAT_HANDLE Fat){
20082360:	deffb204 	addi	sp,sp,-312
20082364:	dfc04d15 	stw	ra,308(sp)
20082368:	dc004c15 	stw	r16,304(sp)
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
2008236c:	20000d26 	beq	r4,zero,200823a4 <Fat_FileCount+0x44>
        return FALSE;
    if (!pVol->bMount)
20082370:	20800517 	ldw	r2,20(r4)
20082374:	10000b26 	beq	r2,zero,200823a4 <Fat_FileCount+0x44>
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082378:	00bfffc4 	movi	r2,-1
2008237c:	d8804a15 	stw	r2,296(sp)
    pFatBrowseHandle->hFat = hFat;
20082380:	d9004b15 	stw	r4,300(sp)
20082384:	0021883a 	mov	r16,zero
20082388:	00000106 	br	20082390 <Fat_FileCount+0x30>
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
            nCount++;
2008238c:	84000044 	addi	r16,r16,1
    unsigned int nCount = 0;
    FAT_BROWSE_HANDLE hBrowse;
    FILE_CONTEXT FileContext;
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
20082390:	d9004a04 	addi	r4,sp,296
20082394:	d80b883a 	mov	r5,sp
20082398:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
2008239c:	103ffb1e 	bne	r2,zero,2008238c <__flash_rwdata_start+0xfffe7520>
200823a0:	00000106 	br	200823a8 <Fat_FileCount+0x48>
    
}


unsigned int Fat_FileCount(FAT_HANDLE Fat){
    unsigned int nCount = 0;
200823a4:	0021883a 	mov	r16,zero
        while(Fat_FileBrowseNext(&hBrowse, &FileContext))
            nCount++;
    }
    
    return nCount;
}
200823a8:	8005883a 	mov	r2,r16
200823ac:	dfc04d17 	ldw	ra,308(sp)
200823b0:	dc004c17 	ldw	r16,304(sp)
200823b4:	dec04e04 	addi	sp,sp,312
200823b8:	f800283a 	ret

200823bc <fatSameLongFilename>:

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200823bc:	2080000b 	ldhu	r2,0(r4)
        if (*p1 != *p2){
            bSame = FALSE;
        }
        p1++;
200823c0:	21000084 	addi	r4,r4,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200823c4:	1000031e 	bne	r2,zero,200823d4 <fatSameLongFilename+0x18>
200823c8:	2880000b 	ldhu	r2,0(r5)
200823cc:	1005003a 	cmpeq	r2,r2,zero
200823d0:	f800283a 	ret
        if (*p1 != *p2){
200823d4:	28c0000b 	ldhu	r3,0(r5)
            bSame = FALSE;
        }
        p1++;
        p2++;
200823d8:	29400084 	addi	r5,r5,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200823dc:	18ffffcc 	andi	r3,r3,65535
200823e0:	10fff626 	beq	r2,r3,200823bc <__flash_rwdata_start+0xfffe7550>
200823e4:	0005883a 	mov	r2,zero
        p2++;
        
    }
    
    return bSame;
}
200823e8:	f800283a 	ret

200823ec <fatComposeShortFilename>:

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200823ec:	21800003 	ldbu	r6,0(r4)
200823f0:	00bff7c4 	movi	r2,-33
200823f4:	3086703a 	and	r3,r6,r2
200823f8:	18c03fcc 	andi	r3,r3,255
200823fc:	18c0201c 	xori	r3,r3,128
20082400:	18ffe004 	addi	r3,r3,-128
20082404:	18005b26 	beq	r3,zero,20082574 <fatComposeShortFilename+0x188>
        szFilename[nPos++] = pDir->Name[i++];
20082408:	29800005 	stb	r6,0(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
2008240c:	21800043 	ldbu	r6,1(r4)
20082410:	3086703a 	and	r3,r6,r2
20082414:	18c03fcc 	andi	r3,r3,255
20082418:	18c0201c 	xori	r3,r3,128
2008241c:	18ffe004 	addi	r3,r3,-128
20082420:	18005626 	beq	r3,zero,2008257c <fatComposeShortFilename+0x190>
        szFilename[nPos++] = pDir->Name[i++];
20082424:	29800045 	stb	r6,1(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082428:	21800083 	ldbu	r6,2(r4)
2008242c:	3086703a 	and	r3,r6,r2
20082430:	18c03fcc 	andi	r3,r3,255
20082434:	18c0201c 	xori	r3,r3,128
20082438:	18ffe004 	addi	r3,r3,-128
2008243c:	18005126 	beq	r3,zero,20082584 <fatComposeShortFilename+0x198>
        szFilename[nPos++] = pDir->Name[i++];
20082440:	29800085 	stb	r6,2(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082444:	218000c3 	ldbu	r6,3(r4)
20082448:	3086703a 	and	r3,r6,r2
2008244c:	18c03fcc 	andi	r3,r3,255
20082450:	18c0201c 	xori	r3,r3,128
20082454:	18ffe004 	addi	r3,r3,-128
20082458:	18004c26 	beq	r3,zero,2008258c <fatComposeShortFilename+0x1a0>
        szFilename[nPos++] = pDir->Name[i++];
2008245c:	298000c5 	stb	r6,3(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082460:	21800103 	ldbu	r6,4(r4)
20082464:	3086703a 	and	r3,r6,r2
20082468:	18c03fcc 	andi	r3,r3,255
2008246c:	18c0201c 	xori	r3,r3,128
20082470:	18ffe004 	addi	r3,r3,-128
20082474:	18004726 	beq	r3,zero,20082594 <fatComposeShortFilename+0x1a8>
        szFilename[nPos++] = pDir->Name[i++];
20082478:	29800105 	stb	r6,4(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
2008247c:	21800143 	ldbu	r6,5(r4)
20082480:	3086703a 	and	r3,r6,r2
20082484:	18c03fcc 	andi	r3,r3,255
20082488:	18c0201c 	xori	r3,r3,128
2008248c:	18ffe004 	addi	r3,r3,-128
20082490:	18004226 	beq	r3,zero,2008259c <fatComposeShortFilename+0x1b0>
        szFilename[nPos++] = pDir->Name[i++];
20082494:	29800145 	stb	r6,5(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
20082498:	21800183 	ldbu	r6,6(r4)
2008249c:	3086703a 	and	r3,r6,r2
200824a0:	18c03fcc 	andi	r3,r3,255
200824a4:	18c0201c 	xori	r3,r3,128
200824a8:	18ffe004 	addi	r3,r3,-128
200824ac:	18003d26 	beq	r3,zero,200825a4 <fatComposeShortFilename+0x1b8>
        szFilename[nPos++] = pDir->Name[i++];
200824b0:	29800185 	stb	r6,6(r5)

void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
200824b4:	20c001c3 	ldbu	r3,7(r4)
200824b8:	1884703a 	and	r2,r3,r2
200824bc:	10803fcc 	andi	r2,r2,255
200824c0:	1080201c 	xori	r2,r2,128
200824c4:	10bfe004 	addi	r2,r2,-128
200824c8:	10003826 	beq	r2,zero,200825ac <fatComposeShortFilename+0x1c0>
        szFilename[nPos++] = pDir->Name[i++];
200824cc:	28c001c5 	stb	r3,7(r5)
200824d0:	00800204 	movi	r2,8
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
200824d4:	20c002c3 	ldbu	r3,11(r4)
200824d8:	18c00c0c 	andi	r3,r3,48
200824dc:	18002026 	beq	r3,zero,20082560 <fatComposeShortFilename+0x174>
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
200824e0:	2887883a 	add	r3,r5,r2
200824e4:	01800b84 	movi	r6,46
200824e8:	19800005 	stb	r6,0(r3)
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200824ec:	22000203 	ldbu	r8,8(r4)
200824f0:	00fff7c4 	movi	r3,-33
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
        szFilename[nPos++] = pDir->Name[i++];
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
200824f4:	11c00044 	addi	r7,r2,1
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
200824f8:	40cc703a 	and	r6,r8,r3
200824fc:	31803fcc 	andi	r6,r6,255
20082500:	3180201c 	xori	r6,r6,128
20082504:	31bfe004 	addi	r6,r6,-128
20082508:	30001826 	beq	r6,zero,2008256c <fatComposeShortFilename+0x180>
            szFilename[nPos++] = pDir->Extension[i++];
2008250c:	29cf883a 	add	r7,r5,r7
20082510:	3a000005 	stb	r8,0(r7)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082514:	22000243 	ldbu	r8,9(r4)
            szFilename[nPos++] = pDir->Extension[i++];
20082518:	11c00084 	addi	r7,r2,2
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
2008251c:	40cc703a 	and	r6,r8,r3
20082520:	31803fcc 	andi	r6,r6,255
20082524:	3180201c 	xori	r6,r6,128
20082528:	31bfe004 	addi	r6,r6,-128
2008252c:	30000f26 	beq	r6,zero,2008256c <fatComposeShortFilename+0x180>
            szFilename[nPos++] = pDir->Extension[i++];
20082530:	29cf883a 	add	r7,r5,r7
20082534:	3a000005 	stb	r8,0(r7)
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082538:	21800283 	ldbu	r6,10(r4)
            szFilename[nPos++] = pDir->Extension[i++];
2008253c:	110000c4 	addi	r4,r2,3
    
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
20082540:	30c6703a 	and	r3,r6,r3
20082544:	18c03fcc 	andi	r3,r3,255
20082548:	18c0201c 	xori	r3,r3,128
2008254c:	18ffe004 	addi	r3,r3,-128
20082550:	18001826 	beq	r3,zero,200825b4 <fatComposeShortFilename+0x1c8>
            szFilename[nPos++] = pDir->Extension[i++];
20082554:	2909883a 	add	r4,r5,r4
20082558:	10800104 	addi	r2,r2,4
2008255c:	21800005 	stb	r6,0(r4)
    }            
    szFilename[nPos++] = 0;
20082560:	288b883a 	add	r5,r5,r2
20082564:	28000005 	stb	zero,0(r5)
20082568:	f800283a 	ret
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
            szFilename[nPos++] = pDir->Extension[i++];
2008256c:	3805883a 	mov	r2,r7
20082570:	003ffb06 	br	20082560 <__flash_rwdata_start+0xfffe76f4>
    return bSame;
}


void fatComposeShortFilename(FAT_DIRECTORY *pDir, char *szFilename){
    int i,nPos=0;
20082574:	0005883a 	mov	r2,zero
20082578:	003fd606 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
    
    i=0;
    while(i < 8 && pDir->Name[i] != 0 && pDir->Name[i] != ' ')
        szFilename[nPos++] = pDir->Name[i++];
2008257c:	00800044 	movi	r2,1
20082580:	003fd406 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
20082584:	00800084 	movi	r2,2
20082588:	003fd206 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
2008258c:	008000c4 	movi	r2,3
20082590:	003fd006 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
20082594:	00800104 	movi	r2,4
20082598:	003fce06 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
2008259c:	00800144 	movi	r2,5
200825a0:	003fcc06 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
200825a4:	00800184 	movi	r2,6
200825a8:	003fca06 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
200825ac:	008001c4 	movi	r2,7
200825b0:	003fc806 	br	200824d4 <__flash_rwdata_start+0xfffe7668>
    if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY)){
        if (pDir->Attribute & (ATTR_ARCHIVE | ATTR_DIRECTORY))     
            szFilename[nPos++] = '.';   
        i=0;
        while(i < 3 && pDir->Extension[i] != 0 && pDir->Extension[i] != ' ')
            szFilename[nPos++] = pDir->Extension[i++];
200825b4:	2005883a 	mov	r2,r4
200825b8:	003fe906 	br	20082560 <__flash_rwdata_start+0xfffe76f4>

200825bc <Fat_CheckExtension>:
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
	if(pFileContext == NULL)
200825bc:	20001426 	beq	r4,zero,20082610 <Fat_CheckExtension+0x54>
    }            
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
200825c0:	defffe04 	addi	sp,sp,-8
200825c4:	dc000015 	stw	r16,0(sp)
200825c8:	2821883a 	mov	r16,r5
	if(pFileContext == NULL)
		return 0;

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
200825cc:	01400b84 	movi	r5,46
    }            
    szFilename[nPos++] = 0;
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
200825d0:	dfc00115 	stw	ra,4(sp)
	if(pFileContext == NULL)
		return 0;

	char * point;
	if ((point = strrchr(pFileContext->szName, '.')) != NULL) {
200825d4:	008ac680 	call	2008ac68 <strrchr>
200825d8:	10000826 	beq	r2,zero,200825fc <Fat_CheckExtension+0x40>
		if (strcmp(point, ext) == 0) {
200825dc:	1009883a 	mov	r4,r2
200825e0:	800b883a 	mov	r5,r16
200825e4:	008ab2c0 	call	2008ab2c <strcmp>
200825e8:	1005003a 	cmpeq	r2,r2,zero
			return 1;
		}
	}

	return 0;
}
200825ec:	dfc00117 	ldw	ra,4(sp)
200825f0:	dc000017 	ldw	r16,0(sp)
200825f4:	dec00204 	addi	sp,sp,8
200825f8:	f800283a 	ret
		if (strcmp(point, ext) == 0) {
			return 1;
		}
	}

	return 0;
200825fc:	0005883a 	mov	r2,zero
}
20082600:	dfc00117 	ldw	ra,4(sp)
20082604:	dc000017 	ldw	r16,0(sp)
20082608:	dec00204 	addi	sp,sp,8
2008260c:	f800283a 	ret
}


bool Fat_CheckExtension(FILE_CONTEXT *pFileContext, char* ext){
	if(pFileContext == NULL)
		return 0;
20082610:	0005883a 	mov	r2,zero
			return 1;
		}
	}

	return 0;
}
20082614:	f800283a 	ret

20082618 <Fat_GetFileName>:
char* Fat_GetFileName(FILE_CONTEXT *pFileContext){
	if(pFileContext == NULL)
		return 0;
	else
		return pFileContext->szName;
}
20082618:	2005883a 	mov	r2,r4
2008261c:	f800283a 	ret

20082620 <Fat_FileExist>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
20082620:	20001926 	beq	r4,zero,20082688 <Fat_FileExist+0x68>
        return FALSE;
    if (!pVol->bMount)
20082624:	20800517 	ldw	r2,20(r4)
20082628:	10001726 	beq	r2,zero,20082688 <Fat_FileExist+0x68>
		return 0;
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
2008262c:	deffb204 	addi	sp,sp,-312
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082630:	00bfffc4 	movi	r2,-1
		return 0;
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
20082634:	dc004c15 	stw	r16,304(sp)
20082638:	dfc04d15 	stw	ra,308(sp)
2008263c:	2821883a 	mov	r16,r5
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082640:	d8804a15 	stw	r2,296(sp)
    pFatBrowseHandle->hFat = hFat;
20082644:	d9004b15 	stw	r4,300(sp)
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082648:	d9004a04 	addi	r4,sp,296
2008264c:	d80b883a 	mov	r5,sp
20082650:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
20082654:	10001c26 	beq	r2,zero,200826c8 <Fat_FileExist+0xa8>
            if (FileContext.bLongFilename){
20082658:	d8804017 	ldw	r2,256(sp)
2008265c:	10000c1e 	bne	r2,zero,20082690 <Fat_FileExist+0x70>
                bFind = fatSameLongFilename((alt_u16 *)FileContext.szName, (alt_u16 *)pFilename);
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
20082660:	d809883a 	mov	r4,sp
20082664:	800b883a 	mov	r5,r16
20082668:	008ab2c0 	call	2008ab2c <strcmp>
2008266c:	1005003a 	cmpeq	r2,r2,zero
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082670:	103ff526 	beq	r2,zero,20082648 <__flash_rwdata_start+0xfffe77dc>
20082674:	00800044 	movi	r2,1
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
20082678:	dfc04d17 	ldw	ra,308(sp)
2008267c:	dc004c17 	ldw	r16,304(sp)
20082680:	dec04e04 	addi	sp,sp,312
20082684:	f800283a 	ret
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
20082688:	0005883a 	mov	r2,zero
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
2008268c:	f800283a 	ret
20082690:	8009883a 	mov	r4,r16
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
            if (FileContext.bLongFilename){
20082694:	d805883a 	mov	r2,sp
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
20082698:	10c0000b 	ldhu	r3,0(r2)
        if (*p1 != *p2){
            bSame = FALSE;
        }
        p1++;
2008269c:	10800084 	addi	r2,r2,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200826a0:	1800041e 	bne	r3,zero,200826b4 <Fat_FileExist+0x94>
200826a4:	2080000b 	ldhu	r2,0(r4)
200826a8:	1005003a 	cmpeq	r2,r2,zero
bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
200826ac:	103fe626 	beq	r2,zero,20082648 <__flash_rwdata_start+0xfffe77dc>
200826b0:	003ff006 	br	20082674 <__flash_rwdata_start+0xfffe7808>

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
        if (*p1 != *p2){
200826b4:	2180000b 	ldhu	r6,0(r4)
            bSame = FALSE;
        }
        p1++;
        p2++;
200826b8:	21000084 	addi	r4,r4,2
}

bool fatSameLongFilename(alt_u16 *p1, alt_u16 *p2){
    bool bSame = TRUE;
    
    while(bSame && ((*p1 != 0) || (*p2 != 0))){
200826bc:	31bfffcc 	andi	r6,r6,65535
200826c0:	30fff526 	beq	r6,r3,20082698 <__flash_rwdata_start+0xfffe782c>
200826c4:	003fe006 	br	20082648 <__flash_rwdata_start+0xfffe77dc>
	else
		return pFileContext->szName;
}

bool Fat_FileExist(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
200826c8:	0005883a 	mov	r2,zero
            }    
        } // while 
        Fat_FileClose(Fat); 
    }
    return bFind;            
}    
200826cc:	dfc04d17 	ldw	ra,308(sp)
200826d0:	dc004c17 	ldw	r16,304(sp)
200826d4:	dec04e04 	addi	sp,sp,312
200826d8:	f800283a 	ret

200826dc <Fat_FileOpen>:
    return Type;        
}

bool Fat_FileBrowseBegin(FAT_HANDLE hFat, FAT_BROWSE_HANDLE *pFatBrowseHandle){
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
200826dc:	20004926 	beq	r4,zero,20082804 <Fat_FileOpen+0x128>
        return FALSE;
    if (!pVol->bMount)
200826e0:	20800517 	ldw	r2,20(r4)
200826e4:	10004726 	beq	r2,zero,20082804 <Fat_FileOpen+0x128>
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
200826e8:	deff7004 	addi	sp,sp,-576
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
200826ec:	00bfffc4 	movi	r2,-1
    }
    return bFind;            
}    
 
// File Access
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
200826f0:	dc808e15 	stw	r18,568(sp)
200826f4:	dc408d15 	stw	r17,564(sp)
200826f8:	dc008c15 	stw	r16,560(sp)
200826fc:	dfc08f15 	stw	ra,572(sp)
20082700:	2821883a 	mov	r16,r5
20082704:	2023883a 	mov	r17,r4
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return FALSE;
    if (!pVol->bMount)
        return FALSE;
    pFatBrowseHandle->DirectoryIndex = -1;
20082708:	d8808a15 	stw	r2,552(sp)
    pFatBrowseHandle->hFat = hFat;
2008270c:	d9008b15 	stw	r4,556(sp)
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
20082710:	04bff7c4 	movi	r18,-33
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
20082714:	d9008a04 	addi	r4,sp,552
20082718:	d80b883a 	mov	r5,sp
2008271c:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
20082720:	10004026 	beq	r2,zero,20082824 <Fat_FileOpen+0x148>
            if (FileContext.bLongFilename){
20082724:	d8804017 	ldw	r2,256(sp)
20082728:	10003826 	beq	r2,zero,2008280c <Fat_FileOpen+0x130>
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
2008272c:	d880000b 	ldhu	r2,0(sp)
20082730:	10003e26 	beq	r2,zero,2008282c <Fat_FileOpen+0x150>
20082734:	d9000044 	addi	r4,sp,1
20082738:	d805883a 	mov	r2,sp
2008273c:	000d883a 	mov	r6,zero
                    if (*pData8 && *pData8 != ' ')
20082740:	11400003 	ldbu	r5,0(r2)
                        szWaveFilename[nPos++] = *pData8;
20082744:	d8c04a04 	addi	r3,sp,296
20082748:	198f883a 	add	r7,r3,r6
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
2008274c:	2c86703a 	and	r3,r5,r18
20082750:	18c03fcc 	andi	r3,r3,255
20082754:	10800084 	addi	r2,r2,2
20082758:	18000226 	beq	r3,zero,20082764 <Fat_FileOpen+0x88>
                        szWaveFilename[nPos++] = *pData8;
2008275c:	39400005 	stb	r5,0(r7)
20082760:	31800044 	addi	r6,r6,1
                    pData8++;
                    if (*pData8 && *pData8 != ' ')
20082764:	21400003 	ldbu	r5,0(r4)
                        szWaveFilename[nPos++] = *pData8;
20082768:	d8c04a04 	addi	r3,sp,296
2008276c:	198f883a 	add	r7,r3,r6
                pData8 = FileContext.szName;
                while(*pData16){
                    if (*pData8 && *pData8 != ' ')
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;
                    if (*pData8 && *pData8 != ' ')
20082770:	2c86703a 	and	r3,r5,r18
20082774:	18c03fcc 	andi	r3,r3,255
20082778:	21000084 	addi	r4,r4,2
2008277c:	18000226 	beq	r3,zero,20082788 <Fat_FileOpen+0xac>
                        szWaveFilename[nPos++] = *pData8;
20082780:	39400005 	stb	r5,0(r7)
20082784:	31800044 	addi	r6,r6,1
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
20082788:	10c0000b 	ldhu	r3,0(r2)
2008278c:	183fec1e 	bne	r3,zero,20082740 <__flash_rwdata_start+0xfffe78d4>
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
20082790:	d8804a04 	addi	r2,sp,296
20082794:	118d883a 	add	r6,r2,r6
                
                if(strcmp(pFilename,szWaveFilename) == 0)
20082798:	8009883a 	mov	r4,r16
2008279c:	100b883a 	mov	r5,r2
                        szWaveFilename[nPos++] = *pData8;
                    pData8++;                    
                    //    
                    pData16++;
                }
                szWaveFilename[nPos] = 0;
200827a0:	30000005 	stb	zero,0(r6)
                
                if(strcmp(pFilename,szWaveFilename) == 0)
200827a4:	008ab2c0 	call	2008ab2c <strcmp>
200827a8:	1005003a 	cmpeq	r2,r2,zero
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
200827ac:	103fd926 	beq	r2,zero,20082714 <__flash_rwdata_start+0xfffe78a8>
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
200827b0:	04000034 	movhi	r16,0
200827b4:	840abd04 	addi	r16,r16,10996
200827b8:	04800044 	movi	r18,1
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
200827bc:	d80b883a 	mov	r5,sp
200827c0:	81000504 	addi	r4,r16,20
200827c4:	01804a04 	movi	r6,296
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
200827c8:	84800115 	stw	r18,4(r16)
                pFile->SeekPos = 0;
200827cc:	80000215 	stw	zero,8(r16)
                pFile->Directory = FileContext;
200827d0:	008a6740 	call	2008a674 <memcpy>
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
200827d4:	d880488b 	ldhu	r2,290(sp)
        	pFile = &fInfo;
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
200827d8:	84800015 	stw	r18,0(r16)
                pFile->Cluster = FileContext.FirstLogicalCluster;
                pFile->ClusterSeq = 0;
200827dc:	80000415 	stw	zero,16(r16)
            if (pFile){
                pFile->OpenAttribute = FILE_OPEN_READ; 
                pFile->SeekPos = 0;
                pFile->Directory = FileContext;
                pFile->IsOpened = TRUE;
                pFile->Cluster = FileContext.FirstLogicalCluster;
200827e0:	80800315 	stw	r2,12(r16)
                pFile->ClusterSeq = 0;
                pFile->Fat = Fat;
200827e4:	84404f15 	stw	r17,316(r16)
            }    
        } // while 
        
        if (bFind){
            //pFile = malloc(sizeof(FAT_FILE_INFO));
        	pFile = &fInfo;
200827e8:	8005883a 	mov	r2,r16
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
}
200827ec:	dfc08f17 	ldw	ra,572(sp)
200827f0:	dc808e17 	ldw	r18,568(sp)
200827f4:	dc408d17 	ldw	r17,564(sp)
200827f8:	dc008c17 	ldw	r16,560(sp)
200827fc:	dec09004 	addi	sp,sp,576
20082800:	f800283a 	ret
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
20082804:	0005883a 	mov	r2,zero
        }    
    }  

    
    return (FAT_FILE_HANDLE)pFile;  
}
20082808:	f800283a 	ret
                szWaveFilename[nPos] = 0;
                
                if(strcmp(pFilename,szWaveFilename) == 0)
                    bFind = TRUE;
            }else{
                if (strcmp(FileContext.szName, pFilename) == 0)
2008280c:	d809883a 	mov	r4,sp
20082810:	800b883a 	mov	r5,r16
20082814:	008ab2c0 	call	2008ab2c <strcmp>
20082818:	1005003a 	cmpeq	r2,r2,zero
    FAT_FILE_INFO *pFile = 0;
    int nPos = 0;
    char szWaveFilename[MAX_FILENAME_LENGTH];
    
    if (Fat_FileBrowseBegin(Fat, &hBrowse)){
        while (!bFind && Fat_FileBrowseNext(&hBrowse, &FileContext)){
2008281c:	103fbd26 	beq	r2,zero,20082714 <__flash_rwdata_start+0xfffe78a8>
20082820:	003fe306 	br	200827b0 <__flash_rwdata_start+0xfffe7944>
FAT_FILE_HANDLE Fat_FileOpen(FAT_HANDLE Fat, const char *pFilename){
    bool bFind = FALSE;
    FAT_BROWSE_HANDLE hBrowse;     
    FILE_CONTEXT FileContext;
    static FAT_FILE_INFO fInfo;
    FAT_FILE_INFO *pFile = 0;
20082824:	0005883a 	mov	r2,zero
20082828:	003ff006 	br	200827ec <__flash_rwdata_start+0xfffe7980>
                nPos = 0;
                alt_u16 *pData16;
                alt_u8 *pData8;
                pData16 = (alt_u16 *)FileContext.szName;
                pData8 = FileContext.szName;
                while(*pData16){
2008282c:	000d883a 	mov	r6,zero
20082830:	003fd706 	br	20082790 <__flash_rwdata_start+0xfffe7924>

20082834 <Fat_FileSize>:
}


unsigned int Fat_FileSize(FAT_FILE_HANDLE hFileHandle){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    if (f->IsOpened)
20082834:	20800017 	ldw	r2,0(r4)
20082838:	10000226 	beq	r2,zero,20082844 <Fat_FileSize+0x10>
        return f->Directory.FileSize;
2008283c:	20804e17 	ldw	r2,312(r4)
20082840:	f800283a 	ret
    return 0;        
20082844:	0005883a 	mov	r2,zero
}
20082848:	f800283a 	ret

2008284c <Fat_FileRead>:
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
2008284c:	2000ad26 	beq	r4,zero,20082b04 <Fat_FileRead+0x2b8>
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
20082850:	defff404 	addi	sp,sp,-48
20082854:	dcc00515 	stw	r19,20(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
20082858:	24c04f17 	ldw	r19,316(r4)
        return f->Directory.FileSize;
    return 0;        
}


bool Fat_FileRead(FAT_FILE_HANDLE hFileHandle, void *pBuffer, const int nBufferSize){
2008285c:	dfc00b15 	stw	ra,44(sp)
20082860:	df000a15 	stw	fp,40(sp)
20082864:	ddc00915 	stw	r23,36(sp)
20082868:	dd800815 	stw	r22,32(sp)
2008286c:	dd400715 	stw	r21,28(sp)
20082870:	dd000615 	stw	r20,24(sp)
20082874:	dc800415 	stw	r18,16(sp)
20082878:	dc400315 	stw	r17,12(sp)
2008287c:	dc000215 	stw	r16,8(sp)
    alt_u32 Pos, PhysicalSecter, NextCluster, Cluster;
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
20082880:	98005226 	beq	r19,zero,200829cc <Fat_FileRead+0x180>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
20082884:	20800017 	ldw	r2,0(r4)
20082888:	10005d26 	beq	r2,zero,20082a00 <Fat_FileRead+0x1b4>
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
2008288c:	9c000d17 	ldw	r16,52(r19)
20082890:	d9800115 	stw	r6,4(sp)
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
20082894:	00800074 	movhi	r2,1
20082898:	282b883a 	mov	r21,r5
2008289c:	2023883a 	mov	r17,r4
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
200828a0:	24800217 	ldw	r18,8(r4)
    if (BytesPerCluster == 65536){
200828a4:	80809226 	beq	r16,r2,20082af0 <Fat_FileRead+0x2a4>
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
200828a8:	00a00014 	movui	r2,32768
200828ac:	80809726 	beq	r16,r2,20082b0c <Fat_FileRead+0x2c0>
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
200828b0:	00900004 	movi	r2,16384
200828b4:	80806726 	beq	r16,r2,20082a54 <Fat_FileRead+0x208>
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
200828b8:	00820004 	movi	r2,2048
200828bc:	80809826 	beq	r16,r2,20082b20 <Fat_FileRead+0x2d4>
        nClusterSeq = Pos >> 11;
        Pos -= (f->ClusterSeq << 11);
    }else{        
        nClusterSeq = Pos/BytesPerCluster;
200828c0:	9009883a 	mov	r4,r18
200828c4:	800b883a 	mov	r5,r16
200828c8:	0086c280 	call	20086c28 <__udivsi3>
        Pos -= f->ClusterSeq*BytesPerCluster;
200828cc:	88c00417 	ldw	r3,16(r17)
200828d0:	1c09383a 	mul	r4,r3,r16
200828d4:	9125c83a 	sub	r18,r18,r4
    }    
        
       
    Cluster = f->Cluster;
200828d8:	8d000317 	ldw	r20,12(r17)
    if (nClusterSeq != f->ClusterSeq){
200828dc:	10c00c26 	beq	r2,r3,20082910 <Fat_FileRead+0xc4>
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
200828e0:	94000b36 	bltu	r18,r16,20082910 <Fat_FileRead+0xc4>
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
200828e4:	a00b883a 	mov	r5,r20
200828e8:	9809883a 	mov	r4,r19
200828ec:	0082e880 	call	20082e88 <fatNextCluster>
            if (NextCluster == 0){
200828f0:	10005d26 	beq	r2,zero,20082a68 <Fat_FileRead+0x21c>
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
            f->Cluster = Cluster;
            f->ClusterSeq++; 
200828f4:	88c00417 	ldw	r3,16(r17)
                bSuccess = FALSE;
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
200828f8:	9425c83a 	sub	r18,r18,r16
            f->Cluster = Cluster;
200828fc:	88800315 	stw	r2,12(r17)
            f->ClusterSeq++; 
20082900:	18c00044 	addi	r3,r3,1
20082904:	88c00415 	stw	r3,16(r17)
20082908:	1029883a 	mov	r20,r2
       
    Cluster = f->Cluster;
    if (nClusterSeq != f->ClusterSeq){
        Cluster = f->Cluster;  //11/20/2007, richard
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
2008290c:	943ff52e 	bgeu	r18,r16,200828e4 <__flash_rwdata_start+0xfffe7a78>
20082910:	00c00044 	movi	r3,1
20082914:	d8c00015 	stw	r3,0(sp)
    alt_u32 SectorOffset, ByteOffset, SectorsToRead;
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
20082918:	902ed27a 	srli	r23,r18,9
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
2008291c:	98800717 	ldw	r2,28(r19)

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082920:	9c000817 	ldw	r16,32(r19)
20082924:	9f001017 	ldw	fp,64(r19)
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
20082928:	b885383a 	mul	r2,r23,r2

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
2008292c:	a13fff84 	addi	r4,r20,-2
20082930:	2409383a 	mul	r4,r4,r16
20082934:	bf39883a 	add	fp,r23,fp
    int nCopyCount, nCopySectors;

//    SectorOffset = Pos/pVol->BPB_BytsPerSec;
//    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;
20082938:	90a5c83a 	sub	r18,r18,r2

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    PhysicalSecter += SectorOffset;
2008293c:	e139883a 	add	fp,fp,r4
    nReadCount = 0;

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
20082940:	9000501e 	bne	r18,zero,20082a84 <Fat_FileRead+0x238>
20082944:	d8c00117 	ldw	r3,4(sp)
20082948:	00807fc4 	movi	r2,511
2008294c:	10c04d0e 	bge	r2,r3,20082a84 <Fat_FileRead+0x238>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082950:	1824d27a 	srli	r18,r3,9
    SectorOffset = Pos >> 9;
    ByteOffset = Pos - SectorOffset*pVol->BPB_BytsPerSec;

    PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
    PhysicalSecter += SectorOffset;
    nReadCount = 0;
20082954:	002d883a 	mov	r22,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20082958:	90008926 	beq	r18,zero,20082b80 <Fat_FileRead+0x334>
2008295c:	8005883a 	mov	r2,r16
    	if(SectorsToRead < (pVol->BPB_SecPerCluster - SectorOffset)){
20082960:	15e1c83a 	sub	r16,r2,r23
20082964:	9400012e 	bgeu	r18,r16,2008296c <Fat_FileRead+0x120>
    		nCopySectors = SectorsToRead;
20082968:	9021883a 	mov	r16,r18
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
2008296c:	9809883a 	mov	r4,r19
20082970:	e00b883a 	mov	r5,fp
20082974:	ad8f883a 	add	r7,r21,r22
20082978:	800d883a 	mov	r6,r16
2008297c:	00835800 	call	20083580 <fatReadMultiSecter>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
20082980:	8008927a 	slli	r4,r16,9
    		nCopySectors = SectorsToRead;
    	} else {
    		nCopySectors = pVol->BPB_SecPerCluster - SectorOffset;
    	}

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
20082984:	10001126 	beq	r2,zero,200829cc <Fat_FileRead+0x180>
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20082988:	98800817 	ldw	r2,32(r19)
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
2008298c:	b12d883a 	add	r22,r22,r4

        if(!fatReadMultiSecter(pVol, PhysicalSecter, nCopySectors, pBuffer+nReadCount)){
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sectors: %d - %d\r\n", PhysicalSecter, nCopySectors));
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
20082990:	9425c83a 	sub	r18,r18,r16
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20082994:	15c9c83a 	sub	r4,r2,r23
			return FALSE;
        }
        SectorsToRead -= nCopySectors;
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;
20082998:	e439883a 	add	fp,fp,r16

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
2008299c:	81001a26 	beq	r16,r4,20082a08 <Fat_FileRead+0x1bc>
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
200829a0:	903fef1e 	bne	r18,zero,20082960 <__flash_rwdata_start+0xfffe7af4>
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
200829a4:	d8c00117 	ldw	r3,4(sp)
200829a8:	b0c07536 	bltu	r22,r3,20082b80 <Fat_FileRead+0x334>
            f->Cluster = Cluster;
        }                    
    }
#endif
    
    if (bSuccess){
200829ac:	d8c00017 	ldw	r3,0(sp)
200829b0:	18000626 	beq	r3,zero,200829cc <Fat_FileRead+0x180>
        f->SeekPos += nBufferSize;
200829b4:	88c00217 	ldw	r3,8(r17)
200829b8:	d9000117 	ldw	r4,4(sp)
200829bc:	00800044 	movi	r2,1
200829c0:	192d883a 	add	r22,r3,r4
200829c4:	8d800215 	stw	r22,8(r17)
200829c8:	00000106 	br	200829d0 <Fat_FileRead+0x184>
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
        return FALSE;
200829cc:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
200829d0:	dfc00b17 	ldw	ra,44(sp)
200829d4:	df000a17 	ldw	fp,40(sp)
200829d8:	ddc00917 	ldw	r23,36(sp)
200829dc:	dd800817 	ldw	r22,32(sp)
200829e0:	dd400717 	ldw	r21,28(sp)
200829e4:	dd000617 	ldw	r20,24(sp)
200829e8:	dcc00517 	ldw	r19,20(sp)
200829ec:	dc800417 	ldw	r18,16(sp)
200829f0:	dc400317 	ldw	r17,12(sp)
200829f4:	dc000217 	ldw	r16,8(sp)
200829f8:	dec00c04 	addi	sp,sp,48
200829fc:	f800283a 	ret
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened){
        FAT_DEBUG(("[FAT] Fat_FileRead, file not opened\r\n"));
        return bSuccess;
20082a00:	00800044 	movi	r2,1
20082a04:	003ff206 	br	200829d0 <__flash_rwdata_start+0xfffe7b64>
        //nReadCount += nCopySectors*pVol->BPB_BytsPerSec;
        nReadCount += nCopySectors << 9;
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
20082a08:	d8c00117 	ldw	r3,4(sp)
20082a0c:	b0ffe42e 	bgeu	r22,r3,200829a0 <__flash_rwdata_start+0xfffe7b34>
			NextCluster = fatNextCluster(pVol, Cluster);
20082a10:	a00b883a 	mov	r5,r20
20082a14:	9809883a 	mov	r4,r19
20082a18:	0082e880 	call	20082e88 <fatNextCluster>
20082a1c:	1029883a 	mov	r20,r2
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082a20:	10ffff84 	addi	r3,r2,-2
        PhysicalSecter += nCopySectors;

        // find next sector if all the sectors in current clusters are read and there is still data to read
        if(nCopySectors == (pVol->BPB_SecPerCluster - SectorOffset) && nReadCount < nBufferSize){
			NextCluster = fatNextCluster(pVol, Cluster);
			if (NextCluster == 0){
20082a24:	103fe926 	beq	r2,zero,200829cc <__flash_rwdata_start+0xfffe7b60>
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082a28:	98800817 	ldw	r2,32(r19)
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
20082a2c:	89000417 	ldw	r4,16(r17)
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082a30:	9f001017 	ldw	fp,64(r19)
20082a34:	1887383a 	mul	r3,r3,r2
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}else{
				Cluster = NextCluster;
			}
			f->ClusterSeq++;
20082a38:	21000044 	addi	r4,r4,1
20082a3c:	89000415 	stw	r4,16(r17)
			f->Cluster = Cluster;
20082a40:	8d000315 	stw	r20,12(r17)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082a44:	1f39883a 	add	fp,r3,fp
			SectorOffset = 0;
20082a48:	002f883a 	mov	r23,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20082a4c:	903fc41e 	bne	r18,zero,20082960 <__flash_rwdata_start+0xfffe7af4>
20082a50:	003fd406 	br	200829a4 <__flash_rwdata_start+0xfffe7b38>
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
20082a54:	20c00417 	ldw	r3,16(r4)
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
20082a58:	9004d3ba 	srli	r2,r18,14
        Pos -= (f->ClusterSeq << 14);
20082a5c:	180893ba 	slli	r4,r3,14
20082a60:	9125c83a 	sub	r18,r18,r4
20082a64:	003f9c06 	br	200828d8 <__flash_rwdata_start+0xfffe7a6c>
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
            f->Cluster = Cluster;
            f->ClusterSeq++; 
20082a68:	88800417 	ldw	r2,16(r17)
                bSuccess = FALSE;
                FAT_DEBUG(("[FAT] Fat_FileRead, no next Cluster, current Cluster=%d\r\n", Cluster));
            }else{
                Cluster = NextCluster;
            }        
            Pos -= BytesPerCluster;
20082a6c:	9425c83a 	sub	r18,r18,r16
            f->Cluster = Cluster;
20082a70:	8d000315 	stw	r20,12(r17)
            f->ClusterSeq++; 
20082a74:	10800044 	addi	r2,r2,1
20082a78:	88800415 	stw	r2,16(r17)
        // move to first clustor for reading
        while (Pos >= BytesPerCluster && bSuccess){
            // go to next cluster
            NextCluster = fatNextCluster(pVol, Cluster); 
            if (NextCluster == 0){
                bSuccess = FALSE;
20082a7c:	d8000015 	stw	zero,0(sp)
20082a80:	003fa506 	br	20082918 <__flash_rwdata_start+0xfffe7aac>
    PhysicalSecter += SectorOffset;
    nReadCount = 0;

    // case: partial read of the first sector
    if((ByteOffset > 0) || (nBufferSize < 512)){
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20082a84:	9809883a 	mov	r4,r19
20082a88:	e00b883a 	mov	r5,fp
20082a8c:	00835180 	call	20083518 <fatReadSecter>
20082a90:	103fce26 	beq	r2,zero,200829cc <__flash_rwdata_start+0xfffe7b60>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector %d\r\n", PhysicalSecter));
			return FALSE;
        }

    	nCopyCount = nBufferSize > (512 - ByteOffset)? 512 - ByteOffset : nBufferSize;
20082a94:	d8c00117 	ldw	r3,4(sp)
20082a98:	02008004 	movi	r8,512
20082a9c:	44adc83a 	sub	r22,r8,r18
20082aa0:	1d80012e 	bgeu	r3,r22,20082aa8 <Fat_FileRead+0x25c>
20082aa4:	182d883a 	mov	r22,r3
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
20082aa8:	91401104 	addi	r5,r18,68
20082aac:	a809883a 	mov	r4,r21
20082ab0:	994b883a 	add	r5,r19,r5
20082ab4:	b00d883a 	mov	r6,r22
20082ab8:	008a6740 	call	2008a674 <memcpy>
    	nReadCount = nCopyCount;

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
20082abc:	d8c00117 	ldw	r3,4(sp)
20082ac0:	b0c0032e 	bgeu	r22,r3,20082ad0 <Fat_FileRead+0x284>
20082ac4:	9c000817 	ldw	r16,32(r19)
20082ac8:	80bfffc4 	addi	r2,r16,-1
20082acc:	15c01926 	beq	r2,r23,20082b34 <Fat_FileRead+0x2e8>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082ad0:	d8c00117 	ldw	r3,4(sp)
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
			SectorOffset = 0;
    	} else {
    		SectorOffset++;
20082ad4:	bdc00044 	addi	r23,r23,1
    		PhysicalSecter++;
20082ad8:	e7000044 	addi	fp,fp,1
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082adc:	1da5c83a 	sub	r18,r3,r22
20082ae0:	9024d27a 	srli	r18,r18,9

    while(SectorsToRead > 0){
20082ae4:	903faf26 	beq	r18,zero,200829a4 <__flash_rwdata_start+0xfffe7b38>
20082ae8:	9c000817 	ldw	r16,32(r19)
20082aec:	003f9b06 	br	2008295c <__flash_rwdata_start+0xfffe7af0>
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
20082af0:	20c00417 	ldw	r3,16(r4)
    }        
        
    BytesPerCluster = pVol->nBytesPerCluster; //gVolumeInfo.BPB_BytsPerSec * gVolumeInfo.BPB_SecPerCluster;  
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
20082af4:	9004d43a 	srli	r2,r18,16
    	Pos -= (f->ClusterSeq << 16);
20082af8:	1808943a 	slli	r4,r3,16
20082afc:	9125c83a 	sub	r18,r18,r4
20082b00:	003f7506 	br	200828d8 <__flash_rwdata_start+0xfffe7a6c>
    alt_u32 BytesPerCluster, nReadCount=0, nClusterSeq;
    int s;
    bool bSuccess= TRUE;
    
    if (!f || !f->Fat)
        return FALSE;
20082b04:	0005883a 	mov	r2,zero
        f->SeekPos += nBufferSize;
    }        
        
    
    return bSuccess;
}
20082b08:	f800283a 	ret
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
        Pos -= (f->ClusterSeq << 15);
20082b0c:	20c00417 	ldw	r3,16(r4)
    Pos = f->SeekPos;
    if (BytesPerCluster == 65536){
    	nClusterSeq = Pos >> 16;
    	Pos -= (f->ClusterSeq << 16);
    }else if (BytesPerCluster == 32768){
        nClusterSeq = Pos >> 15;
20082b10:	9004d3fa 	srli	r2,r18,15
        Pos -= (f->ClusterSeq << 15);
20082b14:	180893fa 	slli	r4,r3,15
20082b18:	9125c83a 	sub	r18,r18,r4
20082b1c:	003f6e06 	br	200828d8 <__flash_rwdata_start+0xfffe7a6c>
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
        nClusterSeq = Pos >> 11;
        Pos -= (f->ClusterSeq << 11);
20082b20:	20c00417 	ldw	r3,16(r4)
        Pos -= (f->ClusterSeq << 15);
    }else if (BytesPerCluster == 16384){
        nClusterSeq = Pos >> 14;
        Pos -= (f->ClusterSeq << 14);
    }else if (BytesPerCluster == 2048){
        nClusterSeq = Pos >> 11;
20082b24:	9004d2fa 	srli	r2,r18,11
        Pos -= (f->ClusterSeq << 11);
20082b28:	180892fa 	slli	r4,r3,11
20082b2c:	9125c83a 	sub	r18,r18,r4
20082b30:	003f6906 	br	200828d8 <__flash_rwdata_start+0xfffe7a6c>
    	memcpy(pBuffer, pVol->Secter_Data+ByteOffset, nCopyCount);
    	nReadCount = nCopyCount;

		if(nReadCount < nBufferSize && SectorOffset == pVol->BPB_SecPerCluster - 1){
			// case: last sector of the cluster
			NextCluster = fatNextCluster(pVol, Cluster);
20082b34:	a00b883a 	mov	r5,r20
20082b38:	9809883a 	mov	r4,r19
20082b3c:	0082e880 	call	20082e88 <fatNextCluster>
20082b40:	1029883a 	mov	r20,r2
			if (NextCluster == 0){
20082b44:	103fa126 	beq	r2,zero,200829cc <__flash_rwdata_start+0xfffe7b60>
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082b48:	d9000117 	ldw	r4,4(sp)
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082b4c:	9c000817 	ldw	r16,32(r19)
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
20082b50:	88c00417 	ldw	r3,16(r17)
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082b54:	10bfff84 	addi	r2,r2,-2
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082b58:	25a5c83a 	sub	r18,r4,r22
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
			f->Cluster = Cluster;
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082b5c:	9f001017 	ldw	fp,64(r19)
20082b60:	1405383a 	mul	r2,r2,r16
    		PhysicalSecter++;
    	}
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;
20082b64:	9024d27a 	srli	r18,r18,9
				FAT_DEBUG(("[FAT] Fat_FileRead, no next cluster\r\n"));
				return FALSE;
			}

			Cluster = NextCluster;
			f->ClusterSeq++;
20082b68:	18c00044 	addi	r3,r3,1
20082b6c:	88c00415 	stw	r3,16(r17)
			f->Cluster = Cluster;
20082b70:	8d000315 	stw	r20,12(r17)
			PhysicalSecter = (Cluster-2)*pVol->BPB_SecPerCluster + pVol->DataEntrySecter; // -2: FAT0 & FAT1 are reserved
20082b74:	1739883a 	add	fp,r2,fp
			SectorOffset = 0;
20082b78:	002f883a 	mov	r23,zero
    }

    //SectorsToRead = (nBufferSize - nReadCount)/pVol->BPB_BytsPerSec;
    SectorsToRead = (nBufferSize - nReadCount) >> 9;

    while(SectorsToRead > 0){
20082b7c:	903f771e 	bne	r18,zero,2008295c <__flash_rwdata_start+0xfffe7af0>
			SectorOffset = 0;
        }
    }

    if(nReadCount < nBufferSize){
    	if(!fatReadSecter(pVol, PhysicalSecter)){
20082b80:	9809883a 	mov	r4,r19
20082b84:	e00b883a 	mov	r5,fp
20082b88:	00835180 	call	20083518 <fatReadSecter>
20082b8c:	103f8f26 	beq	r2,zero,200829cc <__flash_rwdata_start+0xfffe7b60>
			FAT_DEBUG(("[FAT] Fat_FileRead, couldn't read sector\r\n"));
			return FALSE;
        }

    	nCopyCount = nBufferSize - nReadCount;
    	memcpy(pBuffer+nReadCount, pVol->Secter_Data, nCopyCount);
20082b90:	d8c00117 	ldw	r3,4(sp)
20082b94:	ad89883a 	add	r4,r21,r22
20082b98:	99401104 	addi	r5,r19,68
20082b9c:	1d8dc83a 	sub	r6,r3,r22
20082ba0:	008a6740 	call	2008a674 <memcpy>
20082ba4:	003f8106 	br	200829ac <__flash_rwdata_start+0xfffe7b40>

20082ba8 <Fat_FileSeek>:
bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
20082ba8:	20001026 	beq	r4,zero,20082bec <Fat_FileSeek+0x44>
20082bac:	20804f17 	ldw	r2,316(r4)
20082bb0:	10000e26 	beq	r2,zero,20082bec <Fat_FileSeek+0x44>
        return FALSE;
    pVol = (VOLUME_INFO *)f->Fat;        
    
    if (!f->IsOpened)
20082bb4:	20800017 	ldw	r2,0(r4)
20082bb8:	10000d26 	beq	r2,zero,20082bf0 <Fat_FileSeek+0x48>
        return FALSE;
        
    switch(SeekPos){
20082bbc:	00800044 	movi	r2,1
20082bc0:	28800c26 	beq	r5,r2,20082bf4 <Fat_FileSeek+0x4c>
20082bc4:	28000e26 	beq	r5,zero,20082c00 <Fat_FileSeek+0x58>
20082bc8:	00c00084 	movi	r3,2
20082bcc:	28c0111e 	bne	r5,r3,20082c14 <Fat_FileSeek+0x6c>
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20082bd0:	20c04e17 	ldw	r3,312(r4)
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
20082bd4:	20000415 	stw	zero,16(r4)
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20082bd8:	30cd883a 	add	r6,r6,r3
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082bdc:	20c04d8b 	ldhu	r3,310(r4)
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
20082be0:	21800215 	stw	r6,8(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082be4:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
20082be8:	f800283a 	ret
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;

    if (!f || !f->Fat)
        return FALSE;
20082bec:	0005883a 	mov	r2,zero
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
    
    return bSuccess;
    
}
20082bf0:	f800283a 	ret
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
20082bf4:	20c00217 	ldw	r3,8(r4)


bool Fat_FileSeek(FAT_FILE_HANDLE hFileHandle, const FAT_SEEK_POS SeekPos, const int nOffset){
    FAT_FILE_INFO *f = (FAT_FILE_INFO *)hFileHandle;
    VOLUME_INFO *pVol;
    bool bSuccess= TRUE;
20082bf8:	2805883a 	mov	r2,r5
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
20082bfc:	198d883a 	add	r6,r3,r6
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082c00:	20c04d8b 	ldhu	r3,310(r4)
    switch(SeekPos){
        case FILE_SEEK_BEGIN: 
            f->SeekPos = nOffset; 
            break;
        case FILE_SEEK_CURRENT: 
            f->SeekPos += nOffset; 
20082c04:	21800215 	stw	r6,8(r4)
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
20082c08:	20000415 	stw	zero,16(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082c0c:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
20082c10:	f800283a 	ret
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082c14:	20c04d8b 	ldhu	r3,310(r4)
            break;
        case FILE_SEEK_END: 
            f->SeekPos = f->Directory.FileSize+nOffset; 
            break;
        default:
            bSuccess = FALSE;
20082c18:	0005883a 	mov	r2,zero
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
    f->ClusterSeq = 0;
20082c1c:	20000415 	stw	zero,16(r4)
        default:
            bSuccess = FALSE;
            break;    
              
    }
    f->Cluster = f->Directory.FirstLogicalCluster;
20082c20:	20c00315 	stw	r3,12(r4)
    f->ClusterSeq = 0;
    
    return bSuccess;
20082c24:	f800283a 	ret

20082c28 <Fat_FileClose>:
    
}

void Fat_FileClose(FAT_FILE_HANDLE hFileHandle){
20082c28:	f800283a 	ret

20082c2c <Fat_SpeedTest>:
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    float fMegaBytePerSec = 0;
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
20082c2c:	20005726 	beq	r4,zero,20082d8c <Fat_SpeedTest+0x160>
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20082c30:	deff7904 	addi	sp,sp,-540
20082c34:	dd008415 	stw	r20,528(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20082c38:	05000034 	movhi	r20,0
20082c3c:	a50ab904 	addi	r20,r20,10980
20082c40:	dc008015 	stw	r16,512(sp)
20082c44:	a4000017 	ldw	r16,0(r20)
20082c48:	dc408115 	stw	r17,516(sp)
20082c4c:	2023883a 	mov	r17,r4
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082c50:	2900fa24 	muli	r4,r5,1000
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20082c54:	dc808215 	stw	r18,520(sp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
20082c58:	04800034 	movhi	r18,0
20082c5c:	948ab804 	addi	r18,r18,10976
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082c60:	800b883a 	mov	r5,r16
    //free(f);
}



float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
20082c64:	dd408515 	stw	r21,532(sp)
20082c68:	dcc08315 	stw	r19,524(sp)
20082c6c:	95400017 	ldw	r21,0(r18)
20082c70:	dfc08615 	stw	ra,536(sp)
20082c74:	94c00017 	ldw	r19,0(r18)
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
20082c78:	0086c280 	call	20086c28 <__udivsi3>
20082c7c:	90c00017 	ldw	r3,0(r18)
20082c80:	14e7883a 	add	r19,r2,r19
    while(alt_nticks() < time_finish && bSuccess){
20082c84:	1cc0432e 	bgeu	r3,r19,20082d94 <Fat_SpeedTest+0x168>
20082c88:	0021883a 	mov	r16,zero
20082c8c:	00000106 	br	20082c94 <Fat_SpeedTest+0x68>
20082c90:	10003a26 	beq	r2,zero,20082d7c <Fat_SpeedTest+0x150>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
20082c94:	88c00117 	ldw	r3,4(r17)
20082c98:	89000017 	ldw	r4,0(r17)
20082c9c:	800b883a 	mov	r5,r16
20082ca0:	d80d883a 	mov	r6,sp
20082ca4:	183ee83a 	callr	r3
20082ca8:	90c00017 	ldw	r3,0(r18)
        nSecter++;
20082cac:	84000044 	addi	r16,r16,1
20082cb0:	8008927a 	slli	r4,r16,9
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
20082cb4:	1cfff636 	bltu	r3,r19,20082c90 <__flash_rwdata_start+0xfffe7e24>
        bSuccess = pVol->ReadBlock512(pVol->DiskHandle, nSecter, szBlock);
        nSecter++;
        TotalReadBytes += sizeof(szBlock);
        
    }        
    if (bSuccess){
20082cb8:	10003026 	beq	r2,zero,20082d7c <Fat_SpeedTest+0x150>
20082cbc:	00874ac0 	call	200874ac <__floatunsisf>
20082cc0:	a4000017 	ldw	r16,0(r20)
20082cc4:	1027883a 	mov	r19,r2
        time_elapsed = alt_nticks() - time_start;
        fMegaBytePerSec = (float)TotalReadBytes * (float)alt_ticks_per_second() / (float)time_elapsed / 1024.0 / 1024.0;
20082cc8:	8009883a 	mov	r4,r16
20082ccc:	00874ac0 	call	200874ac <__floatunsisf>
20082cd0:	94400017 	ldw	r17,0(r18)
20082cd4:	980b883a 	mov	r5,r19
20082cd8:	1009883a 	mov	r4,r2
20082cdc:	00870880 	call	20087088 <__mulsf3>
20082ce0:	8d49c83a 	sub	r4,r17,r21
20082ce4:	1021883a 	mov	r16,r2
20082ce8:	00874ac0 	call	200874ac <__floatunsisf>
20082cec:	8009883a 	mov	r4,r16
20082cf0:	100b883a 	mov	r5,r2
20082cf4:	0086c380 	call	20086c38 <__divsf3>
20082cf8:	1009883a 	mov	r4,r2
20082cfc:	00899140 	call	20089914 <__extendsfdf2>
20082d00:	1009883a 	mov	r4,r2
20082d04:	180b883a 	mov	r5,r3
20082d08:	000d883a 	mov	r6,zero
20082d0c:	01cfd434 	movhi	r7,16208
20082d10:	00887240 	call	20088724 <__muldf3>
20082d14:	000d883a 	mov	r6,zero
20082d18:	01cfd434 	movhi	r7,16208
20082d1c:	1009883a 	mov	r4,r2
20082d20:	180b883a 	mov	r5,r3
20082d24:	00887240 	call	20088724 <__muldf3>
20082d28:	180b883a 	mov	r5,r3
20082d2c:	1009883a 	mov	r4,r2
20082d30:	0089a240 	call	20089a24 <__truncdfsf2>
20082d34:	1009883a 	mov	r4,r2
20082d38:	1021883a 	mov	r16,r2
20082d3c:	00899140 	call	20089914 <__extendsfdf2>
20082d40:	100b883a 	mov	r5,r2
20082d44:	180d883a 	mov	r6,r3
    } 
    
    printf("\n--------speed:%f---------\n",fMegaBytePerSec);       
20082d48:	01000034 	movhi	r4,0
20082d4c:	21009604 	addi	r4,r4,600
20082d50:	008a8fc0 	call	2008a8fc <printf>
    return fMegaBytePerSec;
20082d54:	8005883a 	mov	r2,r16
    
   
}
20082d58:	dfc08617 	ldw	ra,536(sp)
20082d5c:	dd408517 	ldw	r21,532(sp)
20082d60:	dd008417 	ldw	r20,528(sp)
20082d64:	dcc08317 	ldw	r19,524(sp)
20082d68:	dc808217 	ldw	r18,520(sp)
20082d6c:	dc408117 	ldw	r17,516(sp)
20082d70:	dc008017 	ldw	r16,512(sp)
20082d74:	dec08704 	addi	sp,sp,540
20082d78:	f800283a 	ret
20082d7c:	000b883a 	mov	r5,zero
20082d80:	000d883a 	mov	r6,zero

float Fat_SpeedTest(FAT_HANDLE hFat, alt_u32 TestDurInMs){
    bool bSuccess = TRUE;
    alt_u32 time_start, time_finish, time_elapsed, TotalReadBytes=0;
    int nSecter = 0;
    float fMegaBytePerSec = 0;
20082d84:	0021883a 	mov	r16,zero
20082d88:	003fef06 	br	20082d48 <__flash_rwdata_start+0xfffe7edc>
    char szBlock[512];
    VOLUME_INFO *pVol = (VOLUME_INFO *)hFat;
    if (!pVol)
        return 0;
20082d8c:	0005883a 	mov	r2,zero
20082d90:	f800283a 	ret
    time_start = alt_nticks();
    time_finish = alt_nticks() + TestDurInMs * 1000 / alt_ticks_per_second();
    while(alt_nticks() < time_finish && bSuccess){
20082d94:	0027883a 	mov	r19,zero
20082d98:	003fcb06 	br	20082cc8 <__flash_rwdata_start+0xfffe7e5c>

20082d9c <SD_ReadBlock512>:

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20082d9c:	2809883a 	mov	r4,r5
20082da0:	300b883a 	mov	r5,r6
20082da4:	00854f41 	jmpi	200854f4 <SDLIB_ReadBlock512>

20082da8 <SD_ReadBlocks>:
}

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
20082da8:	2809883a 	mov	r4,r5
20082dac:	300b883a 	mov	r5,r6
20082db0:	380d883a 	mov	r6,r7
20082db4:	00855241 	jmpi	20085524 <SDLIB_ReadBlocks>

20082db8 <fat16ClusterType>:

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
20082db8:	213fffcc 	andi	r4,r4,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
20082dbc:	20ffffc4 	addi	r3,r4,-1
20082dc0:	017ffb94 	movui	r5,65518
20082dc4:	28c00236 	bltu	r5,r3,20082dd0 <fat16ClusterType+0x18>
        Type = CLUSTER_NEXT_INFILE;
20082dc8:	00800104 	movi	r2,4
20082dcc:	f800283a 	ret
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082dd0:	00fffdd4 	movui	r3,65527
20082dd4:	1900022e 	bgeu	r3,r4,20082de0 <fat16ClusterType+0x28>
        Type = CLUSTER_LAST_INFILE;
20082dd8:	008000c4 	movi	r2,3
20082ddc:	f800283a 	ret
    else if (Fat == (alt_u16)0x00)
20082de0:	20000926 	beq	r4,zero,20082e08 <fat16ClusterType+0x50>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20082de4:	017ffff4 	movhi	r5,65535
20082de8:	29400404 	addi	r5,r5,16
20082dec:	214b883a 	add	r5,r4,r5
20082df0:	01800184 	movi	r6,6
20082df4:	3140022e 	bgeu	r6,r5,20082e00 <fat16ClusterType+0x48>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFF7)
20082df8:	20c00526 	beq	r4,r3,20082e10 <fat16ClusterType+0x58>
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
20082dfc:	f800283a 	ret
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
        Type = CLUSTER_RESERVED;
20082e00:	00800044 	movi	r2,1
20082e04:	003ffd06 	br	20082dfc <__flash_rwdata_start+0xfffe7f90>
    if (Fat > 0 && Fat < 0xFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
20082e08:	0005883a 	mov	r2,zero
20082e0c:	f800283a 	ret
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFF7)
        Type = CLUSTER_BAD;
20082e10:	00800084 	movi	r2,2
20082e14:	f800283a 	ret

20082e18 <fat32ClusterType>:
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082e18:	00c40034 	movhi	r3,4096
20082e1c:	18ffffc4 	addi	r3,r3,-1
20082e20:	20c8703a 	and	r4,r4,r3
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082e24:	01440034 	movhi	r5,4096
20082e28:	20ffffc4 	addi	r3,r4,-1
20082e2c:	297ffb84 	addi	r5,r5,-18
20082e30:	28c00236 	bltu	r5,r3,20082e3c <fat32ClusterType+0x24>
        Type = CLUSTER_NEXT_INFILE;
20082e34:	00800104 	movi	r2,4
20082e38:	f800283a 	ret
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20082e3c:	00c40034 	movhi	r3,4096
20082e40:	18fffdc4 	addi	r3,r3,-9
20082e44:	1900022e 	bgeu	r3,r4,20082e50 <fat32ClusterType+0x38>
        Type = CLUSTER_LAST_INFILE;
20082e48:	008000c4 	movi	r2,3
20082e4c:	f800283a 	ret
    else if (Fat == (alt_u32)0x00)
20082e50:	20000926 	beq	r4,zero,20082e78 <fat32ClusterType+0x60>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20082e54:	017c0034 	movhi	r5,61440
20082e58:	29400404 	addi	r5,r5,16
20082e5c:	214b883a 	add	r5,r4,r5
20082e60:	01800184 	movi	r6,6
20082e64:	3140022e 	bgeu	r6,r5,20082e70 <fat32ClusterType+0x58>
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFFFFF7)
20082e68:	20c00526 	beq	r4,r3,20082e80 <fat32ClusterType+0x68>
        Type = CLUSTER_BAD;
        
    return Type;        
         
}
20082e6c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
        Type = CLUSTER_RESERVED;
20082e70:	00800044 	movi	r2,1
20082e74:	003ffd06 	br	20082e6c <__flash_rwdata_start+0xfffe8000>
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
        Type = CLUSTER_UNUSED;
20082e78:	0005883a 	mov	r2,zero
20082e7c:	f800283a 	ret
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
        Type = CLUSTER_RESERVED;
    else if (Fat == 0xFFFFFF7)
        Type = CLUSTER_BAD;
20082e80:	00800084 	movi	r2,2
20082e84:	f800283a 	ret

20082e88 <fatNextCluster>:
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082e88:	defff804 	addi	sp,sp,-32
20082e8c:	dcc00315 	stw	r19,12(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082e90:	24c00417 	ldw	r19,16(r4)
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082e94:	dd400515 	stw	r21,20(sp)
20082e98:	dc000015 	stw	r16,0(sp)
20082e9c:	dfc00715 	stw	ra,28(sp)
20082ea0:	dd800615 	stw	r22,24(sp)
20082ea4:	dd000415 	stw	r20,16(sp)
20082ea8:	dc800215 	stw	r18,8(sp)
20082eac:	dc400115 	stw	r17,4(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082eb0:	008002c4 	movi	r2,11
        
    return Type;        
         
}

alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
20082eb4:	2021883a 	mov	r16,r4
20082eb8:	282b883a 	mov	r21,r5
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082ebc:	98803f26 	beq	r19,r2,20082fbc <fatNextCluster+0x134>
20082ec0:	04400084 	movi	r17,2
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20082ec4:	84800717 	ldw	r18,28(r16)
20082ec8:	880b883a 	mov	r5,r17
20082ecc:	9009883a 	mov	r4,r18
20082ed0:	0086c280 	call	20086c28 <__udivsi3>
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082ed4:	8d49383a 	mul	r4,r17,r21
20082ed8:	900b883a 	mov	r5,r18

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
20082edc:	102d883a 	mov	r22,r2
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082ee0:	0086c280 	call	20086c28 <__udivsi3>
20082ee4:	84800e17 	ldw	r18,56(r16)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082ee8:	80c09117 	ldw	r3,580(r16)
    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    alt_u32 Secter;
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20082eec:	14a5883a 	add	r18,r2,r18
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20082ef0:	90c00826 	beq	r18,r3,20082f14 <fatNextCluster+0x8c>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20082ef4:	80800117 	ldw	r2,4(r16)
20082ef8:	81000017 	ldw	r4,0(r16)
20082efc:	900b883a 	mov	r5,r18
20082f00:	81801104 	addi	r6,r16,68
20082f04:	103ee83a 	callr	r2
20082f08:	10002426 	beq	r2,zero,20082f9c <fatNextCluster+0x114>
20082f0c:	84c00417 	ldw	r19,16(r16)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20082f10:	84809115 	stw	r18,580(r16)
   // char szBlock[512];
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
20082f14:	008002c4 	movi	r2,11
20082f18:	98802a26 	beq	r19,r2,20082fc4 <fatNextCluster+0x13c>
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082f1c:	a809883a 	mov	r4,r21
20082f20:	b00b883a 	mov	r5,r22
20082f24:	0086c300 	call	20086c30 <__umodsi3>
20082f28:	1445383a 	mul	r2,r2,r17

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082f2c:	013ffb94 	movui	r4,65518
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082f30:	80a1883a 	add	r16,r16,r2
20082f34:	8080110b 	ldhu	r2,68(r16)
20082f38:	153fffcc 	andi	r20,r2,65535

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20082f3c:	a0ffffc4 	addi	r3,r20,-1
20082f40:	20c0182e 	bgeu	r4,r3,20082fa4 <fatNextCluster+0x11c>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20082f44:	00fffdd4 	movui	r3,65527
20082f48:	1d001636 	bltu	r3,r20,20082fa4 <fatNextCluster+0x11c>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
20082f4c:	a0000826 	beq	r20,zero,20082f70 <fatNextCluster+0xe8>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
20082f50:	10800404 	addi	r2,r2,16
20082f54:	10bfffcc 	andi	r2,r2,65535
20082f58:	00c001c4 	movi	r3,7
20082f5c:	1880032e 	bgeu	r3,r2,20082f6c <fatNextCluster+0xe4>
            ClusterType = fat32ClusterType(NextCluster);
        }else{
            NextCluster = *(alt_u16 *)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
            ClusterType = fat16ClusterType(NextCluster);
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
20082f60:	00bfff44 	movi	r2,-3
20082f64:	00c00044 	movi	r3,1
20082f68:	18800e2e 	bgeu	r3,r2,20082fa4 <fatNextCluster+0x11c>
20082f6c:	0029883a 	mov	r20,zero
            NextCluster = 0;  // invalid cluster
    }
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}
20082f70:	a005883a 	mov	r2,r20
20082f74:	dfc00717 	ldw	ra,28(sp)
20082f78:	dd800617 	ldw	r22,24(sp)
20082f7c:	dd400517 	ldw	r21,20(sp)
20082f80:	dd000417 	ldw	r20,16(sp)
20082f84:	dcc00317 	ldw	r19,12(sp)
20082f88:	dc800217 	ldw	r18,8(sp)
20082f8c:	dc400117 	ldw	r17,4(sp)
20082f90:	dc000017 	ldw	r16,0(sp)
20082f94:	dec00804 	addi	sp,sp,32
20082f98:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20082f9c:	00bfffc4 	movi	r2,-1
20082fa0:	80809115 	stw	r2,580(r16)
            ClusterType = fat16ClusterType(NextCluster);
        }    
        if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE)
            NextCluster = 0;  // invalid cluster
    }
    if(NextCluster > 60607)
20082fa4:	00bb2fd4 	movui	r2,60607
20082fa8:	153ff12e 	bgeu	r2,r20,20082f70 <__flash_rwdata_start+0xfffe8104>
    	printf("Error getting next cluster");
20082fac:	01000034 	movhi	r4,0
20082fb0:	21009d04 	addi	r4,r4,628
20082fb4:	008a8fc0 	call	2008a8fc <printf>
20082fb8:	003fed06 	br	20082f70 <__flash_rwdata_start+0xfffe8104>
alt_u32 fatNextCluster(VOLUME_INFO *pVol, alt_u32 ThisCluster){
    CLUSTER_TYPE ClusterType;
    alt_u32 NextCluster;

    alt_32 nFatEntryPerSecter;
    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20082fbc:	04400104 	movi	r17,4
20082fc0:	003fc006 	br	20082ec4 <__flash_rwdata_start+0xfffe8058>
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082fc4:	a809883a 	mov	r4,r21
20082fc8:	b00b883a 	mov	r5,r22
20082fcc:	0086c300 	call	20086c30 <__umodsi3>
20082fd0:	1445383a 	mul	r2,r2,r17

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082fd4:	01040034 	movhi	r4,4096
20082fd8:	213ffb84 	addi	r4,r4,-18
    nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize; 
    Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
    //if (pVol->ReadBlock512(pVol->DiskHandle, Secter,szBlock)){
    if (fatReadSecter(pVol, Secter)){
        if (pVol->Partition_Type == PARTITION_FAT32){
            NextCluster = *(alt_u32*)(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
20082fdc:	80a1883a 	add	r16,r16,r2
20082fe0:	85001117 	ldw	r20,68(r16)
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20082fe4:	00840034 	movhi	r2,4096
20082fe8:	10bfffc4 	addi	r2,r2,-1
20082fec:	a084703a 	and	r2,r20,r2
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20082ff0:	10ffffc4 	addi	r3,r2,-1
20082ff4:	20ffeb2e 	bgeu	r4,r3,20082fa4 <__flash_rwdata_start+0xfffe8138>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20082ff8:	00c40034 	movhi	r3,4096
20082ffc:	18fffdc4 	addi	r3,r3,-9
20083000:	18bfe836 	bltu	r3,r2,20082fa4 <__flash_rwdata_start+0xfffe8138>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
20083004:	103fd926 	beq	r2,zero,20082f6c <__flash_rwdata_start+0xfffe8100>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
20083008:	00fc0034 	movhi	r3,61440
2008300c:	18c00404 	addi	r3,r3,16
20083010:	10c5883a 	add	r2,r2,r3
20083014:	00c001c4 	movi	r3,7
20083018:	18bfd42e 	bgeu	r3,r2,20082f6c <__flash_rwdata_start+0xfffe8100>
2008301c:	003fd006 	br	20082f60 <__flash_rwdata_start+0xfffe80f4>

20083020 <fatFindUnusedCluster>:
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20083020:	defff404 	addi	sp,sp,-48
20083024:	dd000615 	stw	r20,24(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083028:	25000417 	ldw	r20,16(r4)
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
2008302c:	df000a15 	stw	fp,40(sp)
20083030:	dfc00b15 	stw	ra,44(sp)
20083034:	ddc00915 	stw	r23,36(sp)
20083038:	dd800815 	stw	r22,32(sp)
2008303c:	dd400715 	stw	r21,28(sp)
20083040:	dcc00515 	stw	r19,20(sp)
20083044:	dc800415 	stw	r18,16(sp)
20083048:	dc400315 	stw	r17,12(sp)
2008304c:	dc000215 	stw	r16,8(sp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083050:	008002c4 	movi	r2,11
    if(NextCluster > 60607)
    	printf("Error getting next cluster");
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
20083054:	2039883a 	mov	fp,r4
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083058:	a0805826 	beq	r20,r2,200831bc <fatFindUnusedCluster+0x19c>
2008305c:	04800084 	movi	r18,2
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083060:	e0c00717 	ldw	r3,28(fp)
20083064:	900b883a 	mov	r5,r18
20083068:	94a3883a 	add	r17,r18,r18
2008306c:	1809883a 	mov	r4,r3
20083070:	d8c00115 	stw	r3,4(sp)
20083074:	0086c280 	call	20086c28 <__udivsi3>

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
20083078:	d8c00117 	ldw	r3,4(sp)
2008307c:	e4c09117 	ldw	r19,580(fp)
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083080:	102d883a 	mov	r22,r2
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083084:	e0801104 	addi	r2,fp,68
    return NextCluster;
}

alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
20083088:	04000084 	movi	r16,2
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
2008308c:	d8800015 	stw	r2,0(sp)

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
            if (pVol->Partition_Type == PARTITION_FAT32){
20083090:	054002c4 	movi	r21,11
    const alt_32 nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
    alt_u32 Secter;
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083094:	180b883a 	mov	r5,r3
20083098:	8809883a 	mov	r4,r17
2008309c:	0086c280 	call	20086c28 <__udivsi3>
200830a0:	e0c00e17 	ldw	r3,56(fp)
200830a4:	10ef883a 	add	r23,r2,r3
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200830a8:	bcc00926 	beq	r23,r19,200830d0 <fatFindUnusedCluster+0xb0>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200830ac:	e0800117 	ldw	r2,4(fp)
200830b0:	e1000017 	ldw	r4,0(fp)
200830b4:	d9800017 	ldw	r6,0(sp)
200830b8:	b80b883a 	mov	r5,r23
200830bc:	103ee83a 	callr	r2
200830c0:	10003426 	beq	r2,zero,20083194 <fatFindUnusedCluster+0x174>
200830c4:	e5000417 	ldw	r20,16(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
200830c8:	e5c09115 	stw	r23,580(fp)
200830cc:	b827883a 	mov	r19,r23
    bool bDone = FALSE;

    while(!bDone){     
        Secter = pVol->FatEntrySecter + (ThisCluster*nFatEntrySize)/pVol->BPB_BytsPerSec;
        if (fatReadSecter(pVol, Secter)){
            pFatEntry = (pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize);
200830d0:	8009883a 	mov	r4,r16
200830d4:	b00b883a 	mov	r5,r22
200830d8:	0086c300 	call	20086c30 <__umodsi3>
200830dc:	1485383a 	mul	r2,r2,r18
200830e0:	10801104 	addi	r2,r2,68
200830e4:	e085883a 	add	r2,fp,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
200830e8:	a5401b26 	beq	r20,r21,20083158 <fatFindUnusedCluster+0x138>
                ClusterEntryValue = *(alt_u32*)pFatEntry; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
200830ec:	10c0000b 	ldhu	r3,0(r2)

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
200830f0:	017ffb94 	movui	r5,65518

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
200830f4:	18bfffcc 	andi	r2,r3,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
200830f8:	113fffc4 	addi	r4,r2,-1
200830fc:	2900212e 	bgeu	r5,r4,20083184 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20083100:	013ffdd4 	movui	r4,65527
20083104:	20801f36 	bltu	r4,r2,20083184 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
20083108:	10000626 	beq	r2,zero,20083124 <fatFindUnusedCluster+0x104>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
2008310c:	18c00404 	addi	r3,r3,16
20083110:	18ffffcc 	andi	r3,r3,65535
20083114:	008001c4 	movi	r2,7
20083118:	10c01a2e 	bgeu	r2,r3,20083184 <fatFindUnusedCluster+0x164>
2008311c:	0005883a 	mov	r2,zero
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntry; 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }    
            if (ClusterType == CLUSTER_UNUSED){
20083120:	1000181e 	bne	r2,zero,20083184 <fatFindUnusedCluster+0x164>
        ThisCluster++;           
    }                
    
    return UnusedCluster;

}
20083124:	8005883a 	mov	r2,r16
20083128:	dfc00b17 	ldw	ra,44(sp)
2008312c:	df000a17 	ldw	fp,40(sp)
20083130:	ddc00917 	ldw	r23,36(sp)
20083134:	dd800817 	ldw	r22,32(sp)
20083138:	dd400717 	ldw	r21,28(sp)
2008313c:	dd000617 	ldw	r20,24(sp)
20083140:	dcc00517 	ldw	r19,20(sp)
20083144:	dc800417 	ldw	r18,16(sp)
20083148:	dc400317 	ldw	r17,12(sp)
2008314c:	dc000217 	ldw	r16,8(sp)
20083150:	dec00c04 	addi	sp,sp,48
20083154:	f800283a 	ret
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083158:	10800017 	ldw	r2,0(r2)
2008315c:	00c40034 	movhi	r3,4096
20083160:	18ffffc4 	addi	r3,r3,-1
20083164:	10c4703a 	and	r2,r2,r3
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20083168:	01040034 	movhi	r4,4096
2008316c:	10ffffc4 	addi	r3,r2,-1
20083170:	213ffb84 	addi	r4,r4,-18
20083174:	20c0032e 	bgeu	r4,r3,20083184 <fatFindUnusedCluster+0x164>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20083178:	01440034 	movhi	r5,4096
2008317c:	297ffdc4 	addi	r5,r5,-9
20083180:	2880072e 	bgeu	r5,r2,200831a0 <fatFindUnusedCluster+0x180>
                bDone = TRUE;
            }    
        }else{
            bDone = TRUE;
        }     
        ThisCluster++;           
20083184:	84000044 	addi	r16,r16,1
20083188:	e0c00717 	ldw	r3,28(fp)
2008318c:	8ca3883a 	add	r17,r17,r18
20083190:	003fc006 	br	20083094 <__flash_rwdata_start+0xfffe8228>
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20083194:	043fffc4 	movi	r16,-1
20083198:	e4009115 	stw	r16,580(fp)
2008319c:	003fe106 	br	20083124 <__flash_rwdata_start+0xfffe82b8>
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
200831a0:	103fe026 	beq	r2,zero,20083124 <__flash_rwdata_start+0xfffe82b8>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
200831a4:	00fc0034 	movhi	r3,61440
200831a8:	18c00404 	addi	r3,r3,16
200831ac:	10c5883a 	add	r2,r2,r3
200831b0:	00c001c4 	movi	r3,7
200831b4:	18bff32e 	bgeu	r3,r2,20083184 <__flash_rwdata_start+0xfffe8318>
200831b8:	003fd806 	br	2008311c <__flash_rwdata_start+0xfffe82b0>
alt_u32 fatFindUnusedCluster(VOLUME_INFO *pVol){
    CLUSTER_TYPE ClusterType;
    alt_u32 UnusedCluster=-1, ThisCluster = 2, ClusterEntryValue;
    void *pFatEntry;

    const alt_32 nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
200831bc:	04800104 	movi	r18,4
200831c0:	003fa706 	br	20083060 <__flash_rwdata_start+0xfffe81f4>

200831c4 <fatDelClusterList>:
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
200831c4:	defff204 	addi	sp,sp,-56
200831c8:	df000c15 	stw	fp,48(sp)
200831cc:	2039883a 	mov	fp,r4
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
200831d0:	21000417 	ldw	r4,16(r4)
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
200831d4:	dc800615 	stw	r18,24(sp)
200831d8:	dfc00d15 	stw	ra,52(sp)
200831dc:	ddc00b15 	stw	r23,44(sp)
200831e0:	dd800a15 	stw	r22,40(sp)
200831e4:	dd400915 	stw	r21,36(sp)
200831e8:	dd000815 	stw	r20,32(sp)
200831ec:	dcc00715 	stw	r19,28(sp)
200831f0:	dc400515 	stw	r17,20(sp)
200831f4:	dc000415 	stw	r16,16(sp)
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
200831f8:	008002c4 	movi	r2,11
    return UnusedCluster;

}


bool fatDelClusterList(VOLUME_INFO *pVol, alt_u32 StartCluster){
200831fc:	2825883a 	mov	r18,r5
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
20083200:	20807226 	beq	r4,r2,200833cc <fatDelClusterList+0x208>
20083204:	04400084 	movi	r17,2
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
20083208:	e5c00717 	ldw	r23,28(fp)
2008320c:	880b883a 	mov	r5,r17
20083210:	8ca1383a 	mul	r16,r17,r18
20083214:	b809883a 	mov	r4,r23
20083218:	0086c280 	call	20086c28 <__udivsi3>
2008321c:	1027883a 	mov	r19,r2
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20083220:	0009883a 	mov	r4,zero
20083224:	0005883a 	mov	r2,zero
20083228:	10ffff44 	addi	r3,r2,-3
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
2008322c:	210000e0 	cmpeqi	r4,r4,3
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083230:	05840034 	movhi	r22,4096
20083234:	b5bfffc4 	addi	r22,r22,-1
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
20083238:	d8c00115 	stw	r3,4(sp)
2008323c:	d8c00015 	stw	r3,0(sp)
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083240:	e5001104 	addi	r20,fp,68
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083244:	d9000215 	stw	r4,8(sp)
20083248:	d9000315 	stw	r4,12(sp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
2008324c:	b80b883a 	mov	r5,r23
20083250:	8009883a 	mov	r4,r16
20083254:	0086c280 	call	20086c28 <__udivsi3>
20083258:	e1c00e17 	ldw	r7,56(fp)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
2008325c:	e5409117 	ldw	r21,580(fp)
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
20083260:	11ef883a 	add	r23,r2,r7
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20083264:	bd400826 	beq	r23,r21,20083288 <fatDelClusterList+0xc4>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083268:	e0800117 	ldw	r2,4(fp)
2008326c:	e1000017 	ldw	r4,0(fp)
20083270:	b80b883a 	mov	r5,r23
20083274:	a00d883a 	mov	r6,r20
20083278:	103ee83a 	callr	r2
2008327c:	10002026 	beq	r2,zero,20083300 <fatDelClusterList+0x13c>
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20083280:	e5c09115 	stw	r23,580(fp)
20083284:	b82b883a 	mov	r21,r23
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
20083288:	9009883a 	mov	r4,r18
2008328c:	980b883a 	mov	r5,r19
20083290:	0086c300 	call	20086c30 <__umodsi3>
20083294:	1445383a 	mul	r2,r2,r17
            if (pVol->Partition_Type == PARTITION_FAT32){
20083298:	e1400417 	ldw	r5,16(fp)
2008329c:	010002c4 	movi	r4,11
        // read FAT Table
        Secter = pVol->FatEntrySecter + (ClusterIndex*nFatEntrySize)/pVol->BPB_BytsPerSec;
        bSuccess = fatReadSecter(pVol, Secter);
        if (bSuccess){
            // get the value of FAT entry
            pFatEntryValue = (pVol->Secter_Data + (ClusterIndex%nFatEntryPerSecter)*nFatEntrySize);
200832a0:	10801104 	addi	r2,r2,68
200832a4:	e085883a 	add	r2,fp,r2
            if (pVol->Partition_Type == PARTITION_FAT32){
200832a8:	29002326 	beq	r5,r4,20083338 <fatDelClusterList+0x174>
                ClusterEntryValue = *(alt_u32 *)pFatEntryValue; 
                ClusterType = fat32ClusterType(ClusterEntryValue);
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
200832ac:	1140000b 	ldhu	r5,0(r2)

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
200832b0:	023ffb94 	movui	r8,65518

VOLUME_INFO vInfo;

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
200832b4:	293fffcc 	andi	r4,r5,65535
    
    if (Fat > 0 && Fat < 0xFFF0)
200832b8:	21ffffc4 	addi	r7,r4,-1
200832bc:	41c0132e 	bgeu	r8,r7,2008330c <fatDelClusterList+0x148>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
200832c0:	01fffdd4 	movui	r7,65527
200832c4:	39002736 	bltu	r7,r4,20083364 <fatDelClusterList+0x1a0>
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
200832c8:	20002c1e 	bne	r4,zero,2008337c <fatDelClusterList+0x1b8>
    bool bDone = FALSE;
    alt_u32 ClusterIndex, Secter, ClusterEntryValue;
    void *pFatEntryValue;
    
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
200832cc:	0005883a 	mov	r2,zero
    }  // while                
    
    
    return bSuccess;

}
200832d0:	dfc00d17 	ldw	ra,52(sp)
200832d4:	df000c17 	ldw	fp,48(sp)
200832d8:	ddc00b17 	ldw	r23,44(sp)
200832dc:	dd800a17 	ldw	r22,40(sp)
200832e0:	dd400917 	ldw	r21,36(sp)
200832e4:	dd000817 	ldw	r20,32(sp)
200832e8:	dcc00717 	ldw	r19,28(sp)
200832ec:	dc800617 	ldw	r18,24(sp)
200832f0:	dc400517 	ldw	r17,20(sp)
200832f4:	dc000417 	ldw	r16,16(sp)
200832f8:	dec00e04 	addi	sp,sp,56
200832fc:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20083300:	00bfffc4 	movi	r2,-1
20083304:	e0809115 	stw	r2,580(fp)
20083308:	003ff006 	br	200832cc <__flash_rwdata_start+0xfffe8460>

CLUSTER_TYPE fat16ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
2008330c:	002f883a 	mov	r23,zero
                    bDone = TRUE; // the last cluster
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
                else 
                    *(alt_u16 *)pFatEntryValue = CLUSTER_UNUSED;
20083310:	1000000d 	sth	zero,0(r2)
                //write back FAT Table
                bSuccess = pVol->WriteBlock512(pVol->DiskHandle, pVol->Secter_Index, pVol->Secter_Data);
20083314:	e0800217 	ldw	r2,8(fp)
20083318:	e1000017 	ldw	r4,0(fp)
2008331c:	a80b883a 	mov	r5,r21
20083320:	a00d883a 	mov	r6,r20
20083324:	103ee83a 	callr	r2
    
    const int nFatEntrySize = (pVol->Partition_Type == PARTITION_FAT32)?4:2; // 2 byte for FAT16
    const int nFatEntryPerSecter = pVol->BPB_BytsPerSec/nFatEntrySize;
     
    ClusterIndex = StartCluster;
    while(bSuccess && !bDone){
20083328:	103fe926 	beq	r2,zero,200832d0 <__flash_rwdata_start+0xfffe8464>
2008332c:	b83fe81e 	bne	r23,zero,200832d0 <__flash_rwdata_start+0xfffe8464>
20083330:	e5c00717 	ldw	r23,28(fp)
20083334:	003fc506 	br	2008324c <__flash_rwdata_start+0xfffe83e0>
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083338:	11000017 	ldw	r4,0(r2)
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
2008333c:	00c40034 	movhi	r3,4096
20083340:	18fffb84 	addi	r3,r3,-18
         
}

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
20083344:	2588703a 	and	r4,r4,r22
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
20083348:	217fffc4 	addi	r5,r4,-1
2008334c:	1940072e 	bgeu	r3,r5,2008336c <fatDelClusterList+0x1a8>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
20083350:	00c40034 	movhi	r3,4096
20083354:	18fffdc4 	addi	r3,r3,-9
20083358:	1900112e 	bgeu	r3,r4,200833a0 <fatDelClusterList+0x1dc>
2008335c:	05c00044 	movi	r23,1
20083360:	00000306 	br	20083370 <fatDelClusterList+0x1ac>
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFF; // 16 bits
    
    if (Fat > 0 && Fat < 0xFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
20083364:	05c00044 	movi	r23,1
20083368:	003fe906 	br	20083310 <__flash_rwdata_start+0xfffe84a4>

CLUSTER_TYPE fat32ClusterType(alt_u32 Fat){
    CLUSTER_TYPE Type;
    Fat = Fat & 0xFFFFFFF; // 28 bits
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
2008336c:	002f883a 	mov	r23,zero
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
                    bDone = TRUE; // the last cluster
                // update
                if (pVol->Partition_Type == PARTITION_FAT32)
                    *(alt_u32 *)pFatEntryValue = CLUSTER_UNUSED;
20083370:	10000015 	stw	zero,0(r2)
20083374:	e5409117 	ldw	r21,580(fp)
20083378:	003fe606 	br	20083314 <__flash_rwdata_start+0xfffe84a8>
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u16)0x00)
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFF0 && Fat <= 0xFFF6)
2008337c:	29400404 	addi	r5,r5,16
20083380:	297fffcc 	andi	r5,r5,65535
20083384:	010001c4 	movi	r4,7
20083388:	217fd02e 	bgeu	r4,r5,200832cc <__flash_rwdata_start+0xfffe8460>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
2008338c:	d8c00017 	ldw	r3,0(sp)
20083390:	01000044 	movi	r4,1
20083394:	20ffcd36 	bltu	r4,r3,200832cc <__flash_rwdata_start+0xfffe8460>
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
20083398:	ddc00217 	ldw	r23,8(sp)
2008339c:	003fdc06 	br	20083310 <__flash_rwdata_start+0xfffe84a4>
    
    if (Fat > 0 && Fat < 0xFFFFFF0)
        Type = CLUSTER_NEXT_INFILE;
    else if (Fat >= 0xFFFFFF8) // && Fat <= (unsigned short)0xFFFF)
        Type = CLUSTER_LAST_INFILE;
    else if (Fat == (alt_u32)0x00)
200833a0:	203fca26 	beq	r4,zero,200832cc <__flash_rwdata_start+0xfffe8460>
        Type = CLUSTER_UNUSED;
    else if (Fat >= 0xFFFFFF0 && Fat <= 0xFFFFFF6)
200833a4:	00fc0034 	movhi	r3,61440
200833a8:	18c00404 	addi	r3,r3,16
200833ac:	20c9883a 	add	r4,r4,r3
200833b0:	014001c4 	movi	r5,7
200833b4:	293fc52e 	bgeu	r5,r4,200832cc <__flash_rwdata_start+0xfffe8460>
            }else{
                ClusterEntryValue = *(alt_u16 *)pFatEntryValue; //(pVol->Secter_Data + (ThisCluster%nFatEntryPerSecter)*nFatEntrySize); 
                ClusterType = fat16ClusterType(ClusterEntryValue);
            }
                
            if (ClusterType != CLUSTER_NEXT_INFILE && ClusterType != CLUSTER_LAST_INFILE){
200833b8:	d8c00117 	ldw	r3,4(sp)
200833bc:	01000044 	movi	r4,1
200833c0:	20ffc236 	bltu	r4,r3,200832cc <__flash_rwdata_start+0xfffe8460>
                bDone = TRUE;
                bSuccess = FALSE;
            }else{
                if (ClusterType == CLUSTER_LAST_INFILE)
200833c4:	ddc00317 	ldw	r23,12(sp)
200833c8:	003fe906 	br	20083370 <__flash_rwdata_start+0xfffe8504>
200833cc:	04400104 	movi	r17,4
200833d0:	003f8d06 	br	20083208 <__flash_rwdata_start+0xfffe839c>

200833d4 <fatDumpDate>:
    return bSuccess;

}


void fatDumpDate(unsigned short Date){
200833d4:	f800283a 	ret

200833d8 <fatDumpTime>:
    Month = ((Date >> 5) & 0xF);
    Day = ((Date >> 0) & 0x1F);
    FAT_DEBUG(("%d,%d,%d", Year, Month, Day)); 
}

void fatDumpTime(unsigned short Date){
200833d8:	f800283a 	ret

200833dc <fatIsLastDir>:
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
200833dc:	20800007 	ldb	r2,0(r4)
        return TRUE;
    return FALSE;        
}
200833e0:	1005003a 	cmpeq	r2,r2,zero
200833e4:	f800283a 	ret

200833e8 <fatIsValidDir>:


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200833e8:	defff904 	addi	sp,sp,-28
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200833ec:	01400034 	movhi	r5,0
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200833f0:	dc000515 	stw	r16,20(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200833f4:	2940a3c4 	addi	r5,r5,655
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
200833f8:	2021883a 	mov	r16,r4
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200833fc:	01800444 	movi	r6,17
20083400:	d809883a 	mov	r4,sp
        return TRUE;
    return FALSE;        
}


bool fatIsValidDir(FAT_DIRECTORY *pDir){
20083404:	dfc00615 	stw	ra,24(sp)
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
20083408:	008a6740 	call	2008a674 <memcpy>
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
        if (pDir->Name[0] == szTest[i]){
2008340c:	80800007 	ldb	r2,0(r16)
20083410:	d8c00007 	ldb	r3,0(sp)
20083414:	10c02426 	beq	r2,r3,200834a8 <fatIsValidDir+0xc0>
20083418:	d8c00047 	ldb	r3,1(sp)
2008341c:	18802226 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083420:	d8c00087 	ldb	r3,2(sp)
20083424:	18802026 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083428:	d8c000c7 	ldb	r3,3(sp)
2008342c:	18801e26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083430:	d8c00107 	ldb	r3,4(sp)
20083434:	18801c26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083438:	d8c00147 	ldb	r3,5(sp)
2008343c:	18801a26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083440:	d8c00187 	ldb	r3,6(sp)
20083444:	18801826 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083448:	d8c001c7 	ldb	r3,7(sp)
2008344c:	18801626 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083450:	d8c00207 	ldb	r3,8(sp)
20083454:	18801426 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083458:	d8c00247 	ldb	r3,9(sp)
2008345c:	18801226 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083460:	d8c00287 	ldb	r3,10(sp)
20083464:	18801026 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083468:	d8c002c7 	ldb	r3,11(sp)
2008346c:	18800e26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083470:	d8c00307 	ldb	r3,12(sp)
20083474:	18800c26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083478:	d8c00347 	ldb	r3,13(sp)
2008347c:	18800a26 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083480:	d8c00387 	ldb	r3,14(sp)
20083484:	18800826 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083488:	d8c003c7 	ldb	r3,15(sp)
2008348c:	18800626 	beq	r3,r2,200834a8 <fatIsValidDir+0xc0>
20083490:	d8c00407 	ldb	r3,16(sp)
20083494:	1884c03a 	cmpne	r2,r3,r2
            return FALSE;
        }
    }    
    return TRUE;
    
}
20083498:	dfc00617 	ldw	ra,24(sp)
2008349c:	dc000517 	ldw	r16,20(sp)
200834a0:	dec00704 	addi	sp,sp,28
200834a4:	f800283a 	ret
    char szTest[] = {0x00, 0xE5, 0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
    int i;
    
    for(i=0;i<sizeof(szTest)/sizeof(szTest[0]);i++){
        if (pDir->Name[0] == szTest[i]){
            return FALSE;
200834a8:	0005883a 	mov	r2,zero
        }
    }    
    return TRUE;
    
}
200834ac:	dfc00617 	ldw	ra,24(sp)
200834b0:	dc000517 	ldw	r16,20(sp)
200834b4:	dec00704 	addi	sp,sp,28
200834b8:	f800283a 	ret

200834bc <fatIsUnusedDir>:

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
200834bc:	20800007 	ldb	r2,0(r4)
        return TRUE;
    return FALSE; 
}
200834c0:	10bff960 	cmpeqi	r2,r2,-27
200834c4:	f800283a 	ret

200834c8 <fatDump>:

// debug
void fatDump(FAT_DIRECTORY *pDir){
200834c8:	defffb04 	addi	sp,sp,-20
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200834cc:	01400034 	movhi	r5,0
200834d0:	2940a804 	addi	r5,r5,672
200834d4:	d809883a 	mov	r4,sp
200834d8:	018003c4 	movi	r6,15
        return TRUE;
    return FALSE; 
}

// debug
void fatDump(FAT_DIRECTORY *pDir){
200834dc:	dfc00415 	stw	ra,16(sp)
    char szInvalidName[] = {0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B, 0x3C, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C};
200834e0:	008a6740 	call	2008a674 <memcpy>
    FAT_DEBUG(("ClusterHi:%04Xh\n", pDir->FirstLogicalClusterHi));
    FAT_DEBUG(("LastWriteTime:")); fatDumpTime(pDir->LastWriteTime);FAT_DEBUG(("\n"));
    FAT_DEBUG(("LastWriteDate:")); fatDumpDate(pDir->LastWriteDate);FAT_DEBUG(("\n"));
    FAT_DEBUG(("Cluster:%04Xh(%d)\n", pDir->FirstLogicalCluster,pDir->FirstLogicalCluster));
    FAT_DEBUG(("File Size:%08Xh(%ld)\n", pDir->FileSize, (long)pDir->FileSize));
}
200834e4:	dfc00417 	ldw	ra,16(sp)
200834e8:	dec00504 	addi	sp,sp,20
200834ec:	f800283a 	ret

200834f0 <fatArray2Value>:


unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
200834f0:	28ffffc4 	addi	r3,r5,-1
200834f4:	20c9883a 	add	r4,r4,r3
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
200834f8:	28000626 	beq	r5,zero,20083514 <fatArray2Value+0x24>
200834fc:	214bc83a 	sub	r5,r4,r5
        nValue <<= 8;
        nValue |= *pMSB--;
20083500:	20c00003 	ldbu	r3,0(r4)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083504:	1004923a 	slli	r2,r2,8
20083508:	213fffc4 	addi	r4,r4,-1
        nValue |= *pMSB--;
2008350c:	1884b03a 	or	r2,r3,r2

unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
20083510:	217ffb1e 	bne	r4,r5,20083500 <__flash_rwdata_start+0xfffe8694>
        nValue |= *pMSB--;
        
    }
    
    return nValue;
}
20083514:	f800283a 	ret

20083518 <fatReadSecter>:
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
20083518:	20c09117 	ldw	r3,580(r4)
2008351c:	19401626 	beq	r3,r5,20083578 <fatReadSecter+0x60>
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
20083520:	defffd04 	addi	sp,sp,-12
20083524:	dc000015 	stw	r16,0(sp)
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083528:	20800117 	ldw	r2,4(r4)
2008352c:	2021883a 	mov	r16,r4
20083530:	21000017 	ldw	r4,0(r4)
    return nValue;
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
20083534:	dc400115 	stw	r17,4(sp)
20083538:	dfc00215 	stw	ra,8(sp)
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
2008353c:	81801104 	addi	r6,r16,68
20083540:	2823883a 	mov	r17,r5
20083544:	103ee83a 	callr	r2
20083548:	10000726 	beq	r2,zero,20083568 <fatReadSecter+0x50>
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
2008354c:	84409115 	stw	r17,580(r16)
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
20083550:	00800044 	movi	r2,1
//            if(memcmp(temp, pVol->Secter_Data, 512))
//            	printf("Data check failed!\n");
        }
    }
    return bSuccess;          
}     
20083554:	dfc00217 	ldw	ra,8(sp)
20083558:	dc400117 	ldw	r17,4(sp)
2008355c:	dc000017 	ldw	r16,0(sp)
20083560:	dec00304 	addi	sp,sp,12
20083564:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20083568:	00bfffc4 	movi	r2,-1
2008356c:	80809115 	stw	r2,580(r16)
            bSuccess = FALSE;
20083570:	0005883a 	mov	r2,zero
20083574:	003ff706 	br	20083554 <__flash_rwdata_start+0xfffe86e8>
}

//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
20083578:	00800044 	movi	r2,1
2008357c:	f800283a 	ret

20083580 <fatReadMultiSecter>:
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
    bool bSuccess = TRUE;

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
20083580:	20800317 	ldw	r2,12(r4)
20083584:	21000017 	ldw	r4,0(r4)
    }
    return bSuccess;          
}     
//=================================================================================
//// [ADDED]
bool fatReadMultiSecter(VOLUME_INFO *pVol, alt_u32 nSecter, alt_u32 n, char* buf){
20083588:	deffff04 	addi	sp,sp,-4
2008358c:	dfc00015 	stw	ra,0(sp)
    bool bSuccess = TRUE;

	if (!pVol->ReadBlocks(pVol->DiskHandle, nSecter, n, buf)){
20083590:	103ee83a 	callr	r2
		bSuccess = FALSE;
	}
    return bSuccess;
}
20083594:	1004c03a 	cmpne	r2,r2,zero
20083598:	dfc00017 	ldw	ra,0(sp)
2008359c:	dec00104 	addi	sp,sp,4
200835a0:	f800283a 	ret

200835a4 <fatFindDirectory>:
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
200835a4:	defffb04 	addi	sp,sp,-20
200835a8:	dcc00315 	stw	r19,12(sp)
200835ac:	dc800215 	stw	r18,8(sp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
200835b0:	2826917a 	slli	r19,r5,5
200835b4:	24800717 	ldw	r18,28(r4)
	}
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
200835b8:	dc000015 	stw	r16,0(sp)
200835bc:	2021883a 	mov	r16,r4
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
200835c0:	900b883a 	mov	r5,r18
200835c4:	9809883a 	mov	r4,r19
	}
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
200835c8:	dc400115 	stw	r17,4(sp)
200835cc:	dfc00415 	stw	ra,16(sp)
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
200835d0:	0086c280 	call	20086c28 <__udivsi3>
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
200835d4:	84400f17 	ldw	r17,60(r16)
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200835d8:	80c09117 	ldw	r3,580(r16)
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
200835dc:	1463883a 	add	r17,r2,r17
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200835e0:	88c00826 	beq	r17,r3,20083604 <fatFindDirectory+0x60>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200835e4:	80800117 	ldw	r2,4(r16)
200835e8:	81000017 	ldw	r4,0(r16)
200835ec:	880b883a 	mov	r5,r17
200835f0:	81801104 	addi	r6,r16,68
200835f4:	103ee83a 	callr	r2
200835f8:	10000e26 	beq	r2,zero,20083634 <fatFindDirectory+0x90>
200835fc:	84800717 	ldw	r18,28(r16)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
20083600:	84409115 	stw	r17,580(r16)
             
    nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
    nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
        // read sector
    if (fatReadSecter(pVol, nSecter)){
        nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
20083604:	9809883a 	mov	r4,r19
20083608:	900b883a 	mov	r5,r18
2008360c:	0086c300 	call	20086c30 <__umodsi3>
        pDir = (FAT_DIRECTORY *)(pVol->Secter_Data + nByteOffset);
20083610:	10801104 	addi	r2,r2,68
20083614:	8085883a 	add	r2,r16,r2
    }        
        
    return pDir;        
}
20083618:	dfc00417 	ldw	ra,16(sp)
2008361c:	dcc00317 	ldw	r19,12(sp)
20083620:	dc800217 	ldw	r18,8(sp)
20083624:	dc400117 	ldw	r17,4(sp)
20083628:	dc000017 	ldw	r16,0(sp)
2008362c:	dec00504 	addi	sp,sp,20
20083630:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
20083634:	00bfffc4 	movi	r2,-1
20083638:	80809115 	stw	r2,580(r16)
    return bSuccess;
}
//=================================================================================
//// add in v2.0
FAT_DIRECTORY* fatFindDirectory(VOLUME_INFO *pVol, alt_u32 nDirectoryIndex){
    FAT_DIRECTORY *pDir=NULL;
2008363c:	0005883a 	mov	r2,zero
20083640:	003ff506 	br	20083618 <__flash_rwdata_start+0xfffe87ac>

20083644 <fatFindUnusedDirectory>:
    return pDir;        
}

//=================================================================================
//// add in v2.0
alt_u32 fatFindUnusedDirectory(VOLUME_INFO *pVol){
20083644:	defff604 	addi	sp,sp,-40
20083648:	dcc00315 	stw	r19,12(sp)
2008364c:	dc400115 	stw	r17,4(sp)
20083650:	24c09117 	ldw	r19,580(r4)
20083654:	24400717 	ldw	r17,28(r4)
20083658:	df000815 	stw	fp,32(sp)
2008365c:	ddc00715 	stw	r23,28(sp)
20083660:	dd800615 	stw	r22,24(sp)
20083664:	dd400515 	stw	r21,20(sp)
20083668:	dd000415 	stw	r20,16(sp)
2008366c:	dc800215 	stw	r18,8(sp)
20083670:	dfc00915 	stw	ra,36(sp)
20083674:	dc000015 	stw	r16,0(sp)
20083678:	2039883a 	mov	fp,r4
    alt_u32 Dir = -1;
    FAT_DIRECTORY *pDir=NULL;
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
2008367c:	05000084 	movi	r20,2
20083680:	04801004 	movi	r18,64
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
20083684:	05bff944 	movi	r22,-27
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
20083688:	25401104 	addi	r21,r4,68
            pVol->Secter_Index = -1;
2008368c:	05ffffc4 	movi	r23,-1
    alt_u32 nSecterOffset, nSecter, nByteOffset;
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
20083690:	880b883a 	mov	r5,r17
20083694:	9009883a 	mov	r4,r18
20083698:	0086c280 	call	20086c28 <__udivsi3>
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
2008369c:	e4000f17 	ldw	r16,60(fp)
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200836a0:	a80d883a 	mov	r6,r21
    alt_u32 nDirectoryIndex = 2; //??? start from ?
    bool bDone = FALSE;
             
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
200836a4:	1421883a 	add	r16,r2,r16
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200836a8:	800b883a 	mov	r5,r16
//=================================================================================
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
200836ac:	84c00726 	beq	r16,r19,200836cc <fatFindUnusedDirectory+0x88>
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200836b0:	e1000017 	ldw	r4,0(fp)
200836b4:	e0800117 	ldw	r2,4(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
200836b8:	8027883a 	mov	r19,r16
//// add in v2.0
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
200836bc:	103ee83a 	callr	r2
200836c0:	10001a26 	beq	r2,zero,2008372c <fatFindUnusedDirectory+0xe8>
200836c4:	e4400717 	ldw	r17,28(fp)
            pVol->Secter_Index = -1;
            bSuccess = FALSE;
        }else{
            pVol->Secter_Index = nSecter;
200836c8:	e4009115 	stw	r16,580(fp)
    while(!bDone){             
        nSecterOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)/pVol->BPB_BytsPerSec;
        nSecter = pVol->RootDirectoryEntrySecter + nSecterOffset;
            // read sector
        if (fatReadSecter(pVol, nSecter)){
            nByteOffset = (sizeof(FAT_DIRECTORY)*nDirectoryIndex)%pVol->BPB_BytsPerSec; 
200836cc:	9009883a 	mov	r4,r18
200836d0:	880b883a 	mov	r5,r17
200836d4:	0086c300 	call	20086c30 <__umodsi3>
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
200836d8:	e085883a 	add	r2,fp,r2
200836dc:	10801107 	ldb	r2,68(r2)
200836e0:	10000426 	beq	r2,zero,200836f4 <fatFindUnusedDirectory+0xb0>
    return TRUE;
    
}

bool fatIsUnusedDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == (alt_8)UNUSED_DIR_ENTRY)
200836e4:	15800426 	beq	r2,r22,200836f8 <fatFindUnusedDirectory+0xb4>
            if (fatIsLastDir(pDir) || fatIsUnusedDir(pDir)){
                bDone = TRUE;
                if (fatIsUnusedDir(pDir))
                    Dir = nDirectoryIndex;
            }
            nDirectoryIndex++;        
200836e8:	a5000044 	addi	r20,r20,1
200836ec:	a024917a 	slli	r18,r20,5
200836f0:	003fe706 	br	20083690 <__flash_rwdata_start+0xfffe8824>
    S = ((Date >> 0) & 0x1F)*2;
    FAT_DEBUG(("%d:%d:%d", H, M, S));     
}

bool fatIsLastDir(FAT_DIRECTORY *pDir){
    if (pDir->Name[0] == REMAINED_UNUSED_DIR_ENTRY)  // 0x00
200836f4:	053fffc4 	movi	r20,-1
                bDone = FALSE;
        }
    }             
    
    return Dir;      
}
200836f8:	a005883a 	mov	r2,r20
200836fc:	dfc00917 	ldw	ra,36(sp)
20083700:	df000817 	ldw	fp,32(sp)
20083704:	ddc00717 	ldw	r23,28(sp)
20083708:	dd800617 	ldw	r22,24(sp)
2008370c:	dd400517 	ldw	r21,20(sp)
20083710:	dd000417 	ldw	r20,16(sp)
20083714:	dcc00317 	ldw	r19,12(sp)
20083718:	dc800217 	ldw	r18,8(sp)
2008371c:	dc400117 	ldw	r17,4(sp)
20083720:	dc000017 	ldw	r16,0(sp)
20083724:	dec00a04 	addi	sp,sp,40
20083728:	f800283a 	ret
bool fatReadSecter(VOLUME_INFO *pVol, alt_u32 nSecter){
    bool bSuccess = TRUE;
    static char temp[512];
    if (nSecter != pVol->Secter_Index){
        if (!pVol->ReadBlock512(pVol->DiskHandle, nSecter, pVol->Secter_Data)){
            pVol->Secter_Index = -1;
2008372c:	e5c09115 	stw	r23,580(fp)
20083730:	e4400717 	ldw	r17,28(fp)
20083734:	04ffffc4 	movi	r19,-1
20083738:	003fd506 	br	20083690 <__flash_rwdata_start+0xfffe8824>

2008373c <fatMount>:
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
2008373c:	defff604 	addi	sp,sp,-40
20083740:	dc400115 	stw	r17,4(sp)
20083744:	dc000015 	stw	r16,0(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083748:	04400034 	movhi	r17,0
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
2008374c:	2021883a 	mov	r16,r4
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083750:	20800117 	ldw	r2,4(r4)
20083754:	21000017 	ldw	r4,0(r4)
20083758:	8c4b0d04 	addi	r17,r17,11316
    
    return Dir;      
}

//=================================================================================
bool fatMount(VOLUME_INFO *pVol){
2008375c:	dfc00915 	stw	ra,36(sp)
20083760:	df000815 	stw	fp,32(sp)
20083764:	ddc00715 	stw	r23,28(sp)
20083768:	dd800615 	stw	r22,24(sp)
2008376c:	dd400515 	stw	r21,20(sp)
20083770:	dd000415 	stw	r20,16(sp)
20083774:	dcc00315 	stw	r19,12(sp)
20083778:	dc800215 	stw	r18,8(sp)
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
2008377c:	000b883a 	mov	r5,zero
20083780:	880d883a 	mov	r6,r17
20083784:	103ee83a 	callr	r2
20083788:	10000526 	beq	r2,zero,200837a0 <fatMount+0x64>
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
2008378c:	88807083 	ldbu	r2,450(r17)
    if (PartitionType == PARTITION_FAT16){
20083790:	00c00184 	movi	r3,6
20083794:	10c00f26 	beq	r2,r3,200837d4 <fatMount+0x98>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
20083798:	00c002c4 	movi	r3,11
2008379c:	10c00d26 	beq	r2,r3,200837d4 <fatMount+0x98>
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
        FAT_DEBUG(("Read section 0 error.\n"));
        return FALSE;
200837a0:	0005883a 	mov	r2,zero
    }        
    pVol->bMount = bSuccess;
    return bSuccess;   
    

}
200837a4:	dfc00917 	ldw	ra,36(sp)
200837a8:	df000817 	ldw	fp,32(sp)
200837ac:	ddc00717 	ldw	r23,28(sp)
200837b0:	dd800617 	ldw	r22,24(sp)
200837b4:	dd400517 	ldw	r21,20(sp)
200837b8:	dd000417 	ldw	r20,16(sp)
200837bc:	dcc00317 	ldw	r19,12(sp)
200837c0:	dc800217 	ldw	r18,8(sp)
200837c4:	dc400117 	ldw	r17,4(sp)
200837c8:	dc000017 	ldw	r16,0(sp)
200837cc:	dec00a04 	addi	sp,sp,40
200837d0:	f800283a 	ret
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
200837d4:	80800415 	stw	r2,16(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200837d8:	88807243 	ldbu	r2,457(r17)
200837dc:	89007203 	ldbu	r4,456(r17)
200837e0:	88c071c3 	ldbu	r3,455(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200837e4:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
200837e8:	8c807183 	ldbu	r18,454(r17)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200837ec:	81c00117 	ldw	r7,4(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200837f0:	1104b03a 	or	r2,r2,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200837f4:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
200837f8:	04400034 	movhi	r17,0
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
200837fc:	81000017 	ldw	r4,0(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083800:	10c4b03a 	or	r2,r2,r3
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083804:	1004923a 	slli	r2,r2,8
        nValue |= *pMSB--;
20083808:	8c4b0d04 	addi	r17,r17,11316
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
2008380c:	880d883a 	mov	r6,r17
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083810:	14a4b03a 	or	r18,r2,r18
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20083814:	900b883a 	mov	r5,r18
20083818:	383ee83a 	callr	r7
2008381c:	103fe026 	beq	r2,zero,200837a0 <__flash_rwdata_start+0xfffe8934>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
20083820:	84800615 	stw	r18,24(r16)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083824:	88800303 	ldbu	r2,12(r17)
20083828:	8f0002c3 	ldbu	fp,11(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
2008382c:	00ffffc4 	movi	r3,-1
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083830:	1004923a 	slli	r2,r2,8
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
20083834:	80c09115 	stw	r3,580(r16)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083838:	81001104 	addi	r4,r16,68
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
2008383c:	1739883a 	add	fp,r2,fp
20083840:	87000715 	stw	fp,28(r16)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083844:	8dc00343 	ldbu	r23,13(r17)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083848:	000b883a 	mov	r5,zero
2008384c:	01808004 	movi	r6,512
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083850:	85c00815 	stw	r23,32(r16)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083854:	888003c3 	ldbu	r2,15(r17)
20083858:	8d400383 	ldbu	r21,14(r17)
2008385c:	1004923a 	slli	r2,r2,8
20083860:	156b883a 	add	r21,r2,r21
20083864:	85400915 	stw	r21,36(r16)
    pVol->BPB_NumFATs = szBlock[0x10];
20083868:	8d800403 	ldbu	r22,16(r17)
2008386c:	85800a15 	stw	r22,40(r16)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083870:	88800483 	ldbu	r2,18(r17)
20083874:	8cc00443 	ldbu	r19,17(r17)
20083878:	1004923a 	slli	r2,r2,8
2008387c:	14e7883a 	add	r19,r2,r19
20083880:	84c00b15 	stw	r19,44(r16)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083884:	8d0005c3 	ldbu	r20,23(r17)
20083888:	88c00583 	ldbu	r3,22(r17)
2008388c:	a028923a 	slli	r20,r20,8
20083890:	a0e9883a 	add	r20,r20,r3
20083894:	85000c15 	stw	r20,48(r16)
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083898:	008a7ac0 	call	2008a7ac <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
2008389c:	80c00417 	ldw	r3,16(r16)
200838a0:	008002c4 	movi	r2,11
200838a4:	18801126 	beq	r3,r2,200838ec <fatMount+0x1b0>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
200838a8:	00808004 	movi	r2,512
200838ac:	e0bfbc1e 	bne	fp,r2,200837a0 <__flash_rwdata_start+0xfffe8934>
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200838b0:	9806917a 	slli	r3,r19,5
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200838b4:	a5a9383a 	mul	r20,r20,r22
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
200838b8:	9565883a 	add	r18,r18,r21
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200838bc:	18c07fc4 	addi	r3,r3,511
200838c0:	1806d27a 	srli	r3,r3,9
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200838c4:	b82e927a 	slli	r23,r23,9
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200838c8:	a4a9883a 	add	r20,r20,r18
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
200838cc:	00800044 	movi	r2,1
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200838d0:	a0c7883a 	add	r3,r20,r3
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
200838d4:	84800e15 	stw	r18,56(r16)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
200838d8:	85000f15 	stw	r20,60(r16)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
200838dc:	80c01015 	stw	r3,64(r16)
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
200838e0:	85c00d15 	stw	r23,52(r16)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
200838e4:	80800515 	stw	r2,20(r16)
    return bSuccess;   
200838e8:	003fae06 	br	200837a4 <__flash_rwdata_start+0xfffe8938>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200838ec:	8d0009c3 	ldbu	r20,39(r17)
200838f0:	89000983 	ldbu	r4,38(r17)
200838f4:	88800943 	ldbu	r2,37(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200838f8:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
200838fc:	88c00903 	ldbu	r3,36(r17)
20083900:	a128b03a 	or	r20,r20,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083904:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
20083908:	a0a8b03a 	or	r20,r20,r2
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
2008390c:	a028923a 	slli	r20,r20,8
        nValue |= *pMSB--;
20083910:	a0e8b03a 	or	r20,r20,r3
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    
    if (pVol->Partition_Type == PARTITION_FAT32){
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
20083914:	85000c15 	stw	r20,48(r16)
20083918:	003fe306 	br	200838a8 <__flash_rwdata_start+0xfffe8a3c>

2008391c <fatMountSdcard>:

bool SD_ReadBlocks(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u32 n, alt_u8* szBuf){
    return SDLIB_ReadBlocks(PysicalSelector, n, szBuf);
}

FAT_HANDLE fatMountSdcard(void){
2008391c:	defff504 	addi	sp,sp,-44
20083920:	dc000115 	stw	r16,4(sp)
20083924:	dfc00a15 	stw	ra,40(sp)
20083928:	df000915 	stw	fp,36(sp)
2008392c:	ddc00815 	stw	r23,32(sp)
20083930:	dd800715 	stw	r22,28(sp)
20083934:	dd400615 	stw	r21,24(sp)
20083938:	dd000515 	stw	r20,20(sp)
2008393c:	dcc00415 	stw	r19,16(sp)
20083940:	dc800315 	stw	r18,12(sp)
20083944:	dc400215 	stw	r17,8(sp)
20083948:	040002c4 	movi	r16,11
2008394c:	843fffc4 	addi	r16,r16,-1
    bool bFind = FALSE;
    int nTry=0;
    bool bSuccess = TRUE;
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
20083950:	80001526 	beq	r16,zero,200839a8 <fatMountSdcard+0x8c>
        bFind = SDLIB_Init();
20083954:	00854840 	call	20085484 <SDLIB_Init>
        if (!bFind)
20083958:	10002026 	beq	r2,zero,200839dc <fatMountSdcard+0xc0>
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
2008395c:	04000034 	movhi	r16,0
20083960:	00880234 	movhi	r2,8200
20083964:	840ba704 	addi	r16,r16,11932
20083968:	108b6704 	addi	r2,r2,11676

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
2008396c:	04400034 	movhi	r17,0
20083970:	8c4b0d04 	addi	r17,r17,11316
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
20083974:	80800115 	stw	r2,4(r16)
    pVol->ReadBlocks = SD_ReadBlocks;
20083978:	00880234 	movhi	r2,8200
2008397c:	108b6a04 	addi	r2,r2,11688

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
20083980:	0009883a 	mov	r4,zero
20083984:	880b883a 	mov	r5,r17
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
    pVol = (VOLUME_INFO *)hFat;
    pVol->ReadBlock512 = SD_ReadBlock512;
    pVol->ReadBlocks = SD_ReadBlocks;
20083988:	80800315 	stw	r2,12(r16)

//===================== SUPPORT_SD_CARD =================================================
#ifdef SUPPORT_SD_CARD

bool SD_ReadBlock512(DISK_HANDLE DiskHandle, alt_u32 PysicalSelector, alt_u8 szBuf[512]){
    return SDLIB_ReadBlock512(PysicalSelector, szBuf);
2008398c:	00854f40 	call	200854f4 <SDLIB_ReadBlock512>
    // 1DEh( 16 bytes): 3nd Partition Entry
    // 1EEh( 16 bytes): 4nd Partition Entry
    // 1FEh(  2 bytes): Executable Maker (55h AAh)
    
    // read first block (secotor 0), BPB(BIOS Parameter Block) or called as boot sector or reserved sector
    if (!pVol->ReadBlock512(pVol->DiskHandle, 0, szBlock)){
20083990:	10000526 	beq	r2,zero,200839a8 <fatMountSdcard+0x8c>
    */
        
    // check file system 
    FirstPartitionEntry = 0x1BE;
    //PartitionType = szBlock[FirstPartitionEntry + 4];
    PartitionType = szBlock[0x01C2];
20083994:	88807083 	ldbu	r2,450(r17)
    if (PartitionType == PARTITION_FAT16){
20083998:	00c00184 	movi	r3,6
2008399c:	10c01326 	beq	r2,r3,200839ec <fatMountSdcard+0xd0>
        FAT_DEBUG(("FAT16\n"));
    }else if (PartitionType == PARTITION_FAT32){
200839a0:	00c002c4 	movi	r3,11
200839a4:	10c01126 	beq	r2,r3,200839ec <fatMountSdcard+0xd0>
        FAT_DEBUG(("Fat_Mount success\n"));
        pVol->bMount = TRUE;
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
        //free((void *)hFat);
        hFat = 0;
200839a8:	0005883a 	mov	r2,zero
    }        

    return hFat;   
}
200839ac:	dfc00a17 	ldw	ra,40(sp)
200839b0:	df000917 	ldw	fp,36(sp)
200839b4:	ddc00817 	ldw	r23,32(sp)
200839b8:	dd800717 	ldw	r22,28(sp)
200839bc:	dd400617 	ldw	r21,24(sp)
200839c0:	dd000517 	ldw	r20,20(sp)
200839c4:	dcc00417 	ldw	r19,16(sp)
200839c8:	dc800317 	ldw	r18,12(sp)
200839cc:	dc400217 	ldw	r17,8(sp)
200839d0:	dc000117 	ldw	r16,4(sp)
200839d4:	dec00b04 	addi	sp,sp,44
200839d8:	f800283a 	ret
        
    //1. chek whether SD Card existed. Init SD card if it is present.
    while(!bFind && nTry++ < nMaxTry){
        bFind = SDLIB_Init();
        if (!bFind)
            usleep(100*1000);
200839dc:	010000b4 	movhi	r4,2
200839e0:	2121a804 	addi	r4,r4,-31072
200839e4:	0097dd00 	call	20097dd0 <usleep>
200839e8:	003fd806 	br	2008394c <__flash_rwdata_start+0xfffe8ae0>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
200839ec:	88c07243 	ldbu	r3,457(r17)
200839f0:	89007203 	ldbu	r4,456(r17)
200839f4:	894071c3 	ldbu	r5,455(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
200839f8:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
200839fc:	8cc07183 	ldbu	r19,454(r17)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20083a00:	81c00117 	ldw	r7,4(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083a04:	1906b03a 	or	r3,r3,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083a08:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
20083a0c:	04400034 	movhi	r17,0
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20083a10:	81000017 	ldw	r4,0(r16)
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083a14:	1946b03a 	or	r3,r3,r5
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083a18:	1806923a 	slli	r3,r3,8
        nValue |= *pMSB--;
20083a1c:	8c4b0d04 	addi	r17,r17,11316
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
20083a20:	04800034 	movhi	r18,0
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083a24:	1ce6b03a 	or	r19,r3,r19
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
20083a28:	80800415 	stw	r2,16(r16)
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20083a2c:	880d883a 	mov	r6,r17
20083a30:	980b883a 	mov	r5,r19
        FAT_DEBUG(("FAT32\n"));
    }else{        
        FAT_DEBUG(("the partition type(%d) is not supported.\n", PartitionType));
        return FALSE; // only support FAT16 in this example
    }       
    pVol->Partition_Type = PartitionType; 
20083a34:	948ba704 	addi	r18,r18,11932
                            //szBlock[FirstPartitionEntry + 8 + 1]*256 + 
                            //szBlock[FirstPartitionEntry + 8];        
    
    //3 Parsing the Volume Boot Record(BR)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
20083a38:	383ee83a 	callr	r7
20083a3c:	103fda26 	beq	r2,zero,200839a8 <__flash_rwdata_start+0xfffe8b3c>
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083a40:	89c00303 	ldbu	r7,12(r17)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083a44:	898003c3 	ldbu	r6,15(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083a48:	89400483 	ldbu	r5,18(r17)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083a4c:	88c005c3 	ldbu	r3,23(r17)
20083a50:	88800583 	ldbu	r2,22(r17)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083a54:	380e923a 	slli	r7,r7,8
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083a58:	1806923a 	slli	r3,r3,8
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083a5c:	8dc002c3 	ldbu	r23,11(r17)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083a60:	300c923a 	slli	r6,r6,8
20083a64:	8d800383 	ldbu	r22,14(r17)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083a68:	280a923a 	slli	r5,r5,8
20083a6c:	8d000443 	ldbu	r20,17(r17)
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
20083a70:	8a000403 	ldbu	r8,16(r17)
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083a74:	8f000343 	ldbu	fp,13(r17)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083a78:	18ab883a 	add	r21,r3,r2
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083a7c:	3def883a 	add	r23,r7,r23
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083a80:	35ad883a 	add	r22,r6,r22
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083a84:	2d29883a 	add	r20,r5,r20
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
20083a88:	00bfffc4 	movi	r2,-1
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083a8c:	91001104 	addi	r4,r18,68
20083a90:	000b883a 	mov	r5,zero
20083a94:	01808004 	movi	r6,512
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
    pVol->BPB_SecPerCluster = szBlock[0x0D];
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
    pVol->BPB_NumFATs = szBlock[0x10];
20083a98:	92000a15 	stw	r8,40(r18)
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
    
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083a9c:	da000015 	stw	r8,0(sp)
    //3.1  Read the Volume Boot Record(BR)
    if (!pVol->ReadBlock512(pVol->DiskHandle, FirstSectionInVolume1, szBlock)){
        FAT_DEBUG(("Read first sector in volume one fail.\n"));
        return FALSE;
    }        
    pVol->PartitionStartSecter = FirstSectionInVolume1;     
20083aa0:	94c00615 	stw	r19,24(r18)
    pVol->BPB_BytsPerSec = szBlock[0x0B+1]*256 + szBlock[0x0B];
20083aa4:	95c00715 	stw	r23,28(r18)
    pVol->BPB_SecPerCluster = szBlock[0x0D];
20083aa8:	97000815 	stw	fp,32(r18)
    pVol->BPB_RsvdSecCnt = szBlock[0x0E + 1]*256 + szBlock[0x0E]; 
20083aac:	95800915 	stw	r22,36(r18)
    pVol->BPB_NumFATs = szBlock[0x10];
    pVol->BPB_RootEntCnt = szBlock[0x11+1]*256 + szBlock[0x11]; 
20083ab0:	95000b15 	stw	r20,44(r18)
    pVol->BPB_FATSz = szBlock[0x16+1]*256 + szBlock[0x16];
20083ab4:	95400c15 	stw	r21,48(r18)
    
    // add for v2.0
    pVol->Secter_Index = -1;
20083ab8:	90809115 	stw	r2,580(r18)
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
20083abc:	008a7ac0 	call	2008a7ac <memset>
    
    if (pVol->Partition_Type == PARTITION_FAT32){
20083ac0:	90c00417 	ldw	r3,16(r18)
20083ac4:	008002c4 	movi	r2,11
20083ac8:	da000017 	ldw	r8,0(sp)
20083acc:	18801326 	beq	r3,r2,20083b1c <fatMountSdcard+0x200>
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
        //pVol->BPB_RootEntCnt = fatArray2Value(&szBlock[0x2C], 4);  // BPB_RootClus            
    }
    
    if (pVol->BPB_BytsPerSec != MY_SECTER_SIZE){
20083ad0:	00808004 	movi	r2,512
20083ad4:	b8bfb41e 	bne	r23,r2,200839a8 <__flash_rwdata_start+0xfffe8b3c>
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083ad8:	a004917a 	slli	r2,r20,5
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083adc:	aa09383a 	mul	r4,r21,r8
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
20083ae0:	9d87883a 	add	r3,r19,r22
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083ae4:	10807fc4 	addi	r2,r2,511
20083ae8:	1004d27a 	srli	r2,r2,9
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083aec:	20c9883a 	add	r4,r4,r3
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
20083af0:	e038927a 	slli	fp,fp,9
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
20083af4:	2085883a 	add	r2,r4,r2
20083af8:	80801015 	stw	r2,64(r16)
    if (bSuccess){
        FAT_DEBUG(("Fat_Mount success\n"));
    }else{        
        FAT_DEBUG(("Fat_Mount fail\n"));
    }        
    pVol->bMount = bSuccess;
20083afc:	00800044 	movi	r2,1
20083b00:	80800515 	stw	r2,20(r16)
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
20083b04:	00800034 	movhi	r2,0
    FAT_DEBUG(("Number of Copyies of FAT: %02Xh(%d)\n", pVol->BPB_NumFATs, pVol->BPB_NumFATs));
    FAT_DEBUG(("Maxmun Root Directory Entries: %04Xh(%d)\n", pVol->BPB_RootEntCnt, pVol->BPB_RootEntCnt));
    FAT_DEBUG(("Sectors Per FAT: %04Xh(%d)\n", pVol->BPB_FATSz, pVol->BPB_FATSz));
#endif    
    //
    pVol->FatEntrySecter = pVol->PartitionStartSecter + pVol->BPB_RsvdSecCnt;
20083b08:	80c00e15 	stw	r3,56(r16)
    pVol->RootDirectoryEntrySecter = pVol->FatEntrySecter + pVol->BPB_NumFATs * pVol->BPB_FATSz;
20083b0c:	81000f15 	stw	r4,60(r16)
    pVol->DataEntrySecter = pVol->RootDirectoryEntrySecter + ((pVol->BPB_RootEntCnt*32)+(pVol->BPB_BytsPerSec-1))/pVol->BPB_BytsPerSec;
    
    // read FAT table into memory
    pVol->nBytesPerCluster = pVol->BPB_BytsPerSec * pVol->BPB_SecPerCluster;
20083b10:	87000d15 	stw	fp,52(r16)
        FAT_DEBUG(("Cannot find SD card.\n"));
        return hFat;
    }    
    
    //hFat = malloc(sizeof(VOLUME_INFO));
    hFat = &vInfo;
20083b14:	108ba704 	addi	r2,r2,11932
20083b18:	003fa406 	br	200839ac <__flash_rwdata_start+0xfffe8b40>
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
        nValue |= *pMSB--;
20083b1c:	8d4009c3 	ldbu	r21,39(r17)
20083b20:	89000983 	ldbu	r4,38(r17)
20083b24:	88c00943 	ldbu	r3,37(r17)
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083b28:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
20083b2c:	88800903 	ldbu	r2,36(r17)
20083b30:	a92ab03a 	or	r21,r21,r4
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083b34:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
20083b38:	a8eab03a 	or	r21,r21,r3
unsigned int fatArray2Value(unsigned char *pValue, unsigned int nNum){
    alt_u8 *pMSB = (pValue + nNum - 1);
    alt_u32 nValue;
    int i;
    for(i=0;i<nNum;i++){
        nValue <<= 8;
20083b3c:	a82a923a 	slli	r21,r21,8
        nValue |= *pMSB--;
20083b40:	a8aab03a 	or	r21,r21,r2
    // add for v2.0
    pVol->Secter_Index = -1;
    memset(pVol->Secter_Data, 0, MY_SECTER_SIZE); // 512 bytes
    
    if (pVol->Partition_Type == PARTITION_FAT32){
        pVol->BPB_FATSz = fatArray2Value(&szBlock[0x24], 4);  // BPB_FATSz32
20083b44:	95400c15 	stw	r21,48(r18)
20083b48:	003fe106 	br	20083ad0 <__flash_rwdata_start+0xfffe8c64>

20083b4c <debug_output>:
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
20083b4c:	008a8fc1 	jmpi	2008a8fc <printf>

20083b50 <myprintf>:
}

int myprintf(char *format, ...){
20083b50:	deff7b04 	addi	sp,sp,-532
20083b54:	dfc08115 	stw	ra,516(sp)
20083b58:	dc008015 	stw	r16,512(sp)
20083b5c:	d9408215 	stw	r5,520(sp)
20083b60:	d9808315 	stw	r6,524(sp)
20083b64:	d9c08415 	stw	r7,528(sp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
20083b68:	01408004 	movi	r5,512
20083b6c:	200d883a 	mov	r6,r4
20083b70:	d9c08204 	addi	r7,sp,520
20083b74:	d809883a 	mov	r4,sp
20083b78:	008ed800 	call	2008ed80 <vsnprintf>
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
20083b7c:	d809883a 	mov	r4,sp
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
    rc = vsnprintf(szText, 512, format, paramList);
20083b80:	1021883a 	mov	r16,r2
#include "debug.h"


void debug_output(char *pMessage){
    
    printf(pMessage);
20083b84:	008a8fc0 	call	2008a8fc <printf>
    va_end(paramList);
    
    debug_output(szText);

    return rc;    
}
20083b88:	8005883a 	mov	r2,r16
20083b8c:	dfc08117 	ldw	ra,516(sp)
20083b90:	dc008017 	ldw	r16,512(sp)
20083b94:	dec08504 	addi	sp,sp,532
20083b98:	f800283a 	ret

20083b9c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
20083b9c:	defff804 	addi	sp,sp,-32
20083ba0:	dc800615 	stw	r18,24(sp)
20083ba4:	dfc00715 	stw	ra,28(sp)
20083ba8:	dc400515 	stw	r17,20(sp)
20083bac:	dc000415 	stw	r16,16(sp)
20083bb0:	2825883a 	mov	r18,r5
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20083bb4:	01400b0e 	bge	zero,r5,20083be4 <myprintf_hexarray+0x48>
20083bb8:	2021883a 	mov	r16,r4
20083bbc:	2163883a 	add	r17,r4,r5
        sprintf(szText, "[%02X]", *(pHex+i));
20083bc0:	81800003 	ldbu	r6,0(r16)
20083bc4:	01400034 	movhi	r5,0
20083bc8:	d809883a 	mov	r4,sp
20083bcc:	2940ac04 	addi	r5,r5,688
20083bd0:	008aac00 	call	2008aac0 <sprintf>
20083bd4:	84000044 	addi	r16,r16,1
        DEBUG((szText));
20083bd8:	d809883a 	mov	r4,sp
20083bdc:	0083b500 	call	20083b50 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
20083be0:	847ff71e 	bne	r16,r17,20083bc0 <__flash_rwdata_start+0xfffe8d54>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
}
20083be4:	9005883a 	mov	r2,r18
20083be8:	dfc00717 	ldw	ra,28(sp)
20083bec:	dc800617 	ldw	r18,24(sp)
20083bf0:	dc400517 	ldw	r17,20(sp)
20083bf4:	dc000417 	ldw	r16,16(sp)
20083bf8:	dec00804 	addi	sp,sp,32
20083bfc:	f800283a 	ret

20083c00 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
20083c00:	defff804 	addi	sp,sp,-32
20083c04:	dc800615 	stw	r18,24(sp)
20083c08:	dfc00715 	stw	ra,28(sp)
20083c0c:	dc400515 	stw	r17,20(sp)
20083c10:	dc000415 	stw	r16,16(sp)
20083c14:	2825883a 	mov	r18,r5
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20083c18:	01400c0e 	bge	zero,r5,20083c4c <myprintf_dwordarray+0x4c>
20083c1c:	2021883a 	mov	r16,r4
20083c20:	0023883a 	mov	r17,zero
        sprintf(szText, "[%08X]", *(pArray+i));
20083c24:	81800017 	ldw	r6,0(r16)
20083c28:	01400034 	movhi	r5,0
20083c2c:	2940ae04 	addi	r5,r5,696
20083c30:	d809883a 	mov	r4,sp
20083c34:	008aac00 	call	2008aac0 <sprintf>
        DEBUG((szText));
20083c38:	d809883a 	mov	r4,sp
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20083c3c:	8c400044 	addi	r17,r17,1
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
20083c40:	0083b500 	call	20083b50 <myprintf>
20083c44:	84000104 	addi	r16,r16,4
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
20083c48:	8cbff61e 	bne	r17,r18,20083c24 <__flash_rwdata_start+0xfffe8db8>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
}
20083c4c:	9005883a 	mov	r2,r18
20083c50:	dfc00717 	ldw	ra,28(sp)
20083c54:	dc800617 	ldw	r18,24(sp)
20083c58:	dc400517 	ldw	r17,20(sp)
20083c5c:	dc000417 	ldw	r16,16(sp)
20083c60:	dec00804 	addi	sp,sp,32
20083c64:	f800283a 	ret

20083c68 <mmc_send_status.constprop.4>:
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083c68:	20801e0b 	ldhu	r2,120(r4)
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083c6c:	defff004 	addi	sp,sp,-64
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
20083c70:	00c00344 	movi	r3,13
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083c74:	1004943a 	slli	r2,r2,16
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083c78:	dd800e15 	stw	r22,56(sp)
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
20083c7c:	d8c0000d 	sth	r3,0(sp)
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20083c80:	05bf7e74 	movhi	r22,65017
static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
20083c84:	00c00544 	movi	r3,21
	mmc->rca = 0;

	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
20083c88:	dd400d15 	stw	r21,52(sp)
20083c8c:	dd000c15 	stw	r20,48(sp)
20083c90:	dcc00b15 	stw	r19,44(sp)
20083c94:	dc800a15 	stw	r18,40(sp)
20083c98:	dc400915 	stw	r17,36(sp)
20083c9c:	dc000815 	stw	r16,32(sp)
20083ca0:	dfc00f15 	stw	ra,60(sp)
20083ca4:	2027883a 	mov	r19,r4
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20083ca8:	b5902004 	addi	r22,r22,16512
static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
20083cac:	d8c00115 	stw	r3,4(sp)
	cmd.cmdarg = mmc->rca << 16;
20083cb0:	d8800215 	stw	r2,8(sp)
	return 0;
}

static int mmc_send_status(struct mmc *mmc, int timeout) {
	struct mmc_cmd cmd;
	int err, retries = 5;
20083cb4:	04800144 	movi	r18,5

	cmd.cmdidx = MMC_CMD_SEND_STATUS;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083cb8:	0440fa04 	movi	r17,1000

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
20083cbc:	05438004 	movi	r21,3584
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20083cc0:	04001904 	movi	r16,100
		} else if (--retries < 0)
			return err;

		udelay(1000);

	} while (timeout--);
20083cc4:	053fffc4 	movi	r20,-1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083cc8:	98802417 	ldw	r2,144(r19)
20083ccc:	9809883a 	mov	r4,r19
20083cd0:	d80b883a 	mov	r5,sp
20083cd4:	000d883a 	mov	r6,zero
20083cd8:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;

	do {
		err = mmc_send_cmd(mmc, &cmd, NULL);
		if (!err) {
20083cdc:	1000171e 	bne	r2,zero,20083d3c <mmc_send_status.constprop.4+0xd4>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
20083ce0:	d9400317 	ldw	r5,12(sp)
20083ce4:	2880400c 	andi	r2,r5,256
20083ce8:	10000226 	beq	r2,zero,20083cf4 <mmc_send_status.constprop.4+0x8c>
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
20083cec:	2887800c 	andi	r2,r5,7680
20083cf0:	1540231e 	bne	r2,r21,20083d80 <mmc_send_status.constprop.4+0x118>
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
20083cf4:	2d84703a 	and	r2,r5,r22
20083cf8:	1000131e 	bne	r2,zero,20083d48 <mmc_send_status.constprop.4+0xe0>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20083cfc:	dc000715 	stw	r16,28(sp)
20083d00:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
20083d04:	dc000715 	stw	r16,28(sp)
		while (us--)
20083d08:	d8800717 	ldw	r2,28(sp)
20083d0c:	10ffffc4 	addi	r3,r2,-1
20083d10:	d8c00715 	stw	r3,28(sp)
20083d14:	103ffc1e 	bne	r2,zero,20083d08 <__flash_rwdata_start+0xfffe8e9c>
20083d18:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20083d1c:	283ff91e 	bne	r5,zero,20083d04 <__flash_rwdata_start+0xfffe8e98>
		} else if (--retries < 0)
			return err;

		udelay(1000);

	} while (timeout--);
20083d20:	8c7fffc4 	addi	r17,r17,-1
20083d24:	8d3fe81e 	bne	r17,r20,20083cc8 <__flash_rwdata_start+0xfffe8e5c>

	if (timeout <= 0) {
		printf("Timeout waiting card ready\n\r");
20083d28:	01000034 	movhi	r4,0
20083d2c:	2100b604 	addi	r4,r4,728
20083d30:	008a8fc0 	call	2008a8fc <printf>
		return TIMEOUT;
20083d34:	00bffb44 	movi	r2,-19
20083d38:	00000706 	br	20083d58 <mmc_send_status.constprop.4+0xf0>
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
				return COMM_ERR;
			}
		} else if (--retries < 0)
20083d3c:	94bfffc4 	addi	r18,r18,-1
20083d40:	903fee0e 	bge	r18,zero,20083cfc <__flash_rwdata_start+0xfffe8e90>
20083d44:	00000406 	br	20083d58 <mmc_send_status.constprop.4+0xf0>
			if ((cmd.response[0] & MMC_STATUS_RDY_FOR_DATA)
					&& (cmd.response[0] & MMC_STATUS_CURR_STATE) !=
					MMC_STATE_PRG)
				break;
			else if (cmd.response[0] & MMC_STATUS_MASK) {
				printf("Status Error: 0x%08X\n\r", cmd.response[0]);
20083d48:	01000034 	movhi	r4,0
20083d4c:	2100b004 	addi	r4,r4,704
20083d50:	008a8fc0 	call	2008a8fc <printf>
				return COMM_ERR;
20083d54:	00bffb84 	movi	r2,-18
		printf("Timeout waiting card ready\n\r");
		return TIMEOUT;
	}

	return 0;
}
20083d58:	dfc00f17 	ldw	ra,60(sp)
20083d5c:	dd800e17 	ldw	r22,56(sp)
20083d60:	dd400d17 	ldw	r21,52(sp)
20083d64:	dd000c17 	ldw	r20,48(sp)
20083d68:	dcc00b17 	ldw	r19,44(sp)
20083d6c:	dc800a17 	ldw	r18,40(sp)
20083d70:	dc400917 	ldw	r17,36(sp)
20083d74:	dc000817 	ldw	r16,32(sp)
20083d78:	dec01004 	addi	sp,sp,64
20083d7c:	f800283a 	ret

		udelay(1000);

	} while (timeout--);

	if (timeout <= 0) {
20083d80:	883fe926 	beq	r17,zero,20083d28 <__flash_rwdata_start+0xfffe8ebc>
		printf("Timeout waiting card ready\n\r");
		return TIMEOUT;
	}

	return 0;
20083d84:	0005883a 	mov	r2,zero
20083d88:	003ff306 	br	20083d58 <__flash_rwdata_start+0xfffe8eec>

20083d8c <mmc_startup>:
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083d8c:	defedf04 	addi	sp,sp,-1156
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
20083d90:	00c00084 	movi	r3,2

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083d94:	20802417 	ldw	r2,144(r4)
	char ext_csd[512];
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
20083d98:	d8c1070d 	sth	r3,1052(sp)
	cmd.resp_type = MMC_RSP_R2;
20083d9c:	00c001c4 	movi	r3,7
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083da0:	dc011715 	stw	r16,1116(sp)
20083da4:	dfc12015 	stw	ra,1152(sp)
20083da8:	df011f15 	stw	fp,1148(sp)
20083dac:	ddc11e15 	stw	r23,1144(sp)
20083db0:	dd811d15 	stw	r22,1140(sp)
20083db4:	dd411c15 	stw	r21,1136(sp)
20083db8:	dd011b15 	stw	r20,1132(sp)
20083dbc:	dcc11a15 	stw	r19,1128(sp)
20083dc0:	dc811915 	stw	r18,1124(sp)
20083dc4:	dc411815 	stw	r17,1120(sp)
	char test_csd[512];
	int timeout = 1000;

	/* Put the Card in Identify Mode */
	cmd.cmdidx = MMC_CMD_ALL_SEND_CID; /* cmd not supported in spi */
	cmd.resp_type = MMC_RSP_R2;
20083dc8:	d8c10815 	stw	r3,1056(sp)
	cmd.cmdarg = 0;
20083dcc:	d8010915 	stw	zero,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083dd0:	d9410704 	addi	r5,sp,1052
20083dd4:	000d883a 	mov	r6,zero
		mmc->card_caps |= MMC_MODE_HS;

	return 0;
}

static int mmc_startup(struct mmc *mmc) {
20083dd8:	2021883a 	mov	r16,r4

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083ddc:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083de0:	10000c26 	beq	r2,zero,20083e14 <mmc_startup+0x88>
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	return 0;
}
20083de4:	dfc12017 	ldw	ra,1152(sp)
20083de8:	df011f17 	ldw	fp,1148(sp)
20083dec:	ddc11e17 	ldw	r23,1144(sp)
20083df0:	dd811d17 	ldw	r22,1140(sp)
20083df4:	dd411c17 	ldw	r21,1136(sp)
20083df8:	dd011b17 	ldw	r20,1132(sp)
20083dfc:	dcc11a17 	ldw	r19,1128(sp)
20083e00:	dc811917 	ldw	r18,1124(sp)
20083e04:	dc411817 	ldw	r17,1120(sp)
20083e08:	dc011717 	ldw	r16,1116(sp)
20083e0c:	dec12104 	addi	sp,sp,1156
20083e10:	f800283a 	ret
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	memcpy(mmc->cid, cmd.response, 16);
20083e14:	81001a04 	addi	r4,r16,104
20083e18:	d9410a04 	addi	r5,sp,1064
20083e1c:	01800404 	movi	r6,16
20083e20:	008a6740 	call	2008a674 <memcpy>
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
	cmd.cmdarg = mmc->rca << 16;
20083e24:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083e28:	80c02417 	ldw	r3,144(r16)
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20083e2c:	010000c4 	movi	r4,3
	cmd.cmdarg = mmc->rca << 16;
20083e30:	1004943a 	slli	r2,r2,16
	/*
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
20083e34:	d901070d 	sth	r4,1052(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083e38:	d9410704 	addi	r5,sp,1052
	 * For MMC cards, set the Relative Address.
	 * For SD cards, get the Relatvie Address.
	 * This also puts the cards into Standby State
	 */
	cmd.cmdidx = SD_CMD_SEND_RELATIVE_ADDR;
	cmd.cmdarg = mmc->rca << 16;
20083e3c:	d8810915 	stw	r2,1060(sp)
	cmd.resp_type = MMC_RSP_R6;
20083e40:	00800544 	movi	r2,21
20083e44:	d8810815 	stw	r2,1056(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083e48:	8009883a 	mov	r4,r16
20083e4c:	000d883a 	mov	r6,zero
20083e50:	183ee83a 	callr	r3
	cmd.cmdarg = mmc->rca << 16;
	cmd.resp_type = MMC_RSP_R6;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083e54:	103fe31e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
		return err;

	if (IS_SD(mmc))
20083e58:	80800a17 	ldw	r2,40(r16)
20083e5c:	108000ac 	andhi	r2,r2,2
20083e60:	1000751e 	bne	r2,zero,20084038 <mmc_startup+0x2ac>
20083e64:	80801e0b 	ldhu	r2,120(r16)
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
	cmd.resp_type = MMC_RSP_R2;
	cmd.cmdarg = mmc->rca << 16;
20083e68:	1004943a 	slli	r2,r2,16

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20083e6c:	01000244 	movi	r4,9

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083e70:	80c02417 	ldw	r3,144(r16)

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;

	/* Get the Card-Specific Data */
	cmd.cmdidx = MMC_CMD_SEND_CSD;
20083e74:	d901070d 	sth	r4,1052(sp)
	cmd.resp_type = MMC_RSP_R2;
20083e78:	010001c4 	movi	r4,7
20083e7c:	d9010815 	stw	r4,1056(sp)
	cmd.cmdarg = mmc->rca << 16;
20083e80:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083e84:	8009883a 	mov	r4,r16
20083e88:	d9410704 	addi	r5,sp,1052
20083e8c:	000d883a 	mov	r6,zero
20083e90:	183ee83a 	callr	r3
20083e94:	1023883a 	mov	r17,r2
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	mmc_send_status(mmc, timeout);
20083e98:	8009883a 	mov	r4,r16
20083e9c:	0083c680 	call	20083c68 <mmc_send_status.constprop.4>

	if (err)
20083ea0:	8800691e 	bne	r17,zero,20084048 <mmc_startup+0x2bc>
		return err;

	mmc->csd[0] = cmd.response[0];
20083ea4:	d8810a17 	ldw	r2,1064(sp)
	mmc->csd[1] = cmd.response[1];
20083ea8:	d9810b17 	ldw	r6,1068(sp)
	mmc->csd[2] = cmd.response[2];
20083eac:	d8c10c17 	ldw	r3,1072(sp)
	mmc->csd[3] = cmd.response[3];
20083eb0:	d9c10d17 	ldw	r7,1076(sp)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20083eb4:	81000a17 	ldw	r4,40(r16)
	mmc_send_status(mmc, timeout);

	if (err)
		return err;

	mmc->csd[0] = cmd.response[0];
20083eb8:	80801615 	stw	r2,88(r16)
	mmc->csd[1] = cmd.response[1];
20083ebc:	81801715 	stw	r6,92(r16)
	mmc->csd[2] = cmd.response[2];
20083ec0:	80c01815 	stw	r3,96(r16)
	mmc->csd[3] = cmd.response[3];
20083ec4:	81c01915 	stw	r7,100(r16)

	if (mmc->version == MMC_VERSION_UNKNOWN) {
20083ec8:	01400074 	movhi	r5,1
20083ecc:	21409526 	beq	r4,r5,20084124 <mmc_startup+0x398>
20083ed0:	220000ac 	andhi	r8,r4,2
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20083ed4:	1008d07a 	srli	r4,r2,1
20083ed8:	01400034 	movhi	r5,0
20083edc:	29411204 	addi	r5,r5,1096
			break;
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20083ee0:	108001cc 	andi	r2,r2,7
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];
20083ee4:	21000f0c 	andi	r4,r4,60
20083ee8:	2909883a 	add	r4,r5,r4
			break;
		}
	}

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
20083eec:	1085883a 	add	r2,r2,r2
20083ef0:	01400034 	movhi	r5,0
20083ef4:	29412204 	addi	r5,r5,1160
20083ef8:	1085883a 	add	r2,r2,r2
20083efc:	2885883a 	add	r2,r5,r2
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083f00:	300ad43a 	srli	r5,r6,16

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083f04:	22400017 	ldw	r9,0(r4)
20083f08:	11000017 	ldw	r4,0(r2)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083f0c:	294003cc 	andi	r5,r5,15
20083f10:	00800044 	movi	r2,1

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083f14:	4909383a 	mul	r4,r9,r4

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083f18:	114a983a 	sll	r5,r2,r5

	/* divide frequency by 10, since the mults are 10x bigger */
	freq = fbase[(cmd.response[0] & 0x7)];
	mult = multipliers[((cmd.response[0] >> 3) & 0xf)];

	mmc->tran_speed = freq * mult;
20083f1c:	81001f15 	stw	r4,124(r16)

	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);
20083f20:	81402015 	stw	r5,128(r16)

	if (IS_SD(mmc))
20083f24:	40005326 	beq	r8,zero,20084074 <mmc_startup+0x2e8>
		mmc->write_bl_len = mmc->read_bl_len;
20083f28:	81402115 	stw	r5,132(r16)
20083f2c:	280f883a 	mov	r7,r5
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);

	if (mmc->high_capacity) {
20083f30:	80800e17 	ldw	r2,56(r16)
20083f34:	10004626 	beq	r2,zero,20084050 <mmc_startup+0x2c4>
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
20083f38:	31800fcc 	andi	r6,r6,63
20083f3c:	300c943a 	slli	r6,r6,16
20083f40:	1806d43a 	srli	r3,r3,16
20083f44:	00800284 	movi	r2,10
20083f48:	30c6b03a 	or	r3,r6,r3
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
20083f4c:	18c00044 	addi	r3,r3,1
20083f50:	1884983a 	sll	r2,r3,r2
	mmc->capacity *= mmc->read_bl_len;

	if (mmc->read_bl_len > 512)
20083f54:	00c08004 	movi	r3,512
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
	}

	mmc->capacity = (csize + 1) << (cmult + 2);
	mmc->capacity *= mmc->read_bl_len;
20083f58:	1145383a 	mul	r2,r2,r5
20083f5c:	80802315 	stw	r2,140(r16)

	if (mmc->read_bl_len > 512)
20083f60:	1940010e 	bge	r3,r5,20083f68 <mmc_startup+0x1dc>
		mmc->read_bl_len = 512;
20083f64:	80c02015 	stw	r3,128(r16)

	if (mmc->write_bl_len > 512)
20083f68:	00808004 	movi	r2,512
20083f6c:	11c0012e 	bgeu	r2,r7,20083f74 <mmc_startup+0x1e8>
		mmc->write_bl_len = 512;
20083f70:	80802115 	stw	r2,132(r16)

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083f74:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083f78:	80c02417 	ldw	r3,144(r16)

	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20083f7c:	010001c4 	movi	r4,7
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20083f80:	1004943a 	slli	r2,r2,16
	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
20083f84:	04400544 	movi	r17,21

	if (mmc->write_bl_len > 512)
		mmc->write_bl_len = 512;

	/* Select the card, and put it into Transfer Mode */
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
20083f88:	d901070d 	sth	r4,1052(sp)
	cmd.resp_type = MMC_RSP_R1;
20083f8c:	dc410815 	stw	r17,1056(sp)
	cmd.cmdarg = mmc->rca << 16;
20083f90:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20083f94:	8009883a 	mov	r4,r16
20083f98:	d9410704 	addi	r5,sp,1052
20083f9c:	000d883a 	mov	r6,zero
20083fa0:	183ee83a 	callr	r3
	cmd.cmdidx = MMC_CMD_SELECT_CARD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20083fa4:	103f8f1e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20083fa8:	80800a17 	ldw	r2,40(r16)

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
20083fac:	013fffc4 	movi	r4,-1
		return err;

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20083fb0:	00c00044 	movi	r3,1
	mmc->part_config = MMCPART_NOAVAILABLE;
20083fb4:	81001e85 	stb	r4,122(r16)
		return err;

	/*
	 * For SD, its erase group is always one sector
	 */
	mmc->erase_grp_size = 1;
20083fb8:	80c02215 	stw	r3,136(r16)
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
20083fbc:	110000ac 	andhi	r4,r2,2
20083fc0:	2000311e 	bne	r4,zero,20084088 <mmc_startup+0x2fc>
20083fc4:	01000074 	movhi	r4,1
20083fc8:	21000fc4 	addi	r4,r4,63
20083fcc:	2080c936 	bltu	r4,r2,200842f4 <mmc_startup+0x568>
static int mmc_change_freq(struct mmc *mmc) {
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
20083fd0:	80001115 	stw	zero,68(r16)
20083fd4:	0007883a 	mov	r3,zero

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20083fd8:	85c01217 	ldw	r23,72(r16)

	if (IS_SD(mmc)) {
20083fdc:	108000ac 	andhi	r2,r2,2

	if (err)
		return err;

	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;
20083fe0:	b8c6703a 	and	r3,r23,r3
20083fe4:	80c01115 	stw	r3,68(r16)

	if (IS_SD(mmc)) {
20083fe8:	10007226 	beq	r2,zero,200841b4 <mmc_startup+0x428>
		if (mmc->card_caps & MMC_MODE_4BIT) {
20083fec:	1880400c 	andi	r2,r3,256
20083ff0:	1001351e 	bne	r2,zero,200844c8 <mmc_startup+0x73c>
				return err;

			mmc_set_bus_width(mmc, 4);
		}

		if (mmc->card_caps & MMC_MODE_HS)
20083ff4:	18c0004c 	andi	r3,r3,1
20083ff8:	18012926 	beq	r3,zero,200844a0 <mmc_startup+0x714>
			mmc->tran_speed = 50000000;
20083ffc:	0080bef4 	movhi	r2,763
20084000:	10bc2004 	addi	r2,r2,-3968
20084004:	80801f15 	stw	r2,124(r16)

	mmc_set_ios(mmc);
}

static void mmc_set_clock(struct mmc *mmc, uint clock) {
	if (clock > mmc->f_max)
20084008:	80c00d17 	ldw	r3,52(r16)
2008400c:	1880012e 	bgeu	r3,r2,20084014 <mmc_startup+0x288>
20084010:	1805883a 	mov	r2,r3
		clock = mmc->f_max;

	if (clock < mmc->f_min)
20084014:	80c00c17 	ldw	r3,48(r16)
20084018:	10c0012e 	bgeu	r2,r3,20084020 <mmc_startup+0x294>
2008401c:	1805883a 	mov	r2,r3
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084020:	80c02517 	ldw	r3,148(r16)
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
20084024:	80801015 	stw	r2,64(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084028:	8009883a 	mov	r4,r16
2008402c:	183ee83a 	callr	r3
		}
	}

	mmc_set_clock(mmc, mmc->tran_speed);

	return 0;
20084030:	0005883a 	mov	r2,zero
20084034:	003f6b06 	br	20083de4 <__flash_rwdata_start+0xfffe8f78>

	if (err)
		return err;

	if (IS_SD(mmc))
		mmc->rca = (cmd.response[0] >> 16) & 0xffff;
20084038:	d8c10a8b 	ldhu	r3,1066(sp)
2008403c:	1805883a 	mov	r2,r3
20084040:	80c01e0d 	sth	r3,120(r16)
20084044:	003f8806 	br	20083e68 <__flash_rwdata_start+0xfffe8ffc>
20084048:	8805883a 	mov	r2,r17
2008404c:	003f6506 	br	20083de4 <__flash_rwdata_start+0xfffe8f78>
	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20084050:	1804d3fa 	srli	r2,r3,15

	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20084054:	1808d7ba 	srli	r4,r3,30
20084058:	3180ffcc 	andi	r6,r6,1023
2008405c:	3187883a 	add	r3,r6,r6
20084060:	18c7883a 	add	r3,r3,r3
		cmult = (mmc->csd[2] & 0x00038000) >> 15;
20084064:	108001cc 	andi	r2,r2,7

	if (mmc->high_capacity) {
		csize = (mmc->csd[1] & 0x3f) << 16 | (mmc->csd[2] & 0xffff0000) >> 16;
		cmult = 8;
	} else {
		csize = (mmc->csd[1] & 0x3ff) << 2 | (mmc->csd[2] & 0xc0000000) >> 30;
20084068:	1906b03a 	or	r3,r3,r4
2008406c:	10800084 	addi	r2,r2,2
20084070:	003fb606 	br	20083f4c <__flash_rwdata_start+0xfffe90e0>
	mmc->read_bl_len = 1 << ((cmd.response[1] >> 16) & 0xf);

	if (IS_SD(mmc))
		mmc->write_bl_len = mmc->read_bl_len;
	else
		mmc->write_bl_len = 1 << ((cmd.response[3] >> 22) & 0xf);
20084074:	380ed5ba 	srli	r7,r7,22
20084078:	39c003cc 	andi	r7,r7,15
2008407c:	11ce983a 	sll	r7,r2,r7
20084080:	81c02115 	stw	r7,132(r16)
20084084:	003faa06 	br	20083f30 <__flash_rwdata_start+0xfffe90c4>
20084088:	dc810004 	addi	r18,sp,1024
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
2008408c:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084090:	80c02417 	ldw	r3,144(r16)

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
20084094:	01000dc4 	movi	r4,55
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;
20084098:	1004943a 	slli	r2,r2,16
	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
2008409c:	04400544 	movi	r17,21

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
200840a0:	d901000d 	sth	r4,1024(sp)
	static uint switch_status[16];
	struct mmc_data data;
	int timeout;

	//uint* scr = alt_uncached_malloc(8);
	mmc->card_caps = 0;
200840a4:	80001115 	stw	zero,68(r16)

	/* Read the SCR to find out if this card supports higher speeds */
	cmd.cmdidx = MMC_CMD_APP_CMD;
	cmd.resp_type = MMC_RSP_R1;
200840a8:	dc410115 	stw	r17,1028(sp)
	cmd.cmdarg = mmc->rca << 16;
200840ac:	d8810215 	stw	r2,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840b0:	8009883a 	mov	r4,r16
200840b4:	900b883a 	mov	r5,r18
200840b8:	000d883a 	mov	r6,zero
200840bc:	183ee83a 	callr	r3
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = mmc->rca << 16;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
200840c0:	103f481e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
200840c4:	00800cc4 	movi	r2,51
	cmd.resp_type = MMC_RSP_R1;
200840c8:	dc410115 	stw	r17,1028(sp)
	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
200840cc:	d881000d 	sth	r2,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
200840d0:	d8010215 	stw	zero,1032(sp)
200840d4:	04400104 	movi	r17,4
200840d8:	d5601604 	addi	r21,gp,-32680

	timeout = 3;

	retry_scr: data.dest = (char *) scr;
	data.blocksize = 8;
200840dc:	05000204 	movi	r20,8
	data.blocks = 1;
200840e0:	04c00044 	movi	r19,1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840e4:	80802417 	ldw	r2,144(r16)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	timeout = 3;

	retry_scr: data.dest = (char *) scr;
200840e8:	dd411215 	stw	r21,1096(sp)
	data.blocksize = 8;
200840ec:	dd011515 	stw	r20,1108(sp)
	data.blocks = 1;
200840f0:	dcc11415 	stw	r19,1104(sp)
	data.flags = MMC_DATA_READ;
200840f4:	dcc11315 	stw	r19,1100(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200840f8:	8009883a 	mov	r4,r16
200840fc:	900b883a 	mov	r5,r18
20084100:	d9811204 	addi	r6,sp,1096
20084104:	103ee83a 	callr	r2
	data.blocks = 1;
	data.flags = MMC_DATA_READ;

	err = mmc_send_cmd(mmc, &cmd, &data);

	if (err) {
20084108:	10012026 	beq	r2,zero,2008458c <mmc_startup+0x800>
2008410c:	8c7fffc4 	addi	r17,r17,-1
		if (timeout--)
20084110:	883ff41e 	bne	r17,zero,200840e4 <__flash_rwdata_start+0xfffe9278>
	if (IS_SD(mmc))
		err = sd_change_freq(mmc);
	else
		err = mmc_change_freq(mmc);

	if (err)
20084114:	103f331e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
20084118:	80800a17 	ldw	r2,40(r16)
2008411c:	80c01117 	ldw	r3,68(r16)
20084120:	003fad06 	br	20083fd8 <__flash_rwdata_start+0xfffe916c>
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;
20084124:	100ad6ba 	srli	r5,r2,26

		switch (version) {
20084128:	02000104 	movi	r8,4
	mmc->csd[1] = cmd.response[1];
	mmc->csd[2] = cmd.response[2];
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;
2008412c:	294003cc 	andi	r5,r5,15

		switch (version) {
20084130:	41410436 	bltu	r8,r5,20084544 <mmc_startup+0x7b8>
20084134:	280a90ba 	slli	r5,r5,2
20084138:	01080234 	movhi	r4,8200
2008413c:	21105404 	addi	r4,r4,16720
20084140:	290b883a 	add	r5,r5,r4
20084144:	29000017 	ldw	r4,0(r5)
		case 3:
			mmc->version = MMC_VERSION_3;
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
			break;
20084148:	0011883a 	mov	r8,zero
	mmc->csd[3] = cmd.response[3];

	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;

		switch (version) {
2008414c:	2000683a 	jmp	r4
20084150:	20084194 	ori	zero,r4,8454
20084154:	20084184 	addi	zero,r4,8454
20084158:	20084174 	orhi	zero,r4,8453
2008415c:	20084164 	muli	zero,r4,8453
20084160:	200841a4 	muli	zero,r4,8454
			break;
		case 2:
			mmc->version = MMC_VERSION_2_2;
			break;
		case 3:
			mmc->version = MMC_VERSION_3;
20084164:	01000074 	movhi	r4,1
20084168:	21000c04 	addi	r4,r4,48
2008416c:	81000a15 	stw	r4,40(r16)
			break;
20084170:	003f5806 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>
			break;
		case 1:
			mmc->version = MMC_VERSION_1_4;
			break;
		case 2:
			mmc->version = MMC_VERSION_2_2;
20084174:	01000074 	movhi	r4,1
20084178:	21000884 	addi	r4,r4,34
2008417c:	81000a15 	stw	r4,40(r16)
			break;
20084180:	003f5406 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>
		switch (version) {
		case 0:
			mmc->version = MMC_VERSION_1_2;
			break;
		case 1:
			mmc->version = MMC_VERSION_1_4;
20084184:	01000074 	movhi	r4,1
20084188:	21000504 	addi	r4,r4,20
2008418c:	81000a15 	stw	r4,40(r16)
			break;
20084190:	003f5006 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>
	if (mmc->version == MMC_VERSION_UNKNOWN) {
		int version = (cmd.response[0] >> 26) & 0xf;

		switch (version) {
		case 0:
			mmc->version = MMC_VERSION_1_2;
20084194:	01000074 	movhi	r4,1
20084198:	21000484 	addi	r4,r4,18
2008419c:	81000a15 	stw	r4,40(r16)
			break;
200841a0:	003f4c06 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>
			break;
		case 3:
			mmc->version = MMC_VERSION_3;
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
200841a4:	01000074 	movhi	r4,1
200841a8:	21001004 	addi	r4,r4,64
200841ac:	81000a15 	stw	r4,40(r16)
			break;
200841b0:	003f4806 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>
		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
200841b4:	bdc0c00c 	andi	r23,r23,768
200841b8:	b82ed23a 	srli	r23,r23,8
200841bc:	dc810004 	addi	r18,sp,1024
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
200841c0:	05000184 	movi	r20,6
200841c4:	bde3883a 	add	r17,r23,r23
200841c8:	8c63883a 	add	r17,r17,r17
	cmd.resp_type = MMC_RSP_R1b;
200841cc:	04c00744 	movi	r19,29
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
200841d0:	05800204 	movi	r22,8
	cmd.resp_type = MMC_RSP_R1;
200841d4:	05400544 	movi	r21,21
200841d8:	00000406 	br	200841ec <mmc_startup+0x460>
		else
			mmc->tran_speed = 25000000;
	} else {
		width = ((mmc->host_caps & MMC_MODE_MASK_WIDTH_BITS) >>
		MMC_MODE_WIDTH_BITS_SHIFT);
		for (; width >= 0; width--) {
200841dc:	bdffffc4 	addi	r23,r23,-1
200841e0:	00bfffc4 	movi	r2,-1
200841e4:	8c7fff04 	addi	r17,r17,-4
200841e8:	b8803a26 	beq	r23,r2,200842d4 <mmc_startup+0x548>
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
			| (value << 8);
200841ec:	b804923a 	slli	r2,r23,8

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200841f0:	80c02417 	ldw	r3,144(r16)
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
200841f4:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
			| (value << 8);
200841f8:	10bfedf4 	orhi	r2,r2,65463
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
200841fc:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20084200:	d8810215 	stw	r2,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084204:	8009883a 	mov	r4,r16
20084208:	900b883a 	mov	r5,r18
2008420c:	000d883a 	mov	r6,zero
20084210:	183ee83a 	callr	r3
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	if (!ret)
20084214:	103ff11e 	bne	r2,zero,200841dc <__flash_rwdata_start+0xfffe9370>
		ret = mmc_send_status(mmc, timeout);
20084218:	8009883a 	mov	r4,r16
2008421c:	0083c680 	call	20083c68 <mmc_send_status.constprop.4>
		for (; width >= 0; width--) {
			/* Set the card to use 4 bit*/
			err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL,
			EXT_CSD_BUS_WIDTH, width);

			if (err)
20084220:	103fee1e 	bne	r2,zero,200841dc <__flash_rwdata_start+0xfffe9370>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084224:	80802517 	ldw	r2,148(r16)
			EXT_CSD_BUS_WIDTH, width);

			if (err)
				continue;

			if (!width) {
20084228:	b800a126 	beq	r23,zero,200844b0 <mmc_startup+0x724>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
2008422c:	8009883a 	mov	r4,r16
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
20084230:	84400f15 	stw	r17,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084234:	103ee83a 	callr	r2

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084238:	80c02417 	ldw	r3,144(r16)
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
2008423c:	00800044 	movi	r2,1
	data.blocksize = 512;
20084240:	01008004 	movi	r4,512
20084244:	d9011115 	stw	r4,1092(sp)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
20084248:	dd81000d 	sth	r22,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
2008424c:	dd410115 	stw	r21,1028(sp)
	cmd.cmdarg = 0;
20084250:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
20084254:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
20084258:	d8811015 	stw	r2,1088(sp)
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;
2008425c:	d8810f15 	stw	r2,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084260:	8009883a 	mov	r4,r16
20084264:	900b883a 	mov	r5,r18
20084268:	d9810e04 	addi	r6,sp,1080
2008426c:	183ee83a 	callr	r3
				break;
			} else
				mmc_set_bus_width(mmc, 4 * width);

			err = mmc_send_ext_csd(mmc, test_csd);
			if (!err
20084270:	103fda1e 	bne	r2,zero,200841dc <__flash_rwdata_start+0xfffe9370>
					&& ext_csd[EXT_CSD_PARTITIONING_SUPPORT]
20084274:	d8c0a807 	ldb	r3,672(sp)
20084278:	d8802807 	ldb	r2,160(sp)
2008427c:	18bfd71e 	bne	r3,r2,200841dc <__flash_rwdata_start+0xfffe9370>
							== test_csd[EXT_CSD_PARTITIONING_SUPPORT]
					&& ext_csd[EXT_CSD_ERASE_GROUP_DEF]
20084280:	d8c0abc7 	ldb	r3,687(sp)
20084284:	d8802bc7 	ldb	r2,175(sp)
20084288:	18bfd41e 	bne	r3,r2,200841dc <__flash_rwdata_start+0xfffe9370>
							== test_csd[EXT_CSD_ERASE_GROUP_DEF]
					&& ext_csd[EXT_CSD_REV] == test_csd[EXT_CSD_REV]
2008428c:	d8c0b007 	ldb	r3,704(sp)
20084290:	d8803007 	ldb	r2,192(sp)
20084294:	18bfd11e 	bne	r3,r2,200841dc <__flash_rwdata_start+0xfffe9370>
					&& ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
20084298:	d8c0b807 	ldb	r3,736(sp)
2008429c:	d8803807 	ldb	r2,224(sp)
200842a0:	18bfce1e 	bne	r3,r2,200841dc <__flash_rwdata_start+0xfffe9370>
							== test_csd[EXT_CSD_HC_ERASE_GRP_SIZE]
					&& memcmp(&ext_csd[EXT_CSD_SEC_CNT],
200842a4:	d900b504 	addi	r4,sp,724
200842a8:	d9403504 	addi	r5,sp,212
200842ac:	01800104 	movi	r6,4
200842b0:	008a5f80 	call	2008a5f8 <memcmp>
200842b4:	103fc91e 	bne	r2,zero,200841dc <__flash_rwdata_start+0xfffe9370>
							&test_csd[EXT_CSD_SEC_CNT], 4) == 0) {

				mmc->card_caps |= width;
200842b8:	80c01117 	ldw	r3,68(r16)
200842bc:	1dc6b03a 	or	r3,r3,r23
200842c0:	80c01115 	stw	r3,68(r16)
				break;
			}
		}

		if (mmc->card_caps & MMC_MODE_HS) {
200842c4:	1880004c 	andi	r2,r3,1
200842c8:	1000041e 	bne	r2,zero,200842dc <mmc_startup+0x550>
200842cc:	80801f17 	ldw	r2,124(r16)
200842d0:	003f4d06 	br	20084008 <__flash_rwdata_start+0xfffe919c>
200842d4:	80c01117 	ldw	r3,68(r16)
200842d8:	003ffa06 	br	200842c4 <__flash_rwdata_start+0xfffe9458>
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
200842dc:	18c0040c 	andi	r3,r3,16
200842e0:	18009c26 	beq	r3,zero,20084554 <mmc_startup+0x7c8>
				mmc->tran_speed = 52000000;
200842e4:	0080c674 	movhi	r2,793
200842e8:	109d4004 	addi	r2,r2,29952
200842ec:	80801f15 	stw	r2,124(r16)
200842f0:	003f4506 	br	20084008 <__flash_rwdata_start+0xfffe919c>
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
200842f4:	01000204 	movi	r4,8
200842f8:	d900000d 	sth	r4,0(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200842fc:	80802417 	ldw	r2,144(r16)
	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
20084300:	d9008004 	addi	r4,sp,512

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084304:	dc810004 	addi	r18,sp,1024
	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
20084308:	d9010015 	stw	r4,1024(sp)
	data.blocks = 1;
	data.blocksize = 512;
2008430c:	01008004 	movi	r4,512
20084310:	d9010315 	stw	r4,1036(sp)
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
20084314:	dc400115 	stw	r17,4(sp)
	cmd.cmdarg = 0;
20084318:	d8000215 	stw	zero,8(sp)

	data.dest = (char *) ext_csd;
	data.blocks = 1;
2008431c:	d8c10215 	stw	r3,1032(sp)
	data.blocksize = 512;
	data.flags = MMC_DATA_READ;
20084320:	d8c10115 	stw	r3,1028(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084324:	8009883a 	mov	r4,r16
20084328:	d80b883a 	mov	r5,sp
2008432c:	900d883a 	mov	r6,r18
20084330:	103ee83a 	callr	r2
	mmc->erase_grp_size = 1;
	mmc->part_config = MMCPART_NOAVAILABLE;
	if (!IS_SD(mmc) && (mmc->version >= MMC_VERSION_4)) {
		/* check  ext_csd version and capacity */
		err = mmc_send_ext_csd(mmc, ext_csd);
		if (!err & (ext_csd[EXT_CSD_REV] >= 2)) {
20084334:	10000f1e 	bne	r2,zero,20084374 <mmc_startup+0x5e8>
20084338:	d880b007 	ldb	r2,704(sp)
2008433c:	10800088 	cmpgei	r2,r2,2
20084340:	10000c26 	beq	r2,zero,20084374 <mmc_startup+0x5e8>
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20084344:	d900b547 	ldb	r4,725(sp)
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20084348:	d8c0b587 	ldb	r3,726(sp)
			/*
			 * According to the JEDEC Standard, the value of
			 * ext_csd's capacity is valid if the value is more
			 * than 2GB
			 */
			capacity = ext_csd[EXT_CSD_SEC_CNT] << 0
2008434c:	d880b507 	ldb	r2,724(sp)
					| ext_csd[EXT_CSD_SEC_CNT + 1] << 8
20084350:	2008923a 	slli	r4,r4,8
					| ext_csd[EXT_CSD_SEC_CNT + 2] << 16
20084354:	1806943a 	slli	r3,r3,16
20084358:	20c6b03a 	or	r3,r4,r3
2008435c:	1884b03a 	or	r2,r3,r2
					| ext_csd[EXT_CSD_SEC_CNT + 3] << 24;
			capacity *= 512;
20084360:	1004927a 	slli	r2,r2,9
			if ((capacity >> 20) > 2 * 1024)
20084364:	01020004 	movi	r4,2048
20084368:	1006d53a 	srli	r3,r2,20
2008436c:	20c0012e 	bgeu	r4,r3,20084374 <mmc_startup+0x5e8>
				mmc->capacity = capacity;
20084370:	80802315 	stw	r2,140(r16)
		/*
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
20084374:	d880abc7 	ldb	r2,687(sp)
20084378:	10007a26 	beq	r2,zero,20084564 <mmc_startup+0x7d8>
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
2008437c:	d880b807 	ldb	r2,736(sp)
20084380:	100494fa 	slli	r2,r2,19
		 * Check whether GROUP_DEF is set, if yes, read out
		 * group size from ext_csd directly, or calculate
		 * the group size from the csd value.
		 */
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
20084384:	80802215 	stw	r2,136(r16)
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
		}

		/* store the partition info of emmc */
		if ((ext_csd[EXT_CSD_PARTITIONING_SUPPORT] & PART_SUPPORT)
20084388:	d880a803 	ldbu	r2,672(sp)
2008438c:	1080004c 	andi	r2,r2,1
20084390:	1000021e 	bne	r2,zero,2008439c <mmc_startup+0x610>
				|| ext_csd[EXT_CSD_BOOT_MULT])
20084394:	d880b887 	ldb	r2,738(sp)
20084398:	10000226 	beq	r2,zero,200843a4 <mmc_startup+0x618>
			mmc->part_config = ext_csd[EXT_CSD_PART_CONF];
2008439c:	d880acc3 	ldbu	r2,691(sp)
200843a0:	80801e85 	stb	r2,122(r16)
	}

	if (IS_SD(mmc))
200843a4:	80800a17 	ldw	r2,40(r16)
200843a8:	10c000ac 	andhi	r3,r2,2
200843ac:	183f371e 	bne	r3,zero,2008408c <__flash_rwdata_start+0xfffe9220>
	int err;

	mmc->card_caps = 0;

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
200843b0:	00c00074 	movhi	r3,1
static int mmc_change_freq(struct mmc *mmc) {
	char ext_csd[512];
	char cardtype;
	int err;

	mmc->card_caps = 0;
200843b4:	80001115 	stw	zero,68(r16)

	/* Only version 4 supports high-speed */
	if (mmc->version < MMC_VERSION_4)
200843b8:	18c00fc4 	addi	r3,r3,63
200843bc:	18bf052e 	bgeu	r3,r2,20083fd4 <__flash_rwdata_start+0xfffe9168>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200843c0:	80802417 	ldw	r2,144(r16)
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
200843c4:	05800044 	movi	r22,1
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
200843c8:	05000204 	movi	r20,8
	cmd.resp_type = MMC_RSP_R1;
200843cc:	04c00544 	movi	r19,21
	cmd.cmdarg = 0;

	data.dest = (char *) ext_csd;
	data.blocks = 1;
	data.blocksize = 512;
200843d0:	04408004 	movi	r17,512
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
200843d4:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
200843d8:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = 0;
200843dc:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
200843e0:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
200843e4:	dd811015 	stw	r22,1088(sp)
	data.blocksize = 512;
200843e8:	dc411115 	stw	r17,1092(sp)
	data.flags = MMC_DATA_READ;
200843ec:	dd810f15 	stw	r22,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200843f0:	8009883a 	mov	r4,r16
200843f4:	900b883a 	mov	r5,r18
200843f8:	d9810e04 	addi	r6,sp,1080
200843fc:	103ee83a 	callr	r2
	if (mmc->version < MMC_VERSION_4)
		return 0;

	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
20084400:	103f441e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>
static int mmc_switch(struct mmc *mmc, char set, char index, char value) {
	struct mmc_cmd cmd;
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
20084404:	00c00184 	movi	r3,6
20084408:	d8c1000d 	sth	r3,1024(sp)
	cmd.resp_type = MMC_RSP_R1b;
2008440c:	00c00744 	movi	r3,29
20084410:	d8c10115 	stw	r3,1028(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084414:	80802417 	ldw	r2,144(r16)
	int timeout = 1000;
	int ret;

	cmd.cmdidx = MMC_CMD_SWITCH;
	cmd.resp_type = MMC_RSP_R1b;
	cmd.cmdarg = (MMC_SWITCH_MODE_WRITE_BYTE << 24) | (index << 16)
20084418:	00ffee74 	movhi	r3,65465
2008441c:	18c04004 	addi	r3,r3,256
20084420:	d8c10215 	stw	r3,1032(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084424:	8009883a 	mov	r4,r16
20084428:	900b883a 	mov	r5,r18
2008442c:	000d883a 	mov	r6,zero
	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
		return err;

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;
20084430:	dd403103 	ldbu	r21,196(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084434:	103ee83a 	callr	r2
			| (value << 8);

	ret = mmc_send_cmd(mmc, &cmd, NULL);

	/* Waiting for the ready status */
	if (!ret)
20084438:	103f361e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>
		ret = mmc_send_status(mmc, timeout);
2008443c:	8009883a 	mov	r4,r16
20084440:	0083c680 	call	20083c68 <mmc_send_status.constprop.4>

	cardtype = ext_csd[EXT_CSD_CARD_TYPE] & 0xf;

	err = mmc_switch(mmc, EXT_CSD_CMD_SET_NORMAL, EXT_CSD_HS_TIMING, 1);

	if (err)
20084444:	103f331e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084448:	80802417 	ldw	r2,144(r16)
	struct mmc_cmd cmd;
	struct mmc_data data;
	int err;

	/* Get the Card Status Register */
	cmd.cmdidx = MMC_CMD_SEND_EXT_CSD;
2008444c:	dd01000d 	sth	r20,1024(sp)
	cmd.resp_type = MMC_RSP_R1;
20084450:	dcc10115 	stw	r19,1028(sp)
	cmd.cmdarg = 0;
20084454:	d8010215 	stw	zero,1032(sp)

	data.dest = (char *) ext_csd;
20084458:	dec10e15 	stw	sp,1080(sp)
	data.blocks = 1;
2008445c:	dd811015 	stw	r22,1088(sp)
	data.blocksize = 512;
20084460:	dc411115 	stw	r17,1092(sp)
	data.flags = MMC_DATA_READ;
20084464:	dd810f15 	stw	r22,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084468:	8009883a 	mov	r4,r16
2008446c:	900b883a 	mov	r5,r18
20084470:	d9810e04 	addi	r6,sp,1080
20084474:	103ee83a 	callr	r2
		return err;

	/* Now check to see that it worked */
	err = mmc_send_ext_csd(mmc, ext_csd);

	if (err)
20084478:	103f261e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>
		return err;

	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
2008447c:	d8802e47 	ldb	r2,185(sp)
20084480:	103f2526 	beq	r2,zero,20084118 <__flash_rwdata_start+0xfffe92ac>
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20084484:	ad40008c 	andi	r21,r21,2
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
20084488:	80c01117 	ldw	r3,68(r16)
2008448c:	80800a17 	ldw	r2,40(r16)
	/* No high-speed support */
	if (!ext_csd[EXT_CSD_HS_TIMING])
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
20084490:	a800d41e 	bne	r21,zero,200847e4 <mmc_startup+0xa58>
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
	else
		mmc->card_caps |= MMC_MODE_HS;
20084494:	18c00054 	ori	r3,r3,1
20084498:	80c01115 	stw	r3,68(r16)
2008449c:	003ece06 	br	20083fd8 <__flash_rwdata_start+0xfffe916c>
		}

		if (mmc->card_caps & MMC_MODE_HS)
			mmc->tran_speed = 50000000;
		else
			mmc->tran_speed = 25000000;
200844a0:	00805f74 	movhi	r2,381
200844a4:	109e1004 	addi	r2,r2,30784
200844a8:	80801f15 	stw	r2,124(r16)
200844ac:	003ed606 	br	20084008 <__flash_rwdata_start+0xfffe919c>
static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
200844b0:	00c00044 	movi	r3,1
200844b4:	80c00f15 	stw	r3,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200844b8:	8009883a 	mov	r4,r16
200844bc:	103ee83a 	callr	r2
200844c0:	80c01117 	ldw	r3,68(r16)
200844c4:	003f7f06 	br	200842c4 <__flash_rwdata_start+0xfffe9458>

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
200844c8:	80801e0b 	ldhu	r2,120(r16)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200844cc:	80c02417 	ldw	r3,144(r16)
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
200844d0:	01000dc4 	movi	r4,55
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;
200844d4:	1004943a 	slli	r2,r2,16
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
200844d8:	04400544 	movi	r17,21
	/* Restrict card's capabilities by what the host can do */
	mmc->card_caps &= mmc->host_caps;

	if (IS_SD(mmc)) {
		if (mmc->card_caps & MMC_MODE_4BIT) {
			cmd.cmdidx = MMC_CMD_APP_CMD;
200844dc:	d901070d 	sth	r4,1052(sp)
			cmd.resp_type = MMC_RSP_R1;
200844e0:	dc410815 	stw	r17,1056(sp)
			cmd.cmdarg = mmc->rca << 16;
200844e4:	d8810915 	stw	r2,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200844e8:	8009883a 	mov	r4,r16
200844ec:	d9410704 	addi	r5,sp,1052
200844f0:	000d883a 	mov	r6,zero
200844f4:	183ee83a 	callr	r3
			cmd.cmdidx = MMC_CMD_APP_CMD;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = mmc->rca << 16;

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
200844f8:	103e3a1e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
200844fc:	00c00184 	movi	r3,6

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084500:	80802417 	ldw	r2,144(r16)

			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
20084504:	d8c1070d 	sth	r3,1052(sp)
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
20084508:	00c00084 	movi	r3,2
			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
				return err;

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
			cmd.resp_type = MMC_RSP_R1;
2008450c:	dc410815 	stw	r17,1056(sp)
			cmd.cmdarg = 2;
20084510:	d8c10915 	stw	r3,1060(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084514:	8009883a 	mov	r4,r16
20084518:	d9410704 	addi	r5,sp,1052
2008451c:	000d883a 	mov	r6,zero
20084520:	103ee83a 	callr	r2

			cmd.cmdidx = SD_CMD_APP_SET_BUS_WIDTH;
			cmd.resp_type = MMC_RSP_R1;
			cmd.cmdarg = 2;
			err = mmc_send_cmd(mmc, &cmd, NULL);
			if (err)
20084524:	103e2f1e 	bne	r2,zero,20083de4 <__flash_rwdata_start+0xfffe8f78>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084528:	80802517 	ldw	r2,148(r16)
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
2008452c:	00c00104 	movi	r3,4
20084530:	80c00f15 	stw	r3,60(r16)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
20084534:	8009883a 	mov	r4,r16
20084538:	103ee83a 	callr	r2
2008453c:	80c01117 	ldw	r3,68(r16)
20084540:	003eac06 	br	20083ff4 <__flash_rwdata_start+0xfffe9188>
			break;
		case 4:
			mmc->version = MMC_VERSION_4;
			break;
		default:
			mmc->version = MMC_VERSION_1_2;
20084544:	21000484 	addi	r4,r4,18
20084548:	81000a15 	stw	r4,40(r16)
			break;
2008454c:	0011883a 	mov	r8,zero
20084550:	003e6006 	br	20083ed4 <__flash_rwdata_start+0xfffe9068>

		if (mmc->card_caps & MMC_MODE_HS) {
			if (mmc->card_caps & MMC_MODE_HS_52MHz)
				mmc->tran_speed = 52000000;
			else
				mmc->tran_speed = 26000000;
20084554:	00806374 	movhi	r2,397
20084558:	10aea004 	addi	r2,r2,-17792
2008455c:	80801f15 	stw	r2,124(r16)
20084560:	003ea906 	br	20084008 <__flash_rwdata_start+0xfffe919c>
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20084564:	80801817 	ldw	r2,96(r16)
20084568:	10df000c 	andi	r3,r2,31744
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
2008456c:	1080f80c 	andi	r2,r2,992
		if (ext_csd[EXT_CSD_ERASE_GROUP_DEF])
			mmc->erase_grp_size = ext_csd[EXT_CSD_HC_ERASE_GRP_SIZE] * 512
					* 1024;
		else {
			int erase_gsz, erase_gmul;
			erase_gsz = (mmc->csd[2] & 0x00007c00) >> 10;
20084570:	1806d2ba 	srli	r3,r3,10
			erase_gmul = (mmc->csd[2] & 0x000003e0) >> 5;
20084574:	1004d17a 	srli	r2,r2,5
			mmc->erase_grp_size = (erase_gsz + 1) * (erase_gmul + 1);
20084578:	18c00044 	addi	r3,r3,1
2008457c:	10800044 	addi	r2,r2,1
20084580:	1885383a 	mul	r2,r3,r2
20084584:	80802215 	stw	r2,136(r16)
20084588:	003f7f06 	br	20084388 <__flash_rwdata_start+0xfffe951c>
		return err;
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
2008458c:	d0a01617 	ldw	r2,-32680(gp)
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
20084590:	d0e01604 	addi	r3,gp,-32680
20084594:	18c00117 	ldw	r3,4(r3)
		return err;
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
20084598:	1008963a 	slli	r4,r2,24
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;
2008459c:	100ed63a 	srli	r7,r2,24
	}

	uint b0, b1, b2, b3;

	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
200845a0:	117fc00c 	andi	r5,r2,65280
200845a4:	280a923a 	slli	r5,r5,8
	b2 = (scr[0] & 0x00ff0000) >> 8;
200845a8:	10803fec 	andhi	r2,r2,255
200845ac:	1004d23a 	srli	r2,r2,8
200845b0:	390eb03a 	or	r7,r7,r4
	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
	b3 = (scr[1] & 0xff000000) >> 24;
200845b4:	1810d63a 	srli	r8,r3,24
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;

	b0 = (scr[1] & 0x000000ff) << 24;
200845b8:	180c963a 	slli	r6,r3,24
	b1 = (scr[1] & 0x0000ff00) << 8;
200845bc:	193fc00c 	andi	r4,r3,65280
200845c0:	394ab03a 	or	r5,r7,r5
200845c4:	2008923a 	slli	r4,r4,8
	b2 = (scr[1] & 0x00ff0000) >> 8;
200845c8:	18c03fec 	andhi	r3,r3,255
	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;
200845cc:	2884b03a 	or	r2,r5,r2

	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
200845d0:	1806d23a 	srli	r3,r3,8
200845d4:	418cb03a 	or	r6,r8,r6
	mmc->scr[1] = b0 | b1 | b2 | b3;

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
200845d8:	100ad63a 	srli	r5,r2,24
200845dc:	3108b03a 	or	r4,r6,r4
	b0 = (scr[1] & 0x000000ff) << 24;
	b1 = (scr[1] & 0x0000ff00) << 8;
	b2 = (scr[1] & 0x00ff0000) >> 8;
	b3 = (scr[1] & 0xff000000) >> 24;

	mmc->scr[1] = b0 | b1 | b2 | b3;
200845e0:	20c6b03a 	or	r3,r4,r3
200845e4:	80c01515 	stw	r3,84(r16)
	b0 = (scr[0] & 0x000000ff) << 24;
	b1 = (scr[0] & 0x0000ff00) << 8;
	b2 = (scr[0] & 0x00ff0000) >> 8;
	b3 = (scr[0] & 0xff000000) >> 24;

	mmc->scr[0] = b0 | b1 | b2 | b3;
200845e8:	80801415 	stw	r2,80(r16)
	mmc->scr[1] = b0 | b1 | b2 | b3;

	MMC_PRINT(("SCR: %08x\n\r", mmc->scr[0]));
	MMC_PRINT(("     %08x\n\r", mmc->scr[1]));

	switch ((mmc->scr[0] >> 24) & 0xf) {
200845ec:	28c003cc 	andi	r3,r5,15
200845f0:	01000044 	movi	r4,1
200845f4:	19007726 	beq	r3,r4,200847d4 <mmc_startup+0xa48>
200845f8:	18006c26 	beq	r3,zero,200847ac <mmc_startup+0xa20>
200845fc:	01000084 	movi	r4,2
20084600:	19006a1e 	bne	r3,r4,200847ac <mmc_startup+0xa20>
		break;
	case 1:
		mmc->version = SD_VERSION_1_10;
		break;
	case 2:
		mmc->version = SD_VERSION_2;
20084604:	00c000b4 	movhi	r3,2
20084608:	18c00804 	addi	r3,r3,32
2008460c:	80c00a15 	stw	r3,40(r16)
	default:
		mmc->version = SD_VERSION_1_0;
		break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
20084610:	1080012c 	andhi	r2,r2,4
20084614:	10000326 	beq	r2,zero,20084624 <mmc_startup+0x898>
		mmc->card_caps |= MMC_MODE_4BIT;
20084618:	80801117 	ldw	r2,68(r16)
2008461c:	10804014 	ori	r2,r2,256
20084620:	80801115 	stw	r2,68(r16)
20084624:	05c00034 	movhi	r23,0
20084628:	bdcb8d04 	addi	r23,r23,11828
	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
2008462c:	04804034 	movhi	r18,256
	if (err)
		return err;

	cmd.cmdidx = SD_CMD_APP_SEND_SCR;
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = 0;
20084630:	07000104 	movi	fp,4
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
20084634:	05000184 	movi	r20,6
	cmd.resp_type = MMC_RSP_R1;
20084638:	04c00544 	movi	r19,21
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
2008463c:	94bffc44 	addi	r18,r18,-15

	data.dest = (char *) resp;
	data.blocksize = 64;
	data.blocks = 1;
20084640:	04400044 	movi	r17,1
20084644:	bd401004 	addi	r21,r23,64

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084648:	80802417 	ldw	r2,144(r16)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
	data.blocksize = 64;
2008464c:	00c01004 	movi	r3,64
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
20084650:	ddc10e15 	stw	r23,1080(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084654:	d9810e04 	addi	r6,sp,1080
20084658:	05800034 	movhi	r22,0
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
2008465c:	dd00000d 	sth	r20,0(sp)
	cmd.resp_type = MMC_RSP_R1;
20084660:	dcc00115 	stw	r19,4(sp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
20084664:	dc800215 	stw	r18,8(sp)

	data.dest = (char *) resp;
	data.blocksize = 64;
20084668:	d8c11115 	stw	r3,1092(sp)
	data.blocks = 1;
2008466c:	dc411015 	stw	r17,1088(sp)
	data.flags = MMC_DATA_READ;
20084670:	dc410f15 	stw	r17,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084674:	8009883a 	mov	r4,r16
20084678:	d80b883a 	mov	r5,sp
2008467c:	b58b8d04 	addi	r22,r22,11828
20084680:	103ee83a 	callr	r2
20084684:	b02f883a 	mov	r23,r22
20084688:	b1c01004 	addi	r7,r22,64
2008468c:	b00d883a 	mov	r6,r22

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20084690:	30c00017 	ldw	r3,0(r6)
20084694:	31800104 	addi	r6,r6,4
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
20084698:	1814d63a 	srli	r10,r3,24

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
2008469c:	1812963a 	slli	r9,r3,24
		b1 = (s[i] & 0x0000ff00) << 8;
200846a0:	197fc00c 	andi	r5,r3,65280
200846a4:	280a923a 	slli	r5,r5,8
		b2 = (s[i] & 0x00ff0000) >> 8;
200846a8:	18c03fec 	andhi	r3,r3,255
200846ac:	1808d23a 	srli	r4,r3,8
200846b0:	5246b03a 	or	r3,r10,r9
200846b4:	1946b03a 	or	r3,r3,r5
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
200846b8:	1906b03a 	or	r3,r3,r4
200846bc:	30ffff15 	stw	r3,-4(r6)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
200846c0:	357ff31e 	bne	r6,r21,20084690 <__flash_rwdata_start+0xfffe9824>

	timeout = 4;
	while (timeout--) {
		err = sd_switch(mmc, SD_SWITCH_CHECK, 0, 1, (char *) switch_status);

		if (err)
200846c4:	103e931e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>

		MMC_PRINT(("switch status 7 %08x\n\r", switch_status[7]));
		MMC_PRINT(("switch status 3 %08x\n\r", switch_status[3]));
		MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
		/* The high-speed function is busy.  Try again */
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
200846c8:	b8800717 	ldw	r2,28(r23)
200846cc:	108000ac 	andhi	r2,r2,2
200846d0:	10000226 	beq	r2,zero,200846dc <mmc_startup+0x950>
200846d4:	e73fffc4 	addi	fp,fp,-1
	/* Version 1.0 doesn't support switching */
	if (mmc->version == SD_VERSION_1_0)
		return 0;

	timeout = 4;
	while (timeout--) {
200846d8:	e03fdb1e 	bne	fp,zero,20084648 <__flash_rwdata_start+0xfffe97dc>
		if (!(switch_status[7] & SD_HIGHSPEED_BUSY))
			break;
	}

	/* If high-speed isn't supported, we return */
	if (!(switch_status[3] & SD_HIGHSPEED_SUPPORTED)){
200846dc:	b8800317 	ldw	r2,12(r23)
200846e0:	108000ac 	andhi	r2,r2,2
200846e4:	103e8c26 	beq	r2,zero,20084118 <__flash_rwdata_start+0xfffe92ac>
	 * If the host doesn't support SD_HIGHSPEED, do not switch card to
	 * HIGHSPEED mode even if the card support SD_HIGHSPPED.
	 * This can avoid furthur problem when the card runs in different
	 * mode between the host.
	 */
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
200846e8:	80801217 	ldw	r2,72(r16)
200846ec:	00c00444 	movi	r3,17
200846f0:	1080044c 	andi	r2,r2,17
200846f4:	10fe881e 	bne	r2,r3,20084118 <__flash_rwdata_start+0xfffe92ac>
		char *resp) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	/* Switch the frequency */
	cmd.cmdidx = SD_CMD_SWITCH_FUNC;
200846f8:	01000184 	movi	r4,6
200846fc:	d900000d 	sth	r4,0(sp)
	cmd.resp_type = MMC_RSP_R1;
20084700:	01000544 	movi	r4,21
20084704:	d9000115 	stw	r4,4(sp)
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);
20084708:	01204034 	movhi	r4,33024
2008470c:	213ffc44 	addi	r4,r4,-15
20084710:	d9000215 	stw	r4,8(sp)

	data.dest = (char *) resp;
20084714:	01000034 	movhi	r4,0

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084718:	80c02417 	ldw	r3,144(r16)
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
2008471c:	210b8d04 	addi	r4,r4,11828
	data.blocksize = 64;
	data.blocks = 1;
20084720:	00800044 	movi	r2,1
	cmd.resp_type = MMC_RSP_R1;
	cmd.cmdarg = (mode << 31) | 0xffffff;
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
20084724:	d9010e15 	stw	r4,1080(sp)
	data.blocksize = 64;
20084728:	01001004 	movi	r4,64
2008472c:	d9011115 	stw	r4,1092(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084730:	d9c11615 	stw	r7,1112(sp)
	cmd.cmdarg &= ~(0xf << (group * 4));
	cmd.cmdarg |= value << (group * 4);

	data.dest = (char *) resp;
	data.blocksize = 64;
	data.blocks = 1;
20084734:	d8811015 	stw	r2,1088(sp)
	data.flags = MMC_DATA_READ;
20084738:	d8810f15 	stw	r2,1084(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008473c:	8009883a 	mov	r4,r16
20084740:	d80b883a 	mov	r5,sp
20084744:	d9810e04 	addi	r6,sp,1080
20084748:	183ee83a 	callr	r3
2008474c:	d9c11617 	ldw	r7,1112(sp)

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
20084750:	b0c00017 	ldw	r3,0(r22)
20084754:	b5800104 	addi	r22,r22,4
		b1 = (s[i] & 0x0000ff00) << 8;
		b2 = (s[i] & 0x00ff0000) >> 8;
		b3 = (s[i] & 0xff000000) >> 24;
20084758:	180cd63a 	srli	r6,r3,24

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
		uint b0, b1, b2, b3;
		b0 = (s[i] & 0x000000ff) << 24;
2008475c:	180a963a 	slli	r5,r3,24
		b1 = (s[i] & 0x0000ff00) << 8;
20084760:	193fc00c 	andi	r4,r3,65280
20084764:	2008923a 	slli	r4,r4,8
		b2 = (s[i] & 0x00ff0000) >> 8;
20084768:	18c03fec 	andhi	r3,r3,255
2008476c:	1806d23a 	srli	r3,r3,8
20084770:	314ab03a 	or	r5,r6,r5
20084774:	2908b03a 	or	r4,r5,r4
		b3 = (s[i] & 0xff000000) >> 24;
		s[i] = b0 | b1 | b2 | b3;
20084778:	20c6b03a 	or	r3,r4,r3
2008477c:	b0ffff15 	stw	r3,-4(r22)

	bool ret = mmc_send_cmd(mmc, &cmd, &data);

	int i;
	uint* s = resp;
	for(i = 0; (i < 16); i++){
20084780:	b1fff31e 	bne	r22,r7,20084750 <__flash_rwdata_start+0xfffe98e4>
	if (!((mmc->host_caps & MMC_MODE_HS_52MHz) && (mmc->host_caps & MMC_MODE_HS)))
		return 0;

	err = sd_switch(mmc, SD_SWITCH_SWITCH, 0, 1, (char *) switch_status);
	MMC_PRINT(("switch status 4 %08x\n\r", switch_status[4]));
	if (err)
20084784:	103e631e 	bne	r2,zero,20084114 <__flash_rwdata_start+0xfffe92a8>
		return err;

	if ((switch_status[4] & 0x0f000000) == 0x01000000){
20084788:	b8800417 	ldw	r2,16(r23)
2008478c:	00c04034 	movhi	r3,256
20084790:	1083c02c 	andhi	r2,r2,3840
20084794:	10fe601e 	bne	r2,r3,20084118 <__flash_rwdata_start+0xfffe92ac>
		MMC_PRINT(("High speed supported!\n"));
		mmc->card_caps |= MMC_MODE_HS;
20084798:	80c01117 	ldw	r3,68(r16)
2008479c:	80800a17 	ldw	r2,40(r16)
200847a0:	18c00054 	ori	r3,r3,1
200847a4:	80c01115 	stw	r3,68(r16)
200847a8:	003e0b06 	br	20083fd8 <__flash_rwdata_start+0xfffe916c>
		break;
	case 2:
		mmc->version = SD_VERSION_2;
		break;
	default:
		mmc->version = SD_VERSION_1_0;
200847ac:	00c000b4 	movhi	r3,2
200847b0:	18c00404 	addi	r3,r3,16
200847b4:	80c00a15 	stw	r3,40(r16)
		break;
	}

	if (mmc->scr[0] & SD_DATA_4BIT)
200847b8:	1080012c 	andhi	r2,r2,4
200847bc:	103e5626 	beq	r2,zero,20084118 <__flash_rwdata_start+0xfffe92ac>
		mmc->card_caps |= MMC_MODE_4BIT;
200847c0:	80c01117 	ldw	r3,68(r16)
200847c4:	80800a17 	ldw	r2,40(r16)
200847c8:	18c04014 	ori	r3,r3,256
200847cc:	80c01115 	stw	r3,68(r16)
200847d0:	003e0106 	br	20083fd8 <__flash_rwdata_start+0xfffe916c>
	switch ((mmc->scr[0] >> 24) & 0xf) {
	case 0:
		mmc->version = SD_VERSION_1_0;
		break;
	case 1:
		mmc->version = SD_VERSION_1_10;
200847d4:	00c000b4 	movhi	r3,2
200847d8:	18c00684 	addi	r3,r3,26
200847dc:	80c00a15 	stw	r3,40(r16)
200847e0:	003f8b06 	br	20084610 <__flash_rwdata_start+0xfffe97a4>
	if (!ext_csd[EXT_CSD_HS_TIMING])
		return 0;

	/* High Speed is set, there are two types: 52MHz and 26MHz */
	if (cardtype & MMC_HS_52MHZ)
		mmc->card_caps |= MMC_MODE_HS_52MHz | MMC_MODE_HS;
200847e4:	18c00454 	ori	r3,r3,17
200847e8:	80c01115 	stw	r3,68(r16)
200847ec:	003dfa06 	br	20083fd8 <__flash_rwdata_start+0xfffe916c>

200847f0 <udelay>:
#define MMC_PRINT(x)	DEBUG(x)
#else
#define MMC_PRINT(x)
#endif

void udelay(int t) {
200847f0:	deffff04 	addi	sp,sp,-4
#define US_DELAY 100
	volatile int us = US_DELAY;
200847f4:	01401904 	movi	r5,100
200847f8:	d9400015 	stw	r5,0(sp)
	while (t--) {
200847fc:	01bfffc4 	movi	r6,-1
20084800:	213fffc4 	addi	r4,r4,-1
20084804:	21800726 	beq	r4,r6,20084824 <udelay+0x34>
		us = US_DELAY;
20084808:	d9400015 	stw	r5,0(sp)
		while (us--)
2008480c:	d8800017 	ldw	r2,0(sp)
20084810:	10ffffc4 	addi	r3,r2,-1
20084814:	d8c00015 	stw	r3,0(sp)
20084818:	103ffc1e 	bne	r2,zero,2008480c <__flash_rwdata_start+0xfffe99a0>
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
2008481c:	213fffc4 	addi	r4,r4,-1
20084820:	21bff91e 	bne	r4,r6,20084808 <__flash_rwdata_start+0xfffe999c>
		us = US_DELAY;
		while (us--)
			;
	}
}
20084824:	dec00104 	addi	sp,sp,4
20084828:	f800283a 	ret

2008482c <mmc_init>:
}

int mmc_init(struct mmc *mmc) {
	int err;

	if (mmc->has_init)
2008482c:	20800b17 	ldw	r2,44(r4)
	}

	return blkcnt;
}

int mmc_init(struct mmc *mmc) {
20084830:	deffe804 	addi	sp,sp,-96
20084834:	df001615 	stw	fp,88(sp)
20084838:	dfc01715 	stw	ra,92(sp)
2008483c:	ddc01515 	stw	r23,84(sp)
20084840:	dd801415 	stw	r22,80(sp)
20084844:	dd401315 	stw	r21,76(sp)
20084848:	dd001215 	stw	r20,72(sp)
2008484c:	dcc01115 	stw	r19,68(sp)
20084850:	dc801015 	stw	r18,64(sp)
20084854:	dc400f15 	stw	r17,60(sp)
20084858:	dc000e15 	stw	r16,56(sp)
2008485c:	2039883a 	mov	fp,r4
	int err;

	if (mmc->has_init)
20084860:	10000e26 	beq	r2,zero,2008489c <mmc_init+0x70>
		return 0;
20084864:	0021883a 	mov	r16,zero
	if (err)
		mmc->has_init = 0;
	else
		mmc->has_init = 1;
	return err;
}
20084868:	8005883a 	mov	r2,r16
2008486c:	dfc01717 	ldw	ra,92(sp)
20084870:	df001617 	ldw	fp,88(sp)
20084874:	ddc01517 	ldw	r23,84(sp)
20084878:	dd801417 	ldw	r22,80(sp)
2008487c:	dd401317 	ldw	r21,76(sp)
20084880:	dd001217 	ldw	r20,72(sp)
20084884:	dcc01117 	ldw	r19,68(sp)
20084888:	dc801017 	ldw	r18,64(sp)
2008488c:	dc400f17 	ldw	r17,60(sp)
20084890:	dc000e17 	ldw	r16,56(sp)
20084894:	dec01804 	addi	sp,sp,96
20084898:	f800283a 	ret
	int err;

	if (mmc->has_init)
		return 0;

	err = mmc->init(mmc);
2008489c:	20802617 	ldw	r2,152(r4)
200848a0:	103ee83a 	callr	r2

	if (err)
200848a4:	10000226 	beq	r2,zero,200848b0 <mmc_init+0x84>
200848a8:	1021883a 	mov	r16,r2
200848ac:	003fee06 	br	20084868 <__flash_rwdata_start+0xfffe99fc>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200848b0:	e0802517 	ldw	r2,148(fp)
}

static void mmc_set_bus_width(struct mmc *mmc, uint width) {
	mmc->bus_width = width;
200848b4:	00c00044 	movi	r3,1
200848b8:	e0c00f15 	stw	r3,60(fp)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200848bc:	e009883a 	mov	r4,fp
200848c0:	103ee83a 	callr	r2

	mmc_set_ios(mmc);
}

static void mmc_set_clock(struct mmc *mmc, uint clock) {
	if (clock > mmc->f_max)
200848c4:	e0800d17 	ldw	r2,52(fp)
		clock = mmc->f_max;

	if (clock < mmc->f_min)
200848c8:	e0c00c17 	ldw	r3,48(fp)
200848cc:	1004c03a 	cmpne	r2,r2,zero
200848d0:	10c06a36 	bltu	r2,r3,20084a7c <mmc_init+0x250>
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200848d4:	e0c02517 	ldw	r3,148(fp)
200848d8:	e009883a 	mov	r4,fp
		clock = mmc->f_max;

	if (clock < mmc->f_min)
		clock = mmc->f_min;

	mmc->clock = clock;
200848dc:	e0801015 	stw	r2,64(fp)
 */
static const int multipliers[] = { 0, /* reserved */
10, 12, 13, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, };

static void mmc_set_ios(struct mmc *mmc) {
	mmc->set_ios(mmc);
200848e0:	183ee83a 	callr	r3
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200848e4:	01001904 	movi	r4,100
200848e8:	d9000d15 	stw	r4,52(sp)
200848ec:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
200848f0:	d9000d15 	stw	r4,52(sp)
		while (us--)
200848f4:	d8800d17 	ldw	r2,52(sp)
200848f8:	10ffffc4 	addi	r3,r2,-1
200848fc:	d8c00d15 	stw	r3,52(sp)
20084900:	103ffc1e 	bne	r2,zero,200848f4 <__flash_rwdata_start+0xfffe9a88>
20084904:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084908:	283ff91e 	bne	r5,zero,200848f0 <__flash_rwdata_start+0xfffe9a84>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008490c:	e0802417 	ldw	r2,144(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
20084910:	d800000d 	sth	zero,0(sp)
	cmd.cmdarg = 0;
20084914:	d8000215 	stw	zero,8(sp)
	cmd.resp_type = MMC_RSP_NONE;
20084918:	d8000115 	stw	zero,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008491c:	e009883a 	mov	r4,fp
20084920:	d80b883a 	mov	r5,sp
20084924:	000d883a 	mov	r6,zero
20084928:	103ee83a 	callr	r2
	cmd.cmdarg = 0;
	cmd.resp_type = MMC_RSP_NONE;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
2008492c:	103fde1e 	bne	r2,zero,200848a8 <__flash_rwdata_start+0xfffe9a3c>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084930:	01001904 	movi	r4,100
20084934:	d9000c15 	stw	r4,48(sp)
20084938:	00c1f404 	movi	r3,2000
	while (t--) {
		us = US_DELAY;
2008493c:	d9000c15 	stw	r4,48(sp)
		while (us--)
20084940:	dc000c17 	ldw	r16,48(sp)
20084944:	80bfffc4 	addi	r2,r16,-1
20084948:	d8800c15 	stw	r2,48(sp)
2008494c:	803ffc1e 	bne	r16,zero,20084940 <__flash_rwdata_start+0xfffe9ad4>
20084950:	18ffffc4 	addi	r3,r3,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084954:	183ff91e 	bne	r3,zero,2008493c <__flash_rwdata_start+0xfffe9ad0>

static int mmc_send_if_cond(struct mmc *mmc) {
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084958:	00800204 	movi	r2,8
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
2008495c:	e0c00917 	ldw	r3,36(fp)

static int mmc_send_if_cond(struct mmc *mmc) {
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
20084960:	d880000d 	sth	r2,0(sp)
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084964:	00804034 	movhi	r2,256
20084968:	10a00004 	addi	r2,r2,-32768

	if (err)
		return err;

	/* The internal partition reset to user partition(0) at every CMD0*/
	mmc->part_num = 0;
2008496c:	e0001ec5 	stb	zero,123(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084970:	1884703a 	and	r2,r3,r2
20084974:	10004b26 	beq	r2,zero,20084aa4 <mmc_init+0x278>
20084978:	00806a84 	movi	r2,426

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008497c:	e0c02417 	ldw	r3,144(fp)
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084980:	d8800215 	stw	r2,8(sp)
	cmd.resp_type = MMC_RSP_R7;
20084984:	00800544 	movi	r2,21
20084988:	d8800115 	stw	r2,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
2008498c:	e009883a 	mov	r4,fp
20084990:	d80b883a 	mov	r5,sp
20084994:	000d883a 	mov	r6,zero
20084998:	183ee83a 	callr	r3
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
	cmd.resp_type = MMC_RSP_R7;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
2008499c:	1000061e 	bne	r2,zero,200849b8 <mmc_init+0x18c>
		return err;

	if ((cmd.response[0] & 0xff) != 0xaa)
200849a0:	d8c00303 	ldbu	r3,12(sp)
200849a4:	00802a84 	movi	r2,170
200849a8:	1880031e 	bne	r3,r2,200849b8 <mmc_init+0x18c>
		return UNUSABLE_ERR;
	else
		mmc->version = SD_VERSION_2;
200849ac:	008000b4 	movhi	r2,2
200849b0:	10800804 	addi	r2,r2,32
200849b4:	e0800a15 	stw	r2,40(fp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
200849b8:	05804034 	movhi	r22,256

		if (mmc->version == SD_VERSION_2)
200849bc:	054000b4 	movhi	r21,2
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
200849c0:	b5a00004 	addi	r22,r22,-32768

		if (mmc->version == SD_VERSION_2)
200849c4:	ad400804 	addi	r21,r21,32

	return 0;
}

static int sd_send_op_cond(struct mmc *mmc) {
	int timeout = 1000;
200849c8:	0440fa04 	movi	r17,1000
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
200849cc:	05000dc4 	movi	r20,55
		cmd.resp_type = MMC_RSP_R1;
200849d0:	04c00544 	movi	r19,21
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
200849d4:	04800a44 	movi	r18,41
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
200849d8:	05c01904 	movi	r23,100

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200849dc:	e0802417 	ldw	r2,144(fp)
	int timeout = 1000;
	int err;
	struct mmc_cmd cmd;

	do {
		cmd.cmdidx = MMC_CMD_APP_CMD;
200849e0:	dd00000d 	sth	r20,0(sp)
		cmd.resp_type = MMC_RSP_R1;
200849e4:	dcc00115 	stw	r19,4(sp)
		cmd.cmdarg = 0;
200849e8:	d8000215 	stw	zero,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
200849ec:	e009883a 	mov	r4,fp
200849f0:	d80b883a 	mov	r5,sp
200849f4:	000d883a 	mov	r6,zero
200849f8:	103ee83a 	callr	r2
		cmd.resp_type = MMC_RSP_R1;
		cmd.cmdarg = 0;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
200849fc:	1000211e 	bne	r2,zero,20084a84 <mmc_init+0x258>
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084a00:	e0800917 	ldw	r2,36(fp)

		if (mmc->version == SD_VERSION_2)
20084a04:	e0c00a17 	ldw	r3,40(fp)

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
20084a08:	01000044 	movi	r4,1
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084a0c:	1584703a 	and	r2,r2,r22
		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
			return err;

		cmd.cmdidx = SD_CMD_APP_SEND_OP_COND;
20084a10:	dc80000d 	sth	r18,0(sp)
		cmd.resp_type = MMC_RSP_R3;
20084a14:	d9000115 	stw	r4,4(sp)
		 * in the ocr are set. However, Some controller
		 * can set bit 7 (reserved for low voltages), but
		 * how to manage low voltages SD card is not yet
		 * specified.
		 */
		cmd.cmdarg = (mmc->voltages & 0xff8000);
20084a18:	d8800215 	stw	r2,8(sp)

		if (mmc->version == SD_VERSION_2)
20084a1c:	1d40021e 	bne	r3,r21,20084a28 <mmc_init+0x1fc>
			cmd.cmdarg |= OCR_HCS;
20084a20:	10900034 	orhi	r2,r2,16384
20084a24:	d8800215 	stw	r2,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084a28:	e0802417 	ldw	r2,144(fp)
20084a2c:	e009883a 	mov	r4,fp
20084a30:	d80b883a 	mov	r5,sp
20084a34:	000d883a 	mov	r6,zero
20084a38:	103ee83a 	callr	r2
		if (mmc->version == SD_VERSION_2)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
20084a3c:	1000111e 	bne	r2,zero,20084a84 <mmc_init+0x258>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084a40:	ddc00b15 	stw	r23,44(sp)
20084a44:	0080fa04 	movi	r2,1000
	while (t--) {
		us = US_DELAY;
20084a48:	ddc00b15 	stw	r23,44(sp)
		while (us--)
20084a4c:	d8c00b17 	ldw	r3,44(sp)
20084a50:	197fffc4 	addi	r5,r3,-1
20084a54:	d9400b15 	stw	r5,44(sp)
20084a58:	183ffc1e 	bne	r3,zero,20084a4c <__flash_rwdata_start+0xfffe9be0>
20084a5c:	10bfffc4 	addi	r2,r2,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084a60:	103ff91e 	bne	r2,zero,20084a48 <__flash_rwdata_start+0xfffe9bdc>

		if (err)
			return err;

		udelay(1000);
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);
20084a64:	d8c00317 	ldw	r3,12(sp)
20084a68:	18001316 	blt	r3,zero,20084ab8 <mmc_init+0x28c>
20084a6c:	8c7fffc4 	addi	r17,r17,-1
20084a70:	00bfffc4 	movi	r2,-1
20084a74:	88bfd91e 	bne	r17,r2,200849dc <__flash_rwdata_start+0xfffe9b70>
20084a78:	00000406 	br	20084a8c <mmc_init+0x260>
20084a7c:	1805883a 	mov	r2,r3
20084a80:	003f9406 	br	200848d4 <__flash_rwdata_start+0xfffe9a68>

	/* Now try to get the SD card's operating condition */
	err = sd_send_op_cond(mmc);

	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
20084a84:	00fffb44 	movi	r3,-19
20084a88:	10c01926 	beq	r2,r3,20084af0 <mmc_init+0x2c4>
			printf("Card did not respond to voltage select!\n\r");
			return UNUSABLE_ERR;
		}
	}

	err = mmc_startup(mmc);
20084a8c:	e009883a 	mov	r4,fp
20084a90:	0083d8c0 	call	20083d8c <mmc_startup>
	if (err)
20084a94:	10000526 	beq	r2,zero,20084aac <mmc_init+0x280>
		mmc->has_init = 0;
20084a98:	e0000b15 	stw	zero,44(fp)
20084a9c:	1021883a 	mov	r16,r2
20084aa0:	003f7106 	br	20084868 <__flash_rwdata_start+0xfffe99fc>
	struct mmc_cmd cmd;
	int err;

	cmd.cmdidx = SD_CMD_SEND_IF_COND;
	/* We set the bit if the host supports voltages between 2.7 and 3.6 V */
	cmd.cmdarg = ((mmc->voltages & 0xff8000) != 0) << 8 | 0xaa;
20084aa4:	00802a84 	movi	r2,170
20084aa8:	003fb406 	br	2008497c <__flash_rwdata_start+0xfffe9b10>

	err = mmc_startup(mmc);
	if (err)
		mmc->has_init = 0;
	else
		mmc->has_init = 1;
20084aac:	00800044 	movi	r2,1
20084ab0:	e0800b15 	stw	r2,44(fp)
20084ab4:	003f6c06 	br	20084868 <__flash_rwdata_start+0xfffe99fc>
			return err;

		udelay(1000);
	} while ((!(cmd.response[0] & OCR_BUSY)) && timeout--);

	if (timeout <= 0)
20084ab8:	883ff426 	beq	r17,zero,20084a8c <__flash_rwdata_start+0xfffe9c20>
		return UNUSABLE_ERR;

	if (mmc->version != SD_VERSION_2)
20084abc:	e1000a17 	ldw	r4,40(fp)
20084ac0:	008000b4 	movhi	r2,2
20084ac4:	10800804 	addi	r2,r2,32
20084ac8:	20800326 	beq	r4,r2,20084ad8 <mmc_init+0x2ac>
		mmc->version = SD_VERSION_1_0;
20084acc:	008000b4 	movhi	r2,2
20084ad0:	10800404 	addi	r2,r2,16
20084ad4:	e0800a15 	stw	r2,40(fp)

	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084ad8:	1804d7ba 	srli	r2,r3,30
		return UNUSABLE_ERR;

	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	mmc->ocr = cmd.response[0];
20084adc:	e0c01315 	stw	r3,76(fp)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
	mmc->rca = 0;
20084ae0:	e0001e0d 	sth	zero,120(fp)
	if (mmc->version != SD_VERSION_2)
		mmc->version = SD_VERSION_1_0;

	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084ae4:	1080004c 	andi	r2,r2,1
20084ae8:	e0800e15 	stw	r2,56(fp)
20084aec:	003fe706 	br	20084a8c <__flash_rwdata_start+0xfffe9c20>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084af0:	01401904 	movi	r5,100
20084af4:	d9400815 	stw	r5,32(sp)
20084af8:	0100fa04 	movi	r4,1000
	while (t--) {
		us = US_DELAY;
20084afc:	d9400815 	stw	r5,32(sp)
		while (us--)
20084b00:	d8800817 	ldw	r2,32(sp)
20084b04:	10ffffc4 	addi	r3,r2,-1
20084b08:	d8c00815 	stw	r3,32(sp)
20084b0c:	103ffc1e 	bne	r2,zero,20084b00 <__flash_rwdata_start+0xfffe9c94>
20084b10:	213fffc4 	addi	r4,r4,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084b14:	203ff91e 	bne	r4,zero,20084afc <__flash_rwdata_start+0xfffe9c90>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084b18:	e0802417 	ldw	r2,144(fp)
	struct mmc_cmd cmd;
	int err;

	udelay(1000);

	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
20084b1c:	d800000d 	sth	zero,0(sp)
	cmd.cmdarg = 0;
20084b20:	d8000215 	stw	zero,8(sp)
	cmd.resp_type = MMC_RSP_NONE;
20084b24:	d8000115 	stw	zero,4(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084b28:	e009883a 	mov	r4,fp
20084b2c:	d80b883a 	mov	r5,sp
20084b30:	000d883a 	mov	r6,zero
20084b34:	103ee83a 	callr	r2
	cmd.cmdarg = 0;
	cmd.resp_type = MMC_RSP_NONE;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20084b38:	10000b1e 	bne	r2,zero,20084b68 <mmc_init+0x33c>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084b3c:	00801904 	movi	r2,100
20084b40:	d8800715 	stw	r2,28(sp)
20084b44:	0141f404 	movi	r5,2000
	while (t--) {
		us = US_DELAY;
20084b48:	1009883a 	mov	r4,r2
20084b4c:	d9000715 	stw	r4,28(sp)
		while (us--)
20084b50:	d8800717 	ldw	r2,28(sp)
20084b54:	10ffffc4 	addi	r3,r2,-1
20084b58:	d8c00715 	stw	r3,28(sp)
20084b5c:	103ffc1e 	bne	r2,zero,20084b50 <__flash_rwdata_start+0xfffe9ce4>
20084b60:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084b64:	283ff91e 	bne	r5,zero,20084b4c <__flash_rwdata_start+0xfffe9ce0>

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084b68:	00c00044 	movi	r3,1

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084b6c:	e0802417 	ldw	r2,144(fp)

	/* Some cards seem to need this */
	mmc_go_idle(mmc);

	/* Asking to the card its capabilities */
	cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084b70:	d8c0000d 	sth	r3,0(sp)
	cmd.resp_type = MMC_RSP_R3;
20084b74:	00c00044 	movi	r3,1
20084b78:	d8c00115 	stw	r3,4(sp)
	cmd.cmdarg = 0;
20084b7c:	d8000215 	stw	zero,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084b80:	e009883a 	mov	r4,fp
20084b84:	d80b883a 	mov	r5,sp
20084b88:	000d883a 	mov	r6,zero
20084b8c:	103ee83a 	callr	r2
	cmd.resp_type = MMC_RSP_R3;
	cmd.cmdarg = 0;

	err = mmc_send_cmd(mmc, &cmd, NULL);

	if (err)
20084b90:	1000321e 	bne	r2,zero,20084c5c <mmc_init+0x430>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084b94:	00801904 	movi	r2,100
20084b98:	d8800915 	stw	r2,36(sp)
20084b9c:	0140fa04 	movi	r5,1000
	while (t--) {
		us = US_DELAY;
20084ba0:	1009883a 	mov	r4,r2
20084ba4:	d9000915 	stw	r4,36(sp)
		while (us--)
20084ba8:	d8800917 	ldw	r2,36(sp)
20084bac:	10ffffc4 	addi	r3,r2,-1
20084bb0:	d8c00915 	stw	r3,36(sp)
20084bb4:	103ffc1e 	bne	r2,zero,20084ba8 <__flash_rwdata_start+0xfffe9d3c>
20084bb8:	297fffc4 	addi	r5,r5,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084bbc:	283ff91e 	bne	r5,zero,20084ba4 <__flash_rwdata_start+0xfffe9d38>
20084bc0:	d8800317 	ldw	r2,12(sp)
20084bc4:	05802034 	movhi	r22,128
20084bc8:	b5bfe004 	addi	r22,r22,-128
20084bcc:	0489c404 	movi	r18,10000
		return err;

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084bd0:	05400044 	movi	r21,1
		cmd.resp_type = MMC_RSP_R3;
20084bd4:	05000044 	movi	r20,1
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084bd8:	04401904 	movi	r17,100

		if (err)
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
20084bdc:	04ffffc4 	movi	r19,-1
20084be0:	e0c00917 	ldw	r3,36(fp)
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
20084be4:	e1001217 	ldw	r4,72(fp)
		return err;

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
20084be8:	dd40000d 	sth	r21,0(sp)
20084bec:	1d86703a 	and	r3,r3,r22
		cmd.resp_type = MMC_RSP_R3;
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
				| (cmd.response[0] & OCR_ACCESS_MODE);
20084bf0:	18d80034 	orhi	r3,r3,24576
20084bf4:	1884703a 	and	r2,r3,r2

	udelay(1000);

	do {
		cmd.cmdidx = MMC_CMD_SEND_OP_COND;
		cmd.resp_type = MMC_RSP_R3;
20084bf8:	dd000115 	stw	r20,4(sp)
		cmd.cmdarg = (mmc->voltages & (cmd.response[0] & OCR_VOLTAGE_MASK))
20084bfc:	d8800215 	stw	r2,8(sp)
				| (cmd.response[0] & OCR_ACCESS_MODE);

		if (mmc->host_caps & MMC_MODE_HC)
20084c00:	20c2000c 	andi	r3,r4,2048
20084c04:	18000226 	beq	r3,zero,20084c10 <mmc_init+0x3e4>
			cmd.cmdarg |= OCR_HCS;
20084c08:	10900034 	orhi	r2,r2,16384
20084c0c:	d8800215 	stw	r2,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084c10:	e0802417 	ldw	r2,144(fp)
20084c14:	e009883a 	mov	r4,fp
20084c18:	d80b883a 	mov	r5,sp
20084c1c:	000d883a 	mov	r6,zero
20084c20:	103ee83a 	callr	r2
		if (mmc->host_caps & MMC_MODE_HC)
			cmd.cmdarg |= OCR_HCS;

		err = mmc_send_cmd(mmc, &cmd, NULL);

		if (err)
20084c24:	10000d1e 	bne	r2,zero,20084c5c <mmc_init+0x430>
#define MMC_PRINT(x)
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
20084c28:	dc400a15 	stw	r17,40(sp)
20084c2c:	0100fa04 	movi	r4,1000
	while (t--) {
		us = US_DELAY;
20084c30:	dc400a15 	stw	r17,40(sp)
		while (us--)
20084c34:	d8c00a17 	ldw	r3,40(sp)
20084c38:	18bfffc4 	addi	r2,r3,-1
20084c3c:	d8800a15 	stw	r2,40(sp)
20084c40:	183ffc1e 	bne	r3,zero,20084c34 <__flash_rwdata_start+0xfffe9dc8>
20084c44:	213fffc4 	addi	r4,r4,-1
#endif

void udelay(int t) {
#define US_DELAY 100
	volatile int us = US_DELAY;
	while (t--) {
20084c48:	203ff91e 	bne	r4,zero,20084c30 <__flash_rwdata_start+0xfffe9dc4>

		if (err)
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);
20084c4c:	d8800317 	ldw	r2,12(sp)
20084c50:	10000716 	blt	r2,zero,20084c70 <mmc_init+0x444>
20084c54:	94bfffc4 	addi	r18,r18,-1
20084c58:	94ffe11e 	bne	r18,r19,20084be0 <__flash_rwdata_start+0xfffe9d74>
	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
		err = mmc_send_op_cond(mmc);

		if (err) {
			printf("Card did not respond to voltage select!\n\r");
20084c5c:	01000034 	movhi	r4,0
20084c60:	2100be04 	addi	r4,r4,760
			return UNUSABLE_ERR;
20084c64:	043ffbc4 	movi	r16,-17
	/* If the command timed out, we check for an MMC card */
	if (err == TIMEOUT) {
		err = mmc_send_op_cond(mmc);

		if (err) {
			printf("Card did not respond to voltage select!\n\r");
20084c68:	008a8fc0 	call	2008a8fc <printf>
			return UNUSABLE_ERR;
20084c6c:	003efe06 	br	20084868 <__flash_rwdata_start+0xfffe99fc>
			return err;

		udelay(1000);
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);

	if (timeout <= 0)
20084c70:	903ffa26 	beq	r18,zero,20084c5c <__flash_rwdata_start+0xfffe9df0>
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084c74:	1006d7ba 	srli	r3,r2,30
	} while (!(cmd.response[0] & OCR_BUSY) && timeout--);

	if (timeout <= 0)
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
20084c78:	01000074 	movhi	r4,1
20084c7c:	e1000a15 	stw	r4,40(fp)
	mmc->ocr = cmd.response[0];

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084c80:	18c0004c 	andi	r3,r3,1

	if (timeout <= 0)
		return UNUSABLE_ERR;

	mmc->version = MMC_VERSION_UNKNOWN;
	mmc->ocr = cmd.response[0];
20084c84:	e0801315 	stw	r2,76(fp)

	mmc->high_capacity = ((mmc->ocr & OCR_HCS) == OCR_HCS);
20084c88:	e0c00e15 	stw	r3,56(fp)
	mmc->rca = 0;
20084c8c:	e0001e0d 	sth	zero,120(fp)
20084c90:	003f7e06 	br	20084a8c <__flash_rwdata_start+0xfffe9c20>

20084c94 <mmc_bread>:
	else
		mmc->has_init = 1;
	return err;
}

size_t mmc_bread(struct mmc *mmc, size_t start, size_t blkcnt, void *dst) {
20084c94:	deffea04 	addi	sp,sp,-88
20084c98:	dc800e15 	stw	r18,56(sp)
20084c9c:	dfc01515 	stw	ra,84(sp)
20084ca0:	df001415 	stw	fp,80(sp)
20084ca4:	ddc01315 	stw	r23,76(sp)
20084ca8:	dd801215 	stw	r22,72(sp)
20084cac:	dd401115 	stw	r21,68(sp)
20084cb0:	dd001015 	stw	r20,64(sp)
20084cb4:	dcc00f15 	stw	r19,60(sp)
20084cb8:	dc400d15 	stw	r17,52(sp)
20084cbc:	dc000c15 	stw	r16,48(sp)
20084cc0:	3025883a 	mov	r18,r6
	size_t cur, blocks_todo = blkcnt;

	if (blkcnt == 0)
20084cc4:	30004a26 	beq	r6,zero,20084df0 <mmc_bread+0x15c>
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
20084cc8:	24002017 	ldw	r16,128(r4)
20084ccc:	24c02317 	ldw	r19,140(r4)
20084cd0:	3169883a 	add	r20,r6,r5
20084cd4:	2023883a 	mov	r17,r4
20084cd8:	282d883a 	mov	r22,r5
20084cdc:	9809883a 	mov	r4,r19
20084ce0:	800b883a 	mov	r5,r16
20084ce4:	3839883a 	mov	fp,r7
20084ce8:	0086c280 	call	20086c28 <__udivsi3>
20084cec:	15003936 	bltu	r2,r20,20084dd4 <mmc_bread+0x140>

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084cf0:	88802417 	ldw	r2,144(r17)

static int mmc_set_blocklen(struct mmc *mmc, int len) {
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
	cmd.resp_type = MMC_RSP_R1;
20084cf4:	04c00544 	movi	r19,21
}

static int mmc_set_blocklen(struct mmc *mmc, int len) {
	struct mmc_cmd cmd;

	cmd.cmdidx = MMC_CMD_SET_BLOCKLEN;
20084cf8:	00c00404 	movi	r3,16
20084cfc:	d8c0010d 	sth	r3,4(sp)
	cmd.resp_type = MMC_RSP_R1;
20084d00:	dcc00215 	stw	r19,8(sp)
	cmd.cmdarg = len;
20084d04:	dc000315 	stw	r16,12(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d08:	8809883a 	mov	r4,r17
20084d0c:	d9400104 	addi	r5,sp,4
20084d10:	000d883a 	mov	r6,zero
20084d14:	103ee83a 	callr	r2
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
	}

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
20084d18:	1000351e 	bne	r2,zero,20084df0 <mmc_bread+0x15c>
20084d1c:	88802017 	ldw	r2,128(r17)
20084d20:	902b883a 	mov	r21,r18
static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
20084d24:	05c00044 	movi	r23,1
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
20084d28:	05000484 	movi	r20,18

	if (mmc_set_blocklen(mmc, mmc->read_bl_len))
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;
20084d2c:	89002817 	ldw	r4,160(r17)
20084d30:	a821883a 	mov	r16,r21
20084d34:	2540012e 	bgeu	r4,r21,20084d3c <mmc_bread+0xa8>
20084d38:	2021883a 	mov	r16,r4
static int mmc_read_blocks(struct mmc *mmc, void *dst, size_t start,
		size_t blkcnt) {
	struct mmc_cmd cmd;
	struct mmc_data data;

	if (blkcnt > 1)
20084d3c:	bc003e2e 	bgeu	r23,r16,20084e38 <mmc_bread+0x1a4>
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
20084d40:	dd00010d 	sth	r20,4(sp)
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
20084d44:	89000e17 	ldw	r4,56(r17)
20084d48:	20003626 	beq	r4,zero,20084e24 <mmc_bread+0x190>
		cmd.cmdarg = start;
20084d4c:	dd800315 	stw	r22,12(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d50:	8a402417 	ldw	r9,144(r17)
	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;

	cmd.resp_type = MMC_RSP_R1;
20084d54:	dcc00215 	stw	r19,8(sp)

	data.dest = dst;
20084d58:	df000815 	stw	fp,32(sp)
	data.blocks = blkcnt;
20084d5c:	dc000a15 	stw	r16,40(sp)
	data.blocksize = mmc->read_bl_len;
20084d60:	d8800b15 	stw	r2,44(sp)
	data.flags = MMC_DATA_READ;
20084d64:	ddc00915 	stw	r23,36(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d68:	8809883a 	mov	r4,r17
20084d6c:	d9400104 	addi	r5,sp,4
20084d70:	d9800804 	addi	r6,sp,32
20084d74:	483ee83a 	callr	r9
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084d78:	10002d1e 	bne	r2,zero,20084e30 <mmc_bread+0x19c>
		return 0;

	if (blkcnt > 1) {
20084d7c:	bc000b2e 	bgeu	r23,r16,20084dac <mmc_bread+0x118>
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20084d80:	00c00304 	movi	r3,12

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d84:	88802417 	ldw	r2,144(r17)

	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
20084d88:	d8c0010d 	sth	r3,4(sp)
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
20084d8c:	00c00744 	movi	r3,29
	if (mmc_send_cmd(mmc, &cmd, &data))
		return 0;

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
20084d90:	d8000315 	stw	zero,12(sp)
		cmd.resp_type = MMC_RSP_R1b;
20084d94:	d8c00215 	stw	r3,8(sp)

static int mmc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd,
		struct mmc_data *data) {
	int ret;

	ret = mmc->send_cmd(mmc, cmd, data);
20084d98:	8809883a 	mov	r4,r17
20084d9c:	d9400104 	addi	r5,sp,4
20084da0:	000d883a 	mov	r6,zero
20084da4:	103ee83a 	callr	r2

	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
20084da8:	1000261e 	bne	r2,zero,20084e44 <mmc_bread+0x1b0>
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084dac:	8005883a 	mov	r2,r16
		return 0;

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
20084db0:	80800f1e 	bne	r16,r2,20084df0 <mmc_bread+0x15c>
			return 0;

		blocks_todo -= cur;
		start += cur;
		dst += cur * mmc->read_bl_len;
20084db4:	88802017 	ldw	r2,128(r17)
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;

		blocks_todo -= cur;
20084db8:	ac2bc83a 	sub	r21,r21,r16
		start += cur;
20084dbc:	b42d883a 	add	r22,r22,r16
		dst += cur * mmc->read_bl_len;
20084dc0:	80a1383a 	mul	r16,r16,r2
20084dc4:	e439883a 	add	fp,fp,r16
	} while (blocks_todo > 0);
20084dc8:	a83fd81e 	bne	r21,zero,20084d2c <__flash_rwdata_start+0xfffe9ec0>
20084dcc:	9005883a 	mov	r2,r18
20084dd0:	00000806 	br	20084df4 <mmc_bread+0x160>

	if (blkcnt == 0)
		return 0;

	if ((start + blkcnt) > mmc->capacity / mmc->read_bl_len) {
		printf("MMC: block number 0x%lx exceeds max(0x%lx) (%x, %x)\n", start + blkcnt,
20084dd4:	01000034 	movhi	r4,0
20084dd8:	2100c904 	addi	r4,r4,804
20084ddc:	dc000015 	stw	r16,0(sp)
20084de0:	a00b883a 	mov	r5,r20
20084de4:	100d883a 	mov	r6,r2
20084de8:	980f883a 	mov	r7,r19
20084dec:	008a8fc0 	call	2008a8fc <printf>
				mmc->capacity / mmc->read_bl_len, mmc->capacity, mmc->read_bl_len);
		return 0;
20084df0:	0005883a 	mov	r2,zero
		start += cur;
		dst += cur * mmc->read_bl_len;
	} while (blocks_todo > 0);

	return blkcnt;
}
20084df4:	dfc01517 	ldw	ra,84(sp)
20084df8:	df001417 	ldw	fp,80(sp)
20084dfc:	ddc01317 	ldw	r23,76(sp)
20084e00:	dd801217 	ldw	r22,72(sp)
20084e04:	dd401117 	ldw	r21,68(sp)
20084e08:	dd001017 	ldw	r20,64(sp)
20084e0c:	dcc00f17 	ldw	r19,60(sp)
20084e10:	dc800e17 	ldw	r18,56(sp)
20084e14:	dc400d17 	ldw	r17,52(sp)
20084e18:	dc000c17 	ldw	r16,48(sp)
20084e1c:	dec01604 	addi	sp,sp,88
20084e20:	f800283a 	ret
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;

	if (mmc->high_capacity)
		cmd.cmdarg = start;
	else
		cmd.cmdarg = start * mmc->read_bl_len;
20084e24:	1589383a 	mul	r4,r2,r22
20084e28:	d9000315 	stw	r4,12(sp)
20084e2c:	003fc806 	br	20084d50 <__flash_rwdata_start+0xfffe9ee4>
	data.dest = dst;
	data.blocks = blkcnt;
	data.blocksize = mmc->read_bl_len;
	data.flags = MMC_DATA_READ;

	if (mmc_send_cmd(mmc, &cmd, &data))
20084e30:	0005883a 	mov	r2,zero
20084e34:	003fde06 	br	20084db0 <__flash_rwdata_start+0xfffe9f44>
	struct mmc_data data;

	if (blkcnt > 1)
		cmd.cmdidx = MMC_CMD_READ_MULTIPLE_BLOCK;
	else
		cmd.cmdidx = MMC_CMD_READ_SINGLE_BLOCK;
20084e38:	00c00444 	movi	r3,17
20084e3c:	d8c0010d 	sth	r3,4(sp)
20084e40:	003fc006 	br	20084d44 <__flash_rwdata_start+0xfffe9ed8>
	if (blkcnt > 1) {
		cmd.cmdidx = MMC_CMD_STOP_TRANSMISSION;
		cmd.cmdarg = 0;
		cmd.resp_type = MMC_RSP_R1b;
		if (mmc_send_cmd(mmc, &cmd, NULL)) {
			printf("mmc fail to send stop cmd\n");
20084e44:	01000034 	movhi	r4,0
20084e48:	2100d704 	addi	r4,r4,860
20084e4c:	008aa000 	call	2008aa00 <puts>

	do {
		cur = (blocks_todo > mmc->b_max) ? mmc->b_max : blocks_todo;

		if (mmc_read_blocks(mmc, dst, start, cur) != cur)
			return 0;
20084e50:	0005883a 	mov	r2,zero
20084e54:	003fe706 	br	20084df4 <__flash_rwdata_start+0xfffe9f88>

20084e58 <print_mmcinfo>:
	} while (blocks_todo > 0);

	return blkcnt;
}

void print_mmcinfo(struct mmc *mmc) {
20084e58:	defffc04 	addi	sp,sp,-16
20084e5c:	dc000215 	stw	r16,8(sp)
20084e60:	2021883a 	mov	r16,r4
	printf("Device: %s\n\r", mmc->name);
20084e64:	01000034 	movhi	r4,0
20084e68:	2100e204 	addi	r4,r4,904
20084e6c:	800b883a 	mov	r5,r16
	} while (blocks_todo > 0);

	return blkcnt;
}

void print_mmcinfo(struct mmc *mmc) {
20084e70:	dfc00315 	stw	ra,12(sp)
	printf("Device: %s\n\r", mmc->name);
20084e74:	008a8fc0 	call	2008a8fc <printf>
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
20084e78:	81401ac3 	ldbu	r5,107(r16)
20084e7c:	01000034 	movhi	r4,0
20084e80:	2100e604 	addi	r4,r4,920
20084e84:	008a8fc0 	call	2008a8fc <printf>
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
20084e88:	81401a17 	ldw	r5,104(r16)
20084e8c:	01000034 	movhi	r4,0
20084e90:	2100ec04 	addi	r4,r4,944
20084e94:	280ad23a 	srli	r5,r5,8
20084e98:	297fffcc 	andi	r5,r5,65535
20084e9c:	008a8fc0 	call	2008a8fc <printf>
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20084ea0:	80801b17 	ldw	r2,108(r16)
20084ea4:	81401a03 	ldbu	r5,104(r16)
20084ea8:	01000034 	movhi	r4,0
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
20084eac:	1006d23a 	srli	r3,r2,8
20084eb0:	100ed43a 	srli	r7,r2,16

void print_mmcinfo(struct mmc *mmc) {
	printf("Device: %s\n\r", mmc->name);
	printf("Manufacturer ID: %x\n\r", mmc->cid[0] >> 24);
	printf("OEM: %x\n\r", (mmc->cid[0] >> 8) & 0xffff);
	printf("Name: %c%c%c%c%c \n\r", mmc->cid[0] & 0xff, (mmc->cid[1] >> 24),
20084eb4:	100cd63a 	srli	r6,r2,24
20084eb8:	18c03fcc 	andi	r3,r3,255
20084ebc:	10803fcc 	andi	r2,r2,255
20084ec0:	39c03fcc 	andi	r7,r7,255
20084ec4:	d8c00015 	stw	r3,0(sp)
20084ec8:	2100ef04 	addi	r4,r4,956
20084ecc:	d8800115 	stw	r2,4(sp)
20084ed0:	008a8fc0 	call	2008a8fc <printf>
			(mmc->cid[1] >> 16) & 0xff, (mmc->cid[1] >> 8) & 0xff,
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
20084ed4:	81401f17 	ldw	r5,124(r16)
20084ed8:	01000034 	movhi	r4,0
20084edc:	2100f404 	addi	r4,r4,976
20084ee0:	008a8fc0 	call	2008a8fc <printf>
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);
20084ee4:	81402017 	ldw	r5,128(r16)
20084ee8:	01000034 	movhi	r4,0
20084eec:	2100f904 	addi	r4,r4,996
20084ef0:	008a8fc0 	call	2008a8fc <printf>

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084ef4:	81c00a17 	ldw	r7,40(r16)
20084ef8:	388000ac 	andhi	r2,r7,2
20084efc:	10001b1e 	bne	r2,zero,20084f6c <print_mmcinfo+0x114>
20084f00:	01400034 	movhi	r5,0
20084f04:	2940df04 	addi	r5,r5,892
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);
20084f08:	380cd13a 	srli	r6,r7,4
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084f0c:	01000034 	movhi	r4,0
20084f10:	2100fe04 	addi	r4,r4,1016
20084f14:	318003cc 	andi	r6,r6,15
20084f18:	39c003cc 	andi	r7,r7,15
20084f1c:	008a8fc0 	call	2008a8fc <printf>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20084f20:	80800e17 	ldw	r2,56(r16)
20084f24:	1000141e 	bne	r2,zero,20084f78 <print_mmcinfo+0x120>
20084f28:	01400034 	movhi	r5,0
20084f2c:	2940e104 	addi	r5,r5,900
20084f30:	01000034 	movhi	r4,0
20084f34:	21010304 	addi	r4,r4,1036
20084f38:	008a8fc0 	call	2008a8fc <printf>
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);
20084f3c:	81402317 	ldw	r5,140(r16)
20084f40:	01000034 	movhi	r4,0
20084f44:	21010804 	addi	r4,r4,1056
20084f48:	280ad53a 	srli	r5,r5,20
20084f4c:	008a8fc0 	call	2008a8fc <printf>

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
20084f50:	81400f17 	ldw	r5,60(r16)
20084f54:	01000034 	movhi	r4,0
20084f58:	21010d04 	addi	r4,r4,1076
}
20084f5c:	dfc00317 	ldw	ra,12(sp)
20084f60:	dc000217 	ldw	r16,8(sp)
20084f64:	dec00404 	addi	sp,sp,16
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
	printf("Capacity: %lu MB\n\r", mmc->capacity / 1024 / 1024);

	printf("Bus Width: %d-bit\n\r", mmc->bus_width);
20084f68:	008a8fc1 	jmpi	2008a8fc <printf>
			mmc->cid[1] & 0xff);

	printf("Tran Speed: %d\n\r", mmc->tran_speed);
	printf("Rd Block Len: %d\n\r", mmc->read_bl_len);

	printf("%s version %d.%d\n\r", IS_SD(mmc) ? "SD" : "MMC",
20084f6c:	01400034 	movhi	r5,0
20084f70:	2940de04 	addi	r5,r5,888
20084f74:	003fe406 	br	20084f08 <__flash_rwdata_start+0xfffea09c>
			(mmc->version >> 4) & 0xf, mmc->version & 0xf);

	printf("High Capacity: %s\n\r", mmc->high_capacity ? "Yes" : "No");
20084f78:	01400034 	movhi	r5,0
20084f7c:	2940e004 	addi	r5,r5,896
20084f80:	003feb06 	br	20084f30 <__flash_rwdata_start+0xfffea0c4>

20084f84 <ocsdc_set_ios>:
}

static void ocsdc_set_ios(struct mmc *mmc)
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20084f84:	20800f17 	ldw	r2,60(r4)

	return 0;
}

static void ocsdc_set_ios(struct mmc *mmc)
{
20084f88:	defffb04 	addi	sp,sp,-20
20084f8c:	dfc00415 	stw	ra,16(sp)
20084f90:	dcc00315 	stw	r19,12(sp)
20084f94:	dc800215 	stw	r18,8(sp)
20084f98:	dc400115 	stw	r17,4(sp)
20084f9c:	dc000015 	stw	r16,0(sp)
{
	IOWR(dev->iobase, offset, data);
}

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
	if (width == 4)
20084fa0:	00c00104 	movi	r3,4
}

static void ocsdc_set_ios(struct mmc *mmc)
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);
20084fa4:	21400817 	ldw	r5,32(r4)
{
	IOWR(dev->iobase, offset, data);
}

static void ocsdc_set_buswidth(struct ocsdc * dev, uint width) {
	if (width == 4)
20084fa8:	10c02d26 	beq	r2,r3,20085060 <ocsdc_set_ios+0xdc>
		ocsdc_write(dev, OCSDC_CONTROL, 1);
	else if (width == 1)
20084fac:	00c00044 	movi	r3,1
20084fb0:	10c02f26 	beq	r2,r3,20085070 <ocsdc_set_ios+0xec>
{
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);

	/* Set clock speed */
	if (mmc->clock)
20084fb4:	24001017 	ldw	r16,64(r4)
20084fb8:	8000071e 	bne	r16,zero,20084fd8 <ocsdc_set_ios+0x54>
		ocsdc_set_clock(mmc->priv, mmc->clock);
}
20084fbc:	dfc00417 	ldw	ra,16(sp)
20084fc0:	dcc00317 	ldw	r19,12(sp)
20084fc4:	dc800217 	ldw	r18,8(sp)
20084fc8:	dc400117 	ldw	r17,4(sp)
20084fcc:	dc000017 	ldw	r16,0(sp)
20084fd0:	dec00504 	addi	sp,sp,20
20084fd4:	f800283a 	ret
	/* Support only 4 bit if */
	ocsdc_set_buswidth(mmc->priv, mmc->bus_width);

	/* Set clock speed */
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
20084fd8:	24400817 	ldw	r17,32(r4)
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20084fdc:	89000117 	ldw	r4,4(r17)
20084fe0:	81002626 	beq	r16,r4,2008507c <ocsdc_set_ios+0xf8>
20084fe4:	00897a00 	call	200897a0 <__floatsidf>
20084fe8:	8009883a 	mov	r4,r16
20084fec:	1027883a 	mov	r19,r2
20084ff0:	1825883a 	mov	r18,r3
20084ff4:	00898700 	call	20089870 <__floatunsidf>
20084ff8:	1009883a 	mov	r4,r2
20084ffc:	180b883a 	mov	r5,r3
20085000:	100d883a 	mov	r6,r2
20085004:	180f883a 	mov	r7,r3
20085008:	00875bc0 	call	200875bc <__adddf3>
2008500c:	9809883a 	mov	r4,r19
20085010:	900b883a 	mov	r5,r18
20085014:	100d883a 	mov	r6,r2
20085018:	180f883a 	mov	r7,r3
2008501c:	0087e580 	call	20087e58 <__divdf3>
20085020:	1009883a 	mov	r4,r2
20085024:	180b883a 	mov	r5,r3
20085028:	000d883a 	mov	r6,zero
2008502c:	01cffc34 	movhi	r7,16368
20085030:	0088e480 	call	20088e48 <__subdf3>
20085034:	1009883a 	mov	r4,r2
20085038:	180b883a 	mov	r5,r3
2008503c:	00897180 	call	20089718 <__fixdfsi>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20085040:	88c00017 	ldw	r3,0(r17)
20085044:	01000044 	movi	r4,1
20085048:	19002835 	stwio	r4,160(r3)
2008504c:	88c00017 	ldw	r3,0(r17)
20085050:	18802435 	stwio	r2,144(r3)
20085054:	88800017 	ldw	r2,0(r17)
20085058:	10002835 	stwio	zero,160(r2)
2008505c:	003fd706 	br	20084fbc <__flash_rwdata_start+0xfffea150>
20085060:	28800017 	ldw	r2,0(r5)
20085064:	00c00044 	movi	r3,1
20085068:	10c01c35 	stwio	r3,112(r2)
2008506c:	003fd106 	br	20084fb4 <__flash_rwdata_start+0xfffea148>
20085070:	28800017 	ldw	r2,0(r5)
20085074:	10001c35 	stwio	zero,112(r2)
20085078:	003fce06 	br	20084fb4 <__flash_rwdata_start+0xfffea148>
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
2008507c:	00802004 	movi	r2,128
20085080:	003fef06 	br	20085040 <__flash_rwdata_start+0xfffea1d4>

20085084 <ocsdc_send_cmd>:
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20085084:	defffa04 	addi	sp,sp,-24
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
20085088:	28800117 	ldw	r2,4(r5)
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
2008508c:	dc000115 	stw	r16,4(sp)
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
20085090:	2c00000b 	ldhu	r16,0(r5)
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
20085094:	dc800315 	stw	r18,12(sp)
20085098:	dc400215 	stw	r17,8(sp)
2008509c:	dfc00515 	stw	ra,20(sp)
200850a0:	dcc00415 	stw	r19,16(sp)
	struct ocsdc * dev = mmc->priv;

	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
200850a4:	10c0004c 	andi	r3,r2,1
	//printf("ocsdc_setup_read: addr: %x\n", (uint32_t)data->dest);

}

static int ocsdc_send_cmd(struct mmc *mmc, struct mmc_cmd *cmd, struct mmc_data *data)
{
200850a8:	2825883a 	mov	r18,r5
	struct ocsdc * dev = mmc->priv;
200850ac:	24400817 	ldw	r17,32(r4)

	int command = (cmd->cmdidx << 8);
200850b0:	8020923a 	slli	r16,r16,8
	if (cmd->resp_type & MMC_RSP_PRESENT) {
200850b4:	18000326 	beq	r3,zero,200850c4 <ocsdc_send_cmd+0x40>
		if (cmd->resp_type & MMC_RSP_136)
200850b8:	10c0008c 	andi	r3,r2,2
200850bc:	18003c26 	beq	r3,zero,200851b0 <ocsdc_send_cmd+0x12c>
			command |= 2;
200850c0:	84000094 	ori	r16,r16,2
		else {
			command |= 1;
		}
	}
	if (cmd->resp_type & MMC_RSP_BUSY)
200850c4:	10c0020c 	andi	r3,r2,8
200850c8:	18000126 	beq	r3,zero,200850d0 <ocsdc_send_cmd+0x4c>
		command |= (1 << 2);
200850cc:	84000114 	ori	r16,r16,4
	if (cmd->resp_type & MMC_RSP_CRC)
200850d0:	10c0010c 	andi	r3,r2,4
200850d4:	18000126 	beq	r3,zero,200850dc <ocsdc_send_cmd+0x58>
		command |= (1 << 3);
200850d8:	84000214 	ori	r16,r16,8
	if (cmd->resp_type & MMC_RSP_OPCODE)
200850dc:	1080040c 	andi	r2,r2,16
200850e0:	10000126 	beq	r2,zero,200850e8 <ocsdc_send_cmd+0x64>
		command |= (1 << 4);
200850e4:	84000414 	ori	r16,r16,16

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
200850e8:	30000326 	beq	r6,zero,200850f8 <ocsdc_send_cmd+0x74>
200850ec:	30800117 	ldw	r2,4(r6)
200850f0:	10c000cc 	andi	r3,r2,3
200850f4:	1800161e 	bne	r3,zero,20085150 <ocsdc_send_cmd+0xcc>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
200850f8:	88800017 	ldw	r2,0(r17)
200850fc:	14000435 	stwio	r16,16(r2)
20085100:	88800017 	ldw	r2,0(r17)
20085104:	90c00217 	ldw	r3,8(r18)
20085108:	10c00035 	stwio	r3,0(r2)
2008510c:	89000017 	ldw	r4,0(r17)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20085110:	21003404 	addi	r4,r4,208
20085114:	00000106 	br	2008511c <ocsdc_send_cmd+0x98>
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
			break;
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20085118:	1800271e 	bne	r3,zero,200851b8 <ocsdc_send_cmd+0x134>
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
2008511c:	20c00037 	ldwio	r3,0(r4)

	int retval = 0;
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20085120:	1880008c 	andi	r2,r3,2
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			OCSDC_PRINT(("ocsdc_finish: cmd %d, status %x\n\r", cmd->cmdidx, r2));
			retval = -1;
			break;
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
20085124:	18c0004c 	andi	r3,r3,1

	int retval = 0;
	while (1) {
		int r2 = ocsdc_read(dev, OCSDC_CMD_INT_STATUS);
		//printf("ocsdc_finish: cmd %d, status %x\n", cmd->cmdidx, r2);
		if (r2 & OCSDC_CMD_INT_STATUS_EI) {
20085128:	103ffb26 	beq	r2,zero,20085118 <__flash_rwdata_start+0xfffea2ac>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
2008512c:	20000035 	stwio	zero,0(r4)
	OCSDC_PRINT(("ocsdc_send_cmd %04x\n\r", command));

	ocsdc_write(dev, OCSDC_COMMAND, command);
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);

	if (ocsdc_finish(dev, cmd) < 0) return -1;
20085130:	00bfffc4 	movi	r2,-1
		bool ret = ocsdc_data_finish(dev);

		return ret;
	}
	else return 0;
}
20085134:	dfc00517 	ldw	ra,20(sp)
20085138:	dcc00417 	ldw	r19,16(sp)
2008513c:	dc800317 	ldw	r18,12(sp)
20085140:	dc400217 	ldw	r17,8(sp)
20085144:	dc000117 	ldw	r16,4(sp)
20085148:	dec00604 	addi	sp,sp,24
2008514c:	f800283a 	ret
	if (cmd->resp_type & MMC_RSP_CRC)
		command |= (1 << 3);
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
20085150:	30c00217 	ldw	r3,8(r6)
20085154:	183fe826 	beq	r3,zero,200850f8 <__flash_rwdata_start+0xfffea28c>
		if (data->flags & MMC_DATA_READ)
20085158:	1100004c 	andi	r4,r2,1
			command |= (1 << 5);
		if (data->flags & MMC_DATA_WRITE)
2008515c:	1080008c 	andi	r2,r2,2
		command |= (1 << 3);
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
		if (data->flags & MMC_DATA_READ)
20085160:	2000321e 	bne	r4,zero,2008522c <ocsdc_send_cmd+0x1a8>
			command |= (1 << 5);
		if (data->flags & MMC_DATA_WRITE)
20085164:	10000126 	beq	r2,zero,2008516c <ocsdc_send_cmd+0xe8>
			command |= (1 << 6);
20085168:	84001014 	ori	r16,r16,64
	if (data->flags & MMC_DATA_READ) {
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->dest);
	}
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
2008516c:	31400317 	ldw	r5,12(r6)
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
20085170:	31000017 	ldw	r4,0(r6)
20085174:	d9800015 	stw	r6,0(sp)
20085178:	194b383a 	mul	r5,r3,r5
2008517c:	00976ec0 	call	200976ec <alt_dcache_flush>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20085180:	d9800017 	ldw	r6,0(sp)
20085184:	88800017 	ldw	r2,0(r17)
20085188:	30c00017 	ldw	r3,0(r6)
2008518c:	10c06035 	stwio	r3,384(r2)
20085190:	88800017 	ldw	r2,0(r17)
20085194:	30c00317 	ldw	r3,12(r6)
20085198:	10c04435 	stwio	r3,272(r2)
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
2008519c:	30800217 	ldw	r2,8(r6)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
200851a0:	88c00017 	ldw	r3,0(r17)
	else {
		flush_dcache_range((void *)data->src, (void *)data->src+data->blocksize*data->blocks);
		ocsdc_write(dev, OCSDC_DST_SRC_ADDR, (uint32_t)data->src);
	}
	ocsdc_write(dev, OCSDC_BLOCK_SIZE, data->blocksize);
	ocsdc_write(dev, OCSDC_BLOCK_COUNT, data->blocks-1);
200851a4:	10bfffc4 	addi	r2,r2,-1
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
200851a8:	18804835 	stwio	r2,288(r3)
200851ac:	003fd206 	br	200850f8 <__flash_rwdata_start+0xfffea28c>
	int command = (cmd->cmdidx << 8);
	if (cmd->resp_type & MMC_RSP_PRESENT) {
		if (cmd->resp_type & MMC_RSP_136)
			command |= 2;
		else {
			command |= 1;
200851b0:	84000054 	ori	r16,r16,1
200851b4:	003fc306 	br	200850c4 <__flash_rwdata_start+0xfffea258>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
200851b8:	20000035 	stwio	zero,0(r4)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
200851bc:	88c00017 	ldw	r3,0(r17)
200851c0:	19000837 	ldwio	r4,32(r3)
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
200851c4:	90c00117 	ldw	r3,4(r18)
		}
		else if (r2 & OCSDC_CMD_INT_STATUS_CC) {
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
200851c8:	91000315 	stw	r4,12(r18)
			if (cmd->resp_type & MMC_RSP_136) {
200851cc:	18c0008c 	andi	r3,r3,2
200851d0:	18000c1e 	bne	r3,zero,20085204 <ocsdc_send_cmd+0x180>

	ocsdc_write(dev, OCSDC_COMMAND, command);
	ocsdc_write(dev, OCSDC_ARGUMENT, cmd->cmdarg);

	if (ocsdc_finish(dev, cmd) < 0) return -1;
	if (data && data->blocks) {
200851d4:	303fd726 	beq	r6,zero,20085134 <__flash_rwdata_start+0xfffea2c8>
200851d8:	30c00217 	ldw	r3,8(r6)
200851dc:	183fd526 	beq	r3,zero,20085134 <__flash_rwdata_start+0xfffea2c8>
200851e0:	89000017 	ldw	r4,0(r17)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
200851e4:	21003c04 	addi	r4,r4,240
200851e8:	20800037 	ldwio	r2,0(r4)
}

static int ocsdc_data_finish(struct ocsdc * dev) {
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
200851ec:	103ffe26 	beq	r2,zero,200851e8 <__flash_rwdata_start+0xfffea37c>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
200851f0:	20000035 	stwio	zero,0(r4)
	int status;

    while ((status = ocsdc_read(dev, OCSDC_DAT_INT_STATUS)) == 0);
    ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);

    if (status & SDCMSC_DAT_INT_STATUS_TRS) {
200851f4:	1080004c 	andi	r2,r2,1
200851f8:	1080005c 	xori	r2,r2,1
200851fc:	0085c83a 	sub	r2,zero,r2
20085200:	003fcc06 	br	20085134 <__flash_rwdata_start+0xfffea2c8>
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20085204:	88c00017 	ldw	r3,0(r17)
20085208:	18c00c37 	ldwio	r3,48(r3)
			//clear interrupts
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
2008520c:	90c00415 	stw	r3,16(r18)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
20085210:	88c00017 	ldw	r3,0(r17)
20085214:	18c01037 	ldwio	r3,64(r3)
			ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
20085218:	90c00515 	stw	r3,20(r18)
	alt_dcache_flush(start, end-start);
}

static inline uint32_t ocsdc_read(struct ocsdc *dev, int offset)
{
	return IORD(dev->iobase, offset);
2008521c:	88c00017 	ldw	r3,0(r17)
20085220:	18c01437 	ldwio	r3,80(r3)
			//get response
			cmd->response[0] = ocsdc_read(dev, OCSDC_RESPONSE_1);
			if (cmd->resp_type & MMC_RSP_136) {
				cmd->response[1] = ocsdc_read(dev, OCSDC_RESPONSE_2);
				cmd->response[2] = ocsdc_read(dev, OCSDC_RESPONSE_3);
				cmd->response[3] = ocsdc_read(dev, OCSDC_RESPONSE_4);
20085224:	90c00615 	stw	r3,24(r18)
20085228:	003fea06 	br	200851d4 <__flash_rwdata_start+0xfffea368>
	if (cmd->resp_type & MMC_RSP_OPCODE)
		command |= (1 << 4);

	if (data && ((data->flags & MMC_DATA_READ) || ((data->flags & MMC_DATA_WRITE))) && data->blocks) {
		if (data->flags & MMC_DATA_READ)
			command |= (1 << 5);
2008522c:	84c00814 	ori	r19,r16,32
		if (data->flags & MMC_DATA_WRITE)
20085230:	10000126 	beq	r2,zero,20085238 <ocsdc_send_cmd+0x1b4>
			command |= (1 << 6);
20085234:	84c01814 	ori	r19,r16,96

static void ocsdc_setup_data_xfer(struct ocsdc * dev, struct mmc_cmd *cmd, struct mmc_data *data) {

	//invalidate cache
	if (data->flags & MMC_DATA_READ) {
		flush_dcache_range(data->dest, data->dest+data->blocksize*data->blocks);
20085238:	31400317 	ldw	r5,12(r6)
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
2008523c:	31000017 	ldw	r4,0(r6)
20085240:	d9800015 	stw	r6,0(sp)
20085244:	194b383a 	mul	r5,r3,r5
20085248:	00976ec0 	call	200976ec <alt_dcache_flush>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
2008524c:	d9800017 	ldw	r6,0(sp)
20085250:	88800017 	ldw	r2,0(r17)
20085254:	30c00017 	ldw	r3,0(r6)
20085258:	10c06035 	stwio	r3,384(r2)
2008525c:	9821883a 	mov	r16,r19
20085260:	003fcb06 	br	20085190 <__flash_rwdata_start+0xfffea324>

20085264 <ocsdc_init>:
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20085264:	defffb04 	addi	sp,sp,-20
20085268:	dc000015 	stw	r16,0(sp)
	struct ocsdc * dev = mmc->priv;
2008526c:	24000817 	ldw	r16,32(r4)
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
20085270:	dfc00415 	stw	ra,16(sp)
20085274:	dcc00315 	stw	r19,12(sp)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20085278:	80800017 	ldw	r2,0(r16)
	else return 0;
}

/* Initialize ocsdc controller */
static int ocsdc_init(struct mmc *mmc)
{
2008527c:	dc800215 	stw	r18,8(sp)
20085280:	dc400115 	stw	r17,4(sp)
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
20085284:	00dfffc4 	movi	r3,32767
20085288:	10c02035 	stwio	r3,128(r2)
2008528c:	80800017 	ldw	r2,0(r16)
20085290:	10003835 	stwio	zero,224(r2)
20085294:	80800017 	ldw	r2,0(r16)
20085298:	10004035 	stwio	zero,256(r2)
2008529c:	80800017 	ldw	r2,0(r16)
200852a0:	10003435 	stwio	zero,208(r2)
200852a4:	80800017 	ldw	r2,0(r16)
200852a8:	10003c35 	stwio	zero,240(r2)
	ocsdc_write(dev, OCSDC_DAT_INT_ENABLE, 0);
	//clear all interrupts
	ocsdc_write(dev, OCSDC_CMD_INT_STATUS, 0);
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);
200852ac:	81000117 	ldw	r4,4(r16)
200852b0:	2022d7fa 	srli	r17,r4,31
200852b4:	8923883a 	add	r17,r17,r4
200852b8:	8823d07a 	srai	r17,r17,1
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
200852bc:	89002626 	beq	r17,r4,20085358 <ocsdc_init+0xf4>
200852c0:	00897a00 	call	200897a0 <__floatsidf>
200852c4:	8809883a 	mov	r4,r17
200852c8:	1027883a 	mov	r19,r2
200852cc:	1825883a 	mov	r18,r3
200852d0:	00898700 	call	20089870 <__floatunsidf>
200852d4:	1009883a 	mov	r4,r2
200852d8:	180b883a 	mov	r5,r3
200852dc:	100d883a 	mov	r6,r2
200852e0:	180f883a 	mov	r7,r3
200852e4:	00875bc0 	call	200875bc <__adddf3>
200852e8:	9809883a 	mov	r4,r19
200852ec:	900b883a 	mov	r5,r18
200852f0:	100d883a 	mov	r6,r2
200852f4:	180f883a 	mov	r7,r3
200852f8:	0087e580 	call	20087e58 <__divdf3>
200852fc:	1009883a 	mov	r4,r2
20085300:	180b883a 	mov	r5,r3
20085304:	000d883a 	mov	r6,zero
20085308:	01cffc34 	movhi	r7,16368
2008530c:	0088e480 	call	20088e48 <__subdf3>
20085310:	1009883a 	mov	r4,r2
20085314:	180b883a 	mov	r5,r3
20085318:	00897180 	call	20089718 <__fixdfsi>
	return IORD(dev->iobase, offset);
}

static inline void ocsdc_write(struct ocsdc *dev, int offset, uint32_t data)
{
	IOWR(dev->iobase, offset, data);
2008531c:	80c00017 	ldw	r3,0(r16)
20085320:	01000044 	movi	r4,1
20085324:	19002835 	stwio	r4,160(r3)
20085328:	80c00017 	ldw	r3,0(r16)
2008532c:	18802435 	stwio	r2,144(r3)
20085330:	80800017 	ldw	r2,0(r16)
20085334:	10002835 	stwio	zero,160(r2)
	ocsdc_write(dev, OCSDC_DAT_INT_STATUS, 0);
	//set clock to maximum (devide by 2)
	ocsdc_set_clock(dev, dev->clk_freq/2);

	return 0;
}
20085338:	0005883a 	mov	r2,zero
2008533c:	dfc00417 	ldw	ra,16(sp)
20085340:	dcc00317 	ldw	r19,12(sp)
20085344:	dc800217 	ldw	r18,8(sp)
20085348:	dc400117 	ldw	r17,4(sp)
2008534c:	dc000017 	ldw	r16,0(sp)
20085350:	dec00504 	addi	sp,sp,20
20085354:	f800283a 	ret
}

/* Set clock prescalar value based on the required clock in HZ */
static void ocsdc_set_clock(struct ocsdc * dev, uint clock)
{
	int clk_div = (clock == dev->clk_freq)? 0x00000080 : dev->clk_freq / (2.0 * clock) - 1;
20085358:	00802004 	movi	r2,128
2008535c:	003fef06 	br	2008531c <__flash_rwdata_start+0xfffea4b0>

20085360 <flush_dcache_range>:
};

#define OCSDC_PRINT(x)	//DEBUG(x);

void flush_dcache_range(void * start, void * end) {
	alt_dcache_flush(start, end-start);
20085360:	290bc83a 	sub	r5,r5,r4
20085364:	00976ec1 	jmpi	200976ec <alt_dcache_flush>

20085368 <ocsdc_mmc_init>:
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
}

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20085368:	defffb04 	addi	sp,sp,-20
2008536c:	dcc00315 	stw	r19,12(sp)
20085370:	2027883a 	mov	r19,r4
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
20085374:	01002904 	movi	r4,164
	if (mmc->clock)
		ocsdc_set_clock(mmc->priv, mmc->clock);
}

struct mmc * ocsdc_mmc_init(int base_addr, int clk_freq)
{
20085378:	dc400115 	stw	r17,4(sp)
2008537c:	dc000015 	stw	r16,0(sp)
20085380:	dfc00415 	stw	ra,16(sp)
20085384:	dc800215 	stw	r18,8(sp)
20085388:	2823883a 	mov	r17,r5
	struct mmc *mmc;
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
2008538c:	0089e280 	call	20089e28 <malloc>
20085390:	1021883a 	mov	r16,r2
	if (!mmc) goto MMC_ALLOC;
20085394:	10003626 	beq	r2,zero,20085470 <ocsdc_mmc_init+0x108>
	priv = malloc(sizeof(struct ocsdc));
20085398:	01000204 	movi	r4,8
2008539c:	0089e280 	call	20089e28 <malloc>
200853a0:	1025883a 	mov	r18,r2
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
200853a4:	8009883a 	mov	r4,r16
	struct ocsdc *priv;

	mmc = malloc(sizeof(struct mmc));
	if (!mmc) goto MMC_ALLOC;
	priv = malloc(sizeof(struct ocsdc));
	if (!priv) goto OCSDC_ALLOC;
200853a8:	10003326 	beq	r2,zero,20085478 <ocsdc_mmc_init+0x110>

	memset(mmc, 0, sizeof(struct mmc));
200853ac:	000b883a 	mov	r5,zero
200853b0:	01802904 	movi	r6,164
200853b4:	008a7ac0 	call	2008a7ac <memset>
	memset(priv, 0, sizeof(struct ocsdc));

	priv->iobase = base_addr;
	priv->clk_freq = clk_freq;

	sprintf(mmc->name, "ocsdc");
200853b8:	00991cf4 	movhi	r2,25715
200853bc:	1098dbc4 	addi	r2,r2,25455
200853c0:	80800015 	stw	r2,0(r16)
200853c4:	008018c4 	movi	r2,99
200853c8:	8080010d 	sth	r2,4(r16)
	mmc->priv = priv;
	mmc->send_cmd = ocsdc_send_cmd;
200853cc:	00880234 	movhi	r2,8200
200853d0:	10942104 	addi	r2,r2,20612
200853d4:	80802415 	stw	r2,144(r16)
	mmc->set_ios = ocsdc_set_ios;
200853d8:	00880234 	movhi	r2,8200
200853dc:	1093e104 	addi	r2,r2,20356
200853e0:	80802515 	stw	r2,148(r16)
	mmc->init = ocsdc_init;
200853e4:	00880234 	movhi	r2,8200
200853e8:	10949904 	addi	r2,r2,21092
200853ec:	80802615 	stw	r2,152(r16)
	if (!priv) goto OCSDC_ALLOC;

	memset(mmc, 0, sizeof(struct mmc));
	memset(priv, 0, sizeof(struct ocsdc));

	priv->iobase = base_addr;
200853f0:	94c00015 	stw	r19,0(r18)
	priv->clk_freq = clk_freq;
200853f4:	94400115 	stw	r17,4(r18)

	sprintf(mmc->name, "ocsdc");
	mmc->priv = priv;
200853f8:	84800815 	stw	r18,32(r16)
	mmc->send_cmd = ocsdc_send_cmd;
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
200853fc:	88800194 	ori	r2,r17,6
20085400:	00c003c4 	movi	r3,15
20085404:	18801636 	bltu	r3,r2,20085460 <ocsdc_mmc_init+0xf8>
20085408:	8804913a 	slli	r2,r17,4
2008540c:	10c00194 	ori	r3,r2,6
20085410:	00800034 	movhi	r2,0
20085414:	10835404 	addi	r2,r2,3408
20085418:	1885883a 	add	r2,r3,r2
2008541c:	10800003 	ldbu	r2,0(r2)
20085420:	80800c15 	stw	r2,48(r16)
	mmc->f_max = priv->clk_freq;
	mmc->voltages = MMC_VDD_32_33 | MMC_VDD_33_34;
20085424:	00800c34 	movhi	r2,48
20085428:	80800915 	stw	r2,36(r16)
	mmc->host_caps = MMC_MODE_4BIT;
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;
2008542c:	00804444 	movi	r2,273
20085430:	80801215 	stw	r2,72(r16)

	mmc->b_max = 256;
20085434:	00804004 	movi	r2,256
20085438:	80802815 	stw	r2,160(r16)
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
	mmc->f_max = priv->clk_freq;
2008543c:	84400d15 	stw	r17,52(r16)
	mmc->host_caps = MMC_MODE_4BIT;
	mmc->host_caps = MMC_MODE_HS | MMC_MODE_HS_52MHz | MMC_MODE_4BIT;

	mmc->b_max = 256;

	return mmc;
20085440:	8005883a 	mov	r2,r16

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
}
20085444:	dfc00417 	ldw	ra,16(sp)
20085448:	dcc00317 	ldw	r19,12(sp)
2008544c:	dc800217 	ldw	r18,8(sp)
20085450:	dc400117 	ldw	r17,4(sp)
20085454:	dc000017 	ldw	r16,0(sp)
20085458:	dec00504 	addi	sp,sp,20
2008545c:	f800283a 	ret
	mmc->send_cmd = ocsdc_send_cmd;
	mmc->set_ios = ocsdc_set_ios;
	mmc->init = ocsdc_init;
	mmc->getcd = NULL;

	mmc->f_min = priv->clk_freq/6; /*maximum clock division 64 */
20085460:	8809883a 	mov	r4,r17
20085464:	01400184 	movi	r5,6
20085468:	0086b780 	call	20086b78 <__divsi3>
2008546c:	003fec06 	br	20085420 <__flash_rwdata_start+0xfffea5b4>
	return mmc;

OCSDC_ALLOC:
	free(mmc);
MMC_ALLOC:
	return NULL;
20085470:	0005883a 	mov	r2,zero
20085474:	003ff306 	br	20085444 <__flash_rwdata_start+0xfffea5d8>
	mmc->b_max = 256;

	return mmc;

OCSDC_ALLOC:
	free(mmc);
20085478:	0089e3c0 	call	20089e3c <free>
MMC_ALLOC:
	return NULL;
2008547c:	0005883a 	mov	r2,zero
20085480:	003ff006 	br	20085444 <__flash_rwdata_start+0xfffea5d8>

20085484 <SDLIB_Init>:
struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20085484:	d0a01817 	ldw	r2,-32672(gp)

#define DEBUG_SDCARD_HEX //DEBUG_HEX_PRINTF

struct mmc * sd_drv;
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
20085488:	deffff04 	addi	sp,sp,-4
2008548c:	dfc00015 	stw	ra,0(sp)
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
20085490:	10000f26 	beq	r2,zero,200854d0 <SDLIB_Init+0x4c>
			return FALSE;
		}
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
20085494:	10c00b17 	ldw	r3,44(r2)
20085498:	18000426 	beq	r3,zero,200854ac <SDLIB_Init+0x28>
		return TRUE;
2008549c:	00800044 	movi	r2,1
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
200854a0:	dfc00017 	ldw	ra,0(sp)
200854a4:	dec00104 	addi	sp,sp,4
200854a8:	f800283a 	ret
		SDCARD_DEBUG(("ocsdc_mmc_init success\n\r"));
	}

	if (sd_drv->has_init)
		return TRUE;
	int err = mmc_init(sd_drv);
200854ac:	1009883a 	mov	r4,r2
200854b0:	008482c0 	call	2008482c <mmc_init>
	if (err != 0 || sd_drv->has_init == 0) {
200854b4:	10000b1e 	bne	r2,zero,200854e4 <SDLIB_Init+0x60>
200854b8:	d0a01817 	ldw	r2,-32672(gp)
200854bc:	10800b17 	ldw	r2,44(r2)
200854c0:	1004c03a 	cmpne	r2,r2,zero
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
200854c4:	dfc00017 	ldw	ra,0(sp)
200854c8:	dec00104 	addi	sp,sp,4
200854cc:	f800283a 	ret
//-------------------------------------------------------------------------
bool SDLIB_Init(int base_addr) {
	//---------------------------------
	//init ocsdc driver
	if (!sd_drv) {
		sd_drv = ocsdc_mmc_init(base_addr, 50000000);
200854d0:	0140bef4 	movhi	r5,763
200854d4:	297c2004 	addi	r5,r5,-3968
200854d8:	00853680 	call	20085368 <ocsdc_mmc_init>
200854dc:	d0a01815 	stw	r2,-32672(gp)
		if(!sd_drv){
200854e0:	103fec1e 	bne	r2,zero,20085494 <__flash_rwdata_start+0xfffea628>
			SDCARD_DEBUG(("ocsdc_mmc_init failed\n\r"));
			return FALSE;
200854e4:	0005883a 	mov	r2,zero
#ifdef DEBUG_SDCARD
	print_mmcinfo(sd_drv);
#endif

	return TRUE;
}
200854e8:	dfc00017 	ldw	ra,0(sp)
200854ec:	dec00104 	addi	sp,sp,4
200854f0:	f800283a 	ret

200854f4 <SDLIB_ReadBlock512>:

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200854f4:	2005883a 	mov	r2,r4
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
200854f8:	d1201817 	ldw	r4,-32672(gp)
#endif

	return TRUE;
}

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
200854fc:	deffff04 	addi	sp,sp,-4
20085500:	280f883a 	mov	r7,r5
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
20085504:	01800044 	movi	r6,1
20085508:	100b883a 	mov	r5,r2
#endif

	return TRUE;
}

bool SDLIB_ReadBlock512(alt_u32 block_number, alt_u8 *buff) {
2008550c:	dfc00015 	stw	ra,0(sp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, 1, buff) == 0) {
20085510:	0084c940 	call	20084c94 <mmc_bread>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
	}

	return TRUE;
}
20085514:	1004c03a 	cmpne	r2,r2,zero
20085518:	dfc00017 	ldw	ra,0(sp)
2008551c:	dec00104 	addi	sp,sp,4
20085520:	f800283a 	ret

20085524 <SDLIB_ReadBlocks>:

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
20085524:	2007883a 	mov	r3,r4
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20085528:	d1201817 	ldw	r4,-32672(gp)
	}

	return TRUE;
}

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
2008552c:	2805883a 	mov	r2,r5
20085530:	deffff04 	addi	sp,sp,-4
20085534:	300f883a 	mov	r7,r6
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20085538:	180b883a 	mov	r5,r3
2008553c:	100d883a 	mov	r6,r2
	}

	return TRUE;
}

bool SDLIB_ReadBlocks(alt_u32 block_number, alt_u32 n, alt_u8 *buff) {
20085540:	dfc00015 	stw	ra,0(sp)
	//SDCARD_DEBUG(("%d\n", block_number));
	if (mmc_bread(sd_drv, block_number, n, buff) == 0) {
20085544:	0084c940 	call	20084c94 <mmc_bread>
		SDCARD_DEBUG(("mmc_bread failed\n\r"));
		return FALSE;
	}

	return TRUE;
}
20085548:	1004c03a 	cmpne	r2,r2,zero
2008554c:	dfc00017 	ldw	ra,0(sp)
20085550:	dec00104 	addi	sp,sp,4
20085554:	f800283a 	ret

20085558 <hw_video_display_register_written_buffer>:
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
20085558:	defffc04 	addi	sp,sp,-16
2008555c:	dc000015 	stw	r16,0(sp)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
20085560:	24001b17 	ldw	r16,108(r4)
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
20085564:	dc400115 	stw	r17,4(sp)
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085568:	24402017 	ldw	r17,128(r4)
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
2008556c:	84000044 	addi	r16,r16,1
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
20085570:	dc800215 	stw	r18,8(sp)
20085574:	dfc00315 	stw	ra,12(sp)
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085578:	8444b03a 	or	r2,r16,r17
2008557c:	00c003c4 	movi	r3,15
 *                 -----------------------------------------
 *
 *  This Registers Buf pointed to by buffer_being_written
 *
 ******************************************************************/
void hw_video_display_register_written_buffer(hw_video_display* display) {
20085580:	2025883a 	mov	r18,r4
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
20085584:	18800f36 	bltu	r3,r2,200855c4 <hw_video_display_register_written_buffer+0x6c>
20085588:	8004913a 	slli	r2,r16,4
2008558c:	1446b03a 	or	r3,r2,r17
20085590:	00800034 	movhi	r2,0
20085594:	10835404 	addi	r2,r2,3408
20085598:	1885883a 	add	r2,r3,r2
2008559c:	10800003 	ldbu	r2,0(r2)
200855a0:	1463383a 	mul	r17,r2,r17
200855a4:	8461c83a 	sub	r16,r16,r17
	 * Note: The new buffer_being_written may NOT Yet be FREE
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
200855a8:	94001b15 	stw	r16,108(r18)
			% display->num_frame_buffers;
}
200855ac:	dfc00317 	ldw	ra,12(sp)
200855b0:	dc800217 	ldw	r18,8(sp)
200855b4:	dc400117 	ldw	r17,4(sp)
200855b8:	dc000017 	ldw	r16,0(sp)
200855bc:	dec00404 	addi	sp,sp,16
200855c0:	f800283a 	ret
	 * So Call
	 * hw_video_display_buffer_is_available
	 * to Check Before Drawing in it
	 */
	display->buffer_being_written = (display->buffer_being_written + 1)
			% display->num_frame_buffers;
200855c4:	8009883a 	mov	r4,r16
200855c8:	880b883a 	mov	r5,r17
200855cc:	0086b780 	call	20086b78 <__divsi3>
200855d0:	003ff306 	br	200855a0 <__flash_rwdata_start+0xfffea734>

200855d4 <hw_video_display_buffer_is_available>:
 ******************************************************************/

int hw_video_display_buffer_is_available(hw_video_display* display) {
	int ret_code = 0;

	if (display->num_frame_buffers > 1) {
200855d4:	20802017 	ldw	r2,128(r4)
200855d8:	00c00044 	movi	r3,1
200855dc:	1880050e 	bge	r3,r2,200855f4 <hw_video_display_buffer_is_available+0x20>
		if (display->buffer_being_displayed == display->buffer_being_written) // If Frame Buf free to write to
200855e0:	20c01a17 	ldw	r3,104(r4)
200855e4:	20801b17 	ldw	r2,108(r4)
200855e8:	1885003a 	cmpeq	r2,r3,r2
200855ec:	0085c83a 	sub	r2,zero,r2
200855f0:	f800283a 	ret
			ret_code = -1; // Free Buf not yet available
		}
	} // END if(display->num_frame_buffers > 1)
	else  // Else Only one display Buf so HAVE TO Overwrite LIVE Buf
	{
		ret_code = 0;
200855f4:	0005883a 	mov	r2,zero
	}

	return (ret_code);
}
200855f8:	f800283a 	ret

200855fc <hw_video_display_switch_frames>:

int hw_video_display_switch_frames(hw_video_display* display) {
200855fc:	defffb04 	addi	sp,sp,-20
20085600:	dc800215 	stw	r18,8(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085604:	24801a17 	ldw	r18,104(r4)
	}

	return (ret_code);
}

int hw_video_display_switch_frames(hw_video_display* display) {
20085608:	dcc00315 	stw	r19,12(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
			% display->num_frame_buffers);
2008560c:	24c02017 	ldw	r19,128(r4)
	}

	return (ret_code);
}

int hw_video_display_switch_frames(hw_video_display* display) {
20085610:	dc000015 	stw	r16,0(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085614:	94000044 	addi	r16,r18,1
	}

	return (ret_code);
}

int hw_video_display_switch_frames(hw_video_display* display) {
20085618:	dc400115 	stw	r17,4(sp)
2008561c:	dfc00415 	stw	ra,16(sp)
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085620:	84c4b03a 	or	r2,r16,r19
20085624:	00c003c4 	movi	r3,15
	}

	return (ret_code);
}

int hw_video_display_switch_frames(hw_video_display* display) {
20085628:	2023883a 	mov	r17,r4
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
2008562c:	18802336 	bltu	r3,r2,200856bc <hw_video_display_switch_frames+0xc0>
20085630:	8004913a 	slli	r2,r16,4
20085634:	14c6b03a 	or	r3,r2,r19
20085638:	00800034 	movhi	r2,0
2008563c:	10835404 	addi	r2,r2,3408
20085640:	1885883a 	add	r2,r3,r2
20085644:	10800003 	ldbu	r2,0(r2)
20085648:	14e5383a 	mul	r18,r2,r19
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
2008564c:	00800044 	movi	r2,1
int hw_video_display_switch_frames(hw_video_display* display) {
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
20085650:	84a5c83a 	sub	r18,r16,r18
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
20085654:	98802026 	beq	r19,r2,200856d8 <hw_video_display_switch_frames+0xdc>
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
		}  // Keep Trying until there is room to Transfer another Frame
	}

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {
20085658:	88801b17 	ldw	r2,108(r17)
2008565c:	14802826 	beq	r2,r18,20085700 <hw_video_display_switch_frames+0x104>
20085660:	94000044 	addi	r16,r18,1

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
20085664:	8421883a 	add	r16,r16,r16
20085668:	8421883a 	add	r16,r16,r16
2008566c:	8c21883a 	add	r16,r17,r16

	// Check if there is a new buffer to display
	else if (iNext_Rd_Buf != display->buffer_being_written) {

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
20085670:	80800017 	ldw	r2,0(r16)
20085674:	89000017 	ldw	r4,0(r17)
20085678:	11400017 	ldw	r5,0(r2)
2008567c:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
20085680:	103ffb1e 	bne	r2,zero,20085670 <__flash_rwdata_start+0xfffea804>
20085684:	89400017 	ldw	r5,0(r17)

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
					display->mSGDMA->csr_base)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		} while (RD_Desc_Fifo_Level > 1);
20085688:	01000044 	movi	r4,1
		}  // Keep Trying until there is room to Transfer another Frame

		// Wait until the last buffer is displayed
		 do {

			RD_Desc_Fifo_Level = (IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(
2008568c:	28c00317 	ldw	r3,12(r5)
20085690:	18c00237 	ldwio	r3,8(r3)
20085694:	18ffffcc 	andi	r3,r3,65535
					display->mSGDMA->csr_base)
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		} while (RD_Desc_Fifo_Level > 1);
20085698:	20fffc36 	bltu	r4,r3,2008568c <__flash_rwdata_start+0xfffea820>

		display->buffer_being_displayed = iNext_Rd_Buf;
2008569c:	8c801a15 	stw	r18,104(r17)
		return -1;
	}

	return 0;
	//printf("Displayed %d - Written %d\n", display->buffer_being_displayed, display->buffer_being_written);
}
200856a0:	dfc00417 	ldw	ra,16(sp)
200856a4:	dcc00317 	ldw	r19,12(sp)
200856a8:	dc800217 	ldw	r18,8(sp)
200856ac:	dc400117 	ldw	r17,4(sp)
200856b0:	dc000017 	ldw	r16,0(sp)
200856b4:	dec00504 	addi	sp,sp,20
200856b8:	f800283a 	ret
int hw_video_display_switch_frames(hw_video_display* display) {
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200856bc:	8009883a 	mov	r4,r16
200856c0:	980b883a 	mov	r5,r19
200856c4:	0086b780 	call	20086b78 <__divsi3>
200856c8:	14e5383a 	mul	r18,r2,r19
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200856cc:	00800044 	movi	r2,1
int hw_video_display_switch_frames(hw_video_display* display) {
	int iNext_Rd_Buf;

	alt_u32 RD_Desc_Fifo_Level;

	iNext_Rd_Buf = ((display->buffer_being_displayed + 1)
200856d0:	84a5c83a 	sub	r18,r16,r18
			% display->num_frame_buffers);

	// If there is only one buffer, display it!
	if (display->num_frame_buffers == 1) {
200856d4:	98bfe01e 	bne	r19,r2,20085658 <__flash_rwdata_start+0xfffea7ec>
200856d8:	90a1883a 	add	r16,r18,r2
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
				display->buffer_ptrs[iNext_Rd_Buf]->desc_base) != 0) {
200856dc:	8421883a 	add	r16,r16,r16
200856e0:	8421883a 	add	r16,r16,r16
200856e4:	8c21883a 	add	r16,r17,r16
					& ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK)
					>> ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		}

		// Transfer Descriptor for Frame to mSGDMA
		while (alt_msgdma_standard_descriptor_async_transfer(display->mSGDMA,
200856e8:	80800017 	ldw	r2,0(r16)
200856ec:	89000017 	ldw	r4,0(r17)
200856f0:	11400017 	ldw	r5,0(r2)
200856f4:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
200856f8:	103ffb1e 	bne	r2,zero,200856e8 <__flash_rwdata_start+0xfffea87c>
200856fc:	003fe806 	br	200856a0 <__flash_rwdata_start+0xfffea834>

		display->buffer_being_displayed = iNext_Rd_Buf;
	}
	else {
		// Switching to the next frame failed
		return -1;
20085700:	00bfffc4 	movi	r2,-1
20085704:	003fe606 	br	200856a0 <__flash_rwdata_start+0xfffea834>

20085708 <hw_video_display_clear_screen>:
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
20085708:	20801b17 	ldw	r2,108(r4)
 *				(Note: the color format is YCbCr)
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
2008570c:	21801f17 	ldw	r6,124(r4)
20085710:	29403fcc 	andi	r5,r5,255
			(void*) (display->buffer_ptrs[display->buffer_being_written]->buffer),
20085714:	10800044 	addi	r2,r2,1
20085718:	1085883a 	add	r2,r2,r2
2008571c:	1085883a 	add	r2,r2,r2
20085720:	2089883a 	add	r4,r4,r2
 *				(Note: the color format is YCbCr)
 *
 ******************************************************************/
void hw_video_display_clear_screen(hw_video_display* display,
		char color) {
	memset(
20085724:	20800017 	ldw	r2,0(r4)
20085728:	2940201c 	xori	r5,r5,128
2008572c:	297fe004 	addi	r5,r5,-128
20085730:	11000117 	ldw	r4,4(r2)
20085734:	008a7ac1 	jmpi	2008a7ac <memset>

20085738 <hw_video_display_get_descriptor_span>:
 *  MUST be SetUp Before Calling this func
 *
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 hw_video_display_get_descriptor_span(hw_video_display *display) {
	return ((display->descriptors_per_frame + 2)
20085738:	20802117 	ldw	r2,132(r4)
2008573c:	10800084 	addi	r2,r2,2
			* sizeof(alt_msgdma_standard_descriptor));
}
20085740:	1004913a 	slli	r2,r2,4
20085744:	f800283a 	ret

20085748 <hw_video_display_allocate_buffers>:
 *  This Allocates memory for Frame Bufs & descriptors
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int hw_video_display_allocate_buffers(hw_video_display* display,
		int bytes_per_frame, int num_buffers) {
20085748:	defff704 	addi	sp,sp,-36
2008574c:	dfc00815 	stw	ra,32(sp)
20085750:	ddc00715 	stw	r23,28(sp)
20085754:	dd800615 	stw	r22,24(sp)
20085758:	dd400515 	stw	r21,20(sp)
2008575c:	dd000415 	stw	r20,16(sp)
20085760:	dcc00315 	stw	r19,12(sp)
20085764:	dc800215 	stw	r18,8(sp)
20085768:	dc400115 	stw	r17,4(sp)
2008576c:	dc000015 	stw	r16,0(sp)
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085770:	0180300e 	bge	zero,r6,20085834 <hw_video_display_allocate_buffers+0xec>
20085774:	282b883a 	mov	r21,r5
20085778:	2029883a 	mov	r20,r4
2008577c:	3027883a 	mov	r19,r6
20085780:	24000104 	addi	r16,r4,4
20085784:	002d883a 	mov	r22,zero
20085788:	0025883a 	mov	r18,zero
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
2008578c:	01000204 	movi	r4,8
20085790:	0089e280 	call	20089e28 <malloc>
20085794:	80800015 	stw	r2,0(r16)
20085798:	1023883a 	mov	r17,r2

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
2008579c:	a809883a 	mov	r4,r21
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
200857a0:	94800044 	addi	r18,r18,1
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
200857a4:	10002126 	beq	r2,zero,2008582c <hw_video_display_allocate_buffers+0xe4>
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
200857a8:	0097d740 	call	20097d74 <alt_uncached_malloc>
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
200857ac:	85c00017 	ldw	r23,0(r16)

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
200857b0:	88800115 	stw	r2,4(r17)
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
200857b4:	01000804 	movi	r4,32

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
200857b8:	b8800117 	ldw	r2,4(r23)
200857bc:	10001926 	beq	r2,zero,20085824 <hw_video_display_allocate_buffers+0xdc>
 *  MUST be SetUp Before Calling this func
 *
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 hw_video_display_get_descriptor_span(hw_video_display *display) {
	return ((display->descriptors_per_frame + 2)
200857c0:	a1402117 	ldw	r5,132(r20)
200857c4:	84000104 	addi	r16,r16,4
200857c8:	29400084 	addi	r5,r5,2
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
200857cc:	280a913a 	slli	r5,r5,4
200857d0:	0089c580 	call	20089c58 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
200857d4:	b8800015 	stw	r2,0(r23)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
200857d8:	80bfff17 	ldw	r2,-4(r16)
200857dc:	10800017 	ldw	r2,0(r2)
200857e0:	10000d26 	beq	r2,zero,20085818 <hw_video_display_allocate_buffers+0xd0>
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
200857e4:	94ffe91e 	bne	r18,r19,2008578c <__flash_rwdata_start+0xfffea920>
			ret_code = -1;
		}
	}

	return ret_code;
}
200857e8:	b005883a 	mov	r2,r22
200857ec:	dfc00817 	ldw	ra,32(sp)
200857f0:	ddc00717 	ldw	r23,28(sp)
200857f4:	dd800617 	ldw	r22,24(sp)
200857f8:	dd400517 	ldw	r21,20(sp)
200857fc:	dd000417 	ldw	r20,16(sp)
20085800:	dcc00317 	ldw	r19,12(sp)
20085804:	dc800217 	ldw	r18,8(sp)
20085808:	dc400117 	ldw	r17,4(sp)
2008580c:	dc000017 	ldw	r16,0(sp)
20085810:	dec00904 	addi	sp,sp,36
20085814:	f800283a 	ret
		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
20085818:	05bfffc4 	movi	r22,-1
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
2008581c:	94ffdb1e 	bne	r18,r19,2008578c <__flash_rwdata_start+0xfffea920>
20085820:	003ff106 	br	200857e8 <__flash_rwdata_start+0xfffea97c>
		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;
20085824:	05bfffc4 	movi	r22,-1
20085828:	003fe506 	br	200857c0 <__flash_rwdata_start+0xfffea954>
	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
2008582c:	05bfffc4 	movi	r22,-1
20085830:	003fdd06 	br	200857a8 <__flash_rwdata_start+0xfffea93c>
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int hw_video_display_allocate_buffers(hw_video_display* display,
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;
20085834:	002d883a 	mov	r22,zero
20085838:	003feb06 	br	200857e8 <__flash_rwdata_start+0xfffea97c>

2008583c <hw_video_display_get_buffer>:
// ************************************************************

// Return a pointer to the buffer being written
alt_u32* hw_video_display_get_buffer(hw_video_display* display) {

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
2008583c:	20801b17 	ldw	r2,108(r4)
20085840:	10800044 	addi	r2,r2,1
20085844:	1085883a 	add	r2,r2,r2
20085848:	1085883a 	add	r2,r2,r2
2008584c:	2089883a 	add	r4,r4,r2
20085850:	20800017 	ldw	r2,0(r4)
}
20085854:	10800117 	ldw	r2,4(r2)
20085858:	f800283a 	ret

2008585c <hw_init_hdmi>:

// ************************************************************
int hw_init_hdmi() {
2008585c:	defff104 	addi	sp,sp,-60
	int slave_addr = 0x39 << 1;
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20085860:	01080434 	movhi	r4,8208
20085864:	01480434 	movhi	r5,8208
20085868:	d8800104 	addi	r2,sp,4
2008586c:	21054404 	addi	r4,r4,5392
20085870:	29454004 	addi	r5,r5,5376
20085874:	d8800015 	stw	r2,0(sp)
20085878:	01801c84 	movi	r6,114
2008587c:	000f883a 	mov	r7,zero

	return (display->buffer_ptrs[display->buffer_being_written]->buffer);
}

// ************************************************************
int hw_init_hdmi() {
20085880:	dfc00e15 	stw	ra,56(sp)
20085884:	dd000d15 	stw	r20,52(sp)
20085888:	dcc00c15 	stw	r19,48(sp)
2008588c:	dc800b15 	stw	r18,44(sp)
20085890:	dc400a15 	stw	r17,40(sp)
20085894:	dc000915 	stw	r16,36(sp)
	int slave_addr = 0x39 << 1;
	int chip_id[4];
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
20085898:	00861100 	call	20086110 <I2C_Read>
	if (!r)
2008589c:	1000ed26 	beq	r2,zero,20085c54 <hw_init_hdmi+0x3f8>
		return -1;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
200858a0:	01080434 	movhi	r4,8208
200858a4:	01480434 	movhi	r5,8208
200858a8:	d8800504 	addi	r2,sp,20
200858ac:	21054404 	addi	r4,r4,5392
200858b0:	29454004 	addi	r5,r5,5376
200858b4:	d8800015 	stw	r2,0(sp)
200858b8:	01801c84 	movi	r6,114
200858bc:	01c03d84 	movi	r7,246
200858c0:	00861100 	call	20086110 <I2C_Read>
	if (!r)
200858c4:	1000e526 	beq	r2,zero,20085c5c <hw_init_hdmi+0x400>
		return -2;

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
200858c8:	01080434 	movhi	r4,8208
200858cc:	01480434 	movhi	r5,8208
200858d0:	d8800604 	addi	r2,sp,24
200858d4:	21054404 	addi	r4,r4,5392
200858d8:	29454004 	addi	r5,r5,5376
200858dc:	d8800015 	stw	r2,0(sp)
200858e0:	01801c84 	movi	r6,114
200858e4:	01c03d44 	movi	r7,245
200858e8:	00861100 	call	20086110 <I2C_Read>
	if (!r)
200858ec:	1000dd26 	beq	r2,zero,20085c64 <hw_init_hdmi+0x408>
		return -3;

	// Initiate Color Conversion Matrix
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x18, 0xAA);
200858f0:	00802a84 	movi	r2,170
200858f4:	01080434 	movhi	r4,8208
200858f8:	01480434 	movhi	r5,8208
200858fc:	21054404 	addi	r4,r4,5392
20085900:	29454004 	addi	r5,r5,5376
20085904:	01801c84 	movi	r6,114
20085908:	01c00604 	movi	r7,24
2008590c:	d8800015 	stw	r2,0(sp)
20085910:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x19, 0xF8);
20085914:	04800644 	movi	r18,25
20085918:	00803e04 	movi	r2,248
2008591c:	01080434 	movhi	r4,8208
20085920:	01480434 	movhi	r5,8208
20085924:	21054404 	addi	r4,r4,5392
20085928:	29454004 	addi	r5,r5,5376
2008592c:	01801c84 	movi	r6,114
20085930:	900f883a 	mov	r7,r18
20085934:	d8800015 	stw	r2,0(sp)
20085938:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1A, 0x08);
2008593c:	04400684 	movi	r17,26
20085940:	04000204 	movi	r16,8
20085944:	01080434 	movhi	r4,8208
20085948:	01480434 	movhi	r5,8208
2008594c:	880f883a 	mov	r7,r17
20085950:	21054404 	addi	r4,r4,5392
20085954:	29454004 	addi	r5,r5,5376
20085958:	01801c84 	movi	r6,114
2008595c:	dc000015 	stw	r16,0(sp)
20085960:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1B, 0x00);
20085964:	01080434 	movhi	r4,8208
20085968:	01480434 	movhi	r5,8208
2008596c:	21054404 	addi	r4,r4,5392
20085970:	29454004 	addi	r5,r5,5376
20085974:	01801c84 	movi	r6,114
20085978:	01c006c4 	movi	r7,27
2008597c:	d8000015 	stw	zero,0(sp)
20085980:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1C, 0x00);
20085984:	01080434 	movhi	r4,8208
20085988:	01480434 	movhi	r5,8208
2008598c:	21054404 	addi	r4,r4,5392
20085990:	29454004 	addi	r5,r5,5376
20085994:	01801c84 	movi	r6,114
20085998:	01c00704 	movi	r7,28
2008599c:	d8000015 	stw	zero,0(sp)
200859a0:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1D, 0x00);
200859a4:	05000744 	movi	r20,29
200859a8:	01080434 	movhi	r4,8208
200859ac:	01480434 	movhi	r5,8208
200859b0:	21054404 	addi	r4,r4,5392
200859b4:	29454004 	addi	r5,r5,5376
200859b8:	01801c84 	movi	r6,114
200859bc:	a00f883a 	mov	r7,r20
200859c0:	d8000015 	stw	zero,0(sp)
200859c4:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1E, 0x1a);
200859c8:	01080434 	movhi	r4,8208
200859cc:	01480434 	movhi	r5,8208
200859d0:	21054404 	addi	r4,r4,5392
200859d4:	29454004 	addi	r5,r5,5376
200859d8:	01801c84 	movi	r6,114
200859dc:	01c00784 	movi	r7,30
200859e0:	dc400015 	stw	r17,0(sp)
200859e4:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x1F, 0x84);
200859e8:	04c007c4 	movi	r19,31
200859ec:	00802104 	movi	r2,132
200859f0:	01080434 	movhi	r4,8208
200859f4:	01480434 	movhi	r5,8208
200859f8:	21054404 	addi	r4,r4,5392
200859fc:	29454004 	addi	r5,r5,5376
20085a00:	01801c84 	movi	r6,114
20085a04:	980f883a 	mov	r7,r19
20085a08:	d8800015 	stw	r2,0(sp)
20085a0c:	0085ebc0 	call	20085ebc <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x20, 0x1A);
20085a10:	01080434 	movhi	r4,8208
20085a14:	01480434 	movhi	r5,8208
20085a18:	21054404 	addi	r4,r4,5392
20085a1c:	29454004 	addi	r5,r5,5376
20085a20:	01801c84 	movi	r6,114
20085a24:	01c00804 	movi	r7,32
20085a28:	dc400015 	stw	r17,0(sp)
20085a2c:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x21, 0x6A);
20085a30:	00801a84 	movi	r2,106
20085a34:	01080434 	movhi	r4,8208
20085a38:	01480434 	movhi	r5,8208
20085a3c:	21054404 	addi	r4,r4,5392
20085a40:	29454004 	addi	r5,r5,5376
20085a44:	01801c84 	movi	r6,114
20085a48:	01c00844 	movi	r7,33
20085a4c:	d8800015 	stw	r2,0(sp)
20085a50:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x22, 0x08);
20085a54:	01080434 	movhi	r4,8208
20085a58:	01480434 	movhi	r5,8208
20085a5c:	21054404 	addi	r4,r4,5392
20085a60:	29454004 	addi	r5,r5,5376
20085a64:	01801c84 	movi	r6,114
20085a68:	01c00884 	movi	r7,34
20085a6c:	dc000015 	stw	r16,0(sp)
20085a70:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x23, 0x00);
20085a74:	044008c4 	movi	r17,35
20085a78:	01080434 	movhi	r4,8208
20085a7c:	01480434 	movhi	r5,8208
20085a80:	21054404 	addi	r4,r4,5392
20085a84:	29454004 	addi	r5,r5,5376
20085a88:	01801c84 	movi	r6,114
20085a8c:	880f883a 	mov	r7,r17
20085a90:	d8000015 	stw	zero,0(sp)
20085a94:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x24, 0x1D);
20085a98:	01080434 	movhi	r4,8208
20085a9c:	01480434 	movhi	r5,8208
20085aa0:	21054404 	addi	r4,r4,5392
20085aa4:	29454004 	addi	r5,r5,5376
20085aa8:	01801c84 	movi	r6,114
20085aac:	01c00904 	movi	r7,36
20085ab0:	dd000015 	stw	r20,0(sp)
20085ab4:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x25, 0x50);
20085ab8:	00801404 	movi	r2,80
20085abc:	01080434 	movhi	r4,8208
20085ac0:	01480434 	movhi	r5,8208
20085ac4:	21054404 	addi	r4,r4,5392
20085ac8:	29454004 	addi	r5,r5,5376
20085acc:	01801c84 	movi	r6,114
20085ad0:	01c00944 	movi	r7,37
20085ad4:	d8800015 	stw	r2,0(sp)
20085ad8:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x26, 0x04);
20085adc:	00800104 	movi	r2,4
20085ae0:	01080434 	movhi	r4,8208
20085ae4:	01480434 	movhi	r5,8208
20085ae8:	21054404 	addi	r4,r4,5392
20085aec:	29454004 	addi	r5,r5,5376
20085af0:	01801c84 	movi	r6,114
20085af4:	01c00984 	movi	r7,38
20085af8:	d8800015 	stw	r2,0(sp)
20085afc:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x27, 0x23);
20085b00:	01080434 	movhi	r4,8208
20085b04:	01480434 	movhi	r5,8208
20085b08:	21054404 	addi	r4,r4,5392
20085b0c:	29454004 	addi	r5,r5,5376
20085b10:	01801c84 	movi	r6,114
20085b14:	01c009c4 	movi	r7,39
20085b18:	dc400015 	stw	r17,0(sp)
20085b1c:	0085ebc0 	call	20085ebc <I2C_Write>

	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x28, 0x1F);
20085b20:	01080434 	movhi	r4,8208
20085b24:	01480434 	movhi	r5,8208
20085b28:	21054404 	addi	r4,r4,5392
20085b2c:	29454004 	addi	r5,r5,5376
20085b30:	01801c84 	movi	r6,114
20085b34:	01c00a04 	movi	r7,40
20085b38:	dcc00015 	stw	r19,0(sp)
20085b3c:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x29, 0xFC);
20085b40:	00803f04 	movi	r2,252
20085b44:	01080434 	movhi	r4,8208
20085b48:	01480434 	movhi	r5,8208
20085b4c:	21054404 	addi	r4,r4,5392
20085b50:	29454004 	addi	r5,r5,5376
20085b54:	01801c84 	movi	r6,114
20085b58:	01c00a44 	movi	r7,41
20085b5c:	d8800015 	stw	r2,0(sp)
20085b60:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2A, 0x08);
20085b64:	01080434 	movhi	r4,8208
20085b68:	01480434 	movhi	r5,8208
20085b6c:	21054404 	addi	r4,r4,5392
20085b70:	29454004 	addi	r5,r5,5376
20085b74:	01801c84 	movi	r6,114
20085b78:	01c00a84 	movi	r7,42
20085b7c:	dc000015 	stw	r16,0(sp)
20085b80:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2B, 0x00);
20085b84:	01080434 	movhi	r4,8208
20085b88:	01480434 	movhi	r5,8208
20085b8c:	21054404 	addi	r4,r4,5392
20085b90:	29454004 	addi	r5,r5,5376
20085b94:	01801c84 	movi	r6,114
20085b98:	01c00ac4 	movi	r7,43
20085b9c:	d8000015 	stw	zero,0(sp)
20085ba0:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2C, 0x0D);
20085ba4:	00800344 	movi	r2,13
20085ba8:	01080434 	movhi	r4,8208
20085bac:	01480434 	movhi	r5,8208
20085bb0:	21054404 	addi	r4,r4,5392
20085bb4:	29454004 	addi	r5,r5,5376
20085bb8:	01801c84 	movi	r6,114
20085bbc:	01c00b04 	movi	r7,44
20085bc0:	d8800015 	stw	r2,0(sp)
20085bc4:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2D, 0xDE);
20085bc8:	00803784 	movi	r2,222
20085bcc:	01080434 	movhi	r4,8208
20085bd0:	01480434 	movhi	r5,8208
20085bd4:	21054404 	addi	r4,r4,5392
20085bd8:	29454004 	addi	r5,r5,5376
20085bdc:	01801c84 	movi	r6,114
20085be0:	01c00b44 	movi	r7,45
20085be4:	d8800015 	stw	r2,0(sp)
20085be8:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2E, 0x19);
20085bec:	01080434 	movhi	r4,8208
20085bf0:	01480434 	movhi	r5,8208
20085bf4:	21054404 	addi	r4,r4,5392
20085bf8:	29454004 	addi	r5,r5,5376
20085bfc:	01801c84 	movi	r6,114
20085c00:	01c00b84 	movi	r7,46
20085c04:	dc800015 	stw	r18,0(sp)
20085c08:	0085ebc0 	call	20085ebc <I2C_Write>
	I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x2F, 0x13);
20085c0c:	008004c4 	movi	r2,19
20085c10:	01080434 	movhi	r4,8208
20085c14:	01480434 	movhi	r5,8208
20085c18:	21054404 	addi	r4,r4,5392
20085c1c:	29454004 	addi	r5,r5,5376
20085c20:	d8800015 	stw	r2,0(sp)
20085c24:	01801c84 	movi	r6,114
20085c28:	01c00bc4 	movi	r7,47
20085c2c:	0085ebc0 	call	20085ebc <I2C_Write>

	return 0;
20085c30:	0005883a 	mov	r2,zero
}
20085c34:	dfc00e17 	ldw	ra,56(sp)
20085c38:	dd000d17 	ldw	r20,52(sp)
20085c3c:	dcc00c17 	ldw	r19,48(sp)
20085c40:	dc800b17 	ldw	r18,44(sp)
20085c44:	dc400a17 	ldw	r17,40(sp)
20085c48:	dc000917 	ldw	r16,36(sp)
20085c4c:	dec00f04 	addi	sp,sp,60
20085c50:	f800283a 	ret
	int chip_rev[4];

	// Identify adv7513 chip
	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0x00, &chip_rev[0]);
	if (!r)
		return -1;
20085c54:	00bfffc4 	movi	r2,-1
20085c58:	003ff606 	br	20085c34 <__flash_rwdata_start+0xfffeadc8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf6, &chip_id[0]);
	if (!r)
		return -2;
20085c5c:	00bfff84 	movi	r2,-2
20085c60:	003ff406 	br	20085c34 <__flash_rwdata_start+0xfffeadc8>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, slave_addr, 0xf5, &chip_id[1]);
	if (!r)
		return -3;
20085c64:	00bfff44 	movi	r2,-3
20085c68:	003ff206 	br	20085c34 <__flash_rwdata_start+0xfffeadc8>

20085c6c <hw_video_display_init>:
 *           the mSGDMA.
 *
 *  Returns: Ptr to  display controller structure, or NULL on failure.
 ******************************************************************/
hw_video_display* hw_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {
20085c6c:	defff404 	addi	sp,sp,-48
20085c70:	dd800815 	stw	r22,32(sp)
20085c74:	dd400715 	stw	r21,28(sp)
20085c78:	dc000215 	stw	r16,8(sp)
20085c7c:	dfc00b15 	stw	ra,44(sp)
20085c80:	df000a15 	stw	fp,40(sp)
20085c84:	ddc00915 	stw	r23,36(sp)
20085c88:	dd000615 	stw	r20,24(sp)
20085c8c:	dcc00515 	stw	r19,20(sp)
20085c90:	dc800415 	stw	r18,16(sp)
20085c94:	dc400315 	stw	r17,12(sp)
20085c98:	d9000115 	stw	r4,4(sp)
20085c9c:	282d883a 	mov	r22,r5
20085ca0:	3021883a 	mov	r16,r6
20085ca4:	382b883a 	mov	r21,r7

	if (hw_init_hdmi()) {
20085ca8:	008585c0 	call	2008585c <hw_init_hdmi>
20085cac:	10007e1e 	bne	r2,zero,20085ea8 <hw_video_display_init+0x23c>

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
	bytes_per_frame = ((width * height) * bytes_per_pixel);
20085cb0:	b427383a 	mul	r19,r22,r16

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
20085cb4:	00800644 	movi	r2,25

	alt_msgdma_dev* pVid_DMA_CSR_Dev; // Ptr to mSGDMA Cont & Status Device

	// PreCalc Values
	bytes_per_pixel = 4;
	bytes_per_frame = ((width * height) * bytes_per_pixel);
20085cb8:	9ce7883a 	add	r19,r19,r19
20085cbc:	9ce7883a 	add	r19,r19,r19

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
20085cc0:	15406a16 	blt	r2,r21,20085e6c <hw_video_display_init+0x200>
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
20085cc4:	00800044 	movi	r2,1
20085cc8:	1540720e 	bge	r2,r21,20085e94 <hw_video_display_init+0x228>
		printf("The number of buffers must be > 2!\n");
		num_buffers = 2;
	}

	// malloc display struct
	display = (hw_video_display*) malloc(sizeof(hw_video_display));
20085ccc:	01002204 	movi	r4,136
20085cd0:	0089e280 	call	20089e28 <malloc>
20085cd4:	1025883a 	mov	r18,r2
	if (!display) {
20085cd8:	10006c26 	beq	r2,zero,20085e8c <hw_video_display_init+0x220>
20085cdc:	ad000044 	addi	r20,r21,1
20085ce0:	a529883a 	add	r20,r20,r20
	display->height = height;
	display->num_frame_buffers = num_buffers;
	display->bytes_per_frame = bytes_per_frame;
	display->bytes_per_pixel = bytes_per_pixel;
	display->buffer_being_displayed = 0;
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
20085ce4:	00800044 	movi	r2,1
20085ce8:	94400104 	addi	r17,r18,4
20085cec:	a529883a 	add	r20,r20,r20
	// Init display struct
	display->width = width;
	display->height = height;
	display->num_frame_buffers = num_buffers;
	display->bytes_per_frame = bytes_per_frame;
	display->bytes_per_pixel = bytes_per_pixel;
20085cf0:	00c00104 	movi	r3,4
	if (!display) {
		return NULL;
	}

	// Init display struct
	display->width = width;
20085cf4:	95801c15 	stw	r22,112(r18)
	display->height = height;
20085cf8:	94001d15 	stw	r16,116(r18)
	display->num_frame_buffers = num_buffers;
20085cfc:	95402015 	stw	r21,128(r18)
	display->bytes_per_frame = bytes_per_frame;
20085d00:	94c01f15 	stw	r19,124(r18)
	display->bytes_per_pixel = bytes_per_pixel;
20085d04:	90c01e15 	stw	r3,120(r18)
	display->buffer_being_displayed = 0;
20085d08:	90001a15 	stw	zero,104(r18)
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
20085d0c:	90801b15 	stw	r2,108(r18)
	// See iPrev_Wr_Buf in hw_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;
20085d10:	90802115 	stw	r2,132(r18)
20085d14:	9529883a 	add	r20,r18,r20
20085d18:	8821883a 	mov	r16,r17
 *  Returns:  0 - Success
 *           -1 - Error allocating memory
 ******************************************************************/
int hw_video_display_allocate_buffers(hw_video_display* display,
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;
20085d1c:	002d883a 	mov	r22,zero

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
20085d20:	01000204 	movi	r4,8
20085d24:	0089e280 	call	20089e28 <malloc>
20085d28:	80800015 	stw	r2,0(r16)
20085d2c:	1039883a 	mov	fp,r2

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085d30:	9809883a 	mov	r4,r19

	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
20085d34:	10004b26 	beq	r2,zero,20085e64 <hw_video_display_init+0x1f8>
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085d38:	0097d740 	call	20097d74 <alt_uncached_malloc>
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085d3c:	85c00017 	ldw	r23,0(r16)

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
		}

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
20085d40:	e0800115 	stw	r2,4(fp)
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20085d44:	01000804 	movi	r4,32

		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
20085d48:	b8800117 	ldw	r2,4(r23)
20085d4c:	10004326 	beq	r2,zero,20085e5c <hw_video_display_init+0x1f0>
 *  MUST be SetUp Before Calling this func
 *
 * Returns: Size (in bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 hw_video_display_get_descriptor_span(hw_video_display *display) {
	return ((display->descriptors_per_frame + 2)
20085d50:	91402117 	ldw	r5,132(r18)
20085d54:	84000104 	addi	r16,r16,4
20085d58:	29400084 	addi	r5,r5,2
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
20085d5c:	280a913a 	slli	r5,r5,4
20085d60:	0089c580 	call	20089c58 <memalign>
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;

		display->buffer_ptrs[i]->desc_base =
20085d64:	b8800015 	stw	r2,0(r23)
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
20085d68:	80bfff17 	ldw	r2,-4(r16)
20085d6c:	10800017 	ldw	r2,0(r2)
20085d70:	10003726 	beq	r2,zero,20085e50 <hw_video_display_init+0x1e4>
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085d74:	853fea1e 	bne	r16,r20,20085d20 <__flash_rwdata_start+0xfffeaeb4>
	display->buffer_being_written = (num_buffers > 1) ? 1 : 0; // Init iPrev_Wr_Buf MUST MATCH
	// See iPrev_Wr_Buf in hw_video_display_buffer_is_available
	display->descriptors_per_frame = descriptors_per_frame;

	// malloc Frame and descriptor Bufs & SetUp Frame Buf Ptrs & Descriptor Ptrs
	if (hw_video_display_allocate_buffers(display, bytes_per_frame,
20085d78:	b000441e 	bne	r22,zero,20085e8c <hw_video_display_init+0x220>
			num_buffers)) {
		return NULL;
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
20085d7c:	d9000117 	ldw	r4,4(sp)
20085d80:	0098fe00 	call	20098fe0 <alt_msgdma_open>
	display->mSGDMA = pVid_DMA_CSR_Dev;
20085d84:	90800015 	stw	r2,0(r18)
	if (hw_video_display_allocate_buffers(display, bytes_per_frame,
			num_buffers)) {
		return NULL;
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
20085d88:	1021883a 	mov	r16,r2
	display->mSGDMA = pVid_DMA_CSR_Dev;
	if (pVid_DMA_CSR_Dev == NULL) {
20085d8c:	10003c26 	beq	r2,zero,20085e80 <hw_video_display_init+0x214>
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085d90:	05e00034 	movhi	r23,32768
20085d94:	bdc1c004 	addi	r23,r23,1792
20085d98:	882d883a 	mov	r22,r17
20085d9c:	0029883a 	mov	r20,zero
				display->buffer_ptrs[i]->desc_base,
20085da0:	b0800017 	ldw	r2,0(r22)
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085da4:	8009883a 	mov	r4,r16
20085da8:	980f883a 	mov	r7,r19
20085dac:	11800117 	ldw	r6,4(r2)
20085db0:	ddc00015 	stw	r23,0(sp)
20085db4:	11400017 	ldw	r5,0(r2)
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085db8:	a5000044 	addi	r20,r20,1
20085dbc:	b5800104 	addi	r22,r22,4
		alt_msgdma_construct_standard_mm_to_st_descriptor(pVid_DMA_CSR_Dev,
20085dc0:	00986d80 	call	200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
		return NULL;
	}

// Construct mSGDMA descriptors for each Frame Buf
	for (i = 0; i < num_buffers; i++) {
20085dc4:	a57ff61e 	bne	r20,r21,20085da0 <__flash_rwdata_start+0xfffeaf34>
20085dc8:	a4c00044 	addi	r19,r20,1
20085dcc:	9ce7883a 	add	r19,r19,r19
20085dd0:	9ce7883a 	add	r19,r19,r19
20085dd4:	94e7883a 	add	r19,r18,r19
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
		memset((void*) (display->buffer_ptrs[i]->buffer),
20085dd8:	88800017 	ldw	r2,0(r17)
20085ddc:	91801f17 	ldw	r6,124(r18)
20085de0:	8c400104 	addi	r17,r17,4
20085de4:	11000117 	ldw	r4,4(r2)
20085de8:	000b883a 	mov	r5,zero
20085dec:	008a7ac0 	call	2008a7ac <memset>
				(alt_u32 *) display->buffer_ptrs[i]->buffer, bytes_per_frame,
				DESC_CONTROL);
	}

	// Clear all Frame Bufs to Black
	for (i = 0; i < num_buffers; i++) {
20085df0:	8cfff91e 	bne	r17,r19,20085dd8 <__flash_rwdata_start+0xfffeaf6c>
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
20085df4:	90c01a17 	ldw	r3,104(r18)
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
20085df8:	8009883a 	mov	r4,r16
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
20085dfc:	18c00044 	addi	r3,r3,1
20085e00:	18c7883a 	add	r3,r3,r3
20085e04:	18c7883a 	add	r3,r3,r3
20085e08:	90c7883a 	add	r3,r18,r3
		memset((void*) (display->buffer_ptrs[i]->buffer),
		ECE423_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame);
	}

	// start the mSGDMA by giving it a Descriptor
	while (alt_msgdma_standard_descriptor_async_transfer(pVid_DMA_CSR_Dev,
20085e0c:	18800017 	ldw	r2,0(r3)
20085e10:	11400017 	ldw	r5,0(r2)
20085e14:	009912c0 	call	2009912c <alt_msgdma_standard_descriptor_async_transfer>
20085e18:	103ff61e 	bne	r2,zero,20085df4 <__flash_rwdata_start+0xfffeaf88>
20085e1c:	9005883a 	mov	r2,r18
			display->buffer_ptrs[display->buffer_being_displayed]->desc_base)
			!= 0) {
	}  // Keep Trying until there is room to Transfer another Frame

	return (display);
}
20085e20:	dfc00b17 	ldw	ra,44(sp)
20085e24:	df000a17 	ldw	fp,40(sp)
20085e28:	ddc00917 	ldw	r23,36(sp)
20085e2c:	dd800817 	ldw	r22,32(sp)
20085e30:	dd400717 	ldw	r21,28(sp)
20085e34:	dd000617 	ldw	r20,24(sp)
20085e38:	dcc00517 	ldw	r19,20(sp)
20085e3c:	dc800417 	ldw	r18,16(sp)
20085e40:	dc400317 	ldw	r17,12(sp)
20085e44:	dc000217 	ldw	r16,8(sp)
20085e48:	dec00c04 	addi	sp,sp,48
20085e4c:	f800283a 	ret
		display->buffer_ptrs[i]->desc_base =
				(alt_msgdma_standard_descriptor*) memalign(32,
						hw_video_display_get_descriptor_span(display)); // Desc on Heap

		if (display->buffer_ptrs[i]->desc_base == NULL) {
			ret_code = -1;
20085e50:	05bfffc4 	movi	r22,-1
		int bytes_per_frame, int num_buffers) {
	int i, ret_code = 0;

	/* Allocate Frame Bufs and descriptor Bufs */

	for (i = 0; i < num_buffers; i++) {
20085e54:	853fb21e 	bne	r16,r20,20085d20 <__flash_rwdata_start+0xfffeaeb4>
20085e58:	003fc706 	br	20085d78 <__flash_rwdata_start+0xfffeaf0c>
		display->buffer_ptrs[i]->buffer = (void*) alt_uncached_malloc(
				(bytes_per_frame)); // malloc Frame Buf on Heap
//      display->buffer_ptrs[i]->buffer =
//        (void*) malloc(bytes_per_frame); // malloc Frame Buf on Heap
		if (display->buffer_ptrs[i]->buffer == NULL)
			ret_code = -1;
20085e5c:	05bfffc4 	movi	r22,-1
20085e60:	003fbb06 	br	20085d50 <__flash_rwdata_start+0xfffeaee4>
	for (i = 0; i < num_buffers; i++) {
		display->buffer_ptrs[i] = (hw_video_frame*) malloc(
				sizeof(hw_video_frame)); // malloc Struct with 2 Ptrs

		if (display->buffer_ptrs[i] == NULL) {
			ret_code = -1;
20085e64:	05bfffc4 	movi	r22,-1
20085e68:	003fb306 	br	20085d38 <__flash_rwdata_start+0xfffeaecc>

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
20085e6c:	01000034 	movhi	r4,0
20085e70:	21012f04 	addi	r4,r4,1212
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
20085e74:	102b883a 	mov	r21,r2

	descriptors_per_frame = 1;

	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
20085e78:	008aa000 	call	2008aa00 <puts>
20085e7c:	003f9306 	br	20085ccc <__flash_rwdata_start+0xfffeae60>
	}

	pVid_DMA_CSR_Dev = alt_msgdma_open(sgdma_name); // Pt to Cont & Status Dev
	display->mSGDMA = pVid_DMA_CSR_Dev;
	if (pVid_DMA_CSR_Dev == NULL) {
		printf("ERROR ********* UNABLE to OPEN /dev/msgdma_csr\r\n");
20085e80:	01000034 	movhi	r4,0
20085e84:	21014404 	addi	r4,r4,1296
20085e88:	008aa000 	call	2008aa00 <puts>
		return NULL;
20085e8c:	0005883a 	mov	r2,zero
20085e90:	003fe306 	br	20085e20 <__flash_rwdata_start+0xfffeafb4>
	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
		printf("The number of buffers must be > 2!\n");
20085e94:	01000034 	movhi	r4,0
20085e98:	21013b04 	addi	r4,r4,1260
		num_buffers = 2;
20085e9c:	05400084 	movi	r21,2
	// DON'T EXCEED MAX Frame Bufs
	if (num_buffers > ECE423_VIDEO_DISPLAY_MAX_BUFFERS) {
		printf("The required number of buffers exceeds the max!\n");
		num_buffers = ECE423_VIDEO_DISPLAY_MAX_BUFFERS;
	} else if (num_buffers < 2){
		printf("The number of buffers must be > 2!\n");
20085ea0:	008aa000 	call	2008aa00 <puts>
20085ea4:	003f8906 	br	20085ccc <__flash_rwdata_start+0xfffeae60>
 ******************************************************************/
hw_video_display* hw_video_display_init(char* sgdma_name, int width,
		int height, int num_buffers) {

	if (hw_init_hdmi()) {
		printf("Failed to initiate the HDMI chip!\n");
20085ea8:	01000034 	movhi	r4,0
20085eac:	21012604 	addi	r4,r4,1176
20085eb0:	008aa000 	call	2008aa00 <puts>
		return 0;
20085eb4:	0005883a 	mov	r2,zero
20085eb8:	003fd906 	br	20085e20 <__flash_rwdata_start+0xfffeafb4>

20085ebc <I2C_Write>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
20085ebc:	defff504 	addi	sp,sp,-44
20085ec0:	ddc00815 	stw	r23,32(sp)
20085ec4:	ddc00b03 	ldbu	r23,44(sp)
20085ec8:	dd800715 	stw	r22,28(sp)
20085ecc:	dd400615 	stw	r21,24(sp)
20085ed0:	dd000515 	stw	r20,20(sp)
20085ed4:	dcc00415 	stw	r19,16(sp)
20085ed8:	dc000115 	stw	r16,4(sp)
20085edc:	dfc00a15 	stw	ra,40(sp)
20085ee0:	df000915 	stw	fp,36(sp)
20085ee4:	dc800315 	stw	r18,12(sp)
20085ee8:	dc400215 	stw	r17,8(sp)
20085eec:	2829883a 	mov	r20,r5
20085ef0:	2021883a 	mov	r16,r4
20085ef4:	302b883a 	mov	r21,r6
20085ef8:	d9c00005 	stb	r7,0(sp)

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20085efc:	2d800104 	addi	r22,r5,4
20085f00:	04c00044 	movi	r19,1
20085f04:	b4c00035 	stwio	r19,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20085f08:	2cc00035 	stwio	r19,0(r5)
    SCL_HIGH(clk_base);
20085f0c:	24c00035 	stwio	r19,0(r4)
    SCL_DELAY;
20085f10:	9809883a 	mov	r4,r19
20085f14:	0097dd00 	call	20097dd0 <usleep>

    SDA_LOW(data_base); // data low
20085f18:	a0000035 	stwio	zero,0(r20)
    SCL_DELAY;
20085f1c:	9809883a 	mov	r4,r19
20085f20:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
20085f24:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20085f28:	9809883a 	mov	r4,r19
20085f2c:	0097dd00 	call	20097dd0 <usleep>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085f30:	b4c00035 	stwio	r19,0(r22)
20085f34:	04800204 	movi	r18,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085f38:	073fe004 	movi	fp,-128
20085f3c:	00000c06 	br	20085f70 <I2C_Write+0xb4>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085f40:	a4c00035 	stwio	r19,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085f44:	e0c03fcc 	andi	r3,fp,255
20085f48:	1838d07a 	srli	fp,r3,1
        // clock high
        SCL_HIGH(clk_base);
20085f4c:	04400044 	movi	r17,1
20085f50:	84c00035 	stwio	r19,0(r16)
        SCL_DELAY;
20085f54:	8809883a 	mov	r4,r17
20085f58:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
20085f5c:	80000035 	stwio	zero,0(r16)
20085f60:	94bfffc4 	addi	r18,r18,-1
        SCL_DELAY;
20085f64:	8809883a 	mov	r4,r17
20085f68:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085f6c:	90000626 	beq	r18,zero,20085f88 <I2C_Write+0xcc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085f70:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085f74:	e544703a 	and	r2,fp,r21
20085f78:	10803fcc 	andi	r2,r2,255
20085f7c:	103ff01e 	bne	r2,zero,20085f40 <__flash_rwdata_start+0xfffeb0d4>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20085f80:	a0000035 	stwio	zero,0(r20)
20085f84:	003fef06 	br	20085f44 <__flash_rwdata_start+0xfffeb0d8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20085f88:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20085f8c:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;  // clock high delay
20085f90:	8809883a 	mov	r4,r17
20085f94:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20085f98:	a4800037 	ldwio	r18,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20085f9c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20085fa0:	8809883a 	mov	r4,r17
20085fa4:	0097dd00 	call	20097dd0 <usleep>

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20085fa8:	9000201e 	bne	r18,zero,2008602c <I2C_Write+0x170>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20085fac:	b4400035 	stwio	r17,0(r22)
20085fb0:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20085fb4:	04ffe004 	movi	r19,-128
20085fb8:	00000c06 	br	20085fec <I2C_Write+0x130>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20085fbc:	a4400035 	stwio	r17,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20085fc0:	9cc03fcc 	andi	r19,r19,255
20085fc4:	9826d07a 	srli	r19,r19,1
        // clock high
        SCL_HIGH(clk_base);
20085fc8:	04800044 	movi	r18,1
20085fcc:	84400035 	stwio	r17,0(r16)
        SCL_DELAY;
20085fd0:	9009883a 	mov	r4,r18
20085fd4:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
20085fd8:	80000035 	stwio	zero,0(r16)
20085fdc:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
20085fe0:	9009883a 	mov	r4,r18
20085fe4:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20085fe8:	a8000726 	beq	r21,zero,20086008 <I2C_Write+0x14c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20085fec:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20085ff0:	d8c00003 	ldbu	r3,0(sp)
20085ff4:	98c4703a 	and	r2,r19,r3
20085ff8:	10803fcc 	andi	r2,r2,255
20085ffc:	103fef1e 	bne	r2,zero,20085fbc <__flash_rwdata_start+0xfffeb150>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086000:	a0000035 	stwio	zero,0(r20)
20086004:	003fee06 	br	20085fc0 <__flash_rwdata_start+0xfffeb154>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086008:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
2008600c:	84800035 	stwio	r18,0(r16)
    SCL_DELAY;  // clock high delay
20086010:	9009883a 	mov	r4,r18
20086014:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
20086018:	a4400037 	ldwio	r17,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
2008601c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086020:	9009883a 	mov	r4,r18
20086024:	0097dd00 	call	20097dd0 <usleep>
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
20086028:	88001926 	beq	r17,zero,20086090 <I2C_Write+0x1d4>


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
2008602c:	0025883a 	mov	r18,zero

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
20086030:	04400044 	movi	r17,1
20086034:	b4400035 	stwio	r17,0(r22)
    SDA_LOW(data_base); // Data Low
20086038:	a0000035 	stwio	zero,0(r20)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
2008603c:	84400035 	stwio	r17,0(r16)
    SCL_DELAY; // clock high long delay
20086040:	8809883a 	mov	r4,r17
20086044:	0097dd00 	call	20097dd0 <usleep>
    SDA_HIGH(data_base); // data high
20086048:	a4400035 	stwio	r17,0(r20)
    SCL_DELAY; // data high delay
2008604c:	8809883a 	mov	r4,r17
20086050:	0097dd00 	call	20097dd0 <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
20086054:	0106d604 	movi	r4,7000
20086058:	0097dd00 	call	20097dd0 <usleep>

    return bSuccess;


}
2008605c:	9005883a 	mov	r2,r18
20086060:	dfc00a17 	ldw	ra,40(sp)
20086064:	df000917 	ldw	fp,36(sp)
20086068:	ddc00817 	ldw	r23,32(sp)
2008606c:	dd800717 	ldw	r22,28(sp)
20086070:	dd400617 	ldw	r21,24(sp)
20086074:	dd000517 	ldw	r20,20(sp)
20086078:	dcc00417 	ldw	r19,16(sp)
2008607c:	dc800317 	ldw	r18,12(sp)
20086080:	dc400217 	ldw	r17,8(sp)
20086084:	dc000117 	ldw	r16,4(sp)
20086088:	dec00b04 	addi	sp,sp,44
2008608c:	f800283a 	ret
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086090:	b4800035 	stwio	r18,0(r22)
20086094:	04c00204 	movi	r19,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086098:	047fe004 	movi	r17,-128
2008609c:	00000c06 	br	200860d0 <I2C_Write+0x214>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
200860a0:	a4800035 	stwio	r18,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
200860a4:	8c403fcc 	andi	r17,r17,255
200860a8:	8822d07a 	srli	r17,r17,1
        // clock high
        SCL_HIGH(clk_base);
200860ac:	05400044 	movi	r21,1
200860b0:	84800035 	stwio	r18,0(r16)
        SCL_DELAY;
200860b4:	a809883a 	mov	r4,r21
200860b8:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
200860bc:	80000035 	stwio	zero,0(r16)
200860c0:	9cffffc4 	addi	r19,r19,-1
        SCL_DELAY;
200860c4:	a809883a 	mov	r4,r21
200860c8:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
200860cc:	98000626 	beq	r19,zero,200860e8 <I2C_Write+0x22c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
200860d0:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
200860d4:	8dc4703a 	and	r2,r17,r23
200860d8:	10803fcc 	andi	r2,r2,255
200860dc:	103ff01e 	bne	r2,zero,200860a0 <__flash_rwdata_start+0xfffeb234>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
200860e0:	a0000035 	stwio	zero,0(r20)
200860e4:	003fef06 	br	200860a4 <__flash_rwdata_start+0xfffeb238>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
200860e8:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
200860ec:	85400035 	stwio	r21,0(r16)
    SCL_DELAY;  // clock high delay
200860f0:	a809883a 	mov	r4,r21
200860f4:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
200860f8:	a4800037 	ldwio	r18,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200860fc:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086100:	a809883a 	mov	r4,r21
20086104:	0097dd00 	call	20097dd0 <usleep>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
20086108:	9025003a 	cmpeq	r18,r18,zero
2008610c:	003fc806 	br	20086030 <__flash_rwdata_start+0xfffeb1c4>

20086110 <I2C_Read>:
    return bSuccess;


}

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
20086110:	defff504 	addi	sp,sp,-44
20086114:	df000915 	stw	fp,36(sp)
20086118:	dd800715 	stw	r22,28(sp)
2008611c:	dd000515 	stw	r20,20(sp)
20086120:	dc800315 	stw	r18,12(sp)
20086124:	dc000115 	stw	r16,4(sp)
20086128:	dfc00a15 	stw	ra,40(sp)
2008612c:	ddc00815 	stw	r23,32(sp)
20086130:	dd400615 	stw	r21,24(sp)
20086134:	dcc00415 	stw	r19,16(sp)
20086138:	dc400215 	stw	r17,8(sp)
2008613c:	2825883a 	mov	r18,r5
20086140:	2021883a 	mov	r16,r4
20086144:	d9800015 	stw	r6,0(sp)
20086148:	3839883a 	mov	fp,r7

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
2008614c:	2d800104 	addi	r22,r5,4
20086150:	05000044 	movi	r20,1
20086154:	b5000035 	stwio	r20,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20086158:	2d000035 	stwio	r20,0(r5)
    SCL_HIGH(clk_base);
2008615c:	25000035 	stwio	r20,0(r4)
    SCL_DELAY;
20086160:	a009883a 	mov	r4,r20
20086164:	0097dd00 	call	20097dd0 <usleep>

    SDA_LOW(data_base); // data low
20086168:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
2008616c:	a009883a 	mov	r4,r20
20086170:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
20086174:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20086178:	a009883a 	mov	r4,r20
2008617c:	0097dd00 	call	20097dd0 <usleep>

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20086180:	d8800017 	ldw	r2,0(sp)
20086184:	102b883a 	mov	r21,r2
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086188:	b5000035 	stwio	r20,0(r22)
2008618c:	04c00204 	movi	r19,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086190:	05ffe004 	movi	r23,-128
20086194:	00000c06 	br	200861c8 <I2C_Read+0xb8>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086198:	95000035 	stwio	r20,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
2008619c:	b8c03fcc 	andi	r3,r23,255
200861a0:	182ed07a 	srli	r23,r3,1
        // clock high
        SCL_HIGH(clk_base);
200861a4:	04400044 	movi	r17,1
200861a8:	85000035 	stwio	r20,0(r16)
        SCL_DELAY;
200861ac:	8809883a 	mov	r4,r17
200861b0:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
200861b4:	80000035 	stwio	zero,0(r16)
200861b8:	9cffffc4 	addi	r19,r19,-1
        SCL_DELAY;
200861bc:	8809883a 	mov	r4,r17
200861c0:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
200861c4:	98000626 	beq	r19,zero,200861e0 <I2C_Read+0xd0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
200861c8:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
200861cc:	bd44703a 	and	r2,r23,r21
200861d0:	10803fcc 	andi	r2,r2,255
200861d4:	103ff01e 	bne	r2,zero,20086198 <__flash_rwdata_start+0xfffeb32c>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
200861d8:	90000035 	stwio	zero,0(r18)
200861dc:	003fef06 	br	2008619c <__flash_rwdata_start+0xfffeb330>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
200861e0:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
200861e4:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;  // clock high delay
200861e8:	8809883a 	mov	r4,r17
200861ec:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
200861f0:	94c00037 	ldwio	r19,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200861f4:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
200861f8:	8809883a 	mov	r4,r17
200861fc:	0097dd00 	call	20097dd0 <usleep>

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
    bool bSuccess = TRUE;

    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
20086200:	98001f1e 	bne	r19,zero,20086280 <I2C_Read+0x170>
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086204:	b4400035 	stwio	r17,0(r22)
20086208:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
2008620c:	053fe004 	movi	r20,-128
20086210:	00000c06 	br	20086244 <I2C_Read+0x134>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086214:	94400035 	stwio	r17,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20086218:	a5003fcc 	andi	r20,r20,255
2008621c:	a028d07a 	srli	r20,r20,1
        // clock high
        SCL_HIGH(clk_base);
20086220:	04c00044 	movi	r19,1
20086224:	84400035 	stwio	r17,0(r16)
        SCL_DELAY;
20086228:	9809883a 	mov	r4,r19
2008622c:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
20086230:	80000035 	stwio	zero,0(r16)
20086234:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
20086238:	9809883a 	mov	r4,r19
2008623c:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20086240:	a8000626 	beq	r21,zero,2008625c <I2C_Read+0x14c>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086244:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20086248:	a704703a 	and	r2,r20,fp
2008624c:	10803fcc 	andi	r2,r2,255
20086250:	103ff01e 	bne	r2,zero,20086214 <__flash_rwdata_start+0xfffeb3a8>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086254:	90000035 	stwio	zero,0(r18)
20086258:	003fef06 	br	20086218 <__flash_rwdata_start+0xfffeb3ac>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
2008625c:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20086260:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY;  // clock high delay
20086264:	9809883a 	mov	r4,r19
20086268:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
2008626c:	94400037 	ldwio	r17,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
20086270:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086274:	9809883a 	mov	r4,r19
20086278:	0097dd00 	call	20097dd0 <usleep>
    i2c_start(clk_base, data_base);
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
2008627c:	88002326 	beq	r17,zero,2008630c <I2C_Read+0x1fc>

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20086280:	04400044 	movi	r17,1
20086284:	b4400035 	stwio	r17,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20086288:	94400035 	stwio	r17,0(r18)
    SCL_HIGH(clk_base);
2008628c:	84400035 	stwio	r17,0(r16)
    SCL_DELAY;
20086290:	8809883a 	mov	r4,r17
20086294:	0097dd00 	call	20097dd0 <usleep>

    SDA_LOW(data_base); // data low
20086298:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
2008629c:	8809883a 	mov	r4,r17
200862a0:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
200862a4:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
200862a8:	8809883a 	mov	r4,r17
200862ac:	0097dd00 	call	20097dd0 <usleep>
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
200862b0:	0027883a 	mov	r19,zero

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
200862b4:	04400044 	movi	r17,1
200862b8:	b4400035 	stwio	r17,0(r22)
    SDA_LOW(data_base); // Data Low
200862bc:	90000035 	stwio	zero,0(r18)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
200862c0:	84400035 	stwio	r17,0(r16)
    SCL_DELAY; // clock high long delay
200862c4:	8809883a 	mov	r4,r17
200862c8:	0097dd00 	call	20097dd0 <usleep>
    SDA_HIGH(data_base); // data high
200862cc:	94400035 	stwio	r17,0(r18)
    SCL_DELAY; // data high delay
200862d0:	8809883a 	mov	r4,r17
200862d4:	0097dd00 	call	20097dd0 <usleep>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
    }
    i2c_stop(clk_base, data_base);

    return bSuccess;
}
200862d8:	9805883a 	mov	r2,r19
200862dc:	dfc00a17 	ldw	ra,40(sp)
200862e0:	df000917 	ldw	fp,36(sp)
200862e4:	ddc00817 	ldw	r23,32(sp)
200862e8:	dd800717 	ldw	r22,28(sp)
200862ec:	dd400617 	ldw	r21,24(sp)
200862f0:	dd000517 	ldw	r20,20(sp)
200862f4:	dcc00417 	ldw	r19,16(sp)
200862f8:	dc800317 	ldw	r18,12(sp)
200862fc:	dc400217 	ldw	r17,8(sp)
20086300:	dc000117 	ldw	r16,4(sp)
20086304:	dec00b04 	addi	sp,sp,44
20086308:	f800283a 	ret

//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
2008630c:	b4c00035 	stwio	r19,0(r22)

    // start condition
    SDA_HIGH(data_base); // data high
20086310:	94c00035 	stwio	r19,0(r18)
    SCL_HIGH(clk_base);
20086314:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY;
20086318:	9809883a 	mov	r4,r19
2008631c:	0097dd00 	call	20097dd0 <usleep>

    SDA_LOW(data_base); // data low
20086320:	90000035 	stwio	zero,0(r18)
    SCL_DELAY;
20086324:	9809883a 	mov	r4,r19
20086328:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
2008632c:	80000035 	stwio	zero,0(r16)
    SCL_DELAY;
20086330:	9809883a 	mov	r4,r19
20086334:	0097dd00 	call	20097dd0 <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
20086338:	d8800017 	ldw	r2,0(sp)
2008633c:	15c00054 	ori	r23,r2,1
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086340:	b4c00035 	stwio	r19,0(r22)
20086344:	05400204 	movi	r21,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086348:	047fe004 	movi	r17,-128
2008634c:	00000c06 	br	20086380 <I2C_Read+0x270>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086350:	94c00035 	stwio	r19,0(r18)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
20086354:	8c403fcc 	andi	r17,r17,255
20086358:	8822d07a 	srli	r17,r17,1
        // clock high
        SCL_HIGH(clk_base);
2008635c:	05000044 	movi	r20,1
20086360:	84c00035 	stwio	r19,0(r16)
        SCL_DELAY;
20086364:	a009883a 	mov	r4,r20
20086368:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
2008636c:	80000035 	stwio	zero,0(r16)
20086370:	ad7fffc4 	addi	r21,r21,-1
        SCL_DELAY;
20086374:	a009883a 	mov	r4,r20
20086378:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
2008637c:	a8000626 	beq	r21,zero,20086398 <I2C_Read+0x288>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086380:	80000035 	stwio	zero,0(r16)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
20086384:	8dc4703a 	and	r2,r17,r23
20086388:	10803fcc 	andi	r2,r2,255
2008638c:	103ff01e 	bne	r2,zero,20086350 <__flash_rwdata_start+0xfffeb4e4>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086390:	90000035 	stwio	zero,0(r18)
20086394:	003fef06 	br	20086354 <__flash_rwdata_start+0xfffeb4e8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086398:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
2008639c:	85000035 	stwio	r20,0(r16)
    SCL_DELAY;  // clock high delay
200863a0:	a009883a 	mov	r4,r20
200863a4:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
200863a8:	94400037 	ldwio	r17,0(r18)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200863ac:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
200863b0:	a009883a 	mov	r4,r20
200863b4:	0097dd00 	call	20097dd0 <usleep>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
    DeviceAddr |= 1; // Read
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
200863b8:	883fbd1e 	bne	r17,zero,200862b0 <__flash_rwdata_start+0xfffeb444>
    alt_u8 Data=0;
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
200863bc:	b0000035 	stwio	zero,0(r22)
    SCL_LOW(clk_base); // clock low
200863c0:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
200863c4:	a009883a 	mov	r4,r20
200863c8:	0097dd00 	call	20097dd0 <usleep>
200863cc:	05400204 	movi	r21,8
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
200863d0:	0023883a 	mov	r17,zero
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
200863d4:	8c67883a 	add	r19,r17,r17
200863d8:	9823883a 	mov	r17,r19
        SCL_HIGH(clk_base);  // clock high
200863dc:	85000035 	stwio	r20,0(r16)
        SCL_DELAY;
200863e0:	01000044 	movi	r4,1
200863e4:	0097dd00 	call	20097dd0 <usleep>
        if (SDA_READ(data_base))  // read data
200863e8:	90800037 	ldwio	r2,0(r18)
200863ec:	10000126 	beq	r2,zero,200863f4 <I2C_Read+0x2e4>
            Data |= 0x01;
200863f0:	9c400054 	ori	r17,r19,1
        SCL_LOW(clk_base);  // clock log
200863f4:	80000035 	stwio	zero,0(r16)
        SCL_DELAY;
200863f8:	04c00044 	movi	r19,1
200863fc:	ad7fffc4 	addi	r21,r21,-1
20086400:	9809883a 	mov	r4,r19
20086404:	0097dd00 	call	20097dd0 <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
20086408:	a83ff21e 	bne	r21,zero,200863d4 <__flash_rwdata_start+0xfffeb568>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
2008640c:	80000035 	stwio	zero,0(r16)
    SDA_DIR_OUT(data_base);  // set data write mode
20086410:	b4c00035 	stwio	r19,0(r22)
    if (bAck)
        SDA_LOW(data_base);
    else
        SDA_HIGH(data_base);
20086414:	94c00035 	stwio	r19,0(r18)
    SCL_HIGH(clk_base); // clock high
20086418:	84c00035 	stwio	r19,0(r16)
    SCL_DELAY; // clock high  delay
2008641c:	9809883a 	mov	r4,r19
20086420:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
20086424:	80000035 	stwio	zero,0(r16)
    SCL_DELAY; // clock low delay
20086428:	9809883a 	mov	r4,r19
2008642c:	0097dd00 	call	20097dd0 <usleep>
    SDA_LOW(data_base);  // data low
20086430:	90000035 	stwio	zero,0(r18)
    SCL_DELAY; // data low delay
20086434:	9809883a 	mov	r4,r19
20086438:	0097dd00 	call	20097dd0 <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
2008643c:	d8800b17 	ldw	r2,44(sp)
20086440:	14400005 	stb	r17,0(r2)
20086444:	003f9b06 	br	200862b4 <__flash_rwdata_start+0xfffeb448>

20086448 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
20086448:	defffb04 	addi	sp,sp,-20
2008644c:	dc800215 	stw	r18,8(sp)
20086450:	dc400115 	stw	r17,4(sp)
20086454:	dc000015 	stw	r16,0(sp)
20086458:	dfc00415 	stw	ra,16(sp)
2008645c:	dcc00315 	stw	r19,12(sp)
20086460:	2025883a 	mov	r18,r4
20086464:	2823883a 	mov	r17,r5

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
20086468:	04000044 	movi	r16,1
2008646c:	2c000135 	stwio	r16,4(r5)

    // start condition
    SDA_HIGH(data_base); // data high
20086470:	2c000035 	stwio	r16,0(r5)
    SCL_HIGH(clk_base);
20086474:	24000035 	stwio	r16,0(r4)
    SCL_DELAY;
20086478:	8009883a 	mov	r4,r16
2008647c:	0097dd00 	call	20097dd0 <usleep>

    SDA_LOW(data_base); // data low
20086480:	0027883a 	mov	r19,zero
20086484:	8cc00035 	stwio	r19,0(r17)
    SCL_DELAY;
20086488:	8009883a 	mov	r4,r16
2008648c:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
20086490:	94c00035 	stwio	r19,0(r18)
    SCL_DELAY;
20086494:	8009883a 	mov	r4,r16
}
20086498:	dfc00417 	ldw	ra,16(sp)
2008649c:	dcc00317 	ldw	r19,12(sp)
200864a0:	dc800217 	ldw	r18,8(sp)
200864a4:	dc400117 	ldw	r17,4(sp)
200864a8:	dc000017 	ldw	r16,0(sp)
200864ac:	dec00504 	addi	sp,sp,20
    SCL_DELAY;

    SDA_LOW(data_base); // data low
    SCL_DELAY;
    SCL_LOW(clk_base); // clock low
    SCL_DELAY;
200864b0:	0097dd01 	jmpi	20097dd0 <usleep>

200864b4 <i2c_stop>:
}

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
200864b4:	defffd04 	addi	sp,sp,-12
200864b8:	dc400115 	stw	r17,4(sp)
200864bc:	dc000015 	stw	r16,0(sp)
200864c0:	dfc00215 	stw	ra,8(sp)
200864c4:	2823883a 	mov	r17,r5
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
200864c8:	04000044 	movi	r16,1
200864cc:	2c000135 	stwio	r16,4(r5)
    SDA_LOW(data_base); // Data Low
200864d0:	28000035 	stwio	zero,0(r5)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
200864d4:	24000035 	stwio	r16,0(r4)
    SCL_DELAY; // clock high long delay
200864d8:	8009883a 	mov	r4,r16
200864dc:	0097dd00 	call	20097dd0 <usleep>
    SDA_HIGH(data_base); // data high
200864e0:	8c000035 	stwio	r16,0(r17)
    SCL_DELAY; // data high delay
200864e4:	8009883a 	mov	r4,r16



}
200864e8:	dfc00217 	ldw	ra,8(sp)
200864ec:	dc400117 	ldw	r17,4(sp)
200864f0:	dc000017 	ldw	r16,0(sp)
200864f4:	dec00304 	addi	sp,sp,12
    SDA_LOW(data_base); // Data Low
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
    SCL_DELAY; // clock high long delay
    SDA_HIGH(data_base); // data high
    SCL_DELAY; // data high delay
200864f8:	0097dd01 	jmpi	20097dd0 <usleep>

200864fc <i2c_write>:



}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
200864fc:	defff704 	addi	sp,sp,-36
20086500:	dd800615 	stw	r22,24(sp)
20086504:	dd400515 	stw	r21,20(sp)
20086508:	dd000415 	stw	r20,16(sp)
2008650c:	dcc00315 	stw	r19,12(sp)
20086510:	dc400115 	stw	r17,4(sp)
20086514:	dfc00815 	stw	ra,32(sp)
20086518:	ddc00715 	stw	r23,28(sp)
2008651c:	dc800215 	stw	r18,8(sp)
20086520:	dc000015 	stw	r16,0(sp)
20086524:	2829883a 	mov	r20,r5
20086528:	2023883a 	mov	r17,r4
2008652c:	302b883a 	mov	r21,r6
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
20086530:	2d800104 	addi	r22,r5,4
20086534:	04c00044 	movi	r19,1
20086538:	b4c00035 	stwio	r19,0(r22)
2008653c:	04800204 	movi	r18,8


}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
    alt_u8 Mask = 0x80;
20086540:	043fe004 	movi	r16,-128
20086544:	00000c06 	br	20086578 <i2c_write+0x7c>

    for(i=0;i<8;i++){
        SCL_LOW(clk_base);  // new, make sure data change at clk low
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
            SDA_HIGH(data_base);
20086548:	a4c00035 	stwio	r19,0(r20)
        }else{
            SDA_LOW(data_base);
        }
        Mask >>= 1; // there is a delay in this command
2008654c:	84003fcc 	andi	r16,r16,255
20086550:	8020d07a 	srli	r16,r16,1
        // clock high
        SCL_HIGH(clk_base);
20086554:	05c00044 	movi	r23,1
20086558:	8cc00035 	stwio	r19,0(r17)
        SCL_DELAY;
2008655c:	b809883a 	mov	r4,r23
20086560:	0097dd00 	call	20097dd0 <usleep>
        SCL_LOW(clk_base);
20086564:	88000035 	stwio	zero,0(r17)
20086568:	94bfffc4 	addi	r18,r18,-1
        SCL_DELAY;
2008656c:	b809883a 	mov	r4,r23
20086570:	0097dd00 	call	20097dd0 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
20086574:	90000626 	beq	r18,zero,20086590 <i2c_write+0x94>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
20086578:	88000035 	stwio	zero,0(r17)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
2008657c:	8544703a 	and	r2,r16,r21
20086580:	10803fcc 	andi	r2,r2,255
20086584:	103ff01e 	bne	r2,zero,20086548 <__flash_rwdata_start+0xfffeb6dc>
            SDA_HIGH(data_base);
        }else{
            SDA_LOW(data_base);
20086588:	a0000035 	stwio	zero,0(r20)
2008658c:	003fef06 	br	2008654c <__flash_rwdata_start+0xfffeb6e0>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
20086590:	b0000035 	stwio	zero,0(r22)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
20086594:	8dc00035 	stwio	r23,0(r17)
    SCL_DELAY;  // clock high delay
20086598:	b809883a 	mov	r4,r23
2008659c:	0097dd00 	call	20097dd0 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
200865a0:	a4000037 	ldwio	r16,0(r20)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
200865a4:	88000035 	stwio	zero,0(r17)
    SCL_DELAY; // clock low delay
200865a8:	b809883a 	mov	r4,r23
200865ac:	0097dd00 	call	20097dd0 <usleep>
    return bAck;
}
200865b0:	8005003a 	cmpeq	r2,r16,zero
200865b4:	dfc00817 	ldw	ra,32(sp)
200865b8:	ddc00717 	ldw	r23,28(sp)
200865bc:	dd800617 	ldw	r22,24(sp)
200865c0:	dd400517 	ldw	r21,20(sp)
200865c4:	dd000417 	ldw	r20,16(sp)
200865c8:	dcc00317 	ldw	r19,12(sp)
200865cc:	dc800217 	ldw	r18,8(sp)
200865d0:	dc400117 	ldw	r17,4(sp)
200865d4:	dc000017 	ldw	r16,0(sp)
200865d8:	dec00904 	addi	sp,sp,36
200865dc:	f800283a 	ret

200865e0 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
200865e0:	defff604 	addi	sp,sp,-40
200865e4:	df000815 	stw	fp,32(sp)
200865e8:	ddc00715 	stw	r23,28(sp)
200865ec:	dd800615 	stw	r22,24(sp)
200865f0:	dd000415 	stw	r20,16(sp)
200865f4:	dc800215 	stw	r18,8(sp)
200865f8:	dfc00915 	stw	ra,36(sp)
200865fc:	dd400515 	stw	r21,20(sp)
20086600:	dcc00315 	stw	r19,12(sp)
20086604:	dc400115 	stw	r17,4(sp)
20086608:	dc000015 	stw	r16,0(sp)
2008660c:	2829883a 	mov	r20,r5
20086610:	2025883a 	mov	r18,r4
20086614:	302f883a 	mov	r23,r6
20086618:	3839883a 	mov	fp,r7
    alt_u8 Data=0;
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
2008661c:	2d800104 	addi	r22,r5,4
20086620:	b0000035 	stwio	zero,0(r22)
    SCL_LOW(clk_base); // clock low
20086624:	20000035 	stwio	zero,0(r4)
    SCL_DELAY; // clock low delay
20086628:	01000044 	movi	r4,1
2008662c:	0097dd00 	call	20097dd0 <usleep>
20086630:	04400204 	movi	r17,8
    SCL_DELAY; // clock low delay
    return bAck;
}

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
    alt_u8 Data=0;
20086634:	0021883a 	mov	r16,zero
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
        SCL_HIGH(clk_base);  // clock high
20086638:	05400044 	movi	r21,1
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
        Data <<= 1;
2008663c:	8427883a 	add	r19,r16,r16
20086640:	9821883a 	mov	r16,r19
        SCL_HIGH(clk_base);  // clock high
20086644:	95400035 	stwio	r21,0(r18)
        SCL_DELAY;
20086648:	01000044 	movi	r4,1
2008664c:	0097dd00 	call	20097dd0 <usleep>
        if (SDA_READ(data_base))  // read data
20086650:	a0800037 	ldwio	r2,0(r20)
20086654:	10000126 	beq	r2,zero,2008665c <i2c_read+0x7c>
            Data |= 0x01;
20086658:	9c000054 	ori	r16,r19,1
        SCL_LOW(clk_base);  // clock log
2008665c:	90000035 	stwio	zero,0(r18)
        SCL_DELAY;
20086660:	04c00044 	movi	r19,1
20086664:	8c7fffc4 	addi	r17,r17,-1
20086668:	9809883a 	mov	r4,r19
2008666c:	0097dd00 	call	20097dd0 <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
20086670:	883ff21e 	bne	r17,zero,2008663c <__flash_rwdata_start+0xfffeb7d0>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
20086674:	90000035 	stwio	zero,0(r18)
    SDA_DIR_OUT(data_base);  // set data write mode
20086678:	b4c00035 	stwio	r19,0(r22)
    if (bAck)
2008667c:	e000181e 	bne	fp,zero,200866e0 <i2c_read+0x100>
        SDA_LOW(data_base);
    else
        SDA_HIGH(data_base);
20086680:	a4c00035 	stwio	r19,0(r20)
    SCL_HIGH(clk_base); // clock high
20086684:	04400044 	movi	r17,1
20086688:	94400035 	stwio	r17,0(r18)
    SCL_DELAY; // clock high  delay
2008668c:	8809883a 	mov	r4,r17
20086690:	0097dd00 	call	20097dd0 <usleep>
    SCL_LOW(clk_base); // clock low
20086694:	90000035 	stwio	zero,0(r18)
    SCL_DELAY; // clock low delay
20086698:	8809883a 	mov	r4,r17
2008669c:	0097dd00 	call	20097dd0 <usleep>
    SDA_LOW(data_base);  // data low
200866a0:	a0000035 	stwio	zero,0(r20)
    SCL_DELAY; // data low delay
200866a4:	8809883a 	mov	r4,r17
200866a8:	0097dd00 	call	20097dd0 <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
200866ac:	bc000005 	stb	r16,0(r23)
}
200866b0:	dfc00917 	ldw	ra,36(sp)
200866b4:	df000817 	ldw	fp,32(sp)
200866b8:	ddc00717 	ldw	r23,28(sp)
200866bc:	dd800617 	ldw	r22,24(sp)
200866c0:	dd400517 	ldw	r21,20(sp)
200866c4:	dd000417 	ldw	r20,16(sp)
200866c8:	dcc00317 	ldw	r19,12(sp)
200866cc:	dc800217 	ldw	r18,8(sp)
200866d0:	dc400117 	ldw	r17,4(sp)
200866d4:	dc000017 	ldw	r16,0(sp)
200866d8:	dec00a04 	addi	sp,sp,40
200866dc:	f800283a 	ret

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
    SDA_DIR_OUT(data_base);  // set data write mode
    if (bAck)
        SDA_LOW(data_base);
200866e0:	a0000035 	stwio	zero,0(r20)
200866e4:	003fe706 	br	20086684 <__flash_rwdata_start+0xfffeb818>

200866e8 <timer_isr>:
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
	printf("\n Button %d Pressed. \n", push_button_flag);
}

static void timer_isr(void* isr_context) {
200866e8:	defffe04 	addi	sp,sp,-8
200866ec:	dc000015 	stw	r16,0(sp)

	//switch frames
	if(video_play_flag == 1){
200866f0:	d4201b17 	ldw	r16,-32660(gp)
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
	printf("\n Button %d Pressed. \n", push_button_flag);
}

static void timer_isr(void* isr_context) {
200866f4:	dfc00115 	stw	ra,4(sp)

	//switch frames
	if(video_play_flag == 1){
200866f8:	00800044 	movi	r2,1
200866fc:	80800826 	beq	r16,r2,20086720 <timer_isr+0x38>
		}
	}

	//printf("\n \n \n \nElapsed Time: %d seconds \n \n \n \n \n", count);
	//start_playback_flag = 1;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 2);
20086700:	00880434 	movhi	r2,8208
20086704:	10850004 	addi	r2,r2,5120
20086708:	00c00084 	movi	r3,2
2008670c:	10c00035 	stwio	r3,0(r2)

}
20086710:	dfc00117 	ldw	ra,4(sp)
20086714:	dc000017 	ldw	r16,0(sp)
20086718:	dec00204 	addi	sp,sp,8
2008671c:	f800283a 	ret

static void timer_isr(void* isr_context) {

	//switch frames
	if(video_play_flag == 1){
		if(show_buffers_flag != 1){
20086720:	d0a01e17 	ldw	r2,-32648(gp)
			if(hw_video_display_buffer_is_available(display) != 0){
20086724:	d1201d17 	ldw	r4,-32652(gp)

static void timer_isr(void* isr_context) {

	//switch frames
	if(video_play_flag == 1){
		if(show_buffers_flag != 1){
20086728:	14000926 	beq	r2,r16,20086750 <timer_isr+0x68>
			if(hw_video_display_buffer_is_available(display) != 0){
2008672c:	00855d40 	call	200855d4 <hw_video_display_buffer_is_available>
20086730:	103ff326 	beq	r2,zero,20086700 <__flash_rwdata_start+0xfffeb894>
				show_buffers_flag = 1;
				if(hw_video_display_switch_frames(display) == -1){
20086734:	d1201d17 	ldw	r4,-32652(gp)

	//switch frames
	if(video_play_flag == 1){
		if(show_buffers_flag != 1){
			if(hw_video_display_buffer_is_available(display) != 0){
				show_buffers_flag = 1;
20086738:	d4201e15 	stw	r16,-32648(gp)
				if(hw_video_display_switch_frames(display) == -1){
2008673c:	00855fc0 	call	200855fc <hw_video_display_switch_frames>
20086740:	00ffffc4 	movi	r3,-1
20086744:	10ffee1e 	bne	r2,r3,20086700 <__flash_rwdata_start+0xfffeb894>
			}
		}else{
			//printf("playback started\n");
			if(hw_video_display_switch_frames(display) == -1){
				//printf("Dropped frame. Video was paused.\n");
				video_play_flag = 0;
20086748:	d0201b15 	stw	zero,-32660(gp)
2008674c:	003fec06 	br	20086700 <__flash_rwdata_start+0xfffeb894>
					video_play_flag = 0;
				}
			}
		}else{
			//printf("playback started\n");
			if(hw_video_display_switch_frames(display) == -1){
20086750:	00855fc0 	call	200855fc <hw_video_display_switch_frames>
20086754:	00ffffc4 	movi	r3,-1
20086758:	10ffe91e 	bne	r2,r3,20086700 <__flash_rwdata_start+0xfffeb894>
2008675c:	003ffa06 	br	20086748 <__flash_rwdata_start+0xfffeb8dc>

20086760 <pio_isr>:
}

////---------------------------ISRs--------------------------------
static void pio_isr(void* isr_context) {

	push_button_flag = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
20086760:	00880434 	movhi	r2,8208
	exit_flag = 0;

}

////---------------------------ISRs--------------------------------
static void pio_isr(void* isr_context) {
20086764:	deffff04 	addi	sp,sp,-4

	push_button_flag = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
20086768:	10854b04 	addi	r2,r2,5420
	exit_flag = 0;

}

////---------------------------ISRs--------------------------------
static void pio_isr(void* isr_context) {
2008676c:	dfc00015 	stw	ra,0(sp)

	push_button_flag = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
20086770:	10800037 	ldwio	r2,0(r2)
20086774:	d0a02315 	stw	r2,-32628(gp)
	if (push_button_flag == 2) {
20086778:	d0e02317 	ldw	r3,-32628(gp)
2008677c:	00800084 	movi	r2,2
20086780:	18801726 	beq	r3,r2,200867e0 <pio_isr+0x80>
			exit_flag = 1;
	}
	if (push_button_flag == 1) {
20086784:	d0e02317 	ldw	r3,-32628(gp)
20086788:	00800044 	movi	r2,1
2008678c:	18801926 	beq	r3,r2,200867f4 <pio_isr+0x94>
		//printf("play initial %d\n", start_decode_flag);
		video_play_flag = !video_play_flag;
		printf("\nvideo_play_flag = %d\n", video_play_flag);
	}
	if (push_button_flag == 4) {
20086790:	d0e02317 	ldw	r3,-32628(gp)
20086794:	00800104 	movi	r2,4
20086798:	18800e26 	beq	r3,r2,200867d4 <pio_isr+0x74>
		skip_fw_flag = 1;
	}
	if (push_button_flag == 8) {
2008679c:	d0e02317 	ldw	r3,-32628(gp)
200867a0:	00800204 	movi	r2,8
200867a4:	1880021e 	bne	r3,r2,200867b0 <pio_isr+0x50>
		skip_rv_flag = 1;
200867a8:	00800044 	movi	r2,1
200867ac:	d0a01c15 	stw	r2,-32656(gp)
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
200867b0:	00880434 	movhi	r2,8208
200867b4:	10854b04 	addi	r2,r2,5420
200867b8:	10000035 	stwio	zero,0(r2)
	printf("\n Button %d Pressed. \n", push_button_flag);
200867bc:	d1602317 	ldw	r5,-32628(gp)
200867c0:	01000034 	movhi	r4,0
200867c4:	21015604 	addi	r4,r4,1368
}
200867c8:	dfc00017 	ldw	ra,0(sp)
200867cc:	dec00104 	addi	sp,sp,4
	}
	if (push_button_flag == 8) {
		skip_rv_flag = 1;
	}
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
	printf("\n Button %d Pressed. \n", push_button_flag);
200867d0:	008a8fc1 	jmpi	2008a8fc <printf>
		//printf("play initial %d\n", start_decode_flag);
		video_play_flag = !video_play_flag;
		printf("\nvideo_play_flag = %d\n", video_play_flag);
	}
	if (push_button_flag == 4) {
		skip_fw_flag = 1;
200867d4:	00800044 	movi	r2,1
200867d8:	d0a01a15 	stw	r2,-32664(gp)
200867dc:	003fef06 	br	2008679c <__flash_rwdata_start+0xfffeb930>
////---------------------------ISRs--------------------------------
static void pio_isr(void* isr_context) {

	push_button_flag = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE);
	if (push_button_flag == 2) {
			exit_flag = 1;
200867e0:	00800044 	movi	r2,1
200867e4:	d0a01915 	stw	r2,-32668(gp)
	}
	if (push_button_flag == 1) {
200867e8:	d0e02317 	ldw	r3,-32628(gp)
200867ec:	00800044 	movi	r2,1
200867f0:	18bfe71e 	bne	r3,r2,20086790 <__flash_rwdata_start+0xfffeb924>
		//printf("play initial %d\n", start_decode_flag);
		video_play_flag = !video_play_flag;
200867f4:	d0a01b17 	ldw	r2,-32660(gp)
		printf("\nvideo_play_flag = %d\n", video_play_flag);
200867f8:	01000034 	movhi	r4,0
200867fc:	21015004 	addi	r4,r4,1344
	if (push_button_flag == 2) {
			exit_flag = 1;
	}
	if (push_button_flag == 1) {
		//printf("play initial %d\n", start_decode_flag);
		video_play_flag = !video_play_flag;
20086800:	1005003a 	cmpeq	r2,r2,zero
20086804:	d0a01b15 	stw	r2,-32660(gp)
		printf("\nvideo_play_flag = %d\n", video_play_flag);
20086808:	d1601b17 	ldw	r5,-32660(gp)
2008680c:	008a8fc0 	call	2008a8fc <printf>
20086810:	003fdf06 	br	20086790 <__flash_rwdata_start+0xfffeb924>

20086814 <main>:
double null_execution;
hw_video_display* display;
int fps = 10;

int main() {
	printf("Hello from Nios II bud.\n");
20086814:	01000034 	movhi	r4,0
double time2;
double null_execution;
hw_video_display* display;
int fps = 10;

int main() {
20086818:	deffaa04 	addi	sp,sp,-344
	printf("Hello from Nios II bud.\n");
2008681c:	21015c04 	addi	r4,r4,1392
double time2;
double null_execution;
hw_video_display* display;
int fps = 10;

int main() {
20086820:	dfc05515 	stw	ra,340(sp)
20086824:	dd005415 	stw	r20,336(sp)
20086828:	dcc05315 	stw	r19,332(sp)
2008682c:	dc805215 	stw	r18,328(sp)
20086830:	dc405115 	stw	r17,324(sp)
20086834:	dc005015 	stw	r16,320(sp)
	printf("Hello from Nios II bud.\n");
20086838:	008aa000 	call	2008aa00 <puts>
	int sdf = alt_timestamp_start();
2008683c:	00985340 	call	20098534 <alt_timestamp_start>
	null_execution = alt_timestamp();
20086840:	00985800 	call	20098580 <alt_timestamp>
20086844:	1009883a 	mov	r4,r2
20086848:	00898700 	call	20089870 <__floatunsidf>

	printf("null_execution : %f \n", null_execution);
2008684c:	01000034 	movhi	r4,0
20086850:	21016204 	addi	r4,r4,1416
20086854:	100b883a 	mov	r5,r2
int fps = 10;

int main() {
	printf("Hello from Nios II bud.\n");
	int sdf = alt_timestamp_start();
	null_execution = alt_timestamp();
20086858:	d0a01f15 	stw	r2,-32644(gp)

	printf("null_execution : %f \n", null_execution);
2008685c:	180d883a 	mov	r6,r3
int fps = 10;

int main() {
	printf("Hello from Nios II bud.\n");
	int sdf = alt_timestamp_start();
	null_execution = alt_timestamp();
20086860:	d0a02004 	addi	r2,gp,-32640
20086864:	10c00015 	stw	r3,0(r2)

	printf("null_execution : %f \n", null_execution);
20086868:	008a8fc0 	call	2008a8fc <printf>
	if (SDLIB_Init(SD_CONT_0_BASE) == 0) {
2008686c:	01080434 	movhi	r4,8208
20086870:	21040004 	addi	r4,r4,4096
20086874:	00854840 	call	20085484 <SDLIB_Init>
20086878:	1000031e 	bne	r2,zero,20086888 <main+0x74>
		printf("Failed SDLIB!\n");
2008687c:	01000034 	movhi	r4,0
20086880:	21016804 	addi	r4,r4,1440
20086884:	008aa000 	call	2008aa00 <puts>
}

//----------------------Init Functions---------------------------------
static void peripheral_init(void) {
	//Pushbuttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
20086888:	00880434 	movhi	r2,8208
2008688c:	044003c4 	movi	r17,15
20086890:	10854a04 	addi	r2,r2,5416
20086894:	14400035 	stwio	r17,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
20086898:	00880434 	movhi	r2,8208
2008689c:	10854b04 	addi	r2,r2,5420
200868a0:	10000035 	stwio	zero,0(r2)
	alt_irq_register( KEY_IRQ, (void*) 0, pio_isr);
200868a4:	01880234 	movhi	r6,8200
200868a8:	01000084 	movi	r4,2
200868ac:	000b883a 	mov	r5,zero
200868b0:	3199d804 	addi	r6,r6,26464
200868b4:	00977e40 	call	200977e4 <alt_irq_register>

	int frame_period = TIMER_1_FREQ / fps;
200868b8:	d1600317 	ldw	r5,-32756(gp)
200868bc:	0101dcf4 	movhi	r4,1907
200868c0:	21165004 	addi	r4,r4,22848
200868c4:	2144b03a 	or	r2,r4,r5
200868c8:	88806d36 	bltu	r17,r2,20086a80 <main+0x26c>
200868cc:	009dcdb4 	movhi	r2,30518
200868d0:	10a50004 	addi	r2,r2,-27648
200868d4:	114ab03a 	or	r5,r2,r5
200868d8:	00800034 	movhi	r2,0
200868dc:	10835404 	addi	r2,r2,3408
200868e0:	288b883a 	add	r5,r5,r2
200868e4:	28800003 	ldbu	r2,0(r5)

	//Timer
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, frame_period);
200868e8:	00c80434 	movhi	r3,8208
200868ec:	18c50204 	addi	r3,r3,5128
200868f0:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, frame_period>>16);
200868f4:	1005d43a 	srai	r2,r2,16
200868f8:	00c80434 	movhi	r3,8208
200868fc:	18c50304 	addi	r3,r3,5132
20086900:	18800035 	stwio	r2,0(r3)


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 2);
20086904:	00880434 	movhi	r2,8208
20086908:	10850004 	addi	r2,r2,5120
2008690c:	00c00084 	movi	r3,2
20086910:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 7);
20086914:	00880434 	movhi	r2,8208
20086918:	10850104 	addi	r2,r2,5124
2008691c:	00c001c4 	movi	r3,7
20086920:	10c00035 	stwio	r3,0(r2)

	alt_irq_register( TIMER_1_IRQ, (void*) 0, timer_isr);
20086924:	01880234 	movhi	r6,8200
20086928:	01000104 	movi	r4,4
2008692c:	000b883a 	mov	r5,zero
20086930:	3199ba04 	addi	r6,r6,26344
20086934:	00977e40 	call	200977e4 <alt_irq_register>

	show_buffers_flag = 0;
20086938:	d0201e15 	stw	zero,-32648(gp)
	push_button_flag = 0;
2008693c:	d0202315 	stw	zero,-32628(gp)
	video_play_flag = 0;
20086940:	d0201b15 	stw	zero,-32660(gp)
	exit_flag = 0;
20086944:	d0201915 	stw	zero,-32668(gp)
	//time1= alt_timestamp();
	//printf("time1: %f\n", time1);
	peripheral_init();

	FAT_HANDLE hFAT;
	hFAT = Fat_Mount();
20086948:	0081d5c0 	call	20081d5c <Fat_Mount>

	FAT_BROWSE_HANDLE pFatBrowseHandle;
	if (Fat_FileBrowseBegin(hFAT, &pFatBrowseHandle) == 0) {
2008694c:	1009883a 	mov	r4,r2
20086950:	d9404e04 	addi	r5,sp,312
	//time1= alt_timestamp();
	//printf("time1: %f\n", time1);
	peripheral_init();

	FAT_HANDLE hFAT;
	hFAT = Fat_Mount();
20086954:	1023883a 	mov	r17,r2

	FAT_BROWSE_HANDLE pFatBrowseHandle;
	if (Fat_FileBrowseBegin(hFAT, &pFatBrowseHandle) == 0) {
20086958:	0081d980 	call	20081d98 <Fat_FileBrowseBegin>
2008695c:	1000031e 	bne	r2,zero,2008696c <main+0x158>
		printf("Failed FileBrowseBegin!\n");
20086960:	01000034 	movhi	r4,0
20086964:	21016c04 	addi	r4,r4,1456
20086968:	008aa000 	call	2008aa00 <puts>
	}

	FILE_CONTEXT pFileContext;
	if (Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext) == 0) {
2008696c:	d9004e04 	addi	r4,sp,312
20086970:	d9400104 	addi	r5,sp,4
20086974:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
20086978:	1000031e 	bne	r2,zero,20086988 <main+0x174>
		printf("Failed FileBrowseNext!\n");
2008697c:	01000034 	movhi	r4,0
20086980:	21017204 	addi	r4,r4,1480
20086984:	008aa000 	call	2008aa00 <puts>
	}

	char* fileName;
	while (1) {
		fileName = Fat_GetFileName(&pFileContext);
		char target[] = "V1_72.MPG";
20086988:	050dd7f4 	movhi	r20,14175
2008698c:	04d41374 	movhi	r19,20557
20086990:	a50c5584 	addi	r20,r20,12630
20086994:	9ccb8c84 	addi	r19,r19,11826
20086998:	048011c4 	movi	r18,71
2008699c:	00000106 	br	200869a4 <main+0x190>
		if (strcmp(fileName, target) == 0) {
			printf("found %s\n", target);
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
200869a0:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
		printf("Failed FileBrowseNext!\n");
	}

	char* fileName;
	while (1) {
		fileName = Fat_GetFileName(&pFileContext);
200869a4:	d9000104 	addi	r4,sp,4
200869a8:	00826180 	call	20082618 <Fat_GetFileName>
		char target[] = "V1_72.MPG";
		if (strcmp(fileName, target) == 0) {
200869ac:	d9404b04 	addi	r5,sp,300
200869b0:	1009883a 	mov	r4,r2
	}

	char* fileName;
	while (1) {
		fileName = Fat_GetFileName(&pFileContext);
		char target[] = "V1_72.MPG";
200869b4:	dd004b15 	stw	r20,300(sp)
200869b8:	dcc04c15 	stw	r19,304(sp)
200869bc:	dc804d0d 	sth	r18,308(sp)
		if (strcmp(fileName, target) == 0) {
200869c0:	008ab2c0 	call	2008ab2c <strcmp>
			printf("found %s\n", target);
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
200869c4:	d9004e04 	addi	r4,sp,312
200869c8:	d9400104 	addi	r5,sp,4

	char* fileName;
	while (1) {
		fileName = Fat_GetFileName(&pFileContext);
		char target[] = "V1_72.MPG";
		if (strcmp(fileName, target) == 0) {
200869cc:	103ff41e 	bne	r2,zero,200869a0 <__flash_rwdata_start+0xfffebb34>
			printf("found %s\n", target);
200869d0:	01000034 	movhi	r4,0
200869d4:	21017804 	addi	r4,r4,1504
200869d8:	d9404b04 	addi	r5,sp,300
200869dc:	008a8fc0 	call	2008a8fc <printf>
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
	}
	int num_buffers = 10;
	display = hw_video_display_init(
200869e0:	01000034 	movhi	r4,0
200869e4:	21017b04 	addi	r4,r4,1516
200869e8:	0140a004 	movi	r5,640
200869ec:	01807804 	movi	r6,480
200869f0:	01c00284 	movi	r7,10
200869f4:	0085c6c0 	call	20085c6c <hw_video_display_init>
	if (push_button_flag == 2) {
		printf("entered browsing\n");
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
		char extension[] = ".MPG";
200869f8:	0491d434 	movhi	r18,18256
200869fc:	d4e01904 	addi	r19,gp,-32668
			break;
		}
		Fat_FileBrowseNext(&pFatBrowseHandle, &pFileContext);
	}
	int num_buffers = 10;
	display = hw_video_display_init(
20086a00:	d0a01d15 	stw	r2,-32652(gp)
	if (push_button_flag == 2) {
		printf("entered browsing\n");
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
		char extension[] = ".MPG";
20086a04:	94934b84 	addi	r18,r18,19758

//---------------------Helper Functions---------------------------------
static int pio_functionality(FAT_HANDLE *hFAT,
		FAT_BROWSE_HANDLE *pFatBrowseHandle, FILE_CONTEXT *pFileContext) {

	if (push_button_flag == 2) {
20086a08:	d1602317 	ldw	r5,-32628(gp)
20086a0c:	00c00084 	movi	r3,2
20086a10:	28c02f1e 	bne	r5,r3,20086ad0 <main+0x2bc>
		printf("entered browsing\n");
20086a14:	01000034 	movhi	r4,0
20086a18:	21018004 	addi	r4,r4,1536
20086a1c:	008aa000 	call	2008aa00 <puts>
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
20086a20:	d9004e04 	addi	r4,sp,312
20086a24:	d9400104 	addi	r5,sp,4
20086a28:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
20086a2c:	d9000104 	addi	r4,sp,4
20086a30:	00826180 	call	20082618 <Fat_GetFileName>
20086a34:	1021883a 	mov	r16,r2
		char extension[] = ".MPG";
20086a38:	dc804b15 	stw	r18,300(sp)
20086a3c:	d8004c05 	stb	zero,304(sp)
20086a40:	00000306 	br	20086a50 <main+0x23c>
		while (!Fat_CheckExtension(pFileContext, extension)) {
			if(!Fat_FileBrowseNext(pFatBrowseHandle, pFileContext)){
				Fat_FileBrowseBegin(*hFAT, pFatBrowseHandle);
			}

			fileName = Fat_GetFileName(pFileContext);
20086a44:	d9000104 	addi	r4,sp,4
20086a48:	00826180 	call	20082618 <Fat_GetFileName>
20086a4c:	1021883a 	mov	r16,r2
		printf("entered browsing\n");
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
		char extension[] = ".MPG";
		while (!Fat_CheckExtension(pFileContext, extension)) {
20086a50:	d9000104 	addi	r4,sp,4
20086a54:	d9404b04 	addi	r5,sp,300
20086a58:	00825bc0 	call	200825bc <Fat_CheckExtension>
			if(!Fat_FileBrowseNext(pFatBrowseHandle, pFileContext)){
20086a5c:	d9004e04 	addi	r4,sp,312
20086a60:	d9400104 	addi	r5,sp,4
		printf("entered browsing\n");
		Fat_FileBrowseNext(pFatBrowseHandle, pFileContext);
		char* fileName;
		fileName = Fat_GetFileName(pFileContext);
		char extension[] = ".MPG";
		while (!Fat_CheckExtension(pFileContext, extension)) {
20086a64:	1000081e 	bne	r2,zero,20086a88 <main+0x274>
			if(!Fat_FileBrowseNext(pFatBrowseHandle, pFileContext)){
20086a68:	0081dc00 	call	20081dc0 <Fat_FileBrowseNext>
20086a6c:	103ff51e 	bne	r2,zero,20086a44 <__flash_rwdata_start+0xfffebbd8>
				Fat_FileBrowseBegin(*hFAT, pFatBrowseHandle);
20086a70:	8809883a 	mov	r4,r17
20086a74:	d9404e04 	addi	r5,sp,312
20086a78:	0081d980 	call	20081d98 <Fat_FileBrowseBegin>
20086a7c:	003ff106 	br	20086a44 <__flash_rwdata_start+0xfffebbd8>
	//Pushbuttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0xf);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE, 0x0);
	alt_irq_register( KEY_IRQ, (void*) 0, pio_isr);

	int frame_period = TIMER_1_FREQ / fps;
20086a80:	0086b780 	call	20086b78 <__divsi3>
20086a84:	003f9806 	br	200868e8 <__flash_rwdata_start+0xfffeba7c>
				Fat_FileBrowseBegin(*hFAT, pFatBrowseHandle);
			}

			fileName = Fat_GetFileName(pFileContext);
		}
		printf("Fat_CheckExtension: %d\n",
20086a88:	2809883a 	mov	r4,r5
20086a8c:	d9404b04 	addi	r5,sp,300
20086a90:	00825bc0 	call	200825bc <Fat_CheckExtension>
20086a94:	01000034 	movhi	r4,0
20086a98:	21018504 	addi	r4,r4,1556
20086a9c:	100b883a 	mov	r5,r2
20086aa0:	008a8fc0 	call	2008a8fc <printf>
				Fat_CheckExtension(pFileContext, extension));
		printf("%s \n\n\n", fileName);
20086aa4:	01000034 	movhi	r4,0
20086aa8:	800b883a 	mov	r5,r16
20086aac:	21018b04 	addi	r4,r4,1580
20086ab0:	008a8fc0 	call	2008a8fc <printf>
	FAT_FILE_HANDLE hFileHandle;
	while (1) {

		if (pio_functionality(&hFAT, &pFatBrowseHandle, &pFileContext) == 0){

			fileName = Fat_GetFileName(&pFileContext);
20086ab4:	d9000104 	addi	r4,sp,4
		}
		printf("Fat_CheckExtension: %d\n",
				Fat_CheckExtension(pFileContext, extension));
		printf("%s \n\n\n", fileName);

		push_button_flag = 0;
20086ab8:	d0202315 	stw	zero,-32628(gp)
	FAT_FILE_HANDLE hFileHandle;
	while (1) {

		if (pio_functionality(&hFAT, &pFatBrowseHandle, &pFileContext) == 0){

			fileName = Fat_GetFileName(&pFileContext);
20086abc:	00826180 	call	20082618 <Fat_GetFileName>
			hFileHandle = Fat_FileOpen(hFAT, fileName);
20086ac0:	8809883a 	mov	r4,r17
20086ac4:	100b883a 	mov	r5,r2
20086ac8:	00826dc0 	call	200826dc <Fat_FileOpen>
20086acc:	1021883a 	mov	r16,r2
		}
		if (video_play_flag == 1){
20086ad0:	d1601b17 	ldw	r5,-32660(gp)
20086ad4:	00c00044 	movi	r3,1
20086ad8:	28ffcb1e 	bne	r5,r3,20086a08 <__flash_rwdata_start+0xfffebb9c>
			mjpeg423_decode(hFileHandle, display, &skip_fw_flag, &skip_rv_flag, &exit_flag);
20086adc:	d1601d17 	ldw	r5,-32652(gp)
20086ae0:	dcc00015 	stw	r19,0(sp)
20086ae4:	8009883a 	mov	r4,r16
20086ae8:	d1a01a04 	addi	r6,gp,-32664
20086aec:	d1e01c04 	addi	r7,gp,-32656
20086af0:	0080da80 	call	20080da8 <mjpeg423_decode>
			while(video_play_flag != 0){
20086af4:	d0e01b17 	ldw	r3,-32660(gp)
20086af8:	183ffe1e 	bne	r3,zero,20086af4 <__flash_rwdata_start+0xfffebc88>
			}
			printf("Done playing file.");
20086afc:	01000034 	movhi	r4,0
20086b00:	21018d04 	addi	r4,r4,1588
20086b04:	008a8fc0 	call	2008a8fc <printf>
20086b08:	003fbf06 	br	20086a08 <__flash_rwdata_start+0xfffebb9c>

20086b0c <udivmodsi4>:
20086b0c:	2900182e 	bgeu	r5,r4,20086b70 <udivmodsi4+0x64>
20086b10:	28001716 	blt	r5,zero,20086b70 <udivmodsi4+0x64>
20086b14:	00800804 	movi	r2,32
20086b18:	00c00044 	movi	r3,1
20086b1c:	00000206 	br	20086b28 <udivmodsi4+0x1c>
20086b20:	10001126 	beq	r2,zero,20086b68 <udivmodsi4+0x5c>
20086b24:	28000516 	blt	r5,zero,20086b3c <udivmodsi4+0x30>
20086b28:	294b883a 	add	r5,r5,r5
20086b2c:	10bfffc4 	addi	r2,r2,-1
20086b30:	18c7883a 	add	r3,r3,r3
20086b34:	293ffa36 	bltu	r5,r4,20086b20 <__flash_rwdata_start+0xfffebcb4>
20086b38:	18000b26 	beq	r3,zero,20086b68 <udivmodsi4+0x5c>
20086b3c:	0005883a 	mov	r2,zero
20086b40:	21400236 	bltu	r4,r5,20086b4c <udivmodsi4+0x40>
20086b44:	2149c83a 	sub	r4,r4,r5
20086b48:	10c4b03a 	or	r2,r2,r3
20086b4c:	1806d07a 	srli	r3,r3,1
20086b50:	280ad07a 	srli	r5,r5,1
20086b54:	183ffa1e 	bne	r3,zero,20086b40 <__flash_rwdata_start+0xfffebcd4>
20086b58:	3000011e 	bne	r6,zero,20086b60 <udivmodsi4+0x54>
20086b5c:	f800283a 	ret
20086b60:	2005883a 	mov	r2,r4
20086b64:	f800283a 	ret
20086b68:	0005883a 	mov	r2,zero
20086b6c:	003ffa06 	br	20086b58 <__flash_rwdata_start+0xfffebcec>
20086b70:	00c00044 	movi	r3,1
20086b74:	003ff106 	br	20086b3c <__flash_rwdata_start+0xfffebcd0>

20086b78 <__divsi3>:
20086b78:	defffe04 	addi	sp,sp,-8
20086b7c:	dfc00115 	stw	ra,4(sp)
20086b80:	dc000015 	stw	r16,0(sp)
20086b84:	20000b16 	blt	r4,zero,20086bb4 <__divsi3+0x3c>
20086b88:	0021883a 	mov	r16,zero
20086b8c:	28000c16 	blt	r5,zero,20086bc0 <__divsi3+0x48>
20086b90:	000d883a 	mov	r6,zero
20086b94:	0086b0c0 	call	20086b0c <udivmodsi4>
20086b98:	0407c83a 	sub	r3,zero,r16
20086b9c:	1884f03a 	xor	r2,r3,r2
20086ba0:	1405883a 	add	r2,r2,r16
20086ba4:	dfc00117 	ldw	ra,4(sp)
20086ba8:	dc000017 	ldw	r16,0(sp)
20086bac:	dec00204 	addi	sp,sp,8
20086bb0:	f800283a 	ret
20086bb4:	0109c83a 	sub	r4,zero,r4
20086bb8:	04000044 	movi	r16,1
20086bbc:	283ff40e 	bge	r5,zero,20086b90 <__flash_rwdata_start+0xfffebd24>
20086bc0:	014bc83a 	sub	r5,zero,r5
20086bc4:	8400005c 	xori	r16,r16,1
20086bc8:	003ff106 	br	20086b90 <__flash_rwdata_start+0xfffebd24>

20086bcc <__modsi3>:
20086bcc:	defffd04 	addi	sp,sp,-12
20086bd0:	dfc00215 	stw	ra,8(sp)
20086bd4:	dc400115 	stw	r17,4(sp)
20086bd8:	dc000015 	stw	r16,0(sp)
20086bdc:	20000c16 	blt	r4,zero,20086c10 <__modsi3+0x44>
20086be0:	0023883a 	mov	r17,zero
20086be4:	0021883a 	mov	r16,zero
20086be8:	28000d16 	blt	r5,zero,20086c20 <__modsi3+0x54>
20086bec:	01800044 	movi	r6,1
20086bf0:	0086b0c0 	call	20086b0c <udivmodsi4>
20086bf4:	1404f03a 	xor	r2,r2,r16
20086bf8:	8885883a 	add	r2,r17,r2
20086bfc:	dfc00217 	ldw	ra,8(sp)
20086c00:	dc400117 	ldw	r17,4(sp)
20086c04:	dc000017 	ldw	r16,0(sp)
20086c08:	dec00304 	addi	sp,sp,12
20086c0c:	f800283a 	ret
20086c10:	0109c83a 	sub	r4,zero,r4
20086c14:	04400044 	movi	r17,1
20086c18:	043fffc4 	movi	r16,-1
20086c1c:	283ff30e 	bge	r5,zero,20086bec <__flash_rwdata_start+0xfffebd80>
20086c20:	014bc83a 	sub	r5,zero,r5
20086c24:	003ff106 	br	20086bec <__flash_rwdata_start+0xfffebd80>

20086c28 <__udivsi3>:
20086c28:	000d883a 	mov	r6,zero
20086c2c:	0086b0c1 	jmpi	20086b0c <udivmodsi4>

20086c30 <__umodsi3>:
20086c30:	01800044 	movi	r6,1
20086c34:	0086b0c1 	jmpi	20086b0c <udivmodsi4>

20086c38 <__divsf3>:
20086c38:	defff504 	addi	sp,sp,-44
20086c3c:	dd000515 	stw	r20,20(sp)
20086c40:	2028d5fa 	srli	r20,r4,23
20086c44:	dd400615 	stw	r21,24(sp)
20086c48:	202ad7fa 	srli	r21,r4,31
20086c4c:	00c02034 	movhi	r3,128
20086c50:	dcc00415 	stw	r19,16(sp)
20086c54:	dc800315 	stw	r18,12(sp)
20086c58:	18ffffc4 	addi	r3,r3,-1
20086c5c:	dfc00a15 	stw	ra,40(sp)
20086c60:	df000915 	stw	fp,36(sp)
20086c64:	ddc00815 	stw	r23,32(sp)
20086c68:	dd800715 	stw	r22,28(sp)
20086c6c:	dc400215 	stw	r17,8(sp)
20086c70:	dc000115 	stw	r16,4(sp)
20086c74:	a5003fcc 	andi	r20,r20,255
20086c78:	1924703a 	and	r18,r3,r4
20086c7c:	acc03fcc 	andi	r19,r21,255
20086c80:	a0004d26 	beq	r20,zero,20086db8 <__divsf3+0x180>
20086c84:	00803fc4 	movi	r2,255
20086c88:	a0802e26 	beq	r20,r2,20086d44 <__divsf3+0x10c>
20086c8c:	91002034 	orhi	r4,r18,128
20086c90:	202490fa 	slli	r18,r4,3
20086c94:	a53fe044 	addi	r20,r20,-127
20086c98:	0021883a 	mov	r16,zero
20086c9c:	002f883a 	mov	r23,zero
20086ca0:	2804d5fa 	srli	r2,r5,23
20086ca4:	282cd7fa 	srli	r22,r5,31
20086ca8:	00c02034 	movhi	r3,128
20086cac:	18ffffc4 	addi	r3,r3,-1
20086cb0:	10803fcc 	andi	r2,r2,255
20086cb4:	1962703a 	and	r17,r3,r5
20086cb8:	b7003fcc 	andi	fp,r22,255
20086cbc:	10004526 	beq	r2,zero,20086dd4 <__divsf3+0x19c>
20086cc0:	00c03fc4 	movi	r3,255
20086cc4:	10c04026 	beq	r2,r3,20086dc8 <__divsf3+0x190>
20086cc8:	88c02034 	orhi	r3,r17,128
20086ccc:	182290fa 	slli	r17,r3,3
20086cd0:	10bfe044 	addi	r2,r2,-127
20086cd4:	0009883a 	mov	r4,zero
20086cd8:	2420b03a 	or	r16,r4,r16
20086cdc:	802090ba 	slli	r16,r16,2
20086ce0:	01c80234 	movhi	r7,8200
20086ce4:	39db4104 	addi	r7,r7,27908
20086ce8:	81e1883a 	add	r16,r16,r7
20086cec:	80c00017 	ldw	r3,0(r16)
20086cf0:	ad8af03a 	xor	r5,r21,r22
20086cf4:	280d883a 	mov	r6,r5
20086cf8:	a085c83a 	sub	r2,r20,r2
20086cfc:	29403fcc 	andi	r5,r5,255
20086d00:	1800683a 	jmp	r3
20086d04:	20086f10 	cmplti	zero,r4,8636
20086d08:	20086eb8 	rdprs	zero,r4,8634
20086d0c:	20086edc 	xori	zero,r4,8635
20086d10:	20086ea4 	muli	zero,r4,8634
20086d14:	20086edc 	xori	zero,r4,8635
20086d18:	20086d54 	ori	zero,r4,8629
20086d1c:	20086edc 	xori	zero,r4,8635
20086d20:	20086ea4 	muli	zero,r4,8634
20086d24:	20086eb8 	rdprs	zero,r4,8634
20086d28:	20086eb8 	rdprs	zero,r4,8634
20086d2c:	20086d54 	ori	zero,r4,8629
20086d30:	20086ea4 	muli	zero,r4,8634
20086d34:	20086fa8 	cmpgeui	zero,r4,8638
20086d38:	20086fa8 	cmpgeui	zero,r4,8638
20086d3c:	20086fa8 	cmpgeui	zero,r4,8638
20086d40:	20086ee8 	cmpgeui	zero,r4,8635
20086d44:	9000531e 	bne	r18,zero,20086e94 <__divsf3+0x25c>
20086d48:	04000204 	movi	r16,8
20086d4c:	05c00084 	movi	r23,2
20086d50:	003fd306 	br	20086ca0 <__flash_rwdata_start+0xfffebe34>
20086d54:	00c02034 	movhi	r3,128
20086d58:	000d883a 	mov	r6,zero
20086d5c:	18ffffc4 	addi	r3,r3,-1
20086d60:	013fffc4 	movi	r4,-1
20086d64:	21003fcc 	andi	r4,r4,255
20086d68:	200895fa 	slli	r4,r4,23
20086d6c:	30803fcc 	andi	r2,r6,255
20086d70:	01802034 	movhi	r6,128
20086d74:	31bfffc4 	addi	r6,r6,-1
20086d78:	100497fa 	slli	r2,r2,31
20086d7c:	1986703a 	and	r3,r3,r6
20086d80:	1906b03a 	or	r3,r3,r4
20086d84:	1884b03a 	or	r2,r3,r2
20086d88:	dfc00a17 	ldw	ra,40(sp)
20086d8c:	df000917 	ldw	fp,36(sp)
20086d90:	ddc00817 	ldw	r23,32(sp)
20086d94:	dd800717 	ldw	r22,28(sp)
20086d98:	dd400617 	ldw	r21,24(sp)
20086d9c:	dd000517 	ldw	r20,20(sp)
20086da0:	dcc00417 	ldw	r19,16(sp)
20086da4:	dc800317 	ldw	r18,12(sp)
20086da8:	dc400217 	ldw	r17,8(sp)
20086dac:	dc000117 	ldw	r16,4(sp)
20086db0:	dec00b04 	addi	sp,sp,44
20086db4:	f800283a 	ret
20086db8:	90002b1e 	bne	r18,zero,20086e68 <__divsf3+0x230>
20086dbc:	04000104 	movi	r16,4
20086dc0:	05c00044 	movi	r23,1
20086dc4:	003fb606 	br	20086ca0 <__flash_rwdata_start+0xfffebe34>
20086dc8:	8800251e 	bne	r17,zero,20086e60 <__divsf3+0x228>
20086dcc:	01000084 	movi	r4,2
20086dd0:	00000206 	br	20086ddc <__divsf3+0x1a4>
20086dd4:	88001a1e 	bne	r17,zero,20086e40 <__divsf3+0x208>
20086dd8:	01000044 	movi	r4,1
20086ddc:	2420b03a 	or	r16,r4,r16
20086de0:	802090ba 	slli	r16,r16,2
20086de4:	00c80234 	movhi	r3,8200
20086de8:	18db8004 	addi	r3,r3,28160
20086dec:	80e1883a 	add	r16,r16,r3
20086df0:	80c00017 	ldw	r3,0(r16)
20086df4:	ad8af03a 	xor	r5,r21,r22
20086df8:	a085c83a 	sub	r2,r20,r2
20086dfc:	1800683a 	jmp	r3
20086e00:	20086eb8 	rdprs	zero,r4,8634
20086e04:	20086eb8 	rdprs	zero,r4,8634
20086e08:	20087008 	cmpgei	zero,r4,8640
20086e0c:	20086ea0 	cmpeqi	zero,r4,8634
20086e10:	20087008 	cmpgei	zero,r4,8640
20086e14:	20086d54 	ori	zero,r4,8629
20086e18:	20087008 	cmpgei	zero,r4,8640
20086e1c:	20086ea0 	cmpeqi	zero,r4,8634
20086e20:	20086eb8 	rdprs	zero,r4,8634
20086e24:	20086eb8 	rdprs	zero,r4,8634
20086e28:	20086d54 	ori	zero,r4,8629
20086e2c:	20086ea0 	cmpeqi	zero,r4,8634
20086e30:	20086fa8 	cmpgeui	zero,r4,8638
20086e34:	20086fa8 	cmpgeui	zero,r4,8638
20086e38:	20086fa8 	cmpgeui	zero,r4,8638
20086e3c:	20086fd4 	ori	zero,r4,8639
20086e40:	8809883a 	mov	r4,r17
20086e44:	0089bbc0 	call	20089bbc <__clzsi2>
20086e48:	10fffec4 	addi	r3,r2,-5
20086e4c:	88e2983a 	sll	r17,r17,r3
20086e50:	00ffe284 	movi	r3,-118
20086e54:	1885c83a 	sub	r2,r3,r2
20086e58:	0009883a 	mov	r4,zero
20086e5c:	003f9e06 	br	20086cd8 <__flash_rwdata_start+0xfffebe6c>
20086e60:	010000c4 	movi	r4,3
20086e64:	003f9c06 	br	20086cd8 <__flash_rwdata_start+0xfffebe6c>
20086e68:	9009883a 	mov	r4,r18
20086e6c:	d9400015 	stw	r5,0(sp)
20086e70:	0089bbc0 	call	20089bbc <__clzsi2>
20086e74:	10fffec4 	addi	r3,r2,-5
20086e78:	053fe284 	movi	r20,-118
20086e7c:	90e4983a 	sll	r18,r18,r3
20086e80:	a0a9c83a 	sub	r20,r20,r2
20086e84:	0021883a 	mov	r16,zero
20086e88:	002f883a 	mov	r23,zero
20086e8c:	d9400017 	ldw	r5,0(sp)
20086e90:	003f8306 	br	20086ca0 <__flash_rwdata_start+0xfffebe34>
20086e94:	04000304 	movi	r16,12
20086e98:	05c000c4 	movi	r23,3
20086e9c:	003f8006 	br	20086ca0 <__flash_rwdata_start+0xfffebe34>
20086ea0:	0023883a 	mov	r17,zero
20086ea4:	e027883a 	mov	r19,fp
20086ea8:	202f883a 	mov	r23,r4
20086eac:	00c00084 	movi	r3,2
20086eb0:	980b883a 	mov	r5,r19
20086eb4:	b8c0501e 	bne	r23,r3,20086ff8 <__divsf3+0x3c0>
20086eb8:	2980004c 	andi	r6,r5,1
20086ebc:	013fffc4 	movi	r4,-1
20086ec0:	0007883a 	mov	r3,zero
20086ec4:	003fa706 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20086ec8:	013fe084 	movi	r4,-126
20086ecc:	2089c83a 	sub	r4,r4,r2
20086ed0:	00c006c4 	movi	r3,27
20086ed4:	1900500e 	bge	r3,r4,20087018 <__divsf3+0x3e0>
20086ed8:	9980004c 	andi	r6,r19,1
20086edc:	0009883a 	mov	r4,zero
20086ee0:	0007883a 	mov	r3,zero
20086ee4:	003f9f06 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20086ee8:	9080102c 	andhi	r2,r18,64
20086eec:	10000226 	beq	r2,zero,20086ef8 <__divsf3+0x2c0>
20086ef0:	8880102c 	andhi	r2,r17,64
20086ef4:	10003a26 	beq	r2,zero,20086fe0 <__divsf3+0x3a8>
20086ef8:	00802034 	movhi	r2,128
20086efc:	90c01034 	orhi	r3,r18,64
20086f00:	10bfffc4 	addi	r2,r2,-1
20086f04:	a80d883a 	mov	r6,r21
20086f08:	1886703a 	and	r3,r3,r2
20086f0c:	003f9406 	br	20086d60 <__flash_rwdata_start+0xfffebef4>
20086f10:	9006917a 	slli	r3,r18,5
20086f14:	8822917a 	slli	r17,r17,5
20086f18:	1c402936 	bltu	r3,r17,20086fc0 <__divsf3+0x388>
20086f1c:	1c47c83a 	sub	r3,r3,r17
20086f20:	2827883a 	mov	r19,r5
20086f24:	01800684 	movi	r6,26
20086f28:	01000044 	movi	r4,1
20086f2c:	180f883a 	mov	r7,r3
20086f30:	2109883a 	add	r4,r4,r4
20086f34:	18c7883a 	add	r3,r3,r3
20086f38:	38000116 	blt	r7,zero,20086f40 <__divsf3+0x308>
20086f3c:	1c400236 	bltu	r3,r17,20086f48 <__divsf3+0x310>
20086f40:	1c47c83a 	sub	r3,r3,r17
20086f44:	21000054 	ori	r4,r4,1
20086f48:	31bfffc4 	addi	r6,r6,-1
20086f4c:	303ff71e 	bne	r6,zero,20086f2c <__flash_rwdata_start+0xfffec0c0>
20086f50:	1806c03a 	cmpne	r3,r3,zero
20086f54:	1922b03a 	or	r17,r3,r4
20086f58:	11001fc4 	addi	r4,r2,127
20086f5c:	013fda0e 	bge	zero,r4,20086ec8 <__flash_rwdata_start+0xfffec05c>
20086f60:	88c001cc 	andi	r3,r17,7
20086f64:	18000426 	beq	r3,zero,20086f78 <__divsf3+0x340>
20086f68:	894003cc 	andi	r5,r17,15
20086f6c:	00c00104 	movi	r3,4
20086f70:	28c00126 	beq	r5,r3,20086f78 <__divsf3+0x340>
20086f74:	88e3883a 	add	r17,r17,r3
20086f78:	88c2002c 	andhi	r3,r17,2048
20086f7c:	18000426 	beq	r3,zero,20086f90 <__divsf3+0x358>
20086f80:	11002004 	addi	r4,r2,128
20086f84:	00be0034 	movhi	r2,63488
20086f88:	10bfffc4 	addi	r2,r2,-1
20086f8c:	88a2703a 	and	r17,r17,r2
20086f90:	00803f84 	movi	r2,254
20086f94:	1100060e 	bge	r2,r4,20086fb0 <__divsf3+0x378>
20086f98:	9980004c 	andi	r6,r19,1
20086f9c:	013fffc4 	movi	r4,-1
20086fa0:	0007883a 	mov	r3,zero
20086fa4:	003f6f06 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20086fa8:	9023883a 	mov	r17,r18
20086fac:	003fbf06 	br	20086eac <__flash_rwdata_start+0xfffec040>
20086fb0:	880691ba 	slli	r3,r17,6
20086fb4:	9980004c 	andi	r6,r19,1
20086fb8:	1806d27a 	srli	r3,r3,9
20086fbc:	003f6906 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20086fc0:	10bfffc4 	addi	r2,r2,-1
20086fc4:	2827883a 	mov	r19,r5
20086fc8:	018006c4 	movi	r6,27
20086fcc:	0009883a 	mov	r4,zero
20086fd0:	003fd606 	br	20086f2c <__flash_rwdata_start+0xfffec0c0>
20086fd4:	9080102c 	andhi	r2,r18,64
20086fd8:	0023883a 	mov	r17,zero
20086fdc:	103fc626 	beq	r2,zero,20086ef8 <__flash_rwdata_start+0xfffec08c>
20086fe0:	00802034 	movhi	r2,128
20086fe4:	88c01034 	orhi	r3,r17,64
20086fe8:	10bfffc4 	addi	r2,r2,-1
20086fec:	b00d883a 	mov	r6,r22
20086ff0:	1886703a 	and	r3,r3,r2
20086ff4:	003f5a06 	br	20086d60 <__flash_rwdata_start+0xfffebef4>
20086ff8:	00c000c4 	movi	r3,3
20086ffc:	b8c01c26 	beq	r23,r3,20087070 <__divsf3+0x438>
20087000:	00c00044 	movi	r3,1
20087004:	b8ffd41e 	bne	r23,r3,20086f58 <__flash_rwdata_start+0xfffec0ec>
20087008:	2980004c 	andi	r6,r5,1
2008700c:	0009883a 	mov	r4,zero
20087010:	0007883a 	mov	r3,zero
20087014:	003f5306 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20087018:	10802784 	addi	r2,r2,158
2008701c:	8884983a 	sll	r2,r17,r2
20087020:	8908d83a 	srl	r4,r17,r4
20087024:	1022c03a 	cmpne	r17,r2,zero
20087028:	8908b03a 	or	r4,r17,r4
2008702c:	208001cc 	andi	r2,r4,7
20087030:	10000426 	beq	r2,zero,20087044 <__divsf3+0x40c>
20087034:	20c003cc 	andi	r3,r4,15
20087038:	00800104 	movi	r2,4
2008703c:	18800126 	beq	r3,r2,20087044 <__divsf3+0x40c>
20087040:	2089883a 	add	r4,r4,r2
20087044:	2081002c 	andhi	r2,r4,1024
20087048:	10000426 	beq	r2,zero,2008705c <__divsf3+0x424>
2008704c:	9980004c 	andi	r6,r19,1
20087050:	01000044 	movi	r4,1
20087054:	0007883a 	mov	r3,zero
20087058:	003f4206 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
2008705c:	200691ba 	slli	r3,r4,6
20087060:	9980004c 	andi	r6,r19,1
20087064:	0009883a 	mov	r4,zero
20087068:	1806d27a 	srli	r3,r3,9
2008706c:	003f3d06 	br	20086d64 <__flash_rwdata_start+0xfffebef8>
20087070:	00802034 	movhi	r2,128
20087074:	88c01034 	orhi	r3,r17,64
20087078:	10bfffc4 	addi	r2,r2,-1
2008707c:	9980004c 	andi	r6,r19,1
20087080:	1886703a 	and	r3,r3,r2
20087084:	003f3606 	br	20086d60 <__flash_rwdata_start+0xfffebef4>

20087088 <__mulsf3>:
20087088:	defff504 	addi	sp,sp,-44
2008708c:	dc400215 	stw	r17,8(sp)
20087090:	2022d5fa 	srli	r17,r4,23
20087094:	dd400615 	stw	r21,24(sp)
20087098:	202ad7fa 	srli	r21,r4,31
2008709c:	dc000115 	stw	r16,4(sp)
200870a0:	04002034 	movhi	r16,128
200870a4:	df000915 	stw	fp,36(sp)
200870a8:	dd000515 	stw	r20,20(sp)
200870ac:	843fffc4 	addi	r16,r16,-1
200870b0:	dfc00a15 	stw	ra,40(sp)
200870b4:	ddc00815 	stw	r23,32(sp)
200870b8:	dd800715 	stw	r22,28(sp)
200870bc:	dcc00415 	stw	r19,16(sp)
200870c0:	dc800315 	stw	r18,12(sp)
200870c4:	8c403fcc 	andi	r17,r17,255
200870c8:	8120703a 	and	r16,r16,r4
200870cc:	a829883a 	mov	r20,r21
200870d0:	af003fcc 	andi	fp,r21,255
200870d4:	88005026 	beq	r17,zero,20087218 <__mulsf3+0x190>
200870d8:	00803fc4 	movi	r2,255
200870dc:	88802f26 	beq	r17,r2,2008719c <__mulsf3+0x114>
200870e0:	84002034 	orhi	r16,r16,128
200870e4:	802090fa 	slli	r16,r16,3
200870e8:	8c7fe044 	addi	r17,r17,-127
200870ec:	0025883a 	mov	r18,zero
200870f0:	002f883a 	mov	r23,zero
200870f4:	2804d5fa 	srli	r2,r5,23
200870f8:	282cd7fa 	srli	r22,r5,31
200870fc:	01002034 	movhi	r4,128
20087100:	213fffc4 	addi	r4,r4,-1
20087104:	10803fcc 	andi	r2,r2,255
20087108:	2166703a 	and	r19,r4,r5
2008710c:	b1803fcc 	andi	r6,r22,255
20087110:	10004926 	beq	r2,zero,20087238 <__mulsf3+0x1b0>
20087114:	00c03fc4 	movi	r3,255
20087118:	10c04326 	beq	r2,r3,20087228 <__mulsf3+0x1a0>
2008711c:	99402034 	orhi	r5,r19,128
20087120:	282690fa 	slli	r19,r5,3
20087124:	10bfe044 	addi	r2,r2,-127
20087128:	000b883a 	mov	r5,zero
2008712c:	8885883a 	add	r2,r17,r2
20087130:	2c86b03a 	or	r3,r5,r18
20087134:	010003c4 	movi	r4,15
20087138:	adaaf03a 	xor	r21,r21,r22
2008713c:	12000044 	addi	r8,r2,1
20087140:	20c06536 	bltu	r4,r3,200872d8 <__mulsf3+0x250>
20087144:	180690ba 	slli	r3,r3,2
20087148:	01080234 	movhi	r4,8200
2008714c:	211c5704 	addi	r4,r4,29020
20087150:	1907883a 	add	r3,r3,r4
20087154:	18c00017 	ldw	r3,0(r3)
20087158:	1800683a 	jmp	r3
2008715c:	200872d8 	cmpnei	zero,r4,8651
20087160:	200873a4 	muli	zero,r4,8654
20087164:	200873a4 	muli	zero,r4,8654
20087168:	200873b4 	orhi	zero,r4,8654
2008716c:	200871ac 	andhi	zero,r4,8646
20087170:	200871ac 	andhi	zero,r4,8646
20087174:	200872c4 	addi	zero,r4,8651
20087178:	200873b4 	orhi	zero,r4,8654
2008717c:	200871ac 	andhi	zero,r4,8646
20087180:	200872c4 	addi	zero,r4,8651
20087184:	200871ac 	andhi	zero,r4,8646
20087188:	200873b4 	orhi	zero,r4,8654
2008718c:	200871b0 	cmpltui	zero,r4,8646
20087190:	200871b0 	cmpltui	zero,r4,8646
20087194:	200871b0 	cmpltui	zero,r4,8646
20087198:	200873c4 	addi	zero,r4,8655
2008719c:	8000311e 	bne	r16,zero,20087264 <__mulsf3+0x1dc>
200871a0:	04800204 	movi	r18,8
200871a4:	05c00084 	movi	r23,2
200871a8:	003fd206 	br	200870f4 <__flash_rwdata_start+0xfffec288>
200871ac:	a839883a 	mov	fp,r21
200871b0:	00800084 	movi	r2,2
200871b4:	b880231e 	bne	r23,r2,20087244 <__mulsf3+0x1bc>
200871b8:	e500004c 	andi	r20,fp,1
200871bc:	00ffffc4 	movi	r3,-1
200871c0:	0009883a 	mov	r4,zero
200871c4:	18c03fcc 	andi	r3,r3,255
200871c8:	180695fa 	slli	r3,r3,23
200871cc:	a0803fcc 	andi	r2,r20,255
200871d0:	04002034 	movhi	r16,128
200871d4:	100497fa 	slli	r2,r2,31
200871d8:	843fffc4 	addi	r16,r16,-1
200871dc:	2420703a 	and	r16,r4,r16
200871e0:	80e0b03a 	or	r16,r16,r3
200871e4:	8084b03a 	or	r2,r16,r2
200871e8:	dfc00a17 	ldw	ra,40(sp)
200871ec:	df000917 	ldw	fp,36(sp)
200871f0:	ddc00817 	ldw	r23,32(sp)
200871f4:	dd800717 	ldw	r22,28(sp)
200871f8:	dd400617 	ldw	r21,24(sp)
200871fc:	dd000517 	ldw	r20,20(sp)
20087200:	dcc00417 	ldw	r19,16(sp)
20087204:	dc800317 	ldw	r18,12(sp)
20087208:	dc400217 	ldw	r17,8(sp)
2008720c:	dc000117 	ldw	r16,4(sp)
20087210:	dec00b04 	addi	sp,sp,44
20087214:	f800283a 	ret
20087218:	8000151e 	bne	r16,zero,20087270 <__mulsf3+0x1e8>
2008721c:	04800104 	movi	r18,4
20087220:	05c00044 	movi	r23,1
20087224:	003fb306 	br	200870f4 <__flash_rwdata_start+0xfffec288>
20087228:	980b003a 	cmpeq	r5,r19,zero
2008722c:	00c000c4 	movi	r3,3
20087230:	194bc83a 	sub	r5,r3,r5
20087234:	003fbd06 	br	2008712c <__flash_rwdata_start+0xfffec2c0>
20087238:	9800181e 	bne	r19,zero,2008729c <__mulsf3+0x214>
2008723c:	01400044 	movi	r5,1
20087240:	003fba06 	br	2008712c <__flash_rwdata_start+0xfffec2c0>
20087244:	008000c4 	movi	r2,3
20087248:	b8809226 	beq	r23,r2,20087494 <__mulsf3+0x40c>
2008724c:	00800044 	movi	r2,1
20087250:	b880771e 	bne	r23,r2,20087430 <__mulsf3+0x3a8>
20087254:	e0a8703a 	and	r20,fp,r2
20087258:	0007883a 	mov	r3,zero
2008725c:	0009883a 	mov	r4,zero
20087260:	003fd806 	br	200871c4 <__flash_rwdata_start+0xfffec358>
20087264:	04800304 	movi	r18,12
20087268:	05c000c4 	movi	r23,3
2008726c:	003fa106 	br	200870f4 <__flash_rwdata_start+0xfffec288>
20087270:	8009883a 	mov	r4,r16
20087274:	d9400015 	stw	r5,0(sp)
20087278:	0089bbc0 	call	20089bbc <__clzsi2>
2008727c:	10fffec4 	addi	r3,r2,-5
20087280:	047fe284 	movi	r17,-118
20087284:	80e0983a 	sll	r16,r16,r3
20087288:	88a3c83a 	sub	r17,r17,r2
2008728c:	0025883a 	mov	r18,zero
20087290:	002f883a 	mov	r23,zero
20087294:	d9400017 	ldw	r5,0(sp)
20087298:	003f9606 	br	200870f4 <__flash_rwdata_start+0xfffec288>
2008729c:	9809883a 	mov	r4,r19
200872a0:	d9800015 	stw	r6,0(sp)
200872a4:	0089bbc0 	call	20089bbc <__clzsi2>
200872a8:	10fffec4 	addi	r3,r2,-5
200872ac:	98e6983a 	sll	r19,r19,r3
200872b0:	00ffe284 	movi	r3,-118
200872b4:	1885c83a 	sub	r2,r3,r2
200872b8:	000b883a 	mov	r5,zero
200872bc:	d9800017 	ldw	r6,0(sp)
200872c0:	003f9a06 	br	2008712c <__flash_rwdata_start+0xfffec2c0>
200872c4:	01002034 	movhi	r4,128
200872c8:	0029883a 	mov	r20,zero
200872cc:	213fffc4 	addi	r4,r4,-1
200872d0:	00ffffc4 	movi	r3,-1
200872d4:	003fbb06 	br	200871c4 <__flash_rwdata_start+0xfffec358>
200872d8:	8006d43a 	srli	r3,r16,16
200872dc:	9812d43a 	srli	r9,r19,16
200872e0:	843fffcc 	andi	r16,r16,65535
200872e4:	997fffcc 	andi	r5,r19,65535
200872e8:	2c0f383a 	mul	r7,r5,r16
200872ec:	28cb383a 	mul	r5,r5,r3
200872f0:	4c21383a 	mul	r16,r9,r16
200872f4:	380cd43a 	srli	r6,r7,16
200872f8:	48d3383a 	mul	r9,r9,r3
200872fc:	2c21883a 	add	r16,r5,r16
20087300:	8187883a 	add	r3,r16,r6
20087304:	1940022e 	bgeu	r3,r5,20087310 <__mulsf3+0x288>
20087308:	01000074 	movhi	r4,1
2008730c:	4913883a 	add	r9,r9,r4
20087310:	1808943a 	slli	r4,r3,16
20087314:	39ffffcc 	andi	r7,r7,65535
20087318:	1806d43a 	srli	r3,r3,16
2008731c:	21c9883a 	add	r4,r4,r7
20087320:	202091ba 	slli	r16,r4,6
20087324:	48c7883a 	add	r3,r9,r3
20087328:	2008d6ba 	srli	r4,r4,26
2008732c:	180691ba 	slli	r3,r3,6
20087330:	8020c03a 	cmpne	r16,r16,zero
20087334:	8120b03a 	or	r16,r16,r4
20087338:	80e0b03a 	or	r16,r16,r3
2008733c:	80c2002c 	andhi	r3,r16,2048
20087340:	18000426 	beq	r3,zero,20087354 <__mulsf3+0x2cc>
20087344:	8006d07a 	srli	r3,r16,1
20087348:	8400004c 	andi	r16,r16,1
2008734c:	4005883a 	mov	r2,r8
20087350:	80e0b03a 	or	r16,r16,r3
20087354:	10c01fc4 	addi	r3,r2,127
20087358:	00c02d0e 	bge	zero,r3,20087410 <__mulsf3+0x388>
2008735c:	810001cc 	andi	r4,r16,7
20087360:	20000426 	beq	r4,zero,20087374 <__mulsf3+0x2ec>
20087364:	814003cc 	andi	r5,r16,15
20087368:	01000104 	movi	r4,4
2008736c:	29000126 	beq	r5,r4,20087374 <__mulsf3+0x2ec>
20087370:	8121883a 	add	r16,r16,r4
20087374:	8102002c 	andhi	r4,r16,2048
20087378:	20000426 	beq	r4,zero,2008738c <__mulsf3+0x304>
2008737c:	10c02004 	addi	r3,r2,128
20087380:	00be0034 	movhi	r2,63488
20087384:	10bfffc4 	addi	r2,r2,-1
20087388:	80a0703a 	and	r16,r16,r2
2008738c:	00803f84 	movi	r2,254
20087390:	10c01b0e 	bge	r2,r3,20087400 <__mulsf3+0x378>
20087394:	ad00004c 	andi	r20,r21,1
20087398:	00ffffc4 	movi	r3,-1
2008739c:	0009883a 	mov	r4,zero
200873a0:	003f8806 	br	200871c4 <__flash_rwdata_start+0xfffec358>
200873a4:	9821883a 	mov	r16,r19
200873a8:	a839883a 	mov	fp,r21
200873ac:	282f883a 	mov	r23,r5
200873b0:	003f7f06 	br	200871b0 <__flash_rwdata_start+0xfffec344>
200873b4:	9821883a 	mov	r16,r19
200873b8:	3039883a 	mov	fp,r6
200873bc:	282f883a 	mov	r23,r5
200873c0:	003f7b06 	br	200871b0 <__flash_rwdata_start+0xfffec344>
200873c4:	8080102c 	andhi	r2,r16,64
200873c8:	10000826 	beq	r2,zero,200873ec <__mulsf3+0x364>
200873cc:	9880102c 	andhi	r2,r19,64
200873d0:	1000061e 	bne	r2,zero,200873ec <__mulsf3+0x364>
200873d4:	00802034 	movhi	r2,128
200873d8:	99001034 	orhi	r4,r19,64
200873dc:	10bfffc4 	addi	r2,r2,-1
200873e0:	b029883a 	mov	r20,r22
200873e4:	2088703a 	and	r4,r4,r2
200873e8:	003fb906 	br	200872d0 <__flash_rwdata_start+0xfffec464>
200873ec:	00802034 	movhi	r2,128
200873f0:	81001034 	orhi	r4,r16,64
200873f4:	10bfffc4 	addi	r2,r2,-1
200873f8:	2088703a 	and	r4,r4,r2
200873fc:	003fb406 	br	200872d0 <__flash_rwdata_start+0xfffec464>
20087400:	802091ba 	slli	r16,r16,6
20087404:	ad00004c 	andi	r20,r21,1
20087408:	8008d27a 	srli	r4,r16,9
2008740c:	003f6d06 	br	200871c4 <__flash_rwdata_start+0xfffec358>
20087410:	00ffe084 	movi	r3,-126
20087414:	1887c83a 	sub	r3,r3,r2
20087418:	010006c4 	movi	r4,27
2008741c:	20c0070e 	bge	r4,r3,2008743c <__mulsf3+0x3b4>
20087420:	ad00004c 	andi	r20,r21,1
20087424:	0007883a 	mov	r3,zero
20087428:	0009883a 	mov	r4,zero
2008742c:	003f6506 	br	200871c4 <__flash_rwdata_start+0xfffec358>
20087430:	4005883a 	mov	r2,r8
20087434:	e02b883a 	mov	r21,fp
20087438:	003fc606 	br	20087354 <__flash_rwdata_start+0xfffec4e8>
2008743c:	10802784 	addi	r2,r2,158
20087440:	8084983a 	sll	r2,r16,r2
20087444:	80e0d83a 	srl	r16,r16,r3
20087448:	1004c03a 	cmpne	r2,r2,zero
2008744c:	1404b03a 	or	r2,r2,r16
20087450:	10c001cc 	andi	r3,r2,7
20087454:	18000426 	beq	r3,zero,20087468 <__mulsf3+0x3e0>
20087458:	110003cc 	andi	r4,r2,15
2008745c:	00c00104 	movi	r3,4
20087460:	20c00126 	beq	r4,r3,20087468 <__mulsf3+0x3e0>
20087464:	10c5883a 	add	r2,r2,r3
20087468:	10c1002c 	andhi	r3,r2,1024
2008746c:	18000426 	beq	r3,zero,20087480 <__mulsf3+0x3f8>
20087470:	ad00004c 	andi	r20,r21,1
20087474:	00c00044 	movi	r3,1
20087478:	0009883a 	mov	r4,zero
2008747c:	003f5106 	br	200871c4 <__flash_rwdata_start+0xfffec358>
20087480:	100491ba 	slli	r2,r2,6
20087484:	ad00004c 	andi	r20,r21,1
20087488:	0007883a 	mov	r3,zero
2008748c:	1008d27a 	srli	r4,r2,9
20087490:	003f4c06 	br	200871c4 <__flash_rwdata_start+0xfffec358>
20087494:	00802034 	movhi	r2,128
20087498:	81001034 	orhi	r4,r16,64
2008749c:	10bfffc4 	addi	r2,r2,-1
200874a0:	e500004c 	andi	r20,fp,1
200874a4:	2088703a 	and	r4,r4,r2
200874a8:	003f8906 	br	200872d0 <__flash_rwdata_start+0xfffec464>

200874ac <__floatunsisf>:
200874ac:	defffe04 	addi	sp,sp,-8
200874b0:	dc000015 	stw	r16,0(sp)
200874b4:	dfc00115 	stw	ra,4(sp)
200874b8:	2021883a 	mov	r16,r4
200874bc:	20002626 	beq	r4,zero,20087558 <__floatunsisf+0xac>
200874c0:	0089bbc0 	call	20089bbc <__clzsi2>
200874c4:	00c02784 	movi	r3,158
200874c8:	1887c83a 	sub	r3,r3,r2
200874cc:	01002584 	movi	r4,150
200874d0:	20c00816 	blt	r4,r3,200874f4 <__floatunsisf+0x48>
200874d4:	01000204 	movi	r4,8
200874d8:	2080340e 	bge	r4,r2,200875ac <__floatunsisf+0x100>
200874dc:	10bffe04 	addi	r2,r2,-8
200874e0:	8088983a 	sll	r4,r16,r2
200874e4:	00802034 	movhi	r2,128
200874e8:	10bfffc4 	addi	r2,r2,-1
200874ec:	2088703a 	and	r4,r4,r2
200874f0:	00001b06 	br	20087560 <__floatunsisf+0xb4>
200874f4:	01002644 	movi	r4,153
200874f8:	20c02316 	blt	r4,r3,20087588 <__floatunsisf+0xdc>
200874fc:	01000144 	movi	r4,5
20087500:	2080020e 	bge	r4,r2,2008750c <__floatunsisf+0x60>
20087504:	113ffec4 	addi	r4,r2,-5
20087508:	8120983a 	sll	r16,r16,r4
2008750c:	017f0034 	movhi	r5,64512
20087510:	297fffc4 	addi	r5,r5,-1
20087514:	810001cc 	andi	r4,r16,7
20087518:	814a703a 	and	r5,r16,r5
2008751c:	20000426 	beq	r4,zero,20087530 <__floatunsisf+0x84>
20087520:	840003cc 	andi	r16,r16,15
20087524:	01000104 	movi	r4,4
20087528:	81000126 	beq	r16,r4,20087530 <__floatunsisf+0x84>
2008752c:	290b883a 	add	r5,r5,r4
20087530:	2901002c 	andhi	r4,r5,1024
20087534:	20000526 	beq	r4,zero,2008754c <__floatunsisf+0xa0>
20087538:	00c027c4 	movi	r3,159
2008753c:	1887c83a 	sub	r3,r3,r2
20087540:	00bf0034 	movhi	r2,64512
20087544:	10bfffc4 	addi	r2,r2,-1
20087548:	288a703a 	and	r5,r5,r2
2008754c:	280891ba 	slli	r4,r5,6
20087550:	2008d27a 	srli	r4,r4,9
20087554:	00000206 	br	20087560 <__floatunsisf+0xb4>
20087558:	0007883a 	mov	r3,zero
2008755c:	0009883a 	mov	r4,zero
20087560:	18c03fcc 	andi	r3,r3,255
20087564:	180695fa 	slli	r3,r3,23
20087568:	00802034 	movhi	r2,128
2008756c:	10bfffc4 	addi	r2,r2,-1
20087570:	2084703a 	and	r2,r4,r2
20087574:	10c4b03a 	or	r2,r2,r3
20087578:	dfc00117 	ldw	ra,4(sp)
2008757c:	dc000017 	ldw	r16,0(sp)
20087580:	dec00204 	addi	sp,sp,8
20087584:	f800283a 	ret
20087588:	01400144 	movi	r5,5
2008758c:	110006c4 	addi	r4,r2,27
20087590:	8108983a 	sll	r4,r16,r4
20087594:	288dc83a 	sub	r6,r5,r2
20087598:	81a0d83a 	srl	r16,r16,r6
2008759c:	2008c03a 	cmpne	r4,r4,zero
200875a0:	2420b03a 	or	r16,r4,r16
200875a4:	28bfd90e 	bge	r5,r2,2008750c <__flash_rwdata_start+0xfffec6a0>
200875a8:	003fd606 	br	20087504 <__flash_rwdata_start+0xfffec698>
200875ac:	01402034 	movhi	r5,128
200875b0:	297fffc4 	addi	r5,r5,-1
200875b4:	8148703a 	and	r4,r16,r5
200875b8:	003fe906 	br	20087560 <__flash_rwdata_start+0xfffec6f4>

200875bc <__adddf3>:
200875bc:	02000434 	movhi	r8,16
200875c0:	423fffc4 	addi	r8,r8,-1
200875c4:	defffb04 	addi	sp,sp,-20
200875c8:	2a12703a 	and	r9,r5,r8
200875cc:	2806d7fa 	srli	r3,r5,31
200875d0:	3a10703a 	and	r8,r7,r8
200875d4:	3804d53a 	srli	r2,r7,20
200875d8:	3014d77a 	srli	r10,r6,29
200875dc:	dc000015 	stw	r16,0(sp)
200875e0:	481290fa 	slli	r9,r9,3
200875e4:	2820d53a 	srli	r16,r5,20
200875e8:	401090fa 	slli	r8,r8,3
200875ec:	200ad77a 	srli	r5,r4,29
200875f0:	380ed7fa 	srli	r7,r7,31
200875f4:	dc800215 	stw	r18,8(sp)
200875f8:	dc400115 	stw	r17,4(sp)
200875fc:	dfc00415 	stw	ra,16(sp)
20087600:	dcc00315 	stw	r19,12(sp)
20087604:	1c803fcc 	andi	r18,r3,255
20087608:	8401ffcc 	andi	r16,r16,2047
2008760c:	494ab03a 	or	r5,r9,r5
20087610:	202290fa 	slli	r17,r4,3
20087614:	1081ffcc 	andi	r2,r2,2047
20087618:	4290b03a 	or	r8,r8,r10
2008761c:	300c90fa 	slli	r6,r6,3
20087620:	91c07026 	beq	r18,r7,200877e4 <__adddf3+0x228>
20087624:	8087c83a 	sub	r3,r16,r2
20087628:	00c0b30e 	bge	zero,r3,200878f8 <__adddf3+0x33c>
2008762c:	10002a1e 	bne	r2,zero,200876d8 <__adddf3+0x11c>
20087630:	4184b03a 	or	r2,r8,r6
20087634:	1000991e 	bne	r2,zero,2008789c <__adddf3+0x2e0>
20087638:	888001cc 	andi	r2,r17,7
2008763c:	10005b26 	beq	r2,zero,200877ac <__adddf3+0x1f0>
20087640:	88c003cc 	andi	r3,r17,15
20087644:	00800104 	movi	r2,4
20087648:	18805826 	beq	r3,r2,200877ac <__adddf3+0x1f0>
2008764c:	89800104 	addi	r6,r17,4
20087650:	3463803a 	cmpltu	r17,r6,r17
20087654:	2c4b883a 	add	r5,r5,r17
20087658:	2880202c 	andhi	r2,r5,128
2008765c:	9007883a 	mov	r3,r18
20087660:	3023883a 	mov	r17,r6
20087664:	10005426 	beq	r2,zero,200877b8 <__adddf3+0x1fc>
20087668:	84000044 	addi	r16,r16,1
2008766c:	0081ffc4 	movi	r2,2047
20087670:	8080c126 	beq	r16,r2,20087978 <__adddf3+0x3bc>
20087674:	013fe034 	movhi	r4,65408
20087678:	213fffc4 	addi	r4,r4,-1
2008767c:	290a703a 	and	r5,r5,r4
20087680:	2804977a 	slli	r2,r5,29
20087684:	280a927a 	slli	r5,r5,9
20087688:	8822d0fa 	srli	r17,r17,3
2008768c:	8401ffcc 	andi	r16,r16,2047
20087690:	2808d33a 	srli	r4,r5,12
20087694:	1444b03a 	or	r2,r2,r17
20087698:	8401ffcc 	andi	r16,r16,2047
2008769c:	800a953a 	slli	r5,r16,20
200876a0:	18c03fcc 	andi	r3,r3,255
200876a4:	04000434 	movhi	r16,16
200876a8:	180697fa 	slli	r3,r3,31
200876ac:	843fffc4 	addi	r16,r16,-1
200876b0:	2420703a 	and	r16,r4,r16
200876b4:	8160b03a 	or	r16,r16,r5
200876b8:	80c6b03a 	or	r3,r16,r3
200876bc:	dfc00417 	ldw	ra,16(sp)
200876c0:	dcc00317 	ldw	r19,12(sp)
200876c4:	dc800217 	ldw	r18,8(sp)
200876c8:	dc400117 	ldw	r17,4(sp)
200876cc:	dc000017 	ldw	r16,0(sp)
200876d0:	dec00504 	addi	sp,sp,20
200876d4:	f800283a 	ret
200876d8:	0081ffc4 	movi	r2,2047
200876dc:	80bfd626 	beq	r16,r2,20087638 <__flash_rwdata_start+0xfffec7cc>
200876e0:	42002034 	orhi	r8,r8,128
200876e4:	00800e04 	movi	r2,56
200876e8:	10c0a616 	blt	r2,r3,20087984 <__adddf3+0x3c8>
200876ec:	008007c4 	movi	r2,31
200876f0:	10c0c916 	blt	r2,r3,20087a18 <__adddf3+0x45c>
200876f4:	00800804 	movi	r2,32
200876f8:	10c5c83a 	sub	r2,r2,r3
200876fc:	408e983a 	sll	r7,r8,r2
20087700:	30c8d83a 	srl	r4,r6,r3
20087704:	3084983a 	sll	r2,r6,r2
20087708:	40c6d83a 	srl	r3,r8,r3
2008770c:	390cb03a 	or	r6,r7,r4
20087710:	1004c03a 	cmpne	r2,r2,zero
20087714:	308cb03a 	or	r6,r6,r2
20087718:	898dc83a 	sub	r6,r17,r6
2008771c:	89a3803a 	cmpltu	r17,r17,r6
20087720:	28cbc83a 	sub	r5,r5,r3
20087724:	2c4bc83a 	sub	r5,r5,r17
20087728:	3023883a 	mov	r17,r6
2008772c:	2880202c 	andhi	r2,r5,128
20087730:	10006d26 	beq	r2,zero,200878e8 <__adddf3+0x32c>
20087734:	04c02034 	movhi	r19,128
20087738:	9cffffc4 	addi	r19,r19,-1
2008773c:	2ce6703a 	and	r19,r5,r19
20087740:	98007e26 	beq	r19,zero,2008793c <__adddf3+0x380>
20087744:	9809883a 	mov	r4,r19
20087748:	0089bbc0 	call	20089bbc <__clzsi2>
2008774c:	10fffe04 	addi	r3,r2,-8
20087750:	010007c4 	movi	r4,31
20087754:	20c07f16 	blt	r4,r3,20087954 <__adddf3+0x398>
20087758:	01400a04 	movi	r5,40
2008775c:	2885c83a 	sub	r2,r5,r2
20087760:	888ad83a 	srl	r5,r17,r2
20087764:	98e6983a 	sll	r19,r19,r3
20087768:	88e2983a 	sll	r17,r17,r3
2008776c:	2ce6b03a 	or	r19,r5,r19
20087770:	1c007c16 	blt	r3,r16,20087964 <__adddf3+0x3a8>
20087774:	1c21c83a 	sub	r16,r3,r16
20087778:	81400044 	addi	r5,r16,1
2008777c:	00c007c4 	movi	r3,31
20087780:	19409816 	blt	r3,r5,200879e4 <__adddf3+0x428>
20087784:	1c21c83a 	sub	r16,r3,r16
20087788:	8c08983a 	sll	r4,r17,r16
2008778c:	8946d83a 	srl	r3,r17,r5
20087790:	9c20983a 	sll	r16,r19,r16
20087794:	2008c03a 	cmpne	r4,r4,zero
20087798:	994ad83a 	srl	r5,r19,r5
2008779c:	1c06b03a 	or	r3,r3,r16
200877a0:	1922b03a 	or	r17,r3,r4
200877a4:	0021883a 	mov	r16,zero
200877a8:	003fa306 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
200877ac:	2880202c 	andhi	r2,r5,128
200877b0:	9007883a 	mov	r3,r18
200877b4:	103fac1e 	bne	r2,zero,20087668 <__flash_rwdata_start+0xfffec7fc>
200877b8:	2804977a 	slli	r2,r5,29
200877bc:	8822d0fa 	srli	r17,r17,3
200877c0:	0101ffc4 	movi	r4,2047
200877c4:	280ad0fa 	srli	r5,r5,3
200877c8:	1444b03a 	or	r2,r2,r17
200877cc:	81002c26 	beq	r16,r4,20087880 <__adddf3+0x2c4>
200877d0:	8120703a 	and	r16,r16,r4
200877d4:	01000434 	movhi	r4,16
200877d8:	213fffc4 	addi	r4,r4,-1
200877dc:	2908703a 	and	r4,r5,r4
200877e0:	003fad06 	br	20087698 <__flash_rwdata_start+0xfffec82c>
200877e4:	8089c83a 	sub	r4,r16,r2
200877e8:	01006a0e 	bge	zero,r4,20087994 <__adddf3+0x3d8>
200877ec:	10003326 	beq	r2,zero,200878bc <__adddf3+0x300>
200877f0:	0081ffc4 	movi	r2,2047
200877f4:	80bf9026 	beq	r16,r2,20087638 <__flash_rwdata_start+0xfffec7cc>
200877f8:	42002034 	orhi	r8,r8,128
200877fc:	00800e04 	movi	r2,56
20087800:	1100b116 	blt	r2,r4,20087ac8 <__adddf3+0x50c>
20087804:	008007c4 	movi	r2,31
20087808:	1100e216 	blt	r2,r4,20087b94 <__adddf3+0x5d8>
2008780c:	00800804 	movi	r2,32
20087810:	1105c83a 	sub	r2,r2,r4
20087814:	4092983a 	sll	r9,r8,r2
20087818:	310ed83a 	srl	r7,r6,r4
2008781c:	3084983a 	sll	r2,r6,r2
20087820:	4110d83a 	srl	r8,r8,r4
20087824:	49ccb03a 	or	r6,r9,r7
20087828:	1004c03a 	cmpne	r2,r2,zero
2008782c:	308cb03a 	or	r6,r6,r2
20087830:	344d883a 	add	r6,r6,r17
20087834:	3463803a 	cmpltu	r17,r6,r17
20087838:	414b883a 	add	r5,r8,r5
2008783c:	2c4b883a 	add	r5,r5,r17
20087840:	3023883a 	mov	r17,r6
20087844:	2880202c 	andhi	r2,r5,128
20087848:	10002726 	beq	r2,zero,200878e8 <__adddf3+0x32c>
2008784c:	84000044 	addi	r16,r16,1
20087850:	0081ffc4 	movi	r2,2047
20087854:	8080ae26 	beq	r16,r2,20087b10 <__adddf3+0x554>
20087858:	00bfe034 	movhi	r2,65408
2008785c:	10bfffc4 	addi	r2,r2,-1
20087860:	288a703a 	and	r5,r5,r2
20087864:	880cd07a 	srli	r6,r17,1
20087868:	280897fa 	slli	r4,r5,31
2008786c:	88c0004c 	andi	r3,r17,1
20087870:	30e2b03a 	or	r17,r6,r3
20087874:	280ad07a 	srli	r5,r5,1
20087878:	8922b03a 	or	r17,r17,r4
2008787c:	003f6e06 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087880:	1148b03a 	or	r4,r2,r5
20087884:	20003c26 	beq	r4,zero,20087978 <__adddf3+0x3bc>
20087888:	29000234 	orhi	r4,r5,8
2008788c:	01400434 	movhi	r5,16
20087890:	297fffc4 	addi	r5,r5,-1
20087894:	2148703a 	and	r4,r4,r5
20087898:	003f7f06 	br	20087698 <__flash_rwdata_start+0xfffec82c>
2008789c:	18ffffc4 	addi	r3,r3,-1
200878a0:	18004d1e 	bne	r3,zero,200879d8 <__adddf3+0x41c>
200878a4:	898dc83a 	sub	r6,r17,r6
200878a8:	89a3803a 	cmpltu	r17,r17,r6
200878ac:	2a0bc83a 	sub	r5,r5,r8
200878b0:	2c4bc83a 	sub	r5,r5,r17
200878b4:	3023883a 	mov	r17,r6
200878b8:	003f9c06 	br	2008772c <__flash_rwdata_start+0xfffec8c0>
200878bc:	4184b03a 	or	r2,r8,r6
200878c0:	103f5d26 	beq	r2,zero,20087638 <__flash_rwdata_start+0xfffec7cc>
200878c4:	213fffc4 	addi	r4,r4,-1
200878c8:	203fd926 	beq	r4,zero,20087830 <__flash_rwdata_start+0xfffec9c4>
200878cc:	0081ffc4 	movi	r2,2047
200878d0:	80bfca1e 	bne	r16,r2,200877fc <__flash_rwdata_start+0xfffec990>
200878d4:	003f5806 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
200878d8:	10c8b03a 	or	r4,r2,r3
200878dc:	20008b26 	beq	r4,zero,20087b0c <__adddf3+0x550>
200878e0:	100b883a 	mov	r5,r2
200878e4:	1823883a 	mov	r17,r3
200878e8:	888001cc 	andi	r2,r17,7
200878ec:	103f541e 	bne	r2,zero,20087640 <__flash_rwdata_start+0xfffec7d4>
200878f0:	9007883a 	mov	r3,r18
200878f4:	003fb006 	br	200877b8 <__flash_rwdata_start+0xfffec94c>
200878f8:	1800531e 	bne	r3,zero,20087a48 <__adddf3+0x48c>
200878fc:	80800044 	addi	r2,r16,1
20087900:	1081ffcc 	andi	r2,r2,2047
20087904:	00c00044 	movi	r3,1
20087908:	1880990e 	bge	r3,r2,20087b70 <__adddf3+0x5b4>
2008790c:	8985c83a 	sub	r2,r17,r6
20087910:	8887803a 	cmpltu	r3,r17,r2
20087914:	2a27c83a 	sub	r19,r5,r8
20087918:	98e7c83a 	sub	r19,r19,r3
2008791c:	98c0202c 	andhi	r3,r19,128
20087920:	18006226 	beq	r3,zero,20087aac <__adddf3+0x4f0>
20087924:	3463c83a 	sub	r17,r6,r17
20087928:	4151c83a 	sub	r8,r8,r5
2008792c:	344d803a 	cmpltu	r6,r6,r17
20087930:	41a7c83a 	sub	r19,r8,r6
20087934:	3825883a 	mov	r18,r7
20087938:	983f821e 	bne	r19,zero,20087744 <__flash_rwdata_start+0xfffec8d8>
2008793c:	8809883a 	mov	r4,r17
20087940:	0089bbc0 	call	20089bbc <__clzsi2>
20087944:	10800804 	addi	r2,r2,32
20087948:	10fffe04 	addi	r3,r2,-8
2008794c:	010007c4 	movi	r4,31
20087950:	20ff810e 	bge	r4,r3,20087758 <__flash_rwdata_start+0xfffec8ec>
20087954:	14fff604 	addi	r19,r2,-40
20087958:	8ce6983a 	sll	r19,r17,r19
2008795c:	0023883a 	mov	r17,zero
20087960:	1c3f840e 	bge	r3,r16,20087774 <__flash_rwdata_start+0xfffec908>
20087964:	017fe034 	movhi	r5,65408
20087968:	297fffc4 	addi	r5,r5,-1
2008796c:	80e1c83a 	sub	r16,r16,r3
20087970:	994a703a 	and	r5,r19,r5
20087974:	003f3006 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087978:	0009883a 	mov	r4,zero
2008797c:	0005883a 	mov	r2,zero
20087980:	003f4506 	br	20087698 <__flash_rwdata_start+0xfffec82c>
20087984:	418cb03a 	or	r6,r8,r6
20087988:	300cc03a 	cmpne	r6,r6,zero
2008798c:	0007883a 	mov	r3,zero
20087990:	003f6106 	br	20087718 <__flash_rwdata_start+0xfffec8ac>
20087994:	2000921e 	bne	r4,zero,20087be0 <__adddf3+0x624>
20087998:	80800044 	addi	r2,r16,1
2008799c:	11c1ffcc 	andi	r7,r2,2047
200879a0:	01000044 	movi	r4,1
200879a4:	21c0610e 	bge	r4,r7,20087b2c <__adddf3+0x570>
200879a8:	0101ffc4 	movi	r4,2047
200879ac:	1100a326 	beq	r2,r4,20087c3c <__adddf3+0x680>
200879b0:	344d883a 	add	r6,r6,r17
200879b4:	3463803a 	cmpltu	r17,r6,r17
200879b8:	414b883a 	add	r5,r8,r5
200879bc:	2c4b883a 	add	r5,r5,r17
200879c0:	282297fa 	slli	r17,r5,31
200879c4:	300cd07a 	srli	r6,r6,1
200879c8:	280ad07a 	srli	r5,r5,1
200879cc:	1021883a 	mov	r16,r2
200879d0:	89a2b03a 	or	r17,r17,r6
200879d4:	003f1806 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
200879d8:	0081ffc4 	movi	r2,2047
200879dc:	80bf411e 	bne	r16,r2,200876e4 <__flash_rwdata_start+0xfffec878>
200879e0:	003f1506 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
200879e4:	80bff844 	addi	r2,r16,-31
200879e8:	00c00804 	movi	r3,32
200879ec:	9884d83a 	srl	r2,r19,r2
200879f0:	28c04a26 	beq	r5,r3,20087b1c <__adddf3+0x560>
200879f4:	00c00fc4 	movi	r3,63
200879f8:	1c21c83a 	sub	r16,r3,r16
200879fc:	9c26983a 	sll	r19,r19,r16
20087a00:	9c62b03a 	or	r17,r19,r17
20087a04:	8822c03a 	cmpne	r17,r17,zero
20087a08:	88a2b03a 	or	r17,r17,r2
20087a0c:	000b883a 	mov	r5,zero
20087a10:	0021883a 	mov	r16,zero
20087a14:	003fb406 	br	200878e8 <__flash_rwdata_start+0xfffeca7c>
20087a18:	18bff804 	addi	r2,r3,-32
20087a1c:	01000804 	movi	r4,32
20087a20:	4084d83a 	srl	r2,r8,r2
20087a24:	19003f26 	beq	r3,r4,20087b24 <__adddf3+0x568>
20087a28:	01001004 	movi	r4,64
20087a2c:	20c7c83a 	sub	r3,r4,r3
20087a30:	40d0983a 	sll	r8,r8,r3
20087a34:	418cb03a 	or	r6,r8,r6
20087a38:	300cc03a 	cmpne	r6,r6,zero
20087a3c:	308cb03a 	or	r6,r6,r2
20087a40:	0007883a 	mov	r3,zero
20087a44:	003f3406 	br	20087718 <__flash_rwdata_start+0xfffec8ac>
20087a48:	80002326 	beq	r16,zero,20087ad8 <__adddf3+0x51c>
20087a4c:	0101ffc4 	movi	r4,2047
20087a50:	11005e26 	beq	r2,r4,20087bcc <__adddf3+0x610>
20087a54:	00c7c83a 	sub	r3,zero,r3
20087a58:	29402034 	orhi	r5,r5,128
20087a5c:	01000e04 	movi	r4,56
20087a60:	20c07216 	blt	r4,r3,20087c2c <__adddf3+0x670>
20087a64:	010007c4 	movi	r4,31
20087a68:	20c0ce16 	blt	r4,r3,20087da4 <__adddf3+0x7e8>
20087a6c:	01000804 	movi	r4,32
20087a70:	20c9c83a 	sub	r4,r4,r3
20087a74:	2914983a 	sll	r10,r5,r4
20087a78:	88d2d83a 	srl	r9,r17,r3
20087a7c:	8908983a 	sll	r4,r17,r4
20087a80:	28c6d83a 	srl	r3,r5,r3
20087a84:	5262b03a 	or	r17,r10,r9
20087a88:	2008c03a 	cmpne	r4,r4,zero
20087a8c:	8922b03a 	or	r17,r17,r4
20087a90:	3463c83a 	sub	r17,r6,r17
20087a94:	40c7c83a 	sub	r3,r8,r3
20087a98:	344d803a 	cmpltu	r6,r6,r17
20087a9c:	198bc83a 	sub	r5,r3,r6
20087aa0:	1021883a 	mov	r16,r2
20087aa4:	3825883a 	mov	r18,r7
20087aa8:	003f2006 	br	2008772c <__flash_rwdata_start+0xfffec8c0>
20087aac:	9886b03a 	or	r3,r19,r2
20087ab0:	1800141e 	bne	r3,zero,20087b04 <__adddf3+0x548>
20087ab4:	0007883a 	mov	r3,zero
20087ab8:	000b883a 	mov	r5,zero
20087abc:	0023883a 	mov	r17,zero
20087ac0:	0021883a 	mov	r16,zero
20087ac4:	003f3c06 	br	200877b8 <__flash_rwdata_start+0xfffec94c>
20087ac8:	418cb03a 	or	r6,r8,r6
20087acc:	300cc03a 	cmpne	r6,r6,zero
20087ad0:	0011883a 	mov	r8,zero
20087ad4:	003f5606 	br	20087830 <__flash_rwdata_start+0xfffec9c4>
20087ad8:	2c48b03a 	or	r4,r5,r17
20087adc:	20003b26 	beq	r4,zero,20087bcc <__adddf3+0x610>
20087ae0:	00c6303a 	nor	r3,zero,r3
20087ae4:	1800371e 	bne	r3,zero,20087bc4 <__adddf3+0x608>
20087ae8:	3463c83a 	sub	r17,r6,r17
20087aec:	414bc83a 	sub	r5,r8,r5
20087af0:	344d803a 	cmpltu	r6,r6,r17
20087af4:	298bc83a 	sub	r5,r5,r6
20087af8:	1021883a 	mov	r16,r2
20087afc:	3825883a 	mov	r18,r7
20087b00:	003f0a06 	br	2008772c <__flash_rwdata_start+0xfffec8c0>
20087b04:	1023883a 	mov	r17,r2
20087b08:	003f0d06 	br	20087740 <__flash_rwdata_start+0xfffec8d4>
20087b0c:	0007883a 	mov	r3,zero
20087b10:	000b883a 	mov	r5,zero
20087b14:	0023883a 	mov	r17,zero
20087b18:	003f2706 	br	200877b8 <__flash_rwdata_start+0xfffec94c>
20087b1c:	0027883a 	mov	r19,zero
20087b20:	003fb706 	br	20087a00 <__flash_rwdata_start+0xfffecb94>
20087b24:	0011883a 	mov	r8,zero
20087b28:	003fc206 	br	20087a34 <__flash_rwdata_start+0xfffecbc8>
20087b2c:	2c44b03a 	or	r2,r5,r17
20087b30:	8000871e 	bne	r16,zero,20087d50 <__adddf3+0x794>
20087b34:	1000b126 	beq	r2,zero,20087dfc <__adddf3+0x840>
20087b38:	4184b03a 	or	r2,r8,r6
20087b3c:	103ebe26 	beq	r2,zero,20087638 <__flash_rwdata_start+0xfffec7cc>
20087b40:	3445883a 	add	r2,r6,r17
20087b44:	1463803a 	cmpltu	r17,r2,r17
20087b48:	414b883a 	add	r5,r8,r5
20087b4c:	2c4b883a 	add	r5,r5,r17
20087b50:	28c0202c 	andhi	r3,r5,128
20087b54:	1023883a 	mov	r17,r2
20087b58:	183f6326 	beq	r3,zero,200878e8 <__flash_rwdata_start+0xfffeca7c>
20087b5c:	00bfe034 	movhi	r2,65408
20087b60:	10bfffc4 	addi	r2,r2,-1
20087b64:	2021883a 	mov	r16,r4
20087b68:	288a703a 	and	r5,r5,r2
20087b6c:	003eb206 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087b70:	2c44b03a 	or	r2,r5,r17
20087b74:	8000251e 	bne	r16,zero,20087c0c <__adddf3+0x650>
20087b78:	10004b1e 	bne	r2,zero,20087ca8 <__adddf3+0x6ec>
20087b7c:	4184b03a 	or	r2,r8,r6
20087b80:	103fe226 	beq	r2,zero,20087b0c <__flash_rwdata_start+0xfffecca0>
20087b84:	400b883a 	mov	r5,r8
20087b88:	3023883a 	mov	r17,r6
20087b8c:	3825883a 	mov	r18,r7
20087b90:	003ea906 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087b94:	20bff804 	addi	r2,r4,-32
20087b98:	01c00804 	movi	r7,32
20087b9c:	4084d83a 	srl	r2,r8,r2
20087ba0:	21c07e26 	beq	r4,r7,20087d9c <__adddf3+0x7e0>
20087ba4:	01c01004 	movi	r7,64
20087ba8:	3909c83a 	sub	r4,r7,r4
20087bac:	4110983a 	sll	r8,r8,r4
20087bb0:	418cb03a 	or	r6,r8,r6
20087bb4:	300cc03a 	cmpne	r6,r6,zero
20087bb8:	308cb03a 	or	r6,r6,r2
20087bbc:	0011883a 	mov	r8,zero
20087bc0:	003f1b06 	br	20087830 <__flash_rwdata_start+0xfffec9c4>
20087bc4:	0101ffc4 	movi	r4,2047
20087bc8:	113fa41e 	bne	r2,r4,20087a5c <__flash_rwdata_start+0xfffecbf0>
20087bcc:	400b883a 	mov	r5,r8
20087bd0:	3023883a 	mov	r17,r6
20087bd4:	1021883a 	mov	r16,r2
20087bd8:	3825883a 	mov	r18,r7
20087bdc:	003e9606 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087be0:	80001a1e 	bne	r16,zero,20087c4c <__adddf3+0x690>
20087be4:	2c4eb03a 	or	r7,r5,r17
20087be8:	38005526 	beq	r7,zero,20087d40 <__adddf3+0x784>
20087bec:	0108303a 	nor	r4,zero,r4
20087bf0:	2000511e 	bne	r4,zero,20087d38 <__adddf3+0x77c>
20087bf4:	89a3883a 	add	r17,r17,r6
20087bf8:	414b883a 	add	r5,r8,r5
20087bfc:	898d803a 	cmpltu	r6,r17,r6
20087c00:	298b883a 	add	r5,r5,r6
20087c04:	1021883a 	mov	r16,r2
20087c08:	003f0e06 	br	20087844 <__flash_rwdata_start+0xfffec9d8>
20087c0c:	1000341e 	bne	r2,zero,20087ce0 <__adddf3+0x724>
20087c10:	4184b03a 	or	r2,r8,r6
20087c14:	10006f26 	beq	r2,zero,20087dd4 <__adddf3+0x818>
20087c18:	400b883a 	mov	r5,r8
20087c1c:	3023883a 	mov	r17,r6
20087c20:	3825883a 	mov	r18,r7
20087c24:	0401ffc4 	movi	r16,2047
20087c28:	003e8306 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087c2c:	2c62b03a 	or	r17,r5,r17
20087c30:	8822c03a 	cmpne	r17,r17,zero
20087c34:	0007883a 	mov	r3,zero
20087c38:	003f9506 	br	20087a90 <__flash_rwdata_start+0xfffecc24>
20087c3c:	1021883a 	mov	r16,r2
20087c40:	000b883a 	mov	r5,zero
20087c44:	0023883a 	mov	r17,zero
20087c48:	003edb06 	br	200877b8 <__flash_rwdata_start+0xfffec94c>
20087c4c:	01c1ffc4 	movi	r7,2047
20087c50:	11c03b26 	beq	r2,r7,20087d40 <__adddf3+0x784>
20087c54:	0109c83a 	sub	r4,zero,r4
20087c58:	29402034 	orhi	r5,r5,128
20087c5c:	01c00e04 	movi	r7,56
20087c60:	39006216 	blt	r7,r4,20087dec <__adddf3+0x830>
20087c64:	01c007c4 	movi	r7,31
20087c68:	39006b16 	blt	r7,r4,20087e18 <__adddf3+0x85c>
20087c6c:	01c00804 	movi	r7,32
20087c70:	390fc83a 	sub	r7,r7,r4
20087c74:	29d4983a 	sll	r10,r5,r7
20087c78:	8912d83a 	srl	r9,r17,r4
20087c7c:	89ce983a 	sll	r7,r17,r7
20087c80:	2908d83a 	srl	r4,r5,r4
20087c84:	5262b03a 	or	r17,r10,r9
20087c88:	380ac03a 	cmpne	r5,r7,zero
20087c8c:	8962b03a 	or	r17,r17,r5
20087c90:	89a3883a 	add	r17,r17,r6
20087c94:	2211883a 	add	r8,r4,r8
20087c98:	898d803a 	cmpltu	r6,r17,r6
20087c9c:	418b883a 	add	r5,r8,r6
20087ca0:	1021883a 	mov	r16,r2
20087ca4:	003ee706 	br	20087844 <__flash_rwdata_start+0xfffec9d8>
20087ca8:	4184b03a 	or	r2,r8,r6
20087cac:	103e6226 	beq	r2,zero,20087638 <__flash_rwdata_start+0xfffec7cc>
20087cb0:	8987c83a 	sub	r3,r17,r6
20087cb4:	88c9803a 	cmpltu	r4,r17,r3
20087cb8:	2a05c83a 	sub	r2,r5,r8
20087cbc:	1105c83a 	sub	r2,r2,r4
20087cc0:	1100202c 	andhi	r4,r2,128
20087cc4:	203f0426 	beq	r4,zero,200878d8 <__flash_rwdata_start+0xfffeca6c>
20087cc8:	3463c83a 	sub	r17,r6,r17
20087ccc:	414bc83a 	sub	r5,r8,r5
20087cd0:	344d803a 	cmpltu	r6,r6,r17
20087cd4:	298bc83a 	sub	r5,r5,r6
20087cd8:	3825883a 	mov	r18,r7
20087cdc:	003e5606 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087ce0:	4184b03a 	or	r2,r8,r6
20087ce4:	10002b26 	beq	r2,zero,20087d94 <__adddf3+0x7d8>
20087ce8:	2804d0fa 	srli	r2,r5,3
20087cec:	8822d0fa 	srli	r17,r17,3
20087cf0:	280a977a 	slli	r5,r5,29
20087cf4:	10c0022c 	andhi	r3,r2,8
20087cf8:	2c62b03a 	or	r17,r5,r17
20087cfc:	18000826 	beq	r3,zero,20087d20 <__adddf3+0x764>
20087d00:	4008d0fa 	srli	r4,r8,3
20087d04:	20c0022c 	andhi	r3,r4,8
20087d08:	1800051e 	bne	r3,zero,20087d20 <__adddf3+0x764>
20087d0c:	300cd0fa 	srli	r6,r6,3
20087d10:	4010977a 	slli	r8,r8,29
20087d14:	2005883a 	mov	r2,r4
20087d18:	3825883a 	mov	r18,r7
20087d1c:	41a2b03a 	or	r17,r8,r6
20087d20:	880ad77a 	srli	r5,r17,29
20087d24:	100490fa 	slli	r2,r2,3
20087d28:	882290fa 	slli	r17,r17,3
20087d2c:	0401ffc4 	movi	r16,2047
20087d30:	288ab03a 	or	r5,r5,r2
20087d34:	003e4006 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087d38:	01c1ffc4 	movi	r7,2047
20087d3c:	11ffc71e 	bne	r2,r7,20087c5c <__flash_rwdata_start+0xfffecdf0>
20087d40:	400b883a 	mov	r5,r8
20087d44:	3023883a 	mov	r17,r6
20087d48:	1021883a 	mov	r16,r2
20087d4c:	003e3a06 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087d50:	10002d26 	beq	r2,zero,20087e08 <__adddf3+0x84c>
20087d54:	4184b03a 	or	r2,r8,r6
20087d58:	10000e26 	beq	r2,zero,20087d94 <__adddf3+0x7d8>
20087d5c:	2804d0fa 	srli	r2,r5,3
20087d60:	8822d0fa 	srli	r17,r17,3
20087d64:	280a977a 	slli	r5,r5,29
20087d68:	10c0022c 	andhi	r3,r2,8
20087d6c:	2c62b03a 	or	r17,r5,r17
20087d70:	183feb26 	beq	r3,zero,20087d20 <__flash_rwdata_start+0xfffeceb4>
20087d74:	4008d0fa 	srli	r4,r8,3
20087d78:	20c0022c 	andhi	r3,r4,8
20087d7c:	183fe81e 	bne	r3,zero,20087d20 <__flash_rwdata_start+0xfffeceb4>
20087d80:	300cd0fa 	srli	r6,r6,3
20087d84:	4010977a 	slli	r8,r8,29
20087d88:	2005883a 	mov	r2,r4
20087d8c:	41a2b03a 	or	r17,r8,r6
20087d90:	003fe306 	br	20087d20 <__flash_rwdata_start+0xfffeceb4>
20087d94:	0401ffc4 	movi	r16,2047
20087d98:	003e2706 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087d9c:	0011883a 	mov	r8,zero
20087da0:	003f8306 	br	20087bb0 <__flash_rwdata_start+0xfffecd44>
20087da4:	193ff804 	addi	r4,r3,-32
20087da8:	02400804 	movi	r9,32
20087dac:	2908d83a 	srl	r4,r5,r4
20087db0:	1a402526 	beq	r3,r9,20087e48 <__adddf3+0x88c>
20087db4:	02401004 	movi	r9,64
20087db8:	48c7c83a 	sub	r3,r9,r3
20087dbc:	28ca983a 	sll	r5,r5,r3
20087dc0:	2c62b03a 	or	r17,r5,r17
20087dc4:	8822c03a 	cmpne	r17,r17,zero
20087dc8:	8922b03a 	or	r17,r17,r4
20087dcc:	0007883a 	mov	r3,zero
20087dd0:	003f2f06 	br	20087a90 <__flash_rwdata_start+0xfffecc24>
20087dd4:	01402034 	movhi	r5,128
20087dd8:	0007883a 	mov	r3,zero
20087ddc:	297fffc4 	addi	r5,r5,-1
20087de0:	047ffe04 	movi	r17,-8
20087de4:	0401ffc4 	movi	r16,2047
20087de8:	003e7306 	br	200877b8 <__flash_rwdata_start+0xfffec94c>
20087dec:	2c62b03a 	or	r17,r5,r17
20087df0:	8822c03a 	cmpne	r17,r17,zero
20087df4:	0009883a 	mov	r4,zero
20087df8:	003fa506 	br	20087c90 <__flash_rwdata_start+0xfffece24>
20087dfc:	400b883a 	mov	r5,r8
20087e00:	3023883a 	mov	r17,r6
20087e04:	003e0c06 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087e08:	400b883a 	mov	r5,r8
20087e0c:	3023883a 	mov	r17,r6
20087e10:	0401ffc4 	movi	r16,2047
20087e14:	003e0806 	br	20087638 <__flash_rwdata_start+0xfffec7cc>
20087e18:	21fff804 	addi	r7,r4,-32
20087e1c:	02400804 	movi	r9,32
20087e20:	29ced83a 	srl	r7,r5,r7
20087e24:	22400a26 	beq	r4,r9,20087e50 <__adddf3+0x894>
20087e28:	02401004 	movi	r9,64
20087e2c:	4909c83a 	sub	r4,r9,r4
20087e30:	290a983a 	sll	r5,r5,r4
20087e34:	2c62b03a 	or	r17,r5,r17
20087e38:	8822c03a 	cmpne	r17,r17,zero
20087e3c:	89e2b03a 	or	r17,r17,r7
20087e40:	0009883a 	mov	r4,zero
20087e44:	003f9206 	br	20087c90 <__flash_rwdata_start+0xfffece24>
20087e48:	000b883a 	mov	r5,zero
20087e4c:	003fdc06 	br	20087dc0 <__flash_rwdata_start+0xfffecf54>
20087e50:	000b883a 	mov	r5,zero
20087e54:	003ff706 	br	20087e34 <__flash_rwdata_start+0xfffecfc8>

20087e58 <__divdf3>:
20087e58:	defff204 	addi	sp,sp,-56
20087e5c:	dd000815 	stw	r20,32(sp)
20087e60:	2828d53a 	srli	r20,r5,20
20087e64:	dd800a15 	stw	r22,40(sp)
20087e68:	282cd7fa 	srli	r22,r5,31
20087e6c:	dc000415 	stw	r16,16(sp)
20087e70:	04000434 	movhi	r16,16
20087e74:	df000c15 	stw	fp,48(sp)
20087e78:	dcc00715 	stw	r19,28(sp)
20087e7c:	dc800615 	stw	r18,24(sp)
20087e80:	dc400515 	stw	r17,20(sp)
20087e84:	843fffc4 	addi	r16,r16,-1
20087e88:	dfc00d15 	stw	ra,52(sp)
20087e8c:	ddc00b15 	stw	r23,44(sp)
20087e90:	dd400915 	stw	r21,36(sp)
20087e94:	a501ffcc 	andi	r20,r20,2047
20087e98:	2025883a 	mov	r18,r4
20087e9c:	2027883a 	mov	r19,r4
20087ea0:	2c22703a 	and	r17,r5,r16
20087ea4:	b7003fcc 	andi	fp,r22,255
20087ea8:	a0005e26 	beq	r20,zero,20088024 <__divdf3+0x1cc>
20087eac:	0081ffc4 	movi	r2,2047
20087eb0:	a0803526 	beq	r20,r2,20087f88 <__divdf3+0x130>
20087eb4:	8c000434 	orhi	r16,r17,16
20087eb8:	2004d77a 	srli	r2,r4,29
20087ebc:	802090fa 	slli	r16,r16,3
20087ec0:	202690fa 	slli	r19,r4,3
20087ec4:	a53f0044 	addi	r20,r20,-1023
20087ec8:	80a2b03a 	or	r17,r16,r2
20087ecc:	0025883a 	mov	r18,zero
20087ed0:	0011883a 	mov	r8,zero
20087ed4:	380ad53a 	srli	r5,r7,20
20087ed8:	382ed7fa 	srli	r23,r7,31
20087edc:	04000434 	movhi	r16,16
20087ee0:	843fffc4 	addi	r16,r16,-1
20087ee4:	2941ffcc 	andi	r5,r5,2047
20087ee8:	302b883a 	mov	r21,r6
20087eec:	3c20703a 	and	r16,r7,r16
20087ef0:	ba403fcc 	andi	r9,r23,255
20087ef4:	28006726 	beq	r5,zero,20088094 <__divdf3+0x23c>
20087ef8:	0081ffc4 	movi	r2,2047
20087efc:	28805f26 	beq	r5,r2,2008807c <__divdf3+0x224>
20087f00:	84000434 	orhi	r16,r16,16
20087f04:	3004d77a 	srli	r2,r6,29
20087f08:	802090fa 	slli	r16,r16,3
20087f0c:	302a90fa 	slli	r21,r6,3
20087f10:	297f0044 	addi	r5,r5,-1023
20087f14:	80a0b03a 	or	r16,r16,r2
20087f18:	000f883a 	mov	r7,zero
20087f1c:	3c86b03a 	or	r3,r7,r18
20087f20:	180690ba 	slli	r3,r3,2
20087f24:	00880234 	movhi	r2,8200
20087f28:	109fd204 	addi	r2,r2,32584
20087f2c:	1887883a 	add	r3,r3,r2
20087f30:	18c00017 	ldw	r3,0(r3)
20087f34:	b5c8f03a 	xor	r4,r22,r23
20087f38:	200d883a 	mov	r6,r4
20087f3c:	24803fcc 	andi	r18,r4,255
20087f40:	a169c83a 	sub	r20,r20,r5
20087f44:	1800683a 	jmp	r3
20087f48:	20088190 	cmplti	zero,r4,8710
20087f4c:	20087fc0 	call	220087fc <__flash_rwdata_start+0x1f6d990>
20087f50:	20088154 	ori	zero,r4,8709
20087f54:	20087fa4 	muli	zero,r4,8702
20087f58:	20088154 	ori	zero,r4,8709
20087f5c:	20088128 	cmpgeui	zero,r4,8708
20087f60:	20088154 	ori	zero,r4,8709
20087f64:	20087fa4 	muli	zero,r4,8702
20087f68:	20087fc0 	call	220087fc <__flash_rwdata_start+0x1f6d990>
20087f6c:	20087fc0 	call	220087fc <__flash_rwdata_start+0x1f6d990>
20087f70:	20088128 	cmpgeui	zero,r4,8708
20087f74:	20087fa4 	muli	zero,r4,8702
20087f78:	20087fb4 	orhi	zero,r4,8702
20087f7c:	20087fb4 	orhi	zero,r4,8702
20087f80:	20087fb4 	orhi	zero,r4,8702
20087f84:	20088164 	muli	zero,r4,8709
20087f88:	8904b03a 	or	r2,r17,r4
20087f8c:	1000631e 	bne	r2,zero,2008811c <__divdf3+0x2c4>
20087f90:	04800204 	movi	r18,8
20087f94:	0023883a 	mov	r17,zero
20087f98:	0027883a 	mov	r19,zero
20087f9c:	02000084 	movi	r8,2
20087fa0:	003fcc06 	br	20087ed4 <__flash_rwdata_start+0xfffed068>
20087fa4:	8023883a 	mov	r17,r16
20087fa8:	a827883a 	mov	r19,r21
20087fac:	4839883a 	mov	fp,r9
20087fb0:	3811883a 	mov	r8,r7
20087fb4:	00800084 	movi	r2,2
20087fb8:	40812a1e 	bne	r8,r2,20088464 <__divdf3+0x60c>
20087fbc:	e025883a 	mov	r18,fp
20087fc0:	9180004c 	andi	r6,r18,1
20087fc4:	0101ffc4 	movi	r4,2047
20087fc8:	000b883a 	mov	r5,zero
20087fcc:	0027883a 	mov	r19,zero
20087fd0:	2008953a 	slli	r4,r4,20
20087fd4:	30c03fcc 	andi	r3,r6,255
20087fd8:	04000434 	movhi	r16,16
20087fdc:	180697fa 	slli	r3,r3,31
20087fe0:	843fffc4 	addi	r16,r16,-1
20087fe4:	2c20703a 	and	r16,r5,r16
20087fe8:	8120b03a 	or	r16,r16,r4
20087fec:	80c6b03a 	or	r3,r16,r3
20087ff0:	9805883a 	mov	r2,r19
20087ff4:	dfc00d17 	ldw	ra,52(sp)
20087ff8:	df000c17 	ldw	fp,48(sp)
20087ffc:	ddc00b17 	ldw	r23,44(sp)
20088000:	dd800a17 	ldw	r22,40(sp)
20088004:	dd400917 	ldw	r21,36(sp)
20088008:	dd000817 	ldw	r20,32(sp)
2008800c:	dcc00717 	ldw	r19,28(sp)
20088010:	dc800617 	ldw	r18,24(sp)
20088014:	dc400517 	ldw	r17,20(sp)
20088018:	dc000417 	ldw	r16,16(sp)
2008801c:	dec00e04 	addi	sp,sp,56
20088020:	f800283a 	ret
20088024:	8904b03a 	or	r2,r17,r4
20088028:	10003726 	beq	r2,zero,20088108 <__divdf3+0x2b0>
2008802c:	88011c26 	beq	r17,zero,200884a0 <__divdf3+0x648>
20088030:	8809883a 	mov	r4,r17
20088034:	d9800315 	stw	r6,12(sp)
20088038:	d9c00115 	stw	r7,4(sp)
2008803c:	0089bbc0 	call	20089bbc <__clzsi2>
20088040:	d9800317 	ldw	r6,12(sp)
20088044:	d9c00117 	ldw	r7,4(sp)
20088048:	1007883a 	mov	r3,r2
2008804c:	01000a04 	movi	r4,40
20088050:	1cfffe04 	addi	r19,r3,-8
20088054:	20c9c83a 	sub	r4,r4,r3
20088058:	8cca983a 	sll	r5,r17,r19
2008805c:	9108d83a 	srl	r4,r18,r4
20088060:	94e6983a 	sll	r19,r18,r19
20088064:	2162b03a 	or	r17,r4,r5
20088068:	053f0344 	movi	r20,-1011
2008806c:	a0e9c83a 	sub	r20,r20,r3
20088070:	0025883a 	mov	r18,zero
20088074:	0011883a 	mov	r8,zero
20088078:	003f9606 	br	20087ed4 <__flash_rwdata_start+0xfffed068>
2008807c:	8184b03a 	or	r2,r16,r6
20088080:	10001f1e 	bne	r2,zero,20088100 <__divdf3+0x2a8>
20088084:	0021883a 	mov	r16,zero
20088088:	002b883a 	mov	r21,zero
2008808c:	01c00084 	movi	r7,2
20088090:	003fa206 	br	20087f1c <__flash_rwdata_start+0xfffed0b0>
20088094:	8184b03a 	or	r2,r16,r6
20088098:	10001526 	beq	r2,zero,200880f0 <__divdf3+0x298>
2008809c:	80010c26 	beq	r16,zero,200884d0 <__divdf3+0x678>
200880a0:	8009883a 	mov	r4,r16
200880a4:	d9800315 	stw	r6,12(sp)
200880a8:	da000215 	stw	r8,8(sp)
200880ac:	da400015 	stw	r9,0(sp)
200880b0:	0089bbc0 	call	20089bbc <__clzsi2>
200880b4:	d9800317 	ldw	r6,12(sp)
200880b8:	da000217 	ldw	r8,8(sp)
200880bc:	da400017 	ldw	r9,0(sp)
200880c0:	1007883a 	mov	r3,r2
200880c4:	01000a04 	movi	r4,40
200880c8:	1d7ffe04 	addi	r21,r3,-8
200880cc:	20c9c83a 	sub	r4,r4,r3
200880d0:	8560983a 	sll	r16,r16,r21
200880d4:	3108d83a 	srl	r4,r6,r4
200880d8:	356a983a 	sll	r21,r6,r21
200880dc:	2420b03a 	or	r16,r4,r16
200880e0:	017f0344 	movi	r5,-1011
200880e4:	28cbc83a 	sub	r5,r5,r3
200880e8:	000f883a 	mov	r7,zero
200880ec:	003f8b06 	br	20087f1c <__flash_rwdata_start+0xfffed0b0>
200880f0:	0021883a 	mov	r16,zero
200880f4:	002b883a 	mov	r21,zero
200880f8:	01c00044 	movi	r7,1
200880fc:	003f8706 	br	20087f1c <__flash_rwdata_start+0xfffed0b0>
20088100:	01c000c4 	movi	r7,3
20088104:	003f8506 	br	20087f1c <__flash_rwdata_start+0xfffed0b0>
20088108:	04800104 	movi	r18,4
2008810c:	0023883a 	mov	r17,zero
20088110:	0027883a 	mov	r19,zero
20088114:	02000044 	movi	r8,1
20088118:	003f6e06 	br	20087ed4 <__flash_rwdata_start+0xfffed068>
2008811c:	04800304 	movi	r18,12
20088120:	020000c4 	movi	r8,3
20088124:	003f6b06 	br	20087ed4 <__flash_rwdata_start+0xfffed068>
20088128:	01400434 	movhi	r5,16
2008812c:	000d883a 	mov	r6,zero
20088130:	297fffc4 	addi	r5,r5,-1
20088134:	04ffffc4 	movi	r19,-1
20088138:	0101ffc4 	movi	r4,2047
2008813c:	003fa406 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
20088140:	043f0084 	movi	r16,-1022
20088144:	8521c83a 	sub	r16,r16,r20
20088148:	00800e04 	movi	r2,56
2008814c:	1401200e 	bge	r2,r16,200885d0 <__divdf3+0x778>
20088150:	9180004c 	andi	r6,r18,1
20088154:	0009883a 	mov	r4,zero
20088158:	000b883a 	mov	r5,zero
2008815c:	0027883a 	mov	r19,zero
20088160:	003f9b06 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
20088164:	8880022c 	andhi	r2,r17,8
20088168:	1000c726 	beq	r2,zero,20088488 <__divdf3+0x630>
2008816c:	8080022c 	andhi	r2,r16,8
20088170:	1000c51e 	bne	r2,zero,20088488 <__divdf3+0x630>
20088174:	00800434 	movhi	r2,16
20088178:	81400234 	orhi	r5,r16,8
2008817c:	10bfffc4 	addi	r2,r2,-1
20088180:	b80d883a 	mov	r6,r23
20088184:	288a703a 	and	r5,r5,r2
20088188:	a827883a 	mov	r19,r21
2008818c:	003fea06 	br	20088138 <__flash_rwdata_start+0xfffed2cc>
20088190:	8440ea36 	bltu	r16,r17,2008853c <__divdf3+0x6e4>
20088194:	8c00e826 	beq	r17,r16,20088538 <__divdf3+0x6e0>
20088198:	a53fffc4 	addi	r20,r20,-1
2008819c:	882d883a 	mov	r22,r17
200881a0:	000d883a 	mov	r6,zero
200881a4:	a804d63a 	srli	r2,r21,24
200881a8:	8020923a 	slli	r16,r16,8
200881ac:	b009883a 	mov	r4,r22
200881b0:	d9800315 	stw	r6,12(sp)
200881b4:	1420b03a 	or	r16,r2,r16
200881b8:	802ed43a 	srli	r23,r16,16
200881bc:	873fffcc 	andi	fp,r16,65535
200881c0:	a82a923a 	slli	r21,r21,8
200881c4:	b80b883a 	mov	r5,r23
200881c8:	0086c280 	call	20086c28 <__udivsi3>
200881cc:	b009883a 	mov	r4,r22
200881d0:	b80b883a 	mov	r5,r23
200881d4:	1023883a 	mov	r17,r2
200881d8:	0086c300 	call	20086c30 <__umodsi3>
200881dc:	1004943a 	slli	r2,r2,16
200881e0:	9808d43a 	srli	r4,r19,16
200881e4:	8f2d383a 	mul	r22,r17,fp
200881e8:	d9800317 	ldw	r6,12(sp)
200881ec:	1106b03a 	or	r3,r2,r4
200881f0:	1d80062e 	bgeu	r3,r22,2008820c <__divdf3+0x3b4>
200881f4:	1c07883a 	add	r3,r3,r16
200881f8:	88bfffc4 	addi	r2,r17,-1
200881fc:	1c00dc36 	bltu	r3,r16,20088570 <__divdf3+0x718>
20088200:	1d80db2e 	bgeu	r3,r22,20088570 <__divdf3+0x718>
20088204:	8c7fff84 	addi	r17,r17,-2
20088208:	1c07883a 	add	r3,r3,r16
2008820c:	1dadc83a 	sub	r22,r3,r22
20088210:	b009883a 	mov	r4,r22
20088214:	b80b883a 	mov	r5,r23
20088218:	d9800315 	stw	r6,12(sp)
2008821c:	0086c280 	call	20086c28 <__udivsi3>
20088220:	b009883a 	mov	r4,r22
20088224:	b80b883a 	mov	r5,r23
20088228:	d8800015 	stw	r2,0(sp)
2008822c:	0086c300 	call	20086c30 <__umodsi3>
20088230:	da400017 	ldw	r9,0(sp)
20088234:	1004943a 	slli	r2,r2,16
20088238:	9cffffcc 	andi	r19,r19,65535
2008823c:	4f07383a 	mul	r3,r9,fp
20088240:	14c8b03a 	or	r4,r2,r19
20088244:	d9800317 	ldw	r6,12(sp)
20088248:	20c0062e 	bgeu	r4,r3,20088264 <__divdf3+0x40c>
2008824c:	2409883a 	add	r4,r4,r16
20088250:	48bfffc4 	addi	r2,r9,-1
20088254:	2400c436 	bltu	r4,r16,20088568 <__divdf3+0x710>
20088258:	20c0c32e 	bgeu	r4,r3,20088568 <__divdf3+0x710>
2008825c:	4a7fff84 	addi	r9,r9,-2
20088260:	2409883a 	add	r4,r4,r16
20088264:	8822943a 	slli	r17,r17,16
20088268:	a80ed43a 	srli	r7,r21,16
2008826c:	aa3fffcc 	andi	r8,r21,65535
20088270:	4c62b03a 	or	r17,r9,r17
20088274:	8816d43a 	srli	r11,r17,16
20088278:	897fffcc 	andi	r5,r17,65535
2008827c:	2a15383a 	mul	r10,r5,r8
20088280:	5a19383a 	mul	r12,r11,r8
20088284:	29cb383a 	mul	r5,r5,r7
20088288:	5012d43a 	srli	r9,r10,16
2008828c:	20c5c83a 	sub	r2,r4,r3
20088290:	614b883a 	add	r5,r12,r5
20088294:	2a4b883a 	add	r5,r5,r9
20088298:	59c7383a 	mul	r3,r11,r7
2008829c:	2b00022e 	bgeu	r5,r12,200882a8 <__divdf3+0x450>
200882a0:	01000074 	movhi	r4,1
200882a4:	1907883a 	add	r3,r3,r4
200882a8:	2808d43a 	srli	r4,r5,16
200882ac:	280a943a 	slli	r5,r5,16
200882b0:	54ffffcc 	andi	r19,r10,65535
200882b4:	1907883a 	add	r3,r3,r4
200882b8:	2ccb883a 	add	r5,r5,r19
200882bc:	10c09336 	bltu	r2,r3,2008850c <__divdf3+0x6b4>
200882c0:	10c0ad26 	beq	r2,r3,20088578 <__divdf3+0x720>
200882c4:	10c7c83a 	sub	r3,r2,r3
200882c8:	3167c83a 	sub	r19,r6,r5
200882cc:	34ed803a 	cmpltu	r22,r6,r19
200882d0:	1dadc83a 	sub	r22,r3,r22
200882d4:	b400b226 	beq	r22,r16,200885a0 <__divdf3+0x748>
200882d8:	b009883a 	mov	r4,r22
200882dc:	b80b883a 	mov	r5,r23
200882e0:	d9c00115 	stw	r7,4(sp)
200882e4:	da000215 	stw	r8,8(sp)
200882e8:	0086c280 	call	20086c28 <__udivsi3>
200882ec:	b009883a 	mov	r4,r22
200882f0:	b80b883a 	mov	r5,r23
200882f4:	d8800315 	stw	r2,12(sp)
200882f8:	0086c300 	call	20086c30 <__umodsi3>
200882fc:	d9800317 	ldw	r6,12(sp)
20088300:	1004943a 	slli	r2,r2,16
20088304:	9808d43a 	srli	r4,r19,16
20088308:	372d383a 	mul	r22,r6,fp
2008830c:	d9c00117 	ldw	r7,4(sp)
20088310:	1106b03a 	or	r3,r2,r4
20088314:	da000217 	ldw	r8,8(sp)
20088318:	1d80062e 	bgeu	r3,r22,20088334 <__divdf3+0x4dc>
2008831c:	1c07883a 	add	r3,r3,r16
20088320:	30bfffc4 	addi	r2,r6,-1
20088324:	1c00a036 	bltu	r3,r16,200885a8 <__divdf3+0x750>
20088328:	1d809f2e 	bgeu	r3,r22,200885a8 <__divdf3+0x750>
2008832c:	31bfff84 	addi	r6,r6,-2
20088330:	1c07883a 	add	r3,r3,r16
20088334:	1dadc83a 	sub	r22,r3,r22
20088338:	b009883a 	mov	r4,r22
2008833c:	b80b883a 	mov	r5,r23
20088340:	d9800315 	stw	r6,12(sp)
20088344:	d9c00115 	stw	r7,4(sp)
20088348:	da000215 	stw	r8,8(sp)
2008834c:	0086c280 	call	20086c28 <__udivsi3>
20088350:	b009883a 	mov	r4,r22
20088354:	b80b883a 	mov	r5,r23
20088358:	d8800015 	stw	r2,0(sp)
2008835c:	0086c300 	call	20086c30 <__umodsi3>
20088360:	da400017 	ldw	r9,0(sp)
20088364:	1004943a 	slli	r2,r2,16
20088368:	993fffcc 	andi	r4,r19,65535
2008836c:	4f39383a 	mul	fp,r9,fp
20088370:	1106b03a 	or	r3,r2,r4
20088374:	d9800317 	ldw	r6,12(sp)
20088378:	d9c00117 	ldw	r7,4(sp)
2008837c:	da000217 	ldw	r8,8(sp)
20088380:	1f00062e 	bgeu	r3,fp,2008839c <__divdf3+0x544>
20088384:	1c07883a 	add	r3,r3,r16
20088388:	48bfffc4 	addi	r2,r9,-1
2008838c:	1c008836 	bltu	r3,r16,200885b0 <__divdf3+0x758>
20088390:	1f00872e 	bgeu	r3,fp,200885b0 <__divdf3+0x758>
20088394:	4a7fff84 	addi	r9,r9,-2
20088398:	1c07883a 	add	r3,r3,r16
2008839c:	3008943a 	slli	r4,r6,16
200883a0:	1f07c83a 	sub	r3,r3,fp
200883a4:	4926b03a 	or	r19,r9,r4
200883a8:	993fffcc 	andi	r4,r19,65535
200883ac:	980cd43a 	srli	r6,r19,16
200883b0:	220b383a 	mul	r5,r4,r8
200883b4:	21c5383a 	mul	r2,r4,r7
200883b8:	3211383a 	mul	r8,r6,r8
200883bc:	2808d43a 	srli	r4,r5,16
200883c0:	31cf383a 	mul	r7,r6,r7
200883c4:	4085883a 	add	r2,r8,r2
200883c8:	1105883a 	add	r2,r2,r4
200883cc:	1200022e 	bgeu	r2,r8,200883d8 <__divdf3+0x580>
200883d0:	01000074 	movhi	r4,1
200883d4:	390f883a 	add	r7,r7,r4
200883d8:	1008d43a 	srli	r4,r2,16
200883dc:	1004943a 	slli	r2,r2,16
200883e0:	297fffcc 	andi	r5,r5,65535
200883e4:	390f883a 	add	r7,r7,r4
200883e8:	1145883a 	add	r2,r2,r5
200883ec:	19c06536 	bltu	r3,r7,20088584 <__divdf3+0x72c>
200883f0:	19c09f26 	beq	r3,r7,20088670 <__divdf3+0x818>
200883f4:	9cc00054 	ori	r19,r19,1
200883f8:	a100ffc4 	addi	r4,r20,1023
200883fc:	013f500e 	bge	zero,r4,20088140 <__flash_rwdata_start+0xfffed2d4>
20088400:	988001cc 	andi	r2,r19,7
20088404:	10000726 	beq	r2,zero,20088424 <__divdf3+0x5cc>
20088408:	98c003cc 	andi	r3,r19,15
2008840c:	00800104 	movi	r2,4
20088410:	18800426 	beq	r3,r2,20088424 <__divdf3+0x5cc>
20088414:	9885883a 	add	r2,r19,r2
20088418:	14e1803a 	cmpltu	r16,r2,r19
2008841c:	8c23883a 	add	r17,r17,r16
20088420:	1027883a 	mov	r19,r2
20088424:	8880402c 	andhi	r2,r17,256
20088428:	10000426 	beq	r2,zero,2008843c <__divdf3+0x5e4>
2008842c:	00bfc034 	movhi	r2,65280
20088430:	10bfffc4 	addi	r2,r2,-1
20088434:	a1010004 	addi	r4,r20,1024
20088438:	88a2703a 	and	r17,r17,r2
2008843c:	0081ff84 	movi	r2,2046
20088440:	113edf16 	blt	r2,r4,20087fc0 <__flash_rwdata_start+0xfffed154>
20088444:	9826d0fa 	srli	r19,r19,3
20088448:	8804977a 	slli	r2,r17,29
2008844c:	8820927a 	slli	r16,r17,9
20088450:	2101ffcc 	andi	r4,r4,2047
20088454:	14e6b03a 	or	r19,r2,r19
20088458:	800ad33a 	srli	r5,r16,12
2008845c:	9180004c 	andi	r6,r18,1
20088460:	003edb06 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
20088464:	008000c4 	movi	r2,3
20088468:	4080a826 	beq	r8,r2,2008870c <__divdf3+0x8b4>
2008846c:	00800044 	movi	r2,1
20088470:	4080551e 	bne	r8,r2,200885c8 <__divdf3+0x770>
20088474:	e00d883a 	mov	r6,fp
20088478:	0009883a 	mov	r4,zero
2008847c:	000b883a 	mov	r5,zero
20088480:	0027883a 	mov	r19,zero
20088484:	003ed206 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
20088488:	00800434 	movhi	r2,16
2008848c:	89400234 	orhi	r5,r17,8
20088490:	10bfffc4 	addi	r2,r2,-1
20088494:	b00d883a 	mov	r6,r22
20088498:	288a703a 	and	r5,r5,r2
2008849c:	003f2606 	br	20088138 <__flash_rwdata_start+0xfffed2cc>
200884a0:	d9800315 	stw	r6,12(sp)
200884a4:	d9c00115 	stw	r7,4(sp)
200884a8:	0089bbc0 	call	20089bbc <__clzsi2>
200884ac:	10c00804 	addi	r3,r2,32
200884b0:	010009c4 	movi	r4,39
200884b4:	d9800317 	ldw	r6,12(sp)
200884b8:	d9c00117 	ldw	r7,4(sp)
200884bc:	20fee30e 	bge	r4,r3,2008804c <__flash_rwdata_start+0xfffed1e0>
200884c0:	117ffe04 	addi	r5,r2,-8
200884c4:	9162983a 	sll	r17,r18,r5
200884c8:	0027883a 	mov	r19,zero
200884cc:	003ee606 	br	20088068 <__flash_rwdata_start+0xfffed1fc>
200884d0:	3009883a 	mov	r4,r6
200884d4:	d9800315 	stw	r6,12(sp)
200884d8:	da000215 	stw	r8,8(sp)
200884dc:	da400015 	stw	r9,0(sp)
200884e0:	0089bbc0 	call	20089bbc <__clzsi2>
200884e4:	10c00804 	addi	r3,r2,32
200884e8:	010009c4 	movi	r4,39
200884ec:	d9800317 	ldw	r6,12(sp)
200884f0:	da000217 	ldw	r8,8(sp)
200884f4:	da400017 	ldw	r9,0(sp)
200884f8:	20fef20e 	bge	r4,r3,200880c4 <__flash_rwdata_start+0xfffed258>
200884fc:	10bffe04 	addi	r2,r2,-8
20088500:	a8a0983a 	sll	r16,r21,r2
20088504:	002b883a 	mov	r21,zero
20088508:	003ef506 	br	200880e0 <__flash_rwdata_start+0xfffed274>
2008850c:	354d883a 	add	r6,r6,r21
20088510:	3549803a 	cmpltu	r4,r6,r21
20088514:	2409883a 	add	r4,r4,r16
20088518:	2089883a 	add	r4,r4,r2
2008851c:	88bfffc4 	addi	r2,r17,-1
20088520:	81000c2e 	bgeu	r16,r4,20088554 <__divdf3+0x6fc>
20088524:	20c04436 	bltu	r4,r3,20088638 <__divdf3+0x7e0>
20088528:	19006f26 	beq	r3,r4,200886e8 <__divdf3+0x890>
2008852c:	20c7c83a 	sub	r3,r4,r3
20088530:	1023883a 	mov	r17,r2
20088534:	003f6406 	br	200882c8 <__flash_rwdata_start+0xfffed45c>
20088538:	9d7f1736 	bltu	r19,r21,20088198 <__flash_rwdata_start+0xfffed32c>
2008853c:	9806d07a 	srli	r3,r19,1
20088540:	880497fa 	slli	r2,r17,31
20088544:	980c97fa 	slli	r6,r19,31
20088548:	882cd07a 	srli	r22,r17,1
2008854c:	18a6b03a 	or	r19,r3,r2
20088550:	003f1406 	br	200881a4 <__flash_rwdata_start+0xfffed338>
20088554:	243ff51e 	bne	r4,r16,2008852c <__flash_rwdata_start+0xfffed6c0>
20088558:	357ff22e 	bgeu	r6,r21,20088524 <__flash_rwdata_start+0xfffed6b8>
2008855c:	80c7c83a 	sub	r3,r16,r3
20088560:	1023883a 	mov	r17,r2
20088564:	003f5806 	br	200882c8 <__flash_rwdata_start+0xfffed45c>
20088568:	1013883a 	mov	r9,r2
2008856c:	003f3d06 	br	20088264 <__flash_rwdata_start+0xfffed3f8>
20088570:	1023883a 	mov	r17,r2
20088574:	003f2506 	br	2008820c <__flash_rwdata_start+0xfffed3a0>
20088578:	317fe436 	bltu	r6,r5,2008850c <__flash_rwdata_start+0xfffed6a0>
2008857c:	0007883a 	mov	r3,zero
20088580:	003f5106 	br	200882c8 <__flash_rwdata_start+0xfffed45c>
20088584:	1c07883a 	add	r3,r3,r16
20088588:	993fffc4 	addi	r4,r19,-1
2008858c:	1c000a2e 	bgeu	r3,r16,200885b8 <__divdf3+0x760>
20088590:	2027883a 	mov	r19,r4
20088594:	19ff971e 	bne	r3,r7,200883f4 <__flash_rwdata_start+0xfffed588>
20088598:	a8bf961e 	bne	r21,r2,200883f4 <__flash_rwdata_start+0xfffed588>
2008859c:	003f9606 	br	200883f8 <__flash_rwdata_start+0xfffed58c>
200885a0:	04ffffc4 	movi	r19,-1
200885a4:	003f9406 	br	200883f8 <__flash_rwdata_start+0xfffed58c>
200885a8:	100d883a 	mov	r6,r2
200885ac:	003f6106 	br	20088334 <__flash_rwdata_start+0xfffed4c8>
200885b0:	1013883a 	mov	r9,r2
200885b4:	003f7906 	br	2008839c <__flash_rwdata_start+0xfffed530>
200885b8:	19c02636 	bltu	r3,r7,20088654 <__divdf3+0x7fc>
200885bc:	38c04d26 	beq	r7,r3,200886f4 <__divdf3+0x89c>
200885c0:	2027883a 	mov	r19,r4
200885c4:	003f8b06 	br	200883f4 <__flash_rwdata_start+0xfffed588>
200885c8:	e025883a 	mov	r18,fp
200885cc:	003f8a06 	br	200883f8 <__flash_rwdata_start+0xfffed58c>
200885d0:	008007c4 	movi	r2,31
200885d4:	14002a16 	blt	r2,r16,20088680 <__divdf3+0x828>
200885d8:	a5010784 	addi	r20,r20,1054
200885dc:	8d04983a 	sll	r2,r17,r20
200885e0:	9c06d83a 	srl	r3,r19,r16
200885e4:	9d28983a 	sll	r20,r19,r20
200885e8:	8c20d83a 	srl	r16,r17,r16
200885ec:	1886b03a 	or	r3,r3,r2
200885f0:	a004c03a 	cmpne	r2,r20,zero
200885f4:	1884b03a 	or	r2,r3,r2
200885f8:	10c001cc 	andi	r3,r2,7
200885fc:	18000726 	beq	r3,zero,2008861c <__divdf3+0x7c4>
20088600:	110003cc 	andi	r4,r2,15
20088604:	00c00104 	movi	r3,4
20088608:	20c00426 	beq	r4,r3,2008861c <__divdf3+0x7c4>
2008860c:	10c00104 	addi	r3,r2,4
20088610:	1885803a 	cmpltu	r2,r3,r2
20088614:	80a1883a 	add	r16,r16,r2
20088618:	1805883a 	mov	r2,r3
2008861c:	80c0202c 	andhi	r3,r16,128
20088620:	18002d26 	beq	r3,zero,200886d8 <__divdf3+0x880>
20088624:	9180004c 	andi	r6,r18,1
20088628:	01000044 	movi	r4,1
2008862c:	000b883a 	mov	r5,zero
20088630:	0027883a 	mov	r19,zero
20088634:	003e6606 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
20088638:	354d883a 	add	r6,r6,r21
2008863c:	356d803a 	cmpltu	r22,r6,r21
20088640:	b42d883a 	add	r22,r22,r16
20088644:	b12d883a 	add	r22,r22,r4
20088648:	8c7fff84 	addi	r17,r17,-2
2008864c:	b0c7c83a 	sub	r3,r22,r3
20088650:	003f1d06 	br	200882c8 <__flash_rwdata_start+0xfffed45c>
20088654:	ad4b883a 	add	r5,r21,r21
20088658:	2d6b803a 	cmpltu	r21,r5,r21
2008865c:	ac2b883a 	add	r21,r21,r16
20088660:	1d47883a 	add	r3,r3,r21
20088664:	993fff84 	addi	r4,r19,-2
20088668:	282b883a 	mov	r21,r5
2008866c:	003fc806 	br	20088590 <__flash_rwdata_start+0xfffed724>
20088670:	103fc41e 	bne	r2,zero,20088584 <__flash_rwdata_start+0xfffed718>
20088674:	002b883a 	mov	r21,zero
20088678:	a8bf5e1e 	bne	r21,r2,200883f4 <__flash_rwdata_start+0xfffed588>
2008867c:	003f5e06 	br	200883f8 <__flash_rwdata_start+0xfffed58c>
20088680:	00bef884 	movi	r2,-1054
20088684:	1505c83a 	sub	r2,r2,r20
20088688:	00c00804 	movi	r3,32
2008868c:	8884d83a 	srl	r2,r17,r2
20088690:	80c01c26 	beq	r16,r3,20088704 <__divdf3+0x8ac>
20088694:	a0c10f84 	addi	r3,r20,1086
20088698:	88c6983a 	sll	r3,r17,r3
2008869c:	1cc6b03a 	or	r3,r3,r19
200886a0:	1806c03a 	cmpne	r3,r3,zero
200886a4:	1884b03a 	or	r2,r3,r2
200886a8:	140001cc 	andi	r16,r2,7
200886ac:	8000061e 	bne	r16,zero,200886c8 <__divdf3+0x870>
200886b0:	000b883a 	mov	r5,zero
200886b4:	1004d0fa 	srli	r2,r2,3
200886b8:	9180004c 	andi	r6,r18,1
200886bc:	0009883a 	mov	r4,zero
200886c0:	1426b03a 	or	r19,r2,r16
200886c4:	003e4206 	br	20087fd0 <__flash_rwdata_start+0xfffed164>
200886c8:	110003cc 	andi	r4,r2,15
200886cc:	00c00104 	movi	r3,4
200886d0:	0021883a 	mov	r16,zero
200886d4:	20ffcd1e 	bne	r4,r3,2008860c <__flash_rwdata_start+0xfffed7a0>
200886d8:	800a927a 	slli	r5,r16,9
200886dc:	8020977a 	slli	r16,r16,29
200886e0:	280ad33a 	srli	r5,r5,12
200886e4:	003ff306 	br	200886b4 <__flash_rwdata_start+0xfffed848>
200886e8:	317fd336 	bltu	r6,r5,20088638 <__flash_rwdata_start+0xfffed7cc>
200886ec:	1023883a 	mov	r17,r2
200886f0:	003fa206 	br	2008857c <__flash_rwdata_start+0xfffed710>
200886f4:	a8bfd736 	bltu	r21,r2,20088654 <__flash_rwdata_start+0xfffed7e8>
200886f8:	2027883a 	mov	r19,r4
200886fc:	a8bf3d1e 	bne	r21,r2,200883f4 <__flash_rwdata_start+0xfffed588>
20088700:	003f3d06 	br	200883f8 <__flash_rwdata_start+0xfffed58c>
20088704:	0007883a 	mov	r3,zero
20088708:	003fe406 	br	2008869c <__flash_rwdata_start+0xfffed830>
2008870c:	00800434 	movhi	r2,16
20088710:	89400234 	orhi	r5,r17,8
20088714:	10bfffc4 	addi	r2,r2,-1
20088718:	e00d883a 	mov	r6,fp
2008871c:	288a703a 	and	r5,r5,r2
20088720:	003e8506 	br	20088138 <__flash_rwdata_start+0xfffed2cc>

20088724 <__muldf3>:
20088724:	defff204 	addi	sp,sp,-56
20088728:	2804d53a 	srli	r2,r5,20
2008872c:	dd800a15 	stw	r22,40(sp)
20088730:	282cd7fa 	srli	r22,r5,31
20088734:	dc000415 	stw	r16,16(sp)
20088738:	04000434 	movhi	r16,16
2008873c:	df000c15 	stw	fp,48(sp)
20088740:	dd000815 	stw	r20,32(sp)
20088744:	dcc00715 	stw	r19,28(sp)
20088748:	dc800615 	stw	r18,24(sp)
2008874c:	dc400515 	stw	r17,20(sp)
20088750:	843fffc4 	addi	r16,r16,-1
20088754:	dfc00d15 	stw	ra,52(sp)
20088758:	ddc00b15 	stw	r23,44(sp)
2008875c:	dd400915 	stw	r21,36(sp)
20088760:	1501ffcc 	andi	r20,r2,2047
20088764:	2023883a 	mov	r17,r4
20088768:	2025883a 	mov	r18,r4
2008876c:	2c20703a 	and	r16,r5,r16
20088770:	b027883a 	mov	r19,r22
20088774:	b7003fcc 	andi	fp,r22,255
20088778:	a0005926 	beq	r20,zero,200888e0 <__muldf3+0x1bc>
2008877c:	0081ffc4 	movi	r2,2047
20088780:	a0803426 	beq	r20,r2,20088854 <__muldf3+0x130>
20088784:	84000434 	orhi	r16,r16,16
20088788:	2004d77a 	srli	r2,r4,29
2008878c:	802090fa 	slli	r16,r16,3
20088790:	202490fa 	slli	r18,r4,3
20088794:	a53f0044 	addi	r20,r20,-1023
20088798:	80a0b03a 	or	r16,r16,r2
2008879c:	002b883a 	mov	r21,zero
200887a0:	0015883a 	mov	r10,zero
200887a4:	3812d53a 	srli	r9,r7,20
200887a8:	3806d7fa 	srli	r3,r7,31
200887ac:	02000434 	movhi	r8,16
200887b0:	423fffc4 	addi	r8,r8,-1
200887b4:	4941ffcc 	andi	r5,r9,2047
200887b8:	302f883a 	mov	r23,r6
200887bc:	3a22703a 	and	r17,r7,r8
200887c0:	1ac03fcc 	andi	r11,r3,255
200887c4:	28006226 	beq	r5,zero,20088950 <__muldf3+0x22c>
200887c8:	0081ffc4 	movi	r2,2047
200887cc:	28805a26 	beq	r5,r2,20088938 <__muldf3+0x214>
200887d0:	8a000434 	orhi	r8,r17,16
200887d4:	3004d77a 	srli	r2,r6,29
200887d8:	401090fa 	slli	r8,r8,3
200887dc:	302e90fa 	slli	r23,r6,3
200887e0:	297f0044 	addi	r5,r5,-1023
200887e4:	40a2b03a 	or	r17,r8,r2
200887e8:	0013883a 	mov	r9,zero
200887ec:	4d4cb03a 	or	r6,r9,r21
200887f0:	300c90ba 	slli	r6,r6,2
200887f4:	02080274 	movhi	r8,8201
200887f8:	42220504 	addi	r8,r8,-30700
200887fc:	320d883a 	add	r6,r6,r8
20088800:	31800017 	ldw	r6,0(r6)
20088804:	a14b883a 	add	r5,r20,r5
20088808:	1dacf03a 	xor	r22,r3,r22
2008880c:	2b000044 	addi	r12,r5,1
20088810:	3000683a 	jmp	r6
20088814:	20088a50 	cmplti	zero,r4,8745
20088818:	20088a3c 	xorhi	zero,r4,8744
2008881c:	20088a3c 	xorhi	zero,r4,8744
20088820:	20088a28 	cmpgeui	zero,r4,8744
20088824:	20088870 	cmpltui	zero,r4,8737
20088828:	20088870 	cmpltui	zero,r4,8737
2008882c:	20088a10 	cmplti	zero,r4,8744
20088830:	20088a28 	cmpgeui	zero,r4,8744
20088834:	20088870 	cmpltui	zero,r4,8737
20088838:	20088a10 	cmplti	zero,r4,8744
2008883c:	20088870 	cmpltui	zero,r4,8737
20088840:	20088a28 	cmpgeui	zero,r4,8744
20088844:	20088874 	orhi	zero,r4,8737
20088848:	20088874 	orhi	zero,r4,8737
2008884c:	20088874 	orhi	zero,r4,8737
20088850:	20088c4c 	andi	zero,r4,8753
20088854:	8104b03a 	or	r2,r16,r4
20088858:	10006a1e 	bne	r2,zero,20088a04 <__muldf3+0x2e0>
2008885c:	05400204 	movi	r21,8
20088860:	0021883a 	mov	r16,zero
20088864:	0025883a 	mov	r18,zero
20088868:	02800084 	movi	r10,2
2008886c:	003fcd06 	br	200887a4 <__flash_rwdata_start+0xfffed938>
20088870:	b039883a 	mov	fp,r22
20088874:	00800084 	movi	r2,2
20088878:	50804e1e 	bne	r10,r2,200889b4 <__muldf3+0x290>
2008887c:	e4c0004c 	andi	r19,fp,1
20088880:	0101ffc4 	movi	r4,2047
20088884:	0021883a 	mov	r16,zero
20088888:	0025883a 	mov	r18,zero
2008888c:	2008953a 	slli	r4,r4,20
20088890:	98c03fcc 	andi	r3,r19,255
20088894:	01400434 	movhi	r5,16
20088898:	297fffc4 	addi	r5,r5,-1
2008889c:	180697fa 	slli	r3,r3,31
200888a0:	8160703a 	and	r16,r16,r5
200888a4:	8120b03a 	or	r16,r16,r4
200888a8:	80c6b03a 	or	r3,r16,r3
200888ac:	9005883a 	mov	r2,r18
200888b0:	dfc00d17 	ldw	ra,52(sp)
200888b4:	df000c17 	ldw	fp,48(sp)
200888b8:	ddc00b17 	ldw	r23,44(sp)
200888bc:	dd800a17 	ldw	r22,40(sp)
200888c0:	dd400917 	ldw	r21,36(sp)
200888c4:	dd000817 	ldw	r20,32(sp)
200888c8:	dcc00717 	ldw	r19,28(sp)
200888cc:	dc800617 	ldw	r18,24(sp)
200888d0:	dc400517 	ldw	r17,20(sp)
200888d4:	dc000417 	ldw	r16,16(sp)
200888d8:	dec00e04 	addi	sp,sp,56
200888dc:	f800283a 	ret
200888e0:	8104b03a 	or	r2,r16,r4
200888e4:	10004226 	beq	r2,zero,200889f0 <__muldf3+0x2cc>
200888e8:	8000f926 	beq	r16,zero,20088cd0 <__muldf3+0x5ac>
200888ec:	8009883a 	mov	r4,r16
200888f0:	d9800315 	stw	r6,12(sp)
200888f4:	d9c00015 	stw	r7,0(sp)
200888f8:	0089bbc0 	call	20089bbc <__clzsi2>
200888fc:	d9800317 	ldw	r6,12(sp)
20088900:	d9c00017 	ldw	r7,0(sp)
20088904:	1007883a 	mov	r3,r2
20088908:	01000a04 	movi	r4,40
2008890c:	18bffe04 	addi	r2,r3,-8
20088910:	20c9c83a 	sub	r4,r4,r3
20088914:	80a0983a 	sll	r16,r16,r2
20088918:	8908d83a 	srl	r4,r17,r4
2008891c:	88a4983a 	sll	r18,r17,r2
20088920:	2420b03a 	or	r16,r4,r16
20088924:	017f0344 	movi	r5,-1011
20088928:	28e9c83a 	sub	r20,r5,r3
2008892c:	002b883a 	mov	r21,zero
20088930:	0015883a 	mov	r10,zero
20088934:	003f9b06 	br	200887a4 <__flash_rwdata_start+0xfffed938>
20088938:	8984b03a 	or	r2,r17,r6
2008893c:	10002a1e 	bne	r2,zero,200889e8 <__muldf3+0x2c4>
20088940:	0023883a 	mov	r17,zero
20088944:	002f883a 	mov	r23,zero
20088948:	02400084 	movi	r9,2
2008894c:	003fa706 	br	200887ec <__flash_rwdata_start+0xfffed980>
20088950:	8984b03a 	or	r2,r17,r6
20088954:	10002026 	beq	r2,zero,200889d8 <__muldf3+0x2b4>
20088958:	8800cc26 	beq	r17,zero,20088c8c <__muldf3+0x568>
2008895c:	8809883a 	mov	r4,r17
20088960:	d8c00215 	stw	r3,8(sp)
20088964:	d9800315 	stw	r6,12(sp)
20088968:	da800015 	stw	r10,0(sp)
2008896c:	dac00115 	stw	r11,4(sp)
20088970:	0089bbc0 	call	20089bbc <__clzsi2>
20088974:	d8c00217 	ldw	r3,8(sp)
20088978:	d9800317 	ldw	r6,12(sp)
2008897c:	da800017 	ldw	r10,0(sp)
20088980:	dac00117 	ldw	r11,4(sp)
20088984:	1009883a 	mov	r4,r2
20088988:	01400a04 	movi	r5,40
2008898c:	25fffe04 	addi	r23,r4,-8
20088990:	290bc83a 	sub	r5,r5,r4
20088994:	8dd0983a 	sll	r8,r17,r23
20088998:	314ad83a 	srl	r5,r6,r5
2008899c:	35ee983a 	sll	r23,r6,r23
200889a0:	2a22b03a 	or	r17,r5,r8
200889a4:	017f0344 	movi	r5,-1011
200889a8:	290bc83a 	sub	r5,r5,r4
200889ac:	0013883a 	mov	r9,zero
200889b0:	003f8e06 	br	200887ec <__flash_rwdata_start+0xfffed980>
200889b4:	008000c4 	movi	r2,3
200889b8:	50811d26 	beq	r10,r2,20088e30 <__muldf3+0x70c>
200889bc:	00800044 	movi	r2,1
200889c0:	5080e01e 	bne	r10,r2,20088d44 <__muldf3+0x620>
200889c4:	e0a6703a 	and	r19,fp,r2
200889c8:	0009883a 	mov	r4,zero
200889cc:	0021883a 	mov	r16,zero
200889d0:	0025883a 	mov	r18,zero
200889d4:	003fad06 	br	2008888c <__flash_rwdata_start+0xfffeda20>
200889d8:	0023883a 	mov	r17,zero
200889dc:	002f883a 	mov	r23,zero
200889e0:	02400044 	movi	r9,1
200889e4:	003f8106 	br	200887ec <__flash_rwdata_start+0xfffed980>
200889e8:	024000c4 	movi	r9,3
200889ec:	003f7f06 	br	200887ec <__flash_rwdata_start+0xfffed980>
200889f0:	05400104 	movi	r21,4
200889f4:	0021883a 	mov	r16,zero
200889f8:	0025883a 	mov	r18,zero
200889fc:	02800044 	movi	r10,1
20088a00:	003f6806 	br	200887a4 <__flash_rwdata_start+0xfffed938>
20088a04:	05400304 	movi	r21,12
20088a08:	028000c4 	movi	r10,3
20088a0c:	003f6506 	br	200887a4 <__flash_rwdata_start+0xfffed938>
20088a10:	04000434 	movhi	r16,16
20088a14:	0027883a 	mov	r19,zero
20088a18:	843fffc4 	addi	r16,r16,-1
20088a1c:	04bfffc4 	movi	r18,-1
20088a20:	0101ffc4 	movi	r4,2047
20088a24:	003f9906 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088a28:	8821883a 	mov	r16,r17
20088a2c:	b825883a 	mov	r18,r23
20088a30:	5839883a 	mov	fp,r11
20088a34:	4815883a 	mov	r10,r9
20088a38:	003f8e06 	br	20088874 <__flash_rwdata_start+0xfffeda08>
20088a3c:	8821883a 	mov	r16,r17
20088a40:	b825883a 	mov	r18,r23
20088a44:	b039883a 	mov	fp,r22
20088a48:	4815883a 	mov	r10,r9
20088a4c:	003f8906 	br	20088874 <__flash_rwdata_start+0xfffeda08>
20088a50:	b80cd43a 	srli	r6,r23,16
20088a54:	9006d43a 	srli	r3,r18,16
20088a58:	90bfffcc 	andi	r2,r18,65535
20088a5c:	bdffffcc 	andi	r23,r23,65535
20088a60:	b891383a 	mul	r8,r23,r2
20088a64:	b8c9383a 	mul	r4,r23,r3
20088a68:	309b383a 	mul	r13,r6,r2
20088a6c:	400ed43a 	srli	r7,r8,16
20088a70:	30df383a 	mul	r15,r6,r3
20088a74:	235b883a 	add	r13,r4,r13
20088a78:	69db883a 	add	r13,r13,r7
20088a7c:	6900022e 	bgeu	r13,r4,20088a88 <__muldf3+0x364>
20088a80:	01000074 	movhi	r4,1
20088a84:	791f883a 	add	r15,r15,r4
20088a88:	8828d43a 	srli	r20,r17,16
20088a8c:	8c7fffcc 	andi	r17,r17,65535
20088a90:	888f383a 	mul	r7,r17,r2
20088a94:	88d3383a 	mul	r9,r17,r3
20088a98:	a0a5383a 	mul	r18,r20,r2
20088a9c:	3816d43a 	srli	r11,r7,16
20088aa0:	6814943a 	slli	r10,r13,16
20088aa4:	4ca5883a 	add	r18,r9,r18
20088aa8:	423fffcc 	andi	r8,r8,65535
20088aac:	92e5883a 	add	r18,r18,r11
20088ab0:	6808d43a 	srli	r4,r13,16
20088ab4:	5215883a 	add	r10,r10,r8
20088ab8:	a0c7383a 	mul	r3,r20,r3
20088abc:	9240022e 	bgeu	r18,r9,20088ac8 <__muldf3+0x3a4>
20088ac0:	00800074 	movhi	r2,1
20088ac4:	1887883a 	add	r3,r3,r2
20088ac8:	802ad43a 	srli	r21,r16,16
20088acc:	80bfffcc 	andi	r2,r16,65535
20088ad0:	b893383a 	mul	r9,r23,r2
20088ad4:	3091383a 	mul	r8,r6,r2
20088ad8:	bd6f383a 	mul	r23,r23,r21
20088adc:	9026943a 	slli	r19,r18,16
20088ae0:	481ad43a 	srli	r13,r9,16
20088ae4:	9024d43a 	srli	r18,r18,16
20088ae8:	39ffffcc 	andi	r7,r7,65535
20088aec:	ba11883a 	add	r8,r23,r8
20088af0:	99e7883a 	add	r19,r19,r7
20088af4:	4351883a 	add	r8,r8,r13
20088af8:	1c97883a 	add	r11,r3,r18
20088afc:	354d383a 	mul	r6,r6,r21
20088b00:	9925883a 	add	r18,r19,r4
20088b04:	45c0022e 	bgeu	r8,r23,20088b10 <__muldf3+0x3ec>
20088b08:	00c00074 	movhi	r3,1
20088b0c:	30cd883a 	add	r6,r6,r3
20088b10:	8889383a 	mul	r4,r17,r2
20088b14:	8d63383a 	mul	r17,r17,r21
20088b18:	a085383a 	mul	r2,r20,r2
20088b1c:	200ed43a 	srli	r7,r4,16
20088b20:	401cd43a 	srli	r14,r8,16
20088b24:	401a943a 	slli	r13,r8,16
20088b28:	8885883a 	add	r2,r17,r2
20088b2c:	4a3fffcc 	andi	r8,r9,65535
20088b30:	11c5883a 	add	r2,r2,r7
20088b34:	339d883a 	add	r14,r6,r14
20088b38:	6a11883a 	add	r8,r13,r8
20088b3c:	a561383a 	mul	r16,r20,r21
20088b40:	1440022e 	bgeu	r2,r17,20088b4c <__muldf3+0x428>
20088b44:	00c00074 	movhi	r3,1
20088b48:	80e1883a 	add	r16,r16,r3
20088b4c:	1006943a 	slli	r3,r2,16
20088b50:	213fffcc 	andi	r4,r4,65535
20088b54:	93db883a 	add	r13,r18,r15
20088b58:	1909883a 	add	r4,r3,r4
20088b5c:	22c7883a 	add	r3,r4,r11
20088b60:	6cd3803a 	cmpltu	r9,r13,r19
20088b64:	6a09883a 	add	r4,r13,r8
20088b68:	1a5b883a 	add	r13,r3,r9
20088b6c:	2211803a 	cmpltu	r8,r4,r8
20088b70:	734d883a 	add	r6,r14,r13
20088b74:	100ed43a 	srli	r7,r2,16
20088b78:	6a53803a 	cmpltu	r9,r13,r9
20088b7c:	3205883a 	add	r2,r6,r8
20088b80:	1ac7803a 	cmpltu	r3,r3,r11
20088b84:	1211803a 	cmpltu	r8,r2,r8
20088b88:	48c6b03a 	or	r3,r9,r3
20088b8c:	338d803a 	cmpltu	r6,r6,r14
20088b90:	19c7883a 	add	r3,r3,r7
20088b94:	418cb03a 	or	r6,r8,r6
20088b98:	1987883a 	add	r3,r3,r6
20088b9c:	2024927a 	slli	r18,r4,9
20088ba0:	1c07883a 	add	r3,r3,r16
20088ba4:	1806927a 	slli	r3,r3,9
20088ba8:	1020d5fa 	srli	r16,r2,23
20088bac:	2008d5fa 	srli	r4,r4,23
20088bb0:	9294b03a 	or	r10,r18,r10
20088bb4:	1004927a 	slli	r2,r2,9
20088bb8:	5024c03a 	cmpne	r18,r10,zero
20088bbc:	1c20b03a 	or	r16,r3,r16
20088bc0:	9108b03a 	or	r4,r18,r4
20088bc4:	80c0402c 	andhi	r3,r16,256
20088bc8:	20a4b03a 	or	r18,r4,r2
20088bcc:	18000726 	beq	r3,zero,20088bec <__muldf3+0x4c8>
20088bd0:	9006d07a 	srli	r3,r18,1
20088bd4:	800897fa 	slli	r4,r16,31
20088bd8:	9080004c 	andi	r2,r18,1
20088bdc:	8020d07a 	srli	r16,r16,1
20088be0:	10c4b03a 	or	r2,r2,r3
20088be4:	1124b03a 	or	r18,r2,r4
20088be8:	600b883a 	mov	r5,r12
20088bec:	2900ffc4 	addi	r4,r5,1023
20088bf0:	01004b0e 	bge	zero,r4,20088d20 <__muldf3+0x5fc>
20088bf4:	908001cc 	andi	r2,r18,7
20088bf8:	10000726 	beq	r2,zero,20088c18 <__muldf3+0x4f4>
20088bfc:	90c003cc 	andi	r3,r18,15
20088c00:	00800104 	movi	r2,4
20088c04:	18800426 	beq	r3,r2,20088c18 <__muldf3+0x4f4>
20088c08:	9087883a 	add	r3,r18,r2
20088c0c:	1c85803a 	cmpltu	r2,r3,r18
20088c10:	80a1883a 	add	r16,r16,r2
20088c14:	1825883a 	mov	r18,r3
20088c18:	8080402c 	andhi	r2,r16,256
20088c1c:	10000426 	beq	r2,zero,20088c30 <__muldf3+0x50c>
20088c20:	00bfc034 	movhi	r2,65280
20088c24:	10bfffc4 	addi	r2,r2,-1
20088c28:	29010004 	addi	r4,r5,1024
20088c2c:	80a0703a 	and	r16,r16,r2
20088c30:	0081ff84 	movi	r2,2046
20088c34:	1100320e 	bge	r2,r4,20088d00 <__muldf3+0x5dc>
20088c38:	b4c0004c 	andi	r19,r22,1
20088c3c:	0101ffc4 	movi	r4,2047
20088c40:	0021883a 	mov	r16,zero
20088c44:	0025883a 	mov	r18,zero
20088c48:	003f1006 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088c4c:	8080022c 	andhi	r2,r16,8
20088c50:	10000926 	beq	r2,zero,20088c78 <__muldf3+0x554>
20088c54:	8880022c 	andhi	r2,r17,8
20088c58:	1000071e 	bne	r2,zero,20088c78 <__muldf3+0x554>
20088c5c:	00800434 	movhi	r2,16
20088c60:	8c000234 	orhi	r16,r17,8
20088c64:	10bfffc4 	addi	r2,r2,-1
20088c68:	1827883a 	mov	r19,r3
20088c6c:	80a0703a 	and	r16,r16,r2
20088c70:	b825883a 	mov	r18,r23
20088c74:	003f6a06 	br	20088a20 <__flash_rwdata_start+0xfffedbb4>
20088c78:	00800434 	movhi	r2,16
20088c7c:	84000234 	orhi	r16,r16,8
20088c80:	10bfffc4 	addi	r2,r2,-1
20088c84:	80a0703a 	and	r16,r16,r2
20088c88:	003f6506 	br	20088a20 <__flash_rwdata_start+0xfffedbb4>
20088c8c:	3009883a 	mov	r4,r6
20088c90:	d8c00215 	stw	r3,8(sp)
20088c94:	d9800315 	stw	r6,12(sp)
20088c98:	da800015 	stw	r10,0(sp)
20088c9c:	dac00115 	stw	r11,4(sp)
20088ca0:	0089bbc0 	call	20089bbc <__clzsi2>
20088ca4:	11000804 	addi	r4,r2,32
20088ca8:	014009c4 	movi	r5,39
20088cac:	d8c00217 	ldw	r3,8(sp)
20088cb0:	d9800317 	ldw	r6,12(sp)
20088cb4:	da800017 	ldw	r10,0(sp)
20088cb8:	dac00117 	ldw	r11,4(sp)
20088cbc:	293f320e 	bge	r5,r4,20088988 <__flash_rwdata_start+0xfffedb1c>
20088cc0:	10bffe04 	addi	r2,r2,-8
20088cc4:	b8a2983a 	sll	r17,r23,r2
20088cc8:	002f883a 	mov	r23,zero
20088ccc:	003f3506 	br	200889a4 <__flash_rwdata_start+0xfffedb38>
20088cd0:	d9800315 	stw	r6,12(sp)
20088cd4:	d9c00015 	stw	r7,0(sp)
20088cd8:	0089bbc0 	call	20089bbc <__clzsi2>
20088cdc:	10c00804 	addi	r3,r2,32
20088ce0:	010009c4 	movi	r4,39
20088ce4:	d9800317 	ldw	r6,12(sp)
20088ce8:	d9c00017 	ldw	r7,0(sp)
20088cec:	20ff060e 	bge	r4,r3,20088908 <__flash_rwdata_start+0xfffeda9c>
20088cf0:	10bffe04 	addi	r2,r2,-8
20088cf4:	88a0983a 	sll	r16,r17,r2
20088cf8:	0025883a 	mov	r18,zero
20088cfc:	003f0906 	br	20088924 <__flash_rwdata_start+0xfffedab8>
20088d00:	9004d0fa 	srli	r2,r18,3
20088d04:	8024977a 	slli	r18,r16,29
20088d08:	8020927a 	slli	r16,r16,9
20088d0c:	2101ffcc 	andi	r4,r4,2047
20088d10:	90a4b03a 	or	r18,r18,r2
20088d14:	8020d33a 	srli	r16,r16,12
20088d18:	b4c0004c 	andi	r19,r22,1
20088d1c:	003edb06 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088d20:	00ff0084 	movi	r3,-1022
20088d24:	1947c83a 	sub	r3,r3,r5
20088d28:	00800e04 	movi	r2,56
20088d2c:	10c0080e 	bge	r2,r3,20088d50 <__muldf3+0x62c>
20088d30:	b4c0004c 	andi	r19,r22,1
20088d34:	0009883a 	mov	r4,zero
20088d38:	0021883a 	mov	r16,zero
20088d3c:	0025883a 	mov	r18,zero
20088d40:	003ed206 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088d44:	600b883a 	mov	r5,r12
20088d48:	e02d883a 	mov	r22,fp
20088d4c:	003fa706 	br	20088bec <__flash_rwdata_start+0xfffedd80>
20088d50:	008007c4 	movi	r2,31
20088d54:	10c01816 	blt	r2,r3,20088db8 <__muldf3+0x694>
20088d58:	29410784 	addi	r5,r5,1054
20088d5c:	8144983a 	sll	r2,r16,r5
20088d60:	90c8d83a 	srl	r4,r18,r3
20088d64:	914a983a 	sll	r5,r18,r5
20088d68:	80c6d83a 	srl	r3,r16,r3
20088d6c:	2088b03a 	or	r4,r4,r2
20088d70:	2804c03a 	cmpne	r2,r5,zero
20088d74:	2084b03a 	or	r2,r4,r2
20088d78:	110001cc 	andi	r4,r2,7
20088d7c:	20000726 	beq	r4,zero,20088d9c <__muldf3+0x678>
20088d80:	114003cc 	andi	r5,r2,15
20088d84:	01000104 	movi	r4,4
20088d88:	29000426 	beq	r5,r4,20088d9c <__muldf3+0x678>
20088d8c:	11000104 	addi	r4,r2,4
20088d90:	2085803a 	cmpltu	r2,r4,r2
20088d94:	1887883a 	add	r3,r3,r2
20088d98:	2005883a 	mov	r2,r4
20088d9c:	1900202c 	andhi	r4,r3,128
20088da0:	20001826 	beq	r4,zero,20088e04 <__muldf3+0x6e0>
20088da4:	b4c0004c 	andi	r19,r22,1
20088da8:	01000044 	movi	r4,1
20088dac:	0021883a 	mov	r16,zero
20088db0:	0025883a 	mov	r18,zero
20088db4:	003eb506 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088db8:	00bef884 	movi	r2,-1054
20088dbc:	1145c83a 	sub	r2,r2,r5
20088dc0:	8088d83a 	srl	r4,r16,r2
20088dc4:	00800804 	movi	r2,32
20088dc8:	18801726 	beq	r3,r2,20088e28 <__muldf3+0x704>
20088dcc:	28810f84 	addi	r2,r5,1086
20088dd0:	8084983a 	sll	r2,r16,r2
20088dd4:	1484b03a 	or	r2,r2,r18
20088dd8:	1004c03a 	cmpne	r2,r2,zero
20088ddc:	1104b03a 	or	r2,r2,r4
20088de0:	10c001cc 	andi	r3,r2,7
20088de4:	18000b1e 	bne	r3,zero,20088e14 <__muldf3+0x6f0>
20088de8:	0021883a 	mov	r16,zero
20088dec:	1004d0fa 	srli	r2,r2,3
20088df0:	b4c0004c 	andi	r19,r22,1
20088df4:	0009883a 	mov	r4,zero
20088df8:	10e4b03a 	or	r18,r2,r3
20088dfc:	003ea306 	br	2008888c <__flash_rwdata_start+0xfffeda20>
20088e00:	0007883a 	mov	r3,zero
20088e04:	1820927a 	slli	r16,r3,9
20088e08:	1806977a 	slli	r3,r3,29
20088e0c:	8020d33a 	srli	r16,r16,12
20088e10:	003ff606 	br	20088dec <__flash_rwdata_start+0xfffedf80>
20088e14:	110003cc 	andi	r4,r2,15
20088e18:	00c00104 	movi	r3,4
20088e1c:	20fff826 	beq	r4,r3,20088e00 <__flash_rwdata_start+0xfffedf94>
20088e20:	0007883a 	mov	r3,zero
20088e24:	003fd906 	br	20088d8c <__flash_rwdata_start+0xfffedf20>
20088e28:	0005883a 	mov	r2,zero
20088e2c:	003fe906 	br	20088dd4 <__flash_rwdata_start+0xfffedf68>
20088e30:	00800434 	movhi	r2,16
20088e34:	84000234 	orhi	r16,r16,8
20088e38:	10bfffc4 	addi	r2,r2,-1
20088e3c:	e4c0004c 	andi	r19,fp,1
20088e40:	80a0703a 	and	r16,r16,r2
20088e44:	003ef606 	br	20088a20 <__flash_rwdata_start+0xfffedbb4>

20088e48 <__subdf3>:
20088e48:	00c00434 	movhi	r3,16
20088e4c:	18ffffc4 	addi	r3,r3,-1
20088e50:	defffb04 	addi	sp,sp,-20
20088e54:	28d2703a 	and	r9,r5,r3
20088e58:	3814d53a 	srli	r10,r7,20
20088e5c:	38c6703a 	and	r3,r7,r3
20088e60:	3004d77a 	srli	r2,r6,29
20088e64:	dc800215 	stw	r18,8(sp)
20088e68:	dc000015 	stw	r16,0(sp)
20088e6c:	2824d7fa 	srli	r18,r5,31
20088e70:	2820d53a 	srli	r16,r5,20
20088e74:	481290fa 	slli	r9,r9,3
20088e78:	200ad77a 	srli	r5,r4,29
20088e7c:	180690fa 	slli	r3,r3,3
20088e80:	dc400115 	stw	r17,4(sp)
20088e84:	dfc00415 	stw	ra,16(sp)
20088e88:	202290fa 	slli	r17,r4,3
20088e8c:	dcc00315 	stw	r19,12(sp)
20088e90:	5281ffcc 	andi	r10,r10,2047
20088e94:	0101ffc4 	movi	r4,2047
20088e98:	9011883a 	mov	r8,r18
20088e9c:	8401ffcc 	andi	r16,r16,2047
20088ea0:	94803fcc 	andi	r18,r18,255
20088ea4:	494ab03a 	or	r5,r9,r5
20088ea8:	380ed7fa 	srli	r7,r7,31
20088eac:	1886b03a 	or	r3,r3,r2
20088eb0:	300c90fa 	slli	r6,r6,3
20088eb4:	51009026 	beq	r10,r4,200890f8 <__subdf3+0x2b0>
20088eb8:	39c0005c 	xori	r7,r7,1
20088ebc:	8285c83a 	sub	r2,r16,r10
20088ec0:	91c06f26 	beq	r18,r7,20089080 <__subdf3+0x238>
20088ec4:	0080b10e 	bge	zero,r2,2008918c <__subdf3+0x344>
20088ec8:	50002a1e 	bne	r10,zero,20088f74 <__subdf3+0x12c>
20088ecc:	1988b03a 	or	r4,r3,r6
20088ed0:	2000941e 	bne	r4,zero,20089124 <__subdf3+0x2dc>
20088ed4:	888001cc 	andi	r2,r17,7
20088ed8:	10005b26 	beq	r2,zero,20089048 <__subdf3+0x200>
20088edc:	88c003cc 	andi	r3,r17,15
20088ee0:	00800104 	movi	r2,4
20088ee4:	18805826 	beq	r3,r2,20089048 <__subdf3+0x200>
20088ee8:	88c00104 	addi	r3,r17,4
20088eec:	1c63803a 	cmpltu	r17,r3,r17
20088ef0:	2c4b883a 	add	r5,r5,r17
20088ef4:	2880202c 	andhi	r2,r5,128
20088ef8:	9200004c 	andi	r8,r18,1
20088efc:	1823883a 	mov	r17,r3
20088f00:	10005426 	beq	r2,zero,20089054 <__subdf3+0x20c>
20088f04:	84000044 	addi	r16,r16,1
20088f08:	0081ffc4 	movi	r2,2047
20088f0c:	8080bf26 	beq	r16,r2,2008920c <__subdf3+0x3c4>
20088f10:	013fe034 	movhi	r4,65408
20088f14:	213fffc4 	addi	r4,r4,-1
20088f18:	290a703a 	and	r5,r5,r4
20088f1c:	2804977a 	slli	r2,r5,29
20088f20:	280a927a 	slli	r5,r5,9
20088f24:	8822d0fa 	srli	r17,r17,3
20088f28:	8401ffcc 	andi	r16,r16,2047
20088f2c:	2808d33a 	srli	r4,r5,12
20088f30:	1444b03a 	or	r2,r2,r17
20088f34:	8401ffcc 	andi	r16,r16,2047
20088f38:	800a953a 	slli	r5,r16,20
20088f3c:	40c03fcc 	andi	r3,r8,255
20088f40:	04000434 	movhi	r16,16
20088f44:	180697fa 	slli	r3,r3,31
20088f48:	843fffc4 	addi	r16,r16,-1
20088f4c:	2420703a 	and	r16,r4,r16
20088f50:	8160b03a 	or	r16,r16,r5
20088f54:	80c6b03a 	or	r3,r16,r3
20088f58:	dfc00417 	ldw	ra,16(sp)
20088f5c:	dcc00317 	ldw	r19,12(sp)
20088f60:	dc800217 	ldw	r18,8(sp)
20088f64:	dc400117 	ldw	r17,4(sp)
20088f68:	dc000017 	ldw	r16,0(sp)
20088f6c:	dec00504 	addi	sp,sp,20
20088f70:	f800283a 	ret
20088f74:	0101ffc4 	movi	r4,2047
20088f78:	813fd626 	beq	r16,r4,20088ed4 <__flash_rwdata_start+0xfffee068>
20088f7c:	18c02034 	orhi	r3,r3,128
20088f80:	01000e04 	movi	r4,56
20088f84:	2080a416 	blt	r4,r2,20089218 <__subdf3+0x3d0>
20088f88:	010007c4 	movi	r4,31
20088f8c:	2080c716 	blt	r4,r2,200892ac <__subdf3+0x464>
20088f90:	01000804 	movi	r4,32
20088f94:	2089c83a 	sub	r4,r4,r2
20088f98:	1910983a 	sll	r8,r3,r4
20088f9c:	308ed83a 	srl	r7,r6,r2
20088fa0:	3108983a 	sll	r4,r6,r4
20088fa4:	1884d83a 	srl	r2,r3,r2
20088fa8:	41ccb03a 	or	r6,r8,r7
20088fac:	2008c03a 	cmpne	r4,r4,zero
20088fb0:	310cb03a 	or	r6,r6,r4
20088fb4:	898dc83a 	sub	r6,r17,r6
20088fb8:	89a3803a 	cmpltu	r17,r17,r6
20088fbc:	288bc83a 	sub	r5,r5,r2
20088fc0:	2c4bc83a 	sub	r5,r5,r17
20088fc4:	3023883a 	mov	r17,r6
20088fc8:	2880202c 	andhi	r2,r5,128
20088fcc:	10006b26 	beq	r2,zero,2008917c <__subdf3+0x334>
20088fd0:	04c02034 	movhi	r19,128
20088fd4:	9cffffc4 	addi	r19,r19,-1
20088fd8:	2ce6703a 	and	r19,r5,r19
20088fdc:	98007c26 	beq	r19,zero,200891d0 <__subdf3+0x388>
20088fe0:	9809883a 	mov	r4,r19
20088fe4:	0089bbc0 	call	20089bbc <__clzsi2>
20088fe8:	10fffe04 	addi	r3,r2,-8
20088fec:	010007c4 	movi	r4,31
20088ff0:	20c07d16 	blt	r4,r3,200891e8 <__subdf3+0x3a0>
20088ff4:	01400a04 	movi	r5,40
20088ff8:	2885c83a 	sub	r2,r5,r2
20088ffc:	888ad83a 	srl	r5,r17,r2
20089000:	98e6983a 	sll	r19,r19,r3
20089004:	88e2983a 	sll	r17,r17,r3
20089008:	2ce6b03a 	or	r19,r5,r19
2008900c:	1c007a16 	blt	r3,r16,200891f8 <__subdf3+0x3b0>
20089010:	1c21c83a 	sub	r16,r3,r16
20089014:	81400044 	addi	r5,r16,1
20089018:	00c007c4 	movi	r3,31
2008901c:	19409616 	blt	r3,r5,20089278 <__subdf3+0x430>
20089020:	1c21c83a 	sub	r16,r3,r16
20089024:	8c08983a 	sll	r4,r17,r16
20089028:	8946d83a 	srl	r3,r17,r5
2008902c:	9c20983a 	sll	r16,r19,r16
20089030:	2008c03a 	cmpne	r4,r4,zero
20089034:	994ad83a 	srl	r5,r19,r5
20089038:	1c06b03a 	or	r3,r3,r16
2008903c:	1922b03a 	or	r17,r3,r4
20089040:	0021883a 	mov	r16,zero
20089044:	003fa306 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
20089048:	2880202c 	andhi	r2,r5,128
2008904c:	9200004c 	andi	r8,r18,1
20089050:	103fac1e 	bne	r2,zero,20088f04 <__flash_rwdata_start+0xfffee098>
20089054:	2804977a 	slli	r2,r5,29
20089058:	8822d0fa 	srli	r17,r17,3
2008905c:	00c1ffc4 	movi	r3,2047
20089060:	280ad0fa 	srli	r5,r5,3
20089064:	1444b03a 	or	r2,r2,r17
20089068:	80c02726 	beq	r16,r3,20089108 <__subdf3+0x2c0>
2008906c:	01000434 	movhi	r4,16
20089070:	213fffc4 	addi	r4,r4,-1
20089074:	80e0703a 	and	r16,r16,r3
20089078:	2908703a 	and	r4,r5,r4
2008907c:	003fad06 	br	20088f34 <__flash_rwdata_start+0xfffee0c8>
20089080:	0080690e 	bge	zero,r2,20089228 <__subdf3+0x3e0>
20089084:	50002f26 	beq	r10,zero,20089144 <__subdf3+0x2fc>
20089088:	0101ffc4 	movi	r4,2047
2008908c:	813f9126 	beq	r16,r4,20088ed4 <__flash_rwdata_start+0xfffee068>
20089090:	18c02034 	orhi	r3,r3,128
20089094:	01000e04 	movi	r4,56
20089098:	2080b00e 	bge	r4,r2,2008935c <__subdf3+0x514>
2008909c:	198cb03a 	or	r6,r3,r6
200890a0:	300ec03a 	cmpne	r7,r6,zero
200890a4:	0005883a 	mov	r2,zero
200890a8:	3c4f883a 	add	r7,r7,r17
200890ac:	3c63803a 	cmpltu	r17,r7,r17
200890b0:	114b883a 	add	r5,r2,r5
200890b4:	2c4b883a 	add	r5,r5,r17
200890b8:	3823883a 	mov	r17,r7
200890bc:	2880202c 	andhi	r2,r5,128
200890c0:	10002e26 	beq	r2,zero,2008917c <__subdf3+0x334>
200890c4:	84000044 	addi	r16,r16,1
200890c8:	0081ffc4 	movi	r2,2047
200890cc:	8080de26 	beq	r16,r2,20089448 <__subdf3+0x600>
200890d0:	00bfe034 	movhi	r2,65408
200890d4:	10bfffc4 	addi	r2,r2,-1
200890d8:	288a703a 	and	r5,r5,r2
200890dc:	880cd07a 	srli	r6,r17,1
200890e0:	280897fa 	slli	r4,r5,31
200890e4:	88c0004c 	andi	r3,r17,1
200890e8:	30e2b03a 	or	r17,r6,r3
200890ec:	280ad07a 	srli	r5,r5,1
200890f0:	8922b03a 	or	r17,r17,r4
200890f4:	003f7706 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200890f8:	1984b03a 	or	r2,r3,r6
200890fc:	103f6e26 	beq	r2,zero,20088eb8 <__flash_rwdata_start+0xfffee04c>
20089100:	39c03fcc 	andi	r7,r7,255
20089104:	003f6d06 	br	20088ebc <__flash_rwdata_start+0xfffee050>
20089108:	1146b03a 	or	r3,r2,r5
2008910c:	18003f26 	beq	r3,zero,2008920c <__subdf3+0x3c4>
20089110:	00c00434 	movhi	r3,16
20089114:	29000234 	orhi	r4,r5,8
20089118:	18ffffc4 	addi	r3,r3,-1
2008911c:	20c8703a 	and	r4,r4,r3
20089120:	003f8406 	br	20088f34 <__flash_rwdata_start+0xfffee0c8>
20089124:	10bfffc4 	addi	r2,r2,-1
20089128:	1000501e 	bne	r2,zero,2008926c <__subdf3+0x424>
2008912c:	898fc83a 	sub	r7,r17,r6
20089130:	89e3803a 	cmpltu	r17,r17,r7
20089134:	28cbc83a 	sub	r5,r5,r3
20089138:	2c4bc83a 	sub	r5,r5,r17
2008913c:	3823883a 	mov	r17,r7
20089140:	003fa106 	br	20088fc8 <__flash_rwdata_start+0xfffee15c>
20089144:	1988b03a 	or	r4,r3,r6
20089148:	203f6226 	beq	r4,zero,20088ed4 <__flash_rwdata_start+0xfffee068>
2008914c:	10bfffc4 	addi	r2,r2,-1
20089150:	10009b1e 	bne	r2,zero,200893c0 <__subdf3+0x578>
20089154:	344d883a 	add	r6,r6,r17
20089158:	3463803a 	cmpltu	r17,r6,r17
2008915c:	194b883a 	add	r5,r3,r5
20089160:	2c4b883a 	add	r5,r5,r17
20089164:	3023883a 	mov	r17,r6
20089168:	003fd406 	br	200890bc <__flash_rwdata_start+0xfffee250>
2008916c:	1106b03a 	or	r3,r2,r4
20089170:	1800b426 	beq	r3,zero,20089444 <__subdf3+0x5fc>
20089174:	100b883a 	mov	r5,r2
20089178:	2023883a 	mov	r17,r4
2008917c:	888001cc 	andi	r2,r17,7
20089180:	103f561e 	bne	r2,zero,20088edc <__flash_rwdata_start+0xfffee070>
20089184:	9200004c 	andi	r8,r18,1
20089188:	003fb206 	br	20089054 <__flash_rwdata_start+0xfffee1e8>
2008918c:	1000531e 	bne	r2,zero,200892dc <__subdf3+0x494>
20089190:	80800044 	addi	r2,r16,1
20089194:	1081ffcc 	andi	r2,r2,2047
20089198:	01000044 	movi	r4,1
2008919c:	2080a00e 	bge	r4,r2,20089420 <__subdf3+0x5d8>
200891a0:	8985c83a 	sub	r2,r17,r6
200891a4:	8889803a 	cmpltu	r4,r17,r2
200891a8:	28e7c83a 	sub	r19,r5,r3
200891ac:	9927c83a 	sub	r19,r19,r4
200891b0:	9900202c 	andhi	r4,r19,128
200891b4:	20006226 	beq	r4,zero,20089340 <__subdf3+0x4f8>
200891b8:	3463c83a 	sub	r17,r6,r17
200891bc:	194bc83a 	sub	r5,r3,r5
200891c0:	344d803a 	cmpltu	r6,r6,r17
200891c4:	29a7c83a 	sub	r19,r5,r6
200891c8:	3825883a 	mov	r18,r7
200891cc:	983f841e 	bne	r19,zero,20088fe0 <__flash_rwdata_start+0xfffee174>
200891d0:	8809883a 	mov	r4,r17
200891d4:	0089bbc0 	call	20089bbc <__clzsi2>
200891d8:	10800804 	addi	r2,r2,32
200891dc:	10fffe04 	addi	r3,r2,-8
200891e0:	010007c4 	movi	r4,31
200891e4:	20ff830e 	bge	r4,r3,20088ff4 <__flash_rwdata_start+0xfffee188>
200891e8:	14fff604 	addi	r19,r2,-40
200891ec:	8ce6983a 	sll	r19,r17,r19
200891f0:	0023883a 	mov	r17,zero
200891f4:	1c3f860e 	bge	r3,r16,20089010 <__flash_rwdata_start+0xfffee1a4>
200891f8:	017fe034 	movhi	r5,65408
200891fc:	297fffc4 	addi	r5,r5,-1
20089200:	80e1c83a 	sub	r16,r16,r3
20089204:	994a703a 	and	r5,r19,r5
20089208:	003f3206 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
2008920c:	0009883a 	mov	r4,zero
20089210:	0005883a 	mov	r2,zero
20089214:	003f4706 	br	20088f34 <__flash_rwdata_start+0xfffee0c8>
20089218:	198cb03a 	or	r6,r3,r6
2008921c:	300cc03a 	cmpne	r6,r6,zero
20089220:	0005883a 	mov	r2,zero
20089224:	003f6306 	br	20088fb4 <__flash_rwdata_start+0xfffee148>
20089228:	10009d1e 	bne	r2,zero,200894a0 <__subdf3+0x658>
2008922c:	81c00044 	addi	r7,r16,1
20089230:	3881ffcc 	andi	r2,r7,2047
20089234:	02400044 	movi	r9,1
20089238:	4880680e 	bge	r9,r2,200893dc <__subdf3+0x594>
2008923c:	0081ffc4 	movi	r2,2047
20089240:	3880ae26 	beq	r7,r2,200894fc <__subdf3+0x6b4>
20089244:	344d883a 	add	r6,r6,r17
20089248:	3463803a 	cmpltu	r17,r6,r17
2008924c:	194b883a 	add	r5,r3,r5
20089250:	2c4b883a 	add	r5,r5,r17
20089254:	282297fa 	slli	r17,r5,31
20089258:	300cd07a 	srli	r6,r6,1
2008925c:	280ad07a 	srli	r5,r5,1
20089260:	3821883a 	mov	r16,r7
20089264:	89a2b03a 	or	r17,r17,r6
20089268:	003f1a06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
2008926c:	0101ffc4 	movi	r4,2047
20089270:	813f431e 	bne	r16,r4,20088f80 <__flash_rwdata_start+0xfffee114>
20089274:	003f1706 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
20089278:	80bff844 	addi	r2,r16,-31
2008927c:	00c00804 	movi	r3,32
20089280:	9884d83a 	srl	r2,r19,r2
20089284:	28c05126 	beq	r5,r3,200893cc <__subdf3+0x584>
20089288:	00c00fc4 	movi	r3,63
2008928c:	1c21c83a 	sub	r16,r3,r16
20089290:	9c26983a 	sll	r19,r19,r16
20089294:	9c62b03a 	or	r17,r19,r17
20089298:	8822c03a 	cmpne	r17,r17,zero
2008929c:	88a2b03a 	or	r17,r17,r2
200892a0:	000b883a 	mov	r5,zero
200892a4:	0021883a 	mov	r16,zero
200892a8:	003fb406 	br	2008917c <__flash_rwdata_start+0xfffee310>
200892ac:	113ff804 	addi	r4,r2,-32
200892b0:	01c00804 	movi	r7,32
200892b4:	1908d83a 	srl	r4,r3,r4
200892b8:	11c04626 	beq	r2,r7,200893d4 <__subdf3+0x58c>
200892bc:	01c01004 	movi	r7,64
200892c0:	3885c83a 	sub	r2,r7,r2
200892c4:	1884983a 	sll	r2,r3,r2
200892c8:	118cb03a 	or	r6,r2,r6
200892cc:	300cc03a 	cmpne	r6,r6,zero
200892d0:	310cb03a 	or	r6,r6,r4
200892d4:	0005883a 	mov	r2,zero
200892d8:	003f3606 	br	20088fb4 <__flash_rwdata_start+0xfffee148>
200892dc:	80002b26 	beq	r16,zero,2008938c <__subdf3+0x544>
200892e0:	0101ffc4 	movi	r4,2047
200892e4:	51006926 	beq	r10,r4,2008948c <__subdf3+0x644>
200892e8:	0085c83a 	sub	r2,zero,r2
200892ec:	29402034 	orhi	r5,r5,128
200892f0:	01000e04 	movi	r4,56
200892f4:	20807d16 	blt	r4,r2,200894ec <__subdf3+0x6a4>
200892f8:	010007c4 	movi	r4,31
200892fc:	2080d916 	blt	r4,r2,20089664 <__subdf3+0x81c>
20089300:	01000804 	movi	r4,32
20089304:	2089c83a 	sub	r4,r4,r2
20089308:	2912983a 	sll	r9,r5,r4
2008930c:	8890d83a 	srl	r8,r17,r2
20089310:	8908983a 	sll	r4,r17,r4
20089314:	2884d83a 	srl	r2,r5,r2
20089318:	4a22b03a 	or	r17,r9,r8
2008931c:	2008c03a 	cmpne	r4,r4,zero
20089320:	8922b03a 	or	r17,r17,r4
20089324:	3463c83a 	sub	r17,r6,r17
20089328:	1885c83a 	sub	r2,r3,r2
2008932c:	344d803a 	cmpltu	r6,r6,r17
20089330:	118bc83a 	sub	r5,r2,r6
20089334:	5021883a 	mov	r16,r10
20089338:	3825883a 	mov	r18,r7
2008933c:	003f2206 	br	20088fc8 <__flash_rwdata_start+0xfffee15c>
20089340:	9886b03a 	or	r3,r19,r2
20089344:	18001c1e 	bne	r3,zero,200893b8 <__subdf3+0x570>
20089348:	0011883a 	mov	r8,zero
2008934c:	000b883a 	mov	r5,zero
20089350:	0023883a 	mov	r17,zero
20089354:	0021883a 	mov	r16,zero
20089358:	003f3e06 	br	20089054 <__flash_rwdata_start+0xfffee1e8>
2008935c:	010007c4 	movi	r4,31
20089360:	20803c16 	blt	r4,r2,20089454 <__subdf3+0x60c>
20089364:	01000804 	movi	r4,32
20089368:	2089c83a 	sub	r4,r4,r2
2008936c:	1912983a 	sll	r9,r3,r4
20089370:	308ed83a 	srl	r7,r6,r2
20089374:	3108983a 	sll	r4,r6,r4
20089378:	1884d83a 	srl	r2,r3,r2
2008937c:	49ceb03a 	or	r7,r9,r7
20089380:	2008c03a 	cmpne	r4,r4,zero
20089384:	390eb03a 	or	r7,r7,r4
20089388:	003f4706 	br	200890a8 <__flash_rwdata_start+0xfffee23c>
2008938c:	2c48b03a 	or	r4,r5,r17
20089390:	20003e26 	beq	r4,zero,2008948c <__subdf3+0x644>
20089394:	0084303a 	nor	r2,zero,r2
20089398:	10003a1e 	bne	r2,zero,20089484 <__subdf3+0x63c>
2008939c:	3463c83a 	sub	r17,r6,r17
200893a0:	194bc83a 	sub	r5,r3,r5
200893a4:	344d803a 	cmpltu	r6,r6,r17
200893a8:	298bc83a 	sub	r5,r5,r6
200893ac:	5021883a 	mov	r16,r10
200893b0:	3825883a 	mov	r18,r7
200893b4:	003f0406 	br	20088fc8 <__flash_rwdata_start+0xfffee15c>
200893b8:	1023883a 	mov	r17,r2
200893bc:	003f0706 	br	20088fdc <__flash_rwdata_start+0xfffee170>
200893c0:	0101ffc4 	movi	r4,2047
200893c4:	813f331e 	bne	r16,r4,20089094 <__flash_rwdata_start+0xfffee228>
200893c8:	003ec206 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200893cc:	0027883a 	mov	r19,zero
200893d0:	003fb006 	br	20089294 <__flash_rwdata_start+0xfffee428>
200893d4:	0005883a 	mov	r2,zero
200893d8:	003fbb06 	br	200892c8 <__flash_rwdata_start+0xfffee45c>
200893dc:	2c44b03a 	or	r2,r5,r17
200893e0:	80008b1e 	bne	r16,zero,20089610 <__subdf3+0x7c8>
200893e4:	1000b526 	beq	r2,zero,200896bc <__subdf3+0x874>
200893e8:	1984b03a 	or	r2,r3,r6
200893ec:	103eb926 	beq	r2,zero,20088ed4 <__flash_rwdata_start+0xfffee068>
200893f0:	3449883a 	add	r4,r6,r17
200893f4:	2463803a 	cmpltu	r17,r4,r17
200893f8:	194b883a 	add	r5,r3,r5
200893fc:	2c4b883a 	add	r5,r5,r17
20089400:	2880202c 	andhi	r2,r5,128
20089404:	2023883a 	mov	r17,r4
20089408:	103f5c26 	beq	r2,zero,2008917c <__flash_rwdata_start+0xfffee310>
2008940c:	00bfe034 	movhi	r2,65408
20089410:	10bfffc4 	addi	r2,r2,-1
20089414:	4821883a 	mov	r16,r9
20089418:	288a703a 	and	r5,r5,r2
2008941c:	003ead06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
20089420:	2c44b03a 	or	r2,r5,r17
20089424:	8000291e 	bne	r16,zero,200894cc <__subdf3+0x684>
20089428:	10004f1e 	bne	r2,zero,20089568 <__subdf3+0x720>
2008942c:	1984b03a 	or	r2,r3,r6
20089430:	10000426 	beq	r2,zero,20089444 <__subdf3+0x5fc>
20089434:	180b883a 	mov	r5,r3
20089438:	3023883a 	mov	r17,r6
2008943c:	3825883a 	mov	r18,r7
20089440:	003ea406 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
20089444:	0011883a 	mov	r8,zero
20089448:	000b883a 	mov	r5,zero
2008944c:	0023883a 	mov	r17,zero
20089450:	003f0006 	br	20089054 <__flash_rwdata_start+0xfffee1e8>
20089454:	11fff804 	addi	r7,r2,-32
20089458:	19c8d83a 	srl	r4,r3,r7
2008945c:	01c00804 	movi	r7,32
20089460:	11c07e26 	beq	r2,r7,2008965c <__subdf3+0x814>
20089464:	01c01004 	movi	r7,64
20089468:	3885c83a 	sub	r2,r7,r2
2008946c:	1884983a 	sll	r2,r3,r2
20089470:	118cb03a 	or	r6,r2,r6
20089474:	300ec03a 	cmpne	r7,r6,zero
20089478:	390eb03a 	or	r7,r7,r4
2008947c:	0005883a 	mov	r2,zero
20089480:	003f0906 	br	200890a8 <__flash_rwdata_start+0xfffee23c>
20089484:	0101ffc4 	movi	r4,2047
20089488:	513f991e 	bne	r10,r4,200892f0 <__flash_rwdata_start+0xfffee484>
2008948c:	180b883a 	mov	r5,r3
20089490:	3023883a 	mov	r17,r6
20089494:	5021883a 	mov	r16,r10
20089498:	3825883a 	mov	r18,r7
2008949c:	003e8d06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200894a0:	80001a1e 	bne	r16,zero,2008950c <__subdf3+0x6c4>
200894a4:	2c48b03a 	or	r4,r5,r17
200894a8:	20005526 	beq	r4,zero,20089600 <__subdf3+0x7b8>
200894ac:	0084303a 	nor	r2,zero,r2
200894b0:	1000511e 	bne	r2,zero,200895f8 <__subdf3+0x7b0>
200894b4:	89a3883a 	add	r17,r17,r6
200894b8:	194b883a 	add	r5,r3,r5
200894bc:	898d803a 	cmpltu	r6,r17,r6
200894c0:	298b883a 	add	r5,r5,r6
200894c4:	5021883a 	mov	r16,r10
200894c8:	003efc06 	br	200890bc <__flash_rwdata_start+0xfffee250>
200894cc:	1000341e 	bne	r2,zero,200895a0 <__subdf3+0x758>
200894d0:	1984b03a 	or	r2,r3,r6
200894d4:	10006f26 	beq	r2,zero,20089694 <__subdf3+0x84c>
200894d8:	180b883a 	mov	r5,r3
200894dc:	3023883a 	mov	r17,r6
200894e0:	3825883a 	mov	r18,r7
200894e4:	0401ffc4 	movi	r16,2047
200894e8:	003e7a06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200894ec:	2c62b03a 	or	r17,r5,r17
200894f0:	8822c03a 	cmpne	r17,r17,zero
200894f4:	0005883a 	mov	r2,zero
200894f8:	003f8a06 	br	20089324 <__flash_rwdata_start+0xfffee4b8>
200894fc:	3821883a 	mov	r16,r7
20089500:	000b883a 	mov	r5,zero
20089504:	0023883a 	mov	r17,zero
20089508:	003ed206 	br	20089054 <__flash_rwdata_start+0xfffee1e8>
2008950c:	0101ffc4 	movi	r4,2047
20089510:	51003b26 	beq	r10,r4,20089600 <__subdf3+0x7b8>
20089514:	0085c83a 	sub	r2,zero,r2
20089518:	29402034 	orhi	r5,r5,128
2008951c:	01000e04 	movi	r4,56
20089520:	20806216 	blt	r4,r2,200896ac <__subdf3+0x864>
20089524:	010007c4 	movi	r4,31
20089528:	20806b16 	blt	r4,r2,200896d8 <__subdf3+0x890>
2008952c:	01000804 	movi	r4,32
20089530:	2089c83a 	sub	r4,r4,r2
20089534:	2912983a 	sll	r9,r5,r4
20089538:	888ed83a 	srl	r7,r17,r2
2008953c:	8908983a 	sll	r4,r17,r4
20089540:	2884d83a 	srl	r2,r5,r2
20089544:	49e2b03a 	or	r17,r9,r7
20089548:	2008c03a 	cmpne	r4,r4,zero
2008954c:	8922b03a 	or	r17,r17,r4
20089550:	89a3883a 	add	r17,r17,r6
20089554:	10c5883a 	add	r2,r2,r3
20089558:	898d803a 	cmpltu	r6,r17,r6
2008955c:	118b883a 	add	r5,r2,r6
20089560:	5021883a 	mov	r16,r10
20089564:	003ed506 	br	200890bc <__flash_rwdata_start+0xfffee250>
20089568:	1984b03a 	or	r2,r3,r6
2008956c:	103e5926 	beq	r2,zero,20088ed4 <__flash_rwdata_start+0xfffee068>
20089570:	8989c83a 	sub	r4,r17,r6
20089574:	8911803a 	cmpltu	r8,r17,r4
20089578:	28c5c83a 	sub	r2,r5,r3
2008957c:	1205c83a 	sub	r2,r2,r8
20089580:	1200202c 	andhi	r8,r2,128
20089584:	403ef926 	beq	r8,zero,2008916c <__flash_rwdata_start+0xfffee300>
20089588:	3463c83a 	sub	r17,r6,r17
2008958c:	194bc83a 	sub	r5,r3,r5
20089590:	344d803a 	cmpltu	r6,r6,r17
20089594:	298bc83a 	sub	r5,r5,r6
20089598:	3825883a 	mov	r18,r7
2008959c:	003e4d06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200895a0:	1984b03a 	or	r2,r3,r6
200895a4:	10002b26 	beq	r2,zero,20089654 <__subdf3+0x80c>
200895a8:	2808d0fa 	srli	r4,r5,3
200895ac:	8822d0fa 	srli	r17,r17,3
200895b0:	280a977a 	slli	r5,r5,29
200895b4:	2080022c 	andhi	r2,r4,8
200895b8:	2c62b03a 	or	r17,r5,r17
200895bc:	10000826 	beq	r2,zero,200895e0 <__subdf3+0x798>
200895c0:	1810d0fa 	srli	r8,r3,3
200895c4:	4080022c 	andhi	r2,r8,8
200895c8:	1000051e 	bne	r2,zero,200895e0 <__subdf3+0x798>
200895cc:	300cd0fa 	srli	r6,r6,3
200895d0:	1804977a 	slli	r2,r3,29
200895d4:	4009883a 	mov	r4,r8
200895d8:	3825883a 	mov	r18,r7
200895dc:	11a2b03a 	or	r17,r2,r6
200895e0:	880ad77a 	srli	r5,r17,29
200895e4:	200890fa 	slli	r4,r4,3
200895e8:	882290fa 	slli	r17,r17,3
200895ec:	0401ffc4 	movi	r16,2047
200895f0:	290ab03a 	or	r5,r5,r4
200895f4:	003e3706 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200895f8:	0101ffc4 	movi	r4,2047
200895fc:	513fc71e 	bne	r10,r4,2008951c <__flash_rwdata_start+0xfffee6b0>
20089600:	180b883a 	mov	r5,r3
20089604:	3023883a 	mov	r17,r6
20089608:	5021883a 	mov	r16,r10
2008960c:	003e3106 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
20089610:	10002d26 	beq	r2,zero,200896c8 <__subdf3+0x880>
20089614:	1984b03a 	or	r2,r3,r6
20089618:	10000e26 	beq	r2,zero,20089654 <__subdf3+0x80c>
2008961c:	2808d0fa 	srli	r4,r5,3
20089620:	8822d0fa 	srli	r17,r17,3
20089624:	280a977a 	slli	r5,r5,29
20089628:	2080022c 	andhi	r2,r4,8
2008962c:	2c62b03a 	or	r17,r5,r17
20089630:	103feb26 	beq	r2,zero,200895e0 <__flash_rwdata_start+0xfffee774>
20089634:	180ed0fa 	srli	r7,r3,3
20089638:	3880022c 	andhi	r2,r7,8
2008963c:	103fe81e 	bne	r2,zero,200895e0 <__flash_rwdata_start+0xfffee774>
20089640:	300cd0fa 	srli	r6,r6,3
20089644:	1804977a 	slli	r2,r3,29
20089648:	3809883a 	mov	r4,r7
2008964c:	11a2b03a 	or	r17,r2,r6
20089650:	003fe306 	br	200895e0 <__flash_rwdata_start+0xfffee774>
20089654:	0401ffc4 	movi	r16,2047
20089658:	003e1e06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
2008965c:	0005883a 	mov	r2,zero
20089660:	003f8306 	br	20089470 <__flash_rwdata_start+0xfffee604>
20089664:	113ff804 	addi	r4,r2,-32
20089668:	02000804 	movi	r8,32
2008966c:	2908d83a 	srl	r4,r5,r4
20089670:	12002526 	beq	r2,r8,20089708 <__subdf3+0x8c0>
20089674:	02001004 	movi	r8,64
20089678:	4085c83a 	sub	r2,r8,r2
2008967c:	288a983a 	sll	r5,r5,r2
20089680:	2c62b03a 	or	r17,r5,r17
20089684:	8822c03a 	cmpne	r17,r17,zero
20089688:	8922b03a 	or	r17,r17,r4
2008968c:	0005883a 	mov	r2,zero
20089690:	003f2406 	br	20089324 <__flash_rwdata_start+0xfffee4b8>
20089694:	01402034 	movhi	r5,128
20089698:	0011883a 	mov	r8,zero
2008969c:	297fffc4 	addi	r5,r5,-1
200896a0:	047ffe04 	movi	r17,-8
200896a4:	0401ffc4 	movi	r16,2047
200896a8:	003e6a06 	br	20089054 <__flash_rwdata_start+0xfffee1e8>
200896ac:	2c62b03a 	or	r17,r5,r17
200896b0:	8822c03a 	cmpne	r17,r17,zero
200896b4:	0005883a 	mov	r2,zero
200896b8:	003fa506 	br	20089550 <__flash_rwdata_start+0xfffee6e4>
200896bc:	180b883a 	mov	r5,r3
200896c0:	3023883a 	mov	r17,r6
200896c4:	003e0306 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200896c8:	180b883a 	mov	r5,r3
200896cc:	3023883a 	mov	r17,r6
200896d0:	0401ffc4 	movi	r16,2047
200896d4:	003dff06 	br	20088ed4 <__flash_rwdata_start+0xfffee068>
200896d8:	113ff804 	addi	r4,r2,-32
200896dc:	01c00804 	movi	r7,32
200896e0:	2908d83a 	srl	r4,r5,r4
200896e4:	11c00a26 	beq	r2,r7,20089710 <__subdf3+0x8c8>
200896e8:	01c01004 	movi	r7,64
200896ec:	3885c83a 	sub	r2,r7,r2
200896f0:	288a983a 	sll	r5,r5,r2
200896f4:	2c62b03a 	or	r17,r5,r17
200896f8:	8822c03a 	cmpne	r17,r17,zero
200896fc:	8922b03a 	or	r17,r17,r4
20089700:	0005883a 	mov	r2,zero
20089704:	003f9206 	br	20089550 <__flash_rwdata_start+0xfffee6e4>
20089708:	000b883a 	mov	r5,zero
2008970c:	003fdc06 	br	20089680 <__flash_rwdata_start+0xfffee814>
20089710:	000b883a 	mov	r5,zero
20089714:	003ff706 	br	200896f4 <__flash_rwdata_start+0xfffee888>

20089718 <__fixdfsi>:
20089718:	2806d53a 	srli	r3,r5,20
2008971c:	00800434 	movhi	r2,16
20089720:	10bfffc4 	addi	r2,r2,-1
20089724:	18c1ffcc 	andi	r3,r3,2047
20089728:	0180ff84 	movi	r6,1022
2008972c:	2884703a 	and	r2,r5,r2
20089730:	280ad7fa 	srli	r5,r5,31
20089734:	30c0130e 	bge	r6,r3,20089784 <__fixdfsi+0x6c>
20089738:	01810744 	movi	r6,1053
2008973c:	30c00d16 	blt	r6,r3,20089774 <__fixdfsi+0x5c>
20089740:	01810cc4 	movi	r6,1075
20089744:	30cdc83a 	sub	r6,r6,r3
20089748:	01c007c4 	movi	r7,31
2008974c:	10800434 	orhi	r2,r2,16
20089750:	39800e0e 	bge	r7,r6,2008978c <__fixdfsi+0x74>
20089754:	010104c4 	movi	r4,1043
20089758:	20c7c83a 	sub	r3,r4,r3
2008975c:	10c6d83a 	srl	r3,r2,r3
20089760:	29403fcc 	andi	r5,r5,255
20089764:	0145c83a 	sub	r2,zero,r5
20089768:	1884f03a 	xor	r2,r3,r2
2008976c:	1145883a 	add	r2,r2,r5
20089770:	f800283a 	ret
20089774:	00a00034 	movhi	r2,32768
20089778:	10bfffc4 	addi	r2,r2,-1
2008977c:	2885883a 	add	r2,r5,r2
20089780:	f800283a 	ret
20089784:	0005883a 	mov	r2,zero
20089788:	f800283a 	ret
2008978c:	18fefb44 	addi	r3,r3,-1043
20089790:	2188d83a 	srl	r4,r4,r6
20089794:	10c6983a 	sll	r3,r2,r3
20089798:	20c6b03a 	or	r3,r4,r3
2008979c:	003ff006 	br	20089760 <__flash_rwdata_start+0xfffee8f4>

200897a0 <__floatsidf>:
200897a0:	defffd04 	addi	sp,sp,-12
200897a4:	dc400115 	stw	r17,4(sp)
200897a8:	dfc00215 	stw	ra,8(sp)
200897ac:	dc000015 	stw	r16,0(sp)
200897b0:	2023883a 	mov	r17,r4
200897b4:	20001426 	beq	r4,zero,20089808 <__floatsidf+0x68>
200897b8:	2020d7fa 	srli	r16,r4,31
200897bc:	80000126 	beq	r16,zero,200897c4 <__floatsidf+0x24>
200897c0:	0123c83a 	sub	r17,zero,r4
200897c4:	8809883a 	mov	r4,r17
200897c8:	0089bbc0 	call	20089bbc <__clzsi2>
200897cc:	01410784 	movi	r5,1054
200897d0:	00c00284 	movi	r3,10
200897d4:	288bc83a 	sub	r5,r5,r2
200897d8:	18801c16 	blt	r3,r2,2008984c <__floatsidf+0xac>
200897dc:	00c002c4 	movi	r3,11
200897e0:	1887c83a 	sub	r3,r3,r2
200897e4:	88c8d83a 	srl	r4,r17,r3
200897e8:	00c00434 	movhi	r3,16
200897ec:	18ffffc4 	addi	r3,r3,-1
200897f0:	10800544 	addi	r2,r2,21
200897f4:	20c8703a 	and	r4,r4,r3
200897f8:	8884983a 	sll	r2,r17,r2
200897fc:	28c1ffcc 	andi	r3,r5,2047
20089800:	800d883a 	mov	r6,r16
20089804:	00000406 	br	20089818 <__floatsidf+0x78>
20089808:	000d883a 	mov	r6,zero
2008980c:	0007883a 	mov	r3,zero
20089810:	0009883a 	mov	r4,zero
20089814:	0005883a 	mov	r2,zero
20089818:	180a953a 	slli	r5,r3,20
2008981c:	31803fcc 	andi	r6,r6,255
20089820:	00c00434 	movhi	r3,16
20089824:	300c97fa 	slli	r6,r6,31
20089828:	18ffffc4 	addi	r3,r3,-1
2008982c:	20c6703a 	and	r3,r4,r3
20089830:	1946b03a 	or	r3,r3,r5
20089834:	1986b03a 	or	r3,r3,r6
20089838:	dfc00217 	ldw	ra,8(sp)
2008983c:	dc400117 	ldw	r17,4(sp)
20089840:	dc000017 	ldw	r16,0(sp)
20089844:	dec00304 	addi	sp,sp,12
20089848:	f800283a 	ret
2008984c:	10fffd44 	addi	r3,r2,-11
20089850:	88c8983a 	sll	r4,r17,r3
20089854:	00800434 	movhi	r2,16
20089858:	10bfffc4 	addi	r2,r2,-1
2008985c:	2088703a 	and	r4,r4,r2
20089860:	28c1ffcc 	andi	r3,r5,2047
20089864:	800d883a 	mov	r6,r16
20089868:	0005883a 	mov	r2,zero
2008986c:	003fea06 	br	20089818 <__flash_rwdata_start+0xfffee9ac>

20089870 <__floatunsidf>:
20089870:	defffe04 	addi	sp,sp,-8
20089874:	dc000015 	stw	r16,0(sp)
20089878:	dfc00115 	stw	ra,4(sp)
2008987c:	2021883a 	mov	r16,r4
20089880:	20001026 	beq	r4,zero,200898c4 <__floatunsidf+0x54>
20089884:	0089bbc0 	call	20089bbc <__clzsi2>
20089888:	01410784 	movi	r5,1054
2008988c:	100d883a 	mov	r6,r2
20089890:	288bc83a 	sub	r5,r5,r2
20089894:	00800284 	movi	r2,10
20089898:	11801616 	blt	r2,r6,200898f4 <__floatunsidf+0x84>
2008989c:	008002c4 	movi	r2,11
200898a0:	1185c83a 	sub	r2,r2,r6
200898a4:	8084d83a 	srl	r2,r16,r2
200898a8:	00c00434 	movhi	r3,16
200898ac:	31c00544 	addi	r7,r6,21
200898b0:	18ffffc4 	addi	r3,r3,-1
200898b4:	81e0983a 	sll	r16,r16,r7
200898b8:	10cc703a 	and	r6,r2,r3
200898bc:	2941ffcc 	andi	r5,r5,2047
200898c0:	00000206 	br	200898cc <__floatunsidf+0x5c>
200898c4:	000b883a 	mov	r5,zero
200898c8:	000d883a 	mov	r6,zero
200898cc:	280a953a 	slli	r5,r5,20
200898d0:	00c00434 	movhi	r3,16
200898d4:	18ffffc4 	addi	r3,r3,-1
200898d8:	30c6703a 	and	r3,r6,r3
200898dc:	8005883a 	mov	r2,r16
200898e0:	1946b03a 	or	r3,r3,r5
200898e4:	dfc00117 	ldw	ra,4(sp)
200898e8:	dc000017 	ldw	r16,0(sp)
200898ec:	dec00204 	addi	sp,sp,8
200898f0:	f800283a 	ret
200898f4:	31bffd44 	addi	r6,r6,-11
200898f8:	818c983a 	sll	r6,r16,r6
200898fc:	00800434 	movhi	r2,16
20089900:	10bfffc4 	addi	r2,r2,-1
20089904:	2941ffcc 	andi	r5,r5,2047
20089908:	0021883a 	mov	r16,zero
2008990c:	308c703a 	and	r6,r6,r2
20089910:	003fee06 	br	200898cc <__flash_rwdata_start+0xfffeea60>

20089914 <__extendsfdf2>:
20089914:	200ad5fa 	srli	r5,r4,23
20089918:	defffd04 	addi	sp,sp,-12
2008991c:	dc400115 	stw	r17,4(sp)
20089920:	29403fcc 	andi	r5,r5,255
20089924:	29800044 	addi	r6,r5,1
20089928:	04402034 	movhi	r17,128
2008992c:	dc000015 	stw	r16,0(sp)
20089930:	8c7fffc4 	addi	r17,r17,-1
20089934:	dfc00215 	stw	ra,8(sp)
20089938:	31803fcc 	andi	r6,r6,255
2008993c:	00800044 	movi	r2,1
20089940:	8922703a 	and	r17,r17,r4
20089944:	2020d7fa 	srli	r16,r4,31
20089948:	1180110e 	bge	r2,r6,20089990 <__extendsfdf2+0x7c>
2008994c:	880ed0fa 	srli	r7,r17,3
20089950:	8822977a 	slli	r17,r17,29
20089954:	2940e004 	addi	r5,r5,896
20089958:	2941ffcc 	andi	r5,r5,2047
2008995c:	280c953a 	slli	r6,r5,20
20089960:	01400434 	movhi	r5,16
20089964:	800697fa 	slli	r3,r16,31
20089968:	297fffc4 	addi	r5,r5,-1
2008996c:	394a703a 	and	r5,r7,r5
20089970:	298ab03a 	or	r5,r5,r6
20089974:	8805883a 	mov	r2,r17
20089978:	28c6b03a 	or	r3,r5,r3
2008997c:	dfc00217 	ldw	ra,8(sp)
20089980:	dc400117 	ldw	r17,4(sp)
20089984:	dc000017 	ldw	r16,0(sp)
20089988:	dec00304 	addi	sp,sp,12
2008998c:	f800283a 	ret
20089990:	2800111e 	bne	r5,zero,200899d8 <__extendsfdf2+0xc4>
20089994:	88001c26 	beq	r17,zero,20089a08 <__extendsfdf2+0xf4>
20089998:	8809883a 	mov	r4,r17
2008999c:	0089bbc0 	call	20089bbc <__clzsi2>
200899a0:	00c00284 	movi	r3,10
200899a4:	18801b16 	blt	r3,r2,20089a14 <__extendsfdf2+0x100>
200899a8:	01c002c4 	movi	r7,11
200899ac:	388fc83a 	sub	r7,r7,r2
200899b0:	10c00544 	addi	r3,r2,21
200899b4:	89ced83a 	srl	r7,r17,r7
200899b8:	88e2983a 	sll	r17,r17,r3
200899bc:	0180e244 	movi	r6,905
200899c0:	308bc83a 	sub	r5,r6,r2
200899c4:	01800434 	movhi	r6,16
200899c8:	31bfffc4 	addi	r6,r6,-1
200899cc:	398e703a 	and	r7,r7,r6
200899d0:	2941ffcc 	andi	r5,r5,2047
200899d4:	003fe006 	br	20089958 <__flash_rwdata_start+0xfffeeaec>
200899d8:	88000826 	beq	r17,zero,200899fc <__extendsfdf2+0xe8>
200899dc:	880ed0fa 	srli	r7,r17,3
200899e0:	00800434 	movhi	r2,16
200899e4:	10bfffc4 	addi	r2,r2,-1
200899e8:	39c00234 	orhi	r7,r7,8
200899ec:	8822977a 	slli	r17,r17,29
200899f0:	388e703a 	and	r7,r7,r2
200899f4:	0141ffc4 	movi	r5,2047
200899f8:	003fd706 	br	20089958 <__flash_rwdata_start+0xfffeeaec>
200899fc:	0141ffc4 	movi	r5,2047
20089a00:	000f883a 	mov	r7,zero
20089a04:	003fd406 	br	20089958 <__flash_rwdata_start+0xfffeeaec>
20089a08:	000b883a 	mov	r5,zero
20089a0c:	000f883a 	mov	r7,zero
20089a10:	003fd106 	br	20089958 <__flash_rwdata_start+0xfffeeaec>
20089a14:	11fffd44 	addi	r7,r2,-11
20089a18:	89ce983a 	sll	r7,r17,r7
20089a1c:	0023883a 	mov	r17,zero
20089a20:	003fe606 	br	200899bc <__flash_rwdata_start+0xfffeeb50>

20089a24 <__truncdfsf2>:
20089a24:	2810d53a 	srli	r8,r5,20
20089a28:	01c00434 	movhi	r7,16
20089a2c:	39ffffc4 	addi	r7,r7,-1
20089a30:	29ce703a 	and	r7,r5,r7
20089a34:	380e90fa 	slli	r7,r7,3
20089a38:	4201ffcc 	andi	r8,r8,2047
20089a3c:	200cd77a 	srli	r6,r4,29
20089a40:	42400044 	addi	r9,r8,1
20089a44:	4a41ffcc 	andi	r9,r9,2047
20089a48:	00800044 	movi	r2,1
20089a4c:	398cb03a 	or	r6,r7,r6
20089a50:	280ad7fa 	srli	r5,r5,31
20089a54:	200e90fa 	slli	r7,r4,3
20089a58:	1240230e 	bge	r2,r9,20089ae8 <__truncdfsf2+0xc4>
20089a5c:	40ff2004 	addi	r3,r8,-896
20089a60:	00803f84 	movi	r2,254
20089a64:	10c01516 	blt	r2,r3,20089abc <__truncdfsf2+0x98>
20089a68:	00c02d0e 	bge	zero,r3,20089b20 <__truncdfsf2+0xfc>
20089a6c:	200891ba 	slli	r4,r4,6
20089a70:	300c90fa 	slli	r6,r6,3
20089a74:	380ed77a 	srli	r7,r7,29
20089a78:	2008c03a 	cmpne	r4,r4,zero
20089a7c:	310cb03a 	or	r6,r6,r4
20089a80:	31ccb03a 	or	r6,r6,r7
20089a84:	308001cc 	andi	r2,r6,7
20089a88:	10000426 	beq	r2,zero,20089a9c <__truncdfsf2+0x78>
20089a8c:	310003cc 	andi	r4,r6,15
20089a90:	00800104 	movi	r2,4
20089a94:	20800126 	beq	r4,r2,20089a9c <__truncdfsf2+0x78>
20089a98:	31800104 	addi	r6,r6,4
20089a9c:	3081002c 	andhi	r2,r6,1024
20089aa0:	10002326 	beq	r2,zero,20089b30 <__truncdfsf2+0x10c>
20089aa4:	18c00044 	addi	r3,r3,1
20089aa8:	00803fc4 	movi	r2,255
20089aac:	18800326 	beq	r3,r2,20089abc <__truncdfsf2+0x98>
20089ab0:	300c91ba 	slli	r6,r6,6
20089ab4:	300cd27a 	srli	r6,r6,9
20089ab8:	00000206 	br	20089ac4 <__truncdfsf2+0xa0>
20089abc:	00ffffc4 	movi	r3,-1
20089ac0:	000d883a 	mov	r6,zero
20089ac4:	18c03fcc 	andi	r3,r3,255
20089ac8:	180895fa 	slli	r4,r3,23
20089acc:	00c02034 	movhi	r3,128
20089ad0:	280a97fa 	slli	r5,r5,31
20089ad4:	18ffffc4 	addi	r3,r3,-1
20089ad8:	30c6703a 	and	r3,r6,r3
20089adc:	1906b03a 	or	r3,r3,r4
20089ae0:	1944b03a 	or	r2,r3,r5
20089ae4:	f800283a 	ret
20089ae8:	4000071e 	bne	r8,zero,20089b08 <__truncdfsf2+0xe4>
20089aec:	31ccb03a 	or	r6,r6,r7
20089af0:	30000d1e 	bne	r6,zero,20089b28 <__truncdfsf2+0x104>
20089af4:	0007883a 	mov	r3,zero
20089af8:	00802034 	movhi	r2,128
20089afc:	10bfffc4 	addi	r2,r2,-1
20089b00:	308c703a 	and	r6,r6,r2
20089b04:	003fef06 	br	20089ac4 <__flash_rwdata_start+0xfffeec58>
20089b08:	31c8b03a 	or	r4,r6,r7
20089b0c:	203feb26 	beq	r4,zero,20089abc <__flash_rwdata_start+0xfffeec50>
20089b10:	300c90fa 	slli	r6,r6,3
20089b14:	00c03fc4 	movi	r3,255
20089b18:	31808034 	orhi	r6,r6,512
20089b1c:	003fd906 	br	20089a84 <__flash_rwdata_start+0xfffeec18>
20089b20:	00bffa44 	movi	r2,-23
20089b24:	1880090e 	bge	r3,r2,20089b4c <__truncdfsf2+0x128>
20089b28:	01800144 	movi	r6,5
20089b2c:	0007883a 	mov	r3,zero
20089b30:	00803fc4 	movi	r2,255
20089b34:	300cd0fa 	srli	r6,r6,3
20089b38:	18bfef1e 	bne	r3,r2,20089af8 <__flash_rwdata_start+0xfffeec8c>
20089b3c:	303fdf26 	beq	r6,zero,20089abc <__flash_rwdata_start+0xfffeec50>
20089b40:	31801034 	orhi	r6,r6,64
20089b44:	00ffffc4 	movi	r3,-1
20089b48:	003feb06 	br	20089af8 <__flash_rwdata_start+0xfffeec8c>
20089b4c:	0080e784 	movi	r2,926
20089b50:	1205c83a 	sub	r2,r2,r8
20089b54:	00c007c4 	movi	r3,31
20089b58:	31802034 	orhi	r6,r6,128
20089b5c:	18800916 	blt	r3,r2,20089b84 <__truncdfsf2+0x160>
20089b60:	423f2084 	addi	r8,r8,-894
20089b64:	3a06983a 	sll	r3,r7,r8
20089b68:	3210983a 	sll	r8,r6,r8
20089b6c:	388ed83a 	srl	r7,r7,r2
20089b70:	180cc03a 	cmpne	r6,r3,zero
20089b74:	418cb03a 	or	r6,r8,r6
20089b78:	31ccb03a 	or	r6,r6,r7
20089b7c:	0007883a 	mov	r3,zero
20089b80:	003fc006 	br	20089a84 <__flash_rwdata_start+0xfffeec18>
20089b84:	00c0df84 	movi	r3,894
20089b88:	1a07c83a 	sub	r3,r3,r8
20089b8c:	01000804 	movi	r4,32
20089b90:	30c6d83a 	srl	r3,r6,r3
20089b94:	11000726 	beq	r2,r4,20089bb4 <__truncdfsf2+0x190>
20089b98:	423f2884 	addi	r8,r8,-862
20089b9c:	3210983a 	sll	r8,r6,r8
20089ba0:	41ceb03a 	or	r7,r8,r7
20089ba4:	380ec03a 	cmpne	r7,r7,zero
20089ba8:	38ccb03a 	or	r6,r7,r3
20089bac:	0007883a 	mov	r3,zero
20089bb0:	003fb406 	br	20089a84 <__flash_rwdata_start+0xfffeec18>
20089bb4:	0011883a 	mov	r8,zero
20089bb8:	003ff906 	br	20089ba0 <__flash_rwdata_start+0xfffeed34>

20089bbc <__clzsi2>:
20089bbc:	00bfffd4 	movui	r2,65535
20089bc0:	11000b36 	bltu	r2,r4,20089bf0 <__clzsi2+0x34>
20089bc4:	00803fc4 	movi	r2,255
20089bc8:	1100122e 	bgeu	r2,r4,20089c14 <__clzsi2+0x58>
20089bcc:	00c00204 	movi	r3,8
20089bd0:	01400604 	movi	r5,24
20089bd4:	20c8d83a 	srl	r4,r4,r3
20089bd8:	00800034 	movhi	r2,0
20089bdc:	108191c4 	addi	r2,r2,1607
20089be0:	1109883a 	add	r4,r2,r4
20089be4:	20800003 	ldbu	r2,0(r4)
20089be8:	2885c83a 	sub	r2,r5,r2
20089bec:	f800283a 	ret
20089bf0:	00804034 	movhi	r2,256
20089bf4:	10bfffc4 	addi	r2,r2,-1
20089bf8:	11000336 	bltu	r2,r4,20089c08 <__clzsi2+0x4c>
20089bfc:	00c00404 	movi	r3,16
20089c00:	180b883a 	mov	r5,r3
20089c04:	003ff306 	br	20089bd4 <__flash_rwdata_start+0xfffeed68>
20089c08:	00c00604 	movi	r3,24
20089c0c:	01400204 	movi	r5,8
20089c10:	003ff006 	br	20089bd4 <__flash_rwdata_start+0xfffeed68>
20089c14:	0007883a 	mov	r3,zero
20089c18:	01400804 	movi	r5,32
20089c1c:	003fed06 	br	20089bd4 <__flash_rwdata_start+0xfffeed68>

20089c20 <exit>:
20089c20:	defffe04 	addi	sp,sp,-8
20089c24:	000b883a 	mov	r5,zero
20089c28:	dc000015 	stw	r16,0(sp)
20089c2c:	dfc00115 	stw	ra,4(sp)
20089c30:	2021883a 	mov	r16,r4
20089c34:	008ef140 	call	2008ef14 <__call_exitprocs>
20089c38:	00800034 	movhi	r2,0
20089c3c:	108a8b04 	addi	r2,r2,10796
20089c40:	11000017 	ldw	r4,0(r2)
20089c44:	20800f17 	ldw	r2,60(r4)
20089c48:	10000126 	beq	r2,zero,20089c50 <exit+0x30>
20089c4c:	103ee83a 	callr	r2
20089c50:	8009883a 	mov	r4,r16
20089c54:	009774c0 	call	2009774c <_exit>

20089c58 <memalign>:
20089c58:	00c00034 	movhi	r3,0
20089c5c:	18ca8c04 	addi	r3,r3,10800
20089c60:	2005883a 	mov	r2,r4
20089c64:	19000017 	ldw	r4,0(r3)
20089c68:	280d883a 	mov	r6,r5
20089c6c:	100b883a 	mov	r5,r2
20089c70:	0089c741 	jmpi	20089c74 <_memalign_r>

20089c74 <_memalign_r>:
20089c74:	defffa04 	addi	sp,sp,-24
20089c78:	dc400115 	stw	r17,4(sp)
20089c7c:	dfc00515 	stw	ra,20(sp)
20089c80:	dd000415 	stw	r20,16(sp)
20089c84:	dcc00315 	stw	r19,12(sp)
20089c88:	dc800215 	stw	r18,8(sp)
20089c8c:	dc000015 	stw	r16,0(sp)
20089c90:	00800204 	movi	r2,8
20089c94:	2823883a 	mov	r17,r5
20089c98:	11404b2e 	bgeu	r2,r5,20089dc8 <_memalign_r+0x154>
20089c9c:	008003c4 	movi	r2,15
20089ca0:	2029883a 	mov	r20,r4
20089ca4:	11400136 	bltu	r2,r5,20089cac <_memalign_r+0x38>
20089ca8:	04400404 	movi	r17,16
20089cac:	308002c4 	addi	r2,r6,11
20089cb0:	00c00584 	movi	r3,22
20089cb4:	18803e2e 	bgeu	r3,r2,20089db0 <_memalign_r+0x13c>
20089cb8:	04bffe04 	movi	r18,-8
20089cbc:	14a4703a 	and	r18,r2,r18
20089cc0:	90003d16 	blt	r18,zero,20089db8 <_memalign_r+0x144>
20089cc4:	91803c36 	bltu	r18,r6,20089db8 <_memalign_r+0x144>
20089cc8:	89400404 	addi	r5,r17,16
20089ccc:	a009883a 	mov	r4,r20
20089cd0:	2c8b883a 	add	r5,r5,r18
20089cd4:	0089e500 	call	20089e50 <_malloc_r>
20089cd8:	1027883a 	mov	r19,r2
20089cdc:	10005026 	beq	r2,zero,20089e20 <_memalign_r+0x1ac>
20089ce0:	a009883a 	mov	r4,r20
20089ce4:	0097ae40 	call	20097ae4 <__malloc_lock>
20089ce8:	9809883a 	mov	r4,r19
20089cec:	880b883a 	mov	r5,r17
20089cf0:	9c3ffe04 	addi	r16,r19,-8
20089cf4:	0086c300 	call	20086c30 <__umodsi3>
20089cf8:	10001c26 	beq	r2,zero,20089d6c <_memalign_r+0xf8>
20089cfc:	88bfffc4 	addi	r2,r17,-1
20089d00:	9887883a 	add	r3,r19,r2
20089d04:	0445c83a 	sub	r2,zero,r17
20089d08:	1884703a 	and	r2,r3,r2
20089d0c:	10bffe04 	addi	r2,r2,-8
20089d10:	1409c83a 	sub	r4,r2,r16
20089d14:	014003c4 	movi	r5,15
20089d18:	8007883a 	mov	r3,r16
20089d1c:	2900330e 	bge	r5,r4,20089dec <_memalign_r+0x178>
20089d20:	1021883a 	mov	r16,r2
20089d24:	993fff17 	ldw	r4,-4(r19)
20089d28:	00bfff04 	movi	r2,-4
20089d2c:	80c7c83a 	sub	r3,r16,r3
20089d30:	2084703a 	and	r2,r4,r2
20089d34:	10c5c83a 	sub	r2,r2,r3
20089d38:	11000054 	ori	r4,r2,1
20089d3c:	81000115 	stw	r4,4(r16)
20089d40:	8085883a 	add	r2,r16,r2
20089d44:	11800117 	ldw	r6,4(r2)
20089d48:	a009883a 	mov	r4,r20
20089d4c:	980b883a 	mov	r5,r19
20089d50:	31800054 	ori	r6,r6,1
20089d54:	11800115 	stw	r6,4(r2)
20089d58:	98bfff17 	ldw	r2,-4(r19)
20089d5c:	1080004c 	andi	r2,r2,1
20089d60:	1884b03a 	or	r2,r3,r2
20089d64:	98bfff15 	stw	r2,-4(r19)
20089d68:	00911280 	call	20091128 <_free_r>
20089d6c:	80c00117 	ldw	r3,4(r16)
20089d70:	00bfff04 	movi	r2,-4
20089d74:	1884703a 	and	r2,r3,r2
20089d78:	1485c83a 	sub	r2,r2,r18
20089d7c:	00c003c4 	movi	r3,15
20089d80:	18801c16 	blt	r3,r2,20089df4 <_memalign_r+0x180>
20089d84:	a009883a 	mov	r4,r20
20089d88:	0097ae80 	call	20097ae8 <__malloc_unlock>
20089d8c:	80800204 	addi	r2,r16,8
20089d90:	dfc00517 	ldw	ra,20(sp)
20089d94:	dd000417 	ldw	r20,16(sp)
20089d98:	dcc00317 	ldw	r19,12(sp)
20089d9c:	dc800217 	ldw	r18,8(sp)
20089da0:	dc400117 	ldw	r17,4(sp)
20089da4:	dc000017 	ldw	r16,0(sp)
20089da8:	dec00604 	addi	sp,sp,24
20089dac:	f800283a 	ret
20089db0:	04800404 	movi	r18,16
20089db4:	91bfc42e 	bgeu	r18,r6,20089cc8 <__flash_rwdata_start+0xfffeee5c>
20089db8:	00800304 	movi	r2,12
20089dbc:	a0800015 	stw	r2,0(r20)
20089dc0:	0005883a 	mov	r2,zero
20089dc4:	003ff206 	br	20089d90 <__flash_rwdata_start+0xfffeef24>
20089dc8:	300b883a 	mov	r5,r6
20089dcc:	dfc00517 	ldw	ra,20(sp)
20089dd0:	dd000417 	ldw	r20,16(sp)
20089dd4:	dcc00317 	ldw	r19,12(sp)
20089dd8:	dc800217 	ldw	r18,8(sp)
20089ddc:	dc400117 	ldw	r17,4(sp)
20089de0:	dc000017 	ldw	r16,0(sp)
20089de4:	dec00604 	addi	sp,sp,24
20089de8:	0089e501 	jmpi	20089e50 <_malloc_r>
20089dec:	1461883a 	add	r16,r2,r17
20089df0:	003fcc06 	br	20089d24 <__flash_rwdata_start+0xfffeeeb8>
20089df4:	848b883a 	add	r5,r16,r18
20089df8:	10800054 	ori	r2,r2,1
20089dfc:	28800115 	stw	r2,4(r5)
20089e00:	80800117 	ldw	r2,4(r16)
20089e04:	a009883a 	mov	r4,r20
20089e08:	29400204 	addi	r5,r5,8
20089e0c:	1080004c 	andi	r2,r2,1
20089e10:	90a4b03a 	or	r18,r18,r2
20089e14:	84800115 	stw	r18,4(r16)
20089e18:	00911280 	call	20091128 <_free_r>
20089e1c:	003fd906 	br	20089d84 <__flash_rwdata_start+0xfffeef18>
20089e20:	0005883a 	mov	r2,zero
20089e24:	003fda06 	br	20089d90 <__flash_rwdata_start+0xfffeef24>

20089e28 <malloc>:
20089e28:	00800034 	movhi	r2,0
20089e2c:	108a8c04 	addi	r2,r2,10800
20089e30:	200b883a 	mov	r5,r4
20089e34:	11000017 	ldw	r4,0(r2)
20089e38:	0089e501 	jmpi	20089e50 <_malloc_r>

20089e3c <free>:
20089e3c:	00800034 	movhi	r2,0
20089e40:	108a8c04 	addi	r2,r2,10800
20089e44:	200b883a 	mov	r5,r4
20089e48:	11000017 	ldw	r4,0(r2)
20089e4c:	00911281 	jmpi	20091128 <_free_r>

20089e50 <_malloc_r>:
20089e50:	defff504 	addi	sp,sp,-44
20089e54:	dc800315 	stw	r18,12(sp)
20089e58:	dfc00a15 	stw	ra,40(sp)
20089e5c:	df000915 	stw	fp,36(sp)
20089e60:	ddc00815 	stw	r23,32(sp)
20089e64:	dd800715 	stw	r22,28(sp)
20089e68:	dd400615 	stw	r21,24(sp)
20089e6c:	dd000515 	stw	r20,20(sp)
20089e70:	dcc00415 	stw	r19,16(sp)
20089e74:	dc400215 	stw	r17,8(sp)
20089e78:	dc000115 	stw	r16,4(sp)
20089e7c:	288002c4 	addi	r2,r5,11
20089e80:	00c00584 	movi	r3,22
20089e84:	2025883a 	mov	r18,r4
20089e88:	18802a2e 	bgeu	r3,r2,20089f34 <_malloc_r+0xe4>
20089e8c:	047ffe04 	movi	r17,-8
20089e90:	1462703a 	and	r17,r2,r17
20089e94:	88009e16 	blt	r17,zero,2008a110 <_malloc_r+0x2c0>
20089e98:	89409d36 	bltu	r17,r5,2008a110 <_malloc_r+0x2c0>
20089e9c:	0097ae40 	call	20097ae4 <__malloc_lock>
20089ea0:	00807dc4 	movi	r2,503
20089ea4:	14402736 	bltu	r2,r17,20089f44 <_malloc_r+0xf4>
20089ea8:	8806d0fa 	srli	r3,r17,3
20089eac:	04c00034 	movhi	r19,0
20089eb0:	9cc49d04 	addi	r19,r19,4724
20089eb4:	18c5883a 	add	r2,r3,r3
20089eb8:	1085883a 	add	r2,r2,r2
20089ebc:	1085883a 	add	r2,r2,r2
20089ec0:	9885883a 	add	r2,r19,r2
20089ec4:	14000317 	ldw	r16,12(r2)
20089ec8:	80814a26 	beq	r16,r2,2008a3f4 <_malloc_r+0x5a4>
20089ecc:	80c00117 	ldw	r3,4(r16)
20089ed0:	81000317 	ldw	r4,12(r16)
20089ed4:	00bfff04 	movi	r2,-4
20089ed8:	1884703a 	and	r2,r3,r2
20089edc:	81400217 	ldw	r5,8(r16)
20089ee0:	8085883a 	add	r2,r16,r2
20089ee4:	10c00117 	ldw	r3,4(r2)
20089ee8:	29000315 	stw	r4,12(r5)
20089eec:	21400215 	stw	r5,8(r4)
20089ef0:	18c00054 	ori	r3,r3,1
20089ef4:	10c00115 	stw	r3,4(r2)
20089ef8:	9009883a 	mov	r4,r18
20089efc:	0097ae80 	call	20097ae8 <__malloc_unlock>
20089f00:	80800204 	addi	r2,r16,8
20089f04:	dfc00a17 	ldw	ra,40(sp)
20089f08:	df000917 	ldw	fp,36(sp)
20089f0c:	ddc00817 	ldw	r23,32(sp)
20089f10:	dd800717 	ldw	r22,28(sp)
20089f14:	dd400617 	ldw	r21,24(sp)
20089f18:	dd000517 	ldw	r20,20(sp)
20089f1c:	dcc00417 	ldw	r19,16(sp)
20089f20:	dc800317 	ldw	r18,12(sp)
20089f24:	dc400217 	ldw	r17,8(sp)
20089f28:	dc000117 	ldw	r16,4(sp)
20089f2c:	dec00b04 	addi	sp,sp,44
20089f30:	f800283a 	ret
20089f34:	04400404 	movi	r17,16
20089f38:	89407536 	bltu	r17,r5,2008a110 <_malloc_r+0x2c0>
20089f3c:	0097ae40 	call	20097ae4 <__malloc_lock>
20089f40:	003fd906 	br	20089ea8 <__flash_rwdata_start+0xfffef03c>
20089f44:	8806d27a 	srli	r3,r17,9
20089f48:	18007526 	beq	r3,zero,2008a120 <_malloc_r+0x2d0>
20089f4c:	00800104 	movi	r2,4
20089f50:	10c0ef36 	bltu	r2,r3,2008a310 <_malloc_r+0x4c0>
20089f54:	8806d1ba 	srli	r3,r17,6
20089f58:	19c00e04 	addi	r7,r3,56
20089f5c:	39cb883a 	add	r5,r7,r7
20089f60:	04c00034 	movhi	r19,0
20089f64:	294b883a 	add	r5,r5,r5
20089f68:	9cc49d04 	addi	r19,r19,4724
20089f6c:	294b883a 	add	r5,r5,r5
20089f70:	994b883a 	add	r5,r19,r5
20089f74:	2c000317 	ldw	r16,12(r5)
20089f78:	2c000e26 	beq	r5,r16,20089fb4 <_malloc_r+0x164>
20089f7c:	80800117 	ldw	r2,4(r16)
20089f80:	01bfff04 	movi	r6,-4
20089f84:	010003c4 	movi	r4,15
20089f88:	1184703a 	and	r2,r2,r6
20089f8c:	1447c83a 	sub	r3,r2,r17
20089f90:	20c00716 	blt	r4,r3,20089fb0 <_malloc_r+0x160>
20089f94:	1800650e 	bge	r3,zero,2008a12c <_malloc_r+0x2dc>
20089f98:	84000317 	ldw	r16,12(r16)
20089f9c:	2c000526 	beq	r5,r16,20089fb4 <_malloc_r+0x164>
20089fa0:	80800117 	ldw	r2,4(r16)
20089fa4:	1184703a 	and	r2,r2,r6
20089fa8:	1447c83a 	sub	r3,r2,r17
20089fac:	20fff90e 	bge	r4,r3,20089f94 <__flash_rwdata_start+0xfffef128>
20089fb0:	39ffffc4 	addi	r7,r7,-1
20089fb4:	38c00044 	addi	r3,r7,1
20089fb8:	01800034 	movhi	r6,0
20089fbc:	9c000417 	ldw	r16,16(r19)
20089fc0:	31849d04 	addi	r6,r6,4724
20089fc4:	32400204 	addi	r9,r6,8
20089fc8:	82410326 	beq	r16,r9,2008a3d8 <_malloc_r+0x588>
20089fcc:	81000117 	ldw	r4,4(r16)
20089fd0:	00bfff04 	movi	r2,-4
20089fd4:	208e703a 	and	r7,r4,r2
20089fd8:	3c45c83a 	sub	r2,r7,r17
20089fdc:	010003c4 	movi	r4,15
20089fe0:	2080ee16 	blt	r4,r2,2008a39c <_malloc_r+0x54c>
20089fe4:	32400515 	stw	r9,20(r6)
20089fe8:	32400415 	stw	r9,16(r6)
20089fec:	1000510e 	bge	r2,zero,2008a134 <_malloc_r+0x2e4>
20089ff0:	00807fc4 	movi	r2,511
20089ff4:	11c0ce36 	bltu	r2,r7,2008a330 <_malloc_r+0x4e0>
20089ff8:	3808d0fa 	srli	r4,r7,3
20089ffc:	01c00044 	movi	r7,1
2008a000:	30800117 	ldw	r2,4(r6)
2008a004:	210b883a 	add	r5,r4,r4
2008a008:	294b883a 	add	r5,r5,r5
2008a00c:	2009d0ba 	srai	r4,r4,2
2008a010:	294b883a 	add	r5,r5,r5
2008a014:	298b883a 	add	r5,r5,r6
2008a018:	2a000217 	ldw	r8,8(r5)
2008a01c:	3908983a 	sll	r4,r7,r4
2008a020:	81400315 	stw	r5,12(r16)
2008a024:	82000215 	stw	r8,8(r16)
2008a028:	2088b03a 	or	r4,r4,r2
2008a02c:	2c000215 	stw	r16,8(r5)
2008a030:	31000115 	stw	r4,4(r6)
2008a034:	44000315 	stw	r16,12(r8)
2008a038:	1805d0ba 	srai	r2,r3,2
2008a03c:	01400044 	movi	r5,1
2008a040:	288a983a 	sll	r5,r5,r2
2008a044:	21404336 	bltu	r4,r5,2008a154 <_malloc_r+0x304>
2008a048:	2144703a 	and	r2,r4,r5
2008a04c:	10000a1e 	bne	r2,zero,2008a078 <_malloc_r+0x228>
2008a050:	00bfff04 	movi	r2,-4
2008a054:	294b883a 	add	r5,r5,r5
2008a058:	1886703a 	and	r3,r3,r2
2008a05c:	2144703a 	and	r2,r4,r5
2008a060:	18c00104 	addi	r3,r3,4
2008a064:	1000041e 	bne	r2,zero,2008a078 <_malloc_r+0x228>
2008a068:	294b883a 	add	r5,r5,r5
2008a06c:	2144703a 	and	r2,r4,r5
2008a070:	18c00104 	addi	r3,r3,4
2008a074:	103ffc26 	beq	r2,zero,2008a068 <__flash_rwdata_start+0xfffef1fc>
2008a078:	023fff04 	movi	r8,-4
2008a07c:	01c003c4 	movi	r7,15
2008a080:	18c5883a 	add	r2,r3,r3
2008a084:	1085883a 	add	r2,r2,r2
2008a088:	1085883a 	add	r2,r2,r2
2008a08c:	9895883a 	add	r10,r19,r2
2008a090:	52c00304 	addi	r11,r10,12
2008a094:	1819883a 	mov	r12,r3
2008a098:	5c000017 	ldw	r16,0(r11)
2008a09c:	59bffd04 	addi	r6,r11,-12
2008a0a0:	8180041e 	bne	r16,r6,2008a0b4 <_malloc_r+0x264>
2008a0a4:	0000ce06 	br	2008a3e0 <_malloc_r+0x590>
2008a0a8:	2000d70e 	bge	r4,zero,2008a408 <_malloc_r+0x5b8>
2008a0ac:	84000317 	ldw	r16,12(r16)
2008a0b0:	8180cb26 	beq	r16,r6,2008a3e0 <_malloc_r+0x590>
2008a0b4:	80800117 	ldw	r2,4(r16)
2008a0b8:	1204703a 	and	r2,r2,r8
2008a0bc:	1449c83a 	sub	r4,r2,r17
2008a0c0:	393ff90e 	bge	r7,r4,2008a0a8 <__flash_rwdata_start+0xfffef23c>
2008a0c4:	80800317 	ldw	r2,12(r16)
2008a0c8:	80c00217 	ldw	r3,8(r16)
2008a0cc:	89400054 	ori	r5,r17,1
2008a0d0:	81400115 	stw	r5,4(r16)
2008a0d4:	18800315 	stw	r2,12(r3)
2008a0d8:	10c00215 	stw	r3,8(r2)
2008a0dc:	8463883a 	add	r17,r16,r17
2008a0e0:	9c400515 	stw	r17,20(r19)
2008a0e4:	9c400415 	stw	r17,16(r19)
2008a0e8:	20800054 	ori	r2,r4,1
2008a0ec:	88800115 	stw	r2,4(r17)
2008a0f0:	8a400315 	stw	r9,12(r17)
2008a0f4:	8a400215 	stw	r9,8(r17)
2008a0f8:	8923883a 	add	r17,r17,r4
2008a0fc:	89000015 	stw	r4,0(r17)
2008a100:	9009883a 	mov	r4,r18
2008a104:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a108:	80800204 	addi	r2,r16,8
2008a10c:	003f7d06 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a110:	00800304 	movi	r2,12
2008a114:	90800015 	stw	r2,0(r18)
2008a118:	0005883a 	mov	r2,zero
2008a11c:	003f7906 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a120:	01401f84 	movi	r5,126
2008a124:	01c00fc4 	movi	r7,63
2008a128:	003f8d06 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a12c:	81000317 	ldw	r4,12(r16)
2008a130:	003f6a06 	br	20089edc <__flash_rwdata_start+0xfffef070>
2008a134:	81c5883a 	add	r2,r16,r7
2008a138:	10c00117 	ldw	r3,4(r2)
2008a13c:	9009883a 	mov	r4,r18
2008a140:	18c00054 	ori	r3,r3,1
2008a144:	10c00115 	stw	r3,4(r2)
2008a148:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a14c:	80800204 	addi	r2,r16,8
2008a150:	003f6c06 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a154:	9c000217 	ldw	r16,8(r19)
2008a158:	00bfff04 	movi	r2,-4
2008a15c:	85800117 	ldw	r22,4(r16)
2008a160:	b0ac703a 	and	r22,r22,r2
2008a164:	b4400336 	bltu	r22,r17,2008a174 <_malloc_r+0x324>
2008a168:	b445c83a 	sub	r2,r22,r17
2008a16c:	00c003c4 	movi	r3,15
2008a170:	18805d16 	blt	r3,r2,2008a2e8 <_malloc_r+0x498>
2008a174:	05c00034 	movhi	r23,0
2008a178:	00800034 	movhi	r2,0
2008a17c:	bdca8d04 	addi	r23,r23,10804
2008a180:	108aaf04 	addi	r2,r2,10940
2008a184:	15400017 	ldw	r21,0(r2)
2008a188:	b9000017 	ldw	r4,0(r23)
2008a18c:	00ffffc4 	movi	r3,-1
2008a190:	858d883a 	add	r6,r16,r22
2008a194:	8d6b883a 	add	r21,r17,r21
2008a198:	20c0e426 	beq	r4,r3,2008a52c <_malloc_r+0x6dc>
2008a19c:	ad4403c4 	addi	r21,r21,4111
2008a1a0:	00fc0004 	movi	r3,-4096
2008a1a4:	a8ea703a 	and	r21,r21,r3
2008a1a8:	9009883a 	mov	r4,r18
2008a1ac:	a80b883a 	mov	r5,r21
2008a1b0:	d9800015 	stw	r6,0(sp)
2008a1b4:	008aa140 	call	2008aa14 <_sbrk_r>
2008a1b8:	00ffffc4 	movi	r3,-1
2008a1bc:	1029883a 	mov	r20,r2
2008a1c0:	d9800017 	ldw	r6,0(sp)
2008a1c4:	10c0a426 	beq	r2,r3,2008a458 <_malloc_r+0x608>
2008a1c8:	1180a236 	bltu	r2,r6,2008a454 <_malloc_r+0x604>
2008a1cc:	07000034 	movhi	fp,0
2008a1d0:	e70b9d04 	addi	fp,fp,11892
2008a1d4:	e0c00017 	ldw	r3,0(fp)
2008a1d8:	a8c7883a 	add	r3,r21,r3
2008a1dc:	e0c00015 	stw	r3,0(fp)
2008a1e0:	3500da26 	beq	r6,r20,2008a54c <_malloc_r+0x6fc>
2008a1e4:	b9000017 	ldw	r4,0(r23)
2008a1e8:	00bfffc4 	movi	r2,-1
2008a1ec:	2080e426 	beq	r4,r2,2008a580 <_malloc_r+0x730>
2008a1f0:	a185c83a 	sub	r2,r20,r6
2008a1f4:	1885883a 	add	r2,r3,r2
2008a1f8:	e0800015 	stw	r2,0(fp)
2008a1fc:	a0c001cc 	andi	r3,r20,7
2008a200:	1800b526 	beq	r3,zero,2008a4d8 <_malloc_r+0x688>
2008a204:	a0e9c83a 	sub	r20,r20,r3
2008a208:	00840204 	movi	r2,4104
2008a20c:	a5000204 	addi	r20,r20,8
2008a210:	10c7c83a 	sub	r3,r2,r3
2008a214:	a545883a 	add	r2,r20,r21
2008a218:	1083ffcc 	andi	r2,r2,4095
2008a21c:	18abc83a 	sub	r21,r3,r2
2008a220:	9009883a 	mov	r4,r18
2008a224:	a80b883a 	mov	r5,r21
2008a228:	008aa140 	call	2008aa14 <_sbrk_r>
2008a22c:	00ffffc4 	movi	r3,-1
2008a230:	10c0d026 	beq	r2,r3,2008a574 <_malloc_r+0x724>
2008a234:	1507c83a 	sub	r3,r2,r20
2008a238:	a8c7883a 	add	r3,r21,r3
2008a23c:	18c00054 	ori	r3,r3,1
2008a240:	e0800017 	ldw	r2,0(fp)
2008a244:	9d000215 	stw	r20,8(r19)
2008a248:	a0c00115 	stw	r3,4(r20)
2008a24c:	a887883a 	add	r3,r21,r2
2008a250:	e0c00015 	stw	r3,0(fp)
2008a254:	84c00e26 	beq	r16,r19,2008a290 <_malloc_r+0x440>
2008a258:	018003c4 	movi	r6,15
2008a25c:	3580a02e 	bgeu	r6,r22,2008a4e0 <_malloc_r+0x690>
2008a260:	81400117 	ldw	r5,4(r16)
2008a264:	013ffe04 	movi	r4,-8
2008a268:	b0bffd04 	addi	r2,r22,-12
2008a26c:	1104703a 	and	r2,r2,r4
2008a270:	2900004c 	andi	r4,r5,1
2008a274:	1108b03a 	or	r4,r2,r4
2008a278:	81000115 	stw	r4,4(r16)
2008a27c:	01400144 	movi	r5,5
2008a280:	8089883a 	add	r4,r16,r2
2008a284:	21400115 	stw	r5,4(r4)
2008a288:	21400215 	stw	r5,8(r4)
2008a28c:	3080c036 	bltu	r6,r2,2008a590 <_malloc_r+0x740>
2008a290:	00800034 	movhi	r2,0
2008a294:	108aae04 	addi	r2,r2,10936
2008a298:	11000017 	ldw	r4,0(r2)
2008a29c:	20c0012e 	bgeu	r4,r3,2008a2a4 <_malloc_r+0x454>
2008a2a0:	10c00015 	stw	r3,0(r2)
2008a2a4:	00800034 	movhi	r2,0
2008a2a8:	108aad04 	addi	r2,r2,10932
2008a2ac:	11000017 	ldw	r4,0(r2)
2008a2b0:	9c000217 	ldw	r16,8(r19)
2008a2b4:	20c0012e 	bgeu	r4,r3,2008a2bc <_malloc_r+0x46c>
2008a2b8:	10c00015 	stw	r3,0(r2)
2008a2bc:	80c00117 	ldw	r3,4(r16)
2008a2c0:	00bfff04 	movi	r2,-4
2008a2c4:	1886703a 	and	r3,r3,r2
2008a2c8:	1c45c83a 	sub	r2,r3,r17
2008a2cc:	1c400236 	bltu	r3,r17,2008a2d8 <_malloc_r+0x488>
2008a2d0:	00c003c4 	movi	r3,15
2008a2d4:	18800416 	blt	r3,r2,2008a2e8 <_malloc_r+0x498>
2008a2d8:	9009883a 	mov	r4,r18
2008a2dc:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a2e0:	0005883a 	mov	r2,zero
2008a2e4:	003f0706 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a2e8:	88c00054 	ori	r3,r17,1
2008a2ec:	80c00115 	stw	r3,4(r16)
2008a2f0:	8463883a 	add	r17,r16,r17
2008a2f4:	10800054 	ori	r2,r2,1
2008a2f8:	9c400215 	stw	r17,8(r19)
2008a2fc:	88800115 	stw	r2,4(r17)
2008a300:	9009883a 	mov	r4,r18
2008a304:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a308:	80800204 	addi	r2,r16,8
2008a30c:	003efd06 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a310:	00800504 	movi	r2,20
2008a314:	10c0482e 	bgeu	r2,r3,2008a438 <_malloc_r+0x5e8>
2008a318:	00801504 	movi	r2,84
2008a31c:	10c06836 	bltu	r2,r3,2008a4c0 <_malloc_r+0x670>
2008a320:	8806d33a 	srli	r3,r17,12
2008a324:	19c01b84 	addi	r7,r3,110
2008a328:	39cb883a 	add	r5,r7,r7
2008a32c:	003f0c06 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a330:	3804d27a 	srli	r2,r7,9
2008a334:	01000104 	movi	r4,4
2008a338:	2080422e 	bgeu	r4,r2,2008a444 <_malloc_r+0x5f4>
2008a33c:	01000504 	movi	r4,20
2008a340:	20807c36 	bltu	r4,r2,2008a534 <_malloc_r+0x6e4>
2008a344:	110016c4 	addi	r4,r2,91
2008a348:	210b883a 	add	r5,r4,r4
2008a34c:	294b883a 	add	r5,r5,r5
2008a350:	294b883a 	add	r5,r5,r5
2008a354:	994b883a 	add	r5,r19,r5
2008a358:	28800217 	ldw	r2,8(r5)
2008a35c:	02000034 	movhi	r8,0
2008a360:	42049d04 	addi	r8,r8,4724
2008a364:	11406326 	beq	r2,r5,2008a4f4 <_malloc_r+0x6a4>
2008a368:	01bfff04 	movi	r6,-4
2008a36c:	11000117 	ldw	r4,4(r2)
2008a370:	2188703a 	and	r4,r4,r6
2008a374:	3900022e 	bgeu	r7,r4,2008a380 <_malloc_r+0x530>
2008a378:	10800217 	ldw	r2,8(r2)
2008a37c:	28bffb1e 	bne	r5,r2,2008a36c <__flash_rwdata_start+0xfffef500>
2008a380:	11800317 	ldw	r6,12(r2)
2008a384:	99000117 	ldw	r4,4(r19)
2008a388:	81800315 	stw	r6,12(r16)
2008a38c:	80800215 	stw	r2,8(r16)
2008a390:	34000215 	stw	r16,8(r6)
2008a394:	14000315 	stw	r16,12(r2)
2008a398:	003f2706 	br	2008a038 <__flash_rwdata_start+0xfffef1cc>
2008a39c:	88c00054 	ori	r3,r17,1
2008a3a0:	80c00115 	stw	r3,4(r16)
2008a3a4:	8463883a 	add	r17,r16,r17
2008a3a8:	34400515 	stw	r17,20(r6)
2008a3ac:	34400415 	stw	r17,16(r6)
2008a3b0:	10c00054 	ori	r3,r2,1
2008a3b4:	8a400315 	stw	r9,12(r17)
2008a3b8:	8a400215 	stw	r9,8(r17)
2008a3bc:	88c00115 	stw	r3,4(r17)
2008a3c0:	88a3883a 	add	r17,r17,r2
2008a3c4:	88800015 	stw	r2,0(r17)
2008a3c8:	9009883a 	mov	r4,r18
2008a3cc:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a3d0:	80800204 	addi	r2,r16,8
2008a3d4:	003ecb06 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a3d8:	31000117 	ldw	r4,4(r6)
2008a3dc:	003f1606 	br	2008a038 <__flash_rwdata_start+0xfffef1cc>
2008a3e0:	63000044 	addi	r12,r12,1
2008a3e4:	608000cc 	andi	r2,r12,3
2008a3e8:	5ac00204 	addi	r11,r11,8
2008a3ec:	103f2a1e 	bne	r2,zero,2008a098 <__flash_rwdata_start+0xfffef22c>
2008a3f0:	00002106 	br	2008a478 <_malloc_r+0x628>
2008a3f4:	80800204 	addi	r2,r16,8
2008a3f8:	84000517 	ldw	r16,20(r16)
2008a3fc:	143eb31e 	bne	r2,r16,20089ecc <__flash_rwdata_start+0xfffef060>
2008a400:	18c00084 	addi	r3,r3,2
2008a404:	003eec06 	br	20089fb8 <__flash_rwdata_start+0xfffef14c>
2008a408:	8085883a 	add	r2,r16,r2
2008a40c:	10c00117 	ldw	r3,4(r2)
2008a410:	81000317 	ldw	r4,12(r16)
2008a414:	81400217 	ldw	r5,8(r16)
2008a418:	18c00054 	ori	r3,r3,1
2008a41c:	10c00115 	stw	r3,4(r2)
2008a420:	29000315 	stw	r4,12(r5)
2008a424:	21400215 	stw	r5,8(r4)
2008a428:	9009883a 	mov	r4,r18
2008a42c:	0097ae80 	call	20097ae8 <__malloc_unlock>
2008a430:	80800204 	addi	r2,r16,8
2008a434:	003eb306 	br	20089f04 <__flash_rwdata_start+0xfffef098>
2008a438:	19c016c4 	addi	r7,r3,91
2008a43c:	39cb883a 	add	r5,r7,r7
2008a440:	003ec706 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a444:	3804d1ba 	srli	r2,r7,6
2008a448:	11000e04 	addi	r4,r2,56
2008a44c:	210b883a 	add	r5,r4,r4
2008a450:	003fbe06 	br	2008a34c <__flash_rwdata_start+0xfffef4e0>
2008a454:	84ff5d26 	beq	r16,r19,2008a1cc <__flash_rwdata_start+0xfffef360>
2008a458:	9c000217 	ldw	r16,8(r19)
2008a45c:	00bfff04 	movi	r2,-4
2008a460:	80c00117 	ldw	r3,4(r16)
2008a464:	1886703a 	and	r3,r3,r2
2008a468:	003f9706 	br	2008a2c8 <__flash_rwdata_start+0xfffef45c>
2008a46c:	52800017 	ldw	r10,0(r10)
2008a470:	18ffffc4 	addi	r3,r3,-1
2008a474:	50805c1e 	bne	r10,r2,2008a5e8 <_malloc_r+0x798>
2008a478:	190000cc 	andi	r4,r3,3
2008a47c:	50bffe04 	addi	r2,r10,-8
2008a480:	203ffa1e 	bne	r4,zero,2008a46c <__flash_rwdata_start+0xfffef600>
2008a484:	98800117 	ldw	r2,4(r19)
2008a488:	0146303a 	nor	r3,zero,r5
2008a48c:	1884703a 	and	r2,r3,r2
2008a490:	98800115 	stw	r2,4(r19)
2008a494:	294b883a 	add	r5,r5,r5
2008a498:	117f2e36 	bltu	r2,r5,2008a154 <__flash_rwdata_start+0xfffef2e8>
2008a49c:	283f2d26 	beq	r5,zero,2008a154 <__flash_rwdata_start+0xfffef2e8>
2008a4a0:	1146703a 	and	r3,r2,r5
2008a4a4:	1800521e 	bne	r3,zero,2008a5f0 <_malloc_r+0x7a0>
2008a4a8:	6007883a 	mov	r3,r12
2008a4ac:	294b883a 	add	r5,r5,r5
2008a4b0:	1148703a 	and	r4,r2,r5
2008a4b4:	18c00104 	addi	r3,r3,4
2008a4b8:	203ffc26 	beq	r4,zero,2008a4ac <__flash_rwdata_start+0xfffef640>
2008a4bc:	003ef006 	br	2008a080 <__flash_rwdata_start+0xfffef214>
2008a4c0:	00805504 	movi	r2,340
2008a4c4:	10c01336 	bltu	r2,r3,2008a514 <_malloc_r+0x6c4>
2008a4c8:	8806d3fa 	srli	r3,r17,15
2008a4cc:	19c01dc4 	addi	r7,r3,119
2008a4d0:	39cb883a 	add	r5,r7,r7
2008a4d4:	003ea206 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a4d8:	00c40004 	movi	r3,4096
2008a4dc:	003f4d06 	br	2008a214 <__flash_rwdata_start+0xfffef3a8>
2008a4e0:	00800044 	movi	r2,1
2008a4e4:	a0800115 	stw	r2,4(r20)
2008a4e8:	a021883a 	mov	r16,r20
2008a4ec:	0007883a 	mov	r3,zero
2008a4f0:	003f7506 	br	2008a2c8 <__flash_rwdata_start+0xfffef45c>
2008a4f4:	200bd0ba 	srai	r5,r4,2
2008a4f8:	01800044 	movi	r6,1
2008a4fc:	41000117 	ldw	r4,4(r8)
2008a500:	314a983a 	sll	r5,r6,r5
2008a504:	100d883a 	mov	r6,r2
2008a508:	2908b03a 	or	r4,r5,r4
2008a50c:	41000115 	stw	r4,4(r8)
2008a510:	003f9d06 	br	2008a388 <__flash_rwdata_start+0xfffef51c>
2008a514:	00815504 	movi	r2,1364
2008a518:	10c01336 	bltu	r2,r3,2008a568 <_malloc_r+0x718>
2008a51c:	8806d4ba 	srli	r3,r17,18
2008a520:	19c01f04 	addi	r7,r3,124
2008a524:	39cb883a 	add	r5,r7,r7
2008a528:	003e8d06 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a52c:	ad400404 	addi	r21,r21,16
2008a530:	003f1d06 	br	2008a1a8 <__flash_rwdata_start+0xfffef33c>
2008a534:	01001504 	movi	r4,84
2008a538:	20801c36 	bltu	r4,r2,2008a5ac <_malloc_r+0x75c>
2008a53c:	3804d33a 	srli	r2,r7,12
2008a540:	11001b84 	addi	r4,r2,110
2008a544:	210b883a 	add	r5,r4,r4
2008a548:	003f8006 	br	2008a34c <__flash_rwdata_start+0xfffef4e0>
2008a54c:	3083ffcc 	andi	r2,r6,4095
2008a550:	103f241e 	bne	r2,zero,2008a1e4 <__flash_rwdata_start+0xfffef378>
2008a554:	99000217 	ldw	r4,8(r19)
2008a558:	ad85883a 	add	r2,r21,r22
2008a55c:	10800054 	ori	r2,r2,1
2008a560:	20800115 	stw	r2,4(r4)
2008a564:	003f4a06 	br	2008a290 <__flash_rwdata_start+0xfffef424>
2008a568:	01403f04 	movi	r5,252
2008a56c:	01c01f84 	movi	r7,126
2008a570:	003e7b06 	br	20089f60 <__flash_rwdata_start+0xfffef0f4>
2008a574:	00c00044 	movi	r3,1
2008a578:	002b883a 	mov	r21,zero
2008a57c:	003f3006 	br	2008a240 <__flash_rwdata_start+0xfffef3d4>
2008a580:	00800034 	movhi	r2,0
2008a584:	108a8d04 	addi	r2,r2,10804
2008a588:	15000015 	stw	r20,0(r2)
2008a58c:	003f1b06 	br	2008a1fc <__flash_rwdata_start+0xfffef390>
2008a590:	9009883a 	mov	r4,r18
2008a594:	81400204 	addi	r5,r16,8
2008a598:	00911280 	call	20091128 <_free_r>
2008a59c:	00800034 	movhi	r2,0
2008a5a0:	108b9d04 	addi	r2,r2,11892
2008a5a4:	10c00017 	ldw	r3,0(r2)
2008a5a8:	003f3906 	br	2008a290 <__flash_rwdata_start+0xfffef424>
2008a5ac:	01005504 	movi	r4,340
2008a5b0:	20800436 	bltu	r4,r2,2008a5c4 <_malloc_r+0x774>
2008a5b4:	3804d3fa 	srli	r2,r7,15
2008a5b8:	11001dc4 	addi	r4,r2,119
2008a5bc:	210b883a 	add	r5,r4,r4
2008a5c0:	003f6206 	br	2008a34c <__flash_rwdata_start+0xfffef4e0>
2008a5c4:	01015504 	movi	r4,1364
2008a5c8:	20800436 	bltu	r4,r2,2008a5dc <_malloc_r+0x78c>
2008a5cc:	3804d4ba 	srli	r2,r7,18
2008a5d0:	11001f04 	addi	r4,r2,124
2008a5d4:	210b883a 	add	r5,r4,r4
2008a5d8:	003f5c06 	br	2008a34c <__flash_rwdata_start+0xfffef4e0>
2008a5dc:	01403f04 	movi	r5,252
2008a5e0:	01001f84 	movi	r4,126
2008a5e4:	003f5906 	br	2008a34c <__flash_rwdata_start+0xfffef4e0>
2008a5e8:	98800117 	ldw	r2,4(r19)
2008a5ec:	003fa906 	br	2008a494 <__flash_rwdata_start+0xfffef628>
2008a5f0:	6007883a 	mov	r3,r12
2008a5f4:	003ea206 	br	2008a080 <__flash_rwdata_start+0xfffef214>

2008a5f8 <memcmp>:
2008a5f8:	01c000c4 	movi	r7,3
2008a5fc:	3980192e 	bgeu	r7,r6,2008a664 <memcmp+0x6c>
2008a600:	2144b03a 	or	r2,r4,r5
2008a604:	11c4703a 	and	r2,r2,r7
2008a608:	10000f26 	beq	r2,zero,2008a648 <memcmp+0x50>
2008a60c:	20800003 	ldbu	r2,0(r4)
2008a610:	28c00003 	ldbu	r3,0(r5)
2008a614:	10c0151e 	bne	r2,r3,2008a66c <memcmp+0x74>
2008a618:	31bfff84 	addi	r6,r6,-2
2008a61c:	01ffffc4 	movi	r7,-1
2008a620:	00000406 	br	2008a634 <memcmp+0x3c>
2008a624:	20800003 	ldbu	r2,0(r4)
2008a628:	28c00003 	ldbu	r3,0(r5)
2008a62c:	31bfffc4 	addi	r6,r6,-1
2008a630:	10c00e1e 	bne	r2,r3,2008a66c <memcmp+0x74>
2008a634:	21000044 	addi	r4,r4,1
2008a638:	29400044 	addi	r5,r5,1
2008a63c:	31fff91e 	bne	r6,r7,2008a624 <__flash_rwdata_start+0xfffef7b8>
2008a640:	0005883a 	mov	r2,zero
2008a644:	f800283a 	ret
2008a648:	20c00017 	ldw	r3,0(r4)
2008a64c:	28800017 	ldw	r2,0(r5)
2008a650:	1880041e 	bne	r3,r2,2008a664 <memcmp+0x6c>
2008a654:	31bfff04 	addi	r6,r6,-4
2008a658:	21000104 	addi	r4,r4,4
2008a65c:	29400104 	addi	r5,r5,4
2008a660:	39bff936 	bltu	r7,r6,2008a648 <__flash_rwdata_start+0xfffef7dc>
2008a664:	303fe91e 	bne	r6,zero,2008a60c <__flash_rwdata_start+0xfffef7a0>
2008a668:	003ff506 	br	2008a640 <__flash_rwdata_start+0xfffef7d4>
2008a66c:	10c5c83a 	sub	r2,r2,r3
2008a670:	f800283a 	ret

2008a674 <memcpy>:
2008a674:	deffff04 	addi	sp,sp,-4
2008a678:	dc000015 	stw	r16,0(sp)
2008a67c:	00c003c4 	movi	r3,15
2008a680:	2005883a 	mov	r2,r4
2008a684:	1980432e 	bgeu	r3,r6,2008a794 <memcpy+0x120>
2008a688:	2146b03a 	or	r3,r4,r5
2008a68c:	18c000cc 	andi	r3,r3,3
2008a690:	1800421e 	bne	r3,zero,2008a79c <memcpy+0x128>
2008a694:	343ffc04 	addi	r16,r6,-16
2008a698:	8020d13a 	srli	r16,r16,4
2008a69c:	28c00104 	addi	r3,r5,4
2008a6a0:	23400104 	addi	r13,r4,4
2008a6a4:	801e913a 	slli	r15,r16,4
2008a6a8:	2b000204 	addi	r12,r5,8
2008a6ac:	22c00204 	addi	r11,r4,8
2008a6b0:	7bc00504 	addi	r15,r15,20
2008a6b4:	2a800304 	addi	r10,r5,12
2008a6b8:	22400304 	addi	r9,r4,12
2008a6bc:	2bdf883a 	add	r15,r5,r15
2008a6c0:	2811883a 	mov	r8,r5
2008a6c4:	200f883a 	mov	r7,r4
2008a6c8:	41000017 	ldw	r4,0(r8)
2008a6cc:	39c00404 	addi	r7,r7,16
2008a6d0:	18c00404 	addi	r3,r3,16
2008a6d4:	393ffc15 	stw	r4,-16(r7)
2008a6d8:	1bbffc17 	ldw	r14,-16(r3)
2008a6dc:	6b400404 	addi	r13,r13,16
2008a6e0:	5ac00404 	addi	r11,r11,16
2008a6e4:	6bbffc15 	stw	r14,-16(r13)
2008a6e8:	63800017 	ldw	r14,0(r12)
2008a6ec:	4a400404 	addi	r9,r9,16
2008a6f0:	42000404 	addi	r8,r8,16
2008a6f4:	5bbffc15 	stw	r14,-16(r11)
2008a6f8:	53800017 	ldw	r14,0(r10)
2008a6fc:	63000404 	addi	r12,r12,16
2008a700:	52800404 	addi	r10,r10,16
2008a704:	4bbffc15 	stw	r14,-16(r9)
2008a708:	1bffef1e 	bne	r3,r15,2008a6c8 <__flash_rwdata_start+0xfffef85c>
2008a70c:	81c00044 	addi	r7,r16,1
2008a710:	380e913a 	slli	r7,r7,4
2008a714:	310003cc 	andi	r4,r6,15
2008a718:	02c000c4 	movi	r11,3
2008a71c:	11c7883a 	add	r3,r2,r7
2008a720:	29cb883a 	add	r5,r5,r7
2008a724:	59001f2e 	bgeu	r11,r4,2008a7a4 <memcpy+0x130>
2008a728:	1813883a 	mov	r9,r3
2008a72c:	2811883a 	mov	r8,r5
2008a730:	200f883a 	mov	r7,r4
2008a734:	42800017 	ldw	r10,0(r8)
2008a738:	4a400104 	addi	r9,r9,4
2008a73c:	39ffff04 	addi	r7,r7,-4
2008a740:	4abfff15 	stw	r10,-4(r9)
2008a744:	42000104 	addi	r8,r8,4
2008a748:	59fffa36 	bltu	r11,r7,2008a734 <__flash_rwdata_start+0xfffef8c8>
2008a74c:	213fff04 	addi	r4,r4,-4
2008a750:	2008d0ba 	srli	r4,r4,2
2008a754:	318000cc 	andi	r6,r6,3
2008a758:	21000044 	addi	r4,r4,1
2008a75c:	2109883a 	add	r4,r4,r4
2008a760:	2109883a 	add	r4,r4,r4
2008a764:	1907883a 	add	r3,r3,r4
2008a768:	290b883a 	add	r5,r5,r4
2008a76c:	30000626 	beq	r6,zero,2008a788 <memcpy+0x114>
2008a770:	198d883a 	add	r6,r3,r6
2008a774:	29c00003 	ldbu	r7,0(r5)
2008a778:	18c00044 	addi	r3,r3,1
2008a77c:	29400044 	addi	r5,r5,1
2008a780:	19ffffc5 	stb	r7,-1(r3)
2008a784:	19bffb1e 	bne	r3,r6,2008a774 <__flash_rwdata_start+0xfffef908>
2008a788:	dc000017 	ldw	r16,0(sp)
2008a78c:	dec00104 	addi	sp,sp,4
2008a790:	f800283a 	ret
2008a794:	2007883a 	mov	r3,r4
2008a798:	003ff406 	br	2008a76c <__flash_rwdata_start+0xfffef900>
2008a79c:	2007883a 	mov	r3,r4
2008a7a0:	003ff306 	br	2008a770 <__flash_rwdata_start+0xfffef904>
2008a7a4:	200d883a 	mov	r6,r4
2008a7a8:	003ff006 	br	2008a76c <__flash_rwdata_start+0xfffef900>

2008a7ac <memset>:
2008a7ac:	20c000cc 	andi	r3,r4,3
2008a7b0:	2005883a 	mov	r2,r4
2008a7b4:	18004326 	beq	r3,zero,2008a8c4 <memset+0x118>
2008a7b8:	31ffffc4 	addi	r7,r6,-1
2008a7bc:	30004026 	beq	r6,zero,2008a8c0 <memset+0x114>
2008a7c0:	2813883a 	mov	r9,r5
2008a7c4:	200d883a 	mov	r6,r4
2008a7c8:	2007883a 	mov	r3,r4
2008a7cc:	00000406 	br	2008a7e0 <memset+0x34>
2008a7d0:	3a3fffc4 	addi	r8,r7,-1
2008a7d4:	31800044 	addi	r6,r6,1
2008a7d8:	38003926 	beq	r7,zero,2008a8c0 <memset+0x114>
2008a7dc:	400f883a 	mov	r7,r8
2008a7e0:	18c00044 	addi	r3,r3,1
2008a7e4:	32400005 	stb	r9,0(r6)
2008a7e8:	1a0000cc 	andi	r8,r3,3
2008a7ec:	403ff81e 	bne	r8,zero,2008a7d0 <__flash_rwdata_start+0xfffef964>
2008a7f0:	010000c4 	movi	r4,3
2008a7f4:	21c02d2e 	bgeu	r4,r7,2008a8ac <memset+0x100>
2008a7f8:	29803fcc 	andi	r6,r5,255
2008a7fc:	3008923a 	slli	r4,r6,8
2008a800:	218cb03a 	or	r6,r4,r6
2008a804:	3008943a 	slli	r4,r6,16
2008a808:	218cb03a 	or	r6,r4,r6
2008a80c:	010003c4 	movi	r4,15
2008a810:	21c0182e 	bgeu	r4,r7,2008a874 <memset+0xc8>
2008a814:	3b3ffc04 	addi	r12,r7,-16
2008a818:	6018d13a 	srli	r12,r12,4
2008a81c:	1a000104 	addi	r8,r3,4
2008a820:	1ac00204 	addi	r11,r3,8
2008a824:	6008913a 	slli	r4,r12,4
2008a828:	1a800304 	addi	r10,r3,12
2008a82c:	1813883a 	mov	r9,r3
2008a830:	21000504 	addi	r4,r4,20
2008a834:	1909883a 	add	r4,r3,r4
2008a838:	49800015 	stw	r6,0(r9)
2008a83c:	41800015 	stw	r6,0(r8)
2008a840:	59800015 	stw	r6,0(r11)
2008a844:	51800015 	stw	r6,0(r10)
2008a848:	42000404 	addi	r8,r8,16
2008a84c:	4a400404 	addi	r9,r9,16
2008a850:	5ac00404 	addi	r11,r11,16
2008a854:	52800404 	addi	r10,r10,16
2008a858:	413ff71e 	bne	r8,r4,2008a838 <__flash_rwdata_start+0xfffef9cc>
2008a85c:	63000044 	addi	r12,r12,1
2008a860:	6018913a 	slli	r12,r12,4
2008a864:	39c003cc 	andi	r7,r7,15
2008a868:	010000c4 	movi	r4,3
2008a86c:	1b07883a 	add	r3,r3,r12
2008a870:	21c00e2e 	bgeu	r4,r7,2008a8ac <memset+0x100>
2008a874:	1813883a 	mov	r9,r3
2008a878:	3811883a 	mov	r8,r7
2008a87c:	010000c4 	movi	r4,3
2008a880:	49800015 	stw	r6,0(r9)
2008a884:	423fff04 	addi	r8,r8,-4
2008a888:	4a400104 	addi	r9,r9,4
2008a88c:	223ffc36 	bltu	r4,r8,2008a880 <__flash_rwdata_start+0xfffefa14>
2008a890:	393fff04 	addi	r4,r7,-4
2008a894:	2008d0ba 	srli	r4,r4,2
2008a898:	39c000cc 	andi	r7,r7,3
2008a89c:	21000044 	addi	r4,r4,1
2008a8a0:	2109883a 	add	r4,r4,r4
2008a8a4:	2109883a 	add	r4,r4,r4
2008a8a8:	1907883a 	add	r3,r3,r4
2008a8ac:	38000426 	beq	r7,zero,2008a8c0 <memset+0x114>
2008a8b0:	19cf883a 	add	r7,r3,r7
2008a8b4:	19400005 	stb	r5,0(r3)
2008a8b8:	18c00044 	addi	r3,r3,1
2008a8bc:	19fffd1e 	bne	r3,r7,2008a8b4 <__flash_rwdata_start+0xfffefa48>
2008a8c0:	f800283a 	ret
2008a8c4:	2007883a 	mov	r3,r4
2008a8c8:	300f883a 	mov	r7,r6
2008a8cc:	003fc806 	br	2008a7f0 <__flash_rwdata_start+0xfffef984>

2008a8d0 <_printf_r>:
2008a8d0:	defffd04 	addi	sp,sp,-12
2008a8d4:	dfc00015 	stw	ra,0(sp)
2008a8d8:	d9800115 	stw	r6,4(sp)
2008a8dc:	d9c00215 	stw	r7,8(sp)
2008a8e0:	280d883a 	mov	r6,r5
2008a8e4:	21400217 	ldw	r5,8(r4)
2008a8e8:	d9c00104 	addi	r7,sp,4
2008a8ec:	008cc600 	call	2008cc60 <___vfprintf_internal_r>
2008a8f0:	dfc00017 	ldw	ra,0(sp)
2008a8f4:	dec00304 	addi	sp,sp,12
2008a8f8:	f800283a 	ret

2008a8fc <printf>:
2008a8fc:	defffc04 	addi	sp,sp,-16
2008a900:	dfc00015 	stw	ra,0(sp)
2008a904:	d9400115 	stw	r5,4(sp)
2008a908:	d9800215 	stw	r6,8(sp)
2008a90c:	d9c00315 	stw	r7,12(sp)
2008a910:	00800034 	movhi	r2,0
2008a914:	108a8c04 	addi	r2,r2,10800
2008a918:	10800017 	ldw	r2,0(r2)
2008a91c:	200b883a 	mov	r5,r4
2008a920:	d9800104 	addi	r6,sp,4
2008a924:	11000217 	ldw	r4,8(r2)
2008a928:	008ebb00 	call	2008ebb0 <__vfprintf_internal>
2008a92c:	dfc00017 	ldw	ra,0(sp)
2008a930:	dec00404 	addi	sp,sp,16
2008a934:	f800283a 	ret

2008a938 <_putchar_r>:
2008a938:	21800217 	ldw	r6,8(r4)
2008a93c:	0092edc1 	jmpi	20092edc <_putc_r>

2008a940 <putchar>:
2008a940:	00800034 	movhi	r2,0
2008a944:	108a8c04 	addi	r2,r2,10800
2008a948:	200b883a 	mov	r5,r4
2008a94c:	11000017 	ldw	r4,0(r2)
2008a950:	21800217 	ldw	r6,8(r4)
2008a954:	0092edc1 	jmpi	20092edc <_putc_r>

2008a958 <_puts_r>:
2008a958:	defff604 	addi	sp,sp,-40
2008a95c:	dc000715 	stw	r16,28(sp)
2008a960:	2021883a 	mov	r16,r4
2008a964:	2809883a 	mov	r4,r5
2008a968:	dc400815 	stw	r17,32(sp)
2008a96c:	dfc00915 	stw	ra,36(sp)
2008a970:	2823883a 	mov	r17,r5
2008a974:	008abd00 	call	2008abd0 <strlen>
2008a978:	81400217 	ldw	r5,8(r16)
2008a97c:	11000044 	addi	r4,r2,1
2008a980:	d8800115 	stw	r2,4(sp)
2008a984:	00800034 	movhi	r2,0
2008a988:	2980030b 	ldhu	r6,12(r5)
2008a98c:	10808604 	addi	r2,r2,536
2008a990:	d8800215 	stw	r2,8(sp)
2008a994:	00800044 	movi	r2,1
2008a998:	d8800315 	stw	r2,12(sp)
2008a99c:	00800084 	movi	r2,2
2008a9a0:	d8800515 	stw	r2,20(sp)
2008a9a4:	dc400015 	stw	r17,0(sp)
2008a9a8:	d9000615 	stw	r4,24(sp)
2008a9ac:	dec00415 	stw	sp,16(sp)
2008a9b0:	3088000c 	andi	r2,r6,8192
2008a9b4:	1000061e 	bne	r2,zero,2008a9d0 <_puts_r+0x78>
2008a9b8:	29001917 	ldw	r4,100(r5)
2008a9bc:	00b7ffc4 	movi	r2,-8193
2008a9c0:	31880014 	ori	r6,r6,8192
2008a9c4:	2084703a 	and	r2,r4,r2
2008a9c8:	2980030d 	sth	r6,12(r5)
2008a9cc:	28801915 	stw	r2,100(r5)
2008a9d0:	8009883a 	mov	r4,r16
2008a9d4:	d9800404 	addi	r6,sp,16
2008a9d8:	00914180 	call	20091418 <__sfvwrite_r>
2008a9dc:	1000061e 	bne	r2,zero,2008a9f8 <_puts_r+0xa0>
2008a9e0:	00800284 	movi	r2,10
2008a9e4:	dfc00917 	ldw	ra,36(sp)
2008a9e8:	dc400817 	ldw	r17,32(sp)
2008a9ec:	dc000717 	ldw	r16,28(sp)
2008a9f0:	dec00a04 	addi	sp,sp,40
2008a9f4:	f800283a 	ret
2008a9f8:	00bfffc4 	movi	r2,-1
2008a9fc:	003ff906 	br	2008a9e4 <__flash_rwdata_start+0xfffefb78>

2008aa00 <puts>:
2008aa00:	00800034 	movhi	r2,0
2008aa04:	108a8c04 	addi	r2,r2,10800
2008aa08:	200b883a 	mov	r5,r4
2008aa0c:	11000017 	ldw	r4,0(r2)
2008aa10:	008a9581 	jmpi	2008a958 <_puts_r>

2008aa14 <_sbrk_r>:
2008aa14:	defffd04 	addi	sp,sp,-12
2008aa18:	dc000015 	stw	r16,0(sp)
2008aa1c:	04000034 	movhi	r16,0
2008aa20:	dc400115 	stw	r17,4(sp)
2008aa24:	840ab004 	addi	r16,r16,10944
2008aa28:	2023883a 	mov	r17,r4
2008aa2c:	2809883a 	mov	r4,r5
2008aa30:	dfc00215 	stw	ra,8(sp)
2008aa34:	80000015 	stw	zero,0(r16)
2008aa38:	0097bfc0 	call	20097bfc <sbrk>
2008aa3c:	00ffffc4 	movi	r3,-1
2008aa40:	10c00526 	beq	r2,r3,2008aa58 <_sbrk_r+0x44>
2008aa44:	dfc00217 	ldw	ra,8(sp)
2008aa48:	dc400117 	ldw	r17,4(sp)
2008aa4c:	dc000017 	ldw	r16,0(sp)
2008aa50:	dec00304 	addi	sp,sp,12
2008aa54:	f800283a 	ret
2008aa58:	80c00017 	ldw	r3,0(r16)
2008aa5c:	183ff926 	beq	r3,zero,2008aa44 <__flash_rwdata_start+0xfffefbd8>
2008aa60:	88c00015 	stw	r3,0(r17)
2008aa64:	003ff706 	br	2008aa44 <__flash_rwdata_start+0xfffefbd8>

2008aa68 <_sprintf_r>:
2008aa68:	deffe404 	addi	sp,sp,-112
2008aa6c:	2807883a 	mov	r3,r5
2008aa70:	dfc01a15 	stw	ra,104(sp)
2008aa74:	d9c01b15 	stw	r7,108(sp)
2008aa78:	00a00034 	movhi	r2,32768
2008aa7c:	10bfffc4 	addi	r2,r2,-1
2008aa80:	02008204 	movi	r8,520
2008aa84:	d8800215 	stw	r2,8(sp)
2008aa88:	d8800515 	stw	r2,20(sp)
2008aa8c:	d80b883a 	mov	r5,sp
2008aa90:	d9c01b04 	addi	r7,sp,108
2008aa94:	00bfffc4 	movi	r2,-1
2008aa98:	d8c00015 	stw	r3,0(sp)
2008aa9c:	d8c00415 	stw	r3,16(sp)
2008aaa0:	da00030d 	sth	r8,12(sp)
2008aaa4:	d880038d 	sth	r2,14(sp)
2008aaa8:	008acd00 	call	2008acd0 <___svfprintf_internal_r>
2008aaac:	d8c00017 	ldw	r3,0(sp)
2008aab0:	18000005 	stb	zero,0(r3)
2008aab4:	dfc01a17 	ldw	ra,104(sp)
2008aab8:	dec01c04 	addi	sp,sp,112
2008aabc:	f800283a 	ret

2008aac0 <sprintf>:
2008aac0:	deffe304 	addi	sp,sp,-116
2008aac4:	2007883a 	mov	r3,r4
2008aac8:	dfc01a15 	stw	ra,104(sp)
2008aacc:	d9801b15 	stw	r6,108(sp)
2008aad0:	d9c01c15 	stw	r7,112(sp)
2008aad4:	01000034 	movhi	r4,0
2008aad8:	210a8c04 	addi	r4,r4,10800
2008aadc:	21000017 	ldw	r4,0(r4)
2008aae0:	00a00034 	movhi	r2,32768
2008aae4:	10bfffc4 	addi	r2,r2,-1
2008aae8:	280d883a 	mov	r6,r5
2008aaec:	02008204 	movi	r8,520
2008aaf0:	d8800215 	stw	r2,8(sp)
2008aaf4:	d8800515 	stw	r2,20(sp)
2008aaf8:	d80b883a 	mov	r5,sp
2008aafc:	d9c01b04 	addi	r7,sp,108
2008ab00:	00bfffc4 	movi	r2,-1
2008ab04:	d8c00015 	stw	r3,0(sp)
2008ab08:	d8c00415 	stw	r3,16(sp)
2008ab0c:	da00030d 	sth	r8,12(sp)
2008ab10:	d880038d 	sth	r2,14(sp)
2008ab14:	008acd00 	call	2008acd0 <___svfprintf_internal_r>
2008ab18:	d8c00017 	ldw	r3,0(sp)
2008ab1c:	18000005 	stb	zero,0(r3)
2008ab20:	dfc01a17 	ldw	ra,104(sp)
2008ab24:	dec01d04 	addi	sp,sp,116
2008ab28:	f800283a 	ret

2008ab2c <strcmp>:
2008ab2c:	2144b03a 	or	r2,r4,r5
2008ab30:	108000cc 	andi	r2,r2,3
2008ab34:	1000171e 	bne	r2,zero,2008ab94 <strcmp+0x68>
2008ab38:	20800017 	ldw	r2,0(r4)
2008ab3c:	28c00017 	ldw	r3,0(r5)
2008ab40:	10c0141e 	bne	r2,r3,2008ab94 <strcmp+0x68>
2008ab44:	027fbff4 	movhi	r9,65279
2008ab48:	4a7fbfc4 	addi	r9,r9,-257
2008ab4c:	0086303a 	nor	r3,zero,r2
2008ab50:	02202074 	movhi	r8,32897
2008ab54:	1245883a 	add	r2,r2,r9
2008ab58:	42202004 	addi	r8,r8,-32640
2008ab5c:	10c4703a 	and	r2,r2,r3
2008ab60:	1204703a 	and	r2,r2,r8
2008ab64:	10000226 	beq	r2,zero,2008ab70 <strcmp+0x44>
2008ab68:	00001706 	br	2008abc8 <strcmp+0x9c>
2008ab6c:	1000161e 	bne	r2,zero,2008abc8 <strcmp+0x9c>
2008ab70:	21000104 	addi	r4,r4,4
2008ab74:	20c00017 	ldw	r3,0(r4)
2008ab78:	29400104 	addi	r5,r5,4
2008ab7c:	29800017 	ldw	r6,0(r5)
2008ab80:	1a4f883a 	add	r7,r3,r9
2008ab84:	00c4303a 	nor	r2,zero,r3
2008ab88:	3884703a 	and	r2,r7,r2
2008ab8c:	1204703a 	and	r2,r2,r8
2008ab90:	19bff626 	beq	r3,r6,2008ab6c <__flash_rwdata_start+0xfffefd00>
2008ab94:	20800007 	ldb	r2,0(r4)
2008ab98:	1000051e 	bne	r2,zero,2008abb0 <strcmp+0x84>
2008ab9c:	00000606 	br	2008abb8 <strcmp+0x8c>
2008aba0:	21000044 	addi	r4,r4,1
2008aba4:	20800007 	ldb	r2,0(r4)
2008aba8:	29400044 	addi	r5,r5,1
2008abac:	10000226 	beq	r2,zero,2008abb8 <strcmp+0x8c>
2008abb0:	28c00007 	ldb	r3,0(r5)
2008abb4:	10fffa26 	beq	r2,r3,2008aba0 <__flash_rwdata_start+0xfffefd34>
2008abb8:	20800003 	ldbu	r2,0(r4)
2008abbc:	28c00003 	ldbu	r3,0(r5)
2008abc0:	10c5c83a 	sub	r2,r2,r3
2008abc4:	f800283a 	ret
2008abc8:	0005883a 	mov	r2,zero
2008abcc:	f800283a 	ret

2008abd0 <strlen>:
2008abd0:	208000cc 	andi	r2,r4,3
2008abd4:	10002026 	beq	r2,zero,2008ac58 <strlen+0x88>
2008abd8:	20800007 	ldb	r2,0(r4)
2008abdc:	10002026 	beq	r2,zero,2008ac60 <strlen+0x90>
2008abe0:	2005883a 	mov	r2,r4
2008abe4:	00000206 	br	2008abf0 <strlen+0x20>
2008abe8:	10c00007 	ldb	r3,0(r2)
2008abec:	18001826 	beq	r3,zero,2008ac50 <strlen+0x80>
2008abf0:	10800044 	addi	r2,r2,1
2008abf4:	10c000cc 	andi	r3,r2,3
2008abf8:	183ffb1e 	bne	r3,zero,2008abe8 <__flash_rwdata_start+0xfffefd7c>
2008abfc:	10c00017 	ldw	r3,0(r2)
2008ac00:	01ffbff4 	movhi	r7,65279
2008ac04:	39ffbfc4 	addi	r7,r7,-257
2008ac08:	00ca303a 	nor	r5,zero,r3
2008ac0c:	01a02074 	movhi	r6,32897
2008ac10:	19c7883a 	add	r3,r3,r7
2008ac14:	31a02004 	addi	r6,r6,-32640
2008ac18:	1946703a 	and	r3,r3,r5
2008ac1c:	1986703a 	and	r3,r3,r6
2008ac20:	1800091e 	bne	r3,zero,2008ac48 <strlen+0x78>
2008ac24:	10800104 	addi	r2,r2,4
2008ac28:	10c00017 	ldw	r3,0(r2)
2008ac2c:	19cb883a 	add	r5,r3,r7
2008ac30:	00c6303a 	nor	r3,zero,r3
2008ac34:	28c6703a 	and	r3,r5,r3
2008ac38:	1986703a 	and	r3,r3,r6
2008ac3c:	183ff926 	beq	r3,zero,2008ac24 <__flash_rwdata_start+0xfffefdb8>
2008ac40:	00000106 	br	2008ac48 <strlen+0x78>
2008ac44:	10800044 	addi	r2,r2,1
2008ac48:	10c00007 	ldb	r3,0(r2)
2008ac4c:	183ffd1e 	bne	r3,zero,2008ac44 <__flash_rwdata_start+0xfffefdd8>
2008ac50:	1105c83a 	sub	r2,r2,r4
2008ac54:	f800283a 	ret
2008ac58:	2005883a 	mov	r2,r4
2008ac5c:	003fe706 	br	2008abfc <__flash_rwdata_start+0xfffefd90>
2008ac60:	0005883a 	mov	r2,zero
2008ac64:	f800283a 	ret

2008ac68 <strrchr>:
2008ac68:	defffd04 	addi	sp,sp,-12
2008ac6c:	dc000015 	stw	r16,0(sp)
2008ac70:	dfc00215 	stw	ra,8(sp)
2008ac74:	dc400115 	stw	r17,4(sp)
2008ac78:	2821883a 	mov	r16,r5
2008ac7c:	28000f26 	beq	r5,zero,2008acbc <strrchr+0x54>
2008ac80:	2007883a 	mov	r3,r4
2008ac84:	0023883a 	mov	r17,zero
2008ac88:	00000206 	br	2008ac94 <strrchr+0x2c>
2008ac8c:	10c00044 	addi	r3,r2,1
2008ac90:	1023883a 	mov	r17,r2
2008ac94:	1809883a 	mov	r4,r3
2008ac98:	800b883a 	mov	r5,r16
2008ac9c:	00937600 	call	20093760 <strchr>
2008aca0:	103ffa1e 	bne	r2,zero,2008ac8c <__flash_rwdata_start+0xfffefe20>
2008aca4:	8805883a 	mov	r2,r17
2008aca8:	dfc00217 	ldw	ra,8(sp)
2008acac:	dc400117 	ldw	r17,4(sp)
2008acb0:	dc000017 	ldw	r16,0(sp)
2008acb4:	dec00304 	addi	sp,sp,12
2008acb8:	f800283a 	ret
2008acbc:	dfc00217 	ldw	ra,8(sp)
2008acc0:	dc400117 	ldw	r17,4(sp)
2008acc4:	dc000017 	ldw	r16,0(sp)
2008acc8:	dec00304 	addi	sp,sp,12
2008accc:	00937601 	jmpi	20093760 <strchr>

2008acd0 <___svfprintf_internal_r>:
2008acd0:	deffb504 	addi	sp,sp,-300
2008acd4:	dfc04a15 	stw	ra,296(sp)
2008acd8:	ddc04815 	stw	r23,288(sp)
2008acdc:	d9002f15 	stw	r4,188(sp)
2008ace0:	282f883a 	mov	r23,r5
2008ace4:	d9802915 	stw	r6,164(sp)
2008ace8:	d9c02d15 	stw	r7,180(sp)
2008acec:	df004915 	stw	fp,292(sp)
2008acf0:	dd804715 	stw	r22,284(sp)
2008acf4:	dd404615 	stw	r21,280(sp)
2008acf8:	dd004515 	stw	r20,276(sp)
2008acfc:	dcc04415 	stw	r19,272(sp)
2008ad00:	dc804315 	stw	r18,268(sp)
2008ad04:	dc404215 	stw	r17,264(sp)
2008ad08:	dc004115 	stw	r16,260(sp)
2008ad0c:	0091b0c0 	call	20091b0c <_localeconv_r>
2008ad10:	10800017 	ldw	r2,0(r2)
2008ad14:	1009883a 	mov	r4,r2
2008ad18:	d8803515 	stw	r2,212(sp)
2008ad1c:	008abd00 	call	2008abd0 <strlen>
2008ad20:	d8803915 	stw	r2,228(sp)
2008ad24:	b880030b 	ldhu	r2,12(r23)
2008ad28:	1080200c 	andi	r2,r2,128
2008ad2c:	10000226 	beq	r2,zero,2008ad38 <___svfprintf_internal_r+0x68>
2008ad30:	b8800417 	ldw	r2,16(r23)
2008ad34:	10065f26 	beq	r2,zero,2008c6b4 <___svfprintf_internal_r+0x19e4>
2008ad38:	db001dc4 	addi	r12,sp,119
2008ad3c:	dd801e04 	addi	r22,sp,120
2008ad40:	d8800404 	addi	r2,sp,16
2008ad44:	05000034 	movhi	r20,0
2008ad48:	b317c83a 	sub	r11,r22,r12
2008ad4c:	a501e284 	addi	r20,r20,1930
2008ad50:	db002815 	stw	r12,160(sp)
2008ad54:	d8801e15 	stw	r2,120(sp)
2008ad58:	d8002015 	stw	zero,128(sp)
2008ad5c:	d8001f15 	stw	zero,124(sp)
2008ad60:	d8003315 	stw	zero,204(sp)
2008ad64:	d8003715 	stw	zero,220(sp)
2008ad68:	d8003815 	stw	zero,224(sp)
2008ad6c:	1011883a 	mov	r8,r2
2008ad70:	d8003b15 	stw	zero,236(sp)
2008ad74:	d8003a15 	stw	zero,232(sp)
2008ad78:	d8003015 	stw	zero,192(sp)
2008ad7c:	dac03d15 	stw	r11,244(sp)
2008ad80:	db002917 	ldw	r12,164(sp)
2008ad84:	60800007 	ldb	r2,0(r12)
2008ad88:	1000ab26 	beq	r2,zero,2008b038 <___svfprintf_internal_r+0x368>
2008ad8c:	00c00944 	movi	r3,37
2008ad90:	10c0a926 	beq	r2,r3,2008b038 <___svfprintf_internal_r+0x368>
2008ad94:	6021883a 	mov	r16,r12
2008ad98:	00000106 	br	2008ada0 <___svfprintf_internal_r+0xd0>
2008ad9c:	10c08426 	beq	r2,r3,2008afb0 <___svfprintf_internal_r+0x2e0>
2008ada0:	84000044 	addi	r16,r16,1
2008ada4:	80800007 	ldb	r2,0(r16)
2008ada8:	103ffc1e 	bne	r2,zero,2008ad9c <__flash_rwdata_start+0xfffeff30>
2008adac:	dac02917 	ldw	r11,164(sp)
2008adb0:	82e3c83a 	sub	r17,r16,r11
2008adb4:	88000f26 	beq	r17,zero,2008adf4 <___svfprintf_internal_r+0x124>
2008adb8:	d8c02017 	ldw	r3,128(sp)
2008adbc:	d8801f17 	ldw	r2,124(sp)
2008adc0:	dac02917 	ldw	r11,164(sp)
2008adc4:	1c47883a 	add	r3,r3,r17
2008adc8:	10800044 	addi	r2,r2,1
2008adcc:	d8c02015 	stw	r3,128(sp)
2008add0:	42c00015 	stw	r11,0(r8)
2008add4:	44400115 	stw	r17,4(r8)
2008add8:	d8801f15 	stw	r2,124(sp)
2008addc:	00c001c4 	movi	r3,7
2008ade0:	18807616 	blt	r3,r2,2008afbc <___svfprintf_internal_r+0x2ec>
2008ade4:	42000204 	addi	r8,r8,8
2008ade8:	db003017 	ldw	r12,192(sp)
2008adec:	6459883a 	add	r12,r12,r17
2008adf0:	db003015 	stw	r12,192(sp)
2008adf4:	80800007 	ldb	r2,0(r16)
2008adf8:	10007726 	beq	r2,zero,2008afd8 <___svfprintf_internal_r+0x308>
2008adfc:	80800044 	addi	r2,r16,1
2008ae00:	84000047 	ldb	r16,1(r16)
2008ae04:	d8002785 	stb	zero,158(sp)
2008ae08:	000d883a 	mov	r6,zero
2008ae0c:	027fffc4 	movi	r9,-1
2008ae10:	d8002e15 	stw	zero,184(sp)
2008ae14:	0023883a 	mov	r17,zero
2008ae18:	01001604 	movi	r4,88
2008ae1c:	01400244 	movi	r5,9
2008ae20:	02800a84 	movi	r10,42
2008ae24:	01c01b04 	movi	r7,108
2008ae28:	10c00044 	addi	r3,r2,1
2008ae2c:	80bff804 	addi	r2,r16,-32
2008ae30:	2082e636 	bltu	r4,r2,2008b9cc <___svfprintf_internal_r+0xcfc>
2008ae34:	100490ba 	slli	r2,r2,2
2008ae38:	02c80274 	movhi	r11,8201
2008ae3c:	5aeb9304 	addi	r11,r11,-20916
2008ae40:	12c5883a 	add	r2,r2,r11
2008ae44:	10800017 	ldw	r2,0(r2)
2008ae48:	1000683a 	jmp	r2
2008ae4c:	2008b7ac 	andhi	zero,r4,8926
2008ae50:	2008b9cc 	andi	zero,r4,8935
2008ae54:	2008b9cc 	andi	zero,r4,8935
2008ae58:	2008b7cc 	andi	zero,r4,8927
2008ae5c:	2008b9cc 	andi	zero,r4,8935
2008ae60:	2008b9cc 	andi	zero,r4,8935
2008ae64:	2008b9cc 	andi	zero,r4,8935
2008ae68:	2008b9cc 	andi	zero,r4,8935
2008ae6c:	2008b9cc 	andi	zero,r4,8935
2008ae70:	2008b9cc 	andi	zero,r4,8935
2008ae74:	2008b7dc 	xori	zero,r4,8927
2008ae78:	2008b808 	cmpgei	zero,r4,8928
2008ae7c:	2008b9cc 	andi	zero,r4,8935
2008ae80:	2008b040 	call	22008b04 <__flash_rwdata_start+0x1f6dc98>
2008ae84:	2008b050 	cmplti	zero,r4,8897
2008ae88:	2008b9cc 	andi	zero,r4,8935
2008ae8c:	2008b090 	cmplti	zero,r4,8898
2008ae90:	2008b670 	cmpltui	zero,r4,8921
2008ae94:	2008b670 	cmpltui	zero,r4,8921
2008ae98:	2008b670 	cmpltui	zero,r4,8921
2008ae9c:	2008b670 	cmpltui	zero,r4,8921
2008aea0:	2008b670 	cmpltui	zero,r4,8921
2008aea4:	2008b670 	cmpltui	zero,r4,8921
2008aea8:	2008b670 	cmpltui	zero,r4,8921
2008aeac:	2008b670 	cmpltui	zero,r4,8921
2008aeb0:	2008b670 	cmpltui	zero,r4,8921
2008aeb4:	2008b9cc 	andi	zero,r4,8935
2008aeb8:	2008b9cc 	andi	zero,r4,8935
2008aebc:	2008b9cc 	andi	zero,r4,8935
2008aec0:	2008b9cc 	andi	zero,r4,8935
2008aec4:	2008b9cc 	andi	zero,r4,8935
2008aec8:	2008b9cc 	andi	zero,r4,8935
2008aecc:	2008b9cc 	andi	zero,r4,8935
2008aed0:	2008b9cc 	andi	zero,r4,8935
2008aed4:	2008b9cc 	andi	zero,r4,8935
2008aed8:	2008b9cc 	andi	zero,r4,8935
2008aedc:	2008b0a0 	cmpeqi	zero,r4,8898
2008aee0:	2008b520 	cmpeqi	zero,r4,8916
2008aee4:	2008b9cc 	andi	zero,r4,8935
2008aee8:	2008b520 	cmpeqi	zero,r4,8916
2008aeec:	2008b9cc 	andi	zero,r4,8935
2008aef0:	2008b9cc 	andi	zero,r4,8935
2008aef4:	2008b9cc 	andi	zero,r4,8935
2008aef8:	2008b9cc 	andi	zero,r4,8935
2008aefc:	2008b5c4 	addi	zero,r4,8919
2008af00:	2008b9cc 	andi	zero,r4,8935
2008af04:	2008b9cc 	andi	zero,r4,8935
2008af08:	2008b960 	cmpeqi	zero,r4,8933
2008af0c:	2008b9cc 	andi	zero,r4,8935
2008af10:	2008b9cc 	andi	zero,r4,8935
2008af14:	2008b9cc 	andi	zero,r4,8935
2008af18:	2008b9cc 	andi	zero,r4,8935
2008af1c:	2008b9cc 	andi	zero,r4,8935
2008af20:	2008b5d4 	ori	zero,r4,8919
2008af24:	2008b9cc 	andi	zero,r4,8935
2008af28:	2008b9cc 	andi	zero,r4,8935
2008af2c:	2008b614 	ori	zero,r4,8920
2008af30:	2008b9cc 	andi	zero,r4,8935
2008af34:	2008b9cc 	andi	zero,r4,8935
2008af38:	2008b9cc 	andi	zero,r4,8935
2008af3c:	2008b9cc 	andi	zero,r4,8935
2008af40:	2008b9cc 	andi	zero,r4,8935
2008af44:	2008b9cc 	andi	zero,r4,8935
2008af48:	2008b9cc 	andi	zero,r4,8935
2008af4c:	2008b9cc 	andi	zero,r4,8935
2008af50:	2008b9cc 	andi	zero,r4,8935
2008af54:	2008b9cc 	andi	zero,r4,8935
2008af58:	2008b8b8 	rdprs	zero,r4,8930
2008af5c:	2008b8f8 	rdprs	zero,r4,8931
2008af60:	2008b520 	cmpeqi	zero,r4,8916
2008af64:	2008b520 	cmpeqi	zero,r4,8916
2008af68:	2008b520 	cmpeqi	zero,r4,8916
2008af6c:	2008b818 	cmpnei	zero,r4,8928
2008af70:	2008b8f8 	rdprs	zero,r4,8931
2008af74:	2008b9cc 	andi	zero,r4,8935
2008af78:	2008b9cc 	andi	zero,r4,8935
2008af7c:	2008b828 	cmpgeui	zero,r4,8928
2008af80:	2008b9cc 	andi	zero,r4,8935
2008af84:	2008b83c 	xorhi	zero,r4,8928
2008af88:	2008b990 	cmplti	zero,r4,8934
2008af8c:	2008b870 	cmpltui	zero,r4,8929
2008af90:	2008b6a4 	muli	zero,r4,8922
2008af94:	2008b9cc 	andi	zero,r4,8935
2008af98:	2008b6b4 	orhi	zero,r4,8922
2008af9c:	2008b9cc 	andi	zero,r4,8935
2008afa0:	2008b72c 	andhi	zero,r4,8924
2008afa4:	2008b9cc 	andi	zero,r4,8935
2008afa8:	2008b9cc 	andi	zero,r4,8935
2008afac:	2008b76c 	andhi	zero,r4,8925
2008afb0:	db002917 	ldw	r12,164(sp)
2008afb4:	8323c83a 	sub	r17,r16,r12
2008afb8:	003f7e06 	br	2008adb4 <__flash_rwdata_start+0xfffeff48>
2008afbc:	d9002f17 	ldw	r4,188(sp)
2008afc0:	b80b883a 	mov	r5,r23
2008afc4:	b00d883a 	mov	r6,r22
2008afc8:	00938c40 	call	200938c4 <__ssprint_r>
2008afcc:	1000081e 	bne	r2,zero,2008aff0 <___svfprintf_internal_r+0x320>
2008afd0:	da000404 	addi	r8,sp,16
2008afd4:	003f8406 	br	2008ade8 <__flash_rwdata_start+0xfffeff7c>
2008afd8:	d8802017 	ldw	r2,128(sp)
2008afdc:	10000426 	beq	r2,zero,2008aff0 <___svfprintf_internal_r+0x320>
2008afe0:	d9002f17 	ldw	r4,188(sp)
2008afe4:	b80b883a 	mov	r5,r23
2008afe8:	d9801e04 	addi	r6,sp,120
2008afec:	00938c40 	call	200938c4 <__ssprint_r>
2008aff0:	b880030b 	ldhu	r2,12(r23)
2008aff4:	1080100c 	andi	r2,r2,64
2008aff8:	10000d1e 	bne	r2,zero,2008b030 <___svfprintf_internal_r+0x360>
2008affc:	d8803017 	ldw	r2,192(sp)
2008b000:	dfc04a17 	ldw	ra,296(sp)
2008b004:	df004917 	ldw	fp,292(sp)
2008b008:	ddc04817 	ldw	r23,288(sp)
2008b00c:	dd804717 	ldw	r22,284(sp)
2008b010:	dd404617 	ldw	r21,280(sp)
2008b014:	dd004517 	ldw	r20,276(sp)
2008b018:	dcc04417 	ldw	r19,272(sp)
2008b01c:	dc804317 	ldw	r18,268(sp)
2008b020:	dc404217 	ldw	r17,264(sp)
2008b024:	dc004117 	ldw	r16,260(sp)
2008b028:	dec04b04 	addi	sp,sp,300
2008b02c:	f800283a 	ret
2008b030:	00bfffc4 	movi	r2,-1
2008b034:	003ff206 	br	2008b000 <__flash_rwdata_start+0xffff0194>
2008b038:	dc002917 	ldw	r16,164(sp)
2008b03c:	003f6d06 	br	2008adf4 <__flash_rwdata_start+0xfffeff88>
2008b040:	1805883a 	mov	r2,r3
2008b044:	8c400114 	ori	r17,r17,4
2008b048:	1c000007 	ldb	r16,0(r3)
2008b04c:	003f7606 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b050:	1c000007 	ldb	r16,0(r3)
2008b054:	18800044 	addi	r2,r3,1
2008b058:	8286e726 	beq	r16,r10,2008cbf8 <___svfprintf_internal_r+0x1f28>
2008b05c:	82fff404 	addi	r11,r16,-48
2008b060:	1007883a 	mov	r3,r2
2008b064:	0013883a 	mov	r9,zero
2008b068:	2aff7036 	bltu	r5,r11,2008ae2c <__flash_rwdata_start+0xfffeffc0>
2008b06c:	1c000007 	ldb	r16,0(r3)
2008b070:	4a4002a4 	muli	r9,r9,10
2008b074:	18c00044 	addi	r3,r3,1
2008b078:	5a53883a 	add	r9,r11,r9
2008b07c:	82fff404 	addi	r11,r16,-48
2008b080:	2afffa2e 	bgeu	r5,r11,2008b06c <__flash_rwdata_start+0xffff0200>
2008b084:	483f690e 	bge	r9,zero,2008ae2c <__flash_rwdata_start+0xfffeffc0>
2008b088:	027fffc4 	movi	r9,-1
2008b08c:	003f6706 	br	2008ae2c <__flash_rwdata_start+0xfffeffc0>
2008b090:	8c402014 	ori	r17,r17,128
2008b094:	1805883a 	mov	r2,r3
2008b098:	1c000007 	ldb	r16,0(r3)
2008b09c:	003f6206 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b0a0:	8c400414 	ori	r17,r17,16
2008b0a4:	d8c02915 	stw	r3,164(sp)
2008b0a8:	d9802785 	stb	r6,158(sp)
2008b0ac:	8880080c 	andi	r2,r17,32
2008b0b0:	d8c02d17 	ldw	r3,180(sp)
2008b0b4:	10021526 	beq	r2,zero,2008b90c <___svfprintf_internal_r+0xc3c>
2008b0b8:	db002d17 	ldw	r12,180(sp)
2008b0bc:	18800117 	ldw	r2,4(r3)
2008b0c0:	1cc00017 	ldw	r19,0(r3)
2008b0c4:	63000204 	addi	r12,r12,8
2008b0c8:	db002d15 	stw	r12,180(sp)
2008b0cc:	1039883a 	mov	fp,r2
2008b0d0:	10021916 	blt	r2,zero,2008b938 <___svfprintf_internal_r+0xc68>
2008b0d4:	dd402783 	ldbu	r21,158(sp)
2008b0d8:	da403215 	stw	r9,200(sp)
2008b0dc:	00800044 	movi	r2,1
2008b0e0:	9f06b03a 	or	r3,r19,fp
2008b0e4:	48000216 	blt	r9,zero,2008b0f0 <___svfprintf_internal_r+0x420>
2008b0e8:	013fdfc4 	movi	r4,-129
2008b0ec:	8922703a 	and	r17,r17,r4
2008b0f0:	1802461e 	bne	r3,zero,2008ba0c <___svfprintf_internal_r+0xd3c>
2008b0f4:	48035426 	beq	r9,zero,2008be48 <___svfprintf_internal_r+0x1178>
2008b0f8:	10803fcc 	andi	r2,r2,255
2008b0fc:	00c00044 	movi	r3,1
2008b100:	10c26726 	beq	r2,r3,2008baa0 <___svfprintf_internal_r+0xdd0>
2008b104:	00c00084 	movi	r3,2
2008b108:	10c2ea26 	beq	r2,r3,2008bcb4 <___svfprintf_internal_r+0xfe4>
2008b10c:	b007883a 	mov	r3,r22
2008b110:	9808d0fa 	srli	r4,r19,3
2008b114:	e00a977a 	slli	r5,fp,29
2008b118:	e038d0fa 	srli	fp,fp,3
2008b11c:	9cc001cc 	andi	r19,r19,7
2008b120:	98800c04 	addi	r2,r19,48
2008b124:	18ffffc4 	addi	r3,r3,-1
2008b128:	2926b03a 	or	r19,r5,r4
2008b12c:	18800005 	stb	r2,0(r3)
2008b130:	9f08b03a 	or	r4,r19,fp
2008b134:	203ff61e 	bne	r4,zero,2008b110 <__flash_rwdata_start+0xffff02a4>
2008b138:	8900004c 	andi	r4,r17,1
2008b13c:	d8c03115 	stw	r3,196(sp)
2008b140:	2002ea26 	beq	r4,zero,2008bcec <___svfprintf_internal_r+0x101c>
2008b144:	10803fcc 	andi	r2,r2,255
2008b148:	1080201c 	xori	r2,r2,128
2008b14c:	10bfe004 	addi	r2,r2,-128
2008b150:	01000c04 	movi	r4,48
2008b154:	11057526 	beq	r2,r4,2008c72c <___svfprintf_internal_r+0x1a5c>
2008b158:	dac03117 	ldw	r11,196(sp)
2008b15c:	193fffc5 	stb	r4,-1(r3)
2008b160:	5affffc4 	addi	r11,r11,-1
2008b164:	dac03115 	stw	r11,196(sp)
2008b168:	b2e5c83a 	sub	r18,r22,r11
2008b16c:	9005883a 	mov	r2,r18
2008b170:	9240010e 	bge	r18,r9,2008b178 <___svfprintf_internal_r+0x4a8>
2008b174:	4805883a 	mov	r2,r9
2008b178:	d8802a15 	stw	r2,168(sp)
2008b17c:	d8003415 	stw	zero,208(sp)
2008b180:	a8803fcc 	andi	r2,r21,255
2008b184:	1080201c 	xori	r2,r2,128
2008b188:	10bfe004 	addi	r2,r2,-128
2008b18c:	10000326 	beq	r2,zero,2008b19c <___svfprintf_internal_r+0x4cc>
2008b190:	d8c02a17 	ldw	r3,168(sp)
2008b194:	18c00044 	addi	r3,r3,1
2008b198:	d8c02a15 	stw	r3,168(sp)
2008b19c:	8ac0008c 	andi	r11,r17,2
2008b1a0:	dac02b15 	stw	r11,172(sp)
2008b1a4:	58000326 	beq	r11,zero,2008b1b4 <___svfprintf_internal_r+0x4e4>
2008b1a8:	db002a17 	ldw	r12,168(sp)
2008b1ac:	63000084 	addi	r12,r12,2
2008b1b0:	db002a15 	stw	r12,168(sp)
2008b1b4:	88c0210c 	andi	r3,r17,132
2008b1b8:	d8c02c15 	stw	r3,176(sp)
2008b1bc:	1802111e 	bne	r3,zero,2008ba04 <___svfprintf_internal_r+0xd34>
2008b1c0:	dac02e17 	ldw	r11,184(sp)
2008b1c4:	db002a17 	ldw	r12,168(sp)
2008b1c8:	5b39c83a 	sub	fp,r11,r12
2008b1cc:	07020d0e 	bge	zero,fp,2008ba04 <___svfprintf_internal_r+0xd34>
2008b1d0:	02400404 	movi	r9,16
2008b1d4:	d8c02017 	ldw	r3,128(sp)
2008b1d8:	d8801f17 	ldw	r2,124(sp)
2008b1dc:	4f058c0e 	bge	r9,fp,2008c810 <___svfprintf_internal_r+0x1b40>
2008b1e0:	01400034 	movhi	r5,0
2008b1e4:	e009883a 	mov	r4,fp
2008b1e8:	2941e684 	addi	r5,r5,1946
2008b1ec:	dc003c15 	stw	r16,240(sp)
2008b1f0:	9039883a 	mov	fp,r18
2008b1f4:	d9403615 	stw	r5,216(sp)
2008b1f8:	8825883a 	mov	r18,r17
2008b1fc:	482b883a 	mov	r21,r9
2008b200:	04c001c4 	movi	r19,7
2008b204:	dc002f17 	ldw	r16,188(sp)
2008b208:	2023883a 	mov	r17,r4
2008b20c:	00000306 	br	2008b21c <___svfprintf_internal_r+0x54c>
2008b210:	8c7ffc04 	addi	r17,r17,-16
2008b214:	42000204 	addi	r8,r8,8
2008b218:	ac40130e 	bge	r21,r17,2008b268 <___svfprintf_internal_r+0x598>
2008b21c:	02c00034 	movhi	r11,0
2008b220:	18c00404 	addi	r3,r3,16
2008b224:	10800044 	addi	r2,r2,1
2008b228:	5ac1e684 	addi	r11,r11,1946
2008b22c:	42c00015 	stw	r11,0(r8)
2008b230:	45400115 	stw	r21,4(r8)
2008b234:	d8c02015 	stw	r3,128(sp)
2008b238:	d8801f15 	stw	r2,124(sp)
2008b23c:	98bff40e 	bge	r19,r2,2008b210 <__flash_rwdata_start+0xffff03a4>
2008b240:	8009883a 	mov	r4,r16
2008b244:	b80b883a 	mov	r5,r23
2008b248:	b00d883a 	mov	r6,r22
2008b24c:	00938c40 	call	200938c4 <__ssprint_r>
2008b250:	103f671e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008b254:	8c7ffc04 	addi	r17,r17,-16
2008b258:	d8c02017 	ldw	r3,128(sp)
2008b25c:	d8801f17 	ldw	r2,124(sp)
2008b260:	da000404 	addi	r8,sp,16
2008b264:	ac7fed16 	blt	r21,r17,2008b21c <__flash_rwdata_start+0xffff03b0>
2008b268:	dc003c17 	ldw	r16,240(sp)
2008b26c:	8809883a 	mov	r4,r17
2008b270:	9023883a 	mov	r17,r18
2008b274:	e025883a 	mov	r18,fp
2008b278:	2039883a 	mov	fp,r4
2008b27c:	db003617 	ldw	r12,216(sp)
2008b280:	e0c7883a 	add	r3,fp,r3
2008b284:	10800044 	addi	r2,r2,1
2008b288:	43000015 	stw	r12,0(r8)
2008b28c:	47000115 	stw	fp,4(r8)
2008b290:	d8c02015 	stw	r3,128(sp)
2008b294:	d8801f15 	stw	r2,124(sp)
2008b298:	010001c4 	movi	r4,7
2008b29c:	20834416 	blt	r4,r2,2008bfb0 <___svfprintf_internal_r+0x12e0>
2008b2a0:	d8802787 	ldb	r2,158(sp)
2008b2a4:	42000204 	addi	r8,r8,8
2008b2a8:	10000c26 	beq	r2,zero,2008b2dc <___svfprintf_internal_r+0x60c>
2008b2ac:	d8801f17 	ldw	r2,124(sp)
2008b2b0:	d9002784 	addi	r4,sp,158
2008b2b4:	18c00044 	addi	r3,r3,1
2008b2b8:	10800044 	addi	r2,r2,1
2008b2bc:	41000015 	stw	r4,0(r8)
2008b2c0:	01000044 	movi	r4,1
2008b2c4:	41000115 	stw	r4,4(r8)
2008b2c8:	d8c02015 	stw	r3,128(sp)
2008b2cc:	d8801f15 	stw	r2,124(sp)
2008b2d0:	010001c4 	movi	r4,7
2008b2d4:	2082f616 	blt	r4,r2,2008beb0 <___svfprintf_internal_r+0x11e0>
2008b2d8:	42000204 	addi	r8,r8,8
2008b2dc:	dac02b17 	ldw	r11,172(sp)
2008b2e0:	58000c26 	beq	r11,zero,2008b314 <___svfprintf_internal_r+0x644>
2008b2e4:	d8801f17 	ldw	r2,124(sp)
2008b2e8:	d9002704 	addi	r4,sp,156
2008b2ec:	18c00084 	addi	r3,r3,2
2008b2f0:	10800044 	addi	r2,r2,1
2008b2f4:	41000015 	stw	r4,0(r8)
2008b2f8:	01000084 	movi	r4,2
2008b2fc:	41000115 	stw	r4,4(r8)
2008b300:	d8c02015 	stw	r3,128(sp)
2008b304:	d8801f15 	stw	r2,124(sp)
2008b308:	010001c4 	movi	r4,7
2008b30c:	2082e016 	blt	r4,r2,2008be90 <___svfprintf_internal_r+0x11c0>
2008b310:	42000204 	addi	r8,r8,8
2008b314:	db002c17 	ldw	r12,176(sp)
2008b318:	00802004 	movi	r2,128
2008b31c:	60822f26 	beq	r12,r2,2008bbdc <___svfprintf_internal_r+0xf0c>
2008b320:	db003217 	ldw	r12,200(sp)
2008b324:	64abc83a 	sub	r21,r12,r18
2008b328:	0540310e 	bge	zero,r21,2008b3f0 <___svfprintf_internal_r+0x720>
2008b32c:	07000404 	movi	fp,16
2008b330:	d8801f17 	ldw	r2,124(sp)
2008b334:	e544270e 	bge	fp,r21,2008c3d4 <___svfprintf_internal_r+0x1704>
2008b338:	01400034 	movhi	r5,0
2008b33c:	a809883a 	mov	r4,r21
2008b340:	2941e284 	addi	r5,r5,1930
2008b344:	dc002c15 	stw	r16,176(sp)
2008b348:	902b883a 	mov	r21,r18
2008b34c:	d9402b15 	stw	r5,172(sp)
2008b350:	8825883a 	mov	r18,r17
2008b354:	04c001c4 	movi	r19,7
2008b358:	dc002f17 	ldw	r16,188(sp)
2008b35c:	2023883a 	mov	r17,r4
2008b360:	00000306 	br	2008b370 <___svfprintf_internal_r+0x6a0>
2008b364:	8c7ffc04 	addi	r17,r17,-16
2008b368:	42000204 	addi	r8,r8,8
2008b36c:	e440110e 	bge	fp,r17,2008b3b4 <___svfprintf_internal_r+0x6e4>
2008b370:	18c00404 	addi	r3,r3,16
2008b374:	10800044 	addi	r2,r2,1
2008b378:	45000015 	stw	r20,0(r8)
2008b37c:	47000115 	stw	fp,4(r8)
2008b380:	d8c02015 	stw	r3,128(sp)
2008b384:	d8801f15 	stw	r2,124(sp)
2008b388:	98bff60e 	bge	r19,r2,2008b364 <__flash_rwdata_start+0xffff04f8>
2008b38c:	8009883a 	mov	r4,r16
2008b390:	b80b883a 	mov	r5,r23
2008b394:	b00d883a 	mov	r6,r22
2008b398:	00938c40 	call	200938c4 <__ssprint_r>
2008b39c:	103f141e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008b3a0:	8c7ffc04 	addi	r17,r17,-16
2008b3a4:	d8c02017 	ldw	r3,128(sp)
2008b3a8:	d8801f17 	ldw	r2,124(sp)
2008b3ac:	da000404 	addi	r8,sp,16
2008b3b0:	e47fef16 	blt	fp,r17,2008b370 <__flash_rwdata_start+0xffff0504>
2008b3b4:	dc002c17 	ldw	r16,176(sp)
2008b3b8:	8809883a 	mov	r4,r17
2008b3bc:	9023883a 	mov	r17,r18
2008b3c0:	a825883a 	mov	r18,r21
2008b3c4:	202b883a 	mov	r21,r4
2008b3c8:	dac02b17 	ldw	r11,172(sp)
2008b3cc:	1d47883a 	add	r3,r3,r21
2008b3d0:	10800044 	addi	r2,r2,1
2008b3d4:	42c00015 	stw	r11,0(r8)
2008b3d8:	45400115 	stw	r21,4(r8)
2008b3dc:	d8c02015 	stw	r3,128(sp)
2008b3e0:	d8801f15 	stw	r2,124(sp)
2008b3e4:	010001c4 	movi	r4,7
2008b3e8:	2082a116 	blt	r4,r2,2008be70 <___svfprintf_internal_r+0x11a0>
2008b3ec:	42000204 	addi	r8,r8,8
2008b3f0:	8880400c 	andi	r2,r17,256
2008b3f4:	1001b01e 	bne	r2,zero,2008bab8 <___svfprintf_internal_r+0xde8>
2008b3f8:	d8801f17 	ldw	r2,124(sp)
2008b3fc:	db003117 	ldw	r12,196(sp)
2008b400:	1c87883a 	add	r3,r3,r18
2008b404:	10800044 	addi	r2,r2,1
2008b408:	43000015 	stw	r12,0(r8)
2008b40c:	44800115 	stw	r18,4(r8)
2008b410:	d8c02015 	stw	r3,128(sp)
2008b414:	d8801f15 	stw	r2,124(sp)
2008b418:	010001c4 	movi	r4,7
2008b41c:	20828216 	blt	r4,r2,2008be28 <___svfprintf_internal_r+0x1158>
2008b420:	42000204 	addi	r8,r8,8
2008b424:	8c40010c 	andi	r17,r17,4
2008b428:	88003226 	beq	r17,zero,2008b4f4 <___svfprintf_internal_r+0x824>
2008b42c:	db002e17 	ldw	r12,184(sp)
2008b430:	dac02a17 	ldw	r11,168(sp)
2008b434:	62e1c83a 	sub	r16,r12,r11
2008b438:	04002e0e 	bge	zero,r16,2008b4f4 <___svfprintf_internal_r+0x824>
2008b43c:	04400404 	movi	r17,16
2008b440:	d8801f17 	ldw	r2,124(sp)
2008b444:	8c05330e 	bge	r17,r16,2008c914 <___svfprintf_internal_r+0x1c44>
2008b448:	01000034 	movhi	r4,0
2008b44c:	2101e684 	addi	r4,r4,1946
2008b450:	d9003615 	stw	r4,216(sp)
2008b454:	048001c4 	movi	r18,7
2008b458:	dcc02f17 	ldw	r19,188(sp)
2008b45c:	00000306 	br	2008b46c <___svfprintf_internal_r+0x79c>
2008b460:	843ffc04 	addi	r16,r16,-16
2008b464:	42000204 	addi	r8,r8,8
2008b468:	8c00130e 	bge	r17,r16,2008b4b8 <___svfprintf_internal_r+0x7e8>
2008b46c:	01400034 	movhi	r5,0
2008b470:	18c00404 	addi	r3,r3,16
2008b474:	10800044 	addi	r2,r2,1
2008b478:	2941e684 	addi	r5,r5,1946
2008b47c:	41400015 	stw	r5,0(r8)
2008b480:	44400115 	stw	r17,4(r8)
2008b484:	d8c02015 	stw	r3,128(sp)
2008b488:	d8801f15 	stw	r2,124(sp)
2008b48c:	90bff40e 	bge	r18,r2,2008b460 <__flash_rwdata_start+0xffff05f4>
2008b490:	9809883a 	mov	r4,r19
2008b494:	b80b883a 	mov	r5,r23
2008b498:	b00d883a 	mov	r6,r22
2008b49c:	00938c40 	call	200938c4 <__ssprint_r>
2008b4a0:	103ed31e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008b4a4:	843ffc04 	addi	r16,r16,-16
2008b4a8:	d8c02017 	ldw	r3,128(sp)
2008b4ac:	d8801f17 	ldw	r2,124(sp)
2008b4b0:	da000404 	addi	r8,sp,16
2008b4b4:	8c3fed16 	blt	r17,r16,2008b46c <__flash_rwdata_start+0xffff0600>
2008b4b8:	dac03617 	ldw	r11,216(sp)
2008b4bc:	1c07883a 	add	r3,r3,r16
2008b4c0:	10800044 	addi	r2,r2,1
2008b4c4:	42c00015 	stw	r11,0(r8)
2008b4c8:	44000115 	stw	r16,4(r8)
2008b4cc:	d8c02015 	stw	r3,128(sp)
2008b4d0:	d8801f15 	stw	r2,124(sp)
2008b4d4:	010001c4 	movi	r4,7
2008b4d8:	2080060e 	bge	r4,r2,2008b4f4 <___svfprintf_internal_r+0x824>
2008b4dc:	d9002f17 	ldw	r4,188(sp)
2008b4e0:	b80b883a 	mov	r5,r23
2008b4e4:	b00d883a 	mov	r6,r22
2008b4e8:	00938c40 	call	200938c4 <__ssprint_r>
2008b4ec:	103ec01e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008b4f0:	d8c02017 	ldw	r3,128(sp)
2008b4f4:	d8802a17 	ldw	r2,168(sp)
2008b4f8:	db002e17 	ldw	r12,184(sp)
2008b4fc:	1300010e 	bge	r2,r12,2008b504 <___svfprintf_internal_r+0x834>
2008b500:	6005883a 	mov	r2,r12
2008b504:	dac03017 	ldw	r11,192(sp)
2008b508:	5897883a 	add	r11,r11,r2
2008b50c:	dac03015 	stw	r11,192(sp)
2008b510:	1802331e 	bne	r3,zero,2008bde0 <___svfprintf_internal_r+0x1110>
2008b514:	d8001f15 	stw	zero,124(sp)
2008b518:	da000404 	addi	r8,sp,16
2008b51c:	003e1806 	br	2008ad80 <__flash_rwdata_start+0xfffeff14>
2008b520:	db002d17 	ldw	r12,180(sp)
2008b524:	dac02d17 	ldw	r11,180(sp)
2008b528:	d8c02915 	stw	r3,164(sp)
2008b52c:	63000017 	ldw	r12,0(r12)
2008b530:	5ac00117 	ldw	r11,4(r11)
2008b534:	d9802785 	stb	r6,158(sp)
2008b538:	6009883a 	mov	r4,r12
2008b53c:	580b883a 	mov	r5,r11
2008b540:	db003715 	stw	r12,220(sp)
2008b544:	da004015 	stw	r8,256(sp)
2008b548:	da403f15 	stw	r9,252(sp)
2008b54c:	dac03815 	stw	r11,224(sp)
2008b550:	00935b00 	call	200935b0 <__fpclassifyd>
2008b554:	db002d17 	ldw	r12,180(sp)
2008b558:	04800044 	movi	r18,1
2008b55c:	da004017 	ldw	r8,256(sp)
2008b560:	64c00204 	addi	r19,r12,8
2008b564:	da403f17 	ldw	r9,252(sp)
2008b568:	d9003717 	ldw	r4,220(sp)
2008b56c:	d9403817 	ldw	r5,224(sp)
2008b570:	1483561e 	bne	r2,r18,2008c2cc <___svfprintf_internal_r+0x15fc>
2008b574:	000d883a 	mov	r6,zero
2008b578:	000f883a 	mov	r7,zero
2008b57c:	00975380 	call	20097538 <__ledf2>
2008b580:	da004017 	ldw	r8,256(sp)
2008b584:	1004ee16 	blt	r2,zero,2008c940 <___svfprintf_internal_r+0x1c70>
2008b588:	dd402783 	ldbu	r21,158(sp)
2008b58c:	008011c4 	movi	r2,71
2008b590:	1404440e 	bge	r2,r16,2008c6a4 <___svfprintf_internal_r+0x19d4>
2008b594:	00c00034 	movhi	r3,0
2008b598:	18c1d304 	addi	r3,r3,1868
2008b59c:	d8c03115 	stw	r3,196(sp)
2008b5a0:	02c000c4 	movi	r11,3
2008b5a4:	00bfdfc4 	movi	r2,-129
2008b5a8:	dac02a15 	stw	r11,168(sp)
2008b5ac:	88a2703a 	and	r17,r17,r2
2008b5b0:	dcc02d15 	stw	r19,180(sp)
2008b5b4:	5825883a 	mov	r18,r11
2008b5b8:	d8003215 	stw	zero,200(sp)
2008b5bc:	d8003415 	stw	zero,208(sp)
2008b5c0:	003eef06 	br	2008b180 <__flash_rwdata_start+0xffff0314>
2008b5c4:	8c400214 	ori	r17,r17,8
2008b5c8:	1805883a 	mov	r2,r3
2008b5cc:	1c000007 	ldb	r16,0(r3)
2008b5d0:	003e1506 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b5d4:	8c400414 	ori	r17,r17,16
2008b5d8:	d8c02915 	stw	r3,164(sp)
2008b5dc:	88c0080c 	andi	r3,r17,32
2008b5e0:	d8802d17 	ldw	r2,180(sp)
2008b5e4:	18005526 	beq	r3,zero,2008b73c <___svfprintf_internal_r+0xa6c>
2008b5e8:	dac02d17 	ldw	r11,180(sp)
2008b5ec:	14c00017 	ldw	r19,0(r2)
2008b5f0:	17000117 	ldw	fp,4(r2)
2008b5f4:	5ac00204 	addi	r11,r11,8
2008b5f8:	dac02d15 	stw	r11,180(sp)
2008b5fc:	00800044 	movi	r2,1
2008b600:	9f06b03a 	or	r3,r19,fp
2008b604:	d8002785 	stb	zero,158(sp)
2008b608:	da403215 	stw	r9,200(sp)
2008b60c:	002b883a 	mov	r21,zero
2008b610:	003eb406 	br	2008b0e4 <__flash_rwdata_start+0xffff0278>
2008b614:	03000034 	movhi	r12,0
2008b618:	6301d604 	addi	r12,r12,1880
2008b61c:	d8c02915 	stw	r3,164(sp)
2008b620:	d9802785 	stb	r6,158(sp)
2008b624:	db003b15 	stw	r12,236(sp)
2008b628:	88c0080c 	andi	r3,r17,32
2008b62c:	d8802d17 	ldw	r2,180(sp)
2008b630:	18005626 	beq	r3,zero,2008b78c <___svfprintf_internal_r+0xabc>
2008b634:	dac02d17 	ldw	r11,180(sp)
2008b638:	14c00017 	ldw	r19,0(r2)
2008b63c:	17000117 	ldw	fp,4(r2)
2008b640:	5ac00204 	addi	r11,r11,8
2008b644:	dac02d15 	stw	r11,180(sp)
2008b648:	8880004c 	andi	r2,r17,1
2008b64c:	10029326 	beq	r2,zero,2008c09c <___svfprintf_internal_r+0x13cc>
2008b650:	9f06b03a 	or	r3,r19,fp
2008b654:	18033526 	beq	r3,zero,2008c32c <___svfprintf_internal_r+0x165c>
2008b658:	00800c04 	movi	r2,48
2008b65c:	d8802705 	stb	r2,156(sp)
2008b660:	dc002745 	stb	r16,157(sp)
2008b664:	8c400094 	ori	r17,r17,2
2008b668:	00800084 	movi	r2,2
2008b66c:	003fe506 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008b670:	1805883a 	mov	r2,r3
2008b674:	d8002e15 	stw	zero,184(sp)
2008b678:	82fff404 	addi	r11,r16,-48
2008b67c:	0019883a 	mov	r12,zero
2008b680:	14000007 	ldb	r16,0(r2)
2008b684:	630002a4 	muli	r12,r12,10
2008b688:	18c00044 	addi	r3,r3,1
2008b68c:	1805883a 	mov	r2,r3
2008b690:	62d9883a 	add	r12,r12,r11
2008b694:	82fff404 	addi	r11,r16,-48
2008b698:	2afff92e 	bgeu	r5,r11,2008b680 <__flash_rwdata_start+0xffff0814>
2008b69c:	db002e15 	stw	r12,184(sp)
2008b6a0:	003de206 	br	2008ae2c <__flash_rwdata_start+0xfffeffc0>
2008b6a4:	8c400814 	ori	r17,r17,32
2008b6a8:	1805883a 	mov	r2,r3
2008b6ac:	1c000007 	ldb	r16,0(r3)
2008b6b0:	003ddd06 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b6b4:	dac02d17 	ldw	r11,180(sp)
2008b6b8:	db002d17 	ldw	r12,180(sp)
2008b6bc:	d8c02915 	stw	r3,164(sp)
2008b6c0:	5ac00017 	ldw	r11,0(r11)
2008b6c4:	d8002785 	stb	zero,158(sp)
2008b6c8:	64c00104 	addi	r19,r12,4
2008b6cc:	dac03115 	stw	r11,196(sp)
2008b6d0:	58048126 	beq	r11,zero,2008c8d8 <___svfprintf_internal_r+0x1c08>
2008b6d4:	d9003117 	ldw	r4,196(sp)
2008b6d8:	48041716 	blt	r9,zero,2008c738 <___svfprintf_internal_r+0x1a68>
2008b6dc:	480d883a 	mov	r6,r9
2008b6e0:	000b883a 	mov	r5,zero
2008b6e4:	da004015 	stw	r8,256(sp)
2008b6e8:	da403f15 	stw	r9,252(sp)
2008b6ec:	0091cf80 	call	20091cf8 <memchr>
2008b6f0:	da004017 	ldw	r8,256(sp)
2008b6f4:	da403f17 	ldw	r9,252(sp)
2008b6f8:	1004db26 	beq	r2,zero,2008ca68 <___svfprintf_internal_r+0x1d98>
2008b6fc:	d8c03117 	ldw	r3,196(sp)
2008b700:	10e5c83a 	sub	r18,r2,r3
2008b704:	4c80010e 	bge	r9,r18,2008b70c <___svfprintf_internal_r+0xa3c>
2008b708:	4825883a 	mov	r18,r9
2008b70c:	9005883a 	mov	r2,r18
2008b710:	90040e16 	blt	r18,zero,2008c74c <___svfprintf_internal_r+0x1a7c>
2008b714:	dd402783 	ldbu	r21,158(sp)
2008b718:	d8802a15 	stw	r2,168(sp)
2008b71c:	dcc02d15 	stw	r19,180(sp)
2008b720:	d8003215 	stw	zero,200(sp)
2008b724:	d8003415 	stw	zero,208(sp)
2008b728:	003e9506 	br	2008b180 <__flash_rwdata_start+0xffff0314>
2008b72c:	d8c02915 	stw	r3,164(sp)
2008b730:	88c0080c 	andi	r3,r17,32
2008b734:	d8802d17 	ldw	r2,180(sp)
2008b738:	183fab1e 	bne	r3,zero,2008b5e8 <__flash_rwdata_start+0xffff077c>
2008b73c:	88c0040c 	andi	r3,r17,16
2008b740:	1802681e 	bne	r3,zero,2008c0e4 <___svfprintf_internal_r+0x1414>
2008b744:	88c0100c 	andi	r3,r17,64
2008b748:	18026626 	beq	r3,zero,2008c0e4 <___svfprintf_internal_r+0x1414>
2008b74c:	dac02d17 	ldw	r11,180(sp)
2008b750:	14c0000b 	ldhu	r19,0(r2)
2008b754:	0039883a 	mov	fp,zero
2008b758:	5ac00104 	addi	r11,r11,4
2008b75c:	dac02d15 	stw	r11,180(sp)
2008b760:	00800044 	movi	r2,1
2008b764:	9807883a 	mov	r3,r19
2008b768:	003fa606 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008b76c:	00800034 	movhi	r2,0
2008b770:	1081db04 	addi	r2,r2,1900
2008b774:	d8c02915 	stw	r3,164(sp)
2008b778:	d8803b15 	stw	r2,236(sp)
2008b77c:	d9802785 	stb	r6,158(sp)
2008b780:	88c0080c 	andi	r3,r17,32
2008b784:	d8802d17 	ldw	r2,180(sp)
2008b788:	183faa1e 	bne	r3,zero,2008b634 <__flash_rwdata_start+0xffff07c8>
2008b78c:	88c0040c 	andi	r3,r17,16
2008b790:	1802e826 	beq	r3,zero,2008c334 <___svfprintf_internal_r+0x1664>
2008b794:	db002d17 	ldw	r12,180(sp)
2008b798:	14c00017 	ldw	r19,0(r2)
2008b79c:	0039883a 	mov	fp,zero
2008b7a0:	63000104 	addi	r12,r12,4
2008b7a4:	db002d15 	stw	r12,180(sp)
2008b7a8:	003fa706 	br	2008b648 <__flash_rwdata_start+0xffff07dc>
2008b7ac:	30803fcc 	andi	r2,r6,255
2008b7b0:	1080201c 	xori	r2,r2,128
2008b7b4:	10bfe004 	addi	r2,r2,-128
2008b7b8:	1002d91e 	bne	r2,zero,2008c320 <___svfprintf_internal_r+0x1650>
2008b7bc:	1805883a 	mov	r2,r3
2008b7c0:	01800804 	movi	r6,32
2008b7c4:	1c000007 	ldb	r16,0(r3)
2008b7c8:	003d9706 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b7cc:	8c400054 	ori	r17,r17,1
2008b7d0:	1805883a 	mov	r2,r3
2008b7d4:	1c000007 	ldb	r16,0(r3)
2008b7d8:	003d9306 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b7dc:	dac02d17 	ldw	r11,180(sp)
2008b7e0:	db002d17 	ldw	r12,180(sp)
2008b7e4:	5ac00017 	ldw	r11,0(r11)
2008b7e8:	dac02e15 	stw	r11,184(sp)
2008b7ec:	62c00104 	addi	r11,r12,4
2008b7f0:	db002e17 	ldw	r12,184(sp)
2008b7f4:	60033e16 	blt	r12,zero,2008c4f0 <___svfprintf_internal_r+0x1820>
2008b7f8:	dac02d15 	stw	r11,180(sp)
2008b7fc:	1805883a 	mov	r2,r3
2008b800:	1c000007 	ldb	r16,0(r3)
2008b804:	003d8806 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b808:	1805883a 	mov	r2,r3
2008b80c:	01800ac4 	movi	r6,43
2008b810:	1c000007 	ldb	r16,0(r3)
2008b814:	003d8406 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b818:	8c401014 	ori	r17,r17,64
2008b81c:	1805883a 	mov	r2,r3
2008b820:	1c000007 	ldb	r16,0(r3)
2008b824:	003d8006 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b828:	1c000007 	ldb	r16,0(r3)
2008b82c:	81c33626 	beq	r16,r7,2008c508 <___svfprintf_internal_r+0x1838>
2008b830:	8c400414 	ori	r17,r17,16
2008b834:	1805883a 	mov	r2,r3
2008b838:	003d7b06 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008b83c:	d8c02915 	stw	r3,164(sp)
2008b840:	d9802785 	stb	r6,158(sp)
2008b844:	8880080c 	andi	r2,r17,32
2008b848:	1002c226 	beq	r2,zero,2008c354 <___svfprintf_internal_r+0x1684>
2008b84c:	db002d17 	ldw	r12,180(sp)
2008b850:	dac03017 	ldw	r11,192(sp)
2008b854:	60800017 	ldw	r2,0(r12)
2008b858:	5807d7fa 	srai	r3,r11,31
2008b85c:	63000104 	addi	r12,r12,4
2008b860:	db002d15 	stw	r12,180(sp)
2008b864:	12c00015 	stw	r11,0(r2)
2008b868:	10c00115 	stw	r3,4(r2)
2008b86c:	003d4406 	br	2008ad80 <__flash_rwdata_start+0xfffeff14>
2008b870:	db002d17 	ldw	r12,180(sp)
2008b874:	00800c04 	movi	r2,48
2008b878:	d8802705 	stb	r2,156(sp)
2008b87c:	64c00017 	ldw	r19,0(r12)
2008b880:	00801e04 	movi	r2,120
2008b884:	d8802745 	stb	r2,157(sp)
2008b888:	00800034 	movhi	r2,0
2008b88c:	1081db04 	addi	r2,r2,1900
2008b890:	63000104 	addi	r12,r12,4
2008b894:	d8c02915 	stw	r3,164(sp)
2008b898:	d8803b15 	stw	r2,236(sp)
2008b89c:	0039883a 	mov	fp,zero
2008b8a0:	8c400094 	ori	r17,r17,2
2008b8a4:	db002d15 	stw	r12,180(sp)
2008b8a8:	00800084 	movi	r2,2
2008b8ac:	04001e04 	movi	r16,120
2008b8b0:	9807883a 	mov	r3,r19
2008b8b4:	003f5306 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008b8b8:	db002d17 	ldw	r12,180(sp)
2008b8bc:	d8c02915 	stw	r3,164(sp)
2008b8c0:	dac01404 	addi	r11,sp,80
2008b8c4:	60800017 	ldw	r2,0(r12)
2008b8c8:	00c00044 	movi	r3,1
2008b8cc:	63000104 	addi	r12,r12,4
2008b8d0:	d8801405 	stb	r2,80(sp)
2008b8d4:	d8c02a15 	stw	r3,168(sp)
2008b8d8:	d8002785 	stb	zero,158(sp)
2008b8dc:	db002d15 	stw	r12,180(sp)
2008b8e0:	1825883a 	mov	r18,r3
2008b8e4:	d8003215 	stw	zero,200(sp)
2008b8e8:	d8003415 	stw	zero,208(sp)
2008b8ec:	dac03115 	stw	r11,196(sp)
2008b8f0:	0005883a 	mov	r2,zero
2008b8f4:	003e2906 	br	2008b19c <__flash_rwdata_start+0xffff0330>
2008b8f8:	d8c02915 	stw	r3,164(sp)
2008b8fc:	d9802785 	stb	r6,158(sp)
2008b900:	8880080c 	andi	r2,r17,32
2008b904:	d8c02d17 	ldw	r3,180(sp)
2008b908:	103deb1e 	bne	r2,zero,2008b0b8 <__flash_rwdata_start+0xffff024c>
2008b90c:	8880040c 	andi	r2,r17,16
2008b910:	1001e51e 	bne	r2,zero,2008c0a8 <___svfprintf_internal_r+0x13d8>
2008b914:	8880100c 	andi	r2,r17,64
2008b918:	1001e326 	beq	r2,zero,2008c0a8 <___svfprintf_internal_r+0x13d8>
2008b91c:	1cc0000f 	ldh	r19,0(r3)
2008b920:	db002d17 	ldw	r12,180(sp)
2008b924:	9839d7fa 	srai	fp,r19,31
2008b928:	63000104 	addi	r12,r12,4
2008b92c:	db002d15 	stw	r12,180(sp)
2008b930:	e005883a 	mov	r2,fp
2008b934:	103de70e 	bge	r2,zero,2008b0d4 <__flash_rwdata_start+0xffff0268>
2008b938:	04e7c83a 	sub	r19,zero,r19
2008b93c:	9804c03a 	cmpne	r2,r19,zero
2008b940:	0739c83a 	sub	fp,zero,fp
2008b944:	e0b9c83a 	sub	fp,fp,r2
2008b948:	05400b44 	movi	r21,45
2008b94c:	dd402785 	stb	r21,158(sp)
2008b950:	da403215 	stw	r9,200(sp)
2008b954:	00800044 	movi	r2,1
2008b958:	9f06b03a 	or	r3,r19,fp
2008b95c:	003de106 	br	2008b0e4 <__flash_rwdata_start+0xffff0278>
2008b960:	8c400414 	ori	r17,r17,16
2008b964:	d8c02915 	stw	r3,164(sp)
2008b968:	8880080c 	andi	r2,r17,32
2008b96c:	10000b26 	beq	r2,zero,2008b99c <___svfprintf_internal_r+0xccc>
2008b970:	db002d17 	ldw	r12,180(sp)
2008b974:	0005883a 	mov	r2,zero
2008b978:	64c00017 	ldw	r19,0(r12)
2008b97c:	67000117 	ldw	fp,4(r12)
2008b980:	63000204 	addi	r12,r12,8
2008b984:	db002d15 	stw	r12,180(sp)
2008b988:	9f06b03a 	or	r3,r19,fp
2008b98c:	003f1d06 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008b990:	d8c02915 	stw	r3,164(sp)
2008b994:	8880080c 	andi	r2,r17,32
2008b998:	103ff51e 	bne	r2,zero,2008b970 <__flash_rwdata_start+0xffff0b04>
2008b99c:	8880040c 	andi	r2,r17,16
2008b9a0:	1001c81e 	bne	r2,zero,2008c0c4 <___svfprintf_internal_r+0x13f4>
2008b9a4:	8880100c 	andi	r2,r17,64
2008b9a8:	1001c626 	beq	r2,zero,2008c0c4 <___svfprintf_internal_r+0x13f4>
2008b9ac:	db002d17 	ldw	r12,180(sp)
2008b9b0:	0039883a 	mov	fp,zero
2008b9b4:	0005883a 	mov	r2,zero
2008b9b8:	64c0000b 	ldhu	r19,0(r12)
2008b9bc:	63000104 	addi	r12,r12,4
2008b9c0:	db002d15 	stw	r12,180(sp)
2008b9c4:	9807883a 	mov	r3,r19
2008b9c8:	003f0e06 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008b9cc:	d8c02915 	stw	r3,164(sp)
2008b9d0:	d9802785 	stb	r6,158(sp)
2008b9d4:	803d8026 	beq	r16,zero,2008afd8 <__flash_rwdata_start+0xffff016c>
2008b9d8:	02c00044 	movi	r11,1
2008b9dc:	db001404 	addi	r12,sp,80
2008b9e0:	dac02a15 	stw	r11,168(sp)
2008b9e4:	dc001405 	stb	r16,80(sp)
2008b9e8:	d8002785 	stb	zero,158(sp)
2008b9ec:	5825883a 	mov	r18,r11
2008b9f0:	d8003215 	stw	zero,200(sp)
2008b9f4:	d8003415 	stw	zero,208(sp)
2008b9f8:	db003115 	stw	r12,196(sp)
2008b9fc:	0005883a 	mov	r2,zero
2008ba00:	003de606 	br	2008b19c <__flash_rwdata_start+0xffff0330>
2008ba04:	d8c02017 	ldw	r3,128(sp)
2008ba08:	003e2706 	br	2008b2a8 <__flash_rwdata_start+0xffff043c>
2008ba0c:	10803fcc 	andi	r2,r2,255
2008ba10:	00c00044 	movi	r3,1
2008ba14:	10fdbb1e 	bne	r2,r3,2008b104 <__flash_rwdata_start+0xffff0298>
2008ba18:	e000021e 	bne	fp,zero,2008ba24 <___svfprintf_internal_r+0xd54>
2008ba1c:	00800244 	movi	r2,9
2008ba20:	14c01f2e 	bgeu	r2,r19,2008baa0 <___svfprintf_internal_r+0xdd0>
2008ba24:	dc002a15 	stw	r16,168(sp)
2008ba28:	dc402b15 	stw	r17,172(sp)
2008ba2c:	9821883a 	mov	r16,r19
2008ba30:	e023883a 	mov	r17,fp
2008ba34:	b025883a 	mov	r18,r22
2008ba38:	4827883a 	mov	r19,r9
2008ba3c:	4039883a 	mov	fp,r8
2008ba40:	8009883a 	mov	r4,r16
2008ba44:	880b883a 	mov	r5,r17
2008ba48:	01800284 	movi	r6,10
2008ba4c:	000f883a 	mov	r7,zero
2008ba50:	0096e440 	call	20096e44 <__umoddi3>
2008ba54:	10800c04 	addi	r2,r2,48
2008ba58:	94bfffc4 	addi	r18,r18,-1
2008ba5c:	8009883a 	mov	r4,r16
2008ba60:	880b883a 	mov	r5,r17
2008ba64:	01800284 	movi	r6,10
2008ba68:	000f883a 	mov	r7,zero
2008ba6c:	90800005 	stb	r2,0(r18)
2008ba70:	00968840 	call	20096884 <__udivdi3>
2008ba74:	1021883a 	mov	r16,r2
2008ba78:	10c4b03a 	or	r2,r2,r3
2008ba7c:	1823883a 	mov	r17,r3
2008ba80:	103fef1e 	bne	r2,zero,2008ba40 <__flash_rwdata_start+0xffff0bd4>
2008ba84:	dc803115 	stw	r18,196(sp)
2008ba88:	dc002a17 	ldw	r16,168(sp)
2008ba8c:	dc402b17 	ldw	r17,172(sp)
2008ba90:	9813883a 	mov	r9,r19
2008ba94:	e011883a 	mov	r8,fp
2008ba98:	b4a5c83a 	sub	r18,r22,r18
2008ba9c:	003db306 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008baa0:	9cc00c04 	addi	r19,r19,48
2008baa4:	db001dc4 	addi	r12,sp,119
2008baa8:	dcc01dc5 	stb	r19,119(sp)
2008baac:	dc803d17 	ldw	r18,244(sp)
2008bab0:	db003115 	stw	r12,196(sp)
2008bab4:	003dad06 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008bab8:	00801944 	movi	r2,101
2008babc:	14008d0e 	bge	r2,r16,2008bcf4 <___svfprintf_internal_r+0x1024>
2008bac0:	d9003717 	ldw	r4,220(sp)
2008bac4:	d9403817 	ldw	r5,224(sp)
2008bac8:	000d883a 	mov	r6,zero
2008bacc:	000f883a 	mov	r7,zero
2008bad0:	d8c03e15 	stw	r3,248(sp)
2008bad4:	da004015 	stw	r8,256(sp)
2008bad8:	00973d40 	call	200973d4 <__eqdf2>
2008badc:	d8c03e17 	ldw	r3,248(sp)
2008bae0:	da004017 	ldw	r8,256(sp)
2008bae4:	1000fd1e 	bne	r2,zero,2008bedc <___svfprintf_internal_r+0x120c>
2008bae8:	d8801f17 	ldw	r2,124(sp)
2008baec:	01000034 	movhi	r4,0
2008baf0:	2101e204 	addi	r4,r4,1928
2008baf4:	18c00044 	addi	r3,r3,1
2008baf8:	10800044 	addi	r2,r2,1
2008bafc:	41000015 	stw	r4,0(r8)
2008bb00:	01000044 	movi	r4,1
2008bb04:	41000115 	stw	r4,4(r8)
2008bb08:	d8c02015 	stw	r3,128(sp)
2008bb0c:	d8801f15 	stw	r2,124(sp)
2008bb10:	010001c4 	movi	r4,7
2008bb14:	20823316 	blt	r4,r2,2008c3e4 <___svfprintf_internal_r+0x1714>
2008bb18:	42000204 	addi	r8,r8,8
2008bb1c:	d8802617 	ldw	r2,152(sp)
2008bb20:	dac03317 	ldw	r11,204(sp)
2008bb24:	12c00216 	blt	r2,r11,2008bb30 <___svfprintf_internal_r+0xe60>
2008bb28:	8880004c 	andi	r2,r17,1
2008bb2c:	103e3d26 	beq	r2,zero,2008b424 <__flash_rwdata_start+0xffff05b8>
2008bb30:	db003917 	ldw	r12,228(sp)
2008bb34:	d8801f17 	ldw	r2,124(sp)
2008bb38:	dac03517 	ldw	r11,212(sp)
2008bb3c:	1b07883a 	add	r3,r3,r12
2008bb40:	10800044 	addi	r2,r2,1
2008bb44:	42c00015 	stw	r11,0(r8)
2008bb48:	43000115 	stw	r12,4(r8)
2008bb4c:	d8c02015 	stw	r3,128(sp)
2008bb50:	d8801f15 	stw	r2,124(sp)
2008bb54:	010001c4 	movi	r4,7
2008bb58:	20826f16 	blt	r4,r2,2008c518 <___svfprintf_internal_r+0x1848>
2008bb5c:	42000204 	addi	r8,r8,8
2008bb60:	db003317 	ldw	r12,204(sp)
2008bb64:	643fffc4 	addi	r16,r12,-1
2008bb68:	043e2e0e 	bge	zero,r16,2008b424 <__flash_rwdata_start+0xffff05b8>
2008bb6c:	04800404 	movi	r18,16
2008bb70:	d8801f17 	ldw	r2,124(sp)
2008bb74:	9400a00e 	bge	r18,r16,2008bdf8 <___svfprintf_internal_r+0x1128>
2008bb78:	01400034 	movhi	r5,0
2008bb7c:	2941e284 	addi	r5,r5,1930
2008bb80:	d9402b15 	stw	r5,172(sp)
2008bb84:	054001c4 	movi	r21,7
2008bb88:	dcc02f17 	ldw	r19,188(sp)
2008bb8c:	00000306 	br	2008bb9c <___svfprintf_internal_r+0xecc>
2008bb90:	42000204 	addi	r8,r8,8
2008bb94:	843ffc04 	addi	r16,r16,-16
2008bb98:	94009a0e 	bge	r18,r16,2008be04 <___svfprintf_internal_r+0x1134>
2008bb9c:	18c00404 	addi	r3,r3,16
2008bba0:	10800044 	addi	r2,r2,1
2008bba4:	45000015 	stw	r20,0(r8)
2008bba8:	44800115 	stw	r18,4(r8)
2008bbac:	d8c02015 	stw	r3,128(sp)
2008bbb0:	d8801f15 	stw	r2,124(sp)
2008bbb4:	a8bff60e 	bge	r21,r2,2008bb90 <__flash_rwdata_start+0xffff0d24>
2008bbb8:	9809883a 	mov	r4,r19
2008bbbc:	b80b883a 	mov	r5,r23
2008bbc0:	b00d883a 	mov	r6,r22
2008bbc4:	00938c40 	call	200938c4 <__ssprint_r>
2008bbc8:	103d091e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bbcc:	d8c02017 	ldw	r3,128(sp)
2008bbd0:	d8801f17 	ldw	r2,124(sp)
2008bbd4:	da000404 	addi	r8,sp,16
2008bbd8:	003fee06 	br	2008bb94 <__flash_rwdata_start+0xffff0d28>
2008bbdc:	dac02e17 	ldw	r11,184(sp)
2008bbe0:	db002a17 	ldw	r12,168(sp)
2008bbe4:	5b2bc83a 	sub	r21,r11,r12
2008bbe8:	057dcd0e 	bge	zero,r21,2008b320 <__flash_rwdata_start+0xffff04b4>
2008bbec:	07000404 	movi	fp,16
2008bbf0:	d8801f17 	ldw	r2,124(sp)
2008bbf4:	e5435d0e 	bge	fp,r21,2008c96c <___svfprintf_internal_r+0x1c9c>
2008bbf8:	01400034 	movhi	r5,0
2008bbfc:	a809883a 	mov	r4,r21
2008bc00:	2941e284 	addi	r5,r5,1930
2008bc04:	dc002c15 	stw	r16,176(sp)
2008bc08:	902b883a 	mov	r21,r18
2008bc0c:	d9402b15 	stw	r5,172(sp)
2008bc10:	8825883a 	mov	r18,r17
2008bc14:	04c001c4 	movi	r19,7
2008bc18:	dc002f17 	ldw	r16,188(sp)
2008bc1c:	2023883a 	mov	r17,r4
2008bc20:	00000306 	br	2008bc30 <___svfprintf_internal_r+0xf60>
2008bc24:	8c7ffc04 	addi	r17,r17,-16
2008bc28:	42000204 	addi	r8,r8,8
2008bc2c:	e440110e 	bge	fp,r17,2008bc74 <___svfprintf_internal_r+0xfa4>
2008bc30:	18c00404 	addi	r3,r3,16
2008bc34:	10800044 	addi	r2,r2,1
2008bc38:	45000015 	stw	r20,0(r8)
2008bc3c:	47000115 	stw	fp,4(r8)
2008bc40:	d8c02015 	stw	r3,128(sp)
2008bc44:	d8801f15 	stw	r2,124(sp)
2008bc48:	98bff60e 	bge	r19,r2,2008bc24 <__flash_rwdata_start+0xffff0db8>
2008bc4c:	8009883a 	mov	r4,r16
2008bc50:	b80b883a 	mov	r5,r23
2008bc54:	b00d883a 	mov	r6,r22
2008bc58:	00938c40 	call	200938c4 <__ssprint_r>
2008bc5c:	103ce41e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bc60:	8c7ffc04 	addi	r17,r17,-16
2008bc64:	d8c02017 	ldw	r3,128(sp)
2008bc68:	d8801f17 	ldw	r2,124(sp)
2008bc6c:	da000404 	addi	r8,sp,16
2008bc70:	e47fef16 	blt	fp,r17,2008bc30 <__flash_rwdata_start+0xffff0dc4>
2008bc74:	dc002c17 	ldw	r16,176(sp)
2008bc78:	8809883a 	mov	r4,r17
2008bc7c:	9023883a 	mov	r17,r18
2008bc80:	a825883a 	mov	r18,r21
2008bc84:	202b883a 	mov	r21,r4
2008bc88:	dac02b17 	ldw	r11,172(sp)
2008bc8c:	1d47883a 	add	r3,r3,r21
2008bc90:	10800044 	addi	r2,r2,1
2008bc94:	42c00015 	stw	r11,0(r8)
2008bc98:	45400115 	stw	r21,4(r8)
2008bc9c:	d8c02015 	stw	r3,128(sp)
2008bca0:	d8801f15 	stw	r2,124(sp)
2008bca4:	010001c4 	movi	r4,7
2008bca8:	20818016 	blt	r4,r2,2008c2ac <___svfprintf_internal_r+0x15dc>
2008bcac:	42000204 	addi	r8,r8,8
2008bcb0:	003d9b06 	br	2008b320 <__flash_rwdata_start+0xffff04b4>
2008bcb4:	d9403b17 	ldw	r5,236(sp)
2008bcb8:	b007883a 	mov	r3,r22
2008bcbc:	988003cc 	andi	r2,r19,15
2008bcc0:	e008973a 	slli	r4,fp,28
2008bcc4:	2885883a 	add	r2,r5,r2
2008bcc8:	9826d13a 	srli	r19,r19,4
2008bccc:	10800003 	ldbu	r2,0(r2)
2008bcd0:	e038d13a 	srli	fp,fp,4
2008bcd4:	18ffffc4 	addi	r3,r3,-1
2008bcd8:	24e6b03a 	or	r19,r4,r19
2008bcdc:	18800005 	stb	r2,0(r3)
2008bce0:	9f04b03a 	or	r2,r19,fp
2008bce4:	103ff51e 	bne	r2,zero,2008bcbc <__flash_rwdata_start+0xffff0e50>
2008bce8:	d8c03115 	stw	r3,196(sp)
2008bcec:	b0e5c83a 	sub	r18,r22,r3
2008bcf0:	003d1e06 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008bcf4:	db003317 	ldw	r12,204(sp)
2008bcf8:	00800044 	movi	r2,1
2008bcfc:	18c00044 	addi	r3,r3,1
2008bd00:	13014b0e 	bge	r2,r12,2008c230 <___svfprintf_internal_r+0x1560>
2008bd04:	dc001f17 	ldw	r16,124(sp)
2008bd08:	dac03117 	ldw	r11,196(sp)
2008bd0c:	00800044 	movi	r2,1
2008bd10:	84000044 	addi	r16,r16,1
2008bd14:	40800115 	stw	r2,4(r8)
2008bd18:	42c00015 	stw	r11,0(r8)
2008bd1c:	d8c02015 	stw	r3,128(sp)
2008bd20:	dc001f15 	stw	r16,124(sp)
2008bd24:	008001c4 	movi	r2,7
2008bd28:	14014e16 	blt	r2,r16,2008c264 <___svfprintf_internal_r+0x1594>
2008bd2c:	42000204 	addi	r8,r8,8
2008bd30:	db003917 	ldw	r12,228(sp)
2008bd34:	dac03517 	ldw	r11,212(sp)
2008bd38:	84000044 	addi	r16,r16,1
2008bd3c:	1b07883a 	add	r3,r3,r12
2008bd40:	42c00015 	stw	r11,0(r8)
2008bd44:	43000115 	stw	r12,4(r8)
2008bd48:	d8c02015 	stw	r3,128(sp)
2008bd4c:	dc001f15 	stw	r16,124(sp)
2008bd50:	008001c4 	movi	r2,7
2008bd54:	14014c16 	blt	r2,r16,2008c288 <___svfprintf_internal_r+0x15b8>
2008bd58:	44800204 	addi	r18,r8,8
2008bd5c:	d9003717 	ldw	r4,220(sp)
2008bd60:	d9403817 	ldw	r5,224(sp)
2008bd64:	000d883a 	mov	r6,zero
2008bd68:	000f883a 	mov	r7,zero
2008bd6c:	d8c03e15 	stw	r3,248(sp)
2008bd70:	00973d40 	call	200973d4 <__eqdf2>
2008bd74:	d8c03e17 	ldw	r3,248(sp)
2008bd78:	db003317 	ldw	r12,204(sp)
2008bd7c:	10009526 	beq	r2,zero,2008bfd4 <___svfprintf_internal_r+0x1304>
2008bd80:	dac03117 	ldw	r11,196(sp)
2008bd84:	60bfffc4 	addi	r2,r12,-1
2008bd88:	1887883a 	add	r3,r3,r2
2008bd8c:	59000044 	addi	r4,r11,1
2008bd90:	84000044 	addi	r16,r16,1
2008bd94:	90800115 	stw	r2,4(r18)
2008bd98:	91000015 	stw	r4,0(r18)
2008bd9c:	d8c02015 	stw	r3,128(sp)
2008bda0:	dc001f15 	stw	r16,124(sp)
2008bda4:	008001c4 	movi	r2,7
2008bda8:	1400b316 	blt	r2,r16,2008c078 <___svfprintf_internal_r+0x13a8>
2008bdac:	94800204 	addi	r18,r18,8
2008bdb0:	dac03a17 	ldw	r11,232(sp)
2008bdb4:	dd4022c4 	addi	r21,sp,139
2008bdb8:	84000044 	addi	r16,r16,1
2008bdbc:	1ac7883a 	add	r3,r3,r11
2008bdc0:	95400015 	stw	r21,0(r18)
2008bdc4:	92c00115 	stw	r11,4(r18)
2008bdc8:	d8c02015 	stw	r3,128(sp)
2008bdcc:	dc001f15 	stw	r16,124(sp)
2008bdd0:	008001c4 	movi	r2,7
2008bdd4:	14001416 	blt	r2,r16,2008be28 <___svfprintf_internal_r+0x1158>
2008bdd8:	92000204 	addi	r8,r18,8
2008bddc:	003d9106 	br	2008b424 <__flash_rwdata_start+0xffff05b8>
2008bde0:	d9002f17 	ldw	r4,188(sp)
2008bde4:	b80b883a 	mov	r5,r23
2008bde8:	b00d883a 	mov	r6,r22
2008bdec:	00938c40 	call	200938c4 <__ssprint_r>
2008bdf0:	103dc826 	beq	r2,zero,2008b514 <__flash_rwdata_start+0xffff06a8>
2008bdf4:	003c7e06 	br	2008aff0 <__flash_rwdata_start+0xffff0184>
2008bdf8:	01000034 	movhi	r4,0
2008bdfc:	2101e284 	addi	r4,r4,1930
2008be00:	d9002b15 	stw	r4,172(sp)
2008be04:	dac02b17 	ldw	r11,172(sp)
2008be08:	1c07883a 	add	r3,r3,r16
2008be0c:	44000115 	stw	r16,4(r8)
2008be10:	42c00015 	stw	r11,0(r8)
2008be14:	10800044 	addi	r2,r2,1
2008be18:	d8c02015 	stw	r3,128(sp)
2008be1c:	d8801f15 	stw	r2,124(sp)
2008be20:	010001c4 	movi	r4,7
2008be24:	20bd7e0e 	bge	r4,r2,2008b420 <__flash_rwdata_start+0xffff05b4>
2008be28:	d9002f17 	ldw	r4,188(sp)
2008be2c:	b80b883a 	mov	r5,r23
2008be30:	b00d883a 	mov	r6,r22
2008be34:	00938c40 	call	200938c4 <__ssprint_r>
2008be38:	103c6d1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008be3c:	d8c02017 	ldw	r3,128(sp)
2008be40:	da000404 	addi	r8,sp,16
2008be44:	003d7706 	br	2008b424 <__flash_rwdata_start+0xffff05b8>
2008be48:	10803fcc 	andi	r2,r2,255
2008be4c:	1000201e 	bne	r2,zero,2008bed0 <___svfprintf_internal_r+0x1200>
2008be50:	8880004c 	andi	r2,r17,1
2008be54:	10001e26 	beq	r2,zero,2008bed0 <___svfprintf_internal_r+0x1200>
2008be58:	00800c04 	movi	r2,48
2008be5c:	d8c01dc4 	addi	r3,sp,119
2008be60:	d8801dc5 	stb	r2,119(sp)
2008be64:	dc803d17 	ldw	r18,244(sp)
2008be68:	d8c03115 	stw	r3,196(sp)
2008be6c:	003cbf06 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008be70:	d9002f17 	ldw	r4,188(sp)
2008be74:	b80b883a 	mov	r5,r23
2008be78:	b00d883a 	mov	r6,r22
2008be7c:	00938c40 	call	200938c4 <__ssprint_r>
2008be80:	103c5b1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008be84:	d8c02017 	ldw	r3,128(sp)
2008be88:	da000404 	addi	r8,sp,16
2008be8c:	003d5806 	br	2008b3f0 <__flash_rwdata_start+0xffff0584>
2008be90:	d9002f17 	ldw	r4,188(sp)
2008be94:	b80b883a 	mov	r5,r23
2008be98:	b00d883a 	mov	r6,r22
2008be9c:	00938c40 	call	200938c4 <__ssprint_r>
2008bea0:	103c531e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bea4:	d8c02017 	ldw	r3,128(sp)
2008bea8:	da000404 	addi	r8,sp,16
2008beac:	003d1906 	br	2008b314 <__flash_rwdata_start+0xffff04a8>
2008beb0:	d9002f17 	ldw	r4,188(sp)
2008beb4:	b80b883a 	mov	r5,r23
2008beb8:	b00d883a 	mov	r6,r22
2008bebc:	00938c40 	call	200938c4 <__ssprint_r>
2008bec0:	103c4b1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bec4:	d8c02017 	ldw	r3,128(sp)
2008bec8:	da000404 	addi	r8,sp,16
2008becc:	003d0306 	br	2008b2dc <__flash_rwdata_start+0xffff0470>
2008bed0:	0025883a 	mov	r18,zero
2008bed4:	dd803115 	stw	r22,196(sp)
2008bed8:	003ca406 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008bedc:	dc002617 	ldw	r16,152(sp)
2008bee0:	0401480e 	bge	zero,r16,2008c404 <___svfprintf_internal_r+0x1734>
2008bee4:	db003117 	ldw	r12,196(sp)
2008bee8:	dac03317 	ldw	r11,204(sp)
2008beec:	62e1883a 	add	r16,r12,r11
2008bef0:	db003417 	ldw	r12,208(sp)
2008bef4:	5825883a 	mov	r18,r11
2008bef8:	62c0010e 	bge	r12,r11,2008bf00 <___svfprintf_internal_r+0x1230>
2008befc:	6025883a 	mov	r18,r12
2008bf00:	04800b0e 	bge	zero,r18,2008bf30 <___svfprintf_internal_r+0x1260>
2008bf04:	d8801f17 	ldw	r2,124(sp)
2008bf08:	dac03117 	ldw	r11,196(sp)
2008bf0c:	1c87883a 	add	r3,r3,r18
2008bf10:	10800044 	addi	r2,r2,1
2008bf14:	42c00015 	stw	r11,0(r8)
2008bf18:	44800115 	stw	r18,4(r8)
2008bf1c:	d8c02015 	stw	r3,128(sp)
2008bf20:	d8801f15 	stw	r2,124(sp)
2008bf24:	010001c4 	movi	r4,7
2008bf28:	20823f16 	blt	r4,r2,2008c828 <___svfprintf_internal_r+0x1b58>
2008bf2c:	42000204 	addi	r8,r8,8
2008bf30:	90023b16 	blt	r18,zero,2008c820 <___svfprintf_internal_r+0x1b50>
2008bf34:	db003417 	ldw	r12,208(sp)
2008bf38:	64a5c83a 	sub	r18,r12,r18
2008bf3c:	0480780e 	bge	zero,r18,2008c120 <___svfprintf_internal_r+0x1450>
2008bf40:	05400404 	movi	r21,16
2008bf44:	d8801f17 	ldw	r2,124(sp)
2008bf48:	ac81140e 	bge	r21,r18,2008c39c <___svfprintf_internal_r+0x16cc>
2008bf4c:	01400034 	movhi	r5,0
2008bf50:	2941e284 	addi	r5,r5,1930
2008bf54:	d9402b15 	stw	r5,172(sp)
2008bf58:	070001c4 	movi	fp,7
2008bf5c:	dcc02f17 	ldw	r19,188(sp)
2008bf60:	00000306 	br	2008bf70 <___svfprintf_internal_r+0x12a0>
2008bf64:	42000204 	addi	r8,r8,8
2008bf68:	94bffc04 	addi	r18,r18,-16
2008bf6c:	ac810e0e 	bge	r21,r18,2008c3a8 <___svfprintf_internal_r+0x16d8>
2008bf70:	18c00404 	addi	r3,r3,16
2008bf74:	10800044 	addi	r2,r2,1
2008bf78:	45000015 	stw	r20,0(r8)
2008bf7c:	45400115 	stw	r21,4(r8)
2008bf80:	d8c02015 	stw	r3,128(sp)
2008bf84:	d8801f15 	stw	r2,124(sp)
2008bf88:	e0bff60e 	bge	fp,r2,2008bf64 <__flash_rwdata_start+0xffff10f8>
2008bf8c:	9809883a 	mov	r4,r19
2008bf90:	b80b883a 	mov	r5,r23
2008bf94:	b00d883a 	mov	r6,r22
2008bf98:	00938c40 	call	200938c4 <__ssprint_r>
2008bf9c:	103c141e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bfa0:	d8c02017 	ldw	r3,128(sp)
2008bfa4:	d8801f17 	ldw	r2,124(sp)
2008bfa8:	da000404 	addi	r8,sp,16
2008bfac:	003fee06 	br	2008bf68 <__flash_rwdata_start+0xffff10fc>
2008bfb0:	d9002f17 	ldw	r4,188(sp)
2008bfb4:	b80b883a 	mov	r5,r23
2008bfb8:	b00d883a 	mov	r6,r22
2008bfbc:	00938c40 	call	200938c4 <__ssprint_r>
2008bfc0:	103c0b1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008bfc4:	d8c02017 	ldw	r3,128(sp)
2008bfc8:	d8802787 	ldb	r2,158(sp)
2008bfcc:	da000404 	addi	r8,sp,16
2008bfd0:	003cb506 	br	2008b2a8 <__flash_rwdata_start+0xffff043c>
2008bfd4:	657fffc4 	addi	r21,r12,-1
2008bfd8:	057f750e 	bge	zero,r21,2008bdb0 <__flash_rwdata_start+0xffff0f44>
2008bfdc:	07000404 	movi	fp,16
2008bfe0:	e542ed0e 	bge	fp,r21,2008cb98 <___svfprintf_internal_r+0x1ec8>
2008bfe4:	01000034 	movhi	r4,0
2008bfe8:	2101e284 	addi	r4,r4,1930
2008bfec:	d9002b15 	stw	r4,172(sp)
2008bff0:	01c001c4 	movi	r7,7
2008bff4:	dcc02f17 	ldw	r19,188(sp)
2008bff8:	00000306 	br	2008c008 <___svfprintf_internal_r+0x1338>
2008bffc:	ad7ffc04 	addi	r21,r21,-16
2008c000:	94800204 	addi	r18,r18,8
2008c004:	e540130e 	bge	fp,r21,2008c054 <___svfprintf_internal_r+0x1384>
2008c008:	18c00404 	addi	r3,r3,16
2008c00c:	84000044 	addi	r16,r16,1
2008c010:	95000015 	stw	r20,0(r18)
2008c014:	97000115 	stw	fp,4(r18)
2008c018:	d8c02015 	stw	r3,128(sp)
2008c01c:	dc001f15 	stw	r16,124(sp)
2008c020:	3c3ff60e 	bge	r7,r16,2008bffc <__flash_rwdata_start+0xffff1190>
2008c024:	9809883a 	mov	r4,r19
2008c028:	b80b883a 	mov	r5,r23
2008c02c:	b00d883a 	mov	r6,r22
2008c030:	d9c03e15 	stw	r7,248(sp)
2008c034:	00938c40 	call	200938c4 <__ssprint_r>
2008c038:	d9c03e17 	ldw	r7,248(sp)
2008c03c:	103bec1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c040:	ad7ffc04 	addi	r21,r21,-16
2008c044:	d8c02017 	ldw	r3,128(sp)
2008c048:	dc001f17 	ldw	r16,124(sp)
2008c04c:	dc800404 	addi	r18,sp,16
2008c050:	e57fed16 	blt	fp,r21,2008c008 <__flash_rwdata_start+0xffff119c>
2008c054:	dac02b17 	ldw	r11,172(sp)
2008c058:	1d47883a 	add	r3,r3,r21
2008c05c:	84000044 	addi	r16,r16,1
2008c060:	92c00015 	stw	r11,0(r18)
2008c064:	95400115 	stw	r21,4(r18)
2008c068:	d8c02015 	stw	r3,128(sp)
2008c06c:	dc001f15 	stw	r16,124(sp)
2008c070:	008001c4 	movi	r2,7
2008c074:	143f4d0e 	bge	r2,r16,2008bdac <__flash_rwdata_start+0xffff0f40>
2008c078:	d9002f17 	ldw	r4,188(sp)
2008c07c:	b80b883a 	mov	r5,r23
2008c080:	b00d883a 	mov	r6,r22
2008c084:	00938c40 	call	200938c4 <__ssprint_r>
2008c088:	103bd91e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c08c:	d8c02017 	ldw	r3,128(sp)
2008c090:	dc001f17 	ldw	r16,124(sp)
2008c094:	dc800404 	addi	r18,sp,16
2008c098:	003f4506 	br	2008bdb0 <__flash_rwdata_start+0xffff0f44>
2008c09c:	00800084 	movi	r2,2
2008c0a0:	9f06b03a 	or	r3,r19,fp
2008c0a4:	003d5706 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008c0a8:	1cc00017 	ldw	r19,0(r3)
2008c0ac:	dac02d17 	ldw	r11,180(sp)
2008c0b0:	9839d7fa 	srai	fp,r19,31
2008c0b4:	5ac00104 	addi	r11,r11,4
2008c0b8:	dac02d15 	stw	r11,180(sp)
2008c0bc:	e005883a 	mov	r2,fp
2008c0c0:	003c0306 	br	2008b0d0 <__flash_rwdata_start+0xffff0264>
2008c0c4:	dac02d17 	ldw	r11,180(sp)
2008c0c8:	0039883a 	mov	fp,zero
2008c0cc:	0005883a 	mov	r2,zero
2008c0d0:	5cc00017 	ldw	r19,0(r11)
2008c0d4:	5ac00104 	addi	r11,r11,4
2008c0d8:	dac02d15 	stw	r11,180(sp)
2008c0dc:	9807883a 	mov	r3,r19
2008c0e0:	003d4806 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008c0e4:	db002d17 	ldw	r12,180(sp)
2008c0e8:	14c00017 	ldw	r19,0(r2)
2008c0ec:	0039883a 	mov	fp,zero
2008c0f0:	63000104 	addi	r12,r12,4
2008c0f4:	db002d15 	stw	r12,180(sp)
2008c0f8:	00800044 	movi	r2,1
2008c0fc:	9807883a 	mov	r3,r19
2008c100:	003d4006 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008c104:	d9002f17 	ldw	r4,188(sp)
2008c108:	b80b883a 	mov	r5,r23
2008c10c:	b00d883a 	mov	r6,r22
2008c110:	00938c40 	call	200938c4 <__ssprint_r>
2008c114:	103bb61e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c118:	d8c02017 	ldw	r3,128(sp)
2008c11c:	da000404 	addi	r8,sp,16
2008c120:	db003117 	ldw	r12,196(sp)
2008c124:	dac03417 	ldw	r11,208(sp)
2008c128:	d8802617 	ldw	r2,152(sp)
2008c12c:	62e5883a 	add	r18,r12,r11
2008c130:	db003317 	ldw	r12,204(sp)
2008c134:	13000216 	blt	r2,r12,2008c140 <___svfprintf_internal_r+0x1470>
2008c138:	8900004c 	andi	r4,r17,1
2008c13c:	20000c26 	beq	r4,zero,2008c170 <___svfprintf_internal_r+0x14a0>
2008c140:	dac03917 	ldw	r11,228(sp)
2008c144:	d9001f17 	ldw	r4,124(sp)
2008c148:	db003517 	ldw	r12,212(sp)
2008c14c:	1ac7883a 	add	r3,r3,r11
2008c150:	21000044 	addi	r4,r4,1
2008c154:	43000015 	stw	r12,0(r8)
2008c158:	42c00115 	stw	r11,4(r8)
2008c15c:	d8c02015 	stw	r3,128(sp)
2008c160:	d9001f15 	stw	r4,124(sp)
2008c164:	014001c4 	movi	r5,7
2008c168:	2901b716 	blt	r5,r4,2008c848 <___svfprintf_internal_r+0x1b78>
2008c16c:	42000204 	addi	r8,r8,8
2008c170:	dac03317 	ldw	r11,204(sp)
2008c174:	8489c83a 	sub	r4,r16,r18
2008c178:	5885c83a 	sub	r2,r11,r2
2008c17c:	1021883a 	mov	r16,r2
2008c180:	2080010e 	bge	r4,r2,2008c188 <___svfprintf_internal_r+0x14b8>
2008c184:	2021883a 	mov	r16,r4
2008c188:	04000a0e 	bge	zero,r16,2008c1b4 <___svfprintf_internal_r+0x14e4>
2008c18c:	d9001f17 	ldw	r4,124(sp)
2008c190:	1c07883a 	add	r3,r3,r16
2008c194:	44800015 	stw	r18,0(r8)
2008c198:	21000044 	addi	r4,r4,1
2008c19c:	44000115 	stw	r16,4(r8)
2008c1a0:	d8c02015 	stw	r3,128(sp)
2008c1a4:	d9001f15 	stw	r4,124(sp)
2008c1a8:	014001c4 	movi	r5,7
2008c1ac:	2901bf16 	blt	r5,r4,2008c8ac <___svfprintf_internal_r+0x1bdc>
2008c1b0:	42000204 	addi	r8,r8,8
2008c1b4:	8001bb16 	blt	r16,zero,2008c8a4 <___svfprintf_internal_r+0x1bd4>
2008c1b8:	1421c83a 	sub	r16,r2,r16
2008c1bc:	043c990e 	bge	zero,r16,2008b424 <__flash_rwdata_start+0xffff05b8>
2008c1c0:	04800404 	movi	r18,16
2008c1c4:	d8801f17 	ldw	r2,124(sp)
2008c1c8:	943f0b0e 	bge	r18,r16,2008bdf8 <__flash_rwdata_start+0xffff0f8c>
2008c1cc:	01400034 	movhi	r5,0
2008c1d0:	2941e284 	addi	r5,r5,1930
2008c1d4:	d9402b15 	stw	r5,172(sp)
2008c1d8:	054001c4 	movi	r21,7
2008c1dc:	dcc02f17 	ldw	r19,188(sp)
2008c1e0:	00000306 	br	2008c1f0 <___svfprintf_internal_r+0x1520>
2008c1e4:	42000204 	addi	r8,r8,8
2008c1e8:	843ffc04 	addi	r16,r16,-16
2008c1ec:	943f050e 	bge	r18,r16,2008be04 <__flash_rwdata_start+0xffff0f98>
2008c1f0:	18c00404 	addi	r3,r3,16
2008c1f4:	10800044 	addi	r2,r2,1
2008c1f8:	45000015 	stw	r20,0(r8)
2008c1fc:	44800115 	stw	r18,4(r8)
2008c200:	d8c02015 	stw	r3,128(sp)
2008c204:	d8801f15 	stw	r2,124(sp)
2008c208:	a8bff60e 	bge	r21,r2,2008c1e4 <__flash_rwdata_start+0xffff1378>
2008c20c:	9809883a 	mov	r4,r19
2008c210:	b80b883a 	mov	r5,r23
2008c214:	b00d883a 	mov	r6,r22
2008c218:	00938c40 	call	200938c4 <__ssprint_r>
2008c21c:	103b741e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c220:	d8c02017 	ldw	r3,128(sp)
2008c224:	d8801f17 	ldw	r2,124(sp)
2008c228:	da000404 	addi	r8,sp,16
2008c22c:	003fee06 	br	2008c1e8 <__flash_rwdata_start+0xffff137c>
2008c230:	8888703a 	and	r4,r17,r2
2008c234:	203eb31e 	bne	r4,zero,2008bd04 <__flash_rwdata_start+0xffff0e98>
2008c238:	dc001f17 	ldw	r16,124(sp)
2008c23c:	db003117 	ldw	r12,196(sp)
2008c240:	40800115 	stw	r2,4(r8)
2008c244:	84000044 	addi	r16,r16,1
2008c248:	43000015 	stw	r12,0(r8)
2008c24c:	d8c02015 	stw	r3,128(sp)
2008c250:	dc001f15 	stw	r16,124(sp)
2008c254:	008001c4 	movi	r2,7
2008c258:	143f8716 	blt	r2,r16,2008c078 <__flash_rwdata_start+0xffff120c>
2008c25c:	44800204 	addi	r18,r8,8
2008c260:	003ed306 	br	2008bdb0 <__flash_rwdata_start+0xffff0f44>
2008c264:	d9002f17 	ldw	r4,188(sp)
2008c268:	b80b883a 	mov	r5,r23
2008c26c:	b00d883a 	mov	r6,r22
2008c270:	00938c40 	call	200938c4 <__ssprint_r>
2008c274:	103b5e1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c278:	d8c02017 	ldw	r3,128(sp)
2008c27c:	dc001f17 	ldw	r16,124(sp)
2008c280:	da000404 	addi	r8,sp,16
2008c284:	003eaa06 	br	2008bd30 <__flash_rwdata_start+0xffff0ec4>
2008c288:	d9002f17 	ldw	r4,188(sp)
2008c28c:	b80b883a 	mov	r5,r23
2008c290:	b00d883a 	mov	r6,r22
2008c294:	00938c40 	call	200938c4 <__ssprint_r>
2008c298:	103b551e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c29c:	d8c02017 	ldw	r3,128(sp)
2008c2a0:	dc001f17 	ldw	r16,124(sp)
2008c2a4:	dc800404 	addi	r18,sp,16
2008c2a8:	003eac06 	br	2008bd5c <__flash_rwdata_start+0xffff0ef0>
2008c2ac:	d9002f17 	ldw	r4,188(sp)
2008c2b0:	b80b883a 	mov	r5,r23
2008c2b4:	b00d883a 	mov	r6,r22
2008c2b8:	00938c40 	call	200938c4 <__ssprint_r>
2008c2bc:	103b4c1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c2c0:	d8c02017 	ldw	r3,128(sp)
2008c2c4:	da000404 	addi	r8,sp,16
2008c2c8:	003c1506 	br	2008b320 <__flash_rwdata_start+0xffff04b4>
2008c2cc:	da004015 	stw	r8,256(sp)
2008c2d0:	da403f15 	stw	r9,252(sp)
2008c2d4:	00935b00 	call	200935b0 <__fpclassifyd>
2008c2d8:	da004017 	ldw	r8,256(sp)
2008c2dc:	da403f17 	ldw	r9,252(sp)
2008c2e0:	1000951e 	bne	r2,zero,2008c538 <___svfprintf_internal_r+0x1868>
2008c2e4:	008011c4 	movi	r2,71
2008c2e8:	1400fb16 	blt	r2,r16,2008c6d8 <___svfprintf_internal_r+0x1a08>
2008c2ec:	03000034 	movhi	r12,0
2008c2f0:	6301d404 	addi	r12,r12,1872
2008c2f4:	db003115 	stw	r12,196(sp)
2008c2f8:	00c000c4 	movi	r3,3
2008c2fc:	00bfdfc4 	movi	r2,-129
2008c300:	d8c02a15 	stw	r3,168(sp)
2008c304:	88a2703a 	and	r17,r17,r2
2008c308:	dd402783 	ldbu	r21,158(sp)
2008c30c:	dcc02d15 	stw	r19,180(sp)
2008c310:	1825883a 	mov	r18,r3
2008c314:	d8003215 	stw	zero,200(sp)
2008c318:	d8003415 	stw	zero,208(sp)
2008c31c:	003b9806 	br	2008b180 <__flash_rwdata_start+0xffff0314>
2008c320:	1c000007 	ldb	r16,0(r3)
2008c324:	1805883a 	mov	r2,r3
2008c328:	003abf06 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008c32c:	00800084 	movi	r2,2
2008c330:	003cb406 	br	2008b604 <__flash_rwdata_start+0xffff0798>
2008c334:	88c0100c 	andi	r3,r17,64
2008c338:	1800f626 	beq	r3,zero,2008c714 <___svfprintf_internal_r+0x1a44>
2008c33c:	dac02d17 	ldw	r11,180(sp)
2008c340:	14c0000b 	ldhu	r19,0(r2)
2008c344:	0039883a 	mov	fp,zero
2008c348:	5ac00104 	addi	r11,r11,4
2008c34c:	dac02d15 	stw	r11,180(sp)
2008c350:	003cbd06 	br	2008b648 <__flash_rwdata_start+0xffff07dc>
2008c354:	8880040c 	andi	r2,r17,16
2008c358:	1000091e 	bne	r2,zero,2008c380 <___svfprintf_internal_r+0x16b0>
2008c35c:	8c40100c 	andi	r17,r17,64
2008c360:	88000726 	beq	r17,zero,2008c380 <___svfprintf_internal_r+0x16b0>
2008c364:	db002d17 	ldw	r12,180(sp)
2008c368:	dac03017 	ldw	r11,192(sp)
2008c36c:	60800017 	ldw	r2,0(r12)
2008c370:	63000104 	addi	r12,r12,4
2008c374:	db002d15 	stw	r12,180(sp)
2008c378:	12c0000d 	sth	r11,0(r2)
2008c37c:	003a8006 	br	2008ad80 <__flash_rwdata_start+0xfffeff14>
2008c380:	db002d17 	ldw	r12,180(sp)
2008c384:	dac03017 	ldw	r11,192(sp)
2008c388:	60800017 	ldw	r2,0(r12)
2008c38c:	63000104 	addi	r12,r12,4
2008c390:	db002d15 	stw	r12,180(sp)
2008c394:	12c00015 	stw	r11,0(r2)
2008c398:	003a7906 	br	2008ad80 <__flash_rwdata_start+0xfffeff14>
2008c39c:	01000034 	movhi	r4,0
2008c3a0:	2101e284 	addi	r4,r4,1930
2008c3a4:	d9002b15 	stw	r4,172(sp)
2008c3a8:	dac02b17 	ldw	r11,172(sp)
2008c3ac:	1c87883a 	add	r3,r3,r18
2008c3b0:	10800044 	addi	r2,r2,1
2008c3b4:	42c00015 	stw	r11,0(r8)
2008c3b8:	44800115 	stw	r18,4(r8)
2008c3bc:	d8c02015 	stw	r3,128(sp)
2008c3c0:	d8801f15 	stw	r2,124(sp)
2008c3c4:	010001c4 	movi	r4,7
2008c3c8:	20bf4e16 	blt	r4,r2,2008c104 <__flash_rwdata_start+0xffff1298>
2008c3cc:	42000204 	addi	r8,r8,8
2008c3d0:	003f5306 	br	2008c120 <__flash_rwdata_start+0xffff12b4>
2008c3d4:	01000034 	movhi	r4,0
2008c3d8:	2101e284 	addi	r4,r4,1930
2008c3dc:	d9002b15 	stw	r4,172(sp)
2008c3e0:	003bf906 	br	2008b3c8 <__flash_rwdata_start+0xffff055c>
2008c3e4:	d9002f17 	ldw	r4,188(sp)
2008c3e8:	b80b883a 	mov	r5,r23
2008c3ec:	b00d883a 	mov	r6,r22
2008c3f0:	00938c40 	call	200938c4 <__ssprint_r>
2008c3f4:	103afe1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c3f8:	d8c02017 	ldw	r3,128(sp)
2008c3fc:	da000404 	addi	r8,sp,16
2008c400:	003dc606 	br	2008bb1c <__flash_rwdata_start+0xffff0cb0>
2008c404:	d8801f17 	ldw	r2,124(sp)
2008c408:	03000034 	movhi	r12,0
2008c40c:	01000044 	movi	r4,1
2008c410:	18c00044 	addi	r3,r3,1
2008c414:	10800044 	addi	r2,r2,1
2008c418:	6301e204 	addi	r12,r12,1928
2008c41c:	41000115 	stw	r4,4(r8)
2008c420:	43000015 	stw	r12,0(r8)
2008c424:	d8c02015 	stw	r3,128(sp)
2008c428:	d8801f15 	stw	r2,124(sp)
2008c42c:	010001c4 	movi	r4,7
2008c430:	2080ad16 	blt	r4,r2,2008c6e8 <___svfprintf_internal_r+0x1a18>
2008c434:	42000204 	addi	r8,r8,8
2008c438:	8000041e 	bne	r16,zero,2008c44c <___svfprintf_internal_r+0x177c>
2008c43c:	dac03317 	ldw	r11,204(sp)
2008c440:	5800021e 	bne	r11,zero,2008c44c <___svfprintf_internal_r+0x177c>
2008c444:	8880004c 	andi	r2,r17,1
2008c448:	103bf626 	beq	r2,zero,2008b424 <__flash_rwdata_start+0xffff05b8>
2008c44c:	db003917 	ldw	r12,228(sp)
2008c450:	d8801f17 	ldw	r2,124(sp)
2008c454:	dac03517 	ldw	r11,212(sp)
2008c458:	1b07883a 	add	r3,r3,r12
2008c45c:	10800044 	addi	r2,r2,1
2008c460:	42c00015 	stw	r11,0(r8)
2008c464:	43000115 	stw	r12,4(r8)
2008c468:	d8c02015 	stw	r3,128(sp)
2008c46c:	d8801f15 	stw	r2,124(sp)
2008c470:	010001c4 	movi	r4,7
2008c474:	20818616 	blt	r4,r2,2008ca90 <___svfprintf_internal_r+0x1dc0>
2008c478:	42000204 	addi	r8,r8,8
2008c47c:	0421c83a 	sub	r16,zero,r16
2008c480:	0400bc0e 	bge	zero,r16,2008c774 <___svfprintf_internal_r+0x1aa4>
2008c484:	04800404 	movi	r18,16
2008c488:	9400f80e 	bge	r18,r16,2008c86c <___svfprintf_internal_r+0x1b9c>
2008c48c:	01000034 	movhi	r4,0
2008c490:	2101e284 	addi	r4,r4,1930
2008c494:	d9002b15 	stw	r4,172(sp)
2008c498:	054001c4 	movi	r21,7
2008c49c:	dcc02f17 	ldw	r19,188(sp)
2008c4a0:	00000306 	br	2008c4b0 <___svfprintf_internal_r+0x17e0>
2008c4a4:	42000204 	addi	r8,r8,8
2008c4a8:	843ffc04 	addi	r16,r16,-16
2008c4ac:	9400f20e 	bge	r18,r16,2008c878 <___svfprintf_internal_r+0x1ba8>
2008c4b0:	18c00404 	addi	r3,r3,16
2008c4b4:	10800044 	addi	r2,r2,1
2008c4b8:	45000015 	stw	r20,0(r8)
2008c4bc:	44800115 	stw	r18,4(r8)
2008c4c0:	d8c02015 	stw	r3,128(sp)
2008c4c4:	d8801f15 	stw	r2,124(sp)
2008c4c8:	a8bff60e 	bge	r21,r2,2008c4a4 <__flash_rwdata_start+0xffff1638>
2008c4cc:	9809883a 	mov	r4,r19
2008c4d0:	b80b883a 	mov	r5,r23
2008c4d4:	b00d883a 	mov	r6,r22
2008c4d8:	00938c40 	call	200938c4 <__ssprint_r>
2008c4dc:	103ac41e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c4e0:	d8c02017 	ldw	r3,128(sp)
2008c4e4:	d8801f17 	ldw	r2,124(sp)
2008c4e8:	da000404 	addi	r8,sp,16
2008c4ec:	003fee06 	br	2008c4a8 <__flash_rwdata_start+0xffff163c>
2008c4f0:	db002e17 	ldw	r12,184(sp)
2008c4f4:	1805883a 	mov	r2,r3
2008c4f8:	dac02d15 	stw	r11,180(sp)
2008c4fc:	0319c83a 	sub	r12,zero,r12
2008c500:	db002e15 	stw	r12,184(sp)
2008c504:	003acf06 	br	2008b044 <__flash_rwdata_start+0xffff01d8>
2008c508:	18800044 	addi	r2,r3,1
2008c50c:	8c400814 	ori	r17,r17,32
2008c510:	1c000047 	ldb	r16,1(r3)
2008c514:	003a4406 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008c518:	d9002f17 	ldw	r4,188(sp)
2008c51c:	b80b883a 	mov	r5,r23
2008c520:	b00d883a 	mov	r6,r22
2008c524:	00938c40 	call	200938c4 <__ssprint_r>
2008c528:	103ab11e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c52c:	d8c02017 	ldw	r3,128(sp)
2008c530:	da000404 	addi	r8,sp,16
2008c534:	003d8a06 	br	2008bb60 <__flash_rwdata_start+0xffff0cf4>
2008c538:	057ff7c4 	movi	r21,-33
2008c53c:	00bfffc4 	movi	r2,-1
2008c540:	856a703a 	and	r21,r16,r21
2008c544:	48807126 	beq	r9,r2,2008c70c <___svfprintf_internal_r+0x1a3c>
2008c548:	008011c4 	movi	r2,71
2008c54c:	a8814d26 	beq	r21,r2,2008ca84 <___svfprintf_internal_r+0x1db4>
2008c550:	db003817 	ldw	r12,224(sp)
2008c554:	8ac04014 	ori	r11,r17,256
2008c558:	dac02d15 	stw	r11,180(sp)
2008c55c:	60015616 	blt	r12,zero,2008cab8 <___svfprintf_internal_r+0x1de8>
2008c560:	dc803817 	ldw	r18,224(sp)
2008c564:	d8002a05 	stb	zero,168(sp)
2008c568:	00801984 	movi	r2,102
2008c56c:	80808c26 	beq	r16,r2,2008c7a0 <___svfprintf_internal_r+0x1ad0>
2008c570:	00801184 	movi	r2,70
2008c574:	80808a26 	beq	r16,r2,2008c7a0 <___svfprintf_internal_r+0x1ad0>
2008c578:	00801144 	movi	r2,69
2008c57c:	a8815226 	beq	r21,r2,2008cac8 <___svfprintf_internal_r+0x1df8>
2008c580:	4839883a 	mov	fp,r9
2008c584:	d8802604 	addi	r2,sp,152
2008c588:	d8800115 	stw	r2,4(sp)
2008c58c:	d9002f17 	ldw	r4,188(sp)
2008c590:	d8802504 	addi	r2,sp,148
2008c594:	d9403717 	ldw	r5,220(sp)
2008c598:	d8800215 	stw	r2,8(sp)
2008c59c:	d8802104 	addi	r2,sp,132
2008c5a0:	df000015 	stw	fp,0(sp)
2008c5a4:	d8800315 	stw	r2,12(sp)
2008c5a8:	900d883a 	mov	r6,r18
2008c5ac:	01c00084 	movi	r7,2
2008c5b0:	da004015 	stw	r8,256(sp)
2008c5b4:	da403f15 	stw	r9,252(sp)
2008c5b8:	008f2a80 	call	2008f2a8 <_dtoa_r>
2008c5bc:	d8803115 	stw	r2,196(sp)
2008c5c0:	008019c4 	movi	r2,103
2008c5c4:	da004017 	ldw	r8,256(sp)
2008c5c8:	da403f17 	ldw	r9,252(sp)
2008c5cc:	80800226 	beq	r16,r2,2008c5d8 <___svfprintf_internal_r+0x1908>
2008c5d0:	008011c4 	movi	r2,71
2008c5d4:	8080841e 	bne	r16,r2,2008c7e8 <___svfprintf_internal_r+0x1b18>
2008c5d8:	8880004c 	andi	r2,r17,1
2008c5dc:	10014f26 	beq	r2,zero,2008cb1c <___svfprintf_internal_r+0x1e4c>
2008c5e0:	db003117 	ldw	r12,196(sp)
2008c5e4:	6715883a 	add	r10,r12,fp
2008c5e8:	d9003717 	ldw	r4,220(sp)
2008c5ec:	900b883a 	mov	r5,r18
2008c5f0:	000d883a 	mov	r6,zero
2008c5f4:	000f883a 	mov	r7,zero
2008c5f8:	da004015 	stw	r8,256(sp)
2008c5fc:	da403f15 	stw	r9,252(sp)
2008c600:	da803e15 	stw	r10,248(sp)
2008c604:	00973d40 	call	200973d4 <__eqdf2>
2008c608:	da004017 	ldw	r8,256(sp)
2008c60c:	da403f17 	ldw	r9,252(sp)
2008c610:	da803e17 	ldw	r10,248(sp)
2008c614:	1000d926 	beq	r2,zero,2008c97c <___svfprintf_internal_r+0x1cac>
2008c618:	d8802117 	ldw	r2,132(sp)
2008c61c:	1280062e 	bgeu	r2,r10,2008c638 <___svfprintf_internal_r+0x1968>
2008c620:	01000c04 	movi	r4,48
2008c624:	10c00044 	addi	r3,r2,1
2008c628:	d8c02115 	stw	r3,132(sp)
2008c62c:	11000005 	stb	r4,0(r2)
2008c630:	d8802117 	ldw	r2,132(sp)
2008c634:	12bffb36 	bltu	r2,r10,2008c624 <__flash_rwdata_start+0xffff17b8>
2008c638:	db003117 	ldw	r12,196(sp)
2008c63c:	1305c83a 	sub	r2,r2,r12
2008c640:	d8803315 	stw	r2,204(sp)
2008c644:	008011c4 	movi	r2,71
2008c648:	a880b626 	beq	r21,r2,2008c924 <___svfprintf_internal_r+0x1c54>
2008c64c:	00801944 	movi	r2,101
2008c650:	14017c0e 	bge	r2,r16,2008cc44 <___svfprintf_internal_r+0x1f74>
2008c654:	00801984 	movi	r2,102
2008c658:	80812626 	beq	r16,r2,2008caf4 <___svfprintf_internal_r+0x1e24>
2008c65c:	db002617 	ldw	r12,152(sp)
2008c660:	db003415 	stw	r12,208(sp)
2008c664:	db003417 	ldw	r12,208(sp)
2008c668:	dac03317 	ldw	r11,204(sp)
2008c66c:	62c11816 	blt	r12,r11,2008cad0 <___svfprintf_internal_r+0x1e00>
2008c670:	8c40004c 	andi	r17,r17,1
2008c674:	88013b1e 	bne	r17,zero,2008cb64 <___svfprintf_internal_r+0x1e94>
2008c678:	6005883a 	mov	r2,r12
2008c67c:	60012516 	blt	r12,zero,2008cb14 <___svfprintf_internal_r+0x1e44>
2008c680:	dc803417 	ldw	r18,208(sp)
2008c684:	df002a07 	ldb	fp,168(sp)
2008c688:	e000b01e 	bne	fp,zero,2008c94c <___svfprintf_internal_r+0x1c7c>
2008c68c:	dc402d17 	ldw	r17,180(sp)
2008c690:	dd402783 	ldbu	r21,158(sp)
2008c694:	d8802a15 	stw	r2,168(sp)
2008c698:	dcc02d15 	stw	r19,180(sp)
2008c69c:	d8003215 	stw	zero,200(sp)
2008c6a0:	003ab706 	br	2008b180 <__flash_rwdata_start+0xffff0314>
2008c6a4:	00800034 	movhi	r2,0
2008c6a8:	1081d204 	addi	r2,r2,1864
2008c6ac:	d8803115 	stw	r2,196(sp)
2008c6b0:	003bbb06 	br	2008b5a0 <__flash_rwdata_start+0xffff0734>
2008c6b4:	d9002f17 	ldw	r4,188(sp)
2008c6b8:	04001004 	movi	r16,64
2008c6bc:	800b883a 	mov	r5,r16
2008c6c0:	0089e500 	call	20089e50 <_malloc_r>
2008c6c4:	b8800015 	stw	r2,0(r23)
2008c6c8:	b8800415 	stw	r2,16(r23)
2008c6cc:	10015f26 	beq	r2,zero,2008cc4c <___svfprintf_internal_r+0x1f7c>
2008c6d0:	bc000515 	stw	r16,20(r23)
2008c6d4:	00399806 	br	2008ad38 <__flash_rwdata_start+0xfffefecc>
2008c6d8:	00800034 	movhi	r2,0
2008c6dc:	1081d504 	addi	r2,r2,1876
2008c6e0:	d8803115 	stw	r2,196(sp)
2008c6e4:	003f0406 	br	2008c2f8 <__flash_rwdata_start+0xffff148c>
2008c6e8:	d9002f17 	ldw	r4,188(sp)
2008c6ec:	b80b883a 	mov	r5,r23
2008c6f0:	b00d883a 	mov	r6,r22
2008c6f4:	00938c40 	call	200938c4 <__ssprint_r>
2008c6f8:	103a3d1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c6fc:	dc002617 	ldw	r16,152(sp)
2008c700:	d8c02017 	ldw	r3,128(sp)
2008c704:	da000404 	addi	r8,sp,16
2008c708:	003f4b06 	br	2008c438 <__flash_rwdata_start+0xffff15cc>
2008c70c:	02400184 	movi	r9,6
2008c710:	003f8f06 	br	2008c550 <__flash_rwdata_start+0xffff16e4>
2008c714:	db002d17 	ldw	r12,180(sp)
2008c718:	14c00017 	ldw	r19,0(r2)
2008c71c:	0039883a 	mov	fp,zero
2008c720:	63000104 	addi	r12,r12,4
2008c724:	db002d15 	stw	r12,180(sp)
2008c728:	003bc706 	br	2008b648 <__flash_rwdata_start+0xffff07dc>
2008c72c:	d8c03117 	ldw	r3,196(sp)
2008c730:	b0e5c83a 	sub	r18,r22,r3
2008c734:	003a8d06 	br	2008b16c <__flash_rwdata_start+0xffff0300>
2008c738:	da004015 	stw	r8,256(sp)
2008c73c:	008abd00 	call	2008abd0 <strlen>
2008c740:	1025883a 	mov	r18,r2
2008c744:	da004017 	ldw	r8,256(sp)
2008c748:	903bf20e 	bge	r18,zero,2008b714 <__flash_rwdata_start+0xffff08a8>
2008c74c:	0005883a 	mov	r2,zero
2008c750:	003bf006 	br	2008b714 <__flash_rwdata_start+0xffff08a8>
2008c754:	d9002f17 	ldw	r4,188(sp)
2008c758:	b80b883a 	mov	r5,r23
2008c75c:	b00d883a 	mov	r6,r22
2008c760:	00938c40 	call	200938c4 <__ssprint_r>
2008c764:	103a221e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c768:	d8c02017 	ldw	r3,128(sp)
2008c76c:	d8801f17 	ldw	r2,124(sp)
2008c770:	da000404 	addi	r8,sp,16
2008c774:	db003317 	ldw	r12,204(sp)
2008c778:	dac03117 	ldw	r11,196(sp)
2008c77c:	10800044 	addi	r2,r2,1
2008c780:	1b07883a 	add	r3,r3,r12
2008c784:	42c00015 	stw	r11,0(r8)
2008c788:	43000115 	stw	r12,4(r8)
2008c78c:	d8c02015 	stw	r3,128(sp)
2008c790:	d8801f15 	stw	r2,124(sp)
2008c794:	010001c4 	movi	r4,7
2008c798:	20bb210e 	bge	r4,r2,2008b420 <__flash_rwdata_start+0xffff05b4>
2008c79c:	003da206 	br	2008be28 <__flash_rwdata_start+0xffff0fbc>
2008c7a0:	d8802604 	addi	r2,sp,152
2008c7a4:	d8800115 	stw	r2,4(sp)
2008c7a8:	d9002f17 	ldw	r4,188(sp)
2008c7ac:	d8802504 	addi	r2,sp,148
2008c7b0:	d9403717 	ldw	r5,220(sp)
2008c7b4:	d8800215 	stw	r2,8(sp)
2008c7b8:	d8802104 	addi	r2,sp,132
2008c7bc:	da400015 	stw	r9,0(sp)
2008c7c0:	d8800315 	stw	r2,12(sp)
2008c7c4:	900d883a 	mov	r6,r18
2008c7c8:	01c000c4 	movi	r7,3
2008c7cc:	da004015 	stw	r8,256(sp)
2008c7d0:	da403f15 	stw	r9,252(sp)
2008c7d4:	008f2a80 	call	2008f2a8 <_dtoa_r>
2008c7d8:	da403f17 	ldw	r9,252(sp)
2008c7dc:	da004017 	ldw	r8,256(sp)
2008c7e0:	d8803115 	stw	r2,196(sp)
2008c7e4:	4839883a 	mov	fp,r9
2008c7e8:	dac03117 	ldw	r11,196(sp)
2008c7ec:	00801184 	movi	r2,70
2008c7f0:	5f15883a 	add	r10,r11,fp
2008c7f4:	a8bf7c1e 	bne	r21,r2,2008c5e8 <__flash_rwdata_start+0xffff177c>
2008c7f8:	59000007 	ldb	r4,0(r11)
2008c7fc:	00800c04 	movi	r2,48
2008c800:	2080c826 	beq	r4,r2,2008cb24 <___svfprintf_internal_r+0x1e54>
2008c804:	d8c02617 	ldw	r3,152(sp)
2008c808:	50d5883a 	add	r10,r10,r3
2008c80c:	003f7606 	br	2008c5e8 <__flash_rwdata_start+0xffff177c>
2008c810:	01000034 	movhi	r4,0
2008c814:	2101e684 	addi	r4,r4,1946
2008c818:	d9003615 	stw	r4,216(sp)
2008c81c:	003a9706 	br	2008b27c <__flash_rwdata_start+0xffff0410>
2008c820:	0025883a 	mov	r18,zero
2008c824:	003dc306 	br	2008bf34 <__flash_rwdata_start+0xffff10c8>
2008c828:	d9002f17 	ldw	r4,188(sp)
2008c82c:	b80b883a 	mov	r5,r23
2008c830:	b00d883a 	mov	r6,r22
2008c834:	00938c40 	call	200938c4 <__ssprint_r>
2008c838:	1039ed1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c83c:	d8c02017 	ldw	r3,128(sp)
2008c840:	da000404 	addi	r8,sp,16
2008c844:	003dba06 	br	2008bf30 <__flash_rwdata_start+0xffff10c4>
2008c848:	d9002f17 	ldw	r4,188(sp)
2008c84c:	b80b883a 	mov	r5,r23
2008c850:	b00d883a 	mov	r6,r22
2008c854:	00938c40 	call	200938c4 <__ssprint_r>
2008c858:	1039e51e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c85c:	d8802617 	ldw	r2,152(sp)
2008c860:	d8c02017 	ldw	r3,128(sp)
2008c864:	da000404 	addi	r8,sp,16
2008c868:	003e4106 	br	2008c170 <__flash_rwdata_start+0xffff1304>
2008c86c:	03000034 	movhi	r12,0
2008c870:	6301e284 	addi	r12,r12,1930
2008c874:	db002b15 	stw	r12,172(sp)
2008c878:	dac02b17 	ldw	r11,172(sp)
2008c87c:	1c07883a 	add	r3,r3,r16
2008c880:	10800044 	addi	r2,r2,1
2008c884:	42c00015 	stw	r11,0(r8)
2008c888:	44000115 	stw	r16,4(r8)
2008c88c:	d8c02015 	stw	r3,128(sp)
2008c890:	d8801f15 	stw	r2,124(sp)
2008c894:	010001c4 	movi	r4,7
2008c898:	20bfae16 	blt	r4,r2,2008c754 <__flash_rwdata_start+0xffff18e8>
2008c89c:	42000204 	addi	r8,r8,8
2008c8a0:	003fb406 	br	2008c774 <__flash_rwdata_start+0xffff1908>
2008c8a4:	0021883a 	mov	r16,zero
2008c8a8:	003e4306 	br	2008c1b8 <__flash_rwdata_start+0xffff134c>
2008c8ac:	d9002f17 	ldw	r4,188(sp)
2008c8b0:	b80b883a 	mov	r5,r23
2008c8b4:	b00d883a 	mov	r6,r22
2008c8b8:	00938c40 	call	200938c4 <__ssprint_r>
2008c8bc:	1039cc1e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008c8c0:	d8802617 	ldw	r2,152(sp)
2008c8c4:	db003317 	ldw	r12,204(sp)
2008c8c8:	d8c02017 	ldw	r3,128(sp)
2008c8cc:	da000404 	addi	r8,sp,16
2008c8d0:	6085c83a 	sub	r2,r12,r2
2008c8d4:	003e3706 	br	2008c1b4 <__flash_rwdata_start+0xffff1348>
2008c8d8:	00800184 	movi	r2,6
2008c8dc:	1240012e 	bgeu	r2,r9,2008c8e4 <___svfprintf_internal_r+0x1c14>
2008c8e0:	1013883a 	mov	r9,r2
2008c8e4:	4825883a 	mov	r18,r9
2008c8e8:	4805883a 	mov	r2,r9
2008c8ec:	4800a216 	blt	r9,zero,2008cb78 <___svfprintf_internal_r+0x1ea8>
2008c8f0:	d8802a15 	stw	r2,168(sp)
2008c8f4:	00800034 	movhi	r2,0
2008c8f8:	1081e004 	addi	r2,r2,1920
2008c8fc:	d8803115 	stw	r2,196(sp)
2008c900:	dcc02d15 	stw	r19,180(sp)
2008c904:	d8003215 	stw	zero,200(sp)
2008c908:	d8003415 	stw	zero,208(sp)
2008c90c:	0005883a 	mov	r2,zero
2008c910:	003a2206 	br	2008b19c <__flash_rwdata_start+0xffff0330>
2008c914:	03000034 	movhi	r12,0
2008c918:	6301e684 	addi	r12,r12,1946
2008c91c:	db003615 	stw	r12,216(sp)
2008c920:	003ae506 	br	2008b4b8 <__flash_rwdata_start+0xffff064c>
2008c924:	d8c02617 	ldw	r3,152(sp)
2008c928:	00bfff44 	movi	r2,-3
2008c92c:	18801516 	blt	r3,r2,2008c984 <___svfprintf_internal_r+0x1cb4>
2008c930:	48c01416 	blt	r9,r3,2008c984 <___svfprintf_internal_r+0x1cb4>
2008c934:	d8c03415 	stw	r3,208(sp)
2008c938:	040019c4 	movi	r16,103
2008c93c:	003f4906 	br	2008c664 <__flash_rwdata_start+0xffff17f8>
2008c940:	05400b44 	movi	r21,45
2008c944:	dd402785 	stb	r21,158(sp)
2008c948:	003b1006 	br	2008b58c <__flash_rwdata_start+0xffff0720>
2008c94c:	00c00b44 	movi	r3,45
2008c950:	d8802a15 	stw	r2,168(sp)
2008c954:	dc402d17 	ldw	r17,180(sp)
2008c958:	d8c02785 	stb	r3,158(sp)
2008c95c:	dcc02d15 	stw	r19,180(sp)
2008c960:	d8003215 	stw	zero,200(sp)
2008c964:	00800b44 	movi	r2,45
2008c968:	003a0906 	br	2008b190 <__flash_rwdata_start+0xffff0324>
2008c96c:	01000034 	movhi	r4,0
2008c970:	2101e284 	addi	r4,r4,1930
2008c974:	d9002b15 	stw	r4,172(sp)
2008c978:	003cc306 	br	2008bc88 <__flash_rwdata_start+0xffff0e1c>
2008c97c:	5005883a 	mov	r2,r10
2008c980:	003f2d06 	br	2008c638 <__flash_rwdata_start+0xffff17cc>
2008c984:	843fff84 	addi	r16,r16,-2
2008c988:	1f3fffc4 	addi	fp,r3,-1
2008c98c:	df002615 	stw	fp,152(sp)
2008c990:	dc0022c5 	stb	r16,139(sp)
2008c994:	e000a016 	blt	fp,zero,2008cc18 <___svfprintf_internal_r+0x1f48>
2008c998:	00800ac4 	movi	r2,43
2008c99c:	d8802305 	stb	r2,140(sp)
2008c9a0:	00800244 	movi	r2,9
2008c9a4:	1700800e 	bge	r2,fp,2008cba8 <___svfprintf_internal_r+0x1ed8>
2008c9a8:	dd4022c4 	addi	r21,sp,139
2008c9ac:	dc002b15 	stw	r16,172(sp)
2008c9b0:	4025883a 	mov	r18,r8
2008c9b4:	a821883a 	mov	r16,r21
2008c9b8:	e009883a 	mov	r4,fp
2008c9bc:	01400284 	movi	r5,10
2008c9c0:	0086bcc0 	call	20086bcc <__modsi3>
2008c9c4:	10800c04 	addi	r2,r2,48
2008c9c8:	843fffc4 	addi	r16,r16,-1
2008c9cc:	e009883a 	mov	r4,fp
2008c9d0:	01400284 	movi	r5,10
2008c9d4:	80800005 	stb	r2,0(r16)
2008c9d8:	0086b780 	call	20086b78 <__divsi3>
2008c9dc:	1039883a 	mov	fp,r2
2008c9e0:	00800244 	movi	r2,9
2008c9e4:	173ff416 	blt	r2,fp,2008c9b8 <__flash_rwdata_start+0xffff1b4c>
2008c9e8:	9011883a 	mov	r8,r18
2008c9ec:	e0800c04 	addi	r2,fp,48
2008c9f0:	8025883a 	mov	r18,r16
2008c9f4:	913fffc4 	addi	r4,r18,-1
2008c9f8:	90bfffc5 	stb	r2,-1(r18)
2008c9fc:	dc002b17 	ldw	r16,172(sp)
2008ca00:	25408e2e 	bgeu	r4,r21,2008cc3c <___svfprintf_internal_r+0x1f6c>
2008ca04:	d9402384 	addi	r5,sp,142
2008ca08:	2c8bc83a 	sub	r5,r5,r18
2008ca0c:	d8c02344 	addi	r3,sp,141
2008ca10:	a94b883a 	add	r5,r21,r5
2008ca14:	00000106 	br	2008ca1c <___svfprintf_internal_r+0x1d4c>
2008ca18:	20800003 	ldbu	r2,0(r4)
2008ca1c:	18800005 	stb	r2,0(r3)
2008ca20:	18c00044 	addi	r3,r3,1
2008ca24:	21000044 	addi	r4,r4,1
2008ca28:	197ffb1e 	bne	r3,r5,2008ca18 <__flash_rwdata_start+0xffff1bac>
2008ca2c:	d8802304 	addi	r2,sp,140
2008ca30:	1485c83a 	sub	r2,r2,r18
2008ca34:	d8c02344 	addi	r3,sp,141
2008ca38:	1885883a 	add	r2,r3,r2
2008ca3c:	dac03317 	ldw	r11,204(sp)
2008ca40:	156bc83a 	sub	r21,r2,r21
2008ca44:	dd403a15 	stw	r21,232(sp)
2008ca48:	00800044 	movi	r2,1
2008ca4c:	5d65883a 	add	r18,r11,r21
2008ca50:	12c0770e 	bge	r2,r11,2008cc30 <___svfprintf_internal_r+0x1f60>
2008ca54:	94800044 	addi	r18,r18,1
2008ca58:	9005883a 	mov	r2,r18
2008ca5c:	90007216 	blt	r18,zero,2008cc28 <___svfprintf_internal_r+0x1f58>
2008ca60:	d8003415 	stw	zero,208(sp)
2008ca64:	003f0706 	br	2008c684 <__flash_rwdata_start+0xffff1818>
2008ca68:	da402a15 	stw	r9,168(sp)
2008ca6c:	dd402783 	ldbu	r21,158(sp)
2008ca70:	4825883a 	mov	r18,r9
2008ca74:	dcc02d15 	stw	r19,180(sp)
2008ca78:	d8003215 	stw	zero,200(sp)
2008ca7c:	d8003415 	stw	zero,208(sp)
2008ca80:	0039bf06 	br	2008b180 <__flash_rwdata_start+0xffff0314>
2008ca84:	483eb21e 	bne	r9,zero,2008c550 <__flash_rwdata_start+0xffff16e4>
2008ca88:	9013883a 	mov	r9,r18
2008ca8c:	003eb006 	br	2008c550 <__flash_rwdata_start+0xffff16e4>
2008ca90:	d9002f17 	ldw	r4,188(sp)
2008ca94:	b80b883a 	mov	r5,r23
2008ca98:	b00d883a 	mov	r6,r22
2008ca9c:	00938c40 	call	200938c4 <__ssprint_r>
2008caa0:	1039531e 	bne	r2,zero,2008aff0 <__flash_rwdata_start+0xffff0184>
2008caa4:	dc002617 	ldw	r16,152(sp)
2008caa8:	d8c02017 	ldw	r3,128(sp)
2008caac:	d8801f17 	ldw	r2,124(sp)
2008cab0:	da000404 	addi	r8,sp,16
2008cab4:	003e7106 	br	2008c47c <__flash_rwdata_start+0xffff1610>
2008cab8:	00c00b44 	movi	r3,45
2008cabc:	64a0003c 	xorhi	r18,r12,32768
2008cac0:	d8c02a05 	stb	r3,168(sp)
2008cac4:	003ea806 	br	2008c568 <__flash_rwdata_start+0xffff16fc>
2008cac8:	4f000044 	addi	fp,r9,1
2008cacc:	003ead06 	br	2008c584 <__flash_rwdata_start+0xffff1718>
2008cad0:	d8c03417 	ldw	r3,208(sp)
2008cad4:	00c0410e 	bge	zero,r3,2008cbdc <___svfprintf_internal_r+0x1f0c>
2008cad8:	04800044 	movi	r18,1
2008cadc:	dac03317 	ldw	r11,204(sp)
2008cae0:	92e5883a 	add	r18,r18,r11
2008cae4:	9005883a 	mov	r2,r18
2008cae8:	903ee60e 	bge	r18,zero,2008c684 <__flash_rwdata_start+0xffff1818>
2008caec:	0005883a 	mov	r2,zero
2008caf0:	003ee406 	br	2008c684 <__flash_rwdata_start+0xffff1818>
2008caf4:	d8c02617 	ldw	r3,152(sp)
2008caf8:	d8c03415 	stw	r3,208(sp)
2008cafc:	00c0310e 	bge	zero,r3,2008cbc4 <___svfprintf_internal_r+0x1ef4>
2008cb00:	48001f1e 	bne	r9,zero,2008cb80 <___svfprintf_internal_r+0x1eb0>
2008cb04:	8c40004c 	andi	r17,r17,1
2008cb08:	88001d1e 	bne	r17,zero,2008cb80 <___svfprintf_internal_r+0x1eb0>
2008cb0c:	1805883a 	mov	r2,r3
2008cb10:	183edb0e 	bge	r3,zero,2008c680 <__flash_rwdata_start+0xffff1814>
2008cb14:	0005883a 	mov	r2,zero
2008cb18:	003ed906 	br	2008c680 <__flash_rwdata_start+0xffff1814>
2008cb1c:	d8802117 	ldw	r2,132(sp)
2008cb20:	003ec506 	br	2008c638 <__flash_rwdata_start+0xffff17cc>
2008cb24:	d9003717 	ldw	r4,220(sp)
2008cb28:	900b883a 	mov	r5,r18
2008cb2c:	000d883a 	mov	r6,zero
2008cb30:	000f883a 	mov	r7,zero
2008cb34:	da004015 	stw	r8,256(sp)
2008cb38:	da403f15 	stw	r9,252(sp)
2008cb3c:	da803e15 	stw	r10,248(sp)
2008cb40:	00973d40 	call	200973d4 <__eqdf2>
2008cb44:	da004017 	ldw	r8,256(sp)
2008cb48:	da403f17 	ldw	r9,252(sp)
2008cb4c:	da803e17 	ldw	r10,248(sp)
2008cb50:	103f2c26 	beq	r2,zero,2008c804 <__flash_rwdata_start+0xffff1998>
2008cb54:	00800044 	movi	r2,1
2008cb58:	1707c83a 	sub	r3,r2,fp
2008cb5c:	d8c02615 	stw	r3,152(sp)
2008cb60:	003f2906 	br	2008c808 <__flash_rwdata_start+0xffff199c>
2008cb64:	db003417 	ldw	r12,208(sp)
2008cb68:	64800044 	addi	r18,r12,1
2008cb6c:	9005883a 	mov	r2,r18
2008cb70:	903ec40e 	bge	r18,zero,2008c684 <__flash_rwdata_start+0xffff1818>
2008cb74:	003fdd06 	br	2008caec <__flash_rwdata_start+0xffff1c80>
2008cb78:	0005883a 	mov	r2,zero
2008cb7c:	003f5c06 	br	2008c8f0 <__flash_rwdata_start+0xffff1a84>
2008cb80:	dac03417 	ldw	r11,208(sp)
2008cb84:	4a400044 	addi	r9,r9,1
2008cb88:	5a65883a 	add	r18,r11,r9
2008cb8c:	9005883a 	mov	r2,r18
2008cb90:	903ebc0e 	bge	r18,zero,2008c684 <__flash_rwdata_start+0xffff1818>
2008cb94:	003fd506 	br	2008caec <__flash_rwdata_start+0xffff1c80>
2008cb98:	00800034 	movhi	r2,0
2008cb9c:	1081e284 	addi	r2,r2,1930
2008cba0:	d8802b15 	stw	r2,172(sp)
2008cba4:	003d2b06 	br	2008c054 <__flash_rwdata_start+0xffff11e8>
2008cba8:	00800c04 	movi	r2,48
2008cbac:	e0c00c04 	addi	r3,fp,48
2008cbb0:	d8802345 	stb	r2,141(sp)
2008cbb4:	d8c02385 	stb	r3,142(sp)
2008cbb8:	d88023c4 	addi	r2,sp,143
2008cbbc:	dd4022c4 	addi	r21,sp,139
2008cbc0:	003f9e06 	br	2008ca3c <__flash_rwdata_start+0xffff1bd0>
2008cbc4:	4800081e 	bne	r9,zero,2008cbe8 <___svfprintf_internal_r+0x1f18>
2008cbc8:	8c40004c 	andi	r17,r17,1
2008cbcc:	8800061e 	bne	r17,zero,2008cbe8 <___svfprintf_internal_r+0x1f18>
2008cbd0:	00800044 	movi	r2,1
2008cbd4:	1025883a 	mov	r18,r2
2008cbd8:	003eaa06 	br	2008c684 <__flash_rwdata_start+0xffff1818>
2008cbdc:	04800084 	movi	r18,2
2008cbe0:	90e5c83a 	sub	r18,r18,r3
2008cbe4:	003fbd06 	br	2008cadc <__flash_rwdata_start+0xffff1c70>
2008cbe8:	4c800084 	addi	r18,r9,2
2008cbec:	9005883a 	mov	r2,r18
2008cbf0:	903ea40e 	bge	r18,zero,2008c684 <__flash_rwdata_start+0xffff1818>
2008cbf4:	003fbd06 	br	2008caec <__flash_rwdata_start+0xffff1c80>
2008cbf8:	dac02d17 	ldw	r11,180(sp)
2008cbfc:	5a400017 	ldw	r9,0(r11)
2008cc00:	5ac00104 	addi	r11,r11,4
2008cc04:	dac02d15 	stw	r11,180(sp)
2008cc08:	483e410e 	bge	r9,zero,2008c510 <__flash_rwdata_start+0xffff16a4>
2008cc0c:	027fffc4 	movi	r9,-1
2008cc10:	1c000047 	ldb	r16,1(r3)
2008cc14:	00388406 	br	2008ae28 <__flash_rwdata_start+0xfffeffbc>
2008cc18:	00800b44 	movi	r2,45
2008cc1c:	0739c83a 	sub	fp,zero,fp
2008cc20:	d8802305 	stb	r2,140(sp)
2008cc24:	003f5e06 	br	2008c9a0 <__flash_rwdata_start+0xffff1b34>
2008cc28:	0005883a 	mov	r2,zero
2008cc2c:	003f8c06 	br	2008ca60 <__flash_rwdata_start+0xffff1bf4>
2008cc30:	88a2703a 	and	r17,r17,r2
2008cc34:	883f8826 	beq	r17,zero,2008ca58 <__flash_rwdata_start+0xffff1bec>
2008cc38:	003f8606 	br	2008ca54 <__flash_rwdata_start+0xffff1be8>
2008cc3c:	d8802344 	addi	r2,sp,141
2008cc40:	003f7e06 	br	2008ca3c <__flash_rwdata_start+0xffff1bd0>
2008cc44:	d8c02617 	ldw	r3,152(sp)
2008cc48:	003f4f06 	br	2008c988 <__flash_rwdata_start+0xffff1b1c>
2008cc4c:	dac02f17 	ldw	r11,188(sp)
2008cc50:	00800304 	movi	r2,12
2008cc54:	58800015 	stw	r2,0(r11)
2008cc58:	00bfffc4 	movi	r2,-1
2008cc5c:	0038e806 	br	2008b000 <__flash_rwdata_start+0xffff0194>

2008cc60 <___vfprintf_internal_r>:
2008cc60:	deffb604 	addi	sp,sp,-296
2008cc64:	dfc04915 	stw	ra,292(sp)
2008cc68:	ddc04715 	stw	r23,284(sp)
2008cc6c:	dd804615 	stw	r22,280(sp)
2008cc70:	282f883a 	mov	r23,r5
2008cc74:	202d883a 	mov	r22,r4
2008cc78:	d9802a15 	stw	r6,168(sp)
2008cc7c:	d9c02d15 	stw	r7,180(sp)
2008cc80:	df004815 	stw	fp,288(sp)
2008cc84:	dd404515 	stw	r21,276(sp)
2008cc88:	dd004415 	stw	r20,272(sp)
2008cc8c:	dcc04315 	stw	r19,268(sp)
2008cc90:	dc804215 	stw	r18,264(sp)
2008cc94:	dc404115 	stw	r17,260(sp)
2008cc98:	dc004015 	stw	r16,256(sp)
2008cc9c:	0091b0c0 	call	20091b0c <_localeconv_r>
2008cca0:	10800017 	ldw	r2,0(r2)
2008cca4:	1009883a 	mov	r4,r2
2008cca8:	d8803515 	stw	r2,212(sp)
2008ccac:	008abd00 	call	2008abd0 <strlen>
2008ccb0:	d8803815 	stw	r2,224(sp)
2008ccb4:	b0000226 	beq	r22,zero,2008ccc0 <___vfprintf_internal_r+0x60>
2008ccb8:	b0800e17 	ldw	r2,56(r22)
2008ccbc:	1000e126 	beq	r2,zero,2008d044 <___vfprintf_internal_r+0x3e4>
2008ccc0:	b880030b 	ldhu	r2,12(r23)
2008ccc4:	10c8000c 	andi	r3,r2,8192
2008ccc8:	1800061e 	bne	r3,zero,2008cce4 <___vfprintf_internal_r+0x84>
2008cccc:	b9001917 	ldw	r4,100(r23)
2008ccd0:	00f7ffc4 	movi	r3,-8193
2008ccd4:	10880014 	ori	r2,r2,8192
2008ccd8:	20c6703a 	and	r3,r4,r3
2008ccdc:	b880030d 	sth	r2,12(r23)
2008cce0:	b8c01915 	stw	r3,100(r23)
2008cce4:	10c0020c 	andi	r3,r2,8
2008cce8:	1800a726 	beq	r3,zero,2008cf88 <___vfprintf_internal_r+0x328>
2008ccec:	b8c00417 	ldw	r3,16(r23)
2008ccf0:	1800a526 	beq	r3,zero,2008cf88 <___vfprintf_internal_r+0x328>
2008ccf4:	1080068c 	andi	r2,r2,26
2008ccf8:	00c00284 	movi	r3,10
2008ccfc:	10c0aa26 	beq	r2,r3,2008cfa8 <___vfprintf_internal_r+0x348>
2008cd00:	dac01e04 	addi	r11,sp,120
2008cd04:	db001dc4 	addi	r12,sp,119
2008cd08:	d8800404 	addi	r2,sp,16
2008cd0c:	05000034 	movhi	r20,0
2008cd10:	dac02815 	stw	r11,160(sp)
2008cd14:	5b17c83a 	sub	r11,r11,r12
2008cd18:	a501ea84 	addi	r20,r20,1962
2008cd1c:	db002915 	stw	r12,164(sp)
2008cd20:	d8801e15 	stw	r2,120(sp)
2008cd24:	d8002015 	stw	zero,128(sp)
2008cd28:	d8001f15 	stw	zero,124(sp)
2008cd2c:	d8003315 	stw	zero,204(sp)
2008cd30:	d8003715 	stw	zero,220(sp)
2008cd34:	d8003915 	stw	zero,228(sp)
2008cd38:	1011883a 	mov	r8,r2
2008cd3c:	d8003b15 	stw	zero,236(sp)
2008cd40:	d8003a15 	stw	zero,232(sp)
2008cd44:	d8002f15 	stw	zero,188(sp)
2008cd48:	dac03c15 	stw	r11,240(sp)
2008cd4c:	db002a17 	ldw	r12,168(sp)
2008cd50:	60800007 	ldb	r2,0(r12)
2008cd54:	1000be26 	beq	r2,zero,2008d050 <___vfprintf_internal_r+0x3f0>
2008cd58:	00c00944 	movi	r3,37
2008cd5c:	10c0bc26 	beq	r2,r3,2008d050 <___vfprintf_internal_r+0x3f0>
2008cd60:	6021883a 	mov	r16,r12
2008cd64:	00000106 	br	2008cd6c <___vfprintf_internal_r+0x10c>
2008cd68:	10c08426 	beq	r2,r3,2008cf7c <___vfprintf_internal_r+0x31c>
2008cd6c:	84000044 	addi	r16,r16,1
2008cd70:	80800007 	ldb	r2,0(r16)
2008cd74:	103ffc1e 	bne	r2,zero,2008cd68 <__flash_rwdata_start+0xffff1efc>
2008cd78:	dac02a17 	ldw	r11,168(sp)
2008cd7c:	82e3c83a 	sub	r17,r16,r11
2008cd80:	88000f26 	beq	r17,zero,2008cdc0 <___vfprintf_internal_r+0x160>
2008cd84:	d8c02017 	ldw	r3,128(sp)
2008cd88:	d8801f17 	ldw	r2,124(sp)
2008cd8c:	dac02a17 	ldw	r11,168(sp)
2008cd90:	1c47883a 	add	r3,r3,r17
2008cd94:	10800044 	addi	r2,r2,1
2008cd98:	d8c02015 	stw	r3,128(sp)
2008cd9c:	42c00015 	stw	r11,0(r8)
2008cda0:	44400115 	stw	r17,4(r8)
2008cda4:	d8801f15 	stw	r2,124(sp)
2008cda8:	00c001c4 	movi	r3,7
2008cdac:	18809316 	blt	r3,r2,2008cffc <___vfprintf_internal_r+0x39c>
2008cdb0:	42000204 	addi	r8,r8,8
2008cdb4:	db002f17 	ldw	r12,188(sp)
2008cdb8:	6459883a 	add	r12,r12,r17
2008cdbc:	db002f15 	stw	r12,188(sp)
2008cdc0:	80800007 	ldb	r2,0(r16)
2008cdc4:	10009426 	beq	r2,zero,2008d018 <___vfprintf_internal_r+0x3b8>
2008cdc8:	80800044 	addi	r2,r16,1
2008cdcc:	84000047 	ldb	r16,1(r16)
2008cdd0:	d8002785 	stb	zero,158(sp)
2008cdd4:	000d883a 	mov	r6,zero
2008cdd8:	027fffc4 	movi	r9,-1
2008cddc:	d8002e15 	stw	zero,184(sp)
2008cde0:	0023883a 	mov	r17,zero
2008cde4:	01001604 	movi	r4,88
2008cde8:	01400244 	movi	r5,9
2008cdec:	02800a84 	movi	r10,42
2008cdf0:	01c01b04 	movi	r7,108
2008cdf4:	10c00044 	addi	r3,r2,1
2008cdf8:	80bff804 	addi	r2,r16,-32
2008cdfc:	2082cd36 	bltu	r4,r2,2008d934 <___vfprintf_internal_r+0xcd4>
2008ce00:	100490ba 	slli	r2,r2,2
2008ce04:	02c80274 	movhi	r11,8201
2008ce08:	5af38604 	addi	r11,r11,-12776
2008ce0c:	12c5883a 	add	r2,r2,r11
2008ce10:	10800017 	ldw	r2,0(r2)
2008ce14:	1000683a 	jmp	r2
2008ce18:	2008d74c 	andi	zero,r4,9053
2008ce1c:	2008d934 	orhi	zero,r4,9060
2008ce20:	2008d934 	orhi	zero,r4,9060
2008ce24:	2008d89c 	xori	zero,r4,9058
2008ce28:	2008d934 	orhi	zero,r4,9060
2008ce2c:	2008d934 	orhi	zero,r4,9060
2008ce30:	2008d934 	orhi	zero,r4,9060
2008ce34:	2008d934 	orhi	zero,r4,9060
2008ce38:	2008d934 	orhi	zero,r4,9060
2008ce3c:	2008d934 	orhi	zero,r4,9060
2008ce40:	2008d76c 	andhi	zero,r4,9053
2008ce44:	2008d798 	cmpnei	zero,r4,9054
2008ce48:	2008d934 	orhi	zero,r4,9060
2008ce4c:	2008d058 	cmpnei	zero,r4,9025
2008ce50:	2008d068 	cmpgeui	zero,r4,9025
2008ce54:	2008d934 	orhi	zero,r4,9060
2008ce58:	2008d0a8 	cmpgeui	zero,r4,9026
2008ce5c:	2008d0b8 	rdprs	zero,r4,9026
2008ce60:	2008d0b8 	rdprs	zero,r4,9026
2008ce64:	2008d0b8 	rdprs	zero,r4,9026
2008ce68:	2008d0b8 	rdprs	zero,r4,9026
2008ce6c:	2008d0b8 	rdprs	zero,r4,9026
2008ce70:	2008d0b8 	rdprs	zero,r4,9026
2008ce74:	2008d0b8 	rdprs	zero,r4,9026
2008ce78:	2008d0b8 	rdprs	zero,r4,9026
2008ce7c:	2008d0b8 	rdprs	zero,r4,9026
2008ce80:	2008d934 	orhi	zero,r4,9060
2008ce84:	2008d934 	orhi	zero,r4,9060
2008ce88:	2008d934 	orhi	zero,r4,9060
2008ce8c:	2008d934 	orhi	zero,r4,9060
2008ce90:	2008d934 	orhi	zero,r4,9060
2008ce94:	2008d934 	orhi	zero,r4,9060
2008ce98:	2008d934 	orhi	zero,r4,9060
2008ce9c:	2008d934 	orhi	zero,r4,9060
2008cea0:	2008d934 	orhi	zero,r4,9060
2008cea4:	2008d934 	orhi	zero,r4,9060
2008cea8:	2008d0ec 	andhi	zero,r4,9027
2008ceac:	2008d55c 	xori	zero,r4,9045
2008ceb0:	2008d934 	orhi	zero,r4,9060
2008ceb4:	2008d55c 	xori	zero,r4,9045
2008ceb8:	2008d934 	orhi	zero,r4,9060
2008cebc:	2008d934 	orhi	zero,r4,9060
2008cec0:	2008d934 	orhi	zero,r4,9060
2008cec4:	2008d934 	orhi	zero,r4,9060
2008cec8:	2008d648 	cmpgei	zero,r4,9049
2008cecc:	2008d934 	orhi	zero,r4,9060
2008ced0:	2008d934 	orhi	zero,r4,9060
2008ced4:	2008d4f0 	cmpltui	zero,r4,9043
2008ced8:	2008d934 	orhi	zero,r4,9060
2008cedc:	2008d934 	orhi	zero,r4,9060
2008cee0:	2008d934 	orhi	zero,r4,9060
2008cee4:	2008d934 	orhi	zero,r4,9060
2008cee8:	2008d934 	orhi	zero,r4,9060
2008ceec:	2008d52c 	andhi	zero,r4,9044
2008cef0:	2008d934 	orhi	zero,r4,9060
2008cef4:	2008d934 	orhi	zero,r4,9060
2008cef8:	2008d6f0 	cmpltui	zero,r4,9051
2008cefc:	2008d934 	orhi	zero,r4,9060
2008cf00:	2008d934 	orhi	zero,r4,9060
2008cf04:	2008d934 	orhi	zero,r4,9060
2008cf08:	2008d934 	orhi	zero,r4,9060
2008cf0c:	2008d934 	orhi	zero,r4,9060
2008cf10:	2008d934 	orhi	zero,r4,9060
2008cf14:	2008d934 	orhi	zero,r4,9060
2008cf18:	2008d934 	orhi	zero,r4,9060
2008cf1c:	2008d934 	orhi	zero,r4,9060
2008cf20:	2008d934 	orhi	zero,r4,9060
2008cf24:	2008d7a8 	cmpgeui	zero,r4,9054
2008cf28:	2008d658 	cmpnei	zero,r4,9049
2008cf2c:	2008d55c 	xori	zero,r4,9045
2008cf30:	2008d55c 	xori	zero,r4,9045
2008cf34:	2008d55c 	xori	zero,r4,9045
2008cf38:	2008d698 	cmpnei	zero,r4,9050
2008cf3c:	2008d658 	cmpnei	zero,r4,9049
2008cf40:	2008d934 	orhi	zero,r4,9060
2008cf44:	2008d934 	orhi	zero,r4,9060
2008cf48:	2008d6a8 	cmpgeui	zero,r4,9050
2008cf4c:	2008d934 	orhi	zero,r4,9060
2008cf50:	2008d6bc 	xorhi	zero,r4,9050
2008cf54:	2008d8f8 	rdprs	zero,r4,9059
2008cf58:	2008d600 	call	22008d60 <__flash_rwdata_start+0x1f6def4>
2008cf5c:	2008d8ac 	andhi	zero,r4,9058
2008cf60:	2008d934 	orhi	zero,r4,9060
2008cf64:	2008d7e8 	cmpgeui	zero,r4,9055
2008cf68:	2008d934 	orhi	zero,r4,9060
2008cf6c:	2008d8bc 	xorhi	zero,r4,9058
2008cf70:	2008d934 	orhi	zero,r4,9060
2008cf74:	2008d934 	orhi	zero,r4,9060
2008cf78:	2008d85c 	xori	zero,r4,9057
2008cf7c:	db002a17 	ldw	r12,168(sp)
2008cf80:	8323c83a 	sub	r17,r16,r12
2008cf84:	003f7e06 	br	2008cd80 <__flash_rwdata_start+0xffff1f14>
2008cf88:	b009883a 	mov	r4,r22
2008cf8c:	b80b883a 	mov	r5,r23
2008cf90:	008edc00 	call	2008edc0 <__swsetup_r>
2008cf94:	10000c1e 	bne	r2,zero,2008cfc8 <___vfprintf_internal_r+0x368>
2008cf98:	b880030b 	ldhu	r2,12(r23)
2008cf9c:	00c00284 	movi	r3,10
2008cfa0:	1080068c 	andi	r2,r2,26
2008cfa4:	10ff561e 	bne	r2,r3,2008cd00 <__flash_rwdata_start+0xffff1e94>
2008cfa8:	b880038f 	ldh	r2,14(r23)
2008cfac:	103f5416 	blt	r2,zero,2008cd00 <__flash_rwdata_start+0xffff1e94>
2008cfb0:	d9802a17 	ldw	r6,168(sp)
2008cfb4:	d9c02d17 	ldw	r7,180(sp)
2008cfb8:	b009883a 	mov	r4,r22
2008cfbc:	b80b883a 	mov	r5,r23
2008cfc0:	008ebd40 	call	2008ebd4 <__sbprintf>
2008cfc4:	00000106 	br	2008cfcc <___vfprintf_internal_r+0x36c>
2008cfc8:	00bfffc4 	movi	r2,-1
2008cfcc:	dfc04917 	ldw	ra,292(sp)
2008cfd0:	df004817 	ldw	fp,288(sp)
2008cfd4:	ddc04717 	ldw	r23,284(sp)
2008cfd8:	dd804617 	ldw	r22,280(sp)
2008cfdc:	dd404517 	ldw	r21,276(sp)
2008cfe0:	dd004417 	ldw	r20,272(sp)
2008cfe4:	dcc04317 	ldw	r19,268(sp)
2008cfe8:	dc804217 	ldw	r18,264(sp)
2008cfec:	dc404117 	ldw	r17,260(sp)
2008cff0:	dc004017 	ldw	r16,256(sp)
2008cff4:	dec04a04 	addi	sp,sp,296
2008cff8:	f800283a 	ret
2008cffc:	b009883a 	mov	r4,r22
2008d000:	b80b883a 	mov	r5,r23
2008d004:	d9801e04 	addi	r6,sp,120
2008d008:	0094bc40 	call	20094bc4 <__sprint_r>
2008d00c:	1000081e 	bne	r2,zero,2008d030 <___vfprintf_internal_r+0x3d0>
2008d010:	da000404 	addi	r8,sp,16
2008d014:	003f6706 	br	2008cdb4 <__flash_rwdata_start+0xffff1f48>
2008d018:	d8802017 	ldw	r2,128(sp)
2008d01c:	10000426 	beq	r2,zero,2008d030 <___vfprintf_internal_r+0x3d0>
2008d020:	b009883a 	mov	r4,r22
2008d024:	b80b883a 	mov	r5,r23
2008d028:	d9801e04 	addi	r6,sp,120
2008d02c:	0094bc40 	call	20094bc4 <__sprint_r>
2008d030:	b880030b 	ldhu	r2,12(r23)
2008d034:	1080100c 	andi	r2,r2,64
2008d038:	103fe31e 	bne	r2,zero,2008cfc8 <__flash_rwdata_start+0xffff215c>
2008d03c:	d8802f17 	ldw	r2,188(sp)
2008d040:	003fe206 	br	2008cfcc <__flash_rwdata_start+0xffff2160>
2008d044:	b009883a 	mov	r4,r22
2008d048:	0090fb40 	call	20090fb4 <__sinit>
2008d04c:	003f1c06 	br	2008ccc0 <__flash_rwdata_start+0xffff1e54>
2008d050:	dc002a17 	ldw	r16,168(sp)
2008d054:	003f5a06 	br	2008cdc0 <__flash_rwdata_start+0xffff1f54>
2008d058:	1805883a 	mov	r2,r3
2008d05c:	8c400114 	ori	r17,r17,4
2008d060:	1c000007 	ldb	r16,0(r3)
2008d064:	003f6306 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d068:	1c000007 	ldb	r16,0(r3)
2008d06c:	18800044 	addi	r2,r3,1
2008d070:	8286ad26 	beq	r16,r10,2008eb28 <___vfprintf_internal_r+0x1ec8>
2008d074:	82fff404 	addi	r11,r16,-48
2008d078:	1007883a 	mov	r3,r2
2008d07c:	0013883a 	mov	r9,zero
2008d080:	2aff5d36 	bltu	r5,r11,2008cdf8 <__flash_rwdata_start+0xffff1f8c>
2008d084:	1c000007 	ldb	r16,0(r3)
2008d088:	4a4002a4 	muli	r9,r9,10
2008d08c:	18c00044 	addi	r3,r3,1
2008d090:	5a53883a 	add	r9,r11,r9
2008d094:	82fff404 	addi	r11,r16,-48
2008d098:	2afffa2e 	bgeu	r5,r11,2008d084 <__flash_rwdata_start+0xffff2218>
2008d09c:	483f560e 	bge	r9,zero,2008cdf8 <__flash_rwdata_start+0xffff1f8c>
2008d0a0:	027fffc4 	movi	r9,-1
2008d0a4:	003f5406 	br	2008cdf8 <__flash_rwdata_start+0xffff1f8c>
2008d0a8:	8c402014 	ori	r17,r17,128
2008d0ac:	1805883a 	mov	r2,r3
2008d0b0:	1c000007 	ldb	r16,0(r3)
2008d0b4:	003f4f06 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d0b8:	1805883a 	mov	r2,r3
2008d0bc:	d8002e15 	stw	zero,184(sp)
2008d0c0:	82fff404 	addi	r11,r16,-48
2008d0c4:	0019883a 	mov	r12,zero
2008d0c8:	14000007 	ldb	r16,0(r2)
2008d0cc:	630002a4 	muli	r12,r12,10
2008d0d0:	18c00044 	addi	r3,r3,1
2008d0d4:	1805883a 	mov	r2,r3
2008d0d8:	62d9883a 	add	r12,r12,r11
2008d0dc:	82fff404 	addi	r11,r16,-48
2008d0e0:	2afff92e 	bgeu	r5,r11,2008d0c8 <__flash_rwdata_start+0xffff225c>
2008d0e4:	db002e15 	stw	r12,184(sp)
2008d0e8:	003f4306 	br	2008cdf8 <__flash_rwdata_start+0xffff1f8c>
2008d0ec:	8c400414 	ori	r17,r17,16
2008d0f0:	d8c02a15 	stw	r3,168(sp)
2008d0f4:	d9802785 	stb	r6,158(sp)
2008d0f8:	8880080c 	andi	r2,r17,32
2008d0fc:	d8c02d17 	ldw	r3,180(sp)
2008d100:	10015a26 	beq	r2,zero,2008d66c <___vfprintf_internal_r+0xa0c>
2008d104:	db002d17 	ldw	r12,180(sp)
2008d108:	18800117 	ldw	r2,4(r3)
2008d10c:	1cc00017 	ldw	r19,0(r3)
2008d110:	63000204 	addi	r12,r12,8
2008d114:	db002d15 	stw	r12,180(sp)
2008d118:	1039883a 	mov	fp,r2
2008d11c:	10044516 	blt	r2,zero,2008e234 <___vfprintf_internal_r+0x15d4>
2008d120:	dd402783 	ldbu	r21,158(sp)
2008d124:	da403215 	stw	r9,200(sp)
2008d128:	00800044 	movi	r2,1
2008d12c:	9f06b03a 	or	r3,r19,fp
2008d130:	48000216 	blt	r9,zero,2008d13c <___vfprintf_internal_r+0x4dc>
2008d134:	013fdfc4 	movi	r4,-129
2008d138:	8922703a 	and	r17,r17,r4
2008d13c:	1802071e 	bne	r3,zero,2008d95c <___vfprintf_internal_r+0xcfc>
2008d140:	4802fa26 	beq	r9,zero,2008dd2c <___vfprintf_internal_r+0x10cc>
2008d144:	10803fcc 	andi	r2,r2,255
2008d148:	00c00044 	movi	r3,1
2008d14c:	10c22926 	beq	r2,r3,2008d9f4 <___vfprintf_internal_r+0xd94>
2008d150:	00c00084 	movi	r3,2
2008d154:	10c31726 	beq	r2,r3,2008ddb4 <___vfprintf_internal_r+0x1154>
2008d158:	d8c01e04 	addi	r3,sp,120
2008d15c:	9808d0fa 	srli	r4,r19,3
2008d160:	e00a977a 	slli	r5,fp,29
2008d164:	e038d0fa 	srli	fp,fp,3
2008d168:	9cc001cc 	andi	r19,r19,7
2008d16c:	98800c04 	addi	r2,r19,48
2008d170:	18ffffc4 	addi	r3,r3,-1
2008d174:	2926b03a 	or	r19,r5,r4
2008d178:	18800005 	stb	r2,0(r3)
2008d17c:	9f08b03a 	or	r4,r19,fp
2008d180:	203ff61e 	bne	r4,zero,2008d15c <__flash_rwdata_start+0xffff22f0>
2008d184:	8900004c 	andi	r4,r17,1
2008d188:	d8c03115 	stw	r3,196(sp)
2008d18c:	2003931e 	bne	r4,zero,2008dfdc <___vfprintf_internal_r+0x137c>
2008d190:	dac02817 	ldw	r11,160(sp)
2008d194:	58e5c83a 	sub	r18,r11,r3
2008d198:	9005883a 	mov	r2,r18
2008d19c:	9240010e 	bge	r18,r9,2008d1a4 <___vfprintf_internal_r+0x544>
2008d1a0:	4805883a 	mov	r2,r9
2008d1a4:	d8802b15 	stw	r2,172(sp)
2008d1a8:	d8003415 	stw	zero,208(sp)
2008d1ac:	a8803fcc 	andi	r2,r21,255
2008d1b0:	1080201c 	xori	r2,r2,128
2008d1b4:	10bfe004 	addi	r2,r2,-128
2008d1b8:	10000326 	beq	r2,zero,2008d1c8 <___vfprintf_internal_r+0x568>
2008d1bc:	db002b17 	ldw	r12,172(sp)
2008d1c0:	63000044 	addi	r12,r12,1
2008d1c4:	db002b15 	stw	r12,172(sp)
2008d1c8:	88c0008c 	andi	r3,r17,2
2008d1cc:	d8c02c15 	stw	r3,176(sp)
2008d1d0:	18000326 	beq	r3,zero,2008d1e0 <___vfprintf_internal_r+0x580>
2008d1d4:	dac02b17 	ldw	r11,172(sp)
2008d1d8:	5ac00084 	addi	r11,r11,2
2008d1dc:	dac02b15 	stw	r11,172(sp)
2008d1e0:	8b00210c 	andi	r12,r17,132
2008d1e4:	db003015 	stw	r12,192(sp)
2008d1e8:	6001da1e 	bne	r12,zero,2008d954 <___vfprintf_internal_r+0xcf4>
2008d1ec:	dac02e17 	ldw	r11,184(sp)
2008d1f0:	db002b17 	ldw	r12,172(sp)
2008d1f4:	5b39c83a 	sub	fp,r11,r12
2008d1f8:	0701d60e 	bge	zero,fp,2008d954 <___vfprintf_internal_r+0xcf4>
2008d1fc:	02400404 	movi	r9,16
2008d200:	d8c02017 	ldw	r3,128(sp)
2008d204:	d8801f17 	ldw	r2,124(sp)
2008d208:	4f053c0e 	bge	r9,fp,2008e6fc <___vfprintf_internal_r+0x1a9c>
2008d20c:	01400034 	movhi	r5,0
2008d210:	2941ee84 	addi	r5,r5,1978
2008d214:	d9403615 	stw	r5,216(sp)
2008d218:	482b883a 	mov	r21,r9
2008d21c:	04c001c4 	movi	r19,7
2008d220:	00000306 	br	2008d230 <___vfprintf_internal_r+0x5d0>
2008d224:	e73ffc04 	addi	fp,fp,-16
2008d228:	42000204 	addi	r8,r8,8
2008d22c:	af00130e 	bge	r21,fp,2008d27c <___vfprintf_internal_r+0x61c>
2008d230:	02c00034 	movhi	r11,0
2008d234:	18c00404 	addi	r3,r3,16
2008d238:	10800044 	addi	r2,r2,1
2008d23c:	5ac1ee84 	addi	r11,r11,1978
2008d240:	42c00015 	stw	r11,0(r8)
2008d244:	45400115 	stw	r21,4(r8)
2008d248:	d8c02015 	stw	r3,128(sp)
2008d24c:	d8801f15 	stw	r2,124(sp)
2008d250:	98bff40e 	bge	r19,r2,2008d224 <__flash_rwdata_start+0xffff23b8>
2008d254:	b009883a 	mov	r4,r22
2008d258:	b80b883a 	mov	r5,r23
2008d25c:	d9801e04 	addi	r6,sp,120
2008d260:	0094bc40 	call	20094bc4 <__sprint_r>
2008d264:	103f721e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008d268:	e73ffc04 	addi	fp,fp,-16
2008d26c:	d8c02017 	ldw	r3,128(sp)
2008d270:	d8801f17 	ldw	r2,124(sp)
2008d274:	da000404 	addi	r8,sp,16
2008d278:	af3fed16 	blt	r21,fp,2008d230 <__flash_rwdata_start+0xffff23c4>
2008d27c:	db003617 	ldw	r12,216(sp)
2008d280:	e0c7883a 	add	r3,fp,r3
2008d284:	10800044 	addi	r2,r2,1
2008d288:	43000015 	stw	r12,0(r8)
2008d28c:	47000115 	stw	fp,4(r8)
2008d290:	d8c02015 	stw	r3,128(sp)
2008d294:	d8801f15 	stw	r2,124(sp)
2008d298:	010001c4 	movi	r4,7
2008d29c:	20830e16 	blt	r4,r2,2008ded8 <___vfprintf_internal_r+0x1278>
2008d2a0:	d8802787 	ldb	r2,158(sp)
2008d2a4:	42000204 	addi	r8,r8,8
2008d2a8:	10000c26 	beq	r2,zero,2008d2dc <___vfprintf_internal_r+0x67c>
2008d2ac:	d8801f17 	ldw	r2,124(sp)
2008d2b0:	d9002784 	addi	r4,sp,158
2008d2b4:	18c00044 	addi	r3,r3,1
2008d2b8:	10800044 	addi	r2,r2,1
2008d2bc:	41000015 	stw	r4,0(r8)
2008d2c0:	01000044 	movi	r4,1
2008d2c4:	41000115 	stw	r4,4(r8)
2008d2c8:	d8c02015 	stw	r3,128(sp)
2008d2cc:	d8801f15 	stw	r2,124(sp)
2008d2d0:	010001c4 	movi	r4,7
2008d2d4:	2082a716 	blt	r4,r2,2008dd74 <___vfprintf_internal_r+0x1114>
2008d2d8:	42000204 	addi	r8,r8,8
2008d2dc:	dac02c17 	ldw	r11,176(sp)
2008d2e0:	58000c26 	beq	r11,zero,2008d314 <___vfprintf_internal_r+0x6b4>
2008d2e4:	d8801f17 	ldw	r2,124(sp)
2008d2e8:	d9002704 	addi	r4,sp,156
2008d2ec:	18c00084 	addi	r3,r3,2
2008d2f0:	10800044 	addi	r2,r2,1
2008d2f4:	41000015 	stw	r4,0(r8)
2008d2f8:	01000084 	movi	r4,2
2008d2fc:	41000115 	stw	r4,4(r8)
2008d300:	d8c02015 	stw	r3,128(sp)
2008d304:	d8801f15 	stw	r2,124(sp)
2008d308:	010001c4 	movi	r4,7
2008d30c:	2082a116 	blt	r4,r2,2008dd94 <___vfprintf_internal_r+0x1134>
2008d310:	42000204 	addi	r8,r8,8
2008d314:	db003017 	ldw	r12,192(sp)
2008d318:	00802004 	movi	r2,128
2008d31c:	60820326 	beq	r12,r2,2008db2c <___vfprintf_internal_r+0xecc>
2008d320:	db003217 	ldw	r12,200(sp)
2008d324:	64abc83a 	sub	r21,r12,r18
2008d328:	0540260e 	bge	zero,r21,2008d3c4 <___vfprintf_internal_r+0x764>
2008d32c:	07000404 	movi	fp,16
2008d330:	d8801f17 	ldw	r2,124(sp)
2008d334:	e544570e 	bge	fp,r21,2008e494 <___vfprintf_internal_r+0x1834>
2008d338:	01400034 	movhi	r5,0
2008d33c:	2941ea84 	addi	r5,r5,1962
2008d340:	d9402c15 	stw	r5,176(sp)
2008d344:	04c001c4 	movi	r19,7
2008d348:	00000306 	br	2008d358 <___vfprintf_internal_r+0x6f8>
2008d34c:	ad7ffc04 	addi	r21,r21,-16
2008d350:	42000204 	addi	r8,r8,8
2008d354:	e540110e 	bge	fp,r21,2008d39c <___vfprintf_internal_r+0x73c>
2008d358:	18c00404 	addi	r3,r3,16
2008d35c:	10800044 	addi	r2,r2,1
2008d360:	45000015 	stw	r20,0(r8)
2008d364:	47000115 	stw	fp,4(r8)
2008d368:	d8c02015 	stw	r3,128(sp)
2008d36c:	d8801f15 	stw	r2,124(sp)
2008d370:	98bff60e 	bge	r19,r2,2008d34c <__flash_rwdata_start+0xffff24e0>
2008d374:	b009883a 	mov	r4,r22
2008d378:	b80b883a 	mov	r5,r23
2008d37c:	d9801e04 	addi	r6,sp,120
2008d380:	0094bc40 	call	20094bc4 <__sprint_r>
2008d384:	103f2a1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008d388:	ad7ffc04 	addi	r21,r21,-16
2008d38c:	d8c02017 	ldw	r3,128(sp)
2008d390:	d8801f17 	ldw	r2,124(sp)
2008d394:	da000404 	addi	r8,sp,16
2008d398:	e57fef16 	blt	fp,r21,2008d358 <__flash_rwdata_start+0xffff24ec>
2008d39c:	dac02c17 	ldw	r11,176(sp)
2008d3a0:	1d47883a 	add	r3,r3,r21
2008d3a4:	10800044 	addi	r2,r2,1
2008d3a8:	42c00015 	stw	r11,0(r8)
2008d3ac:	45400115 	stw	r21,4(r8)
2008d3b0:	d8c02015 	stw	r3,128(sp)
2008d3b4:	d8801f15 	stw	r2,124(sp)
2008d3b8:	010001c4 	movi	r4,7
2008d3bc:	20826516 	blt	r4,r2,2008dd54 <___vfprintf_internal_r+0x10f4>
2008d3c0:	42000204 	addi	r8,r8,8
2008d3c4:	8880400c 	andi	r2,r17,256
2008d3c8:	1001901e 	bne	r2,zero,2008da0c <___vfprintf_internal_r+0xdac>
2008d3cc:	d8801f17 	ldw	r2,124(sp)
2008d3d0:	db003117 	ldw	r12,196(sp)
2008d3d4:	1c87883a 	add	r3,r3,r18
2008d3d8:	10800044 	addi	r2,r2,1
2008d3dc:	43000015 	stw	r12,0(r8)
2008d3e0:	44800115 	stw	r18,4(r8)
2008d3e4:	d8c02015 	stw	r3,128(sp)
2008d3e8:	d8801f15 	stw	r2,124(sp)
2008d3ec:	010001c4 	movi	r4,7
2008d3f0:	20824016 	blt	r4,r2,2008dcf4 <___vfprintf_internal_r+0x1094>
2008d3f4:	42000204 	addi	r8,r8,8
2008d3f8:	8c40010c 	andi	r17,r17,4
2008d3fc:	88003126 	beq	r17,zero,2008d4c4 <___vfprintf_internal_r+0x864>
2008d400:	db002e17 	ldw	r12,184(sp)
2008d404:	dac02b17 	ldw	r11,172(sp)
2008d408:	62e1c83a 	sub	r16,r12,r11
2008d40c:	04002d0e 	bge	zero,r16,2008d4c4 <___vfprintf_internal_r+0x864>
2008d410:	04400404 	movi	r17,16
2008d414:	d8801f17 	ldw	r2,124(sp)
2008d418:	8c05150e 	bge	r17,r16,2008e870 <___vfprintf_internal_r+0x1c10>
2008d41c:	01000034 	movhi	r4,0
2008d420:	2101ee84 	addi	r4,r4,1978
2008d424:	d9003615 	stw	r4,216(sp)
2008d428:	048001c4 	movi	r18,7
2008d42c:	00000306 	br	2008d43c <___vfprintf_internal_r+0x7dc>
2008d430:	843ffc04 	addi	r16,r16,-16
2008d434:	42000204 	addi	r8,r8,8
2008d438:	8c00130e 	bge	r17,r16,2008d488 <___vfprintf_internal_r+0x828>
2008d43c:	01400034 	movhi	r5,0
2008d440:	18c00404 	addi	r3,r3,16
2008d444:	10800044 	addi	r2,r2,1
2008d448:	2941ee84 	addi	r5,r5,1978
2008d44c:	41400015 	stw	r5,0(r8)
2008d450:	44400115 	stw	r17,4(r8)
2008d454:	d8c02015 	stw	r3,128(sp)
2008d458:	d8801f15 	stw	r2,124(sp)
2008d45c:	90bff40e 	bge	r18,r2,2008d430 <__flash_rwdata_start+0xffff25c4>
2008d460:	b009883a 	mov	r4,r22
2008d464:	b80b883a 	mov	r5,r23
2008d468:	d9801e04 	addi	r6,sp,120
2008d46c:	0094bc40 	call	20094bc4 <__sprint_r>
2008d470:	103eef1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008d474:	843ffc04 	addi	r16,r16,-16
2008d478:	d8c02017 	ldw	r3,128(sp)
2008d47c:	d8801f17 	ldw	r2,124(sp)
2008d480:	da000404 	addi	r8,sp,16
2008d484:	8c3fed16 	blt	r17,r16,2008d43c <__flash_rwdata_start+0xffff25d0>
2008d488:	dac03617 	ldw	r11,216(sp)
2008d48c:	1c07883a 	add	r3,r3,r16
2008d490:	10800044 	addi	r2,r2,1
2008d494:	42c00015 	stw	r11,0(r8)
2008d498:	44000115 	stw	r16,4(r8)
2008d49c:	d8c02015 	stw	r3,128(sp)
2008d4a0:	d8801f15 	stw	r2,124(sp)
2008d4a4:	010001c4 	movi	r4,7
2008d4a8:	2080060e 	bge	r4,r2,2008d4c4 <___vfprintf_internal_r+0x864>
2008d4ac:	b009883a 	mov	r4,r22
2008d4b0:	b80b883a 	mov	r5,r23
2008d4b4:	d9801e04 	addi	r6,sp,120
2008d4b8:	0094bc40 	call	20094bc4 <__sprint_r>
2008d4bc:	103edc1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008d4c0:	d8c02017 	ldw	r3,128(sp)
2008d4c4:	d8802b17 	ldw	r2,172(sp)
2008d4c8:	db002e17 	ldw	r12,184(sp)
2008d4cc:	1300010e 	bge	r2,r12,2008d4d4 <___vfprintf_internal_r+0x874>
2008d4d0:	6005883a 	mov	r2,r12
2008d4d4:	dac02f17 	ldw	r11,188(sp)
2008d4d8:	5897883a 	add	r11,r11,r2
2008d4dc:	dac02f15 	stw	r11,188(sp)
2008d4e0:	18020c1e 	bne	r3,zero,2008dd14 <___vfprintf_internal_r+0x10b4>
2008d4e4:	d8001f15 	stw	zero,124(sp)
2008d4e8:	da000404 	addi	r8,sp,16
2008d4ec:	003e1706 	br	2008cd4c <__flash_rwdata_start+0xffff1ee0>
2008d4f0:	8c400414 	ori	r17,r17,16
2008d4f4:	d8c02a15 	stw	r3,168(sp)
2008d4f8:	8880080c 	andi	r2,r17,32
2008d4fc:	10010126 	beq	r2,zero,2008d904 <___vfprintf_internal_r+0xca4>
2008d500:	db002d17 	ldw	r12,180(sp)
2008d504:	0005883a 	mov	r2,zero
2008d508:	64c00017 	ldw	r19,0(r12)
2008d50c:	67000117 	ldw	fp,4(r12)
2008d510:	63000204 	addi	r12,r12,8
2008d514:	db002d15 	stw	r12,180(sp)
2008d518:	9f06b03a 	or	r3,r19,fp
2008d51c:	d8002785 	stb	zero,158(sp)
2008d520:	da403215 	stw	r9,200(sp)
2008d524:	002b883a 	mov	r21,zero
2008d528:	003f0106 	br	2008d130 <__flash_rwdata_start+0xffff22c4>
2008d52c:	8c400414 	ori	r17,r17,16
2008d530:	d8c02a15 	stw	r3,168(sp)
2008d534:	8880080c 	andi	r2,r17,32
2008d538:	1000e326 	beq	r2,zero,2008d8c8 <___vfprintf_internal_r+0xc68>
2008d53c:	dac02d17 	ldw	r11,180(sp)
2008d540:	00800044 	movi	r2,1
2008d544:	5cc00017 	ldw	r19,0(r11)
2008d548:	5f000117 	ldw	fp,4(r11)
2008d54c:	5ac00204 	addi	r11,r11,8
2008d550:	dac02d15 	stw	r11,180(sp)
2008d554:	9f06b03a 	or	r3,r19,fp
2008d558:	003ff006 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008d55c:	db002d17 	ldw	r12,180(sp)
2008d560:	dac02d17 	ldw	r11,180(sp)
2008d564:	d8c02a15 	stw	r3,168(sp)
2008d568:	63000017 	ldw	r12,0(r12)
2008d56c:	5ac00117 	ldw	r11,4(r11)
2008d570:	d9802785 	stb	r6,158(sp)
2008d574:	6009883a 	mov	r4,r12
2008d578:	580b883a 	mov	r5,r11
2008d57c:	db003715 	stw	r12,220(sp)
2008d580:	da003f15 	stw	r8,252(sp)
2008d584:	da403e15 	stw	r9,248(sp)
2008d588:	dac03915 	stw	r11,228(sp)
2008d58c:	00935b00 	call	200935b0 <__fpclassifyd>
2008d590:	db002d17 	ldw	r12,180(sp)
2008d594:	04800044 	movi	r18,1
2008d598:	da003f17 	ldw	r8,252(sp)
2008d59c:	64c00204 	addi	r19,r12,8
2008d5a0:	da403e17 	ldw	r9,248(sp)
2008d5a4:	d9003717 	ldw	r4,220(sp)
2008d5a8:	d9403917 	ldw	r5,228(sp)
2008d5ac:	14832b1e 	bne	r2,r18,2008e25c <___vfprintf_internal_r+0x15fc>
2008d5b0:	000d883a 	mov	r6,zero
2008d5b4:	000f883a 	mov	r7,zero
2008d5b8:	00975380 	call	20097538 <__ledf2>
2008d5bc:	da003f17 	ldw	r8,252(sp)
2008d5c0:	1004b716 	blt	r2,zero,2008e8a0 <___vfprintf_internal_r+0x1c40>
2008d5c4:	dd402783 	ldbu	r21,158(sp)
2008d5c8:	008011c4 	movi	r2,71
2008d5cc:	14040e0e 	bge	r2,r16,2008e608 <___vfprintf_internal_r+0x19a8>
2008d5d0:	00c00034 	movhi	r3,0
2008d5d4:	18c1d304 	addi	r3,r3,1868
2008d5d8:	d8c03115 	stw	r3,196(sp)
2008d5dc:	02c000c4 	movi	r11,3
2008d5e0:	00bfdfc4 	movi	r2,-129
2008d5e4:	dac02b15 	stw	r11,172(sp)
2008d5e8:	88a2703a 	and	r17,r17,r2
2008d5ec:	dcc02d15 	stw	r19,180(sp)
2008d5f0:	5825883a 	mov	r18,r11
2008d5f4:	d8003215 	stw	zero,200(sp)
2008d5f8:	d8003415 	stw	zero,208(sp)
2008d5fc:	003eeb06 	br	2008d1ac <__flash_rwdata_start+0xffff2340>
2008d600:	db002d17 	ldw	r12,180(sp)
2008d604:	00800c04 	movi	r2,48
2008d608:	d8802705 	stb	r2,156(sp)
2008d60c:	64c00017 	ldw	r19,0(r12)
2008d610:	00801e04 	movi	r2,120
2008d614:	d8802745 	stb	r2,157(sp)
2008d618:	00800034 	movhi	r2,0
2008d61c:	1081db04 	addi	r2,r2,1900
2008d620:	63000104 	addi	r12,r12,4
2008d624:	d8c02a15 	stw	r3,168(sp)
2008d628:	d8803b15 	stw	r2,236(sp)
2008d62c:	0039883a 	mov	fp,zero
2008d630:	8c400094 	ori	r17,r17,2
2008d634:	db002d15 	stw	r12,180(sp)
2008d638:	00800084 	movi	r2,2
2008d63c:	04001e04 	movi	r16,120
2008d640:	9807883a 	mov	r3,r19
2008d644:	003fb506 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008d648:	8c400214 	ori	r17,r17,8
2008d64c:	1805883a 	mov	r2,r3
2008d650:	1c000007 	ldb	r16,0(r3)
2008d654:	003de706 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d658:	d8c02a15 	stw	r3,168(sp)
2008d65c:	d9802785 	stb	r6,158(sp)
2008d660:	8880080c 	andi	r2,r17,32
2008d664:	d8c02d17 	ldw	r3,180(sp)
2008d668:	103ea61e 	bne	r2,zero,2008d104 <__flash_rwdata_start+0xffff2298>
2008d66c:	8880040c 	andi	r2,r17,16
2008d670:	1002221e 	bne	r2,zero,2008defc <___vfprintf_internal_r+0x129c>
2008d674:	8880100c 	andi	r2,r17,64
2008d678:	10022026 	beq	r2,zero,2008defc <___vfprintf_internal_r+0x129c>
2008d67c:	1cc0000f 	ldh	r19,0(r3)
2008d680:	db002d17 	ldw	r12,180(sp)
2008d684:	9839d7fa 	srai	fp,r19,31
2008d688:	63000104 	addi	r12,r12,4
2008d68c:	db002d15 	stw	r12,180(sp)
2008d690:	e005883a 	mov	r2,fp
2008d694:	003ea106 	br	2008d11c <__flash_rwdata_start+0xffff22b0>
2008d698:	8c401014 	ori	r17,r17,64
2008d69c:	1805883a 	mov	r2,r3
2008d6a0:	1c000007 	ldb	r16,0(r3)
2008d6a4:	003dd306 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d6a8:	1c000007 	ldb	r16,0(r3)
2008d6ac:	81c3e926 	beq	r16,r7,2008e654 <___vfprintf_internal_r+0x19f4>
2008d6b0:	8c400414 	ori	r17,r17,16
2008d6b4:	1805883a 	mov	r2,r3
2008d6b8:	003dce06 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d6bc:	d8c02a15 	stw	r3,168(sp)
2008d6c0:	d9802785 	stb	r6,158(sp)
2008d6c4:	8880080c 	andi	r2,r17,32
2008d6c8:	10034726 	beq	r2,zero,2008e3e8 <___vfprintf_internal_r+0x1788>
2008d6cc:	db002d17 	ldw	r12,180(sp)
2008d6d0:	dac02f17 	ldw	r11,188(sp)
2008d6d4:	60800017 	ldw	r2,0(r12)
2008d6d8:	5807d7fa 	srai	r3,r11,31
2008d6dc:	63000104 	addi	r12,r12,4
2008d6e0:	db002d15 	stw	r12,180(sp)
2008d6e4:	12c00015 	stw	r11,0(r2)
2008d6e8:	10c00115 	stw	r3,4(r2)
2008d6ec:	003d9706 	br	2008cd4c <__flash_rwdata_start+0xffff1ee0>
2008d6f0:	03000034 	movhi	r12,0
2008d6f4:	6301d604 	addi	r12,r12,1880
2008d6f8:	d8c02a15 	stw	r3,168(sp)
2008d6fc:	d9802785 	stb	r6,158(sp)
2008d700:	db003b15 	stw	r12,236(sp)
2008d704:	88c0080c 	andi	r3,r17,32
2008d708:	d8802d17 	ldw	r2,180(sp)
2008d70c:	18005b26 	beq	r3,zero,2008d87c <___vfprintf_internal_r+0xc1c>
2008d710:	dac02d17 	ldw	r11,180(sp)
2008d714:	14c00017 	ldw	r19,0(r2)
2008d718:	17000117 	ldw	fp,4(r2)
2008d71c:	5ac00204 	addi	r11,r11,8
2008d720:	dac02d15 	stw	r11,180(sp)
2008d724:	8880004c 	andi	r2,r17,1
2008d728:	10022926 	beq	r2,zero,2008dfd0 <___vfprintf_internal_r+0x1370>
2008d72c:	9f06b03a 	or	r3,r19,fp
2008d730:	18032b26 	beq	r3,zero,2008e3e0 <___vfprintf_internal_r+0x1780>
2008d734:	00800c04 	movi	r2,48
2008d738:	d8802705 	stb	r2,156(sp)
2008d73c:	dc002745 	stb	r16,157(sp)
2008d740:	8c400094 	ori	r17,r17,2
2008d744:	00800084 	movi	r2,2
2008d748:	003f7406 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008d74c:	30803fcc 	andi	r2,r6,255
2008d750:	1080201c 	xori	r2,r2,128
2008d754:	10bfe004 	addi	r2,r2,-128
2008d758:	1003351e 	bne	r2,zero,2008e430 <___vfprintf_internal_r+0x17d0>
2008d75c:	1805883a 	mov	r2,r3
2008d760:	01800804 	movi	r6,32
2008d764:	1c000007 	ldb	r16,0(r3)
2008d768:	003da206 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d76c:	dac02d17 	ldw	r11,180(sp)
2008d770:	db002d17 	ldw	r12,180(sp)
2008d774:	5ac00017 	ldw	r11,0(r11)
2008d778:	dac02e15 	stw	r11,184(sp)
2008d77c:	62c00104 	addi	r11,r12,4
2008d780:	db002e17 	ldw	r12,184(sp)
2008d784:	6003ad16 	blt	r12,zero,2008e63c <___vfprintf_internal_r+0x19dc>
2008d788:	dac02d15 	stw	r11,180(sp)
2008d78c:	1805883a 	mov	r2,r3
2008d790:	1c000007 	ldb	r16,0(r3)
2008d794:	003d9706 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d798:	1805883a 	mov	r2,r3
2008d79c:	01800ac4 	movi	r6,43
2008d7a0:	1c000007 	ldb	r16,0(r3)
2008d7a4:	003d9306 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d7a8:	db002d17 	ldw	r12,180(sp)
2008d7ac:	d8c02a15 	stw	r3,168(sp)
2008d7b0:	00c00044 	movi	r3,1
2008d7b4:	60800017 	ldw	r2,0(r12)
2008d7b8:	63000104 	addi	r12,r12,4
2008d7bc:	d8c02b15 	stw	r3,172(sp)
2008d7c0:	d8002785 	stb	zero,158(sp)
2008d7c4:	d8801405 	stb	r2,80(sp)
2008d7c8:	db002d15 	stw	r12,180(sp)
2008d7cc:	dac01404 	addi	r11,sp,80
2008d7d0:	1825883a 	mov	r18,r3
2008d7d4:	d8003215 	stw	zero,200(sp)
2008d7d8:	d8003415 	stw	zero,208(sp)
2008d7dc:	dac03115 	stw	r11,196(sp)
2008d7e0:	0005883a 	mov	r2,zero
2008d7e4:	003e7806 	br	2008d1c8 <__flash_rwdata_start+0xffff235c>
2008d7e8:	dac02d17 	ldw	r11,180(sp)
2008d7ec:	db002d17 	ldw	r12,180(sp)
2008d7f0:	d8c02a15 	stw	r3,168(sp)
2008d7f4:	5ac00017 	ldw	r11,0(r11)
2008d7f8:	d8002785 	stb	zero,158(sp)
2008d7fc:	64c00104 	addi	r19,r12,4
2008d800:	dac03115 	stw	r11,196(sp)
2008d804:	5803fe26 	beq	r11,zero,2008e800 <___vfprintf_internal_r+0x1ba0>
2008d808:	d9003117 	ldw	r4,196(sp)
2008d80c:	4803b416 	blt	r9,zero,2008e6e0 <___vfprintf_internal_r+0x1a80>
2008d810:	480d883a 	mov	r6,r9
2008d814:	000b883a 	mov	r5,zero
2008d818:	da003f15 	stw	r8,252(sp)
2008d81c:	da403e15 	stw	r9,248(sp)
2008d820:	0091cf80 	call	20091cf8 <memchr>
2008d824:	da003f17 	ldw	r8,252(sp)
2008d828:	da403e17 	ldw	r9,248(sp)
2008d82c:	10043026 	beq	r2,zero,2008e8f0 <___vfprintf_internal_r+0x1c90>
2008d830:	d8c03117 	ldw	r3,196(sp)
2008d834:	10e5c83a 	sub	r18,r2,r3
2008d838:	4c836b16 	blt	r9,r18,2008e5e8 <___vfprintf_internal_r+0x1988>
2008d83c:	9005883a 	mov	r2,r18
2008d840:	9003ac16 	blt	r18,zero,2008e6f4 <___vfprintf_internal_r+0x1a94>
2008d844:	dd402783 	ldbu	r21,158(sp)
2008d848:	d8802b15 	stw	r2,172(sp)
2008d84c:	dcc02d15 	stw	r19,180(sp)
2008d850:	d8003215 	stw	zero,200(sp)
2008d854:	d8003415 	stw	zero,208(sp)
2008d858:	003e5406 	br	2008d1ac <__flash_rwdata_start+0xffff2340>
2008d85c:	00800034 	movhi	r2,0
2008d860:	1081db04 	addi	r2,r2,1900
2008d864:	d8c02a15 	stw	r3,168(sp)
2008d868:	d8803b15 	stw	r2,236(sp)
2008d86c:	d9802785 	stb	r6,158(sp)
2008d870:	88c0080c 	andi	r3,r17,32
2008d874:	d8802d17 	ldw	r2,180(sp)
2008d878:	183fa51e 	bne	r3,zero,2008d710 <__flash_rwdata_start+0xffff28a4>
2008d87c:	88c0040c 	andi	r3,r17,16
2008d880:	1802ee26 	beq	r3,zero,2008e43c <___vfprintf_internal_r+0x17dc>
2008d884:	db002d17 	ldw	r12,180(sp)
2008d888:	14c00017 	ldw	r19,0(r2)
2008d88c:	0039883a 	mov	fp,zero
2008d890:	63000104 	addi	r12,r12,4
2008d894:	db002d15 	stw	r12,180(sp)
2008d898:	003fa206 	br	2008d724 <__flash_rwdata_start+0xffff28b8>
2008d89c:	8c400054 	ori	r17,r17,1
2008d8a0:	1805883a 	mov	r2,r3
2008d8a4:	1c000007 	ldb	r16,0(r3)
2008d8a8:	003d5206 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d8ac:	8c400814 	ori	r17,r17,32
2008d8b0:	1805883a 	mov	r2,r3
2008d8b4:	1c000007 	ldb	r16,0(r3)
2008d8b8:	003d4e06 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008d8bc:	d8c02a15 	stw	r3,168(sp)
2008d8c0:	8880080c 	andi	r2,r17,32
2008d8c4:	103f1d1e 	bne	r2,zero,2008d53c <__flash_rwdata_start+0xffff26d0>
2008d8c8:	8880040c 	andi	r2,r17,16
2008d8cc:	1001b81e 	bne	r2,zero,2008dfb0 <___vfprintf_internal_r+0x1350>
2008d8d0:	8880100c 	andi	r2,r17,64
2008d8d4:	1001b626 	beq	r2,zero,2008dfb0 <___vfprintf_internal_r+0x1350>
2008d8d8:	dac02d17 	ldw	r11,180(sp)
2008d8dc:	0039883a 	mov	fp,zero
2008d8e0:	00800044 	movi	r2,1
2008d8e4:	5cc0000b 	ldhu	r19,0(r11)
2008d8e8:	5ac00104 	addi	r11,r11,4
2008d8ec:	dac02d15 	stw	r11,180(sp)
2008d8f0:	9807883a 	mov	r3,r19
2008d8f4:	003f0906 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008d8f8:	d8c02a15 	stw	r3,168(sp)
2008d8fc:	8880080c 	andi	r2,r17,32
2008d900:	103eff1e 	bne	r2,zero,2008d500 <__flash_rwdata_start+0xffff2694>
2008d904:	8880040c 	andi	r2,r17,16
2008d908:	1001a11e 	bne	r2,zero,2008df90 <___vfprintf_internal_r+0x1330>
2008d90c:	8880100c 	andi	r2,r17,64
2008d910:	10019f26 	beq	r2,zero,2008df90 <___vfprintf_internal_r+0x1330>
2008d914:	db002d17 	ldw	r12,180(sp)
2008d918:	0039883a 	mov	fp,zero
2008d91c:	0005883a 	mov	r2,zero
2008d920:	64c0000b 	ldhu	r19,0(r12)
2008d924:	63000104 	addi	r12,r12,4
2008d928:	db002d15 	stw	r12,180(sp)
2008d92c:	9807883a 	mov	r3,r19
2008d930:	003efa06 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008d934:	d8c02a15 	stw	r3,168(sp)
2008d938:	d9802785 	stb	r6,158(sp)
2008d93c:	803db626 	beq	r16,zero,2008d018 <__flash_rwdata_start+0xffff21ac>
2008d940:	00c00044 	movi	r3,1
2008d944:	d8c02b15 	stw	r3,172(sp)
2008d948:	dc001405 	stb	r16,80(sp)
2008d94c:	d8002785 	stb	zero,158(sp)
2008d950:	003f9e06 	br	2008d7cc <__flash_rwdata_start+0xffff2960>
2008d954:	d8c02017 	ldw	r3,128(sp)
2008d958:	003e5306 	br	2008d2a8 <__flash_rwdata_start+0xffff243c>
2008d95c:	10803fcc 	andi	r2,r2,255
2008d960:	00c00044 	movi	r3,1
2008d964:	10fdfa1e 	bne	r2,r3,2008d150 <__flash_rwdata_start+0xffff22e4>
2008d968:	e000021e 	bne	fp,zero,2008d974 <___vfprintf_internal_r+0xd14>
2008d96c:	00800244 	movi	r2,9
2008d970:	14c0202e 	bgeu	r2,r19,2008d9f4 <___vfprintf_internal_r+0xd94>
2008d974:	dc002b15 	stw	r16,172(sp)
2008d978:	dc402c15 	stw	r17,176(sp)
2008d97c:	9821883a 	mov	r16,r19
2008d980:	e023883a 	mov	r17,fp
2008d984:	dc801e04 	addi	r18,sp,120
2008d988:	4827883a 	mov	r19,r9
2008d98c:	4039883a 	mov	fp,r8
2008d990:	8009883a 	mov	r4,r16
2008d994:	880b883a 	mov	r5,r17
2008d998:	01800284 	movi	r6,10
2008d99c:	000f883a 	mov	r7,zero
2008d9a0:	0096e440 	call	20096e44 <__umoddi3>
2008d9a4:	10800c04 	addi	r2,r2,48
2008d9a8:	94bfffc4 	addi	r18,r18,-1
2008d9ac:	8009883a 	mov	r4,r16
2008d9b0:	880b883a 	mov	r5,r17
2008d9b4:	01800284 	movi	r6,10
2008d9b8:	000f883a 	mov	r7,zero
2008d9bc:	90800005 	stb	r2,0(r18)
2008d9c0:	00968840 	call	20096884 <__udivdi3>
2008d9c4:	1021883a 	mov	r16,r2
2008d9c8:	10c4b03a 	or	r2,r2,r3
2008d9cc:	1823883a 	mov	r17,r3
2008d9d0:	103fef1e 	bne	r2,zero,2008d990 <__flash_rwdata_start+0xffff2b24>
2008d9d4:	dac02817 	ldw	r11,160(sp)
2008d9d8:	dc803115 	stw	r18,196(sp)
2008d9dc:	dc002b17 	ldw	r16,172(sp)
2008d9e0:	dc402c17 	ldw	r17,176(sp)
2008d9e4:	9813883a 	mov	r9,r19
2008d9e8:	e011883a 	mov	r8,fp
2008d9ec:	5ca5c83a 	sub	r18,r11,r18
2008d9f0:	003de906 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008d9f4:	9cc00c04 	addi	r19,r19,48
2008d9f8:	d8c01dc4 	addi	r3,sp,119
2008d9fc:	dcc01dc5 	stb	r19,119(sp)
2008da00:	dc803c17 	ldw	r18,240(sp)
2008da04:	d8c03115 	stw	r3,196(sp)
2008da08:	003de306 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008da0c:	00801944 	movi	r2,101
2008da10:	1400710e 	bge	r2,r16,2008dbd8 <___vfprintf_internal_r+0xf78>
2008da14:	d9003717 	ldw	r4,220(sp)
2008da18:	d9403917 	ldw	r5,228(sp)
2008da1c:	000d883a 	mov	r6,zero
2008da20:	000f883a 	mov	r7,zero
2008da24:	d8c03d15 	stw	r3,244(sp)
2008da28:	da003f15 	stw	r8,252(sp)
2008da2c:	00973d40 	call	200973d4 <__eqdf2>
2008da30:	d8c03d17 	ldw	r3,244(sp)
2008da34:	da003f17 	ldw	r8,252(sp)
2008da38:	1000ef1e 	bne	r2,zero,2008ddf8 <___vfprintf_internal_r+0x1198>
2008da3c:	d8801f17 	ldw	r2,124(sp)
2008da40:	01000034 	movhi	r4,0
2008da44:	2101e204 	addi	r4,r4,1928
2008da48:	18c00044 	addi	r3,r3,1
2008da4c:	10800044 	addi	r2,r2,1
2008da50:	41000015 	stw	r4,0(r8)
2008da54:	01000044 	movi	r4,1
2008da58:	41000115 	stw	r4,4(r8)
2008da5c:	d8c02015 	stw	r3,128(sp)
2008da60:	d8801f15 	stw	r2,124(sp)
2008da64:	010001c4 	movi	r4,7
2008da68:	20828e16 	blt	r4,r2,2008e4a4 <___vfprintf_internal_r+0x1844>
2008da6c:	42000204 	addi	r8,r8,8
2008da70:	d8802617 	ldw	r2,152(sp)
2008da74:	dac03317 	ldw	r11,204(sp)
2008da78:	12c00216 	blt	r2,r11,2008da84 <___vfprintf_internal_r+0xe24>
2008da7c:	8880004c 	andi	r2,r17,1
2008da80:	103e5d26 	beq	r2,zero,2008d3f8 <__flash_rwdata_start+0xffff258c>
2008da84:	db003817 	ldw	r12,224(sp)
2008da88:	d8801f17 	ldw	r2,124(sp)
2008da8c:	dac03517 	ldw	r11,212(sp)
2008da90:	1b07883a 	add	r3,r3,r12
2008da94:	10800044 	addi	r2,r2,1
2008da98:	42c00015 	stw	r11,0(r8)
2008da9c:	43000115 	stw	r12,4(r8)
2008daa0:	d8c02015 	stw	r3,128(sp)
2008daa4:	d8801f15 	stw	r2,124(sp)
2008daa8:	010001c4 	movi	r4,7
2008daac:	2082ed16 	blt	r4,r2,2008e664 <___vfprintf_internal_r+0x1a04>
2008dab0:	42000204 	addi	r8,r8,8
2008dab4:	db003317 	ldw	r12,204(sp)
2008dab8:	643fffc4 	addi	r16,r12,-1
2008dabc:	043e4e0e 	bge	zero,r16,2008d3f8 <__flash_rwdata_start+0xffff258c>
2008dac0:	04800404 	movi	r18,16
2008dac4:	d8801f17 	ldw	r2,124(sp)
2008dac8:	94007e0e 	bge	r18,r16,2008dcc4 <___vfprintf_internal_r+0x1064>
2008dacc:	01400034 	movhi	r5,0
2008dad0:	2941ea84 	addi	r5,r5,1962
2008dad4:	d9402c15 	stw	r5,176(sp)
2008dad8:	054001c4 	movi	r21,7
2008dadc:	00000306 	br	2008daec <___vfprintf_internal_r+0xe8c>
2008dae0:	42000204 	addi	r8,r8,8
2008dae4:	843ffc04 	addi	r16,r16,-16
2008dae8:	9400790e 	bge	r18,r16,2008dcd0 <___vfprintf_internal_r+0x1070>
2008daec:	18c00404 	addi	r3,r3,16
2008daf0:	10800044 	addi	r2,r2,1
2008daf4:	45000015 	stw	r20,0(r8)
2008daf8:	44800115 	stw	r18,4(r8)
2008dafc:	d8c02015 	stw	r3,128(sp)
2008db00:	d8801f15 	stw	r2,124(sp)
2008db04:	a8bff60e 	bge	r21,r2,2008dae0 <__flash_rwdata_start+0xffff2c74>
2008db08:	b009883a 	mov	r4,r22
2008db0c:	b80b883a 	mov	r5,r23
2008db10:	d9801e04 	addi	r6,sp,120
2008db14:	0094bc40 	call	20094bc4 <__sprint_r>
2008db18:	103d451e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008db1c:	d8c02017 	ldw	r3,128(sp)
2008db20:	d8801f17 	ldw	r2,124(sp)
2008db24:	da000404 	addi	r8,sp,16
2008db28:	003fee06 	br	2008dae4 <__flash_rwdata_start+0xffff2c78>
2008db2c:	dac02e17 	ldw	r11,184(sp)
2008db30:	db002b17 	ldw	r12,172(sp)
2008db34:	5b2bc83a 	sub	r21,r11,r12
2008db38:	057df90e 	bge	zero,r21,2008d320 <__flash_rwdata_start+0xffff24b4>
2008db3c:	07000404 	movi	fp,16
2008db40:	d8801f17 	ldw	r2,124(sp)
2008db44:	e543640e 	bge	fp,r21,2008e8d8 <___vfprintf_internal_r+0x1c78>
2008db48:	01400034 	movhi	r5,0
2008db4c:	2941ea84 	addi	r5,r5,1962
2008db50:	d9402c15 	stw	r5,176(sp)
2008db54:	04c001c4 	movi	r19,7
2008db58:	00000306 	br	2008db68 <___vfprintf_internal_r+0xf08>
2008db5c:	ad7ffc04 	addi	r21,r21,-16
2008db60:	42000204 	addi	r8,r8,8
2008db64:	e540110e 	bge	fp,r21,2008dbac <___vfprintf_internal_r+0xf4c>
2008db68:	18c00404 	addi	r3,r3,16
2008db6c:	10800044 	addi	r2,r2,1
2008db70:	45000015 	stw	r20,0(r8)
2008db74:	47000115 	stw	fp,4(r8)
2008db78:	d8c02015 	stw	r3,128(sp)
2008db7c:	d8801f15 	stw	r2,124(sp)
2008db80:	98bff60e 	bge	r19,r2,2008db5c <__flash_rwdata_start+0xffff2cf0>
2008db84:	b009883a 	mov	r4,r22
2008db88:	b80b883a 	mov	r5,r23
2008db8c:	d9801e04 	addi	r6,sp,120
2008db90:	0094bc40 	call	20094bc4 <__sprint_r>
2008db94:	103d261e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008db98:	ad7ffc04 	addi	r21,r21,-16
2008db9c:	d8c02017 	ldw	r3,128(sp)
2008dba0:	d8801f17 	ldw	r2,124(sp)
2008dba4:	da000404 	addi	r8,sp,16
2008dba8:	e57fef16 	blt	fp,r21,2008db68 <__flash_rwdata_start+0xffff2cfc>
2008dbac:	dac02c17 	ldw	r11,176(sp)
2008dbb0:	1d47883a 	add	r3,r3,r21
2008dbb4:	10800044 	addi	r2,r2,1
2008dbb8:	42c00015 	stw	r11,0(r8)
2008dbbc:	45400115 	stw	r21,4(r8)
2008dbc0:	d8c02015 	stw	r3,128(sp)
2008dbc4:	d8801f15 	stw	r2,124(sp)
2008dbc8:	010001c4 	movi	r4,7
2008dbcc:	20819116 	blt	r4,r2,2008e214 <___vfprintf_internal_r+0x15b4>
2008dbd0:	42000204 	addi	r8,r8,8
2008dbd4:	003dd206 	br	2008d320 <__flash_rwdata_start+0xffff24b4>
2008dbd8:	db003317 	ldw	r12,204(sp)
2008dbdc:	00800044 	movi	r2,1
2008dbe0:	18c00044 	addi	r3,r3,1
2008dbe4:	1301530e 	bge	r2,r12,2008e134 <___vfprintf_internal_r+0x14d4>
2008dbe8:	dc001f17 	ldw	r16,124(sp)
2008dbec:	dac03117 	ldw	r11,196(sp)
2008dbf0:	00800044 	movi	r2,1
2008dbf4:	84000044 	addi	r16,r16,1
2008dbf8:	40800115 	stw	r2,4(r8)
2008dbfc:	42c00015 	stw	r11,0(r8)
2008dc00:	d8c02015 	stw	r3,128(sp)
2008dc04:	dc001f15 	stw	r16,124(sp)
2008dc08:	008001c4 	movi	r2,7
2008dc0c:	14016b16 	blt	r2,r16,2008e1bc <___vfprintf_internal_r+0x155c>
2008dc10:	42000204 	addi	r8,r8,8
2008dc14:	db003817 	ldw	r12,224(sp)
2008dc18:	dac03517 	ldw	r11,212(sp)
2008dc1c:	84000044 	addi	r16,r16,1
2008dc20:	1b07883a 	add	r3,r3,r12
2008dc24:	42c00015 	stw	r11,0(r8)
2008dc28:	43000115 	stw	r12,4(r8)
2008dc2c:	d8c02015 	stw	r3,128(sp)
2008dc30:	dc001f15 	stw	r16,124(sp)
2008dc34:	008001c4 	movi	r2,7
2008dc38:	14016916 	blt	r2,r16,2008e1e0 <___vfprintf_internal_r+0x1580>
2008dc3c:	44800204 	addi	r18,r8,8
2008dc40:	d9003717 	ldw	r4,220(sp)
2008dc44:	d9403917 	ldw	r5,228(sp)
2008dc48:	000d883a 	mov	r6,zero
2008dc4c:	000f883a 	mov	r7,zero
2008dc50:	d8c03d15 	stw	r3,244(sp)
2008dc54:	00973d40 	call	200973d4 <__eqdf2>
2008dc58:	d8c03d17 	ldw	r3,244(sp)
2008dc5c:	db003317 	ldw	r12,204(sp)
2008dc60:	1000ad26 	beq	r2,zero,2008df18 <___vfprintf_internal_r+0x12b8>
2008dc64:	dac03117 	ldw	r11,196(sp)
2008dc68:	60bfffc4 	addi	r2,r12,-1
2008dc6c:	1887883a 	add	r3,r3,r2
2008dc70:	59000044 	addi	r4,r11,1
2008dc74:	84000044 	addi	r16,r16,1
2008dc78:	90800115 	stw	r2,4(r18)
2008dc7c:	91000015 	stw	r4,0(r18)
2008dc80:	d8c02015 	stw	r3,128(sp)
2008dc84:	dc001f15 	stw	r16,124(sp)
2008dc88:	008001c4 	movi	r2,7
2008dc8c:	14014216 	blt	r2,r16,2008e198 <___vfprintf_internal_r+0x1538>
2008dc90:	94800204 	addi	r18,r18,8
2008dc94:	dac03a17 	ldw	r11,232(sp)
2008dc98:	dd4022c4 	addi	r21,sp,139
2008dc9c:	84000044 	addi	r16,r16,1
2008dca0:	1ac7883a 	add	r3,r3,r11
2008dca4:	95400015 	stw	r21,0(r18)
2008dca8:	92c00115 	stw	r11,4(r18)
2008dcac:	d8c02015 	stw	r3,128(sp)
2008dcb0:	dc001f15 	stw	r16,124(sp)
2008dcb4:	008001c4 	movi	r2,7
2008dcb8:	14000e16 	blt	r2,r16,2008dcf4 <___vfprintf_internal_r+0x1094>
2008dcbc:	92000204 	addi	r8,r18,8
2008dcc0:	003dcd06 	br	2008d3f8 <__flash_rwdata_start+0xffff258c>
2008dcc4:	01000034 	movhi	r4,0
2008dcc8:	2101ea84 	addi	r4,r4,1962
2008dccc:	d9002c15 	stw	r4,176(sp)
2008dcd0:	dac02c17 	ldw	r11,176(sp)
2008dcd4:	1c07883a 	add	r3,r3,r16
2008dcd8:	44000115 	stw	r16,4(r8)
2008dcdc:	42c00015 	stw	r11,0(r8)
2008dce0:	10800044 	addi	r2,r2,1
2008dce4:	d8c02015 	stw	r3,128(sp)
2008dce8:	d8801f15 	stw	r2,124(sp)
2008dcec:	010001c4 	movi	r4,7
2008dcf0:	20bdc00e 	bge	r4,r2,2008d3f4 <__flash_rwdata_start+0xffff2588>
2008dcf4:	b009883a 	mov	r4,r22
2008dcf8:	b80b883a 	mov	r5,r23
2008dcfc:	d9801e04 	addi	r6,sp,120
2008dd00:	0094bc40 	call	20094bc4 <__sprint_r>
2008dd04:	103cca1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008dd08:	d8c02017 	ldw	r3,128(sp)
2008dd0c:	da000404 	addi	r8,sp,16
2008dd10:	003db906 	br	2008d3f8 <__flash_rwdata_start+0xffff258c>
2008dd14:	b009883a 	mov	r4,r22
2008dd18:	b80b883a 	mov	r5,r23
2008dd1c:	d9801e04 	addi	r6,sp,120
2008dd20:	0094bc40 	call	20094bc4 <__sprint_r>
2008dd24:	103def26 	beq	r2,zero,2008d4e4 <__flash_rwdata_start+0xffff2678>
2008dd28:	003cc106 	br	2008d030 <__flash_rwdata_start+0xffff21c4>
2008dd2c:	10803fcc 	andi	r2,r2,255
2008dd30:	1000651e 	bne	r2,zero,2008dec8 <___vfprintf_internal_r+0x1268>
2008dd34:	8880004c 	andi	r2,r17,1
2008dd38:	10013226 	beq	r2,zero,2008e204 <___vfprintf_internal_r+0x15a4>
2008dd3c:	00800c04 	movi	r2,48
2008dd40:	d8c01dc4 	addi	r3,sp,119
2008dd44:	d8801dc5 	stb	r2,119(sp)
2008dd48:	dc803c17 	ldw	r18,240(sp)
2008dd4c:	d8c03115 	stw	r3,196(sp)
2008dd50:	003d1106 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008dd54:	b009883a 	mov	r4,r22
2008dd58:	b80b883a 	mov	r5,r23
2008dd5c:	d9801e04 	addi	r6,sp,120
2008dd60:	0094bc40 	call	20094bc4 <__sprint_r>
2008dd64:	103cb21e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008dd68:	d8c02017 	ldw	r3,128(sp)
2008dd6c:	da000404 	addi	r8,sp,16
2008dd70:	003d9406 	br	2008d3c4 <__flash_rwdata_start+0xffff2558>
2008dd74:	b009883a 	mov	r4,r22
2008dd78:	b80b883a 	mov	r5,r23
2008dd7c:	d9801e04 	addi	r6,sp,120
2008dd80:	0094bc40 	call	20094bc4 <__sprint_r>
2008dd84:	103caa1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008dd88:	d8c02017 	ldw	r3,128(sp)
2008dd8c:	da000404 	addi	r8,sp,16
2008dd90:	003d5206 	br	2008d2dc <__flash_rwdata_start+0xffff2470>
2008dd94:	b009883a 	mov	r4,r22
2008dd98:	b80b883a 	mov	r5,r23
2008dd9c:	d9801e04 	addi	r6,sp,120
2008dda0:	0094bc40 	call	20094bc4 <__sprint_r>
2008dda4:	103ca21e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008dda8:	d8c02017 	ldw	r3,128(sp)
2008ddac:	da000404 	addi	r8,sp,16
2008ddb0:	003d5806 	br	2008d314 <__flash_rwdata_start+0xffff24a8>
2008ddb4:	d9403b17 	ldw	r5,236(sp)
2008ddb8:	d8c01e04 	addi	r3,sp,120
2008ddbc:	988003cc 	andi	r2,r19,15
2008ddc0:	e008973a 	slli	r4,fp,28
2008ddc4:	2885883a 	add	r2,r5,r2
2008ddc8:	9826d13a 	srli	r19,r19,4
2008ddcc:	10800003 	ldbu	r2,0(r2)
2008ddd0:	e038d13a 	srli	fp,fp,4
2008ddd4:	18ffffc4 	addi	r3,r3,-1
2008ddd8:	24e6b03a 	or	r19,r4,r19
2008dddc:	18800005 	stb	r2,0(r3)
2008dde0:	9f04b03a 	or	r2,r19,fp
2008dde4:	103ff51e 	bne	r2,zero,2008ddbc <__flash_rwdata_start+0xffff2f50>
2008dde8:	db002817 	ldw	r12,160(sp)
2008ddec:	d8c03115 	stw	r3,196(sp)
2008ddf0:	60e5c83a 	sub	r18,r12,r3
2008ddf4:	003ce806 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008ddf8:	dc002617 	ldw	r16,152(sp)
2008ddfc:	0401b10e 	bge	zero,r16,2008e4c4 <___vfprintf_internal_r+0x1864>
2008de00:	db003117 	ldw	r12,196(sp)
2008de04:	dac03317 	ldw	r11,204(sp)
2008de08:	62e1883a 	add	r16,r12,r11
2008de0c:	db003417 	ldw	r12,208(sp)
2008de10:	5825883a 	mov	r18,r11
2008de14:	62c0010e 	bge	r12,r11,2008de1c <___vfprintf_internal_r+0x11bc>
2008de18:	6025883a 	mov	r18,r12
2008de1c:	04800b0e 	bge	zero,r18,2008de4c <___vfprintf_internal_r+0x11ec>
2008de20:	d8801f17 	ldw	r2,124(sp)
2008de24:	dac03117 	ldw	r11,196(sp)
2008de28:	1c87883a 	add	r3,r3,r18
2008de2c:	10800044 	addi	r2,r2,1
2008de30:	42c00015 	stw	r11,0(r8)
2008de34:	44800115 	stw	r18,4(r8)
2008de38:	d8c02015 	stw	r3,128(sp)
2008de3c:	d8801f15 	stw	r2,124(sp)
2008de40:	010001c4 	movi	r4,7
2008de44:	20824f16 	blt	r4,r2,2008e784 <___vfprintf_internal_r+0x1b24>
2008de48:	42000204 	addi	r8,r8,8
2008de4c:	90024b16 	blt	r18,zero,2008e77c <___vfprintf_internal_r+0x1b1c>
2008de50:	db003417 	ldw	r12,208(sp)
2008de54:	64a5c83a 	sub	r18,r12,r18
2008de58:	0480730e 	bge	zero,r18,2008e028 <___vfprintf_internal_r+0x13c8>
2008de5c:	05400404 	movi	r21,16
2008de60:	d8801f17 	ldw	r2,124(sp)
2008de64:	ac817d0e 	bge	r21,r18,2008e45c <___vfprintf_internal_r+0x17fc>
2008de68:	01400034 	movhi	r5,0
2008de6c:	2941ea84 	addi	r5,r5,1962
2008de70:	d9402c15 	stw	r5,176(sp)
2008de74:	070001c4 	movi	fp,7
2008de78:	00000306 	br	2008de88 <___vfprintf_internal_r+0x1228>
2008de7c:	42000204 	addi	r8,r8,8
2008de80:	94bffc04 	addi	r18,r18,-16
2008de84:	ac81780e 	bge	r21,r18,2008e468 <___vfprintf_internal_r+0x1808>
2008de88:	18c00404 	addi	r3,r3,16
2008de8c:	10800044 	addi	r2,r2,1
2008de90:	45000015 	stw	r20,0(r8)
2008de94:	45400115 	stw	r21,4(r8)
2008de98:	d8c02015 	stw	r3,128(sp)
2008de9c:	d8801f15 	stw	r2,124(sp)
2008dea0:	e0bff60e 	bge	fp,r2,2008de7c <__flash_rwdata_start+0xffff3010>
2008dea4:	b009883a 	mov	r4,r22
2008dea8:	b80b883a 	mov	r5,r23
2008deac:	d9801e04 	addi	r6,sp,120
2008deb0:	0094bc40 	call	20094bc4 <__sprint_r>
2008deb4:	103c5e1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008deb8:	d8c02017 	ldw	r3,128(sp)
2008debc:	d8801f17 	ldw	r2,124(sp)
2008dec0:	da000404 	addi	r8,sp,16
2008dec4:	003fee06 	br	2008de80 <__flash_rwdata_start+0xffff3014>
2008dec8:	dac01e04 	addi	r11,sp,120
2008decc:	0025883a 	mov	r18,zero
2008ded0:	dac03115 	stw	r11,196(sp)
2008ded4:	003cb006 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008ded8:	b009883a 	mov	r4,r22
2008dedc:	b80b883a 	mov	r5,r23
2008dee0:	d9801e04 	addi	r6,sp,120
2008dee4:	0094bc40 	call	20094bc4 <__sprint_r>
2008dee8:	103c511e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008deec:	d8c02017 	ldw	r3,128(sp)
2008def0:	d8802787 	ldb	r2,158(sp)
2008def4:	da000404 	addi	r8,sp,16
2008def8:	003ceb06 	br	2008d2a8 <__flash_rwdata_start+0xffff243c>
2008defc:	1cc00017 	ldw	r19,0(r3)
2008df00:	dac02d17 	ldw	r11,180(sp)
2008df04:	9839d7fa 	srai	fp,r19,31
2008df08:	5ac00104 	addi	r11,r11,4
2008df0c:	dac02d15 	stw	r11,180(sp)
2008df10:	e005883a 	mov	r2,fp
2008df14:	003c8106 	br	2008d11c <__flash_rwdata_start+0xffff22b0>
2008df18:	657fffc4 	addi	r21,r12,-1
2008df1c:	057f5d0e 	bge	zero,r21,2008dc94 <__flash_rwdata_start+0xffff2e28>
2008df20:	07000404 	movi	fp,16
2008df24:	e540900e 	bge	fp,r21,2008e168 <___vfprintf_internal_r+0x1508>
2008df28:	01000034 	movhi	r4,0
2008df2c:	2101ea84 	addi	r4,r4,1962
2008df30:	d9002c15 	stw	r4,176(sp)
2008df34:	01c001c4 	movi	r7,7
2008df38:	00000306 	br	2008df48 <___vfprintf_internal_r+0x12e8>
2008df3c:	94800204 	addi	r18,r18,8
2008df40:	ad7ffc04 	addi	r21,r21,-16
2008df44:	e5408b0e 	bge	fp,r21,2008e174 <___vfprintf_internal_r+0x1514>
2008df48:	18c00404 	addi	r3,r3,16
2008df4c:	84000044 	addi	r16,r16,1
2008df50:	95000015 	stw	r20,0(r18)
2008df54:	97000115 	stw	fp,4(r18)
2008df58:	d8c02015 	stw	r3,128(sp)
2008df5c:	dc001f15 	stw	r16,124(sp)
2008df60:	3c3ff60e 	bge	r7,r16,2008df3c <__flash_rwdata_start+0xffff30d0>
2008df64:	b009883a 	mov	r4,r22
2008df68:	b80b883a 	mov	r5,r23
2008df6c:	d9801e04 	addi	r6,sp,120
2008df70:	d9c03d15 	stw	r7,244(sp)
2008df74:	0094bc40 	call	20094bc4 <__sprint_r>
2008df78:	d9c03d17 	ldw	r7,244(sp)
2008df7c:	103c2c1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008df80:	d8c02017 	ldw	r3,128(sp)
2008df84:	dc001f17 	ldw	r16,124(sp)
2008df88:	dc800404 	addi	r18,sp,16
2008df8c:	003fec06 	br	2008df40 <__flash_rwdata_start+0xffff30d4>
2008df90:	dac02d17 	ldw	r11,180(sp)
2008df94:	0039883a 	mov	fp,zero
2008df98:	0005883a 	mov	r2,zero
2008df9c:	5cc00017 	ldw	r19,0(r11)
2008dfa0:	5ac00104 	addi	r11,r11,4
2008dfa4:	dac02d15 	stw	r11,180(sp)
2008dfa8:	9807883a 	mov	r3,r19
2008dfac:	003d5b06 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008dfb0:	db002d17 	ldw	r12,180(sp)
2008dfb4:	0039883a 	mov	fp,zero
2008dfb8:	00800044 	movi	r2,1
2008dfbc:	64c00017 	ldw	r19,0(r12)
2008dfc0:	63000104 	addi	r12,r12,4
2008dfc4:	db002d15 	stw	r12,180(sp)
2008dfc8:	9807883a 	mov	r3,r19
2008dfcc:	003d5306 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008dfd0:	00800084 	movi	r2,2
2008dfd4:	9f06b03a 	or	r3,r19,fp
2008dfd8:	003d5006 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008dfdc:	10803fcc 	andi	r2,r2,255
2008dfe0:	1080201c 	xori	r2,r2,128
2008dfe4:	10bfe004 	addi	r2,r2,-128
2008dfe8:	01000c04 	movi	r4,48
2008dfec:	1101a526 	beq	r2,r4,2008e684 <___vfprintf_internal_r+0x1a24>
2008dff0:	dac03117 	ldw	r11,196(sp)
2008dff4:	db002817 	ldw	r12,160(sp)
2008dff8:	193fffc5 	stb	r4,-1(r3)
2008dffc:	5affffc4 	addi	r11,r11,-1
2008e000:	dac03115 	stw	r11,196(sp)
2008e004:	62e5c83a 	sub	r18,r12,r11
2008e008:	003c6306 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008e00c:	b009883a 	mov	r4,r22
2008e010:	b80b883a 	mov	r5,r23
2008e014:	d9801e04 	addi	r6,sp,120
2008e018:	0094bc40 	call	20094bc4 <__sprint_r>
2008e01c:	103c041e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e020:	d8c02017 	ldw	r3,128(sp)
2008e024:	da000404 	addi	r8,sp,16
2008e028:	db003117 	ldw	r12,196(sp)
2008e02c:	dac03417 	ldw	r11,208(sp)
2008e030:	d8802617 	ldw	r2,152(sp)
2008e034:	62e5883a 	add	r18,r12,r11
2008e038:	db003317 	ldw	r12,204(sp)
2008e03c:	13000216 	blt	r2,r12,2008e048 <___vfprintf_internal_r+0x13e8>
2008e040:	8900004c 	andi	r4,r17,1
2008e044:	20000c26 	beq	r4,zero,2008e078 <___vfprintf_internal_r+0x1418>
2008e048:	dac03817 	ldw	r11,224(sp)
2008e04c:	d9001f17 	ldw	r4,124(sp)
2008e050:	db003517 	ldw	r12,212(sp)
2008e054:	1ac7883a 	add	r3,r3,r11
2008e058:	21000044 	addi	r4,r4,1
2008e05c:	43000015 	stw	r12,0(r8)
2008e060:	42c00115 	stw	r11,4(r8)
2008e064:	d8c02015 	stw	r3,128(sp)
2008e068:	d9001f15 	stw	r4,124(sp)
2008e06c:	014001c4 	movi	r5,7
2008e070:	2901cc16 	blt	r5,r4,2008e7a4 <___vfprintf_internal_r+0x1b44>
2008e074:	42000204 	addi	r8,r8,8
2008e078:	dac03317 	ldw	r11,204(sp)
2008e07c:	8489c83a 	sub	r4,r16,r18
2008e080:	5885c83a 	sub	r2,r11,r2
2008e084:	1021883a 	mov	r16,r2
2008e088:	2080010e 	bge	r4,r2,2008e090 <___vfprintf_internal_r+0x1430>
2008e08c:	2021883a 	mov	r16,r4
2008e090:	04000a0e 	bge	zero,r16,2008e0bc <___vfprintf_internal_r+0x145c>
2008e094:	d9001f17 	ldw	r4,124(sp)
2008e098:	1c07883a 	add	r3,r3,r16
2008e09c:	44800015 	stw	r18,0(r8)
2008e0a0:	21000044 	addi	r4,r4,1
2008e0a4:	44000115 	stw	r16,4(r8)
2008e0a8:	d8c02015 	stw	r3,128(sp)
2008e0ac:	d9001f15 	stw	r4,124(sp)
2008e0b0:	014001c4 	movi	r5,7
2008e0b4:	2901e316 	blt	r5,r4,2008e844 <___vfprintf_internal_r+0x1be4>
2008e0b8:	42000204 	addi	r8,r8,8
2008e0bc:	8001df16 	blt	r16,zero,2008e83c <___vfprintf_internal_r+0x1bdc>
2008e0c0:	1421c83a 	sub	r16,r2,r16
2008e0c4:	043ccc0e 	bge	zero,r16,2008d3f8 <__flash_rwdata_start+0xffff258c>
2008e0c8:	04800404 	movi	r18,16
2008e0cc:	d8801f17 	ldw	r2,124(sp)
2008e0d0:	943efc0e 	bge	r18,r16,2008dcc4 <__flash_rwdata_start+0xffff2e58>
2008e0d4:	01400034 	movhi	r5,0
2008e0d8:	2941ea84 	addi	r5,r5,1962
2008e0dc:	d9402c15 	stw	r5,176(sp)
2008e0e0:	054001c4 	movi	r21,7
2008e0e4:	00000306 	br	2008e0f4 <___vfprintf_internal_r+0x1494>
2008e0e8:	42000204 	addi	r8,r8,8
2008e0ec:	843ffc04 	addi	r16,r16,-16
2008e0f0:	943ef70e 	bge	r18,r16,2008dcd0 <__flash_rwdata_start+0xffff2e64>
2008e0f4:	18c00404 	addi	r3,r3,16
2008e0f8:	10800044 	addi	r2,r2,1
2008e0fc:	45000015 	stw	r20,0(r8)
2008e100:	44800115 	stw	r18,4(r8)
2008e104:	d8c02015 	stw	r3,128(sp)
2008e108:	d8801f15 	stw	r2,124(sp)
2008e10c:	a8bff60e 	bge	r21,r2,2008e0e8 <__flash_rwdata_start+0xffff327c>
2008e110:	b009883a 	mov	r4,r22
2008e114:	b80b883a 	mov	r5,r23
2008e118:	d9801e04 	addi	r6,sp,120
2008e11c:	0094bc40 	call	20094bc4 <__sprint_r>
2008e120:	103bc31e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e124:	d8c02017 	ldw	r3,128(sp)
2008e128:	d8801f17 	ldw	r2,124(sp)
2008e12c:	da000404 	addi	r8,sp,16
2008e130:	003fee06 	br	2008e0ec <__flash_rwdata_start+0xffff3280>
2008e134:	8888703a 	and	r4,r17,r2
2008e138:	203eab1e 	bne	r4,zero,2008dbe8 <__flash_rwdata_start+0xffff2d7c>
2008e13c:	dc001f17 	ldw	r16,124(sp)
2008e140:	db003117 	ldw	r12,196(sp)
2008e144:	40800115 	stw	r2,4(r8)
2008e148:	84000044 	addi	r16,r16,1
2008e14c:	43000015 	stw	r12,0(r8)
2008e150:	d8c02015 	stw	r3,128(sp)
2008e154:	dc001f15 	stw	r16,124(sp)
2008e158:	008001c4 	movi	r2,7
2008e15c:	14000e16 	blt	r2,r16,2008e198 <___vfprintf_internal_r+0x1538>
2008e160:	44800204 	addi	r18,r8,8
2008e164:	003ecb06 	br	2008dc94 <__flash_rwdata_start+0xffff2e28>
2008e168:	00800034 	movhi	r2,0
2008e16c:	1081ea84 	addi	r2,r2,1962
2008e170:	d8802c15 	stw	r2,176(sp)
2008e174:	dac02c17 	ldw	r11,176(sp)
2008e178:	1d47883a 	add	r3,r3,r21
2008e17c:	84000044 	addi	r16,r16,1
2008e180:	92c00015 	stw	r11,0(r18)
2008e184:	95400115 	stw	r21,4(r18)
2008e188:	d8c02015 	stw	r3,128(sp)
2008e18c:	dc001f15 	stw	r16,124(sp)
2008e190:	008001c4 	movi	r2,7
2008e194:	143ebe0e 	bge	r2,r16,2008dc90 <__flash_rwdata_start+0xffff2e24>
2008e198:	b009883a 	mov	r4,r22
2008e19c:	b80b883a 	mov	r5,r23
2008e1a0:	d9801e04 	addi	r6,sp,120
2008e1a4:	0094bc40 	call	20094bc4 <__sprint_r>
2008e1a8:	103ba11e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e1ac:	d8c02017 	ldw	r3,128(sp)
2008e1b0:	dc001f17 	ldw	r16,124(sp)
2008e1b4:	dc800404 	addi	r18,sp,16
2008e1b8:	003eb606 	br	2008dc94 <__flash_rwdata_start+0xffff2e28>
2008e1bc:	b009883a 	mov	r4,r22
2008e1c0:	b80b883a 	mov	r5,r23
2008e1c4:	d9801e04 	addi	r6,sp,120
2008e1c8:	0094bc40 	call	20094bc4 <__sprint_r>
2008e1cc:	103b981e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e1d0:	d8c02017 	ldw	r3,128(sp)
2008e1d4:	dc001f17 	ldw	r16,124(sp)
2008e1d8:	da000404 	addi	r8,sp,16
2008e1dc:	003e8d06 	br	2008dc14 <__flash_rwdata_start+0xffff2da8>
2008e1e0:	b009883a 	mov	r4,r22
2008e1e4:	b80b883a 	mov	r5,r23
2008e1e8:	d9801e04 	addi	r6,sp,120
2008e1ec:	0094bc40 	call	20094bc4 <__sprint_r>
2008e1f0:	103b8f1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e1f4:	d8c02017 	ldw	r3,128(sp)
2008e1f8:	dc001f17 	ldw	r16,124(sp)
2008e1fc:	dc800404 	addi	r18,sp,16
2008e200:	003e8f06 	br	2008dc40 <__flash_rwdata_start+0xffff2dd4>
2008e204:	db001e04 	addi	r12,sp,120
2008e208:	0025883a 	mov	r18,zero
2008e20c:	db003115 	stw	r12,196(sp)
2008e210:	003be106 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008e214:	b009883a 	mov	r4,r22
2008e218:	b80b883a 	mov	r5,r23
2008e21c:	d9801e04 	addi	r6,sp,120
2008e220:	0094bc40 	call	20094bc4 <__sprint_r>
2008e224:	103b821e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e228:	d8c02017 	ldw	r3,128(sp)
2008e22c:	da000404 	addi	r8,sp,16
2008e230:	003c3b06 	br	2008d320 <__flash_rwdata_start+0xffff24b4>
2008e234:	04e7c83a 	sub	r19,zero,r19
2008e238:	9804c03a 	cmpne	r2,r19,zero
2008e23c:	0739c83a 	sub	fp,zero,fp
2008e240:	e0b9c83a 	sub	fp,fp,r2
2008e244:	05400b44 	movi	r21,45
2008e248:	dd402785 	stb	r21,158(sp)
2008e24c:	da403215 	stw	r9,200(sp)
2008e250:	00800044 	movi	r2,1
2008e254:	9f06b03a 	or	r3,r19,fp
2008e258:	003bb506 	br	2008d130 <__flash_rwdata_start+0xffff22c4>
2008e25c:	da003f15 	stw	r8,252(sp)
2008e260:	da403e15 	stw	r9,248(sp)
2008e264:	00935b00 	call	200935b0 <__fpclassifyd>
2008e268:	da003f17 	ldw	r8,252(sp)
2008e26c:	da403e17 	ldw	r9,248(sp)
2008e270:	1000ce26 	beq	r2,zero,2008e5ac <___vfprintf_internal_r+0x194c>
2008e274:	057ff7c4 	movi	r21,-33
2008e278:	00bfffc4 	movi	r2,-1
2008e27c:	856a703a 	and	r21,r16,r21
2008e280:	4881e826 	beq	r9,r2,2008ea24 <___vfprintf_internal_r+0x1dc4>
2008e284:	008011c4 	movi	r2,71
2008e288:	a881e326 	beq	r21,r2,2008ea18 <___vfprintf_internal_r+0x1db8>
2008e28c:	db003917 	ldw	r12,228(sp)
2008e290:	8ac04014 	ori	r11,r17,256
2008e294:	dac02d15 	stw	r11,180(sp)
2008e298:	6001ed16 	blt	r12,zero,2008ea50 <___vfprintf_internal_r+0x1df0>
2008e29c:	dc803917 	ldw	r18,228(sp)
2008e2a0:	d8002b05 	stb	zero,172(sp)
2008e2a4:	00801984 	movi	r2,102
2008e2a8:	80811826 	beq	r16,r2,2008e70c <___vfprintf_internal_r+0x1aac>
2008e2ac:	00801184 	movi	r2,70
2008e2b0:	80811626 	beq	r16,r2,2008e70c <___vfprintf_internal_r+0x1aac>
2008e2b4:	00801144 	movi	r2,69
2008e2b8:	a881e926 	beq	r21,r2,2008ea60 <___vfprintf_internal_r+0x1e00>
2008e2bc:	4839883a 	mov	fp,r9
2008e2c0:	d8802604 	addi	r2,sp,152
2008e2c4:	d8800115 	stw	r2,4(sp)
2008e2c8:	d9403717 	ldw	r5,220(sp)
2008e2cc:	d8802504 	addi	r2,sp,148
2008e2d0:	d8800215 	stw	r2,8(sp)
2008e2d4:	d8802104 	addi	r2,sp,132
2008e2d8:	df000015 	stw	fp,0(sp)
2008e2dc:	d8800315 	stw	r2,12(sp)
2008e2e0:	b009883a 	mov	r4,r22
2008e2e4:	900d883a 	mov	r6,r18
2008e2e8:	01c00084 	movi	r7,2
2008e2ec:	da003f15 	stw	r8,252(sp)
2008e2f0:	da403e15 	stw	r9,248(sp)
2008e2f4:	008f2a80 	call	2008f2a8 <_dtoa_r>
2008e2f8:	d8803115 	stw	r2,196(sp)
2008e2fc:	008019c4 	movi	r2,103
2008e300:	da003f17 	ldw	r8,252(sp)
2008e304:	da403e17 	ldw	r9,248(sp)
2008e308:	80800226 	beq	r16,r2,2008e314 <___vfprintf_internal_r+0x16b4>
2008e30c:	008011c4 	movi	r2,71
2008e310:	8081101e 	bne	r16,r2,2008e754 <___vfprintf_internal_r+0x1af4>
2008e314:	8880004c 	andi	r2,r17,1
2008e318:	1001dd26 	beq	r2,zero,2008ea90 <___vfprintf_internal_r+0x1e30>
2008e31c:	db003117 	ldw	r12,196(sp)
2008e320:	6715883a 	add	r10,r12,fp
2008e324:	d9003717 	ldw	r4,220(sp)
2008e328:	900b883a 	mov	r5,r18
2008e32c:	000d883a 	mov	r6,zero
2008e330:	000f883a 	mov	r7,zero
2008e334:	da003f15 	stw	r8,252(sp)
2008e338:	da403e15 	stw	r9,248(sp)
2008e33c:	da803d15 	stw	r10,244(sp)
2008e340:	00973d40 	call	200973d4 <__eqdf2>
2008e344:	da003f17 	ldw	r8,252(sp)
2008e348:	da403e17 	ldw	r9,248(sp)
2008e34c:	da803d17 	ldw	r10,244(sp)
2008e350:	10016526 	beq	r2,zero,2008e8e8 <___vfprintf_internal_r+0x1c88>
2008e354:	d8802117 	ldw	r2,132(sp)
2008e358:	1280062e 	bgeu	r2,r10,2008e374 <___vfprintf_internal_r+0x1714>
2008e35c:	01000c04 	movi	r4,48
2008e360:	10c00044 	addi	r3,r2,1
2008e364:	d8c02115 	stw	r3,132(sp)
2008e368:	11000005 	stb	r4,0(r2)
2008e36c:	d8802117 	ldw	r2,132(sp)
2008e370:	12bffb36 	bltu	r2,r10,2008e360 <__flash_rwdata_start+0xffff34f4>
2008e374:	db003117 	ldw	r12,196(sp)
2008e378:	1305c83a 	sub	r2,r2,r12
2008e37c:	d8803315 	stw	r2,204(sp)
2008e380:	008011c4 	movi	r2,71
2008e384:	a8814d26 	beq	r21,r2,2008e8bc <___vfprintf_internal_r+0x1c5c>
2008e388:	00801944 	movi	r2,101
2008e38c:	1402060e 	bge	r2,r16,2008eba8 <___vfprintf_internal_r+0x1f48>
2008e390:	00801984 	movi	r2,102
2008e394:	8081b426 	beq	r16,r2,2008ea68 <___vfprintf_internal_r+0x1e08>
2008e398:	db002617 	ldw	r12,152(sp)
2008e39c:	db003415 	stw	r12,208(sp)
2008e3a0:	db003417 	ldw	r12,208(sp)
2008e3a4:	dac03317 	ldw	r11,204(sp)
2008e3a8:	62c1a016 	blt	r12,r11,2008ea2c <___vfprintf_internal_r+0x1dcc>
2008e3ac:	8c40004c 	andi	r17,r17,1
2008e3b0:	8801bf1e 	bne	r17,zero,2008eab0 <___vfprintf_internal_r+0x1e50>
2008e3b4:	6005883a 	mov	r2,r12
2008e3b8:	6001b316 	blt	r12,zero,2008ea88 <___vfprintf_internal_r+0x1e28>
2008e3bc:	dc803417 	ldw	r18,208(sp)
2008e3c0:	df002b07 	ldb	fp,172(sp)
2008e3c4:	e0012e1e 	bne	fp,zero,2008e880 <___vfprintf_internal_r+0x1c20>
2008e3c8:	dc402d17 	ldw	r17,180(sp)
2008e3cc:	dd402783 	ldbu	r21,158(sp)
2008e3d0:	d8802b15 	stw	r2,172(sp)
2008e3d4:	dcc02d15 	stw	r19,180(sp)
2008e3d8:	d8003215 	stw	zero,200(sp)
2008e3dc:	003b7306 	br	2008d1ac <__flash_rwdata_start+0xffff2340>
2008e3e0:	00800084 	movi	r2,2
2008e3e4:	003c4d06 	br	2008d51c <__flash_rwdata_start+0xffff26b0>
2008e3e8:	8880040c 	andi	r2,r17,16
2008e3ec:	1000091e 	bne	r2,zero,2008e414 <___vfprintf_internal_r+0x17b4>
2008e3f0:	8c40100c 	andi	r17,r17,64
2008e3f4:	88000726 	beq	r17,zero,2008e414 <___vfprintf_internal_r+0x17b4>
2008e3f8:	db002d17 	ldw	r12,180(sp)
2008e3fc:	dac02f17 	ldw	r11,188(sp)
2008e400:	60800017 	ldw	r2,0(r12)
2008e404:	63000104 	addi	r12,r12,4
2008e408:	db002d15 	stw	r12,180(sp)
2008e40c:	12c0000d 	sth	r11,0(r2)
2008e410:	003a4e06 	br	2008cd4c <__flash_rwdata_start+0xffff1ee0>
2008e414:	db002d17 	ldw	r12,180(sp)
2008e418:	dac02f17 	ldw	r11,188(sp)
2008e41c:	60800017 	ldw	r2,0(r12)
2008e420:	63000104 	addi	r12,r12,4
2008e424:	db002d15 	stw	r12,180(sp)
2008e428:	12c00015 	stw	r11,0(r2)
2008e42c:	003a4706 	br	2008cd4c <__flash_rwdata_start+0xffff1ee0>
2008e430:	1c000007 	ldb	r16,0(r3)
2008e434:	1805883a 	mov	r2,r3
2008e438:	003a6e06 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008e43c:	88c0100c 	andi	r3,r17,64
2008e440:	18006b26 	beq	r3,zero,2008e5f0 <___vfprintf_internal_r+0x1990>
2008e444:	dac02d17 	ldw	r11,180(sp)
2008e448:	14c0000b 	ldhu	r19,0(r2)
2008e44c:	0039883a 	mov	fp,zero
2008e450:	5ac00104 	addi	r11,r11,4
2008e454:	dac02d15 	stw	r11,180(sp)
2008e458:	003cb206 	br	2008d724 <__flash_rwdata_start+0xffff28b8>
2008e45c:	01000034 	movhi	r4,0
2008e460:	2101ea84 	addi	r4,r4,1962
2008e464:	d9002c15 	stw	r4,176(sp)
2008e468:	dac02c17 	ldw	r11,176(sp)
2008e46c:	1c87883a 	add	r3,r3,r18
2008e470:	10800044 	addi	r2,r2,1
2008e474:	42c00015 	stw	r11,0(r8)
2008e478:	44800115 	stw	r18,4(r8)
2008e47c:	d8c02015 	stw	r3,128(sp)
2008e480:	d8801f15 	stw	r2,124(sp)
2008e484:	010001c4 	movi	r4,7
2008e488:	20bee016 	blt	r4,r2,2008e00c <__flash_rwdata_start+0xffff31a0>
2008e48c:	42000204 	addi	r8,r8,8
2008e490:	003ee506 	br	2008e028 <__flash_rwdata_start+0xffff31bc>
2008e494:	01000034 	movhi	r4,0
2008e498:	2101ea84 	addi	r4,r4,1962
2008e49c:	d9002c15 	stw	r4,176(sp)
2008e4a0:	003bbe06 	br	2008d39c <__flash_rwdata_start+0xffff2530>
2008e4a4:	b009883a 	mov	r4,r22
2008e4a8:	b80b883a 	mov	r5,r23
2008e4ac:	d9801e04 	addi	r6,sp,120
2008e4b0:	0094bc40 	call	20094bc4 <__sprint_r>
2008e4b4:	103ade1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e4b8:	d8c02017 	ldw	r3,128(sp)
2008e4bc:	da000404 	addi	r8,sp,16
2008e4c0:	003d6b06 	br	2008da70 <__flash_rwdata_start+0xffff2c04>
2008e4c4:	d8801f17 	ldw	r2,124(sp)
2008e4c8:	03000034 	movhi	r12,0
2008e4cc:	01000044 	movi	r4,1
2008e4d0:	18c00044 	addi	r3,r3,1
2008e4d4:	10800044 	addi	r2,r2,1
2008e4d8:	6301e204 	addi	r12,r12,1928
2008e4dc:	41000115 	stw	r4,4(r8)
2008e4e0:	43000015 	stw	r12,0(r8)
2008e4e4:	d8c02015 	stw	r3,128(sp)
2008e4e8:	d8801f15 	stw	r2,124(sp)
2008e4ec:	010001c4 	movi	r4,7
2008e4f0:	20804916 	blt	r4,r2,2008e618 <___vfprintf_internal_r+0x19b8>
2008e4f4:	42000204 	addi	r8,r8,8
2008e4f8:	8000041e 	bne	r16,zero,2008e50c <___vfprintf_internal_r+0x18ac>
2008e4fc:	dac03317 	ldw	r11,204(sp)
2008e500:	5800021e 	bne	r11,zero,2008e50c <___vfprintf_internal_r+0x18ac>
2008e504:	8880004c 	andi	r2,r17,1
2008e508:	103bbb26 	beq	r2,zero,2008d3f8 <__flash_rwdata_start+0xffff258c>
2008e50c:	db003817 	ldw	r12,224(sp)
2008e510:	d8801f17 	ldw	r2,124(sp)
2008e514:	dac03517 	ldw	r11,212(sp)
2008e518:	1b07883a 	add	r3,r3,r12
2008e51c:	10800044 	addi	r2,r2,1
2008e520:	42c00015 	stw	r11,0(r8)
2008e524:	43000115 	stw	r12,4(r8)
2008e528:	d8c02015 	stw	r3,128(sp)
2008e52c:	d8801f15 	stw	r2,124(sp)
2008e530:	010001c4 	movi	r4,7
2008e534:	20812e16 	blt	r4,r2,2008e9f0 <___vfprintf_internal_r+0x1d90>
2008e538:	42000204 	addi	r8,r8,8
2008e53c:	0421c83a 	sub	r16,zero,r16
2008e540:	04005c0e 	bge	zero,r16,2008e6b4 <___vfprintf_internal_r+0x1a54>
2008e544:	04800404 	movi	r18,16
2008e548:	94009f0e 	bge	r18,r16,2008e7c8 <___vfprintf_internal_r+0x1b68>
2008e54c:	01000034 	movhi	r4,0
2008e550:	2101ea84 	addi	r4,r4,1962
2008e554:	d9002c15 	stw	r4,176(sp)
2008e558:	054001c4 	movi	r21,7
2008e55c:	00000306 	br	2008e56c <___vfprintf_internal_r+0x190c>
2008e560:	42000204 	addi	r8,r8,8
2008e564:	843ffc04 	addi	r16,r16,-16
2008e568:	94009a0e 	bge	r18,r16,2008e7d4 <___vfprintf_internal_r+0x1b74>
2008e56c:	18c00404 	addi	r3,r3,16
2008e570:	10800044 	addi	r2,r2,1
2008e574:	45000015 	stw	r20,0(r8)
2008e578:	44800115 	stw	r18,4(r8)
2008e57c:	d8c02015 	stw	r3,128(sp)
2008e580:	d8801f15 	stw	r2,124(sp)
2008e584:	a8bff60e 	bge	r21,r2,2008e560 <__flash_rwdata_start+0xffff36f4>
2008e588:	b009883a 	mov	r4,r22
2008e58c:	b80b883a 	mov	r5,r23
2008e590:	d9801e04 	addi	r6,sp,120
2008e594:	0094bc40 	call	20094bc4 <__sprint_r>
2008e598:	103aa51e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e59c:	d8c02017 	ldw	r3,128(sp)
2008e5a0:	d8801f17 	ldw	r2,124(sp)
2008e5a4:	da000404 	addi	r8,sp,16
2008e5a8:	003fee06 	br	2008e564 <__flash_rwdata_start+0xffff36f8>
2008e5ac:	008011c4 	movi	r2,71
2008e5b0:	1400be16 	blt	r2,r16,2008e8ac <___vfprintf_internal_r+0x1c4c>
2008e5b4:	03000034 	movhi	r12,0
2008e5b8:	6301d404 	addi	r12,r12,1872
2008e5bc:	db003115 	stw	r12,196(sp)
2008e5c0:	00c000c4 	movi	r3,3
2008e5c4:	00bfdfc4 	movi	r2,-129
2008e5c8:	d8c02b15 	stw	r3,172(sp)
2008e5cc:	88a2703a 	and	r17,r17,r2
2008e5d0:	dd402783 	ldbu	r21,158(sp)
2008e5d4:	dcc02d15 	stw	r19,180(sp)
2008e5d8:	1825883a 	mov	r18,r3
2008e5dc:	d8003215 	stw	zero,200(sp)
2008e5e0:	d8003415 	stw	zero,208(sp)
2008e5e4:	003af106 	br	2008d1ac <__flash_rwdata_start+0xffff2340>
2008e5e8:	4825883a 	mov	r18,r9
2008e5ec:	003c9306 	br	2008d83c <__flash_rwdata_start+0xffff29d0>
2008e5f0:	db002d17 	ldw	r12,180(sp)
2008e5f4:	14c00017 	ldw	r19,0(r2)
2008e5f8:	0039883a 	mov	fp,zero
2008e5fc:	63000104 	addi	r12,r12,4
2008e600:	db002d15 	stw	r12,180(sp)
2008e604:	003c4706 	br	2008d724 <__flash_rwdata_start+0xffff28b8>
2008e608:	00800034 	movhi	r2,0
2008e60c:	1081d204 	addi	r2,r2,1864
2008e610:	d8803115 	stw	r2,196(sp)
2008e614:	003bf106 	br	2008d5dc <__flash_rwdata_start+0xffff2770>
2008e618:	b009883a 	mov	r4,r22
2008e61c:	b80b883a 	mov	r5,r23
2008e620:	d9801e04 	addi	r6,sp,120
2008e624:	0094bc40 	call	20094bc4 <__sprint_r>
2008e628:	103a811e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e62c:	dc002617 	ldw	r16,152(sp)
2008e630:	d8c02017 	ldw	r3,128(sp)
2008e634:	da000404 	addi	r8,sp,16
2008e638:	003faf06 	br	2008e4f8 <__flash_rwdata_start+0xffff368c>
2008e63c:	db002e17 	ldw	r12,184(sp)
2008e640:	1805883a 	mov	r2,r3
2008e644:	dac02d15 	stw	r11,180(sp)
2008e648:	0319c83a 	sub	r12,zero,r12
2008e64c:	db002e15 	stw	r12,184(sp)
2008e650:	003a8206 	br	2008d05c <__flash_rwdata_start+0xffff21f0>
2008e654:	18800044 	addi	r2,r3,1
2008e658:	8c400814 	ori	r17,r17,32
2008e65c:	1c000047 	ldb	r16,1(r3)
2008e660:	0039e406 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008e664:	b009883a 	mov	r4,r22
2008e668:	b80b883a 	mov	r5,r23
2008e66c:	d9801e04 	addi	r6,sp,120
2008e670:	0094bc40 	call	20094bc4 <__sprint_r>
2008e674:	103a6e1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e678:	d8c02017 	ldw	r3,128(sp)
2008e67c:	da000404 	addi	r8,sp,16
2008e680:	003d0c06 	br	2008dab4 <__flash_rwdata_start+0xffff2c48>
2008e684:	db002817 	ldw	r12,160(sp)
2008e688:	d8c03117 	ldw	r3,196(sp)
2008e68c:	60e5c83a 	sub	r18,r12,r3
2008e690:	003ac106 	br	2008d198 <__flash_rwdata_start+0xffff232c>
2008e694:	b009883a 	mov	r4,r22
2008e698:	b80b883a 	mov	r5,r23
2008e69c:	d9801e04 	addi	r6,sp,120
2008e6a0:	0094bc40 	call	20094bc4 <__sprint_r>
2008e6a4:	103a621e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e6a8:	d8c02017 	ldw	r3,128(sp)
2008e6ac:	d8801f17 	ldw	r2,124(sp)
2008e6b0:	da000404 	addi	r8,sp,16
2008e6b4:	db003317 	ldw	r12,204(sp)
2008e6b8:	dac03117 	ldw	r11,196(sp)
2008e6bc:	10800044 	addi	r2,r2,1
2008e6c0:	1b07883a 	add	r3,r3,r12
2008e6c4:	42c00015 	stw	r11,0(r8)
2008e6c8:	43000115 	stw	r12,4(r8)
2008e6cc:	d8c02015 	stw	r3,128(sp)
2008e6d0:	d8801f15 	stw	r2,124(sp)
2008e6d4:	010001c4 	movi	r4,7
2008e6d8:	20bb460e 	bge	r4,r2,2008d3f4 <__flash_rwdata_start+0xffff2588>
2008e6dc:	003d8506 	br	2008dcf4 <__flash_rwdata_start+0xffff2e88>
2008e6e0:	da003f15 	stw	r8,252(sp)
2008e6e4:	008abd00 	call	2008abd0 <strlen>
2008e6e8:	1025883a 	mov	r18,r2
2008e6ec:	da003f17 	ldw	r8,252(sp)
2008e6f0:	903c540e 	bge	r18,zero,2008d844 <__flash_rwdata_start+0xffff29d8>
2008e6f4:	0005883a 	mov	r2,zero
2008e6f8:	003c5206 	br	2008d844 <__flash_rwdata_start+0xffff29d8>
2008e6fc:	01000034 	movhi	r4,0
2008e700:	2101ee84 	addi	r4,r4,1978
2008e704:	d9003615 	stw	r4,216(sp)
2008e708:	003adc06 	br	2008d27c <__flash_rwdata_start+0xffff2410>
2008e70c:	d8802604 	addi	r2,sp,152
2008e710:	d8800115 	stw	r2,4(sp)
2008e714:	d9403717 	ldw	r5,220(sp)
2008e718:	d8802504 	addi	r2,sp,148
2008e71c:	d8800215 	stw	r2,8(sp)
2008e720:	d8802104 	addi	r2,sp,132
2008e724:	da400015 	stw	r9,0(sp)
2008e728:	d8800315 	stw	r2,12(sp)
2008e72c:	b009883a 	mov	r4,r22
2008e730:	900d883a 	mov	r6,r18
2008e734:	01c000c4 	movi	r7,3
2008e738:	da003f15 	stw	r8,252(sp)
2008e73c:	da403e15 	stw	r9,248(sp)
2008e740:	008f2a80 	call	2008f2a8 <_dtoa_r>
2008e744:	da403e17 	ldw	r9,248(sp)
2008e748:	da003f17 	ldw	r8,252(sp)
2008e74c:	d8803115 	stw	r2,196(sp)
2008e750:	4839883a 	mov	fp,r9
2008e754:	dac03117 	ldw	r11,196(sp)
2008e758:	00801184 	movi	r2,70
2008e75c:	5f15883a 	add	r10,r11,fp
2008e760:	a8bef01e 	bne	r21,r2,2008e324 <__flash_rwdata_start+0xffff34b8>
2008e764:	59000007 	ldb	r4,0(r11)
2008e768:	00800c04 	movi	r2,48
2008e76c:	2080d526 	beq	r4,r2,2008eac4 <___vfprintf_internal_r+0x1e64>
2008e770:	d8c02617 	ldw	r3,152(sp)
2008e774:	50d5883a 	add	r10,r10,r3
2008e778:	003eea06 	br	2008e324 <__flash_rwdata_start+0xffff34b8>
2008e77c:	0025883a 	mov	r18,zero
2008e780:	003db306 	br	2008de50 <__flash_rwdata_start+0xffff2fe4>
2008e784:	b009883a 	mov	r4,r22
2008e788:	b80b883a 	mov	r5,r23
2008e78c:	d9801e04 	addi	r6,sp,120
2008e790:	0094bc40 	call	20094bc4 <__sprint_r>
2008e794:	103a261e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e798:	d8c02017 	ldw	r3,128(sp)
2008e79c:	da000404 	addi	r8,sp,16
2008e7a0:	003daa06 	br	2008de4c <__flash_rwdata_start+0xffff2fe0>
2008e7a4:	b009883a 	mov	r4,r22
2008e7a8:	b80b883a 	mov	r5,r23
2008e7ac:	d9801e04 	addi	r6,sp,120
2008e7b0:	0094bc40 	call	20094bc4 <__sprint_r>
2008e7b4:	103a1e1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e7b8:	d8802617 	ldw	r2,152(sp)
2008e7bc:	d8c02017 	ldw	r3,128(sp)
2008e7c0:	da000404 	addi	r8,sp,16
2008e7c4:	003e2c06 	br	2008e078 <__flash_rwdata_start+0xffff320c>
2008e7c8:	03000034 	movhi	r12,0
2008e7cc:	6301ea84 	addi	r12,r12,1962
2008e7d0:	db002c15 	stw	r12,176(sp)
2008e7d4:	dac02c17 	ldw	r11,176(sp)
2008e7d8:	1c07883a 	add	r3,r3,r16
2008e7dc:	10800044 	addi	r2,r2,1
2008e7e0:	42c00015 	stw	r11,0(r8)
2008e7e4:	44000115 	stw	r16,4(r8)
2008e7e8:	d8c02015 	stw	r3,128(sp)
2008e7ec:	d8801f15 	stw	r2,124(sp)
2008e7f0:	010001c4 	movi	r4,7
2008e7f4:	20bfa716 	blt	r4,r2,2008e694 <__flash_rwdata_start+0xffff3828>
2008e7f8:	42000204 	addi	r8,r8,8
2008e7fc:	003fad06 	br	2008e6b4 <__flash_rwdata_start+0xffff3848>
2008e800:	00800184 	movi	r2,6
2008e804:	1240012e 	bgeu	r2,r9,2008e80c <___vfprintf_internal_r+0x1bac>
2008e808:	1013883a 	mov	r9,r2
2008e80c:	4825883a 	mov	r18,r9
2008e810:	4805883a 	mov	r2,r9
2008e814:	4800c216 	blt	r9,zero,2008eb20 <___vfprintf_internal_r+0x1ec0>
2008e818:	d8802b15 	stw	r2,172(sp)
2008e81c:	00800034 	movhi	r2,0
2008e820:	1081e004 	addi	r2,r2,1920
2008e824:	d8803115 	stw	r2,196(sp)
2008e828:	dcc02d15 	stw	r19,180(sp)
2008e82c:	d8003215 	stw	zero,200(sp)
2008e830:	d8003415 	stw	zero,208(sp)
2008e834:	0005883a 	mov	r2,zero
2008e838:	003a6306 	br	2008d1c8 <__flash_rwdata_start+0xffff235c>
2008e83c:	0021883a 	mov	r16,zero
2008e840:	003e1f06 	br	2008e0c0 <__flash_rwdata_start+0xffff3254>
2008e844:	b009883a 	mov	r4,r22
2008e848:	b80b883a 	mov	r5,r23
2008e84c:	d9801e04 	addi	r6,sp,120
2008e850:	0094bc40 	call	20094bc4 <__sprint_r>
2008e854:	1039f61e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008e858:	d8802617 	ldw	r2,152(sp)
2008e85c:	db003317 	ldw	r12,204(sp)
2008e860:	d8c02017 	ldw	r3,128(sp)
2008e864:	da000404 	addi	r8,sp,16
2008e868:	6085c83a 	sub	r2,r12,r2
2008e86c:	003e1306 	br	2008e0bc <__flash_rwdata_start+0xffff3250>
2008e870:	03000034 	movhi	r12,0
2008e874:	6301ee84 	addi	r12,r12,1978
2008e878:	db003615 	stw	r12,216(sp)
2008e87c:	003b0206 	br	2008d488 <__flash_rwdata_start+0xffff261c>
2008e880:	00c00b44 	movi	r3,45
2008e884:	d8802b15 	stw	r2,172(sp)
2008e888:	dc402d17 	ldw	r17,180(sp)
2008e88c:	d8c02785 	stb	r3,158(sp)
2008e890:	dcc02d15 	stw	r19,180(sp)
2008e894:	d8003215 	stw	zero,200(sp)
2008e898:	00800b44 	movi	r2,45
2008e89c:	003a4706 	br	2008d1bc <__flash_rwdata_start+0xffff2350>
2008e8a0:	05400b44 	movi	r21,45
2008e8a4:	dd402785 	stb	r21,158(sp)
2008e8a8:	003b4706 	br	2008d5c8 <__flash_rwdata_start+0xffff275c>
2008e8ac:	00800034 	movhi	r2,0
2008e8b0:	1081d504 	addi	r2,r2,1876
2008e8b4:	d8803115 	stw	r2,196(sp)
2008e8b8:	003f4106 	br	2008e5c0 <__flash_rwdata_start+0xffff3754>
2008e8bc:	d8c02617 	ldw	r3,152(sp)
2008e8c0:	00bfff44 	movi	r2,-3
2008e8c4:	18801116 	blt	r3,r2,2008e90c <___vfprintf_internal_r+0x1cac>
2008e8c8:	48c01016 	blt	r9,r3,2008e90c <___vfprintf_internal_r+0x1cac>
2008e8cc:	d8c03415 	stw	r3,208(sp)
2008e8d0:	040019c4 	movi	r16,103
2008e8d4:	003eb206 	br	2008e3a0 <__flash_rwdata_start+0xffff3534>
2008e8d8:	01000034 	movhi	r4,0
2008e8dc:	2101ea84 	addi	r4,r4,1962
2008e8e0:	d9002c15 	stw	r4,176(sp)
2008e8e4:	003cb106 	br	2008dbac <__flash_rwdata_start+0xffff2d40>
2008e8e8:	5005883a 	mov	r2,r10
2008e8ec:	003ea106 	br	2008e374 <__flash_rwdata_start+0xffff3508>
2008e8f0:	da402b15 	stw	r9,172(sp)
2008e8f4:	dd402783 	ldbu	r21,158(sp)
2008e8f8:	4825883a 	mov	r18,r9
2008e8fc:	dcc02d15 	stw	r19,180(sp)
2008e900:	d8003215 	stw	zero,200(sp)
2008e904:	d8003415 	stw	zero,208(sp)
2008e908:	003a2806 	br	2008d1ac <__flash_rwdata_start+0xffff2340>
2008e90c:	843fff84 	addi	r16,r16,-2
2008e910:	1f3fffc4 	addi	fp,r3,-1
2008e914:	df002615 	stw	fp,152(sp)
2008e918:	dc0022c5 	stb	r16,139(sp)
2008e91c:	e0009816 	blt	fp,zero,2008eb80 <___vfprintf_internal_r+0x1f20>
2008e920:	00800ac4 	movi	r2,43
2008e924:	d8802305 	stb	r2,140(sp)
2008e928:	00800244 	movi	r2,9
2008e92c:	1700750e 	bge	r2,fp,2008eb04 <___vfprintf_internal_r+0x1ea4>
2008e930:	dd4022c4 	addi	r21,sp,139
2008e934:	dc002c15 	stw	r16,176(sp)
2008e938:	4025883a 	mov	r18,r8
2008e93c:	a821883a 	mov	r16,r21
2008e940:	e009883a 	mov	r4,fp
2008e944:	01400284 	movi	r5,10
2008e948:	0086bcc0 	call	20086bcc <__modsi3>
2008e94c:	10800c04 	addi	r2,r2,48
2008e950:	843fffc4 	addi	r16,r16,-1
2008e954:	e009883a 	mov	r4,fp
2008e958:	01400284 	movi	r5,10
2008e95c:	80800005 	stb	r2,0(r16)
2008e960:	0086b780 	call	20086b78 <__divsi3>
2008e964:	1039883a 	mov	fp,r2
2008e968:	00800244 	movi	r2,9
2008e96c:	173ff416 	blt	r2,fp,2008e940 <__flash_rwdata_start+0xffff3ad4>
2008e970:	9011883a 	mov	r8,r18
2008e974:	e0800c04 	addi	r2,fp,48
2008e978:	8025883a 	mov	r18,r16
2008e97c:	913fffc4 	addi	r4,r18,-1
2008e980:	90bfffc5 	stb	r2,-1(r18)
2008e984:	dc002c17 	ldw	r16,176(sp)
2008e988:	2540852e 	bgeu	r4,r21,2008eba0 <___vfprintf_internal_r+0x1f40>
2008e98c:	d9402384 	addi	r5,sp,142
2008e990:	2c8bc83a 	sub	r5,r5,r18
2008e994:	d8c02344 	addi	r3,sp,141
2008e998:	a94b883a 	add	r5,r21,r5
2008e99c:	00000106 	br	2008e9a4 <___vfprintf_internal_r+0x1d44>
2008e9a0:	20800003 	ldbu	r2,0(r4)
2008e9a4:	18800005 	stb	r2,0(r3)
2008e9a8:	18c00044 	addi	r3,r3,1
2008e9ac:	21000044 	addi	r4,r4,1
2008e9b0:	197ffb1e 	bne	r3,r5,2008e9a0 <__flash_rwdata_start+0xffff3b34>
2008e9b4:	d8802304 	addi	r2,sp,140
2008e9b8:	1485c83a 	sub	r2,r2,r18
2008e9bc:	d8c02344 	addi	r3,sp,141
2008e9c0:	1885883a 	add	r2,r3,r2
2008e9c4:	dac03317 	ldw	r11,204(sp)
2008e9c8:	156bc83a 	sub	r21,r2,r21
2008e9cc:	dd403a15 	stw	r21,232(sp)
2008e9d0:	00800044 	movi	r2,1
2008e9d4:	5d65883a 	add	r18,r11,r21
2008e9d8:	12c0660e 	bge	r2,r11,2008eb74 <___vfprintf_internal_r+0x1f14>
2008e9dc:	94800044 	addi	r18,r18,1
2008e9e0:	9005883a 	mov	r2,r18
2008e9e4:	90006116 	blt	r18,zero,2008eb6c <___vfprintf_internal_r+0x1f0c>
2008e9e8:	d8003415 	stw	zero,208(sp)
2008e9ec:	003e7406 	br	2008e3c0 <__flash_rwdata_start+0xffff3554>
2008e9f0:	b009883a 	mov	r4,r22
2008e9f4:	b80b883a 	mov	r5,r23
2008e9f8:	d9801e04 	addi	r6,sp,120
2008e9fc:	0094bc40 	call	20094bc4 <__sprint_r>
2008ea00:	10398b1e 	bne	r2,zero,2008d030 <__flash_rwdata_start+0xffff21c4>
2008ea04:	dc002617 	ldw	r16,152(sp)
2008ea08:	d8c02017 	ldw	r3,128(sp)
2008ea0c:	d8801f17 	ldw	r2,124(sp)
2008ea10:	da000404 	addi	r8,sp,16
2008ea14:	003ec906 	br	2008e53c <__flash_rwdata_start+0xffff36d0>
2008ea18:	483e1c1e 	bne	r9,zero,2008e28c <__flash_rwdata_start+0xffff3420>
2008ea1c:	9013883a 	mov	r9,r18
2008ea20:	003e1a06 	br	2008e28c <__flash_rwdata_start+0xffff3420>
2008ea24:	02400184 	movi	r9,6
2008ea28:	003e1806 	br	2008e28c <__flash_rwdata_start+0xffff3420>
2008ea2c:	d8c03417 	ldw	r3,208(sp)
2008ea30:	00c04b0e 	bge	zero,r3,2008eb60 <___vfprintf_internal_r+0x1f00>
2008ea34:	04800044 	movi	r18,1
2008ea38:	dac03317 	ldw	r11,204(sp)
2008ea3c:	92e5883a 	add	r18,r18,r11
2008ea40:	9005883a 	mov	r2,r18
2008ea44:	903e5e0e 	bge	r18,zero,2008e3c0 <__flash_rwdata_start+0xffff3554>
2008ea48:	0005883a 	mov	r2,zero
2008ea4c:	003e5c06 	br	2008e3c0 <__flash_rwdata_start+0xffff3554>
2008ea50:	00c00b44 	movi	r3,45
2008ea54:	64a0003c 	xorhi	r18,r12,32768
2008ea58:	d8c02b05 	stb	r3,172(sp)
2008ea5c:	003e1106 	br	2008e2a4 <__flash_rwdata_start+0xffff3438>
2008ea60:	4f000044 	addi	fp,r9,1
2008ea64:	003e1606 	br	2008e2c0 <__flash_rwdata_start+0xffff3454>
2008ea68:	d8c02617 	ldw	r3,152(sp)
2008ea6c:	d8c03415 	stw	r3,208(sp)
2008ea70:	00c0350e 	bge	zero,r3,2008eb48 <___vfprintf_internal_r+0x1ee8>
2008ea74:	4800081e 	bne	r9,zero,2008ea98 <___vfprintf_internal_r+0x1e38>
2008ea78:	8c40004c 	andi	r17,r17,1
2008ea7c:	8800061e 	bne	r17,zero,2008ea98 <___vfprintf_internal_r+0x1e38>
2008ea80:	1805883a 	mov	r2,r3
2008ea84:	183e4d0e 	bge	r3,zero,2008e3bc <__flash_rwdata_start+0xffff3550>
2008ea88:	0005883a 	mov	r2,zero
2008ea8c:	003e4b06 	br	2008e3bc <__flash_rwdata_start+0xffff3550>
2008ea90:	d8802117 	ldw	r2,132(sp)
2008ea94:	003e3706 	br	2008e374 <__flash_rwdata_start+0xffff3508>
2008ea98:	dac03417 	ldw	r11,208(sp)
2008ea9c:	4a400044 	addi	r9,r9,1
2008eaa0:	5a65883a 	add	r18,r11,r9
2008eaa4:	9005883a 	mov	r2,r18
2008eaa8:	903e450e 	bge	r18,zero,2008e3c0 <__flash_rwdata_start+0xffff3554>
2008eaac:	003fe606 	br	2008ea48 <__flash_rwdata_start+0xffff3bdc>
2008eab0:	db003417 	ldw	r12,208(sp)
2008eab4:	64800044 	addi	r18,r12,1
2008eab8:	9005883a 	mov	r2,r18
2008eabc:	903e400e 	bge	r18,zero,2008e3c0 <__flash_rwdata_start+0xffff3554>
2008eac0:	003fe106 	br	2008ea48 <__flash_rwdata_start+0xffff3bdc>
2008eac4:	d9003717 	ldw	r4,220(sp)
2008eac8:	900b883a 	mov	r5,r18
2008eacc:	000d883a 	mov	r6,zero
2008ead0:	000f883a 	mov	r7,zero
2008ead4:	da003f15 	stw	r8,252(sp)
2008ead8:	da403e15 	stw	r9,248(sp)
2008eadc:	da803d15 	stw	r10,244(sp)
2008eae0:	00973d40 	call	200973d4 <__eqdf2>
2008eae4:	da003f17 	ldw	r8,252(sp)
2008eae8:	da403e17 	ldw	r9,248(sp)
2008eaec:	da803d17 	ldw	r10,244(sp)
2008eaf0:	103f1f26 	beq	r2,zero,2008e770 <__flash_rwdata_start+0xffff3904>
2008eaf4:	00800044 	movi	r2,1
2008eaf8:	1707c83a 	sub	r3,r2,fp
2008eafc:	d8c02615 	stw	r3,152(sp)
2008eb00:	003f1c06 	br	2008e774 <__flash_rwdata_start+0xffff3908>
2008eb04:	00800c04 	movi	r2,48
2008eb08:	e0c00c04 	addi	r3,fp,48
2008eb0c:	d8802345 	stb	r2,141(sp)
2008eb10:	d8c02385 	stb	r3,142(sp)
2008eb14:	d88023c4 	addi	r2,sp,143
2008eb18:	dd4022c4 	addi	r21,sp,139
2008eb1c:	003fa906 	br	2008e9c4 <__flash_rwdata_start+0xffff3b58>
2008eb20:	0005883a 	mov	r2,zero
2008eb24:	003f3c06 	br	2008e818 <__flash_rwdata_start+0xffff39ac>
2008eb28:	dac02d17 	ldw	r11,180(sp)
2008eb2c:	5a400017 	ldw	r9,0(r11)
2008eb30:	5ac00104 	addi	r11,r11,4
2008eb34:	dac02d15 	stw	r11,180(sp)
2008eb38:	483ec80e 	bge	r9,zero,2008e65c <__flash_rwdata_start+0xffff37f0>
2008eb3c:	027fffc4 	movi	r9,-1
2008eb40:	1c000047 	ldb	r16,1(r3)
2008eb44:	0038ab06 	br	2008cdf4 <__flash_rwdata_start+0xffff1f88>
2008eb48:	4800111e 	bne	r9,zero,2008eb90 <___vfprintf_internal_r+0x1f30>
2008eb4c:	8c40004c 	andi	r17,r17,1
2008eb50:	88000f1e 	bne	r17,zero,2008eb90 <___vfprintf_internal_r+0x1f30>
2008eb54:	00800044 	movi	r2,1
2008eb58:	1025883a 	mov	r18,r2
2008eb5c:	003e1806 	br	2008e3c0 <__flash_rwdata_start+0xffff3554>
2008eb60:	04800084 	movi	r18,2
2008eb64:	90e5c83a 	sub	r18,r18,r3
2008eb68:	003fb306 	br	2008ea38 <__flash_rwdata_start+0xffff3bcc>
2008eb6c:	0005883a 	mov	r2,zero
2008eb70:	003f9d06 	br	2008e9e8 <__flash_rwdata_start+0xffff3b7c>
2008eb74:	88a2703a 	and	r17,r17,r2
2008eb78:	883f9926 	beq	r17,zero,2008e9e0 <__flash_rwdata_start+0xffff3b74>
2008eb7c:	003f9706 	br	2008e9dc <__flash_rwdata_start+0xffff3b70>
2008eb80:	00800b44 	movi	r2,45
2008eb84:	0739c83a 	sub	fp,zero,fp
2008eb88:	d8802305 	stb	r2,140(sp)
2008eb8c:	003f6606 	br	2008e928 <__flash_rwdata_start+0xffff3abc>
2008eb90:	4c800084 	addi	r18,r9,2
2008eb94:	9005883a 	mov	r2,r18
2008eb98:	903e090e 	bge	r18,zero,2008e3c0 <__flash_rwdata_start+0xffff3554>
2008eb9c:	003faa06 	br	2008ea48 <__flash_rwdata_start+0xffff3bdc>
2008eba0:	d8802344 	addi	r2,sp,141
2008eba4:	003f8706 	br	2008e9c4 <__flash_rwdata_start+0xffff3b58>
2008eba8:	d8c02617 	ldw	r3,152(sp)
2008ebac:	003f5806 	br	2008e910 <__flash_rwdata_start+0xffff3aa4>

2008ebb0 <__vfprintf_internal>:
2008ebb0:	2007883a 	mov	r3,r4
2008ebb4:	01000034 	movhi	r4,0
2008ebb8:	210a8c04 	addi	r4,r4,10800
2008ebbc:	21000017 	ldw	r4,0(r4)
2008ebc0:	2805883a 	mov	r2,r5
2008ebc4:	300f883a 	mov	r7,r6
2008ebc8:	180b883a 	mov	r5,r3
2008ebcc:	100d883a 	mov	r6,r2
2008ebd0:	008cc601 	jmpi	2008cc60 <___vfprintf_internal_r>

2008ebd4 <__sbprintf>:
2008ebd4:	2880030b 	ldhu	r2,12(r5)
2008ebd8:	2ac01917 	ldw	r11,100(r5)
2008ebdc:	2a80038b 	ldhu	r10,14(r5)
2008ebe0:	2a400717 	ldw	r9,28(r5)
2008ebe4:	2a000917 	ldw	r8,36(r5)
2008ebe8:	defee204 	addi	sp,sp,-1144
2008ebec:	00c10004 	movi	r3,1024
2008ebf0:	dc011a15 	stw	r16,1128(sp)
2008ebf4:	10bfff4c 	andi	r2,r2,65533
2008ebf8:	2821883a 	mov	r16,r5
2008ebfc:	d8cb883a 	add	r5,sp,r3
2008ec00:	dc811c15 	stw	r18,1136(sp)
2008ec04:	dc411b15 	stw	r17,1132(sp)
2008ec08:	dfc11d15 	stw	ra,1140(sp)
2008ec0c:	2025883a 	mov	r18,r4
2008ec10:	d881030d 	sth	r2,1036(sp)
2008ec14:	dac11915 	stw	r11,1124(sp)
2008ec18:	da81038d 	sth	r10,1038(sp)
2008ec1c:	da410715 	stw	r9,1052(sp)
2008ec20:	da010915 	stw	r8,1060(sp)
2008ec24:	dec10015 	stw	sp,1024(sp)
2008ec28:	dec10415 	stw	sp,1040(sp)
2008ec2c:	d8c10215 	stw	r3,1032(sp)
2008ec30:	d8c10515 	stw	r3,1044(sp)
2008ec34:	d8010615 	stw	zero,1048(sp)
2008ec38:	008cc600 	call	2008cc60 <___vfprintf_internal_r>
2008ec3c:	1023883a 	mov	r17,r2
2008ec40:	10000416 	blt	r2,zero,2008ec54 <__sbprintf+0x80>
2008ec44:	9009883a 	mov	r4,r18
2008ec48:	d9410004 	addi	r5,sp,1024
2008ec4c:	0090bd80 	call	20090bd8 <_fflush_r>
2008ec50:	10000d1e 	bne	r2,zero,2008ec88 <__sbprintf+0xb4>
2008ec54:	d8c1030b 	ldhu	r3,1036(sp)
2008ec58:	18c0100c 	andi	r3,r3,64
2008ec5c:	18000326 	beq	r3,zero,2008ec6c <__sbprintf+0x98>
2008ec60:	8080030b 	ldhu	r2,12(r16)
2008ec64:	10801014 	ori	r2,r2,64
2008ec68:	8080030d 	sth	r2,12(r16)
2008ec6c:	8805883a 	mov	r2,r17
2008ec70:	dfc11d17 	ldw	ra,1140(sp)
2008ec74:	dc811c17 	ldw	r18,1136(sp)
2008ec78:	dc411b17 	ldw	r17,1132(sp)
2008ec7c:	dc011a17 	ldw	r16,1128(sp)
2008ec80:	dec11e04 	addi	sp,sp,1144
2008ec84:	f800283a 	ret
2008ec88:	047fffc4 	movi	r17,-1
2008ec8c:	003ff106 	br	2008ec54 <__flash_rwdata_start+0xffff3de8>

2008ec90 <_vsnprintf_r>:
2008ec90:	3005883a 	mov	r2,r6
2008ec94:	30003616 	blt	r6,zero,2008ed70 <_vsnprintf_r+0xe0>
2008ec98:	deffe404 	addi	sp,sp,-112
2008ec9c:	00c08204 	movi	r3,520
2008eca0:	dc001a15 	stw	r16,104(sp)
2008eca4:	dfc01b15 	stw	ra,108(sp)
2008eca8:	d8c0030d 	sth	r3,12(sp)
2008ecac:	d9400015 	stw	r5,0(sp)
2008ecb0:	d9400415 	stw	r5,16(sp)
2008ecb4:	380d883a 	mov	r6,r7
2008ecb8:	2021883a 	mov	r16,r4
2008ecbc:	10001326 	beq	r2,zero,2008ed0c <_vsnprintf_r+0x7c>
2008ecc0:	00c00034 	movhi	r3,0
2008ecc4:	18ca8c04 	addi	r3,r3,10800
2008ecc8:	19000017 	ldw	r4,0(r3)
2008eccc:	d9c01c17 	ldw	r7,112(sp)
2008ecd0:	10bfffc4 	addi	r2,r2,-1
2008ecd4:	d8800215 	stw	r2,8(sp)
2008ecd8:	d8800515 	stw	r2,20(sp)
2008ecdc:	d80b883a 	mov	r5,sp
2008ece0:	00bfffc4 	movi	r2,-1
2008ece4:	d880038d 	sth	r2,14(sp)
2008ece8:	008acd00 	call	2008acd0 <___svfprintf_internal_r>
2008ecec:	00ffffc4 	movi	r3,-1
2008ecf0:	10c01c16 	blt	r2,r3,2008ed64 <_vsnprintf_r+0xd4>
2008ecf4:	d8c00017 	ldw	r3,0(sp)
2008ecf8:	18000005 	stb	zero,0(r3)
2008ecfc:	dfc01b17 	ldw	ra,108(sp)
2008ed00:	dc001a17 	ldw	r16,104(sp)
2008ed04:	dec01c04 	addi	sp,sp,112
2008ed08:	f800283a 	ret
2008ed0c:	00800034 	movhi	r2,0
2008ed10:	108a8c04 	addi	r2,r2,10800
2008ed14:	11000017 	ldw	r4,0(r2)
2008ed18:	d9c01c17 	ldw	r7,112(sp)
2008ed1c:	00bfffc4 	movi	r2,-1
2008ed20:	d80b883a 	mov	r5,sp
2008ed24:	d8000215 	stw	zero,8(sp)
2008ed28:	d8000515 	stw	zero,20(sp)
2008ed2c:	d880038d 	sth	r2,14(sp)
2008ed30:	008acd00 	call	2008acd0 <___svfprintf_internal_r>
2008ed34:	00ffffc4 	movi	r3,-1
2008ed38:	10c00416 	blt	r2,r3,2008ed4c <_vsnprintf_r+0xbc>
2008ed3c:	dfc01b17 	ldw	ra,108(sp)
2008ed40:	dc001a17 	ldw	r16,104(sp)
2008ed44:	dec01c04 	addi	sp,sp,112
2008ed48:	f800283a 	ret
2008ed4c:	00c022c4 	movi	r3,139
2008ed50:	80c00015 	stw	r3,0(r16)
2008ed54:	dfc01b17 	ldw	ra,108(sp)
2008ed58:	dc001a17 	ldw	r16,104(sp)
2008ed5c:	dec01c04 	addi	sp,sp,112
2008ed60:	f800283a 	ret
2008ed64:	00c022c4 	movi	r3,139
2008ed68:	80c00015 	stw	r3,0(r16)
2008ed6c:	003fe106 	br	2008ecf4 <__flash_rwdata_start+0xffff3e88>
2008ed70:	008022c4 	movi	r2,139
2008ed74:	20800015 	stw	r2,0(r4)
2008ed78:	00bfffc4 	movi	r2,-1
2008ed7c:	f800283a 	ret

2008ed80 <vsnprintf>:
2008ed80:	00800034 	movhi	r2,0
2008ed84:	108a8c04 	addi	r2,r2,10800
2008ed88:	2011883a 	mov	r8,r4
2008ed8c:	11000017 	ldw	r4,0(r2)
2008ed90:	defffe04 	addi	sp,sp,-8
2008ed94:	2807883a 	mov	r3,r5
2008ed98:	3005883a 	mov	r2,r6
2008ed9c:	d9c00015 	stw	r7,0(sp)
2008eda0:	400b883a 	mov	r5,r8
2008eda4:	180d883a 	mov	r6,r3
2008eda8:	100f883a 	mov	r7,r2
2008edac:	dfc00115 	stw	ra,4(sp)
2008edb0:	008ec900 	call	2008ec90 <_vsnprintf_r>
2008edb4:	dfc00117 	ldw	ra,4(sp)
2008edb8:	dec00204 	addi	sp,sp,8
2008edbc:	f800283a 	ret

2008edc0 <__swsetup_r>:
2008edc0:	00800034 	movhi	r2,0
2008edc4:	defffd04 	addi	sp,sp,-12
2008edc8:	108a8c04 	addi	r2,r2,10800
2008edcc:	dc400115 	stw	r17,4(sp)
2008edd0:	2023883a 	mov	r17,r4
2008edd4:	11000017 	ldw	r4,0(r2)
2008edd8:	dc000015 	stw	r16,0(sp)
2008eddc:	dfc00215 	stw	ra,8(sp)
2008ede0:	2821883a 	mov	r16,r5
2008ede4:	20000226 	beq	r4,zero,2008edf0 <__swsetup_r+0x30>
2008ede8:	20c00e17 	ldw	r3,56(r4)
2008edec:	18003126 	beq	r3,zero,2008eeb4 <__swsetup_r+0xf4>
2008edf0:	8080030b 	ldhu	r2,12(r16)
2008edf4:	10c0020c 	andi	r3,r2,8
2008edf8:	100d883a 	mov	r6,r2
2008edfc:	18000f26 	beq	r3,zero,2008ee3c <__swsetup_r+0x7c>
2008ee00:	80c00417 	ldw	r3,16(r16)
2008ee04:	18001526 	beq	r3,zero,2008ee5c <__swsetup_r+0x9c>
2008ee08:	1100004c 	andi	r4,r2,1
2008ee0c:	20001c1e 	bne	r4,zero,2008ee80 <__swsetup_r+0xc0>
2008ee10:	1080008c 	andi	r2,r2,2
2008ee14:	1000291e 	bne	r2,zero,2008eebc <__swsetup_r+0xfc>
2008ee18:	80800517 	ldw	r2,20(r16)
2008ee1c:	80800215 	stw	r2,8(r16)
2008ee20:	18001c26 	beq	r3,zero,2008ee94 <__swsetup_r+0xd4>
2008ee24:	0005883a 	mov	r2,zero
2008ee28:	dfc00217 	ldw	ra,8(sp)
2008ee2c:	dc400117 	ldw	r17,4(sp)
2008ee30:	dc000017 	ldw	r16,0(sp)
2008ee34:	dec00304 	addi	sp,sp,12
2008ee38:	f800283a 	ret
2008ee3c:	3080040c 	andi	r2,r6,16
2008ee40:	10002e26 	beq	r2,zero,2008eefc <__swsetup_r+0x13c>
2008ee44:	3080010c 	andi	r2,r6,4
2008ee48:	10001e1e 	bne	r2,zero,2008eec4 <__swsetup_r+0x104>
2008ee4c:	80c00417 	ldw	r3,16(r16)
2008ee50:	30800214 	ori	r2,r6,8
2008ee54:	8080030d 	sth	r2,12(r16)
2008ee58:	183feb1e 	bne	r3,zero,2008ee08 <__flash_rwdata_start+0xffff3f9c>
2008ee5c:	1140a00c 	andi	r5,r2,640
2008ee60:	01008004 	movi	r4,512
2008ee64:	293fe826 	beq	r5,r4,2008ee08 <__flash_rwdata_start+0xffff3f9c>
2008ee68:	8809883a 	mov	r4,r17
2008ee6c:	800b883a 	mov	r5,r16
2008ee70:	0091b400 	call	20091b40 <__smakebuf_r>
2008ee74:	8080030b 	ldhu	r2,12(r16)
2008ee78:	80c00417 	ldw	r3,16(r16)
2008ee7c:	003fe206 	br	2008ee08 <__flash_rwdata_start+0xffff3f9c>
2008ee80:	80800517 	ldw	r2,20(r16)
2008ee84:	80000215 	stw	zero,8(r16)
2008ee88:	0085c83a 	sub	r2,zero,r2
2008ee8c:	80800615 	stw	r2,24(r16)
2008ee90:	183fe41e 	bne	r3,zero,2008ee24 <__flash_rwdata_start+0xffff3fb8>
2008ee94:	80c0030b 	ldhu	r3,12(r16)
2008ee98:	0005883a 	mov	r2,zero
2008ee9c:	1900200c 	andi	r4,r3,128
2008eea0:	203fe126 	beq	r4,zero,2008ee28 <__flash_rwdata_start+0xffff3fbc>
2008eea4:	18c01014 	ori	r3,r3,64
2008eea8:	80c0030d 	sth	r3,12(r16)
2008eeac:	00bfffc4 	movi	r2,-1
2008eeb0:	003fdd06 	br	2008ee28 <__flash_rwdata_start+0xffff3fbc>
2008eeb4:	0090fb40 	call	20090fb4 <__sinit>
2008eeb8:	003fcd06 	br	2008edf0 <__flash_rwdata_start+0xffff3f84>
2008eebc:	0005883a 	mov	r2,zero
2008eec0:	003fd606 	br	2008ee1c <__flash_rwdata_start+0xffff3fb0>
2008eec4:	81400c17 	ldw	r5,48(r16)
2008eec8:	28000626 	beq	r5,zero,2008eee4 <__swsetup_r+0x124>
2008eecc:	80801004 	addi	r2,r16,64
2008eed0:	28800326 	beq	r5,r2,2008eee0 <__swsetup_r+0x120>
2008eed4:	8809883a 	mov	r4,r17
2008eed8:	00911280 	call	20091128 <_free_r>
2008eedc:	8180030b 	ldhu	r6,12(r16)
2008eee0:	80000c15 	stw	zero,48(r16)
2008eee4:	80c00417 	ldw	r3,16(r16)
2008eee8:	00bff6c4 	movi	r2,-37
2008eeec:	118c703a 	and	r6,r2,r6
2008eef0:	80000115 	stw	zero,4(r16)
2008eef4:	80c00015 	stw	r3,0(r16)
2008eef8:	003fd506 	br	2008ee50 <__flash_rwdata_start+0xffff3fe4>
2008eefc:	00800244 	movi	r2,9
2008ef00:	88800015 	stw	r2,0(r17)
2008ef04:	30801014 	ori	r2,r6,64
2008ef08:	8080030d 	sth	r2,12(r16)
2008ef0c:	00bfffc4 	movi	r2,-1
2008ef10:	003fc506 	br	2008ee28 <__flash_rwdata_start+0xffff3fbc>

2008ef14 <__call_exitprocs>:
2008ef14:	00800034 	movhi	r2,0
2008ef18:	108a8b04 	addi	r2,r2,10796
2008ef1c:	10800017 	ldw	r2,0(r2)
2008ef20:	defff404 	addi	sp,sp,-48
2008ef24:	dd800815 	stw	r22,32(sp)
2008ef28:	d8800015 	stw	r2,0(sp)
2008ef2c:	10805204 	addi	r2,r2,328
2008ef30:	dd000615 	stw	r20,24(sp)
2008ef34:	dc800415 	stw	r18,16(sp)
2008ef38:	dfc00b15 	stw	ra,44(sp)
2008ef3c:	df000a15 	stw	fp,40(sp)
2008ef40:	ddc00915 	stw	r23,36(sp)
2008ef44:	dd400715 	stw	r21,28(sp)
2008ef48:	dcc00515 	stw	r19,20(sp)
2008ef4c:	dc400315 	stw	r17,12(sp)
2008ef50:	dc000215 	stw	r16,8(sp)
2008ef54:	2025883a 	mov	r18,r4
2008ef58:	2829883a 	mov	r20,r5
2008ef5c:	d8800115 	stw	r2,4(sp)
2008ef60:	05bfffc4 	movi	r22,-1
2008ef64:	d8800017 	ldw	r2,0(sp)
2008ef68:	14c05217 	ldw	r19,328(r2)
2008ef6c:	98001d26 	beq	r19,zero,2008efe4 <__call_exitprocs+0xd0>
2008ef70:	dd400117 	ldw	r21,4(sp)
2008ef74:	98800117 	ldw	r2,4(r19)
2008ef78:	173fffc4 	addi	fp,r2,-1
2008ef7c:	e0000d16 	blt	fp,zero,2008efb4 <__call_exitprocs+0xa0>
2008ef80:	14000044 	addi	r16,r2,1
2008ef84:	8421883a 	add	r16,r16,r16
2008ef88:	8421883a 	add	r16,r16,r16
2008ef8c:	84402004 	addi	r17,r16,128
2008ef90:	9c63883a 	add	r17,r19,r17
2008ef94:	9c21883a 	add	r16,r19,r16
2008ef98:	a0001e26 	beq	r20,zero,2008f014 <__call_exitprocs+0x100>
2008ef9c:	80804017 	ldw	r2,256(r16)
2008efa0:	15001c26 	beq	r2,r20,2008f014 <__call_exitprocs+0x100>
2008efa4:	e73fffc4 	addi	fp,fp,-1
2008efa8:	843fff04 	addi	r16,r16,-4
2008efac:	8c7fff04 	addi	r17,r17,-4
2008efb0:	e5bff91e 	bne	fp,r22,2008ef98 <__flash_rwdata_start+0xffff412c>
2008efb4:	00880274 	movhi	r2,8201
2008efb8:	10a78f04 	addi	r2,r2,-25028
2008efbc:	10000926 	beq	r2,zero,2008efe4 <__call_exitprocs+0xd0>
2008efc0:	98800117 	ldw	r2,4(r19)
2008efc4:	1000311e 	bne	r2,zero,2008f08c <__call_exitprocs+0x178>
2008efc8:	98800017 	ldw	r2,0(r19)
2008efcc:	10003426 	beq	r2,zero,2008f0a0 <__call_exitprocs+0x18c>
2008efd0:	9809883a 	mov	r4,r19
2008efd4:	a8800015 	stw	r2,0(r21)
2008efd8:	0089e3c0 	call	20089e3c <free>
2008efdc:	acc00017 	ldw	r19,0(r21)
2008efe0:	983fe41e 	bne	r19,zero,2008ef74 <__flash_rwdata_start+0xffff4108>
2008efe4:	dfc00b17 	ldw	ra,44(sp)
2008efe8:	df000a17 	ldw	fp,40(sp)
2008efec:	ddc00917 	ldw	r23,36(sp)
2008eff0:	dd800817 	ldw	r22,32(sp)
2008eff4:	dd400717 	ldw	r21,28(sp)
2008eff8:	dd000617 	ldw	r20,24(sp)
2008effc:	dcc00517 	ldw	r19,20(sp)
2008f000:	dc800417 	ldw	r18,16(sp)
2008f004:	dc400317 	ldw	r17,12(sp)
2008f008:	dc000217 	ldw	r16,8(sp)
2008f00c:	dec00c04 	addi	sp,sp,48
2008f010:	f800283a 	ret
2008f014:	98800117 	ldw	r2,4(r19)
2008f018:	80c00017 	ldw	r3,0(r16)
2008f01c:	10bfffc4 	addi	r2,r2,-1
2008f020:	17001526 	beq	r2,fp,2008f078 <__call_exitprocs+0x164>
2008f024:	80000015 	stw	zero,0(r16)
2008f028:	183fde26 	beq	r3,zero,2008efa4 <__flash_rwdata_start+0xffff4138>
2008f02c:	00800044 	movi	r2,1
2008f030:	1708983a 	sll	r4,r2,fp
2008f034:	98806217 	ldw	r2,392(r19)
2008f038:	9dc00117 	ldw	r23,4(r19)
2008f03c:	2084703a 	and	r2,r4,r2
2008f040:	1000061e 	bne	r2,zero,2008f05c <__call_exitprocs+0x148>
2008f044:	183ee83a 	callr	r3
2008f048:	98800117 	ldw	r2,4(r19)
2008f04c:	15ffc51e 	bne	r2,r23,2008ef64 <__flash_rwdata_start+0xffff40f8>
2008f050:	a8800017 	ldw	r2,0(r21)
2008f054:	14ffd326 	beq	r2,r19,2008efa4 <__flash_rwdata_start+0xffff4138>
2008f058:	003fc206 	br	2008ef64 <__flash_rwdata_start+0xffff40f8>
2008f05c:	98806317 	ldw	r2,396(r19)
2008f060:	2084703a 	and	r2,r4,r2
2008f064:	1000061e 	bne	r2,zero,2008f080 <__call_exitprocs+0x16c>
2008f068:	89400017 	ldw	r5,0(r17)
2008f06c:	9009883a 	mov	r4,r18
2008f070:	183ee83a 	callr	r3
2008f074:	003ff406 	br	2008f048 <__flash_rwdata_start+0xffff41dc>
2008f078:	9f000115 	stw	fp,4(r19)
2008f07c:	003fea06 	br	2008f028 <__flash_rwdata_start+0xffff41bc>
2008f080:	89000017 	ldw	r4,0(r17)
2008f084:	183ee83a 	callr	r3
2008f088:	003fef06 	br	2008f048 <__flash_rwdata_start+0xffff41dc>
2008f08c:	98800017 	ldw	r2,0(r19)
2008f090:	982b883a 	mov	r21,r19
2008f094:	1027883a 	mov	r19,r2
2008f098:	983fb61e 	bne	r19,zero,2008ef74 <__flash_rwdata_start+0xffff4108>
2008f09c:	003fd106 	br	2008efe4 <__flash_rwdata_start+0xffff4178>
2008f0a0:	0005883a 	mov	r2,zero
2008f0a4:	003ffa06 	br	2008f090 <__flash_rwdata_start+0xffff4224>

2008f0a8 <quorem>:
2008f0a8:	defff704 	addi	sp,sp,-36
2008f0ac:	dc800215 	stw	r18,8(sp)
2008f0b0:	20800417 	ldw	r2,16(r4)
2008f0b4:	2c800417 	ldw	r18,16(r5)
2008f0b8:	dfc00815 	stw	ra,32(sp)
2008f0bc:	ddc00715 	stw	r23,28(sp)
2008f0c0:	dd800615 	stw	r22,24(sp)
2008f0c4:	dd400515 	stw	r21,20(sp)
2008f0c8:	dd000415 	stw	r20,16(sp)
2008f0cc:	dcc00315 	stw	r19,12(sp)
2008f0d0:	dc400115 	stw	r17,4(sp)
2008f0d4:	dc000015 	stw	r16,0(sp)
2008f0d8:	14807116 	blt	r2,r18,2008f2a0 <quorem+0x1f8>
2008f0dc:	94bfffc4 	addi	r18,r18,-1
2008f0e0:	94ad883a 	add	r22,r18,r18
2008f0e4:	b5ad883a 	add	r22,r22,r22
2008f0e8:	2c400504 	addi	r17,r5,20
2008f0ec:	8da9883a 	add	r20,r17,r22
2008f0f0:	25400504 	addi	r21,r4,20
2008f0f4:	282f883a 	mov	r23,r5
2008f0f8:	adad883a 	add	r22,r21,r22
2008f0fc:	a1400017 	ldw	r5,0(r20)
2008f100:	2021883a 	mov	r16,r4
2008f104:	b1000017 	ldw	r4,0(r22)
2008f108:	29400044 	addi	r5,r5,1
2008f10c:	0086c280 	call	20086c28 <__udivsi3>
2008f110:	1027883a 	mov	r19,r2
2008f114:	10002c26 	beq	r2,zero,2008f1c8 <quorem+0x120>
2008f118:	a813883a 	mov	r9,r21
2008f11c:	8811883a 	mov	r8,r17
2008f120:	0009883a 	mov	r4,zero
2008f124:	000d883a 	mov	r6,zero
2008f128:	41c00017 	ldw	r7,0(r8)
2008f12c:	49400017 	ldw	r5,0(r9)
2008f130:	42000104 	addi	r8,r8,4
2008f134:	38bfffcc 	andi	r2,r7,65535
2008f138:	14c5383a 	mul	r2,r2,r19
2008f13c:	380ed43a 	srli	r7,r7,16
2008f140:	28ffffcc 	andi	r3,r5,65535
2008f144:	2085883a 	add	r2,r4,r2
2008f148:	1008d43a 	srli	r4,r2,16
2008f14c:	3ccf383a 	mul	r7,r7,r19
2008f150:	198d883a 	add	r6,r3,r6
2008f154:	10ffffcc 	andi	r3,r2,65535
2008f158:	30c7c83a 	sub	r3,r6,r3
2008f15c:	280ad43a 	srli	r5,r5,16
2008f160:	21c9883a 	add	r4,r4,r7
2008f164:	180dd43a 	srai	r6,r3,16
2008f168:	20bfffcc 	andi	r2,r4,65535
2008f16c:	288bc83a 	sub	r5,r5,r2
2008f170:	298b883a 	add	r5,r5,r6
2008f174:	280e943a 	slli	r7,r5,16
2008f178:	18ffffcc 	andi	r3,r3,65535
2008f17c:	2008d43a 	srli	r4,r4,16
2008f180:	38ceb03a 	or	r7,r7,r3
2008f184:	49c00015 	stw	r7,0(r9)
2008f188:	280dd43a 	srai	r6,r5,16
2008f18c:	4a400104 	addi	r9,r9,4
2008f190:	a23fe52e 	bgeu	r20,r8,2008f128 <__flash_rwdata_start+0xffff42bc>
2008f194:	b0800017 	ldw	r2,0(r22)
2008f198:	10000b1e 	bne	r2,zero,2008f1c8 <quorem+0x120>
2008f19c:	b0bfff04 	addi	r2,r22,-4
2008f1a0:	a880082e 	bgeu	r21,r2,2008f1c4 <quorem+0x11c>
2008f1a4:	b0ffff17 	ldw	r3,-4(r22)
2008f1a8:	18000326 	beq	r3,zero,2008f1b8 <quorem+0x110>
2008f1ac:	00000506 	br	2008f1c4 <quorem+0x11c>
2008f1b0:	10c00017 	ldw	r3,0(r2)
2008f1b4:	1800031e 	bne	r3,zero,2008f1c4 <quorem+0x11c>
2008f1b8:	10bfff04 	addi	r2,r2,-4
2008f1bc:	94bfffc4 	addi	r18,r18,-1
2008f1c0:	a8bffb36 	bltu	r21,r2,2008f1b0 <__flash_rwdata_start+0xffff4344>
2008f1c4:	84800415 	stw	r18,16(r16)
2008f1c8:	8009883a 	mov	r4,r16
2008f1cc:	b80b883a 	mov	r5,r23
2008f1d0:	00928100 	call	20092810 <__mcmp>
2008f1d4:	10002616 	blt	r2,zero,2008f270 <quorem+0x1c8>
2008f1d8:	9cc00044 	addi	r19,r19,1
2008f1dc:	a80d883a 	mov	r6,r21
2008f1e0:	000b883a 	mov	r5,zero
2008f1e4:	31000017 	ldw	r4,0(r6)
2008f1e8:	88800017 	ldw	r2,0(r17)
2008f1ec:	31800104 	addi	r6,r6,4
2008f1f0:	20ffffcc 	andi	r3,r4,65535
2008f1f4:	194b883a 	add	r5,r3,r5
2008f1f8:	10ffffcc 	andi	r3,r2,65535
2008f1fc:	28c7c83a 	sub	r3,r5,r3
2008f200:	1004d43a 	srli	r2,r2,16
2008f204:	2008d43a 	srli	r4,r4,16
2008f208:	180bd43a 	srai	r5,r3,16
2008f20c:	18ffffcc 	andi	r3,r3,65535
2008f210:	2089c83a 	sub	r4,r4,r2
2008f214:	2149883a 	add	r4,r4,r5
2008f218:	2004943a 	slli	r2,r4,16
2008f21c:	8c400104 	addi	r17,r17,4
2008f220:	200bd43a 	srai	r5,r4,16
2008f224:	10c6b03a 	or	r3,r2,r3
2008f228:	30ffff15 	stw	r3,-4(r6)
2008f22c:	a47fed2e 	bgeu	r20,r17,2008f1e4 <__flash_rwdata_start+0xffff4378>
2008f230:	9485883a 	add	r2,r18,r18
2008f234:	1085883a 	add	r2,r2,r2
2008f238:	a887883a 	add	r3,r21,r2
2008f23c:	18800017 	ldw	r2,0(r3)
2008f240:	10000b1e 	bne	r2,zero,2008f270 <quorem+0x1c8>
2008f244:	18bfff04 	addi	r2,r3,-4
2008f248:	a880082e 	bgeu	r21,r2,2008f26c <quorem+0x1c4>
2008f24c:	18ffff17 	ldw	r3,-4(r3)
2008f250:	18000326 	beq	r3,zero,2008f260 <quorem+0x1b8>
2008f254:	00000506 	br	2008f26c <quorem+0x1c4>
2008f258:	10c00017 	ldw	r3,0(r2)
2008f25c:	1800031e 	bne	r3,zero,2008f26c <quorem+0x1c4>
2008f260:	10bfff04 	addi	r2,r2,-4
2008f264:	94bfffc4 	addi	r18,r18,-1
2008f268:	a8bffb36 	bltu	r21,r2,2008f258 <__flash_rwdata_start+0xffff43ec>
2008f26c:	84800415 	stw	r18,16(r16)
2008f270:	9805883a 	mov	r2,r19
2008f274:	dfc00817 	ldw	ra,32(sp)
2008f278:	ddc00717 	ldw	r23,28(sp)
2008f27c:	dd800617 	ldw	r22,24(sp)
2008f280:	dd400517 	ldw	r21,20(sp)
2008f284:	dd000417 	ldw	r20,16(sp)
2008f288:	dcc00317 	ldw	r19,12(sp)
2008f28c:	dc800217 	ldw	r18,8(sp)
2008f290:	dc400117 	ldw	r17,4(sp)
2008f294:	dc000017 	ldw	r16,0(sp)
2008f298:	dec00904 	addi	sp,sp,36
2008f29c:	f800283a 	ret
2008f2a0:	0005883a 	mov	r2,zero
2008f2a4:	003ff306 	br	2008f274 <__flash_rwdata_start+0xffff4408>

2008f2a8 <_dtoa_r>:
2008f2a8:	20801017 	ldw	r2,64(r4)
2008f2ac:	deffde04 	addi	sp,sp,-136
2008f2b0:	dd401d15 	stw	r21,116(sp)
2008f2b4:	dcc01b15 	stw	r19,108(sp)
2008f2b8:	dc801a15 	stw	r18,104(sp)
2008f2bc:	dc401915 	stw	r17,100(sp)
2008f2c0:	dc001815 	stw	r16,96(sp)
2008f2c4:	dfc02115 	stw	ra,132(sp)
2008f2c8:	df002015 	stw	fp,128(sp)
2008f2cc:	ddc01f15 	stw	r23,124(sp)
2008f2d0:	dd801e15 	stw	r22,120(sp)
2008f2d4:	dd001c15 	stw	r20,112(sp)
2008f2d8:	d9c00315 	stw	r7,12(sp)
2008f2dc:	2021883a 	mov	r16,r4
2008f2e0:	302b883a 	mov	r21,r6
2008f2e4:	2825883a 	mov	r18,r5
2008f2e8:	dc402417 	ldw	r17,144(sp)
2008f2ec:	3027883a 	mov	r19,r6
2008f2f0:	10000826 	beq	r2,zero,2008f314 <_dtoa_r+0x6c>
2008f2f4:	21801117 	ldw	r6,68(r4)
2008f2f8:	00c00044 	movi	r3,1
2008f2fc:	100b883a 	mov	r5,r2
2008f300:	1986983a 	sll	r3,r3,r6
2008f304:	11800115 	stw	r6,4(r2)
2008f308:	10c00215 	stw	r3,8(r2)
2008f30c:	0091fe40 	call	20091fe4 <_Bfree>
2008f310:	80001015 	stw	zero,64(r16)
2008f314:	a8002d16 	blt	r21,zero,2008f3cc <_dtoa_r+0x124>
2008f318:	88000015 	stw	zero,0(r17)
2008f31c:	a8dffc2c 	andhi	r3,r21,32752
2008f320:	009ffc34 	movhi	r2,32752
2008f324:	18801b26 	beq	r3,r2,2008f394 <_dtoa_r+0xec>
2008f328:	9009883a 	mov	r4,r18
2008f32c:	980b883a 	mov	r5,r19
2008f330:	000d883a 	mov	r6,zero
2008f334:	000f883a 	mov	r7,zero
2008f338:	00973d40 	call	200973d4 <__eqdf2>
2008f33c:	10002a1e 	bne	r2,zero,2008f3e8 <_dtoa_r+0x140>
2008f340:	d8c02317 	ldw	r3,140(sp)
2008f344:	d9002517 	ldw	r4,148(sp)
2008f348:	00800044 	movi	r2,1
2008f34c:	18800015 	stw	r2,0(r3)
2008f350:	2001a226 	beq	r4,zero,2008f9dc <_dtoa_r+0x734>
2008f354:	00800034 	movhi	r2,0
2008f358:	1081e244 	addi	r2,r2,1929
2008f35c:	20800015 	stw	r2,0(r4)
2008f360:	10bfffc4 	addi	r2,r2,-1
2008f364:	dfc02117 	ldw	ra,132(sp)
2008f368:	df002017 	ldw	fp,128(sp)
2008f36c:	ddc01f17 	ldw	r23,124(sp)
2008f370:	dd801e17 	ldw	r22,120(sp)
2008f374:	dd401d17 	ldw	r21,116(sp)
2008f378:	dd001c17 	ldw	r20,112(sp)
2008f37c:	dcc01b17 	ldw	r19,108(sp)
2008f380:	dc801a17 	ldw	r18,104(sp)
2008f384:	dc401917 	ldw	r17,100(sp)
2008f388:	dc001817 	ldw	r16,96(sp)
2008f38c:	dec02204 	addi	sp,sp,136
2008f390:	f800283a 	ret
2008f394:	d8c02317 	ldw	r3,140(sp)
2008f398:	0089c3c4 	movi	r2,9999
2008f39c:	18800015 	stw	r2,0(r3)
2008f3a0:	90017c26 	beq	r18,zero,2008f994 <_dtoa_r+0x6ec>
2008f3a4:	00800034 	movhi	r2,0
2008f3a8:	1081f604 	addi	r2,r2,2008
2008f3ac:	d9002517 	ldw	r4,148(sp)
2008f3b0:	203fec26 	beq	r4,zero,2008f364 <__flash_rwdata_start+0xffff44f8>
2008f3b4:	10c000c7 	ldb	r3,3(r2)
2008f3b8:	18017d1e 	bne	r3,zero,2008f9b0 <_dtoa_r+0x708>
2008f3bc:	10c000c4 	addi	r3,r2,3
2008f3c0:	d9802517 	ldw	r6,148(sp)
2008f3c4:	30c00015 	stw	r3,0(r6)
2008f3c8:	003fe606 	br	2008f364 <__flash_rwdata_start+0xffff44f8>
2008f3cc:	04e00034 	movhi	r19,32768
2008f3d0:	9cffffc4 	addi	r19,r19,-1
2008f3d4:	00800044 	movi	r2,1
2008f3d8:	ace6703a 	and	r19,r21,r19
2008f3dc:	88800015 	stw	r2,0(r17)
2008f3e0:	982b883a 	mov	r21,r19
2008f3e4:	003fcd06 	br	2008f31c <__flash_rwdata_start+0xffff44b0>
2008f3e8:	d8800204 	addi	r2,sp,8
2008f3ec:	a822d53a 	srli	r17,r21,20
2008f3f0:	d8800015 	stw	r2,0(sp)
2008f3f4:	8009883a 	mov	r4,r16
2008f3f8:	900b883a 	mov	r5,r18
2008f3fc:	980d883a 	mov	r6,r19
2008f400:	d9c00104 	addi	r7,sp,4
2008f404:	0092b840 	call	20092b84 <__d2b>
2008f408:	1039883a 	mov	fp,r2
2008f40c:	88016a1e 	bne	r17,zero,2008f9b8 <_dtoa_r+0x710>
2008f410:	dd000217 	ldw	r20,8(sp)
2008f414:	dc400117 	ldw	r17,4(sp)
2008f418:	00befbc4 	movi	r2,-1041
2008f41c:	a463883a 	add	r17,r20,r17
2008f420:	8882ea16 	blt	r17,r2,2008ffcc <_dtoa_r+0xd24>
2008f424:	00bf0384 	movi	r2,-1010
2008f428:	1445c83a 	sub	r2,r2,r17
2008f42c:	89010484 	addi	r4,r17,1042
2008f430:	a8aa983a 	sll	r21,r21,r2
2008f434:	9108d83a 	srl	r4,r18,r4
2008f438:	a908b03a 	or	r4,r21,r4
2008f43c:	00898700 	call	20089870 <__floatunsidf>
2008f440:	017f8434 	movhi	r5,65040
2008f444:	01800044 	movi	r6,1
2008f448:	1009883a 	mov	r4,r2
2008f44c:	194b883a 	add	r5,r3,r5
2008f450:	8c7fffc4 	addi	r17,r17,-1
2008f454:	d9800f15 	stw	r6,60(sp)
2008f458:	000d883a 	mov	r6,zero
2008f45c:	01cffe34 	movhi	r7,16376
2008f460:	0088e480 	call	20088e48 <__subdf3>
2008f464:	0198dbf4 	movhi	r6,25455
2008f468:	01cff4f4 	movhi	r7,16339
2008f46c:	1009883a 	mov	r4,r2
2008f470:	180b883a 	mov	r5,r3
2008f474:	3190d844 	addi	r6,r6,17249
2008f478:	39e1e9c4 	addi	r7,r7,-30809
2008f47c:	00887240 	call	20088724 <__muldf3>
2008f480:	01a2d874 	movhi	r6,35681
2008f484:	01cff1f4 	movhi	r7,16327
2008f488:	180b883a 	mov	r5,r3
2008f48c:	31b22cc4 	addi	r6,r6,-14157
2008f490:	39e28a04 	addi	r7,r7,-30168
2008f494:	1009883a 	mov	r4,r2
2008f498:	00875bc0 	call	200875bc <__adddf3>
2008f49c:	8809883a 	mov	r4,r17
2008f4a0:	102d883a 	mov	r22,r2
2008f4a4:	182b883a 	mov	r21,r3
2008f4a8:	00897a00 	call	200897a0 <__floatsidf>
2008f4ac:	019427f4 	movhi	r6,20639
2008f4b0:	01cff4f4 	movhi	r7,16339
2008f4b4:	1009883a 	mov	r4,r2
2008f4b8:	180b883a 	mov	r5,r3
2008f4bc:	319e7ec4 	addi	r6,r6,31227
2008f4c0:	39d104c4 	addi	r7,r7,17427
2008f4c4:	00887240 	call	20088724 <__muldf3>
2008f4c8:	b009883a 	mov	r4,r22
2008f4cc:	a80b883a 	mov	r5,r21
2008f4d0:	100d883a 	mov	r6,r2
2008f4d4:	180f883a 	mov	r7,r3
2008f4d8:	00875bc0 	call	200875bc <__adddf3>
2008f4dc:	1009883a 	mov	r4,r2
2008f4e0:	180b883a 	mov	r5,r3
2008f4e4:	102d883a 	mov	r22,r2
2008f4e8:	182b883a 	mov	r21,r3
2008f4ec:	00897180 	call	20089718 <__fixdfsi>
2008f4f0:	b009883a 	mov	r4,r22
2008f4f4:	a80b883a 	mov	r5,r21
2008f4f8:	000d883a 	mov	r6,zero
2008f4fc:	000f883a 	mov	r7,zero
2008f500:	d8800515 	stw	r2,20(sp)
2008f504:	00975380 	call	20097538 <__ledf2>
2008f508:	10023116 	blt	r2,zero,2008fdd0 <_dtoa_r+0xb28>
2008f50c:	d8c00517 	ldw	r3,20(sp)
2008f510:	00800584 	movi	r2,22
2008f514:	10c21f36 	bltu	r2,r3,2008fd94 <_dtoa_r+0xaec>
2008f518:	180490fa 	slli	r2,r3,3
2008f51c:	00c00034 	movhi	r3,0
2008f520:	18c21104 	addi	r3,r3,2116
2008f524:	1885883a 	add	r2,r3,r2
2008f528:	11000017 	ldw	r4,0(r2)
2008f52c:	11400117 	ldw	r5,4(r2)
2008f530:	900d883a 	mov	r6,r18
2008f534:	980f883a 	mov	r7,r19
2008f538:	00974580 	call	20097458 <__gedf2>
2008f53c:	0082a70e 	bge	zero,r2,2008ffdc <_dtoa_r+0xd34>
2008f540:	d9000517 	ldw	r4,20(sp)
2008f544:	d8000d15 	stw	zero,52(sp)
2008f548:	213fffc4 	addi	r4,r4,-1
2008f54c:	d9000515 	stw	r4,20(sp)
2008f550:	a463c83a 	sub	r17,r20,r17
2008f554:	8dbfffc4 	addi	r22,r17,-1
2008f558:	b0021916 	blt	r22,zero,2008fdc0 <_dtoa_r+0xb18>
2008f55c:	d8000815 	stw	zero,32(sp)
2008f560:	d8800517 	ldw	r2,20(sp)
2008f564:	10020e16 	blt	r2,zero,2008fda0 <_dtoa_r+0xaf8>
2008f568:	b0ad883a 	add	r22,r22,r2
2008f56c:	d8800a15 	stw	r2,40(sp)
2008f570:	d8000915 	stw	zero,36(sp)
2008f574:	d8c00317 	ldw	r3,12(sp)
2008f578:	00800244 	movi	r2,9
2008f57c:	10c11a36 	bltu	r2,r3,2008f9e8 <_dtoa_r+0x740>
2008f580:	00800144 	movi	r2,5
2008f584:	10c4fc0e 	bge	r2,r3,20090978 <_dtoa_r+0x16d0>
2008f588:	18ffff04 	addi	r3,r3,-4
2008f58c:	d8c00315 	stw	r3,12(sp)
2008f590:	0029883a 	mov	r20,zero
2008f594:	d9800317 	ldw	r6,12(sp)
2008f598:	008000c4 	movi	r2,3
2008f59c:	3083bd26 	beq	r6,r2,20090494 <_dtoa_r+0x11ec>
2008f5a0:	1183670e 	bge	r2,r6,20090340 <_dtoa_r+0x1098>
2008f5a4:	d8c00317 	ldw	r3,12(sp)
2008f5a8:	00800104 	movi	r2,4
2008f5ac:	1882e726 	beq	r3,r2,2009014c <_dtoa_r+0xea4>
2008f5b0:	00800144 	movi	r2,5
2008f5b4:	1884f21e 	bne	r3,r2,20090980 <_dtoa_r+0x16d8>
2008f5b8:	00800044 	movi	r2,1
2008f5bc:	d8800b15 	stw	r2,44(sp)
2008f5c0:	d8c02217 	ldw	r3,136(sp)
2008f5c4:	d9000517 	ldw	r4,20(sp)
2008f5c8:	1907883a 	add	r3,r3,r4
2008f5cc:	19800044 	addi	r6,r3,1
2008f5d0:	d8c00c15 	stw	r3,48(sp)
2008f5d4:	d9800615 	stw	r6,24(sp)
2008f5d8:	0183c30e 	bge	zero,r6,200904e8 <_dtoa_r+0x1240>
2008f5dc:	d9800617 	ldw	r6,24(sp)
2008f5e0:	3023883a 	mov	r17,r6
2008f5e4:	80001115 	stw	zero,68(r16)
2008f5e8:	008005c4 	movi	r2,23
2008f5ec:	1184f62e 	bgeu	r2,r6,200909c8 <_dtoa_r+0x1720>
2008f5f0:	00c00044 	movi	r3,1
2008f5f4:	00800104 	movi	r2,4
2008f5f8:	1085883a 	add	r2,r2,r2
2008f5fc:	11000504 	addi	r4,r2,20
2008f600:	180b883a 	mov	r5,r3
2008f604:	18c00044 	addi	r3,r3,1
2008f608:	313ffb2e 	bgeu	r6,r4,2008f5f8 <__flash_rwdata_start+0xffff478c>
2008f60c:	81401115 	stw	r5,68(r16)
2008f610:	8009883a 	mov	r4,r16
2008f614:	0091f3c0 	call	20091f3c <_Balloc>
2008f618:	d8800715 	stw	r2,28(sp)
2008f61c:	80801015 	stw	r2,64(r16)
2008f620:	00800384 	movi	r2,14
2008f624:	1440fd36 	bltu	r2,r17,2008fa1c <_dtoa_r+0x774>
2008f628:	a000fc26 	beq	r20,zero,2008fa1c <_dtoa_r+0x774>
2008f62c:	d8800517 	ldw	r2,20(sp)
2008f630:	0083b90e 	bge	zero,r2,20090518 <_dtoa_r+0x1270>
2008f634:	d8c00517 	ldw	r3,20(sp)
2008f638:	108003cc 	andi	r2,r2,15
2008f63c:	100490fa 	slli	r2,r2,3
2008f640:	182fd13a 	srai	r23,r3,4
2008f644:	00c00034 	movhi	r3,0
2008f648:	18c21104 	addi	r3,r3,2116
2008f64c:	1885883a 	add	r2,r3,r2
2008f650:	b8c0040c 	andi	r3,r23,16
2008f654:	12c00017 	ldw	r11,0(r2)
2008f658:	12800117 	ldw	r10,4(r2)
2008f65c:	18039726 	beq	r3,zero,200904bc <_dtoa_r+0x1214>
2008f660:	00800034 	movhi	r2,0
2008f664:	10820704 	addi	r2,r2,2076
2008f668:	11800817 	ldw	r6,32(r2)
2008f66c:	11c00917 	ldw	r7,36(r2)
2008f670:	9009883a 	mov	r4,r18
2008f674:	980b883a 	mov	r5,r19
2008f678:	da801615 	stw	r10,88(sp)
2008f67c:	dac01515 	stw	r11,84(sp)
2008f680:	0087e580 	call	20087e58 <__divdf3>
2008f684:	da801617 	ldw	r10,88(sp)
2008f688:	dac01517 	ldw	r11,84(sp)
2008f68c:	bdc003cc 	andi	r23,r23,15
2008f690:	044000c4 	movi	r17,3
2008f694:	d8800e15 	stw	r2,56(sp)
2008f698:	182b883a 	mov	r21,r3
2008f69c:	b8001126 	beq	r23,zero,2008f6e4 <_dtoa_r+0x43c>
2008f6a0:	05000034 	movhi	r20,0
2008f6a4:	a5020704 	addi	r20,r20,2076
2008f6a8:	5805883a 	mov	r2,r11
2008f6ac:	5007883a 	mov	r3,r10
2008f6b0:	b980004c 	andi	r6,r23,1
2008f6b4:	1009883a 	mov	r4,r2
2008f6b8:	b82fd07a 	srai	r23,r23,1
2008f6bc:	180b883a 	mov	r5,r3
2008f6c0:	30000426 	beq	r6,zero,2008f6d4 <_dtoa_r+0x42c>
2008f6c4:	a1800017 	ldw	r6,0(r20)
2008f6c8:	a1c00117 	ldw	r7,4(r20)
2008f6cc:	8c400044 	addi	r17,r17,1
2008f6d0:	00887240 	call	20088724 <__muldf3>
2008f6d4:	a5000204 	addi	r20,r20,8
2008f6d8:	b83ff51e 	bne	r23,zero,2008f6b0 <__flash_rwdata_start+0xffff4844>
2008f6dc:	1017883a 	mov	r11,r2
2008f6e0:	1815883a 	mov	r10,r3
2008f6e4:	d9000e17 	ldw	r4,56(sp)
2008f6e8:	a80b883a 	mov	r5,r21
2008f6ec:	580d883a 	mov	r6,r11
2008f6f0:	500f883a 	mov	r7,r10
2008f6f4:	0087e580 	call	20087e58 <__divdf3>
2008f6f8:	1029883a 	mov	r20,r2
2008f6fc:	182b883a 	mov	r21,r3
2008f700:	d9800d17 	ldw	r6,52(sp)
2008f704:	30000626 	beq	r6,zero,2008f720 <_dtoa_r+0x478>
2008f708:	a009883a 	mov	r4,r20
2008f70c:	a80b883a 	mov	r5,r21
2008f710:	000d883a 	mov	r6,zero
2008f714:	01cffc34 	movhi	r7,16368
2008f718:	00975380 	call	20097538 <__ledf2>
2008f71c:	10043216 	blt	r2,zero,200907e8 <_dtoa_r+0x1540>
2008f720:	8809883a 	mov	r4,r17
2008f724:	00897a00 	call	200897a0 <__floatsidf>
2008f728:	1009883a 	mov	r4,r2
2008f72c:	180b883a 	mov	r5,r3
2008f730:	a00d883a 	mov	r6,r20
2008f734:	a80f883a 	mov	r7,r21
2008f738:	00887240 	call	20088724 <__muldf3>
2008f73c:	000d883a 	mov	r6,zero
2008f740:	1009883a 	mov	r4,r2
2008f744:	180b883a 	mov	r5,r3
2008f748:	01d00734 	movhi	r7,16412
2008f74c:	00875bc0 	call	200875bc <__adddf3>
2008f750:	1023883a 	mov	r17,r2
2008f754:	d9800617 	ldw	r6,24(sp)
2008f758:	00bf3034 	movhi	r2,64704
2008f75c:	1885883a 	add	r2,r3,r2
2008f760:	d8800e15 	stw	r2,56(sp)
2008f764:	30032e26 	beq	r6,zero,20090420 <_dtoa_r+0x1178>
2008f768:	d8c00517 	ldw	r3,20(sp)
2008f76c:	da800617 	ldw	r10,24(sp)
2008f770:	d8c01215 	stw	r3,72(sp)
2008f774:	d9000b17 	ldw	r4,44(sp)
2008f778:	2003b026 	beq	r4,zero,2009063c <_dtoa_r+0x1394>
2008f77c:	50bfffc4 	addi	r2,r10,-1
2008f780:	100490fa 	slli	r2,r2,3
2008f784:	00c00034 	movhi	r3,0
2008f788:	18c21104 	addi	r3,r3,2116
2008f78c:	1885883a 	add	r2,r3,r2
2008f790:	11800017 	ldw	r6,0(r2)
2008f794:	11c00117 	ldw	r7,4(r2)
2008f798:	d8800717 	ldw	r2,28(sp)
2008f79c:	0009883a 	mov	r4,zero
2008f7a0:	014ff834 	movhi	r5,16352
2008f7a4:	da801615 	stw	r10,88(sp)
2008f7a8:	15c00044 	addi	r23,r2,1
2008f7ac:	0087e580 	call	20087e58 <__divdf3>
2008f7b0:	d9c00e17 	ldw	r7,56(sp)
2008f7b4:	880d883a 	mov	r6,r17
2008f7b8:	1009883a 	mov	r4,r2
2008f7bc:	180b883a 	mov	r5,r3
2008f7c0:	0088e480 	call	20088e48 <__subdf3>
2008f7c4:	a80b883a 	mov	r5,r21
2008f7c8:	a009883a 	mov	r4,r20
2008f7cc:	d8c01015 	stw	r3,64(sp)
2008f7d0:	d8800e15 	stw	r2,56(sp)
2008f7d4:	00897180 	call	20089718 <__fixdfsi>
2008f7d8:	1009883a 	mov	r4,r2
2008f7dc:	d8801715 	stw	r2,92(sp)
2008f7e0:	00897a00 	call	200897a0 <__floatsidf>
2008f7e4:	a009883a 	mov	r4,r20
2008f7e8:	a80b883a 	mov	r5,r21
2008f7ec:	100d883a 	mov	r6,r2
2008f7f0:	180f883a 	mov	r7,r3
2008f7f4:	0088e480 	call	20088e48 <__subdf3>
2008f7f8:	da001717 	ldw	r8,92(sp)
2008f7fc:	1829883a 	mov	r20,r3
2008f800:	d8c00717 	ldw	r3,28(sp)
2008f804:	d9000e17 	ldw	r4,56(sp)
2008f808:	d9401017 	ldw	r5,64(sp)
2008f80c:	42000c04 	addi	r8,r8,48
2008f810:	1023883a 	mov	r17,r2
2008f814:	1a000005 	stb	r8,0(r3)
2008f818:	880d883a 	mov	r6,r17
2008f81c:	a00f883a 	mov	r7,r20
2008f820:	402b883a 	mov	r21,r8
2008f824:	00974580 	call	20097458 <__gedf2>
2008f828:	00844516 	blt	zero,r2,20090940 <_dtoa_r+0x1698>
2008f82c:	0009883a 	mov	r4,zero
2008f830:	014ffc34 	movhi	r5,16368
2008f834:	880d883a 	mov	r6,r17
2008f838:	a00f883a 	mov	r7,r20
2008f83c:	0088e480 	call	20088e48 <__subdf3>
2008f840:	d9000e17 	ldw	r4,56(sp)
2008f844:	d9401017 	ldw	r5,64(sp)
2008f848:	100d883a 	mov	r6,r2
2008f84c:	180f883a 	mov	r7,r3
2008f850:	00974580 	call	20097458 <__gedf2>
2008f854:	da801617 	ldw	r10,88(sp)
2008f858:	00843616 	blt	zero,r2,20090934 <_dtoa_r+0x168c>
2008f85c:	00800044 	movi	r2,1
2008f860:	12806e0e 	bge	r2,r10,2008fa1c <_dtoa_r+0x774>
2008f864:	d9000717 	ldw	r4,28(sp)
2008f868:	dd801315 	stw	r22,76(sp)
2008f86c:	dc001115 	stw	r16,68(sp)
2008f870:	2295883a 	add	r10,r4,r10
2008f874:	dcc01415 	stw	r19,80(sp)
2008f878:	502d883a 	mov	r22,r10
2008f87c:	dcc01017 	ldw	r19,64(sp)
2008f880:	b821883a 	mov	r16,r23
2008f884:	dc801015 	stw	r18,64(sp)
2008f888:	dc800e17 	ldw	r18,56(sp)
2008f88c:	00000906 	br	2008f8b4 <_dtoa_r+0x60c>
2008f890:	0088e480 	call	20088e48 <__subdf3>
2008f894:	1009883a 	mov	r4,r2
2008f898:	180b883a 	mov	r5,r3
2008f89c:	900d883a 	mov	r6,r18
2008f8a0:	980f883a 	mov	r7,r19
2008f8a4:	00975380 	call	20097538 <__ledf2>
2008f8a8:	10040e16 	blt	r2,zero,200908e4 <_dtoa_r+0x163c>
2008f8ac:	b821883a 	mov	r16,r23
2008f8b0:	bd841026 	beq	r23,r22,200908f4 <_dtoa_r+0x164c>
2008f8b4:	9009883a 	mov	r4,r18
2008f8b8:	980b883a 	mov	r5,r19
2008f8bc:	000d883a 	mov	r6,zero
2008f8c0:	01d00934 	movhi	r7,16420
2008f8c4:	00887240 	call	20088724 <__muldf3>
2008f8c8:	000d883a 	mov	r6,zero
2008f8cc:	01d00934 	movhi	r7,16420
2008f8d0:	8809883a 	mov	r4,r17
2008f8d4:	a00b883a 	mov	r5,r20
2008f8d8:	1025883a 	mov	r18,r2
2008f8dc:	1827883a 	mov	r19,r3
2008f8e0:	00887240 	call	20088724 <__muldf3>
2008f8e4:	180b883a 	mov	r5,r3
2008f8e8:	1009883a 	mov	r4,r2
2008f8ec:	1823883a 	mov	r17,r3
2008f8f0:	1029883a 	mov	r20,r2
2008f8f4:	00897180 	call	20089718 <__fixdfsi>
2008f8f8:	1009883a 	mov	r4,r2
2008f8fc:	102b883a 	mov	r21,r2
2008f900:	00897a00 	call	200897a0 <__floatsidf>
2008f904:	a009883a 	mov	r4,r20
2008f908:	880b883a 	mov	r5,r17
2008f90c:	100d883a 	mov	r6,r2
2008f910:	180f883a 	mov	r7,r3
2008f914:	0088e480 	call	20088e48 <__subdf3>
2008f918:	ad400c04 	addi	r21,r21,48
2008f91c:	1009883a 	mov	r4,r2
2008f920:	180b883a 	mov	r5,r3
2008f924:	900d883a 	mov	r6,r18
2008f928:	980f883a 	mov	r7,r19
2008f92c:	85400005 	stb	r21,0(r16)
2008f930:	1023883a 	mov	r17,r2
2008f934:	1829883a 	mov	r20,r3
2008f938:	00975380 	call	20097538 <__ledf2>
2008f93c:	bdc00044 	addi	r23,r23,1
2008f940:	0009883a 	mov	r4,zero
2008f944:	014ffc34 	movhi	r5,16368
2008f948:	880d883a 	mov	r6,r17
2008f94c:	a00f883a 	mov	r7,r20
2008f950:	103fcf0e 	bge	r2,zero,2008f890 <__flash_rwdata_start+0xffff4a24>
2008f954:	d9801217 	ldw	r6,72(sp)
2008f958:	dc001117 	ldw	r16,68(sp)
2008f95c:	d9800515 	stw	r6,20(sp)
2008f960:	8009883a 	mov	r4,r16
2008f964:	e00b883a 	mov	r5,fp
2008f968:	0091fe40 	call	20091fe4 <_Bfree>
2008f96c:	d8c00517 	ldw	r3,20(sp)
2008f970:	d9002317 	ldw	r4,140(sp)
2008f974:	d9802517 	ldw	r6,148(sp)
2008f978:	b8000005 	stb	zero,0(r23)
2008f97c:	18800044 	addi	r2,r3,1
2008f980:	20800015 	stw	r2,0(r4)
2008f984:	30027226 	beq	r6,zero,20090350 <_dtoa_r+0x10a8>
2008f988:	35c00015 	stw	r23,0(r6)
2008f98c:	d8800717 	ldw	r2,28(sp)
2008f990:	003e7406 	br	2008f364 <__flash_rwdata_start+0xffff44f8>
2008f994:	00800434 	movhi	r2,16
2008f998:	10bfffc4 	addi	r2,r2,-1
2008f99c:	a8aa703a 	and	r21,r21,r2
2008f9a0:	a83e801e 	bne	r21,zero,2008f3a4 <__flash_rwdata_start+0xffff4538>
2008f9a4:	00800034 	movhi	r2,0
2008f9a8:	1081f304 	addi	r2,r2,1996
2008f9ac:	003e7f06 	br	2008f3ac <__flash_rwdata_start+0xffff4540>
2008f9b0:	10c00204 	addi	r3,r2,8
2008f9b4:	003e8206 	br	2008f3c0 <__flash_rwdata_start+0xffff4554>
2008f9b8:	01400434 	movhi	r5,16
2008f9bc:	297fffc4 	addi	r5,r5,-1
2008f9c0:	994a703a 	and	r5,r19,r5
2008f9c4:	9009883a 	mov	r4,r18
2008f9c8:	8c7f0044 	addi	r17,r17,-1023
2008f9cc:	294ffc34 	orhi	r5,r5,16368
2008f9d0:	dd000217 	ldw	r20,8(sp)
2008f9d4:	d8000f15 	stw	zero,60(sp)
2008f9d8:	003e9f06 	br	2008f458 <__flash_rwdata_start+0xffff45ec>
2008f9dc:	00800034 	movhi	r2,0
2008f9e0:	1081e204 	addi	r2,r2,1928
2008f9e4:	003e5f06 	br	2008f364 <__flash_rwdata_start+0xffff44f8>
2008f9e8:	80001115 	stw	zero,68(r16)
2008f9ec:	8009883a 	mov	r4,r16
2008f9f0:	000b883a 	mov	r5,zero
2008f9f4:	0091f3c0 	call	20091f3c <_Balloc>
2008f9f8:	01bfffc4 	movi	r6,-1
2008f9fc:	d8800715 	stw	r2,28(sp)
2008fa00:	80801015 	stw	r2,64(r16)
2008fa04:	00800044 	movi	r2,1
2008fa08:	d9800c15 	stw	r6,48(sp)
2008fa0c:	d8800b15 	stw	r2,44(sp)
2008fa10:	d9800615 	stw	r6,24(sp)
2008fa14:	d8002215 	stw	zero,136(sp)
2008fa18:	d8000315 	stw	zero,12(sp)
2008fa1c:	d8800117 	ldw	r2,4(sp)
2008fa20:	10008e16 	blt	r2,zero,2008fc5c <_dtoa_r+0x9b4>
2008fa24:	d9000517 	ldw	r4,20(sp)
2008fa28:	00c00384 	movi	r3,14
2008fa2c:	19008b16 	blt	r3,r4,2008fc5c <_dtoa_r+0x9b4>
2008fa30:	200490fa 	slli	r2,r4,3
2008fa34:	00c00034 	movhi	r3,0
2008fa38:	d9802217 	ldw	r6,136(sp)
2008fa3c:	18c21104 	addi	r3,r3,2116
2008fa40:	1885883a 	add	r2,r3,r2
2008fa44:	14400017 	ldw	r17,0(r2)
2008fa48:	15000117 	ldw	r20,4(r2)
2008fa4c:	3001c716 	blt	r6,zero,2009016c <_dtoa_r+0xec4>
2008fa50:	880d883a 	mov	r6,r17
2008fa54:	a00f883a 	mov	r7,r20
2008fa58:	9009883a 	mov	r4,r18
2008fa5c:	980b883a 	mov	r5,r19
2008fa60:	0087e580 	call	20087e58 <__divdf3>
2008fa64:	180b883a 	mov	r5,r3
2008fa68:	1009883a 	mov	r4,r2
2008fa6c:	00897180 	call	20089718 <__fixdfsi>
2008fa70:	1009883a 	mov	r4,r2
2008fa74:	102d883a 	mov	r22,r2
2008fa78:	00897a00 	call	200897a0 <__floatsidf>
2008fa7c:	1009883a 	mov	r4,r2
2008fa80:	180b883a 	mov	r5,r3
2008fa84:	880d883a 	mov	r6,r17
2008fa88:	a00f883a 	mov	r7,r20
2008fa8c:	00887240 	call	20088724 <__muldf3>
2008fa90:	9009883a 	mov	r4,r18
2008fa94:	980b883a 	mov	r5,r19
2008fa98:	100d883a 	mov	r6,r2
2008fa9c:	180f883a 	mov	r7,r3
2008faa0:	0088e480 	call	20088e48 <__subdf3>
2008faa4:	d9000717 	ldw	r4,28(sp)
2008faa8:	d9800617 	ldw	r6,24(sp)
2008faac:	180b883a 	mov	r5,r3
2008fab0:	b0c00c04 	addi	r3,r22,48
2008fab4:	20c00005 	stb	r3,0(r4)
2008fab8:	25c00044 	addi	r23,r4,1
2008fabc:	01000044 	movi	r4,1
2008fac0:	1011883a 	mov	r8,r2
2008fac4:	2807883a 	mov	r3,r5
2008fac8:	31003d26 	beq	r6,r4,2008fbc0 <_dtoa_r+0x918>
2008facc:	000d883a 	mov	r6,zero
2008fad0:	01d00934 	movhi	r7,16420
2008fad4:	1009883a 	mov	r4,r2
2008fad8:	00887240 	call	20088724 <__muldf3>
2008fadc:	1009883a 	mov	r4,r2
2008fae0:	180b883a 	mov	r5,r3
2008fae4:	000d883a 	mov	r6,zero
2008fae8:	000f883a 	mov	r7,zero
2008faec:	1027883a 	mov	r19,r2
2008faf0:	182b883a 	mov	r21,r3
2008faf4:	00973d40 	call	200973d4 <__eqdf2>
2008faf8:	103f9926 	beq	r2,zero,2008f960 <__flash_rwdata_start+0xffff4af4>
2008fafc:	d8c00617 	ldw	r3,24(sp)
2008fb00:	d9000717 	ldw	r4,28(sp)
2008fb04:	b825883a 	mov	r18,r23
2008fb08:	18bfffc4 	addi	r2,r3,-1
2008fb0c:	20ad883a 	add	r22,r4,r2
2008fb10:	dc000315 	stw	r16,12(sp)
2008fb14:	00000a06 	br	2008fb40 <_dtoa_r+0x898>
2008fb18:	00887240 	call	20088724 <__muldf3>
2008fb1c:	1009883a 	mov	r4,r2
2008fb20:	180b883a 	mov	r5,r3
2008fb24:	000d883a 	mov	r6,zero
2008fb28:	000f883a 	mov	r7,zero
2008fb2c:	1027883a 	mov	r19,r2
2008fb30:	182b883a 	mov	r21,r3
2008fb34:	b825883a 	mov	r18,r23
2008fb38:	00973d40 	call	200973d4 <__eqdf2>
2008fb3c:	10022626 	beq	r2,zero,200903d8 <_dtoa_r+0x1130>
2008fb40:	880d883a 	mov	r6,r17
2008fb44:	a00f883a 	mov	r7,r20
2008fb48:	9809883a 	mov	r4,r19
2008fb4c:	a80b883a 	mov	r5,r21
2008fb50:	0087e580 	call	20087e58 <__divdf3>
2008fb54:	180b883a 	mov	r5,r3
2008fb58:	1009883a 	mov	r4,r2
2008fb5c:	00897180 	call	20089718 <__fixdfsi>
2008fb60:	1009883a 	mov	r4,r2
2008fb64:	1021883a 	mov	r16,r2
2008fb68:	00897a00 	call	200897a0 <__floatsidf>
2008fb6c:	1009883a 	mov	r4,r2
2008fb70:	180b883a 	mov	r5,r3
2008fb74:	880d883a 	mov	r6,r17
2008fb78:	a00f883a 	mov	r7,r20
2008fb7c:	00887240 	call	20088724 <__muldf3>
2008fb80:	9809883a 	mov	r4,r19
2008fb84:	a80b883a 	mov	r5,r21
2008fb88:	100d883a 	mov	r6,r2
2008fb8c:	180f883a 	mov	r7,r3
2008fb90:	0088e480 	call	20088e48 <__subdf3>
2008fb94:	82000c04 	addi	r8,r16,48
2008fb98:	92000005 	stb	r8,0(r18)
2008fb9c:	1009883a 	mov	r4,r2
2008fba0:	180b883a 	mov	r5,r3
2008fba4:	000d883a 	mov	r6,zero
2008fba8:	01d00934 	movhi	r7,16420
2008fbac:	1011883a 	mov	r8,r2
2008fbb0:	bdc00044 	addi	r23,r23,1
2008fbb4:	95bfd81e 	bne	r18,r22,2008fb18 <__flash_rwdata_start+0xffff4cac>
2008fbb8:	802d883a 	mov	r22,r16
2008fbbc:	dc000317 	ldw	r16,12(sp)
2008fbc0:	4009883a 	mov	r4,r8
2008fbc4:	180b883a 	mov	r5,r3
2008fbc8:	400d883a 	mov	r6,r8
2008fbcc:	180f883a 	mov	r7,r3
2008fbd0:	00875bc0 	call	200875bc <__adddf3>
2008fbd4:	8809883a 	mov	r4,r17
2008fbd8:	a00b883a 	mov	r5,r20
2008fbdc:	100d883a 	mov	r6,r2
2008fbe0:	180f883a 	mov	r7,r3
2008fbe4:	1027883a 	mov	r19,r2
2008fbe8:	1825883a 	mov	r18,r3
2008fbec:	00975380 	call	20097538 <__ledf2>
2008fbf0:	10000816 	blt	r2,zero,2008fc14 <_dtoa_r+0x96c>
2008fbf4:	8809883a 	mov	r4,r17
2008fbf8:	a00b883a 	mov	r5,r20
2008fbfc:	980d883a 	mov	r6,r19
2008fc00:	900f883a 	mov	r7,r18
2008fc04:	00973d40 	call	200973d4 <__eqdf2>
2008fc08:	103f551e 	bne	r2,zero,2008f960 <__flash_rwdata_start+0xffff4af4>
2008fc0c:	b580004c 	andi	r22,r22,1
2008fc10:	b03f5326 	beq	r22,zero,2008f960 <__flash_rwdata_start+0xffff4af4>
2008fc14:	bd7fffc3 	ldbu	r21,-1(r23)
2008fc18:	b8bfffc4 	addi	r2,r23,-1
2008fc1c:	1007883a 	mov	r3,r2
2008fc20:	01400e44 	movi	r5,57
2008fc24:	d9800717 	ldw	r6,28(sp)
2008fc28:	00000506 	br	2008fc40 <_dtoa_r+0x998>
2008fc2c:	18ffffc4 	addi	r3,r3,-1
2008fc30:	30825e26 	beq	r6,r2,200905ac <_dtoa_r+0x1304>
2008fc34:	1d400003 	ldbu	r21,0(r3)
2008fc38:	102f883a 	mov	r23,r2
2008fc3c:	10bfffc4 	addi	r2,r2,-1
2008fc40:	a9003fcc 	andi	r4,r21,255
2008fc44:	2100201c 	xori	r4,r4,128
2008fc48:	213fe004 	addi	r4,r4,-128
2008fc4c:	217ff726 	beq	r4,r5,2008fc2c <__flash_rwdata_start+0xffff4dc0>
2008fc50:	aa000044 	addi	r8,r21,1
2008fc54:	12000005 	stb	r8,0(r2)
2008fc58:	003f4106 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
2008fc5c:	d8c00b17 	ldw	r3,44(sp)
2008fc60:	18006726 	beq	r3,zero,2008fe00 <_dtoa_r+0xb58>
2008fc64:	d9000317 	ldw	r4,12(sp)
2008fc68:	00c00044 	movi	r3,1
2008fc6c:	19016a0e 	bge	r3,r4,20090218 <_dtoa_r+0xf70>
2008fc70:	d8800617 	ldw	r2,24(sp)
2008fc74:	d8c00917 	ldw	r3,36(sp)
2008fc78:	157fffc4 	addi	r21,r2,-1
2008fc7c:	1d420716 	blt	r3,r21,2009049c <_dtoa_r+0x11f4>
2008fc80:	1d6bc83a 	sub	r21,r3,r21
2008fc84:	d8800617 	ldw	r2,24(sp)
2008fc88:	1002c716 	blt	r2,zero,200907a8 <_dtoa_r+0x1500>
2008fc8c:	dd000817 	ldw	r20,32(sp)
2008fc90:	d8800617 	ldw	r2,24(sp)
2008fc94:	d9800817 	ldw	r6,32(sp)
2008fc98:	8009883a 	mov	r4,r16
2008fc9c:	01400044 	movi	r5,1
2008fca0:	308d883a 	add	r6,r6,r2
2008fca4:	d9800815 	stw	r6,32(sp)
2008fca8:	b0ad883a 	add	r22,r22,r2
2008fcac:	00923480 	call	20092348 <__i2b>
2008fcb0:	1023883a 	mov	r17,r2
2008fcb4:	a0000826 	beq	r20,zero,2008fcd8 <_dtoa_r+0xa30>
2008fcb8:	0580070e 	bge	zero,r22,2008fcd8 <_dtoa_r+0xa30>
2008fcbc:	b005883a 	mov	r2,r22
2008fcc0:	a5812016 	blt	r20,r22,20090144 <_dtoa_r+0xe9c>
2008fcc4:	d8c00817 	ldw	r3,32(sp)
2008fcc8:	a0a9c83a 	sub	r20,r20,r2
2008fccc:	b0adc83a 	sub	r22,r22,r2
2008fcd0:	1887c83a 	sub	r3,r3,r2
2008fcd4:	d8c00815 	stw	r3,32(sp)
2008fcd8:	d9000917 	ldw	r4,36(sp)
2008fcdc:	0100140e 	bge	zero,r4,2008fd30 <_dtoa_r+0xa88>
2008fce0:	d9800b17 	ldw	r6,44(sp)
2008fce4:	3001e526 	beq	r6,zero,2009047c <_dtoa_r+0x11d4>
2008fce8:	05400e0e 	bge	zero,r21,2008fd24 <_dtoa_r+0xa7c>
2008fcec:	880b883a 	mov	r5,r17
2008fcf0:	8009883a 	mov	r4,r16
2008fcf4:	a80d883a 	mov	r6,r21
2008fcf8:	00925800 	call	20092580 <__pow5mult>
2008fcfc:	e00d883a 	mov	r6,fp
2008fd00:	8009883a 	mov	r4,r16
2008fd04:	100b883a 	mov	r5,r2
2008fd08:	1023883a 	mov	r17,r2
2008fd0c:	00923840 	call	20092384 <__multiply>
2008fd10:	102f883a 	mov	r23,r2
2008fd14:	e00b883a 	mov	r5,fp
2008fd18:	8009883a 	mov	r4,r16
2008fd1c:	0091fe40 	call	20091fe4 <_Bfree>
2008fd20:	b839883a 	mov	fp,r23
2008fd24:	d8800917 	ldw	r2,36(sp)
2008fd28:	154dc83a 	sub	r6,r2,r21
2008fd2c:	3001281e 	bne	r6,zero,200901d0 <_dtoa_r+0xf28>
2008fd30:	05c00044 	movi	r23,1
2008fd34:	8009883a 	mov	r4,r16
2008fd38:	b80b883a 	mov	r5,r23
2008fd3c:	00923480 	call	20092348 <__i2b>
2008fd40:	d8c00a17 	ldw	r3,40(sp)
2008fd44:	102b883a 	mov	r21,r2
2008fd48:	00c0310e 	bge	zero,r3,2008fe10 <_dtoa_r+0xb68>
2008fd4c:	8009883a 	mov	r4,r16
2008fd50:	100b883a 	mov	r5,r2
2008fd54:	180d883a 	mov	r6,r3
2008fd58:	00925800 	call	20092580 <__pow5mult>
2008fd5c:	d9000317 	ldw	r4,12(sp)
2008fd60:	102b883a 	mov	r21,r2
2008fd64:	b9011f0e 	bge	r23,r4,200901e4 <_dtoa_r+0xf3c>
2008fd68:	0027883a 	mov	r19,zero
2008fd6c:	a8800417 	ldw	r2,16(r21)
2008fd70:	10800104 	addi	r2,r2,4
2008fd74:	1085883a 	add	r2,r2,r2
2008fd78:	1085883a 	add	r2,r2,r2
2008fd7c:	a885883a 	add	r2,r21,r2
2008fd80:	11000017 	ldw	r4,0(r2)
2008fd84:	00922300 	call	20092230 <__hi0bits>
2008fd88:	00c00804 	movi	r3,32
2008fd8c:	1885c83a 	sub	r2,r3,r2
2008fd90:	00002506 	br	2008fe28 <_dtoa_r+0xb80>
2008fd94:	01800044 	movi	r6,1
2008fd98:	d9800d15 	stw	r6,52(sp)
2008fd9c:	003dec06 	br	2008f550 <__flash_rwdata_start+0xffff46e4>
2008fda0:	d8c00817 	ldw	r3,32(sp)
2008fda4:	d9000517 	ldw	r4,20(sp)
2008fda8:	d8000a15 	stw	zero,40(sp)
2008fdac:	1907c83a 	sub	r3,r3,r4
2008fdb0:	010dc83a 	sub	r6,zero,r4
2008fdb4:	d8c00815 	stw	r3,32(sp)
2008fdb8:	d9800915 	stw	r6,36(sp)
2008fdbc:	003ded06 	br	2008f574 <__flash_rwdata_start+0xffff4708>
2008fdc0:	05adc83a 	sub	r22,zero,r22
2008fdc4:	dd800815 	stw	r22,32(sp)
2008fdc8:	002d883a 	mov	r22,zero
2008fdcc:	003de406 	br	2008f560 <__flash_rwdata_start+0xffff46f4>
2008fdd0:	d9000517 	ldw	r4,20(sp)
2008fdd4:	00897a00 	call	200897a0 <__floatsidf>
2008fdd8:	1009883a 	mov	r4,r2
2008fddc:	180b883a 	mov	r5,r3
2008fde0:	b00d883a 	mov	r6,r22
2008fde4:	a80f883a 	mov	r7,r21
2008fde8:	00973d40 	call	200973d4 <__eqdf2>
2008fdec:	103dc726 	beq	r2,zero,2008f50c <__flash_rwdata_start+0xffff46a0>
2008fdf0:	d8800517 	ldw	r2,20(sp)
2008fdf4:	10bfffc4 	addi	r2,r2,-1
2008fdf8:	d8800515 	stw	r2,20(sp)
2008fdfc:	003dc306 	br	2008f50c <__flash_rwdata_start+0xffff46a0>
2008fe00:	dd400917 	ldw	r21,36(sp)
2008fe04:	dd000817 	ldw	r20,32(sp)
2008fe08:	0023883a 	mov	r17,zero
2008fe0c:	003fa906 	br	2008fcb4 <__flash_rwdata_start+0xffff4e48>
2008fe10:	d9800317 	ldw	r6,12(sp)
2008fe14:	b981670e 	bge	r23,r6,200903b4 <_dtoa_r+0x110c>
2008fe18:	0027883a 	mov	r19,zero
2008fe1c:	d8c00a17 	ldw	r3,40(sp)
2008fe20:	183fd21e 	bne	r3,zero,2008fd6c <__flash_rwdata_start+0xffff4f00>
2008fe24:	00800044 	movi	r2,1
2008fe28:	1585883a 	add	r2,r2,r22
2008fe2c:	108007cc 	andi	r2,r2,31
2008fe30:	10005f26 	beq	r2,zero,2008ffb0 <_dtoa_r+0xd08>
2008fe34:	00c00804 	movi	r3,32
2008fe38:	1887c83a 	sub	r3,r3,r2
2008fe3c:	01000104 	movi	r4,4
2008fe40:	20c2dd0e 	bge	r4,r3,200909b8 <_dtoa_r+0x1710>
2008fe44:	d9000817 	ldw	r4,32(sp)
2008fe48:	00c00704 	movi	r3,28
2008fe4c:	1885c83a 	sub	r2,r3,r2
2008fe50:	2089883a 	add	r4,r4,r2
2008fe54:	d9000815 	stw	r4,32(sp)
2008fe58:	a0a9883a 	add	r20,r20,r2
2008fe5c:	b0ad883a 	add	r22,r22,r2
2008fe60:	d8800817 	ldw	r2,32(sp)
2008fe64:	0080050e 	bge	zero,r2,2008fe7c <_dtoa_r+0xbd4>
2008fe68:	e00b883a 	mov	r5,fp
2008fe6c:	8009883a 	mov	r4,r16
2008fe70:	100d883a 	mov	r6,r2
2008fe74:	00926c00 	call	200926c0 <__lshift>
2008fe78:	1039883a 	mov	fp,r2
2008fe7c:	0580050e 	bge	zero,r22,2008fe94 <_dtoa_r+0xbec>
2008fe80:	a80b883a 	mov	r5,r21
2008fe84:	8009883a 	mov	r4,r16
2008fe88:	b00d883a 	mov	r6,r22
2008fe8c:	00926c00 	call	200926c0 <__lshift>
2008fe90:	102b883a 	mov	r21,r2
2008fe94:	d8c00d17 	ldw	r3,52(sp)
2008fe98:	1801161e 	bne	r3,zero,200902f4 <_dtoa_r+0x104c>
2008fe9c:	d8c00617 	ldw	r3,24(sp)
2008fea0:	00c12d0e 	bge	zero,r3,20090358 <_dtoa_r+0x10b0>
2008fea4:	d8c00b17 	ldw	r3,44(sp)
2008fea8:	1800571e 	bne	r3,zero,20090008 <_dtoa_r+0xd60>
2008feac:	dc800717 	ldw	r18,28(sp)
2008feb0:	dcc00617 	ldw	r19,24(sp)
2008feb4:	9029883a 	mov	r20,r18
2008feb8:	00000206 	br	2008fec4 <_dtoa_r+0xc1c>
2008febc:	009200c0 	call	2009200c <__multadd>
2008fec0:	1039883a 	mov	fp,r2
2008fec4:	e009883a 	mov	r4,fp
2008fec8:	a80b883a 	mov	r5,r21
2008fecc:	008f0a80 	call	2008f0a8 <quorem>
2008fed0:	10800c04 	addi	r2,r2,48
2008fed4:	90800005 	stb	r2,0(r18)
2008fed8:	94800044 	addi	r18,r18,1
2008fedc:	9507c83a 	sub	r3,r18,r20
2008fee0:	8009883a 	mov	r4,r16
2008fee4:	e00b883a 	mov	r5,fp
2008fee8:	01800284 	movi	r6,10
2008feec:	000f883a 	mov	r7,zero
2008fef0:	1cfff216 	blt	r3,r19,2008febc <__flash_rwdata_start+0xffff5050>
2008fef4:	1011883a 	mov	r8,r2
2008fef8:	d8800617 	ldw	r2,24(sp)
2008fefc:	00822e0e 	bge	zero,r2,200907b8 <_dtoa_r+0x1510>
2008ff00:	d9000717 	ldw	r4,28(sp)
2008ff04:	0025883a 	mov	r18,zero
2008ff08:	20af883a 	add	r23,r4,r2
2008ff0c:	e00b883a 	mov	r5,fp
2008ff10:	01800044 	movi	r6,1
2008ff14:	8009883a 	mov	r4,r16
2008ff18:	da001715 	stw	r8,92(sp)
2008ff1c:	00926c00 	call	200926c0 <__lshift>
2008ff20:	1009883a 	mov	r4,r2
2008ff24:	a80b883a 	mov	r5,r21
2008ff28:	1039883a 	mov	fp,r2
2008ff2c:	00928100 	call	20092810 <__mcmp>
2008ff30:	da001717 	ldw	r8,92(sp)
2008ff34:	00816e0e 	bge	zero,r2,200904f0 <_dtoa_r+0x1248>
2008ff38:	b93fffc3 	ldbu	r4,-1(r23)
2008ff3c:	b8bfffc4 	addi	r2,r23,-1
2008ff40:	1007883a 	mov	r3,r2
2008ff44:	01800e44 	movi	r6,57
2008ff48:	d9c00717 	ldw	r7,28(sp)
2008ff4c:	00000506 	br	2008ff64 <_dtoa_r+0xcbc>
2008ff50:	18ffffc4 	addi	r3,r3,-1
2008ff54:	38811926 	beq	r7,r2,200903bc <_dtoa_r+0x1114>
2008ff58:	19000003 	ldbu	r4,0(r3)
2008ff5c:	102f883a 	mov	r23,r2
2008ff60:	10bfffc4 	addi	r2,r2,-1
2008ff64:	21403fcc 	andi	r5,r4,255
2008ff68:	2940201c 	xori	r5,r5,128
2008ff6c:	297fe004 	addi	r5,r5,-128
2008ff70:	29bff726 	beq	r5,r6,2008ff50 <__flash_rwdata_start+0xffff50e4>
2008ff74:	21000044 	addi	r4,r4,1
2008ff78:	11000005 	stb	r4,0(r2)
2008ff7c:	8009883a 	mov	r4,r16
2008ff80:	a80b883a 	mov	r5,r21
2008ff84:	0091fe40 	call	20091fe4 <_Bfree>
2008ff88:	883e7526 	beq	r17,zero,2008f960 <__flash_rwdata_start+0xffff4af4>
2008ff8c:	90000426 	beq	r18,zero,2008ffa0 <_dtoa_r+0xcf8>
2008ff90:	94400326 	beq	r18,r17,2008ffa0 <_dtoa_r+0xcf8>
2008ff94:	8009883a 	mov	r4,r16
2008ff98:	900b883a 	mov	r5,r18
2008ff9c:	0091fe40 	call	20091fe4 <_Bfree>
2008ffa0:	8009883a 	mov	r4,r16
2008ffa4:	880b883a 	mov	r5,r17
2008ffa8:	0091fe40 	call	20091fe4 <_Bfree>
2008ffac:	003e6c06 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
2008ffb0:	00800704 	movi	r2,28
2008ffb4:	d9800817 	ldw	r6,32(sp)
2008ffb8:	a0a9883a 	add	r20,r20,r2
2008ffbc:	b0ad883a 	add	r22,r22,r2
2008ffc0:	308d883a 	add	r6,r6,r2
2008ffc4:	d9800815 	stw	r6,32(sp)
2008ffc8:	003fa506 	br	2008fe60 <__flash_rwdata_start+0xffff4ff4>
2008ffcc:	013efb84 	movi	r4,-1042
2008ffd0:	246bc83a 	sub	r21,r4,r17
2008ffd4:	9548983a 	sll	r4,r18,r21
2008ffd8:	003d1806 	br	2008f43c <__flash_rwdata_start+0xffff45d0>
2008ffdc:	d8000d15 	stw	zero,52(sp)
2008ffe0:	003d5b06 	br	2008f550 <__flash_rwdata_start+0xffff46e4>
2008ffe4:	880b883a 	mov	r5,r17
2008ffe8:	8009883a 	mov	r4,r16
2008ffec:	01800284 	movi	r6,10
2008fff0:	000f883a 	mov	r7,zero
2008fff4:	009200c0 	call	2009200c <__multadd>
2008fff8:	1023883a 	mov	r17,r2
2008fffc:	d8800c17 	ldw	r2,48(sp)
20090000:	0082550e 	bge	zero,r2,20090958 <_dtoa_r+0x16b0>
20090004:	d8800615 	stw	r2,24(sp)
20090008:	0500050e 	bge	zero,r20,20090020 <_dtoa_r+0xd78>
2009000c:	880b883a 	mov	r5,r17
20090010:	8009883a 	mov	r4,r16
20090014:	a00d883a 	mov	r6,r20
20090018:	00926c00 	call	200926c0 <__lshift>
2009001c:	1023883a 	mov	r17,r2
20090020:	98016a1e 	bne	r19,zero,200905cc <_dtoa_r+0x1324>
20090024:	8829883a 	mov	r20,r17
20090028:	d9000617 	ldw	r4,24(sp)
2009002c:	dcc00717 	ldw	r19,28(sp)
20090030:	9480004c 	andi	r18,r18,1
20090034:	20bfffc4 	addi	r2,r4,-1
20090038:	9885883a 	add	r2,r19,r2
2009003c:	d8800415 	stw	r2,16(sp)
20090040:	dc800615 	stw	r18,24(sp)
20090044:	e009883a 	mov	r4,fp
20090048:	a80b883a 	mov	r5,r21
2009004c:	008f0a80 	call	2008f0a8 <quorem>
20090050:	e009883a 	mov	r4,fp
20090054:	880b883a 	mov	r5,r17
20090058:	102f883a 	mov	r23,r2
2009005c:	00928100 	call	20092810 <__mcmp>
20090060:	8009883a 	mov	r4,r16
20090064:	a80b883a 	mov	r5,r21
20090068:	a00d883a 	mov	r6,r20
2009006c:	102d883a 	mov	r22,r2
20090070:	00928700 	call	20092870 <__mdiff>
20090074:	1007883a 	mov	r3,r2
20090078:	10800317 	ldw	r2,12(r2)
2009007c:	bc800c04 	addi	r18,r23,48
20090080:	1000971e 	bne	r2,zero,200902e0 <_dtoa_r+0x1038>
20090084:	180b883a 	mov	r5,r3
20090088:	e009883a 	mov	r4,fp
2009008c:	d8c01515 	stw	r3,84(sp)
20090090:	00928100 	call	20092810 <__mcmp>
20090094:	d8c01517 	ldw	r3,84(sp)
20090098:	8009883a 	mov	r4,r16
2009009c:	d8801515 	stw	r2,84(sp)
200900a0:	180b883a 	mov	r5,r3
200900a4:	0091fe40 	call	20091fe4 <_Bfree>
200900a8:	d8801517 	ldw	r2,84(sp)
200900ac:	1000041e 	bne	r2,zero,200900c0 <_dtoa_r+0xe18>
200900b0:	d9800317 	ldw	r6,12(sp)
200900b4:	3000021e 	bne	r6,zero,200900c0 <_dtoa_r+0xe18>
200900b8:	d8c00617 	ldw	r3,24(sp)
200900bc:	18007626 	beq	r3,zero,20090298 <_dtoa_r+0xff0>
200900c0:	b0005b16 	blt	r22,zero,20090230 <_dtoa_r+0xf88>
200900c4:	b000041e 	bne	r22,zero,200900d8 <_dtoa_r+0xe30>
200900c8:	d9000317 	ldw	r4,12(sp)
200900cc:	2000021e 	bne	r4,zero,200900d8 <_dtoa_r+0xe30>
200900d0:	d8c00617 	ldw	r3,24(sp)
200900d4:	18005626 	beq	r3,zero,20090230 <_dtoa_r+0xf88>
200900d8:	00814d16 	blt	zero,r2,20090610 <_dtoa_r+0x1368>
200900dc:	d8c00417 	ldw	r3,16(sp)
200900e0:	9d800044 	addi	r22,r19,1
200900e4:	9c800005 	stb	r18,0(r19)
200900e8:	b02f883a 	mov	r23,r22
200900ec:	98c14c26 	beq	r19,r3,20090620 <_dtoa_r+0x1378>
200900f0:	e00b883a 	mov	r5,fp
200900f4:	8009883a 	mov	r4,r16
200900f8:	01800284 	movi	r6,10
200900fc:	000f883a 	mov	r7,zero
20090100:	009200c0 	call	2009200c <__multadd>
20090104:	1039883a 	mov	fp,r2
20090108:	8d006d26 	beq	r17,r20,200902c0 <_dtoa_r+0x1018>
2009010c:	880b883a 	mov	r5,r17
20090110:	01800284 	movi	r6,10
20090114:	000f883a 	mov	r7,zero
20090118:	8009883a 	mov	r4,r16
2009011c:	009200c0 	call	2009200c <__multadd>
20090120:	a00b883a 	mov	r5,r20
20090124:	8009883a 	mov	r4,r16
20090128:	01800284 	movi	r6,10
2009012c:	000f883a 	mov	r7,zero
20090130:	1023883a 	mov	r17,r2
20090134:	009200c0 	call	2009200c <__multadd>
20090138:	1029883a 	mov	r20,r2
2009013c:	b027883a 	mov	r19,r22
20090140:	003fc006 	br	20090044 <__flash_rwdata_start+0xffff51d8>
20090144:	a005883a 	mov	r2,r20
20090148:	003ede06 	br	2008fcc4 <__flash_rwdata_start+0xffff4e58>
2009014c:	01000044 	movi	r4,1
20090150:	d9000b15 	stw	r4,44(sp)
20090154:	d9802217 	ldw	r6,136(sp)
20090158:	0180dc0e 	bge	zero,r6,200904cc <_dtoa_r+0x1224>
2009015c:	3023883a 	mov	r17,r6
20090160:	d9800c15 	stw	r6,48(sp)
20090164:	d9800615 	stw	r6,24(sp)
20090168:	003d1e06 	br	2008f5e4 <__flash_rwdata_start+0xffff4778>
2009016c:	d8800617 	ldw	r2,24(sp)
20090170:	00be3716 	blt	zero,r2,2008fa50 <__flash_rwdata_start+0xffff4be4>
20090174:	1000be1e 	bne	r2,zero,20090470 <_dtoa_r+0x11c8>
20090178:	8809883a 	mov	r4,r17
2009017c:	a00b883a 	mov	r5,r20
20090180:	000d883a 	mov	r6,zero
20090184:	01d00534 	movhi	r7,16404
20090188:	00887240 	call	20088724 <__muldf3>
2009018c:	1009883a 	mov	r4,r2
20090190:	180b883a 	mov	r5,r3
20090194:	900d883a 	mov	r6,r18
20090198:	980f883a 	mov	r7,r19
2009019c:	00974580 	call	20097458 <__gedf2>
200901a0:	002b883a 	mov	r21,zero
200901a4:	0023883a 	mov	r17,zero
200901a8:	10007a16 	blt	r2,zero,20090394 <_dtoa_r+0x10ec>
200901ac:	d9002217 	ldw	r4,136(sp)
200901b0:	ddc00717 	ldw	r23,28(sp)
200901b4:	0108303a 	nor	r4,zero,r4
200901b8:	d9000515 	stw	r4,20(sp)
200901bc:	8009883a 	mov	r4,r16
200901c0:	a80b883a 	mov	r5,r21
200901c4:	0091fe40 	call	20091fe4 <_Bfree>
200901c8:	883f751e 	bne	r17,zero,2008ffa0 <__flash_rwdata_start+0xffff5134>
200901cc:	003de406 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
200901d0:	e00b883a 	mov	r5,fp
200901d4:	8009883a 	mov	r4,r16
200901d8:	00925800 	call	20092580 <__pow5mult>
200901dc:	1039883a 	mov	fp,r2
200901e0:	003ed306 	br	2008fd30 <__flash_rwdata_start+0xffff4ec4>
200901e4:	903ee01e 	bne	r18,zero,2008fd68 <__flash_rwdata_start+0xffff4efc>
200901e8:	00800434 	movhi	r2,16
200901ec:	10bfffc4 	addi	r2,r2,-1
200901f0:	9884703a 	and	r2,r19,r2
200901f4:	103f081e 	bne	r2,zero,2008fe18 <__flash_rwdata_start+0xffff4fac>
200901f8:	9cdffc2c 	andhi	r19,r19,32752
200901fc:	983f0626 	beq	r19,zero,2008fe18 <__flash_rwdata_start+0xffff4fac>
20090200:	d8800817 	ldw	r2,32(sp)
20090204:	b5800044 	addi	r22,r22,1
20090208:	04c00044 	movi	r19,1
2009020c:	10800044 	addi	r2,r2,1
20090210:	d8800815 	stw	r2,32(sp)
20090214:	003f0106 	br	2008fe1c <__flash_rwdata_start+0xffff4fb0>
20090218:	d9800f17 	ldw	r6,60(sp)
2009021c:	30016826 	beq	r6,zero,200907c0 <_dtoa_r+0x1518>
20090220:	10810cc4 	addi	r2,r2,1075
20090224:	dd400917 	ldw	r21,36(sp)
20090228:	dd000817 	ldw	r20,32(sp)
2009022c:	003e9906 	br	2008fc94 <__flash_rwdata_start+0xffff4e28>
20090230:	9011883a 	mov	r8,r18
20090234:	4007883a 	mov	r3,r8
20090238:	e02d883a 	mov	r22,fp
2009023c:	0080100e 	bge	zero,r2,20090280 <_dtoa_r+0xfd8>
20090240:	01800044 	movi	r6,1
20090244:	8009883a 	mov	r4,r16
20090248:	e00b883a 	mov	r5,fp
2009024c:	da001515 	stw	r8,84(sp)
20090250:	da001715 	stw	r8,92(sp)
20090254:	00926c00 	call	200926c0 <__lshift>
20090258:	1009883a 	mov	r4,r2
2009025c:	a80b883a 	mov	r5,r21
20090260:	102d883a 	mov	r22,r2
20090264:	00928100 	call	20092810 <__mcmp>
20090268:	d8c01517 	ldw	r3,84(sp)
2009026c:	da001717 	ldw	r8,92(sp)
20090270:	0081a50e 	bge	zero,r2,20090908 <_dtoa_r+0x1660>
20090274:	00800e44 	movi	r2,57
20090278:	40817b26 	beq	r8,r2,20090868 <_dtoa_r+0x15c0>
2009027c:	40c00044 	addi	r3,r8,1
20090280:	8825883a 	mov	r18,r17
20090284:	9dc00044 	addi	r23,r19,1
20090288:	98c00005 	stb	r3,0(r19)
2009028c:	a023883a 	mov	r17,r20
20090290:	b039883a 	mov	fp,r22
20090294:	003f3906 	br	2008ff7c <__flash_rwdata_start+0xffff5110>
20090298:	00800e44 	movi	r2,57
2009029c:	9011883a 	mov	r8,r18
200902a0:	90817226 	beq	r18,r2,2009086c <_dtoa_r+0x15c4>
200902a4:	0580010e 	bge	zero,r22,200902ac <_dtoa_r+0x1004>
200902a8:	ba000c44 	addi	r8,r23,49
200902ac:	8825883a 	mov	r18,r17
200902b0:	9dc00044 	addi	r23,r19,1
200902b4:	9a000005 	stb	r8,0(r19)
200902b8:	a023883a 	mov	r17,r20
200902bc:	003f2f06 	br	2008ff7c <__flash_rwdata_start+0xffff5110>
200902c0:	880b883a 	mov	r5,r17
200902c4:	8009883a 	mov	r4,r16
200902c8:	01800284 	movi	r6,10
200902cc:	000f883a 	mov	r7,zero
200902d0:	009200c0 	call	2009200c <__multadd>
200902d4:	1023883a 	mov	r17,r2
200902d8:	1029883a 	mov	r20,r2
200902dc:	003f9706 	br	2009013c <__flash_rwdata_start+0xffff52d0>
200902e0:	8009883a 	mov	r4,r16
200902e4:	180b883a 	mov	r5,r3
200902e8:	0091fe40 	call	20091fe4 <_Bfree>
200902ec:	00800044 	movi	r2,1
200902f0:	003f7306 	br	200900c0 <__flash_rwdata_start+0xffff5254>
200902f4:	e009883a 	mov	r4,fp
200902f8:	a80b883a 	mov	r5,r21
200902fc:	00928100 	call	20092810 <__mcmp>
20090300:	103ee60e 	bge	r2,zero,2008fe9c <__flash_rwdata_start+0xffff5030>
20090304:	8009883a 	mov	r4,r16
20090308:	e00b883a 	mov	r5,fp
2009030c:	01800284 	movi	r6,10
20090310:	000f883a 	mov	r7,zero
20090314:	009200c0 	call	2009200c <__multadd>
20090318:	d9000517 	ldw	r4,20(sp)
2009031c:	d9800b17 	ldw	r6,44(sp)
20090320:	1039883a 	mov	fp,r2
20090324:	213fffc4 	addi	r4,r4,-1
20090328:	d9000515 	stw	r4,20(sp)
2009032c:	303f2d1e 	bne	r6,zero,2008ffe4 <__flash_rwdata_start+0xffff5178>
20090330:	d9000c17 	ldw	r4,48(sp)
20090334:	0101780e 	bge	zero,r4,20090918 <_dtoa_r+0x1670>
20090338:	d9000615 	stw	r4,24(sp)
2009033c:	003edb06 	br	2008feac <__flash_rwdata_start+0xffff5040>
20090340:	00800084 	movi	r2,2
20090344:	30818e1e 	bne	r6,r2,20090980 <_dtoa_r+0x16d8>
20090348:	d8000b15 	stw	zero,44(sp)
2009034c:	003f8106 	br	20090154 <__flash_rwdata_start+0xffff52e8>
20090350:	d8800717 	ldw	r2,28(sp)
20090354:	003c0306 	br	2008f364 <__flash_rwdata_start+0xffff44f8>
20090358:	d9000317 	ldw	r4,12(sp)
2009035c:	00800084 	movi	r2,2
20090360:	113ed00e 	bge	r2,r4,2008fea4 <__flash_rwdata_start+0xffff5038>
20090364:	d8c00617 	ldw	r3,24(sp)
20090368:	183f901e 	bne	r3,zero,200901ac <__flash_rwdata_start+0xffff5340>
2009036c:	a80b883a 	mov	r5,r21
20090370:	8009883a 	mov	r4,r16
20090374:	01800144 	movi	r6,5
20090378:	000f883a 	mov	r7,zero
2009037c:	009200c0 	call	2009200c <__multadd>
20090380:	e009883a 	mov	r4,fp
20090384:	100b883a 	mov	r5,r2
20090388:	102b883a 	mov	r21,r2
2009038c:	00928100 	call	20092810 <__mcmp>
20090390:	00bf860e 	bge	zero,r2,200901ac <__flash_rwdata_start+0xffff5340>
20090394:	d9800717 	ldw	r6,28(sp)
20090398:	00800c44 	movi	r2,49
2009039c:	30800005 	stb	r2,0(r6)
200903a0:	d8800517 	ldw	r2,20(sp)
200903a4:	35c00044 	addi	r23,r6,1
200903a8:	10800044 	addi	r2,r2,1
200903ac:	d8800515 	stw	r2,20(sp)
200903b0:	003f8206 	br	200901bc <__flash_rwdata_start+0xffff5350>
200903b4:	903e981e 	bne	r18,zero,2008fe18 <__flash_rwdata_start+0xffff4fac>
200903b8:	003f8b06 	br	200901e8 <__flash_rwdata_start+0xffff537c>
200903bc:	d9800517 	ldw	r6,20(sp)
200903c0:	d8c00717 	ldw	r3,28(sp)
200903c4:	00800c44 	movi	r2,49
200903c8:	31800044 	addi	r6,r6,1
200903cc:	d9800515 	stw	r6,20(sp)
200903d0:	18800005 	stb	r2,0(r3)
200903d4:	003ee906 	br	2008ff7c <__flash_rwdata_start+0xffff5110>
200903d8:	dc000317 	ldw	r16,12(sp)
200903dc:	003d6006 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
200903e0:	8809883a 	mov	r4,r17
200903e4:	00897a00 	call	200897a0 <__floatsidf>
200903e8:	a009883a 	mov	r4,r20
200903ec:	a80b883a 	mov	r5,r21
200903f0:	100d883a 	mov	r6,r2
200903f4:	180f883a 	mov	r7,r3
200903f8:	00887240 	call	20088724 <__muldf3>
200903fc:	1009883a 	mov	r4,r2
20090400:	180b883a 	mov	r5,r3
20090404:	000d883a 	mov	r6,zero
20090408:	01d00734 	movhi	r7,16412
2009040c:	00875bc0 	call	200875bc <__adddf3>
20090410:	1023883a 	mov	r17,r2
20090414:	00bf3034 	movhi	r2,64704
20090418:	1885883a 	add	r2,r3,r2
2009041c:	d8800e15 	stw	r2,56(sp)
20090420:	a009883a 	mov	r4,r20
20090424:	a80b883a 	mov	r5,r21
20090428:	000d883a 	mov	r6,zero
2009042c:	01d00534 	movhi	r7,16404
20090430:	0088e480 	call	20088e48 <__subdf3>
20090434:	d9c00e17 	ldw	r7,56(sp)
20090438:	1009883a 	mov	r4,r2
2009043c:	180b883a 	mov	r5,r3
20090440:	880d883a 	mov	r6,r17
20090444:	102b883a 	mov	r21,r2
20090448:	1829883a 	mov	r20,r3
2009044c:	00974580 	call	20097458 <__gedf2>
20090450:	00807716 	blt	zero,r2,20090630 <_dtoa_r+0x1388>
20090454:	d8800e17 	ldw	r2,56(sp)
20090458:	a809883a 	mov	r4,r21
2009045c:	a00b883a 	mov	r5,r20
20090460:	11e0003c 	xorhi	r7,r2,32768
20090464:	880d883a 	mov	r6,r17
20090468:	00975380 	call	20097538 <__ledf2>
2009046c:	103d6b0e 	bge	r2,zero,2008fa1c <__flash_rwdata_start+0xffff4bb0>
20090470:	002b883a 	mov	r21,zero
20090474:	0023883a 	mov	r17,zero
20090478:	003f4c06 	br	200901ac <__flash_rwdata_start+0xffff5340>
2009047c:	d9800917 	ldw	r6,36(sp)
20090480:	e00b883a 	mov	r5,fp
20090484:	8009883a 	mov	r4,r16
20090488:	00925800 	call	20092580 <__pow5mult>
2009048c:	1039883a 	mov	fp,r2
20090490:	003e2706 	br	2008fd30 <__flash_rwdata_start+0xffff4ec4>
20090494:	d8000b15 	stw	zero,44(sp)
20090498:	003c4906 	br	2008f5c0 <__flash_rwdata_start+0xffff4754>
2009049c:	d9000917 	ldw	r4,36(sp)
200904a0:	d9800a17 	ldw	r6,40(sp)
200904a4:	dd400915 	stw	r21,36(sp)
200904a8:	a905c83a 	sub	r2,r21,r4
200904ac:	308d883a 	add	r6,r6,r2
200904b0:	d9800a15 	stw	r6,40(sp)
200904b4:	002b883a 	mov	r21,zero
200904b8:	003df206 	br	2008fc84 <__flash_rwdata_start+0xffff4e18>
200904bc:	dc800e15 	stw	r18,56(sp)
200904c0:	982b883a 	mov	r21,r19
200904c4:	04400084 	movi	r17,2
200904c8:	003c7406 	br	2008f69c <__flash_rwdata_start+0xffff4830>
200904cc:	04400044 	movi	r17,1
200904d0:	dc400c15 	stw	r17,48(sp)
200904d4:	dc400615 	stw	r17,24(sp)
200904d8:	dc402215 	stw	r17,136(sp)
200904dc:	80001115 	stw	zero,68(r16)
200904e0:	000b883a 	mov	r5,zero
200904e4:	003c4a06 	br	2008f610 <__flash_rwdata_start+0xffff47a4>
200904e8:	3023883a 	mov	r17,r6
200904ec:	003ffb06 	br	200904dc <__flash_rwdata_start+0xffff5670>
200904f0:	1000021e 	bne	r2,zero,200904fc <_dtoa_r+0x1254>
200904f4:	4200004c 	andi	r8,r8,1
200904f8:	403e8f1e 	bne	r8,zero,2008ff38 <__flash_rwdata_start+0xffff50cc>
200904fc:	01000c04 	movi	r4,48
20090500:	00000106 	br	20090508 <_dtoa_r+0x1260>
20090504:	102f883a 	mov	r23,r2
20090508:	b8bfffc4 	addi	r2,r23,-1
2009050c:	10c00007 	ldb	r3,0(r2)
20090510:	193ffc26 	beq	r3,r4,20090504 <__flash_rwdata_start+0xffff5698>
20090514:	003e9906 	br	2008ff7c <__flash_rwdata_start+0xffff5110>
20090518:	d9000517 	ldw	r4,20(sp)
2009051c:	012fc83a 	sub	r23,zero,r4
20090520:	b800ad26 	beq	r23,zero,200907d8 <_dtoa_r+0x1530>
20090524:	b88003cc 	andi	r2,r23,15
20090528:	100490fa 	slli	r2,r2,3
2009052c:	00c00034 	movhi	r3,0
20090530:	18c21104 	addi	r3,r3,2116
20090534:	1885883a 	add	r2,r3,r2
20090538:	11800017 	ldw	r6,0(r2)
2009053c:	11c00117 	ldw	r7,4(r2)
20090540:	b82fd13a 	srai	r23,r23,4
20090544:	9009883a 	mov	r4,r18
20090548:	980b883a 	mov	r5,r19
2009054c:	00887240 	call	20088724 <__muldf3>
20090550:	1029883a 	mov	r20,r2
20090554:	182b883a 	mov	r21,r3
20090558:	b800f426 	beq	r23,zero,2009092c <_dtoa_r+0x1684>
2009055c:	02000034 	movhi	r8,0
20090560:	42020704 	addi	r8,r8,2076
20090564:	8029883a 	mov	r20,r16
20090568:	04400084 	movi	r17,2
2009056c:	4021883a 	mov	r16,r8
20090570:	b980004c 	andi	r6,r23,1
20090574:	1009883a 	mov	r4,r2
20090578:	b82fd07a 	srai	r23,r23,1
2009057c:	180b883a 	mov	r5,r3
20090580:	30000426 	beq	r6,zero,20090594 <_dtoa_r+0x12ec>
20090584:	81800017 	ldw	r6,0(r16)
20090588:	81c00117 	ldw	r7,4(r16)
2009058c:	8c400044 	addi	r17,r17,1
20090590:	00887240 	call	20088724 <__muldf3>
20090594:	84000204 	addi	r16,r16,8
20090598:	b83ff51e 	bne	r23,zero,20090570 <__flash_rwdata_start+0xffff5704>
2009059c:	a021883a 	mov	r16,r20
200905a0:	182b883a 	mov	r21,r3
200905a4:	1029883a 	mov	r20,r2
200905a8:	003c5506 	br	2008f700 <__flash_rwdata_start+0xffff4894>
200905ac:	d9800517 	ldw	r6,20(sp)
200905b0:	d9000717 	ldw	r4,28(sp)
200905b4:	00c00c04 	movi	r3,48
200905b8:	31800044 	addi	r6,r6,1
200905bc:	d9800515 	stw	r6,20(sp)
200905c0:	20c00005 	stb	r3,0(r4)
200905c4:	02000c44 	movi	r8,49
200905c8:	003da206 	br	2008fc54 <__flash_rwdata_start+0xffff4de8>
200905cc:	89400117 	ldw	r5,4(r17)
200905d0:	8009883a 	mov	r4,r16
200905d4:	0091f3c0 	call	20091f3c <_Balloc>
200905d8:	89800417 	ldw	r6,16(r17)
200905dc:	11000304 	addi	r4,r2,12
200905e0:	89400304 	addi	r5,r17,12
200905e4:	31800084 	addi	r6,r6,2
200905e8:	318d883a 	add	r6,r6,r6
200905ec:	318d883a 	add	r6,r6,r6
200905f0:	1027883a 	mov	r19,r2
200905f4:	008a6740 	call	2008a674 <memcpy>
200905f8:	8009883a 	mov	r4,r16
200905fc:	980b883a 	mov	r5,r19
20090600:	01800044 	movi	r6,1
20090604:	00926c00 	call	200926c0 <__lshift>
20090608:	1029883a 	mov	r20,r2
2009060c:	003e8606 	br	20090028 <__flash_rwdata_start+0xffff51bc>
20090610:	00800e44 	movi	r2,57
20090614:	90809526 	beq	r18,r2,2009086c <_dtoa_r+0x15c4>
20090618:	92000044 	addi	r8,r18,1
2009061c:	003f2306 	br	200902ac <__flash_rwdata_start+0xffff5440>
20090620:	9011883a 	mov	r8,r18
20090624:	8825883a 	mov	r18,r17
20090628:	a023883a 	mov	r17,r20
2009062c:	003e3706 	br	2008ff0c <__flash_rwdata_start+0xffff50a0>
20090630:	002b883a 	mov	r21,zero
20090634:	0023883a 	mov	r17,zero
20090638:	003f5606 	br	20090394 <__flash_rwdata_start+0xffff5528>
2009063c:	51bfffc4 	addi	r6,r10,-1
20090640:	300490fa 	slli	r2,r6,3
20090644:	00c00034 	movhi	r3,0
20090648:	18c21104 	addi	r3,r3,2116
2009064c:	1885883a 	add	r2,r3,r2
20090650:	d9c00e17 	ldw	r7,56(sp)
20090654:	11000017 	ldw	r4,0(r2)
20090658:	11400117 	ldw	r5,4(r2)
2009065c:	d8800717 	ldw	r2,28(sp)
20090660:	d9801015 	stw	r6,64(sp)
20090664:	880d883a 	mov	r6,r17
20090668:	da801615 	stw	r10,88(sp)
2009066c:	15c00044 	addi	r23,r2,1
20090670:	00887240 	call	20088724 <__muldf3>
20090674:	a80b883a 	mov	r5,r21
20090678:	a009883a 	mov	r4,r20
2009067c:	d8c01115 	stw	r3,68(sp)
20090680:	d8800e15 	stw	r2,56(sp)
20090684:	00897180 	call	20089718 <__fixdfsi>
20090688:	1009883a 	mov	r4,r2
2009068c:	1023883a 	mov	r17,r2
20090690:	00897a00 	call	200897a0 <__floatsidf>
20090694:	a009883a 	mov	r4,r20
20090698:	a80b883a 	mov	r5,r21
2009069c:	100d883a 	mov	r6,r2
200906a0:	180f883a 	mov	r7,r3
200906a4:	0088e480 	call	20088e48 <__subdf3>
200906a8:	1813883a 	mov	r9,r3
200906ac:	d8c00717 	ldw	r3,28(sp)
200906b0:	8c400c04 	addi	r17,r17,48
200906b4:	1011883a 	mov	r8,r2
200906b8:	1c400005 	stb	r17,0(r3)
200906bc:	da801617 	ldw	r10,88(sp)
200906c0:	00800044 	movi	r2,1
200906c4:	50802326 	beq	r10,r2,20090754 <_dtoa_r+0x14ac>
200906c8:	d8800717 	ldw	r2,28(sp)
200906cc:	b82b883a 	mov	r21,r23
200906d0:	dc001315 	stw	r16,76(sp)
200906d4:	12a9883a 	add	r20,r2,r10
200906d8:	4807883a 	mov	r3,r9
200906dc:	4005883a 	mov	r2,r8
200906e0:	dc801415 	stw	r18,80(sp)
200906e4:	000d883a 	mov	r6,zero
200906e8:	01d00934 	movhi	r7,16420
200906ec:	1009883a 	mov	r4,r2
200906f0:	180b883a 	mov	r5,r3
200906f4:	00887240 	call	20088724 <__muldf3>
200906f8:	180b883a 	mov	r5,r3
200906fc:	1009883a 	mov	r4,r2
20090700:	1821883a 	mov	r16,r3
20090704:	1025883a 	mov	r18,r2
20090708:	00897180 	call	20089718 <__fixdfsi>
2009070c:	1009883a 	mov	r4,r2
20090710:	1023883a 	mov	r17,r2
20090714:	00897a00 	call	200897a0 <__floatsidf>
20090718:	9009883a 	mov	r4,r18
2009071c:	800b883a 	mov	r5,r16
20090720:	100d883a 	mov	r6,r2
20090724:	180f883a 	mov	r7,r3
20090728:	8c400c04 	addi	r17,r17,48
2009072c:	0088e480 	call	20088e48 <__subdf3>
20090730:	ad400044 	addi	r21,r21,1
20090734:	ac7fffc5 	stb	r17,-1(r21)
20090738:	ad3fea1e 	bne	r21,r20,200906e4 <__flash_rwdata_start+0xffff5878>
2009073c:	1813883a 	mov	r9,r3
20090740:	d8c01017 	ldw	r3,64(sp)
20090744:	dc001317 	ldw	r16,76(sp)
20090748:	dc801417 	ldw	r18,80(sp)
2009074c:	1011883a 	mov	r8,r2
20090750:	b8ef883a 	add	r23,r23,r3
20090754:	d9000e17 	ldw	r4,56(sp)
20090758:	d9401117 	ldw	r5,68(sp)
2009075c:	000d883a 	mov	r6,zero
20090760:	01cff834 	movhi	r7,16352
20090764:	da001715 	stw	r8,92(sp)
20090768:	da401515 	stw	r9,84(sp)
2009076c:	00875bc0 	call	200875bc <__adddf3>
20090770:	da001717 	ldw	r8,92(sp)
20090774:	da401517 	ldw	r9,84(sp)
20090778:	1009883a 	mov	r4,r2
2009077c:	400d883a 	mov	r6,r8
20090780:	480f883a 	mov	r7,r9
20090784:	180b883a 	mov	r5,r3
20090788:	00975380 	call	20097538 <__ledf2>
2009078c:	da001717 	ldw	r8,92(sp)
20090790:	da401517 	ldw	r9,84(sp)
20090794:	10003b0e 	bge	r2,zero,20090884 <_dtoa_r+0x15dc>
20090798:	d9001217 	ldw	r4,72(sp)
2009079c:	bd7fffc3 	ldbu	r21,-1(r23)
200907a0:	d9000515 	stw	r4,20(sp)
200907a4:	003d1c06 	br	2008fc18 <__flash_rwdata_start+0xffff4dac>
200907a8:	d8c00817 	ldw	r3,32(sp)
200907ac:	18a9c83a 	sub	r20,r3,r2
200907b0:	0005883a 	mov	r2,zero
200907b4:	003d3706 	br	2008fc94 <__flash_rwdata_start+0xffff4e28>
200907b8:	00800044 	movi	r2,1
200907bc:	003dd006 	br	2008ff00 <__flash_rwdata_start+0xffff5094>
200907c0:	d8c00217 	ldw	r3,8(sp)
200907c4:	00800d84 	movi	r2,54
200907c8:	dd400917 	ldw	r21,36(sp)
200907cc:	10c5c83a 	sub	r2,r2,r3
200907d0:	dd000817 	ldw	r20,32(sp)
200907d4:	003d2f06 	br	2008fc94 <__flash_rwdata_start+0xffff4e28>
200907d8:	9029883a 	mov	r20,r18
200907dc:	982b883a 	mov	r21,r19
200907e0:	04400084 	movi	r17,2
200907e4:	003bc606 	br	2008f700 <__flash_rwdata_start+0xffff4894>
200907e8:	d8800617 	ldw	r2,24(sp)
200907ec:	103efc26 	beq	r2,zero,200903e0 <__flash_rwdata_start+0xffff5574>
200907f0:	d8c00c17 	ldw	r3,48(sp)
200907f4:	00fc890e 	bge	zero,r3,2008fa1c <__flash_rwdata_start+0xffff4bb0>
200907f8:	a80b883a 	mov	r5,r21
200907fc:	a009883a 	mov	r4,r20
20090800:	000d883a 	mov	r6,zero
20090804:	01d00934 	movhi	r7,16420
20090808:	00887240 	call	20088724 <__muldf3>
2009080c:	89000044 	addi	r4,r17,1
20090810:	1029883a 	mov	r20,r2
20090814:	182b883a 	mov	r21,r3
20090818:	00897a00 	call	200897a0 <__floatsidf>
2009081c:	a009883a 	mov	r4,r20
20090820:	a80b883a 	mov	r5,r21
20090824:	100d883a 	mov	r6,r2
20090828:	180f883a 	mov	r7,r3
2009082c:	00887240 	call	20088724 <__muldf3>
20090830:	1009883a 	mov	r4,r2
20090834:	180b883a 	mov	r5,r3
20090838:	000d883a 	mov	r6,zero
2009083c:	01d00734 	movhi	r7,16412
20090840:	00875bc0 	call	200875bc <__adddf3>
20090844:	d9000517 	ldw	r4,20(sp)
20090848:	1023883a 	mov	r17,r2
2009084c:	00bf3034 	movhi	r2,64704
20090850:	213fffc4 	addi	r4,r4,-1
20090854:	1885883a 	add	r2,r3,r2
20090858:	d9001215 	stw	r4,72(sp)
2009085c:	d8800e15 	stw	r2,56(sp)
20090860:	da800c17 	ldw	r10,48(sp)
20090864:	003bc306 	br	2008f774 <__flash_rwdata_start+0xffff4908>
20090868:	b039883a 	mov	fp,r22
2009086c:	01000e44 	movi	r4,57
20090870:	8825883a 	mov	r18,r17
20090874:	9dc00044 	addi	r23,r19,1
20090878:	99000005 	stb	r4,0(r19)
2009087c:	a023883a 	mov	r17,r20
20090880:	003dae06 	br	2008ff3c <__flash_rwdata_start+0xffff50d0>
20090884:	d9800e17 	ldw	r6,56(sp)
20090888:	d9c01117 	ldw	r7,68(sp)
2009088c:	0009883a 	mov	r4,zero
20090890:	014ff834 	movhi	r5,16352
20090894:	da001715 	stw	r8,92(sp)
20090898:	da401515 	stw	r9,84(sp)
2009089c:	0088e480 	call	20088e48 <__subdf3>
200908a0:	da001717 	ldw	r8,92(sp)
200908a4:	da401517 	ldw	r9,84(sp)
200908a8:	1009883a 	mov	r4,r2
200908ac:	180b883a 	mov	r5,r3
200908b0:	400d883a 	mov	r6,r8
200908b4:	480f883a 	mov	r7,r9
200908b8:	00974580 	call	20097458 <__gedf2>
200908bc:	00bc570e 	bge	zero,r2,2008fa1c <__flash_rwdata_start+0xffff4bb0>
200908c0:	01000c04 	movi	r4,48
200908c4:	00000106 	br	200908cc <_dtoa_r+0x1624>
200908c8:	102f883a 	mov	r23,r2
200908cc:	b8bfffc4 	addi	r2,r23,-1
200908d0:	10c00007 	ldb	r3,0(r2)
200908d4:	193ffc26 	beq	r3,r4,200908c8 <__flash_rwdata_start+0xffff5a5c>
200908d8:	d9801217 	ldw	r6,72(sp)
200908dc:	d9800515 	stw	r6,20(sp)
200908e0:	003c1f06 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
200908e4:	d8801217 	ldw	r2,72(sp)
200908e8:	dc001117 	ldw	r16,68(sp)
200908ec:	d8800515 	stw	r2,20(sp)
200908f0:	003cc906 	br	2008fc18 <__flash_rwdata_start+0xffff4dac>
200908f4:	dd801317 	ldw	r22,76(sp)
200908f8:	dc001117 	ldw	r16,68(sp)
200908fc:	dcc01417 	ldw	r19,80(sp)
20090900:	dc801017 	ldw	r18,64(sp)
20090904:	003c4506 	br	2008fa1c <__flash_rwdata_start+0xffff4bb0>
20090908:	103e5d1e 	bne	r2,zero,20090280 <__flash_rwdata_start+0xffff5414>
2009090c:	4080004c 	andi	r2,r8,1
20090910:	103e5b26 	beq	r2,zero,20090280 <__flash_rwdata_start+0xffff5414>
20090914:	003e5706 	br	20090274 <__flash_rwdata_start+0xffff5408>
20090918:	d8c00317 	ldw	r3,12(sp)
2009091c:	00800084 	movi	r2,2
20090920:	10c00a16 	blt	r2,r3,2009094c <_dtoa_r+0x16a4>
20090924:	d9000c17 	ldw	r4,48(sp)
20090928:	003e8306 	br	20090338 <__flash_rwdata_start+0xffff54cc>
2009092c:	04400084 	movi	r17,2
20090930:	003b7306 	br	2008f700 <__flash_rwdata_start+0xffff4894>
20090934:	d9801217 	ldw	r6,72(sp)
20090938:	d9800515 	stw	r6,20(sp)
2009093c:	003cb606 	br	2008fc18 <__flash_rwdata_start+0xffff4dac>
20090940:	d9001217 	ldw	r4,72(sp)
20090944:	d9000515 	stw	r4,20(sp)
20090948:	003c0506 	br	2008f960 <__flash_rwdata_start+0xffff4af4>
2009094c:	d9800c17 	ldw	r6,48(sp)
20090950:	d9800615 	stw	r6,24(sp)
20090954:	003e8306 	br	20090364 <__flash_rwdata_start+0xffff54f8>
20090958:	d9800317 	ldw	r6,12(sp)
2009095c:	00800084 	movi	r2,2
20090960:	11800216 	blt	r2,r6,2009096c <_dtoa_r+0x16c4>
20090964:	d8800c17 	ldw	r2,48(sp)
20090968:	003da606 	br	20090004 <__flash_rwdata_start+0xffff5198>
2009096c:	d8800c17 	ldw	r2,48(sp)
20090970:	d8800615 	stw	r2,24(sp)
20090974:	003e7b06 	br	20090364 <__flash_rwdata_start+0xffff54f8>
20090978:	05000044 	movi	r20,1
2009097c:	003b0506 	br	2008f594 <__flash_rwdata_start+0xffff4728>
20090980:	8009883a 	mov	r4,r16
20090984:	80001115 	stw	zero,68(r16)
20090988:	000b883a 	mov	r5,zero
2009098c:	0091f3c0 	call	20091f3c <_Balloc>
20090990:	d8800715 	stw	r2,28(sp)
20090994:	d8c00717 	ldw	r3,28(sp)
20090998:	00bfffc4 	movi	r2,-1
2009099c:	01000044 	movi	r4,1
200909a0:	d8800c15 	stw	r2,48(sp)
200909a4:	80c01015 	stw	r3,64(r16)
200909a8:	d9000b15 	stw	r4,44(sp)
200909ac:	d8800615 	stw	r2,24(sp)
200909b0:	d8002215 	stw	zero,136(sp)
200909b4:	003c1906 	br	2008fa1c <__flash_rwdata_start+0xffff4bb0>
200909b8:	193d2926 	beq	r3,r4,2008fe60 <__flash_rwdata_start+0xffff4ff4>
200909bc:	00c00f04 	movi	r3,60
200909c0:	1885c83a 	sub	r2,r3,r2
200909c4:	003d7b06 	br	2008ffb4 <__flash_rwdata_start+0xffff5148>
200909c8:	000b883a 	mov	r5,zero
200909cc:	003b1006 	br	2008f610 <__flash_rwdata_start+0xffff47a4>

200909d0 <__sflush_r>:
200909d0:	2880030b 	ldhu	r2,12(r5)
200909d4:	defffb04 	addi	sp,sp,-20
200909d8:	dcc00315 	stw	r19,12(sp)
200909dc:	dc400115 	stw	r17,4(sp)
200909e0:	dfc00415 	stw	ra,16(sp)
200909e4:	dc800215 	stw	r18,8(sp)
200909e8:	dc000015 	stw	r16,0(sp)
200909ec:	10c0020c 	andi	r3,r2,8
200909f0:	2823883a 	mov	r17,r5
200909f4:	2027883a 	mov	r19,r4
200909f8:	1800311e 	bne	r3,zero,20090ac0 <__sflush_r+0xf0>
200909fc:	28c00117 	ldw	r3,4(r5)
20090a00:	10820014 	ori	r2,r2,2048
20090a04:	2880030d 	sth	r2,12(r5)
20090a08:	00c04b0e 	bge	zero,r3,20090b38 <__sflush_r+0x168>
20090a0c:	8a000a17 	ldw	r8,40(r17)
20090a10:	40002326 	beq	r8,zero,20090aa0 <__sflush_r+0xd0>
20090a14:	9c000017 	ldw	r16,0(r19)
20090a18:	10c4000c 	andi	r3,r2,4096
20090a1c:	98000015 	stw	zero,0(r19)
20090a20:	18004826 	beq	r3,zero,20090b44 <__sflush_r+0x174>
20090a24:	89801417 	ldw	r6,80(r17)
20090a28:	10c0010c 	andi	r3,r2,4
20090a2c:	18000626 	beq	r3,zero,20090a48 <__sflush_r+0x78>
20090a30:	88c00117 	ldw	r3,4(r17)
20090a34:	88800c17 	ldw	r2,48(r17)
20090a38:	30cdc83a 	sub	r6,r6,r3
20090a3c:	10000226 	beq	r2,zero,20090a48 <__sflush_r+0x78>
20090a40:	88800f17 	ldw	r2,60(r17)
20090a44:	308dc83a 	sub	r6,r6,r2
20090a48:	89400717 	ldw	r5,28(r17)
20090a4c:	9809883a 	mov	r4,r19
20090a50:	000f883a 	mov	r7,zero
20090a54:	403ee83a 	callr	r8
20090a58:	00ffffc4 	movi	r3,-1
20090a5c:	10c04426 	beq	r2,r3,20090b70 <__sflush_r+0x1a0>
20090a60:	88c0030b 	ldhu	r3,12(r17)
20090a64:	89000417 	ldw	r4,16(r17)
20090a68:	88000115 	stw	zero,4(r17)
20090a6c:	197dffcc 	andi	r5,r3,63487
20090a70:	8940030d 	sth	r5,12(r17)
20090a74:	89000015 	stw	r4,0(r17)
20090a78:	18c4000c 	andi	r3,r3,4096
20090a7c:	18002c1e 	bne	r3,zero,20090b30 <__sflush_r+0x160>
20090a80:	89400c17 	ldw	r5,48(r17)
20090a84:	9c000015 	stw	r16,0(r19)
20090a88:	28000526 	beq	r5,zero,20090aa0 <__sflush_r+0xd0>
20090a8c:	88801004 	addi	r2,r17,64
20090a90:	28800226 	beq	r5,r2,20090a9c <__sflush_r+0xcc>
20090a94:	9809883a 	mov	r4,r19
20090a98:	00911280 	call	20091128 <_free_r>
20090a9c:	88000c15 	stw	zero,48(r17)
20090aa0:	0005883a 	mov	r2,zero
20090aa4:	dfc00417 	ldw	ra,16(sp)
20090aa8:	dcc00317 	ldw	r19,12(sp)
20090aac:	dc800217 	ldw	r18,8(sp)
20090ab0:	dc400117 	ldw	r17,4(sp)
20090ab4:	dc000017 	ldw	r16,0(sp)
20090ab8:	dec00504 	addi	sp,sp,20
20090abc:	f800283a 	ret
20090ac0:	2c800417 	ldw	r18,16(r5)
20090ac4:	903ff626 	beq	r18,zero,20090aa0 <__flash_rwdata_start+0xffff5c34>
20090ac8:	2c000017 	ldw	r16,0(r5)
20090acc:	108000cc 	andi	r2,r2,3
20090ad0:	2c800015 	stw	r18,0(r5)
20090ad4:	84a1c83a 	sub	r16,r16,r18
20090ad8:	1000131e 	bne	r2,zero,20090b28 <__sflush_r+0x158>
20090adc:	28800517 	ldw	r2,20(r5)
20090ae0:	88800215 	stw	r2,8(r17)
20090ae4:	04000316 	blt	zero,r16,20090af4 <__sflush_r+0x124>
20090ae8:	003fed06 	br	20090aa0 <__flash_rwdata_start+0xffff5c34>
20090aec:	90a5883a 	add	r18,r18,r2
20090af0:	043feb0e 	bge	zero,r16,20090aa0 <__flash_rwdata_start+0xffff5c34>
20090af4:	88800917 	ldw	r2,36(r17)
20090af8:	89400717 	ldw	r5,28(r17)
20090afc:	800f883a 	mov	r7,r16
20090b00:	900d883a 	mov	r6,r18
20090b04:	9809883a 	mov	r4,r19
20090b08:	103ee83a 	callr	r2
20090b0c:	80a1c83a 	sub	r16,r16,r2
20090b10:	00bff616 	blt	zero,r2,20090aec <__flash_rwdata_start+0xffff5c80>
20090b14:	88c0030b 	ldhu	r3,12(r17)
20090b18:	00bfffc4 	movi	r2,-1
20090b1c:	18c01014 	ori	r3,r3,64
20090b20:	88c0030d 	sth	r3,12(r17)
20090b24:	003fdf06 	br	20090aa4 <__flash_rwdata_start+0xffff5c38>
20090b28:	0005883a 	mov	r2,zero
20090b2c:	003fec06 	br	20090ae0 <__flash_rwdata_start+0xffff5c74>
20090b30:	88801415 	stw	r2,80(r17)
20090b34:	003fd206 	br	20090a80 <__flash_rwdata_start+0xffff5c14>
20090b38:	28c00f17 	ldw	r3,60(r5)
20090b3c:	00ffb316 	blt	zero,r3,20090a0c <__flash_rwdata_start+0xffff5ba0>
20090b40:	003fd706 	br	20090aa0 <__flash_rwdata_start+0xffff5c34>
20090b44:	89400717 	ldw	r5,28(r17)
20090b48:	000d883a 	mov	r6,zero
20090b4c:	9809883a 	mov	r4,r19
20090b50:	01c00044 	movi	r7,1
20090b54:	403ee83a 	callr	r8
20090b58:	100d883a 	mov	r6,r2
20090b5c:	00bfffc4 	movi	r2,-1
20090b60:	30801426 	beq	r6,r2,20090bb4 <__sflush_r+0x1e4>
20090b64:	8880030b 	ldhu	r2,12(r17)
20090b68:	8a000a17 	ldw	r8,40(r17)
20090b6c:	003fae06 	br	20090a28 <__flash_rwdata_start+0xffff5bbc>
20090b70:	98c00017 	ldw	r3,0(r19)
20090b74:	183fba26 	beq	r3,zero,20090a60 <__flash_rwdata_start+0xffff5bf4>
20090b78:	01000744 	movi	r4,29
20090b7c:	19000626 	beq	r3,r4,20090b98 <__sflush_r+0x1c8>
20090b80:	01000584 	movi	r4,22
20090b84:	19000426 	beq	r3,r4,20090b98 <__sflush_r+0x1c8>
20090b88:	88c0030b 	ldhu	r3,12(r17)
20090b8c:	18c01014 	ori	r3,r3,64
20090b90:	88c0030d 	sth	r3,12(r17)
20090b94:	003fc306 	br	20090aa4 <__flash_rwdata_start+0xffff5c38>
20090b98:	8880030b 	ldhu	r2,12(r17)
20090b9c:	88c00417 	ldw	r3,16(r17)
20090ba0:	88000115 	stw	zero,4(r17)
20090ba4:	10bdffcc 	andi	r2,r2,63487
20090ba8:	8880030d 	sth	r2,12(r17)
20090bac:	88c00015 	stw	r3,0(r17)
20090bb0:	003fb306 	br	20090a80 <__flash_rwdata_start+0xffff5c14>
20090bb4:	98800017 	ldw	r2,0(r19)
20090bb8:	103fea26 	beq	r2,zero,20090b64 <__flash_rwdata_start+0xffff5cf8>
20090bbc:	00c00744 	movi	r3,29
20090bc0:	10c00226 	beq	r2,r3,20090bcc <__sflush_r+0x1fc>
20090bc4:	00c00584 	movi	r3,22
20090bc8:	10ffd21e 	bne	r2,r3,20090b14 <__flash_rwdata_start+0xffff5ca8>
20090bcc:	9c000015 	stw	r16,0(r19)
20090bd0:	0005883a 	mov	r2,zero
20090bd4:	003fb306 	br	20090aa4 <__flash_rwdata_start+0xffff5c38>

20090bd8 <_fflush_r>:
20090bd8:	defffd04 	addi	sp,sp,-12
20090bdc:	dc000115 	stw	r16,4(sp)
20090be0:	dfc00215 	stw	ra,8(sp)
20090be4:	2021883a 	mov	r16,r4
20090be8:	20000226 	beq	r4,zero,20090bf4 <_fflush_r+0x1c>
20090bec:	20800e17 	ldw	r2,56(r4)
20090bf0:	10000c26 	beq	r2,zero,20090c24 <_fflush_r+0x4c>
20090bf4:	2880030f 	ldh	r2,12(r5)
20090bf8:	1000051e 	bne	r2,zero,20090c10 <_fflush_r+0x38>
20090bfc:	0005883a 	mov	r2,zero
20090c00:	dfc00217 	ldw	ra,8(sp)
20090c04:	dc000117 	ldw	r16,4(sp)
20090c08:	dec00304 	addi	sp,sp,12
20090c0c:	f800283a 	ret
20090c10:	8009883a 	mov	r4,r16
20090c14:	dfc00217 	ldw	ra,8(sp)
20090c18:	dc000117 	ldw	r16,4(sp)
20090c1c:	dec00304 	addi	sp,sp,12
20090c20:	00909d01 	jmpi	200909d0 <__sflush_r>
20090c24:	d9400015 	stw	r5,0(sp)
20090c28:	0090fb40 	call	20090fb4 <__sinit>
20090c2c:	d9400017 	ldw	r5,0(sp)
20090c30:	003ff006 	br	20090bf4 <__flash_rwdata_start+0xffff5d88>

20090c34 <fflush>:
20090c34:	20000526 	beq	r4,zero,20090c4c <fflush+0x18>
20090c38:	00800034 	movhi	r2,0
20090c3c:	108a8c04 	addi	r2,r2,10800
20090c40:	200b883a 	mov	r5,r4
20090c44:	11000017 	ldw	r4,0(r2)
20090c48:	0090bd81 	jmpi	20090bd8 <_fflush_r>
20090c4c:	00800034 	movhi	r2,0
20090c50:	108a8b04 	addi	r2,r2,10796
20090c54:	11000017 	ldw	r4,0(r2)
20090c58:	01480274 	movhi	r5,8201
20090c5c:	2942f604 	addi	r5,r5,3032
20090c60:	009199c1 	jmpi	2009199c <_fwalk_reent>

20090c64 <__fp_lock>:
20090c64:	0005883a 	mov	r2,zero
20090c68:	f800283a 	ret

20090c6c <__fp_unlock>:
20090c6c:	0005883a 	mov	r2,zero
20090c70:	f800283a 	ret

20090c74 <_cleanup_r>:
20090c74:	01480274 	movhi	r5,8201
20090c78:	29589504 	addi	r5,r5,25172
20090c7c:	009199c1 	jmpi	2009199c <_fwalk_reent>

20090c80 <__sinit.part.1>:
20090c80:	defff704 	addi	sp,sp,-36
20090c84:	00c80274 	movhi	r3,8201
20090c88:	dfc00815 	stw	ra,32(sp)
20090c8c:	ddc00715 	stw	r23,28(sp)
20090c90:	dd800615 	stw	r22,24(sp)
20090c94:	dd400515 	stw	r21,20(sp)
20090c98:	dd000415 	stw	r20,16(sp)
20090c9c:	dcc00315 	stw	r19,12(sp)
20090ca0:	dc800215 	stw	r18,8(sp)
20090ca4:	dc400115 	stw	r17,4(sp)
20090ca8:	dc000015 	stw	r16,0(sp)
20090cac:	18c31d04 	addi	r3,r3,3188
20090cb0:	24000117 	ldw	r16,4(r4)
20090cb4:	20c00f15 	stw	r3,60(r4)
20090cb8:	2080bb04 	addi	r2,r4,748
20090cbc:	00c000c4 	movi	r3,3
20090cc0:	20c0b915 	stw	r3,740(r4)
20090cc4:	2080ba15 	stw	r2,744(r4)
20090cc8:	2000b815 	stw	zero,736(r4)
20090ccc:	05c00204 	movi	r23,8
20090cd0:	00800104 	movi	r2,4
20090cd4:	2025883a 	mov	r18,r4
20090cd8:	b80d883a 	mov	r6,r23
20090cdc:	81001704 	addi	r4,r16,92
20090ce0:	000b883a 	mov	r5,zero
20090ce4:	80000015 	stw	zero,0(r16)
20090ce8:	80000115 	stw	zero,4(r16)
20090cec:	80000215 	stw	zero,8(r16)
20090cf0:	8080030d 	sth	r2,12(r16)
20090cf4:	80001915 	stw	zero,100(r16)
20090cf8:	8000038d 	sth	zero,14(r16)
20090cfc:	80000415 	stw	zero,16(r16)
20090d00:	80000515 	stw	zero,20(r16)
20090d04:	80000615 	stw	zero,24(r16)
20090d08:	008a7ac0 	call	2008a7ac <memset>
20090d0c:	05880274 	movhi	r22,8201
20090d10:	94400217 	ldw	r17,8(r18)
20090d14:	05480274 	movhi	r21,8201
20090d18:	05080274 	movhi	r20,8201
20090d1c:	04c80274 	movhi	r19,8201
20090d20:	b58d8904 	addi	r22,r22,13860
20090d24:	ad4da004 	addi	r21,r21,13952
20090d28:	a50dbf04 	addi	r20,r20,14076
20090d2c:	9ccdd604 	addi	r19,r19,14168
20090d30:	85800815 	stw	r22,32(r16)
20090d34:	85400915 	stw	r21,36(r16)
20090d38:	85000a15 	stw	r20,40(r16)
20090d3c:	84c00b15 	stw	r19,44(r16)
20090d40:	84000715 	stw	r16,28(r16)
20090d44:	00800284 	movi	r2,10
20090d48:	8880030d 	sth	r2,12(r17)
20090d4c:	00800044 	movi	r2,1
20090d50:	89001704 	addi	r4,r17,92
20090d54:	b80d883a 	mov	r6,r23
20090d58:	000b883a 	mov	r5,zero
20090d5c:	88000015 	stw	zero,0(r17)
20090d60:	88000115 	stw	zero,4(r17)
20090d64:	88000215 	stw	zero,8(r17)
20090d68:	88001915 	stw	zero,100(r17)
20090d6c:	8880038d 	sth	r2,14(r17)
20090d70:	88000415 	stw	zero,16(r17)
20090d74:	88000515 	stw	zero,20(r17)
20090d78:	88000615 	stw	zero,24(r17)
20090d7c:	008a7ac0 	call	2008a7ac <memset>
20090d80:	94000317 	ldw	r16,12(r18)
20090d84:	00800484 	movi	r2,18
20090d88:	8c400715 	stw	r17,28(r17)
20090d8c:	8d800815 	stw	r22,32(r17)
20090d90:	8d400915 	stw	r21,36(r17)
20090d94:	8d000a15 	stw	r20,40(r17)
20090d98:	8cc00b15 	stw	r19,44(r17)
20090d9c:	8080030d 	sth	r2,12(r16)
20090da0:	00800084 	movi	r2,2
20090da4:	80000015 	stw	zero,0(r16)
20090da8:	80000115 	stw	zero,4(r16)
20090dac:	80000215 	stw	zero,8(r16)
20090db0:	80001915 	stw	zero,100(r16)
20090db4:	8080038d 	sth	r2,14(r16)
20090db8:	80000415 	stw	zero,16(r16)
20090dbc:	80000515 	stw	zero,20(r16)
20090dc0:	80000615 	stw	zero,24(r16)
20090dc4:	81001704 	addi	r4,r16,92
20090dc8:	000b883a 	mov	r5,zero
20090dcc:	b80d883a 	mov	r6,r23
20090dd0:	008a7ac0 	call	2008a7ac <memset>
20090dd4:	00800044 	movi	r2,1
20090dd8:	84000715 	stw	r16,28(r16)
20090ddc:	85800815 	stw	r22,32(r16)
20090de0:	85400915 	stw	r21,36(r16)
20090de4:	85000a15 	stw	r20,40(r16)
20090de8:	84c00b15 	stw	r19,44(r16)
20090dec:	90800e15 	stw	r2,56(r18)
20090df0:	dfc00817 	ldw	ra,32(sp)
20090df4:	ddc00717 	ldw	r23,28(sp)
20090df8:	dd800617 	ldw	r22,24(sp)
20090dfc:	dd400517 	ldw	r21,20(sp)
20090e00:	dd000417 	ldw	r20,16(sp)
20090e04:	dcc00317 	ldw	r19,12(sp)
20090e08:	dc800217 	ldw	r18,8(sp)
20090e0c:	dc400117 	ldw	r17,4(sp)
20090e10:	dc000017 	ldw	r16,0(sp)
20090e14:	dec00904 	addi	sp,sp,36
20090e18:	f800283a 	ret

20090e1c <__sfmoreglue>:
20090e1c:	defffc04 	addi	sp,sp,-16
20090e20:	dc400115 	stw	r17,4(sp)
20090e24:	2c7fffc4 	addi	r17,r5,-1
20090e28:	8c401a24 	muli	r17,r17,104
20090e2c:	dc800215 	stw	r18,8(sp)
20090e30:	2825883a 	mov	r18,r5
20090e34:	89401d04 	addi	r5,r17,116
20090e38:	dc000015 	stw	r16,0(sp)
20090e3c:	dfc00315 	stw	ra,12(sp)
20090e40:	0089e500 	call	20089e50 <_malloc_r>
20090e44:	1021883a 	mov	r16,r2
20090e48:	10000726 	beq	r2,zero,20090e68 <__sfmoreglue+0x4c>
20090e4c:	11000304 	addi	r4,r2,12
20090e50:	10000015 	stw	zero,0(r2)
20090e54:	14800115 	stw	r18,4(r2)
20090e58:	11000215 	stw	r4,8(r2)
20090e5c:	000b883a 	mov	r5,zero
20090e60:	89801a04 	addi	r6,r17,104
20090e64:	008a7ac0 	call	2008a7ac <memset>
20090e68:	8005883a 	mov	r2,r16
20090e6c:	dfc00317 	ldw	ra,12(sp)
20090e70:	dc800217 	ldw	r18,8(sp)
20090e74:	dc400117 	ldw	r17,4(sp)
20090e78:	dc000017 	ldw	r16,0(sp)
20090e7c:	dec00404 	addi	sp,sp,16
20090e80:	f800283a 	ret

20090e84 <__sfp>:
20090e84:	00800034 	movhi	r2,0
20090e88:	defffb04 	addi	sp,sp,-20
20090e8c:	108a8b04 	addi	r2,r2,10796
20090e90:	dc800215 	stw	r18,8(sp)
20090e94:	14800017 	ldw	r18,0(r2)
20090e98:	dcc00315 	stw	r19,12(sp)
20090e9c:	dfc00415 	stw	ra,16(sp)
20090ea0:	90800e17 	ldw	r2,56(r18)
20090ea4:	dc400115 	stw	r17,4(sp)
20090ea8:	dc000015 	stw	r16,0(sp)
20090eac:	2027883a 	mov	r19,r4
20090eb0:	1000021e 	bne	r2,zero,20090ebc <__sfp+0x38>
20090eb4:	9009883a 	mov	r4,r18
20090eb8:	0090c800 	call	20090c80 <__sinit.part.1>
20090ebc:	9480b804 	addi	r18,r18,736
20090ec0:	047fffc4 	movi	r17,-1
20090ec4:	91400117 	ldw	r5,4(r18)
20090ec8:	94000217 	ldw	r16,8(r18)
20090ecc:	297fffc4 	addi	r5,r5,-1
20090ed0:	28000a16 	blt	r5,zero,20090efc <__sfp+0x78>
20090ed4:	8080030f 	ldh	r2,12(r16)
20090ed8:	10000c26 	beq	r2,zero,20090f0c <__sfp+0x88>
20090edc:	80c01d04 	addi	r3,r16,116
20090ee0:	00000206 	br	20090eec <__sfp+0x68>
20090ee4:	18bfe60f 	ldh	r2,-104(r3)
20090ee8:	10000826 	beq	r2,zero,20090f0c <__sfp+0x88>
20090eec:	297fffc4 	addi	r5,r5,-1
20090ef0:	1c3ffd04 	addi	r16,r3,-12
20090ef4:	18c01a04 	addi	r3,r3,104
20090ef8:	2c7ffa1e 	bne	r5,r17,20090ee4 <__flash_rwdata_start+0xffff6078>
20090efc:	90800017 	ldw	r2,0(r18)
20090f00:	10001d26 	beq	r2,zero,20090f78 <__sfp+0xf4>
20090f04:	1025883a 	mov	r18,r2
20090f08:	003fee06 	br	20090ec4 <__flash_rwdata_start+0xffff6058>
20090f0c:	00bfffc4 	movi	r2,-1
20090f10:	8080038d 	sth	r2,14(r16)
20090f14:	00800044 	movi	r2,1
20090f18:	8080030d 	sth	r2,12(r16)
20090f1c:	80001915 	stw	zero,100(r16)
20090f20:	80000015 	stw	zero,0(r16)
20090f24:	80000215 	stw	zero,8(r16)
20090f28:	80000115 	stw	zero,4(r16)
20090f2c:	80000415 	stw	zero,16(r16)
20090f30:	80000515 	stw	zero,20(r16)
20090f34:	80000615 	stw	zero,24(r16)
20090f38:	81001704 	addi	r4,r16,92
20090f3c:	000b883a 	mov	r5,zero
20090f40:	01800204 	movi	r6,8
20090f44:	008a7ac0 	call	2008a7ac <memset>
20090f48:	8005883a 	mov	r2,r16
20090f4c:	80000c15 	stw	zero,48(r16)
20090f50:	80000d15 	stw	zero,52(r16)
20090f54:	80001115 	stw	zero,68(r16)
20090f58:	80001215 	stw	zero,72(r16)
20090f5c:	dfc00417 	ldw	ra,16(sp)
20090f60:	dcc00317 	ldw	r19,12(sp)
20090f64:	dc800217 	ldw	r18,8(sp)
20090f68:	dc400117 	ldw	r17,4(sp)
20090f6c:	dc000017 	ldw	r16,0(sp)
20090f70:	dec00504 	addi	sp,sp,20
20090f74:	f800283a 	ret
20090f78:	9809883a 	mov	r4,r19
20090f7c:	01400104 	movi	r5,4
20090f80:	0090e1c0 	call	20090e1c <__sfmoreglue>
20090f84:	90800015 	stw	r2,0(r18)
20090f88:	103fde1e 	bne	r2,zero,20090f04 <__flash_rwdata_start+0xffff6098>
20090f8c:	00800304 	movi	r2,12
20090f90:	98800015 	stw	r2,0(r19)
20090f94:	0005883a 	mov	r2,zero
20090f98:	003ff006 	br	20090f5c <__flash_rwdata_start+0xffff60f0>

20090f9c <_cleanup>:
20090f9c:	00800034 	movhi	r2,0
20090fa0:	108a8b04 	addi	r2,r2,10796
20090fa4:	11000017 	ldw	r4,0(r2)
20090fa8:	01480274 	movhi	r5,8201
20090fac:	29589504 	addi	r5,r5,25172
20090fb0:	009199c1 	jmpi	2009199c <_fwalk_reent>

20090fb4 <__sinit>:
20090fb4:	20800e17 	ldw	r2,56(r4)
20090fb8:	10000126 	beq	r2,zero,20090fc0 <__sinit+0xc>
20090fbc:	f800283a 	ret
20090fc0:	0090c801 	jmpi	20090c80 <__sinit.part.1>

20090fc4 <__sfp_lock_acquire>:
20090fc4:	f800283a 	ret

20090fc8 <__sfp_lock_release>:
20090fc8:	f800283a 	ret

20090fcc <__sinit_lock_acquire>:
20090fcc:	f800283a 	ret

20090fd0 <__sinit_lock_release>:
20090fd0:	f800283a 	ret

20090fd4 <__fp_lock_all>:
20090fd4:	00800034 	movhi	r2,0
20090fd8:	108a8c04 	addi	r2,r2,10800
20090fdc:	11000017 	ldw	r4,0(r2)
20090fe0:	01480274 	movhi	r5,8201
20090fe4:	29431904 	addi	r5,r5,3172
20090fe8:	00918d81 	jmpi	200918d8 <_fwalk>

20090fec <__fp_unlock_all>:
20090fec:	00800034 	movhi	r2,0
20090ff0:	108a8c04 	addi	r2,r2,10800
20090ff4:	11000017 	ldw	r4,0(r2)
20090ff8:	01480274 	movhi	r5,8201
20090ffc:	29431b04 	addi	r5,r5,3180
20091000:	00918d81 	jmpi	200918d8 <_fwalk>

20091004 <_malloc_trim_r>:
20091004:	defffb04 	addi	sp,sp,-20
20091008:	dcc00315 	stw	r19,12(sp)
2009100c:	04c00034 	movhi	r19,0
20091010:	dc800215 	stw	r18,8(sp)
20091014:	dc400115 	stw	r17,4(sp)
20091018:	dc000015 	stw	r16,0(sp)
2009101c:	dfc00415 	stw	ra,16(sp)
20091020:	2821883a 	mov	r16,r5
20091024:	9cc49d04 	addi	r19,r19,4724
20091028:	2025883a 	mov	r18,r4
2009102c:	0097ae40 	call	20097ae4 <__malloc_lock>
20091030:	98800217 	ldw	r2,8(r19)
20091034:	14400117 	ldw	r17,4(r2)
20091038:	00bfff04 	movi	r2,-4
2009103c:	88a2703a 	and	r17,r17,r2
20091040:	8c21c83a 	sub	r16,r17,r16
20091044:	8403fbc4 	addi	r16,r16,4079
20091048:	8020d33a 	srli	r16,r16,12
2009104c:	0083ffc4 	movi	r2,4095
20091050:	843fffc4 	addi	r16,r16,-1
20091054:	8020933a 	slli	r16,r16,12
20091058:	1400060e 	bge	r2,r16,20091074 <_malloc_trim_r+0x70>
2009105c:	9009883a 	mov	r4,r18
20091060:	000b883a 	mov	r5,zero
20091064:	008aa140 	call	2008aa14 <_sbrk_r>
20091068:	98c00217 	ldw	r3,8(r19)
2009106c:	1c47883a 	add	r3,r3,r17
20091070:	10c00a26 	beq	r2,r3,2009109c <_malloc_trim_r+0x98>
20091074:	9009883a 	mov	r4,r18
20091078:	0097ae80 	call	20097ae8 <__malloc_unlock>
2009107c:	0005883a 	mov	r2,zero
20091080:	dfc00417 	ldw	ra,16(sp)
20091084:	dcc00317 	ldw	r19,12(sp)
20091088:	dc800217 	ldw	r18,8(sp)
2009108c:	dc400117 	ldw	r17,4(sp)
20091090:	dc000017 	ldw	r16,0(sp)
20091094:	dec00504 	addi	sp,sp,20
20091098:	f800283a 	ret
2009109c:	9009883a 	mov	r4,r18
200910a0:	040bc83a 	sub	r5,zero,r16
200910a4:	008aa140 	call	2008aa14 <_sbrk_r>
200910a8:	00ffffc4 	movi	r3,-1
200910ac:	10c00d26 	beq	r2,r3,200910e4 <_malloc_trim_r+0xe0>
200910b0:	00c00034 	movhi	r3,0
200910b4:	18cb9d04 	addi	r3,r3,11892
200910b8:	18800017 	ldw	r2,0(r3)
200910bc:	99000217 	ldw	r4,8(r19)
200910c0:	8c23c83a 	sub	r17,r17,r16
200910c4:	8c400054 	ori	r17,r17,1
200910c8:	1421c83a 	sub	r16,r2,r16
200910cc:	24400115 	stw	r17,4(r4)
200910d0:	9009883a 	mov	r4,r18
200910d4:	1c000015 	stw	r16,0(r3)
200910d8:	0097ae80 	call	20097ae8 <__malloc_unlock>
200910dc:	00800044 	movi	r2,1
200910e0:	003fe706 	br	20091080 <__flash_rwdata_start+0xffff6214>
200910e4:	9009883a 	mov	r4,r18
200910e8:	000b883a 	mov	r5,zero
200910ec:	008aa140 	call	2008aa14 <_sbrk_r>
200910f0:	99000217 	ldw	r4,8(r19)
200910f4:	014003c4 	movi	r5,15
200910f8:	1107c83a 	sub	r3,r2,r4
200910fc:	28ffdd0e 	bge	r5,r3,20091074 <__flash_rwdata_start+0xffff6208>
20091100:	01400034 	movhi	r5,0
20091104:	294a8d04 	addi	r5,r5,10804
20091108:	29400017 	ldw	r5,0(r5)
2009110c:	18c00054 	ori	r3,r3,1
20091110:	20c00115 	stw	r3,4(r4)
20091114:	00c00034 	movhi	r3,0
20091118:	1145c83a 	sub	r2,r2,r5
2009111c:	18cb9d04 	addi	r3,r3,11892
20091120:	18800015 	stw	r2,0(r3)
20091124:	003fd306 	br	20091074 <__flash_rwdata_start+0xffff6208>

20091128 <_free_r>:
20091128:	28004c26 	beq	r5,zero,2009125c <_free_r+0x134>
2009112c:	defffd04 	addi	sp,sp,-12
20091130:	dc400115 	stw	r17,4(sp)
20091134:	dc000015 	stw	r16,0(sp)
20091138:	2023883a 	mov	r17,r4
2009113c:	2821883a 	mov	r16,r5
20091140:	dfc00215 	stw	ra,8(sp)
20091144:	0097ae40 	call	20097ae4 <__malloc_lock>
20091148:	813fff17 	ldw	r4,-4(r16)
2009114c:	00bfff84 	movi	r2,-2
20091150:	02400034 	movhi	r9,0
20091154:	81bffe04 	addi	r6,r16,-8
20091158:	2084703a 	and	r2,r4,r2
2009115c:	4a449d04 	addi	r9,r9,4724
20091160:	308b883a 	add	r5,r6,r2
20091164:	2a000117 	ldw	r8,4(r5)
20091168:	49c00217 	ldw	r7,8(r9)
2009116c:	00ffff04 	movi	r3,-4
20091170:	40c6703a 	and	r3,r8,r3
20091174:	39405326 	beq	r7,r5,200912c4 <_free_r+0x19c>
20091178:	28c00115 	stw	r3,4(r5)
2009117c:	2100004c 	andi	r4,r4,1
20091180:	2000091e 	bne	r4,zero,200911a8 <_free_r+0x80>
20091184:	81fffe17 	ldw	r7,-8(r16)
20091188:	4a000204 	addi	r8,r9,8
2009118c:	31cdc83a 	sub	r6,r6,r7
20091190:	31000217 	ldw	r4,8(r6)
20091194:	11c5883a 	add	r2,r2,r7
20091198:	22006126 	beq	r4,r8,20091320 <_free_r+0x1f8>
2009119c:	31c00317 	ldw	r7,12(r6)
200911a0:	21c00315 	stw	r7,12(r4)
200911a4:	39000215 	stw	r4,8(r7)
200911a8:	28c9883a 	add	r4,r5,r3
200911ac:	21c00117 	ldw	r7,4(r4)
200911b0:	39c0004c 	andi	r7,r7,1
200911b4:	38000d1e 	bne	r7,zero,200911ec <_free_r+0xc4>
200911b8:	29000217 	ldw	r4,8(r5)
200911bc:	10c5883a 	add	r2,r2,r3
200911c0:	00c00034 	movhi	r3,0
200911c4:	18c49f04 	addi	r3,r3,4732
200911c8:	20c07526 	beq	r4,r3,200913a0 <_free_r+0x278>
200911cc:	29c00317 	ldw	r7,12(r5)
200911d0:	11400054 	ori	r5,r2,1
200911d4:	3087883a 	add	r3,r6,r2
200911d8:	21c00315 	stw	r7,12(r4)
200911dc:	39000215 	stw	r4,8(r7)
200911e0:	31400115 	stw	r5,4(r6)
200911e4:	18800015 	stw	r2,0(r3)
200911e8:	00000406 	br	200911fc <_free_r+0xd4>
200911ec:	10c00054 	ori	r3,r2,1
200911f0:	30c00115 	stw	r3,4(r6)
200911f4:	3087883a 	add	r3,r6,r2
200911f8:	18800015 	stw	r2,0(r3)
200911fc:	00c07fc4 	movi	r3,511
20091200:	18801736 	bltu	r3,r2,20091260 <_free_r+0x138>
20091204:	1004d0fa 	srli	r2,r2,3
20091208:	01400044 	movi	r5,1
2009120c:	49000117 	ldw	r4,4(r9)
20091210:	1087883a 	add	r3,r2,r2
20091214:	18c7883a 	add	r3,r3,r3
20091218:	1005d0ba 	srai	r2,r2,2
2009121c:	18c7883a 	add	r3,r3,r3
20091220:	1a47883a 	add	r3,r3,r9
20091224:	19c00217 	ldw	r7,8(r3)
20091228:	2884983a 	sll	r2,r5,r2
2009122c:	30c00315 	stw	r3,12(r6)
20091230:	31c00215 	stw	r7,8(r6)
20091234:	1104b03a 	or	r2,r2,r4
20091238:	19800215 	stw	r6,8(r3)
2009123c:	48800115 	stw	r2,4(r9)
20091240:	39800315 	stw	r6,12(r7)
20091244:	8809883a 	mov	r4,r17
20091248:	dfc00217 	ldw	ra,8(sp)
2009124c:	dc400117 	ldw	r17,4(sp)
20091250:	dc000017 	ldw	r16,0(sp)
20091254:	dec00304 	addi	sp,sp,12
20091258:	0097ae81 	jmpi	20097ae8 <__malloc_unlock>
2009125c:	f800283a 	ret
20091260:	1006d27a 	srli	r3,r2,9
20091264:	01000104 	movi	r4,4
20091268:	20c04036 	bltu	r4,r3,2009136c <_free_r+0x244>
2009126c:	1006d1ba 	srli	r3,r2,6
20091270:	19400e04 	addi	r5,r3,56
20091274:	2947883a 	add	r3,r5,r5
20091278:	18c7883a 	add	r3,r3,r3
2009127c:	18c7883a 	add	r3,r3,r3
20091280:	1a49883a 	add	r4,r3,r9
20091284:	20c00217 	ldw	r3,8(r4)
20091288:	01c00034 	movhi	r7,0
2009128c:	39c49d04 	addi	r7,r7,4724
20091290:	19003b26 	beq	r3,r4,20091380 <_free_r+0x258>
20091294:	01ffff04 	movi	r7,-4
20091298:	19400117 	ldw	r5,4(r3)
2009129c:	29ca703a 	and	r5,r5,r7
200912a0:	1140022e 	bgeu	r2,r5,200912ac <_free_r+0x184>
200912a4:	18c00217 	ldw	r3,8(r3)
200912a8:	20fffb1e 	bne	r4,r3,20091298 <__flash_rwdata_start+0xffff642c>
200912ac:	18800317 	ldw	r2,12(r3)
200912b0:	30800315 	stw	r2,12(r6)
200912b4:	30c00215 	stw	r3,8(r6)
200912b8:	11800215 	stw	r6,8(r2)
200912bc:	19800315 	stw	r6,12(r3)
200912c0:	003fe006 	br	20091244 <__flash_rwdata_start+0xffff63d8>
200912c4:	2100004c 	andi	r4,r4,1
200912c8:	1885883a 	add	r2,r3,r2
200912cc:	2000071e 	bne	r4,zero,200912ec <_free_r+0x1c4>
200912d0:	817ffe17 	ldw	r5,-8(r16)
200912d4:	314dc83a 	sub	r6,r6,r5
200912d8:	30c00317 	ldw	r3,12(r6)
200912dc:	31000217 	ldw	r4,8(r6)
200912e0:	1145883a 	add	r2,r2,r5
200912e4:	20c00315 	stw	r3,12(r4)
200912e8:	19000215 	stw	r4,8(r3)
200912ec:	10c00054 	ori	r3,r2,1
200912f0:	30c00115 	stw	r3,4(r6)
200912f4:	00c00034 	movhi	r3,0
200912f8:	18ca8e04 	addi	r3,r3,10808
200912fc:	18c00017 	ldw	r3,0(r3)
20091300:	49800215 	stw	r6,8(r9)
20091304:	10ffcf36 	bltu	r2,r3,20091244 <__flash_rwdata_start+0xffff63d8>
20091308:	00800034 	movhi	r2,0
2009130c:	108aaf04 	addi	r2,r2,10940
20091310:	11400017 	ldw	r5,0(r2)
20091314:	8809883a 	mov	r4,r17
20091318:	00910040 	call	20091004 <_malloc_trim_r>
2009131c:	003fc906 	br	20091244 <__flash_rwdata_start+0xffff63d8>
20091320:	28c9883a 	add	r4,r5,r3
20091324:	21000117 	ldw	r4,4(r4)
20091328:	2100004c 	andi	r4,r4,1
2009132c:	20000a1e 	bne	r4,zero,20091358 <_free_r+0x230>
20091330:	29000317 	ldw	r4,12(r5)
20091334:	29400217 	ldw	r5,8(r5)
20091338:	10c5883a 	add	r2,r2,r3
2009133c:	10c00054 	ori	r3,r2,1
20091340:	29000315 	stw	r4,12(r5)
20091344:	21400215 	stw	r5,8(r4)
20091348:	30c00115 	stw	r3,4(r6)
2009134c:	308d883a 	add	r6,r6,r2
20091350:	30800015 	stw	r2,0(r6)
20091354:	003fbb06 	br	20091244 <__flash_rwdata_start+0xffff63d8>
20091358:	10c00054 	ori	r3,r2,1
2009135c:	30c00115 	stw	r3,4(r6)
20091360:	308d883a 	add	r6,r6,r2
20091364:	30800015 	stw	r2,0(r6)
20091368:	003fb606 	br	20091244 <__flash_rwdata_start+0xffff63d8>
2009136c:	01000504 	movi	r4,20
20091370:	20c01436 	bltu	r4,r3,200913c4 <_free_r+0x29c>
20091374:	194016c4 	addi	r5,r3,91
20091378:	2947883a 	add	r3,r5,r5
2009137c:	003fbe06 	br	20091278 <__flash_rwdata_start+0xffff640c>
20091380:	280bd0ba 	srai	r5,r5,2
20091384:	00800044 	movi	r2,1
20091388:	39000117 	ldw	r4,4(r7)
2009138c:	114a983a 	sll	r5,r2,r5
20091390:	1805883a 	mov	r2,r3
20091394:	2908b03a 	or	r4,r5,r4
20091398:	39000115 	stw	r4,4(r7)
2009139c:	003fc406 	br	200912b0 <__flash_rwdata_start+0xffff6444>
200913a0:	49800515 	stw	r6,20(r9)
200913a4:	49800415 	stw	r6,16(r9)
200913a8:	10c00054 	ori	r3,r2,1
200913ac:	31000315 	stw	r4,12(r6)
200913b0:	31000215 	stw	r4,8(r6)
200913b4:	30c00115 	stw	r3,4(r6)
200913b8:	308d883a 	add	r6,r6,r2
200913bc:	30800015 	stw	r2,0(r6)
200913c0:	003fa006 	br	20091244 <__flash_rwdata_start+0xffff63d8>
200913c4:	01001504 	movi	r4,84
200913c8:	20c00436 	bltu	r4,r3,200913dc <_free_r+0x2b4>
200913cc:	1006d33a 	srli	r3,r2,12
200913d0:	19401b84 	addi	r5,r3,110
200913d4:	2947883a 	add	r3,r5,r5
200913d8:	003fa706 	br	20091278 <__flash_rwdata_start+0xffff640c>
200913dc:	01005504 	movi	r4,340
200913e0:	20c00436 	bltu	r4,r3,200913f4 <_free_r+0x2cc>
200913e4:	1006d3fa 	srli	r3,r2,15
200913e8:	19401dc4 	addi	r5,r3,119
200913ec:	2947883a 	add	r3,r5,r5
200913f0:	003fa106 	br	20091278 <__flash_rwdata_start+0xffff640c>
200913f4:	01015504 	movi	r4,1364
200913f8:	20c00436 	bltu	r4,r3,2009140c <_free_r+0x2e4>
200913fc:	1006d4ba 	srli	r3,r2,18
20091400:	19401f04 	addi	r5,r3,124
20091404:	2947883a 	add	r3,r5,r5
20091408:	003f9b06 	br	20091278 <__flash_rwdata_start+0xffff640c>
2009140c:	00c03f04 	movi	r3,252
20091410:	01401f84 	movi	r5,126
20091414:	003f9806 	br	20091278 <__flash_rwdata_start+0xffff640c>

20091418 <__sfvwrite_r>:
20091418:	30800217 	ldw	r2,8(r6)
2009141c:	10006726 	beq	r2,zero,200915bc <__sfvwrite_r+0x1a4>
20091420:	defff404 	addi	sp,sp,-48
20091424:	dd000615 	stw	r20,24(sp)
20091428:	2029883a 	mov	r20,r4
2009142c:	2900030b 	ldhu	r4,12(r5)
20091430:	ddc00915 	stw	r23,36(sp)
20091434:	dc000215 	stw	r16,8(sp)
20091438:	dfc00b15 	stw	ra,44(sp)
2009143c:	df000a15 	stw	fp,40(sp)
20091440:	dd800815 	stw	r22,32(sp)
20091444:	dd400715 	stw	r21,28(sp)
20091448:	dcc00515 	stw	r19,20(sp)
2009144c:	dc800415 	stw	r18,16(sp)
20091450:	dc400315 	stw	r17,12(sp)
20091454:	2080020c 	andi	r2,r4,8
20091458:	2821883a 	mov	r16,r5
2009145c:	302f883a 	mov	r23,r6
20091460:	10002726 	beq	r2,zero,20091500 <__sfvwrite_r+0xe8>
20091464:	28800417 	ldw	r2,16(r5)
20091468:	10002526 	beq	r2,zero,20091500 <__sfvwrite_r+0xe8>
2009146c:	2080008c 	andi	r2,r4,2
20091470:	bc400017 	ldw	r17,0(r23)
20091474:	10002a26 	beq	r2,zero,20091520 <__sfvwrite_r+0x108>
20091478:	05600034 	movhi	r21,32768
2009147c:	0027883a 	mov	r19,zero
20091480:	0025883a 	mov	r18,zero
20091484:	ad7f0004 	addi	r21,r21,-1024
20091488:	980d883a 	mov	r6,r19
2009148c:	a009883a 	mov	r4,r20
20091490:	90004626 	beq	r18,zero,200915ac <__sfvwrite_r+0x194>
20091494:	900f883a 	mov	r7,r18
20091498:	81400717 	ldw	r5,28(r16)
2009149c:	ac80022e 	bgeu	r21,r18,200914a8 <__sfvwrite_r+0x90>
200914a0:	01e00034 	movhi	r7,32768
200914a4:	39ff0004 	addi	r7,r7,-1024
200914a8:	80800917 	ldw	r2,36(r16)
200914ac:	103ee83a 	callr	r2
200914b0:	0080520e 	bge	zero,r2,200915fc <__sfvwrite_r+0x1e4>
200914b4:	b8c00217 	ldw	r3,8(r23)
200914b8:	98a7883a 	add	r19,r19,r2
200914bc:	90a5c83a 	sub	r18,r18,r2
200914c0:	1885c83a 	sub	r2,r3,r2
200914c4:	b8800215 	stw	r2,8(r23)
200914c8:	103fef1e 	bne	r2,zero,20091488 <__flash_rwdata_start+0xffff661c>
200914cc:	0005883a 	mov	r2,zero
200914d0:	dfc00b17 	ldw	ra,44(sp)
200914d4:	df000a17 	ldw	fp,40(sp)
200914d8:	ddc00917 	ldw	r23,36(sp)
200914dc:	dd800817 	ldw	r22,32(sp)
200914e0:	dd400717 	ldw	r21,28(sp)
200914e4:	dd000617 	ldw	r20,24(sp)
200914e8:	dcc00517 	ldw	r19,20(sp)
200914ec:	dc800417 	ldw	r18,16(sp)
200914f0:	dc400317 	ldw	r17,12(sp)
200914f4:	dc000217 	ldw	r16,8(sp)
200914f8:	dec00c04 	addi	sp,sp,48
200914fc:	f800283a 	ret
20091500:	a009883a 	mov	r4,r20
20091504:	800b883a 	mov	r5,r16
20091508:	008edc00 	call	2008edc0 <__swsetup_r>
2009150c:	1000ec1e 	bne	r2,zero,200918c0 <__sfvwrite_r+0x4a8>
20091510:	8100030b 	ldhu	r4,12(r16)
20091514:	bc400017 	ldw	r17,0(r23)
20091518:	2080008c 	andi	r2,r4,2
2009151c:	103fd61e 	bne	r2,zero,20091478 <__flash_rwdata_start+0xffff660c>
20091520:	2080004c 	andi	r2,r4,1
20091524:	10003a1e 	bne	r2,zero,20091610 <__sfvwrite_r+0x1f8>
20091528:	0039883a 	mov	fp,zero
2009152c:	0025883a 	mov	r18,zero
20091530:	90001a26 	beq	r18,zero,2009159c <__sfvwrite_r+0x184>
20091534:	2080800c 	andi	r2,r4,512
20091538:	85800217 	ldw	r22,8(r16)
2009153c:	10007626 	beq	r2,zero,20091718 <__sfvwrite_r+0x300>
20091540:	b027883a 	mov	r19,r22
20091544:	95809436 	bltu	r18,r22,20091798 <__sfvwrite_r+0x380>
20091548:	2081200c 	andi	r2,r4,1152
2009154c:	10009f1e 	bne	r2,zero,200917cc <__sfvwrite_r+0x3b4>
20091550:	81000017 	ldw	r4,0(r16)
20091554:	e00b883a 	mov	r5,fp
20091558:	980d883a 	mov	r6,r19
2009155c:	0091de00 	call	20091de0 <memmove>
20091560:	81000217 	ldw	r4,8(r16)
20091564:	81400017 	ldw	r5,0(r16)
20091568:	9005883a 	mov	r2,r18
2009156c:	2587c83a 	sub	r3,r4,r22
20091570:	2ce7883a 	add	r19,r5,r19
20091574:	80c00215 	stw	r3,8(r16)
20091578:	84c00015 	stw	r19,0(r16)
2009157c:	b8c00217 	ldw	r3,8(r23)
20091580:	e0b9883a 	add	fp,fp,r2
20091584:	90a5c83a 	sub	r18,r18,r2
20091588:	1885c83a 	sub	r2,r3,r2
2009158c:	b8800215 	stw	r2,8(r23)
20091590:	103fce26 	beq	r2,zero,200914cc <__flash_rwdata_start+0xffff6660>
20091594:	8100030b 	ldhu	r4,12(r16)
20091598:	903fe61e 	bne	r18,zero,20091534 <__flash_rwdata_start+0xffff66c8>
2009159c:	8f000017 	ldw	fp,0(r17)
200915a0:	8c800117 	ldw	r18,4(r17)
200915a4:	8c400204 	addi	r17,r17,8
200915a8:	003fe106 	br	20091530 <__flash_rwdata_start+0xffff66c4>
200915ac:	8cc00017 	ldw	r19,0(r17)
200915b0:	8c800117 	ldw	r18,4(r17)
200915b4:	8c400204 	addi	r17,r17,8
200915b8:	003fb306 	br	20091488 <__flash_rwdata_start+0xffff661c>
200915bc:	0005883a 	mov	r2,zero
200915c0:	f800283a 	ret
200915c4:	00a00034 	movhi	r2,32768
200915c8:	10bfffc4 	addi	r2,r2,-1
200915cc:	9009883a 	mov	r4,r18
200915d0:	1480012e 	bgeu	r2,r18,200915d8 <__sfvwrite_r+0x1c0>
200915d4:	1009883a 	mov	r4,r2
200915d8:	980b883a 	mov	r5,r19
200915dc:	0086b780 	call	20086b78 <__divsi3>
200915e0:	81400717 	ldw	r5,28(r16)
200915e4:	80c00917 	ldw	r3,36(r16)
200915e8:	988f383a 	mul	r7,r19,r2
200915ec:	a009883a 	mov	r4,r20
200915f0:	e00d883a 	mov	r6,fp
200915f4:	183ee83a 	callr	r3
200915f8:	00bfe016 	blt	zero,r2,2009157c <__flash_rwdata_start+0xffff6710>
200915fc:	8080030b 	ldhu	r2,12(r16)
20091600:	10801014 	ori	r2,r2,64
20091604:	8080030d 	sth	r2,12(r16)
20091608:	00bfffc4 	movi	r2,-1
2009160c:	003fb006 	br	200914d0 <__flash_rwdata_start+0xffff6664>
20091610:	0027883a 	mov	r19,zero
20091614:	0011883a 	mov	r8,zero
20091618:	0039883a 	mov	fp,zero
2009161c:	0025883a 	mov	r18,zero
20091620:	90001f26 	beq	r18,zero,200916a0 <__sfvwrite_r+0x288>
20091624:	40006026 	beq	r8,zero,200917a8 <__sfvwrite_r+0x390>
20091628:	982b883a 	mov	r21,r19
2009162c:	94c0012e 	bgeu	r18,r19,20091634 <__sfvwrite_r+0x21c>
20091630:	902b883a 	mov	r21,r18
20091634:	81000017 	ldw	r4,0(r16)
20091638:	80800417 	ldw	r2,16(r16)
2009163c:	a82d883a 	mov	r22,r21
20091640:	81800217 	ldw	r6,8(r16)
20091644:	81c00517 	ldw	r7,20(r16)
20091648:	1100022e 	bgeu	r2,r4,20091654 <__sfvwrite_r+0x23c>
2009164c:	31c7883a 	add	r3,r6,r7
20091650:	1d401816 	blt	r3,r21,200916b4 <__sfvwrite_r+0x29c>
20091654:	a9c04416 	blt	r21,r7,20091768 <__sfvwrite_r+0x350>
20091658:	80800917 	ldw	r2,36(r16)
2009165c:	81400717 	ldw	r5,28(r16)
20091660:	a009883a 	mov	r4,r20
20091664:	da000115 	stw	r8,4(sp)
20091668:	e00d883a 	mov	r6,fp
2009166c:	103ee83a 	callr	r2
20091670:	102d883a 	mov	r22,r2
20091674:	da000117 	ldw	r8,4(sp)
20091678:	00bfe00e 	bge	zero,r2,200915fc <__flash_rwdata_start+0xffff6790>
2009167c:	9da7c83a 	sub	r19,r19,r22
20091680:	98001f26 	beq	r19,zero,20091700 <__sfvwrite_r+0x2e8>
20091684:	b8800217 	ldw	r2,8(r23)
20091688:	e5b9883a 	add	fp,fp,r22
2009168c:	95a5c83a 	sub	r18,r18,r22
20091690:	15adc83a 	sub	r22,r2,r22
20091694:	bd800215 	stw	r22,8(r23)
20091698:	b03f8c26 	beq	r22,zero,200914cc <__flash_rwdata_start+0xffff6660>
2009169c:	903fe11e 	bne	r18,zero,20091624 <__flash_rwdata_start+0xffff67b8>
200916a0:	8f000017 	ldw	fp,0(r17)
200916a4:	8c800117 	ldw	r18,4(r17)
200916a8:	0011883a 	mov	r8,zero
200916ac:	8c400204 	addi	r17,r17,8
200916b0:	003fdb06 	br	20091620 <__flash_rwdata_start+0xffff67b4>
200916b4:	180d883a 	mov	r6,r3
200916b8:	e00b883a 	mov	r5,fp
200916bc:	da000115 	stw	r8,4(sp)
200916c0:	d8c00015 	stw	r3,0(sp)
200916c4:	0091de00 	call	20091de0 <memmove>
200916c8:	d8c00017 	ldw	r3,0(sp)
200916cc:	80800017 	ldw	r2,0(r16)
200916d0:	a009883a 	mov	r4,r20
200916d4:	800b883a 	mov	r5,r16
200916d8:	10c5883a 	add	r2,r2,r3
200916dc:	80800015 	stw	r2,0(r16)
200916e0:	d8c00015 	stw	r3,0(sp)
200916e4:	0090bd80 	call	20090bd8 <_fflush_r>
200916e8:	d8c00017 	ldw	r3,0(sp)
200916ec:	da000117 	ldw	r8,4(sp)
200916f0:	103fc21e 	bne	r2,zero,200915fc <__flash_rwdata_start+0xffff6790>
200916f4:	182d883a 	mov	r22,r3
200916f8:	9da7c83a 	sub	r19,r19,r22
200916fc:	983fe11e 	bne	r19,zero,20091684 <__flash_rwdata_start+0xffff6818>
20091700:	a009883a 	mov	r4,r20
20091704:	800b883a 	mov	r5,r16
20091708:	0090bd80 	call	20090bd8 <_fflush_r>
2009170c:	103fbb1e 	bne	r2,zero,200915fc <__flash_rwdata_start+0xffff6790>
20091710:	0011883a 	mov	r8,zero
20091714:	003fdb06 	br	20091684 <__flash_rwdata_start+0xffff6818>
20091718:	81000017 	ldw	r4,0(r16)
2009171c:	80800417 	ldw	r2,16(r16)
20091720:	11000236 	bltu	r2,r4,2009172c <__sfvwrite_r+0x314>
20091724:	84c00517 	ldw	r19,20(r16)
20091728:	94ffa62e 	bgeu	r18,r19,200915c4 <__flash_rwdata_start+0xffff6758>
2009172c:	9027883a 	mov	r19,r18
20091730:	b480012e 	bgeu	r22,r18,20091738 <__sfvwrite_r+0x320>
20091734:	b027883a 	mov	r19,r22
20091738:	e00b883a 	mov	r5,fp
2009173c:	980d883a 	mov	r6,r19
20091740:	0091de00 	call	20091de0 <memmove>
20091744:	80800217 	ldw	r2,8(r16)
20091748:	80c00017 	ldw	r3,0(r16)
2009174c:	14c5c83a 	sub	r2,r2,r19
20091750:	1cc7883a 	add	r3,r3,r19
20091754:	80800215 	stw	r2,8(r16)
20091758:	80c00015 	stw	r3,0(r16)
2009175c:	10004326 	beq	r2,zero,2009186c <__sfvwrite_r+0x454>
20091760:	9805883a 	mov	r2,r19
20091764:	003f8506 	br	2009157c <__flash_rwdata_start+0xffff6710>
20091768:	a80d883a 	mov	r6,r21
2009176c:	e00b883a 	mov	r5,fp
20091770:	da000115 	stw	r8,4(sp)
20091774:	0091de00 	call	20091de0 <memmove>
20091778:	80800217 	ldw	r2,8(r16)
2009177c:	80c00017 	ldw	r3,0(r16)
20091780:	da000117 	ldw	r8,4(sp)
20091784:	1545c83a 	sub	r2,r2,r21
20091788:	1d6b883a 	add	r21,r3,r21
2009178c:	80800215 	stw	r2,8(r16)
20091790:	85400015 	stw	r21,0(r16)
20091794:	003fb906 	br	2009167c <__flash_rwdata_start+0xffff6810>
20091798:	81000017 	ldw	r4,0(r16)
2009179c:	902d883a 	mov	r22,r18
200917a0:	9027883a 	mov	r19,r18
200917a4:	003f6b06 	br	20091554 <__flash_rwdata_start+0xffff66e8>
200917a8:	e009883a 	mov	r4,fp
200917ac:	01400284 	movi	r5,10
200917b0:	900d883a 	mov	r6,r18
200917b4:	0091cf80 	call	20091cf8 <memchr>
200917b8:	10003e26 	beq	r2,zero,200918b4 <__sfvwrite_r+0x49c>
200917bc:	10800044 	addi	r2,r2,1
200917c0:	1727c83a 	sub	r19,r2,fp
200917c4:	02000044 	movi	r8,1
200917c8:	003f9706 	br	20091628 <__flash_rwdata_start+0xffff67bc>
200917cc:	80800517 	ldw	r2,20(r16)
200917d0:	81400417 	ldw	r5,16(r16)
200917d4:	80c00017 	ldw	r3,0(r16)
200917d8:	10a7883a 	add	r19,r2,r2
200917dc:	9885883a 	add	r2,r19,r2
200917e0:	1026d7fa 	srli	r19,r2,31
200917e4:	196bc83a 	sub	r21,r3,r5
200917e8:	a9800044 	addi	r6,r21,1
200917ec:	9885883a 	add	r2,r19,r2
200917f0:	1027d07a 	srai	r19,r2,1
200917f4:	3485883a 	add	r2,r6,r18
200917f8:	980d883a 	mov	r6,r19
200917fc:	9880022e 	bgeu	r19,r2,20091808 <__sfvwrite_r+0x3f0>
20091800:	1027883a 	mov	r19,r2
20091804:	100d883a 	mov	r6,r2
20091808:	2101000c 	andi	r4,r4,1024
2009180c:	20001c26 	beq	r4,zero,20091880 <__sfvwrite_r+0x468>
20091810:	a009883a 	mov	r4,r20
20091814:	300b883a 	mov	r5,r6
20091818:	0089e500 	call	20089e50 <_malloc_r>
2009181c:	102d883a 	mov	r22,r2
20091820:	10002926 	beq	r2,zero,200918c8 <__sfvwrite_r+0x4b0>
20091824:	81400417 	ldw	r5,16(r16)
20091828:	1009883a 	mov	r4,r2
2009182c:	a80d883a 	mov	r6,r21
20091830:	008a6740 	call	2008a674 <memcpy>
20091834:	8080030b 	ldhu	r2,12(r16)
20091838:	00fedfc4 	movi	r3,-1153
2009183c:	10c4703a 	and	r2,r2,r3
20091840:	10802014 	ori	r2,r2,128
20091844:	8080030d 	sth	r2,12(r16)
20091848:	b549883a 	add	r4,r22,r21
2009184c:	9d4bc83a 	sub	r5,r19,r21
20091850:	85800415 	stw	r22,16(r16)
20091854:	84c00515 	stw	r19,20(r16)
20091858:	81000015 	stw	r4,0(r16)
2009185c:	902d883a 	mov	r22,r18
20091860:	81400215 	stw	r5,8(r16)
20091864:	9027883a 	mov	r19,r18
20091868:	003f3a06 	br	20091554 <__flash_rwdata_start+0xffff66e8>
2009186c:	a009883a 	mov	r4,r20
20091870:	800b883a 	mov	r5,r16
20091874:	0090bd80 	call	20090bd8 <_fflush_r>
20091878:	103fb926 	beq	r2,zero,20091760 <__flash_rwdata_start+0xffff68f4>
2009187c:	003f5f06 	br	200915fc <__flash_rwdata_start+0xffff6790>
20091880:	a009883a 	mov	r4,r20
20091884:	00930480 	call	20093048 <_realloc_r>
20091888:	102d883a 	mov	r22,r2
2009188c:	103fee1e 	bne	r2,zero,20091848 <__flash_rwdata_start+0xffff69dc>
20091890:	81400417 	ldw	r5,16(r16)
20091894:	a009883a 	mov	r4,r20
20091898:	00911280 	call	20091128 <_free_r>
2009189c:	8080030b 	ldhu	r2,12(r16)
200918a0:	00ffdfc4 	movi	r3,-129
200918a4:	1884703a 	and	r2,r3,r2
200918a8:	00c00304 	movi	r3,12
200918ac:	a0c00015 	stw	r3,0(r20)
200918b0:	003f5306 	br	20091600 <__flash_rwdata_start+0xffff6794>
200918b4:	94c00044 	addi	r19,r18,1
200918b8:	02000044 	movi	r8,1
200918bc:	003f5a06 	br	20091628 <__flash_rwdata_start+0xffff67bc>
200918c0:	00bfffc4 	movi	r2,-1
200918c4:	003f0206 	br	200914d0 <__flash_rwdata_start+0xffff6664>
200918c8:	00800304 	movi	r2,12
200918cc:	a0800015 	stw	r2,0(r20)
200918d0:	8080030b 	ldhu	r2,12(r16)
200918d4:	003f4a06 	br	20091600 <__flash_rwdata_start+0xffff6794>

200918d8 <_fwalk>:
200918d8:	defff704 	addi	sp,sp,-36
200918dc:	dd000415 	stw	r20,16(sp)
200918e0:	dfc00815 	stw	ra,32(sp)
200918e4:	ddc00715 	stw	r23,28(sp)
200918e8:	dd800615 	stw	r22,24(sp)
200918ec:	dd400515 	stw	r21,20(sp)
200918f0:	dcc00315 	stw	r19,12(sp)
200918f4:	dc800215 	stw	r18,8(sp)
200918f8:	dc400115 	stw	r17,4(sp)
200918fc:	dc000015 	stw	r16,0(sp)
20091900:	2500b804 	addi	r20,r4,736
20091904:	a0002326 	beq	r20,zero,20091994 <_fwalk+0xbc>
20091908:	282b883a 	mov	r21,r5
2009190c:	002f883a 	mov	r23,zero
20091910:	05800044 	movi	r22,1
20091914:	04ffffc4 	movi	r19,-1
20091918:	a4400117 	ldw	r17,4(r20)
2009191c:	a4800217 	ldw	r18,8(r20)
20091920:	8c7fffc4 	addi	r17,r17,-1
20091924:	88000d16 	blt	r17,zero,2009195c <_fwalk+0x84>
20091928:	94000304 	addi	r16,r18,12
2009192c:	94800384 	addi	r18,r18,14
20091930:	80c0000b 	ldhu	r3,0(r16)
20091934:	8c7fffc4 	addi	r17,r17,-1
20091938:	813ffd04 	addi	r4,r16,-12
2009193c:	b0c0042e 	bgeu	r22,r3,20091950 <_fwalk+0x78>
20091940:	90c0000f 	ldh	r3,0(r18)
20091944:	1cc00226 	beq	r3,r19,20091950 <_fwalk+0x78>
20091948:	a83ee83a 	callr	r21
2009194c:	b8aeb03a 	or	r23,r23,r2
20091950:	84001a04 	addi	r16,r16,104
20091954:	94801a04 	addi	r18,r18,104
20091958:	8cfff51e 	bne	r17,r19,20091930 <__flash_rwdata_start+0xffff6ac4>
2009195c:	a5000017 	ldw	r20,0(r20)
20091960:	a03fed1e 	bne	r20,zero,20091918 <__flash_rwdata_start+0xffff6aac>
20091964:	b805883a 	mov	r2,r23
20091968:	dfc00817 	ldw	ra,32(sp)
2009196c:	ddc00717 	ldw	r23,28(sp)
20091970:	dd800617 	ldw	r22,24(sp)
20091974:	dd400517 	ldw	r21,20(sp)
20091978:	dd000417 	ldw	r20,16(sp)
2009197c:	dcc00317 	ldw	r19,12(sp)
20091980:	dc800217 	ldw	r18,8(sp)
20091984:	dc400117 	ldw	r17,4(sp)
20091988:	dc000017 	ldw	r16,0(sp)
2009198c:	dec00904 	addi	sp,sp,36
20091990:	f800283a 	ret
20091994:	002f883a 	mov	r23,zero
20091998:	003ff206 	br	20091964 <__flash_rwdata_start+0xffff6af8>

2009199c <_fwalk_reent>:
2009199c:	defff704 	addi	sp,sp,-36
200919a0:	dd400515 	stw	r21,20(sp)
200919a4:	dfc00815 	stw	ra,32(sp)
200919a8:	ddc00715 	stw	r23,28(sp)
200919ac:	dd800615 	stw	r22,24(sp)
200919b0:	dd000415 	stw	r20,16(sp)
200919b4:	dcc00315 	stw	r19,12(sp)
200919b8:	dc800215 	stw	r18,8(sp)
200919bc:	dc400115 	stw	r17,4(sp)
200919c0:	dc000015 	stw	r16,0(sp)
200919c4:	2540b804 	addi	r21,r4,736
200919c8:	a8002326 	beq	r21,zero,20091a58 <_fwalk_reent+0xbc>
200919cc:	2829883a 	mov	r20,r5
200919d0:	202d883a 	mov	r22,r4
200919d4:	002f883a 	mov	r23,zero
200919d8:	04c00044 	movi	r19,1
200919dc:	04bfffc4 	movi	r18,-1
200919e0:	ac400117 	ldw	r17,4(r21)
200919e4:	ac000217 	ldw	r16,8(r21)
200919e8:	8c7fffc4 	addi	r17,r17,-1
200919ec:	88000c16 	blt	r17,zero,20091a20 <_fwalk_reent+0x84>
200919f0:	84000304 	addi	r16,r16,12
200919f4:	80c0000b 	ldhu	r3,0(r16)
200919f8:	8c7fffc4 	addi	r17,r17,-1
200919fc:	817ffd04 	addi	r5,r16,-12
20091a00:	98c0052e 	bgeu	r19,r3,20091a18 <_fwalk_reent+0x7c>
20091a04:	80c0008f 	ldh	r3,2(r16)
20091a08:	b009883a 	mov	r4,r22
20091a0c:	1c800226 	beq	r3,r18,20091a18 <_fwalk_reent+0x7c>
20091a10:	a03ee83a 	callr	r20
20091a14:	b8aeb03a 	or	r23,r23,r2
20091a18:	84001a04 	addi	r16,r16,104
20091a1c:	8cbff51e 	bne	r17,r18,200919f4 <__flash_rwdata_start+0xffff6b88>
20091a20:	ad400017 	ldw	r21,0(r21)
20091a24:	a83fee1e 	bne	r21,zero,200919e0 <__flash_rwdata_start+0xffff6b74>
20091a28:	b805883a 	mov	r2,r23
20091a2c:	dfc00817 	ldw	ra,32(sp)
20091a30:	ddc00717 	ldw	r23,28(sp)
20091a34:	dd800617 	ldw	r22,24(sp)
20091a38:	dd400517 	ldw	r21,20(sp)
20091a3c:	dd000417 	ldw	r20,16(sp)
20091a40:	dcc00317 	ldw	r19,12(sp)
20091a44:	dc800217 	ldw	r18,8(sp)
20091a48:	dc400117 	ldw	r17,4(sp)
20091a4c:	dc000017 	ldw	r16,0(sp)
20091a50:	dec00904 	addi	sp,sp,36
20091a54:	f800283a 	ret
20091a58:	002f883a 	mov	r23,zero
20091a5c:	003ff206 	br	20091a28 <__flash_rwdata_start+0xffff6bbc>

20091a60 <_setlocale_r>:
20091a60:	30001b26 	beq	r6,zero,20091ad0 <_setlocale_r+0x70>
20091a64:	01400034 	movhi	r5,0
20091a68:	defffe04 	addi	sp,sp,-8
20091a6c:	2941f704 	addi	r5,r5,2012
20091a70:	3009883a 	mov	r4,r6
20091a74:	dc000015 	stw	r16,0(sp)
20091a78:	dfc00115 	stw	ra,4(sp)
20091a7c:	3021883a 	mov	r16,r6
20091a80:	008ab2c0 	call	2008ab2c <strcmp>
20091a84:	1000061e 	bne	r2,zero,20091aa0 <_setlocale_r+0x40>
20091a88:	00800034 	movhi	r2,0
20091a8c:	10802a04 	addi	r2,r2,168
20091a90:	dfc00117 	ldw	ra,4(sp)
20091a94:	dc000017 	ldw	r16,0(sp)
20091a98:	dec00204 	addi	sp,sp,8
20091a9c:	f800283a 	ret
20091aa0:	01400034 	movhi	r5,0
20091aa4:	29402a04 	addi	r5,r5,168
20091aa8:	8009883a 	mov	r4,r16
20091aac:	008ab2c0 	call	2008ab2c <strcmp>
20091ab0:	103ff526 	beq	r2,zero,20091a88 <__flash_rwdata_start+0xffff6c1c>
20091ab4:	01400034 	movhi	r5,0
20091ab8:	2940d604 	addi	r5,r5,856
20091abc:	8009883a 	mov	r4,r16
20091ac0:	008ab2c0 	call	2008ab2c <strcmp>
20091ac4:	103ff026 	beq	r2,zero,20091a88 <__flash_rwdata_start+0xffff6c1c>
20091ac8:	0005883a 	mov	r2,zero
20091acc:	003ff006 	br	20091a90 <__flash_rwdata_start+0xffff6c24>
20091ad0:	00800034 	movhi	r2,0
20091ad4:	10802a04 	addi	r2,r2,168
20091ad8:	f800283a 	ret

20091adc <__locale_charset>:
20091adc:	00800034 	movhi	r2,0
20091ae0:	1085a704 	addi	r2,r2,5788
20091ae4:	f800283a 	ret

20091ae8 <__locale_mb_cur_max>:
20091ae8:	00800034 	movhi	r2,0
20091aec:	108a8f04 	addi	r2,r2,10812
20091af0:	10800017 	ldw	r2,0(r2)
20091af4:	f800283a 	ret

20091af8 <__locale_msgcharset>:
20091af8:	00800034 	movhi	r2,0
20091afc:	10859f04 	addi	r2,r2,5756
20091b00:	f800283a 	ret

20091b04 <__locale_cjk_lang>:
20091b04:	0005883a 	mov	r2,zero
20091b08:	f800283a 	ret

20091b0c <_localeconv_r>:
20091b0c:	00800034 	movhi	r2,0
20091b10:	1085af04 	addi	r2,r2,5820
20091b14:	f800283a 	ret

20091b18 <setlocale>:
20091b18:	00c00034 	movhi	r3,0
20091b1c:	18ca8c04 	addi	r3,r3,10800
20091b20:	2005883a 	mov	r2,r4
20091b24:	19000017 	ldw	r4,0(r3)
20091b28:	280d883a 	mov	r6,r5
20091b2c:	100b883a 	mov	r5,r2
20091b30:	0091a601 	jmpi	20091a60 <_setlocale_r>

20091b34 <localeconv>:
20091b34:	00800034 	movhi	r2,0
20091b38:	1085af04 	addi	r2,r2,5820
20091b3c:	f800283a 	ret

20091b40 <__smakebuf_r>:
20091b40:	2880030b 	ldhu	r2,12(r5)
20091b44:	10c0008c 	andi	r3,r2,2
20091b48:	1800401e 	bne	r3,zero,20091c4c <__smakebuf_r+0x10c>
20091b4c:	deffec04 	addi	sp,sp,-80
20091b50:	dc000f15 	stw	r16,60(sp)
20091b54:	2821883a 	mov	r16,r5
20091b58:	2940038f 	ldh	r5,14(r5)
20091b5c:	dc401015 	stw	r17,64(sp)
20091b60:	dfc01315 	stw	ra,76(sp)
20091b64:	dcc01215 	stw	r19,72(sp)
20091b68:	dc801115 	stw	r18,68(sp)
20091b6c:	2023883a 	mov	r17,r4
20091b70:	28001b16 	blt	r5,zero,20091be0 <__smakebuf_r+0xa0>
20091b74:	d80d883a 	mov	r6,sp
20091b78:	00965380 	call	20096538 <_fstat_r>
20091b7c:	10001716 	blt	r2,zero,20091bdc <__smakebuf_r+0x9c>
20091b80:	d8800117 	ldw	r2,4(sp)
20091b84:	00e00014 	movui	r3,32768
20091b88:	10bc000c 	andi	r2,r2,61440
20091b8c:	10c03726 	beq	r2,r3,20091c6c <__smakebuf_r+0x12c>
20091b90:	80c0030b 	ldhu	r3,12(r16)
20091b94:	18c20014 	ori	r3,r3,2048
20091b98:	80c0030d 	sth	r3,12(r16)
20091b9c:	00c80004 	movi	r3,8192
20091ba0:	10c03c1e 	bne	r2,r3,20091c94 <__smakebuf_r+0x154>
20091ba4:	8140038f 	ldh	r5,14(r16)
20091ba8:	8809883a 	mov	r4,r17
20091bac:	00965900 	call	20096590 <_isatty_r>
20091bb0:	10004e26 	beq	r2,zero,20091cec <__smakebuf_r+0x1ac>
20091bb4:	8080030b 	ldhu	r2,12(r16)
20091bb8:	04c00044 	movi	r19,1
20091bbc:	80c010c4 	addi	r3,r16,67
20091bc0:	14c4b03a 	or	r2,r2,r19
20091bc4:	8080030d 	sth	r2,12(r16)
20091bc8:	80c00015 	stw	r3,0(r16)
20091bcc:	80c00415 	stw	r3,16(r16)
20091bd0:	84c00515 	stw	r19,20(r16)
20091bd4:	04810004 	movi	r18,1024
20091bd8:	00000706 	br	20091bf8 <__smakebuf_r+0xb8>
20091bdc:	8080030b 	ldhu	r2,12(r16)
20091be0:	10c0200c 	andi	r3,r2,128
20091be4:	18001f1e 	bne	r3,zero,20091c64 <__smakebuf_r+0x124>
20091be8:	04810004 	movi	r18,1024
20091bec:	10820014 	ori	r2,r2,2048
20091bf0:	8080030d 	sth	r2,12(r16)
20091bf4:	0027883a 	mov	r19,zero
20091bf8:	8809883a 	mov	r4,r17
20091bfc:	900b883a 	mov	r5,r18
20091c00:	0089e500 	call	20089e50 <_malloc_r>
20091c04:	10002e26 	beq	r2,zero,20091cc0 <__smakebuf_r+0x180>
20091c08:	80c0030b 	ldhu	r3,12(r16)
20091c0c:	01080274 	movhi	r4,8201
20091c10:	21031d04 	addi	r4,r4,3188
20091c14:	89000f15 	stw	r4,60(r17)
20091c18:	18c02014 	ori	r3,r3,128
20091c1c:	80c0030d 	sth	r3,12(r16)
20091c20:	80800015 	stw	r2,0(r16)
20091c24:	80800415 	stw	r2,16(r16)
20091c28:	84800515 	stw	r18,20(r16)
20091c2c:	98001c1e 	bne	r19,zero,20091ca0 <__smakebuf_r+0x160>
20091c30:	dfc01317 	ldw	ra,76(sp)
20091c34:	dcc01217 	ldw	r19,72(sp)
20091c38:	dc801117 	ldw	r18,68(sp)
20091c3c:	dc401017 	ldw	r17,64(sp)
20091c40:	dc000f17 	ldw	r16,60(sp)
20091c44:	dec01404 	addi	sp,sp,80
20091c48:	f800283a 	ret
20091c4c:	288010c4 	addi	r2,r5,67
20091c50:	28800015 	stw	r2,0(r5)
20091c54:	28800415 	stw	r2,16(r5)
20091c58:	00800044 	movi	r2,1
20091c5c:	28800515 	stw	r2,20(r5)
20091c60:	f800283a 	ret
20091c64:	04801004 	movi	r18,64
20091c68:	003fe006 	br	20091bec <__flash_rwdata_start+0xffff6d80>
20091c6c:	81000a17 	ldw	r4,40(r16)
20091c70:	00c80274 	movhi	r3,8201
20091c74:	18cdbf04 	addi	r3,r3,14076
20091c78:	20ffc51e 	bne	r4,r3,20091b90 <__flash_rwdata_start+0xffff6d24>
20091c7c:	80c0030b 	ldhu	r3,12(r16)
20091c80:	01010004 	movi	r4,1024
20091c84:	81001315 	stw	r4,76(r16)
20091c88:	1906b03a 	or	r3,r3,r4
20091c8c:	80c0030d 	sth	r3,12(r16)
20091c90:	003fc206 	br	20091b9c <__flash_rwdata_start+0xffff6d30>
20091c94:	0027883a 	mov	r19,zero
20091c98:	04810004 	movi	r18,1024
20091c9c:	003fd606 	br	20091bf8 <__flash_rwdata_start+0xffff6d8c>
20091ca0:	8140038f 	ldh	r5,14(r16)
20091ca4:	8809883a 	mov	r4,r17
20091ca8:	00965900 	call	20096590 <_isatty_r>
20091cac:	103fe026 	beq	r2,zero,20091c30 <__flash_rwdata_start+0xffff6dc4>
20091cb0:	8080030b 	ldhu	r2,12(r16)
20091cb4:	10800054 	ori	r2,r2,1
20091cb8:	8080030d 	sth	r2,12(r16)
20091cbc:	003fdc06 	br	20091c30 <__flash_rwdata_start+0xffff6dc4>
20091cc0:	8080030b 	ldhu	r2,12(r16)
20091cc4:	10c0800c 	andi	r3,r2,512
20091cc8:	183fd91e 	bne	r3,zero,20091c30 <__flash_rwdata_start+0xffff6dc4>
20091ccc:	10800094 	ori	r2,r2,2
20091cd0:	80c010c4 	addi	r3,r16,67
20091cd4:	8080030d 	sth	r2,12(r16)
20091cd8:	00800044 	movi	r2,1
20091cdc:	80c00015 	stw	r3,0(r16)
20091ce0:	80c00415 	stw	r3,16(r16)
20091ce4:	80800515 	stw	r2,20(r16)
20091ce8:	003fd106 	br	20091c30 <__flash_rwdata_start+0xffff6dc4>
20091cec:	04c00044 	movi	r19,1
20091cf0:	04810004 	movi	r18,1024
20091cf4:	003fc006 	br	20091bf8 <__flash_rwdata_start+0xffff6d8c>

20091cf8 <memchr>:
20091cf8:	208000cc 	andi	r2,r4,3
20091cfc:	280f883a 	mov	r7,r5
20091d00:	10003526 	beq	r2,zero,20091dd8 <memchr+0xe0>
20091d04:	30bfffc4 	addi	r2,r6,-1
20091d08:	30001b26 	beq	r6,zero,20091d78 <memchr+0x80>
20091d0c:	21800003 	ldbu	r6,0(r4)
20091d10:	28c03fcc 	andi	r3,r5,255
20091d14:	30c01a26 	beq	r6,r3,20091d80 <memchr+0x88>
20091d18:	180d883a 	mov	r6,r3
20091d1c:	00000406 	br	20091d30 <memchr+0x38>
20091d20:	10001526 	beq	r2,zero,20091d78 <memchr+0x80>
20091d24:	20c00003 	ldbu	r3,0(r4)
20091d28:	10bfffc4 	addi	r2,r2,-1
20091d2c:	19801426 	beq	r3,r6,20091d80 <memchr+0x88>
20091d30:	21000044 	addi	r4,r4,1
20091d34:	20c000cc 	andi	r3,r4,3
20091d38:	183ff91e 	bne	r3,zero,20091d20 <__flash_rwdata_start+0xffff6eb4>
20091d3c:	024000c4 	movi	r9,3
20091d40:	48801136 	bltu	r9,r2,20091d88 <memchr+0x90>
20091d44:	10000c26 	beq	r2,zero,20091d78 <memchr+0x80>
20091d48:	20c00003 	ldbu	r3,0(r4)
20091d4c:	29403fcc 	andi	r5,r5,255
20091d50:	19400b26 	beq	r3,r5,20091d80 <memchr+0x88>
20091d54:	20c00044 	addi	r3,r4,1
20091d58:	2085883a 	add	r2,r4,r2
20091d5c:	39803fcc 	andi	r6,r7,255
20091d60:	00000306 	br	20091d70 <memchr+0x78>
20091d64:	18c00044 	addi	r3,r3,1
20091d68:	197fffc3 	ldbu	r5,-1(r3)
20091d6c:	29800426 	beq	r5,r6,20091d80 <memchr+0x88>
20091d70:	1809883a 	mov	r4,r3
20091d74:	18bffb1e 	bne	r3,r2,20091d64 <__flash_rwdata_start+0xffff6ef8>
20091d78:	0005883a 	mov	r2,zero
20091d7c:	f800283a 	ret
20091d80:	2005883a 	mov	r2,r4
20091d84:	f800283a 	ret
20091d88:	28c03fcc 	andi	r3,r5,255
20091d8c:	1810923a 	slli	r8,r3,8
20091d90:	02ffbff4 	movhi	r11,65279
20091d94:	02a02074 	movhi	r10,32897
20091d98:	40c6b03a 	or	r3,r8,r3
20091d9c:	1810943a 	slli	r8,r3,16
20091da0:	5affbfc4 	addi	r11,r11,-257
20091da4:	52a02004 	addi	r10,r10,-32640
20091da8:	40d0b03a 	or	r8,r8,r3
20091dac:	20c00017 	ldw	r3,0(r4)
20091db0:	40c6f03a 	xor	r3,r8,r3
20091db4:	1acd883a 	add	r6,r3,r11
20091db8:	00c6303a 	nor	r3,zero,r3
20091dbc:	30c6703a 	and	r3,r6,r3
20091dc0:	1a86703a 	and	r3,r3,r10
20091dc4:	183fdf1e 	bne	r3,zero,20091d44 <__flash_rwdata_start+0xffff6ed8>
20091dc8:	10bfff04 	addi	r2,r2,-4
20091dcc:	21000104 	addi	r4,r4,4
20091dd0:	48bff636 	bltu	r9,r2,20091dac <__flash_rwdata_start+0xffff6f40>
20091dd4:	003fdb06 	br	20091d44 <__flash_rwdata_start+0xffff6ed8>
20091dd8:	3005883a 	mov	r2,r6
20091ddc:	003fd706 	br	20091d3c <__flash_rwdata_start+0xffff6ed0>

20091de0 <memmove>:
20091de0:	2005883a 	mov	r2,r4
20091de4:	29000b2e 	bgeu	r5,r4,20091e14 <memmove+0x34>
20091de8:	298f883a 	add	r7,r5,r6
20091dec:	21c0092e 	bgeu	r4,r7,20091e14 <memmove+0x34>
20091df0:	2187883a 	add	r3,r4,r6
20091df4:	198bc83a 	sub	r5,r3,r6
20091df8:	30004b26 	beq	r6,zero,20091f28 <memmove+0x148>
20091dfc:	39ffffc4 	addi	r7,r7,-1
20091e00:	39000003 	ldbu	r4,0(r7)
20091e04:	18ffffc4 	addi	r3,r3,-1
20091e08:	19000005 	stb	r4,0(r3)
20091e0c:	197ffb1e 	bne	r3,r5,20091dfc <__flash_rwdata_start+0xffff6f90>
20091e10:	f800283a 	ret
20091e14:	00c003c4 	movi	r3,15
20091e18:	1980412e 	bgeu	r3,r6,20091f20 <memmove+0x140>
20091e1c:	1146b03a 	or	r3,r2,r5
20091e20:	18c000cc 	andi	r3,r3,3
20091e24:	1800411e 	bne	r3,zero,20091f2c <memmove+0x14c>
20091e28:	33fffc04 	addi	r15,r6,-16
20091e2c:	781ed13a 	srli	r15,r15,4
20091e30:	28c00104 	addi	r3,r5,4
20091e34:	13400104 	addi	r13,r2,4
20091e38:	781c913a 	slli	r14,r15,4
20091e3c:	2b000204 	addi	r12,r5,8
20091e40:	12c00204 	addi	r11,r2,8
20091e44:	73800504 	addi	r14,r14,20
20091e48:	2a800304 	addi	r10,r5,12
20091e4c:	12400304 	addi	r9,r2,12
20091e50:	2b9d883a 	add	r14,r5,r14
20091e54:	2811883a 	mov	r8,r5
20091e58:	100f883a 	mov	r7,r2
20091e5c:	41000017 	ldw	r4,0(r8)
20091e60:	39c00404 	addi	r7,r7,16
20091e64:	18c00404 	addi	r3,r3,16
20091e68:	393ffc15 	stw	r4,-16(r7)
20091e6c:	193ffc17 	ldw	r4,-16(r3)
20091e70:	6b400404 	addi	r13,r13,16
20091e74:	5ac00404 	addi	r11,r11,16
20091e78:	693ffc15 	stw	r4,-16(r13)
20091e7c:	61000017 	ldw	r4,0(r12)
20091e80:	4a400404 	addi	r9,r9,16
20091e84:	42000404 	addi	r8,r8,16
20091e88:	593ffc15 	stw	r4,-16(r11)
20091e8c:	51000017 	ldw	r4,0(r10)
20091e90:	63000404 	addi	r12,r12,16
20091e94:	52800404 	addi	r10,r10,16
20091e98:	493ffc15 	stw	r4,-16(r9)
20091e9c:	1bbfef1e 	bne	r3,r14,20091e5c <__flash_rwdata_start+0xffff6ff0>
20091ea0:	79000044 	addi	r4,r15,1
20091ea4:	2008913a 	slli	r4,r4,4
20091ea8:	328003cc 	andi	r10,r6,15
20091eac:	02c000c4 	movi	r11,3
20091eb0:	1107883a 	add	r3,r2,r4
20091eb4:	290b883a 	add	r5,r5,r4
20091eb8:	5a801e2e 	bgeu	r11,r10,20091f34 <memmove+0x154>
20091ebc:	1813883a 	mov	r9,r3
20091ec0:	2811883a 	mov	r8,r5
20091ec4:	500f883a 	mov	r7,r10
20091ec8:	41000017 	ldw	r4,0(r8)
20091ecc:	4a400104 	addi	r9,r9,4
20091ed0:	39ffff04 	addi	r7,r7,-4
20091ed4:	493fff15 	stw	r4,-4(r9)
20091ed8:	42000104 	addi	r8,r8,4
20091edc:	59fffa36 	bltu	r11,r7,20091ec8 <__flash_rwdata_start+0xffff705c>
20091ee0:	513fff04 	addi	r4,r10,-4
20091ee4:	2008d0ba 	srli	r4,r4,2
20091ee8:	318000cc 	andi	r6,r6,3
20091eec:	21000044 	addi	r4,r4,1
20091ef0:	2109883a 	add	r4,r4,r4
20091ef4:	2109883a 	add	r4,r4,r4
20091ef8:	1907883a 	add	r3,r3,r4
20091efc:	290b883a 	add	r5,r5,r4
20091f00:	30000926 	beq	r6,zero,20091f28 <memmove+0x148>
20091f04:	198d883a 	add	r6,r3,r6
20091f08:	29c00003 	ldbu	r7,0(r5)
20091f0c:	18c00044 	addi	r3,r3,1
20091f10:	29400044 	addi	r5,r5,1
20091f14:	19ffffc5 	stb	r7,-1(r3)
20091f18:	19bffb1e 	bne	r3,r6,20091f08 <__flash_rwdata_start+0xffff709c>
20091f1c:	f800283a 	ret
20091f20:	1007883a 	mov	r3,r2
20091f24:	003ff606 	br	20091f00 <__flash_rwdata_start+0xffff7094>
20091f28:	f800283a 	ret
20091f2c:	1007883a 	mov	r3,r2
20091f30:	003ff406 	br	20091f04 <__flash_rwdata_start+0xffff7098>
20091f34:	500d883a 	mov	r6,r10
20091f38:	003ff106 	br	20091f00 <__flash_rwdata_start+0xffff7094>

20091f3c <_Balloc>:
20091f3c:	20801317 	ldw	r2,76(r4)
20091f40:	defffc04 	addi	sp,sp,-16
20091f44:	dc400115 	stw	r17,4(sp)
20091f48:	dc000015 	stw	r16,0(sp)
20091f4c:	dfc00315 	stw	ra,12(sp)
20091f50:	dc800215 	stw	r18,8(sp)
20091f54:	2023883a 	mov	r17,r4
20091f58:	2821883a 	mov	r16,r5
20091f5c:	10000f26 	beq	r2,zero,20091f9c <_Balloc+0x60>
20091f60:	8407883a 	add	r3,r16,r16
20091f64:	18c7883a 	add	r3,r3,r3
20091f68:	10c7883a 	add	r3,r2,r3
20091f6c:	18800017 	ldw	r2,0(r3)
20091f70:	10001126 	beq	r2,zero,20091fb8 <_Balloc+0x7c>
20091f74:	11000017 	ldw	r4,0(r2)
20091f78:	19000015 	stw	r4,0(r3)
20091f7c:	10000415 	stw	zero,16(r2)
20091f80:	10000315 	stw	zero,12(r2)
20091f84:	dfc00317 	ldw	ra,12(sp)
20091f88:	dc800217 	ldw	r18,8(sp)
20091f8c:	dc400117 	ldw	r17,4(sp)
20091f90:	dc000017 	ldw	r16,0(sp)
20091f94:	dec00404 	addi	sp,sp,16
20091f98:	f800283a 	ret
20091f9c:	01400104 	movi	r5,4
20091fa0:	01800844 	movi	r6,33
20091fa4:	00961900 	call	20096190 <_calloc_r>
20091fa8:	88801315 	stw	r2,76(r17)
20091fac:	103fec1e 	bne	r2,zero,20091f60 <__flash_rwdata_start+0xffff70f4>
20091fb0:	0005883a 	mov	r2,zero
20091fb4:	003ff306 	br	20091f84 <__flash_rwdata_start+0xffff7118>
20091fb8:	01400044 	movi	r5,1
20091fbc:	2c24983a 	sll	r18,r5,r16
20091fc0:	8809883a 	mov	r4,r17
20091fc4:	91800144 	addi	r6,r18,5
20091fc8:	318d883a 	add	r6,r6,r6
20091fcc:	318d883a 	add	r6,r6,r6
20091fd0:	00961900 	call	20096190 <_calloc_r>
20091fd4:	103ff626 	beq	r2,zero,20091fb0 <__flash_rwdata_start+0xffff7144>
20091fd8:	14000115 	stw	r16,4(r2)
20091fdc:	14800215 	stw	r18,8(r2)
20091fe0:	003fe606 	br	20091f7c <__flash_rwdata_start+0xffff7110>

20091fe4 <_Bfree>:
20091fe4:	28000826 	beq	r5,zero,20092008 <_Bfree+0x24>
20091fe8:	28c00117 	ldw	r3,4(r5)
20091fec:	20801317 	ldw	r2,76(r4)
20091ff0:	18c7883a 	add	r3,r3,r3
20091ff4:	18c7883a 	add	r3,r3,r3
20091ff8:	10c5883a 	add	r2,r2,r3
20091ffc:	10c00017 	ldw	r3,0(r2)
20092000:	28c00015 	stw	r3,0(r5)
20092004:	11400015 	stw	r5,0(r2)
20092008:	f800283a 	ret

2009200c <__multadd>:
2009200c:	defffa04 	addi	sp,sp,-24
20092010:	dc000115 	stw	r16,4(sp)
20092014:	2c000417 	ldw	r16,16(r5)
20092018:	dc800315 	stw	r18,12(sp)
2009201c:	dc400215 	stw	r17,8(sp)
20092020:	dfc00515 	stw	ra,20(sp)
20092024:	dcc00415 	stw	r19,16(sp)
20092028:	2823883a 	mov	r17,r5
2009202c:	2025883a 	mov	r18,r4
20092030:	2a400504 	addi	r9,r5,20
20092034:	0015883a 	mov	r10,zero
20092038:	4a000017 	ldw	r8,0(r9)
2009203c:	4a400104 	addi	r9,r9,4
20092040:	52800044 	addi	r10,r10,1
20092044:	40ffffcc 	andi	r3,r8,65535
20092048:	1987383a 	mul	r3,r3,r6
2009204c:	4010d43a 	srli	r8,r8,16
20092050:	19cf883a 	add	r7,r3,r7
20092054:	4191383a 	mul	r8,r8,r6
20092058:	3816d43a 	srli	r11,r7,16
2009205c:	38ffffcc 	andi	r3,r7,65535
20092060:	5a0f883a 	add	r7,r11,r8
20092064:	3810943a 	slli	r8,r7,16
20092068:	380ed43a 	srli	r7,r7,16
2009206c:	40c7883a 	add	r3,r8,r3
20092070:	48ffff15 	stw	r3,-4(r9)
20092074:	543ff016 	blt	r10,r16,20092038 <__flash_rwdata_start+0xffff71cc>
20092078:	38000926 	beq	r7,zero,200920a0 <__multadd+0x94>
2009207c:	88800217 	ldw	r2,8(r17)
20092080:	80800f0e 	bge	r16,r2,200920c0 <__multadd+0xb4>
20092084:	80800144 	addi	r2,r16,5
20092088:	1085883a 	add	r2,r2,r2
2009208c:	1085883a 	add	r2,r2,r2
20092090:	8885883a 	add	r2,r17,r2
20092094:	11c00015 	stw	r7,0(r2)
20092098:	84000044 	addi	r16,r16,1
2009209c:	8c000415 	stw	r16,16(r17)
200920a0:	8805883a 	mov	r2,r17
200920a4:	dfc00517 	ldw	ra,20(sp)
200920a8:	dcc00417 	ldw	r19,16(sp)
200920ac:	dc800317 	ldw	r18,12(sp)
200920b0:	dc400217 	ldw	r17,8(sp)
200920b4:	dc000117 	ldw	r16,4(sp)
200920b8:	dec00604 	addi	sp,sp,24
200920bc:	f800283a 	ret
200920c0:	89400117 	ldw	r5,4(r17)
200920c4:	9009883a 	mov	r4,r18
200920c8:	d9c00015 	stw	r7,0(sp)
200920cc:	29400044 	addi	r5,r5,1
200920d0:	0091f3c0 	call	20091f3c <_Balloc>
200920d4:	89800417 	ldw	r6,16(r17)
200920d8:	11000304 	addi	r4,r2,12
200920dc:	89400304 	addi	r5,r17,12
200920e0:	31800084 	addi	r6,r6,2
200920e4:	318d883a 	add	r6,r6,r6
200920e8:	318d883a 	add	r6,r6,r6
200920ec:	1027883a 	mov	r19,r2
200920f0:	008a6740 	call	2008a674 <memcpy>
200920f4:	d9c00017 	ldw	r7,0(sp)
200920f8:	88000a26 	beq	r17,zero,20092124 <__multadd+0x118>
200920fc:	89000117 	ldw	r4,4(r17)
20092100:	90c01317 	ldw	r3,76(r18)
20092104:	2109883a 	add	r4,r4,r4
20092108:	2109883a 	add	r4,r4,r4
2009210c:	1907883a 	add	r3,r3,r4
20092110:	18800017 	ldw	r2,0(r3)
20092114:	88800015 	stw	r2,0(r17)
20092118:	1c400015 	stw	r17,0(r3)
2009211c:	9823883a 	mov	r17,r19
20092120:	003fd806 	br	20092084 <__flash_rwdata_start+0xffff7218>
20092124:	9823883a 	mov	r17,r19
20092128:	003fd606 	br	20092084 <__flash_rwdata_start+0xffff7218>

2009212c <__s2b>:
2009212c:	defff904 	addi	sp,sp,-28
20092130:	dc400115 	stw	r17,4(sp)
20092134:	dc000015 	stw	r16,0(sp)
20092138:	2023883a 	mov	r17,r4
2009213c:	2821883a 	mov	r16,r5
20092140:	39000204 	addi	r4,r7,8
20092144:	01400244 	movi	r5,9
20092148:	dcc00315 	stw	r19,12(sp)
2009214c:	dc800215 	stw	r18,8(sp)
20092150:	dfc00615 	stw	ra,24(sp)
20092154:	dd400515 	stw	r21,20(sp)
20092158:	dd000415 	stw	r20,16(sp)
2009215c:	3825883a 	mov	r18,r7
20092160:	3027883a 	mov	r19,r6
20092164:	0086b780 	call	20086b78 <__divsi3>
20092168:	00c00044 	movi	r3,1
2009216c:	000b883a 	mov	r5,zero
20092170:	1880030e 	bge	r3,r2,20092180 <__s2b+0x54>
20092174:	18c7883a 	add	r3,r3,r3
20092178:	29400044 	addi	r5,r5,1
2009217c:	18bffd16 	blt	r3,r2,20092174 <__flash_rwdata_start+0xffff7308>
20092180:	8809883a 	mov	r4,r17
20092184:	0091f3c0 	call	20091f3c <_Balloc>
20092188:	d8c00717 	ldw	r3,28(sp)
2009218c:	10c00515 	stw	r3,20(r2)
20092190:	00c00044 	movi	r3,1
20092194:	10c00415 	stw	r3,16(r2)
20092198:	00c00244 	movi	r3,9
2009219c:	1cc0210e 	bge	r3,r19,20092224 <__s2b+0xf8>
200921a0:	80eb883a 	add	r21,r16,r3
200921a4:	a829883a 	mov	r20,r21
200921a8:	84e1883a 	add	r16,r16,r19
200921ac:	a1c00007 	ldb	r7,0(r20)
200921b0:	8809883a 	mov	r4,r17
200921b4:	a5000044 	addi	r20,r20,1
200921b8:	100b883a 	mov	r5,r2
200921bc:	01800284 	movi	r6,10
200921c0:	39fff404 	addi	r7,r7,-48
200921c4:	009200c0 	call	2009200c <__multadd>
200921c8:	a43ff81e 	bne	r20,r16,200921ac <__flash_rwdata_start+0xffff7340>
200921cc:	ace1883a 	add	r16,r21,r19
200921d0:	843ffe04 	addi	r16,r16,-8
200921d4:	9c800a0e 	bge	r19,r18,20092200 <__s2b+0xd4>
200921d8:	94e5c83a 	sub	r18,r18,r19
200921dc:	84a5883a 	add	r18,r16,r18
200921e0:	81c00007 	ldb	r7,0(r16)
200921e4:	8809883a 	mov	r4,r17
200921e8:	84000044 	addi	r16,r16,1
200921ec:	100b883a 	mov	r5,r2
200921f0:	01800284 	movi	r6,10
200921f4:	39fff404 	addi	r7,r7,-48
200921f8:	009200c0 	call	2009200c <__multadd>
200921fc:	84bff81e 	bne	r16,r18,200921e0 <__flash_rwdata_start+0xffff7374>
20092200:	dfc00617 	ldw	ra,24(sp)
20092204:	dd400517 	ldw	r21,20(sp)
20092208:	dd000417 	ldw	r20,16(sp)
2009220c:	dcc00317 	ldw	r19,12(sp)
20092210:	dc800217 	ldw	r18,8(sp)
20092214:	dc400117 	ldw	r17,4(sp)
20092218:	dc000017 	ldw	r16,0(sp)
2009221c:	dec00704 	addi	sp,sp,28
20092220:	f800283a 	ret
20092224:	84000284 	addi	r16,r16,10
20092228:	1827883a 	mov	r19,r3
2009222c:	003fe906 	br	200921d4 <__flash_rwdata_start+0xffff7368>

20092230 <__hi0bits>:
20092230:	20bfffec 	andhi	r2,r4,65535
20092234:	1000141e 	bne	r2,zero,20092288 <__hi0bits+0x58>
20092238:	2008943a 	slli	r4,r4,16
2009223c:	00800404 	movi	r2,16
20092240:	20ffc02c 	andhi	r3,r4,65280
20092244:	1800021e 	bne	r3,zero,20092250 <__hi0bits+0x20>
20092248:	2008923a 	slli	r4,r4,8
2009224c:	10800204 	addi	r2,r2,8
20092250:	20fc002c 	andhi	r3,r4,61440
20092254:	1800021e 	bne	r3,zero,20092260 <__hi0bits+0x30>
20092258:	2008913a 	slli	r4,r4,4
2009225c:	10800104 	addi	r2,r2,4
20092260:	20f0002c 	andhi	r3,r4,49152
20092264:	1800031e 	bne	r3,zero,20092274 <__hi0bits+0x44>
20092268:	2109883a 	add	r4,r4,r4
2009226c:	10800084 	addi	r2,r2,2
20092270:	2109883a 	add	r4,r4,r4
20092274:	20000316 	blt	r4,zero,20092284 <__hi0bits+0x54>
20092278:	2110002c 	andhi	r4,r4,16384
2009227c:	2000041e 	bne	r4,zero,20092290 <__hi0bits+0x60>
20092280:	00800804 	movi	r2,32
20092284:	f800283a 	ret
20092288:	0005883a 	mov	r2,zero
2009228c:	003fec06 	br	20092240 <__flash_rwdata_start+0xffff73d4>
20092290:	10800044 	addi	r2,r2,1
20092294:	f800283a 	ret

20092298 <__lo0bits>:
20092298:	20c00017 	ldw	r3,0(r4)
2009229c:	188001cc 	andi	r2,r3,7
200922a0:	10000826 	beq	r2,zero,200922c4 <__lo0bits+0x2c>
200922a4:	1880004c 	andi	r2,r3,1
200922a8:	1000211e 	bne	r2,zero,20092330 <__lo0bits+0x98>
200922ac:	1880008c 	andi	r2,r3,2
200922b0:	1000211e 	bne	r2,zero,20092338 <__lo0bits+0xa0>
200922b4:	1806d0ba 	srli	r3,r3,2
200922b8:	00800084 	movi	r2,2
200922bc:	20c00015 	stw	r3,0(r4)
200922c0:	f800283a 	ret
200922c4:	18bfffcc 	andi	r2,r3,65535
200922c8:	10001326 	beq	r2,zero,20092318 <__lo0bits+0x80>
200922cc:	0005883a 	mov	r2,zero
200922d0:	19403fcc 	andi	r5,r3,255
200922d4:	2800021e 	bne	r5,zero,200922e0 <__lo0bits+0x48>
200922d8:	1806d23a 	srli	r3,r3,8
200922dc:	10800204 	addi	r2,r2,8
200922e0:	194003cc 	andi	r5,r3,15
200922e4:	2800021e 	bne	r5,zero,200922f0 <__lo0bits+0x58>
200922e8:	1806d13a 	srli	r3,r3,4
200922ec:	10800104 	addi	r2,r2,4
200922f0:	194000cc 	andi	r5,r3,3
200922f4:	2800021e 	bne	r5,zero,20092300 <__lo0bits+0x68>
200922f8:	1806d0ba 	srli	r3,r3,2
200922fc:	10800084 	addi	r2,r2,2
20092300:	1940004c 	andi	r5,r3,1
20092304:	2800081e 	bne	r5,zero,20092328 <__lo0bits+0x90>
20092308:	1806d07a 	srli	r3,r3,1
2009230c:	1800051e 	bne	r3,zero,20092324 <__lo0bits+0x8c>
20092310:	00800804 	movi	r2,32
20092314:	f800283a 	ret
20092318:	1806d43a 	srli	r3,r3,16
2009231c:	00800404 	movi	r2,16
20092320:	003feb06 	br	200922d0 <__flash_rwdata_start+0xffff7464>
20092324:	10800044 	addi	r2,r2,1
20092328:	20c00015 	stw	r3,0(r4)
2009232c:	f800283a 	ret
20092330:	0005883a 	mov	r2,zero
20092334:	f800283a 	ret
20092338:	1806d07a 	srli	r3,r3,1
2009233c:	00800044 	movi	r2,1
20092340:	20c00015 	stw	r3,0(r4)
20092344:	f800283a 	ret

20092348 <__i2b>:
20092348:	defffd04 	addi	sp,sp,-12
2009234c:	dc000015 	stw	r16,0(sp)
20092350:	04000044 	movi	r16,1
20092354:	dc400115 	stw	r17,4(sp)
20092358:	2823883a 	mov	r17,r5
2009235c:	800b883a 	mov	r5,r16
20092360:	dfc00215 	stw	ra,8(sp)
20092364:	0091f3c0 	call	20091f3c <_Balloc>
20092368:	14400515 	stw	r17,20(r2)
2009236c:	14000415 	stw	r16,16(r2)
20092370:	dfc00217 	ldw	ra,8(sp)
20092374:	dc400117 	ldw	r17,4(sp)
20092378:	dc000017 	ldw	r16,0(sp)
2009237c:	dec00304 	addi	sp,sp,12
20092380:	f800283a 	ret

20092384 <__multiply>:
20092384:	defffa04 	addi	sp,sp,-24
20092388:	dcc00315 	stw	r19,12(sp)
2009238c:	dc800215 	stw	r18,8(sp)
20092390:	2cc00417 	ldw	r19,16(r5)
20092394:	34800417 	ldw	r18,16(r6)
20092398:	dd000415 	stw	r20,16(sp)
2009239c:	dc400115 	stw	r17,4(sp)
200923a0:	dfc00515 	stw	ra,20(sp)
200923a4:	dc000015 	stw	r16,0(sp)
200923a8:	2829883a 	mov	r20,r5
200923ac:	3023883a 	mov	r17,r6
200923b0:	9c807016 	blt	r19,r18,20092574 <__multiply+0x1f0>
200923b4:	9005883a 	mov	r2,r18
200923b8:	9825883a 	mov	r18,r19
200923bc:	1027883a 	mov	r19,r2
200923c0:	a0800217 	ldw	r2,8(r20)
200923c4:	94e1883a 	add	r16,r18,r19
200923c8:	a1400117 	ldw	r5,4(r20)
200923cc:	1400010e 	bge	r2,r16,200923d4 <__multiply+0x50>
200923d0:	29400044 	addi	r5,r5,1
200923d4:	0091f3c0 	call	20091f3c <_Balloc>
200923d8:	8417883a 	add	r11,r16,r16
200923dc:	13000504 	addi	r12,r2,20
200923e0:	5ad7883a 	add	r11,r11,r11
200923e4:	62d7883a 	add	r11,r12,r11
200923e8:	6007883a 	mov	r3,r12
200923ec:	62c0032e 	bgeu	r12,r11,200923fc <__multiply+0x78>
200923f0:	18000015 	stw	zero,0(r3)
200923f4:	18c00104 	addi	r3,r3,4
200923f8:	1afffd36 	bltu	r3,r11,200923f0 <__flash_rwdata_start+0xffff7584>
200923fc:	9ce7883a 	add	r19,r19,r19
20092400:	94a5883a 	add	r18,r18,r18
20092404:	89800504 	addi	r6,r17,20
20092408:	9ce7883a 	add	r19,r19,r19
2009240c:	a3800504 	addi	r14,r20,20
20092410:	94a5883a 	add	r18,r18,r18
20092414:	34db883a 	add	r13,r6,r19
20092418:	7495883a 	add	r10,r14,r18
2009241c:	3340422e 	bgeu	r6,r13,20092528 <__multiply+0x1a4>
20092420:	34400017 	ldw	r17,0(r6)
20092424:	8cbfffcc 	andi	r18,r17,65535
20092428:	90001b26 	beq	r18,zero,20092498 <__multiply+0x114>
2009242c:	6013883a 	mov	r9,r12
20092430:	7023883a 	mov	r17,r14
20092434:	0011883a 	mov	r8,zero
20092438:	88c00017 	ldw	r3,0(r17)
2009243c:	4bc00017 	ldw	r15,0(r9)
20092440:	8c400104 	addi	r17,r17,4
20092444:	19ffffcc 	andi	r7,r3,65535
20092448:	3c8f383a 	mul	r7,r7,r18
2009244c:	1808d43a 	srli	r4,r3,16
20092450:	797fffcc 	andi	r5,r15,65535
20092454:	29cb883a 	add	r5,r5,r7
20092458:	2a0b883a 	add	r5,r5,r8
2009245c:	2489383a 	mul	r4,r4,r18
20092460:	7806d43a 	srli	r3,r15,16
20092464:	2810d43a 	srli	r8,r5,16
20092468:	297fffcc 	andi	r5,r5,65535
2009246c:	1907883a 	add	r3,r3,r4
20092470:	1a07883a 	add	r3,r3,r8
20092474:	1808943a 	slli	r4,r3,16
20092478:	480f883a 	mov	r7,r9
2009247c:	1810d43a 	srli	r8,r3,16
20092480:	214ab03a 	or	r5,r4,r5
20092484:	49400015 	stw	r5,0(r9)
20092488:	4a400104 	addi	r9,r9,4
2009248c:	8abfea36 	bltu	r17,r10,20092438 <__flash_rwdata_start+0xffff75cc>
20092490:	3a000115 	stw	r8,4(r7)
20092494:	34400017 	ldw	r17,0(r6)
20092498:	8822d43a 	srli	r17,r17,16
2009249c:	88001f26 	beq	r17,zero,2009251c <__multiply+0x198>
200924a0:	60c00017 	ldw	r3,0(r12)
200924a4:	7013883a 	mov	r9,r14
200924a8:	601f883a 	mov	r15,r12
200924ac:	1811883a 	mov	r8,r3
200924b0:	6027883a 	mov	r19,r12
200924b4:	000f883a 	mov	r7,zero
200924b8:	00000106 	br	200924c0 <__multiply+0x13c>
200924bc:	9027883a 	mov	r19,r18
200924c0:	4940000b 	ldhu	r5,0(r9)
200924c4:	4010d43a 	srli	r8,r8,16
200924c8:	193fffcc 	andi	r4,r3,65535
200924cc:	2c4b383a 	mul	r5,r5,r17
200924d0:	7bc00104 	addi	r15,r15,4
200924d4:	4a400104 	addi	r9,r9,4
200924d8:	2a0b883a 	add	r5,r5,r8
200924dc:	29cb883a 	add	r5,r5,r7
200924e0:	2806943a 	slli	r3,r5,16
200924e4:	9c800104 	addi	r18,r19,4
200924e8:	280ad43a 	srli	r5,r5,16
200924ec:	1908b03a 	or	r4,r3,r4
200924f0:	793fff15 	stw	r4,-4(r15)
200924f4:	48ffff17 	ldw	r3,-4(r9)
200924f8:	92000017 	ldw	r8,0(r18)
200924fc:	1806d43a 	srli	r3,r3,16
20092500:	413fffcc 	andi	r4,r8,65535
20092504:	1c47383a 	mul	r3,r3,r17
20092508:	1907883a 	add	r3,r3,r4
2009250c:	1947883a 	add	r3,r3,r5
20092510:	180ed43a 	srli	r7,r3,16
20092514:	4abfe936 	bltu	r9,r10,200924bc <__flash_rwdata_start+0xffff7650>
20092518:	98c00115 	stw	r3,4(r19)
2009251c:	31800104 	addi	r6,r6,4
20092520:	63000104 	addi	r12,r12,4
20092524:	337fbe36 	bltu	r6,r13,20092420 <__flash_rwdata_start+0xffff75b4>
20092528:	0400090e 	bge	zero,r16,20092550 <__multiply+0x1cc>
2009252c:	58ffff17 	ldw	r3,-4(r11)
20092530:	5affff04 	addi	r11,r11,-4
20092534:	18000326 	beq	r3,zero,20092544 <__multiply+0x1c0>
20092538:	00000506 	br	20092550 <__multiply+0x1cc>
2009253c:	58c00017 	ldw	r3,0(r11)
20092540:	1800031e 	bne	r3,zero,20092550 <__multiply+0x1cc>
20092544:	843fffc4 	addi	r16,r16,-1
20092548:	5affff04 	addi	r11,r11,-4
2009254c:	803ffb1e 	bne	r16,zero,2009253c <__flash_rwdata_start+0xffff76d0>
20092550:	14000415 	stw	r16,16(r2)
20092554:	dfc00517 	ldw	ra,20(sp)
20092558:	dd000417 	ldw	r20,16(sp)
2009255c:	dcc00317 	ldw	r19,12(sp)
20092560:	dc800217 	ldw	r18,8(sp)
20092564:	dc400117 	ldw	r17,4(sp)
20092568:	dc000017 	ldw	r16,0(sp)
2009256c:	dec00604 	addi	sp,sp,24
20092570:	f800283a 	ret
20092574:	3029883a 	mov	r20,r6
20092578:	2823883a 	mov	r17,r5
2009257c:	003f9006 	br	200923c0 <__flash_rwdata_start+0xffff7554>

20092580 <__pow5mult>:
20092580:	defffa04 	addi	sp,sp,-24
20092584:	dcc00315 	stw	r19,12(sp)
20092588:	dc800215 	stw	r18,8(sp)
2009258c:	dc000015 	stw	r16,0(sp)
20092590:	dfc00515 	stw	ra,20(sp)
20092594:	dd000415 	stw	r20,16(sp)
20092598:	dc400115 	stw	r17,4(sp)
2009259c:	308000cc 	andi	r2,r6,3
200925a0:	3021883a 	mov	r16,r6
200925a4:	2027883a 	mov	r19,r4
200925a8:	2825883a 	mov	r18,r5
200925ac:	10002e1e 	bne	r2,zero,20092668 <__pow5mult+0xe8>
200925b0:	8021d0ba 	srai	r16,r16,2
200925b4:	80001a26 	beq	r16,zero,20092620 <__pow5mult+0xa0>
200925b8:	9c401217 	ldw	r17,72(r19)
200925bc:	8800061e 	bne	r17,zero,200925d8 <__pow5mult+0x58>
200925c0:	00003406 	br	20092694 <__pow5mult+0x114>
200925c4:	8021d07a 	srai	r16,r16,1
200925c8:	80001526 	beq	r16,zero,20092620 <__pow5mult+0xa0>
200925cc:	88800017 	ldw	r2,0(r17)
200925d0:	10001c26 	beq	r2,zero,20092644 <__pow5mult+0xc4>
200925d4:	1023883a 	mov	r17,r2
200925d8:	80c0004c 	andi	r3,r16,1
200925dc:	183ff926 	beq	r3,zero,200925c4 <__flash_rwdata_start+0xffff7758>
200925e0:	900b883a 	mov	r5,r18
200925e4:	880d883a 	mov	r6,r17
200925e8:	9809883a 	mov	r4,r19
200925ec:	00923840 	call	20092384 <__multiply>
200925f0:	90001b26 	beq	r18,zero,20092660 <__pow5mult+0xe0>
200925f4:	91c00117 	ldw	r7,4(r18)
200925f8:	98c01317 	ldw	r3,76(r19)
200925fc:	8021d07a 	srai	r16,r16,1
20092600:	39cf883a 	add	r7,r7,r7
20092604:	39cf883a 	add	r7,r7,r7
20092608:	19c7883a 	add	r3,r3,r7
2009260c:	19000017 	ldw	r4,0(r3)
20092610:	91000015 	stw	r4,0(r18)
20092614:	1c800015 	stw	r18,0(r3)
20092618:	1025883a 	mov	r18,r2
2009261c:	803feb1e 	bne	r16,zero,200925cc <__flash_rwdata_start+0xffff7760>
20092620:	9005883a 	mov	r2,r18
20092624:	dfc00517 	ldw	ra,20(sp)
20092628:	dd000417 	ldw	r20,16(sp)
2009262c:	dcc00317 	ldw	r19,12(sp)
20092630:	dc800217 	ldw	r18,8(sp)
20092634:	dc400117 	ldw	r17,4(sp)
20092638:	dc000017 	ldw	r16,0(sp)
2009263c:	dec00604 	addi	sp,sp,24
20092640:	f800283a 	ret
20092644:	9809883a 	mov	r4,r19
20092648:	880b883a 	mov	r5,r17
2009264c:	880d883a 	mov	r6,r17
20092650:	00923840 	call	20092384 <__multiply>
20092654:	88800015 	stw	r2,0(r17)
20092658:	10000015 	stw	zero,0(r2)
2009265c:	003fdd06 	br	200925d4 <__flash_rwdata_start+0xffff7768>
20092660:	1025883a 	mov	r18,r2
20092664:	003fd706 	br	200925c4 <__flash_rwdata_start+0xffff7758>
20092668:	10bfffc4 	addi	r2,r2,-1
2009266c:	1085883a 	add	r2,r2,r2
20092670:	00c00034 	movhi	r3,0
20092674:	18c1fa04 	addi	r3,r3,2024
20092678:	1085883a 	add	r2,r2,r2
2009267c:	1885883a 	add	r2,r3,r2
20092680:	11800017 	ldw	r6,0(r2)
20092684:	000f883a 	mov	r7,zero
20092688:	009200c0 	call	2009200c <__multadd>
2009268c:	1025883a 	mov	r18,r2
20092690:	003fc706 	br	200925b0 <__flash_rwdata_start+0xffff7744>
20092694:	05000044 	movi	r20,1
20092698:	9809883a 	mov	r4,r19
2009269c:	a00b883a 	mov	r5,r20
200926a0:	0091f3c0 	call	20091f3c <_Balloc>
200926a4:	1023883a 	mov	r17,r2
200926a8:	00809c44 	movi	r2,625
200926ac:	88800515 	stw	r2,20(r17)
200926b0:	8d000415 	stw	r20,16(r17)
200926b4:	9c401215 	stw	r17,72(r19)
200926b8:	88000015 	stw	zero,0(r17)
200926bc:	003fc606 	br	200925d8 <__flash_rwdata_start+0xffff776c>

200926c0 <__lshift>:
200926c0:	defff904 	addi	sp,sp,-28
200926c4:	dd000415 	stw	r20,16(sp)
200926c8:	dcc00315 	stw	r19,12(sp)
200926cc:	3029d17a 	srai	r20,r6,5
200926d0:	2cc00417 	ldw	r19,16(r5)
200926d4:	28800217 	ldw	r2,8(r5)
200926d8:	dd400515 	stw	r21,20(sp)
200926dc:	a4e7883a 	add	r19,r20,r19
200926e0:	dc800215 	stw	r18,8(sp)
200926e4:	dc400115 	stw	r17,4(sp)
200926e8:	dc000015 	stw	r16,0(sp)
200926ec:	dfc00615 	stw	ra,24(sp)
200926f0:	9c000044 	addi	r16,r19,1
200926f4:	2823883a 	mov	r17,r5
200926f8:	302b883a 	mov	r21,r6
200926fc:	2025883a 	mov	r18,r4
20092700:	29400117 	ldw	r5,4(r5)
20092704:	1400030e 	bge	r2,r16,20092714 <__lshift+0x54>
20092708:	1085883a 	add	r2,r2,r2
2009270c:	29400044 	addi	r5,r5,1
20092710:	143ffd16 	blt	r2,r16,20092708 <__flash_rwdata_start+0xffff789c>
20092714:	9009883a 	mov	r4,r18
20092718:	0091f3c0 	call	20091f3c <_Balloc>
2009271c:	11c00504 	addi	r7,r2,20
20092720:	0500090e 	bge	zero,r20,20092748 <__lshift+0x88>
20092724:	3811883a 	mov	r8,r7
20092728:	0007883a 	mov	r3,zero
2009272c:	40000015 	stw	zero,0(r8)
20092730:	18c00044 	addi	r3,r3,1
20092734:	42000104 	addi	r8,r8,4
20092738:	1d3ffc1e 	bne	r3,r20,2009272c <__flash_rwdata_start+0xffff78c0>
2009273c:	18c7883a 	add	r3,r3,r3
20092740:	18c7883a 	add	r3,r3,r3
20092744:	38cf883a 	add	r7,r7,r3
20092748:	89000417 	ldw	r4,16(r17)
2009274c:	88c00504 	addi	r3,r17,20
20092750:	a98007cc 	andi	r6,r21,31
20092754:	2109883a 	add	r4,r4,r4
20092758:	2109883a 	add	r4,r4,r4
2009275c:	1909883a 	add	r4,r3,r4
20092760:	30002326 	beq	r6,zero,200927f0 <__lshift+0x130>
20092764:	01400804 	movi	r5,32
20092768:	298bc83a 	sub	r5,r5,r6
2009276c:	0013883a 	mov	r9,zero
20092770:	1a000017 	ldw	r8,0(r3)
20092774:	3815883a 	mov	r10,r7
20092778:	39c00104 	addi	r7,r7,4
2009277c:	4190983a 	sll	r8,r8,r6
20092780:	18c00104 	addi	r3,r3,4
20092784:	4a10b03a 	or	r8,r9,r8
20092788:	3a3fff15 	stw	r8,-4(r7)
2009278c:	1a3fff17 	ldw	r8,-4(r3)
20092790:	4152d83a 	srl	r9,r8,r5
20092794:	193ff636 	bltu	r3,r4,20092770 <__flash_rwdata_start+0xffff7904>
20092798:	52400115 	stw	r9,4(r10)
2009279c:	48001a1e 	bne	r9,zero,20092808 <__lshift+0x148>
200927a0:	843fffc4 	addi	r16,r16,-1
200927a4:	14000415 	stw	r16,16(r2)
200927a8:	88000826 	beq	r17,zero,200927cc <__lshift+0x10c>
200927ac:	89000117 	ldw	r4,4(r17)
200927b0:	90c01317 	ldw	r3,76(r18)
200927b4:	2109883a 	add	r4,r4,r4
200927b8:	2109883a 	add	r4,r4,r4
200927bc:	1907883a 	add	r3,r3,r4
200927c0:	19000017 	ldw	r4,0(r3)
200927c4:	89000015 	stw	r4,0(r17)
200927c8:	1c400015 	stw	r17,0(r3)
200927cc:	dfc00617 	ldw	ra,24(sp)
200927d0:	dd400517 	ldw	r21,20(sp)
200927d4:	dd000417 	ldw	r20,16(sp)
200927d8:	dcc00317 	ldw	r19,12(sp)
200927dc:	dc800217 	ldw	r18,8(sp)
200927e0:	dc400117 	ldw	r17,4(sp)
200927e4:	dc000017 	ldw	r16,0(sp)
200927e8:	dec00704 	addi	sp,sp,28
200927ec:	f800283a 	ret
200927f0:	19400017 	ldw	r5,0(r3)
200927f4:	39c00104 	addi	r7,r7,4
200927f8:	18c00104 	addi	r3,r3,4
200927fc:	397fff15 	stw	r5,-4(r7)
20092800:	193ffb36 	bltu	r3,r4,200927f0 <__flash_rwdata_start+0xffff7984>
20092804:	003fe606 	br	200927a0 <__flash_rwdata_start+0xffff7934>
20092808:	9c000084 	addi	r16,r19,2
2009280c:	003fe406 	br	200927a0 <__flash_rwdata_start+0xffff7934>

20092810 <__mcmp>:
20092810:	20800417 	ldw	r2,16(r4)
20092814:	28c00417 	ldw	r3,16(r5)
20092818:	10c5c83a 	sub	r2,r2,r3
2009281c:	1000111e 	bne	r2,zero,20092864 <__mcmp+0x54>
20092820:	18c7883a 	add	r3,r3,r3
20092824:	18c7883a 	add	r3,r3,r3
20092828:	21000504 	addi	r4,r4,20
2009282c:	29400504 	addi	r5,r5,20
20092830:	20c5883a 	add	r2,r4,r3
20092834:	28cb883a 	add	r5,r5,r3
20092838:	00000106 	br	20092840 <__mcmp+0x30>
2009283c:	20800a2e 	bgeu	r4,r2,20092868 <__mcmp+0x58>
20092840:	10bfff04 	addi	r2,r2,-4
20092844:	297fff04 	addi	r5,r5,-4
20092848:	11800017 	ldw	r6,0(r2)
2009284c:	28c00017 	ldw	r3,0(r5)
20092850:	30fffa26 	beq	r6,r3,2009283c <__flash_rwdata_start+0xffff79d0>
20092854:	30c00236 	bltu	r6,r3,20092860 <__mcmp+0x50>
20092858:	00800044 	movi	r2,1
2009285c:	f800283a 	ret
20092860:	00bfffc4 	movi	r2,-1
20092864:	f800283a 	ret
20092868:	0005883a 	mov	r2,zero
2009286c:	f800283a 	ret

20092870 <__mdiff>:
20092870:	defffb04 	addi	sp,sp,-20
20092874:	dc000015 	stw	r16,0(sp)
20092878:	2821883a 	mov	r16,r5
2009287c:	dcc00315 	stw	r19,12(sp)
20092880:	300b883a 	mov	r5,r6
20092884:	2027883a 	mov	r19,r4
20092888:	8009883a 	mov	r4,r16
2009288c:	dc800215 	stw	r18,8(sp)
20092890:	dfc00415 	stw	ra,16(sp)
20092894:	dc400115 	stw	r17,4(sp)
20092898:	3025883a 	mov	r18,r6
2009289c:	00928100 	call	20092810 <__mcmp>
200928a0:	10005226 	beq	r2,zero,200929ec <__mdiff+0x17c>
200928a4:	10004c16 	blt	r2,zero,200929d8 <__mdiff+0x168>
200928a8:	0023883a 	mov	r17,zero
200928ac:	81400117 	ldw	r5,4(r16)
200928b0:	9809883a 	mov	r4,r19
200928b4:	0091f3c0 	call	20091f3c <_Balloc>
200928b8:	83400417 	ldw	r13,16(r16)
200928bc:	93800417 	ldw	r14,16(r18)
200928c0:	81000504 	addi	r4,r16,20
200928c4:	6b59883a 	add	r12,r13,r13
200928c8:	739d883a 	add	r14,r14,r14
200928cc:	6319883a 	add	r12,r12,r12
200928d0:	91800504 	addi	r6,r18,20
200928d4:	739d883a 	add	r14,r14,r14
200928d8:	14400315 	stw	r17,12(r2)
200928dc:	2319883a 	add	r12,r4,r12
200928e0:	339d883a 	add	r14,r6,r14
200928e4:	12400504 	addi	r9,r2,20
200928e8:	0007883a 	mov	r3,zero
200928ec:	22000017 	ldw	r8,0(r4)
200928f0:	32800017 	ldw	r10,0(r6)
200928f4:	4ac00104 	addi	r11,r9,4
200928f8:	41ffffcc 	andi	r7,r8,65535
200928fc:	38c7883a 	add	r3,r7,r3
20092900:	51ffffcc 	andi	r7,r10,65535
20092904:	19cfc83a 	sub	r7,r3,r7
20092908:	4010d43a 	srli	r8,r8,16
2009290c:	5014d43a 	srli	r10,r10,16
20092910:	3807d43a 	srai	r3,r7,16
20092914:	39ffffcc 	andi	r7,r7,65535
20092918:	4291c83a 	sub	r8,r8,r10
2009291c:	40c7883a 	add	r3,r8,r3
20092920:	1810943a 	slli	r8,r3,16
20092924:	31800104 	addi	r6,r6,4
20092928:	21000104 	addi	r4,r4,4
2009292c:	41ceb03a 	or	r7,r8,r7
20092930:	49c00015 	stw	r7,0(r9)
20092934:	1807d43a 	srai	r3,r3,16
20092938:	580b883a 	mov	r5,r11
2009293c:	5813883a 	mov	r9,r11
20092940:	33bfea36 	bltu	r6,r14,200928ec <__flash_rwdata_start+0xffff7a80>
20092944:	2011883a 	mov	r8,r4
20092948:	2300152e 	bgeu	r4,r12,200929a0 <__mdiff+0x130>
2009294c:	21400017 	ldw	r5,0(r4)
20092950:	4a400104 	addi	r9,r9,4
20092954:	21000104 	addi	r4,r4,4
20092958:	29ffffcc 	andi	r7,r5,65535
2009295c:	38c7883a 	add	r3,r7,r3
20092960:	280ad43a 	srli	r5,r5,16
20092964:	180dd43a 	srai	r6,r3,16
20092968:	19ffffcc 	andi	r7,r3,65535
2009296c:	3147883a 	add	r3,r6,r5
20092970:	180a943a 	slli	r5,r3,16
20092974:	1807d43a 	srai	r3,r3,16
20092978:	29ceb03a 	or	r7,r5,r7
2009297c:	49ffff15 	stw	r7,-4(r9)
20092980:	233ff236 	bltu	r4,r12,2009294c <__flash_rwdata_start+0xffff7ae0>
20092984:	0206303a 	nor	r3,zero,r8
20092988:	1b07883a 	add	r3,r3,r12
2009298c:	1806d0ba 	srli	r3,r3,2
20092990:	18c00044 	addi	r3,r3,1
20092994:	18c7883a 	add	r3,r3,r3
20092998:	18c7883a 	add	r3,r3,r3
2009299c:	58cb883a 	add	r5,r11,r3
200929a0:	28ffff04 	addi	r3,r5,-4
200929a4:	3800041e 	bne	r7,zero,200929b8 <__mdiff+0x148>
200929a8:	18ffff04 	addi	r3,r3,-4
200929ac:	19000017 	ldw	r4,0(r3)
200929b0:	6b7fffc4 	addi	r13,r13,-1
200929b4:	203ffc26 	beq	r4,zero,200929a8 <__flash_rwdata_start+0xffff7b3c>
200929b8:	13400415 	stw	r13,16(r2)
200929bc:	dfc00417 	ldw	ra,16(sp)
200929c0:	dcc00317 	ldw	r19,12(sp)
200929c4:	dc800217 	ldw	r18,8(sp)
200929c8:	dc400117 	ldw	r17,4(sp)
200929cc:	dc000017 	ldw	r16,0(sp)
200929d0:	dec00504 	addi	sp,sp,20
200929d4:	f800283a 	ret
200929d8:	8005883a 	mov	r2,r16
200929dc:	04400044 	movi	r17,1
200929e0:	9021883a 	mov	r16,r18
200929e4:	1025883a 	mov	r18,r2
200929e8:	003fb006 	br	200928ac <__flash_rwdata_start+0xffff7a40>
200929ec:	9809883a 	mov	r4,r19
200929f0:	000b883a 	mov	r5,zero
200929f4:	0091f3c0 	call	20091f3c <_Balloc>
200929f8:	00c00044 	movi	r3,1
200929fc:	10c00415 	stw	r3,16(r2)
20092a00:	10000515 	stw	zero,20(r2)
20092a04:	003fed06 	br	200929bc <__flash_rwdata_start+0xffff7b50>

20092a08 <__ulp>:
20092a08:	295ffc2c 	andhi	r5,r5,32752
20092a0c:	00bf3034 	movhi	r2,64704
20092a10:	2887883a 	add	r3,r5,r2
20092a14:	00c0020e 	bge	zero,r3,20092a20 <__ulp+0x18>
20092a18:	0005883a 	mov	r2,zero
20092a1c:	f800283a 	ret
20092a20:	00c7c83a 	sub	r3,zero,r3
20092a24:	180bd53a 	srai	r5,r3,20
20092a28:	008004c4 	movi	r2,19
20092a2c:	11400a0e 	bge	r2,r5,20092a58 <__ulp+0x50>
20092a30:	00800c84 	movi	r2,50
20092a34:	0007883a 	mov	r3,zero
20092a38:	11400516 	blt	r2,r5,20092a50 <__ulp+0x48>
20092a3c:	00800cc4 	movi	r2,51
20092a40:	114bc83a 	sub	r5,r2,r5
20092a44:	00800044 	movi	r2,1
20092a48:	1144983a 	sll	r2,r2,r5
20092a4c:	f800283a 	ret
20092a50:	00800044 	movi	r2,1
20092a54:	f800283a 	ret
20092a58:	00800234 	movhi	r2,8
20092a5c:	1147d83a 	sra	r3,r2,r5
20092a60:	0005883a 	mov	r2,zero
20092a64:	f800283a 	ret

20092a68 <__b2d>:
20092a68:	defffa04 	addi	sp,sp,-24
20092a6c:	dc000015 	stw	r16,0(sp)
20092a70:	24000417 	ldw	r16,16(r4)
20092a74:	dc400115 	stw	r17,4(sp)
20092a78:	24400504 	addi	r17,r4,20
20092a7c:	8421883a 	add	r16,r16,r16
20092a80:	8421883a 	add	r16,r16,r16
20092a84:	8c21883a 	add	r16,r17,r16
20092a88:	dc800215 	stw	r18,8(sp)
20092a8c:	84bfff17 	ldw	r18,-4(r16)
20092a90:	dd000415 	stw	r20,16(sp)
20092a94:	dcc00315 	stw	r19,12(sp)
20092a98:	9009883a 	mov	r4,r18
20092a9c:	2829883a 	mov	r20,r5
20092aa0:	dfc00515 	stw	ra,20(sp)
20092aa4:	00922300 	call	20092230 <__hi0bits>
20092aa8:	00c00804 	movi	r3,32
20092aac:	1887c83a 	sub	r3,r3,r2
20092ab0:	a0c00015 	stw	r3,0(r20)
20092ab4:	00c00284 	movi	r3,10
20092ab8:	84ffff04 	addi	r19,r16,-4
20092abc:	18801216 	blt	r3,r2,20092b08 <__b2d+0xa0>
20092ac0:	014002c4 	movi	r5,11
20092ac4:	2889c83a 	sub	r4,r5,r2
20092ac8:	9106d83a 	srl	r3,r18,r4
20092acc:	18cffc34 	orhi	r3,r3,16368
20092ad0:	8cc0282e 	bgeu	r17,r19,20092b74 <__b2d+0x10c>
20092ad4:	817ffe17 	ldw	r5,-8(r16)
20092ad8:	290ad83a 	srl	r5,r5,r4
20092adc:	10800544 	addi	r2,r2,21
20092ae0:	9084983a 	sll	r2,r18,r2
20092ae4:	2884b03a 	or	r2,r5,r2
20092ae8:	dfc00517 	ldw	ra,20(sp)
20092aec:	dd000417 	ldw	r20,16(sp)
20092af0:	dcc00317 	ldw	r19,12(sp)
20092af4:	dc800217 	ldw	r18,8(sp)
20092af8:	dc400117 	ldw	r17,4(sp)
20092afc:	dc000017 	ldw	r16,0(sp)
20092b00:	dec00604 	addi	sp,sp,24
20092b04:	f800283a 	ret
20092b08:	113ffd44 	addi	r4,r2,-11
20092b0c:	8cc00f2e 	bgeu	r17,r19,20092b4c <__b2d+0xe4>
20092b10:	81bffe04 	addi	r6,r16,-8
20092b14:	817ffe17 	ldw	r5,-8(r16)
20092b18:	20001326 	beq	r4,zero,20092b68 <__b2d+0x100>
20092b1c:	00c00ac4 	movi	r3,43
20092b20:	1885c83a 	sub	r2,r3,r2
20092b24:	2886d83a 	srl	r3,r5,r2
20092b28:	9124983a 	sll	r18,r18,r4
20092b2c:	90e4b03a 	or	r18,r18,r3
20092b30:	90cffc34 	orhi	r3,r18,16368
20092b34:	8980112e 	bgeu	r17,r6,20092b7c <__b2d+0x114>
20092b38:	81bffd17 	ldw	r6,-12(r16)
20092b3c:	308cd83a 	srl	r6,r6,r2
20092b40:	2904983a 	sll	r2,r5,r4
20092b44:	1184b03a 	or	r2,r2,r6
20092b48:	003fe706 	br	20092ae8 <__flash_rwdata_start+0xffff7c7c>
20092b4c:	20000526 	beq	r4,zero,20092b64 <__b2d+0xfc>
20092b50:	9124983a 	sll	r18,r18,r4
20092b54:	000d883a 	mov	r6,zero
20092b58:	000b883a 	mov	r5,zero
20092b5c:	90cffc34 	orhi	r3,r18,16368
20092b60:	003ff706 	br	20092b40 <__flash_rwdata_start+0xffff7cd4>
20092b64:	000b883a 	mov	r5,zero
20092b68:	90cffc34 	orhi	r3,r18,16368
20092b6c:	2805883a 	mov	r2,r5
20092b70:	003fdd06 	br	20092ae8 <__flash_rwdata_start+0xffff7c7c>
20092b74:	000b883a 	mov	r5,zero
20092b78:	003fd806 	br	20092adc <__flash_rwdata_start+0xffff7c70>
20092b7c:	000d883a 	mov	r6,zero
20092b80:	003fef06 	br	20092b40 <__flash_rwdata_start+0xffff7cd4>

20092b84 <__d2b>:
20092b84:	defff704 	addi	sp,sp,-36
20092b88:	dc000215 	stw	r16,8(sp)
20092b8c:	3021883a 	mov	r16,r6
20092b90:	dc400315 	stw	r17,12(sp)
20092b94:	8022907a 	slli	r17,r16,1
20092b98:	dd400715 	stw	r21,28(sp)
20092b9c:	282b883a 	mov	r21,r5
20092ba0:	01400044 	movi	r5,1
20092ba4:	dd000615 	stw	r20,24(sp)
20092ba8:	dcc00515 	stw	r19,20(sp)
20092bac:	dc800415 	stw	r18,16(sp)
20092bb0:	dfc00815 	stw	ra,32(sp)
20092bb4:	3829883a 	mov	r20,r7
20092bb8:	dc800917 	ldw	r18,36(sp)
20092bbc:	8822d57a 	srli	r17,r17,21
20092bc0:	0091f3c0 	call	20091f3c <_Balloc>
20092bc4:	1027883a 	mov	r19,r2
20092bc8:	00800434 	movhi	r2,16
20092bcc:	10bfffc4 	addi	r2,r2,-1
20092bd0:	808c703a 	and	r6,r16,r2
20092bd4:	88000126 	beq	r17,zero,20092bdc <__d2b+0x58>
20092bd8:	31800434 	orhi	r6,r6,16
20092bdc:	d9800015 	stw	r6,0(sp)
20092be0:	a8001f26 	beq	r21,zero,20092c60 <__d2b+0xdc>
20092be4:	d9000104 	addi	r4,sp,4
20092be8:	dd400115 	stw	r21,4(sp)
20092bec:	00922980 	call	20092298 <__lo0bits>
20092bf0:	d8c00017 	ldw	r3,0(sp)
20092bf4:	1000291e 	bne	r2,zero,20092c9c <__d2b+0x118>
20092bf8:	d9000117 	ldw	r4,4(sp)
20092bfc:	99000515 	stw	r4,20(r19)
20092c00:	1820c03a 	cmpne	r16,r3,zero
20092c04:	84000044 	addi	r16,r16,1
20092c08:	98c00615 	stw	r3,24(r19)
20092c0c:	9c000415 	stw	r16,16(r19)
20092c10:	88001b1e 	bne	r17,zero,20092c80 <__d2b+0xfc>
20092c14:	800690ba 	slli	r3,r16,2
20092c18:	10bef384 	addi	r2,r2,-1074
20092c1c:	a0800015 	stw	r2,0(r20)
20092c20:	98c5883a 	add	r2,r19,r3
20092c24:	11000417 	ldw	r4,16(r2)
20092c28:	8020917a 	slli	r16,r16,5
20092c2c:	00922300 	call	20092230 <__hi0bits>
20092c30:	8085c83a 	sub	r2,r16,r2
20092c34:	90800015 	stw	r2,0(r18)
20092c38:	9805883a 	mov	r2,r19
20092c3c:	dfc00817 	ldw	ra,32(sp)
20092c40:	dd400717 	ldw	r21,28(sp)
20092c44:	dd000617 	ldw	r20,24(sp)
20092c48:	dcc00517 	ldw	r19,20(sp)
20092c4c:	dc800417 	ldw	r18,16(sp)
20092c50:	dc400317 	ldw	r17,12(sp)
20092c54:	dc000217 	ldw	r16,8(sp)
20092c58:	dec00904 	addi	sp,sp,36
20092c5c:	f800283a 	ret
20092c60:	d809883a 	mov	r4,sp
20092c64:	00922980 	call	20092298 <__lo0bits>
20092c68:	d8c00017 	ldw	r3,0(sp)
20092c6c:	04000044 	movi	r16,1
20092c70:	9c000415 	stw	r16,16(r19)
20092c74:	98c00515 	stw	r3,20(r19)
20092c78:	10800804 	addi	r2,r2,32
20092c7c:	883fe526 	beq	r17,zero,20092c14 <__flash_rwdata_start+0xffff7da8>
20092c80:	8c7ef344 	addi	r17,r17,-1075
20092c84:	88a3883a 	add	r17,r17,r2
20092c88:	00c00d44 	movi	r3,53
20092c8c:	a4400015 	stw	r17,0(r20)
20092c90:	1885c83a 	sub	r2,r3,r2
20092c94:	90800015 	stw	r2,0(r18)
20092c98:	003fe706 	br	20092c38 <__flash_rwdata_start+0xffff7dcc>
20092c9c:	01000804 	movi	r4,32
20092ca0:	2089c83a 	sub	r4,r4,r2
20092ca4:	1908983a 	sll	r4,r3,r4
20092ca8:	d9400117 	ldw	r5,4(sp)
20092cac:	1886d83a 	srl	r3,r3,r2
20092cb0:	2148b03a 	or	r4,r4,r5
20092cb4:	99000515 	stw	r4,20(r19)
20092cb8:	d8c00015 	stw	r3,0(sp)
20092cbc:	003fd006 	br	20092c00 <__flash_rwdata_start+0xffff7d94>

20092cc0 <__ratio>:
20092cc0:	defff904 	addi	sp,sp,-28
20092cc4:	dc400315 	stw	r17,12(sp)
20092cc8:	2823883a 	mov	r17,r5
20092ccc:	d9400104 	addi	r5,sp,4
20092cd0:	dfc00615 	stw	ra,24(sp)
20092cd4:	dcc00515 	stw	r19,20(sp)
20092cd8:	dc800415 	stw	r18,16(sp)
20092cdc:	2027883a 	mov	r19,r4
20092ce0:	dc000215 	stw	r16,8(sp)
20092ce4:	0092a680 	call	20092a68 <__b2d>
20092ce8:	8809883a 	mov	r4,r17
20092cec:	d80b883a 	mov	r5,sp
20092cf0:	1025883a 	mov	r18,r2
20092cf4:	1821883a 	mov	r16,r3
20092cf8:	0092a680 	call	20092a68 <__b2d>
20092cfc:	8a400417 	ldw	r9,16(r17)
20092d00:	9a000417 	ldw	r8,16(r19)
20092d04:	100d883a 	mov	r6,r2
20092d08:	d8800017 	ldw	r2,0(sp)
20092d0c:	4251c83a 	sub	r8,r8,r9
20092d10:	4012917a 	slli	r9,r8,5
20092d14:	da000117 	ldw	r8,4(sp)
20092d18:	4091c83a 	sub	r8,r8,r2
20092d1c:	4251883a 	add	r8,r8,r9
20092d20:	02000d0e 	bge	zero,r8,20092d58 <__ratio+0x98>
20092d24:	4010953a 	slli	r8,r8,20
20092d28:	4421883a 	add	r16,r8,r16
20092d2c:	9009883a 	mov	r4,r18
20092d30:	800b883a 	mov	r5,r16
20092d34:	180f883a 	mov	r7,r3
20092d38:	0087e580 	call	20087e58 <__divdf3>
20092d3c:	dfc00617 	ldw	ra,24(sp)
20092d40:	dcc00517 	ldw	r19,20(sp)
20092d44:	dc800417 	ldw	r18,16(sp)
20092d48:	dc400317 	ldw	r17,12(sp)
20092d4c:	dc000217 	ldw	r16,8(sp)
20092d50:	dec00704 	addi	sp,sp,28
20092d54:	f800283a 	ret
20092d58:	4010953a 	slli	r8,r8,20
20092d5c:	1a07c83a 	sub	r3,r3,r8
20092d60:	003ff206 	br	20092d2c <__flash_rwdata_start+0xffff7ec0>

20092d64 <_mprec_log10>:
20092d64:	defffe04 	addi	sp,sp,-8
20092d68:	dc000015 	stw	r16,0(sp)
20092d6c:	dfc00115 	stw	ra,4(sp)
20092d70:	008005c4 	movi	r2,23
20092d74:	2021883a 	mov	r16,r4
20092d78:	11000d0e 	bge	r2,r4,20092db0 <_mprec_log10+0x4c>
20092d7c:	0005883a 	mov	r2,zero
20092d80:	00cffc34 	movhi	r3,16368
20092d84:	843fffc4 	addi	r16,r16,-1
20092d88:	1009883a 	mov	r4,r2
20092d8c:	180b883a 	mov	r5,r3
20092d90:	000d883a 	mov	r6,zero
20092d94:	01d00934 	movhi	r7,16420
20092d98:	00887240 	call	20088724 <__muldf3>
20092d9c:	803ff91e 	bne	r16,zero,20092d84 <__flash_rwdata_start+0xffff7f18>
20092da0:	dfc00117 	ldw	ra,4(sp)
20092da4:	dc000017 	ldw	r16,0(sp)
20092da8:	dec00204 	addi	sp,sp,8
20092dac:	f800283a 	ret
20092db0:	202090fa 	slli	r16,r4,3
20092db4:	00800034 	movhi	r2,0
20092db8:	10821104 	addi	r2,r2,2116
20092dbc:	1421883a 	add	r16,r2,r16
20092dc0:	80800017 	ldw	r2,0(r16)
20092dc4:	80c00117 	ldw	r3,4(r16)
20092dc8:	dfc00117 	ldw	ra,4(sp)
20092dcc:	dc000017 	ldw	r16,0(sp)
20092dd0:	dec00204 	addi	sp,sp,8
20092dd4:	f800283a 	ret

20092dd8 <__copybits>:
20092dd8:	297fffc4 	addi	r5,r5,-1
20092ddc:	280fd17a 	srai	r7,r5,5
20092de0:	30c00417 	ldw	r3,16(r6)
20092de4:	30800504 	addi	r2,r6,20
20092de8:	39c00044 	addi	r7,r7,1
20092dec:	18c7883a 	add	r3,r3,r3
20092df0:	39cf883a 	add	r7,r7,r7
20092df4:	18c7883a 	add	r3,r3,r3
20092df8:	39cf883a 	add	r7,r7,r7
20092dfc:	10c7883a 	add	r3,r2,r3
20092e00:	21cf883a 	add	r7,r4,r7
20092e04:	10c00d2e 	bgeu	r2,r3,20092e3c <__copybits+0x64>
20092e08:	200b883a 	mov	r5,r4
20092e0c:	12000017 	ldw	r8,0(r2)
20092e10:	29400104 	addi	r5,r5,4
20092e14:	10800104 	addi	r2,r2,4
20092e18:	2a3fff15 	stw	r8,-4(r5)
20092e1c:	10fffb36 	bltu	r2,r3,20092e0c <__flash_rwdata_start+0xffff7fa0>
20092e20:	1985c83a 	sub	r2,r3,r6
20092e24:	10bffac4 	addi	r2,r2,-21
20092e28:	1004d0ba 	srli	r2,r2,2
20092e2c:	10800044 	addi	r2,r2,1
20092e30:	1085883a 	add	r2,r2,r2
20092e34:	1085883a 	add	r2,r2,r2
20092e38:	2089883a 	add	r4,r4,r2
20092e3c:	21c0032e 	bgeu	r4,r7,20092e4c <__copybits+0x74>
20092e40:	20000015 	stw	zero,0(r4)
20092e44:	21000104 	addi	r4,r4,4
20092e48:	21fffd36 	bltu	r4,r7,20092e40 <__flash_rwdata_start+0xffff7fd4>
20092e4c:	f800283a 	ret

20092e50 <__any_on>:
20092e50:	20c00417 	ldw	r3,16(r4)
20092e54:	2805d17a 	srai	r2,r5,5
20092e58:	21000504 	addi	r4,r4,20
20092e5c:	18800d0e 	bge	r3,r2,20092e94 <__any_on+0x44>
20092e60:	18c7883a 	add	r3,r3,r3
20092e64:	18c7883a 	add	r3,r3,r3
20092e68:	20c7883a 	add	r3,r4,r3
20092e6c:	20c0192e 	bgeu	r4,r3,20092ed4 <__any_on+0x84>
20092e70:	18bfff17 	ldw	r2,-4(r3)
20092e74:	18ffff04 	addi	r3,r3,-4
20092e78:	1000041e 	bne	r2,zero,20092e8c <__any_on+0x3c>
20092e7c:	20c0142e 	bgeu	r4,r3,20092ed0 <__any_on+0x80>
20092e80:	18ffff04 	addi	r3,r3,-4
20092e84:	19400017 	ldw	r5,0(r3)
20092e88:	283ffc26 	beq	r5,zero,20092e7c <__flash_rwdata_start+0xffff8010>
20092e8c:	00800044 	movi	r2,1
20092e90:	f800283a 	ret
20092e94:	10c00a0e 	bge	r2,r3,20092ec0 <__any_on+0x70>
20092e98:	1085883a 	add	r2,r2,r2
20092e9c:	1085883a 	add	r2,r2,r2
20092ea0:	294007cc 	andi	r5,r5,31
20092ea4:	2087883a 	add	r3,r4,r2
20092ea8:	283ff026 	beq	r5,zero,20092e6c <__flash_rwdata_start+0xffff8000>
20092eac:	19800017 	ldw	r6,0(r3)
20092eb0:	3144d83a 	srl	r2,r6,r5
20092eb4:	114a983a 	sll	r5,r2,r5
20092eb8:	29bff41e 	bne	r5,r6,20092e8c <__flash_rwdata_start+0xffff8020>
20092ebc:	003feb06 	br	20092e6c <__flash_rwdata_start+0xffff8000>
20092ec0:	1085883a 	add	r2,r2,r2
20092ec4:	1085883a 	add	r2,r2,r2
20092ec8:	2087883a 	add	r3,r4,r2
20092ecc:	003fe706 	br	20092e6c <__flash_rwdata_start+0xffff8000>
20092ed0:	f800283a 	ret
20092ed4:	0005883a 	mov	r2,zero
20092ed8:	f800283a 	ret

20092edc <_putc_r>:
20092edc:	defffc04 	addi	sp,sp,-16
20092ee0:	dc000215 	stw	r16,8(sp)
20092ee4:	dfc00315 	stw	ra,12(sp)
20092ee8:	2021883a 	mov	r16,r4
20092eec:	20000226 	beq	r4,zero,20092ef8 <_putc_r+0x1c>
20092ef0:	20800e17 	ldw	r2,56(r4)
20092ef4:	10001b26 	beq	r2,zero,20092f64 <_putc_r+0x88>
20092ef8:	30800217 	ldw	r2,8(r6)
20092efc:	10bfffc4 	addi	r2,r2,-1
20092f00:	30800215 	stw	r2,8(r6)
20092f04:	10000a16 	blt	r2,zero,20092f30 <_putc_r+0x54>
20092f08:	30800017 	ldw	r2,0(r6)
20092f0c:	11400005 	stb	r5,0(r2)
20092f10:	30800017 	ldw	r2,0(r6)
20092f14:	10c00044 	addi	r3,r2,1
20092f18:	30c00015 	stw	r3,0(r6)
20092f1c:	10800003 	ldbu	r2,0(r2)
20092f20:	dfc00317 	ldw	ra,12(sp)
20092f24:	dc000217 	ldw	r16,8(sp)
20092f28:	dec00404 	addi	sp,sp,16
20092f2c:	f800283a 	ret
20092f30:	30c00617 	ldw	r3,24(r6)
20092f34:	10c00616 	blt	r2,r3,20092f50 <_putc_r+0x74>
20092f38:	30800017 	ldw	r2,0(r6)
20092f3c:	00c00284 	movi	r3,10
20092f40:	11400005 	stb	r5,0(r2)
20092f44:	30800017 	ldw	r2,0(r6)
20092f48:	11400003 	ldbu	r5,0(r2)
20092f4c:	28fff11e 	bne	r5,r3,20092f14 <__flash_rwdata_start+0xffff80a8>
20092f50:	8009883a 	mov	r4,r16
20092f54:	dfc00317 	ldw	ra,12(sp)
20092f58:	dc000217 	ldw	r16,8(sp)
20092f5c:	dec00404 	addi	sp,sp,16
20092f60:	0095f8c1 	jmpi	20095f8c <__swbuf_r>
20092f64:	d9400015 	stw	r5,0(sp)
20092f68:	d9800115 	stw	r6,4(sp)
20092f6c:	0090fb40 	call	20090fb4 <__sinit>
20092f70:	d9800117 	ldw	r6,4(sp)
20092f74:	d9400017 	ldw	r5,0(sp)
20092f78:	003fdf06 	br	20092ef8 <__flash_rwdata_start+0xffff808c>

20092f7c <putc>:
20092f7c:	00800034 	movhi	r2,0
20092f80:	defffc04 	addi	sp,sp,-16
20092f84:	108a8c04 	addi	r2,r2,10800
20092f88:	dc400115 	stw	r17,4(sp)
20092f8c:	14400017 	ldw	r17,0(r2)
20092f90:	dc800215 	stw	r18,8(sp)
20092f94:	dc000015 	stw	r16,0(sp)
20092f98:	dfc00315 	stw	ra,12(sp)
20092f9c:	2025883a 	mov	r18,r4
20092fa0:	2821883a 	mov	r16,r5
20092fa4:	88000226 	beq	r17,zero,20092fb0 <putc+0x34>
20092fa8:	88800e17 	ldw	r2,56(r17)
20092fac:	10001a26 	beq	r2,zero,20093018 <putc+0x9c>
20092fb0:	80800217 	ldw	r2,8(r16)
20092fb4:	10bfffc4 	addi	r2,r2,-1
20092fb8:	80800215 	stw	r2,8(r16)
20092fbc:	10000c16 	blt	r2,zero,20092ff0 <putc+0x74>
20092fc0:	80800017 	ldw	r2,0(r16)
20092fc4:	14800005 	stb	r18,0(r2)
20092fc8:	80800017 	ldw	r2,0(r16)
20092fcc:	10c00044 	addi	r3,r2,1
20092fd0:	80c00015 	stw	r3,0(r16)
20092fd4:	10800003 	ldbu	r2,0(r2)
20092fd8:	dfc00317 	ldw	ra,12(sp)
20092fdc:	dc800217 	ldw	r18,8(sp)
20092fe0:	dc400117 	ldw	r17,4(sp)
20092fe4:	dc000017 	ldw	r16,0(sp)
20092fe8:	dec00404 	addi	sp,sp,16
20092fec:	f800283a 	ret
20092ff0:	80c00617 	ldw	r3,24(r16)
20092ff4:	10c00b16 	blt	r2,r3,20093024 <putc+0xa8>
20092ff8:	80800017 	ldw	r2,0(r16)
20092ffc:	00c00284 	movi	r3,10
20093000:	14800005 	stb	r18,0(r2)
20093004:	80800017 	ldw	r2,0(r16)
20093008:	11400003 	ldbu	r5,0(r2)
2009300c:	28ffef1e 	bne	r5,r3,20092fcc <__flash_rwdata_start+0xffff8160>
20093010:	8809883a 	mov	r4,r17
20093014:	00000506 	br	2009302c <putc+0xb0>
20093018:	8809883a 	mov	r4,r17
2009301c:	0090fb40 	call	20090fb4 <__sinit>
20093020:	003fe306 	br	20092fb0 <__flash_rwdata_start+0xffff8144>
20093024:	8809883a 	mov	r4,r17
20093028:	900b883a 	mov	r5,r18
2009302c:	800d883a 	mov	r6,r16
20093030:	dfc00317 	ldw	ra,12(sp)
20093034:	dc800217 	ldw	r18,8(sp)
20093038:	dc400117 	ldw	r17,4(sp)
2009303c:	dc000017 	ldw	r16,0(sp)
20093040:	dec00404 	addi	sp,sp,16
20093044:	0095f8c1 	jmpi	20095f8c <__swbuf_r>

20093048 <_realloc_r>:
20093048:	defff604 	addi	sp,sp,-40
2009304c:	dd000415 	stw	r20,16(sp)
20093050:	dc400115 	stw	r17,4(sp)
20093054:	dfc00915 	stw	ra,36(sp)
20093058:	df000815 	stw	fp,32(sp)
2009305c:	ddc00715 	stw	r23,28(sp)
20093060:	dd800615 	stw	r22,24(sp)
20093064:	dd400515 	stw	r21,20(sp)
20093068:	dcc00315 	stw	r19,12(sp)
2009306c:	dc800215 	stw	r18,8(sp)
20093070:	dc000015 	stw	r16,0(sp)
20093074:	2829883a 	mov	r20,r5
20093078:	3023883a 	mov	r17,r6
2009307c:	2800ad26 	beq	r5,zero,20093334 <_realloc_r+0x2ec>
20093080:	2025883a 	mov	r18,r4
20093084:	0097ae40 	call	20097ae4 <__malloc_lock>
20093088:	a0ffff17 	ldw	r3,-4(r20)
2009308c:	043fff04 	movi	r16,-4
20093090:	890002c4 	addi	r4,r17,11
20093094:	01c00584 	movi	r7,22
20093098:	a57ffe04 	addi	r21,r20,-8
2009309c:	1c20703a 	and	r16,r3,r16
200930a0:	39001d2e 	bgeu	r7,r4,20093118 <_realloc_r+0xd0>
200930a4:	05bffe04 	movi	r22,-8
200930a8:	25ac703a 	and	r22,r4,r22
200930ac:	b00f883a 	mov	r7,r22
200930b0:	b0006516 	blt	r22,zero,20093248 <_realloc_r+0x200>
200930b4:	b4406436 	bltu	r22,r17,20093248 <_realloc_r+0x200>
200930b8:	81c01a0e 	bge	r16,r7,20093124 <_realloc_r+0xdc>
200930bc:	07000034 	movhi	fp,0
200930c0:	e7049d04 	addi	fp,fp,4724
200930c4:	e1400217 	ldw	r5,8(fp)
200930c8:	ac11883a 	add	r8,r21,r16
200930cc:	2a006226 	beq	r5,r8,20093258 <_realloc_r+0x210>
200930d0:	41800117 	ldw	r6,4(r8)
200930d4:	027fff84 	movi	r9,-2
200930d8:	3252703a 	and	r9,r6,r9
200930dc:	4253883a 	add	r9,r8,r9
200930e0:	49000117 	ldw	r4,4(r9)
200930e4:	2100004c 	andi	r4,r4,1
200930e8:	2000281e 	bne	r4,zero,2009318c <_realloc_r+0x144>
200930ec:	00bfff04 	movi	r2,-4
200930f0:	3084703a 	and	r2,r6,r2
200930f4:	1409883a 	add	r4,r2,r16
200930f8:	21c05e16 	blt	r4,r7,20093274 <_realloc_r+0x22c>
200930fc:	40800317 	ldw	r2,12(r8)
20093100:	41400217 	ldw	r5,8(r8)
20093104:	a023883a 	mov	r17,r20
20093108:	2021883a 	mov	r16,r4
2009310c:	28800315 	stw	r2,12(r5)
20093110:	11400215 	stw	r5,8(r2)
20093114:	00000406 	br	20093128 <_realloc_r+0xe0>
20093118:	01c00404 	movi	r7,16
2009311c:	382d883a 	mov	r22,r7
20093120:	003fe406 	br	200930b4 <__flash_rwdata_start+0xffff8248>
20093124:	a023883a 	mov	r17,r20
20093128:	858fc83a 	sub	r7,r16,r22
2009312c:	008003c4 	movi	r2,15
20093130:	18c0004c 	andi	r3,r3,1
20093134:	11c07236 	bltu	r2,r7,20093300 <_realloc_r+0x2b8>
20093138:	1c06b03a 	or	r3,r3,r16
2009313c:	a8c00115 	stw	r3,4(r21)
20093140:	ac21883a 	add	r16,r21,r16
20093144:	80800117 	ldw	r2,4(r16)
20093148:	10800054 	ori	r2,r2,1
2009314c:	80800115 	stw	r2,4(r16)
20093150:	9009883a 	mov	r4,r18
20093154:	0097ae80 	call	20097ae8 <__malloc_unlock>
20093158:	8805883a 	mov	r2,r17
2009315c:	dfc00917 	ldw	ra,36(sp)
20093160:	df000817 	ldw	fp,32(sp)
20093164:	ddc00717 	ldw	r23,28(sp)
20093168:	dd800617 	ldw	r22,24(sp)
2009316c:	dd400517 	ldw	r21,20(sp)
20093170:	dd000417 	ldw	r20,16(sp)
20093174:	dcc00317 	ldw	r19,12(sp)
20093178:	dc800217 	ldw	r18,8(sp)
2009317c:	dc400117 	ldw	r17,4(sp)
20093180:	dc000017 	ldw	r16,0(sp)
20093184:	dec00a04 	addi	sp,sp,40
20093188:	f800283a 	ret
2009318c:	18c0004c 	andi	r3,r3,1
20093190:	1800081e 	bne	r3,zero,200931b4 <_realloc_r+0x16c>
20093194:	a4fffe17 	ldw	r19,-8(r20)
20093198:	00bfff04 	movi	r2,-4
2009319c:	ace7c83a 	sub	r19,r21,r19
200931a0:	98c00117 	ldw	r3,4(r19)
200931a4:	1886703a 	and	r3,r3,r2
200931a8:	98000226 	beq	r19,zero,200931b4 <_realloc_r+0x16c>
200931ac:	1c2f883a 	add	r23,r3,r16
200931b0:	b9c06d0e 	bge	r23,r7,20093368 <_realloc_r+0x320>
200931b4:	880b883a 	mov	r5,r17
200931b8:	9009883a 	mov	r4,r18
200931bc:	0089e500 	call	20089e50 <_malloc_r>
200931c0:	1023883a 	mov	r17,r2
200931c4:	1000ef26 	beq	r2,zero,20093584 <_realloc_r+0x53c>
200931c8:	a0ffff17 	ldw	r3,-4(r20)
200931cc:	113ffe04 	addi	r4,r2,-8
200931d0:	00bfff84 	movi	r2,-2
200931d4:	1884703a 	and	r2,r3,r2
200931d8:	a885883a 	add	r2,r21,r2
200931dc:	2080bf26 	beq	r4,r2,200934dc <_realloc_r+0x494>
200931e0:	81bfff04 	addi	r6,r16,-4
200931e4:	00800904 	movi	r2,36
200931e8:	11808936 	bltu	r2,r6,20093410 <_realloc_r+0x3c8>
200931ec:	00c004c4 	movi	r3,19
200931f0:	19806c2e 	bgeu	r3,r6,200933a4 <_realloc_r+0x35c>
200931f4:	a0c00017 	ldw	r3,0(r20)
200931f8:	88c00015 	stw	r3,0(r17)
200931fc:	a0c00117 	ldw	r3,4(r20)
20093200:	88c00115 	stw	r3,4(r17)
20093204:	00c006c4 	movi	r3,27
20093208:	1980ac36 	bltu	r3,r6,200934bc <_realloc_r+0x474>
2009320c:	88800204 	addi	r2,r17,8
20093210:	a0c00204 	addi	r3,r20,8
20093214:	19000017 	ldw	r4,0(r3)
20093218:	11000015 	stw	r4,0(r2)
2009321c:	19000117 	ldw	r4,4(r3)
20093220:	11000115 	stw	r4,4(r2)
20093224:	18c00217 	ldw	r3,8(r3)
20093228:	10c00215 	stw	r3,8(r2)
2009322c:	a00b883a 	mov	r5,r20
20093230:	9009883a 	mov	r4,r18
20093234:	00911280 	call	20091128 <_free_r>
20093238:	9009883a 	mov	r4,r18
2009323c:	0097ae80 	call	20097ae8 <__malloc_unlock>
20093240:	8805883a 	mov	r2,r17
20093244:	003fc506 	br	2009315c <__flash_rwdata_start+0xffff82f0>
20093248:	00800304 	movi	r2,12
2009324c:	90800015 	stw	r2,0(r18)
20093250:	0005883a 	mov	r2,zero
20093254:	003fc106 	br	2009315c <__flash_rwdata_start+0xffff82f0>
20093258:	29800117 	ldw	r6,4(r5)
2009325c:	00bfff04 	movi	r2,-4
20093260:	b1000404 	addi	r4,r22,16
20093264:	3084703a 	and	r2,r6,r2
20093268:	140d883a 	add	r6,r2,r16
2009326c:	31005b0e 	bge	r6,r4,200933dc <_realloc_r+0x394>
20093270:	2811883a 	mov	r8,r5
20093274:	18c0004c 	andi	r3,r3,1
20093278:	183fce1e 	bne	r3,zero,200931b4 <__flash_rwdata_start+0xffff8348>
2009327c:	a4fffe17 	ldw	r19,-8(r20)
20093280:	00ffff04 	movi	r3,-4
20093284:	ace7c83a 	sub	r19,r21,r19
20093288:	99000117 	ldw	r4,4(r19)
2009328c:	20c6703a 	and	r3,r4,r3
20093290:	403fc526 	beq	r8,zero,200931a8 <__flash_rwdata_start+0xffff833c>
20093294:	1c2f883a 	add	r23,r3,r16
20093298:	b8af883a 	add	r23,r23,r2
2009329c:	41406026 	beq	r8,r5,20093420 <_realloc_r+0x3d8>
200932a0:	b9ffc116 	blt	r23,r7,200931a8 <__flash_rwdata_start+0xffff833c>
200932a4:	40c00217 	ldw	r3,8(r8)
200932a8:	40800317 	ldw	r2,12(r8)
200932ac:	81bfff04 	addi	r6,r16,-4
200932b0:	01000904 	movi	r4,36
200932b4:	18800315 	stw	r2,12(r3)
200932b8:	10c00215 	stw	r3,8(r2)
200932bc:	99400217 	ldw	r5,8(r19)
200932c0:	98c00317 	ldw	r3,12(r19)
200932c4:	9c400204 	addi	r17,r19,8
200932c8:	28c00315 	stw	r3,12(r5)
200932cc:	19400215 	stw	r5,8(r3)
200932d0:	21802d36 	bltu	r4,r6,20093388 <_realloc_r+0x340>
200932d4:	008004c4 	movi	r2,19
200932d8:	1180352e 	bgeu	r2,r6,200933b0 <_realloc_r+0x368>
200932dc:	a0800017 	ldw	r2,0(r20)
200932e0:	98800215 	stw	r2,8(r19)
200932e4:	a0800117 	ldw	r2,4(r20)
200932e8:	98800315 	stw	r2,12(r19)
200932ec:	008006c4 	movi	r2,27
200932f0:	11808036 	bltu	r2,r6,200934f4 <_realloc_r+0x4ac>
200932f4:	98c00404 	addi	r3,r19,16
200932f8:	a5000204 	addi	r20,r20,8
200932fc:	00002d06 	br	200933b4 <_realloc_r+0x36c>
20093300:	1d86b03a 	or	r3,r3,r22
20093304:	ad8b883a 	add	r5,r21,r22
20093308:	a8c00115 	stw	r3,4(r21)
2009330c:	38800054 	ori	r2,r7,1
20093310:	28800115 	stw	r2,4(r5)
20093314:	29cf883a 	add	r7,r5,r7
20093318:	38800117 	ldw	r2,4(r7)
2009331c:	9009883a 	mov	r4,r18
20093320:	29400204 	addi	r5,r5,8
20093324:	10800054 	ori	r2,r2,1
20093328:	38800115 	stw	r2,4(r7)
2009332c:	00911280 	call	20091128 <_free_r>
20093330:	003f8706 	br	20093150 <__flash_rwdata_start+0xffff82e4>
20093334:	300b883a 	mov	r5,r6
20093338:	dfc00917 	ldw	ra,36(sp)
2009333c:	df000817 	ldw	fp,32(sp)
20093340:	ddc00717 	ldw	r23,28(sp)
20093344:	dd800617 	ldw	r22,24(sp)
20093348:	dd400517 	ldw	r21,20(sp)
2009334c:	dd000417 	ldw	r20,16(sp)
20093350:	dcc00317 	ldw	r19,12(sp)
20093354:	dc800217 	ldw	r18,8(sp)
20093358:	dc400117 	ldw	r17,4(sp)
2009335c:	dc000017 	ldw	r16,0(sp)
20093360:	dec00a04 	addi	sp,sp,40
20093364:	0089e501 	jmpi	20089e50 <_malloc_r>
20093368:	98800317 	ldw	r2,12(r19)
2009336c:	98c00217 	ldw	r3,8(r19)
20093370:	81bfff04 	addi	r6,r16,-4
20093374:	01000904 	movi	r4,36
20093378:	18800315 	stw	r2,12(r3)
2009337c:	10c00215 	stw	r3,8(r2)
20093380:	9c400204 	addi	r17,r19,8
20093384:	21bfd32e 	bgeu	r4,r6,200932d4 <__flash_rwdata_start+0xffff8468>
20093388:	8809883a 	mov	r4,r17
2009338c:	a00b883a 	mov	r5,r20
20093390:	0091de00 	call	20091de0 <memmove>
20093394:	98c00117 	ldw	r3,4(r19)
20093398:	b821883a 	mov	r16,r23
2009339c:	982b883a 	mov	r21,r19
200933a0:	003f6106 	br	20093128 <__flash_rwdata_start+0xffff82bc>
200933a4:	8805883a 	mov	r2,r17
200933a8:	a007883a 	mov	r3,r20
200933ac:	003f9906 	br	20093214 <__flash_rwdata_start+0xffff83a8>
200933b0:	8807883a 	mov	r3,r17
200933b4:	a0800017 	ldw	r2,0(r20)
200933b8:	b821883a 	mov	r16,r23
200933bc:	982b883a 	mov	r21,r19
200933c0:	18800015 	stw	r2,0(r3)
200933c4:	a0800117 	ldw	r2,4(r20)
200933c8:	18800115 	stw	r2,4(r3)
200933cc:	a0800217 	ldw	r2,8(r20)
200933d0:	18800215 	stw	r2,8(r3)
200933d4:	98c00117 	ldw	r3,4(r19)
200933d8:	003f5306 	br	20093128 <__flash_rwdata_start+0xffff82bc>
200933dc:	adab883a 	add	r21,r21,r22
200933e0:	3585c83a 	sub	r2,r6,r22
200933e4:	e5400215 	stw	r21,8(fp)
200933e8:	10800054 	ori	r2,r2,1
200933ec:	a8800115 	stw	r2,4(r21)
200933f0:	a0bfff17 	ldw	r2,-4(r20)
200933f4:	9009883a 	mov	r4,r18
200933f8:	1080004c 	andi	r2,r2,1
200933fc:	b0acb03a 	or	r22,r22,r2
20093400:	a5bfff15 	stw	r22,-4(r20)
20093404:	0097ae80 	call	20097ae8 <__malloc_unlock>
20093408:	a005883a 	mov	r2,r20
2009340c:	003f5306 	br	2009315c <__flash_rwdata_start+0xffff82f0>
20093410:	8809883a 	mov	r4,r17
20093414:	a00b883a 	mov	r5,r20
20093418:	0091de00 	call	20091de0 <memmove>
2009341c:	003f8306 	br	2009322c <__flash_rwdata_start+0xffff83c0>
20093420:	b0800404 	addi	r2,r22,16
20093424:	b8bf6016 	blt	r23,r2,200931a8 <__flash_rwdata_start+0xffff833c>
20093428:	98800317 	ldw	r2,12(r19)
2009342c:	98c00217 	ldw	r3,8(r19)
20093430:	81bfff04 	addi	r6,r16,-4
20093434:	01000904 	movi	r4,36
20093438:	18800315 	stw	r2,12(r3)
2009343c:	10c00215 	stw	r3,8(r2)
20093440:	9c400204 	addi	r17,r19,8
20093444:	21804336 	bltu	r4,r6,20093554 <_realloc_r+0x50c>
20093448:	008004c4 	movi	r2,19
2009344c:	11803f2e 	bgeu	r2,r6,2009354c <_realloc_r+0x504>
20093450:	a0800017 	ldw	r2,0(r20)
20093454:	98800215 	stw	r2,8(r19)
20093458:	a0800117 	ldw	r2,4(r20)
2009345c:	98800315 	stw	r2,12(r19)
20093460:	008006c4 	movi	r2,27
20093464:	11803f36 	bltu	r2,r6,20093564 <_realloc_r+0x51c>
20093468:	98800404 	addi	r2,r19,16
2009346c:	a5000204 	addi	r20,r20,8
20093470:	a0c00017 	ldw	r3,0(r20)
20093474:	10c00015 	stw	r3,0(r2)
20093478:	a0c00117 	ldw	r3,4(r20)
2009347c:	10c00115 	stw	r3,4(r2)
20093480:	a0c00217 	ldw	r3,8(r20)
20093484:	10c00215 	stw	r3,8(r2)
20093488:	9d87883a 	add	r3,r19,r22
2009348c:	bd85c83a 	sub	r2,r23,r22
20093490:	e0c00215 	stw	r3,8(fp)
20093494:	10800054 	ori	r2,r2,1
20093498:	18800115 	stw	r2,4(r3)
2009349c:	98800117 	ldw	r2,4(r19)
200934a0:	9009883a 	mov	r4,r18
200934a4:	1080004c 	andi	r2,r2,1
200934a8:	b0acb03a 	or	r22,r22,r2
200934ac:	9d800115 	stw	r22,4(r19)
200934b0:	0097ae80 	call	20097ae8 <__malloc_unlock>
200934b4:	8805883a 	mov	r2,r17
200934b8:	003f2806 	br	2009315c <__flash_rwdata_start+0xffff82f0>
200934bc:	a0c00217 	ldw	r3,8(r20)
200934c0:	88c00215 	stw	r3,8(r17)
200934c4:	a0c00317 	ldw	r3,12(r20)
200934c8:	88c00315 	stw	r3,12(r17)
200934cc:	30801126 	beq	r6,r2,20093514 <_realloc_r+0x4cc>
200934d0:	88800404 	addi	r2,r17,16
200934d4:	a0c00404 	addi	r3,r20,16
200934d8:	003f4e06 	br	20093214 <__flash_rwdata_start+0xffff83a8>
200934dc:	893fff17 	ldw	r4,-4(r17)
200934e0:	00bfff04 	movi	r2,-4
200934e4:	a023883a 	mov	r17,r20
200934e8:	2084703a 	and	r2,r4,r2
200934ec:	80a1883a 	add	r16,r16,r2
200934f0:	003f0d06 	br	20093128 <__flash_rwdata_start+0xffff82bc>
200934f4:	a0800217 	ldw	r2,8(r20)
200934f8:	98800415 	stw	r2,16(r19)
200934fc:	a0800317 	ldw	r2,12(r20)
20093500:	98800515 	stw	r2,20(r19)
20093504:	31000a26 	beq	r6,r4,20093530 <_realloc_r+0x4e8>
20093508:	98c00604 	addi	r3,r19,24
2009350c:	a5000404 	addi	r20,r20,16
20093510:	003fa806 	br	200933b4 <__flash_rwdata_start+0xffff8548>
20093514:	a1000417 	ldw	r4,16(r20)
20093518:	88800604 	addi	r2,r17,24
2009351c:	a0c00604 	addi	r3,r20,24
20093520:	89000415 	stw	r4,16(r17)
20093524:	a1000517 	ldw	r4,20(r20)
20093528:	89000515 	stw	r4,20(r17)
2009352c:	003f3906 	br	20093214 <__flash_rwdata_start+0xffff83a8>
20093530:	a0800417 	ldw	r2,16(r20)
20093534:	a5000604 	addi	r20,r20,24
20093538:	98c00804 	addi	r3,r19,32
2009353c:	98800615 	stw	r2,24(r19)
20093540:	a0bfff17 	ldw	r2,-4(r20)
20093544:	98800715 	stw	r2,28(r19)
20093548:	003f9a06 	br	200933b4 <__flash_rwdata_start+0xffff8548>
2009354c:	8805883a 	mov	r2,r17
20093550:	003fc706 	br	20093470 <__flash_rwdata_start+0xffff8604>
20093554:	8809883a 	mov	r4,r17
20093558:	a00b883a 	mov	r5,r20
2009355c:	0091de00 	call	20091de0 <memmove>
20093560:	003fc906 	br	20093488 <__flash_rwdata_start+0xffff861c>
20093564:	a0800217 	ldw	r2,8(r20)
20093568:	98800415 	stw	r2,16(r19)
2009356c:	a0800317 	ldw	r2,12(r20)
20093570:	98800515 	stw	r2,20(r19)
20093574:	31000726 	beq	r6,r4,20093594 <_realloc_r+0x54c>
20093578:	98800604 	addi	r2,r19,24
2009357c:	a5000404 	addi	r20,r20,16
20093580:	003fbb06 	br	20093470 <__flash_rwdata_start+0xffff8604>
20093584:	9009883a 	mov	r4,r18
20093588:	0097ae80 	call	20097ae8 <__malloc_unlock>
2009358c:	0005883a 	mov	r2,zero
20093590:	003ef206 	br	2009315c <__flash_rwdata_start+0xffff82f0>
20093594:	a0c00417 	ldw	r3,16(r20)
20093598:	a5000604 	addi	r20,r20,24
2009359c:	98800804 	addi	r2,r19,32
200935a0:	98c00615 	stw	r3,24(r19)
200935a4:	a0ffff17 	ldw	r3,-4(r20)
200935a8:	98c00715 	stw	r3,28(r19)
200935ac:	003fb006 	br	20093470 <__flash_rwdata_start+0xffff8604>

200935b0 <__fpclassifyd>:
200935b0:	00a00034 	movhi	r2,32768
200935b4:	10bfffc4 	addi	r2,r2,-1
200935b8:	2884703a 	and	r2,r5,r2
200935bc:	10000726 	beq	r2,zero,200935dc <__fpclassifyd+0x2c>
200935c0:	00fffc34 	movhi	r3,65520
200935c4:	019ff834 	movhi	r6,32736
200935c8:	28c7883a 	add	r3,r5,r3
200935cc:	31bfffc4 	addi	r6,r6,-1
200935d0:	30c00536 	bltu	r6,r3,200935e8 <__fpclassifyd+0x38>
200935d4:	00800104 	movi	r2,4
200935d8:	f800283a 	ret
200935dc:	2000021e 	bne	r4,zero,200935e8 <__fpclassifyd+0x38>
200935e0:	00800084 	movi	r2,2
200935e4:	f800283a 	ret
200935e8:	00dffc34 	movhi	r3,32752
200935ec:	019ff834 	movhi	r6,32736
200935f0:	28cb883a 	add	r5,r5,r3
200935f4:	31bfffc4 	addi	r6,r6,-1
200935f8:	317ff62e 	bgeu	r6,r5,200935d4 <__flash_rwdata_start+0xffff8768>
200935fc:	01400434 	movhi	r5,16
20093600:	297fffc4 	addi	r5,r5,-1
20093604:	28800236 	bltu	r5,r2,20093610 <__fpclassifyd+0x60>
20093608:	008000c4 	movi	r2,3
2009360c:	f800283a 	ret
20093610:	10c00226 	beq	r2,r3,2009361c <__fpclassifyd+0x6c>
20093614:	0005883a 	mov	r2,zero
20093618:	f800283a 	ret
2009361c:	2005003a 	cmpeq	r2,r4,zero
20093620:	f800283a 	ret

20093624 <__sread>:
20093624:	defffe04 	addi	sp,sp,-8
20093628:	dc000015 	stw	r16,0(sp)
2009362c:	2821883a 	mov	r16,r5
20093630:	2940038f 	ldh	r5,14(r5)
20093634:	dfc00115 	stw	ra,4(sp)
20093638:	00966400 	call	20096640 <_read_r>
2009363c:	10000716 	blt	r2,zero,2009365c <__sread+0x38>
20093640:	80c01417 	ldw	r3,80(r16)
20093644:	1887883a 	add	r3,r3,r2
20093648:	80c01415 	stw	r3,80(r16)
2009364c:	dfc00117 	ldw	ra,4(sp)
20093650:	dc000017 	ldw	r16,0(sp)
20093654:	dec00204 	addi	sp,sp,8
20093658:	f800283a 	ret
2009365c:	80c0030b 	ldhu	r3,12(r16)
20093660:	18fbffcc 	andi	r3,r3,61439
20093664:	80c0030d 	sth	r3,12(r16)
20093668:	dfc00117 	ldw	ra,4(sp)
2009366c:	dc000017 	ldw	r16,0(sp)
20093670:	dec00204 	addi	sp,sp,8
20093674:	f800283a 	ret

20093678 <__seofread>:
20093678:	0005883a 	mov	r2,zero
2009367c:	f800283a 	ret

20093680 <__swrite>:
20093680:	2880030b 	ldhu	r2,12(r5)
20093684:	defffb04 	addi	sp,sp,-20
20093688:	dcc00315 	stw	r19,12(sp)
2009368c:	dc800215 	stw	r18,8(sp)
20093690:	dc400115 	stw	r17,4(sp)
20093694:	dc000015 	stw	r16,0(sp)
20093698:	dfc00415 	stw	ra,16(sp)
2009369c:	10c0400c 	andi	r3,r2,256
200936a0:	2821883a 	mov	r16,r5
200936a4:	2027883a 	mov	r19,r4
200936a8:	3025883a 	mov	r18,r6
200936ac:	3823883a 	mov	r17,r7
200936b0:	18000526 	beq	r3,zero,200936c8 <__swrite+0x48>
200936b4:	2940038f 	ldh	r5,14(r5)
200936b8:	000d883a 	mov	r6,zero
200936bc:	01c00084 	movi	r7,2
200936c0:	00965e40 	call	200965e4 <_lseek_r>
200936c4:	8080030b 	ldhu	r2,12(r16)
200936c8:	8140038f 	ldh	r5,14(r16)
200936cc:	10bbffcc 	andi	r2,r2,61439
200936d0:	9809883a 	mov	r4,r19
200936d4:	900d883a 	mov	r6,r18
200936d8:	880f883a 	mov	r7,r17
200936dc:	8080030d 	sth	r2,12(r16)
200936e0:	dfc00417 	ldw	ra,16(sp)
200936e4:	dcc00317 	ldw	r19,12(sp)
200936e8:	dc800217 	ldw	r18,8(sp)
200936ec:	dc400117 	ldw	r17,4(sp)
200936f0:	dc000017 	ldw	r16,0(sp)
200936f4:	dec00504 	addi	sp,sp,20
200936f8:	00960e01 	jmpi	200960e0 <_write_r>

200936fc <__sseek>:
200936fc:	defffe04 	addi	sp,sp,-8
20093700:	dc000015 	stw	r16,0(sp)
20093704:	2821883a 	mov	r16,r5
20093708:	2940038f 	ldh	r5,14(r5)
2009370c:	dfc00115 	stw	ra,4(sp)
20093710:	00965e40 	call	200965e4 <_lseek_r>
20093714:	00ffffc4 	movi	r3,-1
20093718:	10c00826 	beq	r2,r3,2009373c <__sseek+0x40>
2009371c:	80c0030b 	ldhu	r3,12(r16)
20093720:	80801415 	stw	r2,80(r16)
20093724:	18c40014 	ori	r3,r3,4096
20093728:	80c0030d 	sth	r3,12(r16)
2009372c:	dfc00117 	ldw	ra,4(sp)
20093730:	dc000017 	ldw	r16,0(sp)
20093734:	dec00204 	addi	sp,sp,8
20093738:	f800283a 	ret
2009373c:	80c0030b 	ldhu	r3,12(r16)
20093740:	18fbffcc 	andi	r3,r3,61439
20093744:	80c0030d 	sth	r3,12(r16)
20093748:	dfc00117 	ldw	ra,4(sp)
2009374c:	dc000017 	ldw	r16,0(sp)
20093750:	dec00204 	addi	sp,sp,8
20093754:	f800283a 	ret

20093758 <__sclose>:
20093758:	2940038f 	ldh	r5,14(r5)
2009375c:	009613c1 	jmpi	2009613c <_close_r>

20093760 <strchr>:
20093760:	2ac03fcc 	andi	r11,r5,255
20093764:	2815883a 	mov	r10,r5
20093768:	208000cc 	andi	r2,r4,3
2009376c:	58003726 	beq	r11,zero,2009384c <strchr+0xec>
20093770:	10000b26 	beq	r2,zero,200937a0 <strchr+0x40>
20093774:	20800003 	ldbu	r2,0(r4)
20093778:	10003226 	beq	r2,zero,20093844 <strchr+0xe4>
2009377c:	28c03fcc 	andi	r3,r5,255
20093780:	5880041e 	bne	r11,r2,20093794 <strchr+0x34>
20093784:	00004d06 	br	200938bc <strchr+0x15c>
20093788:	20800003 	ldbu	r2,0(r4)
2009378c:	10002d26 	beq	r2,zero,20093844 <strchr+0xe4>
20093790:	18804a26 	beq	r3,r2,200938bc <strchr+0x15c>
20093794:	21000044 	addi	r4,r4,1
20093798:	208000cc 	andi	r2,r4,3
2009379c:	103ffa1e 	bne	r2,zero,20093788 <__flash_rwdata_start+0xffff891c>
200937a0:	29403fcc 	andi	r5,r5,255
200937a4:	280e923a 	slli	r7,r5,8
200937a8:	20800017 	ldw	r2,0(r4)
200937ac:	01bfbff4 	movhi	r6,65279
200937b0:	394ab03a 	or	r5,r7,r5
200937b4:	280e943a 	slli	r7,r5,16
200937b8:	31bfbfc4 	addi	r6,r6,-257
200937bc:	0090303a 	nor	r8,zero,r2
200937c0:	394eb03a 	or	r7,r7,r5
200937c4:	1187883a 	add	r3,r2,r6
200937c8:	11c4f03a 	xor	r2,r2,r7
200937cc:	008a303a 	nor	r5,zero,r2
200937d0:	1185883a 	add	r2,r2,r6
200937d4:	03202074 	movhi	r12,32897
200937d8:	2884703a 	and	r2,r5,r2
200937dc:	40c6703a 	and	r3,r8,r3
200937e0:	63202004 	addi	r12,r12,-32640
200937e4:	10c4b03a 	or	r2,r2,r3
200937e8:	1304703a 	and	r2,r2,r12
200937ec:	10000c1e 	bne	r2,zero,20093820 <strchr+0xc0>
200937f0:	21000104 	addi	r4,r4,4
200937f4:	20800017 	ldw	r2,0(r4)
200937f8:	3886f03a 	xor	r3,r7,r2
200937fc:	00d2303a 	nor	r9,zero,r3
20093800:	198b883a 	add	r5,r3,r6
20093804:	0090303a 	nor	r8,zero,r2
20093808:	1187883a 	add	r3,r2,r6
2009380c:	494a703a 	and	r5,r9,r5
20093810:	40c4703a 	and	r2,r8,r3
20093814:	2884b03a 	or	r2,r5,r2
20093818:	1304703a 	and	r2,r2,r12
2009381c:	103ff426 	beq	r2,zero,200937f0 <__flash_rwdata_start+0xffff8984>
20093820:	20800003 	ldbu	r2,0(r4)
20093824:	10000726 	beq	r2,zero,20093844 <strchr+0xe4>
20093828:	58802426 	beq	r11,r2,200938bc <strchr+0x15c>
2009382c:	50c03fcc 	andi	r3,r10,255
20093830:	00000106 	br	20093838 <strchr+0xd8>
20093834:	18802126 	beq	r3,r2,200938bc <strchr+0x15c>
20093838:	21000044 	addi	r4,r4,1
2009383c:	20800003 	ldbu	r2,0(r4)
20093840:	103ffc1e 	bne	r2,zero,20093834 <__flash_rwdata_start+0xffff89c8>
20093844:	0005883a 	mov	r2,zero
20093848:	f800283a 	ret
2009384c:	10000526 	beq	r2,zero,20093864 <strchr+0x104>
20093850:	20800003 	ldbu	r2,0(r4)
20093854:	10001926 	beq	r2,zero,200938bc <strchr+0x15c>
20093858:	21000044 	addi	r4,r4,1
2009385c:	208000cc 	andi	r2,r4,3
20093860:	103ffb1e 	bne	r2,zero,20093850 <__flash_rwdata_start+0xffff89e4>
20093864:	20800017 	ldw	r2,0(r4)
20093868:	01bfbff4 	movhi	r6,65279
2009386c:	31bfbfc4 	addi	r6,r6,-257
20093870:	0086303a 	nor	r3,zero,r2
20093874:	01602074 	movhi	r5,32897
20093878:	1185883a 	add	r2,r2,r6
2009387c:	29602004 	addi	r5,r5,-32640
20093880:	10c4703a 	and	r2,r2,r3
20093884:	1144703a 	and	r2,r2,r5
20093888:	10000a1e 	bne	r2,zero,200938b4 <strchr+0x154>
2009388c:	21000104 	addi	r4,r4,4
20093890:	20800017 	ldw	r2,0(r4)
20093894:	1187883a 	add	r3,r2,r6
20093898:	0084303a 	nor	r2,zero,r2
2009389c:	1884703a 	and	r2,r3,r2
200938a0:	1144703a 	and	r2,r2,r5
200938a4:	103ff926 	beq	r2,zero,2009388c <__flash_rwdata_start+0xffff8a20>
200938a8:	20800003 	ldbu	r2,0(r4)
200938ac:	10000326 	beq	r2,zero,200938bc <strchr+0x15c>
200938b0:	21000044 	addi	r4,r4,1
200938b4:	20800003 	ldbu	r2,0(r4)
200938b8:	103ffd1e 	bne	r2,zero,200938b0 <__flash_rwdata_start+0xffff8a44>
200938bc:	2005883a 	mov	r2,r4
200938c0:	f800283a 	ret

200938c4 <__ssprint_r>:
200938c4:	30800217 	ldw	r2,8(r6)
200938c8:	defff604 	addi	sp,sp,-40
200938cc:	ddc00715 	stw	r23,28(sp)
200938d0:	dc800215 	stw	r18,8(sp)
200938d4:	dfc00915 	stw	ra,36(sp)
200938d8:	df000815 	stw	fp,32(sp)
200938dc:	dd800615 	stw	r22,24(sp)
200938e0:	dd400515 	stw	r21,20(sp)
200938e4:	dd000415 	stw	r20,16(sp)
200938e8:	dcc00315 	stw	r19,12(sp)
200938ec:	dc400115 	stw	r17,4(sp)
200938f0:	dc000015 	stw	r16,0(sp)
200938f4:	3025883a 	mov	r18,r6
200938f8:	35c00017 	ldw	r23,0(r6)
200938fc:	10005626 	beq	r2,zero,20093a58 <__ssprint_r+0x194>
20093900:	2027883a 	mov	r19,r4
20093904:	28800217 	ldw	r2,8(r5)
20093908:	29000017 	ldw	r4,0(r5)
2009390c:	2823883a 	mov	r17,r5
20093910:	0039883a 	mov	fp,zero
20093914:	0021883a 	mov	r16,zero
20093918:	80003926 	beq	r16,zero,20093a00 <__ssprint_r+0x13c>
2009391c:	102b883a 	mov	r21,r2
20093920:	102d883a 	mov	r22,r2
20093924:	80803a36 	bltu	r16,r2,20093a10 <__ssprint_r+0x14c>
20093928:	88c0030b 	ldhu	r3,12(r17)
2009392c:	1881200c 	andi	r2,r3,1152
20093930:	10002626 	beq	r2,zero,200939cc <__ssprint_r+0x108>
20093934:	88800517 	ldw	r2,20(r17)
20093938:	89400417 	ldw	r5,16(r17)
2009393c:	81c00044 	addi	r7,r16,1
20093940:	108d883a 	add	r6,r2,r2
20093944:	3085883a 	add	r2,r6,r2
20093948:	100cd7fa 	srli	r6,r2,31
2009394c:	216dc83a 	sub	r22,r4,r5
20093950:	3d89883a 	add	r4,r7,r22
20093954:	3085883a 	add	r2,r6,r2
20093958:	102bd07a 	srai	r21,r2,1
2009395c:	a80d883a 	mov	r6,r21
20093960:	a900022e 	bgeu	r21,r4,2009396c <__ssprint_r+0xa8>
20093964:	202b883a 	mov	r21,r4
20093968:	200d883a 	mov	r6,r4
2009396c:	18c1000c 	andi	r3,r3,1024
20093970:	9809883a 	mov	r4,r19
20093974:	18002926 	beq	r3,zero,20093a1c <__ssprint_r+0x158>
20093978:	300b883a 	mov	r5,r6
2009397c:	0089e500 	call	20089e50 <_malloc_r>
20093980:	1029883a 	mov	r20,r2
20093984:	10002b26 	beq	r2,zero,20093a34 <__ssprint_r+0x170>
20093988:	89400417 	ldw	r5,16(r17)
2009398c:	1009883a 	mov	r4,r2
20093990:	b00d883a 	mov	r6,r22
20093994:	008a6740 	call	2008a674 <memcpy>
20093998:	8880030b 	ldhu	r2,12(r17)
2009399c:	00fedfc4 	movi	r3,-1153
200939a0:	10c4703a 	and	r2,r2,r3
200939a4:	10802014 	ori	r2,r2,128
200939a8:	8880030d 	sth	r2,12(r17)
200939ac:	a589883a 	add	r4,r20,r22
200939b0:	adadc83a 	sub	r22,r21,r22
200939b4:	8d400515 	stw	r21,20(r17)
200939b8:	8d800215 	stw	r22,8(r17)
200939bc:	8d000415 	stw	r20,16(r17)
200939c0:	89000015 	stw	r4,0(r17)
200939c4:	802b883a 	mov	r21,r16
200939c8:	802d883a 	mov	r22,r16
200939cc:	e00b883a 	mov	r5,fp
200939d0:	b00d883a 	mov	r6,r22
200939d4:	0091de00 	call	20091de0 <memmove>
200939d8:	88800217 	ldw	r2,8(r17)
200939dc:	89000017 	ldw	r4,0(r17)
200939e0:	90c00217 	ldw	r3,8(r18)
200939e4:	1545c83a 	sub	r2,r2,r21
200939e8:	2589883a 	add	r4,r4,r22
200939ec:	88800215 	stw	r2,8(r17)
200939f0:	89000015 	stw	r4,0(r17)
200939f4:	1c21c83a 	sub	r16,r3,r16
200939f8:	94000215 	stw	r16,8(r18)
200939fc:	80001626 	beq	r16,zero,20093a58 <__ssprint_r+0x194>
20093a00:	bf000017 	ldw	fp,0(r23)
20093a04:	bc000117 	ldw	r16,4(r23)
20093a08:	bdc00204 	addi	r23,r23,8
20093a0c:	003fc206 	br	20093918 <__flash_rwdata_start+0xffff8aac>
20093a10:	802b883a 	mov	r21,r16
20093a14:	802d883a 	mov	r22,r16
20093a18:	003fec06 	br	200939cc <__flash_rwdata_start+0xffff8b60>
20093a1c:	00930480 	call	20093048 <_realloc_r>
20093a20:	1029883a 	mov	r20,r2
20093a24:	103fe11e 	bne	r2,zero,200939ac <__flash_rwdata_start+0xffff8b40>
20093a28:	89400417 	ldw	r5,16(r17)
20093a2c:	9809883a 	mov	r4,r19
20093a30:	00911280 	call	20091128 <_free_r>
20093a34:	88c0030b 	ldhu	r3,12(r17)
20093a38:	00800304 	movi	r2,12
20093a3c:	98800015 	stw	r2,0(r19)
20093a40:	18c01014 	ori	r3,r3,64
20093a44:	88c0030d 	sth	r3,12(r17)
20093a48:	00bfffc4 	movi	r2,-1
20093a4c:	90000215 	stw	zero,8(r18)
20093a50:	90000115 	stw	zero,4(r18)
20093a54:	00000206 	br	20093a60 <__ssprint_r+0x19c>
20093a58:	90000115 	stw	zero,4(r18)
20093a5c:	0005883a 	mov	r2,zero
20093a60:	dfc00917 	ldw	ra,36(sp)
20093a64:	df000817 	ldw	fp,32(sp)
20093a68:	ddc00717 	ldw	r23,28(sp)
20093a6c:	dd800617 	ldw	r22,24(sp)
20093a70:	dd400517 	ldw	r21,20(sp)
20093a74:	dd000417 	ldw	r20,16(sp)
20093a78:	dcc00317 	ldw	r19,12(sp)
20093a7c:	dc800217 	ldw	r18,8(sp)
20093a80:	dc400117 	ldw	r17,4(sp)
20093a84:	dc000017 	ldw	r16,0(sp)
20093a88:	dec00a04 	addi	sp,sp,40
20093a8c:	f800283a 	ret

20093a90 <___svfiprintf_internal_r>:
20093a90:	2880030b 	ldhu	r2,12(r5)
20093a94:	deffc904 	addi	sp,sp,-220
20093a98:	dd403215 	stw	r21,200(sp)
20093a9c:	dfc03615 	stw	ra,216(sp)
20093aa0:	df003515 	stw	fp,212(sp)
20093aa4:	ddc03415 	stw	r23,208(sp)
20093aa8:	dd803315 	stw	r22,204(sp)
20093aac:	dd003115 	stw	r20,196(sp)
20093ab0:	dcc03015 	stw	r19,192(sp)
20093ab4:	dc802f15 	stw	r18,188(sp)
20093ab8:	dc402e15 	stw	r17,184(sp)
20093abc:	dc002d15 	stw	r16,180(sp)
20093ac0:	d9402715 	stw	r5,156(sp)
20093ac4:	d9002915 	stw	r4,164(sp)
20093ac8:	1080200c 	andi	r2,r2,128
20093acc:	d9c02315 	stw	r7,140(sp)
20093ad0:	302b883a 	mov	r21,r6
20093ad4:	10000226 	beq	r2,zero,20093ae0 <___svfiprintf_internal_r+0x50>
20093ad8:	28800417 	ldw	r2,16(r5)
20093adc:	1003ce26 	beq	r2,zero,20094a18 <___svfiprintf_internal_r+0xf88>
20093ae0:	dac01a04 	addi	r11,sp,104
20093ae4:	da8019c4 	addi	r10,sp,103
20093ae8:	dc802917 	ldw	r18,164(sp)
20093aec:	dd002717 	ldw	r20,156(sp)
20093af0:	04c00034 	movhi	r19,0
20093af4:	dac01e15 	stw	r11,120(sp)
20093af8:	5a97c83a 	sub	r11,r11,r10
20093afc:	9cc24304 	addi	r19,r19,2316
20093b00:	da801f15 	stw	r10,124(sp)
20093b04:	dec01a15 	stw	sp,104(sp)
20093b08:	d8001c15 	stw	zero,112(sp)
20093b0c:	d8001b15 	stw	zero,108(sp)
20093b10:	d811883a 	mov	r8,sp
20093b14:	d8002a15 	stw	zero,168(sp)
20093b18:	d8002415 	stw	zero,144(sp)
20093b1c:	dac02b15 	stw	r11,172(sp)
20093b20:	a8800007 	ldb	r2,0(r21)
20093b24:	10026a26 	beq	r2,zero,200944d0 <___svfiprintf_internal_r+0xa40>
20093b28:	01000944 	movi	r4,37
20093b2c:	11026826 	beq	r2,r4,200944d0 <___svfiprintf_internal_r+0xa40>
20093b30:	a805883a 	mov	r2,r21
20093b34:	00000106 	br	20093b3c <___svfiprintf_internal_r+0xac>
20093b38:	19000326 	beq	r3,r4,20093b48 <___svfiprintf_internal_r+0xb8>
20093b3c:	10800044 	addi	r2,r2,1
20093b40:	10c00007 	ldb	r3,0(r2)
20093b44:	183ffc1e 	bne	r3,zero,20093b38 <__flash_rwdata_start+0xffff8ccc>
20093b48:	1561c83a 	sub	r16,r2,r21
20093b4c:	102d883a 	mov	r22,r2
20093b50:	80000e26 	beq	r16,zero,20093b8c <___svfiprintf_internal_r+0xfc>
20093b54:	d8c01c17 	ldw	r3,112(sp)
20093b58:	d8801b17 	ldw	r2,108(sp)
20093b5c:	45400015 	stw	r21,0(r8)
20093b60:	1c07883a 	add	r3,r3,r16
20093b64:	10800044 	addi	r2,r2,1
20093b68:	d8c01c15 	stw	r3,112(sp)
20093b6c:	44000115 	stw	r16,4(r8)
20093b70:	d8801b15 	stw	r2,108(sp)
20093b74:	00c001c4 	movi	r3,7
20093b78:	1882d816 	blt	r3,r2,200946dc <___svfiprintf_internal_r+0xc4c>
20093b7c:	42000204 	addi	r8,r8,8
20093b80:	da802417 	ldw	r10,144(sp)
20093b84:	5415883a 	add	r10,r10,r16
20093b88:	da802415 	stw	r10,144(sp)
20093b8c:	b0800007 	ldb	r2,0(r22)
20093b90:	10027526 	beq	r2,zero,20094568 <___svfiprintf_internal_r+0xad8>
20093b94:	b1000047 	ldb	r4,1(r22)
20093b98:	b5400044 	addi	r21,r22,1
20093b9c:	d8001d85 	stb	zero,118(sp)
20093ba0:	000d883a 	mov	r6,zero
20093ba4:	043fffc4 	movi	r16,-1
20093ba8:	d8002115 	stw	zero,132(sp)
20093bac:	0023883a 	mov	r17,zero
20093bb0:	00c01604 	movi	r3,88
20093bb4:	01400244 	movi	r5,9
20093bb8:	02400a84 	movi	r9,42
20093bbc:	01c01b04 	movi	r7,108
20093bc0:	ad400044 	addi	r21,r21,1
20093bc4:	20bff804 	addi	r2,r4,-32
20093bc8:	18819736 	bltu	r3,r2,20094228 <___svfiprintf_internal_r+0x798>
20093bcc:	100490ba 	slli	r2,r2,2
20093bd0:	02c80274 	movhi	r11,8201
20093bd4:	5acef904 	addi	r11,r11,15332
20093bd8:	12c5883a 	add	r2,r2,r11
20093bdc:	10800017 	ldw	r2,0(r2)
20093be0:	1000683a 	jmp	r2
20093be4:	20094120 	cmpeqi	zero,r4,9476
20093be8:	20094228 	cmpgeui	zero,r4,9480
20093bec:	20094228 	cmpgeui	zero,r4,9480
20093bf0:	20094114 	ori	zero,r4,9476
20093bf4:	20094228 	cmpgeui	zero,r4,9480
20093bf8:	20094228 	cmpgeui	zero,r4,9480
20093bfc:	20094228 	cmpgeui	zero,r4,9480
20093c00:	20094228 	cmpgeui	zero,r4,9480
20093c04:	20094228 	cmpgeui	zero,r4,9480
20093c08:	20094228 	cmpgeui	zero,r4,9480
20093c0c:	20093e40 	call	220093e4 <__flash_rwdata_start+0x1f6e578>
20093c10:	2009425c 	xori	zero,r4,9481
20093c14:	20094228 	cmpgeui	zero,r4,9480
20093c18:	20093e68 	cmpgeui	zero,r4,9465
20093c1c:	20094268 	cmpgeui	zero,r4,9481
20093c20:	20094228 	cmpgeui	zero,r4,9480
20093c24:	20094250 	cmplti	zero,r4,9481
20093c28:	200941f0 	cmpltui	zero,r4,9479
20093c2c:	200941f0 	cmpltui	zero,r4,9479
20093c30:	200941f0 	cmpltui	zero,r4,9479
20093c34:	200941f0 	cmpltui	zero,r4,9479
20093c38:	200941f0 	cmpltui	zero,r4,9479
20093c3c:	200941f0 	cmpltui	zero,r4,9479
20093c40:	200941f0 	cmpltui	zero,r4,9479
20093c44:	200941f0 	cmpltui	zero,r4,9479
20093c48:	200941f0 	cmpltui	zero,r4,9479
20093c4c:	20094228 	cmpgeui	zero,r4,9480
20093c50:	20094228 	cmpgeui	zero,r4,9480
20093c54:	20094228 	cmpgeui	zero,r4,9480
20093c58:	20094228 	cmpgeui	zero,r4,9480
20093c5c:	20094228 	cmpgeui	zero,r4,9480
20093c60:	20094228 	cmpgeui	zero,r4,9480
20093c64:	20094228 	cmpgeui	zero,r4,9480
20093c68:	20094228 	cmpgeui	zero,r4,9480
20093c6c:	20094228 	cmpgeui	zero,r4,9480
20093c70:	20094228 	cmpgeui	zero,r4,9480
20093c74:	20094188 	cmpgei	zero,r4,9478
20093c78:	20094228 	cmpgeui	zero,r4,9480
20093c7c:	20094228 	cmpgeui	zero,r4,9480
20093c80:	20094228 	cmpgeui	zero,r4,9480
20093c84:	20094228 	cmpgeui	zero,r4,9480
20093c88:	20094228 	cmpgeui	zero,r4,9480
20093c8c:	20094228 	cmpgeui	zero,r4,9480
20093c90:	20094228 	cmpgeui	zero,r4,9480
20093c94:	20094228 	cmpgeui	zero,r4,9480
20093c98:	20094228 	cmpgeui	zero,r4,9480
20093c9c:	20094228 	cmpgeui	zero,r4,9480
20093ca0:	20093e14 	ori	zero,r4,9464
20093ca4:	20094228 	cmpgeui	zero,r4,9480
20093ca8:	20094228 	cmpgeui	zero,r4,9480
20093cac:	20094228 	cmpgeui	zero,r4,9480
20093cb0:	20094228 	cmpgeui	zero,r4,9480
20093cb4:	20094228 	cmpgeui	zero,r4,9480
20093cb8:	20093d48 	cmpgei	zero,r4,9461
20093cbc:	20094228 	cmpgeui	zero,r4,9480
20093cc0:	20094228 	cmpgeui	zero,r4,9480
20093cc4:	20094074 	orhi	zero,r4,9473
20093cc8:	20094228 	cmpgeui	zero,r4,9480
20093ccc:	20094228 	cmpgeui	zero,r4,9480
20093cd0:	20094228 	cmpgeui	zero,r4,9480
20093cd4:	20094228 	cmpgeui	zero,r4,9480
20093cd8:	20094228 	cmpgeui	zero,r4,9480
20093cdc:	20094228 	cmpgeui	zero,r4,9480
20093ce0:	20094228 	cmpgeui	zero,r4,9480
20093ce4:	20094228 	cmpgeui	zero,r4,9480
20093ce8:	20094228 	cmpgeui	zero,r4,9480
20093cec:	20094228 	cmpgeui	zero,r4,9480
20093cf0:	20093f60 	cmpeqi	zero,r4,9469
20093cf4:	20093f20 	cmpeqi	zero,r4,9468
20093cf8:	20094228 	cmpgeui	zero,r4,9480
20093cfc:	20094228 	cmpgeui	zero,r4,9480
20093d00:	20094228 	cmpgeui	zero,r4,9480
20093d04:	200940d0 	cmplti	zero,r4,9475
20093d08:	20093f20 	cmpeqi	zero,r4,9468
20093d0c:	20094228 	cmpgeui	zero,r4,9480
20093d10:	20094228 	cmpgeui	zero,r4,9480
20093d14:	200940bc 	xorhi	zero,r4,9474
20093d18:	20094228 	cmpgeui	zero,r4,9480
20093d1c:	200940dc 	xori	zero,r4,9475
20093d20:	20093e18 	cmpnei	zero,r4,9464
20093d24:	20093edc 	xori	zero,r4,9467
20093d28:	20093ed0 	cmplti	zero,r4,9467
20093d2c:	20094228 	cmpgeui	zero,r4,9480
20093d30:	20093e74 	orhi	zero,r4,9465
20093d34:	20094228 	cmpgeui	zero,r4,9480
20093d38:	20093d4c 	andi	zero,r4,9461
20093d3c:	20094228 	cmpgeui	zero,r4,9480
20093d40:	20094228 	cmpgeui	zero,r4,9480
20093d44:	2009413c 	xorhi	zero,r4,9476
20093d48:	8c400414 	ori	r17,r17,16
20093d4c:	8880080c 	andi	r2,r17,32
20093d50:	10029626 	beq	r2,zero,200947ac <___svfiprintf_internal_r+0xd1c>
20093d54:	da802317 	ldw	r10,140(sp)
20093d58:	dac02317 	ldw	r11,140(sp)
20093d5c:	00800044 	movi	r2,1
20093d60:	52400017 	ldw	r9,0(r10)
20093d64:	52800117 	ldw	r10,4(r10)
20093d68:	5ac00204 	addi	r11,r11,8
20093d6c:	dac02315 	stw	r11,140(sp)
20093d70:	4a86b03a 	or	r3,r9,r10
20093d74:	d8001d85 	stb	zero,118(sp)
20093d78:	8039883a 	mov	fp,r16
20093d7c:	0017883a 	mov	r11,zero
20093d80:	80000216 	blt	r16,zero,20093d8c <___svfiprintf_internal_r+0x2fc>
20093d84:	013fdfc4 	movi	r4,-129
20093d88:	8922703a 	and	r17,r17,r4
20093d8c:	1801d21e 	bne	r3,zero,200944d8 <___svfiprintf_internal_r+0xa48>
20093d90:	80024626 	beq	r16,zero,200946ac <___svfiprintf_internal_r+0xc1c>
20093d94:	10803fcc 	andi	r2,r2,255
20093d98:	00c00044 	movi	r3,1
20093d9c:	10c2b426 	beq	r2,r3,20094870 <___svfiprintf_internal_r+0xde0>
20093da0:	00c00084 	movi	r3,2
20093da4:	10c25d26 	beq	r2,r3,2009471c <___svfiprintf_internal_r+0xc8c>
20093da8:	d8c01a04 	addi	r3,sp,104
20093dac:	4808d0fa 	srli	r4,r9,3
20093db0:	500a977a 	slli	r5,r10,29
20093db4:	5014d0fa 	srli	r10,r10,3
20093db8:	4a4001cc 	andi	r9,r9,7
20093dbc:	48800c04 	addi	r2,r9,48
20093dc0:	18ffffc4 	addi	r3,r3,-1
20093dc4:	2912b03a 	or	r9,r5,r4
20093dc8:	18800005 	stb	r2,0(r3)
20093dcc:	4a88b03a 	or	r4,r9,r10
20093dd0:	203ff61e 	bne	r4,zero,20093dac <__flash_rwdata_start+0xffff8f40>
20093dd4:	8900004c 	andi	r4,r17,1
20093dd8:	d8c02615 	stw	r3,152(sp)
20093ddc:	2002961e 	bne	r4,zero,20094838 <___svfiprintf_internal_r+0xda8>
20093de0:	da801e17 	ldw	r10,120(sp)
20093de4:	50f9c83a 	sub	fp,r10,r3
20093de8:	df002015 	stw	fp,128(sp)
20093dec:	e400010e 	bge	fp,r16,20093df4 <___svfiprintf_internal_r+0x364>
20093df0:	dc002015 	stw	r16,128(sp)
20093df4:	5ac03fcc 	andi	r11,r11,255
20093df8:	5ac0201c 	xori	r11,r11,128
20093dfc:	5affe004 	addi	r11,r11,-128
20093e00:	58006326 	beq	r11,zero,20093f90 <___svfiprintf_internal_r+0x500>
20093e04:	d8c02017 	ldw	r3,128(sp)
20093e08:	18c00044 	addi	r3,r3,1
20093e0c:	d8c02015 	stw	r3,128(sp)
20093e10:	00005f06 	br	20093f90 <___svfiprintf_internal_r+0x500>
20093e14:	8c400414 	ori	r17,r17,16
20093e18:	8880080c 	andi	r2,r17,32
20093e1c:	10027926 	beq	r2,zero,20094804 <___svfiprintf_internal_r+0xd74>
20093e20:	dac02317 	ldw	r11,140(sp)
20093e24:	0005883a 	mov	r2,zero
20093e28:	5a400017 	ldw	r9,0(r11)
20093e2c:	5a800117 	ldw	r10,4(r11)
20093e30:	5ac00204 	addi	r11,r11,8
20093e34:	dac02315 	stw	r11,140(sp)
20093e38:	4a86b03a 	or	r3,r9,r10
20093e3c:	003fcd06 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
20093e40:	da802317 	ldw	r10,140(sp)
20093e44:	dac02317 	ldw	r11,140(sp)
20093e48:	52800017 	ldw	r10,0(r10)
20093e4c:	58800104 	addi	r2,r11,4
20093e50:	da802115 	stw	r10,132(sp)
20093e54:	50028c0e 	bge	r10,zero,20094888 <___svfiprintf_internal_r+0xdf8>
20093e58:	da802117 	ldw	r10,132(sp)
20093e5c:	d8802315 	stw	r2,140(sp)
20093e60:	0295c83a 	sub	r10,zero,r10
20093e64:	da802115 	stw	r10,132(sp)
20093e68:	8c400114 	ori	r17,r17,4
20093e6c:	a9000007 	ldb	r4,0(r21)
20093e70:	003f5306 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20093e74:	da802317 	ldw	r10,140(sp)
20093e78:	dac02317 	ldw	r11,140(sp)
20093e7c:	d8001d85 	stb	zero,118(sp)
20093e80:	52800017 	ldw	r10,0(r10)
20093e84:	5dc00104 	addi	r23,r11,4
20093e88:	da802615 	stw	r10,152(sp)
20093e8c:	5002d626 	beq	r10,zero,200949e8 <___svfiprintf_internal_r+0xf58>
20093e90:	d9002617 	ldw	r4,152(sp)
20093e94:	8002cc16 	blt	r16,zero,200949c8 <___svfiprintf_internal_r+0xf38>
20093e98:	000b883a 	mov	r5,zero
20093e9c:	800d883a 	mov	r6,r16
20093ea0:	da002c15 	stw	r8,176(sp)
20093ea4:	0091cf80 	call	20091cf8 <memchr>
20093ea8:	da002c17 	ldw	r8,176(sp)
20093eac:	1002f026 	beq	r2,zero,20094a70 <___svfiprintf_internal_r+0xfe0>
20093eb0:	d8c02617 	ldw	r3,152(sp)
20093eb4:	10f9c83a 	sub	fp,r2,r3
20093eb8:	8700010e 	bge	r16,fp,20093ec0 <___svfiprintf_internal_r+0x430>
20093ebc:	8039883a 	mov	fp,r16
20093ec0:	dac01d83 	ldbu	r11,118(sp)
20093ec4:	ddc02315 	stw	r23,140(sp)
20093ec8:	0021883a 	mov	r16,zero
20093ecc:	003fc606 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
20093ed0:	8c400814 	ori	r17,r17,32
20093ed4:	a9000007 	ldb	r4,0(r21)
20093ed8:	003f3906 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20093edc:	da802317 	ldw	r10,140(sp)
20093ee0:	00800c04 	movi	r2,48
20093ee4:	dac02317 	ldw	r11,140(sp)
20093ee8:	52400017 	ldw	r9,0(r10)
20093eec:	d8801d05 	stb	r2,116(sp)
20093ef0:	00801e04 	movi	r2,120
20093ef4:	d8801d45 	stb	r2,117(sp)
20093ef8:	00800034 	movhi	r2,0
20093efc:	1081db04 	addi	r2,r2,1900
20093f00:	5ac00104 	addi	r11,r11,4
20093f04:	d8802a15 	stw	r2,168(sp)
20093f08:	0015883a 	mov	r10,zero
20093f0c:	8c400094 	ori	r17,r17,2
20093f10:	dac02315 	stw	r11,140(sp)
20093f14:	00800084 	movi	r2,2
20093f18:	4807883a 	mov	r3,r9
20093f1c:	003f9506 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
20093f20:	d9801d85 	stb	r6,118(sp)
20093f24:	8880080c 	andi	r2,r17,32
20093f28:	d8c02317 	ldw	r3,140(sp)
20093f2c:	10009b26 	beq	r2,zero,2009419c <___svfiprintf_internal_r+0x70c>
20093f30:	dac02317 	ldw	r11,140(sp)
20093f34:	18800117 	ldw	r2,4(r3)
20093f38:	1a400017 	ldw	r9,0(r3)
20093f3c:	5ac00204 	addi	r11,r11,8
20093f40:	dac02315 	stw	r11,140(sp)
20093f44:	1015883a 	mov	r10,r2
20093f48:	10009f16 	blt	r2,zero,200941c8 <___svfiprintf_internal_r+0x738>
20093f4c:	dac01d83 	ldbu	r11,118(sp)
20093f50:	8039883a 	mov	fp,r16
20093f54:	00800044 	movi	r2,1
20093f58:	4a86b03a 	or	r3,r9,r10
20093f5c:	003f8806 	br	20093d80 <__flash_rwdata_start+0xffff8f14>
20093f60:	dac02317 	ldw	r11,140(sp)
20093f64:	00c00044 	movi	r3,1
20093f68:	da801004 	addi	r10,sp,64
20093f6c:	58800017 	ldw	r2,0(r11)
20093f70:	5ac00104 	addi	r11,r11,4
20093f74:	d8c02015 	stw	r3,128(sp)
20093f78:	d8001d85 	stb	zero,118(sp)
20093f7c:	d8801005 	stb	r2,64(sp)
20093f80:	dac02315 	stw	r11,140(sp)
20093f84:	1839883a 	mov	fp,r3
20093f88:	da802615 	stw	r10,152(sp)
20093f8c:	0021883a 	mov	r16,zero
20093f90:	8a80008c 	andi	r10,r17,2
20093f94:	da802215 	stw	r10,136(sp)
20093f98:	50000326 	beq	r10,zero,20093fa8 <___svfiprintf_internal_r+0x518>
20093f9c:	dac02017 	ldw	r11,128(sp)
20093fa0:	5ac00084 	addi	r11,r11,2
20093fa4:	dac02015 	stw	r11,128(sp)
20093fa8:	88c0210c 	andi	r3,r17,132
20093fac:	d8c02515 	stw	r3,148(sp)
20093fb0:	1800bd1e 	bne	r3,zero,200942a8 <___svfiprintf_internal_r+0x818>
20093fb4:	da802117 	ldw	r10,132(sp)
20093fb8:	dac02017 	ldw	r11,128(sp)
20093fbc:	52edc83a 	sub	r22,r10,r11
20093fc0:	0580b90e 	bge	zero,r22,200942a8 <___svfiprintf_internal_r+0x818>
20093fc4:	02400404 	movi	r9,16
20093fc8:	d8c01c17 	ldw	r3,112(sp)
20093fcc:	d8801b17 	ldw	r2,108(sp)
20093fd0:	4d829b0e 	bge	r9,r22,20094a40 <___svfiprintf_internal_r+0xfb0>
20093fd4:	01400034 	movhi	r5,0
20093fd8:	29424704 	addi	r5,r5,2332
20093fdc:	d9402815 	stw	r5,160(sp)
20093fe0:	05c001c4 	movi	r23,7
20093fe4:	00000306 	br	20093ff4 <___svfiprintf_internal_r+0x564>
20093fe8:	b5bffc04 	addi	r22,r22,-16
20093fec:	42000204 	addi	r8,r8,8
20093ff0:	4d80150e 	bge	r9,r22,20094048 <___svfiprintf_internal_r+0x5b8>
20093ff4:	02800034 	movhi	r10,0
20093ff8:	18c00404 	addi	r3,r3,16
20093ffc:	10800044 	addi	r2,r2,1
20094000:	52824704 	addi	r10,r10,2332
20094004:	42800015 	stw	r10,0(r8)
20094008:	42400115 	stw	r9,4(r8)
2009400c:	d8c01c15 	stw	r3,112(sp)
20094010:	d8801b15 	stw	r2,108(sp)
20094014:	b8bff40e 	bge	r23,r2,20093fe8 <__flash_rwdata_start+0xffff917c>
20094018:	9009883a 	mov	r4,r18
2009401c:	a00b883a 	mov	r5,r20
20094020:	d9801a04 	addi	r6,sp,104
20094024:	da402c15 	stw	r9,176(sp)
20094028:	00938c40 	call	200938c4 <__ssprint_r>
2009402c:	da402c17 	ldw	r9,176(sp)
20094030:	1001531e 	bne	r2,zero,20094580 <___svfiprintf_internal_r+0xaf0>
20094034:	b5bffc04 	addi	r22,r22,-16
20094038:	d8c01c17 	ldw	r3,112(sp)
2009403c:	d8801b17 	ldw	r2,108(sp)
20094040:	d811883a 	mov	r8,sp
20094044:	4dbfeb16 	blt	r9,r22,20093ff4 <__flash_rwdata_start+0xffff9188>
20094048:	dac02817 	ldw	r11,160(sp)
2009404c:	b0c7883a 	add	r3,r22,r3
20094050:	10800044 	addi	r2,r2,1
20094054:	42c00015 	stw	r11,0(r8)
20094058:	45800115 	stw	r22,4(r8)
2009405c:	d8c01c15 	stw	r3,112(sp)
20094060:	d8801b15 	stw	r2,108(sp)
20094064:	010001c4 	movi	r4,7
20094068:	2081dd16 	blt	r4,r2,200947e0 <___svfiprintf_internal_r+0xd50>
2009406c:	42000204 	addi	r8,r8,8
20094070:	00008f06 	br	200942b0 <___svfiprintf_internal_r+0x820>
20094074:	00800034 	movhi	r2,0
20094078:	1081d604 	addi	r2,r2,1880
2009407c:	d8802a15 	stw	r2,168(sp)
20094080:	d9801d85 	stb	r6,118(sp)
20094084:	8880080c 	andi	r2,r17,32
20094088:	10003226 	beq	r2,zero,20094154 <___svfiprintf_internal_r+0x6c4>
2009408c:	da802317 	ldw	r10,140(sp)
20094090:	dac02317 	ldw	r11,140(sp)
20094094:	52400017 	ldw	r9,0(r10)
20094098:	52800117 	ldw	r10,4(r10)
2009409c:	5ac00204 	addi	r11,r11,8
200940a0:	dac02315 	stw	r11,140(sp)
200940a4:	8880004c 	andi	r2,r17,1
200940a8:	10003426 	beq	r2,zero,2009417c <___svfiprintf_internal_r+0x6ec>
200940ac:	4a86b03a 	or	r3,r9,r10
200940b0:	1802231e 	bne	r3,zero,20094940 <___svfiprintf_internal_r+0xeb0>
200940b4:	00800084 	movi	r2,2
200940b8:	003f2e06 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
200940bc:	a9000007 	ldb	r4,0(r21)
200940c0:	a805883a 	mov	r2,r21
200940c4:	21c22426 	beq	r4,r7,20094958 <___svfiprintf_internal_r+0xec8>
200940c8:	8c400414 	ori	r17,r17,16
200940cc:	003ebc06 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
200940d0:	8c401014 	ori	r17,r17,64
200940d4:	a9000007 	ldb	r4,0(r21)
200940d8:	003eb906 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
200940dc:	d9801d85 	stb	r6,118(sp)
200940e0:	8880080c 	andi	r2,r17,32
200940e4:	10020d1e 	bne	r2,zero,2009491c <___svfiprintf_internal_r+0xe8c>
200940e8:	8880040c 	andi	r2,r17,16
200940ec:	10021e1e 	bne	r2,zero,20094968 <___svfiprintf_internal_r+0xed8>
200940f0:	8c40100c 	andi	r17,r17,64
200940f4:	88021c26 	beq	r17,zero,20094968 <___svfiprintf_internal_r+0xed8>
200940f8:	dac02317 	ldw	r11,140(sp)
200940fc:	da802417 	ldw	r10,144(sp)
20094100:	58800017 	ldw	r2,0(r11)
20094104:	5ac00104 	addi	r11,r11,4
20094108:	dac02315 	stw	r11,140(sp)
2009410c:	1280000d 	sth	r10,0(r2)
20094110:	003e8306 	br	20093b20 <__flash_rwdata_start+0xffff8cb4>
20094114:	8c400054 	ori	r17,r17,1
20094118:	a9000007 	ldb	r4,0(r21)
2009411c:	003ea806 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20094120:	30803fcc 	andi	r2,r6,255
20094124:	1080201c 	xori	r2,r2,128
20094128:	10bfe004 	addi	r2,r2,-128
2009412c:	1001f91e 	bne	r2,zero,20094914 <___svfiprintf_internal_r+0xe84>
20094130:	01800804 	movi	r6,32
20094134:	a9000007 	ldb	r4,0(r21)
20094138:	003ea106 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
2009413c:	00800034 	movhi	r2,0
20094140:	1081db04 	addi	r2,r2,1900
20094144:	d8802a15 	stw	r2,168(sp)
20094148:	d9801d85 	stb	r6,118(sp)
2009414c:	8880080c 	andi	r2,r17,32
20094150:	103fce1e 	bne	r2,zero,2009408c <__flash_rwdata_start+0xffff9220>
20094154:	8880040c 	andi	r2,r17,16
20094158:	1001e526 	beq	r2,zero,200948f0 <___svfiprintf_internal_r+0xe60>
2009415c:	da802317 	ldw	r10,140(sp)
20094160:	dac02317 	ldw	r11,140(sp)
20094164:	52400017 	ldw	r9,0(r10)
20094168:	8880004c 	andi	r2,r17,1
2009416c:	5ac00104 	addi	r11,r11,4
20094170:	dac02315 	stw	r11,140(sp)
20094174:	0015883a 	mov	r10,zero
20094178:	103fcc1e 	bne	r2,zero,200940ac <__flash_rwdata_start+0xffff9240>
2009417c:	00800084 	movi	r2,2
20094180:	4a86b03a 	or	r3,r9,r10
20094184:	003efb06 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
20094188:	8c400414 	ori	r17,r17,16
2009418c:	d9801d85 	stb	r6,118(sp)
20094190:	8880080c 	andi	r2,r17,32
20094194:	d8c02317 	ldw	r3,140(sp)
20094198:	103f651e 	bne	r2,zero,20093f30 <__flash_rwdata_start+0xffff90c4>
2009419c:	8880040c 	andi	r2,r17,16
200941a0:	1001c61e 	bne	r2,zero,200948bc <___svfiprintf_internal_r+0xe2c>
200941a4:	8880100c 	andi	r2,r17,64
200941a8:	1001c426 	beq	r2,zero,200948bc <___svfiprintf_internal_r+0xe2c>
200941ac:	1a40000f 	ldh	r9,0(r3)
200941b0:	dac02317 	ldw	r11,140(sp)
200941b4:	4815d7fa 	srai	r10,r9,31
200941b8:	5ac00104 	addi	r11,r11,4
200941bc:	dac02315 	stw	r11,140(sp)
200941c0:	5005883a 	mov	r2,r10
200941c4:	103f610e 	bge	r2,zero,20093f4c <__flash_rwdata_start+0xffff90e0>
200941c8:	0253c83a 	sub	r9,zero,r9
200941cc:	4804c03a 	cmpne	r2,r9,zero
200941d0:	0295c83a 	sub	r10,zero,r10
200941d4:	5095c83a 	sub	r10,r10,r2
200941d8:	02c00b44 	movi	r11,45
200941dc:	dac01d85 	stb	r11,118(sp)
200941e0:	8039883a 	mov	fp,r16
200941e4:	00800044 	movi	r2,1
200941e8:	4a86b03a 	or	r3,r9,r10
200941ec:	003ee406 	br	20093d80 <__flash_rwdata_start+0xffff8f14>
200941f0:	a815883a 	mov	r10,r21
200941f4:	d8002115 	stw	zero,132(sp)
200941f8:	20bff404 	addi	r2,r4,-48
200941fc:	51000007 	ldb	r4,0(r10)
20094200:	da802117 	ldw	r10,132(sp)
20094204:	ad400044 	addi	r21,r21,1
20094208:	52c002a4 	muli	r11,r10,10
2009420c:	a815883a 	mov	r10,r21
20094210:	5885883a 	add	r2,r11,r2
20094214:	d8802115 	stw	r2,132(sp)
20094218:	20bff404 	addi	r2,r4,-48
2009421c:	28bff72e 	bgeu	r5,r2,200941fc <__flash_rwdata_start+0xffff9390>
20094220:	20bff804 	addi	r2,r4,-32
20094224:	18be692e 	bgeu	r3,r2,20093bcc <__flash_rwdata_start+0xffff8d60>
20094228:	d9801d85 	stb	r6,118(sp)
2009422c:	2000ce26 	beq	r4,zero,20094568 <___svfiprintf_internal_r+0xad8>
20094230:	02800044 	movi	r10,1
20094234:	dac01004 	addi	r11,sp,64
20094238:	da802015 	stw	r10,128(sp)
2009423c:	d9001005 	stb	r4,64(sp)
20094240:	d8001d85 	stb	zero,118(sp)
20094244:	5039883a 	mov	fp,r10
20094248:	dac02615 	stw	r11,152(sp)
2009424c:	003f4f06 	br	20093f8c <__flash_rwdata_start+0xffff9120>
20094250:	8c402014 	ori	r17,r17,128
20094254:	a9000007 	ldb	r4,0(r21)
20094258:	003e5906 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
2009425c:	01800ac4 	movi	r6,43
20094260:	a9000007 	ldb	r4,0(r21)
20094264:	003e5606 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20094268:	a9000007 	ldb	r4,0(r21)
2009426c:	aa800044 	addi	r10,r21,1
20094270:	22420626 	beq	r4,r9,20094a8c <___svfiprintf_internal_r+0xffc>
20094274:	20bff404 	addi	r2,r4,-48
20094278:	502b883a 	mov	r21,r10
2009427c:	0021883a 	mov	r16,zero
20094280:	28be5036 	bltu	r5,r2,20093bc4 <__flash_rwdata_start+0xffff8d58>
20094284:	a9000007 	ldb	r4,0(r21)
20094288:	840002a4 	muli	r16,r16,10
2009428c:	ad400044 	addi	r21,r21,1
20094290:	1421883a 	add	r16,r2,r16
20094294:	20bff404 	addi	r2,r4,-48
20094298:	28bffa2e 	bgeu	r5,r2,20094284 <__flash_rwdata_start+0xffff9418>
2009429c:	803e490e 	bge	r16,zero,20093bc4 <__flash_rwdata_start+0xffff8d58>
200942a0:	043fffc4 	movi	r16,-1
200942a4:	003e4706 	br	20093bc4 <__flash_rwdata_start+0xffff8d58>
200942a8:	d8c01c17 	ldw	r3,112(sp)
200942ac:	d8801b17 	ldw	r2,108(sp)
200942b0:	d9001d87 	ldb	r4,118(sp)
200942b4:	20000b26 	beq	r4,zero,200942e4 <___svfiprintf_internal_r+0x854>
200942b8:	d9001d84 	addi	r4,sp,118
200942bc:	18c00044 	addi	r3,r3,1
200942c0:	10800044 	addi	r2,r2,1
200942c4:	41000015 	stw	r4,0(r8)
200942c8:	01000044 	movi	r4,1
200942cc:	41000115 	stw	r4,4(r8)
200942d0:	d8c01c15 	stw	r3,112(sp)
200942d4:	d8801b15 	stw	r2,108(sp)
200942d8:	010001c4 	movi	r4,7
200942dc:	20811e16 	blt	r4,r2,20094758 <___svfiprintf_internal_r+0xcc8>
200942e0:	42000204 	addi	r8,r8,8
200942e4:	da802217 	ldw	r10,136(sp)
200942e8:	50000b26 	beq	r10,zero,20094318 <___svfiprintf_internal_r+0x888>
200942ec:	d9001d04 	addi	r4,sp,116
200942f0:	18c00084 	addi	r3,r3,2
200942f4:	10800044 	addi	r2,r2,1
200942f8:	41000015 	stw	r4,0(r8)
200942fc:	01000084 	movi	r4,2
20094300:	41000115 	stw	r4,4(r8)
20094304:	d8c01c15 	stw	r3,112(sp)
20094308:	d8801b15 	stw	r2,108(sp)
2009430c:	010001c4 	movi	r4,7
20094310:	20811a16 	blt	r4,r2,2009477c <___svfiprintf_internal_r+0xcec>
20094314:	42000204 	addi	r8,r8,8
20094318:	dac02517 	ldw	r11,148(sp)
2009431c:	01002004 	movi	r4,128
20094320:	5900a826 	beq	r11,r4,200945c4 <___svfiprintf_internal_r+0xb34>
20094324:	8721c83a 	sub	r16,r16,fp
20094328:	0400260e 	bge	zero,r16,200943c4 <___svfiprintf_internal_r+0x934>
2009432c:	01c00404 	movi	r7,16
20094330:	3c019d0e 	bge	r7,r16,200949a8 <___svfiprintf_internal_r+0xf18>
20094334:	01000034 	movhi	r4,0
20094338:	21024304 	addi	r4,r4,2316
2009433c:	d9002215 	stw	r4,136(sp)
20094340:	382f883a 	mov	r23,r7
20094344:	058001c4 	movi	r22,7
20094348:	00000306 	br	20094358 <___svfiprintf_internal_r+0x8c8>
2009434c:	843ffc04 	addi	r16,r16,-16
20094350:	42000204 	addi	r8,r8,8
20094354:	bc00110e 	bge	r23,r16,2009439c <___svfiprintf_internal_r+0x90c>
20094358:	18c00404 	addi	r3,r3,16
2009435c:	10800044 	addi	r2,r2,1
20094360:	44c00015 	stw	r19,0(r8)
20094364:	45c00115 	stw	r23,4(r8)
20094368:	d8c01c15 	stw	r3,112(sp)
2009436c:	d8801b15 	stw	r2,108(sp)
20094370:	b0bff60e 	bge	r22,r2,2009434c <__flash_rwdata_start+0xffff94e0>
20094374:	9009883a 	mov	r4,r18
20094378:	a00b883a 	mov	r5,r20
2009437c:	d9801a04 	addi	r6,sp,104
20094380:	00938c40 	call	200938c4 <__ssprint_r>
20094384:	10007e1e 	bne	r2,zero,20094580 <___svfiprintf_internal_r+0xaf0>
20094388:	843ffc04 	addi	r16,r16,-16
2009438c:	d8c01c17 	ldw	r3,112(sp)
20094390:	d8801b17 	ldw	r2,108(sp)
20094394:	d811883a 	mov	r8,sp
20094398:	bc3fef16 	blt	r23,r16,20094358 <__flash_rwdata_start+0xffff94ec>
2009439c:	da802217 	ldw	r10,136(sp)
200943a0:	1c07883a 	add	r3,r3,r16
200943a4:	10800044 	addi	r2,r2,1
200943a8:	42800015 	stw	r10,0(r8)
200943ac:	44000115 	stw	r16,4(r8)
200943b0:	d8c01c15 	stw	r3,112(sp)
200943b4:	d8801b15 	stw	r2,108(sp)
200943b8:	010001c4 	movi	r4,7
200943bc:	2080ce16 	blt	r4,r2,200946f8 <___svfiprintf_internal_r+0xc68>
200943c0:	42000204 	addi	r8,r8,8
200943c4:	dac02617 	ldw	r11,152(sp)
200943c8:	1f07883a 	add	r3,r3,fp
200943cc:	10800044 	addi	r2,r2,1
200943d0:	42c00015 	stw	r11,0(r8)
200943d4:	47000115 	stw	fp,4(r8)
200943d8:	d8c01c15 	stw	r3,112(sp)
200943dc:	d8801b15 	stw	r2,108(sp)
200943e0:	010001c4 	movi	r4,7
200943e4:	2080a316 	blt	r4,r2,20094674 <___svfiprintf_internal_r+0xbe4>
200943e8:	42000204 	addi	r8,r8,8
200943ec:	8c40010c 	andi	r17,r17,4
200943f0:	88002b26 	beq	r17,zero,200944a0 <___svfiprintf_internal_r+0xa10>
200943f4:	da802117 	ldw	r10,132(sp)
200943f8:	dac02017 	ldw	r11,128(sp)
200943fc:	52e1c83a 	sub	r16,r10,r11
20094400:	0400270e 	bge	zero,r16,200944a0 <___svfiprintf_internal_r+0xa10>
20094404:	04400404 	movi	r17,16
20094408:	d8801b17 	ldw	r2,108(sp)
2009440c:	8c01900e 	bge	r17,r16,20094a50 <___svfiprintf_internal_r+0xfc0>
20094410:	01400034 	movhi	r5,0
20094414:	29424704 	addi	r5,r5,2332
20094418:	d9402815 	stw	r5,160(sp)
2009441c:	070001c4 	movi	fp,7
20094420:	00000306 	br	20094430 <___svfiprintf_internal_r+0x9a0>
20094424:	843ffc04 	addi	r16,r16,-16
20094428:	42000204 	addi	r8,r8,8
2009442c:	8c00130e 	bge	r17,r16,2009447c <___svfiprintf_internal_r+0x9ec>
20094430:	02800034 	movhi	r10,0
20094434:	18c00404 	addi	r3,r3,16
20094438:	10800044 	addi	r2,r2,1
2009443c:	52824704 	addi	r10,r10,2332
20094440:	42800015 	stw	r10,0(r8)
20094444:	44400115 	stw	r17,4(r8)
20094448:	d8c01c15 	stw	r3,112(sp)
2009444c:	d8801b15 	stw	r2,108(sp)
20094450:	e0bff40e 	bge	fp,r2,20094424 <__flash_rwdata_start+0xffff95b8>
20094454:	9009883a 	mov	r4,r18
20094458:	a00b883a 	mov	r5,r20
2009445c:	d9801a04 	addi	r6,sp,104
20094460:	00938c40 	call	200938c4 <__ssprint_r>
20094464:	1000461e 	bne	r2,zero,20094580 <___svfiprintf_internal_r+0xaf0>
20094468:	843ffc04 	addi	r16,r16,-16
2009446c:	d8c01c17 	ldw	r3,112(sp)
20094470:	d8801b17 	ldw	r2,108(sp)
20094474:	d811883a 	mov	r8,sp
20094478:	8c3fed16 	blt	r17,r16,20094430 <__flash_rwdata_start+0xffff95c4>
2009447c:	dac02817 	ldw	r11,160(sp)
20094480:	1c07883a 	add	r3,r3,r16
20094484:	10800044 	addi	r2,r2,1
20094488:	42c00015 	stw	r11,0(r8)
2009448c:	44000115 	stw	r16,4(r8)
20094490:	d8c01c15 	stw	r3,112(sp)
20094494:	d8801b15 	stw	r2,108(sp)
20094498:	010001c4 	movi	r4,7
2009449c:	2080fd16 	blt	r4,r2,20094894 <___svfiprintf_internal_r+0xe04>
200944a0:	dd802017 	ldw	r22,128(sp)
200944a4:	da802117 	ldw	r10,132(sp)
200944a8:	b280010e 	bge	r22,r10,200944b0 <___svfiprintf_internal_r+0xa20>
200944ac:	502d883a 	mov	r22,r10
200944b0:	dac02417 	ldw	r11,144(sp)
200944b4:	5d97883a 	add	r11,r11,r22
200944b8:	dac02415 	stw	r11,144(sp)
200944bc:	1800751e 	bne	r3,zero,20094694 <___svfiprintf_internal_r+0xc04>
200944c0:	a8800007 	ldb	r2,0(r21)
200944c4:	d8001b15 	stw	zero,108(sp)
200944c8:	d811883a 	mov	r8,sp
200944cc:	103d961e 	bne	r2,zero,20093b28 <__flash_rwdata_start+0xffff8cbc>
200944d0:	a82d883a 	mov	r22,r21
200944d4:	003dad06 	br	20093b8c <__flash_rwdata_start+0xffff8d20>
200944d8:	10803fcc 	andi	r2,r2,255
200944dc:	00c00044 	movi	r3,1
200944e0:	10fe2f1e 	bne	r2,r3,20093da0 <__flash_rwdata_start+0xffff8f34>
200944e4:	5000e026 	beq	r10,zero,20094868 <___svfiprintf_internal_r+0xdd8>
200944e8:	dc002015 	stw	r16,128(sp)
200944ec:	dc402215 	stw	r17,136(sp)
200944f0:	dd801a04 	addi	r22,sp,104
200944f4:	402f883a 	mov	r23,r8
200944f8:	5839883a 	mov	fp,r11
200944fc:	4821883a 	mov	r16,r9
20094500:	5023883a 	mov	r17,r10
20094504:	8009883a 	mov	r4,r16
20094508:	880b883a 	mov	r5,r17
2009450c:	01800284 	movi	r6,10
20094510:	000f883a 	mov	r7,zero
20094514:	0096e440 	call	20096e44 <__umoddi3>
20094518:	10800c04 	addi	r2,r2,48
2009451c:	b5bfffc4 	addi	r22,r22,-1
20094520:	8009883a 	mov	r4,r16
20094524:	880b883a 	mov	r5,r17
20094528:	01800284 	movi	r6,10
2009452c:	000f883a 	mov	r7,zero
20094530:	b0800005 	stb	r2,0(r22)
20094534:	00968840 	call	20096884 <__udivdi3>
20094538:	1021883a 	mov	r16,r2
2009453c:	10c4b03a 	or	r2,r2,r3
20094540:	1823883a 	mov	r17,r3
20094544:	103fef1e 	bne	r2,zero,20094504 <__flash_rwdata_start+0xffff9698>
20094548:	da801e17 	ldw	r10,120(sp)
2009454c:	e017883a 	mov	r11,fp
20094550:	dc002017 	ldw	r16,128(sp)
20094554:	dc402217 	ldw	r17,136(sp)
20094558:	b811883a 	mov	r8,r23
2009455c:	dd802615 	stw	r22,152(sp)
20094560:	55b9c83a 	sub	fp,r10,r22
20094564:	003e2006 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
20094568:	d8801c17 	ldw	r2,112(sp)
2009456c:	10000426 	beq	r2,zero,20094580 <___svfiprintf_internal_r+0xaf0>
20094570:	d9002917 	ldw	r4,164(sp)
20094574:	d9402717 	ldw	r5,156(sp)
20094578:	d9801a04 	addi	r6,sp,104
2009457c:	00938c40 	call	200938c4 <__ssprint_r>
20094580:	da802717 	ldw	r10,156(sp)
20094584:	5080030b 	ldhu	r2,12(r10)
20094588:	1080100c 	andi	r2,r2,64
2009458c:	1000511e 	bne	r2,zero,200946d4 <___svfiprintf_internal_r+0xc44>
20094590:	d8802417 	ldw	r2,144(sp)
20094594:	dfc03617 	ldw	ra,216(sp)
20094598:	df003517 	ldw	fp,212(sp)
2009459c:	ddc03417 	ldw	r23,208(sp)
200945a0:	dd803317 	ldw	r22,204(sp)
200945a4:	dd403217 	ldw	r21,200(sp)
200945a8:	dd003117 	ldw	r20,196(sp)
200945ac:	dcc03017 	ldw	r19,192(sp)
200945b0:	dc802f17 	ldw	r18,188(sp)
200945b4:	dc402e17 	ldw	r17,184(sp)
200945b8:	dc002d17 	ldw	r16,180(sp)
200945bc:	dec03704 	addi	sp,sp,220
200945c0:	f800283a 	ret
200945c4:	da802117 	ldw	r10,132(sp)
200945c8:	dac02017 	ldw	r11,128(sp)
200945cc:	52edc83a 	sub	r22,r10,r11
200945d0:	05bf540e 	bge	zero,r22,20094324 <__flash_rwdata_start+0xffff94b8>
200945d4:	02400404 	movi	r9,16
200945d8:	4d81210e 	bge	r9,r22,20094a60 <___svfiprintf_internal_r+0xfd0>
200945dc:	01400034 	movhi	r5,0
200945e0:	29424304 	addi	r5,r5,2316
200945e4:	d9402215 	stw	r5,136(sp)
200945e8:	05c001c4 	movi	r23,7
200945ec:	00000306 	br	200945fc <___svfiprintf_internal_r+0xb6c>
200945f0:	b5bffc04 	addi	r22,r22,-16
200945f4:	42000204 	addi	r8,r8,8
200945f8:	4d80130e 	bge	r9,r22,20094648 <___svfiprintf_internal_r+0xbb8>
200945fc:	18c00404 	addi	r3,r3,16
20094600:	10800044 	addi	r2,r2,1
20094604:	44c00015 	stw	r19,0(r8)
20094608:	42400115 	stw	r9,4(r8)
2009460c:	d8c01c15 	stw	r3,112(sp)
20094610:	d8801b15 	stw	r2,108(sp)
20094614:	b8bff60e 	bge	r23,r2,200945f0 <__flash_rwdata_start+0xffff9784>
20094618:	9009883a 	mov	r4,r18
2009461c:	a00b883a 	mov	r5,r20
20094620:	d9801a04 	addi	r6,sp,104
20094624:	da402c15 	stw	r9,176(sp)
20094628:	00938c40 	call	200938c4 <__ssprint_r>
2009462c:	da402c17 	ldw	r9,176(sp)
20094630:	103fd31e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
20094634:	b5bffc04 	addi	r22,r22,-16
20094638:	d8c01c17 	ldw	r3,112(sp)
2009463c:	d8801b17 	ldw	r2,108(sp)
20094640:	d811883a 	mov	r8,sp
20094644:	4dbfed16 	blt	r9,r22,200945fc <__flash_rwdata_start+0xffff9790>
20094648:	da802217 	ldw	r10,136(sp)
2009464c:	1d87883a 	add	r3,r3,r22
20094650:	10800044 	addi	r2,r2,1
20094654:	42800015 	stw	r10,0(r8)
20094658:	45800115 	stw	r22,4(r8)
2009465c:	d8c01c15 	stw	r3,112(sp)
20094660:	d8801b15 	stw	r2,108(sp)
20094664:	010001c4 	movi	r4,7
20094668:	2080c616 	blt	r4,r2,20094984 <___svfiprintf_internal_r+0xef4>
2009466c:	42000204 	addi	r8,r8,8
20094670:	003f2c06 	br	20094324 <__flash_rwdata_start+0xffff94b8>
20094674:	9009883a 	mov	r4,r18
20094678:	a00b883a 	mov	r5,r20
2009467c:	d9801a04 	addi	r6,sp,104
20094680:	00938c40 	call	200938c4 <__ssprint_r>
20094684:	103fbe1e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
20094688:	d8c01c17 	ldw	r3,112(sp)
2009468c:	d811883a 	mov	r8,sp
20094690:	003f5606 	br	200943ec <__flash_rwdata_start+0xffff9580>
20094694:	9009883a 	mov	r4,r18
20094698:	a00b883a 	mov	r5,r20
2009469c:	d9801a04 	addi	r6,sp,104
200946a0:	00938c40 	call	200938c4 <__ssprint_r>
200946a4:	103f8626 	beq	r2,zero,200944c0 <__flash_rwdata_start+0xffff9654>
200946a8:	003fb506 	br	20094580 <__flash_rwdata_start+0xffff9714>
200946ac:	10803fcc 	andi	r2,r2,255
200946b0:	10003b1e 	bne	r2,zero,200947a0 <___svfiprintf_internal_r+0xd10>
200946b4:	8880004c 	andi	r2,r17,1
200946b8:	10007d26 	beq	r2,zero,200948b0 <___svfiprintf_internal_r+0xe20>
200946bc:	00800c04 	movi	r2,48
200946c0:	d8c019c4 	addi	r3,sp,103
200946c4:	d88019c5 	stb	r2,103(sp)
200946c8:	df002b17 	ldw	fp,172(sp)
200946cc:	d8c02615 	stw	r3,152(sp)
200946d0:	003dc506 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
200946d4:	00bfffc4 	movi	r2,-1
200946d8:	003fae06 	br	20094594 <__flash_rwdata_start+0xffff9728>
200946dc:	9009883a 	mov	r4,r18
200946e0:	a00b883a 	mov	r5,r20
200946e4:	d9801a04 	addi	r6,sp,104
200946e8:	00938c40 	call	200938c4 <__ssprint_r>
200946ec:	103fa41e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
200946f0:	d811883a 	mov	r8,sp
200946f4:	003d2206 	br	20093b80 <__flash_rwdata_start+0xffff8d14>
200946f8:	9009883a 	mov	r4,r18
200946fc:	a00b883a 	mov	r5,r20
20094700:	d9801a04 	addi	r6,sp,104
20094704:	00938c40 	call	200938c4 <__ssprint_r>
20094708:	103f9d1e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
2009470c:	d8c01c17 	ldw	r3,112(sp)
20094710:	d8801b17 	ldw	r2,108(sp)
20094714:	d811883a 	mov	r8,sp
20094718:	003f2a06 	br	200943c4 <__flash_rwdata_start+0xffff9558>
2009471c:	d9402a17 	ldw	r5,168(sp)
20094720:	d8c01a04 	addi	r3,sp,104
20094724:	488003cc 	andi	r2,r9,15
20094728:	5008973a 	slli	r4,r10,28
2009472c:	2885883a 	add	r2,r5,r2
20094730:	4812d13a 	srli	r9,r9,4
20094734:	10800003 	ldbu	r2,0(r2)
20094738:	5014d13a 	srli	r10,r10,4
2009473c:	18ffffc4 	addi	r3,r3,-1
20094740:	2252b03a 	or	r9,r4,r9
20094744:	18800005 	stb	r2,0(r3)
20094748:	4a84b03a 	or	r2,r9,r10
2009474c:	103ff51e 	bne	r2,zero,20094724 <__flash_rwdata_start+0xffff98b8>
20094750:	d8c02615 	stw	r3,152(sp)
20094754:	003da206 	br	20093de0 <__flash_rwdata_start+0xffff8f74>
20094758:	9009883a 	mov	r4,r18
2009475c:	a00b883a 	mov	r5,r20
20094760:	d9801a04 	addi	r6,sp,104
20094764:	00938c40 	call	200938c4 <__ssprint_r>
20094768:	103f851e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
2009476c:	d8c01c17 	ldw	r3,112(sp)
20094770:	d8801b17 	ldw	r2,108(sp)
20094774:	d811883a 	mov	r8,sp
20094778:	003eda06 	br	200942e4 <__flash_rwdata_start+0xffff9478>
2009477c:	9009883a 	mov	r4,r18
20094780:	a00b883a 	mov	r5,r20
20094784:	d9801a04 	addi	r6,sp,104
20094788:	00938c40 	call	200938c4 <__ssprint_r>
2009478c:	103f7c1e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
20094790:	d8c01c17 	ldw	r3,112(sp)
20094794:	d8801b17 	ldw	r2,108(sp)
20094798:	d811883a 	mov	r8,sp
2009479c:	003ede06 	br	20094318 <__flash_rwdata_start+0xffff94ac>
200947a0:	da801a04 	addi	r10,sp,104
200947a4:	da802615 	stw	r10,152(sp)
200947a8:	003d8f06 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
200947ac:	8880040c 	andi	r2,r17,16
200947b0:	10004c1e 	bne	r2,zero,200948e4 <___svfiprintf_internal_r+0xe54>
200947b4:	8880100c 	andi	r2,r17,64
200947b8:	da802317 	ldw	r10,140(sp)
200947bc:	10004a26 	beq	r2,zero,200948e8 <___svfiprintf_internal_r+0xe58>
200947c0:	5240000b 	ldhu	r9,0(r10)
200947c4:	dac02317 	ldw	r11,140(sp)
200947c8:	0015883a 	mov	r10,zero
200947cc:	00800044 	movi	r2,1
200947d0:	5ac00104 	addi	r11,r11,4
200947d4:	dac02315 	stw	r11,140(sp)
200947d8:	4807883a 	mov	r3,r9
200947dc:	003d6506 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
200947e0:	9009883a 	mov	r4,r18
200947e4:	a00b883a 	mov	r5,r20
200947e8:	d9801a04 	addi	r6,sp,104
200947ec:	00938c40 	call	200938c4 <__ssprint_r>
200947f0:	103f631e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
200947f4:	d8c01c17 	ldw	r3,112(sp)
200947f8:	d8801b17 	ldw	r2,108(sp)
200947fc:	d811883a 	mov	r8,sp
20094800:	003eab06 	br	200942b0 <__flash_rwdata_start+0xffff9444>
20094804:	8880040c 	andi	r2,r17,16
20094808:	1000331e 	bne	r2,zero,200948d8 <___svfiprintf_internal_r+0xe48>
2009480c:	8880100c 	andi	r2,r17,64
20094810:	da802317 	ldw	r10,140(sp)
20094814:	10003126 	beq	r2,zero,200948dc <___svfiprintf_internal_r+0xe4c>
20094818:	5240000b 	ldhu	r9,0(r10)
2009481c:	dac02317 	ldw	r11,140(sp)
20094820:	0015883a 	mov	r10,zero
20094824:	0005883a 	mov	r2,zero
20094828:	5ac00104 	addi	r11,r11,4
2009482c:	dac02315 	stw	r11,140(sp)
20094830:	4807883a 	mov	r3,r9
20094834:	003d4f06 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
20094838:	10803fcc 	andi	r2,r2,255
2009483c:	1080201c 	xori	r2,r2,128
20094840:	10bfe004 	addi	r2,r2,-128
20094844:	01000c04 	movi	r4,48
20094848:	11005b26 	beq	r2,r4,200949b8 <___svfiprintf_internal_r+0xf28>
2009484c:	da802617 	ldw	r10,152(sp)
20094850:	d8801e17 	ldw	r2,120(sp)
20094854:	193fffc5 	stb	r4,-1(r3)
20094858:	52bfffc4 	addi	r10,r10,-1
2009485c:	da802615 	stw	r10,152(sp)
20094860:	12b9c83a 	sub	fp,r2,r10
20094864:	003d6006 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
20094868:	00800244 	movi	r2,9
2009486c:	127f1e36 	bltu	r2,r9,200944e8 <__flash_rwdata_start+0xffff967c>
20094870:	4a400c04 	addi	r9,r9,48
20094874:	d8c019c4 	addi	r3,sp,103
20094878:	da4019c5 	stb	r9,103(sp)
2009487c:	df002b17 	ldw	fp,172(sp)
20094880:	d8c02615 	stw	r3,152(sp)
20094884:	003d5806 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
20094888:	d8802315 	stw	r2,140(sp)
2009488c:	a9000007 	ldb	r4,0(r21)
20094890:	003ccb06 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20094894:	9009883a 	mov	r4,r18
20094898:	a00b883a 	mov	r5,r20
2009489c:	d9801a04 	addi	r6,sp,104
200948a0:	00938c40 	call	200938c4 <__ssprint_r>
200948a4:	103f361e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
200948a8:	d8c01c17 	ldw	r3,112(sp)
200948ac:	003efc06 	br	200944a0 <__flash_rwdata_start+0xffff9634>
200948b0:	d8c01a04 	addi	r3,sp,104
200948b4:	d8c02615 	stw	r3,152(sp)
200948b8:	003d4b06 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
200948bc:	da802317 	ldw	r10,140(sp)
200948c0:	1a400017 	ldw	r9,0(r3)
200948c4:	52800104 	addi	r10,r10,4
200948c8:	da802315 	stw	r10,140(sp)
200948cc:	4815d7fa 	srai	r10,r9,31
200948d0:	5005883a 	mov	r2,r10
200948d4:	003d9c06 	br	20093f48 <__flash_rwdata_start+0xffff90dc>
200948d8:	da802317 	ldw	r10,140(sp)
200948dc:	52400017 	ldw	r9,0(r10)
200948e0:	003fce06 	br	2009481c <__flash_rwdata_start+0xffff99b0>
200948e4:	da802317 	ldw	r10,140(sp)
200948e8:	52400017 	ldw	r9,0(r10)
200948ec:	003fb506 	br	200947c4 <__flash_rwdata_start+0xffff9958>
200948f0:	8880100c 	andi	r2,r17,64
200948f4:	da802317 	ldw	r10,140(sp)
200948f8:	103e1926 	beq	r2,zero,20094160 <__flash_rwdata_start+0xffff92f4>
200948fc:	dac02317 	ldw	r11,140(sp)
20094900:	5240000b 	ldhu	r9,0(r10)
20094904:	0015883a 	mov	r10,zero
20094908:	5ac00104 	addi	r11,r11,4
2009490c:	dac02315 	stw	r11,140(sp)
20094910:	003de406 	br	200940a4 <__flash_rwdata_start+0xffff9238>
20094914:	a9000007 	ldb	r4,0(r21)
20094918:	003ca906 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
2009491c:	dac02317 	ldw	r11,140(sp)
20094920:	da802417 	ldw	r10,144(sp)
20094924:	58800017 	ldw	r2,0(r11)
20094928:	5007d7fa 	srai	r3,r10,31
2009492c:	5ac00104 	addi	r11,r11,4
20094930:	dac02315 	stw	r11,140(sp)
20094934:	12800015 	stw	r10,0(r2)
20094938:	10c00115 	stw	r3,4(r2)
2009493c:	003c7806 	br	20093b20 <__flash_rwdata_start+0xffff8cb4>
20094940:	00800c04 	movi	r2,48
20094944:	d8801d05 	stb	r2,116(sp)
20094948:	d9001d45 	stb	r4,117(sp)
2009494c:	8c400094 	ori	r17,r17,2
20094950:	00800084 	movi	r2,2
20094954:	003d0706 	br	20093d74 <__flash_rwdata_start+0xffff8f08>
20094958:	ad400044 	addi	r21,r21,1
2009495c:	8c400814 	ori	r17,r17,32
20094960:	11000047 	ldb	r4,1(r2)
20094964:	003c9606 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20094968:	dac02317 	ldw	r11,140(sp)
2009496c:	da802417 	ldw	r10,144(sp)
20094970:	58800017 	ldw	r2,0(r11)
20094974:	5ac00104 	addi	r11,r11,4
20094978:	dac02315 	stw	r11,140(sp)
2009497c:	12800015 	stw	r10,0(r2)
20094980:	003c6706 	br	20093b20 <__flash_rwdata_start+0xffff8cb4>
20094984:	9009883a 	mov	r4,r18
20094988:	a00b883a 	mov	r5,r20
2009498c:	d9801a04 	addi	r6,sp,104
20094990:	00938c40 	call	200938c4 <__ssprint_r>
20094994:	103efa1e 	bne	r2,zero,20094580 <__flash_rwdata_start+0xffff9714>
20094998:	d8c01c17 	ldw	r3,112(sp)
2009499c:	d8801b17 	ldw	r2,108(sp)
200949a0:	d811883a 	mov	r8,sp
200949a4:	003e5f06 	br	20094324 <__flash_rwdata_start+0xffff94b8>
200949a8:	02c00034 	movhi	r11,0
200949ac:	5ac24304 	addi	r11,r11,2316
200949b0:	dac02215 	stw	r11,136(sp)
200949b4:	003e7906 	br	2009439c <__flash_rwdata_start+0xffff9530>
200949b8:	da801e17 	ldw	r10,120(sp)
200949bc:	d8c02617 	ldw	r3,152(sp)
200949c0:	50f9c83a 	sub	fp,r10,r3
200949c4:	003d0806 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
200949c8:	da002c15 	stw	r8,176(sp)
200949cc:	008abd00 	call	2008abd0 <strlen>
200949d0:	1039883a 	mov	fp,r2
200949d4:	dac01d83 	ldbu	r11,118(sp)
200949d8:	ddc02315 	stw	r23,140(sp)
200949dc:	0021883a 	mov	r16,zero
200949e0:	da002c17 	ldw	r8,176(sp)
200949e4:	003d0006 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
200949e8:	00800184 	movi	r2,6
200949ec:	1400012e 	bgeu	r2,r16,200949f4 <___svfiprintf_internal_r+0xf64>
200949f0:	1021883a 	mov	r16,r2
200949f4:	8039883a 	mov	fp,r16
200949f8:	802d883a 	mov	r22,r16
200949fc:	80002116 	blt	r16,zero,20094a84 <___svfiprintf_internal_r+0xff4>
20094a00:	00800034 	movhi	r2,0
20094a04:	1081e004 	addi	r2,r2,1920
20094a08:	dd802015 	stw	r22,128(sp)
20094a0c:	ddc02315 	stw	r23,140(sp)
20094a10:	d8802615 	stw	r2,152(sp)
20094a14:	003d5d06 	br	20093f8c <__flash_rwdata_start+0xffff9120>
20094a18:	04001004 	movi	r16,64
20094a1c:	800b883a 	mov	r5,r16
20094a20:	0089e500 	call	20089e50 <_malloc_r>
20094a24:	da802717 	ldw	r10,156(sp)
20094a28:	50800015 	stw	r2,0(r10)
20094a2c:	50800415 	stw	r2,16(r10)
20094a30:	10002026 	beq	r2,zero,20094ab4 <___svfiprintf_internal_r+0x1024>
20094a34:	da802717 	ldw	r10,156(sp)
20094a38:	54000515 	stw	r16,20(r10)
20094a3c:	003c2806 	br	20093ae0 <__flash_rwdata_start+0xffff8c74>
20094a40:	01000034 	movhi	r4,0
20094a44:	21024704 	addi	r4,r4,2332
20094a48:	d9002815 	stw	r4,160(sp)
20094a4c:	003d7e06 	br	20094048 <__flash_rwdata_start+0xffff91dc>
20094a50:	01000034 	movhi	r4,0
20094a54:	21024704 	addi	r4,r4,2332
20094a58:	d9002815 	stw	r4,160(sp)
20094a5c:	003e8706 	br	2009447c <__flash_rwdata_start+0xffff9610>
20094a60:	01000034 	movhi	r4,0
20094a64:	21024304 	addi	r4,r4,2316
20094a68:	d9002215 	stw	r4,136(sp)
20094a6c:	003ef606 	br	20094648 <__flash_rwdata_start+0xffff97dc>
20094a70:	8039883a 	mov	fp,r16
20094a74:	dac01d83 	ldbu	r11,118(sp)
20094a78:	ddc02315 	stw	r23,140(sp)
20094a7c:	0021883a 	mov	r16,zero
20094a80:	003cd906 	br	20093de8 <__flash_rwdata_start+0xffff8f7c>
20094a84:	002d883a 	mov	r22,zero
20094a88:	003fdd06 	br	20094a00 <__flash_rwdata_start+0xffff9b94>
20094a8c:	dac02317 	ldw	r11,140(sp)
20094a90:	a805883a 	mov	r2,r21
20094a94:	502b883a 	mov	r21,r10
20094a98:	5c000017 	ldw	r16,0(r11)
20094a9c:	59000104 	addi	r4,r11,4
20094aa0:	d9002315 	stw	r4,140(sp)
20094aa4:	803fae0e 	bge	r16,zero,20094960 <__flash_rwdata_start+0xffff9af4>
20094aa8:	043fffc4 	movi	r16,-1
20094aac:	11000047 	ldb	r4,1(r2)
20094ab0:	003c4306 	br	20093bc0 <__flash_rwdata_start+0xffff8d54>
20094ab4:	dac02917 	ldw	r11,164(sp)
20094ab8:	00800304 	movi	r2,12
20094abc:	58800015 	stw	r2,0(r11)
20094ac0:	00bfffc4 	movi	r2,-1
20094ac4:	003eb306 	br	20094594 <__flash_rwdata_start+0xffff9728>

20094ac8 <__sprint_r.part.0>:
20094ac8:	28801917 	ldw	r2,100(r5)
20094acc:	defff604 	addi	sp,sp,-40
20094ad0:	dd400515 	stw	r21,20(sp)
20094ad4:	dcc00315 	stw	r19,12(sp)
20094ad8:	dfc00915 	stw	ra,36(sp)
20094adc:	df000815 	stw	fp,32(sp)
20094ae0:	ddc00715 	stw	r23,28(sp)
20094ae4:	dd800615 	stw	r22,24(sp)
20094ae8:	dd000415 	stw	r20,16(sp)
20094aec:	dc800215 	stw	r18,8(sp)
20094af0:	dc400115 	stw	r17,4(sp)
20094af4:	dc000015 	stw	r16,0(sp)
20094af8:	1088000c 	andi	r2,r2,8192
20094afc:	2827883a 	mov	r19,r5
20094b00:	302b883a 	mov	r21,r6
20094b04:	10002d26 	beq	r2,zero,20094bbc <__sprint_r.part.0+0xf4>
20094b08:	30800217 	ldw	r2,8(r6)
20094b0c:	35800017 	ldw	r22,0(r6)
20094b10:	10002826 	beq	r2,zero,20094bb4 <__sprint_r.part.0+0xec>
20094b14:	2029883a 	mov	r20,r4
20094b18:	b5c00104 	addi	r23,r22,4
20094b1c:	04bfffc4 	movi	r18,-1
20094b20:	bc400017 	ldw	r17,0(r23)
20094b24:	b4000017 	ldw	r16,0(r22)
20094b28:	0039883a 	mov	fp,zero
20094b2c:	8822d0ba 	srli	r17,r17,2
20094b30:	04400316 	blt	zero,r17,20094b40 <__sprint_r.part.0+0x78>
20094b34:	00001806 	br	20094b98 <__sprint_r.part.0+0xd0>
20094b38:	84000104 	addi	r16,r16,4
20094b3c:	8f001526 	beq	r17,fp,20094b94 <__sprint_r.part.0+0xcc>
20094b40:	81400017 	ldw	r5,0(r16)
20094b44:	a009883a 	mov	r4,r20
20094b48:	980d883a 	mov	r6,r19
20094b4c:	00963580 	call	20096358 <_fputwc_r>
20094b50:	e7000044 	addi	fp,fp,1
20094b54:	14bff81e 	bne	r2,r18,20094b38 <__flash_rwdata_start+0xffff9ccc>
20094b58:	9005883a 	mov	r2,r18
20094b5c:	a8000215 	stw	zero,8(r21)
20094b60:	a8000115 	stw	zero,4(r21)
20094b64:	dfc00917 	ldw	ra,36(sp)
20094b68:	df000817 	ldw	fp,32(sp)
20094b6c:	ddc00717 	ldw	r23,28(sp)
20094b70:	dd800617 	ldw	r22,24(sp)
20094b74:	dd400517 	ldw	r21,20(sp)
20094b78:	dd000417 	ldw	r20,16(sp)
20094b7c:	dcc00317 	ldw	r19,12(sp)
20094b80:	dc800217 	ldw	r18,8(sp)
20094b84:	dc400117 	ldw	r17,4(sp)
20094b88:	dc000017 	ldw	r16,0(sp)
20094b8c:	dec00a04 	addi	sp,sp,40
20094b90:	f800283a 	ret
20094b94:	a8800217 	ldw	r2,8(r21)
20094b98:	8c63883a 	add	r17,r17,r17
20094b9c:	8c63883a 	add	r17,r17,r17
20094ba0:	1445c83a 	sub	r2,r2,r17
20094ba4:	a8800215 	stw	r2,8(r21)
20094ba8:	b5800204 	addi	r22,r22,8
20094bac:	bdc00204 	addi	r23,r23,8
20094bb0:	103fdb1e 	bne	r2,zero,20094b20 <__flash_rwdata_start+0xffff9cb4>
20094bb4:	0005883a 	mov	r2,zero
20094bb8:	003fe806 	br	20094b5c <__flash_rwdata_start+0xffff9cf0>
20094bbc:	00914180 	call	20091418 <__sfvwrite_r>
20094bc0:	003fe606 	br	20094b5c <__flash_rwdata_start+0xffff9cf0>

20094bc4 <__sprint_r>:
20094bc4:	30c00217 	ldw	r3,8(r6)
20094bc8:	18000126 	beq	r3,zero,20094bd0 <__sprint_r+0xc>
20094bcc:	0094ac81 	jmpi	20094ac8 <__sprint_r.part.0>
20094bd0:	30000115 	stw	zero,4(r6)
20094bd4:	0005883a 	mov	r2,zero
20094bd8:	f800283a 	ret

20094bdc <___vfiprintf_internal_r>:
20094bdc:	deffca04 	addi	sp,sp,-216
20094be0:	dd803215 	stw	r22,200(sp)
20094be4:	dd403115 	stw	r21,196(sp)
20094be8:	dfc03515 	stw	ra,212(sp)
20094bec:	df003415 	stw	fp,208(sp)
20094bf0:	ddc03315 	stw	r23,204(sp)
20094bf4:	dd003015 	stw	r20,192(sp)
20094bf8:	dcc02f15 	stw	r19,188(sp)
20094bfc:	dc802e15 	stw	r18,184(sp)
20094c00:	dc402d15 	stw	r17,180(sp)
20094c04:	dc002c15 	stw	r16,176(sp)
20094c08:	d9002015 	stw	r4,128(sp)
20094c0c:	d9c02215 	stw	r7,136(sp)
20094c10:	282b883a 	mov	r21,r5
20094c14:	302d883a 	mov	r22,r6
20094c18:	20000226 	beq	r4,zero,20094c24 <___vfiprintf_internal_r+0x48>
20094c1c:	20800e17 	ldw	r2,56(r4)
20094c20:	1001b126 	beq	r2,zero,200952e8 <___vfiprintf_internal_r+0x70c>
20094c24:	a880030b 	ldhu	r2,12(r21)
20094c28:	10c8000c 	andi	r3,r2,8192
20094c2c:	1800061e 	bne	r3,zero,20094c48 <___vfiprintf_internal_r+0x6c>
20094c30:	a9001917 	ldw	r4,100(r21)
20094c34:	00f7ffc4 	movi	r3,-8193
20094c38:	10880014 	ori	r2,r2,8192
20094c3c:	20c6703a 	and	r3,r4,r3
20094c40:	a880030d 	sth	r2,12(r21)
20094c44:	a8c01915 	stw	r3,100(r21)
20094c48:	10c0020c 	andi	r3,r2,8
20094c4c:	18018926 	beq	r3,zero,20095274 <___vfiprintf_internal_r+0x698>
20094c50:	a8c00417 	ldw	r3,16(r21)
20094c54:	18018726 	beq	r3,zero,20095274 <___vfiprintf_internal_r+0x698>
20094c58:	1080068c 	andi	r2,r2,26
20094c5c:	00c00284 	movi	r3,10
20094c60:	10c18c26 	beq	r2,r3,20095294 <___vfiprintf_internal_r+0x6b8>
20094c64:	d8801a04 	addi	r2,sp,104
20094c68:	d8c019c4 	addi	r3,sp,103
20094c6c:	07000034 	movhi	fp,0
20094c70:	05c00034 	movhi	r23,0
20094c74:	10c9c83a 	sub	r4,r2,r3
20094c78:	e7024f04 	addi	fp,fp,2364
20094c7c:	bdc24b04 	addi	r23,r23,2348
20094c80:	d8801e15 	stw	r2,120(sp)
20094c84:	d8c01f15 	stw	r3,124(sp)
20094c88:	dec01a15 	stw	sp,104(sp)
20094c8c:	d8001c15 	stw	zero,112(sp)
20094c90:	d8001b15 	stw	zero,108(sp)
20094c94:	d8002615 	stw	zero,152(sp)
20094c98:	d8002315 	stw	zero,140(sp)
20094c9c:	d9002715 	stw	r4,156(sp)
20094ca0:	d811883a 	mov	r8,sp
20094ca4:	dd402115 	stw	r21,132(sp)
20094ca8:	b021883a 	mov	r16,r22
20094cac:	80800007 	ldb	r2,0(r16)
20094cb0:	10037226 	beq	r2,zero,20095a7c <___vfiprintf_internal_r+0xea0>
20094cb4:	01000944 	movi	r4,37
20094cb8:	11037026 	beq	r2,r4,20095a7c <___vfiprintf_internal_r+0xea0>
20094cbc:	8005883a 	mov	r2,r16
20094cc0:	00000106 	br	20094cc8 <___vfiprintf_internal_r+0xec>
20094cc4:	19000326 	beq	r3,r4,20094cd4 <___vfiprintf_internal_r+0xf8>
20094cc8:	10800044 	addi	r2,r2,1
20094ccc:	10c00007 	ldb	r3,0(r2)
20094cd0:	183ffc1e 	bne	r3,zero,20094cc4 <__flash_rwdata_start+0xffff9e58>
20094cd4:	1425c83a 	sub	r18,r2,r16
20094cd8:	1023883a 	mov	r17,r2
20094cdc:	90001026 	beq	r18,zero,20094d20 <___vfiprintf_internal_r+0x144>
20094ce0:	d8c01c17 	ldw	r3,112(sp)
20094ce4:	d8801b17 	ldw	r2,108(sp)
20094ce8:	44000015 	stw	r16,0(r8)
20094cec:	90c7883a 	add	r3,r18,r3
20094cf0:	10800044 	addi	r2,r2,1
20094cf4:	44800115 	stw	r18,4(r8)
20094cf8:	d8c01c15 	stw	r3,112(sp)
20094cfc:	d8801b15 	stw	r2,108(sp)
20094d00:	010001c4 	movi	r4,7
20094d04:	2080750e 	bge	r4,r2,20094edc <___vfiprintf_internal_r+0x300>
20094d08:	18036f1e 	bne	r3,zero,20095ac8 <___vfiprintf_internal_r+0xeec>
20094d0c:	d8802317 	ldw	r2,140(sp)
20094d10:	d8001b15 	stw	zero,108(sp)
20094d14:	d811883a 	mov	r8,sp
20094d18:	1485883a 	add	r2,r2,r18
20094d1c:	d8802315 	stw	r2,140(sp)
20094d20:	88800007 	ldb	r2,0(r17)
20094d24:	10041026 	beq	r2,zero,20095d68 <___vfiprintf_internal_r+0x118c>
20094d28:	88c00047 	ldb	r3,1(r17)
20094d2c:	88800044 	addi	r2,r17,1
20094d30:	d8001d85 	stb	zero,118(sp)
20094d34:	000f883a 	mov	r7,zero
20094d38:	027fffc4 	movi	r9,-1
20094d3c:	0025883a 	mov	r18,zero
20094d40:	002b883a 	mov	r21,zero
20094d44:	01401604 	movi	r5,88
20094d48:	01800244 	movi	r6,9
20094d4c:	03400a84 	movi	r13,42
20094d50:	03001b04 	movi	r12,108
20094d54:	14000044 	addi	r16,r2,1
20094d58:	18bff804 	addi	r2,r3,-32
20094d5c:	28825536 	bltu	r5,r2,200956b4 <___vfiprintf_internal_r+0xad8>
20094d60:	100490ba 	slli	r2,r2,2
20094d64:	01080274 	movhi	r4,8201
20094d68:	21135e04 	addi	r4,r4,19832
20094d6c:	1105883a 	add	r2,r2,r4
20094d70:	10800017 	ldw	r2,0(r2)
20094d74:	1000683a 	jmp	r2
20094d78:	20095478 	rdprs	zero,r4,9553
20094d7c:	200956b4 	orhi	zero,r4,9562
20094d80:	200956b4 	orhi	zero,r4,9562
20094d84:	20095498 	cmpnei	zero,r4,9554
20094d88:	200956b4 	orhi	zero,r4,9562
20094d8c:	200956b4 	orhi	zero,r4,9562
20094d90:	200956b4 	orhi	zero,r4,9562
20094d94:	200956b4 	orhi	zero,r4,9562
20094d98:	200956b4 	orhi	zero,r4,9562
20094d9c:	200956b4 	orhi	zero,r4,9562
20094da0:	200954a8 	cmpgeui	zero,r4,9554
20094da4:	200954c8 	cmpgei	zero,r4,9555
20094da8:	200956b4 	orhi	zero,r4,9562
20094dac:	200952f0 	cmpltui	zero,r4,9547
20094db0:	200953dc 	xori	zero,r4,9551
20094db4:	200956b4 	orhi	zero,r4,9562
20094db8:	2009535c 	xori	zero,r4,9549
20094dbc:	2009536c 	andhi	zero,r4,9549
20094dc0:	2009536c 	andhi	zero,r4,9549
20094dc4:	2009536c 	andhi	zero,r4,9549
20094dc8:	2009536c 	andhi	zero,r4,9549
20094dcc:	2009536c 	andhi	zero,r4,9549
20094dd0:	2009536c 	andhi	zero,r4,9549
20094dd4:	2009536c 	andhi	zero,r4,9549
20094dd8:	2009536c 	andhi	zero,r4,9549
20094ddc:	2009536c 	andhi	zero,r4,9549
20094de0:	200956b4 	orhi	zero,r4,9562
20094de4:	200956b4 	orhi	zero,r4,9562
20094de8:	200956b4 	orhi	zero,r4,9562
20094dec:	200956b4 	orhi	zero,r4,9562
20094df0:	200956b4 	orhi	zero,r4,9562
20094df4:	200956b4 	orhi	zero,r4,9562
20094df8:	200956b4 	orhi	zero,r4,9562
20094dfc:	200956b4 	orhi	zero,r4,9562
20094e00:	200956b4 	orhi	zero,r4,9562
20094e04:	200956b4 	orhi	zero,r4,9562
20094e08:	20095398 	cmpnei	zero,r4,9550
20094e0c:	200956b4 	orhi	zero,r4,9562
20094e10:	200956b4 	orhi	zero,r4,9562
20094e14:	200956b4 	orhi	zero,r4,9562
20094e18:	200956b4 	orhi	zero,r4,9562
20094e1c:	200956b4 	orhi	zero,r4,9562
20094e20:	200956b4 	orhi	zero,r4,9562
20094e24:	200956b4 	orhi	zero,r4,9562
20094e28:	200956b4 	orhi	zero,r4,9562
20094e2c:	200956b4 	orhi	zero,r4,9562
20094e30:	200956b4 	orhi	zero,r4,9562
20094e34:	20094f24 	muli	zero,r4,9532
20094e38:	200956b4 	orhi	zero,r4,9562
20094e3c:	200956b4 	orhi	zero,r4,9562
20094e40:	200956b4 	orhi	zero,r4,9562
20094e44:	200956b4 	orhi	zero,r4,9562
20094e48:	200956b4 	orhi	zero,r4,9562
20094e4c:	20094ef0 	cmpltui	zero,r4,9531
20094e50:	200956b4 	orhi	zero,r4,9562
20094e54:	200956b4 	orhi	zero,r4,9562
20094e58:	20095538 	rdprs	zero,r4,9556
20094e5c:	200956b4 	orhi	zero,r4,9562
20094e60:	200956b4 	orhi	zero,r4,9562
20094e64:	200956b4 	orhi	zero,r4,9562
20094e68:	200956b4 	orhi	zero,r4,9562
20094e6c:	200956b4 	orhi	zero,r4,9562
20094e70:	200956b4 	orhi	zero,r4,9562
20094e74:	200956b4 	orhi	zero,r4,9562
20094e78:	200956b4 	orhi	zero,r4,9562
20094e7c:	200956b4 	orhi	zero,r4,9562
20094e80:	200956b4 	orhi	zero,r4,9562
20094e84:	200954d8 	cmpnei	zero,r4,9555
20094e88:	20095504 	addi	zero,r4,9556
20094e8c:	200956b4 	orhi	zero,r4,9562
20094e90:	200956b4 	orhi	zero,r4,9562
20094e94:	200956b4 	orhi	zero,r4,9562
20094e98:	200955e0 	cmpeqi	zero,r4,9559
20094e9c:	20095504 	addi	zero,r4,9556
20094ea0:	200956b4 	orhi	zero,r4,9562
20094ea4:	200956b4 	orhi	zero,r4,9562
20094ea8:	200955f0 	cmpltui	zero,r4,9559
20094eac:	200956b4 	orhi	zero,r4,9562
20094eb0:	2009541c 	xori	zero,r4,9552
20094eb4:	20094f28 	cmpgeui	zero,r4,9532
20094eb8:	20095604 	addi	zero,r4,9560
20094ebc:	20095644 	addi	zero,r4,9561
20094ec0:	200956b4 	orhi	zero,r4,9562
20094ec4:	2009558c 	andi	zero,r4,9558
20094ec8:	200956b4 	orhi	zero,r4,9562
20094ecc:	20094ef4 	orhi	zero,r4,9531
20094ed0:	200956b4 	orhi	zero,r4,9562
20094ed4:	200956b4 	orhi	zero,r4,9562
20094ed8:	20095654 	ori	zero,r4,9561
20094edc:	42000204 	addi	r8,r8,8
20094ee0:	d8802317 	ldw	r2,140(sp)
20094ee4:	1485883a 	add	r2,r2,r18
20094ee8:	d8802315 	stw	r2,140(sp)
20094eec:	003f8c06 	br	20094d20 <__flash_rwdata_start+0xffff9eb4>
20094ef0:	ad400414 	ori	r21,r21,16
20094ef4:	a880080c 	andi	r2,r21,32
20094ef8:	1001e61e 	bne	r2,zero,20095694 <___vfiprintf_internal_r+0xab8>
20094efc:	a880040c 	andi	r2,r21,16
20094f00:	10034726 	beq	r2,zero,20095c20 <___vfiprintf_internal_r+0x1044>
20094f04:	d8802217 	ldw	r2,136(sp)
20094f08:	001b883a 	mov	r13,zero
20094f0c:	15800017 	ldw	r22,0(r2)
20094f10:	10800104 	addi	r2,r2,4
20094f14:	d8802215 	stw	r2,136(sp)
20094f18:	b009883a 	mov	r4,r22
20094f1c:	00800044 	movi	r2,1
20094f20:	00000c06 	br	20094f54 <___vfiprintf_internal_r+0x378>
20094f24:	ad400414 	ori	r21,r21,16
20094f28:	a880080c 	andi	r2,r21,32
20094f2c:	1001491e 	bne	r2,zero,20095454 <___vfiprintf_internal_r+0x878>
20094f30:	a880040c 	andi	r2,r21,16
20094f34:	10032d26 	beq	r2,zero,20095bec <___vfiprintf_internal_r+0x1010>
20094f38:	d9002217 	ldw	r4,136(sp)
20094f3c:	001b883a 	mov	r13,zero
20094f40:	0005883a 	mov	r2,zero
20094f44:	25800017 	ldw	r22,0(r4)
20094f48:	21000104 	addi	r4,r4,4
20094f4c:	d9002215 	stw	r4,136(sp)
20094f50:	b009883a 	mov	r4,r22
20094f54:	d8001d85 	stb	zero,118(sp)
20094f58:	4827883a 	mov	r19,r9
20094f5c:	001d883a 	mov	r14,zero
20094f60:	48000216 	blt	r9,zero,20094f6c <___vfiprintf_internal_r+0x390>
20094f64:	00ffdfc4 	movi	r3,-129
20094f68:	a8ea703a 	and	r21,r21,r3
20094f6c:	2002071e 	bne	r4,zero,2009578c <___vfiprintf_internal_r+0xbb0>
20094f70:	4802ad26 	beq	r9,zero,20095a28 <___vfiprintf_internal_r+0xe4c>
20094f74:	10803fcc 	andi	r2,r2,255
20094f78:	00c00044 	movi	r3,1
20094f7c:	10c22b26 	beq	r2,r3,2009582c <___vfiprintf_internal_r+0xc50>
20094f80:	00c00084 	movi	r3,2
20094f84:	dd001a04 	addi	r20,sp,104
20094f88:	10c0dd1e 	bne	r2,r3,20095300 <___vfiprintf_internal_r+0x724>
20094f8c:	d9002617 	ldw	r4,152(sp)
20094f90:	b08003cc 	andi	r2,r22,15
20094f94:	6806973a 	slli	r3,r13,28
20094f98:	2085883a 	add	r2,r4,r2
20094f9c:	b02cd13a 	srli	r22,r22,4
20094fa0:	10800003 	ldbu	r2,0(r2)
20094fa4:	681ad13a 	srli	r13,r13,4
20094fa8:	a53fffc4 	addi	r20,r20,-1
20094fac:	1dacb03a 	or	r22,r3,r22
20094fb0:	a0800005 	stb	r2,0(r20)
20094fb4:	b344b03a 	or	r2,r22,r13
20094fb8:	103ff51e 	bne	r2,zero,20094f90 <__flash_rwdata_start+0xffffa124>
20094fbc:	d9001e17 	ldw	r4,120(sp)
20094fc0:	2527c83a 	sub	r19,r4,r20
20094fc4:	9823883a 	mov	r17,r19
20094fc8:	9a40010e 	bge	r19,r9,20094fd0 <___vfiprintf_internal_r+0x3f4>
20094fcc:	4823883a 	mov	r17,r9
20094fd0:	73803fcc 	andi	r14,r14,255
20094fd4:	7380201c 	xori	r14,r14,128
20094fd8:	73bfe004 	addi	r14,r14,-128
20094fdc:	70000126 	beq	r14,zero,20094fe4 <___vfiprintf_internal_r+0x408>
20094fe0:	8c400044 	addi	r17,r17,1
20094fe4:	ab40008c 	andi	r13,r21,2
20094fe8:	68000126 	beq	r13,zero,20094ff0 <___vfiprintf_internal_r+0x414>
20094fec:	8c400084 	addi	r17,r17,2
20094ff0:	ad80210c 	andi	r22,r21,132
20094ff4:	b001c51e 	bne	r22,zero,2009570c <___vfiprintf_internal_r+0xb30>
20094ff8:	9447c83a 	sub	r3,r18,r17
20094ffc:	00c1c30e 	bge	zero,r3,2009570c <___vfiprintf_internal_r+0xb30>
20095000:	01c00404 	movi	r7,16
20095004:	d8801c17 	ldw	r2,112(sp)
20095008:	38c37b0e 	bge	r7,r3,20095df8 <___vfiprintf_internal_r+0x121c>
2009500c:	01000034 	movhi	r4,0
20095010:	21024f04 	addi	r4,r4,2364
20095014:	dc002915 	stw	r16,164(sp)
20095018:	d9801b17 	ldw	r6,108(sp)
2009501c:	d9002415 	stw	r4,144(sp)
20095020:	03c001c4 	movi	r15,7
20095024:	da402515 	stw	r9,148(sp)
20095028:	db402815 	stw	r13,160(sp)
2009502c:	1821883a 	mov	r16,r3
20095030:	00000506 	br	20095048 <___vfiprintf_internal_r+0x46c>
20095034:	31400084 	addi	r5,r6,2
20095038:	42000204 	addi	r8,r8,8
2009503c:	200d883a 	mov	r6,r4
20095040:	843ffc04 	addi	r16,r16,-16
20095044:	3c000d0e 	bge	r7,r16,2009507c <___vfiprintf_internal_r+0x4a0>
20095048:	10800404 	addi	r2,r2,16
2009504c:	31000044 	addi	r4,r6,1
20095050:	47000015 	stw	fp,0(r8)
20095054:	41c00115 	stw	r7,4(r8)
20095058:	d8801c15 	stw	r2,112(sp)
2009505c:	d9001b15 	stw	r4,108(sp)
20095060:	793ff40e 	bge	r15,r4,20095034 <__flash_rwdata_start+0xffffa1c8>
20095064:	10019b1e 	bne	r2,zero,200956d4 <___vfiprintf_internal_r+0xaf8>
20095068:	843ffc04 	addi	r16,r16,-16
2009506c:	000d883a 	mov	r6,zero
20095070:	01400044 	movi	r5,1
20095074:	d811883a 	mov	r8,sp
20095078:	3c3ff316 	blt	r7,r16,20095048 <__flash_rwdata_start+0xffffa1dc>
2009507c:	8007883a 	mov	r3,r16
20095080:	da402517 	ldw	r9,148(sp)
20095084:	db402817 	ldw	r13,160(sp)
20095088:	dc002917 	ldw	r16,164(sp)
2009508c:	d9002417 	ldw	r4,144(sp)
20095090:	1885883a 	add	r2,r3,r2
20095094:	40c00115 	stw	r3,4(r8)
20095098:	41000015 	stw	r4,0(r8)
2009509c:	d8801c15 	stw	r2,112(sp)
200950a0:	d9401b15 	stw	r5,108(sp)
200950a4:	00c001c4 	movi	r3,7
200950a8:	19426a16 	blt	r3,r5,20095a54 <___vfiprintf_internal_r+0xe78>
200950ac:	d8c01d87 	ldb	r3,118(sp)
200950b0:	42000204 	addi	r8,r8,8
200950b4:	29000044 	addi	r4,r5,1
200950b8:	1801991e 	bne	r3,zero,20095720 <___vfiprintf_internal_r+0xb44>
200950bc:	68000c26 	beq	r13,zero,200950f0 <___vfiprintf_internal_r+0x514>
200950c0:	d8c01d04 	addi	r3,sp,116
200950c4:	10800084 	addi	r2,r2,2
200950c8:	40c00015 	stw	r3,0(r8)
200950cc:	00c00084 	movi	r3,2
200950d0:	40c00115 	stw	r3,4(r8)
200950d4:	d8801c15 	stw	r2,112(sp)
200950d8:	d9001b15 	stw	r4,108(sp)
200950dc:	00c001c4 	movi	r3,7
200950e0:	19024c16 	blt	r3,r4,20095a14 <___vfiprintf_internal_r+0xe38>
200950e4:	200b883a 	mov	r5,r4
200950e8:	42000204 	addi	r8,r8,8
200950ec:	21000044 	addi	r4,r4,1
200950f0:	00c02004 	movi	r3,128
200950f4:	b0c20126 	beq	r22,r3,200958fc <___vfiprintf_internal_r+0xd20>
200950f8:	4cedc83a 	sub	r22,r9,r19
200950fc:	0580230e 	bge	zero,r22,2009518c <___vfiprintf_internal_r+0x5b0>
20095100:	01c00404 	movi	r7,16
20095104:	3d83140e 	bge	r7,r22,20095d58 <___vfiprintf_internal_r+0x117c>
20095108:	01000034 	movhi	r4,0
2009510c:	21024b04 	addi	r4,r4,2348
20095110:	d9002415 	stw	r4,144(sp)
20095114:	034001c4 	movi	r13,7
20095118:	00000506 	br	20095130 <___vfiprintf_internal_r+0x554>
2009511c:	29000084 	addi	r4,r5,2
20095120:	42000204 	addi	r8,r8,8
20095124:	180b883a 	mov	r5,r3
20095128:	b5bffc04 	addi	r22,r22,-16
2009512c:	3d800d0e 	bge	r7,r22,20095164 <___vfiprintf_internal_r+0x588>
20095130:	10800404 	addi	r2,r2,16
20095134:	28c00044 	addi	r3,r5,1
20095138:	45c00015 	stw	r23,0(r8)
2009513c:	41c00115 	stw	r7,4(r8)
20095140:	d8801c15 	stw	r2,112(sp)
20095144:	d8c01b15 	stw	r3,108(sp)
20095148:	68fff40e 	bge	r13,r3,2009511c <__flash_rwdata_start+0xffffa2b0>
2009514c:	1001811e 	bne	r2,zero,20095754 <___vfiprintf_internal_r+0xb78>
20095150:	b5bffc04 	addi	r22,r22,-16
20095154:	01000044 	movi	r4,1
20095158:	000b883a 	mov	r5,zero
2009515c:	d811883a 	mov	r8,sp
20095160:	3dbff316 	blt	r7,r22,20095130 <__flash_rwdata_start+0xffffa2c4>
20095164:	d8c02417 	ldw	r3,144(sp)
20095168:	1585883a 	add	r2,r2,r22
2009516c:	45800115 	stw	r22,4(r8)
20095170:	40c00015 	stw	r3,0(r8)
20095174:	d8801c15 	stw	r2,112(sp)
20095178:	d9001b15 	stw	r4,108(sp)
2009517c:	00c001c4 	movi	r3,7
20095180:	1901d016 	blt	r3,r4,200958c4 <___vfiprintf_internal_r+0xce8>
20095184:	42000204 	addi	r8,r8,8
20095188:	21000044 	addi	r4,r4,1
2009518c:	14c5883a 	add	r2,r2,r19
20095190:	45000015 	stw	r20,0(r8)
20095194:	44c00115 	stw	r19,4(r8)
20095198:	d8801c15 	stw	r2,112(sp)
2009519c:	d9001b15 	stw	r4,108(sp)
200951a0:	00c001c4 	movi	r3,7
200951a4:	1901cf0e 	bge	r3,r4,200958e4 <___vfiprintf_internal_r+0xd08>
200951a8:	1002361e 	bne	r2,zero,20095a84 <___vfiprintf_internal_r+0xea8>
200951ac:	d8001b15 	stw	zero,108(sp)
200951b0:	aac0010c 	andi	r11,r21,4
200951b4:	58002826 	beq	r11,zero,20095258 <___vfiprintf_internal_r+0x67c>
200951b8:	9467c83a 	sub	r19,r18,r17
200951bc:	d811883a 	mov	r8,sp
200951c0:	04c3340e 	bge	zero,r19,20095e94 <___vfiprintf_internal_r+0x12b8>
200951c4:	01c00404 	movi	r7,16
200951c8:	3cc31b0e 	bge	r7,r19,20095e38 <___vfiprintf_internal_r+0x125c>
200951cc:	00c00034 	movhi	r3,0
200951d0:	18c24f04 	addi	r3,r3,2364
200951d4:	d9001b17 	ldw	r4,108(sp)
200951d8:	d8c02415 	stw	r3,144(sp)
200951dc:	382b883a 	mov	r21,r7
200951e0:	050001c4 	movi	r20,7
200951e4:	dd802017 	ldw	r22,128(sp)
200951e8:	00000506 	br	20095200 <___vfiprintf_internal_r+0x624>
200951ec:	21400084 	addi	r5,r4,2
200951f0:	42000204 	addi	r8,r8,8
200951f4:	1809883a 	mov	r4,r3
200951f8:	9cfffc04 	addi	r19,r19,-16
200951fc:	acc00d0e 	bge	r21,r19,20095234 <___vfiprintf_internal_r+0x658>
20095200:	10800404 	addi	r2,r2,16
20095204:	20c00044 	addi	r3,r4,1
20095208:	47000015 	stw	fp,0(r8)
2009520c:	45400115 	stw	r21,4(r8)
20095210:	d8801c15 	stw	r2,112(sp)
20095214:	d8c01b15 	stw	r3,108(sp)
20095218:	a0fff40e 	bge	r20,r3,200951ec <__flash_rwdata_start+0xffffa380>
2009521c:	10019f1e 	bne	r2,zero,2009589c <___vfiprintf_internal_r+0xcc0>
20095220:	9cfffc04 	addi	r19,r19,-16
20095224:	01400044 	movi	r5,1
20095228:	0009883a 	mov	r4,zero
2009522c:	d811883a 	mov	r8,sp
20095230:	acfff316 	blt	r21,r19,20095200 <__flash_rwdata_start+0xffffa394>
20095234:	d8c02417 	ldw	r3,144(sp)
20095238:	14c5883a 	add	r2,r2,r19
2009523c:	44c00115 	stw	r19,4(r8)
20095240:	40c00015 	stw	r3,0(r8)
20095244:	d8801c15 	stw	r2,112(sp)
20095248:	d9401b15 	stw	r5,108(sp)
2009524c:	00c001c4 	movi	r3,7
20095250:	1941810e 	bge	r3,r5,20095858 <___vfiprintf_internal_r+0xc7c>
20095254:	10017a1e 	bne	r2,zero,20095840 <___vfiprintf_internal_r+0xc64>
20095258:	8c82a416 	blt	r17,r18,20095cec <___vfiprintf_internal_r+0x1110>
2009525c:	d9002317 	ldw	r4,140(sp)
20095260:	2449883a 	add	r4,r4,r17
20095264:	d9002315 	stw	r4,140(sp)
20095268:	d8001b15 	stw	zero,108(sp)
2009526c:	d811883a 	mov	r8,sp
20095270:	003e8e06 	br	20094cac <__flash_rwdata_start+0xffff9e40>
20095274:	d9002017 	ldw	r4,128(sp)
20095278:	a80b883a 	mov	r5,r21
2009527c:	008edc00 	call	2008edc0 <__swsetup_r>
20095280:	10000c1e 	bne	r2,zero,200952b4 <___vfiprintf_internal_r+0x6d8>
20095284:	a880030b 	ldhu	r2,12(r21)
20095288:	00c00284 	movi	r3,10
2009528c:	1080068c 	andi	r2,r2,26
20095290:	10fe741e 	bne	r2,r3,20094c64 <__flash_rwdata_start+0xffff9df8>
20095294:	a880038f 	ldh	r2,14(r21)
20095298:	103e7216 	blt	r2,zero,20094c64 <__flash_rwdata_start+0xffff9df8>
2009529c:	d9002017 	ldw	r4,128(sp)
200952a0:	d9c02217 	ldw	r7,136(sp)
200952a4:	a80b883a 	mov	r5,r21
200952a8:	b00d883a 	mov	r6,r22
200952ac:	0095ed00 	call	20095ed0 <__sbprintf>
200952b0:	00000106 	br	200952b8 <___vfiprintf_internal_r+0x6dc>
200952b4:	00bfffc4 	movi	r2,-1
200952b8:	dfc03517 	ldw	ra,212(sp)
200952bc:	df003417 	ldw	fp,208(sp)
200952c0:	ddc03317 	ldw	r23,204(sp)
200952c4:	dd803217 	ldw	r22,200(sp)
200952c8:	dd403117 	ldw	r21,196(sp)
200952cc:	dd003017 	ldw	r20,192(sp)
200952d0:	dcc02f17 	ldw	r19,188(sp)
200952d4:	dc802e17 	ldw	r18,184(sp)
200952d8:	dc402d17 	ldw	r17,180(sp)
200952dc:	dc002c17 	ldw	r16,176(sp)
200952e0:	dec03604 	addi	sp,sp,216
200952e4:	f800283a 	ret
200952e8:	0090fb40 	call	20090fb4 <__sinit>
200952ec:	003e4d06 	br	20094c24 <__flash_rwdata_start+0xffff9db8>
200952f0:	8005883a 	mov	r2,r16
200952f4:	ad400114 	ori	r21,r21,4
200952f8:	80c00007 	ldb	r3,0(r16)
200952fc:	003e9506 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095300:	b006d0fa 	srli	r3,r22,3
20095304:	6808977a 	slli	r4,r13,29
20095308:	681ad0fa 	srli	r13,r13,3
2009530c:	b58001cc 	andi	r22,r22,7
20095310:	b0800c04 	addi	r2,r22,48
20095314:	a53fffc4 	addi	r20,r20,-1
20095318:	20ecb03a 	or	r22,r4,r3
2009531c:	a0800005 	stb	r2,0(r20)
20095320:	b346b03a 	or	r3,r22,r13
20095324:	183ff61e 	bne	r3,zero,20095300 <__flash_rwdata_start+0xffffa494>
20095328:	a8c0004c 	andi	r3,r21,1
2009532c:	a009883a 	mov	r4,r20
20095330:	18013b26 	beq	r3,zero,20095820 <___vfiprintf_internal_r+0xc44>
20095334:	10803fcc 	andi	r2,r2,255
20095338:	1080201c 	xori	r2,r2,128
2009533c:	10bfe004 	addi	r2,r2,-128
20095340:	00c00c04 	movi	r3,48
20095344:	10ff1d26 	beq	r2,r3,20094fbc <__flash_rwdata_start+0xffffa150>
20095348:	d8801e17 	ldw	r2,120(sp)
2009534c:	a53fffc4 	addi	r20,r20,-1
20095350:	20ffffc5 	stb	r3,-1(r4)
20095354:	1527c83a 	sub	r19,r2,r20
20095358:	003f1a06 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
2009535c:	ad402014 	ori	r21,r21,128
20095360:	8005883a 	mov	r2,r16
20095364:	80c00007 	ldb	r3,0(r16)
20095368:	003e7a06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
2009536c:	8005883a 	mov	r2,r16
20095370:	0025883a 	mov	r18,zero
20095374:	193ff404 	addi	r4,r3,-48
20095378:	10c00007 	ldb	r3,0(r2)
2009537c:	948002a4 	muli	r18,r18,10
20095380:	84000044 	addi	r16,r16,1
20095384:	8005883a 	mov	r2,r16
20095388:	9125883a 	add	r18,r18,r4
2009538c:	193ff404 	addi	r4,r3,-48
20095390:	313ff92e 	bgeu	r6,r4,20095378 <__flash_rwdata_start+0xffffa50c>
20095394:	003e7006 	br	20094d58 <__flash_rwdata_start+0xffff9eec>
20095398:	ad400414 	ori	r21,r21,16
2009539c:	d9c01d85 	stb	r7,118(sp)
200953a0:	a880080c 	andi	r2,r21,32
200953a4:	d8c02217 	ldw	r3,136(sp)
200953a8:	10005a26 	beq	r2,zero,20095514 <___vfiprintf_internal_r+0x938>
200953ac:	d9002217 	ldw	r4,136(sp)
200953b0:	18800117 	ldw	r2,4(r3)
200953b4:	1d800017 	ldw	r22,0(r3)
200953b8:	21000204 	addi	r4,r4,8
200953bc:	d9002215 	stw	r4,136(sp)
200953c0:	101b883a 	mov	r13,r2
200953c4:	1001f416 	blt	r2,zero,20095b98 <___vfiprintf_internal_r+0xfbc>
200953c8:	db801d83 	ldbu	r14,118(sp)
200953cc:	4827883a 	mov	r19,r9
200953d0:	00800044 	movi	r2,1
200953d4:	b348b03a 	or	r4,r22,r13
200953d8:	003ee106 	br	20094f60 <__flash_rwdata_start+0xffffa0f4>
200953dc:	80c00007 	ldb	r3,0(r16)
200953e0:	80800044 	addi	r2,r16,1
200953e4:	1b42a326 	beq	r3,r13,20095e74 <___vfiprintf_internal_r+0x1298>
200953e8:	193ff404 	addi	r4,r3,-48
200953ec:	1021883a 	mov	r16,r2
200953f0:	0013883a 	mov	r9,zero
200953f4:	313e5836 	bltu	r6,r4,20094d58 <__flash_rwdata_start+0xffff9eec>
200953f8:	80c00007 	ldb	r3,0(r16)
200953fc:	4a4002a4 	muli	r9,r9,10
20095400:	84000044 	addi	r16,r16,1
20095404:	2253883a 	add	r9,r4,r9
20095408:	193ff404 	addi	r4,r3,-48
2009540c:	313ffa2e 	bgeu	r6,r4,200953f8 <__flash_rwdata_start+0xffffa58c>
20095410:	483e510e 	bge	r9,zero,20094d58 <__flash_rwdata_start+0xffff9eec>
20095414:	027fffc4 	movi	r9,-1
20095418:	003e4f06 	br	20094d58 <__flash_rwdata_start+0xffff9eec>
2009541c:	d9c01d85 	stb	r7,118(sp)
20095420:	a880080c 	andi	r2,r21,32
20095424:	10020826 	beq	r2,zero,20095c48 <___vfiprintf_internal_r+0x106c>
20095428:	d8c02217 	ldw	r3,136(sp)
2009542c:	d9002317 	ldw	r4,140(sp)
20095430:	18800017 	ldw	r2,0(r3)
20095434:	2007d7fa 	srai	r3,r4,31
20095438:	d9002217 	ldw	r4,136(sp)
2009543c:	10c00115 	stw	r3,4(r2)
20095440:	21000104 	addi	r4,r4,4
20095444:	d9002215 	stw	r4,136(sp)
20095448:	d9002317 	ldw	r4,140(sp)
2009544c:	11000015 	stw	r4,0(r2)
20095450:	003e1606 	br	20094cac <__flash_rwdata_start+0xffff9e40>
20095454:	d8802217 	ldw	r2,136(sp)
20095458:	d8c02217 	ldw	r3,136(sp)
2009545c:	15800017 	ldw	r22,0(r2)
20095460:	13400117 	ldw	r13,4(r2)
20095464:	18c00204 	addi	r3,r3,8
20095468:	0005883a 	mov	r2,zero
2009546c:	d8c02215 	stw	r3,136(sp)
20095470:	b348b03a 	or	r4,r22,r13
20095474:	003eb706 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095478:	38803fcc 	andi	r2,r7,255
2009547c:	1080201c 	xori	r2,r2,128
20095480:	10bfe004 	addi	r2,r2,-128
20095484:	1001e31e 	bne	r2,zero,20095c14 <___vfiprintf_internal_r+0x1038>
20095488:	8005883a 	mov	r2,r16
2009548c:	01c00804 	movi	r7,32
20095490:	80c00007 	ldb	r3,0(r16)
20095494:	003e2f06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095498:	ad400054 	ori	r21,r21,1
2009549c:	8005883a 	mov	r2,r16
200954a0:	80c00007 	ldb	r3,0(r16)
200954a4:	003e2b06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
200954a8:	d8c02217 	ldw	r3,136(sp)
200954ac:	1c800017 	ldw	r18,0(r3)
200954b0:	18c00104 	addi	r3,r3,4
200954b4:	90023816 	blt	r18,zero,20095d98 <___vfiprintf_internal_r+0x11bc>
200954b8:	d8c02215 	stw	r3,136(sp)
200954bc:	8005883a 	mov	r2,r16
200954c0:	80c00007 	ldb	r3,0(r16)
200954c4:	003e2306 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
200954c8:	8005883a 	mov	r2,r16
200954cc:	01c00ac4 	movi	r7,43
200954d0:	80c00007 	ldb	r3,0(r16)
200954d4:	003e1f06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
200954d8:	d8c02217 	ldw	r3,136(sp)
200954dc:	04400044 	movi	r17,1
200954e0:	d8001d85 	stb	zero,118(sp)
200954e4:	18800017 	ldw	r2,0(r3)
200954e8:	18c00104 	addi	r3,r3,4
200954ec:	d8c02215 	stw	r3,136(sp)
200954f0:	d8801005 	stb	r2,64(sp)
200954f4:	8827883a 	mov	r19,r17
200954f8:	dd001004 	addi	r20,sp,64
200954fc:	0013883a 	mov	r9,zero
20095500:	003eb806 	br	20094fe4 <__flash_rwdata_start+0xffffa178>
20095504:	d9c01d85 	stb	r7,118(sp)
20095508:	a880080c 	andi	r2,r21,32
2009550c:	d8c02217 	ldw	r3,136(sp)
20095510:	103fa61e 	bne	r2,zero,200953ac <__flash_rwdata_start+0xffffa540>
20095514:	a880040c 	andi	r2,r21,16
20095518:	1001dd26 	beq	r2,zero,20095c90 <___vfiprintf_internal_r+0x10b4>
2009551c:	1d800017 	ldw	r22,0(r3)
20095520:	d8802217 	ldw	r2,136(sp)
20095524:	b01bd7fa 	srai	r13,r22,31
20095528:	10800104 	addi	r2,r2,4
2009552c:	d8802215 	stw	r2,136(sp)
20095530:	6805883a 	mov	r2,r13
20095534:	003fa306 	br	200953c4 <__flash_rwdata_start+0xffffa558>
20095538:	00800034 	movhi	r2,0
2009553c:	1081d604 	addi	r2,r2,1880
20095540:	d8802615 	stw	r2,152(sp)
20095544:	d9c01d85 	stb	r7,118(sp)
20095548:	a880080c 	andi	r2,r21,32
2009554c:	10004726 	beq	r2,zero,2009566c <___vfiprintf_internal_r+0xa90>
20095550:	d9002217 	ldw	r4,136(sp)
20095554:	25800017 	ldw	r22,0(r4)
20095558:	23400117 	ldw	r13,4(r4)
2009555c:	21000204 	addi	r4,r4,8
20095560:	d9002215 	stw	r4,136(sp)
20095564:	a880004c 	andi	r2,r21,1
20095568:	10014e26 	beq	r2,zero,20095aa4 <___vfiprintf_internal_r+0xec8>
2009556c:	b348b03a 	or	r4,r22,r13
20095570:	20019c26 	beq	r4,zero,20095be4 <___vfiprintf_internal_r+0x1008>
20095574:	00800c04 	movi	r2,48
20095578:	d8801d05 	stb	r2,116(sp)
2009557c:	d8c01d45 	stb	r3,117(sp)
20095580:	ad400094 	ori	r21,r21,2
20095584:	00800084 	movi	r2,2
20095588:	003e7206 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
2009558c:	d8c02217 	ldw	r3,136(sp)
20095590:	d8001d85 	stb	zero,118(sp)
20095594:	1d000017 	ldw	r20,0(r3)
20095598:	1d800104 	addi	r22,r3,4
2009559c:	a0021c26 	beq	r20,zero,20095e10 <___vfiprintf_internal_r+0x1234>
200955a0:	a009883a 	mov	r4,r20
200955a4:	48020016 	blt	r9,zero,20095da8 <___vfiprintf_internal_r+0x11cc>
200955a8:	480d883a 	mov	r6,r9
200955ac:	000b883a 	mov	r5,zero
200955b0:	da002a15 	stw	r8,168(sp)
200955b4:	da402b15 	stw	r9,172(sp)
200955b8:	0091cf80 	call	20091cf8 <memchr>
200955bc:	da002a17 	ldw	r8,168(sp)
200955c0:	da402b17 	ldw	r9,172(sp)
200955c4:	10022226 	beq	r2,zero,20095e50 <___vfiprintf_internal_r+0x1274>
200955c8:	1527c83a 	sub	r19,r2,r20
200955cc:	4cc1c916 	blt	r9,r19,20095cf4 <___vfiprintf_internal_r+0x1118>
200955d0:	db801d83 	ldbu	r14,118(sp)
200955d4:	dd802215 	stw	r22,136(sp)
200955d8:	0013883a 	mov	r9,zero
200955dc:	003e7906 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
200955e0:	ad401014 	ori	r21,r21,64
200955e4:	8005883a 	mov	r2,r16
200955e8:	80c00007 	ldb	r3,0(r16)
200955ec:	003dd906 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
200955f0:	80c00007 	ldb	r3,0(r16)
200955f4:	8005883a 	mov	r2,r16
200955f8:	1b01e326 	beq	r3,r12,20095d88 <___vfiprintf_internal_r+0x11ac>
200955fc:	ad400414 	ori	r21,r21,16
20095600:	003dd406 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095604:	d9002217 	ldw	r4,136(sp)
20095608:	00800c04 	movi	r2,48
2009560c:	d8801d05 	stb	r2,116(sp)
20095610:	25800017 	ldw	r22,0(r4)
20095614:	00801e04 	movi	r2,120
20095618:	d8801d45 	stb	r2,117(sp)
2009561c:	00800034 	movhi	r2,0
20095620:	21000104 	addi	r4,r4,4
20095624:	1081db04 	addi	r2,r2,1900
20095628:	d9002215 	stw	r4,136(sp)
2009562c:	d8802615 	stw	r2,152(sp)
20095630:	001b883a 	mov	r13,zero
20095634:	ad400094 	ori	r21,r21,2
20095638:	00800084 	movi	r2,2
2009563c:	b009883a 	mov	r4,r22
20095640:	003e4406 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095644:	ad400814 	ori	r21,r21,32
20095648:	8005883a 	mov	r2,r16
2009564c:	80c00007 	ldb	r3,0(r16)
20095650:	003dc006 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095654:	00800034 	movhi	r2,0
20095658:	1081db04 	addi	r2,r2,1900
2009565c:	d8802615 	stw	r2,152(sp)
20095660:	d9c01d85 	stb	r7,118(sp)
20095664:	a880080c 	andi	r2,r21,32
20095668:	103fb91e 	bne	r2,zero,20095550 <__flash_rwdata_start+0xffffa6e4>
2009566c:	a880040c 	andi	r2,r21,16
20095670:	10010f1e 	bne	r2,zero,20095ab0 <___vfiprintf_internal_r+0xed4>
20095674:	a880100c 	andi	r2,r21,64
20095678:	10010d26 	beq	r2,zero,20095ab0 <___vfiprintf_internal_r+0xed4>
2009567c:	d9002217 	ldw	r4,136(sp)
20095680:	001b883a 	mov	r13,zero
20095684:	2580000b 	ldhu	r22,0(r4)
20095688:	21000104 	addi	r4,r4,4
2009568c:	d9002215 	stw	r4,136(sp)
20095690:	003fb406 	br	20095564 <__flash_rwdata_start+0xffffa6f8>
20095694:	d9002217 	ldw	r4,136(sp)
20095698:	00800044 	movi	r2,1
2009569c:	25800017 	ldw	r22,0(r4)
200956a0:	23400117 	ldw	r13,4(r4)
200956a4:	21000204 	addi	r4,r4,8
200956a8:	d9002215 	stw	r4,136(sp)
200956ac:	b348b03a 	or	r4,r22,r13
200956b0:	003e2806 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
200956b4:	d9c01d85 	stb	r7,118(sp)
200956b8:	1801ab26 	beq	r3,zero,20095d68 <___vfiprintf_internal_r+0x118c>
200956bc:	04400044 	movi	r17,1
200956c0:	d8c01005 	stb	r3,64(sp)
200956c4:	d8001d85 	stb	zero,118(sp)
200956c8:	8827883a 	mov	r19,r17
200956cc:	dd001004 	addi	r20,sp,64
200956d0:	003f8a06 	br	200954fc <__flash_rwdata_start+0xffffa690>
200956d4:	d9002017 	ldw	r4,128(sp)
200956d8:	d9402117 	ldw	r5,132(sp)
200956dc:	d9801a04 	addi	r6,sp,104
200956e0:	d9c02b15 	stw	r7,172(sp)
200956e4:	dbc02a15 	stw	r15,168(sp)
200956e8:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
200956ec:	d9c02b17 	ldw	r7,172(sp)
200956f0:	dbc02a17 	ldw	r15,168(sp)
200956f4:	1000631e 	bne	r2,zero,20095884 <___vfiprintf_internal_r+0xca8>
200956f8:	d9801b17 	ldw	r6,108(sp)
200956fc:	d8801c17 	ldw	r2,112(sp)
20095700:	d811883a 	mov	r8,sp
20095704:	31400044 	addi	r5,r6,1
20095708:	003e4d06 	br	20095040 <__flash_rwdata_start+0xffffa1d4>
2009570c:	d9401b17 	ldw	r5,108(sp)
20095710:	d8801c17 	ldw	r2,112(sp)
20095714:	29000044 	addi	r4,r5,1
20095718:	d8c01d87 	ldb	r3,118(sp)
2009571c:	183e6726 	beq	r3,zero,200950bc <__flash_rwdata_start+0xffffa250>
20095720:	00c00044 	movi	r3,1
20095724:	d9401d84 	addi	r5,sp,118
20095728:	10c5883a 	add	r2,r2,r3
2009572c:	41400015 	stw	r5,0(r8)
20095730:	40c00115 	stw	r3,4(r8)
20095734:	d8801c15 	stw	r2,112(sp)
20095738:	d9001b15 	stw	r4,108(sp)
2009573c:	014001c4 	movi	r5,7
20095740:	2900ab16 	blt	r5,r4,200959f0 <___vfiprintf_internal_r+0xe14>
20095744:	200b883a 	mov	r5,r4
20095748:	42000204 	addi	r8,r8,8
2009574c:	21000044 	addi	r4,r4,1
20095750:	003e5a06 	br	200950bc <__flash_rwdata_start+0xffffa250>
20095754:	d9002017 	ldw	r4,128(sp)
20095758:	d9402117 	ldw	r5,132(sp)
2009575c:	d9801a04 	addi	r6,sp,104
20095760:	d9c02b15 	stw	r7,172(sp)
20095764:	db402a15 	stw	r13,168(sp)
20095768:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
2009576c:	d9c02b17 	ldw	r7,172(sp)
20095770:	db402a17 	ldw	r13,168(sp)
20095774:	1000431e 	bne	r2,zero,20095884 <___vfiprintf_internal_r+0xca8>
20095778:	d9401b17 	ldw	r5,108(sp)
2009577c:	d8801c17 	ldw	r2,112(sp)
20095780:	d811883a 	mov	r8,sp
20095784:	29000044 	addi	r4,r5,1
20095788:	003e6706 	br	20095128 <__flash_rwdata_start+0xffffa2bc>
2009578c:	10803fcc 	andi	r2,r2,255
20095790:	00c00044 	movi	r3,1
20095794:	10fdfa1e 	bne	r2,r3,20094f80 <__flash_rwdata_start+0xffffa114>
20095798:	6800021e 	bne	r13,zero,200957a4 <___vfiprintf_internal_r+0xbc8>
2009579c:	00800244 	movi	r2,9
200957a0:	1580222e 	bgeu	r2,r22,2009582c <___vfiprintf_internal_r+0xc50>
200957a4:	dc802415 	stw	r18,144(sp)
200957a8:	dc002515 	stw	r16,148(sp)
200957ac:	dc401a04 	addi	r17,sp,104
200957b0:	b021883a 	mov	r16,r22
200957b4:	4827883a 	mov	r19,r9
200957b8:	4029883a 	mov	r20,r8
200957bc:	702d883a 	mov	r22,r14
200957c0:	6825883a 	mov	r18,r13
200957c4:	8009883a 	mov	r4,r16
200957c8:	900b883a 	mov	r5,r18
200957cc:	01800284 	movi	r6,10
200957d0:	000f883a 	mov	r7,zero
200957d4:	0096e440 	call	20096e44 <__umoddi3>
200957d8:	10800c04 	addi	r2,r2,48
200957dc:	8c7fffc4 	addi	r17,r17,-1
200957e0:	8009883a 	mov	r4,r16
200957e4:	900b883a 	mov	r5,r18
200957e8:	01800284 	movi	r6,10
200957ec:	000f883a 	mov	r7,zero
200957f0:	88800005 	stb	r2,0(r17)
200957f4:	00968840 	call	20096884 <__udivdi3>
200957f8:	1021883a 	mov	r16,r2
200957fc:	10c4b03a 	or	r2,r2,r3
20095800:	1825883a 	mov	r18,r3
20095804:	103fef1e 	bne	r2,zero,200957c4 <__flash_rwdata_start+0xffffa958>
20095808:	dc802417 	ldw	r18,144(sp)
2009580c:	dc002517 	ldw	r16,148(sp)
20095810:	a011883a 	mov	r8,r20
20095814:	9813883a 	mov	r9,r19
20095818:	b01d883a 	mov	r14,r22
2009581c:	8829883a 	mov	r20,r17
20095820:	d8c01e17 	ldw	r3,120(sp)
20095824:	1d27c83a 	sub	r19,r3,r20
20095828:	003de606 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
2009582c:	b5800c04 	addi	r22,r22,48
20095830:	dd8019c5 	stb	r22,103(sp)
20095834:	dcc02717 	ldw	r19,156(sp)
20095838:	dd0019c4 	addi	r20,sp,103
2009583c:	003de106 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
20095840:	d9002017 	ldw	r4,128(sp)
20095844:	d9402117 	ldw	r5,132(sp)
20095848:	d9801a04 	addi	r6,sp,104
2009584c:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095850:	10000c1e 	bne	r2,zero,20095884 <___vfiprintf_internal_r+0xca8>
20095854:	d8801c17 	ldw	r2,112(sp)
20095858:	8c80010e 	bge	r17,r18,20095860 <___vfiprintf_internal_r+0xc84>
2009585c:	9023883a 	mov	r17,r18
20095860:	d8c02317 	ldw	r3,140(sp)
20095864:	1c47883a 	add	r3,r3,r17
20095868:	d8c02315 	stw	r3,140(sp)
2009586c:	103e7e26 	beq	r2,zero,20095268 <__flash_rwdata_start+0xffffa3fc>
20095870:	d9002017 	ldw	r4,128(sp)
20095874:	d9402117 	ldw	r5,132(sp)
20095878:	d9801a04 	addi	r6,sp,104
2009587c:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095880:	103e7926 	beq	r2,zero,20095268 <__flash_rwdata_start+0xffffa3fc>
20095884:	dd402117 	ldw	r21,132(sp)
20095888:	a880030b 	ldhu	r2,12(r21)
2009588c:	1080100c 	andi	r2,r2,64
20095890:	103e881e 	bne	r2,zero,200952b4 <__flash_rwdata_start+0xffffa448>
20095894:	d8802317 	ldw	r2,140(sp)
20095898:	003e8706 	br	200952b8 <__flash_rwdata_start+0xffffa44c>
2009589c:	d9402117 	ldw	r5,132(sp)
200958a0:	b009883a 	mov	r4,r22
200958a4:	d9801a04 	addi	r6,sp,104
200958a8:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
200958ac:	103ff51e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
200958b0:	d9001b17 	ldw	r4,108(sp)
200958b4:	d8801c17 	ldw	r2,112(sp)
200958b8:	d811883a 	mov	r8,sp
200958bc:	21400044 	addi	r5,r4,1
200958c0:	003e4d06 	br	200951f8 <__flash_rwdata_start+0xffffa38c>
200958c4:	1000aa1e 	bne	r2,zero,20095b70 <___vfiprintf_internal_r+0xf94>
200958c8:	00c00044 	movi	r3,1
200958cc:	9805883a 	mov	r2,r19
200958d0:	dd000015 	stw	r20,0(sp)
200958d4:	dcc00115 	stw	r19,4(sp)
200958d8:	dcc01c15 	stw	r19,112(sp)
200958dc:	d8c01b15 	stw	r3,108(sp)
200958e0:	d811883a 	mov	r8,sp
200958e4:	42000204 	addi	r8,r8,8
200958e8:	aac0010c 	andi	r11,r21,4
200958ec:	583fda26 	beq	r11,zero,20095858 <__flash_rwdata_start+0xffffa9ec>
200958f0:	9467c83a 	sub	r19,r18,r17
200958f4:	04fe3316 	blt	zero,r19,200951c4 <__flash_rwdata_start+0xffffa358>
200958f8:	003fd706 	br	20095858 <__flash_rwdata_start+0xffffa9ec>
200958fc:	946dc83a 	sub	r22,r18,r17
20095900:	05bdfd0e 	bge	zero,r22,200950f8 <__flash_rwdata_start+0xffffa28c>
20095904:	00c00034 	movhi	r3,0
20095908:	18c24b04 	addi	r3,r3,2348
2009590c:	01c00404 	movi	r7,16
20095910:	d8c02415 	stw	r3,144(sp)
20095914:	3d81530e 	bge	r7,r22,20095e64 <___vfiprintf_internal_r+0x1288>
20095918:	8007883a 	mov	r3,r16
2009591c:	034001c4 	movi	r13,7
20095920:	b021883a 	mov	r16,r22
20095924:	da402515 	stw	r9,148(sp)
20095928:	182d883a 	mov	r22,r3
2009592c:	00000506 	br	20095944 <___vfiprintf_internal_r+0xd68>
20095930:	29800084 	addi	r6,r5,2
20095934:	42000204 	addi	r8,r8,8
20095938:	180b883a 	mov	r5,r3
2009593c:	843ffc04 	addi	r16,r16,-16
20095940:	3c000d0e 	bge	r7,r16,20095978 <___vfiprintf_internal_r+0xd9c>
20095944:	10800404 	addi	r2,r2,16
20095948:	28c00044 	addi	r3,r5,1
2009594c:	45c00015 	stw	r23,0(r8)
20095950:	41c00115 	stw	r7,4(r8)
20095954:	d8801c15 	stw	r2,112(sp)
20095958:	d8c01b15 	stw	r3,108(sp)
2009595c:	68fff40e 	bge	r13,r3,20095930 <__flash_rwdata_start+0xffffaac4>
20095960:	1000151e 	bne	r2,zero,200959b8 <___vfiprintf_internal_r+0xddc>
20095964:	843ffc04 	addi	r16,r16,-16
20095968:	01800044 	movi	r6,1
2009596c:	000b883a 	mov	r5,zero
20095970:	d811883a 	mov	r8,sp
20095974:	3c3ff316 	blt	r7,r16,20095944 <__flash_rwdata_start+0xffffaad8>
20095978:	da402517 	ldw	r9,148(sp)
2009597c:	b007883a 	mov	r3,r22
20095980:	802d883a 	mov	r22,r16
20095984:	1821883a 	mov	r16,r3
20095988:	d8c02417 	ldw	r3,144(sp)
2009598c:	1585883a 	add	r2,r2,r22
20095990:	45800115 	stw	r22,4(r8)
20095994:	40c00015 	stw	r3,0(r8)
20095998:	d8801c15 	stw	r2,112(sp)
2009599c:	d9801b15 	stw	r6,108(sp)
200959a0:	00c001c4 	movi	r3,7
200959a4:	19806d16 	blt	r3,r6,20095b5c <___vfiprintf_internal_r+0xf80>
200959a8:	42000204 	addi	r8,r8,8
200959ac:	31000044 	addi	r4,r6,1
200959b0:	300b883a 	mov	r5,r6
200959b4:	003dd006 	br	200950f8 <__flash_rwdata_start+0xffffa28c>
200959b8:	d9002017 	ldw	r4,128(sp)
200959bc:	d9402117 	ldw	r5,132(sp)
200959c0:	d9801a04 	addi	r6,sp,104
200959c4:	d9c02b15 	stw	r7,172(sp)
200959c8:	db402a15 	stw	r13,168(sp)
200959cc:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
200959d0:	d9c02b17 	ldw	r7,172(sp)
200959d4:	db402a17 	ldw	r13,168(sp)
200959d8:	103faa1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
200959dc:	d9401b17 	ldw	r5,108(sp)
200959e0:	d8801c17 	ldw	r2,112(sp)
200959e4:	d811883a 	mov	r8,sp
200959e8:	29800044 	addi	r6,r5,1
200959ec:	003fd306 	br	2009593c <__flash_rwdata_start+0xffffaad0>
200959f0:	1000401e 	bne	r2,zero,20095af4 <___vfiprintf_internal_r+0xf18>
200959f4:	68003b26 	beq	r13,zero,20095ae4 <___vfiprintf_internal_r+0xf08>
200959f8:	d9001d04 	addi	r4,sp,116
200959fc:	00800084 	movi	r2,2
20095a00:	d9000015 	stw	r4,0(sp)
20095a04:	d8800115 	stw	r2,4(sp)
20095a08:	1809883a 	mov	r4,r3
20095a0c:	d811883a 	mov	r8,sp
20095a10:	003db406 	br	200950e4 <__flash_rwdata_start+0xffffa278>
20095a14:	1000451e 	bne	r2,zero,20095b2c <___vfiprintf_internal_r+0xf50>
20095a18:	01000044 	movi	r4,1
20095a1c:	000b883a 	mov	r5,zero
20095a20:	d811883a 	mov	r8,sp
20095a24:	003db206 	br	200950f0 <__flash_rwdata_start+0xffffa284>
20095a28:	10803fcc 	andi	r2,r2,255
20095a2c:	1000071e 	bne	r2,zero,20095a4c <___vfiprintf_internal_r+0xe70>
20095a30:	a880004c 	andi	r2,r21,1
20095a34:	10000526 	beq	r2,zero,20095a4c <___vfiprintf_internal_r+0xe70>
20095a38:	00800c04 	movi	r2,48
20095a3c:	d88019c5 	stb	r2,103(sp)
20095a40:	dcc02717 	ldw	r19,156(sp)
20095a44:	dd0019c4 	addi	r20,sp,103
20095a48:	003d5e06 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
20095a4c:	dd001a04 	addi	r20,sp,104
20095a50:	003d5c06 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
20095a54:	1000971e 	bne	r2,zero,20095cb4 <___vfiprintf_internal_r+0x10d8>
20095a58:	d8c01d87 	ldb	r3,118(sp)
20095a5c:	18005826 	beq	r3,zero,20095bc0 <___vfiprintf_internal_r+0xfe4>
20095a60:	00800044 	movi	r2,1
20095a64:	d8c01d84 	addi	r3,sp,118
20095a68:	1009883a 	mov	r4,r2
20095a6c:	d8c00015 	stw	r3,0(sp)
20095a70:	d8800115 	stw	r2,4(sp)
20095a74:	d811883a 	mov	r8,sp
20095a78:	003f3206 	br	20095744 <__flash_rwdata_start+0xffffa8d8>
20095a7c:	8023883a 	mov	r17,r16
20095a80:	003ca706 	br	20094d20 <__flash_rwdata_start+0xffff9eb4>
20095a84:	d9002017 	ldw	r4,128(sp)
20095a88:	d9402117 	ldw	r5,132(sp)
20095a8c:	d9801a04 	addi	r6,sp,104
20095a90:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095a94:	103f7b1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095a98:	d8801c17 	ldw	r2,112(sp)
20095a9c:	d811883a 	mov	r8,sp
20095aa0:	003f9106 	br	200958e8 <__flash_rwdata_start+0xffffaa7c>
20095aa4:	00800084 	movi	r2,2
20095aa8:	b348b03a 	or	r4,r22,r13
20095aac:	003d2906 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095ab0:	d8802217 	ldw	r2,136(sp)
20095ab4:	001b883a 	mov	r13,zero
20095ab8:	15800017 	ldw	r22,0(r2)
20095abc:	10800104 	addi	r2,r2,4
20095ac0:	d8802215 	stw	r2,136(sp)
20095ac4:	003ea706 	br	20095564 <__flash_rwdata_start+0xffffa6f8>
20095ac8:	d9002017 	ldw	r4,128(sp)
20095acc:	d9402117 	ldw	r5,132(sp)
20095ad0:	d9801a04 	addi	r6,sp,104
20095ad4:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095ad8:	103f6a1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095adc:	d811883a 	mov	r8,sp
20095ae0:	003cff06 	br	20094ee0 <__flash_rwdata_start+0xffffa074>
20095ae4:	000b883a 	mov	r5,zero
20095ae8:	1809883a 	mov	r4,r3
20095aec:	d811883a 	mov	r8,sp
20095af0:	003d7f06 	br	200950f0 <__flash_rwdata_start+0xffffa284>
20095af4:	d9002017 	ldw	r4,128(sp)
20095af8:	d9402117 	ldw	r5,132(sp)
20095afc:	d9801a04 	addi	r6,sp,104
20095b00:	da402b15 	stw	r9,172(sp)
20095b04:	db402a15 	stw	r13,168(sp)
20095b08:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095b0c:	da402b17 	ldw	r9,172(sp)
20095b10:	db402a17 	ldw	r13,168(sp)
20095b14:	103f5b1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095b18:	d9401b17 	ldw	r5,108(sp)
20095b1c:	d8801c17 	ldw	r2,112(sp)
20095b20:	d811883a 	mov	r8,sp
20095b24:	29000044 	addi	r4,r5,1
20095b28:	003d6406 	br	200950bc <__flash_rwdata_start+0xffffa250>
20095b2c:	d9002017 	ldw	r4,128(sp)
20095b30:	d9402117 	ldw	r5,132(sp)
20095b34:	d9801a04 	addi	r6,sp,104
20095b38:	da402b15 	stw	r9,172(sp)
20095b3c:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095b40:	da402b17 	ldw	r9,172(sp)
20095b44:	103f4f1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095b48:	d9401b17 	ldw	r5,108(sp)
20095b4c:	d8801c17 	ldw	r2,112(sp)
20095b50:	d811883a 	mov	r8,sp
20095b54:	29000044 	addi	r4,r5,1
20095b58:	003d6506 	br	200950f0 <__flash_rwdata_start+0xffffa284>
20095b5c:	10009a1e 	bne	r2,zero,20095dc8 <___vfiprintf_internal_r+0x11ec>
20095b60:	01000044 	movi	r4,1
20095b64:	000b883a 	mov	r5,zero
20095b68:	d811883a 	mov	r8,sp
20095b6c:	003d6206 	br	200950f8 <__flash_rwdata_start+0xffffa28c>
20095b70:	d9002017 	ldw	r4,128(sp)
20095b74:	d9402117 	ldw	r5,132(sp)
20095b78:	d9801a04 	addi	r6,sp,104
20095b7c:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095b80:	103f401e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095b84:	d9001b17 	ldw	r4,108(sp)
20095b88:	d8801c17 	ldw	r2,112(sp)
20095b8c:	d811883a 	mov	r8,sp
20095b90:	21000044 	addi	r4,r4,1
20095b94:	003d7d06 	br	2009518c <__flash_rwdata_start+0xffffa320>
20095b98:	05adc83a 	sub	r22,zero,r22
20095b9c:	b004c03a 	cmpne	r2,r22,zero
20095ba0:	035bc83a 	sub	r13,zero,r13
20095ba4:	689bc83a 	sub	r13,r13,r2
20095ba8:	03800b44 	movi	r14,45
20095bac:	db801d85 	stb	r14,118(sp)
20095bb0:	4827883a 	mov	r19,r9
20095bb4:	00800044 	movi	r2,1
20095bb8:	b348b03a 	or	r4,r22,r13
20095bbc:	003ce806 	br	20094f60 <__flash_rwdata_start+0xffffa0f4>
20095bc0:	000b883a 	mov	r5,zero
20095bc4:	01000044 	movi	r4,1
20095bc8:	d811883a 	mov	r8,sp
20095bcc:	683d4826 	beq	r13,zero,200950f0 <__flash_rwdata_start+0xffffa284>
20095bd0:	00800084 	movi	r2,2
20095bd4:	d8c01d04 	addi	r3,sp,116
20095bd8:	d8c00015 	stw	r3,0(sp)
20095bdc:	d8800115 	stw	r2,4(sp)
20095be0:	003d4006 	br	200950e4 <__flash_rwdata_start+0xffffa278>
20095be4:	00800084 	movi	r2,2
20095be8:	003cda06 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095bec:	a880100c 	andi	r2,r21,64
20095bf0:	10004226 	beq	r2,zero,20095cfc <___vfiprintf_internal_r+0x1120>
20095bf4:	d8802217 	ldw	r2,136(sp)
20095bf8:	001b883a 	mov	r13,zero
20095bfc:	1580000b 	ldhu	r22,0(r2)
20095c00:	10800104 	addi	r2,r2,4
20095c04:	d8802215 	stw	r2,136(sp)
20095c08:	b009883a 	mov	r4,r22
20095c0c:	0005883a 	mov	r2,zero
20095c10:	003cd006 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095c14:	80c00007 	ldb	r3,0(r16)
20095c18:	8005883a 	mov	r2,r16
20095c1c:	003c4d06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095c20:	a880100c 	andi	r2,r21,64
20095c24:	10004426 	beq	r2,zero,20095d38 <___vfiprintf_internal_r+0x115c>
20095c28:	d8c02217 	ldw	r3,136(sp)
20095c2c:	001b883a 	mov	r13,zero
20095c30:	00800044 	movi	r2,1
20095c34:	1d80000b 	ldhu	r22,0(r3)
20095c38:	18c00104 	addi	r3,r3,4
20095c3c:	d8c02215 	stw	r3,136(sp)
20095c40:	b009883a 	mov	r4,r22
20095c44:	003cc306 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095c48:	a880040c 	andi	r2,r21,16
20095c4c:	1000091e 	bne	r2,zero,20095c74 <___vfiprintf_internal_r+0x1098>
20095c50:	aac0100c 	andi	r11,r21,64
20095c54:	58000726 	beq	r11,zero,20095c74 <___vfiprintf_internal_r+0x1098>
20095c58:	d8c02217 	ldw	r3,136(sp)
20095c5c:	d9002317 	ldw	r4,140(sp)
20095c60:	18800017 	ldw	r2,0(r3)
20095c64:	18c00104 	addi	r3,r3,4
20095c68:	d8c02215 	stw	r3,136(sp)
20095c6c:	1100000d 	sth	r4,0(r2)
20095c70:	003c0e06 	br	20094cac <__flash_rwdata_start+0xffff9e40>
20095c74:	d8c02217 	ldw	r3,136(sp)
20095c78:	d9002317 	ldw	r4,140(sp)
20095c7c:	18800017 	ldw	r2,0(r3)
20095c80:	18c00104 	addi	r3,r3,4
20095c84:	d8c02215 	stw	r3,136(sp)
20095c88:	11000015 	stw	r4,0(r2)
20095c8c:	003c0706 	br	20094cac <__flash_rwdata_start+0xffff9e40>
20095c90:	a880100c 	andi	r2,r21,64
20095c94:	10002126 	beq	r2,zero,20095d1c <___vfiprintf_internal_r+0x1140>
20095c98:	1d80000f 	ldh	r22,0(r3)
20095c9c:	d8c02217 	ldw	r3,136(sp)
20095ca0:	b01bd7fa 	srai	r13,r22,31
20095ca4:	18c00104 	addi	r3,r3,4
20095ca8:	d8c02215 	stw	r3,136(sp)
20095cac:	6805883a 	mov	r2,r13
20095cb0:	003dc406 	br	200953c4 <__flash_rwdata_start+0xffffa558>
20095cb4:	d9002017 	ldw	r4,128(sp)
20095cb8:	d9402117 	ldw	r5,132(sp)
20095cbc:	d9801a04 	addi	r6,sp,104
20095cc0:	da402b15 	stw	r9,172(sp)
20095cc4:	db402a15 	stw	r13,168(sp)
20095cc8:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095ccc:	da402b17 	ldw	r9,172(sp)
20095cd0:	db402a17 	ldw	r13,168(sp)
20095cd4:	103eeb1e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095cd8:	d9401b17 	ldw	r5,108(sp)
20095cdc:	d8801c17 	ldw	r2,112(sp)
20095ce0:	d811883a 	mov	r8,sp
20095ce4:	29000044 	addi	r4,r5,1
20095ce8:	003e8b06 	br	20095718 <__flash_rwdata_start+0xffffa8ac>
20095cec:	9023883a 	mov	r17,r18
20095cf0:	003d5a06 	br	2009525c <__flash_rwdata_start+0xffffa3f0>
20095cf4:	4827883a 	mov	r19,r9
20095cf8:	003e3506 	br	200955d0 <__flash_rwdata_start+0xffffa764>
20095cfc:	d8c02217 	ldw	r3,136(sp)
20095d00:	001b883a 	mov	r13,zero
20095d04:	0005883a 	mov	r2,zero
20095d08:	1d800017 	ldw	r22,0(r3)
20095d0c:	18c00104 	addi	r3,r3,4
20095d10:	d8c02215 	stw	r3,136(sp)
20095d14:	b009883a 	mov	r4,r22
20095d18:	003c8e06 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095d1c:	1d800017 	ldw	r22,0(r3)
20095d20:	d9002217 	ldw	r4,136(sp)
20095d24:	b01bd7fa 	srai	r13,r22,31
20095d28:	21000104 	addi	r4,r4,4
20095d2c:	d9002215 	stw	r4,136(sp)
20095d30:	6805883a 	mov	r2,r13
20095d34:	003da306 	br	200953c4 <__flash_rwdata_start+0xffffa558>
20095d38:	d9002217 	ldw	r4,136(sp)
20095d3c:	001b883a 	mov	r13,zero
20095d40:	00800044 	movi	r2,1
20095d44:	25800017 	ldw	r22,0(r4)
20095d48:	21000104 	addi	r4,r4,4
20095d4c:	d9002215 	stw	r4,136(sp)
20095d50:	b009883a 	mov	r4,r22
20095d54:	003c7f06 	br	20094f54 <__flash_rwdata_start+0xffffa0e8>
20095d58:	00c00034 	movhi	r3,0
20095d5c:	18c24b04 	addi	r3,r3,2348
20095d60:	d8c02415 	stw	r3,144(sp)
20095d64:	003cff06 	br	20095164 <__flash_rwdata_start+0xffffa2f8>
20095d68:	d8801c17 	ldw	r2,112(sp)
20095d6c:	dd402117 	ldw	r21,132(sp)
20095d70:	103ec526 	beq	r2,zero,20095888 <__flash_rwdata_start+0xffffaa1c>
20095d74:	d9002017 	ldw	r4,128(sp)
20095d78:	a80b883a 	mov	r5,r21
20095d7c:	d9801a04 	addi	r6,sp,104
20095d80:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095d84:	003ec006 	br	20095888 <__flash_rwdata_start+0xffffaa1c>
20095d88:	80800044 	addi	r2,r16,1
20095d8c:	ad400814 	ori	r21,r21,32
20095d90:	80c00047 	ldb	r3,1(r16)
20095d94:	003bef06 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095d98:	04a5c83a 	sub	r18,zero,r18
20095d9c:	8005883a 	mov	r2,r16
20095da0:	d8c02215 	stw	r3,136(sp)
20095da4:	003d5306 	br	200952f4 <__flash_rwdata_start+0xffffa488>
20095da8:	da002a15 	stw	r8,168(sp)
20095dac:	008abd00 	call	2008abd0 <strlen>
20095db0:	1027883a 	mov	r19,r2
20095db4:	db801d83 	ldbu	r14,118(sp)
20095db8:	dd802215 	stw	r22,136(sp)
20095dbc:	0013883a 	mov	r9,zero
20095dc0:	da002a17 	ldw	r8,168(sp)
20095dc4:	003c7f06 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
20095dc8:	d9002017 	ldw	r4,128(sp)
20095dcc:	d9402117 	ldw	r5,132(sp)
20095dd0:	d9801a04 	addi	r6,sp,104
20095dd4:	da402b15 	stw	r9,172(sp)
20095dd8:	0094ac80 	call	20094ac8 <__sprint_r.part.0>
20095ddc:	da402b17 	ldw	r9,172(sp)
20095de0:	103ea81e 	bne	r2,zero,20095884 <__flash_rwdata_start+0xffffaa18>
20095de4:	d9401b17 	ldw	r5,108(sp)
20095de8:	d8801c17 	ldw	r2,112(sp)
20095dec:	d811883a 	mov	r8,sp
20095df0:	29000044 	addi	r4,r5,1
20095df4:	003cc006 	br	200950f8 <__flash_rwdata_start+0xffffa28c>
20095df8:	d9401b17 	ldw	r5,108(sp)
20095dfc:	01000034 	movhi	r4,0
20095e00:	21024f04 	addi	r4,r4,2364
20095e04:	d9002415 	stw	r4,144(sp)
20095e08:	29400044 	addi	r5,r5,1
20095e0c:	003c9f06 	br	2009508c <__flash_rwdata_start+0xffffa220>
20095e10:	00800184 	movi	r2,6
20095e14:	1240012e 	bgeu	r2,r9,20095e1c <___vfiprintf_internal_r+0x1240>
20095e18:	1013883a 	mov	r9,r2
20095e1c:	4827883a 	mov	r19,r9
20095e20:	4823883a 	mov	r17,r9
20095e24:	48001116 	blt	r9,zero,20095e6c <___vfiprintf_internal_r+0x1290>
20095e28:	05000034 	movhi	r20,0
20095e2c:	dd802215 	stw	r22,136(sp)
20095e30:	a501e004 	addi	r20,r20,1920
20095e34:	003db106 	br	200954fc <__flash_rwdata_start+0xffffa690>
20095e38:	d9401b17 	ldw	r5,108(sp)
20095e3c:	01000034 	movhi	r4,0
20095e40:	21024f04 	addi	r4,r4,2364
20095e44:	d9002415 	stw	r4,144(sp)
20095e48:	29400044 	addi	r5,r5,1
20095e4c:	003cf906 	br	20095234 <__flash_rwdata_start+0xffffa3c8>
20095e50:	4827883a 	mov	r19,r9
20095e54:	db801d83 	ldbu	r14,118(sp)
20095e58:	dd802215 	stw	r22,136(sp)
20095e5c:	0013883a 	mov	r9,zero
20095e60:	003c5806 	br	20094fc4 <__flash_rwdata_start+0xffffa158>
20095e64:	200d883a 	mov	r6,r4
20095e68:	003ec706 	br	20095988 <__flash_rwdata_start+0xffffab1c>
20095e6c:	0023883a 	mov	r17,zero
20095e70:	003fed06 	br	20095e28 <__flash_rwdata_start+0xffffafbc>
20095e74:	d9002217 	ldw	r4,136(sp)
20095e78:	22400017 	ldw	r9,0(r4)
20095e7c:	20c00104 	addi	r3,r4,4
20095e80:	d8c02215 	stw	r3,136(sp)
20095e84:	483fc20e 	bge	r9,zero,20095d90 <__flash_rwdata_start+0xffffaf24>
20095e88:	027fffc4 	movi	r9,-1
20095e8c:	80c00047 	ldb	r3,1(r16)
20095e90:	003bb006 	br	20094d54 <__flash_rwdata_start+0xffff9ee8>
20095e94:	8c80010e 	bge	r17,r18,20095e9c <___vfiprintf_internal_r+0x12c0>
20095e98:	9023883a 	mov	r17,r18
20095e9c:	d8802317 	ldw	r2,140(sp)
20095ea0:	1445883a 	add	r2,r2,r17
20095ea4:	d8802315 	stw	r2,140(sp)
20095ea8:	003cef06 	br	20095268 <__flash_rwdata_start+0xffffa3fc>

20095eac <__vfiprintf_internal>:
20095eac:	2007883a 	mov	r3,r4
20095eb0:	01000034 	movhi	r4,0
20095eb4:	210a8c04 	addi	r4,r4,10800
20095eb8:	21000017 	ldw	r4,0(r4)
20095ebc:	2805883a 	mov	r2,r5
20095ec0:	300f883a 	mov	r7,r6
20095ec4:	180b883a 	mov	r5,r3
20095ec8:	100d883a 	mov	r6,r2
20095ecc:	0094bdc1 	jmpi	20094bdc <___vfiprintf_internal_r>

20095ed0 <__sbprintf>:
20095ed0:	2880030b 	ldhu	r2,12(r5)
20095ed4:	2ac01917 	ldw	r11,100(r5)
20095ed8:	2a80038b 	ldhu	r10,14(r5)
20095edc:	2a400717 	ldw	r9,28(r5)
20095ee0:	2a000917 	ldw	r8,36(r5)
20095ee4:	defee204 	addi	sp,sp,-1144
20095ee8:	00c10004 	movi	r3,1024
20095eec:	dc011a15 	stw	r16,1128(sp)
20095ef0:	10bfff4c 	andi	r2,r2,65533
20095ef4:	2821883a 	mov	r16,r5
20095ef8:	d8cb883a 	add	r5,sp,r3
20095efc:	dc811c15 	stw	r18,1136(sp)
20095f00:	dc411b15 	stw	r17,1132(sp)
20095f04:	dfc11d15 	stw	ra,1140(sp)
20095f08:	2025883a 	mov	r18,r4
20095f0c:	d881030d 	sth	r2,1036(sp)
20095f10:	dac11915 	stw	r11,1124(sp)
20095f14:	da81038d 	sth	r10,1038(sp)
20095f18:	da410715 	stw	r9,1052(sp)
20095f1c:	da010915 	stw	r8,1060(sp)
20095f20:	dec10015 	stw	sp,1024(sp)
20095f24:	dec10415 	stw	sp,1040(sp)
20095f28:	d8c10215 	stw	r3,1032(sp)
20095f2c:	d8c10515 	stw	r3,1044(sp)
20095f30:	d8010615 	stw	zero,1048(sp)
20095f34:	0094bdc0 	call	20094bdc <___vfiprintf_internal_r>
20095f38:	1023883a 	mov	r17,r2
20095f3c:	10000416 	blt	r2,zero,20095f50 <__sbprintf+0x80>
20095f40:	9009883a 	mov	r4,r18
20095f44:	d9410004 	addi	r5,sp,1024
20095f48:	0090bd80 	call	20090bd8 <_fflush_r>
20095f4c:	10000d1e 	bne	r2,zero,20095f84 <__sbprintf+0xb4>
20095f50:	d8c1030b 	ldhu	r3,1036(sp)
20095f54:	18c0100c 	andi	r3,r3,64
20095f58:	18000326 	beq	r3,zero,20095f68 <__sbprintf+0x98>
20095f5c:	8080030b 	ldhu	r2,12(r16)
20095f60:	10801014 	ori	r2,r2,64
20095f64:	8080030d 	sth	r2,12(r16)
20095f68:	8805883a 	mov	r2,r17
20095f6c:	dfc11d17 	ldw	ra,1140(sp)
20095f70:	dc811c17 	ldw	r18,1136(sp)
20095f74:	dc411b17 	ldw	r17,1132(sp)
20095f78:	dc011a17 	ldw	r16,1128(sp)
20095f7c:	dec11e04 	addi	sp,sp,1144
20095f80:	f800283a 	ret
20095f84:	047fffc4 	movi	r17,-1
20095f88:	003ff106 	br	20095f50 <__flash_rwdata_start+0xffffb0e4>

20095f8c <__swbuf_r>:
20095f8c:	defffc04 	addi	sp,sp,-16
20095f90:	dc800215 	stw	r18,8(sp)
20095f94:	dc400115 	stw	r17,4(sp)
20095f98:	dc000015 	stw	r16,0(sp)
20095f9c:	dfc00315 	stw	ra,12(sp)
20095fa0:	2025883a 	mov	r18,r4
20095fa4:	2823883a 	mov	r17,r5
20095fa8:	3021883a 	mov	r16,r6
20095fac:	20000226 	beq	r4,zero,20095fb8 <__swbuf_r+0x2c>
20095fb0:	20800e17 	ldw	r2,56(r4)
20095fb4:	10004126 	beq	r2,zero,200960bc <__swbuf_r+0x130>
20095fb8:	80c00617 	ldw	r3,24(r16)
20095fbc:	8180030b 	ldhu	r6,12(r16)
20095fc0:	80c00215 	stw	r3,8(r16)
20095fc4:	30c0020c 	andi	r3,r6,8
20095fc8:	18003526 	beq	r3,zero,200960a0 <__swbuf_r+0x114>
20095fcc:	80c00417 	ldw	r3,16(r16)
20095fd0:	18003326 	beq	r3,zero,200960a0 <__swbuf_r+0x114>
20095fd4:	3088000c 	andi	r2,r6,8192
20095fd8:	8c403fcc 	andi	r17,r17,255
20095fdc:	10001726 	beq	r2,zero,2009603c <__swbuf_r+0xb0>
20095fe0:	80800017 	ldw	r2,0(r16)
20095fe4:	81000517 	ldw	r4,20(r16)
20095fe8:	10c7c83a 	sub	r3,r2,r3
20095fec:	19001d0e 	bge	r3,r4,20096064 <__swbuf_r+0xd8>
20095ff0:	18c00044 	addi	r3,r3,1
20095ff4:	81400217 	ldw	r5,8(r16)
20095ff8:	11000044 	addi	r4,r2,1
20095ffc:	81000015 	stw	r4,0(r16)
20096000:	297fffc4 	addi	r5,r5,-1
20096004:	81400215 	stw	r5,8(r16)
20096008:	14400005 	stb	r17,0(r2)
2009600c:	80800517 	ldw	r2,20(r16)
20096010:	10c01d26 	beq	r2,r3,20096088 <__swbuf_r+0xfc>
20096014:	8080030b 	ldhu	r2,12(r16)
20096018:	1080004c 	andi	r2,r2,1
2009601c:	1000181e 	bne	r2,zero,20096080 <__swbuf_r+0xf4>
20096020:	8805883a 	mov	r2,r17
20096024:	dfc00317 	ldw	ra,12(sp)
20096028:	dc800217 	ldw	r18,8(sp)
2009602c:	dc400117 	ldw	r17,4(sp)
20096030:	dc000017 	ldw	r16,0(sp)
20096034:	dec00404 	addi	sp,sp,16
20096038:	f800283a 	ret
2009603c:	81001917 	ldw	r4,100(r16)
20096040:	00b7ffc4 	movi	r2,-8193
20096044:	31880014 	ori	r6,r6,8192
20096048:	2084703a 	and	r2,r4,r2
2009604c:	80801915 	stw	r2,100(r16)
20096050:	80800017 	ldw	r2,0(r16)
20096054:	81000517 	ldw	r4,20(r16)
20096058:	8180030d 	sth	r6,12(r16)
2009605c:	10c7c83a 	sub	r3,r2,r3
20096060:	193fe316 	blt	r3,r4,20095ff0 <__flash_rwdata_start+0xffffb184>
20096064:	9009883a 	mov	r4,r18
20096068:	800b883a 	mov	r5,r16
2009606c:	0090bd80 	call	20090bd8 <_fflush_r>
20096070:	1000091e 	bne	r2,zero,20096098 <__swbuf_r+0x10c>
20096074:	80800017 	ldw	r2,0(r16)
20096078:	00c00044 	movi	r3,1
2009607c:	003fdd06 	br	20095ff4 <__flash_rwdata_start+0xffffb188>
20096080:	00800284 	movi	r2,10
20096084:	88bfe61e 	bne	r17,r2,20096020 <__flash_rwdata_start+0xffffb1b4>
20096088:	9009883a 	mov	r4,r18
2009608c:	800b883a 	mov	r5,r16
20096090:	0090bd80 	call	20090bd8 <_fflush_r>
20096094:	103fe226 	beq	r2,zero,20096020 <__flash_rwdata_start+0xffffb1b4>
20096098:	00bfffc4 	movi	r2,-1
2009609c:	003fe106 	br	20096024 <__flash_rwdata_start+0xffffb1b8>
200960a0:	9009883a 	mov	r4,r18
200960a4:	800b883a 	mov	r5,r16
200960a8:	008edc00 	call	2008edc0 <__swsetup_r>
200960ac:	103ffa1e 	bne	r2,zero,20096098 <__flash_rwdata_start+0xffffb22c>
200960b0:	8180030b 	ldhu	r6,12(r16)
200960b4:	80c00417 	ldw	r3,16(r16)
200960b8:	003fc606 	br	20095fd4 <__flash_rwdata_start+0xffffb168>
200960bc:	0090fb40 	call	20090fb4 <__sinit>
200960c0:	003fbd06 	br	20095fb8 <__flash_rwdata_start+0xffffb14c>

200960c4 <__swbuf>:
200960c4:	00c00034 	movhi	r3,0
200960c8:	18ca8c04 	addi	r3,r3,10800
200960cc:	2005883a 	mov	r2,r4
200960d0:	19000017 	ldw	r4,0(r3)
200960d4:	280d883a 	mov	r6,r5
200960d8:	100b883a 	mov	r5,r2
200960dc:	0095f8c1 	jmpi	20095f8c <__swbuf_r>

200960e0 <_write_r>:
200960e0:	defffd04 	addi	sp,sp,-12
200960e4:	dc000015 	stw	r16,0(sp)
200960e8:	04000034 	movhi	r16,0
200960ec:	dc400115 	stw	r17,4(sp)
200960f0:	840ab004 	addi	r16,r16,10944
200960f4:	2023883a 	mov	r17,r4
200960f8:	2809883a 	mov	r4,r5
200960fc:	300b883a 	mov	r5,r6
20096100:	380d883a 	mov	r6,r7
20096104:	dfc00215 	stw	ra,8(sp)
20096108:	80000015 	stw	zero,0(r16)
2009610c:	0097dd40 	call	20097dd4 <write>
20096110:	00ffffc4 	movi	r3,-1
20096114:	10c00526 	beq	r2,r3,2009612c <_write_r+0x4c>
20096118:	dfc00217 	ldw	ra,8(sp)
2009611c:	dc400117 	ldw	r17,4(sp)
20096120:	dc000017 	ldw	r16,0(sp)
20096124:	dec00304 	addi	sp,sp,12
20096128:	f800283a 	ret
2009612c:	80c00017 	ldw	r3,0(r16)
20096130:	183ff926 	beq	r3,zero,20096118 <__flash_rwdata_start+0xffffb2ac>
20096134:	88c00015 	stw	r3,0(r17)
20096138:	003ff706 	br	20096118 <__flash_rwdata_start+0xffffb2ac>

2009613c <_close_r>:
2009613c:	defffd04 	addi	sp,sp,-12
20096140:	dc000015 	stw	r16,0(sp)
20096144:	04000034 	movhi	r16,0
20096148:	dc400115 	stw	r17,4(sp)
2009614c:	840ab004 	addi	r16,r16,10944
20096150:	2023883a 	mov	r17,r4
20096154:	2809883a 	mov	r4,r5
20096158:	dfc00215 	stw	ra,8(sp)
2009615c:	80000015 	stw	zero,0(r16)
20096160:	00976180 	call	20097618 <close>
20096164:	00ffffc4 	movi	r3,-1
20096168:	10c00526 	beq	r2,r3,20096180 <_close_r+0x44>
2009616c:	dfc00217 	ldw	ra,8(sp)
20096170:	dc400117 	ldw	r17,4(sp)
20096174:	dc000017 	ldw	r16,0(sp)
20096178:	dec00304 	addi	sp,sp,12
2009617c:	f800283a 	ret
20096180:	80c00017 	ldw	r3,0(r16)
20096184:	183ff926 	beq	r3,zero,2009616c <__flash_rwdata_start+0xffffb300>
20096188:	88c00015 	stw	r3,0(r17)
2009618c:	003ff706 	br	2009616c <__flash_rwdata_start+0xffffb300>

20096190 <_calloc_r>:
20096190:	298b383a 	mul	r5,r5,r6
20096194:	defffe04 	addi	sp,sp,-8
20096198:	dc000015 	stw	r16,0(sp)
2009619c:	dfc00115 	stw	ra,4(sp)
200961a0:	0089e500 	call	20089e50 <_malloc_r>
200961a4:	1021883a 	mov	r16,r2
200961a8:	10002826 	beq	r2,zero,2009624c <_calloc_r+0xbc>
200961ac:	11bfff17 	ldw	r6,-4(r2)
200961b0:	00bfff04 	movi	r2,-4
200961b4:	00c00904 	movi	r3,36
200961b8:	308c703a 	and	r6,r6,r2
200961bc:	308d883a 	add	r6,r6,r2
200961c0:	19801436 	bltu	r3,r6,20096214 <_calloc_r+0x84>
200961c4:	008004c4 	movi	r2,19
200961c8:	11800936 	bltu	r2,r6,200961f0 <_calloc_r+0x60>
200961cc:	8005883a 	mov	r2,r16
200961d0:	10000015 	stw	zero,0(r2)
200961d4:	10000115 	stw	zero,4(r2)
200961d8:	10000215 	stw	zero,8(r2)
200961dc:	8005883a 	mov	r2,r16
200961e0:	dfc00117 	ldw	ra,4(sp)
200961e4:	dc000017 	ldw	r16,0(sp)
200961e8:	dec00204 	addi	sp,sp,8
200961ec:	f800283a 	ret
200961f0:	80000015 	stw	zero,0(r16)
200961f4:	80000115 	stw	zero,4(r16)
200961f8:	008006c4 	movi	r2,27
200961fc:	11800d2e 	bgeu	r2,r6,20096234 <_calloc_r+0xa4>
20096200:	80000215 	stw	zero,8(r16)
20096204:	80000315 	stw	zero,12(r16)
20096208:	30c00c26 	beq	r6,r3,2009623c <_calloc_r+0xac>
2009620c:	80800404 	addi	r2,r16,16
20096210:	003fef06 	br	200961d0 <__flash_rwdata_start+0xffffb364>
20096214:	8009883a 	mov	r4,r16
20096218:	000b883a 	mov	r5,zero
2009621c:	008a7ac0 	call	2008a7ac <memset>
20096220:	8005883a 	mov	r2,r16
20096224:	dfc00117 	ldw	ra,4(sp)
20096228:	dc000017 	ldw	r16,0(sp)
2009622c:	dec00204 	addi	sp,sp,8
20096230:	f800283a 	ret
20096234:	80800204 	addi	r2,r16,8
20096238:	003fe506 	br	200961d0 <__flash_rwdata_start+0xffffb364>
2009623c:	80000415 	stw	zero,16(r16)
20096240:	80800604 	addi	r2,r16,24
20096244:	80000515 	stw	zero,20(r16)
20096248:	003fe106 	br	200961d0 <__flash_rwdata_start+0xffffb364>
2009624c:	0005883a 	mov	r2,zero
20096250:	003fe306 	br	200961e0 <__flash_rwdata_start+0xffffb374>

20096254 <_fclose_r>:
20096254:	28003926 	beq	r5,zero,2009633c <_fclose_r+0xe8>
20096258:	defffc04 	addi	sp,sp,-16
2009625c:	dc400115 	stw	r17,4(sp)
20096260:	dc000015 	stw	r16,0(sp)
20096264:	dfc00315 	stw	ra,12(sp)
20096268:	dc800215 	stw	r18,8(sp)
2009626c:	2023883a 	mov	r17,r4
20096270:	2821883a 	mov	r16,r5
20096274:	20000226 	beq	r4,zero,20096280 <_fclose_r+0x2c>
20096278:	20800e17 	ldw	r2,56(r4)
2009627c:	10002726 	beq	r2,zero,2009631c <_fclose_r+0xc8>
20096280:	8080030f 	ldh	r2,12(r16)
20096284:	1000071e 	bne	r2,zero,200962a4 <_fclose_r+0x50>
20096288:	0005883a 	mov	r2,zero
2009628c:	dfc00317 	ldw	ra,12(sp)
20096290:	dc800217 	ldw	r18,8(sp)
20096294:	dc400117 	ldw	r17,4(sp)
20096298:	dc000017 	ldw	r16,0(sp)
2009629c:	dec00404 	addi	sp,sp,16
200962a0:	f800283a 	ret
200962a4:	8809883a 	mov	r4,r17
200962a8:	800b883a 	mov	r5,r16
200962ac:	00909d00 	call	200909d0 <__sflush_r>
200962b0:	1025883a 	mov	r18,r2
200962b4:	80800b17 	ldw	r2,44(r16)
200962b8:	10000426 	beq	r2,zero,200962cc <_fclose_r+0x78>
200962bc:	81400717 	ldw	r5,28(r16)
200962c0:	8809883a 	mov	r4,r17
200962c4:	103ee83a 	callr	r2
200962c8:	10001616 	blt	r2,zero,20096324 <_fclose_r+0xd0>
200962cc:	8080030b 	ldhu	r2,12(r16)
200962d0:	1080200c 	andi	r2,r2,128
200962d4:	1000151e 	bne	r2,zero,2009632c <_fclose_r+0xd8>
200962d8:	81400c17 	ldw	r5,48(r16)
200962dc:	28000526 	beq	r5,zero,200962f4 <_fclose_r+0xa0>
200962e0:	80801004 	addi	r2,r16,64
200962e4:	28800226 	beq	r5,r2,200962f0 <_fclose_r+0x9c>
200962e8:	8809883a 	mov	r4,r17
200962ec:	00911280 	call	20091128 <_free_r>
200962f0:	80000c15 	stw	zero,48(r16)
200962f4:	81401117 	ldw	r5,68(r16)
200962f8:	28000326 	beq	r5,zero,20096308 <_fclose_r+0xb4>
200962fc:	8809883a 	mov	r4,r17
20096300:	00911280 	call	20091128 <_free_r>
20096304:	80001115 	stw	zero,68(r16)
20096308:	0090fc40 	call	20090fc4 <__sfp_lock_acquire>
2009630c:	8000030d 	sth	zero,12(r16)
20096310:	0090fc80 	call	20090fc8 <__sfp_lock_release>
20096314:	9005883a 	mov	r2,r18
20096318:	003fdc06 	br	2009628c <__flash_rwdata_start+0xffffb420>
2009631c:	0090fb40 	call	20090fb4 <__sinit>
20096320:	003fd706 	br	20096280 <__flash_rwdata_start+0xffffb414>
20096324:	04bfffc4 	movi	r18,-1
20096328:	003fe806 	br	200962cc <__flash_rwdata_start+0xffffb460>
2009632c:	81400417 	ldw	r5,16(r16)
20096330:	8809883a 	mov	r4,r17
20096334:	00911280 	call	20091128 <_free_r>
20096338:	003fe706 	br	200962d8 <__flash_rwdata_start+0xffffb46c>
2009633c:	0005883a 	mov	r2,zero
20096340:	f800283a 	ret

20096344 <fclose>:
20096344:	00800034 	movhi	r2,0
20096348:	108a8c04 	addi	r2,r2,10800
2009634c:	200b883a 	mov	r5,r4
20096350:	11000017 	ldw	r4,0(r2)
20096354:	00962541 	jmpi	20096254 <_fclose_r>

20096358 <_fputwc_r>:
20096358:	3080030b 	ldhu	r2,12(r6)
2009635c:	defff804 	addi	sp,sp,-32
20096360:	dcc00415 	stw	r19,16(sp)
20096364:	dc800315 	stw	r18,12(sp)
20096368:	dc000115 	stw	r16,4(sp)
2009636c:	dfc00715 	stw	ra,28(sp)
20096370:	dd400615 	stw	r21,24(sp)
20096374:	dd000515 	stw	r20,20(sp)
20096378:	dc400215 	stw	r17,8(sp)
2009637c:	10c8000c 	andi	r3,r2,8192
20096380:	3021883a 	mov	r16,r6
20096384:	2027883a 	mov	r19,r4
20096388:	2825883a 	mov	r18,r5
2009638c:	1800051e 	bne	r3,zero,200963a4 <_fputwc_r+0x4c>
20096390:	30c01917 	ldw	r3,100(r6)
20096394:	10880014 	ori	r2,r2,8192
20096398:	3080030d 	sth	r2,12(r6)
2009639c:	18880014 	ori	r2,r3,8192
200963a0:	30801915 	stw	r2,100(r6)
200963a4:	0091ae80 	call	20091ae8 <__locale_mb_cur_max>
200963a8:	00c00044 	movi	r3,1
200963ac:	10c03e26 	beq	r2,r3,200964a8 <_fputwc_r+0x150>
200963b0:	9809883a 	mov	r4,r19
200963b4:	d80b883a 	mov	r5,sp
200963b8:	900d883a 	mov	r6,r18
200963bc:	81c01704 	addi	r7,r16,92
200963c0:	009669c0 	call	2009669c <_wcrtomb_r>
200963c4:	1029883a 	mov	r20,r2
200963c8:	00bfffc4 	movi	r2,-1
200963cc:	a0802026 	beq	r20,r2,20096450 <_fputwc_r+0xf8>
200963d0:	d9400003 	ldbu	r5,0(sp)
200963d4:	a0001c26 	beq	r20,zero,20096448 <_fputwc_r+0xf0>
200963d8:	0023883a 	mov	r17,zero
200963dc:	05400284 	movi	r21,10
200963e0:	00000906 	br	20096408 <_fputwc_r+0xb0>
200963e4:	80800017 	ldw	r2,0(r16)
200963e8:	11400005 	stb	r5,0(r2)
200963ec:	80c00017 	ldw	r3,0(r16)
200963f0:	18c00044 	addi	r3,r3,1
200963f4:	80c00015 	stw	r3,0(r16)
200963f8:	8c400044 	addi	r17,r17,1
200963fc:	dc45883a 	add	r2,sp,r17
20096400:	8d00112e 	bgeu	r17,r20,20096448 <_fputwc_r+0xf0>
20096404:	11400003 	ldbu	r5,0(r2)
20096408:	80c00217 	ldw	r3,8(r16)
2009640c:	18ffffc4 	addi	r3,r3,-1
20096410:	80c00215 	stw	r3,8(r16)
20096414:	183ff30e 	bge	r3,zero,200963e4 <__flash_rwdata_start+0xffffb578>
20096418:	80800617 	ldw	r2,24(r16)
2009641c:	18801916 	blt	r3,r2,20096484 <_fputwc_r+0x12c>
20096420:	80800017 	ldw	r2,0(r16)
20096424:	11400005 	stb	r5,0(r2)
20096428:	80800017 	ldw	r2,0(r16)
2009642c:	10c00003 	ldbu	r3,0(r2)
20096430:	10800044 	addi	r2,r2,1
20096434:	1d402326 	beq	r3,r21,200964c4 <_fputwc_r+0x16c>
20096438:	80800015 	stw	r2,0(r16)
2009643c:	8c400044 	addi	r17,r17,1
20096440:	dc45883a 	add	r2,sp,r17
20096444:	8d3fef36 	bltu	r17,r20,20096404 <__flash_rwdata_start+0xffffb598>
20096448:	9005883a 	mov	r2,r18
2009644c:	00000406 	br	20096460 <_fputwc_r+0x108>
20096450:	80c0030b 	ldhu	r3,12(r16)
20096454:	a005883a 	mov	r2,r20
20096458:	18c01014 	ori	r3,r3,64
2009645c:	80c0030d 	sth	r3,12(r16)
20096460:	dfc00717 	ldw	ra,28(sp)
20096464:	dd400617 	ldw	r21,24(sp)
20096468:	dd000517 	ldw	r20,20(sp)
2009646c:	dcc00417 	ldw	r19,16(sp)
20096470:	dc800317 	ldw	r18,12(sp)
20096474:	dc400217 	ldw	r17,8(sp)
20096478:	dc000117 	ldw	r16,4(sp)
2009647c:	dec00804 	addi	sp,sp,32
20096480:	f800283a 	ret
20096484:	9809883a 	mov	r4,r19
20096488:	29403fcc 	andi	r5,r5,255
2009648c:	800d883a 	mov	r6,r16
20096490:	0095f8c0 	call	20095f8c <__swbuf_r>
20096494:	10bfffe0 	cmpeqi	r2,r2,-1
20096498:	10803fcc 	andi	r2,r2,255
2009649c:	103fd626 	beq	r2,zero,200963f8 <__flash_rwdata_start+0xffffb58c>
200964a0:	00bfffc4 	movi	r2,-1
200964a4:	003fee06 	br	20096460 <__flash_rwdata_start+0xffffb5f4>
200964a8:	90ffffc4 	addi	r3,r18,-1
200964ac:	01003f84 	movi	r4,254
200964b0:	20ffbf36 	bltu	r4,r3,200963b0 <__flash_rwdata_start+0xffffb544>
200964b4:	900b883a 	mov	r5,r18
200964b8:	dc800005 	stb	r18,0(sp)
200964bc:	1029883a 	mov	r20,r2
200964c0:	003fc506 	br	200963d8 <__flash_rwdata_start+0xffffb56c>
200964c4:	9809883a 	mov	r4,r19
200964c8:	a80b883a 	mov	r5,r21
200964cc:	800d883a 	mov	r6,r16
200964d0:	0095f8c0 	call	20095f8c <__swbuf_r>
200964d4:	10bfffe0 	cmpeqi	r2,r2,-1
200964d8:	003fef06 	br	20096498 <__flash_rwdata_start+0xffffb62c>

200964dc <fputwc>:
200964dc:	00800034 	movhi	r2,0
200964e0:	defffc04 	addi	sp,sp,-16
200964e4:	108a8c04 	addi	r2,r2,10800
200964e8:	dc000115 	stw	r16,4(sp)
200964ec:	14000017 	ldw	r16,0(r2)
200964f0:	dc400215 	stw	r17,8(sp)
200964f4:	dfc00315 	stw	ra,12(sp)
200964f8:	2023883a 	mov	r17,r4
200964fc:	280d883a 	mov	r6,r5
20096500:	80000626 	beq	r16,zero,2009651c <fputwc+0x40>
20096504:	80800e17 	ldw	r2,56(r16)
20096508:	1000041e 	bne	r2,zero,2009651c <fputwc+0x40>
2009650c:	8009883a 	mov	r4,r16
20096510:	d9400015 	stw	r5,0(sp)
20096514:	0090fb40 	call	20090fb4 <__sinit>
20096518:	d9800017 	ldw	r6,0(sp)
2009651c:	8009883a 	mov	r4,r16
20096520:	880b883a 	mov	r5,r17
20096524:	dfc00317 	ldw	ra,12(sp)
20096528:	dc400217 	ldw	r17,8(sp)
2009652c:	dc000117 	ldw	r16,4(sp)
20096530:	dec00404 	addi	sp,sp,16
20096534:	00963581 	jmpi	20096358 <_fputwc_r>

20096538 <_fstat_r>:
20096538:	defffd04 	addi	sp,sp,-12
2009653c:	dc000015 	stw	r16,0(sp)
20096540:	04000034 	movhi	r16,0
20096544:	dc400115 	stw	r17,4(sp)
20096548:	840ab004 	addi	r16,r16,10944
2009654c:	2023883a 	mov	r17,r4
20096550:	2809883a 	mov	r4,r5
20096554:	300b883a 	mov	r5,r6
20096558:	dfc00215 	stw	ra,8(sp)
2009655c:	80000015 	stw	zero,0(r16)
20096560:	00977600 	call	20097760 <fstat>
20096564:	00ffffc4 	movi	r3,-1
20096568:	10c00526 	beq	r2,r3,20096580 <_fstat_r+0x48>
2009656c:	dfc00217 	ldw	ra,8(sp)
20096570:	dc400117 	ldw	r17,4(sp)
20096574:	dc000017 	ldw	r16,0(sp)
20096578:	dec00304 	addi	sp,sp,12
2009657c:	f800283a 	ret
20096580:	80c00017 	ldw	r3,0(r16)
20096584:	183ff926 	beq	r3,zero,2009656c <__flash_rwdata_start+0xffffb700>
20096588:	88c00015 	stw	r3,0(r17)
2009658c:	003ff706 	br	2009656c <__flash_rwdata_start+0xffffb700>

20096590 <_isatty_r>:
20096590:	defffd04 	addi	sp,sp,-12
20096594:	dc000015 	stw	r16,0(sp)
20096598:	04000034 	movhi	r16,0
2009659c:	dc400115 	stw	r17,4(sp)
200965a0:	840ab004 	addi	r16,r16,10944
200965a4:	2023883a 	mov	r17,r4
200965a8:	2809883a 	mov	r4,r5
200965ac:	dfc00215 	stw	ra,8(sp)
200965b0:	80000015 	stw	zero,0(r16)
200965b4:	00978a00 	call	200978a0 <isatty>
200965b8:	00ffffc4 	movi	r3,-1
200965bc:	10c00526 	beq	r2,r3,200965d4 <_isatty_r+0x44>
200965c0:	dfc00217 	ldw	ra,8(sp)
200965c4:	dc400117 	ldw	r17,4(sp)
200965c8:	dc000017 	ldw	r16,0(sp)
200965cc:	dec00304 	addi	sp,sp,12
200965d0:	f800283a 	ret
200965d4:	80c00017 	ldw	r3,0(r16)
200965d8:	183ff926 	beq	r3,zero,200965c0 <__flash_rwdata_start+0xffffb754>
200965dc:	88c00015 	stw	r3,0(r17)
200965e0:	003ff706 	br	200965c0 <__flash_rwdata_start+0xffffb754>

200965e4 <_lseek_r>:
200965e4:	defffd04 	addi	sp,sp,-12
200965e8:	dc000015 	stw	r16,0(sp)
200965ec:	04000034 	movhi	r16,0
200965f0:	dc400115 	stw	r17,4(sp)
200965f4:	840ab004 	addi	r16,r16,10944
200965f8:	2023883a 	mov	r17,r4
200965fc:	2809883a 	mov	r4,r5
20096600:	300b883a 	mov	r5,r6
20096604:	380d883a 	mov	r6,r7
20096608:	dfc00215 	stw	ra,8(sp)
2009660c:	80000015 	stw	zero,0(r16)
20096610:	00979fc0 	call	200979fc <lseek>
20096614:	00ffffc4 	movi	r3,-1
20096618:	10c00526 	beq	r2,r3,20096630 <_lseek_r+0x4c>
2009661c:	dfc00217 	ldw	ra,8(sp)
20096620:	dc400117 	ldw	r17,4(sp)
20096624:	dc000017 	ldw	r16,0(sp)
20096628:	dec00304 	addi	sp,sp,12
2009662c:	f800283a 	ret
20096630:	80c00017 	ldw	r3,0(r16)
20096634:	183ff926 	beq	r3,zero,2009661c <__flash_rwdata_start+0xffffb7b0>
20096638:	88c00015 	stw	r3,0(r17)
2009663c:	003ff706 	br	2009661c <__flash_rwdata_start+0xffffb7b0>

20096640 <_read_r>:
20096640:	defffd04 	addi	sp,sp,-12
20096644:	dc000015 	stw	r16,0(sp)
20096648:	04000034 	movhi	r16,0
2009664c:	dc400115 	stw	r17,4(sp)
20096650:	840ab004 	addi	r16,r16,10944
20096654:	2023883a 	mov	r17,r4
20096658:	2809883a 	mov	r4,r5
2009665c:	300b883a 	mov	r5,r6
20096660:	380d883a 	mov	r6,r7
20096664:	dfc00215 	stw	ra,8(sp)
20096668:	80000015 	stw	zero,0(r16)
2009666c:	0097aec0 	call	20097aec <read>
20096670:	00ffffc4 	movi	r3,-1
20096674:	10c00526 	beq	r2,r3,2009668c <_read_r+0x4c>
20096678:	dfc00217 	ldw	ra,8(sp)
2009667c:	dc400117 	ldw	r17,4(sp)
20096680:	dc000017 	ldw	r16,0(sp)
20096684:	dec00304 	addi	sp,sp,12
20096688:	f800283a 	ret
2009668c:	80c00017 	ldw	r3,0(r16)
20096690:	183ff926 	beq	r3,zero,20096678 <__flash_rwdata_start+0xffffb80c>
20096694:	88c00015 	stw	r3,0(r17)
20096698:	003ff706 	br	20096678 <__flash_rwdata_start+0xffffb80c>

2009669c <_wcrtomb_r>:
2009669c:	defff604 	addi	sp,sp,-40
200966a0:	00800034 	movhi	r2,0
200966a4:	dc800815 	stw	r18,32(sp)
200966a8:	dc400715 	stw	r17,28(sp)
200966ac:	dc000615 	stw	r16,24(sp)
200966b0:	108a9004 	addi	r2,r2,10816
200966b4:	dfc00915 	stw	ra,36(sp)
200966b8:	2021883a 	mov	r16,r4
200966bc:	3823883a 	mov	r17,r7
200966c0:	14800017 	ldw	r18,0(r2)
200966c4:	28001426 	beq	r5,zero,20096718 <_wcrtomb_r+0x7c>
200966c8:	d9400415 	stw	r5,16(sp)
200966cc:	d9800515 	stw	r6,20(sp)
200966d0:	0091adc0 	call	20091adc <__locale_charset>
200966d4:	d9400417 	ldw	r5,16(sp)
200966d8:	d9800517 	ldw	r6,20(sp)
200966dc:	8009883a 	mov	r4,r16
200966e0:	dc400015 	stw	r17,0(sp)
200966e4:	100f883a 	mov	r7,r2
200966e8:	903ee83a 	callr	r18
200966ec:	00ffffc4 	movi	r3,-1
200966f0:	10c0031e 	bne	r2,r3,20096700 <_wcrtomb_r+0x64>
200966f4:	88000015 	stw	zero,0(r17)
200966f8:	00c02284 	movi	r3,138
200966fc:	80c00015 	stw	r3,0(r16)
20096700:	dfc00917 	ldw	ra,36(sp)
20096704:	dc800817 	ldw	r18,32(sp)
20096708:	dc400717 	ldw	r17,28(sp)
2009670c:	dc000617 	ldw	r16,24(sp)
20096710:	dec00a04 	addi	sp,sp,40
20096714:	f800283a 	ret
20096718:	0091adc0 	call	20091adc <__locale_charset>
2009671c:	8009883a 	mov	r4,r16
20096720:	dc400015 	stw	r17,0(sp)
20096724:	d9400104 	addi	r5,sp,4
20096728:	000d883a 	mov	r6,zero
2009672c:	100f883a 	mov	r7,r2
20096730:	903ee83a 	callr	r18
20096734:	003fed06 	br	200966ec <__flash_rwdata_start+0xffffb880>

20096738 <wcrtomb>:
20096738:	defff604 	addi	sp,sp,-40
2009673c:	00800034 	movhi	r2,0
20096740:	dc800615 	stw	r18,24(sp)
20096744:	dc400515 	stw	r17,20(sp)
20096748:	dc000415 	stw	r16,16(sp)
2009674c:	108a8c04 	addi	r2,r2,10800
20096750:	dfc00915 	stw	ra,36(sp)
20096754:	dd000815 	stw	r20,32(sp)
20096758:	dcc00715 	stw	r19,28(sp)
2009675c:	2021883a 	mov	r16,r4
20096760:	3025883a 	mov	r18,r6
20096764:	14400017 	ldw	r17,0(r2)
20096768:	20001826 	beq	r4,zero,200967cc <wcrtomb+0x94>
2009676c:	00800034 	movhi	r2,0
20096770:	108a9004 	addi	r2,r2,10816
20096774:	15000017 	ldw	r20,0(r2)
20096778:	2827883a 	mov	r19,r5
2009677c:	0091adc0 	call	20091adc <__locale_charset>
20096780:	8809883a 	mov	r4,r17
20096784:	dc800015 	stw	r18,0(sp)
20096788:	800b883a 	mov	r5,r16
2009678c:	980d883a 	mov	r6,r19
20096790:	100f883a 	mov	r7,r2
20096794:	a03ee83a 	callr	r20
20096798:	00ffffc4 	movi	r3,-1
2009679c:	10c0031e 	bne	r2,r3,200967ac <wcrtomb+0x74>
200967a0:	90000015 	stw	zero,0(r18)
200967a4:	00c02284 	movi	r3,138
200967a8:	88c00015 	stw	r3,0(r17)
200967ac:	dfc00917 	ldw	ra,36(sp)
200967b0:	dd000817 	ldw	r20,32(sp)
200967b4:	dcc00717 	ldw	r19,28(sp)
200967b8:	dc800617 	ldw	r18,24(sp)
200967bc:	dc400517 	ldw	r17,20(sp)
200967c0:	dc000417 	ldw	r16,16(sp)
200967c4:	dec00a04 	addi	sp,sp,40
200967c8:	f800283a 	ret
200967cc:	00800034 	movhi	r2,0
200967d0:	108a9004 	addi	r2,r2,10816
200967d4:	14000017 	ldw	r16,0(r2)
200967d8:	0091adc0 	call	20091adc <__locale_charset>
200967dc:	8809883a 	mov	r4,r17
200967e0:	dc800015 	stw	r18,0(sp)
200967e4:	d9400104 	addi	r5,sp,4
200967e8:	000d883a 	mov	r6,zero
200967ec:	100f883a 	mov	r7,r2
200967f0:	803ee83a 	callr	r16
200967f4:	003fe806 	br	20096798 <__flash_rwdata_start+0xffffb92c>

200967f8 <__ascii_wctomb>:
200967f8:	28000526 	beq	r5,zero,20096810 <__ascii_wctomb+0x18>
200967fc:	00803fc4 	movi	r2,255
20096800:	11800536 	bltu	r2,r6,20096818 <__ascii_wctomb+0x20>
20096804:	29800005 	stb	r6,0(r5)
20096808:	00800044 	movi	r2,1
2009680c:	f800283a 	ret
20096810:	0005883a 	mov	r2,zero
20096814:	f800283a 	ret
20096818:	00802284 	movi	r2,138
2009681c:	20800015 	stw	r2,0(r4)
20096820:	00bfffc4 	movi	r2,-1
20096824:	f800283a 	ret

20096828 <_wctomb_r>:
20096828:	00800034 	movhi	r2,0
2009682c:	defff904 	addi	sp,sp,-28
20096830:	108a9004 	addi	r2,r2,10816
20096834:	dfc00615 	stw	ra,24(sp)
20096838:	dc400515 	stw	r17,20(sp)
2009683c:	dc000415 	stw	r16,16(sp)
20096840:	3823883a 	mov	r17,r7
20096844:	14000017 	ldw	r16,0(r2)
20096848:	d9000115 	stw	r4,4(sp)
2009684c:	d9400215 	stw	r5,8(sp)
20096850:	d9800315 	stw	r6,12(sp)
20096854:	0091adc0 	call	20091adc <__locale_charset>
20096858:	d9000117 	ldw	r4,4(sp)
2009685c:	d9400217 	ldw	r5,8(sp)
20096860:	d9800317 	ldw	r6,12(sp)
20096864:	dc400015 	stw	r17,0(sp)
20096868:	100f883a 	mov	r7,r2
2009686c:	803ee83a 	callr	r16
20096870:	dfc00617 	ldw	ra,24(sp)
20096874:	dc400517 	ldw	r17,20(sp)
20096878:	dc000417 	ldw	r16,16(sp)
2009687c:	dec00704 	addi	sp,sp,28
20096880:	f800283a 	ret

20096884 <__udivdi3>:
20096884:	defff504 	addi	sp,sp,-44
20096888:	dcc00415 	stw	r19,16(sp)
2009688c:	dc000115 	stw	r16,4(sp)
20096890:	dfc00a15 	stw	ra,40(sp)
20096894:	df000915 	stw	fp,36(sp)
20096898:	ddc00815 	stw	r23,32(sp)
2009689c:	dd800715 	stw	r22,28(sp)
200968a0:	dd400615 	stw	r21,24(sp)
200968a4:	dd000515 	stw	r20,20(sp)
200968a8:	dc800315 	stw	r18,12(sp)
200968ac:	dc400215 	stw	r17,8(sp)
200968b0:	2027883a 	mov	r19,r4
200968b4:	2821883a 	mov	r16,r5
200968b8:	3800421e 	bne	r7,zero,200969c4 <__udivdi3+0x140>
200968bc:	3025883a 	mov	r18,r6
200968c0:	2023883a 	mov	r17,r4
200968c4:	2980542e 	bgeu	r5,r6,20096a18 <__udivdi3+0x194>
200968c8:	00bfffd4 	movui	r2,65535
200968cc:	282d883a 	mov	r22,r5
200968d0:	1180a836 	bltu	r2,r6,20096b74 <__udivdi3+0x2f0>
200968d4:	00803fc4 	movi	r2,255
200968d8:	1181422e 	bgeu	r2,r6,20096de4 <__udivdi3+0x560>
200968dc:	00800204 	movi	r2,8
200968e0:	1007883a 	mov	r3,r2
200968e4:	3084d83a 	srl	r2,r6,r2
200968e8:	01000034 	movhi	r4,0
200968ec:	210191c4 	addi	r4,r4,1607
200968f0:	2085883a 	add	r2,r4,r2
200968f4:	10800003 	ldbu	r2,0(r2)
200968f8:	10c7883a 	add	r3,r2,r3
200968fc:	00800804 	movi	r2,32
20096900:	10c5c83a 	sub	r2,r2,r3
20096904:	10000526 	beq	r2,zero,2009691c <__udivdi3+0x98>
20096908:	80a0983a 	sll	r16,r16,r2
2009690c:	98c6d83a 	srl	r3,r19,r3
20096910:	30a4983a 	sll	r18,r6,r2
20096914:	98a2983a 	sll	r17,r19,r2
20096918:	80ecb03a 	or	r22,r16,r3
2009691c:	902ad43a 	srli	r21,r18,16
20096920:	b009883a 	mov	r4,r22
20096924:	953fffcc 	andi	r20,r18,65535
20096928:	a80b883a 	mov	r5,r21
2009692c:	0086c300 	call	20086c30 <__umodsi3>
20096930:	b009883a 	mov	r4,r22
20096934:	a80b883a 	mov	r5,r21
20096938:	1027883a 	mov	r19,r2
2009693c:	0086c280 	call	20086c28 <__udivsi3>
20096940:	1021883a 	mov	r16,r2
20096944:	8806d43a 	srli	r3,r17,16
20096948:	9804943a 	slli	r2,r19,16
2009694c:	8527383a 	mul	r19,r16,r20
20096950:	10c4b03a 	or	r2,r2,r3
20096954:	14c0052e 	bgeu	r2,r19,2009696c <__udivdi3+0xe8>
20096958:	1485883a 	add	r2,r2,r18
2009695c:	80ffffc4 	addi	r3,r16,-1
20096960:	14800136 	bltu	r2,r18,20096968 <__udivdi3+0xe4>
20096964:	14c13436 	bltu	r2,r19,20096e38 <__udivdi3+0x5b4>
20096968:	1821883a 	mov	r16,r3
2009696c:	14e7c83a 	sub	r19,r2,r19
20096970:	9809883a 	mov	r4,r19
20096974:	a80b883a 	mov	r5,r21
20096978:	0086c300 	call	20086c30 <__umodsi3>
2009697c:	102d883a 	mov	r22,r2
20096980:	9809883a 	mov	r4,r19
20096984:	a80b883a 	mov	r5,r21
20096988:	0086c280 	call	20086c28 <__udivsi3>
2009698c:	b02c943a 	slli	r22,r22,16
20096990:	1529383a 	mul	r20,r2,r20
20096994:	8c7fffcc 	andi	r17,r17,65535
20096998:	b462b03a 	or	r17,r22,r17
2009699c:	8d00052e 	bgeu	r17,r20,200969b4 <__udivdi3+0x130>
200969a0:	8ca3883a 	add	r17,r17,r18
200969a4:	10ffffc4 	addi	r3,r2,-1
200969a8:	8c80f636 	bltu	r17,r18,20096d84 <__udivdi3+0x500>
200969ac:	8d00f52e 	bgeu	r17,r20,20096d84 <__udivdi3+0x500>
200969b0:	10bfff84 	addi	r2,r2,-2
200969b4:	8020943a 	slli	r16,r16,16
200969b8:	0007883a 	mov	r3,zero
200969bc:	1404b03a 	or	r2,r2,r16
200969c0:	00005b06 	br	20096b30 <__udivdi3+0x2ac>
200969c4:	29c05836 	bltu	r5,r7,20096b28 <__udivdi3+0x2a4>
200969c8:	00bfffd4 	movui	r2,65535
200969cc:	11c0642e 	bgeu	r2,r7,20096b60 <__udivdi3+0x2dc>
200969d0:	00804034 	movhi	r2,256
200969d4:	10bfffc4 	addi	r2,r2,-1
200969d8:	11c0f32e 	bgeu	r2,r7,20096da8 <__udivdi3+0x524>
200969dc:	00c00604 	movi	r3,24
200969e0:	180b883a 	mov	r5,r3
200969e4:	38c6d83a 	srl	r3,r7,r3
200969e8:	00800034 	movhi	r2,0
200969ec:	108191c4 	addi	r2,r2,1607
200969f0:	10c7883a 	add	r3,r2,r3
200969f4:	18c00003 	ldbu	r3,0(r3)
200969f8:	01000804 	movi	r4,32
200969fc:	1947883a 	add	r3,r3,r5
20096a00:	20e5c83a 	sub	r18,r4,r3
20096a04:	9000661e 	bne	r18,zero,20096ba0 <__udivdi3+0x31c>
20096a08:	3c00f936 	bltu	r7,r16,20096df0 <__udivdi3+0x56c>
20096a0c:	9985403a 	cmpgeu	r2,r19,r6
20096a10:	0007883a 	mov	r3,zero
20096a14:	00004606 	br	20096b30 <__udivdi3+0x2ac>
20096a18:	3000041e 	bne	r6,zero,20096a2c <__udivdi3+0x1a8>
20096a1c:	01000044 	movi	r4,1
20096a20:	000b883a 	mov	r5,zero
20096a24:	0086c280 	call	20086c28 <__udivsi3>
20096a28:	1025883a 	mov	r18,r2
20096a2c:	00bfffd4 	movui	r2,65535
20096a30:	1480562e 	bgeu	r2,r18,20096b8c <__udivdi3+0x308>
20096a34:	00804034 	movhi	r2,256
20096a38:	10bfffc4 	addi	r2,r2,-1
20096a3c:	1480e32e 	bgeu	r2,r18,20096dcc <__udivdi3+0x548>
20096a40:	00800604 	movi	r2,24
20096a44:	1007883a 	mov	r3,r2
20096a48:	9084d83a 	srl	r2,r18,r2
20096a4c:	01000034 	movhi	r4,0
20096a50:	210191c4 	addi	r4,r4,1607
20096a54:	2085883a 	add	r2,r4,r2
20096a58:	10800003 	ldbu	r2,0(r2)
20096a5c:	10c5883a 	add	r2,r2,r3
20096a60:	00c00804 	movi	r3,32
20096a64:	1887c83a 	sub	r3,r3,r2
20096a68:	1800911e 	bne	r3,zero,20096cb0 <__udivdi3+0x42c>
20096a6c:	9028d43a 	srli	r20,r18,16
20096a70:	84a1c83a 	sub	r16,r16,r18
20096a74:	957fffcc 	andi	r21,r18,65535
20096a78:	00c00044 	movi	r3,1
20096a7c:	8009883a 	mov	r4,r16
20096a80:	a00b883a 	mov	r5,r20
20096a84:	d8c00015 	stw	r3,0(sp)
20096a88:	0086c300 	call	20086c30 <__umodsi3>
20096a8c:	8009883a 	mov	r4,r16
20096a90:	a00b883a 	mov	r5,r20
20096a94:	1027883a 	mov	r19,r2
20096a98:	0086c280 	call	20086c28 <__udivsi3>
20096a9c:	1021883a 	mov	r16,r2
20096aa0:	880cd43a 	srli	r6,r17,16
20096aa4:	9804943a 	slli	r2,r19,16
20096aa8:	8567383a 	mul	r19,r16,r21
20096aac:	d8c00017 	ldw	r3,0(sp)
20096ab0:	1188b03a 	or	r4,r2,r6
20096ab4:	24c0052e 	bgeu	r4,r19,20096acc <__udivdi3+0x248>
20096ab8:	2489883a 	add	r4,r4,r18
20096abc:	80bfffc4 	addi	r2,r16,-1
20096ac0:	24800136 	bltu	r4,r18,20096ac8 <__udivdi3+0x244>
20096ac4:	24c0d936 	bltu	r4,r19,20096e2c <__udivdi3+0x5a8>
20096ac8:	1021883a 	mov	r16,r2
20096acc:	24e7c83a 	sub	r19,r4,r19
20096ad0:	9809883a 	mov	r4,r19
20096ad4:	a00b883a 	mov	r5,r20
20096ad8:	d8c00015 	stw	r3,0(sp)
20096adc:	0086c300 	call	20086c30 <__umodsi3>
20096ae0:	102d883a 	mov	r22,r2
20096ae4:	9809883a 	mov	r4,r19
20096ae8:	a00b883a 	mov	r5,r20
20096aec:	0086c280 	call	20086c28 <__udivsi3>
20096af0:	b02c943a 	slli	r22,r22,16
20096af4:	156b383a 	mul	r21,r2,r21
20096af8:	8c7fffcc 	andi	r17,r17,65535
20096afc:	b462b03a 	or	r17,r22,r17
20096b00:	d8c00017 	ldw	r3,0(sp)
20096b04:	8d40052e 	bgeu	r17,r21,20096b1c <__udivdi3+0x298>
20096b08:	8ca3883a 	add	r17,r17,r18
20096b0c:	113fffc4 	addi	r4,r2,-1
20096b10:	8c809a36 	bltu	r17,r18,20096d7c <__udivdi3+0x4f8>
20096b14:	8d40992e 	bgeu	r17,r21,20096d7c <__udivdi3+0x4f8>
20096b18:	10bfff84 	addi	r2,r2,-2
20096b1c:	8020943a 	slli	r16,r16,16
20096b20:	1404b03a 	or	r2,r2,r16
20096b24:	00000206 	br	20096b30 <__udivdi3+0x2ac>
20096b28:	0007883a 	mov	r3,zero
20096b2c:	0005883a 	mov	r2,zero
20096b30:	dfc00a17 	ldw	ra,40(sp)
20096b34:	df000917 	ldw	fp,36(sp)
20096b38:	ddc00817 	ldw	r23,32(sp)
20096b3c:	dd800717 	ldw	r22,28(sp)
20096b40:	dd400617 	ldw	r21,24(sp)
20096b44:	dd000517 	ldw	r20,20(sp)
20096b48:	dcc00417 	ldw	r19,16(sp)
20096b4c:	dc800317 	ldw	r18,12(sp)
20096b50:	dc400217 	ldw	r17,8(sp)
20096b54:	dc000117 	ldw	r16,4(sp)
20096b58:	dec00b04 	addi	sp,sp,44
20096b5c:	f800283a 	ret
20096b60:	00803fc4 	movi	r2,255
20096b64:	11c0932e 	bgeu	r2,r7,20096db4 <__udivdi3+0x530>
20096b68:	00c00204 	movi	r3,8
20096b6c:	180b883a 	mov	r5,r3
20096b70:	003f9c06 	br	200969e4 <__flash_rwdata_start+0xffffbb78>
20096b74:	00804034 	movhi	r2,256
20096b78:	10bfffc4 	addi	r2,r2,-1
20096b7c:	1180902e 	bgeu	r2,r6,20096dc0 <__udivdi3+0x53c>
20096b80:	00800604 	movi	r2,24
20096b84:	1007883a 	mov	r3,r2
20096b88:	003f5606 	br	200968e4 <__flash_rwdata_start+0xffffba78>
20096b8c:	00803fc4 	movi	r2,255
20096b90:	1480912e 	bgeu	r2,r18,20096dd8 <__udivdi3+0x554>
20096b94:	00800204 	movi	r2,8
20096b98:	1007883a 	mov	r3,r2
20096b9c:	003faa06 	br	20096a48 <__flash_rwdata_start+0xffffbbdc>
20096ba0:	30eed83a 	srl	r23,r6,r3
20096ba4:	3c8e983a 	sll	r7,r7,r18
20096ba8:	80f8d83a 	srl	fp,r16,r3
20096bac:	98c6d83a 	srl	r3,r19,r3
20096bb0:	3deeb03a 	or	r23,r7,r23
20096bb4:	b828d43a 	srli	r20,r23,16
20096bb8:	84a0983a 	sll	r16,r16,r18
20096bbc:	e009883a 	mov	r4,fp
20096bc0:	a00b883a 	mov	r5,r20
20096bc4:	80e2b03a 	or	r17,r16,r3
20096bc8:	34aa983a 	sll	r21,r6,r18
20096bcc:	0086c300 	call	20086c30 <__umodsi3>
20096bd0:	e009883a 	mov	r4,fp
20096bd4:	a00b883a 	mov	r5,r20
20096bd8:	102d883a 	mov	r22,r2
20096bdc:	0086c280 	call	20086c28 <__udivsi3>
20096be0:	1021883a 	mov	r16,r2
20096be4:	bf3fffcc 	andi	fp,r23,65535
20096be8:	b004943a 	slli	r2,r22,16
20096bec:	8808d43a 	srli	r4,r17,16
20096bf0:	872d383a 	mul	r22,r16,fp
20096bf4:	1104b03a 	or	r2,r2,r4
20096bf8:	1580042e 	bgeu	r2,r22,20096c0c <__udivdi3+0x388>
20096bfc:	15c5883a 	add	r2,r2,r23
20096c00:	80ffffc4 	addi	r3,r16,-1
20096c04:	15c0812e 	bgeu	r2,r23,20096e0c <__udivdi3+0x588>
20096c08:	1821883a 	mov	r16,r3
20096c0c:	15adc83a 	sub	r22,r2,r22
20096c10:	b009883a 	mov	r4,r22
20096c14:	a00b883a 	mov	r5,r20
20096c18:	0086c300 	call	20086c30 <__umodsi3>
20096c1c:	a00b883a 	mov	r5,r20
20096c20:	b009883a 	mov	r4,r22
20096c24:	d8800015 	stw	r2,0(sp)
20096c28:	0086c280 	call	20086c28 <__udivsi3>
20096c2c:	d8c00017 	ldw	r3,0(sp)
20096c30:	170b383a 	mul	r5,r2,fp
20096c34:	8c7fffcc 	andi	r17,r17,65535
20096c38:	1806943a 	slli	r3,r3,16
20096c3c:	1c46b03a 	or	r3,r3,r17
20096c40:	1940042e 	bgeu	r3,r5,20096c54 <__udivdi3+0x3d0>
20096c44:	1dc7883a 	add	r3,r3,r23
20096c48:	113fffc4 	addi	r4,r2,-1
20096c4c:	1dc06b2e 	bgeu	r3,r23,20096dfc <__udivdi3+0x578>
20096c50:	2005883a 	mov	r2,r4
20096c54:	8020943a 	slli	r16,r16,16
20096c58:	a9ffffcc 	andi	r7,r21,65535
20096c5c:	a82ad43a 	srli	r21,r21,16
20096c60:	1404b03a 	or	r2,r2,r16
20096c64:	113fffcc 	andi	r4,r2,65535
20096c68:	100cd43a 	srli	r6,r2,16
20096c6c:	21d3383a 	mul	r9,r4,r7
20096c70:	2549383a 	mul	r4,r4,r21
20096c74:	31cf383a 	mul	r7,r6,r7
20096c78:	4810d43a 	srli	r8,r9,16
20096c7c:	1947c83a 	sub	r3,r3,r5
20096c80:	3909883a 	add	r4,r7,r4
20096c84:	2209883a 	add	r4,r4,r8
20096c88:	354d383a 	mul	r6,r6,r21
20096c8c:	21c0022e 	bgeu	r4,r7,20096c98 <__udivdi3+0x414>
20096c90:	01400074 	movhi	r5,1
20096c94:	314d883a 	add	r6,r6,r5
20096c98:	202ad43a 	srli	r21,r4,16
20096c9c:	354d883a 	add	r6,r6,r21
20096ca0:	19803f36 	bltu	r3,r6,20096da0 <__udivdi3+0x51c>
20096ca4:	19803926 	beq	r3,r6,20096d8c <__udivdi3+0x508>
20096ca8:	0007883a 	mov	r3,zero
20096cac:	003fa006 	br	20096b30 <__flash_rwdata_start+0xffffbcc4>
20096cb0:	90e4983a 	sll	r18,r18,r3
20096cb4:	80aad83a 	srl	r21,r16,r2
20096cb8:	80e0983a 	sll	r16,r16,r3
20096cbc:	9028d43a 	srli	r20,r18,16
20096cc0:	9884d83a 	srl	r2,r19,r2
20096cc4:	a809883a 	mov	r4,r21
20096cc8:	a00b883a 	mov	r5,r20
20096ccc:	80acb03a 	or	r22,r16,r2
20096cd0:	98e2983a 	sll	r17,r19,r3
20096cd4:	0086c300 	call	20086c30 <__umodsi3>
20096cd8:	a809883a 	mov	r4,r21
20096cdc:	a00b883a 	mov	r5,r20
20096ce0:	1021883a 	mov	r16,r2
20096ce4:	0086c280 	call	20086c28 <__udivsi3>
20096ce8:	957fffcc 	andi	r21,r18,65535
20096cec:	8020943a 	slli	r16,r16,16
20096cf0:	b00ad43a 	srli	r5,r22,16
20096cf4:	1567383a 	mul	r19,r2,r21
20096cf8:	102f883a 	mov	r23,r2
20096cfc:	8148b03a 	or	r4,r16,r5
20096d00:	24c0062e 	bgeu	r4,r19,20096d1c <__udivdi3+0x498>
20096d04:	2489883a 	add	r4,r4,r18
20096d08:	10bfffc4 	addi	r2,r2,-1
20096d0c:	24804536 	bltu	r4,r18,20096e24 <__udivdi3+0x5a0>
20096d10:	24c0442e 	bgeu	r4,r19,20096e24 <__udivdi3+0x5a0>
20096d14:	bdffff84 	addi	r23,r23,-2
20096d18:	2489883a 	add	r4,r4,r18
20096d1c:	24e7c83a 	sub	r19,r4,r19
20096d20:	9809883a 	mov	r4,r19
20096d24:	a00b883a 	mov	r5,r20
20096d28:	0086c300 	call	20086c30 <__umodsi3>
20096d2c:	1021883a 	mov	r16,r2
20096d30:	9809883a 	mov	r4,r19
20096d34:	a00b883a 	mov	r5,r20
20096d38:	0086c280 	call	20086c28 <__udivsi3>
20096d3c:	8020943a 	slli	r16,r16,16
20096d40:	1007883a 	mov	r3,r2
20096d44:	1545383a 	mul	r2,r2,r21
20096d48:	b13fffcc 	andi	r4,r22,65535
20096d4c:	8108b03a 	or	r4,r16,r4
20096d50:	2080062e 	bgeu	r4,r2,20096d6c <__udivdi3+0x4e8>
20096d54:	2489883a 	add	r4,r4,r18
20096d58:	197fffc4 	addi	r5,r3,-1
20096d5c:	24802f36 	bltu	r4,r18,20096e1c <__udivdi3+0x598>
20096d60:	20802e2e 	bgeu	r4,r2,20096e1c <__udivdi3+0x598>
20096d64:	18ffff84 	addi	r3,r3,-2
20096d68:	2489883a 	add	r4,r4,r18
20096d6c:	b82e943a 	slli	r23,r23,16
20096d70:	20a1c83a 	sub	r16,r4,r2
20096d74:	1dc6b03a 	or	r3,r3,r23
20096d78:	003f4006 	br	20096a7c <__flash_rwdata_start+0xffffbc10>
20096d7c:	2005883a 	mov	r2,r4
20096d80:	003f6606 	br	20096b1c <__flash_rwdata_start+0xffffbcb0>
20096d84:	1805883a 	mov	r2,r3
20096d88:	003f0a06 	br	200969b4 <__flash_rwdata_start+0xffffbb48>
20096d8c:	2006943a 	slli	r3,r4,16
20096d90:	9c88983a 	sll	r4,r19,r18
20096d94:	4a7fffcc 	andi	r9,r9,65535
20096d98:	1a47883a 	add	r3,r3,r9
20096d9c:	20ffc22e 	bgeu	r4,r3,20096ca8 <__flash_rwdata_start+0xffffbe3c>
20096da0:	10bfffc4 	addi	r2,r2,-1
20096da4:	003fc006 	br	20096ca8 <__flash_rwdata_start+0xffffbe3c>
20096da8:	00c00404 	movi	r3,16
20096dac:	180b883a 	mov	r5,r3
20096db0:	003f0c06 	br	200969e4 <__flash_rwdata_start+0xffffbb78>
20096db4:	0007883a 	mov	r3,zero
20096db8:	000b883a 	mov	r5,zero
20096dbc:	003f0906 	br	200969e4 <__flash_rwdata_start+0xffffbb78>
20096dc0:	00800404 	movi	r2,16
20096dc4:	1007883a 	mov	r3,r2
20096dc8:	003ec606 	br	200968e4 <__flash_rwdata_start+0xffffba78>
20096dcc:	00800404 	movi	r2,16
20096dd0:	1007883a 	mov	r3,r2
20096dd4:	003f1c06 	br	20096a48 <__flash_rwdata_start+0xffffbbdc>
20096dd8:	0005883a 	mov	r2,zero
20096ddc:	0007883a 	mov	r3,zero
20096de0:	003f1906 	br	20096a48 <__flash_rwdata_start+0xffffbbdc>
20096de4:	0005883a 	mov	r2,zero
20096de8:	0007883a 	mov	r3,zero
20096dec:	003ebd06 	br	200968e4 <__flash_rwdata_start+0xffffba78>
20096df0:	0007883a 	mov	r3,zero
20096df4:	00800044 	movi	r2,1
20096df8:	003f4d06 	br	20096b30 <__flash_rwdata_start+0xffffbcc4>
20096dfc:	197f942e 	bgeu	r3,r5,20096c50 <__flash_rwdata_start+0xffffbde4>
20096e00:	10bfff84 	addi	r2,r2,-2
20096e04:	1dc7883a 	add	r3,r3,r23
20096e08:	003f9206 	br	20096c54 <__flash_rwdata_start+0xffffbde8>
20096e0c:	15bf7e2e 	bgeu	r2,r22,20096c08 <__flash_rwdata_start+0xffffbd9c>
20096e10:	843fff84 	addi	r16,r16,-2
20096e14:	15c5883a 	add	r2,r2,r23
20096e18:	003f7c06 	br	20096c0c <__flash_rwdata_start+0xffffbda0>
20096e1c:	2807883a 	mov	r3,r5
20096e20:	003fd206 	br	20096d6c <__flash_rwdata_start+0xffffbf00>
20096e24:	102f883a 	mov	r23,r2
20096e28:	003fbc06 	br	20096d1c <__flash_rwdata_start+0xffffbeb0>
20096e2c:	843fff84 	addi	r16,r16,-2
20096e30:	2489883a 	add	r4,r4,r18
20096e34:	003f2506 	br	20096acc <__flash_rwdata_start+0xffffbc60>
20096e38:	843fff84 	addi	r16,r16,-2
20096e3c:	1485883a 	add	r2,r2,r18
20096e40:	003eca06 	br	2009696c <__flash_rwdata_start+0xffffbb00>

20096e44 <__umoddi3>:
20096e44:	defff404 	addi	sp,sp,-48
20096e48:	ddc00915 	stw	r23,36(sp)
20096e4c:	dc400315 	stw	r17,12(sp)
20096e50:	dc000215 	stw	r16,8(sp)
20096e54:	dfc00b15 	stw	ra,44(sp)
20096e58:	df000a15 	stw	fp,40(sp)
20096e5c:	dd800815 	stw	r22,32(sp)
20096e60:	dd400715 	stw	r21,28(sp)
20096e64:	dd000615 	stw	r20,24(sp)
20096e68:	dcc00515 	stw	r19,20(sp)
20096e6c:	dc800415 	stw	r18,16(sp)
20096e70:	2021883a 	mov	r16,r4
20096e74:	2823883a 	mov	r17,r5
20096e78:	282f883a 	mov	r23,r5
20096e7c:	3800381e 	bne	r7,zero,20096f60 <__umoddi3+0x11c>
20096e80:	3027883a 	mov	r19,r6
20096e84:	2029883a 	mov	r20,r4
20096e88:	29804e2e 	bgeu	r5,r6,20096fc4 <__umoddi3+0x180>
20096e8c:	00bfffd4 	movui	r2,65535
20096e90:	11809c36 	bltu	r2,r6,20097104 <__umoddi3+0x2c0>
20096e94:	00803fc4 	movi	r2,255
20096e98:	11813b2e 	bgeu	r2,r6,20097388 <__umoddi3+0x544>
20096e9c:	01400204 	movi	r5,8
20096ea0:	2805883a 	mov	r2,r5
20096ea4:	314ad83a 	srl	r5,r6,r5
20096ea8:	00c00034 	movhi	r3,0
20096eac:	18c191c4 	addi	r3,r3,1607
20096eb0:	194b883a 	add	r5,r3,r5
20096eb4:	29000003 	ldbu	r4,0(r5)
20096eb8:	2089883a 	add	r4,r4,r2
20096ebc:	00800804 	movi	r2,32
20096ec0:	1105c83a 	sub	r2,r2,r4
20096ec4:	1000ec26 	beq	r2,zero,20097278 <__umoddi3+0x434>
20096ec8:	88a2983a 	sll	r17,r17,r2
20096ecc:	8108d83a 	srl	r4,r16,r4
20096ed0:	30a6983a 	sll	r19,r6,r2
20096ed4:	80a8983a 	sll	r20,r16,r2
20096ed8:	1025883a 	mov	r18,r2
20096edc:	892eb03a 	or	r23,r17,r4
20096ee0:	982cd43a 	srli	r22,r19,16
20096ee4:	b809883a 	mov	r4,r23
20096ee8:	9d7fffcc 	andi	r21,r19,65535
20096eec:	b00b883a 	mov	r5,r22
20096ef0:	0086c300 	call	20086c30 <__umodsi3>
20096ef4:	b809883a 	mov	r4,r23
20096ef8:	b00b883a 	mov	r5,r22
20096efc:	1021883a 	mov	r16,r2
20096f00:	0086c280 	call	20086c28 <__udivsi3>
20096f04:	8020943a 	slli	r16,r16,16
20096f08:	a00cd43a 	srli	r6,r20,16
20096f0c:	1545383a 	mul	r2,r2,r21
20096f10:	8188b03a 	or	r4,r16,r6
20096f14:	2080042e 	bgeu	r4,r2,20096f28 <__umoddi3+0xe4>
20096f18:	24c9883a 	add	r4,r4,r19
20096f1c:	24c00236 	bltu	r4,r19,20096f28 <__umoddi3+0xe4>
20096f20:	2080012e 	bgeu	r4,r2,20096f28 <__umoddi3+0xe4>
20096f24:	24c9883a 	add	r4,r4,r19
20096f28:	20a3c83a 	sub	r17,r4,r2
20096f2c:	8809883a 	mov	r4,r17
20096f30:	b00b883a 	mov	r5,r22
20096f34:	0086c300 	call	20086c30 <__umodsi3>
20096f38:	8809883a 	mov	r4,r17
20096f3c:	b00b883a 	mov	r5,r22
20096f40:	1021883a 	mov	r16,r2
20096f44:	0086c280 	call	20086c28 <__udivsi3>
20096f48:	8006943a 	slli	r3,r16,16
20096f4c:	1545383a 	mul	r2,r2,r21
20096f50:	a13fffcc 	andi	r4,r20,65535
20096f54:	1906b03a 	or	r3,r3,r4
20096f58:	1880532e 	bgeu	r3,r2,200970a8 <__umoddi3+0x264>
20096f5c:	00004e06 	br	20097098 <__umoddi3+0x254>
20096f60:	29c05536 	bltu	r5,r7,200970b8 <__umoddi3+0x274>
20096f64:	00bfffd4 	movui	r2,65535
20096f68:	11c0612e 	bgeu	r2,r7,200970f0 <__umoddi3+0x2ac>
20096f6c:	00804034 	movhi	r2,256
20096f70:	10bfffc4 	addi	r2,r2,-1
20096f74:	11c0f82e 	bgeu	r2,r7,20097358 <__umoddi3+0x514>
20096f78:	01400604 	movi	r5,24
20096f7c:	282b883a 	mov	r21,r5
20096f80:	394ad83a 	srl	r5,r7,r5
20096f84:	00c00034 	movhi	r3,0
20096f88:	18c191c4 	addi	r3,r3,1607
20096f8c:	194b883a 	add	r5,r3,r5
20096f90:	28800003 	ldbu	r2,0(r5)
20096f94:	00c00804 	movi	r3,32
20096f98:	156b883a 	add	r21,r2,r21
20096f9c:	1d69c83a 	sub	r20,r3,r21
20096fa0:	a000631e 	bne	r20,zero,20097130 <__umoddi3+0x2ec>
20096fa4:	3c400136 	bltu	r7,r17,20096fac <__umoddi3+0x168>
20096fa8:	81810436 	bltu	r16,r6,200973bc <__umoddi3+0x578>
20096fac:	8185c83a 	sub	r2,r16,r6
20096fb0:	89e3c83a 	sub	r17,r17,r7
20096fb4:	8087803a 	cmpltu	r3,r16,r2
20096fb8:	88efc83a 	sub	r23,r17,r3
20096fbc:	b807883a 	mov	r3,r23
20096fc0:	00003f06 	br	200970c0 <__umoddi3+0x27c>
20096fc4:	3000041e 	bne	r6,zero,20096fd8 <__umoddi3+0x194>
20096fc8:	01000044 	movi	r4,1
20096fcc:	000b883a 	mov	r5,zero
20096fd0:	0086c280 	call	20086c28 <__udivsi3>
20096fd4:	1027883a 	mov	r19,r2
20096fd8:	00bfffd4 	movui	r2,65535
20096fdc:	14c04f2e 	bgeu	r2,r19,2009711c <__umoddi3+0x2d8>
20096fe0:	00804034 	movhi	r2,256
20096fe4:	10bfffc4 	addi	r2,r2,-1
20096fe8:	14c0e42e 	bgeu	r2,r19,2009737c <__umoddi3+0x538>
20096fec:	00800604 	movi	r2,24
20096ff0:	1007883a 	mov	r3,r2
20096ff4:	9884d83a 	srl	r2,r19,r2
20096ff8:	01000034 	movhi	r4,0
20096ffc:	210191c4 	addi	r4,r4,1607
20097000:	2085883a 	add	r2,r4,r2
20097004:	11000003 	ldbu	r4,0(r2)
20097008:	00800804 	movi	r2,32
2009700c:	20c7883a 	add	r3,r4,r3
20097010:	10c5c83a 	sub	r2,r2,r3
20097014:	10009a1e 	bne	r2,zero,20097280 <__umoddi3+0x43c>
20097018:	982cd43a 	srli	r22,r19,16
2009701c:	8ce3c83a 	sub	r17,r17,r19
20097020:	9c3fffcc 	andi	r16,r19,65535
20097024:	0025883a 	mov	r18,zero
20097028:	8809883a 	mov	r4,r17
2009702c:	b00b883a 	mov	r5,r22
20097030:	0086c300 	call	20086c30 <__umodsi3>
20097034:	8809883a 	mov	r4,r17
20097038:	b00b883a 	mov	r5,r22
2009703c:	102b883a 	mov	r21,r2
20097040:	0086c280 	call	20086c28 <__udivsi3>
20097044:	a806943a 	slli	r3,r21,16
20097048:	a008d43a 	srli	r4,r20,16
2009704c:	1405383a 	mul	r2,r2,r16
20097050:	190cb03a 	or	r6,r3,r4
20097054:	3080032e 	bgeu	r6,r2,20097064 <__umoddi3+0x220>
20097058:	34cd883a 	add	r6,r6,r19
2009705c:	34c00136 	bltu	r6,r19,20097064 <__umoddi3+0x220>
20097060:	3080d436 	bltu	r6,r2,200973b4 <__umoddi3+0x570>
20097064:	30abc83a 	sub	r21,r6,r2
20097068:	a809883a 	mov	r4,r21
2009706c:	b00b883a 	mov	r5,r22
20097070:	0086c300 	call	20086c30 <__umodsi3>
20097074:	1023883a 	mov	r17,r2
20097078:	a809883a 	mov	r4,r21
2009707c:	b00b883a 	mov	r5,r22
20097080:	0086c280 	call	20086c28 <__udivsi3>
20097084:	8822943a 	slli	r17,r17,16
20097088:	1405383a 	mul	r2,r2,r16
2009708c:	a13fffcc 	andi	r4,r20,65535
20097090:	8906b03a 	or	r3,r17,r4
20097094:	1880042e 	bgeu	r3,r2,200970a8 <__umoddi3+0x264>
20097098:	1cc7883a 	add	r3,r3,r19
2009709c:	1cc00236 	bltu	r3,r19,200970a8 <__umoddi3+0x264>
200970a0:	1880012e 	bgeu	r3,r2,200970a8 <__umoddi3+0x264>
200970a4:	1cc7883a 	add	r3,r3,r19
200970a8:	1887c83a 	sub	r3,r3,r2
200970ac:	1c84d83a 	srl	r2,r3,r18
200970b0:	0007883a 	mov	r3,zero
200970b4:	00000206 	br	200970c0 <__umoddi3+0x27c>
200970b8:	2005883a 	mov	r2,r4
200970bc:	2807883a 	mov	r3,r5
200970c0:	dfc00b17 	ldw	ra,44(sp)
200970c4:	df000a17 	ldw	fp,40(sp)
200970c8:	ddc00917 	ldw	r23,36(sp)
200970cc:	dd800817 	ldw	r22,32(sp)
200970d0:	dd400717 	ldw	r21,28(sp)
200970d4:	dd000617 	ldw	r20,24(sp)
200970d8:	dcc00517 	ldw	r19,20(sp)
200970dc:	dc800417 	ldw	r18,16(sp)
200970e0:	dc400317 	ldw	r17,12(sp)
200970e4:	dc000217 	ldw	r16,8(sp)
200970e8:	dec00c04 	addi	sp,sp,48
200970ec:	f800283a 	ret
200970f0:	00803fc4 	movi	r2,255
200970f4:	11c0952e 	bgeu	r2,r7,2009734c <__umoddi3+0x508>
200970f8:	01400204 	movi	r5,8
200970fc:	282b883a 	mov	r21,r5
20097100:	003f9f06 	br	20096f80 <__flash_rwdata_start+0xffffc114>
20097104:	00804034 	movhi	r2,256
20097108:	10bfffc4 	addi	r2,r2,-1
2009710c:	1180952e 	bgeu	r2,r6,20097364 <__umoddi3+0x520>
20097110:	01400604 	movi	r5,24
20097114:	2805883a 	mov	r2,r5
20097118:	003f6206 	br	20096ea4 <__flash_rwdata_start+0xffffc038>
2009711c:	00803fc4 	movi	r2,255
20097120:	14c0932e 	bgeu	r2,r19,20097370 <__umoddi3+0x52c>
20097124:	00800204 	movi	r2,8
20097128:	1007883a 	mov	r3,r2
2009712c:	003fb106 	br	20096ff4 <__flash_rwdata_start+0xffffc188>
20097130:	3548d83a 	srl	r4,r6,r21
20097134:	3d0e983a 	sll	r7,r7,r20
20097138:	8d10983a 	sll	r8,r17,r20
2009713c:	8d6cd83a 	srl	r22,r17,r21
20097140:	3922b03a 	or	r17,r7,r4
20097144:	882ed43a 	srli	r23,r17,16
20097148:	8564d83a 	srl	r18,r16,r21
2009714c:	b009883a 	mov	r4,r22
20097150:	b80b883a 	mov	r5,r23
20097154:	44a4b03a 	or	r18,r8,r18
20097158:	3526983a 	sll	r19,r6,r20
2009715c:	0086c300 	call	20086c30 <__umodsi3>
20097160:	b009883a 	mov	r4,r22
20097164:	b80b883a 	mov	r5,r23
20097168:	1039883a 	mov	fp,r2
2009716c:	0086c280 	call	20086c28 <__udivsi3>
20097170:	102d883a 	mov	r22,r2
20097174:	8a3fffcc 	andi	r8,r17,65535
20097178:	e004943a 	slli	r2,fp,16
2009717c:	900cd43a 	srli	r6,r18,16
20097180:	b239383a 	mul	fp,r22,r8
20097184:	8520983a 	sll	r16,r16,r20
20097188:	118ab03a 	or	r5,r2,r6
2009718c:	2f00042e 	bgeu	r5,fp,200971a0 <__umoddi3+0x35c>
20097190:	2c4b883a 	add	r5,r5,r17
20097194:	b0bfffc4 	addi	r2,r22,-1
20097198:	2c40822e 	bgeu	r5,r17,200973a4 <__umoddi3+0x560>
2009719c:	102d883a 	mov	r22,r2
200971a0:	2f39c83a 	sub	fp,r5,fp
200971a4:	e009883a 	mov	r4,fp
200971a8:	b80b883a 	mov	r5,r23
200971ac:	da000115 	stw	r8,4(sp)
200971b0:	0086c300 	call	20086c30 <__umodsi3>
200971b4:	e009883a 	mov	r4,fp
200971b8:	b80b883a 	mov	r5,r23
200971bc:	d8800015 	stw	r2,0(sp)
200971c0:	0086c280 	call	20086c28 <__udivsi3>
200971c4:	d9800017 	ldw	r6,0(sp)
200971c8:	da000117 	ldw	r8,4(sp)
200971cc:	94bfffcc 	andi	r18,r18,65535
200971d0:	300c943a 	slli	r6,r6,16
200971d4:	1209383a 	mul	r4,r2,r8
200971d8:	3490b03a 	or	r8,r6,r18
200971dc:	4100042e 	bgeu	r8,r4,200971f0 <__umoddi3+0x3ac>
200971e0:	4451883a 	add	r8,r8,r17
200971e4:	10ffffc4 	addi	r3,r2,-1
200971e8:	44406a2e 	bgeu	r8,r17,20097394 <__umoddi3+0x550>
200971ec:	1805883a 	mov	r2,r3
200971f0:	b012943a 	slli	r9,r22,16
200971f4:	9abfffcc 	andi	r10,r19,65535
200971f8:	980ed43a 	srli	r7,r19,16
200971fc:	124ab03a 	or	r5,r2,r9
20097200:	2a7fffcc 	andi	r9,r5,65535
20097204:	280ad43a 	srli	r5,r5,16
20097208:	4a8d383a 	mul	r6,r9,r10
2009720c:	49d3383a 	mul	r9,r9,r7
20097210:	2a95383a 	mul	r10,r5,r10
20097214:	3004d43a 	srli	r2,r6,16
20097218:	4111c83a 	sub	r8,r8,r4
2009721c:	5253883a 	add	r9,r10,r9
20097220:	4893883a 	add	r9,r9,r2
20097224:	29cb383a 	mul	r5,r5,r7
20097228:	4a80022e 	bgeu	r9,r10,20097234 <__umoddi3+0x3f0>
2009722c:	00800074 	movhi	r2,1
20097230:	288b883a 	add	r5,r5,r2
20097234:	4808d43a 	srli	r4,r9,16
20097238:	4812943a 	slli	r9,r9,16
2009723c:	31bfffcc 	andi	r6,r6,65535
20097240:	290b883a 	add	r5,r5,r4
20097244:	498d883a 	add	r6,r9,r6
20097248:	41403a36 	bltu	r8,r5,20097334 <__umoddi3+0x4f0>
2009724c:	41405d26 	beq	r8,r5,200973c4 <__umoddi3+0x580>
20097250:	4149c83a 	sub	r4,r8,r5
20097254:	300f883a 	mov	r7,r6
20097258:	81cfc83a 	sub	r7,r16,r7
2009725c:	81c7803a 	cmpltu	r3,r16,r7
20097260:	20c7c83a 	sub	r3,r4,r3
20097264:	1d44983a 	sll	r2,r3,r21
20097268:	3d0ed83a 	srl	r7,r7,r20
2009726c:	1d06d83a 	srl	r3,r3,r20
20097270:	11c4b03a 	or	r2,r2,r7
20097274:	003f9206 	br	200970c0 <__flash_rwdata_start+0xffffc254>
20097278:	0025883a 	mov	r18,zero
2009727c:	003f1806 	br	20096ee0 <__flash_rwdata_start+0xffffc074>
20097280:	98a6983a 	sll	r19,r19,r2
20097284:	88e8d83a 	srl	r20,r17,r3
20097288:	80c6d83a 	srl	r3,r16,r3
2009728c:	982cd43a 	srli	r22,r19,16
20097290:	88a2983a 	sll	r17,r17,r2
20097294:	a009883a 	mov	r4,r20
20097298:	b00b883a 	mov	r5,r22
2009729c:	88eab03a 	or	r21,r17,r3
200972a0:	1025883a 	mov	r18,r2
200972a4:	0086c300 	call	20086c30 <__umodsi3>
200972a8:	a009883a 	mov	r4,r20
200972ac:	b00b883a 	mov	r5,r22
200972b0:	1023883a 	mov	r17,r2
200972b4:	0086c280 	call	20086c28 <__udivsi3>
200972b8:	9f3fffcc 	andi	fp,r19,65535
200972bc:	8822943a 	slli	r17,r17,16
200972c0:	a80ad43a 	srli	r5,r21,16
200972c4:	1705383a 	mul	r2,r2,fp
200972c8:	84a8983a 	sll	r20,r16,r18
200972cc:	8948b03a 	or	r4,r17,r5
200972d0:	2080042e 	bgeu	r4,r2,200972e4 <__umoddi3+0x4a0>
200972d4:	24c9883a 	add	r4,r4,r19
200972d8:	24c00236 	bltu	r4,r19,200972e4 <__umoddi3+0x4a0>
200972dc:	2080012e 	bgeu	r4,r2,200972e4 <__umoddi3+0x4a0>
200972e0:	24c9883a 	add	r4,r4,r19
200972e4:	20afc83a 	sub	r23,r4,r2
200972e8:	b809883a 	mov	r4,r23
200972ec:	b00b883a 	mov	r5,r22
200972f0:	0086c300 	call	20086c30 <__umodsi3>
200972f4:	1023883a 	mov	r17,r2
200972f8:	b809883a 	mov	r4,r23
200972fc:	b00b883a 	mov	r5,r22
20097300:	0086c280 	call	20086c28 <__udivsi3>
20097304:	8822943a 	slli	r17,r17,16
20097308:	1705383a 	mul	r2,r2,fp
2009730c:	a93fffcc 	andi	r4,r21,65535
20097310:	8908b03a 	or	r4,r17,r4
20097314:	2080042e 	bgeu	r4,r2,20097328 <__umoddi3+0x4e4>
20097318:	24c9883a 	add	r4,r4,r19
2009731c:	24c00236 	bltu	r4,r19,20097328 <__umoddi3+0x4e4>
20097320:	2080012e 	bgeu	r4,r2,20097328 <__umoddi3+0x4e4>
20097324:	24c9883a 	add	r4,r4,r19
20097328:	20a3c83a 	sub	r17,r4,r2
2009732c:	e021883a 	mov	r16,fp
20097330:	003f3d06 	br	20097028 <__flash_rwdata_start+0xffffc1bc>
20097334:	34cfc83a 	sub	r7,r6,r19
20097338:	2c4bc83a 	sub	r5,r5,r17
2009733c:	31cd803a 	cmpltu	r6,r6,r7
20097340:	298dc83a 	sub	r6,r5,r6
20097344:	4189c83a 	sub	r4,r8,r6
20097348:	003fc306 	br	20097258 <__flash_rwdata_start+0xffffc3ec>
2009734c:	000b883a 	mov	r5,zero
20097350:	002b883a 	mov	r21,zero
20097354:	003f0a06 	br	20096f80 <__flash_rwdata_start+0xffffc114>
20097358:	01400404 	movi	r5,16
2009735c:	282b883a 	mov	r21,r5
20097360:	003f0706 	br	20096f80 <__flash_rwdata_start+0xffffc114>
20097364:	01400404 	movi	r5,16
20097368:	2805883a 	mov	r2,r5
2009736c:	003ecd06 	br	20096ea4 <__flash_rwdata_start+0xffffc038>
20097370:	0005883a 	mov	r2,zero
20097374:	0007883a 	mov	r3,zero
20097378:	003f1e06 	br	20096ff4 <__flash_rwdata_start+0xffffc188>
2009737c:	00800404 	movi	r2,16
20097380:	1007883a 	mov	r3,r2
20097384:	003f1b06 	br	20096ff4 <__flash_rwdata_start+0xffffc188>
20097388:	000b883a 	mov	r5,zero
2009738c:	0005883a 	mov	r2,zero
20097390:	003ec406 	br	20096ea4 <__flash_rwdata_start+0xffffc038>
20097394:	413f952e 	bgeu	r8,r4,200971ec <__flash_rwdata_start+0xffffc380>
20097398:	10bfff84 	addi	r2,r2,-2
2009739c:	4451883a 	add	r8,r8,r17
200973a0:	003f9306 	br	200971f0 <__flash_rwdata_start+0xffffc384>
200973a4:	2f3f7d2e 	bgeu	r5,fp,2009719c <__flash_rwdata_start+0xffffc330>
200973a8:	b5bfff84 	addi	r22,r22,-2
200973ac:	2c4b883a 	add	r5,r5,r17
200973b0:	003f7b06 	br	200971a0 <__flash_rwdata_start+0xffffc334>
200973b4:	34cd883a 	add	r6,r6,r19
200973b8:	003f2a06 	br	20097064 <__flash_rwdata_start+0xffffc1f8>
200973bc:	8005883a 	mov	r2,r16
200973c0:	003efe06 	br	20096fbc <__flash_rwdata_start+0xffffc150>
200973c4:	81bfdb36 	bltu	r16,r6,20097334 <__flash_rwdata_start+0xffffc4c8>
200973c8:	300f883a 	mov	r7,r6
200973cc:	0009883a 	mov	r4,zero
200973d0:	003fa106 	br	20097258 <__flash_rwdata_start+0xffffc3ec>

200973d4 <__eqdf2>:
200973d4:	2804d53a 	srli	r2,r5,20
200973d8:	3806d53a 	srli	r3,r7,20
200973dc:	02000434 	movhi	r8,16
200973e0:	423fffc4 	addi	r8,r8,-1
200973e4:	1081ffcc 	andi	r2,r2,2047
200973e8:	0241ffc4 	movi	r9,2047
200973ec:	2a14703a 	and	r10,r5,r8
200973f0:	18c1ffcc 	andi	r3,r3,2047
200973f4:	3a10703a 	and	r8,r7,r8
200973f8:	280ad7fa 	srli	r5,r5,31
200973fc:	380ed7fa 	srli	r7,r7,31
20097400:	12400f26 	beq	r2,r9,20097440 <__eqdf2+0x6c>
20097404:	0241ffc4 	movi	r9,2047
20097408:	1a400326 	beq	r3,r9,20097418 <__eqdf2+0x44>
2009740c:	10c00526 	beq	r2,r3,20097424 <__eqdf2+0x50>
20097410:	00800044 	movi	r2,1
20097414:	f800283a 	ret
20097418:	4192b03a 	or	r9,r8,r6
2009741c:	483ffc1e 	bne	r9,zero,20097410 <__flash_rwdata_start+0xffffc5a4>
20097420:	10fffb1e 	bne	r2,r3,20097410 <__flash_rwdata_start+0xffffc5a4>
20097424:	523ffa1e 	bne	r10,r8,20097410 <__flash_rwdata_start+0xffffc5a4>
20097428:	21bff91e 	bne	r4,r6,20097410 <__flash_rwdata_start+0xffffc5a4>
2009742c:	29c00826 	beq	r5,r7,20097450 <__eqdf2+0x7c>
20097430:	103ff71e 	bne	r2,zero,20097410 <__flash_rwdata_start+0xffffc5a4>
20097434:	5104b03a 	or	r2,r10,r4
20097438:	1004c03a 	cmpne	r2,r2,zero
2009743c:	f800283a 	ret
20097440:	5112b03a 	or	r9,r10,r4
20097444:	483fef26 	beq	r9,zero,20097404 <__flash_rwdata_start+0xffffc598>
20097448:	00800044 	movi	r2,1
2009744c:	f800283a 	ret
20097450:	0005883a 	mov	r2,zero
20097454:	f800283a 	ret

20097458 <__gedf2>:
20097458:	2804d53a 	srli	r2,r5,20
2009745c:	3806d53a 	srli	r3,r7,20
20097460:	02000434 	movhi	r8,16
20097464:	423fffc4 	addi	r8,r8,-1
20097468:	0241ffc4 	movi	r9,2047
2009746c:	1081ffcc 	andi	r2,r2,2047
20097470:	2a14703a 	and	r10,r5,r8
20097474:	1a46703a 	and	r3,r3,r9
20097478:	3a10703a 	and	r8,r7,r8
2009747c:	280ad7fa 	srli	r5,r5,31
20097480:	380ed7fa 	srli	r7,r7,31
20097484:	12400b26 	beq	r2,r9,200974b4 <__gedf2+0x5c>
20097488:	1a401626 	beq	r3,r9,200974e4 <__gedf2+0x8c>
2009748c:	10000c1e 	bne	r2,zero,200974c0 <__gedf2+0x68>
20097490:	5112b03a 	or	r9,r10,r4
20097494:	4813003a 	cmpeq	r9,r9,zero
20097498:	4817883a 	mov	r11,r9
2009749c:	18000c1e 	bne	r3,zero,200974d0 <__gedf2+0x78>
200974a0:	4198b03a 	or	r12,r8,r6
200974a4:	60000a1e 	bne	r12,zero,200974d0 <__gedf2+0x78>
200974a8:	48001326 	beq	r9,zero,200974f8 <__gedf2+0xa0>
200974ac:	0005883a 	mov	r2,zero
200974b0:	f800283a 	ret
200974b4:	5112b03a 	or	r9,r10,r4
200974b8:	4800191e 	bne	r9,zero,20097520 <__gedf2+0xc8>
200974bc:	18800926 	beq	r3,r2,200974e4 <__gedf2+0x8c>
200974c0:	18000b1e 	bne	r3,zero,200974f0 <__gedf2+0x98>
200974c4:	4192b03a 	or	r9,r8,r6
200974c8:	0017883a 	mov	r11,zero
200974cc:	48000a26 	beq	r9,zero,200974f8 <__gedf2+0xa0>
200974d0:	39c03fcc 	andi	r7,r7,255
200974d4:	58000726 	beq	r11,zero,200974f4 <__gedf2+0x9c>
200974d8:	3800081e 	bne	r7,zero,200974fc <__gedf2+0xa4>
200974dc:	00bfffc4 	movi	r2,-1
200974e0:	f800283a 	ret
200974e4:	4192b03a 	or	r9,r8,r6
200974e8:	48000d1e 	bne	r9,zero,20097520 <__gedf2+0xc8>
200974ec:	103fe826 	beq	r2,zero,20097490 <__flash_rwdata_start+0xffffc624>
200974f0:	39c03fcc 	andi	r7,r7,255
200974f4:	29c00326 	beq	r5,r7,20097504 <__gedf2+0xac>
200974f8:	283ff81e 	bne	r5,zero,200974dc <__flash_rwdata_start+0xffffc670>
200974fc:	00800044 	movi	r2,1
20097500:	f800283a 	ret
20097504:	18bffc16 	blt	r3,r2,200974f8 <__flash_rwdata_start+0xffffc68c>
20097508:	10c00316 	blt	r2,r3,20097518 <__gedf2+0xc0>
2009750c:	42bffa36 	bltu	r8,r10,200974f8 <__flash_rwdata_start+0xffffc68c>
20097510:	52000526 	beq	r10,r8,20097528 <__gedf2+0xd0>
20097514:	523fe52e 	bgeu	r10,r8,200974ac <__flash_rwdata_start+0xffffc640>
20097518:	283ff026 	beq	r5,zero,200974dc <__flash_rwdata_start+0xffffc670>
2009751c:	003ff706 	br	200974fc <__flash_rwdata_start+0xffffc690>
20097520:	00bfff84 	movi	r2,-2
20097524:	f800283a 	ret
20097528:	313ff336 	bltu	r6,r4,200974f8 <__flash_rwdata_start+0xffffc68c>
2009752c:	21bfdf2e 	bgeu	r4,r6,200974ac <__flash_rwdata_start+0xffffc640>
20097530:	283fea26 	beq	r5,zero,200974dc <__flash_rwdata_start+0xffffc670>
20097534:	003ff106 	br	200974fc <__flash_rwdata_start+0xffffc690>

20097538 <__ledf2>:
20097538:	2804d53a 	srli	r2,r5,20
2009753c:	3810d53a 	srli	r8,r7,20
20097540:	00c00434 	movhi	r3,16
20097544:	18ffffc4 	addi	r3,r3,-1
20097548:	0241ffc4 	movi	r9,2047
2009754c:	1081ffcc 	andi	r2,r2,2047
20097550:	28d4703a 	and	r10,r5,r3
20097554:	4250703a 	and	r8,r8,r9
20097558:	38c6703a 	and	r3,r7,r3
2009755c:	280ad7fa 	srli	r5,r5,31
20097560:	380ed7fa 	srli	r7,r7,31
20097564:	12400b26 	beq	r2,r9,20097594 <__ledf2+0x5c>
20097568:	42401926 	beq	r8,r9,200975d0 <__ledf2+0x98>
2009756c:	10000c1e 	bne	r2,zero,200975a0 <__ledf2+0x68>
20097570:	5112b03a 	or	r9,r10,r4
20097574:	4813003a 	cmpeq	r9,r9,zero
20097578:	4817883a 	mov	r11,r9
2009757c:	40000f26 	beq	r8,zero,200975bc <__ledf2+0x84>
20097580:	39c03fcc 	andi	r7,r7,255
20097584:	58001826 	beq	r11,zero,200975e8 <__ledf2+0xb0>
20097588:	38000a1e 	bne	r7,zero,200975b4 <__ledf2+0x7c>
2009758c:	00bfffc4 	movi	r2,-1
20097590:	f800283a 	ret
20097594:	5112b03a 	or	r9,r10,r4
20097598:	48000f1e 	bne	r9,zero,200975d8 <__ledf2+0xa0>
2009759c:	40800c26 	beq	r8,r2,200975d0 <__ledf2+0x98>
200975a0:	4000101e 	bne	r8,zero,200975e4 <__ledf2+0xac>
200975a4:	1992b03a 	or	r9,r3,r6
200975a8:	0017883a 	mov	r11,zero
200975ac:	483ff41e 	bne	r9,zero,20097580 <__flash_rwdata_start+0xffffc714>
200975b0:	283ff61e 	bne	r5,zero,2009758c <__flash_rwdata_start+0xffffc720>
200975b4:	00800044 	movi	r2,1
200975b8:	f800283a 	ret
200975bc:	1998b03a 	or	r12,r3,r6
200975c0:	603fef1e 	bne	r12,zero,20097580 <__flash_rwdata_start+0xffffc714>
200975c4:	483ffa26 	beq	r9,zero,200975b0 <__flash_rwdata_start+0xffffc744>
200975c8:	0005883a 	mov	r2,zero
200975cc:	f800283a 	ret
200975d0:	1992b03a 	or	r9,r3,r6
200975d4:	48000226 	beq	r9,zero,200975e0 <__ledf2+0xa8>
200975d8:	00800084 	movi	r2,2
200975dc:	f800283a 	ret
200975e0:	103fe326 	beq	r2,zero,20097570 <__flash_rwdata_start+0xffffc704>
200975e4:	39c03fcc 	andi	r7,r7,255
200975e8:	29fff11e 	bne	r5,r7,200975b0 <__flash_rwdata_start+0xffffc744>
200975ec:	40bff016 	blt	r8,r2,200975b0 <__flash_rwdata_start+0xffffc744>
200975f0:	12000316 	blt	r2,r8,20097600 <__ledf2+0xc8>
200975f4:	1abfee36 	bltu	r3,r10,200975b0 <__flash_rwdata_start+0xffffc744>
200975f8:	50c00326 	beq	r10,r3,20097608 <__ledf2+0xd0>
200975fc:	50fff22e 	bgeu	r10,r3,200975c8 <__flash_rwdata_start+0xffffc75c>
20097600:	283fe226 	beq	r5,zero,2009758c <__flash_rwdata_start+0xffffc720>
20097604:	003feb06 	br	200975b4 <__flash_rwdata_start+0xffffc748>
20097608:	313fe936 	bltu	r6,r4,200975b0 <__flash_rwdata_start+0xffffc744>
2009760c:	21bfee2e 	bgeu	r4,r6,200975c8 <__flash_rwdata_start+0xffffc75c>
20097610:	283fde26 	beq	r5,zero,2009758c <__flash_rwdata_start+0xffffc720>
20097614:	003fe706 	br	200975b4 <__flash_rwdata_start+0xffffc748>

20097618 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
20097618:	defffd04 	addi	sp,sp,-12
2009761c:	dc000015 	stw	r16,0(sp)
20097620:	dfc00215 	stw	ra,8(sp)
20097624:	dc400115 	stw	r17,4(sp)
20097628:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
2009762c:	20002016 	blt	r4,zero,200976b0 <close+0x98>
20097630:	20c00324 	muli	r3,r4,12
20097634:	00800034 	movhi	r2,0
20097638:	1085bd04 	addi	r2,r2,5876
2009763c:	1885883a 	add	r2,r3,r2

  if (fd)
20097640:	10001b26 	beq	r2,zero,200976b0 <close+0x98>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
20097644:	10c00017 	ldw	r3,0(r2)
20097648:	18c00417 	ldw	r3,16(r3)
2009764c:	18000c26 	beq	r3,zero,20097680 <close+0x68>
20097650:	1009883a 	mov	r4,r2
20097654:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20097658:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
2009765c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20097660:	0097bd80 	call	20097bd8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
20097664:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
20097668:	88000816 	blt	r17,zero,2009768c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
2009766c:	dfc00217 	ldw	ra,8(sp)
20097670:	dc400117 	ldw	r17,4(sp)
20097674:	dc000017 	ldw	r16,0(sp)
20097678:	dec00304 	addi	sp,sp,12
2009767c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
20097680:	0097bd80 	call	20097bd8 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
20097684:	0005883a 	mov	r2,zero
20097688:	003ff806 	br	2009766c <__flash_rwdata_start+0xffffc800>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
2009768c:	00800034 	movhi	r2,0
20097690:	108a9604 	addi	r2,r2,10840
20097694:	10800017 	ldw	r2,0(r2)
20097698:	10000e26 	beq	r2,zero,200976d4 <close+0xbc>
2009769c:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
200976a0:	0463c83a 	sub	r17,zero,r17
200976a4:	14400015 	stw	r17,0(r2)
      return -1;
200976a8:	00bfffc4 	movi	r2,-1
200976ac:	003fef06 	br	2009766c <__flash_rwdata_start+0xffffc800>
200976b0:	00800034 	movhi	r2,0
200976b4:	108a9604 	addi	r2,r2,10840
200976b8:	10800017 	ldw	r2,0(r2)
200976bc:	10000826 	beq	r2,zero,200976e0 <close+0xc8>
200976c0:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
200976c4:	00c01444 	movi	r3,81
200976c8:	10c00015 	stw	r3,0(r2)
    return -1;
200976cc:	00bfffc4 	movi	r2,-1
200976d0:	003fe606 	br	2009766c <__flash_rwdata_start+0xffffc800>
200976d4:	00800034 	movhi	r2,0
200976d8:	108ab004 	addi	r2,r2,10944
200976dc:	003ff006 	br	200976a0 <__flash_rwdata_start+0xffffc834>
200976e0:	00800034 	movhi	r2,0
200976e4:	108ab004 	addi	r2,r2,10944
200976e8:	003ff606 	br	200976c4 <__flash_rwdata_start+0xffffc858>

200976ec <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
200976ec:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200976f0:	2005883a 	mov	r2,r4
200976f4:	2140092e 	bgeu	r4,r5,2009771c <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
200976f8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
200976fc:	10800804 	addi	r2,r2,32
20097700:	117ffd36 	bltu	r2,r5,200976f8 <__flash_rwdata_start+0xffffc88c>
20097704:	0104303a 	nor	r2,zero,r4
20097708:	1145883a 	add	r2,r2,r5
2009770c:	1004d17a 	srli	r2,r2,5
20097710:	10800044 	addi	r2,r2,1
20097714:	1004917a 	slli	r2,r2,5
20097718:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
2009771c:	210007cc 	andi	r4,r4,31
20097720:	20000126 	beq	r4,zero,20097728 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
20097724:	1000001b 	flushda	0(r2)
20097728:	f800283a 	ret

2009772c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
2009772c:	0005883a 	mov	r2,zero
20097730:	00d00004 	movi	r3,16384
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
20097734:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
20097738:	10800804 	addi	r2,r2,32
2009773c:	10fffd1e 	bne	r2,r3,20097734 <__flash_rwdata_start+0xffffc8c8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
20097740:	f800283a 	ret

20097744 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
20097744:	3005883a 	mov	r2,r6
20097748:	f800283a 	ret

2009774c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
2009774c:	20000226 	beq	r4,zero,20097758 <_exit+0xc>
    ALT_SIM_FAIL();
20097750:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
20097754:	003fff06 	br	20097754 <__flash_rwdata_start+0xffffc8e8>
  } else {
    ALT_SIM_PASS();
20097758:	002af0b0 	cmpltui	zero,zero,43970
2009775c:	003ffd06 	br	20097754 <__flash_rwdata_start+0xffffc8e8>

20097760 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097760:	20000d16 	blt	r4,zero,20097798 <fstat+0x38>
20097764:	21000324 	muli	r4,r4,12
20097768:	00800034 	movhi	r2,0
2009776c:	1085bd04 	addi	r2,r2,5876
20097770:	2089883a 	add	r4,r4,r2
  
  if (fd)
20097774:	20000826 	beq	r4,zero,20097798 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
20097778:	20800017 	ldw	r2,0(r4)
2009777c:	10800817 	ldw	r2,32(r2)
20097780:	10000126 	beq	r2,zero,20097788 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
20097784:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
20097788:	00880004 	movi	r2,8192
2009778c:	28800115 	stw	r2,4(r5)
      return 0;
20097790:	0005883a 	mov	r2,zero
20097794:	f800283a 	ret
20097798:	00800034 	movhi	r2,0
2009779c:	108a9604 	addi	r2,r2,10840
200977a0:	10800017 	ldw	r2,0(r2)
200977a4:	10000926 	beq	r2,zero,200977cc <fstat+0x6c>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
200977a8:	deffff04 	addi	sp,sp,-4
200977ac:	dfc00015 	stw	ra,0(sp)
200977b0:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
200977b4:	00c01444 	movi	r3,81
200977b8:	10c00015 	stw	r3,0(r2)
    return -1;
200977bc:	00bfffc4 	movi	r2,-1
  }
}
200977c0:	dfc00017 	ldw	ra,0(sp)
200977c4:	dec00104 	addi	sp,sp,4
200977c8:	f800283a 	ret
200977cc:	00800034 	movhi	r2,0
200977d0:	108ab004 	addi	r2,r2,10944
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
200977d4:	00c01444 	movi	r3,81
200977d8:	10c00015 	stw	r3,0(r2)
    return -1;
200977dc:	00bfffc4 	movi	r2,-1
  }
}
200977e0:	f800283a 	ret

200977e4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
200977e4:	008007c4 	movi	r2,31
200977e8:	11002b36 	bltu	r2,r4,20097898 <alt_irq_register+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200977ec:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200977f0:	00bfff84 	movi	r2,-2
200977f4:	3886703a 	and	r3,r7,r2
200977f8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
200977fc:	200690fa 	slli	r3,r4,3
20097800:	02000034 	movhi	r8,0
20097804:	420c3904 	addi	r8,r8,12516
20097808:	40d3883a 	add	r9,r8,r3
2009780c:	49800015 	stw	r6,0(r9)
    alt_irq[id].context = context;
20097810:	49400115 	stw	r5,4(r9)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
20097814:	30001026 	beq	r6,zero,20097858 <alt_irq_register+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097818:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009781c:	2884703a 	and	r2,r5,r2
20097820:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
20097824:	00800034 	movhi	r2,0
20097828:	108ab404 	addi	r2,r2,10960
2009782c:	00c00044 	movi	r3,1
20097830:	1908983a 	sll	r4,r3,r4
20097834:	10c00017 	ldw	r3,0(r2)
20097838:	20c8b03a 	or	r4,r4,r3
2009783c:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20097840:	10800017 	ldw	r2,0(r2)
20097844:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097848:	2801703a 	wrctl	status,r5
2009784c:	3801703a 	wrctl	status,r7
20097850:	0005883a 	mov	r2,zero
20097854:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097858:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009785c:	2884703a 	and	r2,r5,r2
20097860:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
20097864:	00800034 	movhi	r2,0
20097868:	108ab404 	addi	r2,r2,10960
2009786c:	00ffff84 	movi	r3,-2
20097870:	1908183a 	rol	r4,r3,r4
20097874:	10c00017 	ldw	r3,0(r2)
20097878:	20c8703a 	and	r4,r4,r3
2009787c:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20097880:	10800017 	ldw	r2,0(r2)
20097884:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097888:	2801703a 	wrctl	status,r5
2009788c:	3801703a 	wrctl	status,r7
20097890:	0005883a 	mov	r2,zero
20097894:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
20097898:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
2009789c:	f800283a 	ret

200978a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
200978a0:	defff004 	addi	sp,sp,-64
200978a4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
200978a8:	20001316 	blt	r4,zero,200978f8 <isatty+0x58>
200978ac:	20800324 	muli	r2,r4,12
200978b0:	00c00034 	movhi	r3,0
200978b4:	18c5bd04 	addi	r3,r3,5876
200978b8:	10c5883a 	add	r2,r2,r3
  
  if (fd)
200978bc:	10000e26 	beq	r2,zero,200978f8 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
200978c0:	10800017 	ldw	r2,0(r2)
200978c4:	10800817 	ldw	r2,32(r2)
200978c8:	10000726 	beq	r2,zero,200978e8 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
200978cc:	d80b883a 	mov	r5,sp
200978d0:	00977600 	call	20097760 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
200978d4:	d8800117 	ldw	r2,4(sp)
200978d8:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
200978dc:	dfc00f17 	ldw	ra,60(sp)
200978e0:	dec01004 	addi	sp,sp,64
200978e4:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
200978e8:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
200978ec:	dfc00f17 	ldw	ra,60(sp)
200978f0:	dec01004 	addi	sp,sp,64
200978f4:	f800283a 	ret
200978f8:	00800034 	movhi	r2,0
200978fc:	108a9604 	addi	r2,r2,10840
20097900:	10800017 	ldw	r2,0(r2)
20097904:	10000726 	beq	r2,zero,20097924 <isatty+0x84>
20097908:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
2009790c:	00c01444 	movi	r3,81
20097910:	10c00015 	stw	r3,0(r2)
    return 0;
20097914:	0005883a 	mov	r2,zero
  }
}
20097918:	dfc00f17 	ldw	ra,60(sp)
2009791c:	dec01004 	addi	sp,sp,64
20097920:	f800283a 	ret
20097924:	00800034 	movhi	r2,0
20097928:	108ab004 	addi	r2,r2,10944
2009792c:	003ff706 	br	2009790c <__flash_rwdata_start+0xffffcaa0>

20097930 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
20097930:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
20097934:	01000034 	movhi	r4,0
20097938:	014802b4 	movhi	r5,8202
2009793c:	dfc00015 	stw	ra,0(sp)
20097940:	2102d404 	addi	r4,r4,2896
20097944:	296b9b04 	addi	r5,r5,-20884
20097948:	21400a26 	beq	r4,r5,20097974 <alt_load+0x44>
  {
    while( to != end )
2009794c:	00800034 	movhi	r2,0
20097950:	108a9d04 	addi	r2,r2,10868
20097954:	20800726 	beq	r4,r2,20097974 <alt_load+0x44>
    {
      *to++ = *from++;
20097958:	21800104 	addi	r6,r4,4
2009795c:	118dc83a 	sub	r6,r2,r6
20097960:	300cd0ba 	srli	r6,r6,2
20097964:	31800044 	addi	r6,r6,1
20097968:	318d883a 	add	r6,r6,r6
2009796c:	318d883a 	add	r6,r6,r6
20097970:	008a6740 	call	2008a674 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
20097974:	01080234 	movhi	r4,8200
20097978:	01480234 	movhi	r5,8200
2009797c:	21000804 	addi	r4,r4,32
20097980:	29400804 	addi	r5,r5,32
20097984:	21400a26 	beq	r4,r5,200979b0 <alt_load+0x80>
  {
    while( to != end )
20097988:	00880234 	movhi	r2,8200
2009798c:	10806404 	addi	r2,r2,400
20097990:	20800726 	beq	r4,r2,200979b0 <alt_load+0x80>
    {
      *to++ = *from++;
20097994:	21800104 	addi	r6,r4,4
20097998:	118dc83a 	sub	r6,r2,r6
2009799c:	300cd0ba 	srli	r6,r6,2
200979a0:	31800044 	addi	r6,r6,1
200979a4:	318d883a 	add	r6,r6,r6
200979a8:	318d883a 	add	r6,r6,r6
200979ac:	008a6740 	call	2008a674 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
200979b0:	01000034 	movhi	r4,0
200979b4:	014802b4 	movhi	r5,8202
200979b8:	21000004 	addi	r4,r4,0
200979bc:	2968c704 	addi	r5,r5,-23780
200979c0:	21400a26 	beq	r4,r5,200979ec <alt_load+0xbc>
  {
    while( to != end )
200979c4:	00800034 	movhi	r2,0
200979c8:	1082d404 	addi	r2,r2,2896
200979cc:	20800726 	beq	r4,r2,200979ec <alt_load+0xbc>
    {
      *to++ = *from++;
200979d0:	21800104 	addi	r6,r4,4
200979d4:	118dc83a 	sub	r6,r2,r6
200979d8:	300cd0ba 	srli	r6,r6,2
200979dc:	31800044 	addi	r6,r6,1
200979e0:	318d883a 	add	r6,r6,r6
200979e4:	318d883a 	add	r6,r6,r6
200979e8:	008a6740 	call	2008a674 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
200979ec:	009772c0 	call	2009772c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
200979f0:	dfc00017 	ldw	ra,0(sp)
200979f4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
200979f8:	0099ad41 	jmpi	20099ad4 <alt_icache_flush_all>

200979fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
200979fc:	defffe04 	addi	sp,sp,-8
20097a00:	dfc00115 	stw	ra,4(sp)
20097a04:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097a08:	20000e16 	blt	r4,zero,20097a44 <lseek+0x48>
20097a0c:	21000324 	muli	r4,r4,12
20097a10:	00800034 	movhi	r2,0
20097a14:	1085bd04 	addi	r2,r2,5876
20097a18:	2089883a 	add	r4,r4,r2
  
  if (fd) 
20097a1c:	20000926 	beq	r4,zero,20097a44 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
20097a20:	20800017 	ldw	r2,0(r4)
20097a24:	10800717 	ldw	r2,28(r2)
20097a28:	10000f26 	beq	r2,zero,20097a68 <lseek+0x6c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
20097a2c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
20097a30:	10001216 	blt	r2,zero,20097a7c <lseek+0x80>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
20097a34:	dfc00117 	ldw	ra,4(sp)
20097a38:	dc000017 	ldw	r16,0(sp)
20097a3c:	dec00204 	addi	sp,sp,8
20097a40:	f800283a 	ret
20097a44:	04001444 	movi	r16,81
20097a48:	00800034 	movhi	r2,0
20097a4c:	108a9604 	addi	r2,r2,10840
20097a50:	10800017 	ldw	r2,0(r2)
20097a54:	10000626 	beq	r2,zero,20097a70 <lseek+0x74>
20097a58:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
20097a5c:	14000015 	stw	r16,0(r2)
    rc = -1;
20097a60:	00bfffc4 	movi	r2,-1
20097a64:	003ff306 	br	20097a34 <__flash_rwdata_start+0xffffcbc8>
20097a68:	04002184 	movi	r16,134
20097a6c:	003ff606 	br	20097a48 <__flash_rwdata_start+0xffffcbdc>
20097a70:	00800034 	movhi	r2,0
20097a74:	108ab004 	addi	r2,r2,10944
20097a78:	003ff806 	br	20097a5c <__flash_rwdata_start+0xffffcbf0>
20097a7c:	00a1c83a 	sub	r16,zero,r2
20097a80:	003ff106 	br	20097a48 <__flash_rwdata_start+0xffffcbdc>

20097a84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20097a84:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20097a88:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
20097a8c:	dfc00115 	stw	ra,4(sp)
20097a90:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
20097a94:	0097ebc0 	call	20097ebc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
20097a98:	0097edc0 	call	20097edc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
20097a9c:	01000034 	movhi	r4,0
20097aa0:	21025604 	addi	r4,r4,2392
20097aa4:	200b883a 	mov	r5,r4
20097aa8:	200d883a 	mov	r6,r4
20097aac:	0099be40 	call	20099be4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
20097ab0:	00999940 	call	20099994 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
20097ab4:	010802b4 	movhi	r4,8202
20097ab8:	21267e04 	addi	r4,r4,-26120
20097abc:	009a1f40 	call	2009a1f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20097ac0:	d1203017 	ldw	r4,-32576(gp)
20097ac4:	d1602f17 	ldw	r5,-32580(gp)
20097ac8:	d1a02e17 	ldw	r6,-32584(gp)
20097acc:	00868140 	call	20086814 <main>
  close(STDOUT_FILENO);
20097ad0:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
20097ad4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
20097ad8:	00976180 	call	20097618 <close>
  exit (result);
20097adc:	8009883a 	mov	r4,r16
20097ae0:	0089c200 	call	20089c20 <exit>

20097ae4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
20097ae4:	f800283a 	ret

20097ae8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
20097ae8:	f800283a 	ret

20097aec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
20097aec:	defffe04 	addi	sp,sp,-8
20097af0:	dfc00115 	stw	ra,4(sp)
20097af4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097af8:	20002516 	blt	r4,zero,20097b90 <read+0xa4>
20097afc:	20800324 	muli	r2,r4,12
20097b00:	00c00034 	movhi	r3,0
20097b04:	18c5bd04 	addi	r3,r3,5876
20097b08:	10c9883a 	add	r4,r2,r3
  
  if (fd)
20097b0c:	20002026 	beq	r4,zero,20097b90 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097b10:	20800217 	ldw	r2,8(r4)
20097b14:	00c00044 	movi	r3,1
20097b18:	108000cc 	andi	r2,r2,3
20097b1c:	10c00a26 	beq	r2,r3,20097b48 <read+0x5c>
        (fd->dev->read))
20097b20:	20800017 	ldw	r2,0(r4)
20097b24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
20097b28:	10000726 	beq	r2,zero,20097b48 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
20097b2c:	103ee83a 	callr	r2
20097b30:	1021883a 	mov	r16,r2
20097b34:	80000d16 	blt	r16,zero,20097b6c <read+0x80>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
20097b38:	dfc00117 	ldw	ra,4(sp)
20097b3c:	dc000017 	ldw	r16,0(sp)
20097b40:	dec00204 	addi	sp,sp,8
20097b44:	f800283a 	ret
20097b48:	00800034 	movhi	r2,0
20097b4c:	108a9604 	addi	r2,r2,10840
20097b50:	10800017 	ldw	r2,0(r2)
20097b54:	10001726 	beq	r2,zero,20097bb4 <read+0xc8>
20097b58:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
20097b5c:	00c00344 	movi	r3,13
20097b60:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
20097b64:	00bfffc4 	movi	r2,-1
20097b68:	003ff306 	br	20097b38 <__flash_rwdata_start+0xffffcccc>
20097b6c:	00800034 	movhi	r2,0
20097b70:	108a9604 	addi	r2,r2,10840
20097b74:	10800017 	ldw	r2,0(r2)
20097b78:	10001126 	beq	r2,zero,20097bc0 <read+0xd4>
20097b7c:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
20097b80:	0421c83a 	sub	r16,zero,r16
20097b84:	14000015 	stw	r16,0(r2)
          return -1;
20097b88:	00bfffc4 	movi	r2,-1
20097b8c:	003fea06 	br	20097b38 <__flash_rwdata_start+0xffffcccc>
20097b90:	00800034 	movhi	r2,0
20097b94:	108a9604 	addi	r2,r2,10840
20097b98:	10800017 	ldw	r2,0(r2)
20097b9c:	10000b26 	beq	r2,zero,20097bcc <read+0xe0>
20097ba0:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
20097ba4:	00c01444 	movi	r3,81
20097ba8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
20097bac:	00bfffc4 	movi	r2,-1
20097bb0:	003fe106 	br	20097b38 <__flash_rwdata_start+0xffffcccc>
20097bb4:	00800034 	movhi	r2,0
20097bb8:	108ab004 	addi	r2,r2,10944
20097bbc:	003fe706 	br	20097b5c <__flash_rwdata_start+0xffffccf0>
20097bc0:	00800034 	movhi	r2,0
20097bc4:	108ab004 	addi	r2,r2,10944
20097bc8:	003fed06 	br	20097b80 <__flash_rwdata_start+0xffffcd14>
20097bcc:	00800034 	movhi	r2,0
20097bd0:	108ab004 	addi	r2,r2,10944
20097bd4:	003ff306 	br	20097ba4 <__flash_rwdata_start+0xffffcd38>

20097bd8 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
20097bd8:	00800084 	movi	r2,2
20097bdc:	1100060e 	bge	r2,r4,20097bf8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
20097be0:	21000324 	muli	r4,r4,12
20097be4:	00800034 	movhi	r2,0
20097be8:	1085bd04 	addi	r2,r2,5876
20097bec:	1107883a 	add	r3,r2,r4
20097bf0:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
20097bf4:	18000015 	stw	zero,0(r3)
20097bf8:	f800283a 	ret

20097bfc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097bfc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097c00:	00bfff84 	movi	r2,-2
20097c04:	2884703a 	and	r2,r5,r2
20097c08:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20097c0c:	d0a01117 	ldw	r2,-32700(gp)
20097c10:	00ffff04 	movi	r3,-4
20097c14:	108000c4 	addi	r2,r2,3
20097c18:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20097c1c:	00c80034 	movhi	r3,8192
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
20097c20:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
20097c24:	1109883a 	add	r4,r2,r4
20097c28:	18c00004 	addi	r3,r3,0
20097c2c:	19000336 	bltu	r3,r4,20097c3c <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
20097c30:	d1201115 	stw	r4,-32700(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097c34:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
20097c38:	f800283a 	ret
20097c3c:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
20097c40:	00bfffc4 	movi	r2,-1
20097c44:	f800283a 	ret

20097c48 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097c48:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097c4c:	00bfff84 	movi	r2,-2
20097c50:	1884703a 	and	r2,r3,r2
20097c54:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20097c58:	21400117 	ldw	r5,4(r4)
20097c5c:	20800017 	ldw	r2,0(r4)
20097c60:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
20097c64:	21400117 	ldw	r5,4(r4)
20097c68:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20097c6c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
20097c70:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097c74:	1801703a 	wrctl	status,r3
20097c78:	f800283a 	ret

20097c7c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20097c7c:	d0a03117 	ldw	r2,-32572(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20097c80:	defffa04 	addi	sp,sp,-24
20097c84:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20097c88:	d4201217 	ldw	r16,-32696(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20097c8c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
20097c90:	dc800215 	stw	r18,8(sp)
20097c94:	dfc00515 	stw	ra,20(sp)
20097c98:	dd000415 	stw	r20,16(sp)
20097c9c:	dcc00315 	stw	r19,12(sp)
20097ca0:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
20097ca4:	d4a01204 	addi	r18,gp,-32696

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
20097ca8:	d0a03115 	stw	r2,-32572(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097cac:	84801726 	beq	r16,r18,20097d0c <alt_tick+0x90>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
20097cb0:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097cb4:	053fff84 	movi	r20,-2
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20097cb8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
20097cbc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
20097cc0:	10000326 	beq	r2,zero,20097cd0 <alt_tick+0x54>
20097cc4:	d0a03117 	ldw	r2,-32572(gp)
20097cc8:	1000181e 	bne	r2,zero,20097d2c <alt_tick+0xb0>
    {
      alarm->rollover = 0;
20097ccc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20097cd0:	d0e03117 	ldw	r3,-32572(gp)
20097cd4:	80800217 	ldw	r2,8(r16)
20097cd8:	18800a36 	bltu	r3,r2,20097d04 <alt_tick+0x88>
    {
      next_callback = alarm->callback (alarm->context);
20097cdc:	80800317 	ldw	r2,12(r16)
20097ce0:	81000517 	ldw	r4,20(r16)
20097ce4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
20097ce8:	10001426 	beq	r2,zero,20097d3c <alt_tick+0xc0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
20097cec:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20097cf0:	d1203117 	ldw	r4,-32572(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
20097cf4:	10c5883a 	add	r2,r2,r3
20097cf8:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
20097cfc:	1100012e 	bgeu	r2,r4,20097d04 <alt_tick+0x88>
        {
          alarm->rollover = 1;
20097d00:	84c00405 	stb	r19,16(r16)
20097d04:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097d08:	8cbfeb1e 	bne	r17,r18,20097cb8 <__flash_rwdata_start+0xffffce4c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
20097d0c:	dfc00517 	ldw	ra,20(sp)
20097d10:	dd000417 	ldw	r20,16(sp)
20097d14:	dcc00317 	ldw	r19,12(sp)
20097d18:	dc800217 	ldw	r18,8(sp)
20097d1c:	dc400117 	ldw	r17,4(sp)
20097d20:	dc000017 	ldw	r16,0(sp)
20097d24:	dec00604 	addi	sp,sp,24
20097d28:	f800283a 	ret
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
20097d2c:	d0a03117 	ldw	r2,-32572(gp)
20097d30:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
20097d34:	8cbfe01e 	bne	r17,r18,20097cb8 <__flash_rwdata_start+0xffffce4c>
20097d38:	003ff406 	br	20097d0c <__flash_rwdata_start+0xffffcea0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20097d3c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20097d40:	1506703a 	and	r3,r2,r20
20097d44:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
20097d48:	81000117 	ldw	r4,4(r16)
20097d4c:	80c00017 	ldw	r3,0(r16)
20097d50:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
20097d54:	81000117 	ldw	r4,4(r16)
20097d58:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
20097d5c:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
20097d60:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20097d64:	1001703a 	wrctl	status,r2
20097d68:	8821883a 	mov	r16,r17
20097d6c:	8cbfd21e 	bne	r17,r18,20097cb8 <__flash_rwdata_start+0xffffce4c>
20097d70:	003fe606 	br	20097d0c <__flash_rwdata_start+0xffffcea0>

20097d74 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097d74:	defffd04 	addi	sp,sp,-12

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
20097d78:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097d7c:	dc000015 	stw	r16,0(sp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
20097d80:	2020d17a 	srli	r16,r4,5
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
20097d84:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097d88:	dc400115 	stw	r17,4(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
20097d8c:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
20097d90:	dfc00215 	stw	ra,8(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
20097d94:	800b883a 	mov	r5,r16
20097d98:	0089c580 	call	20089c58 <memalign>
20097d9c:	1023883a 	mov	r17,r2

  if (ptr == NULL) {
20097da0:	10000926 	beq	r2,zero,20097dc8 <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
20097da4:	1009883a 	mov	r4,r2
20097da8:	800b883a 	mov	r5,r16
20097dac:	00976ec0 	call	200976ec <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
20097db0:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
20097db4:	dfc00217 	ldw	ra,8(sp)
20097db8:	dc400117 	ldw	r17,4(sp)
20097dbc:	dc000017 	ldw	r16,0(sp)
20097dc0:	dec00304 	addi	sp,sp,12
20097dc4:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
20097dc8:	0005883a 	mov	r2,zero
20097dcc:	003ff906 	br	20097db4 <__flash_rwdata_start+0xffffcf48>

20097dd0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
20097dd0:	00998a41 	jmpi	200998a4 <alt_busy_sleep>

20097dd4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
20097dd4:	defffe04 	addi	sp,sp,-8
20097dd8:	dfc00115 	stw	ra,4(sp)
20097ddc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
20097de0:	20002716 	blt	r4,zero,20097e80 <write+0xac>
20097de4:	20800324 	muli	r2,r4,12
20097de8:	00c00034 	movhi	r3,0
20097dec:	18c5bd04 	addi	r3,r3,5876
20097df0:	10c9883a 	add	r4,r2,r3
  
  if (fd)
20097df4:	20002226 	beq	r4,zero,20097e80 <write+0xac>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
20097df8:	20800217 	ldw	r2,8(r4)
20097dfc:	108000cc 	andi	r2,r2,3
20097e00:	10000a26 	beq	r2,zero,20097e2c <write+0x58>
20097e04:	20800017 	ldw	r2,0(r4)
20097e08:	10800617 	ldw	r2,24(r2)
20097e0c:	10000726 	beq	r2,zero,20097e2c <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
20097e10:	103ee83a 	callr	r2
20097e14:	1021883a 	mov	r16,r2
20097e18:	80001016 	blt	r16,zero,20097e5c <write+0x88>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
20097e1c:	dfc00117 	ldw	ra,4(sp)
20097e20:	dc000017 	ldw	r16,0(sp)
20097e24:	dec00204 	addi	sp,sp,8
20097e28:	f800283a 	ret
20097e2c:	00800034 	movhi	r2,0
20097e30:	108a9604 	addi	r2,r2,10840
20097e34:	10800017 	ldw	r2,0(r2)
20097e38:	10000526 	beq	r2,zero,20097e50 <write+0x7c>
20097e3c:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
20097e40:	00c00344 	movi	r3,13
20097e44:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
20097e48:	00bfffc4 	movi	r2,-1
20097e4c:	003ff306 	br	20097e1c <__flash_rwdata_start+0xffffcfb0>
20097e50:	00800034 	movhi	r2,0
20097e54:	108ab004 	addi	r2,r2,10944
20097e58:	003ff906 	br	20097e40 <__flash_rwdata_start+0xffffcfd4>
20097e5c:	00800034 	movhi	r2,0
20097e60:	108a9604 	addi	r2,r2,10840
20097e64:	10800017 	ldw	r2,0(r2)
20097e68:	10000e26 	beq	r2,zero,20097ea4 <write+0xd0>
20097e6c:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
20097e70:	0421c83a 	sub	r16,zero,r16
20097e74:	14000015 	stw	r16,0(r2)
        return -1;
20097e78:	00bfffc4 	movi	r2,-1
20097e7c:	003fe706 	br	20097e1c <__flash_rwdata_start+0xffffcfb0>
20097e80:	00800034 	movhi	r2,0
20097e84:	108a9604 	addi	r2,r2,10840
20097e88:	10800017 	ldw	r2,0(r2)
20097e8c:	10000826 	beq	r2,zero,20097eb0 <write+0xdc>
20097e90:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
20097e94:	00c01444 	movi	r3,81
20097e98:	10c00015 	stw	r3,0(r2)
  }
  return -1;
20097e9c:	00bfffc4 	movi	r2,-1
20097ea0:	003fde06 	br	20097e1c <__flash_rwdata_start+0xffffcfb0>
20097ea4:	00800034 	movhi	r2,0
20097ea8:	108ab004 	addi	r2,r2,10944
20097eac:	003ff006 	br	20097e70 <__flash_rwdata_start+0xffffd004>
20097eb0:	00800034 	movhi	r2,0
20097eb4:	108ab004 	addi	r2,r2,10944
20097eb8:	003ff606 	br	20097e94 <__flash_rwdata_start+0xffffd028>

20097ebc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
20097ebc:	deffff04 	addi	sp,sp,-4
20097ec0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
20097ec4:	009a0280 	call	2009a028 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
20097ec8:	00800044 	movi	r2,1
20097ecc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
20097ed0:	dfc00017 	ldw	ra,0(sp)
20097ed4:	dec00104 	addi	sp,sp,4
20097ed8:	f800283a 	ret

20097edc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20097edc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097ee0:	00c80434 	movhi	r3,8208
20097ee4:	00800034 	movhi	r2,0
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
20097ee8:	dfc00115 	stw	ra,4(sp)
20097eec:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097ef0:	18c52004 	addi	r3,r3,5248
20097ef4:	108abb04 	addi	r2,r2,10988
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097ef8:	04000034 	movhi	r16,0
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097efc:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097f00:	84067904 	addi	r16,r16,6628
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097f04:	00c1dcf4 	movhi	r3,1907
20097f08:	00800034 	movhi	r2,0
20097f0c:	18d65004 	addi	r3,r3,22848
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097f10:	01800044 	movi	r6,1
20097f14:	8009883a 	mov	r4,r16
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097f18:	108aba04 	addi	r2,r2,10984
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097f1c:	000b883a 	mov	r5,zero
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
20097f20:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
20097f24:	00981140 	call	20098114 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
20097f28:	01400034 	movhi	r5,0
20097f2c:	813ff604 	addi	r4,r16,-40
20097f30:	294a9204 	addi	r5,r5,10824
20097f34:	009991c0 	call	2009991c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MSGDMA_INIT ( READ_DMA_0, read_dma_0);
20097f38:	01000034 	movhi	r4,0
20097f3c:	21065704 	addi	r4,r4,6492
20097f40:	21400717 	ldw	r5,28(r4)
20097f44:	21800817 	ldw	r6,32(r4)
20097f48:	009903c0 	call	2009903c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
20097f4c:	01000034 	movhi	r4,0
20097f50:	21063f04 	addi	r4,r4,6396
20097f54:	21400717 	ldw	r5,28(r4)
20097f58:	21800817 	ldw	r6,32(r4)
20097f5c:	009903c0 	call	2009903c <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( WRITE_DMA_0, write_dma_0);
20097f60:	01000034 	movhi	r4,0
20097f64:	21062704 	addi	r4,r4,6300
20097f68:	21400717 	ldw	r5,28(r4)
20097f6c:	21800817 	ldw	r6,32(r4)
}
20097f70:	dfc00117 	ldw	ra,4(sp)
20097f74:	dc000017 	ldw	r16,0(sp)
20097f78:	dec00204 	addi	sp,sp,8
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MSGDMA_INIT ( READ_DMA_0, read_dma_0);
    ALTERA_MSGDMA_INIT ( VIDEO_DMA, video_dma);
    ALTERA_MSGDMA_INIT ( WRITE_DMA_0, write_dma_0);
20097f7c:	009903c1 	jmpi	2009903c <alt_msgdma_init>

20097f80 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
20097f80:	20800017 	ldw	r2,0(r4)
20097f84:	21c00217 	ldw	r7,8(r4)
20097f88:	11000a04 	addi	r4,r2,40
20097f8c:	00982581 	jmpi	20098258 <altera_avalon_jtag_uart_read>

20097f90 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
20097f90:	20800017 	ldw	r2,0(r4)
20097f94:	21c00217 	ldw	r7,8(r4)
20097f98:	11000a04 	addi	r4,r2,40
20097f9c:	00983941 	jmpi	20098394 <altera_avalon_jtag_uart_write>

20097fa0 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
20097fa0:	20800017 	ldw	r2,0(r4)
20097fa4:	21400217 	ldw	r5,8(r4)
20097fa8:	11000a04 	addi	r4,r2,40
20097fac:	00981941 	jmpi	20098194 <altera_avalon_jtag_uart_close>

20097fb0 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
20097fb0:	21000017 	ldw	r4,0(r4)
20097fb4:	21000a04 	addi	r4,r4,40
20097fb8:	00981e41 	jmpi	200981e4 <altera_avalon_jtag_uart_ioctl>

20097fbc <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
20097fbc:	20800017 	ldw	r2,0(r4)
20097fc0:	10800104 	addi	r2,r2,4
20097fc4:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
20097fc8:	18c1000c 	andi	r3,r3,1024
20097fcc:	18000a1e 	bne	r3,zero,20097ff8 <altera_avalon_jtag_uart_timeout+0x3c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
20097fd0:	20800917 	ldw	r2,36(r4)
20097fd4:	00e00034 	movhi	r3,32768
20097fd8:	18ffff04 	addi	r3,r3,-4
20097fdc:	18800236 	bltu	r3,r2,20097fe8 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
20097fe0:	10800044 	addi	r2,r2,1
20097fe4:	20800915 	stw	r2,36(r4)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
20097fe8:	00800034 	movhi	r2,0
20097fec:	108ab904 	addi	r2,r2,10980
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20097ff0:	10800017 	ldw	r2,0(r2)
20097ff4:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
20097ff8:	20c00817 	ldw	r3,32(r4)
20097ffc:	18c10014 	ori	r3,r3,1024
20098000:	10c00035 	stwio	r3,0(r2)
20098004:	00800034 	movhi	r2,0
20098008:	108ab904 	addi	r2,r2,10980
    sp->host_inactive = 0;
2009800c:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
20098010:	10800017 	ldw	r2,0(r2)
20098014:	f800283a 	ret

20098018 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
20098018:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009801c:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20098020:	02ffff44 	movi	r11,-3
20098024:	3a400104 	addi	r9,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20098028:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
2009802c:	4080c00c 	andi	r2,r8,768
20098030:	10003726 	beq	r2,zero,20098110 <altera_avalon_jtag_uart_irq+0xf8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
20098034:	4080400c 	andi	r2,r8,256
20098038:	10001626 	beq	r2,zero,20098094 <altera_avalon_jtag_uart_irq+0x7c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009803c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
20098040:	21800b17 	ldw	r6,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098044:	10800044 	addi	r2,r2,1
20098048:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
2009804c:	30800c1e 	bne	r6,r2,20098080 <altera_avalon_jtag_uart_irq+0x68>
20098050:	00002906 	br	200980f8 <altera_avalon_jtag_uart_irq+0xe0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20098054:	20c00a17 	ldw	r3,40(r4)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098058:	20800a17 	ldw	r2,40(r4)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
2009805c:	20c7883a 	add	r3,r4,r3
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098060:	10800044 	addi	r2,r2,1
20098064:	1081ffcc 	andi	r2,r2,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
20098068:	19400e05 	stb	r5,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
2009806c:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098070:	20800a17 	ldw	r2,40(r4)
20098074:	10800044 	addi	r2,r2,1
20098078:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
2009807c:	30800326 	beq	r6,r2,2009808c <altera_avalon_jtag_uart_irq+0x74>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
20098080:	39400037 	ldwio	r5,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
20098084:	28a0000c 	andi	r2,r5,32768
20098088:	103ff21e 	bne	r2,zero,20098054 <__flash_rwdata_start+0xffffd1e8>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
2009808c:	297fffec 	andhi	r5,r5,65535
20098090:	2800191e 	bne	r5,zero,200980f8 <altera_avalon_jtag_uart_irq+0xe0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
20098094:	4080800c 	andi	r2,r8,512
20098098:	103fe326 	beq	r2,zero,20098028 <__flash_rwdata_start+0xffffd1bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
2009809c:	4010d43a 	srli	r8,r8,16

      while (space > 0 && sp->tx_out != sp->tx_in)
200980a0:	40000b1e 	bne	r8,zero,200980d0 <altera_avalon_jtag_uart_irq+0xb8>
200980a4:	003fe006 	br	20098028 <__flash_rwdata_start+0xffffd1bc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
200980a8:	20800d17 	ldw	r2,52(r4)
200980ac:	2085883a 	add	r2,r4,r2
200980b0:	10820e07 	ldb	r2,2104(r2)
200980b4:	38800035 	stwio	r2,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200980b8:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
200980bc:	423fffc4 	addi	r8,r8,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200980c0:	10800044 	addi	r2,r2,1
200980c4:	1081ffcc 	andi	r2,r2,2047
200980c8:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
200980cc:	403fd626 	beq	r8,zero,20098028 <__flash_rwdata_start+0xffffd1bc>
200980d0:	20c00d17 	ldw	r3,52(r4)
200980d4:	20800c17 	ldw	r2,48(r4)
200980d8:	18bff31e 	bne	r3,r2,200980a8 <__flash_rwdata_start+0xffffd23c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
200980dc:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200980e0:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
200980e4:	12c4703a 	and	r2,r2,r11
200980e8:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200980ec:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
200980f0:	48800037 	ldwio	r2,0(r9)
200980f4:	003fcc06 	br	20098028 <__flash_rwdata_start+0xffffd1bc>
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
200980f8:	20800817 	ldw	r2,32(r4)
200980fc:	1284703a 	and	r2,r2,r10
20098100:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
20098104:	48800035 	stwio	r2,0(r9)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
20098108:	48800037 	ldwio	r2,0(r9)
2009810c:	003fe106 	br	20098094 <__flash_rwdata_start+0xffffd228>
20098110:	f800283a 	ret

20098114 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20098114:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20098118:	21c00017 	ldw	r7,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
2009811c:	dc000115 	stw	r16,4(sp)
20098120:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20098124:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20098128:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009812c:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
20098130:	2809883a 	mov	r4,r5
20098134:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
20098138:	38800135 	stwio	r2,4(r7)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
2009813c:	018802b4 	movhi	r6,8202
20098140:	31a00604 	addi	r6,r6,-32744
20098144:	800f883a 	mov	r7,r16
20098148:	d8000015 	stw	zero,0(sp)
2009814c:	0099ae00 	call	20099ae0 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
20098150:	00800034 	movhi	r2,0
20098154:	108ab904 	addi	r2,r2,10980
20098158:	11400017 	ldw	r5,0(r2)
2009815c:	01880274 	movhi	r6,8201
20098160:	319fef04 	addi	r6,r6,32700
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
20098164:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
20098168:	81000204 	addi	r4,r16,8
2009816c:	800f883a 	mov	r7,r16
20098170:	00998100 	call	20099810 <alt_alarm_start>
20098174:	1000030e 	bge	r2,zero,20098184 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
20098178:	00a00034 	movhi	r2,32768
2009817c:	10bfffc4 	addi	r2,r2,-1
20098180:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
20098184:	dfc00217 	ldw	ra,8(sp)
20098188:	dc000117 	ldw	r16,4(sp)
2009818c:	dec00304 	addi	sp,sp,12
20098190:	f800283a 	ret

20098194 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
20098194:	2890000c 	andi	r2,r5,16384
20098198:	21c00c17 	ldw	r7,48(r4)
2009819c:	10000426 	beq	r2,zero,200981b0 <altera_avalon_jtag_uart_close+0x1c>
200981a0:	00000606 	br	200981bc <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
200981a4:	21800917 	ldw	r6,36(r4)
200981a8:	20c00117 	ldw	r3,4(r4)
200981ac:	30c00a2e 	bgeu	r6,r3,200981d8 <altera_avalon_jtag_uart_close+0x44>
200981b0:	20c00d17 	ldw	r3,52(r4)
200981b4:	19fffb1e 	bne	r3,r7,200981a4 <__flash_rwdata_start+0xffffd338>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
200981b8:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
200981bc:	20800d17 	ldw	r2,52(r4)
200981c0:	11c00626 	beq	r2,r7,200981dc <altera_avalon_jtag_uart_close+0x48>
200981c4:	20c00917 	ldw	r3,36(r4)
200981c8:	20800117 	ldw	r2,4(r4)
200981cc:	1880032e 	bgeu	r3,r2,200981dc <altera_avalon_jtag_uart_close+0x48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
200981d0:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
200981d4:	f800283a 	ret
200981d8:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
200981dc:	0005883a 	mov	r2,zero
200981e0:	f800283a 	ret

200981e4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
200981e4:	009a8044 	movi	r2,27137
200981e8:	28800d26 	beq	r5,r2,20098220 <altera_avalon_jtag_uart_ioctl+0x3c>
200981ec:	009a8084 	movi	r2,27138
200981f0:	2880091e 	bne	r5,r2,20098218 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
200981f4:	21400117 	ldw	r5,4(r4)
200981f8:	00a00034 	movhi	r2,32768
200981fc:	10bfffc4 	addi	r2,r2,-1
20098200:	28800526 	beq	r5,r2,20098218 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
20098204:	20c00917 	ldw	r3,36(r4)
      rc = 0;
20098208:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
2009820c:	1947803a 	cmpltu	r3,r3,r5
20098210:	30c00015 	stw	r3,0(r6)
20098214:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
20098218:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
2009821c:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
20098220:	20c00117 	ldw	r3,4(r4)
20098224:	00a00034 	movhi	r2,32768
20098228:	10bfffc4 	addi	r2,r2,-1
2009822c:	18bffa26 	beq	r3,r2,20098218 <__flash_rwdata_start+0xffffd3ac>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
20098230:	30800017 	ldw	r2,0(r6)
20098234:	01600034 	movhi	r5,32768
20098238:	297fff04 	addi	r5,r5,-4
2009823c:	10ffff84 	addi	r3,r2,-2
20098240:	28c0022e 	bgeu	r5,r3,2009824c <altera_avalon_jtag_uart_ioctl+0x68>
20098244:	00a00034 	movhi	r2,32768
20098248:	10bfff84 	addi	r2,r2,-2
2009824c:	20800115 	stw	r2,4(r4)
      rc = 0;
20098250:	0005883a 	mov	r2,zero
20098254:	f800283a 	ret

20098258 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
20098258:	defff604 	addi	sp,sp,-40
2009825c:	dcc00315 	stw	r19,12(sp)
20098260:	dfc00915 	stw	ra,36(sp)
20098264:	df000815 	stw	fp,32(sp)
20098268:	ddc00715 	stw	r23,28(sp)
2009826c:	dd800615 	stw	r22,24(sp)
20098270:	dd400515 	stw	r21,20(sp)
20098274:	dd000415 	stw	r20,16(sp)
20098278:	dc800215 	stw	r18,8(sp)
2009827c:	dc400115 	stw	r17,4(sp)
20098280:	dc000015 	stw	r16,0(sp)
20098284:	3027883a 	mov	r19,r6
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
20098288:	01803e0e 	bge	zero,r6,20098384 <altera_avalon_jtag_uart_read+0x12c>
2009828c:	24000b17 	ldw	r16,44(r4)
20098290:	2025883a 	mov	r18,r4
20098294:	282b883a 	mov	r21,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
20098298:	3d90000c 	andi	r22,r7,16384
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
2009829c:	05020004 	movi	r20,2048
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
200982a0:	a839883a 	mov	fp,r21
200982a4:	00000a06 	br	200982d0 <altera_avalon_jtag_uart_read+0x78>
200982a8:	9880012e 	bgeu	r19,r2,200982b0 <altera_avalon_jtag_uart_read+0x58>
200982ac:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200982b0:	8c21883a 	add	r16,r17,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
200982b4:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200982b8:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
200982bc:	008a6740 	call	2008a674 <memcpy>
      ptr   += n;
      space -= n;
200982c0:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
200982c4:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
200982c8:	e479883a 	add	fp,fp,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
200982cc:	04c0090e 	bge	zero,r19,200982f4 <altera_avalon_jtag_uart_read+0x9c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
200982d0:	95c00a17 	ldw	r23,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
200982d4:	a405c83a 	sub	r2,r20,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
200982d8:	bc000136 	bltu	r23,r16,200982e0 <altera_avalon_jtag_uart_read+0x88>
        n = in - out;
200982dc:	bc05c83a 	sub	r2,r23,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
200982e0:	81400e04 	addi	r5,r16,56
200982e4:	e009883a 	mov	r4,fp
200982e8:	914b883a 	add	r5,r18,r5
200982ec:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
200982f0:	103fed1e 	bne	r2,zero,200982a8 <__flash_rwdata_start+0xffffd43c>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
200982f4:	e540171e 	bne	fp,r21,20098354 <altera_avalon_jtag_uart_read+0xfc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
200982f8:	b0000426 	beq	r22,zero,2009830c <altera_avalon_jtag_uart_read+0xb4>
200982fc:	00002306 	br	2009838c <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
20098300:	90c00917 	ldw	r3,36(r18)
20098304:	90800117 	ldw	r2,4(r18)
20098308:	1880022e 	bgeu	r3,r2,20098314 <altera_avalon_jtag_uart_read+0xbc>
2009830c:	90800a17 	ldw	r2,40(r18)
20098310:	15fffb26 	beq	r2,r23,20098300 <__flash_rwdata_start+0xffffd494>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
20098314:	90800a17 	ldw	r2,40(r18)
20098318:	15c00126 	beq	r2,r23,20098320 <altera_avalon_jtag_uart_read+0xc8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
2009831c:	04ffe016 	blt	zero,r19,200982a0 <__flash_rwdata_start+0xffffd434>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
20098320:	00bffec4 	movi	r2,-5
}
20098324:	dfc00917 	ldw	ra,36(sp)
20098328:	df000817 	ldw	fp,32(sp)
2009832c:	ddc00717 	ldw	r23,28(sp)
20098330:	dd800617 	ldw	r22,24(sp)
20098334:	dd400517 	ldw	r21,20(sp)
20098338:	dd000417 	ldw	r20,16(sp)
2009833c:	dcc00317 	ldw	r19,12(sp)
20098340:	dc800217 	ldw	r18,8(sp)
20098344:	dc400117 	ldw	r17,4(sp)
20098348:	dc000017 	ldw	r16,0(sp)
2009834c:	dec00a04 	addi	sp,sp,40
20098350:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098354:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098358:	00bfff84 	movi	r2,-2
2009835c:	1884703a 	and	r2,r3,r2
20098360:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
20098364:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098368:	91000017 	ldw	r4,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
2009836c:	10800054 	ori	r2,r2,1
20098370:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098374:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098378:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
2009837c:	e545c83a 	sub	r2,fp,r21
20098380:	003fe806 	br	20098324 <__flash_rwdata_start+0xffffd4b8>
20098384:	39d0000c 	andi	r7,r7,16384
  else if (flags & O_NONBLOCK)
20098388:	383fe526 	beq	r7,zero,20098320 <__flash_rwdata_start+0xffffd4b4>
    return -EWOULDBLOCK;
2009838c:	00bffd44 	movi	r2,-11
20098390:	003fe406 	br	20098324 <__flash_rwdata_start+0xffffd4b8>

20098394 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
20098394:	defff604 	addi	sp,sp,-40
20098398:	df000815 	stw	fp,32(sp)
2009839c:	dc000015 	stw	r16,0(sp)
200983a0:	dfc00915 	stw	ra,36(sp)
200983a4:	ddc00715 	stw	r23,28(sp)
200983a8:	dd800615 	stw	r22,24(sp)
200983ac:	dd400515 	stw	r21,20(sp)
200983b0:	dd000415 	stw	r20,16(sp)
200983b4:	dcc00315 	stw	r19,12(sp)
200983b8:	dc800215 	stw	r18,8(sp)
200983bc:	dc400115 	stw	r17,4(sp)
200983c0:	3039883a 	mov	fp,r6
200983c4:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
200983c8:	01804a0e 	bge	zero,r6,200984f4 <altera_avalon_jtag_uart_write+0x160>
200983cc:	2827883a 	mov	r19,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
200983d0:	3c50000c 	andi	r17,r7,16384
200983d4:	2829883a 	mov	r20,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
200983d8:	0541ffc4 	movi	r21,2047
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200983dc:	04bfff84 	movi	r18,-2
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
200983e0:	85c00c17 	ldw	r23,48(r16)
      out = sp->tx_out;
200983e4:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
200983e8:	b8c03c2e 	bgeu	r23,r3,200984dc <altera_avalon_jtag_uart_write+0x148>
200983ec:	1dbfffc4 	addi	r22,r3,-1
        n = out - 1 - in;
200983f0:	b5edc83a 	sub	r22,r22,r23
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
200983f4:	b0002526 	beq	r22,zero,2009848c <altera_avalon_jtag_uart_write+0xf8>
200983f8:	e580012e 	bgeu	fp,r22,20098400 <altera_avalon_jtag_uart_write+0x6c>
200983fc:	e02d883a 	mov	r22,fp
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
20098400:	b9020e04 	addi	r4,r23,2104
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098404:	b5ef883a 	add	r23,r22,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
20098408:	a00b883a 	mov	r5,r20
2009840c:	8109883a 	add	r4,r16,r4
20098410:	b00d883a 	mov	r6,r22
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098414:	bdc1ffcc 	andi	r23,r23,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
20098418:	008a6740 	call	2008a674 <memcpy>
      ptr   += n;
      count -= n;
2009841c:	e5b9c83a 	sub	fp,fp,r22

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
20098420:	85c00c15 	stw	r23,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
20098424:	a5a9883a 	add	r20,r20,r22
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
20098428:	073fed16 	blt	zero,fp,200983e0 <__flash_rwdata_start+0xffffd574>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009842c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098430:	00bfff84 	movi	r2,-2
20098434:	1884703a 	and	r2,r3,r2
20098438:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009843c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098440:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20098444:	10800094 	ori	r2,r2,2
20098448:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009844c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098450:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
20098454:	9d003226 	beq	r19,r20,20098520 <altera_avalon_jtag_uart_write+0x18c>
    return ptr - start;
20098458:	a4c5c83a 	sub	r2,r20,r19
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
2009845c:	dfc00917 	ldw	ra,36(sp)
20098460:	df000817 	ldw	fp,32(sp)
20098464:	ddc00717 	ldw	r23,28(sp)
20098468:	dd800617 	ldw	r22,24(sp)
2009846c:	dd400517 	ldw	r21,20(sp)
20098470:	dd000417 	ldw	r20,16(sp)
20098474:	dcc00317 	ldw	r19,12(sp)
20098478:	dc800217 	ldw	r18,8(sp)
2009847c:	dc400117 	ldw	r17,4(sp)
20098480:	dc000017 	ldw	r16,0(sp)
20098484:	dec00a04 	addi	sp,sp,40
20098488:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009848c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098490:	2484703a 	and	r2,r4,r18
20098494:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20098498:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
2009849c:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
200984a0:	10800094 	ori	r2,r2,2
200984a4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
200984a8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200984ac:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
200984b0:	88001e1e 	bne	r17,zero,2009852c <altera_avalon_jtag_uart_write+0x198>
200984b4:	81000917 	ldw	r4,36(r16)
200984b8:	00000206 	br	200984c4 <altera_avalon_jtag_uart_write+0x130>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
200984bc:	80800117 	ldw	r2,4(r16)
200984c0:	2080022e 	bgeu	r4,r2,200984cc <altera_avalon_jtag_uart_write+0x138>
200984c4:	80800d17 	ldw	r2,52(r16)
200984c8:	18bffc26 	beq	r3,r2,200984bc <__flash_rwdata_start+0xffffd650>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
200984cc:	203fc426 	beq	r4,zero,200983e0 <__flash_rwdata_start+0xffffd574>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
200984d0:	9d3fe11e 	bne	r19,r20,20098458 <__flash_rwdata_start+0xffffd5ec>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
200984d4:	00bffec4 	movi	r2,-5
200984d8:	003fe006 	br	2009845c <__flash_rwdata_start+0xffffd5f0>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
200984dc:	18000326 	beq	r3,zero,200984ec <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
200984e0:	00820004 	movi	r2,2048
200984e4:	15edc83a 	sub	r22,r2,r23
200984e8:	003fc206 	br	200983f4 <__flash_rwdata_start+0xffffd588>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
200984ec:	adedc83a 	sub	r22,r21,r23
200984f0:	003fc006 	br	200983f4 <__flash_rwdata_start+0xffffd588>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200984f4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200984f8:	00bfff84 	movi	r2,-2
200984fc:	1884703a 	and	r2,r3,r2
20098500:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
20098504:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098508:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
2009850c:	10800094 	ori	r2,r2,2
20098510:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
20098514:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098518:	1801703a 	wrctl	status,r3
2009851c:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
20098520:	883fec26 	beq	r17,zero,200984d4 <__flash_rwdata_start+0xffffd668>
    return -EWOULDBLOCK;
20098524:	00bffd44 	movi	r2,-11
20098528:	003fcc06 	br	2009845c <__flash_rwdata_start+0xffffd5f0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
2009852c:	9d3fca1e 	bne	r19,r20,20098458 <__flash_rwdata_start+0xffffd5ec>
20098530:	003ffc06 	br	20098524 <__flash_rwdata_start+0xffffd6b8>

20098534 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
20098534:	00800034 	movhi	r2,0
20098538:	108aba04 	addi	r2,r2,10984
2009853c:	10c00017 	ldw	r3,0(r2)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
20098540:	00800034 	movhi	r2,0
20098544:	108abb04 	addi	r2,r2,10988
20098548:	10800017 	ldw	r2,0(r2)

  if (!altera_avalon_timer_ts_freq)
2009854c:	18000a26 	beq	r3,zero,20098578 <alt_timestamp_start+0x44>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
20098550:	10c00104 	addi	r3,r2,4
20098554:	01000204 	movi	r4,8
20098558:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
2009855c:	013fffd4 	movui	r4,65535
20098560:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
20098564:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
20098568:	00800104 	movi	r2,4
2009856c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
20098570:	0005883a 	mov	r2,zero
20098574:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
20098578:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
2009857c:	f800283a 	ret

20098580 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
20098580:	00800034 	movhi	r2,0
20098584:	108aba04 	addi	r2,r2,10984
20098588:	10800017 	ldw	r2,0(r2)
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
2009858c:	00c00034 	movhi	r3,0
20098590:	18cabb04 	addi	r3,r3,10988
20098594:	18c00017 	ldw	r3,0(r3)

  if (!altera_avalon_timer_ts_freq)
20098598:	1000021e 	bne	r2,zero,200985a4 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
2009859c:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
200985a0:	f800283a 	ret
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
200985a4:	18800404 	addi	r2,r3,16
200985a8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
200985ac:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
200985b0:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
200985b4:	1806943a 	slli	r3,r3,16
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
200985b8:	10bfffcc 	andi	r2,r2,65535
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
200985bc:	1884303a 	nor	r2,r3,r2
200985c0:	f800283a 	ret

200985c4 <alt_timestamp_freq>:
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
200985c4:	00800034 	movhi	r2,0
200985c8:	108aba04 	addi	r2,r2,10984
}
200985cc:	10800017 	ldw	r2,0(r2)
200985d0:	f800283a 	ret

200985d4 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
200985d4:	defffd04 	addi	sp,sp,-12
200985d8:	dc000015 	stw	r16,0(sp)
200985dc:	dfc00215 	stw	ra,8(sp)
200985e0:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
200985e4:	20801783 	ldbu	r2,94(r4)
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
200985e8:	2021883a 	mov	r16,r4
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
200985ec:	10001d26 	beq	r2,zero,20098664 <alt_msgdma_irq+0x90>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
200985f0:	20c00617 	ldw	r3,24(r4)
200985f4:	19000037 	ldwio	r4,0(r3)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
200985f8:	00bffdc4 	movi	r2,-9
200985fc:	2084703a 	and	r2,r4,r2
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
20098600:	18800035 	stwio	r2,0(r3)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
20098604:	80800617 	ldw	r2,24(r16)
20098608:	00c00044 	movi	r3,1
2009860c:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
20098610:	80c00b17 	ldw	r3,44(r16)
20098614:	18000726 	beq	r3,zero,20098634 <alt_msgdma_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098618:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
2009861c:	00bfff84 	movi	r2,-2
20098620:	8884703a 	and	r2,r17,r2
20098624:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
20098628:	81000c17 	ldw	r4,48(r16)
2009862c:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098630:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
20098634:	80801783 	ldbu	r2,94(r16)
20098638:	1000141e 	bne	r2,zero,2009868c <alt_msgdma_irq+0xb8>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
2009863c:	80800317 	ldw	r2,12(r16)
20098640:	10800104 	addi	r2,r2,4
20098644:	10c00037 	ldwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
20098648:	18c00414 	ori	r3,r3,16
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
2009864c:	10c00035 	stwio	r3,0(r2)
    }

    return;
}
20098650:	dfc00217 	ldw	ra,8(sp)
20098654:	dc400117 	ldw	r17,4(sp)
20098658:	dc000017 	ldw	r16,0(sp)
2009865c:	dec00304 	addi	sp,sp,12
20098660:	f800283a 	ret
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
20098664:	20800317 	ldw	r2,12(r4)
20098668:	10800104 	addi	r2,r2,4
2009866c:	11000037 	ldwio	r4,0(r2)
20098670:	00fffbc4 	movi	r3,-17
20098674:	20c6703a 	and	r3,r4,r3
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20098678:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
2009867c:	80800317 	ldw	r2,12(r16)
20098680:	00c08004 	movi	r3,512
20098684:	10c00035 	stwio	r3,0(r2)
20098688:	003fe106 	br	20098610 <__flash_rwdata_start+0xffffd7a4>

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
2009868c:	80c00617 	ldw	r3,24(r16)
20098690:	18800037 	ldwio	r2,0(r3)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20098694:	10800214 	ori	r2,r2,8
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
20098698:	18800035 	stwio	r2,0(r3)
2009869c:	003fec06 	br	20098650 <__flash_rwdata_start+0xffffd7e4>

200986a0 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
200986a0:	20801217 	ldw	r2,72(r4)
200986a4:	11c00a36 	bltu	r2,r7,200986d0 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
200986a8:	20801703 	ldbu	r2,92(r4)
200986ac:	1000081e 	bne	r2,zero,200986d0 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200986b0:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
200986b4:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
200986b8:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200986bc:	10a00034 	orhi	r2,r2,32768
200986c0:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
200986c4:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
200986c8:	0005883a 	mov	r2,zero
200986cc:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
200986d0:	00bffa84 	movi	r2,-22
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
            write_address, length, control);
}
200986d4:	f800283a 	ret

200986d8 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
200986d8:	20801217 	ldw	r2,72(r4)
200986dc:	11c00a36 	bltu	r2,r7,20098708 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
200986e0:	20801703 	ldbu	r2,92(r4)
200986e4:	1000081e 	bne	r2,zero,20098708 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200986e8:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
200986ec:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
200986f0:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200986f4:	10a00034 	orhi	r2,r2,32768
200986f8:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
200986fc:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
20098700:	0005883a 	mov	r2,zero
20098704:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20098708:	00bffa84 	movi	r2,-22
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            NULL, length, control);

}
2009870c:	f800283a 	ret

20098710 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
20098710:	d8c00017 	ldw	r3,0(sp)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20098714:	20801217 	ldw	r2,72(r4)
20098718:	10c00a36 	bltu	r2,r3,20098744 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
2009871c:	20801703 	ldbu	r2,92(r4)
20098720:	1000081e 	bne	r2,zero,20098744 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098724:	d8800117 	ldw	r2,4(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
20098728:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
2009872c:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098730:	10a00034 	orhi	r2,r2,32768
20098734:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
20098738:	28c00215 	stw	r3,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2009873c:	0005883a 	mov	r2,zero
20098740:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20098744:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            write_address, length, control);
}
20098748:	f800283a 	ret

2009874c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2009874c:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
20098750:	da400117 	ldw	r9,4(sp)
20098754:	da000217 	ldw	r8,8(sp)
20098758:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2009875c:	11c01736 	bltu	r2,r7,200987bc <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
       dev->max_stride < read_stride ||
20098760:	20801417 	ldw	r2,80(r4)
       dev->max_stride < write_stride ||
20098764:	1abfffcc 	andi	r10,r3,65535
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098768:	10001226 	beq	r2,zero,200987b4 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x68>
       dev->max_stride < write_stride ||
2009876c:	21001703 	ldbu	r4,92(r4)
20098770:	00800044 	movi	r2,1
20098774:	2080111e 	bne	r4,r2,200987bc <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098778:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
2009877c:	28000015 	stw	zero,0(r5)
    descriptor->write_address_low = write_address;
20098780:	29800115 	stw	r6,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098784:	10a00034 	orhi	r2,r2,32768
20098788:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
2009878c:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
20098790:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
20098794:	28000385 	stb	zero,14(r5)
    descriptor->write_burst_count = write_burst_count;
20098798:	2a0003c5 	stb	r8,15(r5)
    descriptor->read_stride = read_stride;
2009879c:	2800040d 	sth	zero,16(r5)
    descriptor->write_stride = write_stride;
200987a0:	28c0048d 	sth	r3,18(r5)
    descriptor->read_address_high = NULL;
200987a4:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
200987a8:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
200987ac:	0005883a 	mov	r2,zero
200987b0:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
200987b4:	20801317 	ldw	r2,76(r4)
200987b8:	12bfec2e 	bgeu	r2,r10,2009876c <__flash_rwdata_start+0xffffd900>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
200987bc:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
200987c0:	f800283a 	ret

200987c4 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
200987c4:	20801217 	ldw	r2,72(r4)
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
200987c8:	da400117 	ldw	r9,4(sp)
200987cc:	da000217 	ldw	r8,8(sp)
200987d0:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
200987d4:	11c01736 	bltu	r2,r7,20098834 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
200987d8:	20801417 	ldw	r2,80(r4)
       dev->max_stride < read_stride ||
200987dc:	1abfffcc 	andi	r10,r3,65535
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
200987e0:	10001226 	beq	r2,zero,2009882c <alt_msgdma_construct_extended_mm_to_st_descriptor+0x68>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
200987e4:	21001703 	ldbu	r4,92(r4)
200987e8:	00800044 	movi	r2,1
200987ec:	2080111e 	bne	r4,r2,20098834 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200987f0:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
200987f4:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
200987f8:	28000115 	stw	zero,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200987fc:	10a00034 	orhi	r2,r2,32768
20098800:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
20098804:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
20098808:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
2009880c:	2a000385 	stb	r8,14(r5)
    descriptor->write_burst_count = write_burst_count;
20098810:	280003c5 	stb	zero,15(r5)
    descriptor->read_stride = read_stride;
20098814:	28c0040d 	sth	r3,16(r5)
    descriptor->write_stride = write_stride;
20098818:	2800048d 	sth	zero,18(r5)
    descriptor->read_address_high = NULL;
2009881c:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
20098820:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20098824:	0005883a 	mov	r2,zero
20098828:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
2009882c:	20801317 	ldw	r2,76(r4)
20098830:	12bfec2e 	bgeu	r2,r10,200987e4 <__flash_rwdata_start+0xffffd978>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098834:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
20098838:	f800283a 	ret

2009883c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
2009883c:	d8c00017 	ldw	r3,0(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20098840:	20801217 	ldw	r2,72(r4)
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
20098844:	db000217 	ldw	r12,8(sp)
20098848:	dac00317 	ldw	r11,12(sp)
2009884c:	da800417 	ldw	r10,16(sp)
20098850:	da000517 	ldw	r8,20(sp)
20098854:	da400617 	ldw	r9,24(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20098858:	10c01936 	bltu	r2,r3,200988c0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
       dev->max_stride < read_stride ||
2009885c:	20801417 	ldw	r2,80(r4)
20098860:	23401317 	ldw	r13,76(r4)
20098864:	43bfffcc 	andi	r14,r8,65535
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
20098868:	10001726 	beq	r2,zero,200988c8 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x8c>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
2009886c:	4bbfffcc 	andi	r14,r9,65535
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098870:	10001226 	beq	r2,zero,200988bc <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
20098874:	21001703 	ldbu	r4,92(r4)
20098878:	00800044 	movi	r2,1
2009887c:	2080101e 	bne	r4,r2,200988c0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098880:	d8800117 	ldw	r2,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
20098884:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
20098888:	29c00115 	stw	r7,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009888c:	10a00034 	orhi	r2,r2,32768
20098890:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
20098894:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
20098898:	2b00030d 	sth	r12,12(r5)
    descriptor->read_burst_count = read_burst_count;
2009889c:	2ac00385 	stb	r11,14(r5)
    descriptor->write_burst_count = write_burst_count;
200988a0:	2a8003c5 	stb	r10,15(r5)
    descriptor->read_stride = read_stride;
200988a4:	2a00040d 	sth	r8,16(r5)
    descriptor->write_stride = write_stride;
200988a8:	2a40048d 	sth	r9,18(r5)
    descriptor->read_address_high = NULL;
200988ac:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
200988b0:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
200988b4:	0005883a 	mov	r2,zero
200988b8:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
200988bc:	6bbfed2e 	bgeu	r13,r14,20098874 <__flash_rwdata_start+0xffffda08>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
200988c0:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
200988c4:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
200988c8:	6bbfe82e 	bgeu	r13,r14,2009886c <__flash_rwdata_start+0xffffda00>
200988cc:	003ffc06 	br	200988c0 <__flash_rwdata_start+0xffffda54>

200988d0 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
200988d0:	d8c00017 	ldw	r3,0(sp)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
200988d4:	20801217 	ldw	r2,72(r4)
200988d8:	10c00e36 	bltu	r2,r3,20098914 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
200988dc:	20801703 	ldbu	r2,92(r4)
200988e0:	10000c1e 	bne	r2,zero,20098914 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200988e4:	d9000117 	ldw	r4,4(sp)
200988e8:	00900034 	movhi	r2,16384
200988ec:	10bfffc4 	addi	r2,r2,-1
200988f0:	2084703a 	and	r2,r4,r2
200988f4:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
200988f8:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
200988fc:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
20098900:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
20098904:	28c00215 	stw	r3,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
20098908:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2009890c:	0005883a 	mov	r2,zero
20098910:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
20098914:	00bffa84 	movi	r2,-22
	alt_u32 length,
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, write_address, length, control);
}
20098918:	f800283a 	ret

2009891c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
2009891c:	20801217 	ldw	r2,72(r4)
20098920:	11c00e36 	bltu	r2,r7,2009895c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
20098924:	20801703 	ldbu	r2,92(r4)
20098928:	10000c1e 	bne	r2,zero,2009895c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
2009892c:	d8c00017 	ldw	r3,0(sp)
20098930:	00900034 	movhi	r2,16384
20098934:	10bfffc4 	addi	r2,r2,-1
20098938:	1884703a 	and	r2,r3,r2
2009893c:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
20098940:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
20098944:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
20098948:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
2009894c:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
20098950:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
20098954:	0005883a 	mov	r2,zero
20098958:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
2009895c:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		0, write_address, length, control);
}
20098960:	f800283a 	ret

20098964 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
20098964:	20801217 	ldw	r2,72(r4)
20098968:	11c00e36 	bltu	r2,r7,200989a4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
2009896c:	20801703 	ldbu	r2,92(r4)
20098970:	10000c1e 	bne	r2,zero,200989a4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098974:	d8c00017 	ldw	r3,0(sp)
20098978:	00900034 	movhi	r2,16384
2009897c:	10bfffc4 	addi	r2,r2,-1
20098980:	1884703a 	and	r2,r3,r2
20098984:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
20098988:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
2009898c:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
20098990:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
20098994:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
20098998:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
2009899c:	0005883a 	mov	r2,zero
200989a0:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
200989a4:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, 0, length, control);
}
200989a8:	f800283a 	ret

200989ac <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
200989ac:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
200989b0:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
200989b4:	da800217 	ldw	r10,8(sp)
200989b8:	da400317 	ldw	r9,12(sp)
200989bc:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
200989c0:	10c01c36 	bltu	r2,r3,20098a34 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
       dev->max_stride < read_stride ||
200989c4:	20801417 	ldw	r2,80(r4)
       dev->max_stride < write_stride ||
200989c8:	42ffffcc 	andi	r11,r8,65535
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
200989cc:	10001726 	beq	r2,zero,20098a2c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
200989d0:	21001703 	ldbu	r4,92(r4)
200989d4:	00800044 	movi	r2,1
200989d8:	2080161e 	bne	r4,r2,20098a34 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
200989dc:	d9000117 	ldw	r4,4(sp)
200989e0:	00900034 	movhi	r2,16384
200989e4:	10bfffc4 	addi	r2,r2,-1
200989e8:	2084703a 	and	r2,r4,r2
200989ec:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
200989f0:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
200989f4:	28000915 	stw	zero,36(r5)
    descriptor->read_address_low = read_address_low;
200989f8:	28000015 	stw	zero,0(r5)
    descriptor->write_address_high = write_address_high;
200989fc:	29800a15 	stw	r6,40(r5)
    descriptor->write_address_low = write_address_low;
20098a00:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
20098a04:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
20098a08:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
20098a0c:	28000785 	stb	zero,30(r5)
    descriptor->write_burst_count = write_burst_count;
20098a10:	2a4007c5 	stb	r9,31(r5)
    descriptor->read_stride = read_stride;
20098a14:	2800080d 	sth	zero,32(r5)
    descriptor->write_stride = write_stride;
20098a18:	2a00088d 	sth	r8,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
20098a1c:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
20098a20:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20098a24:	0005883a 	mov	r2,zero
20098a28:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098a2c:	20801317 	ldw	r2,76(r4)
20098a30:	12ffe72e 	bgeu	r2,r11,200989d0 <__flash_rwdata_start+0xffffdb64>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098a34:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
20098a38:	f800283a 	ret

20098a3c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
20098a3c:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098a40:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
20098a44:	da800217 	ldw	r10,8(sp)
20098a48:	da400317 	ldw	r9,12(sp)
20098a4c:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098a50:	10c01c36 	bltu	r2,r3,20098ac4 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
20098a54:	20801417 	ldw	r2,80(r4)
       dev->max_stride < read_stride ||
20098a58:	42ffffcc 	andi	r11,r8,65535
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098a5c:	10001726 	beq	r2,zero,20098abc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x80>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098a60:	21001703 	ldbu	r4,92(r4)
20098a64:	00800044 	movi	r2,1
20098a68:	2080161e 	bne	r4,r2,20098ac4 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098a6c:	d9000117 	ldw	r4,4(sp)
20098a70:	00900034 	movhi	r2,16384
20098a74:	10bfffc4 	addi	r2,r2,-1
20098a78:	2084703a 	and	r2,r4,r2
20098a7c:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
20098a80:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
20098a84:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
20098a88:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
20098a8c:	28000a15 	stw	zero,40(r5)
    descriptor->write_address_low = write_address_low;
20098a90:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
20098a94:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
20098a98:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
20098a9c:	2a400785 	stb	r9,30(r5)
    descriptor->write_burst_count = write_burst_count;
20098aa0:	280007c5 	stb	zero,31(r5)
    descriptor->read_stride = read_stride;
20098aa4:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
20098aa8:	2800088d 	sth	zero,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
20098aac:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
20098ab0:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20098ab4:	0005883a 	mov	r2,zero
20098ab8:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098abc:	20801317 	ldw	r2,76(r4)
20098ac0:	12ffe72e 	bgeu	r2,r11,20098a60 <__flash_rwdata_start+0xffffdbf4>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098ac4:	00bffa84 	movi	r2,-22
	alt_u16 read_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
20098ac8:	f800283a 	ret

20098acc <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20098acc:	d8c00217 	ldw	r3,8(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098ad0:	20801217 	ldw	r2,72(r4)
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
20098ad4:	db000417 	ldw	r12,16(sp)
20098ad8:	dac00517 	ldw	r11,20(sp)
20098adc:	da800617 	ldw	r10,24(sp)
20098ae0:	da000717 	ldw	r8,28(sp)
20098ae4:	da400817 	ldw	r9,32(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098ae8:	10c02036 	bltu	r2,r3,20098b6c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
       dev->max_stride < read_stride ||
20098aec:	20801417 	ldw	r2,80(r4)
20098af0:	23401317 	ldw	r13,76(r4)
20098af4:	43bfffcc 	andi	r14,r8,65535
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098af8:	10001e26 	beq	r2,zero,20098b74 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
20098afc:	4bbfffcc 	andi	r14,r9,65535
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098b00:	10001926 	beq	r2,zero,20098b68 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x9c>
       dev->max_stride < write_stride ||
20098b04:	21001703 	ldbu	r4,92(r4)
20098b08:	00800044 	movi	r2,1
20098b0c:	2080171e 	bne	r4,r2,20098b6c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098b10:	d9000317 	ldw	r4,12(sp)
20098b14:	00900034 	movhi	r2,16384
20098b18:	10bfffc4 	addi	r2,r2,-1
20098b1c:	2084703a 	and	r2,r4,r2
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
20098b20:	d9000017 	ldw	r4,0(sp)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
20098b24:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
20098b28:	28800f15 	stw	r2,60(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
20098b2c:	29000a15 	stw	r4,40(r5)
    descriptor->write_address_low = write_address_low;
20098b30:	d9000117 	ldw	r4,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
20098b34:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
20098b38:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
    descriptor->write_address_low = write_address_low;
20098b3c:	29000115 	stw	r4,4(r5)
    descriptor->transfer_length = length;
20098b40:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
20098b44:	2b00070d 	sth	r12,28(r5)
    descriptor->read_burst_count = read_burst_count;
20098b48:	2ac00785 	stb	r11,30(r5)
    descriptor->write_burst_count = write_burst_count;
20098b4c:	2a8007c5 	stb	r10,31(r5)
    descriptor->read_stride = read_stride;
20098b50:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
20098b54:	2a40088d 	sth	r9,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
20098b58:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
20098b5c:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
20098b60:	0005883a 	mov	r2,zero
20098b64:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
20098b68:	6bbfe62e 	bgeu	r13,r14,20098b04 <__flash_rwdata_start+0xffffdc98>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
20098b6c:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
20098b70:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
20098b74:	6bbfe12e 	bgeu	r13,r14,20098afc <__flash_rwdata_start+0xffffdc90>
20098b78:	003ffc06 	br	20098b6c <__flash_rwdata_start+0xffffdd00>

20098b7c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
20098b7c:	28001226 	beq	r5,zero,20098bc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
20098b80:	29800317 	ldw	r6,12(r5)
20098b84:	2980101e 	bne	r5,r6,20098bc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
20098b88:	20c00017 	ldw	r3,0(r4)
20098b8c:	18001026 	beq	r3,zero,20098bd0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x54>
	{
		*list = descriptor;  /* make this root-node if list is empty */
		return 0;  /* successfully added */
	}
	if (*list == descriptor)
20098b90:	28c00d26 	beq	r5,r3,20098bc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
20098b94:	18800317 	ldw	r2,12(r3)
20098b98:	1809883a 	mov	r4,r3
20098b9c:	18800626 	beq	r3,r2,20098bb8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
20098ba0:	2880021e 	bne	r5,r2,20098bac <alt_msgdma_prefetcher_add_standard_desc_to_list+0x30>
20098ba4:	00000806 	br	20098bc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
20098ba8:	30800726 	beq	r6,r2,20098bc8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
20098bac:	1007883a 	mov	r3,r2
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
20098bb0:	10800317 	ldw	r2,12(r2)
20098bb4:	113ffc1e 	bne	r2,r4,20098ba8 <__flash_rwdata_start+0xffffdd3c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
20098bb8:	19800315 	stw	r6,12(r3)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
20098bbc:	29000315 	stw	r4,12(r5)
	return 0; /* successfully added */
20098bc0:	0005883a 	mov	r2,zero
20098bc4:	f800283a 	ret
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20098bc8:	00bffa84 	movi	r2,-22
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
	return 0; /* successfully added */
}
20098bcc:	f800283a 	ret
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
	{
		*list = descriptor;  /* make this root-node if list is empty */
20098bd0:	21400015 	stw	r5,0(r4)
		return 0;  /* successfully added */
20098bd4:	0005883a 	mov	r2,zero
20098bd8:	f800283a 	ret

20098bdc <alt_msgdma_prefetcher_add_extended_desc_to_list>:
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
20098bdc:	28001526 	beq	r5,zero,20098c34 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
20098be0:	28800317 	ldw	r2,12(r5)
20098be4:	11400226 	beq	r2,r5,20098bf0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x14>
20098be8:	28800b17 	ldw	r2,44(r5)
20098bec:	1000111e 	bne	r2,zero,20098c34 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
20098bf0:	21800017 	ldw	r6,0(r4)
20098bf4:	30001726 	beq	r6,zero,20098c54 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x78>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
		return 0;
	}
	if (*list == descriptor)
20098bf8:	29800e26 	beq	r5,r6,20098c34 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098bfc:	30800317 	ldw	r2,12(r6)
20098c00:	300f883a 	mov	r7,r6
20098c04:	11800d26 	beq	r2,r6,20098c3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20098c08:	30c00b17 	ldw	r3,44(r6)
20098c0c:	1800051e 	bne	r3,zero,20098c24 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x48>
20098c10:	00000a06 	br	20098c3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098c14:	10800317 	ldw	r2,12(r2)
20098c18:	11c00826 	beq	r2,r7,20098c3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20098c1c:	20c00b17 	ldw	r3,44(r4)
20098c20:	18000626 	beq	r3,zero,20098c3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20098c24:	1009883a 	mov	r4,r2
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20098c28:	100d883a 	mov	r6,r2
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
20098c2c:	28bff91e 	bne	r5,r2,20098c14 <__flash_rwdata_start+0xffffdda8>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
20098c30:	183ff81e 	bne	r3,zero,20098c14 <__flash_rwdata_start+0xffffdda8>
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
20098c34:	00bffa84 	movi	r2,-22
20098c38:	f800283a 	ret
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
20098c3c:	31400315 	stw	r5,12(r6)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
20098c40:	30000b15 	stw	zero,44(r6)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
20098c44:	29c00315 	stw	r7,12(r5)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
20098c48:	28000b15 	stw	zero,44(r5)
	return 0;
20098c4c:	0005883a 	mov	r2,zero
}
20098c50:	f800283a 	ret
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
	{
		*list = descriptor;  /* make this the root-node if list is empty */
20098c54:	21400015 	stw	r5,0(r4)
		return 0;
20098c58:	0005883a 	mov	r2,zero
20098c5c:	f800283a 	ret

20098c60 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
20098c60:	20000e26 	beq	r4,zero,20098c9c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20098c64:	20800317 	ldw	r2,12(r4)
20098c68:	200b883a 	mov	r5,r4
20098c6c:	11000626 	beq	r2,r4,20098c88 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098c70:	20c00717 	ldw	r3,28(r4)
20098c74:	18d00034 	orhi	r3,r3,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20098c78:	20c00715 	stw	r3,28(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
20098c7c:	1009883a 	mov	r4,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20098c80:	10800317 	ldw	r2,12(r2)
20098c84:	117ffa1e 	bne	r2,r5,20098c70 <__flash_rwdata_start+0xffffde04>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098c88:	20c00717 	ldw	r3,28(r4)
	
	return 0;
20098c8c:	0005883a 	mov	r2,zero
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098c90:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20098c94:	20c00715 	stw	r3,28(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
20098c98:	f800283a 	ret
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
20098c9c:	00bffa84 	movi	r2,-22
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
}
20098ca0:	f800283a 	ret

20098ca4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
20098ca4:	20001426 	beq	r4,zero,20098cf8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x54>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098ca8:	20800317 	ldw	r2,12(r4)
20098cac:	200d883a 	mov	r6,r4
20098cb0:	11000c26 	beq	r2,r4,20098ce4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20098cb4:	20c00b17 	ldw	r3,44(r4)
20098cb8:	1800031e 	bne	r3,zero,20098cc8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
20098cbc:	00000906 	br	20098ce4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
20098cc0:	28c00b17 	ldw	r3,44(r5)
20098cc4:	18000726 	beq	r3,zero,20098ce4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098cc8:	20c00f17 	ldw	r3,60(r4)
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20098ccc:	100b883a 	mov	r5,r2
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098cd0:	18d00034 	orhi	r3,r3,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20098cd4:	20c00f15 	stw	r3,60(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20098cd8:	1009883a 	mov	r4,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098cdc:	10800317 	ldw	r2,12(r2)
20098ce0:	11bff71e 	bne	r2,r6,20098cc0 <__flash_rwdata_start+0xffffde54>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098ce4:	20c00f17 	ldw	r3,60(r4)
	return 0;
20098ce8:	0005883a 	mov	r2,zero
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098cec:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20098cf0:	20c00f15 	stw	r3,60(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
20098cf4:	f800283a 	ret
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
20098cf8:	00bffa84 	movi	r2,-22
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
}
20098cfc:	f800283a 	ret

20098d00 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
20098d00:	da400017 	ldw	r9,0(sp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
20098d04:	20800617 	ldw	r2,24(r4)
20098d08:	10800037 	ldwio	r2,0(r2)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
20098d0c:	10c0004c 	andi	r3,r2,1
20098d10:	18003d1e 	bne	r3,zero,20098e08 <alt_msgdma_start_prefetcher_with_list_addr+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098d14:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098d18:	023fff84 	movi	r8,-2
20098d1c:	1a14703a 	and	r10,r3,r8
20098d20:	5001703a 	wrctl	status,r10
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20098d24:	22800317 	ldw	r10,12(r4)
20098d28:	02c00804 	movi	r11,32
20098d2c:	52c00135 	stwio	r11,4(r10)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
20098d30:	22800317 	ldw	r10,12(r4)
20098d34:	52c00037 	ldwio	r11,0(r10)
20098d38:	52c00035 	stwio	r11,0(r10)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098d3c:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20098d40:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098d44:	22800d17 	ldw	r10,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20098d48:	18002926 	beq	r3,zero,20098df0 <alt_msgdma_start_prefetcher_with_list_addr+0xf0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098d4c:	00fff7c4 	movi	r3,-33
20098d50:	50c6703a 	and	r3,r10,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20098d54:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098d58:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098d5c:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098d60:	5210703a 	and	r8,r10,r8
20098d64:	4001703a 	wrctl	status,r8
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20098d68:	22000317 	ldw	r8,12(r4)
20098d6c:	40c00135 	stwio	r3,4(r8)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20098d70:	20c00617 	ldw	r3,24(r4)
20098d74:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098d78:	5001703a 	wrctl	status,r10
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
20098d7c:	20c00617 	ldw	r3,24(r4)
20098d80:	19400135 	stwio	r5,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
20098d84:	20c00617 	ldw	r3,24(r4)
20098d88:	19800235 	stwio	r6,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
20098d8c:	39c03fcc 	andi	r7,r7,255
20098d90:	38000b1e 	bne	r7,zero,20098dc0 <alt_msgdma_start_prefetcher_with_list_addr+0xc0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
20098d94:	00fffbc4 	movi	r3,-17
20098d98:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098d9c:	48c03fcc 	andi	r3,r9,255
20098da0:	18000a1e 	bne	r3,zero,20098dcc <alt_msgdma_start_prefetcher_with_list_addr+0xcc>
20098da4:	20c00617 	ldw	r3,24(r4)
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
20098da8:	013fff44 	movi	r4,-3
20098dac:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
20098db0:	10800054 	ori	r2,r2,1
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20098db4:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
20098db8:	0005883a 	mov	r2,zero
20098dbc:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098dc0:	48c03fcc 	andi	r3,r9,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
20098dc4:	10800414 	ori	r2,r2,16
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098dc8:	183ff626 	beq	r3,zero,20098da4 <__flash_rwdata_start+0xffffdf38>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098dcc:	20c00617 	ldw	r3,24(r4)
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
20098dd0:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098dd4:	19400304 	addi	r5,r3,12
20098dd8:	29800037 	ldwio	r6,0(r5)
20098ddc:	303ff41e 	bne	r6,zero,20098db0 <__flash_rwdata_start+0xffffdf44>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098de0:	00c03fc4 	movi	r3,255
20098de4:	28c00035 	stwio	r3,0(r5)
20098de8:	20c00617 	ldw	r3,24(r4)
20098dec:	003ff006 	br	20098db0 <__flash_rwdata_start+0xffffdf44>
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20098df0:	00fff3c4 	movi	r3,-49
20098df4:	50c6703a 	and	r3,r10,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20098df8:	02bffdc4 	movi	r10,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20098dfc:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20098e00:	1284703a 	and	r2,r2,r10
20098e04:	003fd506 	br	20098d5c <__flash_rwdata_start+0xffffdef0>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
20098e08:	00bffc04 	movi	r2,-16
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
}
20098e0c:	f800283a 	ret

20098e10 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
20098e10:	28004726 	beq	r5,zero,20098f30 <alt_msgdma_start_prefetcher_with_std_desc_list+0x120>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20098e14:	28800317 	ldw	r2,12(r5)
20098e18:	2811883a 	mov	r8,r5
20098e1c:	11400626 	beq	r2,r5,20098e38 <alt_msgdma_start_prefetcher_with_std_desc_list+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098e20:	28c00717 	ldw	r3,28(r5)
20098e24:	18d00034 	orhi	r3,r3,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20098e28:	28c00715 	stw	r3,28(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
20098e2c:	100b883a 	mov	r5,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
20098e30:	10800317 	ldw	r2,12(r2)
20098e34:	123ffa1e 	bne	r2,r8,20098e20 <__flash_rwdata_start+0xffffdfb4>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098e38:	28800717 	ldw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
20098e3c:	20c00617 	ldw	r3,24(r4)
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098e40:	10900034 	orhi	r2,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20098e44:	28800715 	stw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
20098e48:	18800037 	ldwio	r2,0(r3)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
20098e4c:	10c0004c 	andi	r3,r2,1
20098e50:	18003f1e 	bne	r3,zero,20098f50 <alt_msgdma_start_prefetcher_with_std_desc_list+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098e54:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098e58:	017fff84 	movi	r5,-2
20098e5c:	1952703a 	and	r9,r3,r5
20098e60:	4801703a 	wrctl	status,r9
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20098e64:	22400317 	ldw	r9,12(r4)
20098e68:	02800804 	movi	r10,32
20098e6c:	4a800135 	stwio	r10,4(r9)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
20098e70:	22400317 	ldw	r9,12(r4)
20098e74:	4a800037 	ldwio	r10,0(r9)
20098e78:	4a800035 	stwio	r10,0(r9)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098e7c:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20098e80:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098e84:	22400d17 	ldw	r9,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
20098e88:	18002b26 	beq	r3,zero,20098f38 <alt_msgdma_start_prefetcher_with_std_desc_list+0x128>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098e8c:	00fff7c4 	movi	r3,-33
20098e90:	48c6703a 	and	r3,r9,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
20098e94:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20098e98:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20098e9c:	0013303a 	rdctl	r9,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20098ea0:	494a703a 	and	r5,r9,r5
20098ea4:	2801703a 	wrctl	status,r5
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
20098ea8:	21400317 	ldw	r5,12(r4)
20098eac:	28c00135 	stwio	r3,4(r5)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20098eb0:	20c00617 	ldw	r3,24(r4)
20098eb4:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20098eb8:	4801703a 	wrctl	status,r9
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
20098ebc:	20c00617 	ldw	r3,24(r4)
20098ec0:	1a000135 	stwio	r8,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
20098ec4:	20c00617 	ldw	r3,24(r4)
20098ec8:	18000235 	stwio	zero,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
20098ecc:	31803fcc 	andi	r6,r6,255
20098ed0:	30000b1e 	bne	r6,zero,20098f00 <alt_msgdma_start_prefetcher_with_std_desc_list+0xf0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
20098ed4:	00fffbc4 	movi	r3,-17
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098ed8:	39c03fcc 	andi	r7,r7,255
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
20098edc:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098ee0:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098ee4:	38000a1e 	bne	r7,zero,20098f10 <alt_msgdma_start_prefetcher_with_std_desc_list+0x100>
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
20098ee8:	013fff44 	movi	r4,-3
20098eec:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
20098ef0:	10800054 	ori	r2,r2,1
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
20098ef4:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
20098ef8:	0005883a 	mov	r2,zero
20098efc:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098f00:	39c03fcc 	andi	r7,r7,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
20098f04:	10800414 	ori	r2,r2,16
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098f08:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
20098f0c:	383ff626 	beq	r7,zero,20098ee8 <__flash_rwdata_start+0xffffe07c>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
20098f10:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098f14:	19400304 	addi	r5,r3,12
20098f18:	29800037 	ldwio	r6,0(r5)
20098f1c:	303ff41e 	bne	r6,zero,20098ef0 <__flash_rwdata_start+0xffffe084>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
20098f20:	00c03fc4 	movi	r3,255
20098f24:	28c00035 	stwio	r3,0(r5)
20098f28:	20c00617 	ldw	r3,24(r4)
20098f2c:	003ff006 	br	20098ef0 <__flash_rwdata_start+0xffffe084>
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
20098f30:	00bffa84 	movi	r2,-22
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
			park_mode_en, poll_en);
}
20098f34:	f800283a 	ret
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20098f38:	00fff3c4 	movi	r3,-49
20098f3c:	48c6703a 	and	r3,r9,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20098f40:	027ffdc4 	movi	r9,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
20098f44:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
20098f48:	1244703a 	and	r2,r2,r9
20098f4c:	003fd306 	br	20098e9c <__flash_rwdata_start+0xffffe030>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
20098f50:	00bffc04 	movi	r2,-16
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
20098f54:	f800283a 	ret

20098f58 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
20098f58:	defffe04 	addi	sp,sp,-8
20098f5c:	dfc00115 	stw	ra,4(sp)
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
20098f60:	28001d26 	beq	r5,zero,20098fd8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x80>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098f64:	28800317 	ldw	r2,12(r5)
20098f68:	3015883a 	mov	r10,r6
20098f6c:	2813883a 	mov	r9,r5
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
20098f70:	280d883a 	mov	r6,r5

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098f74:	11400c26 	beq	r2,r5,20098fa8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
20098f78:	28c00b17 	ldw	r3,44(r5)
20098f7c:	1800031e 	bne	r3,zero,20098f8c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x34>
20098f80:	00000906 	br	20098fa8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
20098f84:	40c00b17 	ldw	r3,44(r8)
20098f88:	18000726 	beq	r3,zero,20098fa8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098f8c:	28c00f17 	ldw	r3,60(r5)
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
20098f90:	1011883a 	mov	r8,r2
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098f94:	18d00034 	orhi	r3,r3,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
20098f98:	28c00f15 	stw	r3,60(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
20098f9c:	100b883a 	mov	r5,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
20098fa0:	10800317 	ldw	r2,12(r2)
20098fa4:	127ff71e 	bne	r2,r9,20098f84 <__flash_rwdata_start+0xffffe118>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098fa8:	28c00f17 	ldw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
20098fac:	38803fcc 	andi	r2,r7,255
20098fb0:	51c03fcc 	andi	r7,r10,255
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
20098fb4:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
20098fb8:	28c00f15 	stw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
20098fbc:	d8800015 	stw	r2,0(sp)
20098fc0:	300b883a 	mov	r5,r6
20098fc4:	000d883a 	mov	r6,zero
20098fc8:	0098d000 	call	20098d00 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
20098fcc:	dfc00117 	ldw	ra,4(sp)
20098fd0:	dec00204 	addi	sp,sp,8
20098fd4:	f800283a 	ret
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
20098fd8:	00bffa84 	movi	r2,-22
20098fdc:	003ffb06 	br	20098fcc <__flash_rwdata_start+0xffffe160>

20098fe0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
20098fe0:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
20098fe4:	d1601404 	addi	r5,gp,-32688
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
20098fe8:	dc000015 	stw	r16,0(sp)
20098fec:	dfc00115 	stw	ra,4(sp)
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
20098ff0:	0099a5c0 	call	20099a5c <alt_find_dev>
20098ff4:	1021883a 	mov	r16,r2

    if (NULL == dev)
20098ff8:	10000526 	beq	r2,zero,20099010 <alt_msgdma_open+0x30>
    {
        ALT_ERRNO = ENODEV;
    }

    return dev;
}
20098ffc:	8005883a 	mov	r2,r16
20099000:	dfc00117 	ldw	ra,4(sp)
20099004:	dc000017 	ldw	r16,0(sp)
20099008:	dec00204 	addi	sp,sp,8
2009900c:	f800283a 	ret
20099010:	00800034 	movhi	r2,0
20099014:	108a9604 	addi	r2,r2,10840
20099018:	10800017 	ldw	r2,0(r2)
2009901c:	10000426 	beq	r2,zero,20099030 <alt_msgdma_open+0x50>
20099020:	103ee83a 	callr	r2

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);

    if (NULL == dev)
    {
        ALT_ERRNO = ENODEV;
20099024:	00c004c4 	movi	r3,19
20099028:	10c00015 	stw	r3,0(r2)
2009902c:	003ff306 	br	20098ffc <__flash_rwdata_start+0xffffe190>
20099030:	00800034 	movhi	r2,0
20099034:	108ab004 	addi	r2,r2,10944
20099038:	003ffa06 	br	20099024 <__flash_rwdata_start+0xffffe1b8>

2009903c <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
2009903c:	defffb04 	addi	sp,sp,-20
20099040:	dc800315 	stw	r18,12(sp)
20099044:	dc400215 	stw	r17,8(sp)
20099048:	dc000115 	stw	r16,4(sp)
2009904c:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
20099050:	20801783 	ldbu	r2,94(r4)
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
20099054:	2021883a 	mov	r16,r4
20099058:	2825883a 	mov	r18,r5
2009905c:	3023883a 	mov	r17,r6
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
20099060:	1000261e 	bne	r2,zero,200990fc <alt_msgdma_init+0xc0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
20099064:	80800317 	ldw	r2,12(r16)
20099068:	00c00084 	movi	r3,2
2009906c:	10c00135 	stwio	r3,4(r2)
20099070:	80c00317 	ldw	r3,12(r16)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
20099074:	18800037 	ldwio	r2,0(r3)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
20099078:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
2009907c:	103ffd1e 	bne	r2,zero,20099074 <__flash_rwdata_start+0xffffe208>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
20099080:	18c00104 	addi	r3,r3,4
20099084:	19000037 	ldwio	r4,0(r3)
20099088:	00bffbc4 	movi	r2,-17
2009908c:	2084703a 	and	r2,r4,r2
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
20099090:	10800814 	ori	r2,r2,32
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
20099094:	18800035 	stwio	r2,0(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
20099098:	80800317 	ldw	r2,12(r16)
2009909c:	10c00037 	ldwio	r3,0(r2)
200990a0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
200990a4:	80801783 	ldbu	r2,94(r16)
200990a8:	10000426 	beq	r2,zero,200990bc <alt_msgdma_init+0x80>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
200990ac:	80800617 	ldw	r2,24(r16)
200990b0:	10800404 	addi	r2,r2,16
200990b4:	10c00037 	ldwio	r3,0(r2)
200990b8:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
200990bc:	8009883a 	mov	r4,r16
200990c0:	d1601404 	addi	r5,gp,-32688
200990c4:	009991c0 	call	2009991c <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
200990c8:	018802b4 	movhi	r6,8202
200990cc:	31a17504 	addi	r6,r6,-31276
200990d0:	d8000015 	stw	zero,0(sp)
200990d4:	9009883a 	mov	r4,r18
200990d8:	880b883a 	mov	r5,r17
200990dc:	800f883a 	mov	r7,r16
200990e0:	0099ae00 	call	20099ae0 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
200990e4:	dfc00417 	ldw	ra,16(sp)
200990e8:	dc800317 	ldw	r18,12(sp)
200990ec:	dc400217 	ldw	r17,8(sp)
200990f0:	dc000117 	ldw	r16,4(sp)
200990f4:	dec00504 	addi	sp,sp,20
200990f8:	f800283a 	ret
    int error;

    if (dev->prefetcher_enable)
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
200990fc:	20800617 	ldw	r2,24(r4)
20099100:	00c00104 	movi	r3,4
20099104:	10c00035 	stwio	r3,0(r2)
20099108:	20c00617 	ldw	r3,24(r4)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
2009910c:	18800037 	ldwio	r2,0(r3)
20099110:	1080010c 	andi	r2,r2,4
20099114:	103ffd1e 	bne	r2,zero,2009910c <__flash_rwdata_start+0xffffe2a0>
20099118:	003fd206 	br	20099064 <__flash_rwdata_start+0xffffe1f8>

2009911c <alt_msgdma_register_callback>:
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
    dev->callback         = callback;
2009911c:	21400b15 	stw	r5,44(r4)
    dev->callback_context = context;
20099120:	21c00c15 	stw	r7,48(r4)
    dev->control          = control;
20099124:	21800d15 	stw	r6,52(r4)
20099128:	f800283a 	ret

2009912c <alt_msgdma_standard_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009912c:	21c00317 	ldw	r7,12(r4)
20099130:	39800204 	addi	r6,r7,8
20099134:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20099138:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009913c:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099140:	21800917 	ldw	r6,36(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20099144:	1004d43a 	srli	r2,r2,16
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099148:	1180452e 	bgeu	r2,r6,20099260 <alt_msgdma_standard_descriptor_async_transfer+0x134>
2009914c:	1980442e 	bgeu	r3,r6,20099260 <alt_msgdma_standard_descriptor_async_transfer+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099150:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099154:	00bfff84 	movi	r2,-2
20099158:	1884703a 	and	r2,r3,r2
2009915c:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099160:	00800804 	movi	r2,32
20099164:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
20099168:	20800317 	ldw	r2,12(r4)
2009916c:	11800037 	ldwio	r6,0(r2)
20099170:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099174:	1801703a 	wrctl	status,r3
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20099178:	28003726 	beq	r5,zero,20099258 <alt_msgdma_standard_descriptor_async_transfer+0x12c>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
2009917c:	defffc04 	addi	sp,sp,-16
20099180:	dc800215 	stw	r18,8(sp)
20099184:	dc400115 	stw	r17,4(sp)
20099188:	dc000015 	stw	r16,0(sp)
2009918c:	dfc00315 	stw	ra,12(sp)
20099190:	2825883a 	mov	r18,r5
20099194:	2023883a 	mov	r17,r4
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
20099198:	0404e244 	movi	r16,5001
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
2009919c:	88c00417 	ldw	r3,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
200991a0:	88800317 	ldw	r2,12(r17)
200991a4:	10800037 	ldwio	r2,0(r2)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
200991a8:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
200991ac:	1080010c 	andi	r2,r2,4
200991b0:	10000a26 	beq	r2,zero,200991dc <alt_msgdma_standard_descriptor_async_transfer+0xb0>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
200991b4:	00998a40 	call	200998a4 <alt_busy_sleep>
200991b8:	80bfffc4 	addi	r2,r16,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
200991bc:	10ffffcc 	andi	r3,r2,65535
200991c0:	1021883a 	mov	r16,r2
200991c4:	183ff51e 	bne	r3,zero,2009919c <__flash_rwdata_start+0xffffe330>
            {
                alt_printf("time out after 5 msec while waiting" 
200991c8:	01000034 	movhi	r4,0
200991cc:	21026004 	addi	r4,r4,2432
200991d0:	0099e980 	call	20099e98 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
200991d4:	00bff084 	movi	r2,-62
200991d8:	00001506 	br	20099230 <alt_msgdma_standard_descriptor_async_transfer+0x104>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
200991dc:	91000017 	ldw	r4,0(r18)
200991e0:	19000035 	stwio	r4,0(r3)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
200991e4:	91000117 	ldw	r4,4(r18)
200991e8:	19000135 	stwio	r4,4(r3)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
200991ec:	91000217 	ldw	r4,8(r18)
200991f0:	19000235 	stwio	r4,8(r3)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
200991f4:	91000317 	ldw	r4,12(r18)
200991f8:	19000335 	stwio	r4,12(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
200991fc:	88c00b17 	ldw	r3,44(r17)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099200:	89000d17 	ldw	r4,52(r17)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
20099204:	18001026 	beq	r3,zero,20099248 <alt_msgdma_standard_descriptor_async_transfer+0x11c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099208:	00fff7c4 	movi	r3,-33
2009920c:	20c6703a 	and	r3,r4,r3
20099210:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099214:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099218:	013fff84 	movi	r4,-2
2009921c:	2908703a 	and	r4,r5,r4
20099220:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099224:	89000317 	ldw	r4,12(r17)
20099228:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009922c:	2801703a 	wrctl	status,r5
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);

}
20099230:	dfc00317 	ldw	ra,12(sp)
20099234:	dc800217 	ldw	r18,8(sp)
20099238:	dc400117 	ldw	r17,4(sp)
2009923c:	dc000017 	ldw	r16,0(sp)
20099240:	dec00404 	addi	sp,sp,16
20099244:	f800283a 	ret
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
20099248:	00fff3c4 	movi	r3,-49
2009924c:	20c6703a 	and	r3,r4,r3
20099250:	18c00114 	ori	r3,r3,4
20099254:	003fef06 	br	20099214 <__flash_rwdata_start+0xffffe3a8>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20099258:	00bfffc4 	movi	r2,-1
2009925c:	f800283a 	ret
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
20099260:	00bff904 	movi	r2,-28
20099264:	f800283a 	ret

20099268 <alt_msgdma_extended_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099268:	21c00317 	ldw	r7,12(r4)
2009926c:	39800204 	addi	r6,r7,8
20099270:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20099274:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099278:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009927c:	21800917 	ldw	r6,36(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20099280:	1004d43a 	srli	r2,r2,16
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099284:	11804f2e 	bgeu	r2,r6,200993c4 <alt_msgdma_extended_descriptor_async_transfer+0x15c>
20099288:	19804e2e 	bgeu	r3,r6,200993c4 <alt_msgdma_extended_descriptor_async_transfer+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009928c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099290:	00bfff84 	movi	r2,-2
20099294:	1884703a 	and	r2,r3,r2
20099298:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
2009929c:	00800804 	movi	r2,32
200992a0:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
200992a4:	20800317 	ldw	r2,12(r4)
200992a8:	11800037 	ldwio	r6,0(r2)
200992ac:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200992b0:	1801703a 	wrctl	status,r3
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
200992b4:	28004526 	beq	r5,zero,200993cc <alt_msgdma_extended_descriptor_async_transfer+0x164>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
200992b8:	defffc04 	addi	sp,sp,-16
200992bc:	dc800215 	stw	r18,8(sp)
200992c0:	dc400115 	stw	r17,4(sp)
200992c4:	dc000015 	stw	r16,0(sp)
200992c8:	dfc00315 	stw	ra,12(sp)
200992cc:	2821883a 	mov	r16,r5
200992d0:	2023883a 	mov	r17,r4
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
200992d4:	0484e244 	movi	r18,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
200992d8:	88c00417 	ldw	r3,16(r17)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
200992dc:	88800317 	ldw	r2,12(r17)
200992e0:	10800037 	ldwio	r2,0(r2)
200992e4:	1080010c 	andi	r2,r2,4
200992e8:	1000271e 	bne	r2,zero,20099388 <alt_msgdma_extended_descriptor_async_transfer+0x120>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
200992ec:	81000017 	ldw	r4,0(r16)
200992f0:	19000035 	stwio	r4,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
200992f4:	81000117 	ldw	r4,4(r16)
200992f8:	19000135 	stwio	r4,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
200992fc:	81000217 	ldw	r4,8(r16)
20099300:	19000235 	stwio	r4,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
20099304:	8100030b 	ldhu	r4,12(r16)
20099308:	1900032d 	sthio	r4,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
2009930c:	81000383 	ldbu	r4,14(r16)
20099310:	190003a5 	stbio	r4,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
20099314:	810003c3 	ldbu	r4,15(r16)
20099318:	190003e5 	stbio	r4,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
2009931c:	8100040b 	ldhu	r4,16(r16)
20099320:	1900042d 	sthio	r4,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
20099324:	8100048b 	ldhu	r4,18(r16)
20099328:	190004ad 	sthio	r4,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
2009932c:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
20099330:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
20099334:	81000717 	ldw	r4,28(r16)
20099338:	19000735 	stwio	r4,28(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
2009933c:	88c00b17 	ldw	r3,44(r17)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099340:	89000d17 	ldw	r4,52(r17)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
20099344:	18001b26 	beq	r3,zero,200993b4 <alt_msgdma_extended_descriptor_async_transfer+0x14c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
20099348:	00fff7c4 	movi	r3,-33
2009934c:	20c6703a 	and	r3,r4,r3
20099350:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099354:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099358:	013fff84 	movi	r4,-2
2009935c:	2908703a 	and	r4,r5,r4
20099360:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
20099364:	89000317 	ldw	r4,12(r17)
20099368:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009936c:	2801703a 	wrctl	status,r5
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
}
20099370:	dfc00317 	ldw	ra,12(sp)
20099374:	dc800217 	ldw	r18,8(sp)
20099378:	dc400117 	ldw	r17,4(sp)
2009937c:	dc000017 	ldw	r16,0(sp)
20099380:	dec00404 	addi	sp,sp,16
20099384:	f800283a 	ret
        while(0 != alt_msgdma_write_extended_descriptor (
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
20099388:	01000044 	movi	r4,1
2009938c:	00998a40 	call	200998a4 <alt_busy_sleep>
20099390:	90bfffc4 	addi	r2,r18,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099394:	10ffffcc 	andi	r3,r2,65535
20099398:	1025883a 	mov	r18,r2
2009939c:	183fce1e 	bne	r3,zero,200992d8 <__flash_rwdata_start+0xffffe46c>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
200993a0:	01000034 	movhi	r4,0
200993a4:	21027604 	addi	r4,r4,2520
200993a8:	0099e980 	call	20099e98 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
200993ac:	00bff084 	movi	r2,-62
200993b0:	003fef06 	br	20099370 <__flash_rwdata_start+0xffffe504>
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
200993b4:	00fff3c4 	movi	r3,-49
200993b8:	20c6703a 	and	r3,r4,r3
200993bc:	18c00114 	ori	r3,r3,4
200993c0:	003fe406 	br	20099354 <__flash_rwdata_start+0xffffe4e8>
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
200993c4:	00bff904 	movi	r2,-28
200993c8:	f800283a 	ret
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
200993cc:	00bfffc4 	movi	r2,-1
200993d0:	f800283a 	ret

200993d4 <alt_msgdma_standard_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200993d4:	21800317 	ldw	r6,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
200993d8:	defffa04 	addi	sp,sp,-24
200993dc:	dc800215 	stw	r18,8(sp)
200993e0:	dc400115 	stw	r17,4(sp)
200993e4:	2825883a 	mov	r18,r5
200993e8:	2023883a 	mov	r17,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200993ec:	31000204 	addi	r4,r6,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
200993f0:	dfc00515 	stw	ra,20(sp)
200993f4:	dd000415 	stw	r20,16(sp)
200993f8:	dcc00315 	stw	r19,12(sp)
200993fc:	dc000015 	stw	r16,0(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099400:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
20099404:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099408:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
2009940c:	0404e244 	movi	r16,5001
20099410:	1004d43a 	srli	r2,r2,16
20099414:	00000b06 	br	20099444 <alt_msgdma_standard_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20099418:	00998a40 	call	200998a4 <alt_busy_sleep>
2009941c:	80bfffc4 	addi	r2,r16,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099420:	10ffffcc 	andi	r3,r2,65535
20099424:	1021883a 	mov	r16,r2
20099428:	18005826 	beq	r3,zero,2009958c <alt_msgdma_standard_descriptor_sync_transfer+0x1b8>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009942c:	89800317 	ldw	r6,12(r17)
20099430:	31000204 	addi	r4,r6,8
20099434:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
20099438:	10ffffcc 	andi	r3,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
2009943c:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
20099440:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099444:	89400917 	ldw	r5,36(r17)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20099448:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009944c:	117ff22e 	bgeu	r2,r5,20099418 <__flash_rwdata_start+0xffffe5ac>
20099450:	197ff12e 	bgeu	r3,r5,20099418 <__flash_rwdata_start+0xffffe5ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099454:	0029303a 	rdctl	r20,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099458:	00bfff84 	movi	r2,-2
2009945c:	a084703a 	and	r2,r20,r2
20099460:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
20099464:	00800804 	movi	r2,32
20099468:	30800135 	stwio	r2,4(r6)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
2009946c:	88800317 	ldw	r2,12(r17)
20099470:	10c00037 	ldwio	r3,0(r2)
20099474:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
20099478:	90005626 	beq	r18,zero,200995d4 <alt_msgdma_standard_descriptor_sync_transfer+0x200>
2009947c:	04c4e244 	movi	r19,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
20099480:	88800417 	ldw	r2,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
20099484:	88c00317 	ldw	r3,12(r17)
20099488:	1c000037 	ldwio	r16,0(r3)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
2009948c:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
20099490:	8400010c 	andi	r16,r16,4
20099494:	80000a26 	beq	r16,zero,200994c0 <alt_msgdma_standard_descriptor_sync_transfer+0xec>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
20099498:	00998a40 	call	200998a4 <alt_busy_sleep>
2009949c:	98bfffc4 	addi	r2,r19,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
200994a0:	10ffffcc 	andi	r3,r2,65535
200994a4:	1027883a 	mov	r19,r2
200994a8:	183ff51e 	bne	r3,zero,20099480 <__flash_rwdata_start+0xffffe614>
            {
                alt_printf("time out after 5 msec while writing standard" 
200994ac:	01000034 	movhi	r4,0
200994b0:	2102a004 	addi	r4,r4,2688
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
200994b4:	043ff084 	movi	r16,-62
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing standard" 
200994b8:	0099e980 	call	20099e98 <alt_printf>
200994bc:	00002a06 	br	20099568 <alt_msgdma_standard_descriptor_sync_transfer+0x194>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
200994c0:	90c00017 	ldw	r3,0(r18)
200994c4:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
200994c8:	90c00117 	ldw	r3,4(r18)
200994cc:	10c00135 	stwio	r3,4(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
200994d0:	90c00217 	ldw	r3,8(r18)
200994d4:	10c00235 	stwio	r3,8(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
200994d8:	90c00317 	ldw	r3,12(r18)
200994dc:	10c00335 	stwio	r3,12(r2)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
200994e0:	89000d17 	ldw	r4,52(r17)
200994e4:	88c00317 	ldw	r3,12(r17)
200994e8:	00bff2c4 	movi	r2,-53
200994ec:	2084703a 	and	r2,r4,r2
200994f0:	10800114 	ori	r2,r2,4
200994f4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200994f8:	a001703a 	wrctl	status,r20
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
200994fc:	89800317 	ldw	r6,12(r17)
20099500:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20099504:	10c0780c 	andi	r3,r2,480
20099508:	1800161e 	bne	r3,zero,20099564 <alt_msgdma_standard_descriptor_sync_transfer+0x190>
2009950c:	1080004c 	andi	r2,r2,1
20099510:	10002326 	beq	r2,zero,200995a0 <alt_msgdma_standard_descriptor_sync_transfer+0x1cc>
    {
        alt_busy_sleep(1); /* delay 1us */
20099514:	01000044 	movi	r4,1
20099518:	00998a40 	call	200998a4 <alt_busy_sleep>
2009951c:	0484e204 	movi	r18,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20099520:	89800317 	ldw	r6,12(r17)
20099524:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
20099528:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
2009952c:	10c0780c 	andi	r3,r2,480
20099530:	1104703a 	and	r2,r2,r4
20099534:	18000b1e 	bne	r3,zero,20099564 <alt_msgdma_standard_descriptor_sync_transfer+0x190>
20099538:	10001926 	beq	r2,zero,200995a0 <alt_msgdma_standard_descriptor_sync_transfer+0x1cc>
    {
        alt_busy_sleep(1); /* delay 1us */
2009953c:	00998a40 	call	200998a4 <alt_busy_sleep>
20099540:	90bfffc4 	addi	r2,r18,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099544:	10ffffcc 	andi	r3,r2,65535
20099548:	1025883a 	mov	r18,r2
2009954c:	183ff41e 	bne	r3,zero,20099520 <__flash_rwdata_start+0xffffe6b4>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
20099550:	01000034 	movhi	r4,0
20099554:	2102b104 	addi	r4,r4,2756
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
20099558:	043ff084 	movi	r16,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
2009955c:	0099e980 	call	20099e98 <alt_printf>
20099560:	00000106 	br	20099568 <alt_msgdma_standard_descriptor_sync_transfer+0x194>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
20099564:	04007804 	movi	r16,480
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
}
20099568:	8005883a 	mov	r2,r16
2009956c:	dfc00517 	ldw	ra,20(sp)
20099570:	dd000417 	ldw	r20,16(sp)
20099574:	dcc00317 	ldw	r19,12(sp)
20099578:	dc800217 	ldw	r18,8(sp)
2009957c:	dc400117 	ldw	r17,4(sp)
20099580:	dc000017 	ldw	r16,0(sp)
20099584:	dec00604 	addi	sp,sp,24
20099588:	f800283a 	ret
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
2009958c:	01000034 	movhi	r4,0
20099590:	21028c04 	addi	r4,r4,2608
				" for storing descriptor\n");
            return -ETIME;
20099594:	043ff084 	movi	r16,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
20099598:	0099e980 	call	20099e98 <alt_printf>
2009959c:	003ff206 	br	20099568 <__flash_rwdata_start+0xffffe6fc>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
200995a0:	31800104 	addi	r6,r6,4
200995a4:	30800037 	ldwio	r2,0(r6)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200995a8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200995ac:	00ffff84 	movi	r3,-2
200995b0:	20c6703a 	and	r3,r4,r3
200995b4:	1801703a 	wrctl	status,r3
200995b8:	10800814 	ori	r2,r2,32
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
200995bc:	30800035 	stwio	r2,0(r6)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
200995c0:	88800317 	ldw	r2,12(r17)
200995c4:	10c00037 	ldwio	r3,0(r2)
200995c8:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200995cc:	2001703a 	wrctl	status,r4
200995d0:	003fe506 	br	20099568 <__flash_rwdata_start+0xffffe6fc>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
200995d4:	043fffc4 	movi	r16,-1
200995d8:	003fe306 	br	20099568 <__flash_rwdata_start+0xffffe6fc>

200995dc <alt_msgdma_extended_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200995dc:	20c00317 	ldw	r3,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
200995e0:	defffa04 	addi	sp,sp,-24
200995e4:	dc800215 	stw	r18,8(sp)
200995e8:	dc000015 	stw	r16,0(sp)
200995ec:	2825883a 	mov	r18,r5
200995f0:	2021883a 	mov	r16,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
200995f4:	19000204 	addi	r4,r3,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
200995f8:	dfc00515 	stw	ra,20(sp)
200995fc:	dd000415 	stw	r20,16(sp)
20099600:	dcc00315 	stw	r19,12(sp)
20099604:	dc400115 	stw	r17,4(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099608:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
2009960c:	117fffcc 	andi	r5,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099610:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
20099614:	0444e244 	movi	r17,5001
20099618:	1004d43a 	srli	r2,r2,16
2009961c:	00000b06 	br	2009964c <alt_msgdma_extended_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20099620:	00998a40 	call	200998a4 <alt_busy_sleep>
20099624:	88bfffc4 	addi	r2,r17,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099628:	10ffffcc 	andi	r3,r2,65535
2009962c:	1023883a 	mov	r17,r2
20099630:	18007026 	beq	r3,zero,200997f4 <alt_msgdma_extended_descriptor_sync_transfer+0x218>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099634:	80c00317 	ldw	r3,12(r16)
20099638:	19000204 	addi	r4,r3,8
2009963c:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
20099640:	117fffcc 	andi	r5,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
20099644:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
20099648:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
2009964c:	81800917 	ldw	r6,36(r16)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
20099650:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
20099654:	11bff22e 	bgeu	r2,r6,20099620 <__flash_rwdata_start+0xffffe7b4>
20099658:	29bff12e 	bgeu	r5,r6,20099620 <__flash_rwdata_start+0xffffe7b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009965c:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099660:	00bfff84 	movi	r2,-2
20099664:	9884703a 	and	r2,r19,r2
20099668:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
2009966c:	00800804 	movi	r2,32
20099670:	18800135 	stwio	r2,4(r3)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
20099674:	80800317 	ldw	r2,12(r16)
20099678:	10c00037 	ldwio	r3,0(r2)
2009967c:	10c00035 	stwio	r3,0(r2)
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
20099680:	90006126 	beq	r18,zero,20099808 <alt_msgdma_extended_descriptor_sync_transfer+0x22c>
20099684:	0504e244 	movi	r20,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
20099688:	80c00417 	ldw	r3,16(r16)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
2009968c:	80800317 	ldw	r2,12(r16)
20099690:	14400037 	ldwio	r17,0(r2)
20099694:	8c40010c 	andi	r17,r17,4
20099698:	8800341e 	bne	r17,zero,2009976c <alt_msgdma_extended_descriptor_sync_transfer+0x190>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
2009969c:	90800017 	ldw	r2,0(r18)
200996a0:	18800035 	stwio	r2,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
200996a4:	90800117 	ldw	r2,4(r18)
200996a8:	18800135 	stwio	r2,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
200996ac:	90800217 	ldw	r2,8(r18)
200996b0:	18800235 	stwio	r2,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
200996b4:	9080030b 	ldhu	r2,12(r18)
200996b8:	1880032d 	sthio	r2,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
200996bc:	90800383 	ldbu	r2,14(r18)
200996c0:	188003a5 	stbio	r2,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
200996c4:	908003c3 	ldbu	r2,15(r18)
200996c8:	188003e5 	stbio	r2,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
200996cc:	9080040b 	ldhu	r2,16(r18)
200996d0:	1880042d 	sthio	r2,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
200996d4:	9080048b 	ldhu	r2,18(r18)
200996d8:	188004ad 	sthio	r2,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
200996dc:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
200996e0:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
200996e4:	90800717 	ldw	r2,28(r18)
200996e8:	18800735 	stwio	r2,28(r3)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
200996ec:	81000d17 	ldw	r4,52(r16)
200996f0:	80800317 	ldw	r2,12(r16)
200996f4:	00fff2c4 	movi	r3,-53
200996f8:	20c6703a 	and	r3,r4,r3
200996fc:	18c00114 	ori	r3,r3,4
20099700:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099704:	9801703a 	wrctl	status,r19
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
20099708:	80c00317 	ldw	r3,12(r16)
2009970c:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20099710:	1100780c 	andi	r4,r2,480
20099714:	2000201e 	bne	r4,zero,20099798 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
20099718:	1080004c 	andi	r2,r2,1
2009971c:	10002826 	beq	r2,zero,200997c0 <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
20099720:	01000044 	movi	r4,1
20099724:	00998a40 	call	200998a4 <alt_busy_sleep>
20099728:	0484e204 	movi	r18,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
2009972c:	80c00317 	ldw	r3,12(r16)
20099730:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
20099734:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
20099738:	1140780c 	andi	r5,r2,480
2009973c:	1104703a 	and	r2,r2,r4
20099740:	2800151e 	bne	r5,zero,20099798 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
20099744:	10001e26 	beq	r2,zero,200997c0 <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
20099748:	00998a40 	call	200998a4 <alt_busy_sleep>
2009974c:	94bfffc4 	addi	r18,r18,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099750:	90bfffcc 	andi	r2,r18,65535
20099754:	103ff51e 	bne	r2,zero,2009972c <__flash_rwdata_start+0xffffe8c0>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
20099758:	01000034 	movhi	r4,0
2009975c:	2102b104 	addi	r4,r4,2756
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
20099760:	047ff084 	movi	r17,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
20099764:	0099e980 	call	20099e98 <alt_printf>
20099768:	00000c06 	br	2009979c <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
2009976c:	01000044 	movi	r4,1
20099770:	00998a40 	call	200998a4 <alt_busy_sleep>
20099774:	a0bfffc4 	addi	r2,r20,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
20099778:	10ffffcc 	andi	r3,r2,65535
2009977c:	1029883a 	mov	r20,r2
20099780:	183fc11e 	bne	r3,zero,20099688 <__flash_rwdata_start+0xffffe81c>
            {
                alt_printf("time out after 5 msec while writing extended" 
20099784:	01000034 	movhi	r4,0
20099788:	2102c304 	addi	r4,r4,2828
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
2009978c:	047ff084 	movi	r17,-62
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing extended" 
20099790:	0099e980 	call	20099e98 <alt_printf>
20099794:	00000106 	br	2009979c <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
20099798:	04407804 	movi	r17,480
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
}
2009979c:	8805883a 	mov	r2,r17
200997a0:	dfc00517 	ldw	ra,20(sp)
200997a4:	dd000417 	ldw	r20,16(sp)
200997a8:	dcc00317 	ldw	r19,12(sp)
200997ac:	dc800217 	ldw	r18,8(sp)
200997b0:	dc400117 	ldw	r17,4(sp)
200997b4:	dc000017 	ldw	r16,0(sp)
200997b8:	dec00604 	addi	sp,sp,24
200997bc:	f800283a 	ret
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
200997c0:	18c00104 	addi	r3,r3,4
200997c4:	18800037 	ldwio	r2,0(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
200997c8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
200997cc:	013fff84 	movi	r4,-2
200997d0:	2908703a 	and	r4,r5,r4
200997d4:	2001703a 	wrctl	status,r4
200997d8:	10800814 	ori	r2,r2,32
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
200997dc:	18800035 	stwio	r2,0(r3)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
200997e0:	80800317 	ldw	r2,12(r16)
200997e4:	10c00037 	ldwio	r3,0(r2)
200997e8:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
200997ec:	2801703a 	wrctl	status,r5
200997f0:	003fea06 	br	2009979c <__flash_rwdata_start+0xffffe930>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
200997f4:	01000034 	movhi	r4,0
200997f8:	21028c04 	addi	r4,r4,2608
				" for storing descriptor\n");
            return -ETIME;
200997fc:	047ff084 	movi	r17,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
20099800:	0099e980 	call	20099e98 <alt_printf>
20099804:	003fe506 	br	2009979c <__flash_rwdata_start+0xffffe930>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
20099808:	047fffc4 	movi	r17,-1
2009980c:	003fe306 	br	2009979c <__flash_rwdata_start+0xffffe930>

20099810 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
20099810:	00800034 	movhi	r2,0
20099814:	108ab904 	addi	r2,r2,10980
20099818:	10800017 	ldw	r2,0(r2)
2009981c:	10001d26 	beq	r2,zero,20099894 <alt_alarm_start+0x84>
  {
    if (alarm)
20099820:	20001e26 	beq	r4,zero,2009989c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
20099824:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
20099828:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
2009982c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099830:	00bfff84 	movi	r2,-2
20099834:	1884703a 	and	r2,r3,r2
20099838:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
2009983c:	00800034 	movhi	r2,0
20099840:	108ab804 	addi	r2,r2,10976
20099844:	10800017 	ldw	r2,0(r2)
20099848:	11800044 	addi	r6,r2,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
2009984c:	314b883a 	add	r5,r6,r5
20099850:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
20099854:	28800c36 	bltu	r5,r2,20099888 <alt_alarm_start+0x78>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
20099858:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009985c:	00800034 	movhi	r2,0
20099860:	108a9904 	addi	r2,r2,10852
  entry->next     = list->next;
20099864:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
20099868:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
2009986c:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
20099870:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
20099874:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
20099878:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
2009987c:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
20099880:	0005883a 	mov	r2,zero
20099884:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
20099888:	00800044 	movi	r2,1
2009988c:	20800405 	stb	r2,16(r4)
20099890:	003ff206 	br	2009985c <__flash_rwdata_start+0xffffe9f0>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
20099894:	00bfde84 	movi	r2,-134
20099898:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
2009989c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
200998a0:	f800283a 	ret

200998a4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
200998a4:	0140c7f4 	movhi	r5,799
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
200998a8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
200998ac:	294e0c44 	addi	r5,r5,14385
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
200998b0:	dc000015 	stw	r16,0(sp)
200998b4:	dfc00115 	stw	ra,4(sp)
200998b8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
200998bc:	0086c280 	call	20086c28 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
200998c0:	10001226 	beq	r2,zero,2009990c <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
200998c4:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
200998c8:	013f3874 	movhi	r4,64737
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
200998cc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
200998d0:	2131f3c4 	addi	r4,r4,-14385
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
200998d4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
200998d8:	297fffc4 	addi	r5,r5,-1
200998dc:	283ffe1e 	bne	r5,zero,200998d8 <__flash_rwdata_start+0xffffea6c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
200998e0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
200998e4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
200998e8:	18bffb16 	blt	r3,r2,200998d8 <__flash_rwdata_start+0xffffea6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
200998ec:	84000a64 	muli	r16,r16,41
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
200998f0:	843fffc4 	addi	r16,r16,-1
200998f4:	803ffe1e 	bne	r16,zero,200998f0 <__flash_rwdata_start+0xffffea84>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
200998f8:	0005883a 	mov	r2,zero
200998fc:	dfc00117 	ldw	ra,4(sp)
20099900:	dc000017 	ldw	r16,0(sp)
20099904:	dec00204 	addi	sp,sp,8
20099908:	f800283a 	ret
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
2009990c:	84000a64 	muli	r16,r16,41
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
20099910:	843fffc4 	addi	r16,r16,-1
20099914:	043ffe16 	blt	zero,r16,20099910 <__flash_rwdata_start+0xffffeaa4>
20099918:	003ff706 	br	200998f8 <__flash_rwdata_start+0xffffea8c>

2009991c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
2009991c:	20000a26 	beq	r4,zero,20099948 <alt_dev_llist_insert+0x2c>
20099920:	20800217 	ldw	r2,8(r4)
20099924:	10000826 	beq	r2,zero,20099948 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
20099928:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
2009992c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
20099930:	0005883a 	mov	r2,zero
  entry->next     = list->next;
20099934:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
20099938:	28c00017 	ldw	r3,0(r5)
2009993c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
20099940:	29000015 	stw	r4,0(r5)
20099944:	f800283a 	ret
20099948:	00800034 	movhi	r2,0
2009994c:	108a9604 	addi	r2,r2,10840
20099950:	10800017 	ldw	r2,0(r2)
20099954:	10000926 	beq	r2,zero,2009997c <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
20099958:	deffff04 	addi	sp,sp,-4
2009995c:	dfc00015 	stw	ra,0(sp)
20099960:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
20099964:	00c00584 	movi	r3,22
20099968:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
2009996c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
20099970:	dfc00017 	ldw	ra,0(sp)
20099974:	dec00104 	addi	sp,sp,4
20099978:	f800283a 	ret
2009997c:	00800034 	movhi	r2,0
20099980:	108ab004 	addi	r2,r2,10944
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
20099984:	00c00584 	movi	r3,22
20099988:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
2009998c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
20099990:	f800283a 	ret

20099994 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
20099994:	defffc04 	addi	sp,sp,-16
20099998:	dc800215 	stw	r18,8(sp)
2009999c:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200999a0:	048802b4 	movhi	r18,8202
200999a4:	040802b4 	movhi	r16,8202
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
200999a8:	dfc00315 	stw	ra,12(sp)
200999ac:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200999b0:	8428c604 	addi	r16,r16,-23784
200999b4:	94a8c704 	addi	r18,r18,-23780
200999b8:	84800936 	bltu	r16,r18,200999e0 <_do_ctors+0x4c>
200999bc:	84a5c83a 	sub	r18,r16,r18
200999c0:	9024d0ba 	srli	r18,r18,2
200999c4:	0023883a 	mov	r17,zero
200999c8:	94800044 	addi	r18,r18,1
        (*ctor) (); 
200999cc:	80800017 	ldw	r2,0(r16)
200999d0:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200999d4:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
200999d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
200999dc:	8cbffb1e 	bne	r17,r18,200999cc <__flash_rwdata_start+0xffffeb60>
        (*ctor) (); 
}
200999e0:	dfc00317 	ldw	ra,12(sp)
200999e4:	dc800217 	ldw	r18,8(sp)
200999e8:	dc400117 	ldw	r17,4(sp)
200999ec:	dc000017 	ldw	r16,0(sp)
200999f0:	dec00404 	addi	sp,sp,16
200999f4:	f800283a 	ret

200999f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
200999f8:	defffc04 	addi	sp,sp,-16
200999fc:	dc800215 	stw	r18,8(sp)
20099a00:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20099a04:	048802b4 	movhi	r18,8202
20099a08:	040802b4 	movhi	r16,8202
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
20099a0c:	dfc00315 	stw	ra,12(sp)
20099a10:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20099a14:	8428c604 	addi	r16,r16,-23784
20099a18:	94a8c704 	addi	r18,r18,-23780
20099a1c:	84800936 	bltu	r16,r18,20099a44 <_do_dtors+0x4c>
20099a20:	84a5c83a 	sub	r18,r16,r18
20099a24:	9024d0ba 	srli	r18,r18,2
20099a28:	0023883a 	mov	r17,zero
20099a2c:	94800044 	addi	r18,r18,1
        (*dtor) (); 
20099a30:	80800017 	ldw	r2,0(r16)
20099a34:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20099a38:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
20099a3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
20099a40:	8cbffb1e 	bne	r17,r18,20099a30 <__flash_rwdata_start+0xffffebc4>
        (*dtor) (); 
}
20099a44:	dfc00317 	ldw	ra,12(sp)
20099a48:	dc800217 	ldw	r18,8(sp)
20099a4c:	dc400117 	ldw	r17,4(sp)
20099a50:	dc000017 	ldw	r16,0(sp)
20099a54:	dec00404 	addi	sp,sp,16
20099a58:	f800283a 	ret

20099a5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20099a5c:	defffb04 	addi	sp,sp,-20
20099a60:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
20099a64:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
20099a68:	dcc00315 	stw	r19,12(sp)
20099a6c:	dc800215 	stw	r18,8(sp)
20099a70:	dc400115 	stw	r17,4(sp)
20099a74:	dfc00415 	stw	ra,16(sp)
20099a78:	2823883a 	mov	r17,r5
20099a7c:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
20099a80:	008abd00 	call	2008abd0 <strlen>
20099a84:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20099a88:	8c00031e 	bne	r17,r16,20099a98 <alt_find_dev+0x3c>
20099a8c:	00000906 	br	20099ab4 <alt_find_dev+0x58>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
20099a90:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
20099a94:	8c000726 	beq	r17,r16,20099ab4 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
20099a98:	81000217 	ldw	r4,8(r16)
20099a9c:	980b883a 	mov	r5,r19
20099aa0:	900d883a 	mov	r6,r18
20099aa4:	008a5f80 	call	2008a5f8 <memcmp>
20099aa8:	103ff91e 	bne	r2,zero,20099a90 <__flash_rwdata_start+0xffffec24>
    {
      /* match found */

      return next;
20099aac:	8005883a 	mov	r2,r16
20099ab0:	00000106 	br	20099ab8 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
20099ab4:	0005883a 	mov	r2,zero
}
20099ab8:	dfc00417 	ldw	ra,16(sp)
20099abc:	dcc00317 	ldw	r19,12(sp)
20099ac0:	dc800217 	ldw	r18,8(sp)
20099ac4:	dc400117 	ldw	r17,4(sp)
20099ac8:	dc000017 	ldw	r16,0(sp)
20099acc:	dec00504 	addi	sp,sp,20
20099ad0:	f800283a 	ret

20099ad4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
20099ad4:	0009883a 	mov	r4,zero
20099ad8:	01440004 	movi	r5,4096
20099adc:	009a1301 	jmpi	2009a130 <alt_icache_flush>

20099ae0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
20099ae0:	0099b7c1 	jmpi	20099b7c <alt_iic_isr_register>

20099ae4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099ae4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099ae8:	00bfff84 	movi	r2,-2
20099aec:	2084703a 	and	r2,r4,r2
20099af0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
20099af4:	00800034 	movhi	r2,0
20099af8:	108ab404 	addi	r2,r2,10960
20099afc:	00c00044 	movi	r3,1
20099b00:	194a983a 	sll	r5,r3,r5
20099b04:	10c00017 	ldw	r3,0(r2)
20099b08:	28cab03a 	or	r5,r5,r3
20099b0c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20099b10:	10800017 	ldw	r2,0(r2)
20099b14:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099b18:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
20099b1c:	0005883a 	mov	r2,zero
20099b20:	f800283a 	ret

20099b24 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099b24:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099b28:	00bfff84 	movi	r2,-2
20099b2c:	2084703a 	and	r2,r4,r2
20099b30:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
20099b34:	00800034 	movhi	r2,0
20099b38:	108ab404 	addi	r2,r2,10960
20099b3c:	00ffff84 	movi	r3,-2
20099b40:	194a183a 	rol	r5,r3,r5
20099b44:	10c00017 	ldw	r3,0(r2)
20099b48:	28ca703a 	and	r5,r5,r3
20099b4c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
20099b50:	10800017 	ldw	r2,0(r2)
20099b54:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099b58:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
20099b5c:	0005883a 	mov	r2,zero
20099b60:	f800283a 	ret

20099b64 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
20099b64:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
20099b68:	00c00044 	movi	r3,1
20099b6c:	194a983a 	sll	r5,r3,r5
20099b70:	1144703a 	and	r2,r2,r5
}
20099b74:	1004c03a 	cmpne	r2,r2,zero
20099b78:	f800283a 	ret

20099b7c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
20099b7c:	00c007c4 	movi	r3,31
20099b80:	19401616 	blt	r3,r5,20099bdc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
20099b84:	defffe04 	addi	sp,sp,-8
20099b88:	dfc00115 	stw	ra,4(sp)
20099b8c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
20099b90:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
20099b94:	00ffff84 	movi	r3,-2
20099b98:	80c6703a 	and	r3,r16,r3
20099b9c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
20099ba0:	280490fa 	slli	r2,r5,3
20099ba4:	00c00034 	movhi	r3,0
20099ba8:	18cc3904 	addi	r3,r3,12516
20099bac:	1891883a 	add	r8,r3,r2
20099bb0:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
20099bb4:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20099bb8:	30000626 	beq	r6,zero,20099bd4 <alt_iic_isr_register+0x58>
20099bbc:	0099ae40 	call	20099ae4 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
20099bc0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
20099bc4:	dfc00117 	ldw	ra,4(sp)
20099bc8:	dc000017 	ldw	r16,0(sp)
20099bcc:	dec00204 	addi	sp,sp,8
20099bd0:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
20099bd4:	0099b240 	call	20099b24 <alt_ic_irq_disable>
20099bd8:	003ff906 	br	20099bc0 <__flash_rwdata_start+0xffffed54>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
20099bdc:	00bffa84 	movi	r2,-22
20099be0:	f800283a 	ret

20099be4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20099be4:	defffd04 	addi	sp,sp,-12
20099be8:	dc400115 	stw	r17,4(sp)
20099bec:	dc000015 	stw	r16,0(sp)
20099bf0:	2823883a 	mov	r17,r5
20099bf4:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
20099bf8:	01400044 	movi	r5,1
20099bfc:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
20099c00:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
20099c04:	0099cf40 	call	20099cf4 <open>

  if (old >= 0)
20099c08:	10000d16 	blt	r2,zero,20099c40 <alt_io_redirect+0x5c>
  {
    fd->dev      = alt_fd_list[old].dev;
20099c0c:	11c00324 	muli	r7,r2,12
20099c10:	00c00034 	movhi	r3,0
20099c14:	18c5bd04 	addi	r3,r3,5876
20099c18:	19cb883a 	add	r5,r3,r7
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099c1c:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c20:	2805883a 	mov	r2,r5

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099c24:	29800017 	ldw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099c28:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c2c:	29400117 	ldw	r5,4(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099c30:	19800315 	stw	r6,12(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099c34:	18800515 	stw	r2,20(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c38:	19400415 	stw	r5,16(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099c3c:	0097bd80 	call	20097bd8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
20099c40:	8809883a 	mov	r4,r17
20099c44:	000b883a 	mov	r5,zero
20099c48:	01807fc4 	movi	r6,511
20099c4c:	0099cf40 	call	20099cf4 <open>

  if (old >= 0)
20099c50:	10000d16 	blt	r2,zero,20099c88 <alt_io_redirect+0xa4>
  {
    fd->dev      = alt_fd_list[old].dev;
20099c54:	11400324 	muli	r5,r2,12
20099c58:	00c00034 	movhi	r3,0
20099c5c:	18c5bd04 	addi	r3,r3,5876
20099c60:	194d883a 	add	r6,r3,r5
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099c64:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c68:	3005883a 	mov	r2,r6

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099c6c:	31c00017 	ldw	r7,0(r6)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099c70:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c74:	31800117 	ldw	r6,4(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099c78:	19c00015 	stw	r7,0(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099c7c:	18800215 	stw	r2,8(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099c80:	19800115 	stw	r6,4(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099c84:	0097bd80 	call	20097bd8 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
20099c88:	8009883a 	mov	r4,r16
20099c8c:	01400044 	movi	r5,1
20099c90:	01807fc4 	movi	r6,511
20099c94:	0099cf40 	call	20099cf4 <open>

  if (old >= 0)
20099c98:	10001116 	blt	r2,zero,20099ce0 <alt_io_redirect+0xfc>
  {
    fd->dev      = alt_fd_list[old].dev;
20099c9c:	11400324 	muli	r5,r2,12
20099ca0:	00c00034 	movhi	r3,0
20099ca4:	18c5bd04 	addi	r3,r3,5876
20099ca8:	194d883a 	add	r6,r3,r5
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099cac:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099cb0:	3005883a 	mov	r2,r6

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099cb4:	31c00017 	ldw	r7,0(r6)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099cb8:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099cbc:	31800117 	ldw	r6,4(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
20099cc0:	19c00615 	stw	r7,24(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
20099cc4:	18800815 	stw	r2,32(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
20099cc8:	19800715 	stw	r6,28(r3)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
20099ccc:	dfc00217 	ldw	ra,8(sp)
20099cd0:	dc400117 	ldw	r17,4(sp)
20099cd4:	dc000017 	ldw	r16,0(sp)
20099cd8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
20099cdc:	0097bd81 	jmpi	20097bd8 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
20099ce0:	dfc00217 	ldw	ra,8(sp)
20099ce4:	dc400117 	ldw	r17,4(sp)
20099ce8:	dc000017 	ldw	r16,0(sp)
20099cec:	dec00304 	addi	sp,sp,12
20099cf0:	f800283a 	ret

20099cf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20099cf4:	defffa04 	addi	sp,sp,-24
20099cf8:	dc800215 	stw	r18,8(sp)
20099cfc:	2825883a 	mov	r18,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20099d00:	01400034 	movhi	r5,0
20099d04:	294a9204 	addi	r5,r5,10824
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
20099d08:	dcc00315 	stw	r19,12(sp)
20099d0c:	dc400115 	stw	r17,4(sp)
20099d10:	dc000015 	stw	r16,0(sp)
20099d14:	dfc00515 	stw	ra,20(sp)
20099d18:	dd000415 	stw	r20,16(sp)
20099d1c:	2023883a 	mov	r17,r4
20099d20:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
20099d24:	0099a5c0 	call	20099a5c <alt_find_dev>
20099d28:	1021883a 	mov	r16,r2
20099d2c:	10003e26 	beq	r2,zero,20099e28 <open+0x134>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
20099d30:	1009883a 	mov	r4,r2
20099d34:	009a0e00 	call	2009a0e0 <alt_get_fd>
20099d38:	1029883a 	mov	r20,r2
20099d3c:	10002d16 	blt	r2,zero,20099df4 <open+0x100>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099d40:	a1400324 	muli	r5,r20,12
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099d44:	00900034 	movhi	r2,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099d48:	00c00034 	movhi	r3,0
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099d4c:	10bfffc4 	addi	r2,r2,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099d50:	18c5bd04 	addi	r3,r3,5876
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099d54:	9084703a 	and	r2,r18,r2
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099d58:	28c9883a 	add	r4,r5,r3

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
20099d5c:	10900034 	orhi	r2,r2,16384
20099d60:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20099d64:	00800034 	movhi	r2,0
20099d68:	108a9104 	addi	r2,r2,10820
20099d6c:	11800017 	ldw	r6,0(r2)
20099d70:	21400017 	ldw	r5,0(r4)
20099d74:	1a400204 	addi	r9,r3,8
20099d78:	0011883a 	mov	r8,zero
20099d7c:	00000606 	br	20099d98 <open+0xa4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20099d80:	48800017 	ldw	r2,0(r9)
20099d84:	1000010e 	bge	r2,zero,20099d8c <open+0x98>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20099d88:	20c02e1e 	bne	r4,r3,20099e44 <open+0x150>
20099d8c:	18c00304 	addi	r3,r3,12
20099d90:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20099d94:	32000636 	bltu	r6,r8,20099db0 <open+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20099d98:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20099d9c:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
20099da0:	517ff726 	beq	r10,r5,20099d80 <__flash_rwdata_start+0xffffef14>
20099da4:	18c00304 	addi	r3,r3,12
20099da8:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
20099dac:	323ffa2e 	bgeu	r6,r8,20099d98 <__flash_rwdata_start+0xffffef2c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
20099db0:	80800317 	ldw	r2,12(r16)
20099db4:	10001a26 	beq	r2,zero,20099e20 <open+0x12c>
20099db8:	880b883a 	mov	r5,r17
20099dbc:	900d883a 	mov	r6,r18
20099dc0:	980f883a 	mov	r7,r19
20099dc4:	103ee83a 	callr	r2
20099dc8:	1007883a 	mov	r3,r2
20099dcc:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
20099dd0:	18002116 	blt	r3,zero,20099e58 <open+0x164>
  }
  
  /* return the reference upon success */

  return index;
}
20099dd4:	dfc00517 	ldw	ra,20(sp)
20099dd8:	dd000417 	ldw	r20,16(sp)
20099ddc:	dcc00317 	ldw	r19,12(sp)
20099de0:	dc800217 	ldw	r18,8(sp)
20099de4:	dc400117 	ldw	r17,4(sp)
20099de8:	dc000017 	ldw	r16,0(sp)
20099dec:	dec00604 	addi	sp,sp,24
20099df0:	f800283a 	ret
20099df4:	0521c83a 	sub	r16,zero,r20

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
20099df8:	a009883a 	mov	r4,r20
20099dfc:	0097bd80 	call	20097bd8 <alt_release_fd>
20099e00:	00800034 	movhi	r2,0
20099e04:	108a9604 	addi	r2,r2,10840
20099e08:	10800017 	ldw	r2,0(r2)
20099e0c:	10000f26 	beq	r2,zero,20099e4c <open+0x158>
20099e10:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
20099e14:	14000015 	stw	r16,0(r2)
    return -1;
20099e18:	00bfffc4 	movi	r2,-1
20099e1c:	003fed06 	br	20099dd4 <__flash_rwdata_start+0xffffef68>
20099e20:	a005883a 	mov	r2,r20
20099e24:	003feb06 	br	20099dd4 <__flash_rwdata_start+0xffffef68>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
20099e28:	8809883a 	mov	r4,r17
20099e2c:	009a0300 	call	2009a030 <alt_find_file>
20099e30:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
20099e34:	10000a1e 	bne	r2,zero,20099e60 <open+0x16c>
20099e38:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
20099e3c:	053fffc4 	movi	r20,-1
20099e40:	003fed06 	br	20099df8 <__flash_rwdata_start+0xffffef8c>
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
20099e44:	04000344 	movi	r16,13
20099e48:	003feb06 	br	20099df8 <__flash_rwdata_start+0xffffef8c>
20099e4c:	00800034 	movhi	r2,0
20099e50:	108ab004 	addi	r2,r2,10944
20099e54:	003fef06 	br	20099e14 <__flash_rwdata_start+0xffffefa8>
20099e58:	00e1c83a 	sub	r16,zero,r3
20099e5c:	003fe606 	br	20099df8 <__flash_rwdata_start+0xffffef8c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
20099e60:	1009883a 	mov	r4,r2
20099e64:	009a0e00 	call	2009a0e0 <alt_get_fd>
20099e68:	1029883a 	mov	r20,r2
20099e6c:	103fe116 	blt	r2,zero,20099df4 <__flash_rwdata_start+0xffffef88>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099e70:	a1000324 	muli	r4,r20,12
20099e74:	00800034 	movhi	r2,0
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099e78:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099e7c:	1085bd04 	addi	r2,r2,5876
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099e80:	18ffffc4 	addi	r3,r3,-1
20099e84:	110b883a 	add	r5,r2,r4
20099e88:	90c6703a 	and	r3,r18,r3
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
20099e8c:	2809883a 	mov	r4,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
20099e90:	28c00215 	stw	r3,8(r5)
20099e94:	003fc606 	br	20099db0 <__flash_rwdata_start+0xffffef44>

20099e98 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
20099e98:	defff304 	addi	sp,sp,-52
20099e9c:	dfc00915 	stw	ra,36(sp)
20099ea0:	df000815 	stw	fp,32(sp)
20099ea4:	ddc00715 	stw	r23,28(sp)
20099ea8:	dd800615 	stw	r22,24(sp)
20099eac:	dd400515 	stw	r21,20(sp)
20099eb0:	dd000415 	stw	r20,16(sp)
20099eb4:	dcc00315 	stw	r19,12(sp)
20099eb8:	dc800215 	stw	r18,8(sp)
20099ebc:	dc400115 	stw	r17,4(sp)
20099ec0:	dc000015 	stw	r16,0(sp)
20099ec4:	d9400a15 	stw	r5,40(sp)
20099ec8:	d9800b15 	stw	r6,44(sp)
20099ecc:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20099ed0:	04400944 	movi	r17,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
20099ed4:	2021883a 	mov	r16,r4
	va_list args;
	va_start(args, fmt);
20099ed8:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
20099edc:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
20099ee0:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
20099ee4:	048003c4 	movi	r18,15
                        if (digit <= 9)
20099ee8:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20099eec:	81000007 	ldb	r4,0(r16)
20099ef0:	20000526 	beq	r4,zero,20099f08 <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
20099ef4:	24401026 	beq	r4,r17,20099f38 <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20099ef8:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
20099efc:	009a0140 	call	2009a014 <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
20099f00:	81000007 	ldb	r4,0(r16)
20099f04:	203ffb1e 	bne	r4,zero,20099ef4 <__flash_rwdata_start+0xfffff088>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
20099f08:	dfc00917 	ldw	ra,36(sp)
20099f0c:	df000817 	ldw	fp,32(sp)
20099f10:	ddc00717 	ldw	r23,28(sp)
20099f14:	dd800617 	ldw	r22,24(sp)
20099f18:	dd400517 	ldw	r21,20(sp)
20099f1c:	dd000417 	ldw	r20,16(sp)
20099f20:	dcc00317 	ldw	r19,12(sp)
20099f24:	dc800217 	ldw	r18,8(sp)
20099f28:	dc400117 	ldw	r17,4(sp)
20099f2c:	dc000017 	ldw	r16,0(sp)
20099f30:	dec00d04 	addi	sp,sp,52
20099f34:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
20099f38:	80800047 	ldb	r2,1(r16)
20099f3c:	84000084 	addi	r16,r16,2
20099f40:	103ff126 	beq	r2,zero,20099f08 <__flash_rwdata_start+0xfffff09c>
            {
                if (c == '%')
20099f44:	14402926 	beq	r2,r17,20099fec <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
20099f48:	15402b26 	beq	r2,r21,20099ff8 <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
20099f4c:	15800b26 	beq	r2,r22,20099f7c <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
20099f50:	00c01cc4 	movi	r3,115
20099f54:	10ffe51e 	bne	r2,r3,20099eec <__flash_rwdata_start+0xfffff080>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
20099f58:	9f000017 	ldw	fp,0(r19)
20099f5c:	9cc00104 	addi	r19,r19,4

                    while(*s)
20099f60:	e1000007 	ldb	r4,0(fp)
20099f64:	203fe126 	beq	r4,zero,20099eec <__flash_rwdata_start+0xfffff080>
                      alt_putchar(*s++);
20099f68:	e7000044 	addi	fp,fp,1
20099f6c:	009a0140 	call	2009a014 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
20099f70:	e1000007 	ldb	r4,0(fp)
20099f74:	203ffc1e 	bne	r4,zero,20099f68 <__flash_rwdata_start+0xfffff0fc>
20099f78:	003fdc06 	br	20099eec <__flash_rwdata_start+0xfffff080>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
20099f7c:	9dc00017 	ldw	r23,0(r19)
20099f80:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
20099f84:	b8002026 	beq	r23,zero,2009a008 <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
20099f88:	b8bc002c 	andhi	r2,r23,61440
20099f8c:	07000704 	movi	fp,28
20099f90:	1000101e 	bne	r2,zero,20099fd4 <alt_printf+0x13c>
                        digit_shift -= 4;
20099f94:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
20099f98:	9704983a 	sll	r2,r18,fp
20099f9c:	15c4703a 	and	r2,r2,r23
20099fa0:	103ffc26 	beq	r2,zero,20099f94 <__flash_rwdata_start+0xfffff128>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20099fa4:	e03fd116 	blt	fp,zero,20099eec <__flash_rwdata_start+0xfffff080>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
20099fa8:	9704983a 	sll	r2,r18,fp
20099fac:	15c4703a 	and	r2,r2,r23
20099fb0:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
20099fb4:	a0800b36 	bltu	r20,r2,20099fe4 <alt_printf+0x14c>
                            c = '0' + digit;
20099fb8:	11000c04 	addi	r4,r2,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
20099fbc:	21003fcc 	andi	r4,r4,255
20099fc0:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20099fc4:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
20099fc8:	213fe004 	addi	r4,r4,-128
20099fcc:	009a0140 	call	2009a014 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
20099fd0:	e03fc616 	blt	fp,zero,20099eec <__flash_rwdata_start+0xfffff080>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
20099fd4:	9704983a 	sll	r2,r18,fp
20099fd8:	15c4703a 	and	r2,r2,r23
20099fdc:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
20099fe0:	a0bff52e 	bgeu	r20,r2,20099fb8 <__flash_rwdata_start+0xfffff14c>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
20099fe4:	110015c4 	addi	r4,r2,87
20099fe8:	003ff406 	br	20099fbc <__flash_rwdata_start+0xfffff150>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
20099fec:	8809883a 	mov	r4,r17
20099ff0:	009a0140 	call	2009a014 <alt_putchar>
20099ff4:	003fbd06 	br	20099eec <__flash_rwdata_start+0xfffff080>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
20099ff8:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
20099ffc:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
2009a000:	009a0140 	call	2009a014 <alt_putchar>
2009a004:	003fb906 	br	20099eec <__flash_rwdata_start+0xfffff080>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
2009a008:	01000c04 	movi	r4,48
2009a00c:	009a0140 	call	2009a014 <alt_putchar>
                        continue;
2009a010:	003fb606 	br	20099eec <__flash_rwdata_start+0xfffff080>

2009a014 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
2009a014:	00800034 	movhi	r2,0
2009a018:	108a8c04 	addi	r2,r2,10800
2009a01c:	10800017 	ldw	r2,0(r2)
2009a020:	11400217 	ldw	r5,8(r2)
2009a024:	0092f7c1 	jmpi	20092f7c <putc>

2009a028 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
2009a028:	000170fa 	wrctl	ienable,zero
2009a02c:	f800283a 	ret

2009a030 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009a030:	defffa04 	addi	sp,sp,-24
2009a034:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009a038:	05000034 	movhi	r20,0
2009a03c:	a50a9404 	addi	r20,r20,10832
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009a040:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
2009a044:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
2009a048:	dfc00515 	stw	ra,20(sp)
2009a04c:	dcc00315 	stw	r19,12(sp)
2009a050:	dc800215 	stw	r18,8(sp)
2009a054:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009a058:	85001626 	beq	r16,r20,2009a0b4 <alt_find_file+0x84>
2009a05c:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
2009a060:	04c00bc4 	movi	r19,47
2009a064:	00000806 	br	2009a088 <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009a068:	9185883a 	add	r2,r18,r6
2009a06c:	10800007 	ldb	r2,0(r2)
2009a070:	14c00126 	beq	r2,r19,2009a078 <alt_find_file+0x48>
2009a074:	1000021e 	bne	r2,zero,2009a080 <alt_find_file+0x50>
        !memcmp (next->name, name, len))
2009a078:	008a5f80 	call	2008a5f8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
2009a07c:	10001626 	beq	r2,zero,2009a0d8 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
2009a080:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
2009a084:	85000b26 	beq	r16,r20,2009a0b4 <alt_find_file+0x84>
  {
    len = strlen(next->name);
2009a088:	84400217 	ldw	r17,8(r16)
2009a08c:	8809883a 	mov	r4,r17
2009a090:	008abd00 	call	2008abd0 <strlen>
2009a094:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
2009a098:	8885883a 	add	r2,r17,r2
2009a09c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
2009a0a0:	8809883a 	mov	r4,r17
2009a0a4:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
2009a0a8:	14ffef1e 	bne	r2,r19,2009a068 <__flash_rwdata_start+0xfffff1fc>
    {
      len -= 1;
2009a0ac:	31bfffc4 	addi	r6,r6,-1
2009a0b0:	003fed06 	br	2009a068 <__flash_rwdata_start+0xfffff1fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
2009a0b4:	0005883a 	mov	r2,zero
}
2009a0b8:	dfc00517 	ldw	ra,20(sp)
2009a0bc:	dd000417 	ldw	r20,16(sp)
2009a0c0:	dcc00317 	ldw	r19,12(sp)
2009a0c4:	dc800217 	ldw	r18,8(sp)
2009a0c8:	dc400117 	ldw	r17,4(sp)
2009a0cc:	dc000017 	ldw	r16,0(sp)
2009a0d0:	dec00604 	addi	sp,sp,24
2009a0d4:	f800283a 	ret
    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
2009a0d8:	8005883a 	mov	r2,r16
2009a0dc:	003ff606 	br	2009a0b8 <__flash_rwdata_start+0xfffff24c>

2009a0e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
2009a0e0:	01800034 	movhi	r6,0
2009a0e4:	3185bd04 	addi	r6,r6,5876
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
2009a0e8:	0005883a 	mov	r2,zero
2009a0ec:	01c00804 	movi	r7,32
2009a0f0:	00000206 	br	2009a0fc <alt_get_fd+0x1c>
2009a0f4:	10800044 	addi	r2,r2,1
2009a0f8:	11c00b26 	beq	r2,r7,2009a128 <alt_get_fd+0x48>
2009a0fc:	10c00324 	muli	r3,r2,12
2009a100:	1987883a 	add	r3,r3,r6
  {
    if (!alt_fd_list[i].dev)
2009a104:	19400017 	ldw	r5,0(r3)
2009a108:	283ffa1e 	bne	r5,zero,2009a0f4 <__flash_rwdata_start+0xfffff288>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
2009a10c:	01400034 	movhi	r5,0
2009a110:	294a9104 	addi	r5,r5,10820

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
2009a114:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
2009a118:	28c00017 	ldw	r3,0(r5)
2009a11c:	1880030e 	bge	r3,r2,2009a12c <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
2009a120:	28800015 	stw	r2,0(r5)
      }
      rc = i;
      goto alt_get_fd_exit;
2009a124:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
2009a128:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
2009a12c:	f800283a 	ret

2009a130 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
2009a130:	00840004 	movi	r2,4096
2009a134:	1140012e 	bgeu	r2,r5,2009a13c <alt_icache_flush+0xc>
2009a138:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
2009a13c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009a140:	2005883a 	mov	r2,r4
2009a144:	2140092e 	bgeu	r4,r5,2009a16c <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
2009a148:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
2009a14c:	10800804 	addi	r2,r2,32
2009a150:	117ffd36 	bltu	r2,r5,2009a148 <__flash_rwdata_start+0xfffff2dc>
2009a154:	0104303a 	nor	r2,zero,r4
2009a158:	2885883a 	add	r2,r5,r2
2009a15c:	1004d17a 	srli	r2,r2,5
2009a160:	10800044 	addi	r2,r2,1
2009a164:	1004917a 	slli	r2,r2,5
2009a168:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
2009a16c:	210007cc 	andi	r4,r4,31
2009a170:	20000126 	beq	r4,zero,2009a178 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
2009a174:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
2009a178:	0000203a 	flushp
2009a17c:	f800283a 	ret

2009a180 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
2009a180:	213ffe84 	addi	r4,r4,-6
2009a184:	008003c4 	movi	r2,15
2009a188:	11001636 	bltu	r2,r4,2009a1e4 <alt_exception_cause_generated_bad_addr+0x64>
2009a18c:	200890ba 	slli	r4,r4,2
2009a190:	008802b4 	movhi	r2,8202
2009a194:	10a86904 	addi	r2,r2,-24156
2009a198:	2089883a 	add	r4,r4,r2
2009a19c:	20800017 	ldw	r2,0(r4)
2009a1a0:	1000683a 	jmp	r2
2009a1a4:	2009a1ec 	andhi	zero,r4,9863
2009a1a8:	2009a1ec 	andhi	zero,r4,9863
2009a1ac:	2009a1e4 	muli	zero,r4,9863
2009a1b0:	2009a1e4 	muli	zero,r4,9863
2009a1b4:	2009a1e4 	muli	zero,r4,9863
2009a1b8:	2009a1ec 	andhi	zero,r4,9863
2009a1bc:	2009a1e4 	muli	zero,r4,9863
2009a1c0:	2009a1e4 	muli	zero,r4,9863
2009a1c4:	2009a1ec 	andhi	zero,r4,9863
2009a1c8:	2009a1ec 	andhi	zero,r4,9863
2009a1cc:	2009a1e4 	muli	zero,r4,9863
2009a1d0:	2009a1ec 	andhi	zero,r4,9863
2009a1d4:	2009a1e4 	muli	zero,r4,9863
2009a1d8:	2009a1e4 	muli	zero,r4,9863
2009a1dc:	2009a1e4 	muli	zero,r4,9863
2009a1e0:	2009a1ec 	andhi	zero,r4,9863
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
2009a1e4:	0005883a 	mov	r2,zero
2009a1e8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
2009a1ec:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
2009a1f0:	f800283a 	ret

2009a1f4 <atexit>:
2009a1f4:	200b883a 	mov	r5,r4
2009a1f8:	000d883a 	mov	r6,zero
2009a1fc:	0009883a 	mov	r4,zero
2009a200:	000f883a 	mov	r7,zero
2009a204:	009a2081 	jmpi	2009a208 <__register_exitproc>

2009a208 <__register_exitproc>:
2009a208:	00800034 	movhi	r2,0
2009a20c:	defffa04 	addi	sp,sp,-24
2009a210:	108a8b04 	addi	r2,r2,10796
2009a214:	dc000315 	stw	r16,12(sp)
2009a218:	14000017 	ldw	r16,0(r2)
2009a21c:	dc400415 	stw	r17,16(sp)
2009a220:	dfc00515 	stw	ra,20(sp)
2009a224:	80805217 	ldw	r2,328(r16)
2009a228:	2023883a 	mov	r17,r4
2009a22c:	10003626 	beq	r2,zero,2009a308 <__register_exitproc+0x100>
2009a230:	10c00117 	ldw	r3,4(r2)
2009a234:	010007c4 	movi	r4,31
2009a238:	20c00e16 	blt	r4,r3,2009a274 <__register_exitproc+0x6c>
2009a23c:	1a400044 	addi	r9,r3,1
2009a240:	8800211e 	bne	r17,zero,2009a2c8 <__register_exitproc+0xc0>
2009a244:	18c00084 	addi	r3,r3,2
2009a248:	18c7883a 	add	r3,r3,r3
2009a24c:	18c7883a 	add	r3,r3,r3
2009a250:	12400115 	stw	r9,4(r2)
2009a254:	10c7883a 	add	r3,r2,r3
2009a258:	19400015 	stw	r5,0(r3)
2009a25c:	0005883a 	mov	r2,zero
2009a260:	dfc00517 	ldw	ra,20(sp)
2009a264:	dc400417 	ldw	r17,16(sp)
2009a268:	dc000317 	ldw	r16,12(sp)
2009a26c:	dec00604 	addi	sp,sp,24
2009a270:	f800283a 	ret
2009a274:	00880274 	movhi	r2,8201
2009a278:	10a78a04 	addi	r2,r2,-25048
2009a27c:	10002526 	beq	r2,zero,2009a314 <__register_exitproc+0x10c>
2009a280:	01006404 	movi	r4,400
2009a284:	d9400015 	stw	r5,0(sp)
2009a288:	d9800115 	stw	r6,4(sp)
2009a28c:	d9c00215 	stw	r7,8(sp)
2009a290:	0089e280 	call	20089e28 <malloc>
2009a294:	d9400017 	ldw	r5,0(sp)
2009a298:	d9800117 	ldw	r6,4(sp)
2009a29c:	d9c00217 	ldw	r7,8(sp)
2009a2a0:	10001c26 	beq	r2,zero,2009a314 <__register_exitproc+0x10c>
2009a2a4:	80c05217 	ldw	r3,328(r16)
2009a2a8:	10000115 	stw	zero,4(r2)
2009a2ac:	02400044 	movi	r9,1
2009a2b0:	10c00015 	stw	r3,0(r2)
2009a2b4:	80805215 	stw	r2,328(r16)
2009a2b8:	10006215 	stw	zero,392(r2)
2009a2bc:	10006315 	stw	zero,396(r2)
2009a2c0:	0007883a 	mov	r3,zero
2009a2c4:	883fdf26 	beq	r17,zero,2009a244 <__flash_rwdata_start+0xfffff3d8>
2009a2c8:	18d1883a 	add	r8,r3,r3
2009a2cc:	4211883a 	add	r8,r8,r8
2009a2d0:	1211883a 	add	r8,r2,r8
2009a2d4:	41802215 	stw	r6,136(r8)
2009a2d8:	01000044 	movi	r4,1
2009a2dc:	11806217 	ldw	r6,392(r2)
2009a2e0:	20c8983a 	sll	r4,r4,r3
2009a2e4:	310cb03a 	or	r6,r6,r4
2009a2e8:	11806215 	stw	r6,392(r2)
2009a2ec:	41c04215 	stw	r7,264(r8)
2009a2f0:	01800084 	movi	r6,2
2009a2f4:	89bfd31e 	bne	r17,r6,2009a244 <__flash_rwdata_start+0xfffff3d8>
2009a2f8:	11806317 	ldw	r6,396(r2)
2009a2fc:	3108b03a 	or	r4,r6,r4
2009a300:	11006315 	stw	r4,396(r2)
2009a304:	003fcf06 	br	2009a244 <__flash_rwdata_start+0xfffff3d8>
2009a308:	80805304 	addi	r2,r16,332
2009a30c:	80805215 	stw	r2,328(r16)
2009a310:	003fc706 	br	2009a230 <__flash_rwdata_start+0xfffff3c4>
2009a314:	00bfffc4 	movi	r2,-1
2009a318:	003fd106 	br	2009a260 <__flash_rwdata_start+0xfffff3f4>
